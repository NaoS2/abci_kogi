折れ線の線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
実数のサインを求める	math.sin(x)
データ列を100の位で丸める	ds.round(-2)
カデットブルーにヒストグラムの色をセットする	plt.hist(データ列, color='cadetblue')
nが負の数か	n < 0
列を配列にする	df[column].values
配列とリストの散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
文字列を左寄せにする	s.ljust(文字列幅)
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
＜オプション＞グラフの線種を実線に設定する	linestyle = 'solid'
二つの列を用いて破壊的にデータフレームを昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームのカラムが何年か調べる	df[col].dt.year
カンマによって文字列を分割し、、列挙する	s.split(',')
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
イテラブルと配列についての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
データフレームを各列と列の組み合わせ毎に分類して、最大値を求める	df.groupby([column, column2], as_index=False).max()
折れ線グラフの三角印の線幅をnにセットする	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
実数を複素数に変換する	complex(x)
二つの変数をそれぞれ定義する	x, y = i, j
折れ線グラフの星印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
散布図に赤い▲マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
データフレームをインデックスで昇順に整列する	df.sort_index(ascending=True)
データフレームの欠損値をxで置換する	df.fillna(x)
ヒストグラムを描画してその色をライトシアンにする	plt.hist(データ列, color='lightcyan')
折れ線グラフを描画してその色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
＜オプション＞ライトコーラルに色をセットする	color = 'lightcoral'
重なりを見やすくリストとデータ列についての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
折れ線グラフを描画してその色をカーキに変更する	plt.plot(データ列, データ列2, color='khaki')
TSVを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
配列とリストについて青い淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='b')
＜オプション＞セパレータをカンマにする	sep = ','
xを浮動小数点数型にする	float(x)
文字列を青色で出力する	print(f'\033[34m{value}\033[0m')
ヒストグラムの色をゴーストホワイトにセットする	plt.hist(データ列, color='ghostwhite')
黒い菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
データフレームを表示するときデータフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
CSVファイルファイル名が	filename.endswith('.csv')
プロットの色を色差別なくする	sns.set(pallete='colorblind')
グラフの目的を論文に設定する	sns.set(context='paper')
カラムの欠損値をxに設定する	ds.fillna(x)
数列とリストについての折れ線グラフを描画してその色をカラーコードにセットする	plt.plot(xdata, ydata, color=rgb)
イテラブルをイミュータブルな集合にする	frozenset(iterable)
データフレームを列で集計してそれぞれのグループ毎の分散を計算する	df.groupby(column).var()
散布図にカラーコードの▲マーカーを用いる	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
折れ線グラフの丸マーカーを青くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
データ列がどの程度分散しているか確認する	ds.var()
ファイルパスを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
データ列の欠損値を50パーセンタイルで埋める	ds.fillna(ds.median())
黒いバツマーカーをリストとデータ列の散布図に描画する	plt.plot(xdata, ydata, marker='x', c='k')
＜オプション＞グラフの色をダークターコイズにする	color = 'darkturquoise'
折れ線グラフを描画して、その色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
ヒストグラムを描画して、色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
折れ線グラフのスタイルを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
データフレームの先頭n行を抽出する	df.head(n)
データフレームの中の列をビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
赤色の右三角マーカーをデータ列とイテラブルについての散布図に描く	plt.plot(xdata, ydata, marker='>', c='r')
リストにリストを加え、拡張する	aList.extend(aList2)
線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
集合をイミュータブルに変換する	frozenset(aSet)
配列の行ごとの最大値	np.max(aArray, axis=1)
プラットホームがウィンドウズか	sys.platform.startswith('win32')
空の両端キュー	collections.deque()
辞書から項目名の値をエラーなく参照する	aDict.get(key, None)
データ列とリストについて散布図を描画してマーカーを▲に設定する	plt.plot(xdata, ydata, marker='^')
折れ線グラフの右三角印を赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
配列とリストについての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
オブジェクトのメモリビュー	memoryview(obj)
折れ線グラフを描画してその色をダークブルーに設定する	plt.plot(データ列, データ列2, color='darkblue')
日付データが木曜日かどうか調べる	aDate.weekday() == 3
文字列の先頭の余分な空白を取り除く	s.lstrip()
実数で数を除する	x / y
データフレームから重複する行を残さず、消す	df.drop_duplicates(keep=False)
カウンタ同士で交わりを求める	aCounter & aCounter2
多い順番にカウンタを列挙する	aCounter.most_common()
リストをヒストグラムを使って可視化する	plt.hist(aList)
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
リストと配列について散布図を描画する	plt.scatter(xdata, ydata)
カラーコードの星マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
黒い上三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
データフレームの名前リストで指定された列を削除する	df.drop(columns, axis=1)
プロットの色を全般的に色差別なくする	sns.set(pallete='colorblind')
データ列のNaNを最大値で埋める	ds.fillna(ds.max())
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
整数nがリストのどれか	n in aList
リストと数列で色差別ないグラフを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リストとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
ベクトルの次元数	aArray.ndim
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
nがn2より大きいかテストする	n > n2
リストを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
データ列とデータ列について破線を描画して、その色を暗いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
ヒストグラムを描画して、色をマゼンタに設定する	plt.hist(データ列, color='magenta')
カラムの各データ値の出現回数を求める	df[col].value_counts()
リストとリストについて破線グラフを描画して、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
数列とリストで明るいグラフを描画して線幅をnにする	plt.plot(xdata, ydata, linestyle='bright', color='r')
グラフのパレットを全般的に淡くする	sns.set(pallete='muted')
折れ線グラフを描画して、その色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフの三角印の線幅をnに変更する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
文字列の先頭を使う	s[0]
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
折れ線グラフを描画して、色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
ヒストグラムを描画してその色をライトコーラルにする	plt.hist(データ列, color='lightcoral')
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
折れ線グラフの色をホワイトに指定する	plt.plot(データ列, データ列2, color='white')
＜オプション＞タブを区切りで使用する	sep = '\t'
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
小さい順にデータフレームを'A'列と'B'列を用いてソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームの列の要約統計量	df[col].describe()
＜オプション＞ディープスカイブルーにグラフの色を指定する	color = 'deepskyblue'
色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
グラフの描画で淡い色を使う	sns.set(pallete='muted')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
散布図に赤色の大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c='r')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
xが1、もしくは2か調べる	x == 1 or x == 2
イテラブルから重複を取り除く	set(iterable)
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
＜オプション＞シエナに色を変更する	color = 'sienna'
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
実行結果を黄色にする	f'\033[33m{value}\033[0m'
データフレームの列と列をドロップする	df.drop([column, column2], axis=1)
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
＜オプション＞グラフの色を青緑に設定する	color = 'teal'
ヒストグラムを描画して、その色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
＜オプション＞文字コードをBOM付きにセットする	encoding = 'utf_8_sig'
パステル調のの折れ線グラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
カラーコードに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
折れ線にラベルを付ける	plt.plot(xdata, ydata, label=untitled)
折れ線グラフの透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
二つの関係が真部分集合か調べる	aSet < aSet2
フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
文字列の示す文字コードで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列を部分文字列で区切って文字列リストにする	s.split(sub)
カウンタからシーケンスをカウントして引く	aCounter.subtract(iterable)
折れ線グラフを描画して、色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
文字列を空白で区切って、文字列リストに変換する	s.split()
折れ線グラフの色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
赤い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
＜オプション＞グラフの色をチョコレートに設定する	color = 'chocolate'
＜オプション＞パールバイオレットレッド色を使う	color = 'palevioletred'
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列, データ列2, color='gainsboro')
行列と同じ大きさの空の行列を作成する	np.empty_like(aArray)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
淡いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
データフレームからランダムに一行を取り出す	df.sample()
非小文字が文字列中に含まれる	any(not c.islower() for c in s)
ヒストグラムを描画して、その色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
文字列が全て英数字か確認する	s.isalnum()
折れ線グラフを描画して、その色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
リストと配列についての散布図に黒い左三角マーカーを描く	plt.plot(xdata, ydata, marker='<', c='k')
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
深紅色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
モジュールを検索するパス	sys.path
線グラフを描画して、色をサーモンにセットする	plt.plot(データ列, データ列2, color='salmon')
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
＜オプション＞グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
ふたつの関係が真サブセットかどうか	aSet < aSet2
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの列の各データ値の出現回数を求める	df[col].value_counts()
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
プロットの描画でパステル調の色を用いる	sns.set(pallete='pastel')
赤い大バツマーカーをリストとイテラブルについての散布図に描画する	plt.plot(xdata, ydata, marker='X', c='r')
データ列を十の位で四捨五入する	ds.round(-1)
データ列の値をValueMapで変更する	ds.replace(ValueMap)
標準入力から1行だけ読み込む	sys.stdin.readline()
折れ線グラフを描画して、その色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
＜オプション＞区切りを使わない	sep = ''
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームのカラムの未入力値を最小値で置換する	df[col].fillna(df[col].min())
文字列が部分文字列で終了するか調べる	s.endswith(sub)
リストとリストについて破線グラフを描画して、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
データ列の未入力値を平均値で埋める	ds.fillna(ds.mean())
データフレームの各次元の大きさを調べる	df.shape
列を累積した列	itertools.accumulate(iterable, operator.mul)
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
nがリストの一つか調べる	n in aList
文字列が文字列リストのいづれか調べる	s in aStringList
nがn2と等しい	n == n2
折れ線グラフを描画して色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
オブジェクトにフィールドが存在するか確認する	hasattr(obj, プロパティ名)
＜オプション＞グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
＜オプション＞シャルトリューズ色を使う	color = 'chartreuse'
複数行対応としてパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
プログラムの実行を異常終了する	sys.exit(1)
小数点数のcos	math.cos(x)
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
データ列の未入力値を最大値に設定する	ds.fillna(ds.max())
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
predicateFuncが真とならないシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
＜オプション＞グラフの色をタンに設定する	color = 'tan'
日付データが火曜日か調べる	aDate.weekday() == 1
折れ線グラフの左三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
文字列の両端から空白を取り除く	s.strip()
カウンタの全数	aCounter.total()
ヒストグラムを描画して、その色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
既存の配列をベースにして全要素が初期値の配列を作成する	np.full_like(aArray, 初期値)
＜オプション＞トマトを使用する	color = 'tomato'
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
二つのデータフレームを縦に一つにする	pd.concat([df, df2], axis=0)
二つの変数を順にプリントする	print(value, value2)
データフレームから型を取り出す	df.select_dtypes(ty)
データ列を中央値でビンニングする	pd.qcut(ds, 2)
コマンド引数を列挙する	sys.argv[1:]
リストの末尾から要素を取り除く	aList.pop()
明るいグラフを数列とデータ列でプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞線種を破線に変更する	linestyle = 'dashed'
三２ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int16)
データ列とデータ列の散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
nが5の倍数	n % 5 == 0
＜オプション＞グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
nとn2の和	n + n2
キューが空	len(deq) == 0
データフレームの列を100の位で四捨五入する	df[col].round(-2)
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
折れ線グラフに描画して、印を▲印にする	plt.plot(データ列, データ列2, marker='^')
ヒストグラムを描画して、その色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
重複した行だけを抽出する	df[df.duplicated(keep=False)]
文字列がタプルの要素でないか調べる	element not in aTuple
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
散布図を赤い下三角マーカーで描画する	plt.plot(xdata, ydata, marker='v', c='r')
カウンタの最頻出な値	aCounter.most_common()[0]
文字列が全て大文字か	s.isupper()
スノー色の線グラフを描画する	plt.plot(データ列, データ列2, color='snow')
ヒストグラムを描画して、その色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
データ列が何曜日か見る	ds.dt.weekday_name
値を太字でプリントする	print(f'\033[1m{value}\033[0m')
集合から全ての要素を取り除く	aSet.clear()
ヒストグラムを描画して色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
改行で文字列を区切り、文字列リストに変換する	s.splitlines()
最大長nの双方向キューを作る	collections.deque(maxlen=n)
データフレームの列を正規表現でまとめて置き換える	df[col].replace(pattern, repl, regex=True)
複数カラムの散布図を一度に描画する	sns.pairplot(df[[column, column2, column3]])
文字列が正規表現にマッチさせる	re.match(pattern, s)
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
折れ線グラフの印を大バツにする	plt.plot(データ列, データ列2, marker='X')
折れ線グラフを描画してその色をコーンズシルクに指定する	plt.plot(データ列, データ列2, color='cornsilk')
ヒストグラムを描画して、色をダークサーモンにする	plt.hist(データ列, color='darksalmon')
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
自分自身をモジュールとして	sys.modules[__name__]
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
文字列中の大文字を小文字にする	s.lower()
線グラフを描画して、色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
折れ線グラフの色をパープルに変更する	plt.plot(データ列, データ列2, color='purple')
ファイルが存在するか	os.path.exists(filepath)
データフレームのカラムは何分か確認する	df[col].dt.minute
NULLに等しい値	None
小数点数の二進対数	math.log2(x)
数列をy座標、数列を横軸と指定して、折れ線グラフをプロットする	plt.plot(xdata, ydata)
実数のn乗を求める	x ** n
実数とyの斜辺	math.hypot(x, y)
リストとリストとして濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
データ列を折れ線グラフに描画して印を四角にする	plt.plot(データ列, データ列2, marker='s')
折れ線グラフを描画して、その色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
集合を更新不能な集合に変換する	frozenset(aSet)
ヒストグラムを描画してその色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
JSONファイルファイル名がか調べる	filename.endswith('.json')
＜オプション＞グラフの色をインディゴに設定する	color = 'indigo'
第２引数のファイルの名前	sys.argv[1]
折れ線グラフを描画して、その色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
タイムスタンプを使う	import time
n個の整数リスト	list(range(n))
ヒストグラムを描画して、その色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
要素が辞書の値に含まれていない	element not in aDict.values()
データフレームの各グループの標準偏差	df.groupby(column).std()
線グラフを描画して、色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
折れ線グラフを描画して、色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgray')
折れ線グラフの色をタンにセットする	plt.plot(データ列, データ列2, color='tan')
文字列の中のケースを無視してパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
＜オプション＞文字コードtextを使う	encoding = text
データフレームの中に存在する日付データと文字列の合計を数える	df.isin([value, value2]).sum()
データフレームの中の列と列に重複があれば、取り除く	df.drop_duplicates(subset=column)
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
タプルの最後からn番目以前の部分を取り出す	aTuple[:-n]
変数がマイナス無限大に近づく場合、数式の極限値を算出する	sympy.limit(e, z, -oo)
ファイルをバイナリ用にオープンして]fとする	f = open(filepath, mode='rb')
文字列の末尾からタブを消す	s.rstrip('\t')
文字列の右側から空白を取り除く	s.rstrip(' ')
タプルを反転する	reversed(aTuple)
プロットの凡例の位置を(x,y)に指定する	plt.legend(loc=(x, y))
明るいの折れ線の線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データ列の中に存在する文字列の合計を求める	ds.isin([value]).sum()
データフレームを'A'列で並べてNaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
折れ線グラフのマーカーを▽印にする	plt.plot(データ列, データ列2, marker='v')
セットからエラーなく要素を取り除く	aSet.discard(element)
ヒストグラムを描画して、色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
イテラブルから新しいカウンタを作成する	collections.Counter(iterable)
＜オプション＞暗い赤色を使う	color = 'darkred'
＜オプション＞スレートブルーにグラフの色を設定する	color = 'slateblue'
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
データフレームのカラムは何曜日か見る	df[col].dt.weekday_name
グラフをパステル調にする	sns.set(pallete='pastel')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
データフレームのリスト列の欠損値を最小値に変更する	df[aList].fillna(df[aList].min())
リストを横軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
列を等量でn個にビニングする	pd.qcut(ds, n)
データフレームを各列毎にグループ化し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
replにデータフレームの値を正規表現patternで変更する	df.replace(pattern, repl, regex=True)
ガンマ関数の値	math.gamma(x)
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列, データ列2, color='chartreuse')
シーケンスのイミュータブルなセット	frozenset(iterable)
＜オプション＞エンコーディングをSJISに設定する	encoding = 'shift_jis'
データフレームを列によって集計して分散を求める	df.groupby(column).var()
線グラフを描画してその色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
文字列が空白文字か	s.isspace()
文字列を太文字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
配列を2次元1行に変形する	aArray.reshape(1, -1)
折れ線グラフを描画してその色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
＜オプション＞スチールブルー色を使う	color = 'steelblue'
パステル調の色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='pastel')
＜オプション＞ダークカーキ色を使用する	color = 'darkkhaki'
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
こんにちは世界を出力する	print('Hello World')
nがn2より小さいか	n < n2
データ列とリストについて散布図を描画し、、ダイアモンドマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='D', c=rgb)
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
データ列の未入力値を直後の値に指定する	ds.fillna(method='bfill')
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
カウンタの値を増やす	aCounter[element] += 1
棒グラフを積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
項目名がマップに存在しない時要素を追加する	aDict.setdefault(key, element)
アリスブルーにヒストグラムの色をする	plt.hist(データ列, color='aliceblue')
散布図を赤い大バツマーカーで描く	plt.plot(xdata, ydata, marker='X', c='r')
変数名をキーとして、辞書	dict(name=element)
線グラフを描画して色をコーンズシルクに変更する	plt.plot(データ列, データ列2, color='cornsilk')
マップの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
データフレームのリスト列の相関行列	df[aList].corr()
データフレームの欠損値を後の行の値に変更する	df.fillna(method='bfill')
データフレームの列が文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を算出する	df.groupby([column, column2], as_index=False).max()
折れ線グラフの下三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
小数点数の自然対数	math.log(x)
オブジェクトのイテレータ	iter(obj)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
二つの列の値でデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
ヒストグラムをstartからendまでの区間で描画する	plt.hist(データ列, range=(start, end))
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
＜オプション＞グラフの色をミントクリームに設定する	color = 'mintcream'
データフレームの列の欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
リストのn番目に文字列を挿入する	aList.insert(n, element)
文字列の先頭から空白を取り除く	s.lstrip()
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
＜オプション＞菱形マーカーを描画する	marker = 'D'
線グラフを描画して、色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
列を集合に追加する	aSet.update(iterable)
文字列の色でリストとリストの折れ線グラフをプロットする	plt.plot(xdata, ydata, color=s)
＜オプション＞グラフの色を暗い赤に指定する	color = 'darkred'
ヒストグラムを実線を用いて描画する	plt.hist(データ列, linestyle='solid')
＜オプション＞ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
折れ線グラフのバツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
二つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
マップの項目名を列挙する	aDict.keys()
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
線グラフを描画してその色をサドルブラウンに指定する	plt.plot(データ列, データ列2, color='saddlebrown')
データフレームのカラムの時	df[col].dt.hour
データ列を四捨五入して、整数にする	ds.round().astype(int)
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
実数の逆正接を求める	math.atan(x)
縦方向に二つのデータフレームを合体させる	pd.concat([df, df2], axis=0)
＜オプション＞グラフの色を淡い茶色に設定する	color = 'tan'
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
文字列中に部分文字列が含まれるか調べる	sub in s
nからn2の範囲	range(n, n2)
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
実数を浮動小数点数で割って、切り捨てる	x // y
３つの数値をプリントする	print(value, value2, value3)
集合のすべての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
折れ線グラフを描画してその色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
破線の色を色差別ないに変更する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
数列とイテラブルで暗いの折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
今日が月曜日か調べる	datetime.datetime.today().weekday() == 0
値を集合から取り除く	aSet.remove(element)
文字列がタプルの要素でないかどうか	element not in aTuple
値は集合のメンバーかどうか	element in aSet
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
キュー中の数値のインデックス	deq.index(element)
リストとリストについての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
データフレームの列の未入力値を最小値に設定する	df[col].fillna(df[col].min())
＜オプション＞オリーブにグラフの色を設定する	color = 'olive'
折れ線グラフの色をインディゴに変更する	plt.plot(データ列, データ列2, color='indigo')
横棒グラフの色をカラーコードにする	plt.barh(ラベル列, データ列, color=rgb)
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
折れ線グラフを描画して、その色をオールドレースに指定する	plt.plot(データ列, データ列2, color='oldlace')
二つのオブジェクトが等しいか調べる	obj == obj2
データフレームのリストカラムの分散を求める	df[aList].var()
折れ線グラフを描画して色をパープルに変更する	plt.plot(データ列, データ列2, color='purple')
線グラフを描画して、その色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
二つの集合が共通の要素を持たないかどうかテストする	aSet.isdisjoint(aSet2)
＜オプション＞改行コードをUNIXに設定する	newline = '\n'
データフレームのカラムのモード	df[col].mode()
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
文字列中に部分文字列がいくつか存在するかカウントする	s.count(sub)
タプルからキーの値をエラーなく得る	aDict.get(key, None)
要素一つのタプルを得る	(element,)
イテラブルを文字列リストに変換して、タブによってつなげる	'\t'.join(map(str, iterable))
整数nの16進表現を見る	hex(n)
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
マッピングに要素をキーとして加える	aDict[key] = element
'A'列の値でデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
データ列を折れ線グラフに描画してマーカーを▽印にする	plt.plot(データ列, データ列2, marker='v')
データ列の値がNaN	ds.isna()
リストの合計値	sum(aList)
データフレームのどの値が頻出か確認する	df.mode()
濃いを描画し、、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
＜オプション＞ディープスカイブルーにグラフの色を変更する	color = 'deepskyblue'
データ列が何時か調べる	ds.dt.hour
イテラブルとリストについての散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
配列の行ごとの平均	np.mean(aArray, axis=1)
データ列の中に文字列が存在するかどうか	ds.isin([value])
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
文字列内にひとつでも英字が含まれるかどうか	any(c.isalpha() for c in s)
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
配列を平坦化する	aArray.flatten()
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
＜オプション＞ラベンダーにグラフの色を設定する	color = 'lavender'
＜オプション＞グリーンイエローにグラフの色を指定する	color = 'greenyellow'
保存するカンマ区切りのファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
線グラフを描画して、色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
列の分散	ds.var()
折れ線グラフを描画して、色を茶色に指定する	plt.plot(データ列, データ列2, color='brown')
オブジェクトは数値か調べる	isinstance(obj, (int,float))
文字列の中の複数行対応として正規表現によるすべてのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
＜オプション＞ホットピンクにグラフの色をセットする	color = 'hotpink'
折れ線グラフのマーカーを▲にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフにサイズnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
日付時刻データは何月か知る	aDatetime.month
折れ線グラフの大バツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
折れ線グラフにポイントマーカーを使う	plt.plot(データ列, データ列2, marker='.')
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列, データ列2, color='lightblue')
柱状図の描画して正規化する	plt.hist(データ列, density=True)
イテラブルとデータ列についての散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
マップの項目名一覧を得る	list(aDict)
データフレームは正規分布からどの程度尖っているか見る	df.skew()
データフレームのリスト列を100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
実線にヒストグラムの線のスタイルを設定する	plt.hist(データ列, linestyle='solid')
辞書のキーの一覧	aDict.keys()
辞書のキーとその値をペアとして取り出す	aDict.items()
リストとデータ列を用いてパステル調のを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
＜オプション＞ディープスカイブルー色を使う	color = 'deepskyblue'
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
リストの移り変わりを折れ線にプロットする	plt.plot(range(len(xdata)), xdata)
タプルのコピー	dict(aDict)
線グラフを描画して、色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
実行結果を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
日付時刻データが火曜日か確認する	aDatetime.weekday() == 1
要素はマップの値として含まれている	element in aDict.values()
＜オプション＞グリーンイエロー色を使う	color = 'greenyellow'
表データを複数の列によってによって破壊的に並べる	df.sort_values(by=column, inplace=True)
整数nをn2分の一にする	n //= n2
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
折れ線グラフを描画して、その色をオレンジレッドに指定する	plt.plot(データ列, データ列2, color='orangered')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
両端キューの右側にイテラブルの各要素を追加する	deq.extend(iterable)
＜オプション＞ターコイズにグラフの色を設定する	color = 'turquoise'
折れ線グラフに緑色のポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
日付データが日付データより早いか調べる	aDate < aDate2
整数nがセットのひとつ	n in aSet
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
リストを四分位数ごとにビニングする	pd.qcut(aList, 4)
ヒストグラムの色をパレットトルコイズにセットする	plt.hist(データ列, color='paleturquoise')
辞書のキーとその項目を列挙する	aDict.items()
データフレームのリストカラムの中に日付データがあるかどうか	df[aList].isin([value])
折れ線グラフに黄色い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
リストの変化を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
行列の行ごとの最大値	np.max(aArray, axis=1)
破線グラフの色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
ヒストグラムを描画してその色をブランチドアーモンドにセットする	plt.hist(データ列, color='blanchedalmond')
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
線グラフを描画して、色を青に設定する	plt.plot(データ列, データ列2, color='blue')
リストとリストとしてパステル調のを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
折れ線グラフに線幅nのクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
データフレームを'A'列で昇順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
空のセット	set()
ポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.')
＜オプション＞グリーンイエロー色を用いる	color = 'greenyellow'
データフレームのリスト列の標本標準偏差	df[aList].std()
散布図に下三角マーカーを使う	plt.plot(xdata, ydata, marker='v')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
折れ線グラフを描画して、その色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
バイナリモードでファイルを開く]	open(filepath, mode='rb')
データフレームを各列毎にグループ化し、、列の最大値を求める	df.groupby(column)[column2].max()
データフレームのリストカラムのNaNを最小値で埋める	df[aList].fillna(df[aList].min())
暗い色のマーカーとして散布図を重なりを見やすくプロットする	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームのカラムと列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
データ列が何日か見る	ds.dt.day
データフレームのNaNを直後の値で置換する	df.fillna(method='bfill')
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
＜オプション＞色をスレートブルーに指定する	color = 'slateblue'
グラフで用いるタイトルをuntitledに設定する	plt.title(untitled)
行列の演算を行う	import numpy as np
星マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='*')
ベクトルの累積和	np.cumsum(aArray)
nという名前のシートをエクセルデータファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
数式の簡単化を行う	sympy.sympify(e)
＜オプション＞先頭カラムをインデックスにセットする	index_col = 0
データフレームのリストカラムの欠損値を50パーセンタイルに設定する	df[aList].fillna(df[aList].median())
ファイルからnバイト読み込む	f.read(n)
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
リストとリストについて散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
ヒストグラムの色をコーンフラワーブルーにセットする	plt.hist(データ列, color='cornflowerblue')
折れ線グラフを描画して、その色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
n個の数値イテラブル	range(n)
度数分布図でデータフレームの列を可視化する	plt.hist(df[column])
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
辞書の項目名の一覧を得る	aDict.keys()
＜オプション＞マーカーをバツに変更する	marker = 'x'
線グラフを描画して、色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
最初のカテゴリーを無視してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
線グラフの色をモカシンに指定する	plt.plot(データ列, データ列2, color='moccasin')
＜オプション＞サーモンにグラフの色を指定する	color = 'salmon'
文字列が小文字か判定する	s.islower()
データフレームからカラムを４つ選択する	df[[column, column2, column3, column4]]
ヒストグラムを描画してその色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
カレントワーキングディレクトリ	os.getcwd()
リストと数列リストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
＜オプション＞スチールブルー色を用いる	color = 'steelblue'
淡い色のマーカーを散布図に使う	plt.plot(xdata, ydata, c='muted')
散布図にカラーコードの丸マーカーを使用する	plt.plot(xdata, ydata, marker='o', c=rgb)
線グラフを描画して、色をホットピンクに指定する	plt.plot(データ列, データ列2, color='hotpink')
部分文字列を文字列中から探す	s.find(sub)
黒いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
ヒストグラムを描画して、色をライムに指定する	plt.hist(データ列, color='lime')
データフレームの行を範囲指定して抽出する	df[start:end]
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
データフレームを'A'列と'B'列の値でグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
値の出力を改行しないで行う	print(value, end='')
散布図を大バツマーカーで描画する	plt.plot(xdata, ydata, marker='X')
実数をn乗する	x ** n
＜オプション＞ピーチパフにグラフの色を設定する	color = 'peachpuff'
緑色の右三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
既存の行列を元に全要素が1のベクトルを作成する	np.ones_like(aArray)
nを切り捨てながら半分にする	n //= 2
異なる列をキーとして2つの表を左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
ヒストグラムを描画してその色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
ヒストグラムを描画して、色を真紅に設定する	plt.hist(データ列, color='crimson')
カラムの中に日付データが含まれるか調べる	ds.isin([value])
文字列が文字列リストに含まれるか調べる	s in aStringList
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
パステル調の色のマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, c='pastel')
数列とリストとして明るいグラフを描いて線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
配列のヒストグラムを描く	plt.hist(aArray)
表データを複数の列で並べる	df.sort_values(by=column)
文字列内にひとつでも大文字が含まれるかどうか	any(c.isupper() for c in s)
タプルの項目数	len(aDict)
折れ線グラフを描画して色をフクシアに指定する	plt.plot(データ列, データ列2, color='fuchsia')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
データフレームを関数の値によって分類して、列挙する	[(name, group) for name, group in df.groupby(関数)]
リストとイテラブルについて散布図を描画して色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
平均でカラムのNaNを置き換える	ds.fillna(ds.mean())
イテラブルとタプルのデカルト積	itertools.product(iterable, iterable2)
部分文字列が文字列の開始位置からと終了位置の間に含まれる	s.find(sub, start, end) != -1
＜オプション＞グラフの色をマゼンタに設定する	color = 'magenta'
＜オプション＞色をライトシアンに指定する	color = 'lightcyan'
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
十六進数字を全部求める	string.hexdigits
データフレームを列によって整列する	df.sort_values(by=column)
データフレームがどの程度分散しているか見る	df.var()
折れ線グラフを描画して、色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
文字列は全て十進数字かどうか	s.isdecimal()
正規表現をあらかじめコンパイルする	re.compile(pattern)
折れ線グラフを描画して、その色をミスティローズにする	plt.plot(データ列, データ列2, color='mistyrose')
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
ファイルパスから入力ストリームを使う	open(filepath)
xを浮動小数点数型に変換する	float(x)
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
データフレームを'A'列と'B'列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
データフレームを表示するとき、表示する行数をnに設定する	pd.set_option('display.max_rows', n)
折れ線にラベルを設定する	plt.plot(xdata, ydata, label=untitled)
データフレームの第三四分位数	df.quantile(0.75)
行列演算をする	import numpy as np
オブジェクトはリストクラス	isinstance(obj, list)
2つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
折れ線グラフを描画して、その色をロイヤルブルーに指定する	plt.plot(データ列, データ列2, color='royalblue')
赤い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
＜オプション＞グラフの色をバリーウッドに設定する	color = 'burlywood'
文字列がタイトルケースか	s.istitle()
折れ線グラフを描画して、色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフの色をダークターコイズに指定する	plt.plot(データ列, データ列2, color='darkturquoise')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
配列とリストについて色差別ない色の折れ線グラフをプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
配列と配列について破線グラフを描画して、色を濃いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
リスト内の要素が全て真か	all(aList)
データフレームの列がどの程度分散しているか見る	df[col].var()
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
＜オプション＞インデックスを連番に減らす	index_col = None
列によってデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
＜オプション＞スラグレー色を使用する	color = 'slategray'
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
nが3で割り切れる	n % 3 == 0
ティール色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
本日のタイムスタンプ	datetime.datetime.today()
折れ線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフの四角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
青色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
データ列とデータ列について散布図を描画してマーカーを右三角に変更する	plt.plot(xdata, ydata, marker='>')
データフレームのカラムのどの値が頻出か見る	df[col].mode()
データフレームから破壊的に重複したデータを削除する	df.drop_duplicates(inplace=True)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
データフレームから重複を削除する	df.drop_duplicates()
赤い▲マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='r')
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
明るい色でリストについてのヒストグラムを描く	plt.hist(xdata, color='bright')
折れ線グラフの上三角マーカーを赤色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
＜オプション＞▲マーカーを使う	marker = '^'
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
リストを文字列に変換して'改行で結合する	'\n'.join(map(str, iterable))
散布図に明るい色のマーカーを用いる	plt.plot(xdata, ydata, c='bright')
n÷n2	n / n2
データフレームを列で小さい順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストとリストのカラーコードの淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
行列の次元の数	aArray.ndim
データフレームのカラムが何時か確認する	df[col].dt.hour
文字列を改行で分割する	s.splitlines()
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
データフレームを2つの列によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
nのn2乗	n ** n2
データフレームをJSONLファイルにBOM付きで書き込む	df.to_csv(filename, encoding='utf_8_sig')
部分文字列が文字列の開始位置からと終了位置までの範囲に含まれないかどうか	s.find(sub, start, end) == -1
ヒストグラムを描画してその色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
行列の行ごとの最小	np.min(aArray, axis=1)
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
リストとリストの破線グラフをプロットしてその色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
リストとイテラブルの破線グラフを描画して、色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
リストをビン数nを使ってビン分割する	pd.cut(aList, n)
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
実数で実数を割る	x / y
部分文字列が文字列の開始位置番目からと終了位置番目までの間に存在しないかどうか調べる	s.find(sub, start, end) == -1
文字列を部分文字列で二分する	s.partition(sub)
オブジェクトが数値	isinstance(obj, (int,float))
ヒストグラムを描画して、その色をゴールデンロッドにセットする	plt.hist(データ列, color='goldenrod')
散布図に黒い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='k')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
クリムゾン色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
双方向キューの右を使う	deq[-1]
八進文字列を整数にする	int(s, 8)
データ列の各データは何回出現するか見る	ds.value_counts()
'A'列の値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby('A').describe()
＜オプション＞ゲインズボロ色を用いる	color = 'gainsboro'
ヒストグラムを描画して、その色をペルーに変更する	plt.hist(データ列, color='peru')
データ列とリストで明るいグラフをプロットし、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
散布図をカラーコードの丸マーカーとして描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームの列の種類	df.info()
＜オプション＞シャルトリューズ色を用いる	color = 'chartreuse'
＜オプション＞茶色色を用いる	color = 'brown'
散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
ヒストグラムを描画して、その色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
で使える色名の一覧を使う	matplotlib.colors.cnames
色差別ない色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
イテラブルの集合を使う	set(iterable)
折れ線グラフを描画して、その色をオレンジに変更する	plt.plot(データ列, データ列2, color='orange')
正規表現を使用する	import re
数式の変数にnを代入する	e.subs(z, n)
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
数式の積分を求める	sympy.integrate(e)
SJISでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームのリスト列の欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
等量で分割数nとして配列を分割する	pd.qcut(aArray, n)
データフレームのカラムが何年か見る	df[col].dt.year
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
赤い左三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
明るいの折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
パラメータが0に近づくときの数値の極限値を求める	sympy.limit(e, z, 0)
折れ線グラフの三角印を緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
イテラブルを文字列に変換して、タブによって連結する	'\t'.join(map(str, iterable))
＜オプション＞線種を点線に設定する	linestyle = 'dotted'
リストとリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
シードを初期化する	random.seed()
線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
小数点以下3桁までデータフレームをJSONLファイルに保存する	df.to_csv(filename, float_format='%.3f')
タブ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
辞書のキーを列挙する	aDict.keys()
列を1000の位で丸める	ds.round(-3)
黒い大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X', c='k')
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightgreen'
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画して、色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*')
データフレームのそれぞれのグループの最小値を求める	df.groupby(column).min()
＜オプション＞未入力値を先頭にする	na_position = 'first'
黒い三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='^', c='k')
ヒストグラムを描画して、その色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
二進対数	math.log2(x)
リストと配列の散布図を描画し、、左三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='<', c=rgb)
グラフを淡くする	sns.set(pallete='muted')
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
暗い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
青色の淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='b')
浮動小数点数に数を掛ける	x * y
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
空のスタック	collections.deque()
＜オプション＞グリーンを使う	color = 'green'
日付時刻データがタイムスタンプデータよりあとかどうか	aDatetime > aDatetime2
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの列の文字列長を列として使う	df[col].str.len()
折れ線グラフを描画してその色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
赤い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
リストをシアンにする	f'\033[36m{value}\033[0m'
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
数列と数列について散布図をプロットして、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
リストと数列について色差別ない色の折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフの色をスレートブルーにする	plt.plot(データ列, データ列2, color='slateblue')
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
ヒストグラムを描画して色を珊瑚に設定する	plt.hist(データ列, color='coral')
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
折れ線グラフを描画して、その色をアクアマリンに変更する	plt.plot(データ列, データ列2, color='aquamarine')
＜オプション＞ライトスレイグレーを使う	color = 'lightslategrey'
サブクラスか	issubclass(サブクラス, クラス)
文字列をISO8601で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
折れ線グラフの上三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
データ列をn個にビン分割する	pd.cut(ds, n)
文字列の先頭でパターンにASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
ベクトルの各要素の積	np.multiply(aArray, aArray2)
＜オプション＞三角マーカーを使う	marker = '^'
にy=0の点線を設定する	plt.axhline(y=0, linestyle='dotted')
データフレームのそれぞれのグループ毎の最大値を計算する	df.groupby(column).max()
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
イテラブルと配列について淡い色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
プロットの大きさを横width縦heightに設定する	plt.figure(figsize=(width, height))
散布図をカラーコードの大バツマーカーで描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
平方根	math.sqrt(x)
リストと数列についての散布図に星マーカーを描く	plt.plot(xdata, ydata, marker='*')
nがn2の倍数でないかどうか調べる	n % n2 != 0
リストとリストについて破線グラフを描画して、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
リストをひとつ置きに取り出す	aList[::2]
線グラフを描画して、その色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
タプルの浅いコピーを作る	aDict.copy()
数列と配列について青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
本日が何日か知る	datetime.datetime.today().day
折れ線グラフのクロスマーカーを黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
小文字を全て見る	string.ascii_lowercase
nが正の数	n > 0
組内の要素が全て真かどうか	all(aTuple)
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
リストを黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
データフレームのカラムの種類を見る	df.info()
n進文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
1文字だけ標準入力から読む	sys.stdin.read(1)
線グラフを描画して、その色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
＜オプション＞色をミスティローズに指定する	color = 'mistyrose'
predicateFuncを適用したとき真とならないイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
ファイルのディレクトリ名	os.path.dirname(filepath)
＜オプション＞グラフの色をライトサーモンに設定する	color = 'lightsalmon'
オブジェクトが浮動小数点数クラスかどうか	isinstance(obj, float)
10を底とする実数の対数	math.log10(x)
文字列を紫色でプリントできる文字列にする	f'\033[35m{value}\033[0m'
タプルとタプルを結合する	aTuple + aTuple2
JSON形式のfをデータに変換する	json.load(fin)
両端キューの末尾から要素を取り除く	deq.pop()
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
ヘッダを付けずにJSONLファイルにデータフレームを保存する	df.to_csv(filename, header=None)
リストとイテラブルの散布図を描いてマーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
キーがタプルに存在しているかどうか確認する	key in aDict
データ列の時刻	ds.dt.hour
ヒストグラムの色をシアンにセットする	plt.hist(データ列, color='cyan')
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
線グラフを描画してその色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
ヒストグラムを描画して、その色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
ヒストグラムを描画して、色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
データフレームからカテゴリデータのカラム名の一覧を見る	df.select_dtypes('object').columns
＜オプション＞色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
黒色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
タプルを展開して出力する	print(*aTuple)
ヒストグラムの色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
折れ線グラフを描画して、その色をシルバーに指定する	plt.plot(データ列, データ列2, color='silver')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
文字列のn番目を見る	s[n]
等差数列から整数乱数を算出する	random.randrange(start, end, step)
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
配列とリストの散布図を描画し、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
＜オプション＞色をライトスカイブルーに設定する	color = 'lightskyblue'
ライトイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightyellow')
ファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
濃い色でリストについてのヒストグラムをプロットする	plt.hist(xdata, color='deep')
本日の日数	datetime.datetime.today().day
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
nが5の倍数か調べる	n % 5 == 0
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
小数点数を実数で割った剰余	math.remainder(x, x2)
線グラフを描画して、色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
折れ線グラフを描画して、その色を紺に変更する	plt.plot(データ列, データ列2, color='darkblue')
ふたつの集合の和集合	aSet.union(aSet2)
ファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムの中に日付データと文字列が存在するか調べる	df[col].isin([value, value2])
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
線グラフの色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列, データ列2, color='lawngreen')
リストの最初を取り除く	aList[1:]
３二ビット整数型の０で全要素を初期化された行列	np.zeros(行数, 列数, dtype=np.int16)
＜オプション＞淡いピンク色色を使う	color = 'lightpink'
ヒストグラムを描画してその色をオリーブに指定する	plt.hist(データ列, color='olive')
データフレームを各列と列の組み合わせ毎にグループ化して分散を求める	df.groupby([column, column2], as_index=False).var()
データ列を折れ線グラフに描画して印をダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
二つの文字列は等しくないか調べる	s != s2
折れ線グラフを描画して、その色をゴールドに指定する	plt.plot(データ列, データ列2, color='gold')
＜オプション＞ダークシアンを使う	color = 'darkcyan'
プロットに目盛り線を入れる	plt.grid(True)
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
数値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='x')
データ列が何年か見る	ds.dt.year
ゼロ埋めされたベクトル	np.zeros(要素数)
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データフレームの未入力値を後の値に指定する	df.fillna(method='bfill')
ふたつの集合の差集合を見る	aSet.difference(aSet2)
文字列内に小文字が含まれるかテストする	any(c.islower() for c in s)
リストとリストについて破線グラフを描いて、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
データフレームの列の未入力値を中央値に設定する	df[col].fillna(df[col].median())
リストとリストで折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
数列とデータ列の明るいを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
暗いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='dark', color='r')
文字列を部分文字列で二分し、後半の文字列を求める	s.partition(sub)[-1]
nが-9以上9以下か	-9 <= n <= 9
変数がマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
文字列をコロンによって分割して、列挙する	s.split(':')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
データ列の未入力値を前の行の値に設定する	ds.fillna(method='ffill')
データ列を小数点以下n桁で丸める	ds.round(n)
ファイルパスから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
コマンド引数の一覧	sys.argv[1:]
＜オプション＞エンコーディングを文字列の示すエンコーディングにする	encoding = s
リストとリストについて散布図を描画し、三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
ヒストグラムを描画して、その色をシルバーに変更する	plt.hist(データ列, color='silver')
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
プロットの見栄えをいい感じに設定する	sns.set()
エンコーディングによって文字列をバイト列にする	s.encode(encoding=encoding)
データフレームを表示するとき最大行数をnに設定する	pd.set_option('display.max_rows', n)
eの乗数	math.exp(x)
２つの列を用いてデータフレームを並べてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
線グラフを描画して、色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategray')
リストとリストについて破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
ファイルパスをバイナリできるように開く]	open(filepath, mode='rb')
データ列を淡い色のヒストグラムとして描画する	plt.hist(xdata, color='muted')
配列とリストについて散布図を描画して、マーカーを左三角にセットする	plt.plot(xdata, ydata, marker='<')
ヒストグラムを描画して、その色をダークオーキッドにする	plt.hist(データ列, color='darkorchid')
日付時刻データの日付	aDatetime.date()
暗いグラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
線グラフを描画して色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
イテラブルを明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
データフレームを列の値によってグループ化する	df.groupby(column)
データフレームの中で、列と列の重複を落とす	df.drop_duplicates(subset=[column, column2])
散布図を濃い色を使って描画する	plt.plot(xdata, ydata, c='deep')
折れ線グラフを描画して、その色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgrey')
x,y,zをそれぞれn,n2,n3にする	x, y, z = n, n2, n3
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
mathモジュールをインポートする	import math
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
集合に要素を追加する	aSet.add(element)
浮動小数点数の最大値を求める	sys.float_info.max
日付時刻データとタイムスタンプデータの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
ゲインズボロにヒストグラムの色を変更する	plt.hist(データ列, color='gainsboro')
nとn2の論理和を求める	n | n2
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
ヒストグラムを描画して、色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
明るい色をプロットの描画で使う	sns.set(pallete='bright')
ケンドールを用いてデータフレームの相関行列	df.corr(method='kendall')
黒色の左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
黒いダイアモンドマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D', c='k')
リストと配列で折れ線グラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
配列を転置する	aArray.T
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
Pandasで、データフレームのcollのUNIX秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データ列を折れ線グラフに描画してマーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
線グラフを描画して、その色を青にする	plt.plot(データ列, データ列2, color='blue')
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
nがn2以下またはn3以上	n <= n2 or n >= n3
＜オプション＞色をグレーに設定する	color = 'grey'
ファイルパスを書き込み用にオープンする]	open(filepath, mode='w')
破線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
データフレームをJSONLファイルにTSVファイルとして保存する	df.to_csv(filename, sep='\t')
破線グラフの色をパステル調のに指定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
ダークグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkgrey')
スノーにヒストグラムの色をセットする	plt.hist(データ列, color='snow')
＜オプション＞エラーがあるとき例外を発生させるように変更する	errors = 'strict'
項目名が辞書上で定義済みか調べる	key in aDict
列の各値が何回出現するか調べる	ds.value_counts()
ふたつのリストのインターセクション	list(set(aList) & set(aList2))
＜オプション＞グラフの線幅をnに設定する	linewidth = n
破線グラフの色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
オレンジにヒストグラムの色を変更する	plt.hist(データ列, color='orange')
データフレームのNaNがある部分を色付けする	df.style.highlight_null()
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
複数カラムの散布図をまとめてプロットする	sns.pairplot(df[[column, column2, column3]])
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
グラフをポスター用にする	sns.set(context='poster')
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
淡いの折れ線グラフを数列とリストで描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
カラーコードの四角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='s', c=rgb)
xが1もしくは2か判定する	x == 1 or x == 2
カラムの尖度	ds.skew()
三変数の最も大きい値	max(x, y, z)
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフを実線で描画する	plt.plot(データ列, データ列2, linestyle='solid')
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
表の列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
配列とリストについて散布図を描き、、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームを列によってグループ分けして、それぞれのグループの最大値を算出する	df.groupby(column).max()
タプルの最後からn番目以前の部分を抽出する	aTuple[:-n]
△マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^')
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
イテラブルとデータ列についての散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
表データの列がx以下のデータを抽出する	df[df[column] <= x]
SJISでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
数の二乗を算出する	x ** 2
二つのリストから辞書を作る	dict(zip(aList, aList2))
＜オプション＞コロンを分割記号で使用する	sep = ':'
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
データフレームのインデックスの一覧を見る	df.index
現在の曜日を整数で見る	datetime.datetime.today().weekday()
濃い色を用いて散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
データ列とデータ列についての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
データ列とリストについて散布図を描画し、、マーカーを三角に指定する	plt.plot(xdata, ydata, marker='^')
データフレームがどの程度、分散しているか見る	df.var()
整数nは集合のどれか	n in aSet
折れ線グラフを描画してその色をスノーに変更する	plt.plot(データ列, データ列2, color='snow')
y軸にuntitledというラベルを付ける	plt.ylabel(untitled)
データフレームのn行目以降選択する	df[n:]
折れ線グラフのスタイルを実線に設定する	plt.plot(データ列, データ列2, linestyle='solid')
上位集合もしくは等しいか調べる	aSet > aSet2
データフレームをグループ化し、各列に対し分散を算出する	df.groupby(column)[column2].var()
プラットフォームの符号付き整数の最大値	sys.maxsize
線グラフを描画して、色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
数列と配列について散布図を描画し、四角マーカーの色をカラーコードにする	plt.plot(xdata, ydata, marker='s', c=rgb)
リストに要素を追加する	aList.append(element)
疑似乱数を生成する	random.random()
黒いポイントマーカーをデータ列とリストについての散布図に描く	plt.plot(xdata, ydata, marker='.', c='k')
データフレームを四捨五入して、整数型にする	df.round().astype(int)
数値の変数に数式を代入する	e.subs(z, e2)
データフレームのカラムが何分か見る	df[col].dt.minute
重なりを見やすくパステル調の色で配列と配列についての散布図を描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
データフレームを正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
ヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
数列とリストのカラーコードの淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategray')
ファイルをオープンして]書き込みストリームを見る	open(filepath, mode='w')
オプションでファイルを出力にする	file = sys.open(filename, 'w')
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
標準入力から1文字読む	sys.stdin.read(1)
タイムスタンプデータと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームを列でソートして新しいインデックスを振り直す	df.sort_values(columns).reset_index()
配列と配列の淡いグラフをプロットして、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストを縦軸、リストを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
数式を方程式として解く	sympy.solve(e)
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
タイムスタンプデータをISO8601形式の文字列に変換する	aDatetime.isoformat()
＜オプション＞ゲインズボロに色をセットする	color = 'gainsboro'
ヒストグラムを描画して、その色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
データフレームを複数の列で並べ直して、更新する	df.sort_values(by=column, inplace=True)
淡い色の折れ線を描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='muted')
データフレームをエクセルデータから読む	pd.read_excel(filename)
四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s')
＜オプション＞グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
配列を分割数nを使ってビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
小数点以下3桁までJSONLファイルにデータフレームを書き込む	df.to_csv(filename, float_format='%.3f')
データフレームのリストカラムの値を正規表現patternでまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
黒い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
文字列を空白を用いて区切り、整数のリストにする	map(int, s.split())
＜オプション＞バイナリ書き込みモードに設定する	mode = 'wb'
2つの整数最小公倍数	math.lcm(n, n2)
ヒストグラムを描画して、その色を淡い茶色に設定する	plt.hist(データ列, color='tan')
整数nを16進数表記に変換する	hex(n)
データフレームの列をヒストグラムを使って可視化する	plt.hist(df[column])
データフレームを百の位で丸める	df.round(-2)
文字列の無限イテラブル	itertools.repeat(element)
時間を使う	import time
日付データが日曜日か調べる	aDate.weekday() == 6
ルート	math.sqrt(x)
リストとリストとして明るいの折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
折れ線グラフに▼マーカーを使う	plt.plot(データ列, データ列2, marker='v')
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
＜オプション＞色をパールバイオレットレッドに変更する	color = 'palevioletred'
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
＜オプション＞ダークスレートブルー色を使う	color = 'darkslateblue'
イテラブルを配列に変換する	np.array(iterable)
イテラブルと数列についての散布図を明るい色で描く	plt.plot(xdata, ydata, c='bright')
データフレームを複数の列の値でグループ化する	df.groupby(columns)
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
＜オプション＞色を紺碧に設定する	color = 'azure'
折れ線グラフに四角印を使用する	plt.plot(データ列, データ列2, marker='s')
ファイルから追加ストリームを開き]fとする	f = open(filepath, mode='a')
線グラフを描画して、その色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
ヒストグラムを描画して、その色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
＜オプション＞グリーンに色を指定する	color = 'green'
赤色の四角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='s', c='r')
タプルの要素を昇順に並べ直す	sorted(aTuple, reverse=False)
パステル調の色で配列についてのヒストグラムをプロットする	plt.hist(xdata, color='pastel')
文字列をプリントする	print(value)
データフレームのリスト列を丸めて、整数型にする	df[aList].round().astype(int)
小数点数の常用対数	math.log10(x)
折れ線グラフを描画して、その色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
リストと配列の明るいをプロットし、、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
折れ線グラフを描画して、その色をゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='goldenrod')
ふたつの関係が真スーパーセットか調べる	aSet > aSet2
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
＜オプション＞エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
データフレームを各列と列の組み合わせ毎に集約して、最小値を求める	df.groupby([column, column2], as_index=False).min()
＜オプション＞スキップするフッタをnに増やす	skipfooter = n
＜オプション＞茶色色を使う	color = 'brown'
プラットフォームの整数の最大値	sys.maxsize
実数の逆正弦	math.asin(x)
データフレームを表示するとき、小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
＜オプション＞グラフの色をライトイエローに設定する	color = 'lightyellow'
二つのオブジェクトが等しいかどうか	obj == obj2
マップからキーで指定された項目をポップする	aDict.pop(key)
明るいカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
ヒストグラムの色をマルーンにする	plt.hist(データ列, color='maroon')
リストとデータ列について散布図を描画し、、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
文字列を最後の部分文字列で分割したときの最初の文字列	s.rpartition(sub)[0]
小数点数の指数部	math.frexp(x)[1]
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
ヒストグラムを描画して、その色をラベンダーブラッシュにセットする	plt.hist(データ列, color='lavenderblush')
キーワード引数でタプルに更新する	aDict.update(**kwargs)
折れ線グラフを描画してその色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
nが一桁の数	-9 <= n <= 9
小数点数のハイパボリック・サインの逆数	math.asinh(x)
リストとリストについての散布図を濃い色を用いて描く	plt.plot(xdata, ydata, c='deep')
ヒストグラムを描画して、その色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムの線のスタイルを点線にセットする	plt.hist(データ列, linestyle='dotted')
折れ線グラフを描画して、色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
タンジェントの逆数	math.atan(x)
ファイルからの読み込みストリームを使う	open(filepath)
nをn2で割った余り	n % n2
カウンタのキーとカウントを列挙する	aCounter.items()
折れ線グラフに黄色い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
折れ線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
データ列とリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
リストとリストについて暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
配列の累積積を求める	np.cumprod(aArray)
キューの要素をインプレースに逆順にする	deq.reverse()
＜オプション＞色をライトスレイグレーに変更する	color = 'lightslategray'
集合が空か確認する	len(aSet) == 0
赤いバツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='x', c='r')
データ列をカテゴリデータに変換する	ds.astype(object)
折れ線グラフに大きさnの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markersize=n)
折れ線グラフの色をオーキッドにセットする	plt.plot(データ列, データ列2, color='orchid')
シンボル計算を使う	import sympy
２つのカウンタの共通する要素を算出する	aCounter & aCounter2
ヒストグラムを描画して、色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
ダークシアグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='darkseagreen')
線グラフを描画してその色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
ヒストグラムを描画して、その色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
線グラフを描画して、その色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategrey')
折れ線グラフの星マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
リストの末尾から要素を除く	aList.pop()
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
データフレームの欠損値を平均値にする	df.fillna(df.mean())
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームを列の値で未入力値を含めて集計する	df.groupby(column, dropna=False)
折れ線グラフの▼印を緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列, データ列2, marker='X')
グラフをいい感じに設定する	sns.set()
乱数を生成する	random.random()
リストとリストについて散布図を描画し、、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
２つのカウンタのいずれかに含まれる値を求める	aCounter | aCounter2
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
線グラフの色をフォレストグリーンにする	plt.plot(データ列, データ列2, color='forestgreen')
ヒストグラムを描画してその色を青緑に設定する	plt.hist(データ列, color='turquoise')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
折れ線グラフの色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
データフレームを'A'列と'B'列を用いて並べ直す	df.sort_values(by=['A', 'B'])
数列とリストの淡いグラフを描いて、色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>')
最初の要素をキューから取り除く	deq.remove(element)
オブジェクトの固有のIDを求める	id(obj)
改行なしに２つの文字列を出力する	print(value, value2, end='')
配列とリストの散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
リストとリストの散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
データフレームを使用する	import pandas as pd
タプルのn番目からn2番目まで	aTuple[n:n2]
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
折れ線グラフの色をハニーデューに変更する	plt.plot(データ列, データ列2, color='honeydew')
ヒストグラムを描画して、その色をシスルに設定する	plt.hist(データ列, color='thistle')
追加できるように文字コードtextで既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
現在の年を使う	datetime.datetime.today().year
散布図に赤色の四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='r')
表データの列の名前を付け直す	df.rename(columns={column: name})
白色で値をプリントする	print(f'\033[37m{value}\033[0m')
マッピングから項目名の値をエラーなく得る	aDict.get(key, None)
整数nを八進文字列にする	oct(n)[2:]
線幅nの丸マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
折れ線グラフの透明度をalphaにセットする	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞パープルにグラフの色を変更する	color = 'purple'
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
＜オプション＞スノー色を使う	color = 'snow'
小数点数は無限大かどうか確認する	math.isinf(x)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
濃い色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
ヒストグラムを描画してその色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
データフレームのカラムの中に含まれると文字列の合計を求める	df[col].isin([value, value2]).sum()
折れ線グラフを描画して、その色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
折れ線グラフを描画して、その色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
折れ線グラフを描画して、その色をオレンジに指定する	plt.plot(データ列, データ列2, color='orange')
＜オプション＞レベッカパープル色を用いる	color = 'rebeccapurple'
年月日と時刻から日付時刻を作成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図を赤いダイアモンドマーカーで描画する	plt.plot(xdata, ydata, marker='D', c='r')
点間のユークリッド距離	math.dist(point, point2)
＜オプション＞紺碧色を使う	color = 'azure'
行列の標準偏差	np.std(aArray)
2つの文字列が等しくない	s != s2
＜オプション＞グラフの色をティールに変更する	color = 'teal'
リストとイテラブルの直積を得る	itertools.product(iterable, iterable2)
Pythonパスにを追加する	sys.path.append(dir)
文字列の最初から空白やタブを消す	s.lstrip()
ヒストグラムを描画してその色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
行列の列	aArray[:, 列番号]
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
データフレームを各列と列の組み合わせ毎にグループ化して、分散を計算する	df.groupby([column, column2], as_index=False).var()
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
ヒストグラムの色をロイヤルブルーに指定する	plt.hist(データ列, color='royalblue')
＜オプション＞グラフの種類を点線に変更する	linestyle = 'dotted'
データフレームのカラムが正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
配列のユニークな要素	np.unique(aArray)
日付データが金曜日かどうか調べる	aDate.weekday() == 4
部分文字列で最後から文字列を区切る	s.rsplit(sub)
文字をユニコードにする	ord(ch)
グラフの凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
配列をn個にビン分割する	pd.cut(aArray, n)
ヒストグラムを描画して、色をグリーンに指定する	plt.hist(データ列, color='green')
＜オプション＞グラフの色をオレンジに設定する	color = 'orange'
ヒストグラムを描画して、その色をスチールブルーに指定する	plt.hist(データ列, color='steelblue')
リストとデータ列の黒色のパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
eの小数点数乗	math.exp(x)
＜オプション＞濃いシアン色を使う	color = 'darkcyan'
ヒストグラムを描画して色をターコイズに設定する	plt.hist(データ列, color='turquoise')
赤色の星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
散布図に黒い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='k')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
二つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
データ列の中に文字列と文字列が存在するかどうか調べる	ds.isin([value, value2])
オブジェクトが浮動小数点数クラスか判定する	isinstance(obj, float)
データ列の値が未入力値か調べる	ds.isna()
整数nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
＜オプション＞レベッカパープル色を使う	color = 'rebeccapurple'
明るいで柱状グラフをプロットする	plt.hist(xdata, color='bright')
折れ線グラフを描画して、色をダークゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='darkgoldenrod')
ふたつの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
列名リストによってデータフレームを分類し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
＜オプション＞カラムの名前を自動的な連番に設定する	header = None
折れ線グラフに黄色い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
データフレームからカテゴリデータのみ抽出する	df.select_dtypes('object')
文字列をシンボルに変換する	sympy.Symbol(s)
ベクトルを平坦化する	aArray.flatten()
セットから別のセットの要素を全て除く	aSet.difference_update(aSet2)
データフレームから破壊的に重複する行を削除する	df.drop_duplicates(inplace=True)
＜オプション＞グラフの色をカデットブルーにセットする	color = 'cadetblue'
ヒストグラムを描画して、色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
ヒストグラムの色をライトグレーにする	plt.hist(データ列, color='lightgray')
ヒストグラムを描画して、その色をモカシンに変更する	plt.hist(データ列, color='moccasin')
ヒストグラムを描画して、その色をオリーブに変更する	plt.hist(データ列, color='olive')
淡いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
オプションで、出力先を標準エラーに指定する	file = sys.stderr
＜オプション＞グラフの色をスチールブルーに設定する	color = 'steelblue'
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
オブジェクトから属性を削除する	delattr(obj, プロパティ名)
単位行列	np.eye(行数, 列数)
浮動小数点数の二乗	x ** 2
二つの文字列をカンマで区切って出力する	print(value, value2, sep=',')
データフレームの列が正規表現文字列にマッチする行を選択する	df[df[column].str.match(s)]
折れ線グラフを描画してその色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
文字列が文字列リストのいづれかどうか調べる	s in aStringList
ベクトル間の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
日付時刻データの分	aDatetime.minute
数値を簡略化する	sympy.sympify(e)
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
濃いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
オブジェクトが属性を持つ	hasattr(obj, プロパティ名)
データフレームを列によって大きい順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
第二引数で指定されたファイルの名前	sys.argv[1]
文字列を黒色にする	f'\033[30m{value}\033[0m'
データラベルを最適な位置に入れる	plt.legend(loc='best')
データフレームを複数の列によって並べて、更新する	df.sort_values(by=column, inplace=True)
フクシア色の線グラフを描画する	plt.plot(データ列, データ列2, color='fuchsia')
日付データが火曜日か	aDate.weekday() == 1
配列と配列について濃い色の折れ線を描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
リストとリストのパステル調のグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
データ列の中にと文字列が存在するかどうか調べる	ds.isin([value, value2])
行列の列ごとの合計値を求める	np.sum(aArray, axis=0)
日付データの曜日を整数で求める	aDate.weekday()
配列とデータ列の青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
赤い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='r')
折れ線グラフの色を茶色に指定する	plt.plot(データ列, データ列2, color='brown')
データフレームの中の列をビン数nでビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
要素∉集合	element not in aSet
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
リストを黒色で表示する	print(f'\033[30m{value}\033[0m')
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
線グラフを描画してその色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
等しい量になるように分割数nでリストを分割する	pd.qcut(aList, n)
線グラフを描画して、その色をライムに変更する	plt.plot(データ列, データ列2, color='lime')
折れ線グラフを描画して、その色をパールゴールデンロッドにセットする	plt.plot(データ列, データ列2, color='palegoldenrod')
データ列が正規分布からどの程度歪んでいるか見る	ds.kurt()
＜オプション＞ダークバイオレット色を用いる	color = 'darkviolet'
Pythonパス	sys.path
＜オプション＞黄色を使う	color = 'yellow'
データフレームを列を用いて並べ直して、上位n件を取り出す	df.sort_values(columns).head(n)
Pandasで文字列をdatetime64型にする	pd.to_datetime(s)
各列毎にデータフレームを集約して、列の最大値を求める	df.groupby(column)[column2].max()
ヒストグラムを描画して色をアクアに設定する	plt.hist(データ列, color='aqua')
リストと配列についての散布図に三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^')
ヒストグラムを描画してその色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
文字列が全てアスキー文字か	s.isascii()
ヒストグラムを描画して、その色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
ふたつの関係がサブセットかどうか確認する	aSet.issubset(aSet2)
＜オプション＞色をスノーにする	color = 'snow'
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
データフレームの標本標準偏差	df.std()
配列とリストの破線グラフを描き、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
パステル調の色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
データフレームのNaNを平均で埋める	df.fillna(df.mean())
リストとリストの折れ線グラフをuntitledとラベル付けして描く	plt.plot(xdata, ydata, label=untitled)
データ列とリストについて散布図をプロットして、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
グラフで使うタイトルをuntitledに指定する	plt.title(untitled)
＜オプション＞アクアマリンを用いる	color = 'aquamarine'
データフレームのリストカラムの欠損値を直後の値にする	df[aList].fillna(method='bfill')
グラフの見栄えを良くする	import seaborn as sns
最小値でデータフレームのリスト列の欠損値を補う	df[aList].fillna(df[aList].min())
パステル調のグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフのポイントマーカーを黄色くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
aListn番目から要素を取り除く	aList.pop(n)
両端キューのstart〜endの要素を使う	collections.deque(itertools.islice(deq, start, end))
折れ線グラフを描画して、その色をコーンズシルクに指定する	plt.plot(データ列, データ列2, color='cornsilk')
データフレームのそれぞれのグループの最小値	df.groupby(column).min()
散布図を黒い下三角マーカーで描画する	plt.plot(xdata, ydata, marker='v', c='k')
nが1もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列, データ列2, color='papayawhip')
折れ線グラフに黄色い三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
最大長のあるデック	collections.deque(maxlen=n)
原点から(小数点数,y)の距離	math.hypot(x, y)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
折れ線グラフの色を赤に変更する	plt.plot(データ列, データ列2, color='red')
変数を黒色にする	f'\033[30m{value}\033[0m'
折れ線グラフに緑色の△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
空の組を作る	()
＜オプション＞セパレータをスラッシュにする	sep = '/'
データフレームの25パーセンタイル	df.quantile(0.25)
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
文字列中からパターンにASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
predicateFuncを適用したとき真になるイテラブルの要素を除去する	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムを描画して、その色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
リストとイテラブルについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
カラーコードのバツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
データフレームのリストカラムの未入力値を最小値に設定する	df[aList].fillna(df[aList].min())
カラムの記述統計量を求める	ds.describe()
＜オプション＞インディゴにグラフの色を設定する	color = 'indigo'
データフレームのカラムのNaNを最大値に変更する	df[col].fillna(df[col].max())
データフレームの要約統計量を求める	df.describe()
ヒストグラムを描画して、その色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
nが正の数かどうか調べる	n > 0
行列の合計値	np.sum(aArray)
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
TSVファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
文字列を文字のリストにする	list(s)
＜オプション＞n番目の列をインデックスに設定する	index_col = n
空白文字を全部使う	string.whitespace
柱状図をプロットして、xにアルファを設定する	plt.hist(データ列, alpha=x)
リストの中の最小値	min(aList)
タプルの末尾	aTuple[-1]
キューの要素数	len(deq)
ファイルを読み込みモードを使ってオープンする]	open(filepath, mode='r')
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
実数が負の数かどうか	x < 0
データフレームの中にいくつ未入力値があるか数える	df.isna().sum()
黒い四角マーカーをリストとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='s', c='k')
行列の累積和	np.cumsum(aArray)
タイムスタンプデータの時間数を求める	aDatetime.hour
ヒストグラムを描画して、その色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
追加モードでファイルをオープンする]	open(filepath, mode='a')
イテラブルとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
データフレームのリストカラムを丸めて整数型にする	df[aList].round().astype(int)
２つのデータフレームを列'A'と列'B'をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフを描画してその色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
データフレームのリスト列の欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
ユニコードに対応する文字を使う	chr(unicode)
折れ線グラフのダイアモンドマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
＜オプション＞コーンフラワーブルーにグラフの色を設定する	color = 'cornflowerblue'
インプレイスでデータフレームから重複を削除する	df.drop_duplicates(inplace=True)
Pandasでフォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
線グラフの色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
＜オプション＞改行コードをWindowsに設定する	newline = '\r\n'
昇順にデータフレームを列によって破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
データ列と配列の散布図に赤色の星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
破線グラフの色を色差別ないに指定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
＜オプション＞色をホワイトに指定する	color = 'white'
カラーコードの右三角マーカーをリストとリストの散布図に描く	plt.plot(xdata, ydata, marker='>', c=rgb)
配列とデータ列についてリストの値に応じて散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
＜オプション＞ゴールドを用いる	color = 'gold'
データフレームの列のpercentパーセンタイルを計算する	df[col].quantile(percent/100)
濃い色の折れ線を描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
ヒストグラムを描画して、その色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
二数の最大値	max(x, y)
色差別ないの色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
＜オプション＞青緑を使用する	color = 'turquoise'
データフレームの中のNaNを消す	df.dropna()
平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームを二つの列によってによって大きい順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
赤い濃いの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
リストを行列にする	np.array(aList)
リストと数列の散布図を描画し、、マーカーを大バツに指定する	plt.plot(xdata, ydata, marker='X')
線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
xが-9以上9以下か	-9 <= x <= 9
文字列は全て数値	s.isnumeric()
ファイルを開き]、バイナリストリームを使う	open(filepath, mode='rb')
各列毎にデータフレームを集約して、列の分散を求める	df.groupby(column)[column2].var()
オブジェクトの属性を削除する	delattr(obj, プロパティ名)
配列の合計を計算する	np.sum(aArray)
変数を紫色でプリントする	print(f'\033[35m{value}\033[0m')
列をキーにして二つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
線グラフを描画して、色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
要素がマッピングの値に含まれていない	element not in aDict.values()
赤色の星マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
折れ線グラフの丸マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
列'A'と列'B'をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
スラッシュで区切って二つの文字列を表示する	print(value, value2, sep='/')
スレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='slateblue')
データフレームを列名リストの値によってグループ化し、基本統計量を求める	df.groupby(columns).describe()
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
折れ線グラフの下三角印を緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
ふたつの集合のユニオン	aSet.union(aSet2)
ベクトルの列	aArray[:, 列番号]
変数名をキーとして、辞書を作る	dict(name=element)
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
＜オプション＞プラムを使用する	color = 'plum'
現在の時間数	datetime.date.today().hour
データフレームのリスト列を100の位で丸めて、整数にする	df[aList].round(-2).astype(int)
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
プログラムを即座に終了する	sys.exit()
ヒストグラムの色を青紫にする	plt.hist(データ列, color='violet')
＜オプション＞大バツ印を使う	marker = 'X'
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
データフレームを'A'列と'B'列によって並べ直して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ファイル名がCSVファイル	filename.endswith('.csv')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
平均値でデータ列の未入力値を補う	ds.fillna(ds.mean())
startからendまで度数分布図にする	plt.hist(データ列, range=(start, end))
折れ線グラフの色を文字列に設定する	plt.plot(xdata, ydata, color=s)
データ列と配列について色差別ない色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
2つのオブジェクトが同一か調べる	obj is obj2
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
列を無限に繰り返す	itertools.cycle(iterable)
ヒストグラムを描画して、その色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumorchid')
データフレームを表示するとき折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
オブジェクトがリストかタプルか調べる	isinstance(obj, (list)
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
データフレームを'A'列の値によってグループ化する	df.groupby('A')
日付時刻データの月数を使う	aDatetime.month
改行なしに数値を出力する	print(value, end='')
リストの要素を並べ直す	sorted(aList)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
二つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
イテラブルを文字列に変換して、空白によって結合する	' '.join(map(str, iterable))
データフレームのリストカラムの空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
にx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフを描画して、その色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
2つのオブジェクトが等しいか調べる	obj == obj2
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
折れ線グラフを描画してその色をライトグリーンにする	plt.plot(データ列, データ列2, color='lightgreen')
折れ線グラフの色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
タプルのn番目以降の部分を得る	aTuple[n:]
＜オプション＞ダークオレンジ色を用いる	color = 'darkorange'
＜オプション＞カーキに色を設定する	color = 'khaki'
折れ線グラフの星マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
グラフに鉛直方向の点線をつける	plt.axvline(x=0, linestyle='dotted')
＜オプション＞グラフの色を濃い青にセットする	color = 'darkblue'
n進数文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
行によって降順でデータフレーム全体をソートする	df.sort_index(ascending=False)
折れ線グラフを描画して、色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
第二コマンド引数	sys.argv[1]
リストとリストの黒色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフの色をダークカーキにセットする	plt.plot(データ列, データ列2, color='darkkhaki')
ヒストグラムを描画して、色をスチールブルーに変更する	plt.hist(データ列, color='steelblue')
グラフで使う縦軸にuntitledという軸名を付ける	plt.ylabel(untitled)
モードでデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
リストをn回、接続する	aList * n
要素は集合のメンバーに含まれないか調べる	element not in aSet
列に列を続ける	itertools.chain(iterable, iterable2)
折れ線グラフを描画して、その色を小麦色にセットする	plt.plot(データ列, データ列2, color='wheat')
ヒストグラムを描画して、その色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
折れ線の透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
ヒストグラムを描画して、その色を紺碧に設定する	plt.hist(データ列, color='azure')
文字列の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
キーがタプルにあるかどうか	key not in aDict
変数名をキーとして辞書を生成する	dict(name=element)
折れ線グラフを描画して色をダークグリーンに指定する	plt.plot(データ列, データ列2, color='darkgreen')
散布図に赤い菱形マーカーを使う	plt.plot(xdata, ydata, marker='D', c='r')
青い三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
配列とリストについての散布図にカラーコードの星マーカーを描く	plt.plot(xdata, ydata, marker='*', c=rgb)
データフレームのリストカラムを千の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
リストとリストの折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
カラムの中の未入力値の数を数える	ds.isna().sum()
折れ線グラフを実線を用いて描画する	plt.plot(データ列, データ列2, linestyle='solid')
＜オプション＞ライムグリーン色を用いる	color = 'limegreen'
カウンタの最も頻出の項目	aCounter.most_common()[0]
リストについての度数分布図を淡いで描く	plt.hist(xdata, color='muted')
n回だけ文字列を置き換える	s.replace(sub, newsub, n)
折れ線グラフを描画して、その色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
リストの末尾にリストを追加する	aList.extend(aList2)
折れ線グラフを描画してその色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
numpyを使う	import numpy as np
ヒストグラムを描画して、その色をピンクにする	plt.hist(データ列, color='pink')
線グラフを描画してその色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
配列とリストの散布図をプロットして、上三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
＜オプション＞星マーカーを使用する	marker = '*'
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
大バツマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='X')
線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
'A'列によってデータフレームを降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
ヒストグラムでデータ列を可視化する	plt.hist(ds)
積み上げ横棒を描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
リストとリストの折れ線グラフを描画する	plt.plot(xdata, ydata)
キューの先頭に要素を追加する	deq.appendleft(element)
をファイルから読み込む	pd.read_excel(filename)
リストとリストについて暗いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
データフレームから数値データを抽出する	df.select_dtypes('number')
自然対数の底	math.e
破壊的に二つの列によってでデータフレームを並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
常用対数	math.log10(x)
＜オプション＞グラフの色を黄緑に設定する	color = 'chartreuse'
複数の列で破壊的にデータフレームを大きい順に整列する	df.sort_values(by=column, ascending=False, inplace=True)
二数の最小値を求める	min(x, y)
＜オプション＞アクアに色を設定する	color = 'aqua'
16進数文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データ列の母標準偏差	ds.std(ddof=0)
等間隔でデータフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
リストを反転する	reversed(aList)
表の中で、列の重複を見る	df.duplicated(subset=column)
線グラフの色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
折れ線グラフを描画してその色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
リストと配列の散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームの欠損値を直前の値に変更する	df.fillna(method='ffill')
線グラフを描画してその色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
整数nの十六進リテラル	hex(n)
＜オプション＞スラグレー色を使う	color = 'slategray'
整数nのビット長を確認する	n.bit_length()
ヒストグラムを描画して、その色を青緑に変更する	plt.hist(データ列, color='teal')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
異なる列をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='royalblue')
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
二つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
データフレームから破壊的に重複するデータを削除する	df.drop_duplicates(inplace=True)
グラフに鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
リストと配列についての散布図を暗い色を用いて描画する	plt.plot(xdata, ydata, c='dark')
折れ線グラフを描画してその色をデピンクに指定する	plt.plot(データ列, データ列2, color='deeppink')
ヒストグラムを描画してその色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
＜オプション＞ピンクを使う	color = 'pink'
nがn2よりも大きいかテストする	n > n2
＜オプション＞色をレモンシフォンに設定する	color = 'lemonchiffon'
セットの浅いコピー	aSet.copy()
折れ線グラフに大きさnの上三角印を描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
文字列全体をパターンに複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
淡い色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
＜オプション＞タブをセパレータで使う	sep = '\t'
＜オプション＞欠損値も無視しない	dropna = True
３変数の最大の値	max(x, y, z)
ヒストグラムを描画して、色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
折れ線グラフを描画して、その色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
両端キューの最大長	deq.maxlen
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
散布図に黒いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
イテラブルとリストの折れ線グラフをプロットして色を文字列に指定する	plt.plot(xdata, ydata, color=s)
整数nが組のひとつかどうか判定する	n in aTuple
線グラフを描画してその色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
＜オプション＞星マーカーを使う	marker = '*'
データフレームのリストカラムの尖度を計算する	df[aList].skew()
＜オプション＞タンにグラフの色を設定する	color = 'tan'
＜オプション＞ダークグリーンを用いる	color = 'darkgreen'
データフレームを'A'列を用いて昇順に整列する	df.sort_values(by='A', ascending=True)
小数点数のアークコサインを求める	math.acos(x)
ヒストグラムを描画してその色を青緑に変更する	plt.hist(データ列, color='teal')
部分文字列で文字列を区切って列挙する	s.split(sub)
折れ線グラフの色をレベッカパープルにする	plt.plot(データ列, データ列2, color='rebeccapurple')
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
数字を見る	string.digits
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムを描画して、その色をペルーに設定する	plt.hist(データ列, color='peru')
データフレームのn行まで抽出する	df[:n]
折れ線グラフの色をパールゴールデンロッドにセットする	plt.plot(データ列, データ列2, color='palegoldenrod')
大文字と小文字を逆にする	s.swapcase()
デックの最初から要素を取り除く	deq.popleft()
文字列を走査し、パターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
文字列のひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
データフレームを２つの列で小さい順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ビンの数を設定して度数分布図をプロットする	plt.hist(データ列, bins=n)
日付時刻データをエポック秒にする	aDatetime.timestamp()
シルバー色の線グラフを描画する	plt.plot(データ列, データ列2, color='silver')
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
ヒストグラムを描画して、色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列, データ列2, color='antiquewhite')
文字列をコロンを使って区切って列挙する	s.split(':')
横棒グラフを描いて中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
二数の最小値	min(x, y)
折れ線グラフを描画して、その色をイエローグリーンに指定する	plt.plot(データ列, データ列2, color='yellowgreen')
リストとリストについての散布図に黒色の大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
データフレームから指定された列のみ抽出する	df[[column]]
散布図を赤い右三角マーカーとして描画する	plt.plot(xdata, ydata, marker='>', c='r')
データ列の標本標準偏差	ds.std()
データフレームの列の文字列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
データフレームのカラムの下位25%	df[col].quantile(0.75)
リストと配列についての散布図にカラーコードの丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
リストとリストについての散布図にカラーコードの△マーカーを描く	plt.plot(xdata, ydata, marker='^', c=rgb)
をエクセルファイルファイルから読む	pd.read_excel(filename)
文字列の開始位置以降に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
xの絶対値	abs(x)
データフレームを２つの列によって並べ直す	df.sort_values(by=['A', 'B'])
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
実数の天井を求める	math.ceil(x)
未初期化の配列	np.empty(要素数, dtype=np.int)
文字列をコロンで分割して、文字列リストにする	s.split(':')
実数の逆正接	math.atan(x)
ファイルが存在しないか調べる	not os.path.exists(filepath)
折れ線グラフの右三角印を黄色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
マップにマッピングの値を更新する	aDict.update(aDict2)
文字列の開始位置から終了位置の範囲で部分文字列の出現回数をカウントする	s.count(sub, start, end)
＜オプション＞印を三角に変更する	marker = '^'
書式を辞書でフォーマットする	formatText.format_map(aDict)
折れ線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
折れ線グラフに大きさnの三角印を描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
リストの先頭の値	aList[0]
連立方程式を解く	sympy.solve([e, e2])
文字列をセパレータで区切って、列挙する	s.split(sep)
線グラフを描画して、その色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
文字列をゼロ埋めする	s.zfill(文字列幅)
データフレームのカラムの未入力値を平均値に設定する	df[col].fillna(df[col].mean())
データ列を小数点以下n桁で四捨五入する	ds.round(n)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
カラムの平均値	ds.mean()
数値を双方向キューのn番目に差し込む	deq.insert(n, element)
タプルの先頭の要素	aTuple[0]
マッピングから項目名の値か、もしくは要素を参照する	aDict.get(key, element)
ASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフに緑色の四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
配列と数列についての散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データを双方向キューのn番目に挿入する	deq.insert(n, element)
イテラブルと列をチェインする	itertools.chain(iterable, iterable2)
折れ線グラフの星マーカーを黄色くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
数が負の数か調べる	x < 0
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
ワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
＜オプション＞先頭のカラムをインデックスに増やす	index_col = 0
データフレームを表示するときカラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
データ列を折れ線グラフに描画して印を大バツ印にする	plt.plot(データ列, データ列2, marker='X')
文字列の色でデータ列とリストの折れ線グラフを描画する	plt.plot(xdata, ydata, color=s)
ヒストグラムを描画して、その色を小麦色に設定する	plt.hist(データ列, color='wheat')
ハッシュ値を求める	hash(x)
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
文字列の開始位置以降に部分文字列がない	s.find(sub, start) == -1
散布図をカラーコードのクロスマーカーとして描く	plt.plot(xdata, ydata, marker='x', c=rgb)
組の要素を昇順に並べる	sorted(aTuple, reverse=False)
＜オプション＞ブルーバイオレット色を使う	color = 'blueviolet'
＜オプション＞グラフの色をアリスブルーにセットする	color = 'aliceblue'
Pandasでフォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
ヒストグラムを描画して、その色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
ヒストグラムを描画して、その色をピンクに設定する	plt.hist(データ列, color='pink')
にy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
異なる列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
色差別ない色でリストと配列の散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
データフレームを列の値によってグループ化して、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
文字列中にひとつでも非アスキー文字があるか調べる	any(not c.isascii() for c in s)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
文字列のn番目の文字を使う	s[n]
線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
文字列が漢字かテストする	('\u4E00' <= ch <= '\u9FD0')
配列とリストについての散布図にカラーコードのポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c=rgb)
ヒストグラムを描画して、その色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
オブジェクトがリストに含まれない	element not in aList
キュー中の値のインデックスを使う	deq.index(element)
カウンタの項目を増やす	aCounter[element] += 1
データフレームの数値をまとめて整数に丸める	df.round()
ファイルパスをバイナリ書き込みモードを使ってオープンする]	open(filepath, mode='wb')
データフレームのstart行目からend行目まで取り出す	df[start:end]
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
ヒストグラムを描画して色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
真上位集合かどうか調べる	aSet > aSet2
赤いポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='r')
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
二つの文字列は等しいか	s == s2
＜オプション＞マゼンタにグラフの色を変更する	color = 'magenta'
space	' '
文字列を空白で分割して、文字列リストにする	s.split()
データフレームのリスト列のモード	df[aList].mode()
リストとリストについて散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
＜オプション＞黄色にグラフの色を変更する	color = 'yellow'
自然数個からk個取り出した時の並べ方の総数を求める	math.perm(n, k)
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgrey')
グラフの横軸にuntitledという軸名を付ける	plt.xlabel(untitled)
データフレームのカラムのNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
ヒストグラムを描画して、その色をダークグレーに指定する	plt.hist(データ列, color='darkgray')
データ列の欠損値を最小値で補う	ds.fillna(ds.min())
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
昇順にデータフレームを'A'列によって整列する	df.sort_values(by='A', ascending=True)
グラフの描画を見やすくする	import seaborn as sns
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列, データ列2, color='lightyellow')
＜オプション＞グラフの色をダークバイオレットに設定する	color = 'darkviolet'
データフレームの列の値がxより大きい行を抽出する	df[df[column] > x]
ヒストグラムを描画して、色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データフレームを2つの列の値によってグループ化し、要約統計量を算出する	df.groupby(['A', 'B']).describe()
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palevioletred')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
＜オプション＞ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
折れ線グラフを描画して、色をシルバーにセットする	plt.plot(データ列, データ列2, color='silver')
ヒストグラムを描画して、その色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
＜オプション＞グラフの色をゴールドに設定する	color = 'gold'
データ列とイテラブルの青色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
折れ線グラフの▽マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
データフレームを列によって集約して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
＜オプション＞データ型を指定する	dtype = np.int32
ヒストグラムを用いて配列を可視化する	plt.hist(aArray)
レベッカパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='rebeccapurple')
文字列中から部分文字列を探す	s.find(sub)
カウンタの和集合演算する	aCounter | aCounter2
線グラフの色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
列のイミュータブルな集合	frozenset(iterable)
線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
線グラフを描画してその色をオレンジレッドに変更する	plt.plot(データ列, データ列2, color='orangered')
ファイルパスからディレクトリ名取り出す	os.path.dirname(filepath)
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
データ列を使う	import pandas as pd
全要素を1で初期化された行列	np.ones(行数, 列数, dtype=np.int)
行列の値	aArray[行番号, 列番号]
ファイルを追加用にオープンして]fとする	f = open(filepath, mode='a')
両端キューをイテラブルから作る	collections.deque(iterable)
データフレームを各列毎にグループ化して列の標準偏差を求める	df.groupby(column)[column2].std()
日付時刻データの日	aDatetime.day
データフレームを丸める	df.round()
異なるカラムをキーとして2つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
＜オプション＞色をダークカーキにセットする	color = 'darkkhaki'
＜オプション＞小麦色色を用いる	color = 'wheat'
カラムを丸めて整数型にする	ds.round().astype(int)
＜オプション＞グラフの色をトマトに設定する	color = 'tomato'
データフレームのカラムの欠損値をxに指定する	df[col].fillna(x)
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
ファイルパスを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
タプルの先頭	aTuple[0]
＜オプション＞グラフの色をコーンズシルクに変更する	color = 'cornsilk'
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
要素がセットの要素に含まれるか判定する	element in aSet
ヒストグラムを描画して、色をドジャーブルーにする	plt.hist(データ列, color='dodgerblue')
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategray'
データフレームを各列と列の組み合わせ毎に集約して、最大値を求める	df.groupby([column, column2], as_index=False).max()
データフレームを百の位で四捨五入して整数型にする	df.round(-2).astype(int)
破線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='dashed')
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
配列とリストについて黒い明るいをプロットする	plt.plot(xdata, ydata, linestyle='bright', color='k')
折れ線グラフの色をダークカーキに変更する	plt.plot(データ列, データ列2, color='darkkhaki')
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
全ての句読点文字	string.punctuation
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
列によってデータフレームをグループ化し、、各グループ毎の平均値を求める	df.groupby(column).mean()
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
＜オプション＞モカシンに色を設定する	color = 'moccasin'
今日のタイムスタンプ	datetime.datetime.now()
＜オプション＞アンティークホワイトを使用する	color = 'antiquewhite'
リストと配列について破線グラフをプロットして、その色をパステル調のに指定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
ヒストグラムを描画して、色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
ヒストグラムを描画して、その色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
線グラフを描画してその色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
＜オプション＞トマトに色を設定する	color = 'tomato'
本日の日付時刻を使う	datetime.datetime.today()
イテラブルとリストについて淡いをプロットして、その色を黒くする	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームの欠損値をxに設定する	df.fillna(x)
文字列中の部分文字列を文字列に置換する	s.replace(sub, newsub)
散布図をカラーコードの菱形マーカーで描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
文字列全体がパターンにASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームのリスト列が正規分布からどの程度歪んでいるか見る	df[aList].kurt()
データフレームのリスト列の中の未入力値の数を求める	df[aList].isna().sum()
ユーザが整数を入力する	int(input())
タプルをn倍する	aTuple * n
カンマで文字列を分割して、文字列リストにする	s.split(',')
列から上限nの両端キューを作る	collections.deque(iterable, maxlen=n)
行列の最大値	np.max(aArray)
リストとリストについて色差別ない色の折れ線グラフをプロットして、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
異なる列をキーとして２つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
異なる列をキーとして2つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
＜オプション＞タンを用いる	color = 'tan'
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列, データ列2, color='darkmagenta')
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
淡いでリストについての柱状図を描画する	plt.hist(xdata, color='muted')
ファイルからファイル名を使う	os.path.basename(filepath)
xが一桁の数かどうか	-9 <= x <= 9
データ列の未入力値を最大値に指定する	ds.fillna(ds.max())
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
中央値でデータフレームの中のカラムをビンニングする	pd.qcut(df[col], 2)
カラーコードに棒の色を変更する	plt.bar(ラベル列, データ列, color=rgb)
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
折れ線グラフに描画してマーカーをポイント印にする	plt.plot(データ列, データ列2, marker='.')
データ列とラベル列を指定して横棒を描画する	plt.barh(ラベル列, データ列)
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightskyblue')
文字列の先頭だけ大文字化する	s.capitalize()
ファイルが存在するか調べる	os.path.exists(filepath)
＜オプション＞グラフの色を茶色に設定する	color = 'brown'
オブジェクトのバイトサイズ	sys.getsizeof(obj)
３つの最大値	max(x, y, z)
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
明るいを用いて柱状図をプロットする	plt.hist(xdata, color='bright')
２つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフの四角印を赤くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
ヒストグラムを描画して、その色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
文字列のサフィックスは部分文字列	s.endswith(sub)
折れ線グラフを描画してその色をナバホホワイトにセットする	plt.plot(データ列, データ列2, color='navajowhite')
オブジェクトが無限に繰り返すイテラブル	itertools.repeat(element)
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データ列とリストの散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
＜オプション＞マーカーを下三角に変更する	marker = 'v'
＜オプション＞濃いシアンにグラフの色を変更する	color = 'darkcyan'
折れ線グラフを描画して、色をゴーストホワイトにセットする	plt.plot(データ列, データ列2, color='ghostwhite')
行列の行列積	np.matmul(aArray, aArray2)
列名を指定された列名一覧に置き換える	df.columns = columns
列を両端キューに変換する	collections.deque(iterable)
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
＜オプション＞バッファのサイズを小さくする	buffering = 4096
散布図を赤い大バツマーカーで描画する	plt.plot(xdata, ydata, marker='X', c='r')
改行せずに文字列をプリントする	print(value, end='')
折れ線グラフを描画して、色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
折れ線グラフを描画して、その色をラベンダーブラッシュに変更する	plt.plot(データ列, データ列2, color='lavenderblush')
データフレームを十の位で四捨五入して、整数型にする	df.round(-1).astype(int)
カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
リストとリストの折れ線をアルファ値alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
２つのリストから辞書	dict(zip(aList, aList2))
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
ヒストグラムを描画して色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
データ列を折れ線グラフに描画して、マーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
イテラブルと数列で暗いの折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
明るいの折れ線の色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
文字列を変数にして変数にする	z = sympy.Symbol(s)
二つの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
タイムスタンプデータにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
文字列が漢字か	('\u4E00' <= ch <= '\u9FD0')
書式fmtでデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col], format=fmt)
リストとリストについての散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
ヒストグラムの色をブラックにする	plt.hist(データ列, color='black')
プロットを明るくする	sns.set(pallete='bright')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
データフレームを各列毎にグループ化し、、列の平均値を求める	df.groupby(column)[column2].mean()
棒を描画し、グラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
＜オプション＞丸印を加える	marker = 'o'
データフレームの中の欠損値の合計を数える	df.isna().sum()
ヒストグラムを描画して、その色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
文字列内にひとつでも英字が含まれるか調べる	any(c.isalpha() for c in s)
データフレームのカラムが何月か見る	df[col].dt.month
キューから最初の値を取り除く	deq.remove(element)
最大行数を変更する	pd.set_option('display.max_rows', n)
nがn2と等しいか調べる	n == n2
データフレームの列を100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
＜オプション＞エンコーディングをSJISに変更する	encoding = 'shift_jis'
折れ線グラフを描画して、その色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
＜オプション＞カンマをセパレータで使用する	sep = ','
ヒストグラムを描画して、その色をインディアンレッドにセットする	plt.hist(データ列, color='indianred')
イテラブルとリストの散布図に黒い右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c='k')
表の内の欠損値がある行を落とす	df.dropna()
＜オプション＞シルバーを使う	color = 'silver'
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
データフレームのリストカラムを1000の位で四捨五入して整数にする	df[aList].round(-3).astype(int)
カウンタの要素のカウント	aCounter[element]
ヒストグラムを描画して、その色をインディアンレッドにする	plt.hist(データ列, color='indianred')
リストのヒストグラムを描画する	plt.hist(aList)
データフレームのカラムとカラムを折れ線で描画する	plt.plot(df[col], df[col2])
＜オプション＞ホワイトスモークに色を変更する	color = 'whitesmoke'
データフレームのカラムを1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
データフレームの列の標本標準偏差	df[col].std()
データフレームの数値を小数点以下n桁で丸める	df.round(n)
８進数字を全部求める	string.octdigits
ヒストグラムを描画して、その色をホワイトに設定する	plt.hist(データ列, color='white')
正弦の逆数を計算する	math.asin(x)
イテラブルとリストについて散布図を描画し、、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
データフレームの指定された列を抽出する	df[column]
＜オプション＞グラフの色をマルーンに設定する	color = 'maroon'
有理数の分子	q.numerator
黒色の四角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='s', c='k')
深紅にヒストグラムの色をする	plt.hist(データ列, color='crimson')
折れ線グラフのバツ印を緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
散布図に右三角マーカーを使用する	plt.plot(xdata, ydata, marker='>')
＜オプション＞グラフの色をライトブルーに指定する	color = 'lightblue'
＜オプション＞ペルーにグラフの色を設定する	color = 'peru'
データフレームのリスト列は正規分布からどの程度尖っているか見る	df[aList].skew()
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
データフレームを'A'列で昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
リストの全要素を取り除く	aList.clear()
リストのn番目からn2番目までの部分	aList[n:n2]
＜オプション＞ライトグリーン色を用いる	color = 'lightgreen'
nがn2以上か確認する	n >= n2
両端キューの中に要素が含まれてるか調べる	element in deq
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
散布図を丸マーカーを使って描画する	plt.plot(xdata, ydata, marker='o')
データフレームから列を一つだけ選択する	df[[column]]
ヒストグラムを描画して、その色を淡いピンク色にする	plt.hist(データ列, color='lightpink')
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
ヒストグラムを描画して、その色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
文字コードtextとしてファイルを追加できるように開く]	open(filepath, mode='a', encoding=text)
集合から何でもいいからひとつ取り出す	aSet.pop()
データフレームの列と列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
ヒストグラムを描画して、色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
コンビネーションを計算する	math.comb(n, k)
グラフの横軸のラベルをuntitledに設定する	plt.xlabel(untitled)
ヒストグラムを描画して、色をペルーに指定する	plt.hist(データ列, color='peru')
データフレームを列によってソートする	df.sort_values(by=column)
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
＜オプション＞シーグリーン色を使用する	color = 'seagreen'
データフレームから1行だけ列を消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データフレームを各列と列の組み合わせ毎にグループ化し、最小値を求める	df.groupby([column, column2], as_index=False).min()
nマイナスn2	n - n2
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図に赤い四角マーカーを用いる	plt.plot(xdata, ydata, marker='s', c='r')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
データフレームのそれぞれのグループごとの最大値を求める	df.groupby(column).max()
データフレームの先頭n行	df.head(n)
キューの末尾に文字列を付け加える	deq.append(element)
カウンタからゼロ回数を取り除く	+aCounter
折れ線グラフに描画して印を下三角印にする	plt.plot(データ列, データ列2, marker='v')
スピアマンとしてデータフレームのリストカラムの相関行列を求める	df[aList].corr(method='spearman')
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
ライトサーモンにヒストグラムの色をする	plt.hist(データ列, color='lightsalmon')
xが1もしくは2	x == 1 or x == 2
正規表現で文字列を分割する	re.split(pattern, s)
リストとイテラブルについて散布図を描画して右三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフの丸マーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
折れ線グラフを描画して、その色をサーモンに変更する	plt.plot(データ列, データ列2, color='salmon')
リストと配列についての折れ線を描いて、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
Pythonパスにディレクトリを追加する	sys.path.append(dir)
双方向キューの大きさ	len(deq)
折れ線グラフを描画して、その色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
赤色のポイントマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
リストを明るい色の柱状図として描く	plt.hist(xdata, color='bright')
線グラフを描画してその色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
＜オプション＞グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
辞書からカウンタを作る	collections.Counter(aDict)
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
グラフのサイズを縦height横widthに設定する	plt.figure(figsize=(width, height))
日付時刻データの日数	aDatetime.day
グラフの中の縦軸の名前をuntitledに設定する	plt.ylabel(untitled)
数列とリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
＜オプション＞グラフの色をクリムゾンに設定する	color = 'crimson'
線グラフの色を青に変更する	plt.plot(データ列, データ列2, color='blue')
リストをヒストグラムを用いて可視化する	plt.hist(aList)
データフレームを'A'列を用いてで大きい順に並べ直す	df.sort_values(by='A', ascending=False)
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
＜オプション＞ブランチドアーモンド色を用いる	color = 'blanchedalmond'
破壊的に'A'列を用いて降順にデータフレームを並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
データフレームを'A'列の値によってまとめたグループを見る	df.groupby('A')
数列とリストについての折れ線を描画してその色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
データフレームのカラム名を列挙する	df.columns
グラフを全般的に淡くする	sns.set(pallete='muted')
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
ヒストグラムを描画して、その色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
リストと配列の淡いグラフを描画してその色を黒色に設定する	plt.plot(xdata, ydata, linestyle='muted', color='k')
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
データ列が何分か確認する	ds.dt.minute
右にn個分キューの要素をローテンションする	deq.rotate(n)
文字列の出力を改行なしに行う	print(value, end='')
ひとつでも非数字が文字列中に含まれるかどうか調べる	any(not c.isdigit() for c in s)
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
折れ線グラフを描画してその色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
＜オプション＞フローラルホワイト色を使う	color = 'floralwhite'
カウンタからゼロカウントを取り除く	+aCounter
実数の双曲線正弦	math.sinh(x)
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
データフレームのカラムの標準偏差	df[col].std()
実数の２乗	x ** 2
前の行の値で列の欠損値を埋める	ds.fillna(method='ffill')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
数式を展開する	sympy.expand(e)
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
リストの最初の文字列を探す	aList.index(element)
ファイルパスをバイナリモードとしてオープンして]fとする	f = open(filepath, mode='rb')
データ列とリストについての散布図に赤い丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c='r')
今日は何曜日か知る	datetime.datetime.today().weekday()
オブジェクトが文字列かどうか調べる	isinstance(obj, str)
暗いグラフをデータ列と配列で描画してその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
ヒストグラムの色を黄色くする	plt.hist(データ列, color='y')
日付データが日付データより前か調べる	aDate < aDate2
ヒストグラムを描画して、色をカーキに設定する	plt.hist(データ列, color='khaki')
オールドレース色の線グラフを描画する	plt.plot(データ列, データ列2, color='oldlace')
２つのカウンタの共通する要素を求める	aCounter & aCounter2
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
CSVファイルTSVファイルをn番目の列を行にして読み込む	pd.read_csv(filename, index_col=n)
本日が木曜日か	datetime.datetime.today().weekday() == 3
ファイルをオープンする]	open(filepath)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
オブジェクトはリストクラスのインスタンスか	isinstance(obj, list)
PandasでdateStringを日付データにする	pd.to_datetime(dateString)
＜オプション＞namesを列名に設定する	names = names
デックのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
xが1、もしくは2	x == 1 or x == 2
ファイル名のセパレータ記号	os.sep
線グラフの色をパールゴールデンロッドにする	plt.plot(データ列, データ列2, color='palegoldenrod')
実数が負の数か調べる	x < 0
リストを配列に変換する	np.array(aList)
データフレームを列によって整列し、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
＜オプション＞ロイヤルブルー色を用いる	color = 'royalblue'
八進文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
＜オプション＞スレートブルー色を使う	color = 'slateblue'
タイムスタンプデータにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
リストの末尾のn要素を捨てる	aList[:-n]
データフレームのリストカラムの欠損値を最頻値で置き換える	df[aList].fillna(df[aList].mode().iloc[0])
ボックスチャートを２つ並べて描画する	plt.boxplot([データ列, データ列2])
データフレームを列によって並べ直して下の方を取り出す	df.sort_values(columns).tail(n)
データ列の中にいくつが含まれるか数える	ds.isin([value]).sum()
両端キュー中の値を数える	deq.count(element)
折れ線グラフのダイアモンドマーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフを描画してその色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
＜オプション＞グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
両端キューをポップする	deq.pop()
タプルのn番目からn2番目の部分	aTuple[n:n2]
n個にデータ列を等間隔でビニングする	pd.cut(ds, n)
折れ線グラフに星印を使用する	plt.plot(データ列, データ列2, marker='*')
ヒストグラムでリストを可視化する	plt.hist(aList)
＜オプション＞グラフの色をダーク・スラテグレーに指定する	color = 'darkslategrey'
全要素を0で初期化された配列	np.zeros(要素数)
データフレームのリストカラムの欠損値を後の値に設定する	df[aList].fillna(method='bfill')
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
タプルの最後	aTuple[-1]
イテラブルとデータ列について色差別ない色の折れ線グラフを描き、、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
淡いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='muted', color='r')
データ列が何秒か見る	ds.dt.second
データ列を折れ線グラフに描画して、印を星印にする	plt.plot(データ列, データ列2, marker='*')
リストと数列について散布図を描き、、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
現在の秒を使う	datetime.date.today().second
xに棒グラフの幅を指定する	plt.bar(ラベル列, データ列, width=x)
Pandasでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col])
ヒストグラムの透明度をxに設定する	plt.hist(データ列, alpha=x)
グリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='green')
線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
散布図に赤い大バツマーカーを使用する	plt.plot(xdata, ydata, marker='X', c='r')
ヒストグラムを描画して、色を青紫に設定する	plt.hist(データ列, color='violet')
リストをランダムにシャッフルする	random.shuffle(aList)
カウンタをタプルから生成する	collections.Counter(aDict)
データ列とラベル列を指定して、積み上げ棒グラフを描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
列によってデータフレームをまとめたグループ	df.groupby(column)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
日付時刻データと日付時刻データの時間差を算出する	aDatetime - aDatetime2
ファイルパスをオープンして]、追加ストリームを使う	open(filepath, mode='a')
データ列を折れ線グラフに描画してマーカーを▼印にする	plt.plot(データ列, データ列2, marker='v')
折れ線グラフを描画して、その色をブランチドアーモンドに指定する	plt.plot(データ列, データ列2, color='blanchedalmond')
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
配列の形状	aArray.shape
列によってデータフレームをソートして、上位n件を取り出す	df.sort_values(columns).head(n)
折れ線グラフを描画して、その色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
Pandasで、フォーマットとして文字列を日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
日付データが水曜日かテストする	aDate.weekday() == 2
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
リストと配列についての散布図を濃い色で描く	plt.plot(xdata, ydata, c='deep')
イテラブルとリストについて散布図を描画してマーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
n2がn以上、かつn3以下か調べる	n <= n2 and n2 <= n3
カウンタのキーをひとつ増やす	aCounter[element] += 1
＜オプション＞色を暗い赤にする	color = 'darkred'
データフレームを関数でグループ化し、記述統計量を計算する	df.groupby(関数).describe()
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
パステル調の色としてデータ列とデータ列についての散布図をプロットする	plt.plot(xdata, ydata, c='pastel')
ヒストグラムを描画して、その色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
散布図にカラーコードの右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c=rgb)
nをn2だけ増加させる	n += n2
線グラフを描画してその色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
データフレームのカラムの要約統計量を求める	df[col].describe()
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgrey')
リストと数列について濃いグラフをプロットして、色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
散布図に黒い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='k')
＜オプション＞ダークサーモンを使う	color = 'darksalmon'
ファイルパスを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
データフレームの中のNaNがある行を削除する	df.dropna()
データフレームの先頭n行を見る	df.head(n)
折れ線グラフを描画して、その色をアンティークホワイトに指定する	plt.plot(データ列, データ列2, color='antiquewhite')
＜オプション＞マゼンタにグラフの色を設定する	color = 'magenta'
セットを組に変換する	tuple(aSet)
青い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
折れ線グラフを描画して、色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
配列とリストで色差別ないグラフをプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
線グラフの色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
濃い色の柱状図として配列を描画する	plt.hist(xdata, color='deep')
データフレームを各列と列の組み合わせ毎にグループ分けして、平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームを使用する	import pandas as pd
折れ線グラフを描画して色をイエローグリーンにセットする	plt.plot(データ列, データ列2, color='yellowgreen')
＜オプション＞先頭の列をインデックスに設定する	index_col = 0
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
書き込み用に文字コードtextとしてファイルをオープンする]	open(filepath, mode='w', encoding=text)
データ列の中にいくつ未入力値があるかカウントする	ds.isna().sum()
データフレームとしてJSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
線グラフを描画して、色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgrey')
nの無限な数列	itertools.repeat(n)
折れ線グラフの色をミディアムブルーにする	plt.plot(データ列, データ列2, color='mediumblue')
柱状図を半透明にする	plt.hist(データ列, alpha=0.5)
リストとリストについて濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
xが真か調べる	bool(x)
＜オプション＞トマトを使う	color = 'tomato'
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
2次元リストの転置行列	[list(x) for x in list(zip(*aList))]
マップの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
＜オプション＞ダイアモンド印を加える	marker = 'D'
nはn2と等しいかどうか	n == n2
スタックを空にする	deq.clear()
リストを周期的に繰り返す	itertools.cycle(iterable)
0から始まるn個の整数列を作る	list(range(n))
散布図にダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D')
＜オプション＞ライトグレー色を用いる	color = 'lightgray'
折れ線グラフの下三角マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='v', markersize=n)
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
データフレームの中に文字列と文字列がいくつあるか求める	df.isin([value, value2]).sum()
データ列とイテラブルの散布図を描画してマーカーの色を濃いに指定する	plt.plot(xdata, ydata, c='deep')
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
リストとイテラブルについて青色の明るいグラフをプロットする	plt.plot(xdata, ydata, linestyle='bright', color='b')
＜オプション＞カデットブルー色を使う	color = 'cadetblue'
赤い暗いの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
データ列を折れ線グラフに描画して、マーカーをポイント印にする	plt.plot(データ列, データ列2, marker='.')
折れ線グラフの色をインディアンレッドに変更する	plt.plot(データ列, データ列2, color='indianred')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
ファイルの絶対パス	os.path.abspath(filepath)
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
グラフの描画で色差別ないカラーパレットを用いる	sns.set(pallete='colorblind')
ヒストグラムの色を白に指定する	plt.hist(データ列, color='white')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
＜オプション＞ペルー色を用いる	color = 'peru'
書式で文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
リストとリストについて散布図を描画して、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
＜オプション＞四角マーカーを使用する	marker = 's'
文字列の右側からタブを除く	s.rstrip('\t')
ファイルのファイル名を見る	os.path.basename(filepath)
データフレームのカラムの中に日付データと文字列があるか	df[col].isin([value, value2])
2変数の最小値を求める	min(x, y)
２つのカウンタのいずれかに含まれる値	aCounter | aCounter2
ヒストグラムの色をレモンシフォンにセットする	plt.hist(データ列, color='lemonchiffon')
nが3で割り切れるか調べる	n % 3 == 0
リストをカウンタに変換する	collections.Counter(iterable)
ひとつでも数字が文字列内に含まれるかどうか確認する	any(c.isdigit() for c in s)
リストの最後から要素をポップする	aList.pop()
データフレームをCSVファイルとしてJSONLファイルに保存する	df.to_csv(filename)
＜オプション＞区切りをスラッシュにする	sep = '/'
カウンタをセットにする	set(aCounter)
双方向キューをポップする	deq.pop()
カラーコードの左三角マーカーをリストとデータ列についての散布図に描く	plt.plot(xdata, ydata, marker='<', c=rgb)
データ列を折れ線グラフに描画して、印を丸印にする	plt.plot(データ列, データ列2, marker='o')
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
TSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
データフレームの列が正規表現文字列にマッチしない行を選択する	df[not df[column].str.match(s)]
カラーコードの右三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='>', c=rgb)
＜オプション＞ライトコーラルに色を設定する	color = 'lightcoral'
線グラフの色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
ヒストグラムを描画して、その色をパープルに指定する	plt.hist(データ列, color='purple')
折れ線グラフを描画して、その色をパールバイオレットレッドにする	plt.plot(データ列, データ列2, color='palevioletred')
＜オプション＞グラフの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
要素一つのタプル	(element,)
文字列を全て小文字にする	s.lower()
配列と数列について散布図を描き、、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
＜オプション＞色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
折れ線グラフにバツマーカーを用いる	plt.plot(データ列, データ列2, marker='x')
データフレームを1000の位で丸める	df.round(-3)
配列とリストで色差別ないグラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
＜オプション＞ディープスカイブルー色を使用する	color = 'deepskyblue'
折れ線グラフの色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームからカラムを三つだけ選択する	df[[column, column2, column3]]
リストとデータ列についてパステル調のグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
コマンド引数のリスト	sys.argv[1:]
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
文字列を二分する	s.partition(sep)
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
データ列の欠損値をxに変更する	ds.fillna(x)
表示可能な行数をnに設定する	pd.set_option('display.max_rows', n)
カウンタの項目一覧	aCounter.keys()
JSONLファイルにデータフレームをインデックスを付けずに保存する	df.to_csv(filename, index=None)
三つの最小値	min(x, y, z)
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
ベクトルの行ごとの平均値を求める	np.mean(aArray, axis=1)
最大値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].max())
＜オプション＞グラフの色をベージュに設定する	color = 'beige'
nがn2以下、または、n3以上か	n <= n2 or n >= n3
実数の天井数を計算する	math.ceil(x)
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
データフレームの欠損値をxで補う	df.fillna(x)
ヒストグラムを描画して、その色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
nが2で割り切れないか調べる	n % 2 == 1
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategray')
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
ふたつのリストの積集合	list(set(aList) & set(aList2))
＜オプション＞先頭の行をヘッダに増やす	header = 0
データフレームを各列毎に分類して、列の最大値を求める	df.groupby(column)[column2].max()
データフレームを二つの列で降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームのリストカラムのNaNをメディアンで埋める	df[aList].fillna(df[aList].median())
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか調べる	s.count(sub, start, end)
データフレームを各列と列の組み合わせ毎にグループ分けして個数を求める	df.groupby([column, column2], as_index=False).count()
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
黒い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
変数を出力する	print(value)
線グラフの色をローングリーンにセットする	plt.plot(データ列, データ列2, color='lawngreen')
日付時刻データの秒数	aDatetime.second
グラフの描画で淡い色を用いる	sns.set(pallete='muted')
＜オプション＞シアン色を使用する	color = 'cyan'
文字コードtextを用いてファイルを書き込み用に開く]	open(filepath, mode='w', encoding=text)
データフレームを表示するとき、表示される列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームを表示するとき、表示可能な最大行数をnに変更する	pd.set_option('display.max_rows', n)
ファイルパスをオープンして]、読み込みストリームを求める	open(filepath, mode='r')
データ列とデータ列について散布図を描画してダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
日付時刻データの曜日を整数で見る	aDatetime.weekday()
パステル調のグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフに線幅nのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
ファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの中央値	df.median()
＜オプション＞破壊的に操作する	inplace = True
逆順の双方向キューを使う	reversed(deq)
データフレームの欠損値を50パーセンタイルで埋める	df.fillna(df.median())
データフレームのカラムの欠損値を平均に設定する	df[col].fillna(df[col].mean())
ヒストグラムを描画して、その色を紺に設定する	plt.hist(データ列, color='darkblue')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
カウンタからゼロカウントを取り出す	+aCounter
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
データフレームの列が文字列で終わらないデータを取り出す	df[not df[column].str.endswith(s)]
ファイルをオープンして]、追加ストリームを見る	open(filepath, mode='a')
乱数シードをnで初期化する	random.seed(n)
青いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='b')
常用対数を計算する	math.log10(x)
タイムスタンプデータが日付時刻データと同時か調べる	aDatetime == aDatetime2
ヒストグラムを描画してその色をタンにセットする	plt.hist(データ列, color='tan')
整数nを2進表現に変換する	bin(n)
nはリストのどれかかどうか確認する	n in aList
十六進文字列を整数に変換する	int(s, 16)
＜オプション＞無視するフッタをnにする	skipfooter = n
折れ線グラフの右三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
データフレームを列の値でグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
パラメータについて数式の微分を行う	sympy.diff(e, z)
＜オプション＞色をゲインズボロに指定する	color = 'gainsboro'
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
ヒストグラムを描画して、その色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
線グラフを描画して、その色をライトスレイグレーにセットする	plt.plot(データ列, データ列2, color='lightslategray')
＜オプション＞グラフの色をブラックに設定する	color = 'black'
三変数の最も大きい値を計算する	max(x, y, z)
英字を全部使う	string.ascii_letters
＜オプション＞グラフの色をやわらかい青に変更する	color = 'cornflowerblue'
＜オプション＞グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
データフレームの重複していない行のみ	df[not df.duplicated(keep=False)]
ヒストグラムを描画して、その色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
ヒストグラムの色をゴールデンロッドにする	plt.hist(データ列, color='goldenrod')
線グラフを描画して、その色をダークシアグリーンに指定する	plt.plot(データ列, データ列2, color='darkseagreen')
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
散布図に赤い上三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
データフレームを'A'列の値で集約する	df.groupby('A')
＜オプション＞グラフの色を青緑に変更する	color = 'turquoise'
リストからカウンタを生成する	collections.Counter(iterable)
線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
リストの出力を改行なしに行う	print(value, end='')
散布図をカラーコードの星マーカーで描く	plt.plot(xdata, ydata, marker='*', c=rgb)
グラフで使う縦軸のラベルをuntitledに指定する	plt.ylabel(untitled)
列の値によってデータフレームをグループ化して、それぞれのグループの最小値を算出する	df.groupby(column).min()
アルファベットから１文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
＜オプション＞サンディーブラウンにグラフの色を指定する	color = 'sandybrown'
データ列をインポートする	import pandas as pd
＜オプション＞グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgrey')
＜オプション＞グラフの色をネイビーに設定する	color = 'navy'
リストとリストについて相関を可視化する	plt.scatter(xdata, ydata)
文字列をセンタリングにする	s.center(文字列幅)
ダークターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkturquoise')
リストから文字列を取り除く	aList.remove(element)
＜オプション＞ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
プロットの描画で暗いパレットを使う	sns.set(pallete='dark')
データフレームの最後	df.tail()
文字列をエンコーディングを使ってバイト列に変換する	s.encode(encoding=encoding)
辞書をJSON形式のインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
実数が有限か調べる	math.isfinite(x)
データ列の中に文字列があるか調べる	ds.isin([value])
文字列は全て十進数字かどうか確認する	s.isdecimal()
線グラフを描画して色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategrey')
ダークブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
折れ線グラフを描画して、色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
データフレームのカラムを10の位で四捨五入して、整数にする	df[col].round(-1).astype(int)
ヒストグラムを描画してその色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
データフレームを各列毎にグループ化して、文字列という名前のグループを見る	df.groupby(column).get_group(s)
リストと数列についての散布図にポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.')
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列, データ列2, color='darkgreen')
ファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
OSはLinuxか	sys.platform.startswith('linux')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
ファイル名がTSVファイルか	filename.endswith('.tsv')
全ての印字可能な文字	string.printable
データフレームの数値を一度に整数に丸める	df.round()
第二コマンド引数を知る	sys.argv[1]
＜オプション＞右三角マーカーを描画する	marker = '>'
データフレームで、カラムと列に重複があるか見る	df.duplicated(subset=[column, column2])
データフレームのカラムが正規分布からどれだけ、尖っているか見る	df[col].skew()
本日の曜日を整数で見る	datetime.datetime.today().weekday()
折れ線グラフの色を小麦色に変更する	plt.plot(データ列, データ列2, color='wheat')
四分位数ごとにデータ列を分割する	pd.qcut(ds, 4)
＜オプション＞グラフの色をラベンダーにセットする	color = 'lavender'
折れ線グラフを描画して色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgray')
本日は何月か知る	datetime.datetime.today().month
リストと配列についての散布図をパステル調の色として描画する	plt.plot(xdata, ydata, c='pastel')
濃いの折れ線の色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
データフレームを列によって昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データ列とリストの折れ線グラフを描画し、、色をカラーコードに変更する	plt.plot(xdata, ydata, color=rgb)
商と余りを同時に計算する	divmod(x, y)
リストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
文字列をセパレータで区切って列挙する	s.split(sep)
キューの順序を左にn個分ローテンションする	deq.rotate(-n)
ヒストグラムを描画して、色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
文字列の右側から改行を取り除く	s.rstrip('\n')
等量でn個に配列を分割する	pd.qcut(aArray, n)
＜オプション＞グラフの色をダークオレンジに設定する	color = 'darkorange'
０で全要素を初期化された符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
線幅nの折れ線を描画する	plt.plot(xdata, ydata, linewidth=n)
赤色の明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
暗い色で重なりを見やすくリストと配列についての散布図を描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
整数nのビット長を見る	n.bit_length()
日付時刻データが何日か知る	aDatetime.day
＜オプション＞グラフの色をビスクに設定する	color = 'bisque'
文字列が英数字かどうか	s.isalnum()
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列, データ列2, color='oldlace')
＜オプション＞バッファリングのサイズをセットする	buffering = 4096
▲マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
ヒストグラムを描画してその色をアイボリーに設定する	plt.hist(データ列, color='ivory')
暗い赤にヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
折れ線グラフを描画してその色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
ヒストグラムの色をターコイズにする	plt.hist(データ列, color='turquoise')
データフレームから指定された３つの列を抽出する	df[[column, column2, column3]]
＜オプション＞グラフの色をデピンクに設定する	color = 'deeppink'
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を計算する	df.groupby([column, column2], as_index=False).var()
折れ線グラフを描画して、色をライムグリーンに指定する	plt.plot(データ列, データ列2, color='limegreen')
色差別ないの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
散布図を暗い色として描画する	plt.plot(xdata, ydata, c='dark')
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
線グラフの色をアクアマリンに変更する	plt.plot(データ列, データ列2, color='aquamarine')
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
折れ線グラフを描画してその色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
整数nの八進表現	oct(n)
データフレームの重複した行のみを選択する	df[df.duplicated(keep=False)]
＜オプション＞グラフの色をオールドレースに指定する	color = 'oldlace'
黒い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
正規表現をASCII限定としてあらかじめコンパイルする	re.compile(pattern, flag=re.ASCI)
数式の積分を行う	sympy.integrate(e)
ふたつの集合の差集合を求める	aSet.difference(aSet2)
リストとリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
ヒストグラムを描き、、ビン数をnにセットする	plt.hist(データ列, bins=n)
日付時刻データが何月か知る	aDatetime.month
リストを縦軸、配列を横軸と指定して折れ線グラフを描画する	plt.plot(xdata, ydata)
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
ヒストグラムの色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
nをn2で割った値の切り上げ	(n + n2 - 1) // n2
折れ線グラフを描画して、その色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
折れ線グラフを描画して、色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
＜オプション＞淡いピンク色にグラフの色を設定する	color = 'lightpink'
＜オプション＞ダークシアグリーンを使用する	color = 'darkseagreen'
16進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
＜オプション＞ダークバイオレット色を使う	color = 'darkviolet'
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
カウンタを辞書を使って更新する	aCounter.update(aDict)
赤い下三角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='v', c='r')
データフレームから指定された２つの列を取り出す	df[[column, column2]]
ヒストグラムを描画して、その色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
行列の行ごとの最小を求める	np.min(aArray, axis=1)
組の平均値	sum(aTuple)/len(aTuple)
＜オプション＞青緑色を使う	color = 'turquoise'
リストとリストについてカラーコードのパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
散布図を明るい色としてプロットする	plt.plot(xdata, ydata, c='bright')
Pandasで、データフレームのカラムをdatetime64型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
辞書順で2つの文字列を比較する	s < s2
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
変数を定義する	x = n
グラフのサイズを横width縦heightに設定する	plt.figure(figsize=(width, height))
文字列を空白を用いて区切る	s.split()
折れ線グラフにラベルを設定する	plt.plot(xdata, ydata, label=untitled)
ヒストグラムを描画して、その色をグリーンに変更する	plt.hist(データ列, color='green')
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
リストとリストを連結する	aList + aList2
散布図に赤色の右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>', c='r')
＜オプション＞グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
リストを境界値としてデータフレームの中の列をビンニングする	pd.cut(df[col], aList)
折れ線グラフを描画して、その色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
再帰の上限を増やす	sys.setrecursionlimit(1000000)
リストとリストの散布図に黒い上三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
小数点数の逆双曲線余弦	math.acosh(x)
線グラフの色をミントクリームに指定する	plt.plot(データ列, データ列2, color='mintcream')
リストとデータ列の散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
ヒストグラムの色をブラックに変更する	plt.hist(データ列, color='black')
＜オプション＞ダークバイオレットを使う	color = 'darkviolet'
リストをn回、連結する	aList * n
ベクトルの要素ごとに加算する	aArray + aArray2
＜オプション＞グラフの色をダークサーモンに設定する	color = 'darksalmon'
文字列を太文字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgray')
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
横棒グラフの色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
文字列を白色で表示できる文字列にする	f'\033[37m{value}\033[0m'
データフレームの列の各データ値の出現数	df[col].value_counts()
リストとリストの散布図に赤い大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c='r')
折れ線グラフを描画して、その色をプラムに変更する	plt.plot(データ列, データ列2, color='plum')
浮動小数点数を万の位で丸める	round(x, -4)
折れ線グラフを描画して、その色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategrey')
白い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='w')
水色でリストをプリントする	print(f'\033[36m{value}\033[0m')
'A'列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby('A').describe()
ヒストグラムを描画してその色を貝殻に変更する	plt.hist(データ列, color='seashell')
データフレームの列の中央値	df[col].median()
いつまでもnからカウントアップする	itertools.count(start=n)
データフレームのカラムの未入力値を最小値に設定する	df[col].fillna(df[col].min())
オブジェクトのオブジェクト識別子	id(obj)
ライムにヒストグラムの色を指定する	plt.hist(データ列, color='lime')
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='gray')
データフレームを各列毎にグループ分けして列の標準偏差を算出する	df.groupby(column)[column2].std()
カラーコードの三角マーカーをデータ列とリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='^', c=rgb)
リストとイテラブルの青い色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
スピアマン相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='spearman')
＜オプション＞データ型を指定する	dtype = bool
折れ線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
マッピングの項目名の値	aDict[key]
カウンタのそれぞれの値を、そのカウントだけ列挙する	aCounter.elements()
ヒストグラムを描画してその色をベージュに指定する	plt.hist(データ列, color='beige')
リストと配列について散布図を描画して、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
＜オプション＞色を貝殻に設定する	color = 'seashell'
＜オプション＞ミスティローズを用いる	color = 'mistyrose'
両端キューの左に値を追加する	deq.appendleft(element)
エクセルファイルファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
リストと配列についての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
データフレームを複数の列の値によってグループ化し、記述統計量を算出する	df.groupby(columns).describe()
リストとリストについての散布図に三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^')
＜オプション＞アリスブルーにグラフの色をセットする	color = 'aliceblue'
ヒストグラムの色をスノーに指定する	plt.hist(データ列, color='snow')
Pandasで、フォーマットfmtとして文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
既存の配列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
バイナリ用にファイルを開く]	open(filepath, mode='rb')
線グラフを描画して、その色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
カウンタのそれぞれの項目を回数だけリストとして得る	aCounter.elements()
データ列のNaNを平均値に減らす	ds.fillna(ds.mean())
項目名が辞書上でまだ定義されていないかどうか	key not in aDict
ボックスチャートを二つ並べる	plt.boxplot([データ列, データ列2])
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
データフレームの各グループごとの標準偏差を求める	df.groupby(column).std()
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
リストをn回接続する	aList * n
線グラフの色をダーク・スラテグレーにセットする	plt.plot(データ列, データ列2, color='darkslategrey')
実数を実数で割って切り捨てる	x // y
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
配列を分割数nを使って等量でビン分割する	pd.qcut(aArray, n)
データフレームのカラムの中に日付データと文字列があるか調べる	df[col].isin([value, value2])
折れ線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
nが負の数かどうか調べる	n < 0
リストと配列の散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
リストとリストについて淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
折れ線グラフに黄色い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
データフレームから重複する行をドロップして、更新する	df.drop_duplicates(inplace=True)
ヒストグラムを描画して色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgray')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
タイムスタンプデータが月曜日	aDatetime.weekday() == 0
日付データは日付データと同時かテストする	aDate == aDate2
nマイナスn2を求める	n - n2
データフレームのリスト列の未入力値を直後の値に指定する	df[aList].fillna(method='bfill')
組の文字列が最初に見つかるインデックス	aTuple.index(element)
文字列は印字できるか確認する	s.isprintable()
リストとリストについての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
配列と同じ大きさの空行列を作る	np.empty_like(aArray)
組の最後を取り除く	aTuple[:-1]
リストのオブジェクトの位置をエラーなく求める	aList.index(element) if element in aList else -1
データ列を折れ線グラフに描画してマーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
赤いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームを二つの列の値で分類して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
チョコレート色の線グラフを描画する	plt.plot(データ列, データ列2, color='chocolate')
＜オプション＞ライム色を使う	color = 'lime'
データ列の各データ値の出現数	ds.value_counts()
サーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='salmon')
データフレームをサンプリングする	df.sample()
ヒストグラムを描画して色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
セットにイテラブルの要素を追加する	aSet.update(iterable)
文字列は文字列より辞書順で後	s > s2
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
nがn2よりも大きい	n > n2
データフレームを関数の値によってグループ化し、要約統計量を計算する	df.groupby(関数).describe()
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ヒストグラムを描き、、半透明ににする	plt.hist(データ列, alpha=0.5)
グラフの描画で暗い色を使う	sns.set(pallete='dark')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
データフレームを複数の列をキーにしてソートする	df.sort_values(by=column)
折れ線グラフを描画して、色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
色差別ないグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
配列とリストの散布図に文字列というデータラベル用のラベルをつける	plt.scatter(xdata, xdata, label=s)
ヒストグラムを描画して、その色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
バイトオーダを知る	sys.byteorder
二進文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
折れ線グラフを描画して、色を紺に変更する	plt.plot(データ列, データ列2, color='darkblue')
文字列が識別子名か	s.isidentifier()
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
日付データにn日を加える	aDate + datetime.timedelta(days=n)
＜オプション＞改行コードを旧Macに設定する	newline = '\r'
実数が正の数	x > 0
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
直後の値でデータフレームのリストカラムの欠損値を置き換える	df[aList].fillna(method='bfill')
データフレームの中の列を分割数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフを描画して、その色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
読み込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='r')
空白で文字列を分割する	s.split()
双方向キューのn番目	deq[n]
＜オプション＞ライトスカイブルー色を使う	color = 'lightskyblue'
アルファベットの文字列	string.ascii_letters
リストを太文字でプリントする	print(f'\033[1m{value}\033[0m')
ビン数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
折れ線グラフの右三角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
文字列が全てアスキー文字か確認する	s.isascii()
itertoolsモジュールをインポートする	import itertools
データフレームの行がnの行を取り出す	df.loc[n]
文字列の開始位置から終了位置までの範囲で部分文字列の登場をカウントする	s.count(sub, start, end)
折れ線グラフのマーカーを下三角にする	plt.plot(データ列, データ列2, marker='v')
nが1、もしくは2か確認する	n == 1 or n == 2
部分文字列	sub in s
折れ線グラフの色をアクアマリンに変更する	plt.plot(データ列, データ列2, color='aquamarine')
ヒストグラムを描画して色をラベンダーに設定する	plt.hist(データ列, color='lavender')
ヒストグラムの色を淡い茶色に変更する	plt.hist(データ列, color='tan')
明るいの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
折れ線グラフの色を青紫に変更する	plt.plot(データ列, データ列2, color='violet')
データフレームの値がNaN	df.isna()
複数のデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
名前からカラーマップを見る	"plt.get_cmap(""カラーマップ名"")"
暗いグラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
折れ線グラフのポイント印を黒くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
両端キューをタプルにする	tuple(deq)
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
n個に等しい量になるように配列をビン分割する	pd.qcut(aArray, n)
表から重複した行を削除する	df.drop_duplicates()
データフレームを一度に整数に丸める	df.round()
折れ線グラフを描画してその色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
データ列とリストについて散布図を描画して三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
実数に実数を加える	x + y
データフレームのリストカラムの中央値	df[aList].median()
線グラフを描画して、その色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
ネイビー色の線グラフを描画する	plt.plot(データ列, データ列2, color='navy')
現在のミリ秒	int(time.time() * 1000)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
型が名前付きタプルか調べる	issubclass(C, tuple)
データ列を使う	import pandas as pd
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームを10の位で丸めて、整数にする	df.round(-1).astype(int)
文字列が文字列より辞書順で後か確認する	s > s2
文字列をアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
オブジェクトはリスト型か	isinstance(obj, list)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
折れ線グラフを描画して、その色をコーンズシルクにセットする	plt.plot(データ列, データ列2, color='cornsilk')
折れ線グラフにサイズnの▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
nからn2までのスライス	slice(n, n2)
＜オプション＞カラムの名前をnamesに設定する	header = names
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
文字列の終了位置より前に部分文字列が存在しないか調べる	s.find(sub, 0, end) == -1
赤いバツマーカーを数列とデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='x', c='r')
散布図を三角マーカーで描画する	plt.plot(xdata, ydata, marker='^')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
グラフに水平方向の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
実数を三乗する	x ** 3
オブジェクトの大きさを知る	sys.getsizeof(obj)
折れ線グラフを描画してその色をピーチパフに指定する	plt.plot(データ列, データ列2, color='peachpuff')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
カウンタから最頻出の項目の件数	aCounter.most_common()[1]
ヒストグラムを描画して、色をカーキに指定する	plt.hist(データ列, color='khaki')
横棒グラフの色をカラーコードに指定する	plt.barh(ラベル列, データ列, color=rgb)
リストのn番目のを見る	aList[n]
＜オプション＞ブランチドアーモンド色を使う	color = 'blanchedalmond'
折れ線グラフを描画してその色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
線グラフの色をピーチパフにセットする	plt.plot(データ列, データ列2, color='peachpuff')
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
データフレームの欠損値がある箇所を	df.style.highlight_null()
折れ線グラフを描画して、その色をミディアムバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='mediumvioletred')
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
配列と数列についての散布図に▼マーカーをプロットする	plt.plot(xdata, ydata, marker='v')
データフレームのシェイプを見る	df.shape
リストとリストの散布図を描画して、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
重なりを見やすく色差別ない色を使ってリストとリストの散布図を描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
nが一桁の数かどうか	0 <= n <= 9
ベクトルの列ごとの最小	np.min(aArray, axis=0)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
シーケンスを文字列リストに変換してカンマによって連結する	','.join(map(str, iterable))
イテラブルから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
折れ線グラフに▲マーカーを加える	plt.plot(データ列, データ列2, marker='^')
イテラブルからサンプリングする	random.sample(iterable)
データ列とリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
最大値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].max())
淡いの線幅をnにセットする	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
ヒストグラムを描画して、その色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
折れ線グラフを描画して、その色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
文字列がアルファベット	s.isalpha()
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
配列とリストについて黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
＜オプション＞色を黄色に設定する	color = 'yellow'
データフレームを'A'列と'B'列によって破壊的に降順に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線グラフに線幅nの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
見やすいグラフを使う準備をする	import seaborn as sns
折れ線グラフの菱形印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
自然数の最大公約数	math.gcd(n, n2)
複数の列によってデータフレームをソートして更新する	df.sort_values(by=column, inplace=True)
折れ線グラフの色をブラックに変更する	plt.plot(データ列, データ列2, color='black')
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
n個にリストをビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
日付時刻データはタイムスタンプデータと同時	aDatetime == aDatetime2
カラーコードの下三角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='v', c=rgb)
カラーコードの大バツマーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
部分文字列を安全に文字列のサフィックスから除く	s.removesuffix(sub)
Pandasで、日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
日付データが何月か知る	aDate.month
データ列のタイムゾーンを日本にセットする	ds.tz_convert('Asia/Tokyo')
変数を緑色にする	f'\033[32m{value}\033[0m'
日付時刻データは日付時刻データと同時かどうか	aDatetime == aDatetime2
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
線グラフの色をグレーにする	plt.plot(データ列, データ列2, color='gray')
ヒストグラムを描画して、その色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
データフレームを列によってソートして、上位を取り出す	df.sort_values(columns).head(n)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
両端キュー中の文字列の数を数える	deq.count(element)
折れ線グラフのバツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
ヒストグラムを描画してその色をカデットブルーにセットする	plt.hist(データ列, color='cadetblue')
二つの文字列は同じか調べる	s == s2
＜オプション＞ペールグリーン色を使う	color = 'palegreen'
カラムのNaNをxで埋める	ds.fillna(x)
文字列を空白を用いて分割して、整数リストに変換する	map(int, s.split())
＜オプション＞線幅をnに設定する	linewidth = n
nまたはn2	n or n2
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
折れ線グラフにラベルを付ける	plt.plot(xdata, ydata, label=untitled)
データフレームの指定されたカラムをリストとして抽出する	df[column].values.tolist()
辞書からキーの値をエラーなく得る	aDict.get(key, None)
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
線グラフを描画してその色をダークスレートブルーに変更する	plt.plot(データ列, データ列2, color='darkslateblue')
浮動小数点数の絶対値を求める	math.fabs(x)
文字列の右端から部分文字列を除去する	s.rstrip(sub)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
データフレームの列のどの値が頻出か見る	df[col].mode()
イテラブルを文字列に変換して、タブで連結する	'\t'.join(map(str, iterable))
＜オプション＞ミスティローズ色を使う	color = 'mistyrose'
最頻値でデータ列の欠損値を補う	ds.fillna(ds.mode().iloc[0])
eの小数点数乗を求める	math.exp(x)
スタックに文字列を積む	deq.append(element)
濃いの折れ線を描画し、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームのリスト列の要約統計量を算出する	df[aList].describe()
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
パステル調のの折れ線グラフの色を赤くする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
青い四角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
データフレームをまとめてValueMapで置換する	df.replace(ValueMap)
＜オプション＞グラフの色をアンティークホワイトにする	color = 'antiquewhite'
線グラフを描画してその色をダークシアンに変更する	plt.plot(データ列, データ列2, color='darkcyan')
nの無限な数列を得る	itertools.repeat(n)
ゼロ埋めされた行列	np.zeros(行数, 列数)
標準入力から1行分読み込んで改行を取り除く	sys.stdin.readline().rstrip()
文字列の末尾から部分文字列を探す	s.rfind(sub)
文字列が小文字か調べる	s.islower()
オブジェクトは整数か調べる	isinstance(obj, int)
TSVを読み込む	pd.read_csv(filename, sep='\t')
折れ線グラフを描画して色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
赤色の大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
データ列とリストについての散布図に赤い右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c='r')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
角度のラジアンを求める	math.radians(degree)
数値の符号をコピーにする	math.copysign(x, x2)
＜オプション＞色をペールグリーンに設定する	color = 'palegreen'
部分文字列が部分文字列で始まるかどうか調べる	s.startswith(sub)
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
線グラフを描画して色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
ひとつでもASCII文字が文字列内に含まれるかどうか調べる	any(c.isascii() for c in s)
データフレームを'A'列で並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
配列とリストの折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
文字コードtextとして追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
ヒストグラムを描画して透明度をxに設定する	plt.hist(データ列, alpha=x)
複素数	complex(x, y)
折れ線グラフを描画して、その色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
ヒストグラムを描画して、その色を茶色に変更する	plt.hist(データ列, color='brown')
出力ストリームに文字列を書き込む	f.write(s)
＜オプション＞グラフの種類を点線にする	linestyle = 'dotted'
1行だけ改行を取り除いて標準入力から読み込む	sys.stdin.readline().rstrip()
データ列を折れ線グラフに描画して、マーカーを菱形印にする	plt.plot(データ列, データ列2, marker='D')
ヒストグラムを描画して、色をシアンにセットする	plt.hist(データ列, color='cyan')
文字列の開始位置以降に部分文字列が存在するかどうか調べる	s.find(sub, start) != -1
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
グラフを画面用に設定する	sns.set(context='notebook')
行列のスカラー倍	aArray * n
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
xが一桁の整数か	-9 <= x <= 9
イテラブルとリストの散布図に赤色のクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
数式を数値計算する	float(e)
リストとデータ列について破線グラフをプロットし、、その色を暗いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
データフレームのリスト列のどの値が頻出か見る	df[aList].mode()
＜オプション＞色をクリムゾンに設定する	color = 'crimson'
データフレームの末尾を見る	df.tail()
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
書き込み用にファイルをEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
散布図に△マーカーを用いる	plt.plot(xdata, ydata, marker='^')
データ列の上位25%を求める	ds.quantile(0.25)
ファイルパスを開いて]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
データ列と配列について破線グラフを描画して、色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
散布図に赤い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
オプションで標準エラーを用いる	file = sys.stderr
暗いの色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
折れ線グラフの▽マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
マップの項目名とそのエントリをペアとして取り出す	aDict.items()
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
今日が金曜日か	datetime.datetime.today().weekday() == 4
データフレームのカラムの中にある日付データと文字列の数を数える	df[col].isin([value, value2]).sum()
＜オプション＞色を耐火レンガに設定する	color = 'firebrick'
マッピングの項目名の値を参照する	aDict[key]
集合が空集合か調べる	len(aSet) == 0
明るい色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
リストと数列についての散布図にカラーコードの右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフを描画して、その色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
nをn2で整数除算する	n // n2
文字列をISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データ列と数列の色差別ないをプロットし、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
プロットの色を明るくする	sns.set(pallete='bright')
＜オプション＞グラフの色をパープルに変更する	color = 'purple'
２つの文字列が同じか調べる	s == s2
＜オプション＞色をディムグレーに設定する	color = 'dimgrey'
双曲線正弦の逆数	math.asinh(x)
整数nのバイト長を調べる	(n.bit_length() + 7) // 8
折れ線グラフの四角印を黄色くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
破線の色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
＜オプション＞バッファリングを無効にする	buffering = 0
データフレームの中のNaNを取り除く	df.dropna()
印字できる文字を全て使う	string.printable
変数を青色化する	f'\033[34m{value}\033[0m'
折れ線グラフを描画して、色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
ふたつの関係が真部分集合か調べる	aSet < aSet2
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
部分文字列が文字列の開始位置先に含まれるか調べる	s.find(sub, start) != -1
nが一桁の数か判定する	-9 <= n <= 9
散布図を黒色の丸マーカーとして描画する	plt.plot(xdata, ydata, marker='o', c='k')
ヒストグラムを描画して色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
二つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
黒色の四角マーカーをデータ列とリストの散布図に描く	plt.plot(xdata, ydata, marker='s', c='k')
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
Pandasで、文字列のエポック秒からタイムスタンプにする	pd.to_datetime(s, unit='s', utc=True)
書き込み用に文字列の示すエンコーディングとしてファイルパスをオープンする]	open(filepath, mode='w', encoding=s)
表データを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
平均値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mean())
等間隔でリストをn個にビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
Pandasで、エポック秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
表データからカラムを４つだけ選択する	df[[column, column2, column3, column4]]
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
最後の列をデータフレームから消す	df[df.columns[:-1]]
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
カラムを100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
パステル調のグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
黒い星マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='*', c='k')
日付データにn分分、足す	aDate + datetime.timedelta(minutes=n)
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
文字列中にひとつでも非英数字が含まれるか	any(not c.isalnum() for c in s)
集合の浅いコピー	aSet.copy()
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列, データ列2, color='mistyrose')
ファイルから1文字、読み込む	f.read(1)
折れ線グラフの三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
折れ線グラフを描画して、色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
中央値でデータフレームのリスト列の未入力値を埋める	df[aList].fillna(df[aList].median())
リストと配列の折れ線グラフを描画する	plt.plot(xdata, ydata)
データフレームのカラムをヒストグラムとして可視化する	plt.hist(df[column])
明るい色としてヒストグラムをプロットする	plt.hist(xdata, color='bright')
二つの集合に共通する要素からなる集合	aSet.intersection(aSet2)
グラフの文字化けを防ぐ	sns.set(font='IPAexGothic')
カウンタのそれぞれの項目をカウントだけ列挙する	aCounter.elements()
整数nが配列の一つ	n in aArray
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
データフレームの行と列を入れ替える	df.T
折れ線グラフの色を青くする	plt.plot(データ列, データ列2, color='b')
＜オプション＞グラフの色をフクシアに設定する	color = 'fuchsia'
配列の和	aArray + aArray2
＜オプション＞ドジャーブルーを用いる	color = 'dodgerblue'
ヒストグラムを描画して、色をスラグレーに設定する	plt.hist(データ列, color='slategray')
グラフの目的をスライドに設定する	sns.set(context='talk')
散布図を丸マーカーで描画する	plt.plot(xdata, ydata, marker='o')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
赤い▲印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列, データ列2, color='slateblue')
ヒストグラムを描画してその色をトマトにする	plt.hist(データ列, color='tomato')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
乱数シードをnで固定する	random.seed(n)
日付データにn週間分、足す	aDate + datetime.timedelta(weeks=n)
データフレームの列がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
＜オプション＞ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
Pandasで、データ列のエポック秒から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
＜オプション＞▲マーカーを描画する	marker = '^'
グラフの色を色差別なくする	sns.set(pallete='colorblind')
文字列の中で大文字・小文字を無視してパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
＜オプション＞欠損値を先頭にする	na_position = 'first'
数式の展開を行う	sympy.expand(e)
線グラフを描画してその色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
ヒストグラムを描画して、色を青くする	plt.hist(データ列, color='b')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
一点鎖線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
＜オプション＞グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
データフレームのグループの最小値	df.groupby(column).min()
データ列と数列の散布図を描画し、▽マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='v', c=rgb)
文字列が全て大文字か調べる	s.isupper()
データ列とラベルを指定して、棒グラフを描画する	plt.bar(ラベル列, データ列)
＜オプション＞バリーウッド色を使用する	color = 'burlywood'
リストとデータ列の黒色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
ヒストグラムを描画してその色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
辞書上で項目名が既に定義されているか調べる	key in aDict
データ列を折れ線グラフに描画して、印を大バツにする	plt.plot(データ列, データ列2, marker='X')
カラーバーを付ける	plt.colorbar()
＜オプション＞グラフの色をスプリンググリーンに設定する	color = 'springgreen'
イテラブルとリストについて散布図をプロットし、、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
アルファベットの大文字を全部見る	string.ascii_uppercase
データフレームの末尾n行を取り出す	df.tail(n)
データフレームのリストカラムの欠損値を後の行の値で埋める	df[aList].fillna(method='bfill')
ヒストグラムを描画してその色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
n個にリストをビニングする	pd.cut(aList, n)
折れ線グラフを描画して、その色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
本日の日付	datetime.date.today()
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
＜オプション＞グラフの色をナバホホワイトに指定する	color = 'navajowhite'
整数nの二進表現	bin(n)
ヒストグラムを描画して、その色をパープルに設定する	plt.hist(データ列, color='purple')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
リストと配列について散布図を描画して下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
線グラフを描画して、その色をピーチパフに変更する	plt.plot(データ列, データ列2, color='peachpuff')
ヒストグラムを描画して、色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
自然数個からk個取り出した時の並べ方の総数	math.perm(n, k)
折れ線グラフを描画して、その色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
＜オプション＞インディアンレッドを使用する	color = 'indianred'
カラムの欠損値をxで補う	ds.fillna(x)
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
タイムスタンプデータからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
Pandasの日付型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
＜オプション＞色をオレンジに指定する	color = 'orange'
タプル内の要素が少なくともひとつ真かどうか	any(aTuple)
リストとリストについての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
データ列とリストについて黒色の色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データフレームのリストカラムの相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
線グラフを描画して、その色をダークオレンジにする	plt.plot(データ列, データ列2, color='darkorange')
リストの先頭を使う	aList[0]
無限に数え上げるする	itertools.count()
リストと数列の折れ線グラフを描画してその色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
ベストな場所に凡例を入れる	plt.legend(loc='best')
ファイルパスの絶対パスを見る	os.path.abspath(filepath)
明るいグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞青緑色を使う	color = 'teal'
nが1、もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
データフレームから列を二つのみ選択する	df[[column, column2]]
線グラフの色をラベンダーに指定する	plt.plot(データ列, データ列2, color='lavender')
マゼンタで文字列をプリントする	print(f'\033[35m{value}\033[0m')
データフレームの列のNaNを平均値にする	df[col].fillna(df[col].mean())
Pandasで、文字列を日付データにする	pd.to_datetime(s)
リストと配列について青い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
折れ線グラフを描画して、色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
キーが辞書上で定義済みか調べる	key in aDict
文字列はタイトル大文字小文字	s.istitle()
数式を簡略にする	sympy.sympify(e)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
文字列がタプルに含まれないか確認する	element not in aTuple
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
グラフの描画で明るいカラーパレットを用いる	sns.set(pallete='bright')
オブジェクトはリストクラスか	isinstance(obj, list)
色差別ない色の折れ線を描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
文字列のサフィックスが部分文字列	s.endswith(sub)
二つのカウンタの共通する要素を求める	aCounter & aCounter2
リストとリストについてカラーコードの淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
データフレームをValueMapでまとめて置換する	df.replace(ValueMap)
データフレームのカラムが何秒か見る	df[col].dt.second
オプションで、出力先を標準出力に設定する	file = sys.stdout
文字列の右側から空白を除去する	s.rstrip()
ヒストグラムを描画して、その色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
リストとリストで濃いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
＜オプション＞色をライトブルーにセットする	color = 'lightblue'
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
＜オプション＞色をダーク・スラテグレーに指定する	color = 'darkslategrey'
赤色の暗いの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
nとn2の積	n * n2
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
改行で区切って2つの実行結果をプリントする	print(value, value2, sep='\n')
＜オプション＞グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
実数を百の位で丸める	round(x, -2)
ヒストグラムを描画して、その色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
パステル調の色としてデータ列についての柱状図をプロットする	plt.hist(xdata, color='pastel')
＜オプション＞トマト色を使う	color = 'tomato'
データフレーム全体をインデックスによって整列する	df.sort_index()
オブジェクトがタプル型か調べる	isinstance(obj, tuple)
ヒストグラムの色をダークオリーブグリーンにセットする	plt.hist(データ列, color='darkolivegreen')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
ヒストグラムを描画して、その色をミディアムシアグリーンに変更する	plt.hist(データ列, color='mediumseagreen')
カラムの値でデータフレームをグループ化してグループごとの件数を知る	df.groupby(column).size()
実線ヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
列のユニークな値を見る	ds.unique()
折れ線グラフを描画して、色をオリーブに指定する	plt.plot(データ列, データ列2, color='olive')
グラフの色を明るくする	sns.set(pallete='bright')
数式を積分する	sympy.integrate(e)
範囲を指定して部分文字列を文字列の後ろから探す	s.find(sub, start, end)
リストとデータ列について散布図を描画する	plt.scatter(xdata, ydata)
リストとリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
実数を切り下げて整数に変換する	math.floor(x)
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
＜オプション＞サーモン色を使用する	color = 'salmon'
ヒストグラムを描画して、色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
ファイルパスをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
データフレームから指定されたデータ型の列名一覧を使う	df.select_dtypes(型).columns
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
＜オプション＞マーカーを▼に変更する	marker = 'v'
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ファイルパスを文字列の示すエンコーディングを用いて開く]	open(filepath, encoding=s)
折れ線グラフの色を白に設定する	plt.plot(データ列, データ列2, color='white')
データフレームのカラムがxの行を抽出する	df[df[column] == x]
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ヒストグラムを描画して色を青に設定する	plt.hist(データ列, color='blue')
折れ線グラフの色を黄色くする	plt.plot(データ列, データ列2, color='y')
リストをn個に等間隔で分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
列の値でデータフレームを欠損値を含めてグループ化する	df.groupby(column, dropna=False)
文字列リストにリストを変換して、タブで結合する	'\t'.join(map(str, iterable))
ヒストグラムを描画してその色をダークマゼンタにする	plt.hist(データ列, color='darkmagenta')
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
日付データからn秒分、引く	aDate - datetime.timedelta(seconds=n)
浮動小数点数の三乗	x ** 3
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
データフレームのn行目以降取り出す	df[n:]
データフレームから重複を落とす	df.drop_duplicates()
＜オプション＞ベージュに色を設定する	color = 'beige'
濃い色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='deep')
データフレームの列を型にする	df[col] = df[col].astype(ty)
シーケンスを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
両端キューをタプルに変換する	tuple(deq)
データフレームのリストカラムの中の未入力値の数を数える	df[aList].isna().sum()
複数列のヒストグラムを一度に描画する	sns.pairplot(df[[column, column2, column3]])
線グラフの色をミッドナイトブルーにセットする	plt.plot(データ列, データ列2, color='midnightblue')
日付時刻データは何分か知る	aDatetime.minute
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
日付時刻データを数値にする	aDatetime.timestamp()
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
線グラフを描画して、その色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
＜オプション＞ダークグレー色を使う	color = 'darkgrey'
が名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
データフレームを用いる	import pandas as pd
＜オプション＞読み込み用に指定する	mode = 'r'
文字列内に数字がある	any(c.isdigit() for c in s)
赤いポイントマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
ビン数nで等量でデータ列をビン分割する	pd.qcut(ds, n)
イテラブルについてのヒストグラムをパステル調の色として描画する	plt.hist(xdata, color='pastel')
データフレームの列の第三四分位数	df[col].quantile(0.75)
データフレームを'A'列の値によってまとめたグループ	df.groupby('A')
＜オプション＞ラベンダー色を使う	color = 'lavender'
折れ線グラフに線幅nのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
折れ線グラフを描画して、その色を紺に指定する	plt.plot(データ列, データ列2, color='darkblue')
ヒストグラムをビン数をnに設定して描く	plt.hist(データ列, bins=n)
折れ線グラフにサイズnのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
＜オプション＞改行をセパレータで使う	sep = '\n'
折れ線グラフを描画して、その色をライムに指定する	plt.plot(データ列, データ列2, color='lime')
折れ線グラフの色を黒くする	plt.plot(データ列, データ列2, color='k')
Pandasで書式でデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
床	math.floor(x)
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgrey')
初期値で全要素を初期化された配列	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフに大きさnの丸印を描画する	plt.plot(データ列, データ列2, marker='o', markersize=n)
黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
正規分布で乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
nが偶数	n % 2 == 0
ダークオリーブグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkolivegreen')
データフレームから型の列だけ抽出する	df.select_dtypes(ty)
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
文字列が文字列リストのいづれ	s in aStringList
二つのデータフレームを異なるカラムをキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
リストのn番目の要素を削除する	del aList[n]
タブ文字を見る	'\t'
データフレームの指定された列を取り出す	df[column]
＜オプション＞バイナリ書き込みモードを使う	mode = 'wb'
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
数字を全部見る	string.digits
ディレクトリを求める	os.getcwd()
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
茶色色の線グラフを描画する	plt.plot(データ列, データ列2, color='brown')
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='grey')
ベクトルの標準偏差	np.std(aArray)
＜オプション＞分割記号を使わない	sep = ''
ブラック色の線グラフを描画する	plt.plot(データ列, データ列2, color='black')
＜オプション＞セパレータをコロンにする	sep = ':'
nが無限に続く数列	itertools.repeat(n)
実数を実数で	x // y
配列の要素ごとの積	np.multiply(aArray, aArray2)
列'A'と列'B'をキーにして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフの色をライトコーラルにセットする	plt.plot(データ列, データ列2, color='lightcoral')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
JSON形式の文字列を読み込む	json.loads(jsonString)
イテラブルとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
ヒストグラムを描画してその色をバリーウッドにセットする	plt.hist(データ列, color='burlywood')
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
＜オプション＞オールドレース色を使う	color = 'oldlace'
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
イテラブルからカウンタを新規生成する	collections.Counter(iterable)
＜オプション＞グラフの色をオレンジレッドに設定する	color = 'orangered'
データフレームの列の名前一覧で指定されたカラムを削除する	df.drop(columns, axis=1)
＜オプション＞グラフの色をライトコーラルに設定する	color = 'lightcoral'
＜オプション＞ダークブルー色を用いる	color = 'darkblue'
データフレームを列名リストをキーにして並べる	df.sort_values(by=column)
折れ線グラフを描画して、色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
文字列の両端から部分文字列を取り除く	s.strip(sub)
キーがマップ上で定義済みか	key in aDict
xが1、もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
＜オプション＞読み込む行番号をnamesで指定する	usecols = names
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkolivegreen')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか	s.find(sub, start, end) == -1
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
文字列を最後の部分文字列で分割したときの前半の文字列を求める	s.rpartition(sub)[0]
文字列で区切って二つの文字列をプリントする	print(value, value2, sep=s)
折れ線グラフの色をライトコーラルにする	plt.plot(データ列, データ列2, color='lightcoral')
カラーコードの菱形マーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームのリスト列のNaNを最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
文字列の両端から余分な空白を取り除く	s.strip()
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
大バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='X')
文字列を走査し正規表現にマッチするか調べる	re.search(pattern, s)
ヒストグラムを描画して、色をトマトに変更する	plt.hist(データ列, color='tomato')
双方向キューの中に要素が含まれてる	element in deq
ヒストグラムを描画して色をシエナに変更する	plt.hist(データ列, color='sienna')
両端キューのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
文字列を最初の部分文字列で二分する	s.partition(sub)
黄色色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellow')
＜オプション＞ハニーデュー色を使う	color = 'honeydew'
2つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
折れ線グラフの色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
リストとリストの明るいグラフを描画してその色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
行列から重複を除いた配列を作成する	np.unique(aArray)
ヒストグラムを描画して、その色をロイヤルブルーに指定する	plt.hist(データ列, color='royalblue')
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
折れ線グラフのバツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフを描画して、その色をミスティローズに変更する	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
データフレームのリスト列の平均値	df[aList].mean()
メディアンでデータ列のNaNを埋める	ds.fillna(ds.median())
タプルを順序付けする	enumerate(aTuple)
実数がNaN	math.isnan(x)
ふたつの集合の和集合を計算する	aSet.union(aSet2)
ヒストグラムを描画して、色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
パールゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='palegoldenrod')
配列の行ごとの平均を算出する	np.mean(aArray, axis=1)
黒色で数値を表示する	print(f'\033[30m{value}\033[0m')
nで乱数シードを固定する	random.seed(n)
SJISでタブ区切りのファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
ファイルパスが存在しないか調べる	not os.path.exists(filepath)
淡い色でリストについての度数分布図をプロットする	plt.hist(xdata, color='muted')
折れ線グラフを描画して、その色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
リストの変化を折れ線グラフに描く	plt.plot(range(len(xdata)), xdata)
折れ線グラフを描画して、その色をアクアに指定する	plt.plot(データ列, データ列2, color='aqua')
文字列が文字列リストにあるか	s in aStringList
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
折れ線グラフの右三角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
オブジェクトのバイトサイズを調べる	sys.getsizeof(obj)
線グラフを描画してその色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
線グラフを描画して、その色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
ダークサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darksalmon')
インタプリタの実行ファイルの絶対パスを知る	sys.executable
ひとつでも英数字が文字列内に含まれるか調べる	any(c.isalnum() for c in s)
実数の平方根を求める	math.sqrt(x)
ターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
データ列の分を求める	ds.dt.minute
実数から浮動小数点数を減算する	x - y
リストとリストについて散布図を描画して、クロスマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
＜オプション＞アイボリー色を用いる	color = 'ivory'
正規表現patternでreplにデータフレームのリストカラムの値を置換する	df[aList].replace(pattern, repl, regex=True)
＜オプション＞グラフの色を茶色にセットする	color = 'brown'
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
ひとつでも非英字が文字列中にあるかどうか判定する	any(not c.isalpha() for c in s)
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
散布図に赤い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
＜オプション＞小麦色を使用する	color = 'wheat'
に鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
データフレームの列の値がx以上の行を抽出する	df[df[column] >= x]
折れ線グラフの下三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
＜オプション＞カデットブルーにグラフの色を変更する	color = 'cadetblue'
部分文字列が文字列の開始位置からと終了位置の間に含まれるか調べる	s.find(sub, start, end) != -1
八進文字列を整数に変換する	int(s, 8)
線グラフの色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightgreen')
データフレームから重複した行をドロップして、入れ替える	df.drop_duplicates(inplace=True)
配列を色差別ない色のヒストグラムで描く	plt.hist(xdata, color='colorblind')
日付時刻データが何年か知る	aDatetime.year
列の値を正規表現でまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
出力ストリーム全体をリストとして読み込む	f.readlines()
＜オプション＞バイナリ用に指定する	mode = 'rb'
nとn2の商	n / n2
実数は無限大かどうか確認する	math.isinf(x)
辞書に項目名が存在していないとき、要素を追加する	aDict.setdefault(key, element)
＜オプション＞アクアマリン色を用いる	color = 'aquamarine'
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
＜オプション＞グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
＜オプション＞マルーン色を用いる	color = 'maroon'
実行結果を下線付きにする	f'\033[4m{value}\033[0m'
両端キューに文字列をenqueueする	deq.appendleft(element)
散布図にカラーコードの△マーカーを用いる	plt.plot(xdata, ydata, marker='^', c=rgb)
行列のムーア・ペンローズの擬似逆行列を算出する	np.linalg.pinv(aArray)
nの無限なイテラブル	itertools.repeat(n)
データフレームから型リストで指定したデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
文字列をキャピタライズする	s.capitalize()
実数の常用対数	math.log10(x)
＜オプション＞書き込みモードに設定する	mode = 'w'
リストとリストについて散布図を描画する	plt.scatter(xdata, ydata)
黒いポイントマーカーをリストと数列についての散布図にプロットする	plt.plot(xdata, ydata, marker='.', c='k')
タプルをカンマ区切りで表示する	print(*aTuple, sep=',')
リストとリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
リストとリストについて散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフを描画して、色をダークグリーンに変更する	plt.plot(データ列, データ列2, color='darkgreen')
折れ線グラフを描画して、色をモカシンにする	plt.plot(データ列, データ列2, color='moccasin')
各列毎にデータフレームを集計して、列の最小値を求める	df.groupby(column)[column2].min()
縦に３つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=0)
データ列とリストについて散布図を描画し、、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
キューの右側に数値を追加する	deq.append(element)
リストとイテラブルについての散布図に赤い▼マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
ヒストグラムを描画して、色を黄色くする	plt.hist(データ列, color='y')
黒色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
ヒストグラムの色をネイビーにセットする	plt.hist(データ列, color='navy')
ファイルのファイル名	os.path.basename(filepath)
文字列の開始位置から終了位置の間で部分文字列の登場	s.count(sub, start, end)
要素は集合に含まれないかどうか調べる	element not in aSet
線グラフの色をスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='springgreen')
リストとリストについて破線グラフを描いて、その色をパステル調のに指定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgreen')
整数nの八進文字列	oct(n)[2:]
文字列内にひとつでも数字が含まれる	any(c.isdigit() for c in s)
データフレームのグループ毎の標準偏差	df.groupby(column).std()
折れ線グラフを描画してその色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
＜オプション＞色をプラムにセットする	color = 'plum'
データ列の尖度	ds.skew()
カウンタから最も頻出な要素の件数を算出する	aCounter.most_common()[1]
＜オプション＞ダークオリーブグリーンにグラフの色を指定する	color = 'darkolivegreen'
青い濃いをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='b')
ふたつの関係が上位集合もしくは等しいか調べる	aSet > aSet2
最小値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].min())
TSVをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
データフレームのそれぞれのグループごとの分散を求める	df.groupby(column).var()
データフレームの欠損値を前の行の値にする	df.fillna(method='ffill')
小数点数の双曲線正弦	math.sinh(x)
折れ線グラフの印をバツ印にする	plt.plot(データ列, データ列2, marker='x')
両端キューの要素をインプレースに逆順にする	deq.reverse()
＜オプション＞グラフの色をスレートブルーに指定する	color = 'slateblue'
スラグレーにヒストグラムの色をセットする	plt.hist(データ列, color='slategrey')
データ列を等間隔でn個に分割する	pd.cut(ds, n)
データフレームのリストカラムの中に文字列と文字列がいくつ存在するか数える	df[aList].isin([value, value2]).sum()
降順にデータフレームを破壊的に列でソートする	df.sort_values(by=column, ascending=False, inplace=True)
整数が整数か	x.is_integer()
オブジェクトは集合クラス	isinstance(obj, set)
データ列の中に文字列が存在する	ds.isin([value])
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
赤い右三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
全要素を1で初期化された配列	np.ones(要素数, dtype=np.int)
＜オプション＞先頭のカラムをインデックスに設定する	index_col = 0
二つのマッピングをネスト化する	collections.ChainMap(aDict, aDict2)
画面用にグラフを設定する	sns.set(context='notebook')
データフレームから重複するデータを削除する	df.drop_duplicates()
改行	'\n'
ヒストグラムを描画してその色をスラグレーに指定する	plt.hist(データ列, color='slategray')
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
文字列中に部分文字列が含まれないか	sub not in s
文字列を区切りで区切り、列挙する	s.split(sep)
黒い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='k')
カラムの欠損値を最頻値にセットする	ds.fillna(ds.mode().iloc[0])
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
青い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
ファイルを開く]	open(filepath)
文字列にイテラブルを変換して、空白で結合する	' '.join(map(str, iterable))
白色の線グラフを描画する	plt.plot(データ列, データ列2, color='white')
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
二進文字列を整数に変換する	int(s, 2)
＜オプション＞ミディアムパープル色を使う	color = 'mediumpurple'
データフレームの中の欠損値の合計をカウントする	df.isna().sum()
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
ヒストグラムを描画して、色をサーモンに設定する	plt.hist(データ列, color='salmon')
線グラフを描画して、色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
標準入力から1文字だけ読み込む	sys.stdin.read(1)
値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
折れ線グラフを描画して、その色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
＜オプション＞グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
＜オプション＞ASCII文字に限定する	flag = re.ASCII
ダーク・スラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategrey')
青緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
二つの実行結果を改行なしにプリントする	print(value, value2, end='')
平均と標準偏差から疑似乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
データフレームをインポートする	import pandas as pd
日付データが日付データより遅い	aDate > aDate2
表データのデータ型リスト	df.dtypes
リストをパステル調の色のヒストグラムで描画する	plt.hist(xdata, color='pastel')
データフレームのカラムが正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
マゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='magenta')
プラットホームのエンコーディングを使う	sys.getdefaultencoding()
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
nの2乗を求める	n ** 2
線グラフを描画して、その色をダークレッドに設定する	plt.plot(データ列, データ列2, color='darkred')
カウンタ同士でユニオン	aCounter | aCounter2
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
＜オプション＞パウダーブルーにグラフの色を設定する	color = 'powderblue'
＜オプション＞ダイアモンドマーカーを使う	marker = 'D'
ヒストグラムを描画して、その色をプラムに変更する	plt.hist(データ列, color='plum')
オブジェクトにプロパティがあるか調べる	hasattr(obj, プロパティ名)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
配列とデータ列の散布図を描画し、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
黒色のバツマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='x', c='k')
プロットのデータラベルの位置を(x,y)に指定する	plt.legend(loc=(x, y))
ヒストグラムを描画してその色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
nとn2の積を算出する	n * n2
折れ線グラフの色を赤くする	plt.plot(データ列, データ列2, color='r')
データフレームの列の未入力値を直前の値で埋める	df[col].fillna(method='ffill')
折れ線グラフの三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
グラフの横軸にuntitledというラベルを付ける	plt.xlabel(untitled)
線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
折れ線グラフを描画して、その色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
色差別ないグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
本日が土曜日	datetime.datetime.today().weekday() == 5
nullに等しい値	None
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
エクセルファイルファイルでJSONLファイルにデータフレームを保存する	df.to_excel(filename)
ヒストグラムを描画して、色をオレンジに設定する	plt.hist(データ列, color='orange')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
リストと数列について散布図を描画して、マーカーを▼に変更する	plt.plot(xdata, ydata, marker='v')
赤色の淡いの折れ線を描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
折れ線グラフの四角マーカーを青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
八進文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
ファイル全体を行単位で分割して読み込む	f.readlines()
データ列とリストについて散布図を描画して色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='navajowhite')
線グラフを描画してその色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
nがn2以下、それか、n3以上	n <= n2 or n >= n3
文字列がアルファベットか調べる	s.isalpha()
小文字列	string.ascii_lowercase
イテラブルをカウンタに変換する	collections.Counter(iterable)
黒い色差別ないをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
折れ線グラフに左三角マーカーを使う	plt.plot(データ列, データ列2, marker='<')
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
グラフの見栄えを綺麗にする	import seaborn as sns
文字列は全て識別子名かどうか調べる	s.isidentifier()
リストとリストの散布図を描いて、星マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='*', c=rgb)
＜オプション＞オレンジにグラフの色を変更する	color = 'orange'
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
整数nがタプルのどれかか調べる	n in aTuple
文字列をスタックにスタックする	deq.append(element)
散布図に赤い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='r')
ヒストグラムを描画して、その色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
リストとイテラブルの黒いパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
＜オプション＞ディムグレーを用いる	color = 'dimgray'
淡い色として配列とデータ列の散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列, データ列2, color='palegreen')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
ベクトルを元に全要素が1の行列	np.ones_like(aArray)
日付時刻データからn週間分、引く	aDatetime - datetime.timedelta(weeks=n)
ヒストグラムを描画して、その色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
乱数シードを初期化する	random.seed()
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
ヒストグラムを描画して、その色をコーラルに指定する	plt.hist(データ列, color='coral')
データフレームの列の値がリストに含まれる行を取り出す	df[df[column].isin(aList)]
データフレームの列がxのデータを取り出す	df[df[column] == x]
ファイルパスから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
線グラフの色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
実数を小数点で丸める	round(x, n)
リストと配列について散布図を描いて、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
データ列が正規分布からどれだけ、歪んでいるか見る	ds.kurt()
リストとリストの折れ線グラフをプロットしてアルファをalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
列をセットにする	set(iterable)
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
折れ線グラフに線幅nの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
折れ線グラフのバツ印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
リストと数列について黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
データフレームが重複しているか調べる	df.duplicated()
＜オプション＞スレートブルーに色を設定する	color = 'slateblue'
日付データの日数	aDate.day
集合の更新不能版	frozenset(aSet)
文字列中に非大文字があるか調べる	any(not c.isupper() for c in s)
プロットのカラーテーマを全般的に暗くする	sns.set(pallete='dark')
折れ線グラフを描画して、その色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
ヒストグラムを描画し、、半透明ににする	plt.hist(データ列, alpha=0.5)
データフレームのリストカラムの中に含まれると日付データの個数を数える	df[aList].isin([value, value2]).sum()
データフレームを各列と列の組み合わせ毎に集約して個数を求める	df.groupby([column, column2], as_index=False).count()
ヒストグラムを描画して、その色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
本日をISO8601書式の文字列にする	datetime.datetime.today().isoformat()
文字列を変数に変換する	sympy.Symbol(s)
データフレームを複数の列によって昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを関数の値によって集約して列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームのカラムが正規分布からどの程度歪んでいるか見る	df[col].kurt()
テンプレートをマッピングで文字列整形する	formatText.format_map(aDict)
シーケンスを関数でフィルタする	filter(func, iterable)
余弦	math.cos(x)
ローングリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lawngreen')
2つのデータフレームを横方向につなぐ	pd.concat([df, df2], axis=1)
直後の値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(method='bfill')
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
整数nの2進表記	bin(n)
線グラフを描画して、その色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
折れ線グラフの右三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
横棒グラフを描画し、幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
イテラブルと配列についてカラーコードのパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞グラフの色をオリベドラブに変更する	color = 'olivedrab'
リストをパステル調の色のヒストグラムとして描画する	plt.hist(xdata, color='pastel')
要素がマップの値として含まれている	element in aDict.values()
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
リストとリストの散らばりを可視化する	plt.scatter(xdata, ydata)
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
スプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='springgreen')
配列とデータ列で明るいグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
＜オプション＞色をロージーブラウンに設定する	color = 'rosybrown'
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
リストとリストについて散布図を描いて、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
日付時刻データが何秒か知る	aDatetime.second
文字列の変数名を数式に変換する	sympy.Symbol(s)
配列とリストの散布図をプロットしてマーカーを左三角に指定する	plt.plot(xdata, ydata, marker='<')
＜オプション＞色をラベンダーに設定する	color = 'lavender'
列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
列の一意な要素数	df[col].nunique()
日付時刻データの時間数を使う	aDatetime.hour
データフレームの指定された列をリストに変換する	df[column].values.tolist()
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
実数のk進対数	math.log(x, k)
データ列の値をValueMapでまとめて置換する	ds.replace(ValueMap)
日付データと日付データの時間差	aDate - aDate2
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
オブジェクトはバイト列かどうか確認する	isinstance(obj, bytes)
＜オプション＞ミディアムバイオレットレッドにグラフの色をセットする	color = 'mediumvioletred'
リストの要素を小さい順に並べ変える	sorted(aList, reverse=True)
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
＜オプション＞ライトコーラルを使う	color = 'lightcoral'
ヒストグラムを描画して、その色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
＜オプション＞エラーを無視するように指定する	errors = 'ignore'
折れ線グラフのポイント印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
xが一桁の整数か調べる	-9 <= x <= 9
データフレームのカラムの記述統計量を求める	df[col].describe()
三つの実行結果をプリントする	print(value, value2, value3)
折れ線グラフを描画して、その色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
折れ線グラフの色をオリーブに変更する	plt.plot(データ列, データ列2, color='olive')
＜オプション＞グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
データフレームをTSV形式でJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データフレームを列によって集約して、それぞれのグループ毎の分散を求める	df.groupby(column).var()
＜オプション＞グラフの色をダークターコイズに設定する	color = 'darkturquoise'
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
折れ線グラフのラベルをuntitledに変更する	plt.plot(xdata, ydata, label=untitled)
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
データフレームのリストカラムの中にいくつ日付データが含まれるかカウントする	df[aList].isin([value]).sum()
折れ線グラフを描画して、その色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
ValueMapでデータフレームのカラムを一度に置き換える	df[col].replace(ValueMap)
明るい色を用いてリストとリストについての散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
リストとリストについての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
双方向キューをデキューする	deq.popleft()
先頭の列をデータフレームから除く	df[df.columns[1:]]
ふたつの関係が上位集合か調べる	aSet.issuperset(aSet2)
リストとデータ列について散布図を描いてポイントマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='.', c=rgb)
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
ファイル名がJSONファイルか	filename.endswith('.json')
双方向キューの先頭に要素を追加する	deq.appendleft(element)
＜オプション＞シアン色を使う	color = 'cyan'
実数を実数で割った余り	x % y
二つのオブジェクトが同じ参照か調べる	obj is obj2
リストをビン分割する	pd.cut(aList, aList)
変数について数式を微分する	sympy.diff(e, z)
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
ファイルを書き込みできるように開く]	open(filepath, mode='w')
＜オプション＞ライトグレー色を使う	color = 'lightgrey'
散布図に菱形マーカーを用いる	plt.plot(xdata, ydata, marker='D')
３つのデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
ビン数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの列をインプレイスで消す	df.drop(column, axis=1, inplace=True)
黒い右三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='>', c='k')
データ列の平均値	ds.mean()
＜オプション＞色を珊瑚に指定する	color = 'coral'
ファイルをEUCとして書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
文字列中に非小文字があるか調べる	any(not c.islower() for c in s)
データフレームのリストカラムの欠損値を最大値にする	df[aList].fillna(df[aList].max())
＜オプション＞ロージーブラウン色を使用する	color = 'rosybrown'
データフレームのリストカラムの値が欠損値かどうか調べる	df[aList].isna()
八進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
ビスク色の線グラフを描画する	plt.plot(データ列, データ列2, color='bisque')
文字列がタプルに含まれるか調べる	element in aTuple
全要素を初期値で初期化された行列	np.full((行数, 列数), 初期値, dtype=np.int)
リストとリストについての散布図を色差別ない色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
データフレームのリストカラムを10の位で四捨五入して、整数型にする	df[aList].round(-1).astype(int)
複数の列によって表を集計して、列挙する	[(name, group) for name, group in df.groupby(columns)]
度数分布図を半透明にする	plt.hist(データ列, alpha=0.5)
黒い四角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='s', c='k')
＜オプション＞グラフの色をライトスカイブルーにセットする	color = 'lightskyblue'
データ列を中央値でビン分割する	pd.qcut(ds, 2)
リストと配列の淡いグラフをプロットして、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ファイルから複数のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
リストとデータ列についての散布図に丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o')
赤い△マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
データ列を箱ヒゲ図で描画する	plt.boxplot(データ列)
ヒストグラムを描画してその色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
整数nを2進数表現に変換する	bin(n)
リストと配列を使ってパステル調のの折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞青を用いる	color = 'blue'
ヒストグラムを描画して、その色をコーラルに設定する	plt.hist(データ列, color='coral')
タプルの中の最小値を求める	min(aTuple)
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
'A'列によってデータフレームを並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
文字列の中の複数行対応としてパターンによるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データフレームの相関行列	df.corr()
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
フォーマットでデータフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col], format='%Y-%m-%d')
最大値・最小値として整数乱数を生成する	random.randint(最小値, 最大値)
データフレームの列名を列挙する	df.columns
双方向キューの末尾	deq[-1]
リストと数列についての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームのリストカラムの中に日付データと文字列があるかどうか調べる	df[aList].isin([value, value2])
昇順に'A'列でデータフレームを並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
nがn2の倍数でない	n % n2 != 0
点線ヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
パステル調の色としてリストとデータ列についての散布図を描画する	plt.plot(xdata, ydata, c='pastel')
数値を赤色化する	f'\033[31m{value}\033[0m'
配列とリストの青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
ヒストグラムを描画してその色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
データ列を1000の位で四捨五入して、整数にする	ds.round(-3).astype(int)
イテラブルとイテラブルについての散布図に黒い大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X', c='k')
＜オプション＞グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
データフレームを二つの列によって降順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ヒストグラムの色をミディアムシアグリーンに変更する	plt.hist(データ列, color='mediumseagreen')
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
'A'列の値によってデータフレームをグループ化する	df.groupby('A')
ブール型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int32)
文字列を全て大文字に変換する	s.upper()
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
データ列の中にあるの数を数える	ds.isin([value]).sum()
データフレームのインデックスの名前を一度に、nameからname2に付け直す	df.rename(index={name: name2})
データフレームの列の未入力値をxで埋める	df[col].fillna(x)
'A'列によって小さい順にデータフレームをソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの大バツ印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
各列毎にデータフレームをグループ化して列の分散を求める	df.groupby(column)[column2].var()
実数を複素数にする	complex(x)
nが5で割り切れるか調べる	n % 5 == 0
n2がnより大きく、かつn3より小さい	n < n2 and n2 < n3
マッピングの項目名とその値を列挙する	aDict.items()
にx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
線グラフを描画して、その色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
イテラブルとリストについて散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
リストの合計	sum(aList)
データフレームのカラムの分	df[col].dt.minute
ヒストグラムを描画して、色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
リストとイテラブルについて散布図をプロットし、、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
ヒストグラムを描画して、その色をオリーブに設定する	plt.hist(データ列, color='olive')
組を昇順にソートする	sorted(aTuple, reverse=True)
データ列をビン分割する	pd.cut(ds, aList)
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ベクトルの演算を行う	import numpy as np
データフレームを列によって並べ直して、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
パステル調の色の折れ線を描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
今日は何月か知る	datetime.datetime.today().month
ひとつでも非数字が文字列中に含まれるか	any(not c.isdigit() for c in s)
組をnから番号付けする	enumerate(aTuple, start=n)
書式を引数としてargsを文字列整形する	formatText.format(*args)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
リストから配列を作る	np.array(aList)
分子n分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
イテラブルとリストについての散布図にバツマーカーを描く	plt.plot(xdata, ydata, marker='x')
オブジェクトはリストに含まれないか確認する	element not in aList
線グラフを描画して、その色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
＜オプション＞オールドレース色を使用する	color = 'oldlace'
データフレームのカラムのNaNをxに変更する	df[col].fillna(x)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
＜オプション＞グラフの色をハニーデューに設定する	color = 'honeydew'
イテラブルとリストの破線をプロットし、、色を明るいに指定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
パステル調のでリストについてのヒストグラムを描く	plt.hist(xdata, color='pastel')
＜オプション＞グラフの色をアイボリーに変更する	color = 'ivory'
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
データ列とリストの色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
xが一桁の数か調べる	-9 <= x <= 9
配列とイテラブルについての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
赤色の四角マーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='s', c='r')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
＜オプション＞色をハニーデューに指定する	color = 'honeydew'
実数を実数で割った剰余	math.remainder(x, x2)
nかけるn2	n * n2
文字列の終了位置以前に部分文字列が含まれないか確認する	s.find(sub, 0, end) == -1
パステル調の色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
直後の値でカラムのNaNを補う	ds.fillna(method='bfill')
リストとリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
データフレームを'A'列によってで大きい順にソートする	df.sort_values(by='A', ascending=False)
データフレームを'A'列の値でグループ化する	df.groupby('A')
折れ線グラフの印をクロスにする	plt.plot(データ列, データ列2, marker='x')
文字列の後ろから範囲を指定して部分文字列を探す	s.find(sub, start, end)
データ列とラベル列を指定して、積み上げ棒グラフを描く	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
ベクトルを元にして全要素が0の配列	np.zeros_like(aArray)
データフレームのカラムの曜日は何日目か見る	df[col].dt.dayofweek
イテラブルをy座標、リストをx座標として、大きさnの散布図を描く	plt.scatter(xdata, ydata, s=n)
データフレームを百の位で四捨五入して、整数型にする	df.round(-2).astype(int)
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
リストと配列の折れ線を描画し、、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
オブジェクトはバイト列型かテストする	isinstance(obj, bytes)
等差数列をベクトルに変換する	np.arange(開始値, 終端値, 等差)
カラーコードの丸マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームとしてTSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
ヒストグラムを描画して、色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
データフレームの指定された列を配列として抽出する	df[column].values
オブジェクトは論理値か調べる	isinstance(obj, bool)
折れ線グラフを描画してその色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
要素がセットに含まれないか確認する	element not in aSet
データフレームを複数の列の値でグループ化し要約統計量を計算する	df.groupby(columns).describe()
イテラブルの変遷を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
列を累加したイテラブル	itertools.accumulate(iterable)
データ列と配列についての散布図に赤い△マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c='r')
複数のデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
＜オプション＞グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
赤色の濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='r')
組を昇順に並べる	sorted(aTuple, reverse=True)
ヒストグラムを描画してその色をオーキッドに設定する	plt.hist(データ列, color='orchid')
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
文字のユニコードを使う	ord(ch)
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
文字列をセパレータで区切り、、文字列リストにする	s.split(sep)
xの小数点以下'5'桁の文字列にする	':.5f'.format(x)
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
辞書上で項目名が未定義かどうか	key not in aDict
16進数文字列を整数にする	int(s, 16)
本日の月数	datetime.datetime.today().month
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
キューのstart番目からendの要素	collections.deque(itertools.islice(deq, start, end))
データフレームの列の値が未入力値か調べる	df[col].isna()
濃い色で重なりを見やすく散布図を描く	plt.plot(xdata, ydata, c='deep', alpha=0.5)
リストとデータ列についての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
グラフのサイズを設定する	plt.figure(figsize=(width, height))
データフレームのリスト列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
＜オプション＞アイボリー色を使う	color = 'ivory'
線グラフの色をシアンにセットする	plt.plot(データ列, データ列2, color='cyan')
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
組を引数として展開して表示する	print(*aTuple, sep=',')
珊瑚色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
データフレームのリストカラムのNaNを前の行の値に指定する	df[aList].fillna(method='ffill')
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
行によってデータフレームを並べ直す	df.sort_index()
データフレームのリストカラムの欠損値を第二四分位数で補う	df[aList].fillna(df[aList].median())
データフレームのリストカラムがどれだけ、分散しているか見る	df[aList].var()
データ列を四分位数で分割する	pd.qcut(ds, 4)
データフレームの重複した行数のマスク	df.duplicated()
イテラブルと配列の折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
文字列TSVからカンマ区切りのファイルをn番目のカラムをインデックスにして読む	pd.read_csv(filename, index_col=n)
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
＜オプション＞コーンフラワーブルーを使用する	color = 'cornflowerblue'
標準出力を使う	sys.stdout
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
ハイパボリック・コサインの逆数	math.acosh(x)
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
日付時刻データが何分か知る	aDatetime.minute
データフレームのリストカラムのNaNをxで置換する	df[aList].fillna(x)
文字列が全て数字か調べる	s.isdigit()
試しに何か動かしてみる	print('Hello World')
散布図に色差別ない色のマーカーを使う	plt.plot(xdata, ydata, c='colorblind')
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
数列とリストの散布図に黒いダイアモンドマーカーをプロットする	plt.plot(xdata, ydata, marker='D', c='k')
文字列の左側が部分文字列	s.startswith(sub)
現在の秒数	datetime.date.today().second
配列とリストについて散布図を描いて▲マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
タプルを逆順にする	aTuple[::-1]
二つの列によってデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームのリストカラムの値はNaNか調べる	df[aList].isna()
サイコロと同じ乱数	random.randint(1, 6)
リストと数列について暗い色の折れ線を描いて、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='dark')
折れ線グラフのダイアモンドマーカーの大きさをnにセットする	plt.plot(データ列, データ列2, marker='D', markersize=n)
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
二つのデータフレームを横向きに一つにする	pd.concat([df, df2], axis=1)
リストとリストのパステル調のグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフを描画して、その色をパールバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='palevioletred')
'A'列の値でデータフレームを分類して、列挙する	[(name, group) for name, group in df.groupby('A')]
データ列の年	ds.dt.year
ファイルでデータフレームをJSONLファイルに保存する	df.to_excel(filename)
リストが空でない	len(aList) != 0
配列とデータ列についての散布図にカラーコードのバツマーカーを描く	plt.plot(xdata, ydata, marker='x', c=rgb)
＜オプション＞符号なし８ビット整数型を使う	dtype = np.uint8
ヒストグラムを濃い色でプロットする	plt.hist(xdata, color='deep')
グラフの描画で濃い色調を使用する	sns.set(pallete='deep')
本日が何年か知る	datetime.datetime.today().year
リストとリストの散布図をプロットし、、マーカーを▲に変更する	plt.plot(xdata, ydata, marker='^')
リストとリストについて散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
リストとデータ列についての散布図に赤色の三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c='r')
リストとリストについての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
データフレームを列の値によってグループ化して、各グループごとの最大値を計算する	df.groupby(column).max()
JSON形式の文字列をデータに変換する	json.loads(jsonString)
列から重複を取り除く	set(iterable)
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
＜オプション＞ダークスレートブルーに色を設定する	color = 'darkslateblue'
ヒストグラムを描画して、その色をアクアに設定する	plt.hist(データ列, color='aqua')
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
＜オプション＞色をライトイエローに設定する	color = 'lightyellow'
データフレームの列の名前を変更する	df.rename(columns={column: name})
０で全要素を初期化した論理値型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
リストとリストについて淡い色の折れ線グラフをプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
パステル調の色のヒストグラムでリストを描く	plt.hist(xdata, color='pastel')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
＜オプション＞グラフの色をフォレストグリーンにする	color = 'forestgreen'
配列をn個にビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データ列を折れ線グラフに描画して、印をバツにする	plt.plot(データ列, データ列2, marker='x')
線グラフを描画してその色をアクアに指定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフを描画して、色をインディゴに変更する	plt.plot(データ列, データ列2, color='indigo')
ダークシアグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkseagreen')
度数分布図のビンをする	plt.hist(データ列, bins=n)
ファイルを絶対パスに変換する	os.path.abspath(filepath)
＜オプション＞マーカーを三角に変更する	marker = '^'
実数のn乗	x ** n
＜オプション＞青緑を使う	color = 'teal'
ケースを無視してパターンをあらかじめコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフを描画して色を黒くする	plt.plot(データ列, データ列2, color='k')
日付時刻データの日付を使う	aDatetime.date()
データフレームの中に日付データが存在する	df.isin([value])
データフレームの中にいくつNaNがあるか数える	df.isna().sum()
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
マッピングの値の一覧を参照する	aDict.values()
行列の列ごとの標準偏差	np.std(aArray, axis=0)
＜オプション＞セパレータをタブにする	sep = '\t'
タイムスタンプをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
一度にデータフレームのリストカラムをValueMapで置き換える	df[aList].replace(ValueMap)
線グラフの色を赤にする	plt.plot(データ列, データ列2, color='red')
列をキーにして二つの表データを結合する	pd.merge(df, df2, on=column)
リストとリストについての散布図を濃い色を用いて重なりを見やすく描く	plt.plot(xdata, ydata, c='deep', alpha=0.5)
数式のn階微分を行う	sympy.diff(e, z, n)
天井を計算する	math.ceil(x)
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
全ての数字	string.digits
散布図を左三角マーカーとして描く	plt.plot(xdata, ydata, marker='<')
カラムの欠損値を最小値に設定する	ds.fillna(ds.min())
散布図をカラーコードの三角マーカーで描く	plt.plot(xdata, ydata, marker='^', c=rgb)
線グラフの色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
xを文字列に変換する	str(x)
配列と数列のカラーコードの暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
組とタプルを連結する	aTuple + aTuple2
2つの列の値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
列でデータフレームを集約して、列の要約統計量を求める	df.groupby(column).describe()[column2]
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
配列の変遷を折れ線グラフで描く	plt.plot(range(len(xdata)), xdata)
イテラブルとデータ列について暗い色の折れ線グラフを描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='dark')
データ列とリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
散布図に星マーカーを使う	plt.plot(xdata, ydata, marker='*')
コマンドの第二引数を調べる	sys.argv[1]
タプルとタプルを連結する	aTuple + aTuple2
ヒストグラムを描画して色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
配列の行ごとの平均を求める	np.mean(aArray, axis=1)
折れ線グラフを描画してその色をパレットトルコイズに指定する	plt.plot(データ列, データ列2, color='paleturquoise')
実数のn乗の実数剰余	pow(x, n, y)
値が集合のメンバーか	element in aSet
＜オプション＞ドジャーブルー色を使う	color = 'dodgerblue'
リストを縦軸、配列を横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列, データ列2, color='lightgrey')
イテラブルと配列についての散布図に赤い星マーカーを描く	plt.plot(xdata, ydata, marker='*', c='r')
＜オプション＞グラフの色をゲインズボロに設定する	color = 'gainsboro'
破線グラフの色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
＜オプション＞ゴーストホワイトに色を設定する	color = 'ghostwhite'
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
列'A'と列'B'をキーとして二つの表データを結合する	pd.merge(df, df2, left_on='A', right_on='B')
折れ線グラフの色をナバホホワイトにセットする	plt.plot(データ列, データ列2, color='navajowhite')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
nをn2で値の切り上げを計算する	(n + n2 - 1) // n2
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
折れ線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
ふたつの辞書を合体する	aDict | aDict2
＜オプション＞青色を使う	color = 'blue'
列を100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
部分文字列で部分文字列が始まるか確認する	s.startswith(sub)
日付時刻データと日付時刻データの時間差を求める	aDatetime - aDatetime2
カラーコードの丸マーカーを配列と配列の散布図に描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
組の要素を逆順にする	aTuple[::-1]
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
カウンタ間でユニオン演算する	aCounter | aCounter2
散布図にカラーコードの星マーカーを使用する	plt.plot(xdata, ydata, marker='*', c=rgb)
セットから別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
ヒストグラムを描画して、その色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データフレームのカラムの欠損値を後の行の値に設定する	df[col].fillna(method='bfill')
折れ線グラフを描画して、その色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
データ列をまとめてValueMapで置き換える	ds.replace(ValueMap)
折れ線グラフを描画してその色をフローラルホワイトに指定する	plt.plot(データ列, データ列2, color='floralwhite')
文字列をセパレータによって区切る	s.split(sub)
ベクトルから重複を除いた配列を作る	np.unique(aArray)
ヒストグラムを淡い色を使って描く	plt.hist(xdata, color='muted')
グラフの中の縦軸のラベルをuntitledに設定する	plt.ylabel(untitled)
赤い右三角マーカーをリストとリストについての散布図に描く	plt.plot(xdata, ydata, marker='>', c='r')
データフレームをグループ化し、列に対し分散を求める	df.groupby(column)[column2].var()
文字列が数値かどうか	s.isnumeric()
辞書から項目名の値	aDict.get(key)
散布図をカラーコードの四角マーカーでプロットする	plt.plot(xdata, ydata, marker='s', c=rgb)
黒い左三角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='<', c='k')
リストと配列について濃い色の折れ線グラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
リストとリストの青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
正規表現patternでまとめてデータ列の値を置き換える	ds.replace(pattern, repl, regex=True)
グラフを見やすくする	import seaborn as sns
ヒストグラムを用いてデータ列を可視化する	plt.hist(ds)
線グラフを描画して色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
文字列を全て小文字に変換する	s.casefold()
折れ線グラフを描画して、その色をブラウンに設定する	plt.plot(データ列, データ列2, color='brown')
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
分子と分母から分数を作成する	fractions.Fraction(分子, 分母)
＜オプション＞グラフの色をローングリーンに指定する	color = 'lawngreen'
右三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='>')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
データフレームのインデックスをリセットする	df.reset_index()
データフレームの列の中にある日付データの合計を数える	df[col].isin([value]).sum()
ヒストグラムを描画して、その色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
ヒストグラムの色をサーモンにセットする	plt.hist(データ列, color='salmon')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
nがn2の倍数	n % n2 == 0
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
リストとリストについての散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
データフレームを関数によって集約して列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列, データ列2, color='lawngreen')
データ列とリストで明るいをプロットして、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', color='r')
カウンタの文字列数	len(aCounter)
データフレームの内で何行、重複するか見る	df.duplicated().sum()
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
ファイルから1文字読み込む	f.read(1)
色差別ないグラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
配列と配列で明るいグラフを描いてその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
文字列を空白によって分割して整数のリストにする	map(int, s.split())
列をキーにして2つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
散布図にカラーコードの大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c=rgb)
データ列とリストについて散布図を描画して大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
データフレームを10の位で丸める	df.round(-1)
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
データ列とリストについて黒色の濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
数列と数列の散布図を描いて、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
kを底とする小数点数の対数	math.log(x, k)
カウンタを辞書から作成する	collections.Counter(aDict)
二つのカウンタのいずれかに含まれる要素を求める	aCounter | aCounter2
両端キューの左にイテラブルの要素を入れる	deq.extendleft(iterable)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
タブで区切って２つの文字列を出力する	print(value, value2, sep='\t')
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
全要素を０で初期化された行列	np.zeros(行数, 列数)
ヒストグラムを描画して、色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
＜オプション＞ミディアムターコイズに色を変更する	color = 'mediumturquoise'
リストとリストについての散布図に四角マーカーを描く	plt.plot(xdata, ydata, marker='s')
データフレームを列名リストの値によって集約する	df.groupby(columns)
パステル調のグラフの色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
リストと配列で明るいグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
カラーコードの左三角マーカーをデータ列とリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームの数値を整数に丸める	df.round()
集合の補集合を計算する	aSet.difference(aSet2)
グラフの中のフォントをfontNameに設定する	sns.set(font=fontName)
ゼロ埋めされた配列	np.zeros(要素数)
度数分布図で配列を可視化する	plt.hist(aArray)
＜オプション＞namesをカラムの名前に減らす	names = names
オブジェクトは文字列型のインスタンスか調べる	isinstance(obj, str)
線グラフを描画して、その色をコーラルにセットする	plt.plot(データ列, データ列2, color='coral')
データフレームの中に文字列と文字列が存在するか	df.isin([value, value2])
配列とデータ列の散布図を暗い色でプロットする	plt.plot(xdata, ydata, c='dark')
イテラブルと配列の青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
グラフで使用するフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
空の計数器を用意する	collections.Counter()
イテラブルを縦軸、配列をx軸として大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
二変数の最小値	min(x, y)
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
リストの文字列が最初に見つかるインデックス	aList.index(element)
＜オプション＞複素数型を使う	dtype = bool
折れ線グラフを描画して、色をレベッカパープルにセットする	plt.plot(データ列, データ列2, color='rebeccapurple')
文字列が片仮名かどうか調べる	('ァ' <= ch <= 'ン')
データ列とリストの散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
nをn2で割った剰余	n % n2
データ列の中に文字列が存在するか調べる	ds.isin([value])
＜オプション＞アンティークホワイト色を使う	color = 'antiquewhite'
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
双方向キューの先頭	deq[0]
配列とイテラブルについて散布図を描画し、、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
グラフの色を暗くする	sns.set(pallete='dark')
リストとリストの暗いを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフを描画して、その色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategray')
データフレームのリストカラムの欠損値を最頻値にする	df[aList].fillna(df[aList].mode().iloc[0])
xの小数点以下'5'桁まで表示する	print(':.5f'.format(x))
今日が火曜日か確認する	datetime.datetime.today().weekday() == 1
文字列の左側から部分文字列を見つける	s.find(sub)
イテラブルとリストのカラーコードの明るいを描く	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
データフレームの欠損値が含まれる部分に色を付ける	df.style.highlight_null()
タプルの項目数を得る	len(aDict)
線グラフを描画して、その色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
＜オプション＞耐火レンガ色を用いる	color = 'firebrick'
折れ線グラフの色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
暗いグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフの△印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
カラムの中に日付データと文字列があるか	ds.isin([value, value2])
文字列を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
カラムの上位25%	ds.quantile(0.25)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
リストを引数として展開して出力する	print(*aList, sep=',')
値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
パステル調のの折れ線グラフの線幅をnにセットする	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
変数が無限大に近づく際の数値の極限値を算出する	sympy.limit(e, z, oo)
折れ線グラフの下三角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
折れ線グラフの色を赤にセットする	plt.plot(データ列, データ列2, color='red')
文字列は全て十進数字か調べる	s.isdecimal()
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
プロットの用途をスライドに設定する	sns.set(context='talk')
year年の日付	datetime.date(year=year, month=1, day=1)
二つの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
リストとリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
両端キューから最初の要素を削除する	deq.remove(element)
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
配列をビン分割する	pd.cut(aArray, aList)
＜オプション＞アンティークホワイト色を用いる	color = 'antiquewhite'
ヒストグラムを描画して、その色をシアンに設定する	plt.hist(データ列, color='cyan')
カラーコードで配列とリストの折れ線グラフを描画する	plt.plot(xdata, ydata, color=rgb)
＜オプション＞グラフの色をライトグレーに指定する	color = 'lightgray'
カラムが正規分布からどれだけ、尖っているか調べる	ds.skew()
バイナリ書き込みモードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='wb')
キーが辞書に存在する	key not in aDict
線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
データフレームのリストカラムの未入力値を最小値に指定する	df[aList].fillna(df[aList].min())
＜オプション＞グラフの色を耐火レンガに設定する	color = 'firebrick'
日付データからn週間分、減らす	aDate - datetime.timedelta(weeks=n)
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
＜オプション＞最初の行をヘッダにする	header = 0
淡い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
リストとリストについて散布図をプロットして、マーカーを丸に変更する	plt.plot(xdata, ydata, marker='o')
ヒストグラムを描画して、色をコーラルに設定する	plt.hist(データ列, color='coral')
＜オプション＞色をインディゴに指定する	color = 'indigo'
文字列を区切りで分割して、文字列リストにする	s.split(sep)
ヒストグラムを描画して、色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
列からn要素、サンプリングする	random.sample(iterable, k=n)
折れ線グラフに黄色い下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
＜オプション＞グラフの色をミスティローズに設定する	color = 'mistyrose'
線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
文字列を二分割する	s.partition(sep)
＜オプション＞グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
実線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='solid')
＜オプション＞ダークスラテグレーを使う	color = 'darkslategray'
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
＜オプション＞色をホットピンクにセットする	color = 'hotpink'
左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<')
文字列内に大文字が含まれるか調べる	any(c.isupper() for c in s)
データ列を中央値で分割する	pd.qcut(ds, 2)
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
配列と配列について散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
データフレームの中にあるとの数を数える	df.isin([value, value2]).sum()
グラフを使用する準備をする	from sympy import N
棒グラフを描いて中央寄せする	plt.bar(ラベル列, データ列, align='center')
数列とリストの折れ線グラフをカラーコードでプロットする	plt.plot(xdata, ydata, color=rgb)
データフレームの列がxより大きい行を取り出す	df[df[column] > x]
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
＜オプション＞やわらかい青色を使用する	color = 'cornflowerblue'
正規表現に文字列全体をケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムを描画して、その色をバリーウッドにセットする	plt.hist(データ列, color='burlywood')
ヒストグラムを描画して、その色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
リストとリストについてパステル調のグラフを描画して、その色を黒色に変更する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
二つのデータフレームを異なる列をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
nが一桁の数かどうか調べる	0 <= n <= 9
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegoldenrod')
リストの中の一番小さい値	min(aList)
黒い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='k')
線幅nの星マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslateblue')
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データフレームを列によってグループ化して、それぞれのグループ毎の最小値を求める	df.groupby(column).min()
要素はマップの値に含まれていないか調べる	element not in aDict.values()
自然対数を求める	math.log(x)
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
データフレームの第二四分位数	df.median()
データフレームのリストカラムの25パーセンタイル	df[aList].quantile(0.25)
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='gray')
リストを縦軸、イテラブルを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
データフレームからカラムを４つのみ選択する	df[[column, column2, column3, column4]]
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategray')
２つのデータフレームを列をキーにして右ジョインする	pd.merge(df, df2, on=column, how='right')
カラーコードの星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
オブジェクトはタプルかどうか調べる	isinstance(obj, tuple)
データフレームからインプレイスで重複したデータを削除する	df.drop_duplicates(inplace=True)
線グラフを描画して色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightgreen')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
＜オプション＞色をスラグレーに設定する	color = 'slategray'
ヒストグラムを一点鎖線にする	plt.hist(データ列, linestyle='dashbot')
配列の最大値	np.max(aArray)
＜オプション＞グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
Pandasで、書式fmtとしてデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format=fmt)
ヒストグラムを描画して、色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
暗いグラフの色を黒色にセットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
シーグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='seagreen')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
データフレームのリストカラムの中に含まれるの合計を求める	df[aList].isin([value]).sum()
データフレームから列を一つのみ選択する	df[[column]]
シャルトリューズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='chartreuse')
ValueMapでまとめてデータフレームの値を置換する	df.replace(ValueMap)
ヒストグラムの色をダークオレンジにする	plt.hist(データ列, color='darkorange')
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
日付データが土曜日か調べる	aDate.weekday() == 5
文字列モジュールをインポートする	import string
データフレームの相関行列をヒートマップを用いて描画する	sns.heatmap(df.corr())
＜オプション＞データ型を指定する	dtype = np.int
線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
パレットを全般的に濃くする	sns.set(pallete='deep')
集合をイミュータブルなセットにする	frozenset(aSet)
既存のファイルパスをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
データフレームの欠損値を直前の値にする	df.fillna(method='ffill')
黒い左三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='<', c='k')
ヒストグラムを描画して、その色をマゼンタに変更する	plt.hist(データ列, color='magenta')
浮動小数点数の最大値	sys.float_info.max
n2分のn	n / n2
散布図をカラーコードの右三角マーカーで描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムを描画して、その色をダークサーモンにする	plt.hist(データ列, color='darksalmon')
文字列の開始位置からと終了位置の間に部分文字列が存在するかどうか調べる	s.find(sub, start, end) != -1
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
ファイルを文字列の示すエンコーディングを使って開く]	open(filepath, encoding=s)
２つの整数最小公倍数	math.lcm(n, n2)
ヒストグラムを描画して、色をオールドレースにセットする	plt.hist(データ列, color='oldlace')
データフレームの列の文字列を未入力値にする	df[col].replace(s, np.nan)
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
折れ線グラフの三角印を青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
配列と配列についての散布図を大きさnで描く	plt.scatter(xdata, ydata, s=n)
ファイルから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
等差数列から整数乱数を求める	random.randrange(start, end, step)
今日が日曜日か調べる	datetime.datetime.today().weekday() == 6
空のタプル	()
データフレームの列をヒストグラムにする	plt.hist(df[column])
文字列を最後の部分文字列で分けた場合の後半の文字列を使う	s.rpartition(sub)[-1]
データフレームの列をNaNも加えてダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
EUCで既存のファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフのダイアモンドマーカーを黄色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
折れ線グラフに黄色い▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
データフレームのカラムが文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
二つの集合が集合と交わりを持たないか判定する	aSet.isdisjoint(aSet2)
n個にリストを等間隔でビン分割する	pd.cut(aList, n)
オブジェクトがタプルクラスのインスタンスかどうか調べる	isinstance(obj, tuple)
折れ線グラフを描画してその色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
昇順に組の値を並べ変える	sorted(aTuple, reverse=True)
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
グラフを論文用に変更する	sns.set(context='paper')
UTF8でファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
赤い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
リストとリストの青いパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
xのハッシュ値	hash(x)
＜オプション＞パールゴールデンロッド色を用いる	color = 'palegoldenrod'
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
オブジェクトはタプルの要素でない	element not in aTuple
リストを赤色にする	f'\033[31m{value}\033[0m'
データフレームを列の値でグループ化し記述統計量を求める	df.groupby(column).describe()
実数を実数で除算して切り捨てる	x // y
＜オプション＞トマトにグラフの色を設定する	color = 'tomato'
変数を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
組の各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
実数を浮動小数点数で割った余り	x % y
シーグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='seagreen')
モジュールを検索するパスにを追加する	sys.path.append(dir)
データフレームのリストカラムの欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ヒストグラムを描画して、その色をネイビーに指定する	plt.hist(データ列, color='navy')
左三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='<')
グラフの用途を論文に設定する	sns.set(context='paper')
nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ヒストグラムをstartからendまでの範囲で描画する	plt.hist(データ列, range=(start, end))
ヒストグラムを描画して、色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
＜オプション＞色をダークシアグリーンに設定する	color = 'darkseagreen'
nがn2未満、またはn3以上か確認する	n < n2 or n >= n3
プロットの目的をスライドに設定する	sns.set(context='talk')
日付データが何日か知る	aDate.day
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
タプルをn回、結合する	aTuple * n
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
＜オプション＞ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
文字列をバイト列にする	s.encode(encoding='utf-8', errors='strict')
リストとリストについて散布図を描画して、三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
グラフの大きさを横width縦heightに指定する	plt.figure(figsize=(width, height))
ヒストグラムを描画して、色をやわらかい青に変更する	plt.hist(データ列, color='cornflowerblue')
nを半分にする	n /= 2
＜オプション＞菱形マーカーを使う	marker = 'D'
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
カラーコードの下三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c=rgb)
貝殻色の線グラフを描画する	plt.plot(データ列, データ列2, color='seashell')
日付データが日付データと同時か調べる	aDate == aDate2
プロットの用途をプレゼンに設定する	sns.set(context='talk')
折れ線グラフのラベルをuntitledに設定する	plt.plot(xdata, ydata, label=untitled)
リストとイテラブルについて散布図をプロットして、マーカーの色を明るいにセットする	plt.plot(xdata, ydata, c='bright')
折れ線グラフに描画して、マーカーをバツ印にする	plt.plot(データ列, データ列2, marker='x')
複数の列によってによってデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
データ列の中に存在すると文字列の合計を数える	ds.isin([value, value2]).sum()
リストとリストについて破線グラフを描いて、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
データ列の下位25%	ds.quantile(0.75)
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
両端キューの値をインプレースに逆順にする	deq.reverse()
配列とリストについての散布図を淡い色で重なりを見やすく描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
データ列が正規分布からどの程度、歪んでいるか確認する	ds.kurt()
データフレームのカラムとカラムを折れ線グラフとして描画する	plt.plot(df[col], df[col2])
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムを描画して、その色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
データフレームのカラムの中にいくつNaNが含まれるかカウントする	df[col].isna().sum()
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
データ列のNaNを最頻値に増やす	ds.fillna(ds.mode().iloc[0])
グラフの描画で明るいパレットを用いる	sns.set(pallete='bright')
データフレームの中の欠損値の合計を求める	df.isna().sum()
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
綺麗なプロットを描く準備をする	import seaborn as sns
＜オプション＞コロンを区切り記号で用いる	sep = ':'
データフレームを列でソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
配列としてデータフレームの指定された列を抽出する	df[column].values
辞書を階層化辞書にする	collections.ChainMap(aDict)
線グラフを描画して、その色を濃い青に設定する	plt.plot(データ列, データ列2, color='darkblue')
データフレームのカラムが何時か調べる	df[col].dt.hour
データフレームのカラムの中にある日付データとの個数を数える	df[col].isin([value, value2]).sum()
実数が正の数か調べる	x > 0
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
暗いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
ヒストグラムを描画してその色をペルーに設定する	plt.hist(データ列, color='peru')
文字列をエンコーディングによってバイト列に変換する	s.encode(encoding=encoding)
有理数を使用する	import fractions
折れ線グラフを描画して、その色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
散布図にカラーコードの下三角マーカーを使用する	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
ヒストグラムを描画して、その色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
文字列の末尾	s[-1]
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
黒い▲マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c='k')
明るい色の折れ線を描いて、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞線種を実線に設定する	linestyle = 'solid'
データフレームから列を一つ選択する	df[[column]]
リストとリストについて暗い色の折れ線グラフを描画し、、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='dark')
セットをイミュータブルに変換する	frozenset(aSet)
両端キューの先頭を使う	deq[0]
文字列内にひとつでも小文字が含まれるかどうか調べる	any(c.islower() for c in s)
組を順に表示する	print(*aTuple)
破線に折れ線グラフを設定する	plt.plot(データ列, データ列2, linestyle='dashed')
ヒストグラムを描画してその色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
データフレームを２つの列の値ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
折れ線グラフを描画して、その色をライトブルーにする	plt.plot(データ列, データ列2, color='lightblue')
日本語をグラフで表示できるようにする	sns.set(font='IPAexGothic')
折れ線グラフのポイント印の線幅をnに変更する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
折れ線グラフを描画してその色をホワイトに設定する	plt.plot(データ列, データ列2, color='white')
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
プロットにメモリ線を付ける	plt.grid(True)
リスト内の要素が全て真か調べる	all(aList)
データフレームの欠損値をxで埋める	df.fillna(x)
データフレームの列をインデックスに設定する	df.set_index(column)
データ列とイテラブルで淡いの折れ線を描画して線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', color='r')
ダークグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgreen')
濃い色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
＜オプション＞グラフの色をミディアムターコイズに指定する	color = 'mediumturquoise'
折れ線グラフの大バツ印を黒くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
日付データは日付データより先か調べる	aDate < aDate2
最後の部分文字列を使って文字列を二分する	s.rpartition(sub)
JSONLファイルにデータフレームをCSVファイルで書き込む	df.to_csv(filename)
折れ線グラフを描画して、その色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='palevioletred')
中央値でリストを分割する	pd.qcut(aList, 2)
散布図に黒色のクロスマーカーを使う	plt.plot(xdata, ydata, marker='x', c='k')
データフレームを列名リストを用いて昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
日付データの曜日を整数で使う	aDate.weekday()
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
データフレームを各列毎に集計して、列の個数を求める	df.groupby(column)[column2].count()
データフレームの指定された列のみ抽出する	df[[column]]
＜オプション＞改行の代わりに文字列を用いる	end = s
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
折れ線グラフに赤い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
PandasでUNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
グラフで使う縦軸にuntitledというラベルをつける	plt.ylabel(untitled)
実行結果をマゼンタにする	f'\033[35m{value}\033[0m'
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
Pandasで、データフレームのcollを書式fmtでタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
ヒストグラムを描画して、色を青緑に変更する	plt.hist(データ列, color='turquoise')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列, データ列2, marker='X')
行列から重複を除いた配列を作る	np.unique(aArray)
折れ線グラフを描画してその色をスノーに指定する	plt.plot(データ列, データ列2, color='snow')
線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
データ列とデータ列についてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
句読点文字を全て見る	string.punctuation
ブール型の全要素を０で初期化された行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
＜オプション＞クリムゾンを用いる	color = 'crimson'
日付時刻データをISO8601形式の文字列にする	aDatetime.isoformat()
リストとデータ列について散布図を描いて、マーカーを右三角に指定する	plt.plot(xdata, ydata, marker='>')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
重複した行のみを抽出する	df[df.duplicated(keep=False)]
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c='r')
文字列の右側から改行を除去する	s.rstrip()
実数の小数点を丸める	round(x)
＜オプション＞グラフの色をネイビーに指定する	color = 'navy'
ヒストグラムを描画してその色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
折れ線グラフを描画して、その色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
＜オプション＞ダークグレーを使う	color = 'darkgray'
折れ線グラフを描画して、その色を白に設定する	plt.plot(データ列, データ列2, color='white')
単位行列を作る	np.eye(行数, 列数)
＜オプション＞珊瑚色を使う	color = 'coral'
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
折れ線グラフに赤い▲印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
タプルのn番目以降の要素を取り出す	aTuple[n:]
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
配列と配列についての散布図に赤色のポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c='r')
2つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列2])
プロットのタイトルをuntitledに変更する	plt.title(untitled)
数式を簡単化する	sympy.sympify(e)
辞書の項目数	len(aDict)
デックの右にイテラブルの各要素を入れる	deq.extend(iterable)
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
実数を十の位で丸める	round(x, -1)
＜オプション＞ラベンダーブラッシュにグラフの色を設定する	color = 'lavenderblush'
＜オプション＞グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
二つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^')
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
ヒストグラムの区間数を変更する	plt.hist(データ列, bins=n)
黒いバツマーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='x', c='k')
CSVファイルTSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
パステル調の色の折れ線を描き、、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
実数の指数	math.frexp(x)[1]
ピンクにヒストグラムの色を指定する	plt.hist(データ列, color='pink')
データフレームの列の値がxかつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
実数を十六進表記の文字列に変換する	x.hex()
整数nの八進文字列を使う	oct(n)[2:]
データフレームのリストカラムのNaNを最大値に設定する	df[aList].fillna(df[aList].max())
＜オプション＞貝殻色を使う	color = 'seashell'
２つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
＜オプション＞下三角マーカーを用いる	marker = 'v'
大きさnで配列と配列についての散布図を描画する	plt.scatter(xdata, ydata, s=n)
要素が集合に含まれないか調べる	element not in aSet
ビンnのヒストグラムをプロットする	plt.hist(データ列, bins=n)
データフレームの要約統計量	df.describe()
配列とデータ列について散布図を描画してマーカーを▲に設定する	plt.plot(xdata, ydata, marker='^')
データフレームのリスト列の欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
データフレームを破壊的に二つの列ででソートする	df.sort_values(by=['A', 'B'], inplace=True)
列の全順列	itertools.permutations(iterable)
文字列をシアンにする	f'\033[36m{value}\033[0m'
リストとリストの折れ線グラフをプロットして、透明度をalphaに指定する	plt.plot(xdata, ydata, alpha=alpha)
データ列を折れ線グラフに描画してマーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
データフレームを行でソートする	df.sort_index()
折れ線グラフに緑色のバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
データ列のヒストグラムを描く	plt.hist(ds)
データフレームをでJSONLファイルに保存する	df.to_excel(filename)
最初のプログラムを書く	print('Hello World')
本日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
折れ線グラフに大きさnの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
文字の文字コード	ord(ch)
折れ線グラフを描画して、その色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
要素が全て初期値のベクトルを作る	np.full(要素数, 初期値, dtype=np.int)
散布図を赤い星マーカーでプロットする	plt.plot(xdata, ydata, marker='*', c='r')
BOM付きを用いて既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
リストとイテラブルの折れ線を文字列の色で描画する	plt.plot(xdata, ydata, color=s)
データフレームを２つの列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
文字列リストにイテラブルを変換して、カンマで連結する	','.join(map(str, iterable))
＜オプション＞グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
配列とリストについて散布図を描画し、、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
実行時の標準出力の出力先がターミナルか確認する	os.isatty(sys.stdin.fileno())
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図に濃い色のマーカーを使う	plt.plot(xdata, ydata, c='deep')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
タプルの長さ	len(aTuple)
＜オプション＞グレー色を使う	color = 'gray'
データフレームのカラムを100の位で丸める	df[col].round(-2)
＜オプション＞アリスブルーにグラフの色を設定する	color = 'aliceblue'
シアンで変数をプリントする	print(f'\033[36m{value}\033[0m')
データフレームの上位25%を求める	df.quantile(0.25)
ヒストグラムを描画して、その色を白に設定する	plt.hist(データ列, color='white')
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
日付時刻データが水曜日	aDatetime.weekday() == 2
緑色の星印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
線グラフを描画して、その色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
小さい順に列によってデータフレームをソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
グラフの横軸の軸ラベルをuntitledに設定する	plt.xlabel(untitled)
リストと配列で淡いの折れ線グラフを描画してその線幅をnにセットする	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
nが何桁か	len(str(n))
リストとリストの青色の色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
両端キューのstart番目からend番目の部分要素を使う	collections.deque(itertools.islice(deq, start, end))
ヒストグラムを描画して、その色をアリスブルーにセットする	plt.hist(データ列, color='aliceblue')
折れ線グラフの印をバツにする	plt.plot(データ列, データ列2, marker='x')
線グラフの色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
折れ線グラフに黒い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
青い暗いを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
＜オプション＞ライトイエロー色を使う	color = 'lightyellow'
＜オプション＞ダイアモンドマーカーを描画する	marker = 'D'
パラメータがマイナス無限大に近づくときの数式の極限値を算出する	sympy.limit(e, z, -oo)
文字列がタプルの要素でない	element not in aTuple
二つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
赤い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
エクセルファイルファイルを読む	pd.read_excel(filename)
リストと配列についての散布図に黒色の丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c='k')
折れ線グラフを描画してその色をライトサーモンに変更する	plt.plot(データ列, データ列2, color='lightsalmon')
＜オプション＞シスル色を使う	color = 'thistle'
カラーコードの星マーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
データフレームの列がxの行を取り出す	df[df[column] == x]
データフレームから重複したデータを残さず、削除する	df.drop_duplicates(keep=False)
リストとリストで暗いの折れ線グラフを描画して、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
文字列リストをつなげるひとつの文字列にする	''.join(map(str, iterable))
データ列の未入力値を第二四分位数にする	ds.fillna(ds.median())
オブジェクトは辞書型か	isinstance(obj, dict)
リストとリストについての散布図に黒いクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
折れ線グラフを描画して、その色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
データフレームのリストカラムの欠損値を最大値で補う	df[aList].fillna(df[aList].max())
＜オプション＞グラフの色をミディアムブルーに設定する	color = 'mediumblue'
配列と数列について散布図を描いて文字列というデータラベル用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
2を底とする浮動小数点数の対数	math.log2(x)
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームのカラムの欠損値をモードに減らす	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
角度のラジアン	math.radians(degree)
エンコーディング	sys.getdefaultencoding()
印字可能な文字を全部求める	string.printable
年月日と時刻からタイムスタンプを作る	datetime.datetime(年, 月, 日, 時, 分, 秒)
＜オプション＞スカイブルー色を使う	color = 'skyblue'
＜オプション＞クロスマーカーを使う	marker = 'x'
黒い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
線グラフを描画してその色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
Pandasでデータフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームを関数によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
ホットピンクにヒストグラムの色を指定する	plt.hist(データ列, color='hotpink')
'A'列で昇順に破壊的にデータフレームを整列する	df.sort_values(by='A', ascending=True, inplace=True)
赤いバツマーカーをリストとリストの散布図に描画する	plt.plot(xdata, ydata, marker='x', c='r')
双方向キューの値をインプレースに反転する	deq.reverse()
データフレームの中のNaNが存在する行を削除する	df.dropna()
ペールグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegreen')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
グラフの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
集合から別の集合との共通要素を除く	aSet.symmetric_difference_update(aSet2)
ヒストグラムを描画して色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
データフレームのリストカラムの値がNaNか調べる	df[aList].isna()
リストと配列についての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
データフレームのリストカラムを四捨五入して整数にする	df[aList].round().astype(int)
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
浮動小数点数の最小値	sys.float_info.min
８進数字を全て使う	string.octdigits
シーケンスの組み合せ	itertools.combinations(iterable, n)
カラーコードの右三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='>', c=rgb)
濃い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
日付データは日付データより後ろかどうか確認する	aDate > aDate2
データフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column])
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
ヒストグラムを描画して、その色をベージュに設定する	plt.hist(データ列, color='beige')
ヒストグラムを描画して、半透明ににする	plt.hist(データ列, alpha=0.5)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列2])
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
データフレームを列によってグループ分けして、それぞれのグループ毎の合計を求める	df.groupby(column).sum()
線グラフの色をナバホホワイトに変更する	plt.plot(データ列, データ列2, color='navajowhite')
ライトコーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcoral')
項目名がマッピング上で未定義かどうか調べる	key not in aDict
データフレームのカラムの尖度	df[col].skew()
イテラブルとイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
暗い色の折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
パステル調のの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
タプルのn番目の	aTuple[n]
nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
データフレームのカラムの未入力値を直後の値にする	df[col].fillna(method='bfill')
データ列は正規分布からどの程度、尖っているか見る	ds.skew()
イテラブルと配列の散布図を描画してマーカーの色を淡いにセットする	plt.plot(xdata, ydata, c='muted')
ラベンダー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavender')
リストとリストの折れ線グラフを描画して、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞左三角マーカーを使用する	marker = '<'
折れ線グラフの星マーカーを赤くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
列の名前の一覧を使う	df.columns
データフレームをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
ベクトルを元に全要素が0の配列を作る	np.zeros_like(aArray)
ネイピア数	math.e
ファイルを追加できるようにBOM付きを用いてオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
ストリームからn文字、読み込む	f.read(n)
nはn2か調べる	n == n2
データフレームを各列毎に集計し、、列の平均値を計算する	df.groupby(column)[column2].mean()
＜オプション＞グラフの色をダークシアグリーンにする	color = 'darkseagreen'
線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
色差別ないの線幅を指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
ヒストグラムを半透明にする	plt.hist(データ列, alpha=0.5)
緑色のダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
ヒストグラムを描画して、その色をピンクにセットする	plt.hist(データ列, color='pink')
文字列がリストの要素か調べる	element in aList
折れ線グラフの色をアリスブルーにセットする	plt.plot(データ列, データ列2, color='aliceblue')
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
＜オプション＞レベッカパープル色を使用する	color = 'rebeccapurple'
線グラフを描画してその色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
リストとデータ列についての散布図に赤い右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c='r')
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
カラムのNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
＜オプション＞線種を破線に設定する	linestyle = 'dashed'
データフレームの列のヒストグラムを描く	plt.hist(df[column])
データフレームのリストカラムを十の位で丸めて、整数にする	df[aList].round(-1).astype(int)
データフレームのそれぞれのグループ毎の標準偏差を計算する	df.groupby(column).std()
データフレームを列によってグループ化して、平均値を求める	df.groupby(column).mean()
空の辞書を作る	{}
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
データフレームを列によってグループ化して最大値を求める	df.groupby(column).max()
標準出力を得る	sys.stdout
nが2で割り切れない	n % 2 == 1
グラフで使える色名の一覧	matplotlib.colors.cnames
両端キューのn番目の要素を使う	deq[n]
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
配列の変化を折れ線で描画する	plt.plot(range(len(xdata)), xdata)
ゴールドにヒストグラムの色を指定する	plt.hist(データ列, color='gold')
＜オプション＞ダークグリーンに色を変更する	color = 'darkgreen'
データフレームを列の値によってグループ化し、グループごとの合計を計算する	df.groupby(column).sum()
リストと配列についてカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
破壊的に列でによってデータフレームをソートする	df.sort_values(by=column, inplace=True)
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
データフレームから列を三つのみ選択する	df[[column, column2, column3]]
単位正方行列を作る	np.identity(N)
組の先頭を使う	aTuple[0]
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
データ列の値を正規表現でまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
タプルを行列に変換する	np.array(iterable)
＜オプション＞無視する列番号をnamesで指定する	skiprows = names
折れ線グラフに右三角マーカーを加える	plt.plot(データ列, データ列2, marker='>')
イテラブルとリストの青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
キュー中の要素のインデックス	deq.index(element)
n個の文字列があるリストを作る	[element] * n
ヒストグラムを描画して色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
Pandasで、UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
＜オプション＞サンディーブラウン色を使う	color = 'sandybrown'
折れ線グラフを描画して、その色をサーモンに指定する	plt.plot(データ列, データ列2, color='salmon')
ヒートマップを用いてデータフレームのリスト列の相関行列をグラフ化する	sns.heatmap(df[aList].corr())
カラーコードの右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
パラメータについて数式の積分を算出する	sympy.integrate(e, z)
線グラフの色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれないか	s.find(sub, start, end) == -1
1行分標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
小数点数の小数部	math.modf(x)[0]
リストとイテラブルについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
＜オプション＞読み込みモードにする	mode = 'r'
実数の正接の逆数	math.atan(x)
青い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
濃い色の折れ線グラフを描いて線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
データフレームのカラムのNaNを前の行の値で置換する	df[col].fillna(method='ffill')
日付時刻データが金曜日かどうか調べる	aDatetime.weekday() == 4
イテラブルとリストの散布図にカラーコードの▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
データ列を濃い色のヒストグラムを使ってプロットする	plt.hist(xdata, color='deep')
リストの値を昇順にソートする	sorted(aList, reverse=True)
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
散布図を重なりを見やすくパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
データフレームから重複を認めてランダムにn行をサンプリングする	df.sample(n, replace=True)
スタックの順序を右にn個分輪番で回す	deq.rotate(n)
ヒストグラムを描画して、色をパープルに設定する	plt.hist(データ列, color='purple')
イテラブルを集合に追加更新する	aSet.update(iterable)
配列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
タブ区切りのファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
両端キュー中の要素のインデックスを使う	deq.index(element)
折れ線グラフの丸マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
実数を十六進表記の文字列にする	x.hex()
折れ線グラフの色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
文字列に日本語があるかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
綺麗なグラフを使う準備をする	import seaborn as sns
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
折れ線グラフを描画してその色をマルーンに変更する	plt.plot(データ列, データ列2, color='maroon')
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
両端キューの末尾に要素を追加する	deq.append(element)
折れ線グラフの色をマゼンタに指定する	plt.plot(データ列, データ列2, color='magenta')
配列と数列についての散布図をパステル調の色で重なりを見やすく描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
＜オプション＞ブラック色を使う	color = 'black'
折れ線グラフを描画して、その色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
＜オプション＞グラフの色をシアンに変更する	color = 'cyan'
関数によってデータフレームをグループ化する	df.groupby(関数)
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
ゼロ埋めされた行列を初期化する	np.zeros(行数, 列数)
折れ線グラフを描画してその色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
折れ線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
＜オプション＞色をマゼンタに設定する	color = 'magenta'
本日の曜日を見る	datetime.datetime.today().weekday()
両端キューのn番目の要素	deq[n]
データ列とラベル列を指定して、横棒グラフをプロットする	plt.barh(ラベル列, データ列)
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
実行結果を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームのカラムの秒	df[col].dt.second
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
データ列とラベル列を指定して横棒グラフを描画する	plt.barh(ラベル列, データ列)
文字列の先頭でパターンにマッチするか確認する	re.match(pattern, s)
タプルをナンバリングする	enumerate(aTuple)
ヒストグラムを描画して、その色を茶色に設定する	plt.hist(データ列, color='brown')
データフレームのカラムの最頻値	df[col].mode()
変数を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
＜オプション＞スノー色を使用する	color = 'snow'
折れ線グラフに緑色の大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
リストをstartからendの範囲のヒストグラムを用いて描画する	plt.hist(データ列, range=(start, end))
JSONLファイルにデータフレームをCSVファイルとして保存する	df.to_csv(filename)
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavenderblush')
リストとデータ列の散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
＜オプション＞ミディアムオーキッド色を使う	color = 'mediumorchid'
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
日付データが水曜日か調べる	aDate.weekday() == 2
線グラフの色をオレンジに指定する	plt.plot(データ列, データ列2, color='orange')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
文字列を太文字でプリントする	print(f'\033[1m{value}\033[0m')
ふたつの辞書を結合する	aDict | aDict2
折れ線グラフに大きさnのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
日付時刻データが日付時刻データよりあとか調べる	aDatetime > aDatetime2
全要素を０で初期化された符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
折れ線グラフの三角マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
カラーコードの左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストとリストのカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
双方向キューをリストにする	list(deq)
Pandasで、データ列を書式fmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
文字コードの最大値	sys.maxunicode
現在が何秒か知る	datetime.date.today().second
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
＜オプション＞ダークグリーンにグラフの色を設定する	color = 'darkgreen'
xが一桁の数かどうか調べる	-9 <= x <= 9
列の標本標準偏差	ds.std()
文字列をカンマで区切って、文字列リストにする	s.split(',')
データフレームの列と列に重複があれば落とす	df.drop_duplicates(subset=[column, column2])
＜オプション＞色を黄緑に設定する	color = 'chartreuse'
グラフの色をpalleteNameで指定する	sns.set(pallete=palleteName)
折れ線グラフを描画して、色を青に設定する	plt.plot(データ列, データ列2, color='blue')
Pandasでデータ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームのリスト列を四捨五入して整数型にする	df[aList].round().astype(int)
seabornのデフォルト見た目を適用する	sns.set()
折れ線グラフを描画して、その色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
折れ線グラフを描画して、その色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
＜オプション＞スラッシュを分割記号で用いる	sep = '/'
＜オプション＞ライトシアンにグラフの色を指定する	color = 'lightcyan'
＜オプション＞グラフの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
最大長のあるキュー	collections.deque(maxlen=n)
数列を明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
線グラフを描画して、その色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
データフレームを複数の列によって集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
ヒストグラムを描画して、その色をバリーウッドにする	plt.hist(データ列, color='burlywood')
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
ヒストグラムを描画して、半透明化にする	plt.hist(データ列, alpha=0.5)
折れ線グラフを描画して、その色をサドルブラウンに変更する	plt.plot(データ列, データ列2, color='saddlebrown')
線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
データフレームのカラムは何分か調べる	df[col].dt.minute
データフレームの欠損値を中央値で補う	df.fillna(df.median())
行列の形状を求める	aArray.shape
リネン色の線グラフを描画する	plt.plot(データ列, データ列2, color='linen')
散布図に黒い▽マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='k')
実数の整数部	math.modf(x)[1]
ヒストグラムを描画して色を紺碧に設定する	plt.hist(データ列, color='azure')
＜オプション＞グラフの色をサドルブラウンに指定する	color = 'saddlebrown'
データフレームを複数の列の値ごとに集約し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
配列の最大値を計算する	np.max(aArray)
＜オプション＞色をダークバイオレットに設定する	color = 'darkviolet'
データフレームの列のユニークな値の個数	df[col].nunique()
折れ線グラフを描画して、その色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
ケンドール相関係数としてデータフレームの相関行列	df.corr(method='kendall')
＜オプション＞グラフの色をオリーブに設定する	color = 'olive'
散布図を赤い丸マーカーで描画する	plt.plot(xdata, ydata, marker='o', c='r')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
パラメータについて数式の積分を求める	sympy.integrate(e, z)
▲マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^')
ガンマ関数	math.gamma(x)
ゼロ埋めされた三二ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
＜オプション＞ダークグレー色を使用する	color = 'darkgrey'
線グラフの色を赤に指定する	plt.plot(データ列, データ列2, color='red')
データフレームを表示するとき行数を増やす	pd.set_option('display.max_rows', n)
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
本日の年数	datetime.datetime.today().year
散布図に赤い四角マーカーを使用する	plt.plot(xdata, ydata, marker='s', c='r')
＜オプション＞グラフの色をダークシアグリーンにセットする	color = 'darkseagreen'
折れ線グラフを描画して、その色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightgreen')
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
＜オプション＞色をグレーに指定する	color = 'grey'
パターンにマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
文字列は全て識別子名	s.isidentifier()
表データの指定された列名一覧の列を抽出する	df[columns]
組中の要素が少なくともひとつ真かどうか	any(aTuple)
ファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
配列を等量で分割数nを用いてビン分割する	pd.qcut(aArray, n)
データフレームの内の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
ファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
散布図に黒い四角マーカーを用いる	plt.plot(xdata, ydata, marker='s', c='k')
リストとリストについて破線グラフを描画して、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
濃い色で散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='deep', alpha=0.5)
小数点数を切り上げて整数に変換する	math.ceil(x)
数式を簡単にする	sympy.sympify(e)
浮動小数点数を十の位で丸める	round(x, -1)
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
文字列を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
データフレームを'A'列でグループ化する	df.groupby('A')
データフレームの列の未入力値を直前の値に変更する	df[col].fillna(method='ffill')
折れ線グラフを描画して、色を貝殻に指定する	plt.plot(データ列, データ列2, color='seashell')
数値の部分分数化を行う	sympy.apart(e)
折れ線グラフに黄色い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
数式の数値を求める	float(e)
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
＜オプション＞分割記号を改行にする	sep = '\n'
グラフのグリッドを白くする	sns.set(style='whitegrid')
データフレームのそれぞれのグループの個数	df.groupby(column).count()
データフレームのインデックスの一覧	df.index
データ列の欠損値を最小値で置換する	ds.fillna(ds.min())
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
データフレームを列で集約して、列の要約統計量を求める	df.groupby(column).describe()[column2]
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
ミディアムブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumblue')
＜オプション＞オーキッドに色を設定する	color = 'orchid'
パステル調のの折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ヒストグラムを描画して、色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
折れ線グラフを描画して、その色をライトサーモンに変更する	plt.plot(データ列, データ列2, color='lightsalmon')
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
リスト中の要素が少なくともひとつ真	any(aList)
ヒストグラムを描画して、その色を黄色に変更する	plt.hist(データ列, color='yellow')
改行を取り除いてファイルを一行ずつ読む	f.readline()
書き込むCSVファイルの小数点以下の桁数をセットする	df.to_csv(filename, float_format='%.3f')
リストとリストで明るいを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
列名のリストをデータ型でフィルタする	df.select_dtypes(型).columns
０で全要素を初期化された８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
スピアマン相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
ヒストグラムを描画して色をラベンダーブラッシュにする	plt.hist(データ列, color='lavenderblush')
折れ線グラフの丸印を青くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
カウンタのユニークな文字列を列挙する	list(aCounter)
＜オプション＞イエローグリーン色を使う	color = 'yellowgreen'
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
二つのデータフレームを異なるカラムをキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
＜オプション＞色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
行列の平均値を計算する	np.mean(aArray)
リストとリストの折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
ファイルを追加用にオープンする]	open(filepath, mode='a')
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
ヒストグラムを描画してその色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
データ列の曜日が何日目か見る	ds.dt.dayofweek
ヒストグラムを描画してその色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
文字列をファイルに書き込む	f.write(s)
データフレームをまとめて丸める	df.round()
配列を平坦にする	aArray.flatten()
リストから行列を初期化する	np.array(aList)
ヒストグラムを描画して色をライトスチールブルーにセットする	plt.hist(データ列, color='lightsteelblue')
折れ線グラフのバツマーカーを黄色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
小数点以下の表示精度を減らす	pd.set_option('precision', n)
＜オプション＞どの列もインデックスにしない	index_col = None
＜オプション＞線種を実線にセットする	linestyle = 'solid'
折れ線グラフの右三角マーカーの線幅をnにセットする	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
ヒストグラムを描画して、その色をシエナにセットする	plt.hist(データ列, color='sienna')
整数nの八進数文字列	oct(n)[2:]
ファイルをBOM付きを用いてオープンする]	open(filepath, encoding='utf_8_sig')
右三角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='>')
三自然数の最小公倍数	math.lcm(n, n2, n3)
シーケンスからカウンタを作る	collections.Counter(iterable)
nがn2で割り切れるか調べる	n % n2 == 0
nからn2までのstepごとによるスライス	slice(n, n2, step)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t')
赤色のパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
＜オプション＞先頭の列を行に増やす	index_col = 0
データフレームのカラムを千の位で丸めて整数にする	df[col].round(-3).astype(int)
配列とリストのカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
変数が0に近づくとき数式の極限値を求める	sympy.limit(e, z, 0)
文字列は全て数値か	s.isnumeric()
破線グラフの色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
カラムが正規分布からどの程度、歪んでいるか見る	ds.kurt()
＜オプション＞グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
文字列の中のパターンによる全マッチを使う	re.findall(pattern, s)
文字列が文字列より辞書順で前かどうか調べる	s < s2
データフレームのそれぞれのグループの平均値	df.groupby(column).mean()
＜オプション＞ダークオーキッドにグラフの色をする	color = 'darkorchid'
データ列とリストについて明るい色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
日付時刻データの年数	aDatetime.year
＜オプション＞マゼンタ色を用いる	color = 'magenta'
ファイルパスを絶対ファイルパスに変換する	os.path.abspath(filepath)
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
＜オプション＞ミントクリームを用いる	color = 'mintcream'
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
ヒストグラムを描画してその色を紺に設定する	plt.hist(データ列, color='darkblue')
折れ線グラフの色をレベッカパープルに変更する	plt.plot(データ列, データ列2, color='rebeccapurple')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
リストとリストの濃いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
表データを列の値でグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
ヒストグラムの色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
Pandasで書式fmtで文字列をPandasの日付型にする	pd.to_datetime(s, format=fmt)
リストとリストについての散布図に左三角マーカーを描く	plt.plot(xdata, ydata, marker='<')
データフレームの中の列を等量でビン数nとしてビン分割する	pd.qcut(df[col], n)
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
＜オプション＞グラフの色をコーラルに指定する	color = 'coral'
リストの重複を除く	sorted(set(aList), key=aList.index)
折れ線グラフの色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
区間数をnに設定してヒストグラムを描く	plt.hist(データ列, bins=n)
＜オプション＞グラフの色をアクアに設定する	color = 'aqua'
文字列のケースを変換する	s.casefold()
π	math.pi
＜オプション＞ネイビー色を使う	color = 'navy'
黒い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
数式をパラメータについて微分する	sympy.diff(e, z)
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
データ列の標準偏差	ds.std()
ひとつでも非大文字が文字列中にあるか調べる	any(not c.isupper() for c in s)
行列の列ごとの最小値	np.min(aArray, axis=0)
タプルをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
文字列を白色化する	f'\033[37m{value}\033[0m'
＜オプション＞色をダークターコイズに設定する	color = 'darkturquoise'
線グラフを描画してその色をライトスレイグレーにセットする	plt.plot(データ列, データ列2, color='lightslategray')
文字列の無限イテラブルを得る	itertools.repeat(element)
折れ線グラフのマーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
ファイルの拡張子付きのファイル名を使う	os.path.basename(filepath)
ヒストグラムを描画して、色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
折れ線グラフを描画して、その色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
nとn2が同じ値	n == n2
＜オプション＞色をスラグレーにセットする	color = 'slategrey'
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
折れ線グラフを描画して、色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
ヒストグラムを描画して、その色をプラムに設定する	plt.hist(データ列, color='plum')
nがn2よりも小さいか確認する	n < n2
文字列をアンダーライン付きで表示する	print(f'\033[4m{value}\033[0m')
リストと配列について散布図を描いて、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
文字列を改行で区切る	s.splitlines()
ヒストグラムを描画して、その色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
折れ線グラフの色をオレンジレッドにする	plt.plot(データ列, データ列2, color='orangered')
黒色の大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
データフレームを表示するとき、n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
書き込み用にファイルをSJISとしてオープンする]	open(filepath, mode='w', encoding='shift_jis')
TSVファイルを読む	pd.read_csv(filename, sep='\t')
＜オプション＞デピンク色を使う	color = 'deeppink'
線グラフを描画して、色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを設定する	plt.scatter(xdata, xdata, label=s)
線グラフを描画して、その色をプラムにセットする	plt.plot(データ列, データ列2, color='plum')
データフレームを複数の列で昇順にソートする	df.sort_values(by=column, ascending=True)
日付データと日付データの時間差を秒で算出する	(aDate - aDate2).total_seconds()
＜オプション＞文字列の示すエンコーディングを使う	encoding = s
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
＜オプション＞暗い赤にグラフの色を変更する	color = 'darkred'
折れ線グラフに黄色い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
＜オプション＞オレンジレッドを用いる	color = 'orangered'
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列, データ列2, color='mediumaquamarine')
10を底とする対数	math.log10(x)
タプルを昇順に並べる	sorted(aTuple, reverse=True)
タプルのキー一覧を見る	list(aDict)
ヒストグラムを描画して、その色をゴールドに変更する	plt.hist(データ列, color='gold')
リストと配列についての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
＜オプション＞フォレストグリーンを使う	color = 'forestgreen'
ピーチパフ色の線グラフを描画する	plt.plot(データ列, データ列2, color='peachpuff')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
数式を部分分数として展開する	sympy.apart(e)
破線グラフの色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
リストを小さい方から並べ変える	sorted(aList, reverse=False)
カラムの欠損値を中央値に指定する	ds.fillna(ds.median())
折れ線グラフの丸マーカーを緑色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
整数nを十六進文字列にする	hex(n)[2:]
小さい順にデータフレームを'A'列によってソートする	df.sort_values(by='A', ascending=True)
リストとリストについて散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
nの各桁の和	sum(map(int, str(n)))
＜オプション＞三２ビット整数型を使う	dtype = np.int16
nを8進表記に変換する	oct(n)
ポスターにグラフを設定する	sns.set(context='poster')
ヒストグラムを描画して、その色をトマトに変更する	plt.hist(データ列, color='tomato')
小さい順に２つの列を用いて表データをソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
実数の逆余弦	math.acos(x)
変数名をキーとしてマップを作成する	dict(name=element)
データフレームの列がxより多くx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
データフレームの内で、列に重複があるか見る	df.duplicated(subset=column)
日本語が文字列にあるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
リストとリストのパステル調のグラフを描画して色を青くする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
＜オプション＞ペールグリーンに色を設定する	color = 'palegreen'
リストとリストについて濃いグラフを描画して、その色を黒色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='k')
行列を転置する	aArray.T
＜オプション＞グラフの色をピンクに設定する	color = 'pink'
＜オプション＞暗い赤にグラフの色を設定する	color = 'darkred'
データフレームを複数の列の値によってグループ化し要約統計量を算出する	df.groupby(columns).describe()
データ列の欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
折れ線グラフを描画してその色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
線グラフを描画して、色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
nが2で割り切れるかテストする	n % 2 == 0
縦方向に二つの表データを一つにまとめる	pd.concat([df, df2])
組を展開してプリントする	print(*aTuple)
データフレームの先頭	df.head()
文字列はタプルの要素でないか調べる	element not in aTuple
折れ線グラフを描画して、その色をパールバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='palevioletred')
折れ線グラフを描画してその色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
折れ線グラフを描画して、色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
複数のデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
暗い色の折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
行列の次元を変形する	aArray.reshape(行数, 列数)
線グラフを描画して、その色をダークブルーに指定する	plt.plot(データ列, データ列2, color='darkblue')
プロットにグリッド線を入れる	plt.grid(True)
グラフの色を濃くする	sns.set(pallete='deep')
リストとリストで折れ線を描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
＜オプション＞グラフの色をイエローグリーンにセットする	color = 'yellowgreen'
パステル調のを描画し、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ダークバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkviolet')
xが真	bool(x)
n掛けるn2を算出する	n * n2
濃い色のヒストグラムでリストを描く	plt.hist(xdata, color='deep')
文字列から部分文字列を取り除く	s.replace(sub, '')
棒グラフの色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
文字列はタイトルケースか	s.istitle()
タプルの文字列が最初に見つかるインデックスを使う	aTuple.index(element)
リストを等量でビン数nで分割する	pd.qcut(aList, n)
自然数個のものからk個取り出した場合の並べ方の総数を求める	math.perm(n, k)
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
日付時刻データの日を見る	aDatetime.day
＜オプション＞グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
整数nを二進表現にする	bin(n)
リストとリストの散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
集合の要素数	len(aSet)
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
折れ線グラフを描画して、その色をゴーストホワイトに指定する	plt.plot(データ列, データ列2, color='ghostwhite')
＜オプション＞ダークオリーブグリーンを使う	color = 'darkolivegreen'
＜オプション＞シエナ色を使う	color = 'sienna'
リストの先頭のn要素を除く	aList[n:]
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
折れ線グラフを描画して、色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
マルーンにヒストグラムの色をセットする	plt.hist(データ列, color='maroon')
データフレームのリストカラムの欠損値を後の行の値に設定する	df[aList].fillna(method='bfill')
データフレームのカラムの尖度を求める	df[col].skew()
データフレームの指定された列を配列に変換する	df[column].values
ヒストグラムを描画して透明度をxに変更する	plt.hist(データ列, alpha=x)
グラフの色を明るくする	sns.set(pallete='bright')
データフレームの中の列をビン数nでビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
＜オプション＞グラフの色をシエナに設定する	color = 'sienna'
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
ヒストグラムを描画して色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフの色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
折れ線グラフを描画して、その色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
インデックスを用いてデータフレーム全体を整列する	df.sort_index()
項目名が辞書に存在するか調べる	key in aDict
折れ線グラフを描画して、その色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
数値の平方根を求める	sympy.sqrt(e)
1で全要素を初期化された配列を作成する	np.ones(要素数, dtype=np.int)
実数の天井を計算する	math.ceil(x)
＜オプション＞ブール型を使う	dtype = np.int32
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
データフレームを'A'列の値でグループ化し、要約統計量を計算する	df.groupby('A').describe()
本日の曜日を整数で使う	datetime.datetime.today().weekday()
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
リストと数列で色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
nがn2よりも小さいか判定する	n < n2
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
線グラフを描画して、その色をパールゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='palegoldenrod')
＜オプション＞ミディアムブルー色を使用する	color = 'mediumblue'
＜オプション＞チョコレート色を使う	color = 'chocolate'
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データ列を等しい量になるようにビン数nでビン分割する	pd.qcut(ds, n)
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
実数が無限大か調べる	math.isinf(x)
エンコーディングを調べる	sys.getdefaultencoding()
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
文字列がタプルに含まれないか調べる	element not in aTuple
マップの項目名に対応した値	aDict.get(key)
組をひとつ置きに得る	aTuple[::2]
データフレームを列によって整列して、新しいインデックスを加える	df.sort_values(columns).reset_index()
文字列を部分文字列で分けた時の前半の文字列を使う	s.partition(sub)[0]
データフレームの末尾n行を抽出する	df.tail(n)
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
文字列のUNIX秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
両端キューのn番目にデータを差し込む	deq.insert(n, element)
＜オプション＞トマト色を使用する	color = 'tomato'
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
整数nの十六進文字列	hex(n)[2:]
箱ひげ図を2つ並べる	plt.boxplot([データ列, データ列2])
nがn2よりも大きいか調べる	n > n2
全要素を０で初期化されたブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
集合に値を追加する	aSet.add(element)
リストと配列の散布図を描画し、、色を色差別ないにする	plt.plot(xdata, ydata, c='colorblind')
＜オプション＞カーキ色を使う	color = 'khaki'
文字列TSVからn番目のカラムをインデックスとしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフに左三角印を使用する	plt.plot(データ列, データ列2, marker='<')
辞書の値として要素が含まれている	element in aDict.values()
ヒストグラムを描画して、その色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
ベクトルの列ごとの合計を求める	np.sum(aArray, axis=0)
配列の行ごとの平均値を求める	np.mean(aArray, axis=1)
＜オプション＞データ型を指定する	dtype = np.uint8
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
Pandasで、書式でデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
折れ線グラフを描画してその色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategrey')
文字列内にひとつでも英数字がある	any(c.isalnum() for c in s)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
透明度alphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞グラフの色をネイビーに変更する	color = 'navy'
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
＜オプション＞ライトスチールブルーにグラフの色を指定する	color = 'lightsteelblue'
ファイルからnバイト、読み込む	f.read(n)
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
淡いグラフを描画してその線幅をnにする	plt.plot(xdata, ydata, linestyle='muted', color='r')
ヒストグラムを描画して、その色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
タプル内の要素は少なくとも一つ真かどうか調べる	any(aTuple)
赤い暗いの折れ線をプロットする	plt.plot(xdata, ydata, linestyle='dark', color='r')
リストの末尾を取り除く	aList[:-1]
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
データフレームをNaNを含めて列の値で分類する	df.groupby(column, dropna=False)
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
保存するCSVファイルの小数点以下の桁数をする	df.to_csv(filename, float_format='%.3f')
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
イテラブルを集合に変換する	set(iterable)
ヒストグラムを描画して、色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
データフレームの中で、カラムと列に重複があるか確認する	df.duplicated(subset=[column, column2])
データ列とリストについての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
＜オプション＞大バツマーカーを描画する	marker = 'X'
ファイルパスを読み込み用にオープンする]	open(filepath, mode='r')
anemptystring	''
日付時刻データは何曜日か知る	aDatetime.weekday()
リストとデータ列についての散布図にカラーコードの菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
文字列がひらがなかどうか	('ぁ' <= ch <= 'ん')
ヒストグラムの色をコーラルに指定する	plt.hist(データ列, color='coral')
数列とリストの散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
ヒストグラムを描画して、その色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
両端キューの右から値を取り出す	deq.pop()
浮動小数点数に浮動小数点数をかける	x * y
データフレームの列を破壊的に落とす	df.drop(column, axis=1, inplace=True)
データ列を1000の位で丸める	ds.round(-3)
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列, データ列2, color='dimgray')
浮動小数点数を二乗する	x ** 2
ボックスチャートを横に並べて描画する	plt.boxplot([データ列, データ列2])
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
リストのn番目からn2番目の部分	aList[n:n2]
線グラフを描画して色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ヒストグラムを描画して、色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
数列とデータ列の散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
マップのキーの値を参照する	aDict[key]
線グラフを描画して、色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgray')
文字列が全て数字	s.isdigit()
イテラブルとリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとイテラブルの散布図に赤いダイアモンドマーカーを描く	plt.plot(xdata, ydata, marker='D', c='r')
データフレームをグループ化しそれぞれの列に対し個数を計算する	df.groupby(column)[column2].count()
ファイルパスを書き込み用に開く]	open(filepath, mode='w')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
＜オプション＞黄緑色を用いる	color = 'chartreuse'
直後の値でデータフレームのカラムのNaNを埋める	df[col].fillna(method='bfill')
配列とリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞グラフの色をダークグリーンに設定する	color = 'darkgreen'
データフレームのリスト列の欠損値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
実数が正	x > 0
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムを描画してその色をサーモンに設定する	plt.hist(データ列, color='salmon')
文字列を式として評価する	eval(s)
実数の逆双曲線余弦	math.acosh(x)
＜オプション＞フォレストグリーンを使用する	color = 'forestgreen'
データフレームを各列とカラムの組み合わせ毎に集約し、合計を求める	df.groupby([column, column2], as_index=False).sum()
文字列と文字列とグラフに凡例を加える	plt.legend([s, s2])
＜オプション＞イエローグリーンを使う	color = 'yellowgreen'
折れ線グラフを描画して、色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgray')
既存のベクトルをベースにして全要素が初期値の行列	np.full_like(aArray, 初期値)
リストとリストについて散布図をプロットして、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
データフレームのカラムのNaNを最頻値で補う	df[col].fillna(df[col].mode().iloc[0])
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
ヒストグラムを描画して、色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
データフレームを二つの列によって並べ直す	df.sort_values(by=['A', 'B'])
モジュールとして自分自身を	sys.modules[__name__]
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
行列の累積積	np.cumprod(aArray)
濃い色のマーカーとして散布図を描く	plt.plot(xdata, ydata, c='deep')
リストをnからナンバリングする	enumerate(aList, start=n)
データフレームのカラムの中にいくつ日付データが存在するか数える	df[col].isin([value]).sum()
リストを色差別ない色のヒストグラムでプロットする	plt.hist(xdata, color='colorblind')
自然数の順列の総数	math.perm(n)
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
データフレームを見る	df.head()
現在のワーキングディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
散布図に上三角マーカーを用いる	plt.plot(xdata, ydata, marker='^')
散布図にカラーコードのクロスマーカーを用いる	plt.plot(xdata, ydata, marker='x', c=rgb)
線グラフの色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
データフレームの列の正規分布に対する左右対称性	df[col].kurt()
データフレームのリストカラムの中に含まれるの合計をカウントする	df[aList].isin([value]).sum()
バイナリ対数	math.log2(x)
折れ線グラフを描画して、その色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
タプルの平均を求める	sum(aTuple)/len(aTuple)
折れ線グラフの色を青に設定する	plt.plot(データ列, データ列2, color='blue')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
列から行列を作成する	np.array(iterable)
折れ線グラフの色を黄緑に指定する	plt.plot(データ列, データ列2, color='chartreuse')
＜オプション＞色をサドルブラウンに設定する	color = 'saddlebrown'
綺麗なグラフをプロットする準備をする	import seaborn as sns
ファイル名がテキストファイルか判定する	filename.endswith('.txt')
行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
句読点文字を使う	string.punctuation
タプルのn番目からn2番目までの部分を抽出する	aTuple[n:n2]
startからendの範囲でヒストグラムにする	plt.hist(データ列, range=(start, end))
シーケンスから最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
リストとリストの暗いを描画してその色を黒色に設定する	plt.plot(xdata, ydata, linestyle='dark', color='k')
まとめてデータフレームのカラムの名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
列によってデータフレームをグループ化して、それぞれのグループの平均値を計算する	df.groupby(column).mean()
データフレームの列がx以上のデータを選ぶ	df[df[column] >= x]
折れ線グラフの色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
ヒストグラムを描画してその色をオレンジレッドにセットする	plt.hist(データ列, color='orangered')
リストとリストについて暗いグラフを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
サイコロ	random.randint(1, 6)
ヒストグラムの色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
上位集合もしくは等しいかどうか確認する	aSet > aSet2
現在が何分か知る	datetime.date.today().minute
カウンタを集合にする	set(aCounter)
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
データフレームを複数の列でによって降順にソートする	df.sort_values(by=column, ascending=False)
イテラブルから集合	set(iterable)
ヒストグラムを描画して、その色をブラックにセットする	plt.hist(データ列, color='black')
文字列が文字列より辞書順で前	s < s2
データフレームを十の位で丸める	df.round(-1)
配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
色を濃くする	sns.set(pallete='deep')
列によってデータフレームを集約し、、それぞれのグループごとの最大値を求める	df.groupby(column).max()
折れ線グラフの色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
２つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
散布図に黒い△マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
配列と数列について散布図を描画して、マーカーを左三角に指定する	plt.plot(xdata, ydata, marker='<')
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列, データ列2, color='whitesmoke')
ヒストグラムを描画して、その色をスカイブルーに指定する	plt.hist(データ列, color='skyblue')
データフレームから型リストデータ型の列のみ取り出す	df.select_dtypes(include=typeList)
配列と数列の明るいグラフをプロットして、その色を青色に変更する	plt.plot(xdata, ydata, linestyle='bright', color='b')
分割数nを用いて等量でデータフレームの中の列を分割する	pd.qcut(df[col], n)
＜オプション＞パールバイオレットレッドを用いる	color = 'palevioletred'
xにヒストグラムのアルファ値を指定する	plt.hist(データ列, alpha=x)
要素が集合のメンバーでないか調べる	element not in aSet
最小値でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].min())
折れ線グラフの色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフを描画して色をシエナに変更する	plt.plot(データ列, データ列2, color='sienna')
ヒストグラムを描画して、その色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategrey')
リストと配列の散布図を描画して、マーカーを▽に変更する	plt.plot(xdata, ydata, marker='v')
数の二乗	x ** 2
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列, データ列2, marker='D')
部分文字列が文字列の開始位置以降に含まれるかどうか調べる	s.find(sub, start) != -1
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
データフレームに重複があるか見る	df.duplicated()
データフレームをJSONLファイルに保存する	df.to_csv(filename)
論理値型の全要素を０で初期化された行列	np.zeros(行数, 列数, dtype=np.int32)
ヒストグラムを描画してその色をダークスレートブルーにする	plt.hist(データ列, color='darkslateblue')
棒グラフを描画する	plt.bar(ラベル列, データ列)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
浮動小数点数から整数を減算する	x - y
セットをイミュータブルな集合に変換する	frozenset(aSet)
非英数字が文字列中に含まれるか調べる	any(not c.isalnum() for c in s)
ヒストグラムを描画して、色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
ヒストグラムの色をライムにする	plt.hist(データ列, color='lime')
カラムの母標準偏差	ds.std(ddof=0)
数列とリストの折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞どのカラムも行に設定しない	index_col = None
黒い左三角マーカーを配列と配列についての散布図にプロットする	plt.plot(xdata, ydata, marker='<', c='k')
データフレームを列によってグループ化し、、それぞれのグループ毎の最小値を計算する	df.groupby(column).min()
＜オプション＞ペールグリーン色を使用する	color = 'palegreen'
Pandasで、タイムスタンプのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
グラフを使う準備をする	from sympy import N
データフレームから指定された列を抽出する	df[[column]]
折れ線グラフの色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
データフレームの中の列をn個に等間隔でビン分割する	pd.cut(df[col], n)
＜オプション＞パールゴールデンロッド色を使う	color = 'palegoldenrod'
ValueMapでデータフレームのリスト列の値をまとめて置き換える	df[aList].replace(ValueMap)
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
リストとデータ列について散布図を描画して、マーカーをダイアモンドに指定する	plt.plot(xdata, ydata, marker='D')
実数の天井	math.ceil(x)
行列の列ごとの標準偏差を算出する	np.std(aArray, axis=0)
折れ線グラフを描画して、色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
nが無限に続く数列を得る	itertools.repeat(n)
現在の時間	datetime.date.today().hour
データフレームのカラムの未入力値をモードに設定する	df[col].fillna(df[col].mode().iloc[0])
データフレームを列によってグループ化し、、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
パラメータが無限大に近づくときの数値の極限値を計算する	sympy.limit(e, z, oo)
ファイルの絶対パスを使う	os.path.abspath(filepath)
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
変数をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
データ列についてのヒストグラムを色差別ない色として描画する	plt.hist(xdata, color='colorblind')
リストとリストについて散布図を描画して、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
リストとリストの明るいグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
＜オプション＞グラフの色をデピンクに変更する	color = 'deeppink'
untitledとラベル付けしてリストとイテラブルの折れ線グラフを描画する	plt.plot(xdata, ydata, label=untitled)
双方向キューは空でないか調べる	len(deq) != 0
オブジェクトがクラスか調べる	isinstance(obj, クラス)
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
データフレームを各列毎にグループ分けして、列の個数を求める	df.groupby(column)[column2].count()
リストと数列の折れ線グラフを描画する	plt.plot(xdata, ydata)
プロットのデータラベルの場所を(x,y)に指定する	plt.legend(loc=(x, y))
折れ線グラフを描画して色をトマトに指定する	plt.plot(データ列, データ列2, color='tomato')
グラフの中の日本語表示を利用可能にする	sns.set(font='IPAexGothic')
ランダムにデータフレームから選択する	df.sample()
パステル調ので配列についてのヒストグラムをプロットする	plt.hist(xdata, color='pastel')
ラベンダーブラッシュにヒストグラムの色をセットする	plt.hist(データ列, color='lavenderblush')
リストとリストについてパステル調の色の折れ線グラフをプロットしてその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データフレームからカテゴリデータの列名リストを見る	df.select_dtypes('object').columns
ファイルからの入力ストリームを見る	open(filepath)
実数の双曲線正接を求める	math.tanh(x)
複数の列の値ごとにデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
折れ線グラフのバツマーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='x', markersize=n)
リストとリストの破線グラフを描いて、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
円周率	math.pi
組の合計値	sum(aTuple)
濃いの色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
アークタンジェント	math.atan(x)
暗い色で配列についての柱状図をプロットする	plt.hist(xdata, color='dark')
xを論理値にする	bool(x)
データフレームの行の名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
データフレームの列が文字列で始まらないデータを取り出す	df[not df[column].str.startswith(s)]
折れ線グラフを描画して色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフの四角印の線幅をnにセットする	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
折れ線グラフを描画して、色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
＜オプション＞色をビスクに設定する	color = 'bisque'
リストを緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
折れ線グラフを描画して色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
最大長nの両端キューを作成する	collections.deque(maxlen=n)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
組とタプルを加える	aTuple + aTuple2
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフを描画して、その色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
n個分両端キューの要素をローテンションする	deq.rotate(n)
ファイルを開き]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
最初のコマンド引数を知る	sys.argv[1]
ヒストグラムを描画して、その色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
データフレームを二つの列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームのstart行目からend行目まで抽出する	df[start:end]
データフレームのリスト列の中に含まれる文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
データフレームの重複する行だけを抽出する	df[df.duplicated(keep=False)]
データフレームを列でグループ化して、列の要約統計量を計算する	df.groupby(column).describe()[column2]
文字列の先頭から不要な空白を取り除く	s.lstrip()
折れ線グラフの色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
データフレームを各列と列の組み合わせ毎にグループ化し、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
データ列の値が欠損値か調べる	ds.isna()
０で全要素を初期化された三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
最大長を指定して双方向キュー	collections.deque(maxlen=n)
オブジェクトを文字列に変換する	str(obj)
ひとつでもASCII文字が文字列内に含まれるか調べる	any(c.isascii() for c in s)
データフレームを'A'列によってソートする	df.sort_values(by='A')
文字列は片仮名か	('ァ' <= ch <= 'ン')
＜オプション＞印を下三角に変更する	marker = 'v'
折れ線グラフに緑色の左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
＜オプション＞スチールブルーに色を設定する	color = 'steelblue'
＜オプション＞ライトグレーにグラフの色を設定する	color = 'lightgray'
リストとリストについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
文字列の開始位置から部分文字列を探す	s.find(sub, start)
カラムがどの程度、分散しているか調べる	ds.var()
カラーコードの右三角マーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
変数の出力を改行なしに行う	print(value, end='')
折れ線グラフを描画して、その色をコーンフラワーブルーにセットする	plt.plot(データ列, データ列2, color='cornflowerblue')
折れ線グラフを描画して、その色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
折れ線グラフの色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
リストを淡い色のヒストグラムでプロットする	plt.hist(xdata, color='muted')
データフレームの列の一覧	df.info()
データ列のNaNを直後の値に変更する	ds.fillna(method='bfill')
データフレームの行列をひっくり返す	df.T
ヒストグラムを描画して、その色をサーモンに変更する	plt.hist(データ列, color='salmon')
折れ線グラフの色をブランチドアーモンドにセットする	plt.plot(データ列, データ列2, color='blanchedalmond')
10を底とする小数点数の対数	math.log10(x)
折れ線グラフを描画してその色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
散布図を黒い丸マーカーとして描画する	plt.plot(xdata, ydata, marker='o', c='k')
逆正弦	math.asin(x)
マッピングをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
ユーザの入力を整数として受け取る	int(input())
＜オプション＞グラフの色をミディアムブルーにする	color = 'mediumblue'
＜オプション＞文字コードをBOM付きに変更する	encoding = 'utf_8_sig'
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
データフレームを複数の列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
タイムスタンプデータの年数	aDatetime.year
リストとリストの暗いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
配列とデータ列について散布図を描画し、、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
グラフ中の(x,y)の場所に凡例を入れる	plt.legend(loc=(x, y))
イテラブルの要素を全て集合に追加する	aSet.update(iterable)
データ列の欠損値を平均で埋める	ds.fillna(ds.mean())
折れ線グラフの色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
＜オプション＞グラフの色をグレーに設定する	color = 'grey'
３つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
リストをヒストグラムで可視化する	plt.hist(aList)
＜オプション＞グラフの色をコーラルに設定する	color = 'coral'
線グラフの色を淡いピンク色に指定する	plt.plot(データ列, データ列2, color='lightpink')
折れ線グラフを描画して、色をダークスレートブルーに変更する	plt.plot(データ列, データ列2, color='darkslateblue')
ファイルから読み込みストリームを見る	open(filepath)
リストから双方向キューを作成する	collections.deque(iterable)
画面にグラフの目的を変更する	sns.set(context='notebook')
データ列の欠損値をxで埋める	ds.fillna(x)
日付時刻データが日付時刻データより前かどうか調べる	aDatetime < aDatetime2
ヒストグラムを描画して、その色をパープルにセットする	plt.hist(データ列, color='purple')
リストとリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
データ列を折れ線グラフに描画して、マーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
ふたつの集合が共通の要素を持たないか確認する	aSet.isdisjoint(aSet2)
Pandasで文字列の数値時刻から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームを列の値でグループ化する	df.groupby(column)
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
今日が日曜日	datetime.datetime.today().weekday() == 6
数列とリストについての散布図に星マーカーを描く	plt.plot(xdata, ydata, marker='*')
赤いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='.', c='r')
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムの色をティールにする	plt.hist(データ列, color='teal')
折れ線グラフを描画して、色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
データフレームの列が正規表現文字列にマッチするデータを選択する	df[df[column].str.match(s)]
データフレームを列の値でグループ分けして、グループごとの個数を求める	df.groupby(column).count()
ピアソン積率相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='pearson')
列を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
改行付きでマッピングを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
行列の列ごとの最大	np.max(aArray, axis=0)
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの大バツ印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
折れ線グラフの四角印を赤色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
ヒストグラムを描画してその色を赤に設定する	plt.hist(データ列, color='red')
文字列はタプルの要素	element in aTuple
列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
プロットの見栄えを良くする	import seaborn as sns
赤い明るいの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
プロットの色を明るくする	sns.set(pallete='bright')
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
year年month月day日hour時のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
タイムスタンプデータを数値にする	aDatetime.timestamp()
散布図に赤いダイアモンドマーカーを使用する	plt.plot(xdata, ydata, marker='D', c='r')
暗いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
明るい色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='bright')
黒い星マーカーをデータ列とデータ列の散布図にプロットする	plt.plot(xdata, ydata, marker='*', c='k')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームのリスト列の欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
折れ線グラフを描画して、その色をミディアムオーキッドに変更する	plt.plot(データ列, データ列2, color='mediumorchid')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
変数を紫色にする	f'\033[35m{value}\033[0m'
リストのn番目の	aList[n]
線グラフの色をドジャーブルーに変更する	plt.plot(データ列, データ列2, color='dodgerblue')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
ヒストグラムの色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフの四角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
折れ線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
ヒストグラムを描画して、その色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
赤いポイントマーカーをリストとイテラブルの散布図に描画する	plt.plot(xdata, ydata, marker='.', c='r')
切り下げて整数に変換する	math.floor(x)
＜オプション＞グラフの色をミディアムオーキッドに指定する	color = 'mediumorchid'
イエローグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellowgreen')
バイナリモードでファイルをオープンする]	open(filepath, mode='rb')
＜オプション＞グレーに色を設定する	color = 'grey'
文字列の中で正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s)
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
ヒストグラムを描画して、色をリネンに指定する	plt.hist(データ列, color='linen')
リストとリストについてカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームのカラムを1000の位で丸める	df[col].round(-3)
＜オプション＞ホワイトスモーク色を使う	color = 'whitesmoke'
要素を両端キューの末尾から取り除く	deq.pop()
文字列の中で大文字・小文字を無視して正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
nが-9以上9以下かどうか	-9 <= n <= 9
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='gray')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
ファイルをUTF8で書き込みできるように開く]	open(filepath, mode='w', encoding='utf-8')
線グラフの色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
折れ線グラフを描画してその色をダークシアグリーンに指定する	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
文字列が数字かどうか判定する	s.isdigit()
＜オプション＞ダークグリーン色を用いる	color = 'darkgreen'
＜オプション＞下三角マーカーを加える	marker = 'v'
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
エラーなくリストの文字列の位置を見る	aList.index(element) if element in aList else -1
リストとデータ列の散布図を描画して、マーカーを星にする	plt.plot(xdata, ydata, marker='*')
ヒストグラムを描画して、その色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
折れ線グラフを描画して、色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
配列の行ごとの標準偏差を計算する	np.std(aArray, axis=1)
JSONファイルのファイルを辞書に変換する	json.load(fin)
等間隔でn個にデータ列を分割する	pd.cut(ds, n)
データ列の要約統計量を求める	ds.describe()
折れ線グラフを描画して、その色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
折れ線グラフに描画して、印をクロス印にする	plt.plot(データ列, データ列2, marker='x')
画面にプロットの用途を設定する	sns.set(context='notebook')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
リストとリストについての散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
イテラブルを累加する	itertools.accumulate(iterable)
データフレームの列の75パーセンタイル	df[col].quantile(0.75)
ファイルをクローズする	f.close()
ヒストグラムを描画してその色をオリーブに変更する	plt.hist(データ列, color='olive')
データフレームの指定された列を配列にする	df[column].values
二つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列2])
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
追加モードでファイルパスを開く]	open(filepath, mode='a')
データ列とラベル列を指定して、積み上げ横棒グラフを描く	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
データフレームを列で整列し、新しいインデックスを加える	df.sort_values(columns).reset_index()
イテラブルとリストについて黒い淡いをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
JSON形式の文字列を辞書にする	json.loads(jsonString)
折れ線グラフの星マーカーを青色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
＜オプション＞ミントクリームを使用する	color = 'mintcream'
リストをstartからendの範囲の柱状図を用いて描画する	plt.hist(データ列, range=(start, end))
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
ヒストグラムを描画してその色を真紅に設定する	plt.hist(データ列, color='crimson')
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='palegoldenrod')
データフレームを列ごとにグループ化し、、各グループ毎の平均値を求める	df.groupby(column).mean()
柱状グラフを描画し、区間の数をnに設定する	plt.hist(データ列, bins=n)
データフレームのn行以降抽出する	df[n:]
リストと数列についての散布図をパステル調の色として描画する	plt.plot(xdata, ydata, c='pastel')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
オブジェクトのクラスを使う	type(obj)
星マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='*')
ヒストグラムを描画して、その色をダークレッドに指定する	plt.hist(データ列, color='darkred')
＜オプション＞ビスクを使用する	color = 'bisque'
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
リストとリストについての散布図にポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.')
ヒストグラムを描画して色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
＜オプション＞サーモンを用いる	color = 'salmon'
マッピングにキーワード引数を用いて更新する	aDict.update(**kwargs)
リストとイテラブルの散布図を描いて、マーカーを大バツに指定する	plt.plot(xdata, ydata, marker='X')
データフレームの列がx未満の行を取り出す	df[df[column] < x]
文字列を部分文字列によって区切る	s.split(sub)
グラフのx軸のラベルをuntitledに変更する	plt.xlabel(untitled)
データフレームの行を取り出す	df[start:end]
ヒストグラムを描画して、色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
データフレームのカラムを1000の位で丸めて整数型にする	df[col].round(-3).astype(int)
折れ線グラフに青い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
文字列は文字列より辞書順で前	s < s2
＜オプション＞バリーウッド色を用いる	color = 'burlywood'
＜オプション＞白色を用いる	color = 'white'
タプルの要素をソートする	sorted(aTuple)
データフレームを表示するとき、列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
n2がnより大きく、かつ、n3より小さいか確認する	n < n2 and n2 < n3
論文にプロットの用途を設定する	sns.set(context='paper')
グラフに目盛り線を加える	plt.grid(True)
＜オプション＞サドルブラウン色を使用する	color = 'saddlebrown'
現在処理中の例外を情報	sys.exc_info()
＜オプション＞ペールグリーンを使用する	color = 'palegreen'
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
パラメータが0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
データフレームのカラムが何分か調べる	df[col].dt.minute
環境がWindowsか判定する	sys.platform.startswith('win32')
線グラフの色をゴーストホワイトに指定する	plt.plot(データ列, データ列2, color='ghostwhite')
散布図をプロットする	plt.scatter(xdata, ydata)
データフレームの平均値	df.mean()
ヒストグラムを描画して、色をシーグリーンにセットする	plt.hist(データ列, color='seagreen')
ヒストグラムを描画して、その色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
行列の行を選択する	aArray[行番号]
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
濃いでイテラブルについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
ユークリッド距離	math.dist(point, point2)
ベクトルのスカラー倍	aArray * n
ヒストグラムを描画して、その色を紺碧に指定する	plt.hist(データ列, color='azure')
タプルの中の最大値	max(aTuple)
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
データフレームのリストカラムの未入力値を前の値に指定する	df[aList].fillna(method='ffill')
＜オプション＞グラフの色をロージーブラウンに設定する	color = 'rosybrown'
折れ線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
＜オプション＞ポイントマーカーを使う	marker = '.'
実数が有限	math.isfinite(x)
＜オプション＞グリーン色を使う	color = 'green'
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
イテラブルとリストの散布図を色差別ない色として描画する	plt.plot(xdata, ydata, c='colorblind')
2つのデータフレームを異なるカラムをキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
両端キューの上限	deq.maxlen
折れ線グラフの▽マーカーを黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
折れ線グラフを描画して、その色をホワイトスモークに指定する	plt.plot(データ列, データ列2, color='whitesmoke')
行列の逆行列を求める	np.linalg.inv(aArray)
大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X')
偽	False
カウンタの各要素をカウントだけ列挙する	aCounter.elements()
青い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
線グラフを描画して色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
黒色のバツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='x', c='k')
ヒストグラムを描画する	plt.hist(データ列)
集合が空でないか調べる	len(aSet) != 0
文字列と文字列とグラフに補足を入れる	plt.legend([s, s2])
濃いの折れ線を描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
折れ線グラフを描画してその色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
入力ストリームを全部、読み込む	f.read()
折れ線グラフの丸マーカーを黄色くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
ケースを無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
ヒストグラムを描画してその色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
折れ線グラフの▲マーカーを赤色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
配列をn個に分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
＜オプション＞グラフの色をインディアンレッドに設定する	color = 'indianred'
紺色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
実数のk進対数を算出する	math.log(x, k)
重なりを見やすく淡い色を使って散布図を描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
キュー中の値の数を数える	deq.count(element)
グラフの中の縦軸の軸名をuntitledに指定する	plt.ylabel(untitled)
タイムスタンプデータの日	aDatetime.day
ヒストグラムを描画して色を真紅に変更する	plt.hist(データ列, color='crimson')
リストとリストについて散布図を描画して、文字列という補足用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
散布図に赤い▽マーカーを使う	plt.plot(xdata, ydata, marker='v', c='r')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
データフレームをCSV形式でJSONLファイルに保存する	df.to_csv(filename)
＜オプション＞フォレストグリーン色を使う	color = 'forestgreen'
データフレームの列をValueMapでまとめて置き換える	df[col].replace(ValueMap)
ミディアムブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumblue')
日付データをタプルに変換する	aDate.timetuple()
＜オプション＞オレンジにグラフの色を設定する	color = 'orange'
ヒストグラムを描画して色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
データフレームの列の欠損値をモードで埋める	df[col].fillna(df[col].mode().iloc[0])
ふたつの集合が集合と交わりを持たない	aSet.isdisjoint(aSet2)
データフレームの相関行列をヒートマップでグラフ化する	sns.heatmap(df.corr())
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
＜オプション＞ゴールド色を使う	color = 'gold'
最後のエントリをマッピングからポップする	aDict.popitem()
＜オプション＞真紅を使う	color = 'crimson'
赤いダイアモンドマーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='D', c='r')
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
グラフの見た目を綺麗にする	import seaborn as sns
＜オプション＞グラフの色をサンディーブラウンに指定する	color = 'sandybrown'
オブジェクトは集合か調べる	isinstance(obj, set)
折れ線グラフに線幅nの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
データ列の欠損値をモードで埋める	ds.fillna(ds.mode().iloc[0])
パステル調の色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='pastel')
データフレームの未入力値を中央値に設定する	df.fillna(df.median())
ヒストグラムを描画して、その色をダーク・スラテグレーに変更する	plt.hist(データ列, color='darkslategrey')
カウンタのKトップをリストとして得る	aCounter.most_common(k)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='greenyellow')
データフレームを列名リストによってグループ化する	df.groupby(columns)
値を両端キューの右に追加する	deq.append(element)
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
散布図に大バツマーカーを使う	plt.plot(xdata, ydata, marker='X')
全要素を０で初期化された三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
nがn2か調べる	n == n2
配列とイテラブルについての散布図に黒色の丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
折れ線グラフの星マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
列によってデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True)
イテラブルの長さnの順列を得る	itertools.permutations(iterable, n)
値を黒色で表示する	print(f'\033[30m{value}\033[0m')
数列を横軸と指定して、リストの変化を描画する	plt.plot(range(len(xdata)), xdata)
ヒストグラムを描画して、その色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
データフレームのリストカラムは正規分布からどれだけ、歪んでいるか確認する	df[aList].kurt()
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
ファイルパスのディレクトリ名	os.path.dirname(filepath)
オブジェクトは辞書か調べる	isinstance(obj, dict)
折れ線グラフの大バツ印を赤くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
ヒストグラムを描画して、その色をダークカーキにセットする	plt.hist(データ列, color='darkkhaki')
黒色のポイントマーカーをイテラブルとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='.', c='k')
データフレームを降順に列名リストによってによって並べ直す	df.sort_values(by=column, ascending=False)
データフレームを複数の列を用いてソートし、、更新する	df.sort_values(by=column, inplace=True)
パステル調の色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='pastel')
カラーコードの左三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='<', c=rgb)
オブジェクトはリストの要素でない	element not in aList
現在の日付時刻	datetime.datetime.now()
xが一桁の正の数か調べる	0 <= x <= 9
要素がセットの要素に含まれるか調べる	element in aSet
n個に等量でデータフレームの中の列を分割する	pd.qcut(df[col], n)
８進数字を全部使う	string.octdigits
ヒストグラムを描画して色をネイビーに設定する	plt.hist(データ列, color='navy')
文字列を改行で分割し文字列リストに変換する	s.splitlines()
リストとリストの散布図を描画して、マーカーの色をパステル調のに指定する	plt.plot(xdata, ydata, c='pastel')
データフレームを列によって並べて、下の方n件を取り出す	df.sort_values(columns).tail(n)
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
文字列から部分文字列を全て除く	s.replace(sub, '')
データフレームを各列毎にグループ分けして文字列という名前のグループを使う	df.groupby(column).get_group(s)
データ列を箱髭図を使って可視化する	plt.boxplot(データ列)
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
ヒストグラムの色をシルバーにする	plt.hist(データ列, color='silver')
nがn2よりも小さいか調べる	n < n2
文字列中のタブ文字をn個の空白に置き換える	s.expandtabs(tabsize=n)
折れ線グラフのダイアモンドマーカーを緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
イテラブルとリストについて黒色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
整数nを八進数表現に変換する	oct(n)
濃い色でリストとリストについての散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
＜オプション＞ゴールデンロッドにグラフの色を変更する	color = 'goldenrod'
データフレームから型リストのデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
変数を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
列でデータフレームをソートする	df.sort_values(by=column)
＜オプション＞グラフの色をコーンズシルクに設定する	color = 'cornsilk'
折れ線グラフを描画して、その色をミディアムオーキッドにする	plt.plot(データ列, データ列2, color='mediumorchid')
一点鎖線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
組の最後のn要素を取り除く	aTuple[:-n]
タプルをJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
リストとリストの色差別ないグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
逆正接を求める	math.atan(x)
データフレームの中で列と列の重複を削除する	df.drop_duplicates(subset=column)
データ列とリストの折れ線を描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
＜オプション＞ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
配列と配列のパステル調のを描画して、色を黒くする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
既存のベクトルを元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
ブール型のゼロ埋めした行列を作る	np.zeros(要素数, dtype=np.int32)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
ダークカーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkkhaki')
xが-9以上9以下	-9 <= x <= 9
データフレームのカラムの曜日数	df[col].dt.dayofweek
配列をベースに全要素が1のベクトル	np.ones_like(aArray)
＜オプション＞グラフの色をフクシアにセットする	color = 'fuchsia'
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
整数nを八進数文字列に変換する	oct(n)[2:]
黒い右三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
折れ線グラフの▲マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
書式をargsを引数としてフォーマットする	formatText.format(*args)
データ列は何日か見る	ds.dt.day
セットのすべての要素が別のセットに含まれる	aSet.issubset(aSet2)
文字列の右側から空白を消す	s.rstrip(' ')
カラムの中に文字列があるかどうか	ds.isin([value])
折れ線グラフを描画して、色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
ヒストグラムを描画して、その色をマルーンに設定する	plt.hist(データ列, color='maroon')
ヒストグラムを描画して、その色をデピンクにする	plt.hist(データ列, color='deeppink')
データフレームのカラムのNaNを最大値で補う	df[col].fillna(df[col].max())
文字列を最後の部分文字列で二分し最初の文字列を使う	s.rpartition(sub)[0]
赤色の四角マーカーをリストとリストの散布図に描く	plt.plot(xdata, ydata, marker='s', c='r')
リストとリストの散布図に菱形マーカーを描く	plt.plot(xdata, ydata, marker='D')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
'A'列と'B'列によってデータフレームをソートし、、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
日付データの年数	aDate.year
ベクトルの分散を計算する	np.var(aArray)
＜オプション＞カデットブルーに色を設定する	color = 'cadetblue'
イテラブルと数列として色差別ないグラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
折れ線グラフの▲マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='^', markersize=n)
カラムの中の欠損値の数を数える	ds.isna().sum()
文字列中にひとつでも非アルファベットが含まれる	any(not c.isalpha() for c in s)
文字列内に空白があるかどうか調べる	any(c.isspace() for c in s)
青色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
データフレームのリストカラムの値が欠損値か	df[aList].isna()
散布図に黒い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='k')
＜オプション＞グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
今日が何日か知る	datetime.datetime.today().day
ファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
黒いバツマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='x', c='k')
濃いパレットをグラフの描画で使用する	sns.set(pallete='deep')
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
タン色の線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
線グラフを描画して、色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
淡いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
折れ線グラフの▼マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
＜オプション＞グラフの色を青に設定する	color = 'blue'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
変数について数式の微分を行う	sympy.diff(e, z)
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
nにn2をかけた値をnに代入する	n *= n2
折れ線グラフを描画して、その色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
二つのカラムによってデータフレームをグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
2つの数値を文字列で区切ってプリントする	print(value, value2, sep=s)
リストの最後からn番目以前の要素を取り出す	aList[:-n]
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ひとつ置きにタプルを取り出す	aTuple[::2]
折れ線グラフに大きさnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
データフレームのリストカラムの中に存在する文字列の数を数える	df[aList].isin([value]).sum()
＜オプション＞右三角マーカーを使う	marker = '>'
データフレームのカラムのNaNを最大値に増やす	df[col].fillna(df[col].max())
サンディーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='sandybrown')
折れ線グラフを描画して、その色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
項目名が辞書に存在する	key not in aDict
カラムを10の位で丸める	ds.round(-1)
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
ファイルパスを追加モードでオープンする]	open(filepath, mode='a')
カウンタ	collections.Counter()
ヒストグラムを描画して、その色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
常用対数を求める	math.log10(x)
＜オプション＞文字コードをUTF8に指定する	encoding = 'utf-8'
データ列の中に文字列と文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
リストと配列の折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
赤い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
表データをインポートする	import pandas as pd
辞書のキーを要素に変更する	aDict[key] = element
黒い四角マーカーをリストとデータ列についての散布図に描く	plt.plot(xdata, ydata, marker='s', c='k')
タプルから項目名の値	aDict.get(key)
ファイルパスを絶対パスに変換する	os.path.abspath(filepath)
データフレームを複数の列でを用いて破壊的にソートする	df.sort_values(by=column, inplace=True)
データフレームのカラムの歪度	df[col].kurt()
折れ線グラフに線幅nの右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
２つのデータフレームをジョインする	pd.merge(df, df2)
オプションで、標準出力を使う	file = sys.stdout
部分文字列を文字列の最後から探す	s.rfind(sub)
＜オプション＞星マーカーを描画する	marker = '*'
整数nの十六進表現	hex(n)
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
タプルの集合	set(iterable)
散布図に赤い丸マーカーを用いる	plt.plot(xdata, ydata, marker='o', c='r')
散布図を左三角マーカーで描画する	plt.plot(xdata, ydata, marker='<')
イテラブルとリストのカラーコードの濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
＜オプション＞グラフの色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
シーケンスを累加する	itertools.accumulate(iterable)
配列とリストについての散布図を淡い色でプロットする	plt.plot(xdata, ydata, c='muted')
リストとリストについてカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
折れ線グラフの四角印を青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
文字列を最後の部分文字列で分けた場合の後半の文字列を見る	s.rpartition(sub)[-1]
プロットの横軸の軸ラベルをuntitledに設定する	plt.xlabel(untitled)
ヒストグラムを描画して、その色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
組の平均値を求める	sum(aTuple)/len(aTuple)
データフレームの各列間の相関係数を計算する	df.corr()
数列とリストを用いて濃いの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
＜オプション＞ローングリーンにグラフの色を設定する	color = 'lawngreen'
データ列と数列について散布図を描き、、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
データ列を折れ線グラフに描画して印を星印にする	plt.plot(データ列, データ列2, marker='*')
データフレームをJSONLファイルに書き込む	df.to_excel(filename)
リストとリストの折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
折れ線グラフを描画して、その色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
黒色の大バツマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='X', c='k')
文字列が部分文字列で終わる	s.endswith(sub)
データフレームのカラムの中にいくつNaNがあるかカウントする	df[col].isna().sum()
ヒストグラムを描画して色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
aListn番目から要素をポップする	aList.pop(n)
列によってデータフレームをグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
双方向キューが空でないか調べる	len(deq) != 0
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
ヒストグラムを描画して、その色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
実数の仮数部	math.frexp(x)[0]
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
リストの末尾のn要素を取り除く	aList[:-n]
リストと配列として暗いの折れ線をプロットして、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
データフレームの指定された列	df[column]
データフレームの中に文字列がある	df.isin([value])
分子割る分母	fractions.Fraction(分子, 分母)
プログラムを異常停止する	sys.exit(1)
データフレームのカラムの中に日付データと日付データが存在するかどうか確認する	df[col].isin([value, value2])
データ列とリストについての散布図に赤い左三角マーカーを描く	plt.plot(xdata, ydata, marker='<', c='r')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
折れ線グラフの四角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
リストと配列について散布図を描き、、四角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='s', c=rgb)
データ列を10の位で丸めて、整数にする	ds.round(-1).astype(int)
折れ線グラフを描画して、色をシアンに指定する	plt.plot(データ列, データ列2, color='cyan')
線グラフを描画してその色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
nがn2かどうか調べる	n == n2
リストとリストの青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
リストとイテラブルについての散布図を淡い色としてプロットする	plt.plot(xdata, ydata, c='muted')
文字列中に部分文字列が存在しない	sub not in s
startからendの範囲のヒストグラムを用いてデータ列を描画する	plt.hist(データ列, range=(start, end))
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
データフレームのカラムの平均値	df[col].mean()
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
淡いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
リストとリストの散布図に右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
＜オプション＞右三角印を使う	marker = '>'
タプルをリストに変換する	list(aTuple)
文字列を下線付き化する	f'\033[4m{value}\033[0m'
グローバル変数の一覧	globals()
データ列と配列の明るいグラフをプロットし、、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='b')
データラベルを文字列と文字列と表示する	plt.legend([s, s2])
ヒストグラムを描画してその色を茶色に変更する	plt.hist(データ列, color='brown')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
＜オプション＞ライトブルーを用いる	color = 'lightblue'
数列とリストの破線グラフを描画し、、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
標準エラーを使う	sys.stderr
折れ線グラフに描画して、マーカーを▲印にする	plt.plot(データ列, データ列2, marker='^')
パウダーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフを描画して、その色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
実数以下の最大の整数	math.floor(x)
データフレームを複数の列によってで降順に並べる	df.sort_values(by=column, ascending=False)
黒い上三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='^', c='k')
赤い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
横方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
折れ線グラフを描画して、その色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
リストとイテラブルについての散布図に赤い左三角マーカーを描く	plt.plot(xdata, ydata, marker='<', c='r')
改行を取り除いて1行標準入力から読む	sys.stdin.readline().rstrip()
淡いの色を赤にする	plt.plot(xdata, ydata, linestyle='muted', color='r')
色差別ないとしてリストについてのヒストグラムをプロットする	plt.hist(xdata, color='colorblind')
変数をシアンにする	f'\033[36m{value}\033[0m'
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
文字列がタプルに含まれない	element not in aTuple
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
データ列の値を正規表現でまとめてreplに変更する	ds.replace(pattern, repl, regex=True)
データフレームのNaNを最小値で埋める	df.fillna(df.min())
データ列の分	ds.dt.minute
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
＜オプション＞グラフの色をグレーに指定する	color = 'gray'
カウンタをシーケンスで更新する	aCounter.update(iterable)
マッピングを浅く複製する	dict(aDict)
＜オプション＞青紫色を用いる	color = 'violet'
プロットのパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
ヒストグラムを描画して、色をダークマゼンタにセットする	plt.hist(データ列, color='darkmagenta')
ファイルパスの区切り記号	os.sep
＜オプション＞ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
ASCII限定として正規表現で文字列を分ける	re.split(pattern, s, flags=re.ASCI)
線グラフを描画してその色をシーグリーンに指定する	plt.plot(データ列, データ列2, color='seagreen')
時間を用いる	import time
パステル調のグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
プロットの描画で淡い色を使う	sns.set(pallete='muted')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ヒストグラムを描画して、その色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
標準入力を使用する	sys.stdin
暗い色のヒストグラムで配列を描く	plt.hist(xdata, color='dark')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
ホットピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='hotpink')
小数点以下3桁までJSONLファイルにデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
データフレームをJSONLファイルに書き込む	df.to_csv(filename)
散布図に黒い左三角マーカーを使用する	plt.plot(xdata, ydata, marker='<', c='k')
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
文字列がリストに含まれるか	element in aList
カラーコードの左三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフに▼印を使う	plt.plot(データ列, データ列2, marker='v')
散布図を赤い右三角マーカーを使って描画する	plt.plot(xdata, ydata, marker='>', c='r')
黒い右三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
双方向キューが空か調べる	len(deq) == 0
黒い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='k')
赤い大バツマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='X', c='r')
複数の列によってデータフレームを小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームから指定された二つの列を抽出する	df[[column, column2]]
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
グラフのフォントを日本語にセットする	sns.set(font='IPAexGothic')
ラジアンの角度	math.degrees(x)
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
ヒストグラムを描画してその色をビスクに設定する	plt.hist(データ列, color='bisque')
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
ヒストグラムを描画して、その色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
文字コードを文字に変換する	chr(unicode)
値を青色にする	f'\033[34m{value}\033[0m'
配列と数列について散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
イテラブルとリストの散布図を描画してマーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
カラーコードの大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
２つの文字列を文字列で区切って出力する	print(value, value2, sep=s)
折れ線グラフを描画して、色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
プログラムを正しく止める	sys.exit(0)
イテラブルからスタックを作る	collections.deque(iterable)
線グラフの色をパパイヤウィップにする	plt.plot(データ列, データ列2, color='papayawhip')
右三角マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='>')
＜オプション＞グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
要素ひとつの組を作る	(element,)
部分文字列で文字列の開始位置以降が始まるか調べる	s.startswith(sub, start)
値を表示する	print(value)
＜オプション＞印をダイアモンドに変更する	marker = 'D'
リストとリストについて濃い色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
グラフをデフォルトでいい感じに設定する	sns.set()
標準出力がパイプ	not sys.stdout.isatty()
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
本日が金曜日か	datetime.datetime.today().weekday() == 4
デピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='deeppink')
オレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='orange')
両端キューの先頭に要素を追加する	deq.appendleft(element)
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
数式の平方根を求める	sympy.sqrt(e)
データフレームをヘッダを付けずにJSONLファイルに書き込む	df.to_csv(filename, header=None)
黒い下三角マーカーを配列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='v', c='k')
nをn2分の一にする	n /= n2
実数の正弦	math.sin(x)
ロードされたモジュールの一覧	sys.modules
線グラフを描画して、色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
要素がセットのメンバーに含まれないか調べる	element not in aSet
本日の月を使う	datetime.datetime.today().month
タプルの要素数	len(aTuple)
配列とリストの散布図を濃い色で描く	plt.plot(xdata, ydata, c='deep')
＜オプション＞ネイビー色を使用する	color = 'navy'
文字列を部分文字列で分けたときの後半の文字列を使う	s.partition(sub)[-1]
実数のハイパボリック・コサイン	math.cosh(x)
データ列を十の位で丸めて、整数にする	ds.round(-1).astype(int)
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
データフレームの数値を一度に小数点以下n桁で四捨五入する	df.round(n)
データ列が何分か見る	ds.dt.minute
グラフの色を淡くする	sns.set(pallete='muted')
ヒートマップでデータフレームのリストで指定されたカラムの相関行列を描画する	sns.heatmap(df[aList].corr())
度数分布図のビン数を変更する	plt.hist(データ列, bins=n)
配列と配列についての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
＜オプション＞未入力値も無視しない	dropna = True
折れ線グラフに大きさnの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markersize=n)
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
＜オプション＞色を青紫に設定する	color = 'violet'
＜オプション＞NaNを含めない	dropna = True
ヒストグラムを描画してその色をアイボリーにセットする	plt.hist(データ列, color='ivory')
リストから多重集合を作る	collections.Counter(iterable)
リストを紫色で表示できる文字列に変換する	f'\033[35m{value}\033[0m'
折れ線グラフを描画して色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
リストの最後の要素	aList[-1]
折れ線グラフを描画して、その色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
ヒストグラムを描画して、その色を貝殻に設定する	plt.hist(データ列, color='seashell')
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
折れ線グラフの色をグリーンにする	plt.plot(データ列, データ列2, color='green')
リストとリストで色差別ないグラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
文字列を緑色にする	f'\033[32m{value}\033[0m'
＜オプション＞ライトスカイブルーにグラフの色を変更する	color = 'lightskyblue'
赤いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
リストのn番目のの要素を使う	aList[n]
＜オプション＞グラフの色をミディアムブルーに変更する	color = 'mediumblue'
データ列の中にいくつNaNがあるか求める	ds.isna().sum()
事前に正規表現をコンパイルする	re.compile(pattern)
２つのオブジェクトは同じかどうか調べる	obj is obj2
折れ線グラフの色をゴールドに変更する	plt.plot(データ列, データ列2, color='gold')
折れ線グラフを描画してその色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
整数nを16進表現にする	hex(n)
2つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
辞書のキーとその値を列挙する	aDict.items()
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
データフレームをグループ化し、それぞれの列に対し平均値を計算する	df.groupby(column)[column2].mean()
＜オプション＞グラフの色をロイヤルブルーに設定する	color = 'royalblue'
データフレームを複数の列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
折れ線グラフを描画して、その色をドジャーブルーに指定する	plt.plot(データ列, データ列2, color='dodgerblue')
散布図に丸マーカーを使う	plt.plot(xdata, ydata, marker='o')
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
データフレームを小さい順に複数の列によって並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフを描画して、その色をダークオリーブグリーンに指定する	plt.plot(データ列, データ列2, color='darkolivegreen')
本日の日付時刻	datetime.datetime.now()
折れ線グラフの△マーカーを黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
リストとデータ列についての散布図にカラーコードのポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c=rgb)
ヒストグラムを描画して、その色をペルーにセットする	plt.hist(データ列, color='peru')
データフレームの列をインデックスに指定する	df.set_index(column)
文字列をカンマで区切って、列挙する	s.split(',')
データフレームの中の列をn個に分割する	pd.cut(df[col], n)
データフレームのインデックス名の一覧	df.index
＜オプション＞ライトシアンにグラフの色を設定する	color = 'lightcyan'
カウンタの全カウント	aCounter.total()
リストにリストを追加し、拡張する	aList.extend(aList2)
＜オプション＞グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
赤色の淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
カウンタの最頻出な項目	aCounter.most_common()[0]
折れ線グラフの色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
ファイルパスをバイナリモードでオープンする]	open(filepath, mode='rb')
散布図に黒色のポイントマーカーを使用する	plt.plot(xdata, ydata, marker='.', c='k')
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
論文にグラフの目的を設定する	sns.set(context='paper')
ミディアムアクアマリンにヒストグラムの色をセットする	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムを描画してその色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
データフレームを二つの列によって整列し、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ふたつの集合の積集合	aSet.intersection(aSet2)
列'A'と列'B'をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
データ列とラベルを指定して棒を描画する	plt.bar(ラベル列, データ列)
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
折れ線グラフを描画して、その色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
ユニコードに対応する文字	chr(unicode)
折れ線グラフを描画して色をミディアムスレートブルーに変更する	plt.plot(データ列, データ列2, color='mediumslateblue')
＜オプション＞▲マーカーを用いる	marker = '^'
折れ線グラフを描画して、その色を赤に設定する	plt.plot(データ列, データ列2, color='red')
＜オプション＞グラフの色をオーキッドに指定する	color = 'orchid'
配列のスカラー倍	aArray * n
nが無限に続く整数リストを求める	itertools.repeat(n)
日付時刻データが火曜日	aDatetime.weekday() == 1
ヒストグラムを描画して、その色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
整数nのバイト長	(n.bit_length() + 7) // 8
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
日付データが日付データより後ろ	aDate > aDate2
データフレームのカラムの中にある日付データと日付データの合計をカウントする	df[col].isin([value, value2]).sum()
タプルをn回、連結する	aTuple * n
mathをインポートする	import math
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
グラフのカラーパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
＜オプション＞グラフの色をプラムに指定する	color = 'plum'
データ列の中に日付データと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
整数nが配列の一つか調べる	n in aArray
＜オプション＞ダークサーモン色を使う	color = 'darksalmon'
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgray')
ヒストグラムを描画して、その色をシエナに設定する	plt.hist(データ列, color='sienna')
文字列の長さ	len(s)
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
Pandasで、書式でデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
折れ線グラフを描画して色をブラックに変更する	plt.plot(データ列, データ列2, color='black')
データフレームをCSVから読み込む	pd.read_csv(filename, sep=',')
文字列中の文字を列挙する	list(s)
データフレームを２つのカラムによって小さい順に並べ直して更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
折れ線グラフを描画して、その色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
データフレームのカラム名を指定された列の名前一覧に置き換える	df.columns = columns
折れ線グラフを描画して、色をチョコレートに変更する	plt.plot(データ列, データ列2, color='chocolate')
ヒストグラムを描画して、その色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
nはn2と等しいかどうか判定する	n == n2
リストと配列について破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
折れ線グラフのスタイルを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
数に実数を加える	x + y
折れ線グラフを描画して、その色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
数値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
タプルの先頭を取り除く	aTuple[1:]
マップの浅いコピーを生成する	aDict.copy()
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
タプルのキーを要素に変更する	aDict[key] = element
配列をビン数nでビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
オブジェクトは浮動小数点数型のインスタンス	isinstance(obj, float)
＜オプション＞グラフの色をミディアムスレートブルーに指定する	color = 'mediumslateblue'
データ列の中にいくつ文字列があるか求める	ds.isin([value]).sum()
今日の曜日を整数で使う	datetime.datetime.today().weekday()
淡いの色を黒くする	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
データフレームの列の度数分布図を描画する	plt.hist(df[column])
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
試しに何か動かす	print('Hello World')
データフレームを列を用いて降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列, データ列2, color='gainsboro')
ヒストグラムを描画して、色を赤に設定する	plt.hist(データ列, color='red')
タプルをひとつ置きに取り出す	aTuple[::2]
最大値・最小値で整数乱数を発生させる	random.randint(最小値, 最大値)
明るい色で重なりを見やすく散布図を描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ヒストグラムを描画してその色をアクアに設定する	plt.hist(データ列, color='aqua')
＜オプション＞アクアマリンにグラフの色を設定する	color = 'aquamarine'
＜オプション＞ダークオーキッド色を使う	color = 'darkorchid'
配列とリストについて散布図を描画して、丸マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームの数値をまとめて丸める	df.round()
＜オプション＞ダーク・スラテグレー色を使う	color = 'darkslategrey'
リストとリストの色差別ないをプロットし、、その色を黒色に指定する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
ヒストグラムを描画して、その色をグレーに指定する	plt.hist(データ列, color='grey')
文字列は全て識別子名かどうか	s.isidentifier()
オブジェクトのプロパティの値を値に指定する	setattr(obj, プロパティ名, 値)
データフレームの各グループ毎の個数	df.groupby(column).count()
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
現在のモジュール	sys.modules[__name__]
明るい色のヒストグラムとしてイテラブルを描画する	plt.hist(xdata, color='bright')
リストとリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
折れ線グラフに緑色のダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
最大値・最小値の範囲として一様な疑似乱数	random.uniform(最小値, 最大値)
ベクトルの列ごとの分散を求める	np.var(aArray, axis=0)
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
データフレームの列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
日付データが月曜日かどうか調べる	aDate.weekday() == 0
辞書順で二つの文字列を比較する	s < s2
マップのコピーを新規生成する	dict(aDict)
＜オプション＞色をダークサーモンに変更する	color = 'darksalmon'
＜オプション＞ブランチドアーモンドを使う	color = 'blanchedalmond'
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumseagreen')
折れ線グラフを描画して、その色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフの色をゴールデンロッドにセットする	plt.plot(データ列, データ列2, color='goldenrod')
ヒストグラムを描画して、その色をカーキに設定する	plt.hist(データ列, color='khaki')
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
シーケンスからひとつランダムに選ぶ	random.choice(iterable)
折れ線グラフに青い▲印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
文字列中に非大文字がある	any(not c.isupper() for c in s)
＜オプション＞色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
二つのタプルを階層的につなぐ	collections.ChainMap(aDict, aDict2)
実数のハイパボリック・サインの逆数を求める	math.asinh(x)
データフレームの中に存在する文字列の数を数える	df.isin([value]).sum()
データフレームのリストで指定された列の各列間の相関係数を求める	df[aList].corr()
データフレームを列名リストでソートする	df.sort_values(by=column)
線グラフを描画して、色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
黄色い丸マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
ファイルの絶対ファイルパスを使う	os.path.abspath(filepath)
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
黄色い丸印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
データフレームの欠損値を平均値で置換する	df.fillna(df.mean())
＜オプション＞色をドジャーブルーに設定する	color = 'dodgerblue'
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列, データ列2, color='gainsboro')
文字列中に部分文字列が含まれないかどうか	sub not in s
列をビン数nでビン分割する	pd.cut(ds, n)
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
折れ線グラフの色をフクシアに変更する	plt.plot(データ列, データ列2, color='fuchsia')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
辞書にキーワード引数で更新する	aDict.update(**kwargs)
文字列を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
ファイルを一行ずつ読み込む	f.readline()
列から最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
＜オプション＞グラフの色をスカイブルーに設定する	color = 'skyblue'
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
列の各要素を関数でフィルタする	filter(func, iterable)
データフレームを'A'列によって降順に破壊的に整列する	df.sort_values(by='A', ascending=False, inplace=True)
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
辞書に項目名が存在しない時、要素を追加する	aDict.setdefault(key, element)
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
オブジェクトがタプルに含まれないか調べる	element not in aTuple
組の中の最小値を求める	min(aTuple)
データフレームのカラムのNaNを直前の値で埋める	df[col].fillna(method='ffill')
線グラフを描画して、その色をグリーンイエローに指定する	plt.plot(データ列, データ列2, color='greenyellow')
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ファイルパスを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
両端キューに要素をエンキューする	deq.appendleft(element)
2つの文字列を辞書順で比較する	s < s2
＜オプション＞グラフの色をダークゴールデンロッドにする	color = 'darkgoldenrod'
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
xの小数点以下'3'桁まで表示する	print(':.3f'.format(x))
2つのデータフレームを列'A'と列'B'をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
タプル内の要素が全て真か調べる	all(aTuple)
year年month月の日付	datetime.date(year=year, month=month, day=1)
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
データフレームを列名リストによってグループ化し、基本統計量を求める	df.groupby(columns).describe()
折れ線グラフの印を▲にする	plt.plot(データ列, データ列2, marker='^')
nから無限にカウントアップする	itertools.count(start=n)
データフレームをインデックスで降順で並べる	df.sort_index(ascending=False)
リストとリストの散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
文字列の開始位置からと終了位置の間に部分文字列が存在するか判定する	s.find(sub, start, end) != -1
＜オプション＞グラフの色をラベンダーに設定する	color = 'lavender'
データフレームのリストカラムの欠損値をメディアンで埋める	df[aList].fillna(df[aList].median())
リストとリストについて散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
折れ線グラフの色を青緑に指定する	plt.plot(データ列, データ列2, color='teal')
配列とデータ列として暗いを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
CSVファイルTSVをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
行によって昇順に表をソートする	df.sort_index(ascending=True)
日付データの月を見る	aDate.month
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
整数nがセットのどれかか調べる	n in aSet
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
散布図にカラーコードの左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c=rgb)
リストとリストについて破線グラフを描画して、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
二つの実行結果をカンマで区切って出力する	print(value, value2, sep=',')
プロットの描画で暗い色テーマを使う	sns.set(pallete='dark')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
線グラフを描画して、その色をターコイズに変更する	plt.plot(データ列, データ列2, color='turquoise')
バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x')
データフレームの歪度を求める	df.kurt()
＜オプション＞グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
カウンタを多い順にリストとして得る	aCounter.most_common()
非数	math.nan
タプル内の要素は全て真か調べる	all(aTuple)
n回の数値イテラブルを使う	range(n)
＜オプション＞色をライトスカイブルーにセットする	color = 'lightskyblue'
文字列の先頭の空白を消す	s.lstrip()
散布図に三角マーカーを使う	plt.plot(xdata, ydata, marker='^')
実数が非数	math.isnan(x)
日付時刻データのタイムゾーン	aDatetime.timetz()
実数とyのノルムを求める	math.hypot(x, y)
ヒストグラムを描画して、その色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
四角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='s')
ヒストグラムを描画して色をホワイトスモークに指定する	plt.hist(データ列, color='whitesmoke')
ヒストグラムを描画して色を白に設定する	plt.hist(データ列, color='white')
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
赤色の三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
文字列の左側からタブを取り除く	s.lstrip('\t')
TSVファイルからカンマ区切りのファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
実数の絶対値	math.fabs(x)
＜オプション＞グレー色を使う	color = 'grey'
オブジェクトがリストの要素	element in aList
リストとリストについて黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
オーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='orchid')
散布図に赤いポイントマーカーを使用する	plt.plot(xdata, ydata, marker='.', c='r')
折れ線グラフの右三角マーカーを黄色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
nがn2以上か	n >= n2
イテラブルとリストの暗いグラフを描いて、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
データフレームを列の値によって集約して、最大値を求める	df.groupby(column).max()
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
印字可能な文字を全て求める	string.printable
散布図に赤い丸マーカーを使用する	plt.plot(xdata, ydata, marker='o', c='r')
データフレームのカテゴリデータをベクトルに変換する	pd.get_dummies(df)
ヒストグラムを描画してその色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
オプションで、標準エラーを使う	file = sys.stderr
データフレームの指定された列を抽出する	df[[column]]
折れ線グラフの右三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
イテラブルの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
＜オプション＞ゴールデンロッド色を使用する	color = 'goldenrod'
折れ線グラフの印を四角にする	plt.plot(データ列, データ列2, marker='s')
データフレームを各列と列の組み合わせ毎に集約し、個数を求める	df.groupby([column, column2], as_index=False).count()
＜オプション＞カンマをセパレータで用いる	sep = ','
イテラブルからn個、ランダムに選ぶ	random.choices(iterable, k=n)
ヒストグラムを描画して、その色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
データ列の各データが何回出現するか調べる	ds.value_counts()
＜オプション＞改行コードをUNIXに変更する	newline = '\n'
ヒストグラムの色をティールに変更する	plt.hist(データ列, color='teal')
整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int)
折れ線グラフに描画して、マーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
部分文字列が部分文字列で始まるかどうか確認する	s.startswith(sub)
データ列の欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
データ列とデータ列についての散布図に黒い下三角マーカーを描く	plt.plot(xdata, ydata, marker='v', c='k')
折れ線グラフの丸マーカーの大きさをnにする	plt.plot(データ列, データ列2, marker='o', markersize=n)
データフレームの列の値がxより多い行を抽出する	df[df[column] > x]
浮動小数点数に実数を掛ける	x * y
ビン数nで配列を分割する	pd.cut(aArray, n)
折れ線グラフの▲マーカーを黄色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
データフレームのリスト列の中にいくつ欠損値があるか数える	df[aList].isna().sum()
日付時刻データが木曜日かどうか調べる	aDatetime.weekday() == 3
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
文字列を文字のリストに変換する	list(s)
変数をマゼンタにする	f'\033[35m{value}\033[0m'
折れ線の色を文字列に変更する	plt.plot(xdata, ydata, color=s)
３変数の最大値を求める	max(x, y, z)
＜オプション＞ディープスカイブルー色を用いる	color = 'deepskyblue'
ヒストグラムを描画して色をモカシンに設定する	plt.hist(データ列, color='moccasin')
nの無限の整数リスト	itertools.repeat(n)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
＜オプション＞黄色を用いる	color = 'yellow'
リストを濃い色の柱状グラフで描く	plt.hist(xdata, color='deep')
リストの先頭を取り除く	aList[1:]
ファイルの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
折れ線グラフの丸印を赤くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
文字列中にひとつでも非英数字があるか調べる	any(not c.isalnum() for c in s)
折れ線グラフの色をペルーに変更する	plt.plot(データ列, データ列2, color='peru')
ファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
折れ線グラフを描画して、色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
折れ線グラフを描画して、その色をラベンダーに変更する	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフを描画して、その色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
変数がマイナス無限大に近づく場合の数値の極限値を求める	sympy.limit(e, z, -oo)
小数点数の天井	math.ceil(x)
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
0からnの範囲	range(n)
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
折れ線グラフを描画して、その色をインディゴに変更する	plt.plot(データ列, データ列2, color='indigo')
nをn2倍にする	n *= n2
predicateFuncがTrueとならない列の要素	itertools.dropwhile(predicateFunc, iterable)
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
黒い丸マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='o', c='k')
暗いの折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', color='r')
カラムの第一四分位数を算出する	ds.quantile(0.25)
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
データフレームのリストカラムの空文字を未入力値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
タイムスタンプデータにn日を加える	aDatetime + datetime.timedelta(days=n)
部分文字列が文字列の開始位置以降に含まれないか調べる	s.find(sub, start) == -1
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
リストの長さだけ繰り返す	range(len(aList))
暗い色で重なりを見やすくリストとリストについての散布図を描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
行列の要素ごとの積を計算する	np.multiply(aArray, aArray2)
配列とデータ列について散布図をプロットして、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
折れ線グラフを描画して、その色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
＜オプション＞左三角印を使う	marker = '<'
自然数の並べ方の総数	math.perm(n)
データフレームのカラムを整数に四捨五入する	df[col].round()
リストとリストについて散布図を描いて、右三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='>', c=rgb)
文字列をカンマを用いて区切って、列挙する	s.split(',')
データ列とリストについての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
リストとリストのカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフを描画して、その色をグレーに指定する	plt.plot(データ列, データ列2, color='gray')
リストとリストの黒い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
書き込み用にファイルを文字コードtextを用いてオープンする]	open(filepath, mode='w', encoding=text)
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
折れ線グラフに大きさnのクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフを描画して、その色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
ヒストグラムを描画して、色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
赤い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
ヒストグラムを描画して色をマルーンに設定する	plt.hist(データ列, color='maroon')
データフレームを'A'列によって昇順に並べて更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
マッピングを並べ直してJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
現在の作業ディレクトリを使う	os.getcwd()
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
データフレームのカラムの値がNaNかどうか調べる	df[col].isna()
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
文字列がいつまでも繰り返す列	itertools.repeat(element)
オプションで標準出力を用いる	file = sys.stdout
文字コードの最大値を調べる	sys.maxunicode
nilに等しい識別子	None
平均でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].mean())
配列とリストについて濃いグラフを描画し、、その色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
文字化けを防ぐ	sns.set(font='IPAexGothic')
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
nをn2で結果の切り上げ	(n + n2 - 1) // n2
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
ベクトルの型	aArray.dtype()
ヒストグラムの色をミスティローズに指定する	plt.hist(データ列, color='mistyrose')
線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
データフレームのカラムの中に文字列があるかどうか調べる	df[col].isin([value])
データフレームの列を四捨五入する	df[col].round()
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
データフレームを列によって集約して、それぞれのグループごとの個数を求める	df.groupby(column).count()
真部分集合か調べる	aSet < aSet2
文字列はPythonのキーワードか	keyword.iskeyword(s)
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
＜オプション＞ターコイズにグラフの色をセットする	color = 'turquoise'
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
自然数最小公倍数	math.lcm(n, n2)
リストを等量でn個にビニングする	pd.qcut(aList, n)
カラーバーを描画する	plt.colorbar()
ヒストグラムを描画して色を紺に設定する	plt.hist(データ列, color='darkblue')
大文字を全て求める	string.ascii_uppercase
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
リストと配列の散布図を描き、マーカーを丸に変更する	plt.plot(xdata, ydata, marker='o')
文字列の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
＜オプション＞ブラックにグラフの色を設定する	color = 'black'
データフレームをグループ化し、列に対し最小値を求める	df.groupby(column)[column2].min()
データフレームを2つのカラムでソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
整数nがリストのいづれかか調べる	n in aList
カラーパレットを明るくする	sns.set(pallete='bright')
線グラフの色をライトブルーに指定する	plt.plot(データ列, データ列2, color='lightblue')
ヒストグラムを描画して、その色をライトスレイグレーにする	plt.hist(データ列, color='lightslategrey')
整数nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
＜オプション＞インディゴを使う	color = 'indigo'
本日の日付時刻	datetime.datetime.today()
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
赤色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
リスト内の要素が少なくともひとつ真か調べる	any(aList)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
二つの列を並べて箱髭図にする	plt.boxplot([df[column], df[column2]])
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
文字列が十進数字か調べる	s.isdecimal()
＜オプション＞色をローングリーンに設定する	color = 'lawngreen'
辞書の値の一覧	aDict.values()
線グラフを描画して、その色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
カウンタの最頻出の項目	aCounter.most_common()[0]
カラーコードの左三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='<', c=rgb)
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
スライド用にグラフを変更する	sns.set(context='talk')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
列の欠損値を最大値に設定する	ds.fillna(ds.max())
左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
＜オプション＞グラフの色をグリーンに設定する	color = 'green'
Pandasで、UNIX時間のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
折れ線グラフを描画してその色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
線グラフを描画して、その色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
カラーコードのダイアモンドマーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='D', c=rgb)
nからn2までの整数列	list(range(n, n2+1))
データ列とイテラブルの淡いを描画し、、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='muted', color='b')
イテラブルをセットに変換する	set(iterable)
オプションで出力先を標準出力に設定する	file = sys.stdout
黒いクロスマーカーを散布図に使う	plt.plot(xdata, ydata, marker='x', c='k')
リストが空か調べる	len(aList) == 0
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
パステル調のの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
追加できるように文字コードtextを使って既存のファイルを開く]	open(filepath, mode='a', encoding=text)
データ列はどの程度分散しているか見る	ds.var()
散布図にバツマーカーを使う	plt.plot(xdata, ydata, marker='x')
シーケンスを累加した列	itertools.accumulate(iterable)
コレクションを用いる	import collections
上位集合	aSet.issuperset(aSet2)
＜オプション＞ブルーバイオレットを使う	color = 'blueviolet'
文字列の数値時刻から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ヒストグラムを描画して、その色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
折れ線グラフの星マーカーを青くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
折れ線グラフを描画して、その色をグリーンイエローに指定する	plt.plot(データ列, データ列2, color='greenyellow')
データフレームを関数によってグループ化し要約統計量を計算する	df.groupby(関数).describe()
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
折れ線グラフに大きさnの菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
データフレームの列の最頻値を求める	df[col].mode()
二変数の最大値	max(x, y)
データ列とリストのカラーコードの暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
折れ線グラフの色を紺にする	plt.plot(データ列, データ列2, color='darkblue')
両端キューに要素をプッシュする	deq.append(element)
データフレームを各列毎にグループ化し、列の最小値を算出する	df.groupby(column)[column2].min()
ファイルをオープンして]書き込みストリームを使う	open(filepath, mode='w')
実行環境がリナックス	sys.platform.startswith('linux')
Pandasで、日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
線グラフの色をライムに変更する	plt.plot(データ列, データ列2, color='lime')
selectorsでマスクされたタプルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
線グラフを描画してその色をスレートブルーに指定する	plt.plot(データ列, データ列2, color='slateblue')
列'A'と列'B'をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
散布図に黒色の星マーカーを使用する	plt.plot(xdata, ydata, marker='*', c='k')
濃いシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
キーがマッピング上で定義済み	key in aDict
折れ線グラフを描画して、その色を淡いピンク色に変更する	plt.plot(データ列, データ列2, color='lightpink')
線グラフの色をネイビーに指定する	plt.plot(データ列, データ列2, color='navy')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
日付時刻データからn日を減らす	aDatetime - datetime.timedelta(days=n)
黒い丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o', c='k')
文字列を置き換える	s.replace(sub, newsub)
丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o')
変数をシアンで表示する	print(f'\033[36m{value}\033[0m')
折れ線グラフの色をシーグリーンに指定する	plt.plot(データ列, データ列2, color='seagreen')
折れ線グラフの色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
非空白が文字列中に含まれる	any(not c.isspace() for c in s)
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
マッピングのキーの一覧	aDict.keys()
データフレームを使う	import pandas as pd
ヒストグラムの線のスタイルを破線に設定する	plt.hist(データ列, linestyle='dashed')
色差別ない色でリストについての柱状図を描画する	plt.hist(xdata, color='colorblind')
二つの集合のユニオンを計算する	aSet.union(aSet2)
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
データフレームのカラムのNaNをモードに設定する	df[col].fillna(df[col].mode().iloc[0])
実行結果の出力を改行せず行う	print(value, end='')
異なる列をキーにして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームの列がxより大きいデータを抽出する	df[df[column] > x]
折れ線グラフを描画して、その色をミディアムスプリンググリーンにセットする	plt.plot(データ列, データ列2, color='mediumspringgreen')
データ列を折れ線グラフに描画してマーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
タブ区切りのファイルからSJISでCSVファイルを読む	pd.read_csv(filename, encoding='shift_jis')
リストと配列についての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
重なりを見やすくデータ列とリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
タイムスタンプデータが水曜日か調べる	aDatetime.weekday() == 2
線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
カラムの中にいくつ文字列が含まれるか求める	ds.isin([value]).sum()
プログラムを強制的に停止する	sys.exit()
文字列はタイトルケースか調べる	s.istitle()
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
nからn2までの整数リスト	list(range(n, n2+1))
カウンタ同士で積集合	aCounter & aCounter2
２つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
緑色のクロスマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
線グラフを描画して、その色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
nをn2だけ小さくする	n -= n2
リストと配列の明るいを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
辞書をJSONフォーマットのインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
リストと数列について黒色の明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
リストとリストでパステル調のを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
実数のn乗して浮動小数点数による余りを求める	pow(x, n, y)
列の各データ値の出現数	ds.value_counts()
明るい色の折れ線グラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
折れ線グラフに緑色の菱形印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
＜オプション＞ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
スタック中の要素のインデックス	deq.index(element)
リストとリストの散布図を描いて、三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='^', c=rgb)
線グラフを描画して、その色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
折れ線グラフを描画してその色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
カラーコードの大バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='X', c=rgb)
セットから何でもいいからひとつ取り出す	aSet.pop()
リストとリストの散布図を描画して、マーカーを右三角に指定する	plt.plot(xdata, ydata, marker='>')
日付データの日を求める	aDate.day
文字列を水色で表示する	print(f'\033[36m{value}\033[0m')
＜オプション＞ポイントマーカーを用いる	marker = '.'
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
最初の部分文字列を用いて文字列を二分する	s.partition(sub)
文字列の末尾が部分文字列か	s.endswith(sub)
キューは空でないか調べる	len(deq) != 0
＜オプション＞ベージュ色を使う	color = 'beige'
濃い色を用いて散布図を描画する	plt.plot(xdata, ydata, c='deep')
２つのデータフレームを縦方向に連結する	pd.concat([df, df2])
変数について数式の積分を求める	sympy.integrate(e, z)
xを印字できる文字列にする	ascii(x)
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームから一行をランダムに抽出する	df.sample()
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
リストとリストの青色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
データ列を折れ線グラフに描画して、マーカーを三角印にする	plt.plot(データ列, データ列2, marker='^')
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
列にイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
オブジェクトが文字列クラスか調べる	isinstance(obj, str)
実行結果を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
折れ線グラフを描画して、その色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
折れ線グラフに緑色の菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
ヒストグラムを描画して色をミディアムターコイズにする	plt.hist(データ列, color='mediumturquoise')
プラットフォームのコードポイントの最大値	sys.maxunicode
＜オプション＞タブを区切りで使う	sep = '\t'
データフレームを千の位で丸めて整数型にする	df.round(-3).astype(int)
ヒストグラムを描画して、その色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
ヒストグラムを描画して、その色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
オプションで、標準エラーを出力にする	file = sys.stderr
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
＜オプション＞色を青に指定する	color = 'blue'
データフレームの値が欠損値か調べる	df.isna()
色差別ないグラフの色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストを番号付けする	enumerate(aList)
カウンタの項目数	len(aCounter)
イテラブルと配列についての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
折れ線グラフを描画してその色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o')
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
リストとデータ列についての散布図を明るい色で描く	plt.plot(xdata, ydata, c='bright')
＜オプション＞右三角マーカーを加える	marker = '>'
データ列のユニークな値の個数	ds.nunique()
黒いクロス印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
ヒストグラムを描画してその色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
リストとリストとしてパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ヒストグラムを描画してその色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
プロットの色を濃くする	sns.set(pallete='deep')
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
前もって大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
組のn番目以降の部分を取り出す	aTuple[n:]
折れ線グラフの色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
リストと配列の折れ線をカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
＜オプション＞グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
全八進数字	string.octdigits
アルファalphaの折れ線グラフをプロットする	plt.plot(xdata, ydata, alpha=alpha)
ビン数nのヒストグラムを描く	plt.hist(データ列, bins=n)
全要素を初期値で初期化された配列	np.full(要素数, 初期値, dtype=np.int)
縦棒グラフを積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
カウンタ同士で和集合を計算する	aCounter | aCounter2
オレンジレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orangered')
集合からエラーなく値を取り除く	aSet.discard(element)
nをn2だけ右シフトする	n >> n2
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
ヒストグラムを描画して、その色をフクシアにする	plt.hist(データ列, color='fuchsia')
ヒストグラムを描画して、その色をグレーに変更する	plt.hist(データ列, color='grey')
折れ線グラフを描画してその色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
日付データをISO形式の文字列に変換する	aDate.isoformat()
データフレームからカテゴリデータのカラムだけ抽出する	df.select_dtypes('object')
リストをリストを境界値として分割する	pd.cut(aList, aList)
＜オプション＞グラフの色をシーグリーンに指定する	color = 'seagreen'
ヒストグラムの色をデピンクにセットする	plt.hist(データ列, color='deeppink')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
データフレームのリストカラムの中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
折れ線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームのそれぞれのグループごとの個数を求める	df.groupby(column).count()
2つのオブジェクトは等しいかどうか確認する	obj == obj2
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
＜オプション＞未入力値も含める	dropna = True
折れ線グラフの印を▽にする	plt.plot(データ列, データ列2, marker='v')
配列をビン数nで分割する	pd.cut(aArray, n)
＜オプション＞グラフの色をパウダーブルーに指定する	color = 'powderblue'
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
折れ線グラフを描画して、色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフの左三角マーカーのサイズをnに変更する	plt.plot(データ列, データ列2, marker='<', markersize=n)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumturquoise')
ライトシアンにヒストグラムの色を指定する	plt.hist(データ列, color='lightcyan')
折れ線グラフのポイント印を黄色くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
散布図に赤いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='r')
濃い色を使って散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
カウンタを高頻出方から列挙する	aCounter.most_common()
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
ベクトルの行ごとの最大値	np.max(aArray, axis=1)
暗い赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
リストとリストについての散布図にカラーコードの四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s', c=rgb)
浮動小数点数が負の数か	x < 0
データフレームから最後の列を除く	df[df.columns[:-1]]
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
nがn2以下またはn3以上か判定する	n <= n2 or n >= n3
線グラフを描画して、色を赤に指定する	plt.plot(データ列, データ列2, color='red')
折れ線グラフを描画して、色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
ふたつの集合の差集合	aSet.difference(aSet2)
色差別ないの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
折れ線グラフの星印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
散布図を赤いダイアモンドマーカーを用いて描画する	plt.plot(xdata, ydata, marker='D', c='r')
カウンタのユニークな項目をリストとして得る	list(aCounter)
アルファベットを全部使う	string.ascii_letters
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
辞書に辞書の項目を更新する	aDict.update(aDict2)
散布図にポイントマーカーを用いる	plt.plot(xdata, ydata, marker='.')
文字列がASCII文字か調べる	s.isascii()
赤い△マーカーをリストとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='r')
文字列の右側が部分文字列	s.endswith(sub)
スカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='skyblue')
データフレームのリスト列の中に文字列と文字列がいくつ存在するか求める	df[aList].isin([value, value2]).sum()
マッピングをコピーする	dict(aDict)
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
文字列が数値	s.isnumeric()
文字列を青色で表示する	print(f'\033[34m{value}\033[0m')
アクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='aquamarine')
ヒストグラムを描画して、その色をパールゴールデンロッドにする	plt.hist(データ列, color='palegoldenrod')
実数とyのノルム	math.hypot(x, y)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
折れ線グラフを描画して、その色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
リストとリストのカラーコードのパステル調のを描く	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
破線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
＜オプション＞フローラルホワイト色を用いる	color = 'floralwhite'
データフレームを各カラム毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
タプルを引数として展開してプリントする	print(*aTuple)
＜オプション＞グラフの色を紺に設定する	color = 'darkblue'
クラスのサブ型か確認する	issubclass(サブクラス, クラス)
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
＜オプション＞グラフの色をホワイトスモークに変更する	color = 'whitesmoke'
日付時刻データの時刻	aDatetime.time()
マッピングから項目名の値かもしくは要素を得る	aDict.get(key, element)
数値を黒色にする	f'\033[30m{value}\033[0m'
ヒストグラムを一点鎖線を用いて描画する	plt.hist(データ列, linestyle='dashbot')
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='>', c='k')
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
＜オプション＞グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
文字列が部分文字列で終わるか調べる	s.endswith(sub)
リストとリストの色差別ないグラフを描画して、その色を青くする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
データフレームをエクセルファイルファイルを用いてJSONLファイルに書き込む	df.to_excel(filename)
折れ線グラフに緑色の右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
暗い色の折れ線グラフを描いて、線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='dark')
折れ線グラフを描画して、その色をパウダーブルーに指定する	plt.plot(データ列, データ列2, color='powderblue')
文字列の中のケースを無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの四角マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='s', markersize=n)
データフレームの列と列に重複があれば消す	df.drop_duplicates(subset=[column, column2])
散布図にパステル調の色のマーカーを用いる	plt.plot(xdata, ydata, c='pastel')
集合の補集合	aSet.difference(aSet2)
本日のローカルな日付時刻	datetime.datetime.today()
配列間の各要素の最小公倍数を求める	np.lcm(aArray, aArray2)
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
折れ線グラフの色をマルーンにする	plt.plot(データ列, データ列2, color='maroon')
データフレームの列の文字列長を列として見る	df[col].str.len()
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
リストとデータ列についての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
赤い丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o', c='r')
リストが空か	len(aList) == 0
カウンタの正の数のみ残す	+aCounter
折れ線グラフに黄色いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
散布図に赤色の四角マーカーを用いる	plt.plot(xdata, ydata, marker='s', c='r')
折れ線グラフの色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
双方向キューの先頭に要素を付け加える	deq.appendleft(element)
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
線グラフを描画してその色をスプリンググリーンに指定する	plt.plot(データ列, データ列2, color='springgreen')
データフレームの値は欠損値	df.isna()
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
グラフの色を暗くする	sns.set(pallete='dark')
ファイルを閉じる	f.close()
＜オプション＞白色を使う	color = 'white'
＜オプション＞大バツマーカーを使用する	marker = 'X'
文字列を小文字にする	s.casefold()
データフレームを2つの列で整列し、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
ポイントマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='.')
黒色の菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
データフレームを昇順に列を用いて破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
赤い色差別ないの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
行列の累積積を求める	np.cumprod(aArray)
グラフの用途をスライドに設定する	sns.set(context='talk')
データフレームのカラムの中央値	df[col].median()
双方向キューの右側に要素を追加する	deq.append(element)
＜オプション＞バッファリングのサイズを設定する	buffering = 4096
書式を引数としてargsをフォーマットする	formatText.format(*args)
データフレームのリストカラムの未入力値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
破壊的に'A'列によってデータフレームを昇順にソートする	df.sort_values(by='A', ascending=True, inplace=True)
真上位集合か調べる	aSet > aSet2
データフレームを列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
nがセットのどれかかどうか調べる	n in aSet
折れ線グラフを描画して、色を白くする	plt.plot(データ列, データ列2, color='w')
リストのn番目からn2番目までを得る	aList[n:n2]
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
文字列中にひとつでも非アルファベットが含まれるか確認する	any(not c.isalpha() for c in s)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
ヒストグラムを描画してその色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
行列の列ごとの合計値	np.sum(aArray, axis=0)
ヒストグラムを描き、ビンをnに設定する	plt.hist(データ列, bins=n)
リストとリストについて色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
＜オプション＞グラフの色をモカシンに指定する	color = 'moccasin'
散布図に赤いクロスマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
変数について数式のインテグラルを行う	sympy.integrate(e, z)
データフレームを表示するとき折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
＜オプション＞スラグレーに色を設定する	color = 'slategrey'
オブジェクトのバイトサイズを確認する	sys.getsizeof(obj)
両端キューの先頭	deq[0]
グラフの描画で暗いカラーパレットを用いる	sns.set(pallete='dark')
線グラフを描画してその色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
配列と数列についてカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
データ列の記述統計量	ds.describe()
＜オプション＞アンティークホワイトにグラフの色を設定する	color = 'antiquewhite'
黄色い四角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
＜オプション＞シルバー色を用いる	color = 'silver'
データ列をn個にビニングし、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列を折れ線グラフに描画して、マーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
明るいの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
データフレームを'A'列の値にグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
イテラブルと数列を使って色差別ないを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
オプションで、標準出力を出力先にする	file = sys.stdout
データフレームのそれぞれのグループ毎の最大値	df.groupby(column).max()
青色の色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームのリストカラムの文字列をNaNにする	df[aList].replace(s, np.nan)
コマンドフラグの状態	sys.flags
カラムの欠損値を最小値で補う	ds.fillna(ds.min())
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
グラフで使用するフォントを日本語に設定する	sns.set(font='IPAexGothic')
初期値で全要素を初期化された行列	np.full(要素数, 初期値, dtype=np.int)
列を用いてでデータフレームを大きい順にソートする	df.sort_values(by=column, ascending=False)
文字列を空白で区切る	s.split()
折れ線グラフに丸マーカーを用いる	plt.plot(データ列, データ列2, marker='o')
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
＜オプション＞ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
＜オプション＞色をマルーンに設定する	color = 'maroon'
双方向キューをクリアする	deq.clear()
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
タプルを展開してプリントする	print(*aTuple)
オプションで標準出力を出力にする	file = sys.stdout
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
折れ線グラフを描画してその色をマゼンタに指定する	plt.plot(データ列, データ列2, color='magenta')
イテラブルとリストでパステル調のの折れ線グラフをプロットして、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
実数を万の位で丸める	round(x, -4)
バイナリ書き込みモードを用いてファイルをオープンする]	open(filepath, mode='wb')
行列の行ごとの最小値	np.min(aArray, axis=1)
散布図を赤い左三角マーカーを使って描画する	plt.plot(xdata, ydata, marker='<', c='r')
データフレームのリスト列の中にある文字列の合計を数える	df[aList].isin([value]).sum()
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
オブジェクトがリストかタプル	isinstance(obj, (list)
集合に列を追加更新する	aSet.update(iterable)
線グラフを描画して、その色をドジャーブルーに指定する	plt.plot(データ列, データ列2, color='dodgerblue')
折れ線グラフの△マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
データフレームの列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
リストと数列の散布図に黒色の大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
折れ線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
データフレームの指定された４つの列を選ぶ	df[[column, column2, column3, column4]]
Pandasで、データ列のUNIX時間から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列の中のNaNの合計を数える	ds.isna().sum()
明るい色で散布図を描画する	plt.plot(xdata, ydata, c='bright')
組の要素を小さい方からソートする	sorted(aTuple, reverse=True)
データフレームの列の名前を列挙する	df.columns
＜オプション＞チョコレート色を使用する	color = 'chocolate'
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
nがn2で割り切れるかどうか調べる	n % n2 == 0
エラーなく辞書からキーの値を得る	aDict.get(key, None)
スピアマン順位相関係数でデータフレームのリスト列の相関行列を求める	df[aList].corr(method='spearman')
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列, データ列2, color='seagreen')
データフレームのNaNをモードで埋める	df.fillna(df.mode().iloc[0])
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
リストとリストについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
黒いパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ヒストグラムを描画してその色をオレンジに設定する	plt.hist(データ列, color='orange')
＜オプション＞コーンズシルク色を使う	color = 'cornsilk'
折れ線グラフを描画して、その色を茶色に指定する	plt.plot(データ列, データ列2, color='brown')
データフレームの列がxより大きくx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列, データ列2, color='blanchedalmond')
文字列の先頭から部分文字列を除く	s.lstrip(sub)
データフレームのn行目を削除して、入れ替える	df.drop(n, axis=0, inplace=True)
文字列の左端から空白を取り除く	s.lstrip(' ')
線グラフの色をコーンズシルクに変更する	plt.plot(データ列, データ列2, color='cornsilk')
折れ線グラフに黄色い△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
データフレームのリスト列の空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
データ列の分散	ds.var()
リストの各要素を双方向キューの右側に付け加える	deq.extend(iterable)
既存のファイルパスを追加できるようにEUCを用いてオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフを描画して、その色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
赤い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
＜オプション＞グラフの色をライムにセットする	color = 'lime'
データ列とリストの散布図を描いて四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
最小値でデータフレームのリストカラムの未入力値を置き換える	df[aList].fillna(df[aList].min())
小数点数の逆双曲線正接	math.atanh(x)
nが一桁の数か調べる	-9 <= n <= 9
＜オプション＞グラフの色をミスティローズに変更する	color = 'mistyrose'
値は両端キューの中にあるか調べる	element in deq
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
文字列で区切って2つの数値を表示する	print(value, value2, sep=s)
リストとイテラブルをつなぐ	itertools.chain(iterable, iterable2)
ヒストグラムを描画して、色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
要素がセットのメンバーでないか調べる	element not in aSet
タプルの平均	sum(aTuple)/len(aTuple)
xの小数点以下'1'桁まで表示する	print(':.1f'.format(x))
ヒストグラムを描画して、色をプラムに設定する	plt.hist(データ列, color='plum')
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
表データを二つの列を用いてで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
＜オプション＞シャルトリューズを使う	color = 'chartreuse'
＜オプション＞ダークターコイズを使用する	color = 'darkturquoise'
文字列全体がパターンに複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
イテラブルから配列を作る	np.array(iterable)
列の値でデータフレームをNaNを含めて集約する	df.groupby(column, dropna=False)
ファイルからストリームを開いて]、fileとする	file = open(filepath)
リストとデータ列のカラーコードの暗いを描く	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフの色を貝殻にする	plt.plot(データ列, データ列2, color='seashell')
リストと数列のカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データフレームの指定した列をリストにする	df[column].values.tolist()
文字列をコロンによって区切り、、列挙する	s.split(':')
標準入力を用いる	sys.stdin
データフレームのリストカラムのpercentパーセンタイルを計算する	df[aList].quantile(percent/100)
線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='mediumvioletred')
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
散布図をカラーコードのバツマーカーで描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
▽マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v')
データフレームの列の値がxより小さい行を抽出する	df[df[column] < x]
黒い左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='k')
明るいの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
＜オプション＞スラグレー色を用いる	color = 'slategray'
数列とリストの散布図に左三角マーカーを描く	plt.plot(xdata, ydata, marker='<')
データフレームからランダムに重複ありでn行をサンプリングする	df.sample(n, replace=True)
リストとリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
空の辞書	{}
黒色の濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
リストを淡い色のヒストグラムで描画する	plt.hist(xdata, color='muted')
折れ線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
暗い色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='dark')
整数を浮動小数点数にかける	x * y
リストの最後のn要素を取り除く	aList[:-n]
日付データが土曜日	aDate.weekday() == 5
データフレームの中のカラムを等量でn個にビニングする	pd.qcut(df[col], n)
リストとリストについて破線グラフを描画して、その色を濃いにする	plt.plot(xdata, ydata, linestyle='dash', color='deep')
データ列の日を求める	ds.dt.day
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ファイル全体を行分割して読み込む	f.readlines()
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
暗いの折れ線の色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データフレームを各列毎に分類し、、列の標準偏差を求める	df.groupby(column)[column2].std()
データフレームのstart行目からend行目までを抽出する	df[start:end]
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
＜オプション＞グラフの色を深紅に設定する	color = 'crimson'
菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
データ列の曜日名	ds.dt.weekday_name
ヒストグラムでカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
リストとリストの青色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
淡いグラフの色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
データフレームの列がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
＜オプション＞グラフの色をカーキに設定する	color = 'khaki'
変数を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
正規分布で疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
プロットに凡例を文字列と文字列と表示する	plt.legend([s, s2])
折れ線グラフに黄色いバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
折れ線グラフを描画して、色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategray')
データフレームのリスト列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[aList].corr())
ヒストグラムを描画して、その色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
リストと配列で暗いの折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データフレームの中に日付データと文字列があるか調べる	df.isin([value, value2])
リストとデータ列について散布図をプロットしてマーカーの色を濃いにセットする	plt.plot(xdata, ydata, c='deep')
カウンタの要素を増やす	aCounter[element] += 1
リストとして列を選ぶ	df[column].values.tolist()
破線にヒストグラムの線のスタイルを指定する	plt.hist(データ列, linestyle='dashed')
＜オプション＞ヘッダを連番に設定する	header = None
データフレームのリスト列の相関行列スピアマンを用いて	df[aList].corr(method='spearman')
データフレームを列でグループ化し要約統計量を求める	df.groupby(column).describe()
実行を適切に終了する	sys.exit(0)
線グラフの色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
データフレームを各列と列の組み合わせ毎にグループ化して個数を求める	df.groupby([column, column2], as_index=False).count()
書き込み用にファイルをEUCで開く]	open(filepath, mode='w', encoding='euc_jp')
折れ線グラフの色をアクアに指定する	plt.plot(データ列, データ列2, color='aqua')
リストとリストについて散布図を描いて、マーカーを大バツに指定する	plt.plot(xdata, ydata, marker='X')
線幅nの△マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
空列	[]
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
折れ線グラフの色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
文字列をカンマで分割して列挙する	s.split(',')
変数を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
ヒストグラムを描画して色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
グラフに凡例を付ける	plt.legend()
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightseagreen')
エクセルファイルファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
既存のファイルをSJISを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
折れ線グラフのクロスマーカーを黒くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v')
ヒストグラムを描画して色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
日付データにn分分加える	aDate + datetime.timedelta(minutes=n)
本日の日	datetime.datetime.today().day
両端キューをリストに変換する	list(deq)
タプルにキーが存在するか	key not in aDict
小数点数の余弦	math.cos(x)
文字列がタイトルケースか調べる	s.istitle()
パステル調の色をプロットの描画で使う	sns.set(pallete='pastel')
ファイルパスをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
ヒストグラムを描画して色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
x軸のラベルをuntitledに指定する	plt.xlabel(untitled)
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
文字列が全てアルファベットか判定する	s.isalpha()
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
＜オプション＞シアン色を用いる	color = 'cyan'
グラフのカラーパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
ヒストグラムの色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
タプルの項目名を要素に設定する	aDict[key] = element
折れ線グラフを描画してその色をミディアムアクアマリンにする	plt.plot(データ列, データ列2, color='mediumaquamarine')
データフレームの中の列を等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
黒いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
リストを中央値でビン分割する	pd.qcut(aList, 2)
リストとイテラブルとして淡いグラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
＜オプション＞グラフの色をスカイブルーに変更する	color = 'skyblue'
ヒストグラムを描画して、その色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
数列とリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
折れ線グラフを描画して、色をゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームの列のNaNを直前の値に設定する	df[col].fillna(method='ffill')
出力ストリーム全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
折れ線グラフの下三角印を黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
ヒストグラムを描画して、その色をアイボリーに設定する	plt.hist(データ列, color='ivory')
データフレームを'A'列の値によってグループ化し、要約統計量を算出する	df.groupby('A').describe()
実行結果を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
ビン数nとしてリストをビン分割する	pd.cut(aList, n)
＜オプション＞バツマーカーを描画する	marker = 'x'
柱状図を描画し、、半透明ににする	plt.hist(データ列, alpha=0.5)
カラーコードのバツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c=rgb)
折れ線グラフの色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
1行標準入力から読む	sys.stdin.readline()
データフレームの列を最初のカテゴリーを除外してダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
値が集合に含まれないか調べる	element not in aSet
一番左側の列をデータフレームから除く	df[df.columns[1:]]
太字でリストを表示する	print(f'\033[1m{value}\033[0m')
文字列がパターンにマッチさせる	re.match(pattern, s)
折れ線グラフの色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
ヒストグラムを描画してその色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
オブジェクトは浮動小数点数クラスか	isinstance(obj, float)
データ列の未入力値をxで埋める	ds.fillna(x)
＜オプション＞ミディアムバイオレットレッドに色を変更する	color = 'mediumvioletred'
折れ線グラフの▲印を青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
データ列の文字列長を列として見る	ds.str.len()
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
線グラフを描画してその色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
ヒストグラムを描画して、その色をブラックに設定する	plt.hist(データ列, color='black')
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
リストを昇順に並べる	sorted(aList, reverse=False)
リストとリストの折れ線を描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
＜オプション＞パレットトルコイズ色を使う	color = 'paleturquoise'
＜オプション＞n番目のカラムをインデックスに設定する	index_col = n
数列と配列についての散布図にカラーコードの下三角マーカーを描く	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフのバツ印を青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
オブジェクトのプロパティの値を求める	getattr(obj, プロパティ名)
数値をシアンで出力する	print(f'\033[36m{value}\033[0m')
データフレームのリスト列のNaNを前の行の値に設定する	df[aList].fillna(method='ffill')
辞書をカウンタに変換する	collections.Counter(aDict)
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
イテラブルと配列の散布図を暗い色を用いて描画する	plt.plot(xdata, ydata, c='dark')
データフレームとデータフレームの列を横方向につなぐ	pd.concat([df, ds], axis=1)
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
データフレームを'A'列と'B'列によってで降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
データフレームを表示するとき、ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
実数が整数か調べる	x.is_integer()
折れ線グラフの四角印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
ヒストグラムを描画して、色を茶色に設定する	plt.hist(データ列, color='brown')
＜オプション＞グラフの色を淡いピンク色に設定する	color = 'lightpink'
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
ヒストグラムを描画して、その色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
データ列とリストについての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
文字列のn番目	s[n]
ヒストグラムを描画してその色をホワイトスモークにする	plt.hist(データ列, color='whitesmoke')
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフのポイント印を赤くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
カラーコードのポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
表データの行がnの行を取り出す	df.loc[n]
データフレームから最初の列を除く	df[df.columns[1:]]
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
インデックスを付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, index=None)
＜オプション＞グラフの色をインディアンレッドに指定する	color = 'indianred'
データ列とリストについてリストの値に応じて散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
ヒストグラムの色をダークオリーブグリーンにする	plt.hist(データ列, color='darkolivegreen')
カウンタの上位を列挙する	aCounter.most_common(k)
ヒストグラムを描画して、その色をラベンダーに設定する	plt.hist(データ列, color='lavender')
リストと数列で淡いグラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
＜オプション＞ダークグレーに色を設定する	color = 'darkgrey'
ヒストグラムを描画してその色をフローラルホワイトにセットする	plt.hist(データ列, color='floralwhite')
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
散布図にカラーコードの丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c=rgb)
カウンタから辞書を引く	aCounter.subtract(aDict)
配列を元に全要素が1の配列	np.ones_like(aArray)
線グラフを描画して、色をコーラルに指定する	plt.plot(データ列, データ列2, color='coral')
＜オプション＞四角印を使う	marker = 's'
ファイル名がテキストファイルか確認する	filename.endswith('.txt')
文字列の最初を使う	s[0]
長さnのリスト	[0] * n
整数型の全要素を０で初期化された行列	np.zeros(行数, 列数, dtype=np.int)
ファイルをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
＜オプション＞ペルー色を使う	color = 'peru'
データフレームのインデックスの名前のリスト	df.index
文字列中に部分文字列が存在する	sub in s
散布図に四角マーカーを使う	plt.plot(xdata, ydata, marker='s')
二次元リストの転置行列を算出する	[list(x) for x in list(zip(*aList))]
＜オプション＞ダイアモンド印を使う	marker = 'D'
8進文字列を整数にする	int(s, 8)
折れ線グラフを描画して、その色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
イテラブルとリストの濃いグラフを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
散布図を大バツマーカーでプロットする	plt.plot(xdata, ydata, marker='X')
＜オプション＞グラフの色をオールドレースに設定する	color = 'oldlace'
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
データフレームのリストカラムの中に含まれる日付データの数を数える	df[aList].isin([value]).sum()
Pandasで、文字列を書式fmtで日付データに変換する	pd.to_datetime(s, format=fmt)
JSONファイルファイル名がかどうか調べる	filename.endswith('.json')
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
プロットの色を全般的に淡くする	sns.set(pallete='muted')
折れ線グラフの色を黄緑に設定する	plt.plot(データ列, データ列2, color='chartreuse')
文字列が全て十進数字	s.isdecimal()
ヒストグラムの色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
データフレームを'A'列の値によって集約し、、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
データフレームの列の値を正規表現patternでreplにまとめて変更する	df[col].replace(pattern, repl, regex=True)
折れ線グラフの色をコーラルに指定する	plt.plot(データ列, データ列2, color='coral')
タプルのキーとその値をペアとして取り出す	aDict.items()
サインの逆数	math.asin(x)
昇順にリストの要素をソートする	sorted(aList, reverse=False)
リストと数列について破線グラフを描画して、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
＜オプション＞ゲインズボロ色を使う	color = 'gainsboro'
入力ストリームからn文字、読み込む	f.read(n)
ファイルパスが存在する	os.path.exists(filepath)
マップの値として要素が含まれている	element in aDict.values()
ヒストグラムの色をミディアムバイオレットレッドに変更する	plt.hist(データ列, color='mediumvioletred')
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
ヒストグラムを描画して、その色をターコイズに設定する	plt.hist(データ列, color='turquoise')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
リストから行列を作る	np.array(aList)
実数の平方根	math.sqrt(x)
一番右の列をデータフレームから消す	df[df.columns[:-1]]
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
中央値でデータフレームの欠損値を置換する	df.fillna(df.median())
エポック秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームを二つの列によってで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
マッピングのキーとその項目をペアとして取り出す	aDict.items()
ヒストグラムを描画して、その色をダークバイオレットにする	plt.hist(データ列, color='darkviolet')
nの3乗を求める	n ** 3
複数のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
折れ線グラフの色をダークレッドに変更する	plt.plot(データ列, データ列2, color='darkred')
データフレームのリスト列の中にと日付データがいくつ含まれるか数える	df[aList].isin([value, value2]).sum()
＜オプション＞丸マーカーを描画する	marker = 'o'
＜オプション＞ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
データフレームの中の列をビン数nを用いてビン分割する	pd.cut(df[col], n)
標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
＜オプション＞色をブルーバイオレットに設定する	color = 'blueviolet'
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
NaNも加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
＜オプション＞デピンクを使う	color = 'deeppink'
リストの最後	aList[-1]
凡例をグラフに入れる	plt.legend()
データフレームのカラムを百の位で丸める	df[col].round(-2)
今日の年数を使う	datetime.datetime.today().year
折れ線グラフの星印の大きさをnに指定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
ヒストグラムを描画してその色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
文字列が文字列より辞書順で後か調べる	s > s2
文字列中の部分文字列を新しい文字列に全部置換する	s.replace(sub, newsub)
＜オプション＞シーグリーン色を使う	color = 'seagreen'
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
一点鎖線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
折れ線グラフを描画して、その色を青緑に指定する	plt.plot(データ列, データ列2, color='teal')
データフレームから指定された列を取り出す	df[[column]]
線グラフを描画してその色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
浮動小数点数を十六進文字列にする	x.hex()
numpyを使用する	import numpy as np
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
nはn2と等しい	n == n2
ヒストグラムを描画して、その色を青緑に設定する	plt.hist(データ列, color='teal')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
あらかじめ正規表現をコンパイルする	re.compile(pattern)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
データフレームを列によって並べ、NaNを先頭にする	df.sort_values(by=column, na_position='first')
文字列にシーケンスを変換して、'改行で連結する	'\n'.join(map(str, iterable))
＜オプション＞色をアイボリーに設定する	color = 'ivory'
変数を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
折れ線グラフを描画して、その色をティールに変更する	plt.plot(データ列, データ列2, color='teal')
＜オプション＞スプリンググリーンにグラフの色を設定する	color = 'springgreen'
オブジェクトは論理値クラスのインスタンスか調べる	isinstance(obj, bool)
配列の最小値	np.min(aArray)
＜オプション＞印を▼に変更する	marker = 'v'
折れ線グラフを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
プログラムのファイルの名前を知る	sys.argv[0]
折れ線グラフを描画して、色をミディアムシアグリーンに変更する	plt.plot(データ列, データ列2, color='mediumseagreen')
＜オプション＞ブラウンを使う	color = 'brown'
イテラブルから双方向キューを生成する	collections.deque(iterable)
イテラブルを累積した列を得る	itertools.accumulate(iterable, operator.mul)
＜オプション＞レベッカパープルに色を指定する	color = 'rebeccapurple'
カウンタ同士で交わり演算する	aCounter & aCounter2
暗いグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
実数の小数部	math.modf(x)[0]
ヒストグラムを描画して、その色を暗い赤に設定する	plt.hist(データ列, color='darkred')
BOM付きで追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフを描画して、その色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
nが正の整数	n > 0
データフレームのカラムのどの値が頻出か調べる	df[col].mode()
折れ線グラフを描画して、その色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
暗いグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='dark', color='k')
＜オプション＞ライトコーラル色を用いる	color = 'lightcoral'
文字列を部分文字列で区切り、、文字列リストに変換する	s.split(sub)
折れ線グラフの印を右三角印にする	plt.plot(データ列, データ列2, marker='>')
線グラフを描画して、色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
行列の転置行列	aArray.T
カラーコードの左三角マーカーを配列とリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='<', c=rgb)
二つのデータフレームを結合する	pd.merge(df, df2)
空白で最後から文字列を分割する	s.rsplit()
ヒストグラムを描画してその色をラベンダーに設定する	plt.hist(データ列, color='lavender')
文字列の示すエンコーディングでファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
リストとリストの黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
シーケンスを累積する	itertools.accumulate(iterable, operator.mul)
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか確認する	s.find(sub, start, end) == -1
文字列の最後から部分文字列を探す	s.rfind(sub)
イテラブルを色差別ない色のヒストグラムで描画する	plt.hist(xdata, color='colorblind')
表を配列にする	df.values
タプルの末尾を取り除く	aTuple[:-1]
明るいグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞グラフの色をスチールブルーに変更する	color = 'steelblue'
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
項目名が辞書にあるか調べる	key not in aDict
明るいグラフを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', color='r')
改行せず二つの変数をプリントする	print(value, value2, end='')
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
折れ線グラフにポイントマーカーを使用する	plt.plot(データ列, データ列2, marker='.')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
カラーコードのダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフの色を紺碧に変更する	plt.plot(データ列, データ列2, color='azure')
線グラフの色をカーキに変更する	plt.plot(データ列, データ列2, color='khaki')
線グラフの色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
列を累積したイテラブルを求める	itertools.accumulate(iterable, operator.mul)
明るいグラフの色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
＜オプション＞色を白にセットする	color = 'white'
日付時刻データの日付を見る	aDatetime.date()
折れ線グラフを描画して、その色をアンティークホワイトに変更する	plt.plot(データ列, データ列2, color='antiquewhite')
＜オプション＞グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
xが1もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
＜オプション＞グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ピアソン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
数値を黄色で出力する	print(f'\033[33m{value}\033[0m')
ヒストグラムを描画して、その色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフを描画して、その色を暗い赤にする	plt.plot(データ列, データ列2, color='darkred')
ファイル全体をリストにする	[s.strip() for s in f.readlines()]
データフレームを列を用いて降順に破壊的に整列する	df.sort_values(by=column, ascending=False, inplace=True)
変数について数式を積分する	sympy.integrate(e, z)
配列をリストから作る	np.array(aList)
ValueMapでデータフレームの列の値を一度に置き換える	df[col].replace(ValueMap)
ファイルをSJISを用いて追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
実数の逆双曲線正接	math.atanh(x)
列を累加した列	itertools.accumulate(iterable)
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
列'A'と列'B'をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
タプル内の要素が少なくとも一つ真	any(aTuple)
折れ線グラフのスタイルを点線に指定する	plt.plot(データ列, データ列2, linestyle='dotted')
左三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='<')
実数を切り下げる	math.floor(x)
列と列の重複を取り除く	df.drop_duplicates(subset=[column, column2])
データフレームの列の中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
＜オプション＞アリスブルー色を使う	color = 'aliceblue'
アイリスのデータセットをロードする	sns.load_dataset('iris')
二つのデータフレームを列'A'と列'B'をキーにして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
黒色の大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X', c='k')
折れ線グラフの三角印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
スクリプトファイルの絶対パス	os.path.abspath(__file__)
文字列の開始位置以降が部分文字列で始まる	s.startswith(sub, start)
データフレームを'A'列によってで降順に並べ直す	df.sort_values(by='A', ascending=False)
ヒストグラムを描画してその色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
今日の月数	datetime.datetime.today().month
リストの先頭	aList[0]
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
データフレームの中に文字列と文字列が含まれるか調べる	df.isin([value, value2])
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
＜オプション＞グラフの色を青紫に設定する	color = 'violet'
折れ線グラフの色をライトサーモンに変更する	plt.plot(データ列, データ列2, color='lightsalmon')
二つの文字列をプリントする	print(value, value2)
第二引数のファイルの名前	sys.argv[1]
＜オプション＞ダークマゼンタにグラフの色をする	color = 'darkmagenta'
実数を数から減算する	x - y
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列, データ列2, marker='D')
＜オプション＞整数型を使用する	dtype = np.int
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
＜オプション＞ゴールドに色を設定する	color = 'gold'
逆行列	np.linalg.inv(aArray)
＜オプション＞ブラック色を用いる	color = 'black'
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
ヒストグラムを描画してその色をアクアに指定する	plt.hist(データ列, color='aqua')
文字列内にひとつでも空白が含まれるか確認する	any(c.isspace() for c in s)
文字列が全て空白からなるか調べる	s.isspace()
配列と配列の黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
＜オプション＞グラフの色をミディアムブルーにセットする	color = 'mediumblue'
ゼロ埋めした整数型の配列	np.zeros(要素数, dtype=np.int)
環境がマックか調べる	sys.platform.startswith('darwin')
nまでの偶整数列を得る	list(range(2, n, 2))
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
リストを下線付き化する	f'\033[4m{value}\033[0m'
表データの先頭n行	df.head(n)
散布図に黒いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='k')
デックに要素をエンキューする	deq.appendleft(element)
線グラフを描画して色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
折れ線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
列の値で表をグループ化して、各グループごとの件数を知る	df.groupby(column).size()
ヒストグラムを描画して、その色を紺碧にセットする	plt.hist(データ列, color='azure')
文字列を最初の部分文字列で分割したときの最初の文字列	s.partition(sub)[0]
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
複数の列によって昇順にデータフレームを整列して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
既存のファイルを追加できるようにSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
キーが辞書上で未定義	key not in aDict
＜オプション＞ピンク色を使う	color = 'pink'
リストと配列の黒い色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
小数点数の二進対数を算出する	math.log2(x)
折れ線グラフの色をバリーウッドに変更する	plt.plot(データ列, データ列2, color='burlywood')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
リスト自身の長さnの順列を得る	itertools.permutations(iterable, n)
集合が空か調べる	len(aSet) == 0
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
データフレームを列を用いてソートして、更新する	df.sort_values(by=column, inplace=True)
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
＜オプション＞タン色を使う	color = 'tan'
xとyの商と余りを同時に算出する	divmod(x, y)
文字列を正規表現で区切る	re.split(pattern, s)
データフレームをJSONLファイルにタブ区切りで保存する	df.to_csv(filename, sep='\t')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
＜オプション＞読み込むシートの名前をnamesに設定する	sheet_name = names
データフレームのリスト列の50パーセンタイル	df[aList].median()
リストと配列についての散布図に黒い下三角マーカーを描く	plt.plot(xdata, ydata, marker='v', c='k')
＜オプション＞ロイヤルブルーにグラフの色を変更する	color = 'royalblue'
＜オプション＞ライトスチールブルー色を用いる	color = 'lightsteelblue'
マップから項目名の値か、もしくは要素を得る	aDict.get(key, element)
文字列中の部分文字列の出現回数を数える	s.count(sub)
グラフをスライド用に設定する	sns.set(context='talk')
＜オプション＞コーンズシルクを使う	color = 'cornsilk'
文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
ファイルを書き込みモードを使ってオープンする]	open(filepath, mode='w')
データフレームを'A'列によってソートしてNaNを先頭にする	df.sort_values(by='A', na_position='first')
小数点数の整数部	math.modf(x)[1]
赤い三角マーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
乱数生成系列をnで固定する	random.seed(n)
ヒストグラムを描画して、色をシアンに指定する	plt.hist(データ列, color='cyan')
文字列TSVファイルからCSVをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
データフレームのn行目を削除して、更新する	df.drop(n, axis=0, inplace=True)
折れ線グラフを描画して、色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
データフレームを'A'列によってまとめたグループ	df.groupby('A')
＜オプション＞ブルーバイオレットを用いる	color = 'blueviolet'
データフレームから型リストデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
リストを文字列に変換して一つにする	''.join(map(str, iterable))
行列の転置行列を算出する	aArray.T
方程式として数式の変数の解を計算する	sympy.solve(e, z)
リストをマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
＜オプション＞ゴーストホワイト色を使う	color = 'ghostwhite'
データ列を暗い色のヒストグラムを用いて描画する	plt.hist(xdata, color='dark')
組の中の一番大きい値を計算する	max(aTuple)
nがn2で割り切れないか判定する	n % n2 != 0
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
実線に折れ線グラフを変更する	plt.plot(データ列, データ列2, linestyle='solid')
淡い色の折れ線グラフをプロットしてその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
ヒストグラムの色をサーモンに変更する	plt.hist(データ列, color='salmon')
＜オプション＞セパレータを改行にする	sep = '\n'
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
配列を横ベクトルに変形する	aArray.reshape(1, -1)
ビン数nでデータフレームの中のカラムをビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの色を青にセットする	plt.hist(データ列, color='blue')
両端キューを作る	collections.deque()
＜オプション＞マーカーをダイアモンドに変更する	marker = 'D'
データフレームのリストカラムの中にある文字列との合計をカウントする	df[aList].isin([value, value2]).sum()
黒い右三角マーカーを数列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='>', c='k')
文字列が平仮名かどうか	('ぁ' <= ch <= 'ん')
データフレームのリスト列の中にいくつ欠損値が含まれるか数える	df[aList].isna().sum()
カウンタのキーと回数を列挙する	aCounter.items()
ライトスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightskyblue')
白色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='white')
データ列を折れ線グラフに描画して、印をポイントにする	plt.plot(データ列, データ列2, marker='.')
カウンタのユニオン演算する	aCounter | aCounter2
度数分布図を２つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
赤い濃いの折れ線グラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフを描画して、色をダークシアンにする	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフを描画してその色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
文字列の末尾の文字	s[-1]
nがn2の倍数でないか調べる	n % n2 != 0
データフレームで、列と列の重複を見る	df.duplicated(subset=[column, column2])
文字列はリストの要素	element in aList
実数の双曲線正接の逆数	math.atanh(x)
改行で文字列を分割する	s.splitlines()
折れ線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
色差別ないを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
オブジェクトはリストクラスか調べる	isinstance(obj, list)
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
配列をヒストグラムで可視化する	plt.hist(aArray)
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
書式で文字列を日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
文字コードに対応する文字	chr(unicode)
暗い色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
折れ線グラフを描画してその色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
日付時刻データが月曜日か	aDatetime.weekday() == 0
文字列が全て英字か調べる	s.isalpha()
リストとリストの明るいグラフをプロットしてその色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
イテラブルにリストを続けたイテラブル	itertools.chain(iterable, iterable2)
列でデータフレームをグループ化してそれぞれのグループの標準偏差を求める	df.groupby(column).std()
値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
＜オプション＞青にグラフの色を設定する	color = 'blue'
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
整数nがタプルのどれか	n in aTuple
コマンドの第一引数を知る	sys.argv[1]
グラフをデフォルトでイイ感じに設定する	sns.set()
散布図にカラーコードの菱形マーカーを使用する	plt.plot(xdata, ydata, marker='D', c=rgb)
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
配列の次元の数を算出する	aArray.ndim
横軸にuntitledというラベルを設定する	plt.xlabel(untitled)
オブジェクトが名前付きタプルか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
データ列と配列について散布図を描画して、右三角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='>', c=rgb)
淡いグラフを配列とリストを用いて描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
カラーコードのダイアモンドマーカーをイテラブルとリストの散布図に描く	plt.plot(xdata, ydata, marker='D', c=rgb)
濃いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
折れ線グラフの▲マーカーを黒色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
改行を使う	'\n'
＜オプション＞エンコーディングをSJISに指定する	encoding = 'shift_jis'
配列が何のデータ型か	aArray.dtype()
二進数文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
線グラフを描画して色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
リストとリストについて散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='red')
Pandasでデータ列を日付データにする	pd.to_datetime(ds)
文字列を代数計算の変数に変換する	sympy.Symbol(s)
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
散布図に赤色の▲マーカーを使用する	plt.plot(xdata, ydata, marker='^', c='r')
三自然数のGCDを求める	math.gcd(n, n2, n3)
UNIX時間のデータフレームのcollからPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムの色をグレーにする	plt.hist(データ列, color='grey')
ファイルをBOM付きで追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
nとn2のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
リストと配列の散布図を描いて、▼マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='v', c=rgb)
リストとリストの明るいグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
暗いの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
文字列が全て数字かどうか調べる	s.isdigit()
二つの集合の共通部分を使う	aSet.intersection(aSet2)
カラムを四捨五入する	ds.round()
折れ線グラフに緑色の下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
両端キューをリストにする	list(deq)
＜オプション＞読み込みモードに指定する	mode = 'r'
折れ線グラフのマーカーを三角印にする	plt.plot(データ列, データ列2, marker='^')
＜オプション＞グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
棒グラフを描いて、中央寄せする	plt.bar(ラベル列, データ列, align='center')
逆双曲線余弦を算出する	math.acosh(x)
数列とリストの散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
＜オプション＞グレーを使う	color = 'gray'
2つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
ヒストグラムを描画して、色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
両端キューの長さを制限する	collections.deque(maxlen=n)
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
変数を黄色でプリントする	print(f'\033[33m{value}\033[0m')
数値を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
シーケンスの各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
文字列リストを連結して一つの文字列にする	''.join(map(str, iterable))
ヒストグラムの色をオリベドラブにする	plt.hist(データ列, color='olivedrab')
部分文字列が文字列の開始位置番目からと終了位置までの間に含まれないか調べる	s.find(sub, start, end) == -1
ロイヤルブルーにヒストグラムの色を指定する	plt.hist(データ列, color='royalblue')
データフレームを100の位で丸める	df.round(-2)
実数のn乗の浮動小数点数剰余	pow(x, n, y)
文字列が片仮名	('ァ' <= ch <= 'ン')
折れ線グラフのラベルをuntitledにセットする	plt.plot(xdata, ydata, label=untitled)
データ列の値が未入力値	ds.isna()
部分集合か調べる	aSet.issubset(aSet2)
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=n)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
ヒストグラムを描画して、その色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフを描画して、色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
実数が整数か確認する	x.is_integer()
辞書から項目名で指定された項目をポップする	aDict.pop(key)
コマンドラインフラグの状態	sys.flags
ヒストグラムを描画して、色を青に設定する	plt.hist(データ列, color='blue')
複数行対応として正規表現で文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
散布図をカラーコードの丸マーカーで描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
Pandasで、データフレームのcollをフォーマットを用いてタイムスタンプ型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
折れ線グラフの色を文字列に変更する	plt.plot(xdata, ydata, color=s)
濃いの線幅をnにセットする	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
配列を関数でフィルタする	map(func, iterable)
現在が金曜日か調べる	datetime.datetime.today().weekday() == 4
ライム色の線グラフを描画する	plt.plot(データ列, データ列2, color='lime')
データフレームのリスト列の中の欠損値の合計を数える	df[aList].isna().sum()
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
文字列内に英字が含まれる	any(c.isalpha() for c in s)
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフのバツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
データフレームのカラムの欠損値を直前の値で補う	df[col].fillna(method='ffill')
ヒストグラムを描画して、その色をマゼンタに設定する	plt.hist(データ列, color='magenta')
ヒストグラムを描画して色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
オブジェクトのクラス	type(obj)
＜オプション＞ライムグリーンにグラフの色を設定する	color = 'limegreen'
＜オプション＞ピーチパフ色を用いる	color = 'peachpuff'
データフレームのリストカラムを1000の位で四捨五入して整数型にする	df[aList].round(-3).astype(int)
データフレームのリストカラムを十の位で丸める	df[aList].round(-1)
文字列を走査し、正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
グラフに格子線を入れる	plt.grid(True)
文字列を右端から空白で区切る	s.rsplit()
折れ線グラフを描画して、その色をオリベドラブにセットする	plt.plot(データ列, データ列2, color='olivedrab')
＜オプション＞グラフの種類を破線に変更する	linestyle = 'dashed'
データフレームのカラムのタイムゾーンを文字列に変更する	df[col].tz_convert(s)
データフレームの未入力値を直前の値で埋める	df.fillna(method='ffill')
出力ストリームを一行ずつ読む	f.readline()
＜オプション＞グラフの色を小麦色に設定する	color = 'wheat'
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
折れ線グラフを描画して、その色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
＜オプション＞ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
リストにリストを追加して拡張する	aList.extend(aList2)
データフレームを表示するとき表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
ヒストグラムを描画して、その色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
本日が木曜日かどうか	datetime.datetime.today().weekday() == 3
辞書のコピーを用意する	aDict.copy()
折れ線グラフの丸マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
＜オプション＞レモンシフォンにグラフの色を設定する	color = 'lemonchiffon'
折れ線グラフの色をライトグレーにする	plt.plot(データ列, データ列2, color='lightgrey')
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
分子n分母mの分数を生成する	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフのマーカーを上三角にする	plt.plot(データ列, データ列2, marker='^')
双方向キューの右にイテラブルの各要素を付け加える	deq.extend(iterable)
カウンタをリストで更新する	aCounter.update(iterable)
黒いポイントマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='.', c='k')
＜オプション＞線種を一点鎖線に指定する	linestyle = 'dashbot'
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
n個に配列を等量でビニングする	pd.qcut(aArray, n)
リストとリストの散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
整数nが配列のひとつ	n in aArray
＜オプション＞大文字・小文字を無視する	flag = re.IGNORECASE
黒色の四角マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='s', c='k')
折れ線グラフを描画して、その色をナバホホワイトに変更する	plt.plot(データ列, データ列2, color='navajowhite')
追加できるように既存のファイルをSJISとしてオープンする]	open(filepath, mode='a', encoding='shift_jis')
＜オプション＞ダークスレートブルーにグラフの色を設定する	color = 'darkslateblue'
データフレームのリストカラムの中に文字列がある	df[aList].isin([value])
正規表現に文字列がマッチさせる	re.match(pattern, s)
オリーブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olive')
カラーコードの右三角マーカーを配列と配列についての散布図に描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
両端キューの要素をインプレースに反転する	deq.reverse()
タブ	'\t'
＜オプション＞▽マーカーを加える	marker = 'v'
＜オプション＞マーカーを四角に変更する	marker = 's'
折れ線グラフの色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
アルファベットの小文字を全部使う	string.ascii_lowercase
８ビット整数型の全要素を０で初期化された行列	np.zeros(行数, 列数, dtype=np.int8)
横棒を描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
プログラムをエラーとして終了する	sys.exit(1)
ヒストグラムを描画して、その色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
日付時刻データが何時か知る	aDatetime.hour
リストをビン数nでビン分割する	pd.cut(aList, n)
赤い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
折れ線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列, データ列2, color='mediumslateblue')
データフレームを二つの列の値でグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
文字列を部分文字列を用いて二分割する	s.partition(sub)
カウンタをリストに変換する	list(aCounter)
文字列を部分文字列によって二分する	s.partition(sub)
year年day月をタイムスタンプにする	datetime.datetime(year=year, month=month, day=1)
ヒストグラムを描画して、その色をリネンに指定する	plt.hist(データ列, color='linen')
データ列の曜日の名前を見る	ds.dt.weekday_name
データ列を千の位で四捨五入して、整数にする	ds.round(-3).astype(int)
散布図に黒い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='k')
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
データフレームのリスト列の各列間の相関係数	df[aList].corr()
折れ線グラフを描画して、その色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
カラムの中のNaNの合計を数える	ds.isna().sum()
データフレームを列を用いて小さい順にソートする	df.sort_values(by=column, ascending=True)
線グラフを描画して色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
ヒストグラムを描画して、その色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
空の辞書を作成する	{}
濃いの色を赤くする	plt.plot(xdata, ydata, linestyle='deep', color='r')
ファイルを読み込みモードを使ってオープンして]、fとする	f = open(filepath, mode='r')
Pandasで、文字列をフォーマットfmtで日付データに変換する	pd.to_datetime(s, format=fmt)
明るい色のマーカーとして散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
２つのデータフレームを列をキーにして全結合する	pd.merge(df, df2, on=column, how='outer')
列の一意な値	df[col].unique()
折れ線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
折れ線グラフを描画して、色を赤に設定する	plt.plot(データ列, データ列2, color='red')
に鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
リストをn回結合する	aList * n
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
文字列を走査し、パターンに大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
標準入力から1行読み取る	input()
＜オプション＞印を▲に変更する	marker = '^'
線グラフを描画して色をパールバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='palevioletred')
コードポイントの最大値を知る	sys.maxunicode
文字列がタプルの要素か調べる	element in aTuple
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
データ列を箱ひげ図を用いて可視化する	plt.boxplot(データ列)
インディアンレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='indianred')
グラフのデータラベルの位置を(x,y)に設定する	plt.legend(loc=(x, y))
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
折れ線グラフの色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
＜オプション＞グラフの色を茶色に変更する	color = 'brown'
処理中の例外を情報	sys.exc_info()
部分文字列をエラーなく文字列の右側から取り除く	s.removesuffix(sub)
実数が正か	x > 0
データフレームを各列毎にグループ化し、、列の合計を計算する	df.groupby(column)[column2].sum()
折れ線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列, データ列2, color='blanchedalmond')
散布図に四角マーカーを用いる	plt.plot(xdata, ydata, marker='s')
異なる列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
文字列中にひとつでも非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
数値の変数を数式で置き換える	e.subs(z, e2)
データフレームの列の中にが含まれる	df[col].isin([value])
赤い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームの値をValueMapで置き換える	df.replace(ValueMap)
＜オプション＞ダークターコイズを使う	color = 'darkturquoise'
マッピングをソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
マルーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='maroon')
線グラフを描画して、その色をインディゴに変更する	plt.plot(データ列, データ列2, color='indigo')
データ列を折れ線グラフに描画して、マーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
＜オプション＞オーキッド色を使う	color = 'orchid'
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
n個にデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列, データ列2, color='coral')
＜オプション＞色をシャルトリューズに設定する	color = 'chartreuse'
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
正規表現patternでデータフレームの列をreplに置換する	df[col].replace(pattern, repl, regex=True)
整数nを十六進文字列に変換する	hex(n)[2:]
＜オプション＞グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
折れ線グラフに大バツ印を使う	plt.plot(データ列, データ列2, marker='X')
データ列を折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
暗いを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
＜オプション＞カンマを分割記号で使う	sep = ','
折れ線グラフに黄色い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
データフレームのリストカラムの中にいくつ欠損値が含まれるか数える	df[aList].isna().sum()
ケンドール相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
事前に正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
リストについてのヒストグラムを濃いでプロットする	plt.hist(xdata, color='deep')
線グラフを描画して、その色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
列をビン分割する	pd.cut(ds, aList)
文字列を改行を使って分割する	s.splitlines()
データ列の欠損値を第二四分位数にセットする	ds.fillna(ds.median())
文字列を書式fmtで日付データに変換する	pd.to_datetime(s, format=fmt)
データフレームを列によってソートし、、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの色をライムに変更する	plt.plot(データ列, データ列2, color='lime')
データフレームの列がxより多くx2より少ない行を取り出す	df[(x < df[column]) & (df[column] < x2)]
折れ線グラフの丸印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
＜オプション＞アクアマリン色を使う	color = 'aquamarine'
＜オプション＞ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
データ列と数列の黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
＜オプション＞グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
部分文字列が文字列の終了位置より前に存在する	s.find(sub, 0, end) != -1
２つのカウンタの共通する値	aCounter & aCounter2
データフレームの中の列を等量でn個にビンニングする	pd.qcut(df[col], n)
折れ線グラフの三角印を青色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
重なりを見やすく散布図を色差別ない色のマーカーとして描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
オブジェクトをイテラブルに変換する	iter(obj)
シーケンスをダミー変数に変換する	pd.get_dummies(iterable)
配列の最大	np.max(aArray)
ヒストグラムを描画して色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
シードをnで固定する	random.seed(n)
正規表現モジュールをインポートする	import re
データフレームからランダムにn行を重複ありでサンプリングする	df.sample(n, replace=True)
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
ベクトルを変形する	aArray.reshape(行数, 列数)
データフレームの列をインデックスにセットする	df.set_index(column)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
＜オプション＞データ型を指定する	dtype = np.int16
シーケンスから重複なくn要素ランダムに選ぶ	random.sample(iterable, k=n)
本日が木曜日	datetime.datetime.today().weekday() == 3
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
カラーコードのバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
文字列を赤色化する	f'\033[31m{value}\033[0m'
折れ線グラフの色をビスクにする	plt.plot(データ列, データ列2, color='bisque')
カウンタの要素の回数	aCounter[element]
データフレームの未入力値をモードで埋める	df.fillna(df.mode().iloc[0])
ヒストグラムを描画して、その色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>')
タプルの最初	aTuple[0]
＜オプション＞▽印を描画する	marker = 'v'
リストと数列でパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
折れ線グラフの丸印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
文字列が組の要素かどうか調べる	element in aTuple
データフレームのn行より前抽出する	df[:n]
データフレームのカラムが何曜日か確認する	df[col].dt.weekday_name
＜オプション＞ライトグリーンにグラフの色をセットする	color = 'lightseagreen'
赤いパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームからインプレイスで重複を削除する	df.drop_duplicates(inplace=True)
折れ線グラフを描画してその色をミスティローズに変更する	plt.plot(データ列, データ列2, color='mistyrose')
データフレームの列と列の相関行列スピアマン相関係数でを算出する	df[[column, column2]].corr(method='spearman')
＜オプション＞グラフの種類を実線に設定する	linestyle = 'solid'
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
カウンタをリセットする	aCounter.clear()
ヒストグラムを描画して、色をトマトに指定する	plt.hist(データ列, color='tomato')
ヒストグラムを描画し、アルファをxに設定する	plt.hist(データ列, alpha=x)
黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
タプル中の文字列が最初に見つかる場所	aTuple.index(element)
ファイルをEUCを用いてオープンする]	open(filepath, encoding='euc_jp')
整数nを半分にする	n //= 2
ファイルを文字列の示す文字コードで書き込みできるように開く]	open(filepath, mode='w', encoding=s)
散布図に黒い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='k')
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
ヒストグラムを描画してその色をロージーブラウンに変更する	plt.hist(データ列, color='rosybrown')
システム時刻で乱数を初期化する	random.seed()
折れ線グラフを描画して、その色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
散布図にカラーコードのダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞グラフの色をアイボリーにする	color = 'ivory'
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
イテラブルとリストについて散布図を描画し、、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
赤いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
折れ線グラフを描画して、色をロージーブラウンに変更する	plt.plot(データ列, データ列2, color='rosybrown')
データフレームの各次元の大きさを見る	df.shape
実数を数から引く	x - y
配列とリストについて散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムを描画して、色を白くする	plt.hist(データ列, color='w')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep')
改行で文字列を分割し、文字列リストに変換する	s.splitlines()
要素がセットに含まれるか	element in aSet
列によってデータフレームをソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
文字列中の部分文字列を別の文字列に置き換える	s.replace(sub, newsub)
文字列を後ろから部分文字列で区切る	s.rsplit(sub)
綺麗なプロットを描画する	import seaborn as sns
二つの浮動小数点数が近似値かどうか調べる	math.isclose(x, x2)
折れ線グラフを描画して、その色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
ヒストグラムを描画して、その色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
逆順の両端キュー	reversed(deq)
本日の日付時刻を求める	datetime.datetime.now()
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
データフレームから列を1つ選択する	df[[column]]
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
線グラフを描画して、その色をネイビーに指定する	plt.plot(データ列, データ列2, color='navy')
データフレームとデータ列を横向きにつなぐ	pd.concat([df, ds], axis=1)
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
折れ線グラフに描画してマーカーを▽印にする	plt.plot(データ列, データ列2, marker='v')
データフレームの欠損値をメディアンに設定する	df.fillna(df.median())
線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
データフレームの先頭を確認する	df.head()
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
キューの最初から要素を取り除く	deq.popleft()
グラフの中に枠なしのデータラベルを表示する	plt.legend(frameon=False)
数式を変数についてn階微分する	sympy.diff(e, z, n)
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
Pandasで、データ列を日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
折れ線グラフの星印を青くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
イテラブルとデータ列についての散布図に黒い△マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
ヒストグラムを描画して、その色をゴールドに設定する	plt.hist(データ列, color='gold')
プロットの補足の位置を指定する	plt.legend(loc=(x, y))
データフレームを列を用いて昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
＜オプション＞ホットピンクを使用する	color = 'hotpink'
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
データフレームのリスト列の欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
色差別ないグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
配列をn個にビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
整数nの八進表記を求める	oct(n)
整数のGCD	math.gcd(n, n2)
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
データ列を箱ひげ図にする	plt.boxplot(データ列)
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
折れ線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
折れ線グラフを描画して、その色をオリベドラブに指定する	plt.plot(データ列, データ列2, color='olivedrab')
昇順にデータフレームを二つの列によって並べ直し、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
＜オプション＞ヘッダを自動的な連番に設定する	header = None
＜オプション＞マーカーを右三角に変更する	marker = '>'
辞書のコピーを作る	aDict.copy()
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
折れ線グラフを描画して、色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
データフレームのカラムの50パーセンタイル	df[col].median()
折れ線グラフの色をスラグレーにする	plt.plot(データ列, データ列2, color='slategray')
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
両端キューの末尾	deq[-1]
セット＼集合	aSet.difference(aSet2)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
２つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
黒色の丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o', c='k')
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
配列とデータ列の折れ線グラフを描画して、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
長さnのリストを得る	[0] * n
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
データフレームから型リストで指定されたデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
＜オプション＞グリーンイエローを使う	color = 'greenyellow'
三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
暗い色のマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, c='dark')
配列とリストの散布図にポイントマーカーを描く	plt.plot(xdata, ydata, marker='.')
セットが空集合でないか	len(aSet) != 0
オブジェクトが整数クラスか調べる	isinstance(obj, int)
＜オプション＞パールバイオレットレッドにグラフの色を指定する	color = 'palevioletred'
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
ヒストグラムを描画して、その色をインディゴに設定する	plt.hist(データ列, color='indigo')
データフレームをJSONLファイルに保存する	df.to_excel(filename)
＜オプション＞コーラル色を使う	color = 'coral'
イテラブルの値をスタックの先頭に追加する	deq.extendleft(iterable)
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
赤いダイアモンドマーカーをリストとデータ列についての散布図にプロットする	plt.plot(xdata, ydata, marker='D', c='r')
双方向キューの順序を右にn個分ローテンションする	deq.rotate(n)
折れ線グラフに大きさnのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
０で全要素を初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
＜オプション＞三二ビット整数型を使う	dtype = np.int16
配列と数列について散布図を描画し、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
オブジェクトのプロパティを値に変更する	setattr(obj, プロパティ名, 値)
＜オプション＞改行をセパレータで使用する	sep = '\n'
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
青い暗いをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
プロットを描画する準備をする	from sympy import N
整数nの二進数表現を見る	bin(n)
文字列の先頭からタブを取り除く	s.lstrip('\t')
＜オプション＞ミディアムシアグリーンを用いる	color = 'mediumseagreen'
nが-9以上、9以下か調べる	-9 <= n <= 9
線グラフを描画してその色をピンクにセットする	plt.plot(データ列, データ列2, color='pink')
行列の行ごとの合計値を求める	np.sum(aArray, axis=1)
データフレームのカラムを10の位で四捨五入して整数型にする	df[col].round(-1).astype(int)
文字列の右側から空白を除く	s.rstrip(' ')
リストとリストについて散布図を描画して、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
パープルにヒストグラムの色をセットする	plt.hist(データ列, color='purple')
行列の各要素に加算する	aArray + aArray2
線グラフの色をサドルブラウンに指定する	plt.plot(データ列, データ列2, color='saddlebrown')
集合からエラーなく要素を取り除く	aSet.discard(element)
n個に等量でデータ列をビン分割する	pd.qcut(ds, n)
配列とリストで淡いグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
ヒストグラムを描画してその色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
データフレームのカラムの未入力値を50パーセンタイルに設定する	df[col].fillna(df[col].median())
グラフで使うカラーパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
スカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='skyblue')
タプルを並べる	sorted(aTuple)
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
三つの最小値を求める	min(x, y, z)
＜オプション＞ホットピンク色を使う	color = 'hotpink'
線グラフを描画して、色をライトスカイブルーに変更する	plt.plot(データ列, データ列2, color='lightskyblue')
折れ線グラフの色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
現在が月曜日	datetime.datetime.today().weekday() == 0
データフレームのcollをフォーマットでdatetime64型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データ列をカテゴリデータにする	ds.astype(object)
データ列のNaNを最大値に設定する	ds.fillna(ds.max())
実数を十六進文字列に変換する	x.hex()
環境の名前	sys.platform
リスト内の要素は少なくともひとつ真	any(aList)
バイナリ書き込みモードでファイルをオープンして]fとする	f = open(filepath, mode='wb')
データフレームを列によって並べ直す	df.sort_values(by=column)
折れ線グラフの色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
下三角マーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='v')
明るいを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
折れ線グラフを描画して、色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
データフレームとしてTSVファイルを読み込む	pd.read_csv(filename, sep='\t')
折れ線グラフに線幅nの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
英文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
JSONフォーマットの文字列をロードする	json.loads(jsonString)
赤い▽マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
カラーコードのポイントマーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
線グラフを描画して、その色をマゼンタに変更する	plt.plot(データ列, データ列2, color='magenta')
要素∈集合	element in aSet
配列の列ごとの平均を求める	np.mean(aArray, axis=0)
三自然数の最大公約数	math.gcd(n, n2, n3)
線グラフを描画して、その色をスプリンググリーンに指定する	plt.plot(データ列, データ列2, color='springgreen')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
三二ビット整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int16)
線グラフを描画して、その色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
明るいで柱状図を描画する	plt.hist(xdata, color='bright')
＜オプション＞ゴールデンロッドを用いる	color = 'goldenrod'
折れ線グラフの△印の大きさをnに指定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
整数nは配列のいづれかか調べる	n in aArray
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
エクセルデータファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
＜オプション＞グリーン色を使用する	color = 'green'
ふたつの集合は互いに素か判定する	aSet.isdisjoint(aSet2)
文字列をコロンで区切って、列挙する	s.split(':')
黒色のポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='k')
２次元タプルをflattenする	sum(aTuple)
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
カウンタのキーを、そのカウントだけ列挙する	aCounter.elements()
配列をビン数nでビンニングする	pd.cut(aArray, n)
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
各列毎にデータフレームを集約して列の個数を算出する	df.groupby(column)[column2].count()
タプルの個数	len(aTuple)
データフレームの列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
黒色の大バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='X', c='k')
＜オプション＞グレー色を用いる	color = 'grey'
折れ線グラフを描画して、その色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
NaNを用いる	math.nan
＜オプション＞ライトサーモン色を使う	color = 'lightsalmon'
黒いバツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
Pythonのバージョン	sys.version
両端キューが空でないか調べる	len(deq) != 0
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
nからn2を引く	n - n2
全要素を０で初期化された８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
折れ線グラフに線幅nのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
データフレームを列によってまとめたグループ	df.groupby(column)
オブジェクトは辞書クラス	isinstance(obj, dict)
アンティークホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='antiquewhite')
オブジェクトはタプル型のインスタンスかどうか調べる	isinstance(obj, tuple)
n進文字列を整数に変換する	int(s, n)
データフレームを複数の列でまとめた表を求める	df.groupby(columns)
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
折れ線グラフに大きさnの▽印を描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
赤い下三角マーカーをリストとデータ列についての散布図に描く	plt.plot(xdata, ydata, marker='v', c='r')
データフレームのカラムとカラムを折れ線グラフで描画する	plt.plot(df[col], df[col2])
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
折れ線グラフの色をダークターコイズにセットする	plt.plot(データ列, データ列2, color='darkturquoise')
データフレームの列を10の位で丸めて整数型にする	df[col].round(-1).astype(int)
ヒストグラムの色をベージュにセットする	plt.hist(データ列, color='beige')
グラフを暗くする	sns.set(pallete='dark')
コロンで区切って２つの文字列をプリントする	print(value, value2, sep=':')
表データを'A'列によって小さい順にソートする	df.sort_values(by='A', ascending=True)
両端キューから値を取り除く	deq.remove(element)
データフレームからカテゴリデータのカラム名の一覧を使う	df.select_dtypes('object').columns
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
文字列のケースを整える	s.casefold()
データ列を等量で分割数nを使って分割する	pd.qcut(ds, n)
文字列を部分文字列で分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
ヒストグラムを描画して、色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
文字列の最後から空白を除去する	s.rstrip()
文字列が全てアスキー文字か調べる	s.isascii()
エクセルファイルファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
データ列とリストの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
散布図のマーカーの大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
二つのカラムを並べてボックスチャートにする	plt.boxplot([df[column], df[column2]])
文字列が全てアルファベットか調べる	s.isalpha()
数列とリストの青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームのリストカラムの中の欠損値の合計をカウントする	df[aList].isna().sum()
日付時刻データの日を使う	aDatetime.day
線グラフの色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightseagreen')
イテラブルを文字列リストに変換して部分文字列でつなげる	sub.join(map(str, iterable))
オブジェクトは数値かどうか確認する	isinstance(obj, (int,float))
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
小数点数の絶対値	math.fabs(x)
３つのデータフレームを横に連結する	pd.concat([df, df2, df3], axis=1)
折れ線グラフを描画して、その色をライトゴールドロディイエローにセットする	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
改行なしで標準入力から1行だけ読む	sys.stdin.readline().rstrip()
配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームを表示するとき、小数点以下の表示精度をn桁に減らす	pd.set_option('precision', n)
赤い暗いの折れ線を描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
＜オプション＞フローラルホワイトを使う	color = 'floralwhite'
＜オプション＞ライトゴールドロディイエロー色を使用する	color = 'lightgoldenrodyellow'
リストを更新不能なセットに変換する	frozenset(iterable)
配列とイテラブルについて明るいグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
最後から文字列を空白で分割する	s.rsplit()
暗い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='dark')
配列と配列についての散布図にカラーコードのバツマーカーを描く	plt.plot(xdata, ydata, marker='x', c=rgb)
パステル調のグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ベージュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='beige')
nがn2より小さいかどうか調べる	n < n2
nが1もしくは2か確認する	n == 1 or n == 2
データ列と数列の散布図をプロットして、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
実数を小数点以下第一位で四捨五入する	round(x, 1)
＜オプション＞ホワイトスモークを使用する	color = 'whitesmoke'
ヒストグラムを描画して、その色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
エクセルデータファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列, データ列2, color='darkslateblue')
ベクトルの演算をする	import numpy as np
データフレームのカラムの中にある日付データと文字列の合計を数える	df[col].isin([value, value2]).sum()
リストをひとつ飛ばしで取り出す	aList[::2]
データフレームの中にいくつ文字列があるかカウントする	df.isin([value]).sum()
折れ線グラフに描画して、マーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
線グラフの色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgrey')
データ列を折れ線グラフに描画してマーカーを四角にする	plt.plot(データ列, データ列2, marker='s')
＜オプション＞ゴーストホワイトを使う	color = 'ghostwhite'
折れ線グラフを描画して色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
＜オプション＞カンマをセパレータで使う	sep = ','
折れ線グラフに星マーカーを使う	plt.plot(データ列, データ列2, marker='*')
配列とリストについての散布図にカラーコードの大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームの内容を見る	df.head()
kを底とする対数	math.log(x, k)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームを関数の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
数列とデータ列について散布図を描画し、、下三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='v', c=rgb)
＜オプション＞グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
ユーザから入力される	int(input())
データフレームを列で集計して列の要約統計量を計算する	df.groupby(column).describe()[column2]
逆余弦	math.acos(x)
マッピングの項目名を列挙する	aDict.keys()
カラーコードのダイアモンドマーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c=rgb)
配列のヒストグラムを描画する	plt.hist(aArray)
nが5の倍数かどうか調べる	n % 5 == 0
リストと配列についての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
枠なしの凡例をグラフの中に入れる	plt.legend(frameon=False)
データフレームのカラムのユニークな値の個数	df[col].nunique()
最大列数を変更する	pd.set_option('display.max_columns', n)
リストとリストについて散布図を描画してマーカーを左三角にセットする	plt.plot(xdata, ydata, marker='<')
リストの全ての要素をクリアにする	aList.clear()
nが偶数かどうか調べる	n % 2 == 0
＜オプション＞パパイヤウィップ色を使う	color = 'papayawhip'
マッピングに項目名ワード引数で更新する	aDict.update(**kwargs)
折れ線グラフの色をライトゴールドロディイエローにセットする	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
代数計算を使う	import sympy
茶色にヒストグラムの色を変更する	plt.hist(データ列, color='brown')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
データフレームを列によってグループ化して、最小値を求める	df.groupby(column).min()
マッピングを階層化する	collections.ChainMap(aDict)
データフレームからカラムを2つのみ選択する	df[[column, column2]]
カウンタから列をカウントして引く	aCounter.subtract(iterable)
リストの末尾	aList[-1]
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
黒い色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ふたつの関係がスーパーセットもしくは等しいか調べる	aSet > aSet2
折れ線グラフを描画して、その色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgrey')
数値を緑色にする	f'\033[32m{value}\033[0m'
データフレームをグループ化し各列に対し最小値を求める	df.groupby(column)[column2].min()
正規分布で疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフを描画して、色をリネンに指定する	plt.plot(データ列, データ列2, color='linen')
補足を最適な位置に付ける	plt.legend(loc='best')
文字列の左側からタブを消す	s.lstrip('\t')
＜オプション＞ポイント印を加える	marker = '.'
リストと数列で淡いを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
nがn2以上か調べる	n >= n2
グラフをプレゼン用に設定する	sns.set(context='talk')
オブジェクトの属性の値を変更する	setattr(obj, プロパティ名, 値)
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
データフレームのカラムの中の未入力値の数を数える	df[col].isna().sum()
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
濃いの折れ線グラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
今日の日付	datetime.date.today()
ヒストグラムを描画して、その色をネイビーに変更する	plt.hist(データ列, color='navy')
データフレームの列がxの行を抽出する	df[df[column] == x]
二つのオブジェクトが等しいかどうか調べる	obj == obj2
ヒストグラムを描画して、その色をトマトにセットする	plt.hist(データ列, color='tomato')
＜オプション＞読み込まない列番号をnamesで指定する	skiprows = names
点線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dotted')
折れ線グラフの大バツマーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='X', markersize=n)
行によってデータフレームをソートする	df.sort_index()
アイボリー色の線グラフを描画する	plt.plot(データ列, データ列2, color='ivory')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
リストのn番目からn2番目	aList[n:n2]
赤い▲マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
イテラブルの全順列	itertools.permutations(iterable)
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
日付データが日付データより後ろか調べる	aDate > aDate2
＜オプション＞色をフォレストグリーンに設定する	color = 'forestgreen'
数列とリストについて散布図を描いて、マーカーの色をパステル調のに変更する	plt.plot(xdata, ydata, c='pastel')
リストとイテラブルのパステル調のグラフをプロットして、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
ヒストグラムを描画して、その色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
データ列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
配列とリストについての散布図に赤色の星マーカーを描く	plt.plot(xdata, ydata, marker='*', c='r')
現在の作業ディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
カラムの最頻値	ds.mode()
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgrey'
グラフのタイトルをuntitledに指定する	plt.title(untitled)
データフレームを列によってグループ化してそれぞれのグループごとの合計を求める	df.groupby(column).sum()
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
ヒストグラムを描画して、その色をライトシアンにセットする	plt.hist(データ列, color='lightcyan')
変数を太字化する	f'\033[1m{value}\033[0m'
数式を微分する	sympy.diff(e)
Pandasで、フォーマットfmtで文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
ヒストグラムを描画してその色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
2を底とする実数の対数を算出する	math.log2(x)
データフレームを関数でグループ化する	df.groupby(関数)
＜オプション＞オーキッド色を用いる	color = 'orchid'
＜オプション＞マーカーを大バツに変更する	marker = 'X'
実数から実数を引く	x - y
ヒストグラムにカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
ヒストグラムを描画してその色を小麦色に設定する	plt.hist(データ列, color='wheat')
ヒストグラムを描画して、その色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
折れ線グラフにサイズnの星印を描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
キューをタプルにする	tuple(deq)
データフレームの第一四分位数	df.quantile(0.25)
データ列とラベルを指定して棒グラフを描画する	plt.bar(ラベル列, データ列)
文字列全体が正規表現に大文字・小文字を無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
双方向キューをdequeue	deq.popleft()
リストとリストについて散布図をプロットして、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
データフレームの中にいくつ文字列があるか求める	df.isin([value]).sum()
＜オプション＞グラフの色をスラグレーに変更する	color = 'slategray'
＜オプション＞バツマーカーを使う	marker = 'x'
リストを縦軸、リストを横軸として折れ線をプロットする	plt.plot(xdata, ydata)
データフレームで列に重複があるか確認する	df.duplicated(subset=column)
変数の値をスワップする	x, y = y, x
折れ線グラフの△印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
文字列を部分文字列で区切る	s.split(sub)
ヒストグラムを描画して、その色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
オブジェクトはタプルクラスのインスタンスか	isinstance(obj, tuple)
＜オプション＞コロンをセパレータで用いる	sep = ':'
データ列の欠損値を最小値に指定する	ds.fillna(ds.min())
黒い四角マーカーをイテラブルとリストについての散布図に描く	plt.plot(xdata, ydata, marker='s', c='k')
データフレームが正規分布からどの程度歪んでいるか確認する	df.kurt()
色差別ない色のマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
マッピングの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
文字列をシンボルにする	sympy.Symbol(s)
折れ線グラフを描画して、その色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
文字列が全て大文字	s.isupper()
リストをx座標と指定して、リストの変化をプロットする	plt.plot(range(len(xdata)), xdata)
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkseagreen')
今日のローカルな日付時刻	datetime.datetime.today()
黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
データフレームが正規分布からどの程度尖っているか見る	df.skew()
折れ線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
辞書のキーに対応した値を参照する	aDict.get(key)
文字列をユニコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
現在の時刻	datetime.date.today().hour
文字列を空白で区切り、数列にする	map(int, s.split())
グラフで使用するy座標に軸ラベルを付ける	plt.ylabel(untitled)
一方に含まれ他方に含まれない集合を使う	aSet.difference(aSet2)
＜オプション＞色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
ヒストグラムの色を青緑にする	plt.hist(データ列, color='turquoise')
データフレームを複数の列によってによって破壊的に並べ直す	df.sort_values(by=column, inplace=True)
データフレームの中のカラムを等量でビン数nで分割する	pd.qcut(df[col], n)
折れ線グラフを描画して色をハニーデューに指定する	plt.plot(データ列, データ列2, color='honeydew')
Pandasで、データ列を日付データにする	pd.to_datetime(ds)
＜オプション＞ミッドナイトブルー色を使う	color = 'midnightblue'
要素は集合のメンバーか調べる	element in aSet
カラーコードの三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c=rgb)
＜オプション＞グラフの色をダークシアンに設定する	color = 'darkcyan'
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
ヒストグラムを描画して、その色をドジャーブルーにセットする	plt.hist(データ列, color='dodgerblue')
リストと配列について散布図を描いて、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
配列とリストの暗いグラフを描画し、、色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
2つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
＜オプション＞ミディアムシアグリーン色を使う	color = 'mediumseagreen'
サブセットかどうかテストする	aSet.issubset(aSet2)
リストのオブジェクトが最初に見つかるインデックス	aList.index(element)
＜オプション＞グラフの色をライトグリーンにする	color = 'lightseagreen'
文字列が全て印字できるか	s.isprintable()
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
線グラフを描画してその色をコーンズシルクにセットする	plt.plot(データ列, データ列2, color='cornsilk')
折れ線グラフの丸マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
データフレームを複数の列によって並べ、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumslateblue')
データフレームの上n行を見る	df.head(n)
カウンタの項目をリストとして得る	aCounter.keys()
緑色の丸マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
n2がn以上、かつ、n3以下かどうか調べる	n <= n2 and n2 <= n3
Pandasでフォーマットfmtとしてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format=fmt)
データ列の中にいくつ文字列が存在するか求める	ds.isin([value]).sum()
折れ線グラフのバツ印を赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
ヒストグラムを描画して、色を小麦色に指定する	plt.hist(データ列, color='wheat')
ヒストグラムを描画して、その色をゴーストホワイトに変更する	plt.hist(データ列, color='ghostwhite')
線グラフを描画してその色をモカシンに指定する	plt.plot(データ列, データ列2, color='moccasin')
プラム色の線グラフを描画する	plt.plot(データ列, データ列2, color='plum')
折れ線グラフの下三角印を黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
リストとリストについて散布図を描画して、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
ストリームから1文字、読み込む	f.read(1)
折れ線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列, データ列2, color='darkolivegreen')
双方向キューのstart番目からend番目の部分値	collections.deque(itertools.islice(deq, start, end))
小数点数の床を求める	math.floor(x)
文字列の最後から改行を除く	s.rstrip('\n')
データフレームのカラムの中に日付データと文字列がいくつあるか求める	df[col].isin([value, value2]).sum()
データフレームの欠損値を前の行の値で埋める	df.fillna(method='ffill')
ストリームにxを文字列にして書く	f.write(str(x))
2を底とする実数の対数	math.log2(x)
折れ線グラフの色をダークサーモンにセットする	plt.plot(データ列, データ列2, color='darksalmon')
カウンタのktopをリストとして得る	aCounter.most_common(k)
線グラフを描画して、色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
折れ線グラフを描画して色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
nにn2を足して代入する	n += n2
濃いの折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
文字列内に小文字があるか調べる	any(c.islower() for c in s)
データフレームの列の文字列を欠損値にする	df[col].replace(s, np.nan)
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
データフレームの列のNaNをxで置換する	df[col].fillna(x)
文字列中に非大文字が含まれる	any(not c.isupper() for c in s)
マッピングのコピーを作る	dict(aDict)
淡いグラフの色を青色に設定する	plt.plot(xdata, ydata, linestyle='muted', color='b')
二つのタプルをネストする	collections.ChainMap(aDict, aDict2)
＜オプション＞リネン色を使用する	color = 'linen'
データフレームの欠損値を平均値にセットする	df.fillna(df.mean())
オブジェクトのバイト長	sys.getsizeof(obj)
＜オプション＞ダークグレー色を使用する	color = 'darkgray'
日付時刻データの曜日を整数で使う	aDatetime.weekday()
色差別ないグラフの線幅をnにセットする	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
データフレームの列の欠損値を最頻値にセットする	df[col].fillna(df[col].mode().iloc[0])
日付時刻データにn時間分、足す	aDatetime + datetime.timedelta(hours=n)
カラーコードの丸マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='o', c=rgb)
分子と分母から分数を新規生成する	fractions.Fraction(分子, 分母)
▽マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='v')
ヒストグラムを描画してその色をライムにセットする	plt.hist(データ列, color='lime')
空白を見る	' '
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列, データ列2, color='darksalmon')
ライトイエローにヒストグラムの色をセットする	plt.hist(データ列, color='lightyellow')
Pandasの日付型のデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
リストが少なくとも一つ真か調べる	any(aList)
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
パステル調のの折れ線グラフの線幅をnにする	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
データフレームのカラムがどの程度、分散しているか確認する	df[col].var()
データフレームを10の位で四捨五入して整数にする	df.round(-1).astype(int)
サンディーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='sandybrown')
折れ線グラフを描画して色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
明るいグラフの色を赤くする	plt.plot(xdata, ydata, linestyle='bright', color='r')
ケンドール順位相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
タプルを昇順に並べる	sorted(aTuple, reverse=False)
nがn2より大きいか調べる	n > n2
本日の日を使う	datetime.datetime.today().day
カウンタをシーケンスとして更新する	aCounter.update(iterable)
実数の天井を算出する	math.ceil(x)
＜オプション＞色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
双方向キューの右に要素を入れる	deq.append(element)
二つのデータ列を並べて箱ヒゲ図にする	plt.boxplot([データ列, データ列2])
現在の分数	datetime.date.today().minute
丸マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='o')
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
nの各桁の和を計算する	sum(map(int, str(n)))
ヒストグラムを描画して、その色をオーキッドに設定する	plt.hist(データ列, color='orchid')
＜オプション＞サドルブラウン色を用いる	color = 'saddlebrown'
折れ線グラフを描画して色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
ヒストグラムの色をロージーブラウンにセットする	plt.hist(データ列, color='rosybrown')
＜オプション＞グラフの色をリネンに変更する	color = 'linen'
文字列を記号に変換する	sympy.Symbol(s)
散布図のマーカーの大きさをnに指定する	plt.scatter(xdata, ydata, s=n)
＜オプション＞どの列もインデックスに設定しない	index_col = None
n割るn2を切り上げる	(n + n2 - 1) // n2
リストと配列の散布図に文字列というデータラベル用のラベルをつける	plt.scatter(xdata, xdata, label=s)
凡例を入れる	plt.legend()
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
折れ線グラフの色をパパイヤウィップに指定する	plt.plot(データ列, データ列2, color='papayawhip')
nをn2で割った余りをnに代入する	n %= n2
等差数列から乱数を生成する	random.randrange(start, end, step)
列の各値が何回出現するか見る	ds.value_counts()
データ列とリストの青色の淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
ヒストグラムを描画して、色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
異なる列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフにポイントマーカーを加える	plt.plot(データ列, データ列2, marker='.')
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
列を2回あわせた直積	itertools.product(iterable, repeat=2)
ゼロ埋めされたブール型の行列	np.zeros(要素数, dtype=np.int32)
色差別ないグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
文字列の終了位置以前に部分文字列が含まれる	s.find(sub, 0, end) != -1
タイムスタンプデータからn日分減算する	aDatetime - datetime.timedelta(days=n)
データフレームを複数の列によってソートする	df.sort_values(by=column)
データフレームのリストカラムの中に文字列と日付データがいくつあるか数える	df[aList].isin([value, value2]).sum()
文字列内にひとつでも大文字があるか調べる	any(c.isupper() for c in s)
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
マッピングの値に要素が含まれていないかどうか調べる	element not in aDict.values()
nを否定する	not n
Pandasのバージョンを見る	print(pd.__version__)
データフレームを関数によってまとめたグループ	df.groupby(関数)
データフレームを'A'列で昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
リストと配列の散布図を描画して、マーカーを丸にセットする	plt.plot(xdata, ydata, marker='o')
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフの四角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
折れ線グラフの▼マーカーのサイズをnにする	plt.plot(データ列, データ列2, marker='v', markersize=n)
カラーコードのポイントマーカーを配列とリストについての散布図に描く	plt.plot(xdata, ydata, marker='.', c=rgb)
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
＜オプション＞ダークシアグリーンを使う	color = 'darkseagreen'
表のそれぞれのグループごとの最大値を求める	df.groupby(column).max()
リストとリストについて散布図を描画して、左三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='<', c=rgb)
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgray'
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgray')
ヒストグラムを描画して、その色をデピンクに変更する	plt.hist(データ列, color='deeppink')
句読点文字を全部使う	string.punctuation
＜オプション＞色をライトスレイグレーに設定する	color = 'lightslategray'
文字列の最後	s[-1]
データフレームのリストカラムの中にが存在するか調べる	df[aList].isin([value])
列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
現在の分数を使う	datetime.date.today().minute
線グラフを描画して、色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
処理中の例外を情報を確認する	sys.exc_info()
＜オプション＞ゴールデンロッド色を用いる	color = 'goldenrod'
棒グラフを描画して、グラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
折れ線グラフの色をライトブルーにセットする	plt.plot(データ列, データ列2, color='lightblue')
データフレームのNaNを最大値で埋める	df.fillna(df.max())
折れ線グラフを描画してその色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフにサイズnの丸印を描画する	plt.plot(データ列, データ列2, marker='o', markersize=n)
データフレームからランダムにn行を抽出する	df.sample(n)
折れ線グラフを描画して、その色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
データフレームを各列毎に集約して、列の標準偏差を算出する	df.groupby(column)[column2].std()
＜オプション＞グラフの色をダークバイオレットに指定する	color = 'darkviolet'
青い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='b')
マッピングの値の一覧	aDict.values()
データフレームのリストカラムの欠損値を最小値で補う	df[aList].fillna(df[aList].min())
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
リストの最後を捨てる	aList[:-1]
＜オプション＞グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
線グラフの色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
ヒストグラムの色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
折れ線グラフを描画して、その色をオーキッドに指定する	plt.plot(データ列, データ列2, color='orchid')
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
黒色のパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
データ列が何月か確認する	ds.dt.month
折れ線グラフを描画して、その色をディープスカイブルーにする	plt.plot(データ列, データ列2, color='deepskyblue')
折れ線グラフを描画して、その色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
配列とリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
双方向キューの末尾にイテラブルの各値を追加する	deq.extend(iterable)
整数nの8進文字列を使う	oct(n)[2:]
列の重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
線グラフを描画して、色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
＜オプション＞インディアンレッド色を使う	color = 'indianred'
数列とリストについて破線グラフを描いて、色を色差別ないに変更する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
全ての空白文字	string.whitespace
散布図に左三角マーカーを使う	plt.plot(xdata, ydata, marker='<')
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
逆順の双方向キュー	reversed(deq)
変数がマイナス無限大に近づく時、数値の極限値を計算する	sympy.limit(e, z, -oo)
文字列をセパレータで分割する	s.split(sub)
辞書の値を列挙する	aDict.values()
xの絶対値を求める	abs(x)
データフレームのリスト列を正規表現でまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
データフレームの中で列と列の重複を見る	df.duplicated(subset=[column, column2])
文字列が文字列より辞書順で前か調べる	s < s2
配列の合計	np.sum(aArray)
x,yの複素数	complex(x, y)
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
組の合計	sum(aTuple)
＜オプション＞アクア色を使う	color = 'aqua'
リストをy軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
リストの中の最大値	max(aList)
文字列は組の要素かテストする	element in aTuple
グラフの描画でパステル調のカラーパレットを使う	sns.set(pallete='pastel')
2つのデータフレームを列をキーにして内部結合する	pd.merge(df, df2, on=column, how='inner')
データフレームを大きい順に列名リストによってによってソートする	df.sort_values(by=column, ascending=False)
データ列とリストについての散布図に黒いクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
グラフの描画で色差別ないカラーパレットを使う	sns.set(pallete='colorblind')
実数の三乗	x ** 3
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
線グラフの色をアクアに指定する	plt.plot(データ列, データ列2, color='aqua')
散布図を大バツマーカーとして描画する	plt.plot(xdata, ydata, marker='X')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
＜オプション＞グラフの色をダーク・スラテグレーに変更する	color = 'darkslategrey'
線グラフを描画してその色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
データフレームの列が正規分布からどの程度、尖っているか見る	df[col].skew()
濃いグラフを配列とリストで描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
グラフをポスター用に設定する	sns.set(context='poster')
nがn2未満、またはn3以上かどうか確認する	n < n2 or n >= n3
複数行対応としてパターンを事前にコンパイルする	re.compile(pattern, flag=re.MULTILINE)
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
リストとデータ列の散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
タプルは全て真か調べる	all(aTuple)
データフレームの中に文字列が含まれる	df.isin([value])
JSONフォーマットのバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
データフレームを各列毎にグループ化して列の合計を算出する	df.groupby(column)[column2].sum()
＜オプション＞パープルにグラフの色を設定する	color = 'purple'
文字列は全て数値か調べる	s.isnumeric()
データフレームの列を100の位で丸めて、整数にする	df[col].round(-2).astype(int)
シーケンスの各要素に対してpredicateFuncの適用が真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
データフレームから重複を残さず、消す	df.drop_duplicates(keep=False)
データフレームの列をNaNも加えてワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
データフレームの列がxでない行をフィルタする	df[df[column] == x]
＜オプション＞レモンシフォンを使う	color = 'lemonchiffon'
棒グラフを描画し、中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフを描画して、その色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
オブジェクトはリストクラスのインスタンスか調べる	isinstance(obj, list)
nが2で割り切れるか調べる	n % 2 == 0
nが組のどれかか調べる	n in aTuple
ヒストグラムを描画して、その色をアクアにする	plt.hist(データ列, color='aqua')
データ列をヒストグラムとして可視化する	plt.hist(ds)
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
アリスブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='aliceblue')
直後の値でデータ列の欠損値を埋める	ds.fillna(method='bfill')
文字列を空白で分割する	s.split()
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
線グラフを描画してその色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
データフレームのリストカラムの未入力値を平均値に設定する	df[aList].fillna(df[aList].mean())
数列を淡い色のヒストグラムとして描画する	plt.hist(xdata, color='muted')
データフレーム全体を降順でインデックスによって並べる	df.sort_index(ascending=False)
暗いの折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
オブジェクトは整数クラスか調べる	isinstance(obj, int)
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
ファイルパスを開いて]、追加ストリームを求める	open(filepath, mode='a')
リストとイテラブルのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
実数を小数点以下で丸める	round(x, n)
折れ線グラフを描画して、その色をローングリーンに指定する	plt.plot(データ列, データ列2, color='lawngreen')
モカシン色の線グラフを描画する	plt.plot(データ列, データ列2, color='moccasin')
リストをnから順番付けする	enumerate(aList, start=n)
ヒストグラムを描画して、その色をライトブルーに指定する	plt.hist(データ列, color='lightblue')
データフレームの正規分布に対する上下広がり	df.skew()
赤色の四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='r')
線グラフを描画して、その色をオールドレースに指定する	plt.plot(データ列, データ列2, color='oldlace')
カラーコードの三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
文字列から部分文字列を全て取り除く	s.replace(sub, '')
文字列を新しい文字列を使って置換する	s.replace(sub, newsub)
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
データフレームを表示するとき表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
行列と同じ大きさの空の配列を作成する	np.empty_like(aArray)
棒グラフを描画し、、xに幅を設定する	plt.bar(ラベル列, データ列, width=x)
データフレームの列の中に文字列があるか調べる	df[col].isin([value])
データフレームをJSONLファイルにBOMを付けて保存する	df.to_csv(filename, encoding='utf_8_sig')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をオレンジレッドにセットする	plt.plot(データ列, データ列2, color='orangered')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
行列の各要素の最大公約数	np.gcd(aArray, aArray2)
数値のインテグラルを行う	sympy.integrate(e)
配列とリストについて暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
ベクトルのユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
配列とリストについての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
変数をスワップする	x, y = y, x
二つのデータフレームを異なる列をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
変数について数値を積分する	sympy.integrate(e, z)
＜オプション＞コーンフラワーブルーに色を設定する	color = 'cornflowerblue'
リストとリストで濃いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
リストとリストの散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
各列毎にデータフレームをグループ化して、列の分散を計算する	df.groupby(column)[column2].var()
折れ線グラフの色をダークオーキッドに変更する	plt.plot(データ列, データ列2, color='darkorchid')
リストとリストの散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
エポック秒から日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
実行結果を黄色で表示できる文字列にする	f'\033[33m{value}\033[0m'
＜オプション＞パレットトルコイズ色を用いる	color = 'paleturquoise'
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
折れ線グラフに大きさnの△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
プラットホームがウィンドウズかどうか調べる	sys.platform.startswith('win32')
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()//60
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
データフレームのカラムを百の位で丸めて整数型にする	df[col].round(-2).astype(int)
ヒストグラムを描画してその色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
文字列の両端から不要な空白と改行を取り除く	s.strip()
折れ線グラフを描画してその色をアイボリーに指定する	plt.plot(データ列, データ列2, color='ivory')
データフレームのリストカラムの第二四分位数	df[aList].median()
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
線グラフを描画して、その色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
＜オプション＞ライトグリーン色を使う	color = 'lightseagreen'
＜オプション＞ライトグリーン色を使用する	color = 'lightseagreen'
データフレームをグループ化しそれぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
タイムスタンプデータが何年か知る	aDatetime.year
グラフの背景色を白くする	sns.set(style='whitegrid')
リストとリストについてカラーコードの濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームをインデックスによってソートする	df.sort_index()
辞書を階層化する	collections.ChainMap(aDict)
白色で値を表示する	print(f'\033[37m{value}\033[0m')
リストとリストのパステル調のグラフを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフに描画して、印を右三角にする	plt.plot(データ列, データ列2, marker='>')
十六進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
ふたつの集合は互いに素か調べる	aSet.isdisjoint(aSet2)
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
データフレームの内で、列と列の重複を見る	df.duplicated(subset=[column, column2])
文字列は数値か	s.isnumeric()
データフレームから重複する行を残さず、削除する	df.drop_duplicates(keep=False)
ファイルパスをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
ヒストグラムの色をオレンジレッドにセットする	plt.hist(データ列, color='orangered')
データフレームのリスト列の平均値を算出する	df[aList].mean()
ゼロ埋めされた整数型の行列を作る	np.zeros(要素数, dtype=np.int)
データフレームの列の文字列が文字列が含まれる行を選ぶ	df[df[column].str.contains(s)]
実数が正の数か確認する	x > 0
xが-9以上、9以下か調べる	-9 <= x <= 9
ふたつの関係が部分集合か確認する	aSet.issubset(aSet2)
数列とリストについて淡いグラフを描画してその色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
要素ひとつのタプル	(element,)
耐火レンガにヒストグラムの色を変更する	plt.hist(データ列, color='firebrick')
折れ線グラフの大バツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
データフレームを未入力値を含めて列の値でグループ分けする	df.groupby(column, dropna=False)
＜オプション＞スラッシュをセパレータで使う	sep = '/'
破線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
データフレームを列名リストによって破壊的に昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
文字列がタプルの要素	element in aTuple
ヒストグラムを描画して色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
列からn個、サンプリングする	random.sample(iterable, k=n)
後の行の値でデータ列の欠損値を埋める	ds.fillna(method='bfill')
ミントクリーム色の線グラフを描画する	plt.plot(データ列, データ列2, color='mintcream')
リストとリストについて散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
疑似乱数平均と標準偏差からを得る	random.normalvariate(mu=0.5, sigma=0.2)
両端キューの左にイテラブルの各要素を追加する	deq.extendleft(iterable)
Pandasで、書式としてデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format='%Y-%m-%d')
文字列の先頭から部分文字列を探す	s.find(sub)
データフレームのカラムの要約統計量	df[col].describe()
線グラフの色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
＜オプション＞フクシア色を使う	color = 'fuchsia'
＜オプション＞グラフの色をグリーンイエローに指定する	color = 'greenyellow'
2つのデータフレームを横方向に合体させる	pd.merge(df, df2)
二つの列によってデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
カウンタの項目数を見る	len(aCounter)
線グラフを描画してその色をミディアムバイオレットレッドにセットする	plt.plot(データ列, データ列2, color='mediumvioletred')
リストと配列で濃いの折れ線グラフを描画し、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
今日の日付を使う	datetime.date.today()
リストの先頭のn要素を取り除く	aList[n:]
リストとデータ列のパステル調のを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
リストを並べる	sorted(aList)
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
データフレームの列が正規分布からどれだけ、尖っているか見る	df[col].skew()
データフレームから1行だけ列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
変数名を項目名として、辞書を作る	dict(name=element)
折れ線グラフを描画して、その色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
散布図にカラーコードの▲マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
０で全要素を初期化された三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
折れ線グラフの色をライトスチールブルーにセットする	plt.plot(データ列, データ列2, color='lightsteelblue')
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
浮動小数点数の正弦	math.sin(x)
実数のハイパボリック・コサインの逆数	math.acosh(x)
データフレームを列名リストによって並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
＜オプション＞色をホットピンクに設定する	color = 'hotpink'
折れ線グラフを描画して、色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
濃いの色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
線グラフを描画して、その色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
列とシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームのカラムの中にある文字列の数をカウントする	df[col].isin([value]).sum()
整数に変換する	int(x)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
nがn2以下、または、n3以上	n <= n2 or n >= n3
＜オプション＞色をブランチドアーモンドに設定する	color = 'blanchedalmond'
線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
ヒストグラムを描画して色をペールグリーンにセットする	plt.hist(データ列, color='palegreen')
ヒストグラムの色をパールバイオレットレッドにセットする	plt.hist(データ列, color='palevioletred')
配列の平均	np.mean(aArray)
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
JSONLファイルにデータフレームをヘッダを付けずに保存する	df.to_csv(filename, header=None)
データフレームを列を用いてソートして、新しい行を振り直す	df.sort_values(columns).reset_index()
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
文字列を最後の部分文字列で二分し、前半の文字列を求める	s.rpartition(sub)[0]
プラットホームがMacOSかどうか調べる	sys.platform.startswith('darwin')
ヒストグラムを描画して、色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームのリスト列の中に日付データとが存在する	df[aList].isin([value, value2])
折れ線グラフのマーカーを▽にする	plt.plot(データ列, データ列2, marker='v')
配列と配列についての散布図に赤い▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
青色の明るいグラフをプロットする	plt.plot(xdata, ydata, linestyle='bright', color='b')
散布図に赤い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='r')
ヒストグラムの色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
色差別ない色の折れ線グラフを描画して、線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフの色をゲインズボロにする	plt.plot(データ列, データ列2, color='gainsboro')
折れ線グラフを描画してその色をダークサーモンに変更する	plt.plot(データ列, データ列2, color='darksalmon')
キューに要素をenqueueする	deq.appendleft(element)
折れ線グラフを描画して、その色をネイビーに変更する	plt.plot(データ列, データ列2, color='navy')
十六進数字を全部使う	string.hexdigits
暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
データフレームの列のNaNを直後の値に変更する	df[col].fillna(method='bfill')
リストとリストの散布図に菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D')
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
リストとリストについての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞読み込みモードを使う	mode = 'r'
ヒストグラムを描画して、その色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
＜オプション＞マーカーを星に変更する	marker = '*'
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
データフレームのリストカラムがどの程度、分散しているか確認する	df[aList].var()
グラフの色を淡くする	sns.set(pallete='muted')
実数を千の位で四捨五入する	round(x, -3)
＜オプション＞書き込みモードに変更する	mode = 'w'
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
実数が正か調べる	x > 0
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
凡例をグラフ中の(x,y)の位置に入れる	plt.legend(loc=(x, y))
nまでの奇整数列を得る	list(range(1, n, 2))
ファイルをSJISを用いてオープンする]	open(filepath, encoding='shift_jis')
明るい色でデータ列についてのヒストグラムをプロットする	plt.hist(xdata, color='bright')
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
左に両端キューの要素をn個分回転させる	deq.rotate(-n)
暗い色として散布図を描画する	plt.plot(xdata, ydata, c='dark')
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
ライトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightblue')
スクリプトの名前	sys.argv[0]
リストを境界値としてリストをビニングする	pd.cut(aList, aList)
データフレームの中の列を等間隔でn個にビンニングする	pd.cut(df[col], n)
データフレームの未入力値を最大値にする	df.fillna(df.max())
データフレームの各グループごとの分散	df.groupby(column).var()
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
本日が日曜日	datetime.datetime.today().weekday() == 6
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
行列間の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
散布図に赤い△マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
＜オプション＞ディムグレー色を使う	color = 'dimgray'
折れ線グラフを描画して、色をフクシアに変更する	plt.plot(データ列, データ列2, color='fuchsia')
データフレームの列がxより大きくx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
散布図を描画する	plt.scatter(xdata, ydata)
ファイルパスを書き込み用にSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームのリストカラムの値が欠損値か確認する	df[aList].isna()
線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
＜オプション＞ピーチパフ色を使う	color = 'peachpuff'
赤いバツマーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='x', c='r')
データ列の欠損値を中央値に指定する	ds.fillna(ds.median())
＜オプション＞ダークターコイズ色を使う	color = 'darkturquoise'
ファイルをSJISとして書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
インプレースに両端キューのデータを逆順にする	deq.reverse()
折れ線グラフに黄色いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
淡いグラフを配列とイテラブルで描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
リストと数列についての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
リストと数列について黒いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
データフレームのNaNを中央値で補う	df.fillna(df.median())
ヒストグラムを描画して、その色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
文字列リストをひとつの文字列にする	''.join(aStringList)
データフレームから指定された４列のみ抽出する	df[[column, column2, column3, column4]]
データ列のpercent分位数を求める	ds.quantile(percent/100)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームを'A'列と'B'列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
＜オプション＞グラフの線種を一点鎖線に設定する	linestyle = 'dashbot'
グラフの全般的に色を色差別なくする	sns.set(pallete='colorblind')
データフレームのカラムの文字列をNaNにする	df[col].replace(s, np.nan)
数列を暗い色の度数分布図で描画する	plt.hist(xdata, color='dark')
線グラフを描画して、色を紺碧にする	plt.plot(データ列, データ列2, color='azure')
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
辞書の項目名とそのエントリを列挙する	aDict.items()
コレクションを使う	import collections
折れ線グラフの色をダークスレートブルーに指定する	plt.plot(データ列, データ列2, color='darkslateblue')
リストと数列についての散布図を暗い色として描画する	plt.plot(xdata, ydata, c='dark')
数のn乗の浮動小数点数剰余	pow(x, n, y)
配列の要素ごとに加算する	aArray + aArray2
ヒストグラムを描画して色をパパイヤウィップに指定する	plt.hist(データ列, color='papayawhip')
既存のファイルをUTF8を用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
プロットのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
データ列とリストについてカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
ヒストグラムを描画してその色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
ファイルをバイナリ書き込みモードで開いて]fとする	f = open(filepath, mode='wb')
＜オプション＞左三角マーカーを描画する	marker = '<'
配列とリストの散布図を描画し、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
表を2つの列でソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
文字列から部分文字列を全て除去する	s.replace(sub, '')
データフレームを表示するとき表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
スレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slateblue')
文字列の終了位置より前に部分文字列が含まれるかどうか	s.find(sub, 0, end) != -1
リストとリストについての散布図に黒い左三角マーカーを描く	plt.plot(xdata, ydata, marker='<', c='k')
データフレームの値は欠損値か調べる	df.isna()
折れ線グラフを描画して、その色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
実数を実数にかける	x * y
＜オプション＞色をダークオレンジにする	color = 'darkorange'
Pandasでデータ列をフォーマットで日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
＜オプション＞菱形マーカーを用いる	marker = 'D'
実数を小数点以下第一位で丸める	round(x, 1)
表を列によって昇順に整列する	df.sort_values(by=column, ascending=True)
nとn2のXOR	n ^ n2
破壊的に複数の列を用いてでデータフレームをソートする	df.sort_values(by=column, inplace=True)
タプルのの一覧を参照する	aDict.values()
ベクトルの行ごとの最大を求める	np.max(aArray, axis=1)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
ダークオレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorange')
浮動小数点数で実数を除する	x / y
線グラフの色をローングリーンに指定する	plt.plot(データ列, データ列2, color='lawngreen')
＜オプション＞色をカーキにセットする	color = 'khaki'
イテラブルとリストについての散布図にバツマーカーをプロットする	plt.plot(xdata, ydata, marker='x')
線グラフの色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
＜オプション＞スレートブルーを使う	color = 'slateblue'
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
配列と数列の折れ線グラフを描く	plt.plot(xdata, ydata)
＜オプション＞エンコーディングをEUCに設定する	encoding = 'euc_jp'
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
折れ線グラフのダイアモンド印を赤くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
ダークシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkseagreen')
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームの列がxより多くx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
文字列をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
浮動小数点数のサイン	math.sin(x)
ふたつの集合がセットと互いに素かテストする	aSet.isdisjoint(aSet2)
ヒストグラムを描画して、その色を珊瑚に設定する	plt.hist(データ列, color='coral')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
表から列を二つだけ選択する	df[[column, column2]]
データフレームとデータフレームのカラムを連結する	pd.concat([df, ds], axis=1)
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
タプルの最後の要素	aTuple[-1]
データフレームの欠損値を平均値で補う	df.fillna(df.mean())
列を文字列に変換して一つにする	''.join(map(str, iterable))
nプラスn2	n + n2
二つのオブジェクトは等しいか確認する	obj == obj2
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
リストを青色にする	f'\033[34m{value}\033[0m'
データフレームの中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
現在が月曜日か調べる	datetime.datetime.today().weekday() == 0
列によってデータフレームを並べて、更新する	df.sort_values(by=column, inplace=True)
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategrey')
データフレーム全体をインデックスによって降順で並べる	df.sort_index(ascending=False)
小数点数が非数か調べる	math.isnan(x)
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
重なりを見やすく散布図を暗い色のマーカーとして描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームのリストカラムの欠損値を最頻値で補う	df[aList].fillna(df[aList].mode().iloc[0])
イテラブルとリストとしてパステル調のの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
カラーコードのバツマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='x', c=rgb)
組をリストに変換する	list(aTuple)
まとめてreplに正規表現patternでデータフレームのリスト列の値を置き換える	df[aList].replace(pattern, repl, regex=True)
xにヒストグラムの透明度を変更する	plt.hist(データ列, alpha=x)
折れ線グラフを描画してその色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
折れ線グラフを描画して、その色を淡い茶色に指定する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
整数nはリストのどれかか	n in aList
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
カラムの歪度	ds.kurt()
ベクトルと同じ大きさの空行列を作る	np.empty_like(aArray)
線幅nのバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
折れ線グラフを描画してその色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
配列のヒストグラムをプロットする	plt.hist(aArray)
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
パステル調の色の柱状図として配列をプロットする	plt.hist(xdata, color='pastel')
本日をタプルに変換する	datetime.datetime.today().timetuple()
Pandasでデータ列のUNIX秒から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
全要素を0で初期化されたベクトル	np.zeros(要素数)
フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
データフレームから指定された二つの列のみ抽出する	df[[column, column2]]
リストを文字列リストに変換して、空白でつなげる	' '.join(map(str, iterable))
配列とイテラブルの黒い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
ふたつの集合の∪	aSet.union(aSet2)
棒を描く	plt.bar(ラベル列, データ列)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームの列のユニークな要素	df[col].unique()
文字列を右寄せにする	s.rjust(文字列幅)
リストとリストについて散布図を描画し、マーカーの色を明るいにセットする	plt.plot(xdata, ydata, c='bright')
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
ファイルパスをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
環境のエンコーディング	sys.getdefaultencoding()
最初のコマンド引数	sys.argv[1]
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
淡い色としてリストについてのヒストグラムを描く	plt.hist(xdata, color='muted')
折れ線グラフを描画して色をダークマゼンタに指定する	plt.plot(データ列, データ列2, color='darkmagenta')
折れ線グラフに線幅nの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
xを論理値に変換する	bool(x)
ひとつでも大文字が文字列内に含まれる	any(c.isupper() for c in s)
リストとリストの青い明るいグラフをプロットする	plt.plot(xdata, ydata, linestyle='bright', color='b')
xが1もしくは2、もしくは3に等しいかどうか確認する	x == 1 or x == 2 or x == 3
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
既存のファイルをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフに描画して、マーカーを三角印にする	plt.plot(データ列, データ列2, marker='^')
現在が木曜日か	datetime.datetime.today().weekday() == 3
赤い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
有理数を使う	import fractions
浮動小数点数を整数に変換する	int(x)
日付データにn週間を足す	aDate + datetime.timedelta(weeks=n)
配列の列ごとの合計値	np.sum(aArray, axis=0)
リストとリストについての散布図にカラーコードの大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c=rgb)
ファイルを開いて]、バイナリストリームを見る	open(filepath, mode='rb')
2つのデータフレームを横方向にマージする	pd.merge(df, df2)
線グラフの色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
ヒストグラムを描画して、その色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
ヒストグラムを描画して、その色を青紫に設定する	plt.hist(データ列, color='violet')
nがn2で割り切れないか確認する	n % n2 != 0
配列の行ごとの分散	np.var(aArray, axis=1)
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
マッピングに別の辞書の項目を更新する	aDict.update(aDict2)
タプルのn番目以降の部分を取り出す	aTuple[n:]
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
配列から重複を除いた配列を作る	np.unique(aArray)
折れ線グラフを描画して、その色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
＜オプション＞先頭カラムをインデックスに設定する	index_col = 0
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
書き込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='w')
読み込みできるようにファイルをオープンする]	open(filepath, mode='r')
カウンタのユニークな項目を列挙する	list(aCounter)
＜オプション＞未入力値を先頭に来るようにする	na_position = 'first'
中央値でデータフレームの列の未入力値を埋める	df[col].fillna(df[col].median())
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
文字列中に非アルファベットが含まれる	any(not c.isalpha() for c in s)
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
＜オプション＞シャルトリューズにグラフの色を設定する	color = 'chartreuse'
nのn2乗を求める	n ** n2
データフレームをグループ化し、それぞれの列に対し最小値を算出する	df.groupby(column)[column2].min()
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategray')
データフレームの列の平均値	df[col].mean()
リストとリストについて破線を描いて、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='goldenrod')
折れ線グラフを描画して、その色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
＜オプション＞色をブラックにする	color = 'black'
配列の内積	np.dot(aArray, aArray2)
Pandasで、フォーマットを使ってデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
データ列を折れ線グラフに描画して、マーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
表データのそれぞれのグループごとの最小値を計算する	df.groupby(column).min()
カラーコードの大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X', c=rgb)
要素ひとつのりスト	[element]
タイムスタンプデータをタプルにする	aDatetime.timetuple()
マッピングの項目を列挙する	aDict.values()
配列と数列の折れ線をプロットしてuntitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
ヒストグラムを描画して、その色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
＜オプション＞マゼンタに色を設定する	color = 'magenta'
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
表データを列名リストによって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
黒い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
折れ線グラフの右三角印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
折れ線グラフのバツマーカーを青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
三変数の最小値	min(x, y, z)
文字列が文字列リストのいづれか確認する	s in aStringList
タイムスタンプデータがタイムスタンプデータと同時かどうか調べる	aDatetime == aDatetime2
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
リスト内の要素が全て真	all(aList)
デックが空でない	len(deq) != 0
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
＜オプション＞グラフの色をサーモンに指定する	color = 'salmon'
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
項目名がマッピングに存在する	key in aDict
全ての印字できる文字	string.printable
色差別ない色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
文字列一つのタプル	(element,)
折れ線グラフを描画して、色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
折れ線グラフのマーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
データ列を10の位で四捨五入する	ds.round(-1)
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
＜オプション＞パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
＜オプション＞シスルを使う	color = 'thistle'
配列を分割数nを使って分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
カラーコードの上三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
数をn乗する	x ** n
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
xが一桁の数か	-9 <= x <= 9
箱髭図を２つ並べる	plt.boxplot([データ列, データ列2])
パステル調のの折れ線グラフをプロットし、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
データフレームの中にいくつがあるか数える	df.isin([value]).sum()
キューの末尾から値を削除する	deq.pop()
濃い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
積み上げ棒グラフをプロットする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
nとn2のビット積	n & n2
星マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='*')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
文字列が全て小文字か調べる	s.islower()
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
オプションで標準エラーを出力先にする	file = sys.stderr
文字列と文字列とデータラベルをグラフに付ける	plt.legend([s, s2])
ヒストグラムを描画して、その色をグリーンに設定する	plt.hist(データ列, color='green')
数を実数で割った余り	x % y
上限nの両端キューを用意する	collections.deque(maxlen=n)
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
行列の行ごとの最小値を求める	np.min(aArray, axis=1)
グラフにグリッド線を入れる	plt.grid(True)
実数の二進対数	math.log2(x)
マッピングの項目名に対応した値	aDict.get(key)
折れ線グラフを描画して、その色をオリーブに指定する	plt.plot(データ列, データ列2, color='olive')
濃いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
散布図に黒色の菱形マーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
プラットホーム名	sys.platform
列を正規表現patternでまとめて置き換える	ds.replace(pattern, repl, regex=True)
データフレームを表示するとき、最大列数を増やす	pd.set_option('display.max_columns', n)
文字列の終了位置より前に部分文字列が含まれないか判定する	s.find(sub, 0, end) == -1
淡いの色を赤くする	plt.plot(xdata, ydata, linestyle='muted', color='r')
色差別ない色でリストとリストの散布図を描く	plt.plot(xdata, ydata, c='colorblind')
データフレームのカラムを正規表現patternでまとめてreplに変更する	df[col].replace(pattern, repl, regex=True)
プロットで使うフォントをfontNameに指定する	sns.set(font=fontName)
リストとイテラブルについての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
部分文字列を文字列の接頭辞から除去する	s.removeprefix(sub)
ヒストグラムを描画してその色をホワイトスモークに指定する	plt.hist(データ列, color='whitesmoke')
＜オプション＞貝殻色を用いる	color = 'seashell'
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
折れ線グラフの三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
オプションで、標準出力に出力する	file = sys.stdout
データフレームの列のユニークな値	df[col].unique()
リストとデータ列のカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
辞書からカウンタを準備する	collections.Counter(aDict)
マッピングのコピーを作成する	dict(aDict)
データフレームを列によってで破壊的に整列する	df.sort_values(by=column, inplace=True)
データフレームの欠損値を平均値に指定する	df.fillna(df.mean())
データ列を分割する	pd.cut(ds, aList)
リストを引数として展開して表示する	print(*aList, sep=',')
＜オプション＞色をネイビーにセットする	color = 'navy'
＜オプション＞グラフの色をダークゴールデンロッドにセットする	color = 'darkgoldenrod'
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列, データ列2, color='ivory')
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
＜オプション＞耐火レンガ色を使う	color = 'firebrick'
データフレームの列のpercent分位数を求める	df[col].quantile(percent/100)
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
＜オプション＞パパイヤウィップ色を用いる	color = 'papayawhip'
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
＜オプション＞グラフの色をライトブルーに変更する	color = 'lightblue'
マップのキー一覧	list(aDict)
＜オプション＞サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
データフレームのリストカラムの最頻値	df[aList].mode()
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
＜オプション＞スラグレーにグラフの色を設定する	color = 'slategrey'
データフレームの列と列の相関行列ピアソン積率相関係数を用いて	df[[column, column2]].corr(method='pearson')
文字列タブ区切りのファイルからn番目のカラムをインデックスとしてCSVを読む	pd.read_csv(filename, index_col=n)
数列とリストについてカラーコードの濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
無限数列	itertools.count()
配列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
ヒストグラムの線のスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
破線グラフの色を濃いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
データフレームのカラムの日	df[col].dt.day
nを十六進リテラルに変換する	hex(n)
集合を空にする	aSet.clear()
降順にデータフレームを列によってによってソートする	df.sort_values(by=column, ascending=False)
データフレームの指定された三列を抽出する	df[[column, column2, column3]]
データフレームの列のユニークな要素を見る	df[col].unique()
カラーコードの三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームの中の未入力値がある行を削除する	df.dropna()
イテラブルを文字列リストに変換して空白で一つにする	' '.join(map(str, iterable))
タイムスタンプデータは日付時刻データより早い	aDatetime < aDatetime2
数列とリストの青い色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
オブジェクトはバイト列クラスのインスタンスか確認する	isinstance(obj, bytes)
リストが空でないか調べる	len(aList) != 0
オプションでファイルを出力先にする	file = sys.open(filename, 'w')
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
赤い丸マーカーを数列とイテラブルについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c='r')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列, データ列2, marker='.')
折れ線グラフの丸マーカーを黄色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
＜オプション＞コーラルを使う	color = 'coral'
ASCII限定として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
整数を整数にする	int(x)
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
データフレームを丸めて、整数型にする	df.round().astype(int)
文字列をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
プロットを論文用に設定する	sns.set(context='paper')
＜オプション＞色をホットピンクに指定する	color = 'hotpink'
オブジェクトのプロパティの値を値に変更する	setattr(obj, プロパティ名, 値)
ヒストグラムを描画して、その色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
オブジェクトはリストかタプルか	isinstance(obj, (list)
文字列が漢字かどうか確認する	('\u4E00' <= ch <= '\u9FD0')
重なりを見やすくリストとリストについての散布図を明るい色として描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
青色で文字列をプリントする	print(f'\033[34m{value}\033[0m')
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
散布図にカラーコードのポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c=rgb)
２数の最小値	min(x, y)
棒を描画し、幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
＜オプション＞サーモン色を使う	color = 'salmon'
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgray')
赤いパステル調のの折れ線グラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='r')
十六進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームは正規分布からどの程度、歪んでいるか見る	df.kurt()
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
＜オプション＞耐火レンガを用いる	color = 'firebrick'
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
折れ線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
データ列と数列についての散布図に△マーカーを描画する	plt.plot(xdata, ydata, marker='^')
浮動小数点数が整数か調べる	x.is_integer()
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
小さい順にデータフレームを二つの列によってソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
リストとリストの濃いを描画し、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='b')
線グラフの色をシャルトリューズにセットする	plt.plot(データ列, データ列2, color='chartreuse')
グラフのカラーテーマを淡くする	sns.set(pallete='muted')
線グラフを描画して、色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
データフレームを表示するとき、列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
＜オプション＞グラフの色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
赤い▼マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c='r')
ヒストグラムを描画して、その色をミディアムバイオレットレッドに変更する	plt.hist(データ列, color='mediumvioletred')
赤色の▼マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
リストを明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
データフレームのカラムは正規分布からどの程度尖っているか確認する	df[col].skew()
＜オプション＞色をサーモンに指定する	color = 'salmon'
データフレームとしてエクセルデータファイルを読み込む	pd.read_excel(filename)
集合が空でないか	len(aSet) != 0
再帰の最大回数	sys.getrecursionlimit()
二つのカウンタの共通する値	aCounter & aCounter2
表データの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
JSON形式のファイル入力を辞書に変換する	json.load(fin)
分数をインポートする	import fractions
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
ふたつの集合がセットと交わりを持たない	aSet.isdisjoint(aSet2)
データフレームから列を３つ選択する	df[[column, column2, column3]]
＜オプション＞▲マーカーを加える	marker = '^'
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
nをn2分の1にする	n /= n2
数式の変数についてのn階微分を算出する	sympy.diff(e, z, n)
カウンタからリストを回数して引く	aCounter.subtract(iterable)
＜オプション＞文字コードをEUCに設定する	encoding = 'euc_jp'
真部分集合かどうか調べる	aSet < aSet2
データフレームのカラムを小数点以下n桁で四捨五入する	df[col].round(n)
最後から部分文字列で文字列を区切る	s.rsplit(sub)
＜オプション＞エクセルファイルのシートの名前をnamesに変更する	sheet_name = names
表データの列を行に設定する	df.set_index(column)
ヒストグラムを描画して、色をゴールドに設定する	plt.hist(データ列, color='gold')
ヒストグラムの色をペルーに変更する	plt.hist(データ列, color='peru')
数列とリストの破線を描画して、その色を明るいに指定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
＜オプション＞色を小麦色に設定する	color = 'wheat'
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
線グラフの色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
predicateFuncが真とならないイテラブルの要素を得る	itertools.dropwhile(predicateFunc, iterable)
データフレームの中にいくつ日付データが存在するか求める	df.isin([value]).sum()
事前に大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
散布図にパステル調の色のマーカーを使う	plt.plot(xdata, ydata, c='pastel')
ピアソン相関係数としてデータフレームの相関行列	df.corr(method='pearson')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
数列とデータ列の淡いグラフをプロットしてその色を黒くする	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームのリストで指定された列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
文字列に日本語が含まれるか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
△マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^')
淡いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
辞書を浅くコピーする	dict(aDict)
データフレームから指定された列名一覧の列を取り出す	df[columns]
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
データフレームのカラムの欠損値を中央値で補う	df[col].fillna(df[col].median())
＜オプション＞ダークカーキ色を使う	color = 'darkkhaki'
赤色の色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
配列とデータ列について淡い色の折れ線を描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
縦方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
データフレームは正規分布からどの程度、歪んでいるか確認する	df.kurt()
折れ線グラフの右三角印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
＜オプション＞分割記号をコロンにする	sep = ':'
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
降順に列によってによってデータフレームを並べる	df.sort_values(by=column, ascending=False)
データフレームのリストカラムの中にいくつ日付データが含まれるか数える	df[aList].isin([value]).sum()
ファイルから書き込みストリームを開き]fとする	f = open(filepath, mode='w')
上限長を指定して、両端キュー	collections.deque(maxlen=n)
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
実数の余弦の逆数	math.acos(x)
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
オプションで標準エラーを使う	file = sys.stderr
文字列中の小文字を大文字に変換する	s.upper()
折れ線グラフに線幅nの上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
文字列の右側から部分文字列を除く	s.rstrip(sub)
部分文字列を文字列の末尾から探す	s.rfind(sub)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
二つのオブジェクトが同一	obj is obj2
データ列を四捨五入して、整数型にする	ds.round().astype(int)
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
＜オプション＞色をロイヤルブルーに変更する	color = 'royalblue'
＜オプション＞ブラックに色を指定する	color = 'black'
キューの値を左にn個分ローテンションする	deq.rotate(-n)
SJISとしてファイルパスをオープンする]	open(filepath, encoding='shift_jis')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=0)
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
データフレームの中の列と列に重複があれば消す	df.drop_duplicates(subset=[column, column2])
行列の行	aArray[行番号]
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
線グラフの色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
線グラフの色をインディアンレッドに変更する	plt.plot(データ列, データ列2, color='indianred')
マッピングのキーを列挙する	list(aDict)
色差別ないカラーパレットをグラフの描画で用いる	sns.set(pallete='colorblind')
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
データフレームのカラムの値をValueMapで一度に置換する	df[col].replace(ValueMap)
ハニーデュー色の線グラフを描画する	plt.plot(データ列, データ列2, color='honeydew')
文字列中にひとつでも非大文字がある	any(not c.isupper() for c in s)
データ列の中にあると文字列の個数をカウントする	ds.isin([value, value2]).sum()
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
散布図に黒色の右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>', c='k')
数式を数値に変換する	float(e)
＜オプション＞グラフの色を赤に設定する	color = 'red'
＜オプション＞エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
淡い色のヒストグラムで数列を描画する	plt.hist(xdata, color='muted')
ヒストグラムを描画して、その色をスノーに指定する	plt.hist(データ列, color='snow')
折れ線グラフの色をサンディーブラウンに指定する	plt.plot(データ列, データ列2, color='sandybrown')
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
列のユニークな値の個数を調べる	df[col].nunique()
データフレームのカラムの曜日数を使う	df[col].dt.dayofweek
データフレームのNaNをxで埋める	df.fillna(x)
データフレームのカラムの値を正規表現patternでまとめて置き換える	df[col].replace(pattern, repl, regex=True)
BOMを付けてJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
nがn2より小さいか調べる	n < n2
リストとデータ列の散布図を色差別ない色を用いて重なりを見やすくプロットする	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
＜オプション＞スノーを使う	color = 'snow'
ピアソンでデータフレームのリストカラムの相関行列	df[aList].corr(method='pearson')
＜オプション＞グラフの色をオリベドラブに設定する	color = 'olivedrab'
黄色いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
データ列の中の欠損値の合計を数える	ds.isna().sum()
＜オプション＞色をローングリーンに変更する	color = 'lawngreen'
リストとイテラブルの黒色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
1で全要素を初期化されたベクトルを作成する	np.ones(要素数, dtype=np.int)
データフレームのカラムの時を見る	df[col].dt.hour
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
辞書を多重集合にする	collections.Counter(aDict)
n足すn2	n + n2
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
＜オプション＞アンティークホワイト色を使用する	color = 'antiquewhite'
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
リストと配列について散布図を描画し、、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
リストにシーケンスを続ける	itertools.chain(iterable, iterable2)
データ列の第一四分位数	ds.quantile(0.25)
グラフの大きさを縦height横widthに設定する	plt.figure(figsize=(width, height))
ゼロ埋めされた行列	np.zeros(要素数)
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
カウンタからタプルを引く	aCounter.subtract(aDict)
データ列は何月か見る	ds.dt.month
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
複数行対応としてパターンで文字列を分ける	re.split(pattern, s, flags=re.MULTILINE)
＜オプション＞グラフの色を黄緑に指定する	color = 'chartreuse'
本日の年数を使う	datetime.datetime.today().year
値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
＜オプション＞サドルブラウンに色を設定する	color = 'saddlebrown'
プロットの大きさを縦height横widthに指定する	plt.figure(figsize=(width, height))
＜オプション＞グラフの色をシャルトリューズに設定する	color = 'chartreuse'
カウンタから最も頻出の項目の件数	aCounter.most_common()[1]
列名を指定された列名リストに置き換える	df.columns = columns
数値が両端キューの中に含まれてる	element in deq
replにデータフレームの値を正規表現patternでまとめて置き換える	df.replace(pattern, repl, regex=True)
データフレームの列の名前一覧で指定したカラムを削除する	df.drop(columns, axis=1)
折れ線グラフを描画してその色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
データフレームのリスト列の欠損値を前の値で埋める	df[aList].fillna(method='ffill')
線グラフを描画して、その色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
シエナ色の線グラフを描画する	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフの色をマゼンタに変更する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフを描画して、その色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
全要素を０で初期化された整数型の行列	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフを描画する	plt.plot(xdata, ydata)
パステル調の色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
BOM付きを使って書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
＜オプション＞モカシン色を使う	color = 'moccasin'
データフレームのリストカラムの欠損値を中央値に増やす	df[aList].fillna(df[aList].median())
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
日本語フォントをグラフで表示可能なようにする	sns.set(font='IPAexGothic')
ミッドナイトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='midnightblue')
淡いの折れ線の線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
本日が何月か知る	datetime.datetime.today().month
プログラムの実行を正しく終了する	sys.exit(0)
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategrey')
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
ファイルパスを追加できるように文字列の示すエンコーディングを使ってオープンする]	open(filepath, mode='a', encoding=s)
双方向キューの右側から値を削除する	deq.pop()
データフレームを各列毎に集約して、列の分散を計算する	df.groupby(column)[column2].var()
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
日付データからn分減らす	aDate - datetime.timedelta(minutes=n)
部分文字列かどうかテストする	sub in s
文字列を左トリムする	s.lstrip()
二つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
データフレームを複数の列でグループ化し、要約統計量を求める	df.groupby(columns).describe()
ファイルパスを書き込みモードとしてオープンする]	open(filepath, mode='w')
日付時刻データの時間数	aDatetime.hour
最適な位置に凡例を入れる	plt.legend(loc='best')
配列とリストについて散布図をプロットし、、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
ヒストグラムを描画して、その色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
オブジェクトのプロパティの値を指定する	setattr(obj, プロパティ名, 値)
折れ線グラフを描画して、色をトマトに指定する	plt.plot(データ列, データ列2, color='tomato')
ヒストグラムを描画して、その色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ファイルを追加用に開き]、fとする	f = open(filepath, mode='a')
ヒストグラムの色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='turquoise')
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
ファイルパスをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
データフレームを列を用いてで破壊的にソートする	df.sort_values(by=column, inplace=True)
リストと配列の折れ線グラフを透明度alphaで描く	plt.plot(xdata, ydata, alpha=alpha)
nがn2より大きいか	n > n2
文字列を最後の部分文字列で二つに区切って後半の文字列を使う	s.rpartition(sub)[-1]
文字列の両端から部分文字列を消す	s.strip(sub)
実数の余弦	math.cos(x)
最大値・最小値の範囲で一様な疑似乱数	random.uniform(最小値, 最大値)
数列を濃い色の柱状図で描く	plt.hist(xdata, color='deep')
黒い濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフを描画して、色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
＜オプション＞グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
リストの要素を逆順にする	aList[::-1]
赤いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
変数を太文字にする	f'\033[1m{value}\033[0m'
＜オプション＞グラフの色を貝殻に設定する	color = 'seashell'
文字コードtextでファイルを書き込み用に開く]	open(filepath, mode='w', encoding=text)
nCkを求める	math.comb(n, k)
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
要素が集合のメンバーか調べる	element in aSet
リストとイテラブルで明るいを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
Pandasで、データフレームのcollのエポック秒からPandasの日付型にする	pd.to_datetime(df[col], unit='s', utc=True)
データフレームを関数の値によってまとめた表を使う	df.groupby(関数)
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
＜オプション＞EUCを用いる	encoding = 'euc_jp'
ヒストグラムを描画して、色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
折れ線グラフに黒い四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
要素をセットから除去する	aSet.remove(element)
＜オプション＞ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
折れ線グラフの菱形マーカーを緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
列の欠損値をxに設定する	ds.fillna(x)
＜オプション＞青紫にグラフの色を設定する	color = 'violet'
＜オプション＞ロージーブラウン色を使う	color = 'rosybrown'
＜オプション＞書き込みモードを使う	mode = 'w'
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
リストとリストについての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
散布図に黒い▽マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
データ列のNaNを平均値で埋める	ds.fillna(ds.mean())
折れ線グラフを描画して、色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
標準出力を	sys.stdout
日付データの曜日を整数で見る	aDate.weekday()
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
＜オプション＞ゴールドを使う	color = 'gold'
データフレームとデータフレームの列をつなぐ	pd.concat([df, ds], axis=1)
行列のユニークな要素	np.unique(aArray)
ひとつでもアルファベットが文字列内にあるか調べる	any(c.isalpha() for c in s)
漢字が文字列に含まれる	re.search('[\u4E00-\u9FD0]', s)
＜オプション＞グリーンにグラフの色を設定する	color = 'green'
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
イテラブルとデータ列の散布図を描画し、、マーカーを▽に設定する	plt.plot(xdata, ydata, marker='v')
辞書のキーを列挙する	list(aDict)
折れ線グラフでデータフレームのカラムとカラムを描く	plt.plot(df[col], df[col2])
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
配列をリストを境界値として分割する	pd.cut(aArray, aList)
折れ線グラフの色をラベンダーブラッシュにセットする	plt.plot(データ列, データ列2, color='lavenderblush')
データフレームのカラムの分散を算出する	df[col].var()
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
＜オプション＞スラグレー色を使う	color = 'slategrey'
＜オプション＞シエナにグラフの色を設定する	color = 'sienna'
青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
配列とリストについて破線をプロットして、その色を暗いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
キーが辞書上で定義済みか	key in aDict
データフレームの列の欠損値を平均値で補う	df[col].fillna(df[col].mean())
折れ線グラフの色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
リストとリストの青い暗いを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
データフレームの最初を見る	df.head()
データ列を折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
文字列はリストに含まれない	element not in aList
重なりを見やすく散布図を色差別ない色のマーカーで描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
リストとデータ列について明るいを描画し、、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='b')
折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linewidth=n)
＜オプション＞色をグレーに設定する	color = 'gray'
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
組の末尾のn要素を取り除く	aTuple[:-n]
折れ線グラフの色をモカシンに指定する	plt.plot(データ列, データ列2, color='moccasin')
表データを使う	import pandas as pd
リストとリストについて散布図を描画し、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
黒い左三角マーカーをリストと数列についての散布図に描画する	plt.plot(xdata, ydata, marker='<', c='k')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
タプルの末尾のn要素を除く	aTuple[:-n]
ヒストグラムを描画してその色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
ヒストグラムを描画してその色をミスティローズにする	plt.hist(データ列, color='mistyrose')
データフレームの列の値がxより多いデータを抽出する	df[df[column] > x]
データフレームのリスト列の欠損値を第二四分位数で補う	df[aList].fillna(df[aList].median())
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
リストをn個に分割する	pd.cut(aList, n)
淡いグラフの色をカラーコードにセットする	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
表を列の値によってグループ化する	df.groupby(column)
＜オプション＞グラフの色をベージュに変更する	color = 'beige'
リストの全値をクリアにする	aList.clear()
折れ線グラフの▲マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
散布図にカラーコードの四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c=rgb)
ベクトルの内積を計算する	np.dot(aArray, aArray2)
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
文字列の無限なイテラブル	itertools.repeat(element)
データフレームのそれぞれのグループごとの分散を計算する	df.groupby(column).var()
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
行列の列ごとの最大値を計算する	np.max(aArray, axis=0)
組の先頭を除く	aTuple[1:]
ピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='pink')
折れ線グラフを描画して、色を黄色くする	plt.plot(データ列, データ列2, color='y')
データフレームのpercent分位数を算出する	df.quantile(percent/100)
折れ線グラフの色を淡いピンク色に変更する	plt.plot(データ列, データ列2, color='lightpink')
表データの列に重複があればマスクする	df.duplicated(subset=column)
配列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
実数を整数に変換する	int(x)
＜オプション＞グラフの色をターコイズに設定する	color = 'turquoise'
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
散布図を赤いポイントマーカーで描く	plt.plot(xdata, ydata, marker='.', c='r')
データフレームの記述統計量	df.describe()
データフレームを列によってで降順にソートする	df.sort_values(by=column, ascending=False)
リストを色差別ない色の柱状図として描画する	plt.hist(xdata, color='colorblind')
＜オプション＞色をライムグリーンに設定する	color = 'limegreen'
Pandasで、データフレームのcollのUNIX秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
＜オプション＞シルバー色を使う	color = 'silver'
＜オプション＞サドルブラウン色を使う	color = 'saddlebrown'
データフレームのカラムの月	df[col].dt.month
日付時刻データは何日か知る	aDatetime.day
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
リストとリストについて破線グラフを描画し、、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
折れ線グラフを描画して色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフに緑色の三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
＜オプション＞UTF8を使う	encoding = 'utf-8'
文字列中の正規表現を新しい文字列で置換する	re.sub(pattern, newsub, s)
リストとデータ列の散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
＜オプション＞ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
散布図に赤色の星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
横棒グラフを描画し、、幅をxにセットする	plt.barh(ラベル列, データ列, width=x)
数値をプリントする	print(value)
ビン数nでデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストを複製する	aList.copy()
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
数式を因数分解する	sympy.factor(e)
リストと配列の黒色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
青色の線グラフを描画する	plt.plot(データ列, データ列2, color='blue')
日付データが月曜日か調べる	aDate.weekday() == 0
エクセルデータファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkmagenta')
標準入力から1行分改行を取り除いて読み込む	sys.stdin.readline().rstrip()
＜オプション＞アクア色を使用する	color = 'aqua'
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
TSVファイルファイル名がかどうか調べる	filename.endswith('.tsv')
＜オプション＞ポイントマーカーを使用する	marker = '.'
自然数の階乗	math.factorial(n)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
リストとリストについて散布図を描いて、マーカーを△に設定する	plt.plot(xdata, ydata, marker='^')
線グラフを描画して、その色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
文字列が漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
リストとリストの折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
第二四分位数でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].median())
計算機イプシロン	sys.float_info.epsilon
＜オプション＞スプリンググリーン色を使う	color = 'springgreen'
リストと数列について散布図を描画してマーカーの色を明るいにセットする	plt.plot(xdata, ydata, c='bright')
データフレームのカラムの値は未入力値か調べる	df[col].isna()
暗い色の折れ線を描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
データフレームを1000の位で四捨五入して、整数にする	df.round(-3).astype(int)
標準入力から1行読み込んで改行を取り除く	sys.stdin.readline().rstrip()
リストとリストの青色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
正規化された度数分布図を描く	plt.hist(データ列, density=True)
nが奇数か確認する	n % 2 == 1
緑色の左三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
ふたつの関係がスーパーセットか確認する	aSet.issuperset(aSet2)
＜オプション＞ミディアムシアグリーンに色を設定する	color = 'mediumseagreen'
折れ線グラフを描画して、その色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
欠損値も加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
＜オプション＞ハニーデュー色を使用する	color = 'honeydew'
ヒストグラムの色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
ファイルからファイル名を取り出す	os.path.basename(filepath)
＜オプション＞追加モードに設定する	mode = 'a'
実数を切り上げて整数に変換する	math.ceil(x)
リストの最後を取り除く	aList[:-1]
線グラフを描画して、色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
折れ線グラフの星マーカーを黒くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
実数が無限大か	math.isinf(x)
リストとイテラブルについて散布図を描画し、、菱形マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
行列の列ごとの最大値	np.max(aArray, axis=0)
パステル調のグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
散布図を下三角マーカーで描画する	plt.plot(xdata, ydata, marker='v')
nの八進文字列を見る	oct(n)[2:]
折れ線グラフを描画して、その色をダークスラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategray')
グラフの描画で明るいカラーパレットを使う	sns.set(pallete='bright')
リストとリストについて破線をプロットして、その色をパステル調のにする	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データフレームから型リストデータ型のカラムのみ抽出する	df.select_dtypes(include=typeList)
データフレームの中にいくつ欠損値が含まれるか求める	df.isna().sum()
数列と配列の散布図を描画して、色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
配列を分割する	pd.cut(aArray, aList)
配列と数列の散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
＜オプション＞グリーンイエローを使用する	color = 'greenyellow'
線グラフの色をグリーンイエローに指定する	plt.plot(データ列, データ列2, color='greenyellow')
データ列がどの程度、分散しているか見る	ds.var()
リストとデータ列について散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
線グラフの色をイエローグリーンに変更する	plt.plot(データ列, データ列2, color='yellowgreen')
綺麗なグラフを用いる準備をする	import seaborn as sns
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
列の名前を列挙する	df.columns
ファイルパスを開いて]追加ストリームを使う	open(filepath, mode='a')
折れ線グラフに青いバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgray')
データフレームのカラムを十の位で四捨五入して、整数にする	df[col].round(-1).astype(int)
データフレームの先頭n行	df.head(n)
タプルをミュータブルにする	list(aTuple)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
データ列と配列の暗いを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
マッピングのキーを要素に設定する	aDict[key] = element
折れ線グラフに大きさnの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
赤色の大バツマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='X', c='r')
ファイルパスからストリームを開いて]、fileとする	file = open(filepath)
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
リストとリストの散布図にクロスマーカーを描く	plt.plot(xdata, ydata, marker='x')
黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームを列によって並べ直して、上位を取り出す	df.sort_values(columns).head(n)
グラフを濃くする	sns.set(pallete='deep')
データフレームのリスト列の欠損値を平均値に指定する	df[aList].fillna(df[aList].mean())
タプルの値をソートする	sorted(aTuple)
整数nがセットのどれかかどうか確認する	n in aSet
値が集合に含まれない	element not in aSet
文字列の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
ダイアモンドマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='D')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
ヒストグラムを描画して、その色をグレーに指定する	plt.hist(データ列, color='gray')
折れ線グラフに上三角マーカーを用いる	plt.plot(データ列, データ列2, marker='^')
リストの変化を折れ線に描画する	plt.plot(range(len(xdata)), xdata)
折れ線グラフを描画して、色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
二つの文字列は等しくない	s != s2
文字列はリストに含まれないか調べる	element not in aList
赤色の明るいの折れ線を描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
折れ線グラフを描画してその色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
列の文字列を欠損値にする	ds.replace(s, np.nan)
ファイルパスのセパレータ記号を使う	os.sep
青いヒストグラムを描画する	plt.hist(データ列, color='b')
＜オプション＞色をロイヤルブルーに設定する	color = 'royalblue'
散布図に赤色の左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='r')
本日のタイムスタンプ	datetime.datetime.now()
プラットホーム名を知る	sys.platform
文字列を太字にする	f'\033[1m{value}\033[0m'
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
＜オプション＞グラフの色をブラックに変更する	color = 'black'
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
二つの変数を同じ値にする	x = y = n
コレクションを使用する	import collections
プロットの描画で濃い色を使う	sns.set(pallete='deep')
まとめてデータフレームをValueMapで置き換える	df.replace(ValueMap)
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
ネイピア数を使用する	math.e
データ列とリストの散布図を暗い色を用いて重なりを見やすく描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
折れ線グラフのマーカーを三角にする	plt.plot(データ列, データ列2, marker='^')
データフレームの中に文字列とがある	df.isin([value, value2])
一点鎖線を用いて折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
seabornのデフォルトを適用する	sns.set()
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
淡い色のヒストグラムとしてデータ列を描画する	plt.hist(xdata, color='muted')
折れ線グラフに大きさnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
リストを等量で分割数nを使ってビン分割する	pd.qcut(aList, n)
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
最大長のある両端キュー	collections.deque(maxlen=n)
＜オプション＞ロージーブラウン色を用いる	color = 'rosybrown'
データ列は何曜日か確認する	ds.dt.weekday_name
書式をタプルでフォーマットする	formatText.format_map(aDict)
文字列の中のASCII限定として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
xの印字可能な文字列	ascii(x)
データフレームのリストカラムを丸める	df[aList].round()
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
データフレームから指定された三つの列だけ選ぶ	df[[column, column2, column3]]
＜オプション＞シルバーにグラフの色を設定する	color = 'silver'
ヒストグラムの色を黒くする	plt.hist(データ列, color='k')
CSVファイルTSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
リストをリストを境界値としてビニングする	pd.cut(aList, aList)
実数の逆双曲線正接を求める	math.atanh(x)
空のチェーンマップ	collections.ChainMap()
既存のファイルを追加できるように文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
集合のイミュータブル版	frozenset(aSet)
リストとリストの色差別ないグラフを描画して色を青色にセットする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
ヒストグラムを描画してその色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
タプルの値数を得る	len(aDict)
カンマで文字列を分割して、文字列リストに変換する	s.split(',')
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumspringgreen')
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
行列の転置行列を計算する	aArray.T
文字列の開始位置以降が部分文字列で開始するか調べる	s.startswith(sub, start)
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
ヒストグラムを描画して、色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
明るいグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
データフレームを複数の列でグループ分けする	df.groupby(columns)
データフレームのn行目を破壊的にドロップする	df.drop(n, axis=0, inplace=True)
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
＜オプション＞ダークオリーブグリーンにグラフの色を変更する	color = 'darkolivegreen'
両端キューのn番目に要素を挿入する	deq.insert(n, element)
文字列の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データ列の欠損値を最頻値にセットする	ds.fillna(ds.mode().iloc[0])
実行環境がWindowsか調べる	sys.platform.startswith('win32')
リストとリストについて散布図を描いて、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
カウンタのキーとカウントをリストとして得る	aCounter.items()
散布図をカラーコードの四角マーカーで描く	plt.plot(xdata, ydata, marker='s', c=rgb)
折れ線グラフに黄色い▼印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
暗い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
リストとデータ列の黒い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
変数が0に近づく場合の数値の極限値を求める	sympy.limit(e, z, 0)
16進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
配列の平均値	np.mean(aArray)
ヒストグラムをプロットする	plt.hist(データ列)
オブジェクトはバイト列型かどうか	isinstance(obj, bytes)
書き込みモードでファイルを開き]、fとする	f = open(filepath, mode='w')
部分文字列が部分文字列で始まる	s.startswith(sub)
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
リストとイテラブルの濃いグラフを描画し、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
ファイルを読み込み用に開く]	open(filepath, mode='r')
プロットをポスター用に変更する	sns.set(context='poster')
プロットの描画を綺麗にする	import seaborn as sns
データ列のNaNを前の行の値に設定する	ds.fillna(method='ffill')
折れ線グラフの四角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
列をキーにして2つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
Pandasでフォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
データフレームの各グループごとの最大値を算出する	df.groupby(column).max()
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
リストと配列について散布図を描画し、、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
データフレームを'A'列で並べ直す	df.sort_values(by='A')
文字列でフォーマットして本日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
オブジェクトは集合クラスか判定する	isinstance(obj, set)
折れ線グラフのポイントマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
データフレームを列名リストの値によってグループ化する	df.groupby(columns)
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
淡い色でイテラブルとリストの散布図を描画する	plt.plot(xdata, ydata, c='muted')
ピアソン積率相関係数でデータフレームの相関行列	df.corr(method='pearson')
文字列を新しい文字列によって置き換える	s.replace(sub, newsub)
＜オプション＞ダークスレートブルーを使う	color = 'darkslateblue'
0から始まる無限イテラブル	itertools.count()
＜オプション＞ライトコーラル色を使う	color = 'lightcoral'
ヒストグラムを描画して、色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
＜オプション＞グラフの種類を破線に設定する	linestyle = 'dashed'
データフレームのカラムが何日か調べる	df[col].dt.day
辞書をインデント付きで文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
nの無限数列	itertools.repeat(n)
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
データフレームのカラムは何曜日か調べる	df[col].dt.weekday_name
折れ線グラフの色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
イテラブルと数列の散布図を描画し、、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
上位集合かどうか	aSet.issuperset(aSet2)
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
＜オプション＞グラフの色をインディアンレッドに変更する	color = 'indianred'
折れ線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
破壊的にデータフレームを'A'列によってでソートする	df.sort_values(by='A', inplace=True)
折れ線グラフの左三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
折れ線グラフを描画して、その色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
コーンズシルク色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornsilk')
リストと数列について相関を可視化する	plt.scatter(xdata, ydata)
データフレームからカテゴリデータの列名のリストを使う	df.select_dtypes('object').columns
最初のカテゴリーを除外し、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
カラーコードの右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c=rgb)
青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
数の３乗	x ** 3
リストとデータ列についてパステル調の色の折れ線を描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
折れ線グラフを描画してその色をグレーに指定する	plt.plot(データ列, データ列2, color='gray')
折れ線グラフを描画して、その色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
リストと数列についての散布図にバツマーカーをプロットする	plt.plot(xdata, ydata, marker='x')
＜オプション＞ハニーデューを使用する	color = 'honeydew'
リストとデータ列について破線グラフを描画して、その色を暗いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
配列の行ごとの合計値	np.sum(aArray, axis=1)
CSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
区間数nのヒストグラムを描画する	plt.hist(データ列, bins=n)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
ヒストグラムを描画して色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
データフレームから重複した行をドロップして更新する	df.drop_duplicates(inplace=True)
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
CSVファイルTSVファイルをn番目の列をインデックスにして読み込む	pd.read_csv(filename, index_col=n)
実数がNaNか調べる	math.isnan(x)
＜オプション＞グラフの色をホワイトスモークに指定する	color = 'whitesmoke'
＜オプション＞グラフの色をシスルに設定する	color = 'thistle'
線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
＜オプション＞ブラックを用いる	color = 'black'
数式の簡略化を行う	sympy.sympify(e)
明るい色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='bright')
0から始まる無限リスト	itertools.count()
列をぐるぐると繰り返す	itertools.cycle(iterable)
二つの関係が上位集合もしくは等しいかどうか	aSet > aSet2
シエナにヒストグラムの色を変更する	plt.hist(データ列, color='sienna')
アルファベットの小文字列	string.ascii_lowercase
nが正の数か調べる	n > 0
データフレームのカラムを1000の位で丸めて整数にする	df[col].round(-3).astype(int)
ヒストグラムを描画して、色を黒くする	plt.hist(データ列, color='k')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
線幅nのダイアモンド印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
filepathに現在の作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
カラムの中に含まれる日付データの合計を数える	ds.isin([value]).sum()
データ列とリストについての散布図を淡い色を用いて描く	plt.plot(xdata, ydata, c='muted')
イテラブルと数列について散布図を描画してマーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
Pandasで、UNIX時間の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ヒストグラムを描画して、色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
実数以上の最小の整数	math.ceil(x)
リストを逆順にする	aList[::-1]
折れ線グラフの色を深紅に設定する	plt.plot(データ列, データ列2, color='crimson')
データフレームのリストカラムのNaNを直前の値で埋める	df[aList].fillna(method='ffill')
オブジェクトがクラス	isinstance(obj, クラス)
＜オプション＞ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
ヒストグラムを描画して、色をディムグレーにセットする	plt.hist(データ列, color='dimgrey')
nがn2の倍数か調べる	n % n2 == 0
＜オプション＞コーラル色を使用する	color = 'coral'
散布図をカラーコードのポイントマーカーを用いて描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
＜オプション＞印をバツに変更する	marker = 'x'
実数を実数で割る	x / y
ヒストグラムを描いて、nにビン数をセットする	plt.hist(データ列, bins=n)
＜オプション＞ベージュを使用する	color = 'beige'
＜オプション＞グラフの色をリネンに設定する	color = 'linen'
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
折れ線グラフの丸マーカーを黒色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
ヒストグラムの色をシャルトリューズにする	plt.hist(データ列, color='chartreuse')
折れ線グラフを描画して、色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
文字列からISO8601でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
折れ線グラフの丸マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
要素はセットのメンバーでないか調べる	element not in aSet
赤いダイアモンドマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='D', c='r')
ケンドール相関係数としてデータフレームの列と列の相関行列を算出する	df[[column, column2]].corr(method='kendall')
カラーコードのポイントマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='.', c=rgb)
データフレームのリストカラムの空文字をNaNに変換し、ドロップする	df[aList].replace('', np.nan).dropna()
配列の差を計算する	aArray - aArray2
色差別ないの色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
折れ線グラフを描画して、その色をスチールブルーに変更する	plt.plot(データ列, データ列2, color='steelblue')
部分文字列が文字列中に含まれるか調べる	sub in s
ヒストグラムを描画して、その色をアイボリーに指定する	plt.hist(データ列, color='ivory')
＜オプション＞ディムグレーにグラフの色を設定する	color = 'dimgray'
正規表現に複数行対応として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
＜オプション＞グラフの色をゴールドに変更する	color = 'gold'
日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
リストを縦軸、リストを横軸と指定して折れ線グラフを描画する	plt.plot(xdata, ydata)
Pandasで、エポック秒の文字列からPandasの日付型にする	pd.to_datetime(s, unit='s', utc=True)
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
データフレームの列の名前を付け直す	df.rename(columns={column: name})
イテラブルと配列の色差別ないグラフを描画して、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストが少なくともひとつ真	any(aList)
データフレームの歪度	df.kurt()
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
nがn2より小さい	n < n2
データ列は何年か見る	ds.dt.year
二つの文字列は同じ	s == s2
カラムのNaNを最大値で置換する	ds.fillna(ds.max())
実数の双曲線正接	math.tanh(x)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
イテラブルとリストの明るいグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
明るいの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
データフレームをグループ化しそれぞれの列に対し個数を求める	df.groupby(column)[column2].count()
ピアソン相関係数を用いてデータフレームの相関行列	df.corr(method='pearson')
何か試しに動かしてみる	print('Hello World')
線グラフを描画してその色をコーンフラワーブルーに変更する	plt.plot(データ列, データ列2, color='cornflowerblue')
データフレームのリスト列の分散を計算する	df[aList].var()
データ列を折れ線グラフに描画してマーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
データフレームからランダムに抽出する	df.sample()
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
日付を使う	import datetime
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
nからn2を引いてnとする	n -= n2
データフレームのリスト列の相関行列ケンドール相関係数を用いて	df[aList].corr(method='kendall')
リストとリストのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ケンドール順位相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
nが3で割り切れるかどうか調べる	n % 3 == 0
データフレームの列がx以上のデータを取り出す	df[df[column] >= x]
色差別ない色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
折れ線グラフの右三角印を青色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
凡例をグラフに表示する	plt.legend()
黒い星マーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='*', c='k')
＜オプション＞グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
データフレームのリスト列を100の位で丸める	df[aList].round(-2)
文字列の中の正規表現によるすべてのマッチを見る	re.findall(pattern, s)
データ列をボックスチャートで描く	plt.boxplot(データ列)
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
データフレームをグループ化しそれぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
ヒストグラムを描画して、色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
BOM付きでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
2変数の最も大きい値	max(x, y)
文字列を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategrey')
＜オプション＞ライトスチールブルー色を使う	color = 'lightsteelblue'
＜オプション＞色をシルバーに指定する	color = 'silver'
＜オプション＞ライトイエローにグラフの色を設定する	color = 'lightyellow'
＜オプション＞グラフの色を赤にする	color = 'red'
実数のハイパボリック・サインの逆数	math.asinh(x)
折れ線グラフを描画して、その色をアンティークホワイトにする	plt.plot(データ列, データ列2, color='antiquewhite')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
データフレームを各列毎にグループ化して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
数値を白色にする	f'\033[37m{value}\033[0m'
リストとリストの散布図に黒い大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c='k')
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
実数のタンジェントを算出する	math.tan(x)
濃いカラーパレットをグラフの描画で使う	sns.set(pallete='deep')
バイトオーダを調べる	sys.byteorder
＜オプション＞グラフの色をスノーに設定する	color = 'snow'
ファイルが存在しない	not os.path.exists(filepath)
1で全要素を初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
シスル色の線グラフを描画する	plt.plot(データ列, データ列2, color='thistle')
＜オプション＞星マーカーを加える	marker = '*'
＜オプション＞グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
日付データが日曜日かどうか確認する	aDate.weekday() == 6
nがn2よりも小さいか	n < n2
リストとリストの折れ線を描画する	plt.plot(xdata, ydata)
イテラブルとリストの暗いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
全要素を1で初期化された配列を初期化する	np.ones(要素数, dtype=np.int)
ヒストグラムの色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
データフレームの列のpercentパーセンタイル	df[col].quantile(percent/100)
データ列が何月か見る	ds.dt.month
文字列をセパレータで区切る	s.split(sub)
データフレームのリストカラムの上位25%	df[aList].quantile(0.25)
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
＜オプション＞ビスクにグラフの色を変更する	color = 'bisque'
＜オプション＞改行を区切りで使う	sep = '\n'
イテラブルとリストを連結する	itertools.chain(iterable, iterable2)
上限nのキューをイテラブルから用意する	collections.deque(iterable, maxlen=n)
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
n個分左に双方向キューの値をローテンションする	deq.rotate(-n)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
列とタプルのデカルト積	itertools.product(iterable, iterable2)
列でデータフレームをグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
実行結果を青色でプリントする	print(f'\033[34m{value}\033[0m')
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
データ列とイテラブルについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
黒色の暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
昇順に'A'列によって破壊的にデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
空文字	''
オブジェクトは整数	isinstance(obj, int)
リストとリストについて明るい色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞ブランチドアーモンドにグラフの色を指定する	color = 'blanchedalmond'
暗いグラフの色を赤くする	plt.plot(xdata, ydata, linestyle='dark', color='r')
nからn2の値を引いてnに代入する	n -= n2
数式の積分を計算する	sympy.integrate(e)
色差別ないグラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
＜オプション＞淡い茶色色を使用する	color = 'tan'
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategray'
オブジェクトはあるクラス	isinstance(obj, クラス)
実数の床	math.floor(x)
折れ線グラフを描画して色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
文字列がn回続く列	itertools.repeat(element, n)
ヒストグラムを描画してその色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
＜オプション＞n番目の列をインデックスに変更する	index_col = n
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
明るい色で数列とリストについての散布図を描く	plt.plot(xdata, ydata, c='bright')
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列, データ列2, color='darkgreen')
イテラブルの重複組み合せを得る	itertools.combinations_with_replacement(iterable, n)
異なるカラムをキーとして２つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
実数は非数	math.isnan(x)
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
リストとデータ列の折れ線を描いて、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
ビン数nの度数分布図を描く	plt.hist(データ列, bins=n)
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
ヒストグラムを描画して、その色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
リストとリストについて散布図を描画して星マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='*', c=rgb)
オプションで標準出力を使う	file = sys.stdout
暗い色を用いて重なりを見やすく数列とデータ列についての散布図をプロットする	plt.plot(xdata, ydata, c='dark', alpha=0.5)
グラフで使うフォントを日本語に変更する	sns.set(font='IPAexGothic')
双方向キュー中の要素を数える	deq.count(element)
日付データが月曜日	aDate.weekday() == 0
＜オプション＞複数行に対応する	flag = re.MULTILINE
データ列とリストの淡いをプロットして色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームをグループ化しそれぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
ひとつでもアスキー文字が文字列内に含まれるかどうか調べる	any(c.isascii() for c in s)
データ列の時を使う	ds.dt.hour
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
ヒストグラムを描画してその色を赤に変更する	plt.hist(データ列, color='red')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
ヒストグラムを実線に指定する	plt.hist(データ列, linestyle='solid')
ファイルをEUCを用いて開く]	open(filepath, encoding='euc_jp')
データフレームを二つの列によってソートしてNaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
切り下げて整数にする	math.floor(x)
データフレームのリストカラムの中に日付データが含まれる	df[aList].isin([value])
２つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
正規表現をASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
両端キューをデキューする	deq.popleft()
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
データフレームのリストカラムの欠損値をxに変更する	df[aList].fillna(x)
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
＜オプション＞色をミッドナイトブルーに設定する	color = 'midnightblue'
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
マッピングをカウンタにする	collections.Counter(aDict)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
異なる列をキーにして2つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
ヒストグラムを描画して、その色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
カウンタ同士で共通部分	aCounter & aCounter2
データフレームを各列毎にグループ化して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
散布図に暗い色のマーカーを用いる	plt.plot(xdata, ydata, c='dark')
リストとリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
文字列内にひとつでも英数字があるか	any(c.isalnum() for c in s)
文字列を最初の部分文字列で二つに区切って後半の文字列を求める	s.partition(sub)[-1]
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
nとn2が等しいか調べる	n == n2
双方向キューの右を求める	deq[-1]
リストと数列についてリストの値に応じて散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
折れ線グラフを実線に変更する	plt.plot(データ列, データ列2, linestyle='solid')
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
実数の床数	math.floor(x)
線グラフを描画して、色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
非アスキー文字が文字列中にあるかどうか調べる	any(not c.isascii() for c in s)
折れ線グラフを描画してその色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
データフレームから重複した行を消す	df.drop_duplicates()
淡いグラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームのカラムを10の位で丸める	df[col].round(-1)
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
カラーコードのダイアモンドマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D', c=rgb)
データ列を百の位で四捨五入する	ds.round(-2)
数列と数列について青い濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームを二つの列によってで降順に整列する	df.sort_values(by=['A', 'B'], ascending=False)
リストをタプルに変換する	tuple(aList)
リストとリストとして暗いを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', color='r')
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
折れ線グラフを描画して、その色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
横棒を描画し、、中央寄せする	plt.barh(ラベル列, データ列, align='center')
＜オプション＞色をバリーウッドに設定する	color = 'burlywood'
＜オプション＞グラフの色をパウダーブルーに設定する	color = 'powderblue'
データフレームを列によってグループ化して、各グループごとの個数を算出する	df.groupby(column).count()
折れ線グラフを描画してその色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
データフレームの列をドロップして更新する	df.drop(column, axis=1, inplace=True)
データフレームの相関行列スピアマンとして	df.corr(method='spearman')
＜オプション＞グラフの色をライトグリーンに指定する	color = 'lightgreen'
データフレームを各列と列の組み合わせ毎にグループ分けして標準偏差を求める	df.groupby([column, column2], as_index=False).std()
配列を一次元にする	aArray.flatten()
日付データが金曜日	aDate.weekday() == 4
実数を万の位で四捨五入する	round(x, -4)
キューからポップする	deq.pop()
データ列の中にいくつ日付データが存在するか数える	ds.isin([value]).sum()
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
データフレームの列で文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
列名リストによって昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True)
エクセルデータからデータフレームを読み込む	pd.read_excel(filename)
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
キーがタプル上で未定義	key not in aDict
アルファベットを全て見る	string.ascii_letters
文字列の大文字小文字を整える	s.casefold()
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
predicateFuncが真になるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
折れ線グラフに大きさnの左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markersize=n)
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
折れ線グラフに菱形マーカーを用いる	plt.plot(データ列, データ列2, marker='D')
折れ線グラフを描画して、その色をシエナに変更する	plt.plot(データ列, データ列2, color='sienna')
線グラフを描画してその色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
リストとリストの散布図をプロットし、色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
データフレームを'A'列によって並べ直して、更新する	df.sort_values(by='A', inplace=True)
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
列を配列として抽出する	df[column].values
折れ線グラフのスタイルを破線に設定する	plt.plot(データ列, データ列2, linestyle='dashed')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
ファイルを読み込みモードとしてオープンする]	open(filepath, mode='r')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
データ列と配列についての散布図に黒色の下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
実数とyの斜辺を求める	math.hypot(x, y)
＜オプション＞色をライトスレイグレーに設定する	color = 'lightslategrey'
リストを赤色化する	f'\033[31m{value}\033[0m'
折れ線グラフを描画してその色をスカイブルーにする	plt.plot(データ列, データ列2, color='skyblue')
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
データフレームのリストカラムの中に文字列と日付データがあるか確認する	df[aList].isin([value, value2])
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
データ列の値がNaNかどうか調べる	ds.isna()
列によってデータフレームを集約し、、各グループごとの分散を求める	df.groupby(column).var()
データフレームをJSONLファイルにTSV形式で保存する	df.to_csv(filename, sep='\t')
データフレームの列がx以下のデータを取り出す	df[df[column] <= x]
＜オプション＞スラグレーにグラフの色を変更する	color = 'slategray'
データ列の時	ds.dt.hour
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
文字列を部分文字列で二つに分ける	s.partition(sub)
データフレームを列で並べて、上位を取り出す	df.sort_values(columns).head(n)
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
オブジェクトをユーザ向けの文字列に変換する	str(obj)
＜オプション＞セパレータを文字列にする	sep = s
ヒストグラムの色を茶色にセットする	plt.hist(データ列, color='brown')
折れ線グラフの色を白くする	plt.plot(データ列, データ列2, color='w')
折れ線グラフの三角マーカーを黄色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
列をキーにして２つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
度数分布図を描画し、区間の数をnに設定する	plt.hist(データ列, bins=n)
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
ヒストグラムを描画してその色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
データフレームの指定されたカラム	df[column]
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
文字列の右端からタブを除去する	s.rstrip('\t')
n回文字列を繰り返すイテラブル	itertools.repeat(element, n)
散布図に大バツマーカーを使用する	plt.plot(xdata, ydata, marker='X')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
リストとリストについての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
濃いの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
タプルの値を小さい順に並べる	sorted(aTuple, reverse=False)
＜オプション＞グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
データフレームを列でソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
文字列の先頭で正規表現にASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
散布図に赤いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
線グラフを描画して、その色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列, データ列2, color='mediumorchid')
折れ線グラフに緑色のポイント印を描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
文字列を最初の部分文字列で分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
データフレームのデータを条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
黒色の星マーカーを散布図に使う	plt.plot(xdata, ydata, marker='*', c='k')
リストをソートする	sorted(aList)
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
データ列を縦軸、リストをx軸と指定して、折れ線グラフを描く	plt.plot(xdata, ydata)
折れ線グラフに黄色い▲印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
乱数を正規分布で得る	random.normalvariate(mu=0.5, sigma=0.2)
列をキーにして２つのデータフレームを結合する	pd.merge(df, df2, on=column)
オブジェクトの種類	type(obj)
＜オプション＞トマトを用いる	color = 'tomato'
グラフの中の縦軸にuntitledというラベルを付ける	plt.ylabel(untitled)
＜オプション＞貝殻にグラフの色を設定する	color = 'seashell'
リストとリストを用いて濃いグラフを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color='r')
空行をプリントする	print()
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
二つの文字列をコロンで区切って出力する	print(value, value2, sep=':')
実数に実数を加算する	x + y
カデットブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cadetblue')
ファイルパスをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
startからendの間のヒストグラムを用いてリストをプロットする	plt.hist(データ列, range=(start, end))
BOM付きで書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
＜オプション＞グラフの種類を一点鎖線に指定する	linestyle = 'dashbot'
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
破壊的にデータフレームから重複した行を消す	df.drop_duplicates(inplace=True)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
データ列は何年か確認する	ds.dt.year
折れ線グラフを描画してその色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
データフレームのリストカラムの75パーセンタイル	df[aList].quantile(0.75)
折れ線グラフを描画してその色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
整数nの八進数リテラルを使う	oct(n)
文字列を右トリムする	s.rstrip()
リストと配列について散布図をプロットして、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
データフレームの中の列を等間隔でn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのカラムの中に文字列と日付データがいくつあるかカウントする	df[col].isin([value, value2]).sum()
二変数の最も小さい値	min(x, y)
部分文字列で文字列を分割した場合の残りの文字列を使う	s.partition(sub)[-1]
折れ線グラフを描画してその色を真紅に変更する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフを描画してその色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
双方向キューを空にする	deq.clear()
＜オプション＞▽マーカーを描画する	marker = 'v'
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列, データ列2, color='rosybrown')
nをn2で割る	n / n2
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
パステル調のカラーパレットをグラフの描画で使う	sns.set(pallete='pastel')
nとn2の差	n - n2
リストとリストについて色差別ない色の折れ線グラフを描いて、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフを描画してその色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
文字列内にアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
値∈集合	element in aSet
＜オプション＞色をサンディーブラウンにする	color = 'sandybrown'
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgoldenrod')
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
カウンタの交差演算する	aCounter & aCounter2
＜オプション＞フォレストグリーンに色を指定する	color = 'forestgreen'
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
暗いグラフの色を青くする	plt.plot(xdata, ydata, linestyle='dark', color='b')
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
ヒストグラムを描画して、その色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
ファイルパスをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
データ列とリストについて暗い色の折れ線グラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストと配列について散布図をプロットし、、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
データフレームのn行まで取り出す	df[:n]
データフレームの列と列を消す	df.drop([column, column2], axis=1)
データ列を折れ線グラフに描画して、マーカーを▽にする	plt.plot(データ列, データ列2, marker='v')
折れ線グラフの菱形マーカーを黒色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
リストと配列の散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
カラムの欠損値を後の行の値で埋める	ds.fillna(method='bfill')
マップのキーの一覧	aDict.keys()
何回まで再帰ができるかを	sys.getrecursionlimit()
コーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
線グラフの色をインディゴに変更する	plt.plot(データ列, データ列2, color='indigo')
表データから一番右の列を除く	df[df.columns[:-1]]
印字可能な文字を全部使う	string.printable
散布図を黒色のバツマーカーを使って描画する	plt.plot(xdata, ydata, marker='x', c='k')
組の末尾を取り除く	aTuple[:-1]
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
データフレームのリストカラムをまとめてValueMapで置き換える	df[aList].replace(ValueMap)
ベクトルの和を算出する	aArray + aArray2
分子と分母から分数を作る	fractions.Fraction(分子, 分母)
＜オプション＞パールバイオレットレッド色を使用する	color = 'palevioletred'
JSON文字列を読み込む	json.loads(jsonString)
数列とリストについて明るい色の折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
二つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
明るいの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
リストとリストについての散布図に下三角マーカーをプロットする	plt.plot(xdata, ydata, marker='v')
aListn番目から値を取り除く	aList.pop(n)
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
データフレーム全体をインデックスによって昇順に並べ直す	df.sort_index(ascending=True)
データ列とリストについての散布図を色差別ない色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
要素が集合のメンバーかテストする	element in aSet
イテラブルと配列についての散布図を色差別ない色を用いて描画する	plt.plot(xdata, ydata, c='colorblind')
配列とリストについてパステル調の色の折れ線グラフを描き、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
オブジェクトは論理値クラスか	isinstance(obj, bool)
日付時刻データが何曜日か知る	aDatetime.weekday()
辞書の項目名の値	aDict[key]
折れ線グラフを描画してその色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategrey')
実数の二乗	x ** 2
全要素を０で初期化された三２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
＜オプション＞パープル色を使う	color = 'purple'
文字列を青色にする	f'\033[34m{value}\033[0m'
行列の列ごとの分散	np.var(aArray, axis=0)
両端キューに要素をスタックする	deq.append(element)
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
リストを暗い色の柱状図として描画する	plt.hist(xdata, color='dark')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データ列を折れ線グラフに描画して、マーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
＜オプション＞グラフの色をシアンに設定する	color = 'cyan'
実数が整数	x.is_integer()
黒い左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
データフレームを各列とカラムの組み合わせ毎に分類して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
ケースを無視して文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
集合から要素を全て消す	aSet.clear()
折れ線グラフを描画して、その色をアクアにセットする	plt.plot(データ列, データ列2, color='aqua')
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
＜オプション＞エンコーディングをUTF8に指定する	encoding = 'utf-8'
'A'列と'B'列でデータフレームをソートし、更新する	df.sort_values(by=['A', 'B'], inplace=True)
リストと配列についての散布図に赤い四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s', c='r')
数列とデータ列の淡いを描画し、その色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ヒストグラムを描画してその色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
データ列とデータ列についてカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞オールドレースを使用する	color = 'oldlace'
＜オプション＞ミディアムスレートブルー色を使う	color = 'mediumslateblue'
プロットの描画で色差別ないカラーパレットを使う	sns.set(pallete='colorblind')
Pandasで、書式fmtでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format=fmt)
nが2で割り切れるかどうか調べる	n % 2 == 0
再帰の上限を上げる	sys.setrecursionlimit(1000000)
ヒストグラムの線のスタイルを破線にセットする	plt.hist(データ列, linestyle='dashed')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
ルートのチェーンマップを作る	collections.ChainMap()
ヒストグラムを描画して、その色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
実数の逆正弦を求める	math.asin(x)
オブジェクトは文字列クラスかどうか	isinstance(obj, str)
nが負の整数か調べる	n < 0
データフレームを転置する	df.T
データフレームの行を範囲指定して選択する	df[start:end]
カウンタの共通部分	aCounter & aCounter2
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
リストを明るい色のヒストグラムを使って描画する	plt.hist(xdata, color='bright')
データ列の曜日数	ds.dt.dayofweek
リストとデータ列について散布図をプロットし、、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
文字列の左側からタブを除去する	s.lstrip('\t')
グラフの中の縦軸のラベルをuntitledに指定する	plt.ylabel(untitled)
折れ線グラフの線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n)
データフレームのリスト列のNaNを最大値で補う	df[aList].fillna(df[aList].max())
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
リストと配列について破線グラフをプロットして、その色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
データフレームの列の名前を一度に文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームのリスト列の歪度を算出する	df[aList].kurt()
黒色の丸マーカーをリストと配列の散布図に描画する	plt.plot(xdata, ydata, marker='o', c='k')
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ライトスレイグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightslategrey')
部分集合	aSet.issubset(aSet2)
表の中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
n2がnより大きくかつ、n3より小さいか調べる	n < n2 and n2 < n3
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
異なる列をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
連立方程式の解を求める	sympy.solve([e, e2])
nの十六進数文字列	hex(n)[2:]
プラットホームはMacOSか調べる	sys.platform.startswith('darwin')
辞書のキーに対応した値	aDict.get(key)
データ列とリストの折れ線をuntitledとラベル付けしてプロットする	plt.plot(xdata, ydata, label=untitled)
データフレームの各グループごとの平均値	df.groupby(column).mean()
小数点数のタンジェントを求める	math.tan(x)
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
イテラブルを文字列リストに変換して、タブによって連結する	'\t'.join(map(str, iterable))
変数をアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
カウンタ同士で積集合演算する	aCounter & aCounter2
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
平均値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].mean())
日付時刻データが日付時刻データより早いか調べる	aDatetime < aDatetime2
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
型は名前付きタプル	issubclass(C, tuple)
＜オプション＞フクシアを用いる	color = 'fuchsia'
ヒストグラムを描画してその色をピンクに設定する	plt.hist(データ列, color='pink')
折れ線グラフを描画して、色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
データフレームをグループ化し、列に対し個数を求める	df.groupby(column)[column2].count()
データフレームの各次元の大きさを確認する	df.shape
横棒グラフを描画して幅をxに指定する	plt.barh(ラベル列, データ列, width=x)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
osモジュールをインポートする	import os
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
xが一桁の正の数かどうか調べる	0 <= x <= 9
散布図に黒色の四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='k')
パパイヤウィップにヒストグラムの色を設定する	plt.hist(データ列, color='papayawhip')
＜オプション＞線幅をnに指定する	linewidth = n
＜オプション＞色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
文字列がカタカナかどうか調べる	('ァ' <= ch <= 'ン')
＜オプション＞32ビット整数型を使う	dtype = np.int16
キーが辞書に存在するか調べる	key not in aDict
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列を区切り記号で分割して、文字列リストに変換する	s.split(sep)
カラムの中央値	ds.median()
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
日付データが水曜日	aDate.weekday() == 2
＜オプション＞グラフの色をスプリンググリーンに変更する	color = 'springgreen'
コサイン	math.cos(x)
三つの文字列を順に表示する	print(value, value2, value3)
折れ線グラフに丸マーカーを使う	plt.plot(データ列, データ列2, marker='o')
データフレームを表示するとき小数点以下をn桁に設定する	pd.set_option('precision', n)
ASCII限定として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
実数の逆双曲線正弦	math.asinh(x)
オブジェクトが論理値クラスか調べる	isinstance(obj, bool)
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフを描画してその色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
リストとリストの暗いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
ヒストグラムの色を青くする	plt.hist(データ列, color='b')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
文字列中にひとつでも非英数字があるかどうか調べる	any(not c.isalnum() for c in s)
線グラフを描画して、色を黄色くする	plt.plot(データ列, データ列2, color='y')
ヒストグラムを描画してその色をデピンクに変更する	plt.hist(データ列, color='deeppink')
グラフの背景色を暗くする	sns.set(style='darkgrid')
正規表現を使う	import re
列のそれぞれを関数でフィルタする	map(func, iterable)
折れ線グラフを描画して、その色をライムに変更する	plt.plot(データ列, データ列2, color='lime')
＜オプション＞グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
配列とリストとして折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
データフレームのカラムのNaNを平均値に設定する	df[col].fillna(df[col].mean())
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
日付時刻データの秒数を使う	aDatetime.second
八進数字を全部求める	string.octdigits
折れ線グラフの右三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
折れ線グラフに四角マーカーを使う	plt.plot(データ列, データ列2, marker='s')
predicateFuncが真となるイテラブルの部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
双方向キューの最初のデータ	deq[0]
＜オプション＞ダークグリーンを使う	color = 'darkgreen'
文字列の開始位置以降に部分文字列がないか	s.find(sub, start) == -1
折れ線グラフに大きさnの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markersize=n)
1からNまでの配列	np.arange(1, N+1)
データフレームを各列毎にグループ化して文字列というグループを使う	df.groupby(column).get_group(s)
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='deepskyblue')
データフレームを列でグループ化し、グループごとの件数を知る	df.groupby(column).size()
行列の列ごとの最大値を算出する	np.max(aArray, axis=0)
＜オプション＞グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
配列とリストについての散布図に赤い▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
ヒストグラムのアルファをxに変更する	plt.hist(データ列, alpha=x)
ユニークな要素ごとの頻度を求める	np.unique(aArray, return_counts=True)
緑色の▲マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
ASCII限定として文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
データ列を折れ線グラフに描画して、マーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
データフレームの列をドロップして入れ替える	df.drop(column, axis=1, inplace=True)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列, データ列2, color='blanchedalmond')
ヒストグラムを描画して、その色をディープスカイブルーにする	plt.hist(データ列, color='deepskyblue')
折れ線グラフを描画して、色を赤に変更する	plt.plot(データ列, データ列2, color='red')
部分文字列で文字列を分けたときの後半の文字列を求める	s.partition(sub)[-1]
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームを表示するとき、表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
データフレームをエクセルファイルファイルでJSONLファイルに書き込む	df.to_excel(filename)
線グラフを描画して、その色をアリスブルーにする	plt.plot(データ列, データ列2, color='aliceblue')
関数の値によってデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
ヒストグラムを描画して色をアイボリーに設定する	plt.hist(データ列, color='ivory')
散布図にカラーコードの星マーカーを使う	plt.plot(xdata, ydata, marker='*', c=rgb)
句点文字を全部使う	string.punctuation
イテラブルから重複なく、n要素選ぶ	random.sample(iterable, k=n)
データフレームから指定されたデータ型のカラム名の一覧	df.select_dtypes(型).columns
＜オプション＞BOM付きを使う	encoding = 'utf_8_sig'
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
マッピングの全項目を消去する	aDict.clear()
線グラフの色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
nとn2の商を求める	n / n2
データ列を折れ線グラフに描画して、印を菱形印にする	plt.plot(データ列, データ列2, marker='D')
データフレームの列をヒストグラムで可視化する	plt.hist(df[column])
n個に配列を分割する	pd.cut(aArray, n)
赤い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='r')
折れ線グラフを描画して、その色をダークスレートブルーに指定する	plt.plot(データ列, データ列2, color='darkslateblue')
データフレームの中のカラムをn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
破線の色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
文字列の左側から部分文字列を除く	s.lstrip(sub)
空白	' '
散布図に赤い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='r')
predicateFuncが真となる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
小数点数の正接	math.tan(x)
リストとリストの黒いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
イテラブルとデータ列についての散布図に黒い丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o', c='k')
青色の暗いを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
＜オプション＞サンディーブラウンにグラフの色を設定する	color = 'sandybrown'
数列とリストについての散布図に赤色の菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
にy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
ファイルを追加モードでオープンする]	open(filepath, mode='a')
ファイル名がJSONファイルか調べる	filename.endswith('.json')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
ヒストグラムを描画して、その色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
ファイルを開いて]、読み込みストリームを見る	open(filepath, mode='r')
ヒストグラムを描画して、その色をミディアムスレートブルーにする	plt.hist(データ列, color='mediumslateblue')
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
散布図に濃い色のマーカーを用いる	plt.plot(xdata, ydata, c='deep')
文字列を新しい文字列によって全部置き換える	s.replace(sub, newsub)
データ列を日付データにする	pd.to_datetime(ds)
折れ線グラフを描画して、色を赤くする	plt.plot(データ列, データ列2, color='r')
ふたつの集合の和集合を求める	aSet.union(aSet2)
日付時刻データをタプルに変換する	aDatetime.timetuple()
タプルは少なくともひとつ真か	any(aTuple)
折れ線グラフを描画して、色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
各列毎にデータフレームをグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
暗いグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
データ列とリストについて破線をプロットして、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
リストとイテラブルで明るいグラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
Pandasで、文字列をフォーマットで日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
アクアにヒストグラムの色を指定する	plt.hist(データ列, color='aqua')
ベクトルの最小	np.min(aArray)
明るいグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
nを二進表現に変換する	bin(n)
標準入力を得る	sys.stdin
＜オプション＞リネン色を使う	color = 'linen'
散布図を重なりを見やすく明るい色で描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
データフレームを'A'列と'B'列の値でまとめたグループを使う	df.groupby(['A', 'B'])
線グラフの色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
浮動小数点数のn乗の数剰余	pow(x, n, y)
文字列の接頭辞が部分文字列か	s.startswith(sub)
イテラブルとリストの破線グラフを描画して、色を濃いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
二つのリストからマップ	dict(zip(aList, aList2))
ヒストグラムの色を濃い青にセットする	plt.hist(データ列, color='darkblue')
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
現在の再帰の最大回数	sys.getrecursionlimit()
折れ線グラフを描画して、その色をデピンクに指定する	plt.plot(データ列, データ列2, color='deeppink')
列を多重集合に変換する	collections.Counter(iterable)
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
数列とリストについて明るい色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
データ列とリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
ミディアムアクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumaquamarine')
＜オプション＞小麦色に色を設定する	color = 'wheat'
コマンド引数の一覧を	sys.argv[1:]
ダークオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorchid')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
データフレームのカラムの中のNaNの合計を数える	df[col].isna().sum()
＜オプション＞ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
ヒストグラムを描画してその色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
データラベルをプロット中の(x,y)の場所に入れる	plt.legend(loc=(x, y))
線グラフの色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
Pandasで、数値時刻のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
データフレームのリストカラムの未入力値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
列の各データは何回出現するか見る	ds.value_counts()
部分文字列が部分文字列で始まるか判定する	s.startswith(sub)
配列のスカラー倍を求める	aArray * n
ヒストグラムを描画してその色をピンクに変更する	plt.hist(データ列, color='pink')
＜オプション＞コロンを区切りで使う	sep = ':'
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t')
データフレームを列でまとめたグループ	df.groupby(column)
小文字を大文字にする	s.upper()
ヒストグラムを描画して色をシルバーに設定する	plt.hist(データ列, color='silver')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
イテラブルの集合	set(iterable)
xとyの商と余りを同時に求める	divmod(x, y)
リストとデータ列について散布図を描画し、、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
リストを文字列リストに変換して、カンマでつなげる	','.join(map(str, iterable))
数列とイテラブルについての散布図に黒色の星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
データフレームのリストカラムの中にいくつが存在するか数える	df[aList].isin([value]).sum()
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
折れ線グラフにバツマーカーを加える	plt.plot(データ列, データ列2, marker='x')
＜オプション＞色をカーキに変更する	color = 'khaki'
折れ線グラフに緑色の上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
文字列を最後の部分文字列で二分し、前半の文字列を見る	s.rpartition(sub)[0]
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
n個にリストを等量でビン分割する	pd.qcut(aList, n)
データフレームのカラムのヒストグラムを描画する	plt.hist(df[column])
リストと配列で淡いの折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
＜オプション＞BOM付きを用いる	encoding = 'utf_8_sig'
列をセットに変換する	set(iterable)
折れ線グラフの色をスノーにする	plt.plot(データ列, データ列2, color='snow')
パウダーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='powderblue')
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
配列をビン数nでビン分割する	pd.cut(aArray, n)
データフレームを複数の列によってまとめた表	df.groupby(columns)
本日が何曜日か知る	datetime.datetime.today().weekday()
ヒストグラムを描画してその色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
ヒストグラムを描画して、その色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
配列とイテラブルについて散布図を描き、菱形マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
文字列の開始位置から終了位置の間で部分文字列の登場回数をカウントする	s.count(sub, start, end)
リストとリストのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
環境の名前を調べる	sys.platform
暗い色を用いてリストについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
英字の小文字を全部求める	string.ascii_lowercase
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
折れ線グラフを描画して色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
2つの浮動小数点数がほぼ等しいか調べる	math.isclose(x, x2)
グラフに水平方向の破線を設定する	plt.axhline(y=0, linestyle='dashed')
タプルの最初の文字列を探す	aTuple.index(element)
データフレームのカラムの年	df[col].dt.year
カラーコードの四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データ列を丸める	ds.round()
文字列の右側から空白を取り除く	s.rstrip()
双曲線余弦の逆数	math.acosh(x)
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
文字列を文字リストに変換する	list(s)
データフレームの列の一意な要素数	df[col].nunique()
シーケンスをダミー変数にする	pd.get_dummies(iterable)
データがスタックの中に含まれてるか調べる	element in deq
列の未入力値を直後の値に設定する	ds.fillna(method='bfill')
実数が負	x < 0
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
リストとリストの散布図をプロットして、マーカーの色を色差別ないにセットする	plt.plot(xdata, ydata, c='colorblind')
リストとしてデータフレームの指定された列を抽出する	df[column].values.tolist()
n2がnより大きくかつ、n3未満	n < n2 and n2 < n3
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
無限にカウントアップする	itertools.count()
リストとリストについての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
折れ線グラフを描画してその色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
明るいグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
折れ線グラフを描画して、その色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
データ列のどの値が最も現れるか見る	ds.mode()
昇順に破壊的に複数の列によってデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
両端キューが空か調べる	len(deq) == 0
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
リストの長さ	len(aList)
range関数の無限バージョン	itertools.count(start=n, step=step)
文字列がリストに含まれるかどうか調べる	element in aList
小文字を全部求める	string.ascii_lowercase
現在が何時か知る	datetime.date.today().hour
改行なしに変数をプリントする	print(value, end='')
二変数の最大値を計算する	max(x, y)
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
＜オプション＞スチールブルーに色をする	color = 'steelblue'
八進数字を求める	string.octdigits
データフレームを'A'列によって並べ直し、、更新する	df.sort_values(by='A', inplace=True)
データフレームの列と列に重複があれば、消す	df.drop_duplicates(subset=column)
二進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ヒストグラムを描画してその色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフのマーカーを四角にする	plt.plot(データ列, データ列2, marker='s')
＜オプション＞下三角マーカーを描画する	marker = 'v'
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
前もって複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームの中の列をビニングする	pd.cut(df[col], aList)
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
暗い色でリストと配列の散布図をプロットする	plt.plot(xdata, ydata, c='dark')
オプションで、標準出力を出力にする	file = sys.stdout
＜オプション＞ライムグリーンにグラフの色をセットする	color = 'limegreen'
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
データ列をビン数nでビン分割する	pd.cut(ds, n)
データ列の日	ds.dt.day
＜オプション＞色を淡い茶色に設定する	color = 'tan'
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
＜オプション＞エンコーディングを文字列の示す文字コードに設定する	encoding = s
ヒストグラムを描画してその色をティールに設定する	plt.hist(データ列, color='teal')
＜オプション＞ペールグリーンにグラフの色を設定する	color = 'palegreen'
余弦の逆数	math.acos(x)
ユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
二つの数値をカンマで区切ってプリントする	print(value, value2, sep=',')
リストとリストについての散布図に右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>')
棒を描いて、幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
ハローワールドと出力する	print('Hello World')
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
本日が月曜日か	datetime.datetime.today().weekday() == 0
日付時刻データからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
浮動小数点数が正の数か	x > 0
ヒストグラムを描画して、その色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
データ列の中にいくつ欠損値があるかカウントする	ds.isna().sum()
文字列中の部分文字列の出現	s.count(sub)
データフレームから最初のカラムを除く	df[df.columns[1:]]
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
折れ線グラフを描画して、色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
データ列の曜日数を使う	ds.dt.dayofweek
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
データ列を丸めて、整数型にする	ds.round().astype(int)
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
スタックから値を取り除く	deq.remove(element)
散布図に赤いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='r')
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
日付時刻データの秒を求める	aDatetime.second
＜オプション＞グラフの色をアクアマリンに設定する	color = 'aquamarine'
イテラブルをいつまでも繰り返す	itertools.cycle(iterable)
リストと配列について明るい色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
表データをグループ化し各列に対し分散を求める	df.groupby(column)[column2].var()
n個の要素があるリスト	[element] * n
ヒストグラムを描画して、その色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
グラフの用途を画面に変更する	sns.set(context='notebook')
＜オプション＞データ型を指定する	dtype = np.int8
＜オプション＞グラフの色をライトシアンに設定する	color = 'lightcyan'
リストとリストについてパステル調の色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
JSONLファイルにデータフレームをタブ区切りで保存する	df.to_csv(filename, sep='\t')
2つの文字列は等しくないか確認する	s != s2
散布図をカラーコードの左三角マーカーを使って描く	plt.plot(xdata, ydata, marker='<', c=rgb)
ヒストグラムを描画して、区間の数をnに設定する	plt.hist(データ列, bins=n)
リストを引数として展開してプリントする	print(*aList)
表示可能な列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
セパレータで文字列を分割して文字列リストに変換する	s.split(sep)
＜オプション＞色をライトイエローに指定する	color = 'lightyellow'
数式の因数分解を行う	sympy.factor(e)
nxn2の２次元リストを作る	[[0] * n for _ in range(n2)]
暗いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='midnightblue')
Pandasのバージョンを表示する	print(pd.__version__)
折れ線グラフを描画して、その色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
カウンタを低頻度な方からリストとして得る	aCounter.most_common()[::-1]
データフレームから列を2つ選択する	df[[column, column2]]
リストと配列について散布図を描いて、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
ベクトルをベースに全要素が0の配列	np.zeros_like(aArray)
折れ線グラフを一点鎖線で描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
色差別ない色のヒストグラムでデータ列を描画する	plt.hist(xdata, color='colorblind')
リストとリストの散布図に赤い下三角マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c='r')
折れ線グラフを描画してその色をシスルに指定する	plt.plot(データ列, データ列2, color='thistle')
＜オプション＞ミディアムターコイズ色を用いる	color = 'mediumturquoise'
データフレームのカラムの分散	df[col].var()
集合をイミュータブルなセットに変換する	frozenset(aSet)
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
リストとリストについて散布図をプロットして、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
オプションで出力先を標準エラーに設定する	file = sys.stderr
ヒストグラムを描画してその色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
折れ線グラフの星印の線幅をnに変更する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
＜オプション＞濃いシアンに色を設定する	color = 'darkcyan'
ヒストグラムを描画して、その色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
折れ線グラフにバツ印を使用する	plt.plot(データ列, データ列2, marker='x')
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
配列と数列の散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
グラフのデザインを綺麗にする	import seaborn as sns
列の一意な要素	ds.unique()
ラベンダーにヒストグラムの色を指定する	plt.hist(データ列, color='lavender')
文字列がリストに含まれないかどうか	element not in aList
配列とデータ列のカラーコードの色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
実部と虚部から複素数を用意する	complex(x, y)
カラーコードの菱形マーカーをイテラブルとデータ列についての散布図に描く	plt.plot(xdata, ydata, marker='D', c=rgb)
整数のn乗して浮動小数点数による余り	pow(x, n, y)
折れ線グラフを描画してその色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
データフレームの重複を見る	df.duplicated()
JSONフォーマットの文字列を辞書に変換する	json.loads(jsonString)
複数のシートをエクセルデータファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
散布図に右三角マーカーを使う	plt.plot(xdata, ydata, marker='>')
ハローワールドを表示する	print('Hello World')
散布図に黒いバツマーカーを用いる	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
日付時刻データは何時か知る	aDatetime.hour
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
タプルの要素を並べる	sorted(aTuple)
黒い濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='k')
データ列のNaNを直後の値で埋める	ds.fillna(method='bfill')
折れ線グラフに描画してマーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
文字列の両端から部分文字列を除去する	s.strip(sub)
集合の補集合を求める	aSet.difference(aSet2)
リストとリストの青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
リストとデータ列についての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
カラムを10の位で丸めて、整数型にする	ds.round(-1).astype(int)
最後に追加した項目をマッピングからポップする	aDict.popitem()
線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列, データ列2, color='darkolivegreen')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
実数を切り上げる	math.ceil(x)
コマンドの第２引数を確める	sys.argv[1]
ヒストグラムを描画してその色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
透明度alphaの折れ線グラフをプロットする	plt.plot(xdata, ydata, alpha=alpha)
部分文字列で文字列を分けたときの後半の文字列を使う	s.partition(sub)[-1]
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
リストは全て真	all(aList)
折れ線グラフの下三角印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
文字列の大文字と小文字を交換する	s.swapcase()
kを底とする浮動小数点数の対数	math.log(x, k)
データフレームを列でソートして、下の方を取り出す	df.sort_values(columns).tail(n)
n進数の文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
折れ線グラフを描画して、色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
x軸にuntitledというラベルを付ける	plt.xlabel(untitled)
折れ線グラフを描画して、色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
データ列のどの値が頻出か見る	ds.mode()
折れ線グラフの色をシエナに変更する	plt.plot(データ列, データ列2, color='sienna')
データフレームを列の値でグループ分けし、、それぞれのグループごとの合計を求める	df.groupby(column).sum()
最後の部分文字列で文字列を分割したときの前半の文字列	s.rpartition(sub)[0]
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
テキストファイルファイル名がか	filename.endswith('.txt')
赤い三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='r')
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgrey'
グレーにヒストグラムの色をする	plt.hist(データ列, color='grey')
データフレームのリスト列の欠損値を後の行の値に設定する	df[aList].fillna(method='bfill')
＜オプション＞ナバホホワイトを使用する	color = 'navajowhite'
折れ線にラベルをつける	plt.plot(xdata, ydata, label=untitled)
グラフの色テーマを濃くする	sns.set(pallete='deep')
折れ線グラフを描画して、その色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
リストと数列についての散布図に下三角マーカーを描く	plt.plot(xdata, ydata, marker='v')
折れ線グラフを描画して、その色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
暗いの色を赤くする	plt.plot(xdata, ydata, linestyle='dark', color='r')
カラムを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
ヒストグラムを描画して、その色をオレンジに設定する	plt.hist(データ列, color='orange')
重なりを見やすく淡い色を用いてリストと数列についての散布図を描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
＜オプション＞ダークカーキを使う	color = 'darkkhaki'
変数が無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, oo)
ヒストグラムを描画して色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
小数点数の逆余弦	math.acos(x)
ファイルを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
折れ線グラフに緑色の丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
辞書の項目名を要素にする	aDict[key] = element
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
エクセルファイルファイルからを読む	pd.read_excel(filename)
nがn2で割り切れないか調べる	n % n2 != 0
カラムによってデータフレームをグループ化して、それぞれのグループごとの個数を計算する	df.groupby(column).count()
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
折れ線グラフを描画して、その色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
文字列を日付データにする	pd.to_datetime(s)
イテラブルの長さnの順列	itertools.permutations(iterable, n)
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
＜オプション＞文字列を区切りで使う	sep = s
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
データフレームの列を消す	df.drop(column, axis=1)
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
追加できるようにファイルをオープンする]	open(filepath, mode='a')
カラムの名前の一覧を見る	df.columns
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
淡い色の折れ線グラフを描画し、、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
プラットホームの名前	sys.platform
オブジェクトは数値か	isinstance(obj, (int,float))
度数分布図のビンを設定する	plt.hist(データ列, bins=n)
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
データフレームを列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームのカラムをドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
ハイパボリック・サインの逆数を求める	math.asinh(x)
リストを横軸と指定して、折れ線を描く	plt.plot(range(len(xdata)), xdata)
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
黄色いバツ印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
折れ線グラフに青い▽印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
データフレームの列がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
昇順にデータフレームを列を用いてソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムを描画して、その色をコーンフラワーブルーにする	plt.hist(データ列, color='cornflowerblue')
折れ線グラフの色をダークシアンに変更する	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフを描画して、その色をティールに指定する	plt.plot(データ列, データ列2, color='teal')
＜オプション＞UTF8を使用する	encoding = 'utf-8'
実数の逆余弦を計算する	math.acos(x)
ファイルパスをBOM付きを使って開く]	open(filepath, encoding='utf_8_sig')
プログラムの実行を異常止める	sys.exit(1)
箱ひげ図を二つ並べる	plt.boxplot([データ列, データ列2])
リストとリストを接続する	aList + aList2
グラフを画面用に指定する	sns.set(context='notebook')
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
既存のファイルを追加できるようにUTF8でオープンする]	open(filepath, mode='a', encoding='utf-8')
文字列の右側から余分な改行を除去する	s.rstrip()
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
データ列をインポートする	import pandas as pd
SJISで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
ヒストグラムを描画して、その色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
ファイルをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
文字列が無限に続くイテラブル	itertools.repeat(element)
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
折れ線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
データ列を分割数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
リストとリストについて明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
＜オプション＞エンコーディングをUTF8に設定する	encoding = 'utf-8'
正規表現に文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
データ列とラベルを指定して、縦棒グラフを描画する	plt.bar(ラベル列, データ列)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
日付データが水曜日かどうか調べる	aDate.weekday() == 2
横棒グラフをプロットして、中央寄せする	plt.barh(ラベル列, データ列, align='center')
イテラブルを文字列リストに変換して、部分文字列によって結合する	sub.join(map(str, iterable))
文字列中に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
ふたつの関係が真上位集合かテストする	aSet > aSet2
イテラブルとリストで淡いの折れ線グラフをプロットし、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
符号なし８ビット整数型のゼロ埋めされたベクトルを作成する	np.zeros(要素数, dtype=np.uint8)
＜オプション＞ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
データフレームのカラムを百の位で丸めて、整数にする	df[col].round(-2).astype(int)
リストと数列についての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
折れ線グラフに黄色いポイント印を描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
ヒストグラムを描画して、その色をモカシンに設定する	plt.hist(データ列, color='moccasin')
スピアマンとしてデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='spearman')
ヒストグラムを描画して、その色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
データフレームのカラムの中に文字列がある	df[col].isin([value])
折れ線グラフに線幅nの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
データ列の時を見る	ds.dt.hour
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
データフレームをインデックスを用いて昇順にソートする	df.sort_index(ascending=True)
データフレームのメディアン	df.median()
＜オプション＞色をピーチパフに設定する	color = 'peachpuff'
折れ線グラフを点線で描画する	plt.plot(データ列, データ列2, linestyle='dotted')
明るいグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
色差別ないグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
JSONLファイルにSJISでデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
カラーコードに横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
＜オプション＞色をシーグリーンにセットする	color = 'seagreen'
オブジェクトのフィールドの値を値に指定する	setattr(obj, プロパティ名, 値)
nが3の倍数か調べる	n % 3 == 0
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
データフレームのカラムの未入力値を最大値で埋める	df[col].fillna(df[col].max())
集合を変更不能に変換する	frozenset(aSet)
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
列によって降順に破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
文字列リストに列を変換して、'改行で一つにする	'\n'.join(map(str, iterable))
nがn2以下か調べる	n <= n2
リストとリストの色差別ないグラフを描いて、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストをヒストグラムにする	plt.hist(aList)
nが偶数か調べる	n % 2 == 0
＜オプション＞暗い赤を使う	color = 'darkred'
折れ線グラフに大バツ印を加える	plt.plot(データ列, データ列2, marker='X')
ヒストグラムを描画してその色をスノーに設定する	plt.hist(データ列, color='snow')
集合をリストに変換する	list(aSet)
タプルの平均値	sum(aTuple)/len(aTuple)
リストとリストの折れ線を描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
グラフの用途を論文に指定する	sns.set(context='paper')
折れ線グラフを描画して、その色をコーラルにセットする	plt.plot(データ列, データ列2, color='coral')
パープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='purple')
棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
二つのオブジェクトが同じ参照か確認する	obj is obj2
＜オプション＞グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
アクアマリンにヒストグラムの色を指定する	plt.hist(データ列, color='aquamarine')
データ列を10の位で丸める	ds.round(-1)
リストと数列の折れ線グラフを描画し、、その色をカラーコードに変更する	plt.plot(xdata, ydata, color=rgb)
データ列を度数分布図にする	plt.hist(ds)
線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
データフレームから重複した行を削除する	df.drop_duplicates()
線グラフの色を淡い茶色にセットする	plt.plot(データ列, データ列2, color='tan')
最後の部分文字列で文字列を分けたときの先頭の文字列	s.rpartition(sub)[0]
nが一桁の数か確認する	0 <= n <= 9
カンマで文字列を区切って列挙する	s.split(',')
散布図に黒色の左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='k')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
空のカウンタを用意する	collections.Counter()
データフレームを２つの列の値でまとめたグループ	df.groupby(['A', 'B'])
線グラフを描画して、その色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
表を見る	df.head()
整数nを二進表記に変換する	bin(n)
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
リストの全ての要素を取り除く	aList.clear()
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
菱形マーカーを散布図に使う	plt.plot(xdata, ydata, marker='D')
折れ線グラフの色をミディアムスプリンググリーンにセットする	plt.plot(データ列, データ列2, color='mediumspringgreen')
データフレームの中にある文字列と日付データの数を数える	df.isin([value, value2]).sum()
データフレームを破壊的に'A'列によってでソートする	df.sort_values(by='A', inplace=True)
＜オプション＞ゴールド色を使用する	color = 'gold'
パラメータが0に近づくときの数値の極限値を算出する	sympy.limit(e, z, 0)
折れ線グラフを描画して、その色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
ヒストグラムを描画して、色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
度数分布図の描画して、正規化する	plt.hist(データ列, density=True)
データフレームとしてCSVファイルを読み込む	pd.read_csv(filename, sep=',')
リストとリストの散布図に赤色の四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
折れ線グラフに緑色のクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
リストと配列についての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
リストの要素を昇順にソートする	sorted(aList, reverse=False)
浮動小数点数を数で割った余り	x % y
行列の行ごとの分散	np.var(aArray, axis=1)
折れ線グラフを描画して、その色をスチールブルーに指定する	plt.plot(データ列, データ列2, color='steelblue')
リストと配列についての散布図に▲マーカーを描画する	plt.plot(xdata, ydata, marker='^')
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
文字列を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
配列についてのヒストグラムを暗い色として描く	plt.hist(xdata, color='dark')
リストとリストの折れ線グラフを描画して、透明度をalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
列を出現回数してカウンタを更新する	aCounter.update(iterable)
配列間の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
赤色のバツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
データフレームのインデックスがnの行を抽出する	df.loc[n]
リストとリストについて散布図を描き、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
色差別ない色として散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
＜オプション＞スプリンググリーン色を用いる	color = 'springgreen'
グラフにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
ヒストグラムを描画して、その色を淡い茶色にセットする	plt.hist(データ列, color='tan')
プロットをプレゼン用に設定する	sns.set(context='talk')
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
データフレームを列ごとにグループ化して、個数を計算する	df.groupby(column).count()
文字列を空白を用いて分割する	s.split()
データフレームからn行、サンプリングする	df.sample(n)
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
データフレームのカラムの中に文字列と文字列がいくつあるかカウントする	df[col].isin([value, value2]).sum()
列から集合	set(iterable)
ふたつの集合が共通の要素を持たないかテストする	aSet.isdisjoint(aSet2)
ふたつのリストの共通りスト	list(set(aList) & set(aList2))
nの三乗	n ** 3
ファイルパスを追加モードとして開く]	open(filepath, mode='a')
文字列リストを連結する	''.join(aStringList)
黒い菱形マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='D', c='k')
＜オプション＞文字コードtextを使用する	encoding = text
データフレームのカラムの中にある日付データの合計を数える	df[col].isin([value]).sum()
＜オプション＞色を赤に設定する	color = 'red'
データ列を100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
パステル調の色のヒストグラムとして配列を描画する	plt.hist(xdata, color='pastel')
集合にイテラブルを追加更新する	aSet.update(iterable)
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
nの桁数	len(str(n))
ヒストグラムの色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
最大長nの両端キューをリストから用意する	collections.deque(iterable, maxlen=n)
配列のデータ型	aArray.dtype()
表データを小さい順に列によってソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフを描画して、その色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
明るい色で散布図を描く	plt.plot(xdata, ydata, c='bright')
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
タプルをnから番号付けする	enumerate(aTuple, start=n)
ヒストグラムを描画して、その色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
本日が火曜日	datetime.datetime.today().weekday() == 1
色を全般的にパステル調にする	sns.set(pallete='pastel')
行列の逆行列	np.linalg.inv(aArray)
ファイルパスの拡張子付きのファイル名を見る	os.path.basename(filepath)
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
replにデータフレームの値をまとめて正規表現patternで置換する	df.replace(pattern, repl, regex=True)
数を小数点以下で丸める	round(x, n)
データフレームの列と列の相関行列	df[[column, column2]].corr()
散布図をバツマーカーを用いて描画する	plt.plot(xdata, ydata, marker='x')
文字列をユニコードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
グラフの色をpalleteNameに設定する	sns.set(pallete=palleteName)
サドルブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='saddlebrown')
＜オプション＞ホットピンク色を用いる	color = 'hotpink'
＜オプション＞ベージュ色を使用する	color = 'beige'
配列とリストの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
折れ線グラフの色をパールバイオレットレッドにセットする	plt.plot(データ列, データ列2, color='palevioletred')
等間隔でn個にリストを分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
＜オプション＞レベッカパープルを用いる	color = 'rebeccapurple'
カウンタをタプルを使って更新する	aCounter.update(aDict)
イテラブルとリストについての散布図に赤い丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o', c='r')
列の値によってデータフレームをグループ化し、要約統計量を算出する	df.groupby(column).describe()
ヒストグラムを描画して、色をスノーに設定する	plt.hist(データ列, color='snow')
Pandasで、データフレームのカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
リストをナンバリングする	enumerate(aList)
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
＜オプション＞ダークグリーンにグラフの色を変更する	color = 'darkgreen'
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
文字列がn回続くイテラブル	itertools.repeat(element, n)
赤いバツマーカーを配列と配列についての散布図にプロットする	plt.plot(xdata, ydata, marker='x', c='r')
グラフを描画する準備をする	from sympy import N
＜オプション＞バッファリングのサイズを変更する	buffering = 4096
データ列を千の位で丸める	ds.round(-3)
リストを色差別ない色のヒストグラムで描画する	plt.hist(xdata, color='colorblind')
リストとリストについて散布図を描いて、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
整数nを十六進数表現に変換する	hex(n)
リストとイテラブルについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
整数nの16進リテラル	hex(n)
パステル調のグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
データフレームを'A'列によってで降順にソートする	df.sort_values(by='A', ascending=False)
折れ線グラフを描画して、その色を黄緑に設定する	plt.plot(データ列, データ列2, color='chartreuse')
２つの文字列が同じでないか	s != s2
startからendの範囲のヒストグラムを用いてリストを描画する	plt.hist(データ列, range=(start, end))
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
＜オプション＞グラフの色をスレートブルーにセットする	color = 'slateblue'
データフレームのリストで指定された列の各列間の相関係数	df[aList].corr()
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
文字列のn番目を求める	s[n]
正弦	math.sin(x)
列の歪度を求める	ds.kurt()
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのリストカラムの中にいくつ欠損値が存在するか数える	df[aList].isna().sum()
折れ線グラフを描画してその色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
列'A'と列'B'をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
リストと配列についての散布図に赤色のダイアモンドマーカーを描く	plt.plot(xdata, ydata, marker='D', c='r')
折れ線グラフを描画して、その色をインディアンレッドに変更する	plt.plot(データ列, データ列2, color='indianred')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
データ列とリストについて散布図を描画して色を暗いに指定する	plt.plot(xdata, ydata, c='dark')
データフレームを'A'列と'B'列によって並べる	df.sort_values(by=['A', 'B'])
データフレームのリストカラムの正規分布に対する上下広がり	df[aList].skew()
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
現在のタイムスタンプ	int(time.time())
＜オプション＞読み込むシート名をnamesに設定する	sheet_name = names
黒色の色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
要素はセットに含まれる	element in aSet
書き込み用にBOM付きでファイルを開く]	open(filepath, mode='w', encoding='utf_8_sig')
ベクトルの内積	np.dot(aArray, aArray2)
折れ線グラフを描画してその色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
文字列中に部分文字列が含まれないかどうか調べる	sub not in s
＜オプション＞シーグリーン色を用いる	color = 'seagreen'
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
０で全要素を初期化された整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int)
データフレームのリストカラムの欠損値を最小値で置換する	df[aList].fillna(df[aList].min())
列を出現回数してカウンタから引く	aCounter.subtract(iterable)
year年day月を日付時刻にする	datetime.datetime(year=year, month=month, day=1)
n個にデータ列をビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
ファイルからストリームを読み込みfileとする	file = open(filepath)
データフレームから列名を複数指定して選択する	df[columns]
方程式として数式の変数の解を算出する	sympy.solve(e, z)
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
配列とリストの暗いグラフを描いて、色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
線グラフを描画して、その色をパールバイオレットレッドにセットする	plt.plot(データ列, データ列2, color='palevioletred')
ヒストグラムを描画してその色をオーキッドにセットする	plt.hist(データ列, color='orchid')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
折れ線グラフを描画して、色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフを描画して色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフを描画して、その色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
＜オプション＞グラフの色をシスルに変更する	color = 'thistle'
日付データが日付データより先かどうか調べる	aDate < aDate2
マッピングをJSONフォーマットで出力ストリームに保存する	json.dump(aDict, fout, ensure_ascii=False)
＜オプション＞ゴーストホワイトにグラフの色を設定する	color = 'ghostwhite'
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategrey')
スピアマンとしてデータフレームのリストカラムの相関行列	df[aList].corr(method='spearman')
赤い上三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
nまでの偶整数列	list(range(2, n, 2))
データフレームの行を振り直す	df.reset_index()
＜オプション＞エンコーディングを文字コードtextに設定する	encoding = text
＜オプション＞プラムを用いる	color = 'plum'
濃いグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='deep', color='k')
データフレームを各列毎にグループ化して文字列というグループの大きさを求める	df.groupby(column).size()[s]
疑似乱数	random.random()
二つの列でを用いて表データを破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
リストを柱状グラフで可視化する	plt.hist(aList)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
ヒストグラムを描画して、色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
数列とデータ列について散布図を描いて大バツマーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='X', c=rgb)
リストと配列の折れ線グラフをプロットして、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
本日が土曜日か確認する	datetime.datetime.today().weekday() == 5
折れ線グラフのマーカーをクロスにする	plt.plot(データ列, データ列2, marker='x')
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
データ列とリストの青色のパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
nわるn2	n / n2
＜オプション＞グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
折れ線グラフに黄色いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
＜オプション＞線種を点線にセットする	linestyle = 'dotted'
xを浮動小数点数に変換する	float(x)
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
淡い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='muted')
赤い菱形マーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c='r')
全要素を０で初期化された三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
＜オプション＞ディムグレー色を使う	color = 'dimgrey'
ヒストグラムを描画して、色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
データフレームのそれぞれのグループ毎の平均値	df.groupby(column).mean()
0で全要素を初期化されたベクトル	np.zeros(要素数)
データフレームを2つの列を用いて小さい順に並べる	df.sort_values(by=['A', 'B'], ascending=True)
タプルの先頭を除く	aTuple[1:]
データフレームの未入力値を直後の値で埋める	df.fillna(method='bfill')
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
カラーバーを水平に描画する	plt.colorbar(orientation='horizontal')
＜オプション＞EUCを使う	encoding = 'euc_jp'
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
折れ線グラフの大バツ印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
ヒストグラムを描画して、色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
折れ線グラフの色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
両端キューの先頭に列の要素を追加する	deq.extendleft(iterable)
配列とリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
タイムスタンプデータがタイムスタンプデータよりあとかどうか調べる	aDatetime > aDatetime2
タプルをコピーする	aDict.copy()
＜オプション＞グラフの色をアリスブルーに設定する	color = 'aliceblue'
折れ線グラフのダイアモンドマーカーを黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
全要素を初期値で初期化されたベクトルを作る	np.full(要素数, 初期値, dtype=np.int)
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
データ列のNaNを最小値に設定する	ds.fillna(ds.min())
暗いを描画し、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
配列と配列の青い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
ベストな位置に凡例を入れる	plt.legend(loc='best')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
配列を等しい量になるようにビン数nを使ってビン分割する	pd.qcut(aArray, n)
文字列の末尾を使う	s[-1]
＜オプション＞紺を用いる	color = 'darkblue'
データフレームを複数の列で並べ直す	df.sort_values(by=column)
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
＜オプション＞ディムグレー色を用いる	color = 'dimgrey'
データ列を折れ線グラフに描画して、マーカーをバツ印にする	plt.plot(データ列, データ列2, marker='x')
データフレームのNaNが存在する行を削除する	df.dropna()
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
データ列を折れ線グラフに描画して、マーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
折れ線グラフの色を茶色に変更する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
型は名前付きタプルか	issubclass(C, tuple)
線グラフを描画して、その色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
文字列の開始位置と終了位置の間に部分文字列がある	s.find(sub, start, end) != -1
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データフレームのリストカラムは正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
＜オプション＞レベッカパープルに色を設定する	color = 'rebeccapurple'
データフレームのリストカラムの標本標準偏差	df[aList].std()
データフレームが重複しているか	df.duplicated()
文字のユニコード	ord(ch)
＜オプション＞丸マーカーを使う	marker = 'o'
折れ線グラフのラベルをuntitledに指定する	plt.plot(xdata, ydata, label=untitled)
nがn2よりも大きいか	n > n2
nが3の倍数	n % 3 == 0
データフレームの列の名前の一覧を使う	df.columns
ドジャーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dodgerblue')
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
ヒストグラムを描画して、その色をリネンに設定する	plt.hist(データ列, color='linen')
ヒストグラムを描画して、その色をオリベドラブにする	plt.hist(データ列, color='olivedrab')
折れ線グラフに三角マーカーを使う	plt.plot(データ列, データ列2, marker='^')
散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
赤い右三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='>', c='r')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
集合に列の要素を全て追加する	aSet.update(iterable)
データ列を日付データに変換する	pd.to_datetime(ds)
既存のファイルパスをUTF8を使って追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
文字列の開始位置以降が部分文字列で始まるかどうか調べる	s.startswith(sub, start)
リストとデータ列の折れ線グラフを描き、、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
列の長さnの順列	itertools.permutations(iterable, n)
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
二つのリストをスラッシュで区切って表示する	print(value, value2, sep='/')
パステル調の色でリストとリストについての散布図を描画する	plt.plot(xdata, ydata, c='pastel')
Pandasで、データフレームのcollのエポック秒から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
空文字を使う	''
インプレイスでデータフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
＜オプション＞マルーン色を使う	color = 'maroon'
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
各列毎にデータフレームをグループ化し、列の平均値を求める	df.groupby(column)[column2].mean()
折れ線グラフのポイントマーカーの大きさをnにセットする	plt.plot(データ列, データ列2, marker='.', markersize=n)
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ヒストグラムの色をミディアムスレートブルーにする	plt.hist(データ列, color='mediumslateblue')
日付データが日付データより後ろかどうか確認する	aDate > aDate2
untitledとラベル付けしてイテラブルと配列の折れ線グラフを描画する	plt.plot(xdata, ydata, label=untitled)
データフレームをグループ化し、それぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
Pandasで、データフレームのカラムをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
折れ線グラフの星印を黄色くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
箱ひげ図を2つ並べて描く	plt.boxplot([データ列, データ列2])
ヒストグラムを描画してその色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
エクセルデータファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
淡い色のマーカーとして重なりを見やすく散布図を描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
＜オプション＞ローングリーン色を使う	color = 'lawngreen'
グラフのタイトルをuntitledに設定する	plt.title(untitled)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムを破線として描画する	plt.hist(データ列, linestyle='dashed')
データ列のユニークな値	ds.unique()
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
データフレームの列をドロップする	df.drop(column, axis=1)
色差別ないグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リストと数列の青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
小数点数の自然対数を求める	math.log(x)
リストと数列について明るい色の折れ線グラフを描き、、線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='bright')
プラットホームがマックか	sys.platform.startswith('darwin')
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
文字列がリストの要素でないか	element not in aList
ヒストグラムを描画して、その色をミディアムオーキッドにする	plt.hist(データ列, color='mediumorchid')
データフレームのカラムの中にいくつ欠損値が存在するかカウントする	df[col].isna().sum()
折れ線グラフに大きさnの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
データフレームのリストカラムの欠損値をxで置換する	df[aList].fillna(x)
＜オプション＞グラフの色をティールに設定する	color = 'teal'
折れ線グラフに緑色の下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
ヒストグラムの色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
＜オプション＞グラフの色をサーモンに設定する	color = 'salmon'
ヒストグラムを描画して、色をオレンジに指定する	plt.hist(データ列, color='orange')
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
＜オプション＞スノーを使用する	color = 'snow'
＜オプション＞グラフの色をシルバーに設定する	color = 'silver'
有理数を用いる	import fractions
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
数列とリストの黒色の淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームが重複しているかどうか	df.duplicated()
＜オプション＞グラフの色をダークオーキッドに設定する	color = 'darkorchid'
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
＜オプション＞グラフの色をローングリーンに設定する	color = 'lawngreen'
色差別ないグラフをデータ列とデータ列で描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
キューの最初にリストの各値をつけ加える	deq.extendleft(iterable)
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
日付時刻データからn時間分減らす	aDatetime - datetime.timedelta(hours=n)
グラフに凡例を入れる	plt.legend()
色差別ないの折れ線グラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
第２引数で指定されたファイルの名前	sys.argv[1]
データ列の曜日の名前	ds.dt.weekday_name
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
データフレームのカラムの曜日が何日目か調べる	df[col].dt.dayofweek
キーが辞書に存在するか調べる	key in aDict
＜オプション＞ミディアムスレートブルーにグラフの色を変更する	color = 'mediumslateblue'
リストとリストの折れ線をカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
浮動小数点数を複素数にする	complex(x)
線グラフの色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategray')
折れ線グラフの三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
データ列とデータ列について散布図を描画してマーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
＜オプション＞青色を使用する	color = 'blue'
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
エクセルデータファイルを読み込む	pd.read_excel(filename)
パラメータについて数式を積分する	sympy.integrate(e, z)
紺碧色の線グラフを描画する	plt.plot(データ列, データ列2, color='azure')
セットが空か	len(aSet) == 0
列によってデータフレームをソートし、、下位を取り出す	df.sort_values(columns).tail(n)
双方向キューの末尾から値を取り除く	deq.pop()
データフレームを100の位で四捨五入して整数にする	df.round(-2).astype(int)
データフレームのn行までを抽出する	df[:n]
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
棒グラフの幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
オブジェクトはバイト列クラスかどうか確認する	isinstance(obj, bytes)
カウンタを辞書に変換する	dict(aCounter)
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
＜オプション＞オリーブ色を用いる	color = 'olive'
両端キューが空	len(deq) == 0
ファイルからnバイト読む	f.read(n)
アクア色の線グラフを描画する	plt.plot(データ列, データ列2, color='aqua')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
空の階層化マップ	collections.ChainMap()
文字列リストを連結して一つの文字列にする	''.join(aStringList)
ポスター用にグラフを設定する	sns.set(context='poster')
ヒストグラムの線のスタイルを破線に指定する	plt.hist(データ列, linestyle='dashed')
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
データフレームのリストカラムの中に文字列とが含まれる	df[aList].isin([value, value2])
＜オプション＞イエローグリーン色を用いる	color = 'yellowgreen'
文字列内にひとつでもASCII文字があるか	any(c.isascii() for c in s)
折れ線グラフの左三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
暗いの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
色差別ないグラフの色を黒色に変更する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ロージーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='rosybrown')
n個の整数列	list(range(n))
ヒストグラムの色をブランチドアーモンドに指定する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムを描画して、その色をバイオレットに設定する	plt.hist(データ列, color='violet')
＜オプション＞ゴールドにグラフの色を設定する	color = 'gold'
ヒストグラムの色をシスルに指定する	plt.hist(データ列, color='thistle')
折れ線グラフを描画して、その色をダーク・スラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategrey')
データフレームの欠損値を50パーセンタイルに設定する	df.fillna(df.median())
データフレームのカラムの名前を付け直す	df.rename(columns={column: name})
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsteelblue')
＜オプション＞グラフの色をスレートブルーに設定する	color = 'slateblue'
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
ベクトル間の各要素の最小公倍数	np.lcm(aArray, aArray2)
＜オプション＞ビスクにグラフの色を設定する	color = 'bisque'
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
散布図を大バツマーカーで描く	plt.plot(xdata, ydata, marker='X')
二次元リストをフラット化する	sum(aList)
整数の階乗	math.factorial(n)
＜オプション＞ミディアムブルーを使う	color = 'mediumblue'
実数の双曲線余弦	math.cosh(x)
データフレームの中に文字列と日付データがあるか調べる	df.isin([value, value2])
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
重なりを見やすく色差別ない色で配列とイテラブルについての散布図を描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
リストをy座標、リストをx軸として大きさnの散布図を描く	plt.scatter(xdata, ydata, s=n)
文字列全体を正規表現に複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
リストと配列について破線を描画し、、色を色差別ないに指定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
部分集合か	aSet.issubset(aSet2)
3整数の最大公約数	math.gcd(n, n2, n3)
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
＜オプション＞グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
線グラフの色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
データフレームのn行目を取り除く	df.drop(n, axis=0)
折れ線グラフを描画して、その色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
データフレームのカラムを1000の位で四捨五入する	df[col].round(-3)
部分文字列か調べる	sub in s
黄色い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
startからendまでの区間でヒストグラムを描く	plt.hist(データ列, range=(start, end))
散布図に赤色の左三角マーカーを用いる	plt.plot(xdata, ydata, marker='<', c='r')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
最大長nの両端キューを作る	collections.deque(maxlen=n)
ビン数nのヒストグラムを描画する	plt.hist(データ列, bins=n)
ヒストグラムの色をライトグレーにする	plt.hist(データ列, color='lightgrey')
読み込みできるようにファイルパスを開く]	open(filepath, mode='r')
インデント幅nで辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
色差別ないグラフを配列と数列で描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
折れ線グラフを描画してその色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
文字列の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
文字列の右側から空白を除去する	s.rstrip(' ')
配列をヒストグラムにする	plt.hist(aArray)
パステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
文字列のケースをする	s.casefold()
データフレームのインデックスの名前をまとめてnameからname2に付け直す	df.rename(index={name: name2})
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
破線グラフの色を明るいにセットする	plt.plot(xdata, ydata, linestyle='dash', color='bright')
Pandasで数値時刻の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
グラフのx座標のキャプションをuntitledに設定する	plt.xlabel(untitled)
リストと配列のパステル調のグラフをプロットして、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
数のn乗を求める	x ** n
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
正規表現を大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフを描画して、その色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
データフレームのリスト列がどの程度、分散しているか確認する	df[aList].var()
行列を一次元化する	aArray.flatten()
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
配列の分散	np.var(aArray)
ヒストグラムを描画して、その色をインディゴに変更する	plt.hist(データ列, color='indigo')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
文字列の右側からタブを取り除く	s.rstrip('\t')
折れ線グラフを描画してその色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
ヒストグラムを描画して、その色を貝殻に指定する	plt.hist(データ列, color='seashell')
線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
データフレームを関数の値によってまとめたグループを使う	df.groupby(関数)
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
要素はセットに含まれないか調べる	element not in aSet
＜オプション＞オールドレースを使う	color = 'oldlace'
線グラフを描画して、その色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
＜オプション＞青緑に色を設定する	color = 'teal'
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
折れ線グラフを描画して、その色をチョコレートに指定する	plt.plot(データ列, データ列2, color='chocolate')
データ列を使用する	import pandas as pd
＜オプション＞サドルブラウンを使用する	color = 'saddlebrown'
分数を用いる	import fractions
ヒストグラムを描画して、その色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
＜オプション＞読み込むシートの名前をnamesに変更する	sheet_name = names
配列とデータ列についての散布図に黒い菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
文字列中のパターンを新しい文字列として置換する	re.sub(pattern, newsub, s)
＜オプション＞欠損値を先頭に来るようにする	na_position = 'first'
折れ線グラフを描画して、その色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
複数の列によって表を小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
数に浮動小数点数を加える	x + y
＜オプション＞ライムグリーン色を使う	color = 'limegreen'
＜オプション＞ポイントマーカーを描画する	marker = '.'
緑色で実行結果を表示する	print(f'\033[32m{value}\033[0m')
折れ線グラフの菱形印を緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
データ列の中にいくつNaNがあるか数える	ds.isna().sum()
リストとイテラブルの散布図を色差別ない色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
predicateFuncが真となる列の要素を消す	itertools.dropwhile(predicateFunc, iterable)
CSVファイルファイル名がかどうか調べる	filename.endswith('.csv')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
カラーコードの▽マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c=rgb)
2つの変数を同じ値にする	x = y = n
グラフの描画で濃いカラーパレットを使う	sns.set(pallete='deep')
ユニークな値を要素とする配列	np.unique(aArray)
ファイルパスをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
線グラフを描画して、その色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
線幅nのポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
データ列の要約統計量	ds.describe()
線グラフの色をコーンフラワーブルーにセットする	plt.plot(データ列, データ列2, color='cornflowerblue')
データ列を丸めて整数型にする	ds.round().astype(int)
行列の列ごとの平均値	np.mean(aArray, axis=0)
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
辞書をクリアする	aDict.clear()
データフレームの列の記述統計量	df[col].describe()
ヒストグラムを描画して、その色をペルーに指定する	plt.hist(データ列, color='peru')
データフレームが正規分布からどの程度、尖っているか調べる	df.skew()
二つの数値をプリントする	print(value, value2)
セットが空集合か調べる	len(aSet) == 0
線グラフを描画して色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフに黄色い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
グラフ中の(x,y)の位置に凡例を入れる	plt.legend(loc=(x, y))
ヒストグラムを描画して色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
散布図に赤い下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='r')
データフレームをグループ化し、各列に対し合計を計算する	df.groupby(column)[column2].sum()
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ヒストグラムを描画して、色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
明るいの折れ線を描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
文字列を走査し、パターンにマッチするか確認する	re.search(pattern, s)
データフレームの重複する行数のマスクを見る	df.duplicated()
折れ線グラフを描画してその色をアリスブルーに変更する	plt.plot(データ列, データ列2, color='aliceblue')
辞書からキーの値	aDict.get(key)
カラムの欠損値を平均値で埋める	ds.fillna(ds.mean())
データ列とリストを折れ線グラフにプロットする	plt.plot(xdata, ydata)
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
自然数個からk個取り出したときの順列の総数を計算する	math.perm(n, k)
0からNまでの配列	np.arange(N)
＜オプション＞文字列の示すエンコーディングを使用する	encoding = s
データフレームの中で列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームのカラムのタイムゾーンを東京に指定する	df[col].tz_convert('Asia/Tokyo')
ヒストグラムを描画して、色をスカイブルーに指定する	plt.hist(データ列, color='skyblue')
データ列とリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
ヒストグラムを描画して、色を青緑に設定する	plt.hist(データ列, color='teal')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
折れ線グラフの色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
折れ線グラフを描画してその色をアクアマリンに変更する	plt.plot(データ列, データ列2, color='aquamarine')
リストから文字列を除く	aList.remove(element)
部分集合かどうか調べる	aSet.issubset(aSet2)
＜オプション＞オレンジに色を指定する	color = 'orange'
数列とリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
データフレームのリスト列の中のNaNの合計をカウントする	df[aList].isna().sum()
辞書をコピーする	aDict.copy()
辞書をソートしてJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
＜オプション＞スチールブルーにグラフの色を設定する	color = 'steelblue'
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
カラーコードのダイアモンドマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='D', c=rgb)
リストとデータ列についての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
列を文字列に変換して、部分文字列によって連結する	sub.join(map(str, iterable))
タプルをnからナンバリングする	enumerate(aTuple, start=n)
ペルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='peru')
ベクトルのデータ型	aArray.dtype()
データフレームの中に文字列が存在するか	df.isin([value])
タブ区切りのファイルからCSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
全ての十六進数字	string.hexdigits
実数を実数に加える	x + y
折れ線グラフを描画してその色をライトグリーンにセットする	plt.plot(データ列, データ列2, color='lightseagreen')
＜オプション＞グラフの色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
にy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
濃いの色を黒色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='k')
＜オプション＞オールドレースを用いる	color = 'oldlace'
データフレームのリスト列の未入力値を最大値で置換する	df[aList].fillna(df[aList].max())
散布図を黒い大バツマーカーでプロットする	plt.plot(xdata, ydata, marker='X', c='k')
暗いでリストについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列がリストに含まれる	element in aList
ファイルを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
イテラブルのコンビネーション	itertools.combinations(iterable, n)
実数のcos	math.cos(x)
ヒストグラムを描画してその色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
＜オプション＞ダークグレー色を使う	color = 'darkgray'
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
＜オプション＞エクセルファイルのシート名をnamesに設定する	sheet_name = names
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフを描画して色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightgreen')
線グラフを描画して、その色をミディアムパープルに指定する	plt.plot(データ列, データ列2, color='mediumpurple')
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
データフレームのカラムが何時か見る	df[col].dt.hour
両端キューの順序をn個分右にローテンションする	deq.rotate(n)
散布図に黒い下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='k')
２つの文字列をコロンで区切って表示する	print(value, value2, sep=':')
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
配列と数列の散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
ヒストグラムを描画して、色をアンティークホワイトに指定する	plt.hist(データ列, color='antiquewhite')
横棒グラフを描画して、xにグラフ幅を変更する	plt.barh(ラベル列, データ列, width=x)
リストとリストで折れ線グラフを描画し、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n)
非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
イテラブルをセットにする	set(iterable)
文字列中に非ASCII文字がある	any(not c.isascii() for c in s)
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
タプルの末尾のn要素を取り除く	aTuple[:-n]
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
浮動小数点数の整数部	math.modf(x)[1]
データ列の中にが含まれる	ds.isin([value])
＜オプション＞真紅色を使う	color = 'crimson'
暗い色のヒストグラムでイテラブルを描画する	plt.hist(xdata, color='dark')
線グラフを描画して、その色をハニーデューに変更する	plt.plot(データ列, データ列2, color='honeydew')
配列とリストで折れ線を描画してその線幅をnにする	plt.plot(xdata, ydata, linewidth=n)
データフレームのカラムの各値が何回出現するか見る	df[col].value_counts()
行列を2次元1列に変形する	aArray.reshape(-1, 1)
標準入力から1文字だけ読む	sys.stdin.read(1)
実数を浮動小数点数で除算して、切り捨てる	x // y
カラムの中に文字列とがいくつあるか数える	ds.isin([value, value2]).sum()
＜オプション＞グラフの色をインディアンレッドにする	color = 'indianred'
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in s)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
整数nを二進文字列に変換する	bin(n)[2:]
明るい色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
集合＼集合	aSet.difference(aSet2)
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
実数の仮数を求める	math.frexp(x)[0]
データフレームの指定された列名一覧の列だけ抽出する	df[columns]
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
三つの文字列を順に出力する	print(value, value2, value3)
配列をn個に分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームからランダムにn行を取り出す	df.sample(n)
線グラフを描画して、その色をターコイズにセットする	plt.plot(データ列, データ列2, color='turquoise')
0からNまでの配列を初期化する	np.arange(N)
＜オプション＞ミディアムブルー色を使う	color = 'mediumblue'
データフレームのリストカラムをValueMapでまとめて置き換える	df[aList].replace(ValueMap)
折れ線グラフを描画して、その色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
＜オプション＞グラフの色を紺碧に指定する	color = 'azure'
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
文字列は全て印字できるか調べる	s.isprintable()
データ列とラベルを指定して、縦棒を描画する	plt.bar(ラベル列, データ列)
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
n×n2の２次元リストを作る	[[0] * n for _ in range(n2)]
リストとリストの折れ線グラフを描画し、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
本日は何日か知る	datetime.datetime.today().day
＜オプション＞グラフの色をナバホホワイトに設定する	color = 'navajowhite'
文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
黒い丸マーカーをイテラブルとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c='k')
散布図にバツマーカーを使用する	plt.plot(xdata, ydata, marker='x')
数列とデータ列についての散布図に赤い下三角マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c='r')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
ヒストグラムを横に並べてプロットする	plt.hist([データ列, データ列2], color=['b', 'r'])
＜オプション＞カーキを使う	color = 'khaki'
＜オプション＞ミスティローズに色を設定する	color = 'mistyrose'
データフレームのリスト列の母標準偏差	df[aList].std(ddof=0)
データフレームの列の値がxより大きくx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
今日をタプルにする	datetime.datetime.today().timetuple()
Pythonパスの一覧	sys.path
ビン数nでリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
タプルの中の最小値	min(aTuple)
プロットの色を全般的に濃くする	sns.set(pallete='deep')
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
＜オプション＞スカイブルーにグラフの色を設定する	color = 'skyblue'
散布図を黒い上三角マーカーで描画する	plt.plot(xdata, ydata, marker='^', c='k')
文字列が全て空白からなるかどうか調べる	s.isspace()
文字列が部分文字列で終わるかどうか調べる	s.endswith(sub)
グラフを使う	from sympy import N
折れ線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
タプルの値を列挙する	aDict.values()
データフレームの下n行を抽出する	df.tail(n)
リストとリストについて色差別ないグラフを描いて、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データフレームからカテゴリデータの列名の一覧	df.select_dtypes('object').columns
タイムスタンプデータにn週間を加える	aDatetime + datetime.timedelta(weeks=n)
本日が土曜日か	datetime.datetime.today().weekday() == 5
＜オプション＞namesを列の名前に設定する	names = names
＜オプション＞グラフの色を紺碧に設定する	color = 'azure'
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
浮動小数点数が負	x < 0
アルファベットの大文字を全部使う	string.ascii_uppercase
nが奇数か	n % 2 == 1
データフレームのリストで指定された列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
文字列を走査し、パターンにケースを無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストの黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
列を等間隔でn個にビニングする	pd.cut(ds, n)
JSONLファイルにエクセルファイルファイルでデータフレームを書き込む	df.to_excel(filename)
データフレームのカラムを十の位で丸めて整数型にする	df[col].round(-1).astype(int)
散布図に黒い大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c='k')
値が集合に含まれるか調べる	element in aSet
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を算出する	df.groupby([column, column2], as_index=False).max()
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
白いヒストグラムを描画する	plt.hist(データ列, color='w')
文字列をセパレータで区切り、列挙する	s.split(sep)
折れ線グラフを描画して、その色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
折れ線グラフを描画して、色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
ファイルを読み込みできるように開く]	open(filepath, mode='r')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
デピンクにヒストグラムの色を変更する	plt.hist(データ列, color='deeppink')
＜オプション＞ミディアムパープルを使う	color = 'mediumpurple'
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
リストとイテラブルの折れ線グラフをアルファalphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
配列と配列について散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
データ列を使う	import pandas as pd
整数nが配列のどれかか調べる	n in aArray
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
データフレームを'A'列の値によってまとめたグループを使う	df.groupby('A')
グラフのテーマをpalleteNameに設定する	sns.set(pallete=palleteName)
小数点数の正接の逆数	math.atan(x)
オブジェクトが関数か調べる	callable(obj)
折れ線グラフに△マーカーを使う	plt.plot(データ列, データ列2, marker='^')
データフレームのカラムの値を正規表現でまとめてreplに置換する	df[col].replace(pattern, repl, regex=True)
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
濃い色で散布図を描く	plt.plot(xdata, ydata, c='deep')
データ列とラベル列を指定して、横棒グラフを描画する	plt.barh(ラベル列, データ列)
カラムの中にある文字列との合計を数える	ds.isin([value, value2]).sum()
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
文字列の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データ列を十の位で丸めて整数にする	ds.round(-1).astype(int)
JSONファイルのfをデータに変換する	json.load(fin)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
xでデータフレームのカラムの欠損値を埋める	df[col].fillna(x)
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
データフレームのリストカラムの正規分布に対する左右対称性	df[aList].kurt()
数列と配列の折れ線グラフを描画する	plt.plot(xdata, ydata)
ピアソンでデータフレームのリストで指定された列の相関行列	df[aList].corr(method='pearson')
耐火レンガ色の線グラフを描画する	plt.plot(データ列, データ列2, color='firebrick')
線グラフを描画して、色をベージュにセットする	plt.plot(データ列, データ列2, color='beige')
データ列とデータ列について散布図を描き、、色を暗いにセットする	plt.plot(xdata, ydata, c='dark')
二次元タプルをフラット化する	sum(aTuple)
明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞三角マーカーを描画する	marker = '^'
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
両端キューのn番目に値を途中追加する	deq.insert(n, element)
データフレームのn行目を抽出する	df.loc[n]
データフレームから重複した行を落とす	df.drop_duplicates()
データ列とリストを折れ線グラフで描画する	plt.plot(xdata, ydata)
データ列の第三四分位数	ds.quantile(0.75)
リストを組にする	tuple(aList)
カウンタからマッピングを減らす	aCounter.subtract(aDict)
データフレームの末尾	df.tail()
mathモジュールを用いる	import math
折れ線グラフの色をアイボリーに変更する	plt.plot(データ列, データ列2, color='ivory')
データフレームを各列毎にグループ化して、列の平均値を算出する	df.groupby(column)[column2].mean()
データ列の曜日は何日目か見る	ds.dt.dayofweek
データ列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
配列とリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
双方向キューの末尾から要素を取り出す	deq.pop()
日付時刻データにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
折れ線グラフを描画して色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
＜オプション＞色をアクアマリンにセットする	color = 'aquamarine'
プロットの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
リストとリストの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
カラムの欠損値を直前の値に設定する	ds.fillna(method='ffill')
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
ファイルを全部、読み込む	f.read()
ヒストグラムを描画してその色をシアンに設定する	plt.hist(データ列, color='cyan')
ヒストグラムを描画して色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
浮動小数点数のn乗	x ** n
文字列をコロンで区切って、文字列リストにする	s.split(':')
＜オプション＞どの行もカラムの名前に設定しない	header = None
折れ線グラフのポイントマーカーを緑色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
まとめてValueMapでカラムの値を置き換える	ds.replace(ValueMap)
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
＜オプション＞シエナ色を用いる	color = 'sienna'
リストの要素を昇順にソートする	sorted(aList, reverse=True)
組のn番目の	aTuple[n]
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
＜オプション＞値を置き換える	inplace = True
値をセットから取り除く	aSet.remove(element)
異なる列をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
最大値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].max())
カウンタの要素を列挙する	aCounter.keys()
＜オプション＞色をダークオーキッドに設定する	color = 'darkorchid'
列を分割数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
タブ区切りのファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
ふたつの辞書をマージする	aDict | aDict2
オブジェクトは浮動小数点数型か調べる	isinstance(obj, float)
部分文字列か	sub in s
データフレームを列名リストを用いて並べ直して、更新する	df.sort_values(by=column, inplace=True)
イテラブルと配列の色差別ないグラフを描画して、色を黒色に変更する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
右にn個分双方向キューの順序をローテンションする	deq.rotate(n)
ヒストグラムを描画して色をパープルに設定する	plt.hist(データ列, color='purple')
xが一桁の正の整数か調べる	0 <= x <= 9
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
リスト内の要素は少なくとも一つ真かどうか調べる	any(aList)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
折れ線グラフの色をダークスラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategray')
データ列を横軸として、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
データフレームを各列毎にグループ化して文字列という名前のグループを使う	df.groupby(column).get_group(s)
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
プロットをスライド用に変更する	sns.set(context='talk')
ベクトルの差を計算する	aArray - aArray2
＜オプション＞スラグレーを使う	color = 'slategrey'
＜オプション＞色をラベンダーに変更する	color = 'lavender'
色差別ないグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データフレームを複数の列によってグループ化する	df.groupby(columns)
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
折れ線グラフの色をアンティークホワイトに変更する	plt.plot(データ列, データ列2, color='antiquewhite')
データフレームの列の値がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
リストをビン数nを使ってビンニングする	pd.cut(aList, n)
データフレームを行によって降順でソートする	df.sort_index(ascending=False)
自然数のGCD	math.gcd(n, n2)
リストとデータ列についての散布図に赤色の丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o', c='r')
＜オプション＞モカシンを使用する	color = 'moccasin'
数値の簡単化を行う	sympy.sympify(e)
折れ線グラフに線幅nのダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
黄色い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='y')
文字列中の部分文字列の出現をカウントする	s.count(sub)
ヒストグラムを描画して、その色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
線グラフを描画して、その色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgray')
スタックの左に要素を追加する	deq.appendleft(element)
リストとイテラブルについての散布図を淡い色で重なりを見やすくプロットする	plt.plot(xdata, ydata, c='muted', alpha=0.5)
両端キューのn番目に値を差し込む	deq.insert(n, element)
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
スピアマン相関係数を用いてデータフレームの相関行列を求める	df.corr(method='spearman')
タプルのコンビネーション	itertools.combinations(iterable, n)
文字列を最後の部分文字列で二分する	s.rpartition(sub)
文字列内にひとつでも空白が含まれるかどうか調べる	any(c.isspace() for c in s)
折れ線グラフの色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
ファイルパスの絶対ファイルパスを見る	os.path.abspath(filepath)
線グラフを描画して、その色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
文字列を正規表現で分割する	re.split(pattern, s)
リストとリストについての散布図に黒色の下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
データフレームの列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
データフレームのカラムの曜日名	df[col].dt.weekday_name
データフレームからカテゴリデータの列を取り出す	df.select_dtypes('object')
n引くn2	n - n2
ブール型の０で全要素を初期化された行列	np.zeros(行数, 列数, dtype=np.int32)
黒い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
データフレームを小数点以下n桁で丸める	df.round(n)
データ列とリストの濃いを描画してその色を黒くする	plt.plot(xdata, ydata, linestyle='deep', color='k')
浮動小数点数で数を整数除算する	x // y
ヒストグラムを描画して、色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
ファイルからバイナリストリームを開き]、fとする	f = open(filepath, mode='rb')
タプルをリバースする	reversed(aTuple)
文字列をカンマで分割して、文字列リストにする	s.split(',')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
＜オプション＞パレットトルコイズを使う	color = 'paleturquoise'
ヒストグラムの色をライトイエローにセットする	plt.hist(データ列, color='lightyellow')
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
文字列を最初の部分文字列で分けたときの最初の文字列	s.partition(sub)[0]
折れ線グラフを描画してその色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
全てのシートをファイルから読む	pd.read_excel(filename, sheet_name=None)
折れ線グラフを描画して、その色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
データフレームのカラムの文字列をNaNにする	df[col].replace(s, np.nan)
線グラフを描画して色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategray')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
ベクトルの合計	np.sum(aArray)
データフレームのNaNをxに設定する	df.fillna(x)
0から始まる無限数列	itertools.count()
オプションで、標準エラーに出力する	file = sys.stderr
＜オプション＞グラフの色を白に設定する	color = 'white'
＜オプション＞四角マーカーを使う	marker = 's'
データフレームから列を二つ選択する	df[[column, column2]]
明るい色の折れ線を描画して線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞ラベンダー色を用いる	color = 'lavender'
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgray')
リストにリストを続けた列	itertools.chain(iterable, iterable2)
黒色の左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
折れ線グラフを描画して、その色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
折れ線グラフを描画して、その色を貝殻に指定する	plt.plot(データ列, データ列2, color='seashell')
ベクトルの行列積	np.matmul(aArray, aArray2)
文字列を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
＜オプション＞黄色に色を設定する	color = 'yellow'
データフレームを'A'列によってを用いて降順にソートする	df.sort_values(by='A', ascending=False)
＜オプション＞リネン色を用いる	color = 'linen'
データ列とデータ列で濃いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
＜オプション＞分割記号をタブにする	sep = '\t'
＜オプション＞ライムに色を設定する	color = 'lime'
暗い色の折れ線を描いて、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
折れ線グラフを描画して、色をハニーデューに変更する	plt.plot(データ列, データ列2, color='honeydew')
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
ファイルにxを文字列に変換して書き込む	f.write(str(x))
＜オプション＞ダークスラテグレー色を使う	color = 'darkslategray'
セットから別の集合との共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
データフレームのカラムは何日か見る	df[col].dt.day
辞書のキー一覧	list(aDict)
ヒストグラムを描画して、その色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
折れ線グラフのマーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
リストとリストについて散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
xが-9以上9以下か確認する	-9 <= x <= 9
＜オプション＞黄色色を使う	color = 'yellow'
グラフの見栄えをいい感じにする	sns.set()
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームを表示するときカラムの最大幅をnにする	pd.set_option('max_colwidth', n)
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
タイムスタンプデータをn時間前にする	aDatetime - datetime.timedelta(hours=n)
リストとリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
カラムの第一四分位数	ds.quantile(0.25)
カラーコードの星マーカーで散布図を描く	plt.plot(xdata, ydata, marker='*', c=rgb)
データフレームの列の値がxのデータを抽出する	df[df[column] == x]
両端キューから最初の要素を取り除く	deq.remove(element)
文字列を最後の部分文字列で二分し、左側の文字列を求める	s.rpartition(sub)[0]
最大値・最小値の範囲で一様な乱数を求める	random.uniform(最小値, 最大値)
リストと配列の散布図を描画して、マーカーをクロスに設定する	plt.plot(xdata, ydata, marker='x')
＜オプション＞ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
にy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
データフレームから型リストで指定されたデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
オブジェクトは整数型か調べる	isinstance(obj, int)
nが2で割り切れる	n % 2 == 0
データフレームのリスト列のNaNを最大値に設定する	df[aList].fillna(df[aList].max())
データフレームのカラムの歪度を計算する	df[col].kurt()
＜オプション＞バッファのサイズを変更する	buffering = 4096
ファイルパスをバイナリ用にオープンする]	open(filepath, mode='rb')
パステル調の色の折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
データフレームを列で集約し、、それぞれのグループごとの分散を求める	df.groupby(column).var()
単位正方行列	np.identity(N)
線グラフを描画して、その色を青に変更する	plt.plot(データ列, データ列2, color='blue')
数値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
棒を描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフを描画してその色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
nの二進文字列	bin(n)[2:]
ヒストグラムを描画して、色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
データフレームのリスト列の中にいくつ欠損値があるか求める	df[aList].isna().sum()
オブジェクトが数値か確認する	isinstance(obj, (int,float))
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
データ列の中にある文字列との数を数える	ds.isin([value, value2]).sum()
トマト色の線グラフを描画する	plt.plot(データ列, データ列2, color='tomato')
カウンタをマッピングで更新する	aCounter.update(aDict)
＜オプション＞バッファリングのサイズを指定する	buffering = 4096
nが1、もしくは2か調べる	n == 1 or n == 2
ファイル全体をリストとして読み込む	f.readlines()
文字列の最初からタブを除去する	s.lstrip('\t')
小麦色色の線グラフを描画する	plt.plot(データ列, データ列2, color='wheat')
リスト中の最初の文字列を探す	aList.index(element)
要素がセットのメンバーでないかどうか調べる	element not in aSet
データフレームの分散	df.var()
＜オプション＞ゴールデンロッドに色を設定する	color = 'goldenrod'
データフレームの列の空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
イテラブルを関数でフィルタする	filter(func, iterable)
エクセルデータからデータフレームを読む	pd.read_excel(filename)
文字列をコロンで区切り、、列挙する	s.split(':')
組の先頭を取り除く	aTuple[1:]
点線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='dotted')
カウンタの項目を、そのカウントだけ列挙する	aCounter.elements()
インデント幅nで、マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
既存のベクトルを元に全要素が0の配列を作る	np.zeros_like(aArray)
リストとリストのパステル調のグラフを描画して、その色を黒くする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフを描画してその色をゲインズボロに変更する	plt.plot(データ列, データ列2, color='gainsboro')
リストをパステル調の色の柱状図で描画する	plt.hist(xdata, color='pastel')
ヒストグラムを描画して色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
＜オプション＞namesをカラムの名前に設定する	names = names
文字列中にひとつでも非アスキー文字が含まれるか	any(not c.isascii() for c in s)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
有理数の分母	q.denominator
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumvioletred')
ヒストグラムの線のスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
タプルのオブジェクトが最初に見つかる場所	aTuple.index(element)
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
疑似乱数を正規分布で計算する	random.normalvariate(mu=0.5, sigma=0.2)
＜オプション＞パウダーブルーに色を設定する	color = 'powderblue'
0からNまでのベクトル	np.arange(N)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
折れ線グラフに線幅nの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
マッピングのキー一覧	list(aDict)
リストとリストについて散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
データフレームのインデックスの名前をまとめて、nameからname2に変更する	df.rename(index={name: name2})
データフレームのリスト列の値をValueMapでまとめて変更する	df[aList].replace(ValueMap)
赤い右三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='>', c='r')
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
リストとリストのカラーコードの暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
数値の符号を同じにする	math.copysign(x, x2)
折れ線グラフを描画して、その色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
＜オプション＞インディアンレッド色を使用する	color = 'indianred'
辞書のキーを要素に設定する	aDict[key] = element
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
データフレームから型の列を抽出する	df.select_dtypes(ty)
データフレームのリストカラムの要約統計量	df[aList].describe()
データ列をヒストグラムで可視化する	plt.hist(ds)
インディゴ色の線グラフを描画する	plt.plot(データ列, データ列2, color='indigo')
データ列の中にと文字列が存在するか	ds.isin([value, value2])
ヒストグラムを描画してその色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
nの無限の数列	itertools.repeat(n)
折れ線グラフを描画して色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
空の階層化辞書	collections.ChainMap()
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgrey')
アヤメのデータセットをロードする	sns.load_dataset('iris')
データフレームを列によって並べて、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームのカラムを四捨五入して、整数にする	df[col].round().astype(int)
線グラフを描画して、その色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
データフレームを'A'列によって大きい順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
改行なしに二つのリストをプリントする	print(value, value2, end='')
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
ヒストグラムの色を白くする	plt.hist(データ列, color='w')
リストとリストについて散布図を描画して、マーカーを上三角に設定する	plt.plot(xdata, ydata, marker='^')
＜オプション＞降順にする	ascending = False
変数を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
リストとリストについて散布図を描画し、、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームの列が文字列が含まれないデータを取り出す	df[not df[column].str.contains(s)]
グラフに凡例を文字列と文字列と入れる	plt.legend([s, s2])
要素が辞書の値として含まれているか調べる	element in aDict.values()
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
文字列が全て英数字かどうか調べる	s.isalnum()
折れ線グラフを描画して、その色をダークバイオレットに指定する	plt.plot(データ列, データ列2, color='darkviolet')
ヒストグラムを描画してその色をミディアムバイオレットレッドにする	plt.hist(データ列, color='mediumvioletred')
疑似乱数を得る	random.random()
リストを濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
折れ線グラフを描画して色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
データフレームの列の値がx、かつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
＜オプション＞バツマーカーを用いる	marker = 'x'
符号付きでnを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
暗い色の折れ線グラフを描画してその線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
異なるカラムをキーとして２つの表を外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
リストとリストについて黒い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
配列の累積和	np.cumsum(aArray)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
データフレームのリストカラムのNaNを最小値に設定する	df[aList].fillna(df[aList].min())
＜オプション＞バイナリモードを使う	mode = 'rb'
二つのカウンタの共通する要素	aCounter & aCounter2
データフレームを二つの列の値でグループ分けする	df.groupby(['A', 'B'])
＜オプション＞色をピンクに設定する	color = 'pink'
ヒストグラムを描画してその色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
データ列とリストの散布図を色差別ない色を使って重なりを見やすくプロットする	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
＜オプション＞グラフの色をダークブルーにセットする	color = 'darkblue'
黒色の星マーカーで散布図を描く	plt.plot(xdata, ydata, marker='*', c='k')
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
マップのコピー	dict(aDict)
赤い右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c='r')
折れ線グラフを描画して、その色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
データ列を折れ線グラフに描画して、マーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
リストとデータ列についての散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
＜オプション＞マゼンタ色を使う	color = 'magenta'
データ列の欠損値を平均に変更する	ds.fillna(ds.mean())
数列とリストで濃いグラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
nがn2より大きい	n > n2
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
イテラブルと配列の色差別ないを描画し、、色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
折れ線グラフを描画してその色をライトスカイブルーに指定する	plt.plot(データ列, データ列2, color='lightskyblue')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
大きさnで数列とリストの散布図を描画する	plt.scatter(xdata, ydata, s=n)
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
データフレームの中のNaNの合計を数える	df.isna().sum()
分割数nでリストを等しい量になるようにビン分割する	pd.qcut(aList, n)
ヒストグラムを描画して、色をゴールドに指定する	plt.hist(データ列, color='gold')
リストのすべての要素をクリアにする	aList.clear()
配列の行ごとの平均値	np.mean(aArray, axis=1)
データ列の欠損値を後の行の値に変更する	ds.fillna(method='bfill')
淡い色で散布図をプロットする	plt.plot(xdata, ydata, c='muted')
入力ストリーム全体を行単位で分割して読み込む	f.readlines()
折れ線グラフを描画して、その色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
スタックをタプルに変換する	tuple(deq)
リストの総和	sum(aList)
線グラフの色をダークターコイズに指定する	plt.plot(データ列, データ列2, color='darkturquoise')
ファイルがない	not os.path.exists(filepath)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
実線グラフを描画する	plt.plot(データ列, データ列2, linestyle='solid')
ヒストグラムの色をライトサーモンにセットする	plt.hist(データ列, color='lightsalmon')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
n2がnより大きく、かつn3未満かテストする	n < n2 and n2 < n3
データフレームのカラムの上位25%	df[col].quantile(0.25)
改行なしに二つの文字列をプリントする	print(value, value2, end='')
積み上げ棒を描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
ヒストグラムを描画してその色を青に変更する	plt.hist(データ列, color='blue')
文字列をフォーマットとして日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
文字列を複数行対応として正規表現で分ける	re.split(pattern, s, flags=re.MULTILINE)
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
リストとリストの黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
昇順に複数の列によってデータフレームをソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列が組の要素	element in aTuple
文字列の左側から空白を取り除く	s.lstrip(' ')
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
nからn2までの整数リストを得る	list(range(n, n2+1))
四角マーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='s')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
既存のファイルを文字列の示す文字コードを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
複数行対応として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
列の欠損値を最大値で埋める	ds.fillna(ds.max())
色差別ないの折れ線をリストとリストとして描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
ネイビーにヒストグラムの色を指定する	plt.hist(データ列, color='navy')
numpyを入れる	import numpy as np
データフレームを列でグループ分けして、それぞれのグループ毎の件数を知る	df.groupby(column).size()
行列のユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
線幅nの折れ線グラフを描画する	plt.plot(xdata, ydata, linewidth=n)
日付時刻データが日付時刻データより後ろ	aDatetime > aDatetime2
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
データフレームを'A'列でソートする	df.sort_values(by='A')
折れ線グラフを描画して、色をシルバーに変更する	plt.plot(データ列, データ列2, color='silver')
＜オプション＞インディゴ色を使う	color = 'indigo'
リストとイテラブルについての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
折れ線グラフの色を青紫にセットする	plt.plot(データ列, データ列2, color='violet')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
ファイルからエクセルファイルを読む	pd.read_excel(filename)
＜オプション＞ラベンダーを使う	color = 'lavender'
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
リストと配列について散布図を描画してマーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
点線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dotted')
データフレームを各列毎に集計して列の最小値を求める	df.groupby(column)[column2].min()
リストの末尾から要素をポップする	aList.pop()
文字列を変数化して、パラメータにする	z = sympy.Symbol(s)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
nがn2以下、それかn3以上か調べる	n <= n2 or n >= n3
小数点数が有限か	math.isfinite(x)
文字列中にひとつでも非数字が含まれる	any(not c.isdigit() for c in s)
0からnまでの整数列	list(range(n+1))
配列とデータ列の折れ線グラフを描画し、、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
辞書を複製する	dict(aDict)
ローングリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lawngreen')
＜オプション＞色をダークオーキッドにセットする	color = 'darkorchid'
ヒストグラムを描画して、その色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
＜オプション＞グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
文字列を最後から空白で区切る	s.rsplit()
日付時刻データの分数	aDatetime.minute
折れ線グラフの色をライムグリーンにする	plt.plot(データ列, データ列2, color='limegreen')
データフレームで、列と列の重複を削除する	df.drop_duplicates(subset=column)
色差別ないの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リストに文字列を追加する	aList.append(element)
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
列とイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
Pandasで、データフレームのcollのエポック秒からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
実数の小数点以下を四捨五入する	round(x)
黒色のポイントマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
＜オプション＞ライトスレイグレーを使う	color = 'lightslategray'
リストと配列の散布図に赤色の右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
＜オプション＞色をライトグレーに設定する	color = 'lightgray'
濃い色の柱状図でリストを描画する	plt.hist(xdata, color='deep')
リストと配列の暗いグラフをプロットして色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
＜オプション＞グラフの色をスラグレーに指定する	color = 'slategray'
第一引数で指定されたファイルの名前	sys.argv[1]
散布図に赤い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='r')
ランダムに重複を認めてn行をデータフレームからサンプリングする	df.sample(n, replace=True)
最初の値を両端キューから取り除く	deq.remove(element)
平均でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].mean())
ヒストグラムを描画して、その色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
両端キューの大きさ	len(deq)
グラフの色をパステル調にする	sns.set(pallete='pastel')
データ列をValueMapでまとめて置換する	ds.replace(ValueMap)
折れ線グラフのバツマーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
＜オプション＞ミントクリームにグラフの色を変更する	color = 'mintcream'
列を100の位で丸める	ds.round(-2)
日付データの月数	aDate.month
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
ベクトルの和	aArray + aArray2
データフレームを表示するとき、カラムの最大幅をnに減らす	pd.set_option('max_colwidth', n)
ヒストグラムを描画して、その色をトマトに設定する	plt.hist(データ列, color='tomato')
セットをイミュータブルなセットに変換する	frozenset(aSet)
＜オプション＞アクアマリンに色を設定する	color = 'aquamarine'
nがn2の倍数か	n % n2 == 0
＜オプション＞グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
散布図に黒い△マーカーを用いる	plt.plot(xdata, ydata, marker='^', c='k')
オブジェクトが名前付きタプルのインスタンスか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
マッピングから項目名で指定した値をポップする	aDict.pop(key)
リストの各要素を関数に適用した結果で並べ直す	sorted(aList, key=func)
折れ線グラフを描画してその色をシャルトリューズに変更する	plt.plot(データ列, データ列2, color='chartreuse')
リストとリストのパステル調のグラフを描いて、色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
上位集合かどうか調べる	aSet.issuperset(aSet2)
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
ヒストグラムを描画して、その色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategrey')
散布図をカラーコードのポイントマーカーで描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
グラフで利用可能な色名の一覧を知る	matplotlib.colors.cnames
ヒストグラムを描画して、その色をビスクに指定する	plt.hist(データ列, color='bisque')
マッピングの値数	len(aDict)
三数の最小値	min(x, y, z)
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
整数を百の位で丸める	round(x, -2)
データ列を十の位で四捨五入して整数にする	ds.round(-1).astype(int)
片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
＜オプション＞色をグリーンイエローに変更する	color = 'greenyellow'
リストとイテラブルについて散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
が名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
＜オプション＞ライトグリーン色を使う	color = 'lightgreen'
高頻出方からカウンタをリストとして得る	aCounter.most_common()
折れ線グラフを描画して、その色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgrey')
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムを描画して、色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
＜オプション＞グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
散布図を黒い左三角マーカーでプロットする	plt.plot(xdata, ydata, marker='<', c='k')
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
数式の変数を数式で置き換える	e.subs(z, e2)
折れ線グラフの▲マーカーを緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
＜オプション＞ライトグリーンを用いる	color = 'lightseagreen'
ヒストグラムを描画してその色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
列の組み合わせを得る	itertools.combinations(iterable, n)
Pandasで文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
データフレームの中に文字列と日付データが存在する	df.isin([value, value2])
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
ふたつの集合の差	aSet.difference(aSet2)
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
データフレームの列の中にいくつ欠損値が存在するか数える	df[col].isna().sum()
折れ線グラフに大きさnの下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
実行環境はWindowsか確認する	sys.platform.startswith('win32')
数列とリストで濃いを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフの色を白に変更する	plt.plot(データ列, データ列2, color='white')
折れ線グラフの左三角印の大きさをnに指定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
配列の分散を計算する	np.var(aArray)
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
２つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
データフレームのリスト列の中に日付データとがいくつあるか数える	df[aList].isin([value, value2]).sum()
ヒストグラムを描画して、その色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
文字列を隔離する	sys.intern(s)
ヒストグラムを描画して、その色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ふたつの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
行列式	np.linalg.det(aArray)
積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
文字列中の大文字を小文字に変換する	s.lower()
実数で実数を	x // y
紺色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
ファイルパスをUTF8として書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
線グラフの色をナバホホワイトにする	plt.plot(データ列, データ列2, color='navajowhite')
方程式として数式の変数の解を求める	sympy.solve(e, z)
イテラブルのイミュータブルな集合	frozenset(iterable)
複数の列によってデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
ヒストグラムの色をダークバイオレットにする	plt.hist(データ列, color='darkviolet')
値を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
イテラブルを文字列リストに変換してカンマによって結合する	','.join(map(str, iterable))
綺麗なグラフを使う	import seaborn as sns
辞書のコピー	dict(aDict)
エクセルファイルファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムを100の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
データフレームを破壊的に列によってを用いて並べ直す	df.sort_values(by=column, inplace=True)
浮動小数点数に実数を加算する	x + y
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
文字列を最後の部分文字列で分けたときの前半の文字列を使う	s.rpartition(sub)[0]
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
データ列は何曜日か見る	ds.dt.weekday_name
文字列が全て空白文字からなる	s.isspace()
データフレームを各カラムと列の組み合わせ毎にグループ化して分散を求める	df.groupby([column, column2], as_index=False).var()
文字列内にひとつでも大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
イテラブルとリストについて散布図を描画し、、マーカーをクロスに設定する	plt.plot(xdata, ydata, marker='x')
ヒストグラムを描画して、色をビスクに設定する	plt.hist(データ列, color='bisque')
ヒストグラムの線のスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
データフレームのNaNを最小値に変更する	df.fillna(df.min())
２つのカウンタの共通する要素	aCounter & aCounter2
配列の標準偏差	np.std(aArray)
二つの文字列を順に表示する	print(value, value2)
nからn2の値を引いてnとする	n -= n2
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
nをn2で割った余りをnとする	n %= n2
平均値でデータフレームの列の欠損値を置き換える	df[col].fillna(df[col].mean())
データフレームを列の値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(column)]
nの8進文字列を使う	oct(n)[2:]
＜オプション＞ライトグレーを用いる	color = 'lightgray'
双方向キューの順序を左にn個分ローテンションする	deq.rotate(-n)
リストを展開してプリントする	print(*aList)
ヒストグラムを描画して、色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
リストと数列の散布図に凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
△マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='^')
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列, データ列2, marker='>')
データ列とリストについて散布図をプロットして、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
線グラフを描画して色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgray')
折れ線グラフの下三角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
イテラブルをx軸と指定して配列の変遷をプロットする	plt.plot(range(len(xdata)), xdata)
実数の三乗を計算する	x ** 3
データ列とデータ列について散布図を描画し、、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
実数のルート	math.sqrt(x)
ファイルパスからファイル名を取り出す	os.path.basename(filepath)
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
ヒストグラムを描画して、その色をタンに設定する	plt.hist(データ列, color='tan')
複数行対応としてパターンで文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
双方向キューの左側に要素をつけ加える	deq.appendleft(element)
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
ダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
リストとリストでパステル調のグラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
部分文字列が文字列の終了位置以前に含まれる	s.find(sub, 0, end) != -1
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
数列と数列の散布図を描いて、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
折れ線グラフの四角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
分割数nで配列をビン分割する	pd.cut(aArray, n)
シーケンスをカウンタに変換する	collections.Counter(iterable)
データフレームの中に文字列があるか	df.isin([value])
＜オプション＞色をライトグレーに設定する	color = 'lightgrey'
配列をヒストグラムとして可視化する	plt.hist(aArray)
文字列の大文字小文字を入れ替える	s.swapcase()
文字列の右端から改行を取り除く	s.rstrip('\n')
ヒストグラムを描画して、その色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
nわるn2を求める	n / n2
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
nとn2が等しいか確認する	n == n2
リストを暗い色の柱状図で描画する	plt.hist(xdata, color='dark')
リストとリストの濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームのカラムを四捨五入する	df[col].round()
リストと配列の散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
文字列に漢字がある	re.search('[\u4E00-\u9FD0]', s)
データフレームを表示するとき表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
イテラブルとデータ列についての散布図にカラーコードのクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
リストとイテラブルのカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
分割数nでデータ列を等量でビンニングする	pd.qcut(ds, n)
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
文字列中からパターンにケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームのデータ型の一覧を見る	df.dtypes
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
＜オプション＞マーカーを左三角に変更する	marker = '<'
配列と配列の暗いグラフを描画し、その色を青くする	plt.plot(xdata, ydata, linestyle='dark', color='b')
行列のユニークな要素を求める	np.unique(aArray)
データフレームを'A'列の値によって集計し、列挙する	[(name, group) for name, group in df.groupby('A')]
セットが空集合でない	len(aSet) != 0
JSONLファイルに小数点以下3桁までデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
折れ線グラフを描画して色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
散布図を色差別ない色のマーカーで描画する	plt.plot(xdata, ydata, c='colorblind')
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
データ列の欠損値を最大値に変更する	ds.fillna(ds.max())
オブジェクトがリストの要素でないか調べる	element not in aList
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
データフレームを二つの列で小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
ヒストグラムを描画して、その色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
折れ線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
実数の正接	math.tan(x)
データフレームのカラムが何分か確認する	df[col].dt.minute
二つのリストから辞書	dict(zip(aList, aList2))
ヒストグラムを2つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
散布図に黒い三角マーカーを使用する	plt.plot(xdata, ydata, marker='^', c='k')
配列と数列でパステル調のグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
グラフにグリッド線を付ける	plt.grid(True)
ヒストグラムを描画して、その色をペルーにする	plt.hist(データ列, color='peru')
線グラフを描画してその色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
＜オプション＞マーカーをポイントに変更する	marker = '.'
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
折れ線グラフに左三角マーカーを加える	plt.plot(データ列, データ列2, marker='<')
＜オプション＞マーカーを丸に変更する	marker = 'o'
赤いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
文字列をシンボルにして変数にする	z = sympy.Symbol(s)
折れ線グラフに黄色い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
ヒストグラムの色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
データフレームのカラムは正規分布からどの程度、歪んでいるか見る	df[col].kurt()
データフレームを列によってグループ化し、、グループごとの標準偏差を求める	df.groupby(column).std()
イテラブル自身を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
折れ線グラフに緑色の三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
破線の色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
文字列を最後の部分文字列で二分割する	s.rpartition(sub)
列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
カラーパレットをパステル調にする	sns.set(pallete='pastel')
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
疑似乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
紺にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
文字列を積極的に小文字に変換する	s.casefold()
暗いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
横棒グラフを描いて、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
グラフを論文用に設定する	sns.set(context='paper')
データフレームを千の位で丸める	df.round(-3)
コーンフラワーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='cornflowerblue')
列の各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームを各列毎にグループ化して列の平均値を算出する	df.groupby(column)[column2].mean()
＜オプション＞ビスク色を使う	color = 'bisque'
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
ヒストグラムを描画して、その色をビスクに設定する	plt.hist(データ列, color='bisque')
リストとリストの色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
FIXME	np.linalg.eig(aArray)
データ列の各データが何回出現するか見る	ds.value_counts()
カラーコードの三角マーカーをリストと配列についての散布図に描く	plt.plot(xdata, ydata, marker='^', c=rgb)
線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
nが一桁の数か調べる	0 <= n <= 9
散布図に黒い菱形マーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
nが負の数か調べる	n < 0
折れ線グラフに大きさnのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
2つのデータ列を並べて柱状図にする	plt.hist([データ列, データ列2], color=['b', 'r'])
データフレームのリストカラムの中に文字列と文字列が含まれる	df[aList].isin([value, value2])
範囲を指定して部分文字列を文字列の右側から探す	s.find(sub, start, end)
グラフを全般的に濃くする	sns.set(pallete='deep')
グラフを描く	from sympy import N
ヒストグラムを描画して色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
日付時刻データが月曜日	aDatetime.weekday() == 0
＜オプション＞ダークシアグリーン色を使う	color = 'darkseagreen'
＜オプション＞エクセルファイルのシートの名前をnamesに設定する	sheet_name = names
折れ線グラフを描画して、その色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
折れ線グラフに緑色の左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
＜オプション＞グラフの色をゲインズボロに指定する	color = 'gainsboro'
＜オプション＞どの行もヘッダにしない	header = None
線グラフの色をサーモンに変更する	plt.plot(データ列, データ列2, color='salmon')
データフレームを列によってグループ分けして、各グループごとの個数を求める	df.groupby(column).count()
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
散布図を黒い▽マーカーで描画する	plt.plot(xdata, ydata, marker='v', c='k')
縦に3つのデータフレームを一つにする	pd.concat([df, df2, df3], axis=0)
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
カラムの第一四分位数を求める	ds.quantile(0.25)
アルファベットが文字列内にあるか調べる	any(c.isalpha() for c in s)
リストとリストについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
n割るn2の切り上げ	(n + n2 - 1) // n2
リストとデータ列の濃いを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
文字列の末尾から部分文字列を除去する	s.rstrip(sub)
値をシアンにする	f'\033[36m{value}\033[0m'
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
線グラフを描画して、色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
整数nを八進文字列に変換する	oct(n)[2:]
データフレームから重複した行をドロップして、インプレイスする	df.drop_duplicates(inplace=True)
ヒストグラムを描画してその色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
データ列を分割数nでビンニングする	pd.cut(ds, n)
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
リストと数列について破線グラフを描いて、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
＜オプション＞先頭の行をヘッダに指定する	header = 0
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
ゼロ埋めした８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
マップに項目名がないとき、要素を追加する	aDict.setdefault(key, element)
明るい色の折れ線グラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
ヒストグラムを描画して、その色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
＜オプション＞ライトブルー色を使う	color = 'lightblue'
データフレームのカラムの欠損値を前の行の値に設定する	df[col].fillna(method='ffill')
＜オプション＞グラフの種類を一点鎖線に変更する	linestyle = 'dashbot'
散布図を赤い四角マーカーで描く	plt.plot(xdata, ydata, marker='s', c='r')
リストを順にプリントする	print(*aList)
＜オプション＞ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
変数を太字で表示できる文字列にする	f'\033[1m{value}\033[0m'
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
列をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
＜オプション＞線種を一点鎖線にする	linestyle = 'dashbot'
辞書の全項目をクリアする	aDict.clear()
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
全要素を０で初期化された符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
データフレームを各カラム毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
数値を赤色にする	f'\033[31m{value}\033[0m'
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
データフレームを二つの列によって昇順に並べる	df.sort_values(by=['A', 'B'], ascending=True)
nullに等しい識別子	None
暗いでヒストグラムを描画する	plt.hist(xdata, color='dark')
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
グラフの大きさを指定する	plt.figure(figsize=(width, height))
文字列中に部分文字列が含まれるかどうか	sub in s
列を文字列に変換して連結する	''.join(map(str, iterable))
暗い色としてデータ列についてのヒストグラムを描画する	plt.hist(xdata, color='dark')
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
データフレームの重複を確認する	df.duplicated()
xが真か確認する	bool(x)
リストをイミュータブルにする	tuple(aList)
リストと配列について散布図を描画し、、色を淡いに指定する	plt.plot(xdata, ydata, c='muted')
明るいグラフの色を青色に指定する	plt.plot(xdata, ydata, linestyle='bright', color='b')
折れ線グラフに四角マーカーを加える	plt.plot(データ列, データ列2, marker='s')
リストのn番目の要素を消す	del aList[n]
データフレームをグループ化しそれぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
実数の双曲線正接の逆数を求める	math.atanh(x)
文字列の開始位置から終了位置までの範囲で部分文字列の登場	s.count(sub, start, end)
データフレームを丸めて整数にする	df.round().astype(int)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
アルファベットの大文字列	string.ascii_uppercase
漢字が文字列に含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームの最初n行	df.head(n)
真部分集合かどうか	aSet < aSet2
実数を十の位で四捨五入する	round(x, -1)
黒色の色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
折れ線グラフを破線で描画する	plt.plot(データ列, データ列2, linestyle='dashed')
データフレームを列で小さい順にソートする	df.sort_values(by=column, ascending=True)
小数点数以上の最小の整数を求める	math.ceil(x)
データフレームのリストカラムの未入力値を中央値に設定する	df[aList].fillna(df[aList].median())
横棒グラフを描画して、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
ヒストグラムを描画して、色をブラックに設定する	plt.hist(データ列, color='black')
ベクトルから重複を除いた行列を作る	np.unique(aArray)
文字列をマゼンタ化する	f'\033[35m{value}\033[0m'
JSONLファイルにデータフレームを書き込む	df.to_csv(filename, sep='\t')
データフレームを各列と列の組み合わせ毎にグループ分けして、合計を求める	df.groupby([column, column2], as_index=False).sum()
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
現在が火曜日か	datetime.datetime.today().weekday() == 1
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
データフレームのカラムの中に日付データが存在するか調べる	df[col].isin([value])
＜オプション＞グラフの色をプラムにする	color = 'plum'
＜オプション＞タブをセパレータで使用する	sep = '\t'
ヒストグラムを描画して、その色をマゼンタに指定する	plt.hist(データ列, color='magenta')
ヒストグラムを描画して、その色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
平均値と標準偏差から疑似乱数を算出する	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフを描画して色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
＜オプション＞グラフの色をピーチパフに設定する	color = 'peachpuff'
文字列がPythonのキーワード	keyword.iskeyword(s)
相関を可視化する	plt.scatter(xdata, ydata)
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
＜オプション＞コーンフラワーブルーを使う	color = 'cornflowerblue'
データフレームを列の値ごとに集約して各グループ毎の標準偏差を求める	df.groupby(column).std()
赤い下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c='r')
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
濃い色で重なりを見やすくイテラブルと数列の散布図を描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
折れ線グラフに黄色いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
数列とリストで色差別ないグラフを描いて、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データフレームを確認する	df.head()
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
散布図に下三角マーカーを使用する	plt.plot(xdata, ydata, marker='v')
データフレームのリスト列の値を一度にValueMapで置き換える	df[aList].replace(ValueMap)
折れ線グラフを描画してその色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
折れ線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='mediumvioletred')
ファイルパスからストリームを読み込んでfileとする	file = open(filepath)
nとn2の値を足してnに代入する	n += n2
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
＜オプション＞ライトサーモンにグラフの色をセットする	color = 'lightsalmon'
リストと数列の散布図にダイアモンドマーカーをプロットする	plt.plot(xdata, ydata, marker='D')
カラーコードの丸マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
実数に実数を掛ける	x * y
ヒストグラムを描画してその色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
＜オプション＞マゼンタを使う	color = 'magenta'
スピアマン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
seabornのデフォルト見栄えを適用する	sns.set()
タプルの値を昇順に並べる	sorted(aTuple, reverse=True)
＜オプション＞ダークグレーにグラフの色を設定する	color = 'darkgrey'
文字列がいつまでも繰り返すイテラブルを得る	itertools.repeat(element)
二つのリストをコロンで区切ってプリントする	print(value, value2, sep=':')
既存のベクトルをベースに全要素が1の配列	np.ones_like(aArray)
データフレームを列名リストによって整列し、、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
データフレームの中の欠損値を削除する	df.dropna()
n回文字列が繰り返すイテラブル	itertools.repeat(element, n)
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
タプルの要素を小さい順にソートする	sorted(aTuple, reverse=False)
ミディアムパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumpurple')
赤いバツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
データ列とラベル列を指定して積み上げ棒を描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
折れ線グラフの星マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
ヒストグラムの色をフォレストグリーンにする	plt.hist(データ列, color='forestgreen')
折れ線グラフに線幅nの丸印を描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
シーケンスを文字列に変換して、カンマによって連結する	','.join(map(str, iterable))
折れ線グラフを描画して、その色をシーグリーンに変更する	plt.plot(データ列, データ列2, color='seagreen')
ヒストグラムを描画して、その色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
整数個からk個取り出したときの順列の総数を計算する	math.perm(n, k)
データ列の文字列を未入力値にする	ds.replace(s, np.nan)
ヒストグラムを描画して、その色を茶色にする	plt.hist(データ列, color='brown')
赤い右三角マーカーをデータ列とデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='>', c='r')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
散布図に暗い色のマーカーを使う	plt.plot(xdata, ydata, c='dark')
タプルを逆さにする	reversed(aTuple)
nが2で割り切れるか	n % 2 == 0
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
データ列と配列の散布図に上三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^')
nがn2で割り切れないかどうか調べる	n % n2 != 0
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
配列と配列についての散布図にカラーコードの菱形マーカーを描く	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームの標準偏差	df.std()
リストとリストについて散布図を描画してマーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
折れ線グラフを描画して、色をプラムに指定する	plt.plot(データ列, データ列2, color='plum')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
タプルの合計値	sum(aTuple)
折れ線グラフを描画して、色をレベッカパープルにする	plt.plot(データ列, データ列2, color='rebeccapurple')
別の文字列によって文字列を全部置き換える	s.replace(sub, newsub)
データフレームを複数の列で降順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
線グラフの色をミディアムバイオレットレッドにセットする	plt.plot(データ列, データ列2, color='mediumvioletred')
散布図に明るい色のマーカーを使う	plt.plot(xdata, ydata, c='bright')
n番目のカラムを行にしてCSVファイルTSVを読み込む	pd.read_csv(filename, index_col=n)
二進数の文字列をbytesizeバイトのバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
ヒストグラムを描画して、その色を赤に設定する	plt.hist(データ列, color='red')
折れ線グラフを描画して、その色を青に設定する	plt.plot(データ列, データ列2, color='blue')
＜オプション＞セパレータを使わない	sep = ''
折れ線の透明度をalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
入力ストリームから1文字、読み込む	f.read(1)
追加モードとしてファイルをオープンして]、fとする	f = open(filepath, mode='a')
データ列を100の位で丸めて、整数にする	ds.round(-2).astype(int)
リストについてのヒストグラムを色差別ないを用いて描画する	plt.hist(xdata, color='colorblind')
配列とイテラブルについて散布図を描画し、色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
折れ線グラフの大バツ印を黒色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
データフレームの欠損値を直後の値で置き換える	df.fillna(method='bfill')
赤いダイアモンドマーカーを数列とイテラブルについての散布図に描画する	plt.plot(xdata, ydata, marker='D', c='r')
リストの長さを制限する	collections.deque(iterable, maxlen=n)
ヒストグラムを描画して、その色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
データ列とラベルを指定して、縦棒グラフを描く	plt.bar(ラベル列, データ列)
データ列を折れ線グラフに描画して、マーカーを上三角印にする	plt.plot(データ列, データ列2, marker='^')
数列とリストの散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
折れ線グラフを描画して、色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
＜オプション＞改行しない	end = ''
線幅nの下三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
データフレームをCSVファイルから読む	pd.read_csv(filename, sep=',')
データフレームを一度に整数に四捨五入する	df.round()
正規表現patternで一度にreplにデータフレームのリストカラムの値を置き換える	df[aList].replace(pattern, repl, regex=True)
淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
＜オプション＞深紅色を使う	color = 'crimson'
データフレームを関数によってまとめた表を使う	df.groupby(関数)
濃いでイテラブルについてのヒストグラムを描く	plt.hist(xdata, color='deep')
UNIX時間の文字列からタイムスタンプに変換する	pd.to_datetime(s, unit='s', utc=True)
＜オプション＞グラフの色をダークカーキに設定する	color = 'darkkhaki'
＜オプション＞グラフの色をアイボリーに設定する	color = 'ivory'
折れ線グラフを描画して色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
棒を描画し、、幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
文字列の中の大文字・小文字を無視してパターンによるマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
オブジェクトはリストの要素	element in aList
二つの関係がスーパーセットもしくは等しいか調べる	aSet > aSet2
列の第三四分位数	ds.quantile(0.75)
折れ線グラフに三角印を加える	plt.plot(データ列, データ列2, marker='^')
データフレームのリストカラムのpercent分位数を求める	df[aList].quantile(percent/100)
散布図をクロスマーカーとして描画する	plt.plot(xdata, ydata, marker='x')
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='paleturquoise')
データフレームを'A'列と'B'列の値によってグループ化する	df.groupby(['A', 'B'])
赤色の暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
＜オプション＞左三角マーカーを使う	marker = '<'
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
折れ線グラフを描画してその色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
両端キューは空でないかどうか	len(deq) != 0
新しい文字列で文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
リストとリストのカラーコードの明るいを描く	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
ふたつの関係が真上位集合か調べる	aSet > aSet2
濃いグラフを描画し、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
文字列を黄色にする	f'\033[33m{value}\033[0m'
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
ピアソン相関係数でデータフレームのリストで指定したカラムの相関行列	df[aList].corr(method='pearson')
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
ヒストグラムを描画してその色をリネンに設定する	plt.hist(データ列, color='linen')
一点鎖線にヒストグラムの線のスタイルを設定する	plt.hist(データ列, linestyle='dashbot')
最小値でデータフレームの欠損値を補う	df.fillna(df.min())
リスト内の要素が全て真か確認する	all(aList)
k進対数を求める	math.log(x, k)
配列の合計値	np.sum(aArray)
文字列を全て小文字に変換する	s.lower()
ヒストグラムを描画して、その色をオレンジにする	plt.hist(データ列, color='orange')
部分文字列を文字列の最初から探す	s.find(sub)
配列とリストの散布図を描画し、、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
データ列の各データ値の出現回数を計算する	ds.value_counts()
ヒストグラムを描画して、色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
集合から要素を取り除く	aSet.remove(element)
リストとリストの折れ線グラフを描画して、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
二つの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
線グラフを描画して、その色をミスティローズに指定する	plt.plot(データ列, データ列2, color='mistyrose')
辞書をカウンタにする	collections.Counter(aDict)
＜オプション＞オリベドラブを使う	color = 'olivedrab'
グラフをポスター用にセットする	sns.set(context='poster')
データフレームを関数でまとめたグループ	df.groupby(関数)
ファイルのファイルサイズ	os.path.get_size(filepath)
辞書の項目名に対応した値	aDict.get(key)
両端キューのstart番目からend番目の要素を求める	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの左三角印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
カラーコードのポイントマーカーをイテラブルとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
データフレームを列によって集約する	df.groupby(column)
イテラブルを文字列リストに変換して'改行で連結する	'\n'.join(map(str, iterable))
文字列を文字コード列に変換する	[ord(ch) for ch in s]
データ列とリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
数値時刻のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
暗いの折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
マップのの一覧	aDict.values()
ISO8601形式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
折れ線グラフを描画して、その色をフクシアにセットする	plt.plot(データ列, データ列2, color='fuchsia')
＜オプション＞ダークオリーブグリーン色を使う	color = 'darkolivegreen'
エンコーディングで文字列をバイト列に変換する	s.encode(encoding=encoding)
両端キュー中の要素の数をカウントする	deq.count(element)
アルファalphaの折れ線グラフを描く	plt.plot(xdata, ydata, alpha=alpha)
データ列の欠損値を最大値で補う	ds.fillna(ds.max())
整数nのビット長	n.bit_length()
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
折れ線グラフの▲印の大きさをnに指定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
リストの平均	sum(aList)/len(aList)
折れ線グラフを描画して、色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
データフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
＜オプション＞色をピーチパフに変更する	color = 'peachpuff'
＜オプション＞グラフの色をグレーに設定する	color = 'gray'
＜オプション＞グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
折れ線グラフの色をスチールブルーに指定する	plt.plot(データ列, データ列2, color='steelblue')
ヒストグラムを描画して、その色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
ヒストグラムを描画して色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムを描画して、その色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
辞書からキーで指定された項目をポップする	aDict.pop(key)
列から配列を作る	np.array(iterable)
データフレームの未入力値を最頻値にセットする	df.fillna(df.mode().iloc[0])
青いパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
折れ線グラフを描画して、その色をマルーンに変更する	plt.plot(データ列, データ列2, color='maroon')
データフレームの列と列の各列間の相関係数を求める	df[[column, column2]].corr()
辞書にキーワード引数として追加する	aDict.update(**kwargs)
データフレームのカラムの未入力値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
淡い色でヒストグラムをプロットする	plt.hist(xdata, color='muted')
折れ線グラフを描画して、色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
データフレームのリストカラムのpercentパーセンタイル	df[aList].quantile(percent/100)
データフレームの各グループごとの個数を計算する	df.groupby(column).count()
データフレームのn行目を削除する	df.drop(n, axis=0)
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
文字列は全て十進数字か	s.isdecimal()
＜オプション＞ダークグリーン色を使う	color = 'darkgreen'
棒の色を設定する	plt.bar(ラベル列, データ列, color=rgb)
＜オプション＞イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
ユーザから入力される	input()
折れ線グラフに大きさnのポイント印を描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
線幅nの▲マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
オブジェクトは数値	isinstance(obj, (int,float))
散布図を黒い大バツマーカーで描画する	plt.plot(xdata, ydata, marker='X', c='k')
データフレームの欠損値を最頻値に指定する	df.fillna(df.mode().iloc[0])
ヒストグラムを描画して、その色をミスティローズに指定する	plt.hist(データ列, color='mistyrose')
列をリストを境界値として分割する	pd.cut(ds, aList)
グラフの目的を画面に設定する	sns.set(context='notebook')
リストとリストとしてパステル調のを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
＜オプション＞ブラウン色を使用する	color = 'brown'
重複していない行を取り出す	df[not df.duplicated(keep=False)]
データフレームのカラムをValueMapでまとめて置き換える	df[col].replace(ValueMap)
ゼロ埋めされた３2ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
線グラフを描画して、その色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
カラーコードの下三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
nとkの組み合わせを求める	math.comb(n, k)
表データを'A'列によってで破壊的に並べる	df.sort_values(by='A', inplace=True)
ヒストグラムを描画して、色をサンディーブラウンにセットする	plt.hist(データ列, color='sandybrown')
データ列と配列について散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
リストが空かどうか調べる	len(aList) == 0
カラーコードの丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
カウンタを集合に変換する	set(aCounter)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
＜オプション＞グラフの色を青緑に変更する	color = 'teal'
集合から別のセットとの共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
キーが辞書にない時、要素を追加する	aDict.setdefault(key, element)
ヒストグラムの色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
データフレームの中のカラムをn個にビン分割する	pd.cut(df[col], n)
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
データフレームのリストカラムを百の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
散布図にダイアモンドマーカーを使用する	plt.plot(xdata, ydata, marker='D')
＜オプション＞グラフの色をライトコーラルに指定する	color = 'lightcoral'
数列とリストの濃いを描画して、色を青色に変更する	plt.plot(xdata, ydata, linestyle='deep', color='b')
線グラフの色をダークオーキッドにセットする	plt.plot(データ列, データ列2, color='darkorchid')
現在のタイムスタンプ	datetime.datetime.now()
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
リストをn倍する	aList * n
タプルの各値を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
ファイルのフォルダ名	os.path.dirname(filepath)
リストに要素を加える	aList.append(element)
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgray'
n個の整数列を作る	list(range(n))
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
＜オプション＞色をオレンジレッドに設定する	color = 'orangered'
NaN	math.nan
データフレームの値を正規表現でまとめてreplに変更する	df.replace(pattern, repl, regex=True)
データフレームの列が文字列で終わる行を取り出す	df[df[column].str.endswith(s)]
＜オプション＞コロンをセパレータで使う	sep = ':'
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
タプルをn回、接続する	aTuple * n
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
書式をマッピングで文字列整形する	formatText.format_map(aDict)
イテラブルとデータ列の散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
データ列が正規分布からどの程度、尖っているか確認する	ds.skew()
文字列はPythonのキーワードかどうか調べる	keyword.iskeyword(s)
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
データフレームの列の最頻値	df[col].mode()
行列の形状	aArray.shape
リストを分割数nとしてビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
ヒストグラムを描画して、色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
'A'列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby('A').describe()
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
データフレームを各列毎に集計して、列の最大値を求める	df.groupby(column)[column2].max()
イテラブルを無限に繰り返す	itertools.cycle(iterable)
折れ線グラフを描画してその色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
＜オプション＞グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
折れ線グラフを描画して、色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
データ列を折れ線グラフに描画して、マーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
双方向キュー中のデータの数を数える	deq.count(element)
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
nーn2	n - n2
xの小数点以下'5'桁まで出力する	print(':.5f'.format(x))
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
赤い三角マーカーをイテラブルと数列についての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='r')
データフレームのリスト列の未入力値を後の行の値で置換する	df[aList].fillna(method='bfill')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
文字列が全て空白文字からなるか調べる	s.isspace()
淡いグラフの線幅をnにする	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
横棒を描いてグラフ幅をxに変更する	plt.barh(ラベル列, データ列, width=x)
ヒストグラムを描画して、色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
ヒストグラムの線のスタイルを実線に変更する	plt.hist(データ列, linestyle='solid')
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
＜オプション＞色をフローラルホワイトに変更する	color = 'floralwhite'
UNIXコマンドtextを実行する	os.system(text)
＜オプション＞グラフの色をダークオレンジに変更する	color = 'darkorange'
エクセルデータファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データ列の欠損値を前の値で埋める	ds.fillna(method='ffill')
マッピングからカウンタを作る	collections.Counter(aDict)
小数点数の逆双曲線正弦	math.asinh(x)
文字列が全て英字	s.isalpha()
データフレームの中で、列の重複を確認する	df.duplicated(subset=column)
＜オプション＞色をインディアンレッドに変更する	color = 'indianred'
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
プロットで使う横軸にuntitledというラベルをつける	plt.xlabel(untitled)
オブジェクトの型	type(obj)
バリーウッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='burlywood')
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームを列によって小さい順に並べる	df.sort_values(by=column, ascending=True)
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
日本語が文字列に含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
nがn2以下か	n <= n2
二つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
＜オプション＞色をハニーデューにする	color = 'honeydew'
枠なしの凡例を入れる	plt.legend(frameon=False)
辞書から最後の項目をポップする	aDict.popitem()
数値の微分を求める	sympy.diff(e)
＜オプション＞ダークレッド色を用いる	color = 'darkred'
赤い星マーカーをイテラブルとイテラブルについての散布図にプロットする	plt.plot(xdata, ydata, marker='*', c='r')
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
散布図に赤色の丸マーカーを用いる	plt.plot(xdata, ydata, marker='o', c='r')
値を青色で表示する	print(f'\033[34m{value}\033[0m')
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
Pandasで、データ列をタイムスタンプ型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ヒストグラムを描画して、その色をスノーに設定する	plt.hist(データ列, color='snow')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='blueviolet')
整数nを二進表現に変換する	bin(n)
双方向キューの要素をインプレースに反転する	deq.reverse()
整数nの八進数表現を使う	oct(n)
線グラフを描画して、色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
リストとリストについて散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
文字列のカタカナを平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
文字列を紫色で出力する	print(f'\033[35m{value}\033[0m')
折れ線グラフを描画して、その色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
線グラフを描画して、その色をアイボリーに指定する	plt.plot(データ列, データ列2, color='ivory')
行列の演算をする	import numpy as np
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
青紫色の線グラフを描画する	plt.plot(データ列, データ列2, color='violet')
エンコーディングを知る	sys.getdefaultencoding()
ポスター用にグラフを変更する	sns.set(context='poster')
折れ線のラベルをuntitledにする	plt.plot(xdata, ydata, label=untitled)
配列とデータ列について散布図を描画して、マーカーをポイントに変更する	plt.plot(xdata, ydata, marker='.')
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
列の文字列を欠損値に変換する	ds.replace(s, np.nan)
配列とリストについて散布図を描画して、マーカーを四角にする	plt.plot(xdata, ydata, marker='s')
色差別ないの折れ線グラフをリストとリストを使ってプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
＜オプション＞グラフの色をホットピンクに設定する	color = 'hotpink'
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
線グラフの色をシルバーにセットする	plt.plot(データ列, データ列2, color='silver')
nが奇数か調べる	n % 2 == 1
列とイテラブルの直積	itertools.product(iterable, iterable2)
線グラフを描画して、その色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
＜オプション＞ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
文字列の先頭	s[0]
＜オプション＞グラフの色をライムに設定する	color = 'lime'
列の値でデータフレームをまとめたグループ	df.groupby(column)
未定値	None
データフレームのカラムの文字列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
濃いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
カラムは正規分布からどの程度、歪んでいるか確認する	ds.kurt()
二つのデータフレームを列をキーとして右結合する	pd.merge(df, df2, on=column, how='right')
集合から全要素を除去する	aSet.clear()
単位行列を作成する	np.eye(行数, 列数)
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
黒い下三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='v', c='k')
リストとしてカラムを抽出する	df[column].values.tolist()
データフレームの列の値は欠損値	df[col].isna()
ファイルパスから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
折れ線グラフを描画して、色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
カラーコードに棒の色を設定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームを複数の列によって昇順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
線グラフを描画して、その色を白に指定する	plt.plot(データ列, データ列2, color='white')
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
線グラフを描画して、その色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
ファイルをバイナリモードとして開いて]fとする	f = open(filepath, mode='rb')
データフレームを列名リストによってまとめた表を求める	df.groupby(columns)
データフレームを列によってグループ化し、要約統計量を算出する	df.groupby(column).describe()
折れ線グラフを描画して、色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
JSONLファイルにインデックスを付けずにデータフレームを保存する	df.to_csv(filename, index=None)
折れ線グラフのマーカーを右三角にする	plt.plot(データ列, データ列2, marker='>')
ヒストグラムを描画して、その色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
リストとデータ列を折れ線グラフで描く	plt.plot(xdata, ydata)
黒い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
グラフの描画で暗いカラーパレットを使用する	sns.set(pallete='dark')
列から双方向キューを作る	collections.deque(iterable)
startからendの範囲でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
＜オプション＞真紅にグラフの色をセットする	color = 'crimson'
タイムスタンプデータが木曜日かどうか調べる	aDatetime.weekday() == 3
bとn2から成るペア	(n, n2)
2進文字列を整数に変換する	int(s, 2)
＜オプション＞ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
日付データが日付データより前	aDate < aDate2
セットに値を追加する	aSet.add(element)
文字列をシンボルにしてパラメータにする	z = sympy.Symbol(s)
データフレームを列の値によって集約する	df.groupby(column)
数値が双方向キューの中に含まれてる	element in deq
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
リストとリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
双方向キューの左側にリストの各要素を追加する	deq.extendleft(iterable)
フォレストグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='forestgreen')
カラムの未入力値を最頻値で置き換える	ds.fillna(ds.mode().iloc[0])
データフレームをJSONLファイルにインデックスを付けずに書き込む	df.to_csv(filename, index=None)
ヒストグラムを描画して、透明度をxに設定する	plt.hist(データ列, alpha=x)
データフレームを２つの列でまとめた表	df.groupby(['A', 'B'])
データ列とリストの破線グラフを描画して色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
リストでカウンタを更新する	aCounter.update(iterable)
散布図を▼マーカーで描画する	plt.plot(xdata, ydata, marker='v')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列, データ列2, marker='v')
大文字・小文字を無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
文字列中にひとつでも非数字がある	any(not c.isdigit() for c in s)
ヒストグラムを描画して、その色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
線グラフの色をロージーブラウンに変更する	plt.plot(データ列, データ列2, color='rosybrown')
データフレームの列の中に文字列と文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データ列の中に文字列とがいくつ含まれるか数える	ds.isin([value, value2]).sum()
赤い丸マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
折れ線グラフを描画して、その色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
＜オプション＞グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
整数nを八進表現に変換する	oct(n)
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
カラムの未入力値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
＜オプション＞文字列を改行するの代わりに用いる	end = s
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
ヒストグラムを描画して色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
プロットの描画で明るいカラーパレットを使う	sns.set(pallete='bright')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
データフレームの最頻値	df.mode()
データフレームの列と列の相関行列スピアマン順位相関係数で	df[[column, column2]].corr(method='spearman')
ダイアモンドマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
データフレームのリストカラムの分散	df[aList].var()
ファイルパスのセパレータ記号	os.sep
データフレームの欠損値を直前の値で置換する	df.fillna(method='ffill')
データフレームのリストカラムを小数点以下n桁で四捨五入する	df[aList].round(n)
データ列をヒストグラムにする	plt.hist(ds)
濃いの折れ線グラフをリストとリストで描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
黒いポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='k')
データフレームから重複した行を残さず、取り除く	df.drop_duplicates(keep=False)
＜オプション＞小麦色色を使う	color = 'wheat'
明るい色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
配列とリストの淡いグラフを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
カウンタの∩演算する	aCounter & aCounter2
線グラフを描画して、その色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
要素が辞書の値として含まれているかどうか判定する	element in aDict.values()
折れ線グラフに緑色の四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
ヒストグラムの色をフローラルホワイトにセットする	plt.hist(データ列, color='floralwhite')
ヒストグラムの色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
＜オプション＞先頭の行をヘッダに設定する	header = 0
ヒストグラムを描画してその色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
浮動小数点数を浮動小数点数で割る	x / y
黒い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
データフレームの指定された列名リストの列を抽出する	df[columns]
nの二乗	n ** 2
データフレームを表示するとき、行数をnに設定する	pd.set_option('display.max_rows', n)
変数が無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, oo)
濃いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
＜オプション＞グラフの色を耐火レンガに指定する	color = 'firebrick'
オプションで、出力先を標準出力にする	file = sys.stdout
配列と数列の青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を計算する	df.groupby([column, column2], as_index=False).max()
リストの文字列が最初に見つかるインデックスを見る	aList.index(element)
リストと配列の散布図にカラーコードの上三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
黄色い四角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
リストとリストの黒色の色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
マッピングに辞書の値を追加する	aDict.update(aDict2)
Pandasで、dateStringをdatetime64型に変換する	pd.to_datetime(dateString)
＜オプション＞読み込まないフッタをnに設定する	skipfooter = n
前の値でデータフレームのリスト列のNaNを埋める	df[aList].fillna(method='ffill')
整数nの16進数文字列	hex(n)[2:]
オブジェクトの参照カウント	sys.getrefcount(obj)
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
データフレームをJSONLファイルにTSV形式として保存する	df.to_csv(filename, sep='\t')
ヒストグラムを描画して、その色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
ヒストグラムを描画してその色をライムに指定する	plt.hist(データ列, color='lime')
＜オプション＞ダークマゼンタ色を使う	color = 'darkmagenta'
データフレームの中央値を求める	df.median()
＜オプション＞色をフクシアにする	color = 'fuchsia'
カウンタの項目のカウント	aCounter[element]
データフレームを各列とカラムの組み合わせ毎にグループ化して最小値を求める	df.groupby([column, column2], as_index=False).min()
黒い星マーカーで散布図を描く	plt.plot(xdata, ydata, marker='*', c='k')
シーケンスと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
ヒストグラムを描画して、その色をマルーンに変更する	plt.hist(データ列, color='maroon')
データフレームのカラムが何日か見る	df[col].dt.day
赤い星マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
実数を二乗する	x ** 2
追加できるようにEUCで既存のファイルをオープンする]	open(filepath, mode='a', encoding='euc_jp')
実数の仮数	math.frexp(x)[0]
データフレームのカラムの欠損値を中央値に指定する	df[col].fillna(df[col].median())
オリーブにヒストグラムの色をする	plt.hist(データ列, color='olive')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
TSVファイルを用いてデータフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
配列と配列についての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
複数の列によって小さい順にデータフレームを並べ直す	df.sort_values(by=column, ascending=True)
nとn2の排他的論理和	n ^ n2
データ列とイテラブルについての散布図に赤いポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c='r')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
データフレームの列と列の相関行列をヒートマップとして描画する	sns.heatmap(df[[column, column2]].corr())
線グラフの色をペルーに指定する	plt.plot(データ列, データ列2, color='peru')
配列とリストの散布図を描画して、色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
データフレームのカラム名の一覧を見る	df.columns
数列と配列のカラーコードの淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
＜オプション＞グラフの色をパールバイオレットレッドに変更する	color = 'palevioletred'
ゼロ埋めされた三二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
二進文字列を整数にする	int(s, 2)
折れ線グラフに黄色い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
配列の次元の数	aArray.ndim
ヒストグラムを描画して、その色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
＜オプション＞ロイヤルブルー色を使う	color = 'royalblue'
リストとリストの散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
ヒストグラムを描画して、色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
文字列が文字列リストに含まれるかどうか調べる	s in aStringList
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
文字列の末尾から部分文字列を取り除く	s.removesuffix(sub)
＜オプション＞ターコイズにグラフの色を指定する	color = 'turquoise'
＜オプション＞グラフの色をシエナに指定する	color = 'sienna'
カウンタの項目を列挙する	aCounter.keys()
最後から文字列を空白で区切る	s.rsplit()
データフレームから重複する行を残さず、取り除く	df.drop_duplicates(keep=False)
重なりを見やすく散布図をパステル調の色のマーカーとしてプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
上位集合か調べる	aSet.issuperset(aSet2)
キューのstart〜endの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
線グラフを描画して、その色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
ヒストグラムを描画してその色をシスルに設定する	plt.hist(データ列, color='thistle')
両端キューの先頭から要素を取り除く	deq.popleft()
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
ヒストグラムを描画して、その色をスノーに変更する	plt.hist(データ列, color='snow')
三つのデータフレームを横に連結する	pd.concat([df, df2, df3], axis=1)
要素を両端キューにエンキューする	deq.appendleft(element)
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
列一覧	df.info()
文字列をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
エクセルファイルファイルをデータフレームとして読む	pd.read_excel(filename)
＜オプション＞右三角マーカーを使用する	marker = '>'
n個の数値イテラブルを求める	range(n)
黄色い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
線グラフを描画してその色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
＜オプション＞パウダーブルーを使う	color = 'powderblue'
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
データ列を折れ線グラフに描画して、マーカーを▲印にする	plt.plot(データ列, データ列2, marker='^')
オブジェクトは論理値かどうか調べる	isinstance(obj, bool)
カラーコードの下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
数式を部分分数に展開する	sympy.apart(e)
＜オプション＞グラフの種類を点線に設定する	linestyle = 'dotted'
ヒストグラムを描画して、その色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
データ列の未入力値をメディアンで埋める	ds.fillna(ds.median())
線グラフを描画して、その色をオレンジに指定する	plt.plot(データ列, データ列2, color='orange')
データフレームの列をインデックスに変更する	df.set_index(column)
データフレームを列の値によって集計して、グループの合計を求める	df.groupby(column).sum()
リストをイミュータブルな集合に変換する	frozenset(iterable)
線グラフを描画して、色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
＜オプション＞グラフの色をオーキッドに設定する	color = 'orchid'
ライトシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcyan')
全要素を０で初期化された８ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int8)
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
ヒストグラムを描画して、色をオーキッドにセットする	plt.hist(データ列, color='orchid')
列をn個に等間隔で分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列の開始位置以降に部分文字列が含まれないか	s.find(sub, start) == -1
＜オプション＞ミントクリームにグラフの色を設定する	color = 'mintcream'
＜オプション＞色をフローラルホワイトに指定する	color = 'floralwhite'
両端キューの先頭の要素を見る	deq[0]
イテラブルと配列でパステル調のを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
JSONファイルのファイル入力を読み込んでdataとする	data = json.load(fin)
データ列のpercent分位数	ds.quantile(percent/100)
データ列の最頻値	ds.mode()
折れ線グラフを描画して、その色を深紅に変更する	plt.plot(データ列, データ列2, color='crimson')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
小数点数が無限大かどうか調べる	math.isinf(x)
文字列の先頭から空白を取り除く	s.lstrip(' ')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
'A'列によってデータフレームをソートし、、更新する	df.sort_values(by='A', inplace=True)
箱髭図を二つ並べて描画する	plt.boxplot([データ列, データ列2])
キーが辞書上で未定義か調べる	key not in aDict
データフレームの指定された４つの列を取り出す	df[[column, column2, column3, column4]]
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
浮動小数点数を十六進表記の文字列に変換する	x.hex()
折れ線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
＜オプション＞白に色を指定する	color = 'white'
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
リストと配列の散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
＜オプション＞ラベンダーブラッシュ色を使う	color = 'lavenderblush'
黒い淡いをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
＜オプション＞namesをカラム名に設定する	names = names
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
タプルを展開して表示する	print(*aTuple)
nとn2の論理積	n & n2
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
データフレームを列によって並べて行を振り直す	df.sort_values(columns).reset_index(drop=True)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームの中で列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
データ列が何時か確認する	ds.dt.hour
折れ線グラフの色をレベッカパープルに指定する	plt.plot(データ列, データ列2, color='rebeccapurple')
データフレームを列によって昇順に破壊的に整列する	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムの色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
nとn2の論理積を求める	n & n2
ヒストグラムの色を珊瑚に変更する	plt.hist(データ列, color='coral')
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
＜オプション＞濃いシアンにグラフの色を設定する	color = 'darkcyan'
リストとリストでパステル調のを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
項目名が辞書にないとき要素を追加する	aDict.setdefault(key, element)
黒い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
線グラフを描画して、その色を深紅に指定する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフのスタイルを実線にする	plt.plot(データ列, データ列2, linestyle='solid')
＜オプション＞コーンフラワーブルー色を使う	color = 'cornflowerblue'
カラーコードのダイアモンドマーカーを数列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
数式の部分分数化を行う	sympy.apart(e)
データフレームのカラムの名前の一覧を使う	df.columns
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
ルートのチェーンマップ	collections.ChainMap()
折れ線グラフの上三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
イテラブルを文字列に変換してタブで一つにする	'\t'.join(map(str, iterable))
折れ線グラフを描画してその色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
日付データが火曜日	aDate.weekday() == 1
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
線グラフの色をダークターコイズにセットする	plt.plot(データ列, データ列2, color='darkturquoise')
ヒストグラムを描画して、その色をネイビーに設定する	plt.hist(データ列, color='navy')
列によってデータフレームをグループ化して、分散を求める	df.groupby(column).var()
折れ線グラフを描画してその色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
データフレームの欠損値を第二四分位数に設定する	df.fillna(df.median())
二つの表データを横方向にマージする	pd.merge(df, df2)
文字列をISO8601としてタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフを描画して、色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
リストとリストを折れ線グラフで描画する	plt.plot(xdata, ydata)
文字列をカンマによって区切って列挙する	s.split(',')
0から始まる無限な数列を得る	itertools.count()
空のリスト	[]
折れ線グラフを描画して色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
数列とイテラブルの濃いを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームの中に文字列が存在する	df.isin([value])
折れ線グラフにサイズnの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
左に両端キューの順序をn個分ローテンションする	deq.rotate(-n)
リストと数列の色差別ないを描き、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストとデータ列について淡い色の折れ線を描画して、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
1で全要素を初期化された行列を作成する	np.ones(要素数, dtype=np.int)
折れ線グラフを描画して、色をハニーデューに指定する	plt.plot(データ列, データ列2, color='honeydew')
スピアマンを用いてデータフレームの相関行列	df.corr(method='spearman')
日付データからn分、減らす	aDate - datetime.timedelta(minutes=n)
データ列のヒストグラムを描画する	plt.hist(ds)
リストとリストについて散布図を描いて、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
ライトコーラルにヒストグラムの色を変更する	plt.hist(データ列, color='lightcoral')
＜オプション＞追加モードを使う	mode = 'a'
既存の行列をベースに全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
＜オプション＞グラフの色を小麦色に指定する	color = 'wheat'
度数分布図をプロットする	plt.hist(データ列)
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
データ列が何時か見る	ds.dt.hour
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
startからendまでの範囲で度数分布図を描画する	plt.hist(データ列, range=(start, end))
散布図に赤い右三角マーカーを使用する	plt.plot(xdata, ydata, marker='>', c='r')
線グラフを描画してその色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフを描画して、色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
数式の微分を求める	sympy.diff(e)
データフレームを列をキーにしてソートする	df.sort_values(by=column)
＜オプション＞白色を使用する	color = 'white'
カラーコードに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
破線グラフの色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
濃いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームの行を抽出する	df[start:end]
折れ線グラフにサイズnの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
データフレームを列の値ごとに集約して列挙する	[(name, group) for name, group in df.groupby(column)]
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
数式の数値を計算する	float(e)
パターンを前もってコンパイルする	re.compile(pattern)
データフレームの中に日付データと日付データがいくつあるか数える	df.isin([value, value2]).sum()
折れ線グラフを描画して、その色をゴーストホワイトに変更する	plt.plot(データ列, データ列2, color='ghostwhite')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
データフレームのカラムの値が欠損値か調べる	df[col].isna()
マップから最後の項目をポップする	aDict.popitem()
何回まで再帰ができるか	sys.getrecursionlimit()
配列の累積積	np.cumprod(aArray)
データフレームのリスト列の文字列を未入力値に変換する	df[aList].replace(s, np.nan)
＜オプション＞グラフの色をペールグリーンに設定する	color = 'palegreen'
散布図に黒い丸マーカーを使用する	plt.plot(xdata, ydata, marker='o', c='k')
リストと配列についてリストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='goldenrod')
線グラフを描画して、その色をグリーンに指定する	plt.plot(データ列, データ列2, color='green')
散布図に黒色の▼マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
全てのシートをファイルから読み込む	pd.read_excel(filename, sheet_name=None)
＜オプション＞赤色を使う	color = 'red'
折れ線グラフに丸印を使う	plt.plot(データ列, データ列2, marker='o')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
折れ線グラフのマーカーを星にする	plt.plot(データ列, データ列2, marker='*')
配列が何次元か	aArray.ndim
高頻出方からカウンタを列挙する	aCounter.most_common()
リストとリストの散布図にクロスマーカーをプロットする	plt.plot(xdata, ydata, marker='x')
配列とリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストと数列についての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
辞書の浅いコピーを作る	aDict.copy()
淡いの折れ線グラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
日付データが日付データと同時	aDate == aDate2
データフレームのNaNを直前の値で埋める	df.fillna(method='ffill')
ヒストグラムを描画してその色をベージュに設定する	plt.hist(データ列, color='beige')
データラベルの場所を指定する	plt.legend(loc=(x, y))
データ列の柱状図を描画する	plt.hist(ds)
スラッシュで区切って２つの数値をプリントする	print(value, value2, sep='/')
xのハッシュ値を算出する	hash(x)
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
データフレームの相関行列ケンドール相関係数で	df.corr(method='kendall')
リストとデータ列の散布図をプロットして、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
配列と配列についての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
＜オプション＞ミディアムオーキッド色を用いる	color = 'mediumorchid'
折れ線グラフに線幅nのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
ヒストグラムを描画して、その色をネイビーにセットする	plt.hist(データ列, color='navy')
標準入力を使う	sys.stdin
クラスのサブ型かどうか	issubclass(サブクラス, クラス)
折れ線グラフを描画して、その色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
配列とリストの青色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
文字列の末尾からタブを取り除く	s.rstrip('\t')
データフレームを各カラムと列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
線グラフを描画して、その色をラベンダーブラッシュに変更する	plt.plot(データ列, データ列2, color='lavenderblush')
＜オプション＞ダークレッドにグラフの色を指定する	color = 'darkred'
データフレームのカラムの欠損値を後の行の値で埋める	df[col].fillna(method='bfill')
＜オプション＞文字コードをUTF8に設定する	encoding = 'utf-8'
パステル調のグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
折れ線グラフを描画して色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
実数を実数で整数除算する	x // y
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
ヒストグラムを描画して、色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
＜オプション＞青緑色を用いる	color = 'teal'
折れ線グラフの星印を赤くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
データ列と数列の濃いを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフを描画して色をシエナに指定する	plt.plot(データ列, データ列2, color='sienna')
整数nが組のどれかか調べる	n in aTuple
折れ線グラフを描画して、色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
データフレームのカラムの欠損値を前の行の値で補う	df[col].fillna(method='ffill')
データフレームの欠損値を最頻値で補う	df.fillna(df.mode().iloc[0])
淡い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='muted')
リストを昇順にソートする	sorted(aList, reverse=False)
＜オプション＞ミディアムターコイズ色を使う	color = 'mediumturquoise'
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
＜オプション＞ダークオレンジにグラフの色を指定する	color = 'darkorange'
横棒の幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
配列とリストについての散布図に黒い▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
ファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ふたつの集合のインターセクションのみに更新する	aSet.intersection_update(aSet2)
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
全要素を０で初期化された行列を作る	np.zeros(行数, 列数)
折れ線グラフを描画して、その色をパパイヤウィップに指定する	plt.plot(データ列, データ列2, color='papayawhip')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
現在をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
xを整数に変換する	int(x)
青い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ヒストグラムを描画して、その色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
青い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
逆順のキュー	reversed(deq)
パターンに大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフの下三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
nをn2乗に増やす	n **= n2
リストからオブジェクトと等しい最初の要素を取り除く	aList.remove(element)
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
線グラフの色をゴールドに指定する	plt.plot(データ列, データ列2, color='gold')
折れ線グラフを描画してその色をカーキに指定する	plt.plot(データ列, データ列2, color='khaki')
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
散布図を暗い色のマーカーとして重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームのリスト列の文字列を未入力値に変換する	df[aList].replace(s, np.nan)
＜オプション＞ダークシアン色を使う	color = 'darkcyan'
ダークシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
ヒストグラムを描画して、その色をゴーストホワイトにする	plt.hist(データ列, color='ghostwhite')
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
等差数列を配列に変換する	np.arange(開始値, 終端値, 等差)
ヒストグラムを描画して、その色をスラグレーに指定する	plt.hist(データ列, color='slategray')
NaNも加えてデータフレームの列をダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
データフレームのカラムの各データが何回出現するか見る	df[col].value_counts()
数式を変数について微分する	sympy.diff(e, z)
データ列の中に存在する文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
グラフの描画で淡いカラーパレットを使う	sns.set(pallete='muted')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
＜オプション＞グラフの色をライトコーラルに変更する	color = 'lightcoral'
本日をタプルにする	datetime.datetime.today().timetuple()
範囲指定してデータフレームの行を抽出する	df[start:end]
データ列の欠損値をxに設定する	ds.fillna(x)
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
無限にnからカウントアップする	itertools.count(start=n)
＜オプション＞三2ビット整数型を用いる	dtype = np.int16
濃いの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
折れ線グラフに▲マーカーを使う	plt.plot(データ列, データ列2, marker='^')
リストとリストについて破線グラフをプロットして、その色を淡いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
文字列を部分文字列で二つに区切って、前半の文字列を使う	s.partition(sub)[0]
線グラフの色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
リストとリストの折れ線グラフをアルファalphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
CSVからデータフレームを読む	pd.read_csv(filename, sep=',')
リストとリストを用いて折れ線グラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
折れ線グラフのポイント印を青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
データフレームを各列毎にグループ化し、文字列というグループの大きさを計算する	df.groupby(column).size()[s]
新しい多重集合をイテラブルから生成する	collections.Counter(iterable)
線グラフの色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
色差別ない色の折れ線グラフを描いて、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
整数nが組のいづれかかどうか	n in aTuple
データフレームを破壊的に列によってで並べる	df.sort_values(by=column, inplace=True)
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
データフレームを'A'列と'B'列でまとめたグループ	df.groupby(['A', 'B'])
グラフの横軸にuntitledという軸ラベルを付ける	plt.xlabel(untitled)
データフレームの列の中の欠損値の合計を数える	df[col].isna().sum()
＜オプション＞淡い茶色色を使う	color = 'tan'
＜オプション＞グラフの色をフクシアにする	color = 'fuchsia'
3つの文字列をプリントする	print(value, value2, value3)
列をリストとして抽出する	df[column].values.tolist()
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
本日が水曜日かどうか	datetime.datetime.today().weekday() == 2
オブジェクトが組に含まれるか調べる	element in aTuple
辞書に要素をキーとして加える	aDict[key] = element
実数の複素数	complex(x)
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
行列の内積を計算する	np.dot(aArray, aArray2)
折れ線グラフを描画して、色をシスルに指定する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフに左三角印を使う	plt.plot(データ列, データ列2, marker='<')
折れ線グラフの菱形マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='D', markersize=n)
複数の列によってデータフレームを小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフの大バツマーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
リストと数列について濃い色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
濃いグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
配列のユニークな要素を求める	np.unique(aArray)
データフレームのリストカラムの第二四分位数を求める	df[aList].median()
二つの集合の積集合を求める	aSet.intersection(aSet2)
配列とリストについての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
数列とイテラブルについての散布図に黒い三角マーカーを描く	plt.plot(xdata, ydata, marker='^', c='k')
暗いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
データ列を百の位で丸める	ds.round(-2)
整数nはリストのいづれかか調べる	n in aList
二つの実行結果を改行で区切ってプリントする	print(value, value2, sep='\n')
線グラフの色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
折れ線グラフに青い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
整数nの二進文字列	bin(n)[2:]
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
変数を水色にする	f'\033[36m{value}\033[0m'
行列の各要素の積	np.multiply(aArray, aArray2)
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
データフレームのpercent分位数	df.quantile(percent/100)
行列の列ごとの標準偏差を計算する	np.std(aArray, axis=0)
折れ線グラフの色をダークターコイズに変更する	plt.plot(データ列, データ列2, color='darkturquoise')
イテラブルとリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
ヒストグラムを描画して、その色を黄色に設定する	plt.hist(データ列, color='yellow')
数列とイテラブルとして暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
データフレームのカラムの月を見る	df[col].dt.month
散布図にカラーコードの下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c=rgb)
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
線グラフの色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
リストとデータ列で色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データフレームの中に文字列と文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
円周率を使用する	math.pi
リストの平均値	sum(aList)/len(aList)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
オリベドラブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olivedrab')
現在の時間を使う	datetime.date.today().hour
折れ線グラフを描画してその色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームを列を用いてグループ分けして、それぞれのグループごとの件数を知る	df.groupby(column).size()
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
黒い右三角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='>', c='k')
折れ線グラフにサイズnの▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
ファイルパスを書き込みモードでオープンする]	open(filepath, mode='w')
整数nがリストのどれかか調べる	n in aList
文字列の先頭から不要な空白を消す	s.lstrip()
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームのカラムの空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
線グラフの色をスラグレーにセットする	plt.plot(データ列, データ列2, color='slategray')
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
線グラフを描画して、その色をレモンシフォンに指定する	plt.plot(データ列, データ列2, color='lemonchiffon')
全ての８進数字	string.octdigits
＜オプション＞四角マーカーを描画する	marker = 's'
二つの文字列を順にプリントする	print(value, value2)
ヒストグラムを描画して、その色をライムに設定する	plt.hist(データ列, color='lime')
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
ファイルをオープンして]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
切り捨てながらnをn2分の一にする	n //= n2
集合から値を取り除く	aSet.remove(element)
ビン数nでリストを分割する	pd.cut(aList, n)
リストのn番目のの値	aList[n]
データフレームをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
データ列とイテラブルについての散布図に黒いクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
＜オプション＞ダークスラテグレーにグラフの色を設定する	color = 'darkslategray'
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データフレームから列を三つ選択する	df[[column, column2, column3]]
名前付きタプルを使用する	import collections
散布図を右三角マーカーで描画する	plt.plot(xdata, ydata, marker='>')
文字列の最後の文字	s[-1]
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
＜オプション＞エラーを無視するように設定する	errors = 'ignore'
折れ線グラフを描画して色を赤くする	plt.plot(データ列, データ列2, color='r')
折れ線グラフを破線を用いて描画する	plt.plot(データ列, データ列2, linestyle='dashed')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
ヒストグラムを描画して、その色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
集合の濃度	len(aSet)
二つの列でデータフレームをまとめた表を使う	df.groupby(['A', 'B'])
両端キューに値をスタックする	deq.append(element)
＜オプション＞グラフの色をプラムに設定する	color = 'plum'
二つのリストをタブで区切ってプリントする	print(value, value2, sep='\t')
折れ線グラフの左三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
ヒストグラムの色を赤くする	plt.hist(データ列, color='r')
両端キューの中に値が存在する	element in deq
データフレームのリストカラムの値は欠損値か調べる	df[aList].isna()
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
実部と虚部から複素数	complex(x, y)
青い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='b')
ヒストグラムを描画して、色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームの列がx以上かつx2未満の行を選択する	df[(x <= df[column]) & (df[column] < x2)]
四角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='s')
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
リストを境界値として列をビン分割する	pd.cut(ds, aList)
綺麗なグラフを描画する準備をする	import seaborn as sns
ふたつの集合がセットと互いに素か調べる	aSet.isdisjoint(aSet2)
実数を千の位で丸める	round(x, -3)
文字列を最後の部分文字列で二つに区切って、後半の文字列を見る	s.rpartition(sub)[-1]
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
折れ線グラフを描画して、その色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
リストのn番目を消す	del aList[n]
日付データと日付データの時間差を算出する	aDate - aDate2
散布図を黒い四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c='k')
折れ線グラフに▼印を加える	plt.plot(データ列, データ列2, marker='v')
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumaquamarine')
＜オプション＞グラフの色をシーグリーンに設定する	color = 'seagreen'
文字列を空白で区切って、文字列リストにする	s.split()
緑色の大バツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
ヒストグラムを描画してその色をライトブルーに指定する	plt.hist(データ列, color='lightblue')
データフレームのリストカラムの中にとがあるか調べる	df[aList].isin([value, value2])
文字列がリストに含まれないか調べる	element not in aList
緑色の下三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
リストとリストについて破線グラフを描画して、色を濃いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
＜オプション＞８ビット整数型を使う	dtype = np.int8
データフレームのカラムの中に文字列が存在するかどうか	df[col].isin([value])
少ない方からカウンタを列挙する	aCounter.most_common()[::-1]
色差別ない色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
データフレームのデータ型の一覧	df.dtypes
リストとデータ列の暗いグラフを描き、、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
折れ線グラフのクロス印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
＜オプション＞ミディアムターコイズを用いる	color = 'mediumturquoise'
線グラフの色をゴールドにセットする	plt.plot(データ列, データ列2, color='gold')
浮動小数点数を小数点で丸める	round(x, n)
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
データフレームのリスト列を四捨五入して、整数型にする	df[aList].round().astype(int)
カウンタの文字列を列挙する	aCounter.keys()
要素が集合に含まれるかどうか調べる	element in aSet
ヒストグラムを描画して、その色をサーモンに設定する	plt.hist(データ列, color='salmon')
改行せず文字列をプリントする	print(value, end='')
空の集合	set()
リストと配列について黒い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
散布図にカラーコードの四角マーカーを使用する	plt.plot(xdata, ydata, marker='s', c=rgb)
カウンタを低頻度方からリストとして得る	aCounter.most_common()[::-1]
データフレームから型型の列だけ取り出す	df.select_dtypes(ty)
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
日付を用いる	import datetime
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
前もって正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
両端キューのn番目	deq[n]
折れ線グラフを描画して、その色をダークシアグリーンに指定する	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフを描画して、その色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
データフレームを'A'列によって整列して、NaNを先頭にする	df.sort_values(by='A', na_position='first')
オブジェクトはリストかどうか調べる	isinstance(obj, list)
パステル調の色でヒストグラムをプロットする	plt.hist(xdata, color='pastel')
辞書を浅く複製する	dict(aDict)
列の値でデータフレームをグループ化してそれぞれのグループごとの件数を知る	df.groupby(column).size()
折れ線グラフを描画して、その色をミディアムパープルに指定する	plt.plot(データ列, データ列2, color='mediumpurple')
イテラブルを両端キューに変換する	collections.deque(iterable)
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
折れ線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
＜オプション＞バイナリ用にセットする	mode = 'rb'
リストを分割数nでビン分割する	pd.cut(aList, n)
両端キュー中の要素の数を数える	deq.count(element)
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
列でデータフレームを並べて、新しいインデックスを加える	df.sort_values(columns).reset_index()
データ列の欠損値をメディアンに変更する	ds.fillna(ds.median())
＜オプション＞グラフの色をカデットブルーに設定する	color = 'cadetblue'
リストの値を昇順に並べ直す	sorted(aList, reverse=True)
列と列の重複をドロップする	df.drop_duplicates(subset=[column, column2])
nまでの奇整数列	list(range(1, n, 2))
＜オプション＞ヘッダをnamesに設定する	header = names
＜オプション＞グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
タイムスタンプデータが木曜日か	aDatetime.weekday() == 3
文字列がリストの要素でないか調べる	element not in aList
整数nを十六進表現に変換する	hex(n)
折れ線グラフに右三角マーカーを使う	plt.plot(データ列, データ列2, marker='>')
文字列をカンマで分割して、列挙する	s.split(',')
データフレームを列の値によってグループ化してそれぞれのグループごとの標準偏差を算出する	df.groupby(column).std()
0からnまでのスライス	slice(n)
データ列のNaNを直前の値にセットする	ds.fillna(method='ffill')
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列, データ列2, color='ghostwhite')
ロイヤルブルーにヒストグラムの色を変更する	plt.hist(データ列, color='royalblue')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
折れ線グラフの上三角印を緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
タブ区切りのファイルからCSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
配列の差を求める	aArray - aArray2
小文字を見る	string.ascii_lowercase
文字列を下線付きにする	f'\033[4m{value}\033[0m'
列の各データが何回出現するか見る	df[col].value_counts()
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
ヒストグラムを描画して、色をターコイズに設定する	plt.hist(データ列, color='turquoise')
変数について数式の微分を求める	sympy.diff(e, z)
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
タプルを引数として展開して表示する	print(*aTuple, sep=',')
実行結果を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
列'A'と列'B'をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
折れ線グラフを描画して、色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
データフレームの指定した列名一覧の列を取り出す	df[columns]
リストとイテラブルについての散布図を暗い色として重なりを見やすく描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
組を逆順にする	reversed(aTuple)
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
イテラブルから両端キューを作る	collections.deque(iterable)
ヒストグラムの色をシスルにセットする	plt.hist(データ列, color='thistle')
折れ線グラフを描画して、その色をピンクに指定する	plt.plot(データ列, データ列2, color='pink')
xの小数点以下'2'桁までを表示する	print(':.2f'.format(x))
タプル内の要素が少なくともひとつ真かどうか調べる	any(aTuple)
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
折れ線グラフの色をオリーブに指定する	plt.plot(データ列, データ列2, color='olive')
データ列とデータ列について散布図を描画する	plt.scatter(xdata, ydata)
黒いポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.', c='k')
カウンタをイテラブルで更新する	aCounter.update(iterable)
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
集合のすべての要素が別の集合に含まれる	aSet.issubset(aSet2)
データフレームのリスト列がどの程度分散しているか見る	df[aList].var()
＜オプション＞グラフの色を黄色に設定する	color = 'yellow'
変数を黄色にする	f'\033[33m{value}\033[0m'
二つのデータフレームを縦方向に一つにまとめる	pd.concat([df, df2], axis=0)
線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
リストとリストの散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
組内の要素が全て真	all(aTuple)
リストとリストについて散布図を描き、、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
ライトスチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightsteelblue')
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
eの実数乗	math.exp(x)
線グラフの色をベージュに変更する	plt.plot(データ列, データ列2, color='beige')
ヒストグラムを描画して、その色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
イテラブルを配列にする	np.array(iterable)
実数の小数点以下を丸める	round(x)
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
データフレームのカラムの値が欠損値	df[col].isna()
全要素を0で初期化した配列	np.zeros(要素数)
スタックが空であるか調べる	len(deq) == 0
データフレームのリスト列の未入力値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
リストとデータ列の散布図を描き、、右三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='>', c=rgb)
nの各桁の総和	sum(map(int, str(n)))
nが-9以上9以下か調べる	-9 <= n <= 9
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategrey'
＜オプション＞グラフの色をミッドナイトブルーにする	color = 'midnightblue'
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightseagreen'
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
リストを等間隔でn個にビニングする	pd.cut(aList, n)
集合をタプルに変換する	tuple(aSet)
ピアソンとしてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
今日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
配列と同じ大きさの空行列を作成する	np.empty_like(aArray)
リストの値のみ表示する	print(*aList)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
折れ線グラフの印を▲印にする	plt.plot(データ列, データ列2, marker='^')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
タプルに要素を項目名として加える	aDict[key] = element
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
＜オプション＞ライトグレー色を使う	color = 'lightgray'
折れ線グラフを描画して色をレモンシフォンに変更する	plt.plot(データ列, データ列2, color='lemonchiffon')
ビン数nを用いて配列をビンニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
配列とリストでパステル調のを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
配列の列ごとの最小値	np.min(aArray, axis=0)
破線の色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
＜オプション＞フォレストグリーンにグラフの色をセットする	color = 'forestgreen'
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
データフレームの列の欠損値を平均で置換する	df[col].fillna(df[col].mean())
折れ線グラフを描画して、その色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
＜オプション＞バイナリモードに設定する	mode = 'rb'
＜オプション＞グラフの色をフクシアに指定する	color = 'fuchsia'
ファイルを改行を取り除いて一行ずつ読む	f.readline()
ミスティローズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mistyrose')
ファイルパスを文字コードtextで開く]	open(filepath, encoding=text)
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
折れ線グラフの大バツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
＜オプション＞グラフの色をグレーに指定する	color = 'grey'
ファイルパスをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
二つの文字列を辞書順で比較する	s < s2
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
整数nの十六進表記	hex(n)
折れ線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
赤色のバツマーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='x', c='r')
グラフの用途をポスターに設定する	sns.set(context='poster')
ファイルからn文字、読み込む	f.read(n)
マッピングに別のマッピングの値を更新する	aDict.update(aDict2)
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
＜オプション＞グラフの色をモカシンに設定する	color = 'moccasin'
エラーを出力する	sys.stderr
色差別ない色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='colorblind')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
ファイルパスがない	not os.path.exists(filepath)
文字列のケースを入れ替える	s.swapcase()
スチールブルーにヒストグラムの色を指定する	plt.hist(データ列, color='steelblue')
プロットの用途を画面に変更する	sns.set(context='notebook')
青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
折れ線グラフを描画して、色をダークスラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategray')
にx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
タプルをひとつ飛ばしで取り出す	aTuple[::2]
データフレームのリストカラムが正規分布からどれだけ、尖っているか見る	df[aList].skew()
データ列の最頻値を求める	ds.mode()
文字列がキーワード	keyword.iskeyword(s)
ファイルとfilenameを結合する	os.path.join(filepath, filename)
改行する	print()
赤い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
ヒストグラムを描画して、色をグリーンに設定する	plt.hist(データ列, color='green')
配列とリストの青い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
２つの文字列を順にプリントする	print(value, value2)
データフレームを二つの列によってによって破壊的に並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
＜オプション＞カーキ色を用いる	color = 'khaki'
データフレームを列名リストによって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
配列と配列について淡い色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
リストをタプルにする	tuple(aList)
グラフの背景色を暗くする	sns.set(style='darkgrid')
データフレームの列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
データフレームのリスト列を小数点以下n桁で丸める	df[aList].round(n)
散布図に▲マーカーを使用する	plt.plot(xdata, ydata, marker='^')
＜オプション＞インディゴ色を用いる	color = 'indigo'
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
＜オプション＞改行コードを動作環境依存に設定する	newline = None
文字列の開始位置より後に部分文字列がある	s.find(sub, start) != -1
実数のアークコサイン	math.acos(x)
レモンシフォン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lemonchiffon')
文字列の示す文字コードを用いてファイルを開く]	open(filepath, encoding=s)
文字列を最後の部分文字列で分けた時の後半の文字列	s.rpartition(sub)[-1]
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
緑色で変数を表示する	print(f'\033[32m{value}\033[0m')
二つのデータフレームを異なる列をキーにして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
2つの文字列をタブで区切って表示する	print(value, value2, sep='\t')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
双方向キューは空	len(deq) == 0
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='ghostwhite')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
コマンドの第二引数を知る	sys.argv[1]
カラーコードのダイアモンドマーカーを散布図に使う	plt.plot(xdata, ydata, marker='D', c=rgb)
実数の自然対数	math.log(x)
印字できる文字を見る	string.printable
円周率を使う	math.pi
本日の曜日を整数で求める	datetime.datetime.today().weekday()
＜オプション＞ライムを使う	color = 'lime'
文字列の後ろを見る	s[-1]
ヒストグラムを描画して、その色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
ひとつでも非大文字が文字列中にある	any(not c.isupper() for c in s)
折れ線グラフの星マーカーを緑色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
データフレームのリスト列の空文字をNaNに変換し、ドロップする	df[aList].replace('', np.nan).dropna()
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
文字列中の部分文字列をカウントする	s.count(sub)
小数点数の2進対数	math.log2(x)
＜オプション＞ダークオーキッドを使う	color = 'darkorchid'
散布図を▲マーカーで描画する	plt.plot(xdata, ydata, marker='^')
ヒストグラムを描画して、その色をシルバーに設定する	plt.hist(データ列, color='silver')
リストとリストについての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
赤色の色差別ないの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
ヒストグラムを描画して、その色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
折れ線グラフを描画して、その色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ヒストグラムを描画して、その色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
折れ線グラフを描画して、色を濃いシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
時間をインポートする	import time
ヒストグラムを描画してその色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
実数を文字列に変換する	str(x)
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
イテラブルとリストについて散布図を描画し、、マーカーを▽にする	plt.plot(xdata, ydata, marker='v')
リストとデータ列で濃いグラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
ヒストグラムを描画して、その色をビスクに変更する	plt.hist(データ列, color='bisque')
テンプレートをタプルでフォーマットする	formatText.format_map(aDict)
＜オプション＞パパイヤウィップに色を設定する	color = 'papayawhip'
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
＜オプション＞フォレストグリーンを用いる	color = 'forestgreen'
文字列でフォーマットして日付時刻データを文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
改行せず二つの数値をプリントする	print(value, value2, end='')
縦方向に２つのデータフレームをつなぐ	pd.concat([df, df2])
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
最初の部分文字列で文字列を分割したときの前半の文字列を取り出す	s.partition(sub)[0]
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
折れ線グラフを描画してその色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
配列からn個、ランダムに選ぶ	random.choices(iterable, k=n)
棒グラフを描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
＜オプション＞インデックスを自動的な連番に設定する	index_col = None
＜オプション＞グラフの色を暗い赤に設定する	color = 'darkred'
データフレームの指定された２つの列を取り出す	df[[column, column2]]
データフレームから重複するデータをドロップして、インプレイスする	df.drop_duplicates(inplace=True)
折れ線グラフを描画して、色をコーンズシルクに変更する	plt.plot(データ列, データ列2, color='cornsilk')
文字列を中央寄せにする	s.center(文字列幅)
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
散布図に黒い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
ヒストグラムを描画して、色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
オブジェクトが整数クラスか確認する	isinstance(obj, int)
データフレームのカラムの平均	df[col].mean()
リストにリストを展開する	aList.extend(aList2)
リストとリストについての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
predicateFuncが真となる列の要素	itertools.takewhile(predicateFunc, iterable)
折れ線グラフの下三角マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
変数について数式の積分を行う	sympy.integrate(e, z)
プロットの色調を淡くする	sns.set(pallete='muted')
データ列をインポートする	import pandas as pd
無限大	math.inf
イテラブルとリストの黒色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
データフレームのリスト列が正規分布からどの程度尖っているか見る	df[aList].skew()
＜オプション＞ダークオレンジ色を使う	color = 'darkorange'
折れ線グラフを描画してその色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
シーケンスをカウントしてカウンタを更新する	aCounter.update(iterable)
行列の行列式	np.linalg.det(aArray)
組を引数として展開して出力する	print(*aTuple)
線グラフの色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
リスト中の文字列が最初に見つかる場所	aList.index(element)
赤い▽マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
リストとリストについて散布図を描画し、、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
小数点以下の表示精度をn桁に増やす	pd.set_option('precision', n)
標準エラーを得る	sys.stderr
＜オプション＞ダークグレーを使う	color = 'darkgrey'
データフレームを'A'列によってグループ化する	df.groupby('A')
＜オプション＞シアンにグラフの色を指定する	color = 'cyan'
ヒストグラムを描画して、色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
文字列の開始位置からと終了位置の間に部分文字列が含まれるかどうか確認する	s.find(sub, start, end) != -1
文字列をバイト配列に変換する	bytearray(s)
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
nにn2をかけた値をnとする	n *= n2
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
フローラルホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='floralwhite')
文字列を部分文字列で分割して、列挙する	s.split(sub)
ヒストグラムを描画して色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
＜オプション＞ミントクリーム色を使う	color = 'mintcream'
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
赤色のバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
リストの末尾から値を取り出す	aList.pop()
ヒストグラムを描画して、その色をライトスチールブルーにセットする	plt.hist(データ列, color='lightsteelblue')
＜オプション＞パウダーブルー色を使う	color = 'powderblue'
文字列を部分文字列で二分し、前半の文字列を求める	s.partition(sub)[0]
折れ線グラフに描画して、マーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
データフレームのn行目を消す	df.drop(n, axis=0)
データ列がどの程度、分散しているか確認する	ds.var()
ファイルに文字列を書き込む	f.write(s)
空白文字を全て使う	string.whitespace
データフレームのカラムの欠損値をxに増やす	df[col].fillna(x)
データフレームの母標準偏差	df.std(ddof=0)
データフレームを二つの列で昇順にソートして更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
カウンタを多い順に列挙する	aCounter.most_common()
辞書のエントリ数	len(aDict)
リストとデータ列の青色の明るいを描く	plt.plot(xdata, ydata, linestyle='bright', color='b')
＜オプション＞ペルーを用いる	color = 'peru'
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgray')
タイムスタンプデータが何分か知る	aDatetime.minute
ヒストグラムを描画して、その色をミディアムパープルに変更する	plt.hist(データ列, color='mediumpurple')
第2コマンド引数	sys.argv[1]
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
配列とリストの破線を描画して、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
データ列とリストについて散布図を描き、、色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
nプラスn2を算出する	n + n2
部分文字列が文字列の終了位置より前に含まれるか	s.find(sub, 0, end) != -1
散布図に右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>')
標準入力から1行だけ読む	sys.stdin.readline()
タプルの最初のオブジェクトを探す	aTuple.index(element)
実数の正弦の逆数	math.asin(x)
折れ線グラフを描画して、色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
ヒストグラムの色をオールドレースに変更する	plt.hist(データ列, color='oldlace')
エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
＜オプション＞線種を点線に変更する	linestyle = 'dotted'
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
点線にヒストグラムの線のスタイルを設定する	plt.hist(データ列, linestyle='dotted')
データフレームの欠損値がある箇所に色をつける	df.style.highlight_null()
折れ線グラフを描画してその色をペールグリーンに指定する	plt.plot(データ列, データ列2, color='palegreen')
＜オプション＞文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
＜オプション＞読み込みモードに設定する	mode = 'r'
数列とリストのカラーコードの色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
実数を２乗する	x ** 2
破壊的に'A'列と'B'列によってによってデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
日付データからn日分、減らす	aDate - datetime.timedelta(days=n)
折れ線グラフの印を下三角にする	plt.plot(データ列, データ列2, marker='v')
リストにリストを追加する	aList.extend(aList2)
データフレームを各列毎にグループ分けして、列の最小値を求める	df.groupby(column)[column2].min()
散布図にカラーコードの▽マーカーを用いる	plt.plot(xdata, ydata, marker='v', c=rgb)
データフレームの列の中に文字列と文字列があるかどうか	df[col].isin([value, value2])
ヒストグラムを描画してその色を貝殻に設定する	plt.hist(データ列, color='seashell')
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
＜オプション＞グラフの色をリネンにする	color = 'linen'
＜オプション＞ミディアムブルーにグラフの色を設定する	color = 'mediumblue'
xを浮動小数点数に変換する	float(x)
線グラフを描画して、その色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
＜オプション＞シーグリーンにグラフの色を変更する	color = 'seagreen'
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
折れ線グラフを描画して、その色をホワイトに設定する	plt.plot(データ列, データ列2, color='white')
ヒストグラムを描画して、色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
＜オプション＞読み込みモードを使用する	mode = 'r'
リストとデータ列で色差別ないの折れ線グラフを描画して、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
データフレームの中で列に重複があるか調べる	df.duplicated(subset=column)
ライトサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsalmon')
＜オプション＞グラフの色をナバホホワイトにする	color = 'navajowhite'
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
文字列が平仮名	('ぁ' <= ch <= 'ん')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
赤色の明るいの折れ線グラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
データフレームの列がxより少ない行を抽出する	df[df[column] < x]
データフレームの列の文字列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
オブジェクトのハッシュ値	hash(obj)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
数値を浮動小数点数に変換する	float(e)
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
自然数LCM	math.lcm(n, n2)
行列の行ごとの標準偏差を計算する	np.std(aArray, axis=1)
ヒストグラムの色をラベンダーに指定する	plt.hist(データ列, color='lavender')
データフレームから列を3つのみ選択する	df[[column, column2, column3]]
ヒストグラムを描画してその色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
イテラブルの組み合わせを得る	itertools.combinations(iterable, n)
リストを文字列リストに変換して部分文字列によって連結する	sub.join(map(str, iterable))
符号付き整数の最大値を調べる	sys.maxsize
両端キューを空にする	deq.clear()
黒い▼マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c='k')
ヒストグラムを描画してその色をベージュに変更する	plt.hist(データ列, color='beige')
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
データフレームのどの値が頻出か見る	df.mode()
プロットの目的を画面に設定する	sns.set(context='notebook')
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
データ列とリストの折れ線グラフを描いて、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
文字列の両端から空白と改行を除く	s.strip()
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
リストとリストについてパステル調の色の折れ線を描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
折れ線グラフを描画してその色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
ホットピンクにヒストグラムの色を変更する	plt.hist(データ列, color='hotpink')
データフレームから重複したデータをドロップして、更新する	df.drop_duplicates(inplace=True)
真	True
リストとリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データフレームはどの程度、分散しているか見る	df.var()
＜オプション＞丸印を使う	marker = 'o'
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームを各列毎にグループ分けして、列の合計を算出する	df.groupby(column)[column2].sum()
データフレームの列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
配列をビン数nとしてビン分割する	pd.cut(aArray, n)
データ列の文字列長を列として使う	ds.str.len()
イテラブルとリストについての散布図に赤色の左三角マーカーを描く	plt.plot(xdata, ydata, marker='<', c='r')
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
＜オプション＞紺にグラフの色をセットする	color = 'darkblue'
集合を組に変換する	tuple(aSet)
折れ線グラフを描画してその色をミディアムバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='mediumvioletred')
文字列を部分文字列で二つに区切って、後半の文字列を使う	s.partition(sub)[-1]
＜オプション＞リネンを使用する	color = 'linen'
数を十六進表記の文字列に変換する	x.hex()
数列と配列の明るいグラフを描画して、その色を黒くする	plt.plot(xdata, ydata, linestyle='bright', color='k')
第一引数で指定したファイル名	sys.argv[1]
折れ線グラフに大バツマーカーを使う	plt.plot(データ列, データ列2, marker='X')
実行時の標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
リストのn番目以降の部分を取り出す	aList[n:]
＜オプション＞モカシンにグラフの色を設定する	color = 'moccasin'
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
二つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
表データを列の値にグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
＜オプション＞ビスク色を用いる	color = 'bisque'
データ列の各値の出現回数	ds.value_counts()
全８進数字	string.octdigits
ベクトルの列ごとの平均	np.mean(aArray, axis=0)
実数のn乗	pow(x, n)
三変数の最大値	max(x, y, z)
リストとデータ列についての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
untitledとラベル付けしてデータ列と配列の折れ線グラフをプロットする	plt.plot(xdata, ydata, label=untitled)
文字列が平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
折れ線グラフを描画して、その色をアイボリーにする	plt.plot(データ列, データ列2, color='ivory')
データフレームを列によってグループ化し、要約統計量を求める	df.groupby(column).describe()
配列と配列について相関を可視化する	plt.scatter(xdata, ydata)
タイムスタンプデータが火曜日か調べる	aDatetime.weekday() == 1
リストとリストについての散布図を淡い色を用いて描画する	plt.plot(xdata, ydata, c='muted')
文字を文字コードに変換する	ord(ch)
リストとデータ列の黒い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
＜オプション＞グラフの色を青に指定する	color = 'blue'
列の種類	df.info()
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
配列と配列についての散布図に菱形マーカーを描く	plt.plot(xdata, ydata, marker='D')
整数nをn2分の１にする	n //= n2
日付時刻データの秒	aDatetime.second
データフレームの中の列と列に重複があればドロップする	df.drop_duplicates(subset=column)
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
カウンタ同士でユニオン演算する	aCounter | aCounter2
線グラフを描画して、その色を青に設定する	plt.plot(データ列, データ列2, color='blue')
＜オプション＞ヘッダを自動的な連番に指定する	header = None
八進文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ファイルを開いて]書き込みストリームを使う	open(filepath, mode='w')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
ヒストグラムを描画して、その色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
既存のファイルを文字列の示す文字コードで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
実行環境名	sys.platform
文字列の先頭から部分文字列を取り除く	s.removeprefix(sub)
オブジェクトは集合クラスかどうか	isinstance(obj, set)
＜オプション＞欠損値は無視する	dropna = True
リストとリストのカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
リストを中央値で分割する	pd.qcut(aList, 2)
＜オプション＞最初の行をヘッダにセットする	header = 0
ヒストグラムの色をシルバーにセットする	plt.hist(データ列, color='silver')
折れ線グラフを描画して、その色をミディアムブルーに変更する	plt.plot(データ列, データ列2, color='mediumblue')
＜オプション＞パープルを使う	color = 'purple'
データフレームの列を破壊的にドロップする	df.drop(column, axis=1, inplace=True)
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
最大値・最小値の範囲として一様な乱数を生成する	random.uniform(最小値, 最大値)
nではない	not n
空の集合を使う	set()
＜オプション＞ライトイエロー色を使用する	color = 'lightyellow'
データ列の秒	ds.dt.second
折れ線を描く	plt.plot(xdata, ydata)
エクセルデータファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
集合の濃度を求める	len(aSet)
線グラフを描画して、その色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
文字列を末尾から空白で区切る	s.rsplit()
データフレームの欠損値を落とす	df.dropna()
イテラブルからベクトルを作る	np.array(iterable)
ヒストグラムを描画して、色を赤くする	plt.hist(データ列, color='r')
データフレームの列の欠損値を中央値で埋める	df[col].fillna(df[col].median())
2つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
列の要約統計量	ds.describe()
折れ線グラフのポイントマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
安全に文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
数値の数値を求める	float(e)
文字列の最初	s[0]
折れ線グラフを描画して色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
折れ線グラフの四角印を黄色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
実数の正弦の逆数を求める	math.asin(x)
データフレームのリストカラムの尖度	df[aList].skew()
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
日付データが金曜日か調べる	aDate.weekday() == 4
双方向キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフを点線として描画する	plt.plot(データ列, データ列2, linestyle='dotted')
イテラブルからカウンタを作る	collections.Counter(iterable)
＜オプション＞小麦色に色を指定する	color = 'wheat'
昇順にデータフレームを二つの列を用いて破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
線グラフの色を青紫に変更する	plt.plot(データ列, データ列2, color='violet')
散布図に黒い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
列をスタックに変換する	collections.deque(iterable)
ゼロ埋めされたブール型の配列を作成する	np.zeros(要素数, dtype=np.int32)
黒いダイアモンドマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
＜オプション＞バリーウッド色を使う	color = 'burlywood'
タプルをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
プロットのサイズを縦height横widthに変更する	plt.figure(figsize=(width, height))
配列とデータ列について破線グラフを描画して、色を濃いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
JSONを使う	import json
＜オプション＞ミディアムバイオレットレッドにグラフの色を指定する	color = 'mediumvioletred'
横棒グラフを積み上げにする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列, データ列2, color='mediumturquoise')
スクリプトの名前を知る	sys.argv[0]
列を四分位数で分割する	pd.qcut(ds, 4)
辞書のキーの値	aDict[key]
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
濃いグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
配列とリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
データフレームの列の欠損値を直前の値に設定する	df[col].fillna(method='ffill')
文字列中に部分文字列が含まれないか調べる	sub not in s
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ふたつの集合が互いに素かどうか	aSet.isdisjoint(aSet2)
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
両端キューの要素数	len(deq)
＜オプション＞色をダークグリーンに設定する	color = 'darkgreen'
イテラブルの各値を両端キューの末尾に追加する	deq.extend(iterable)
データフレームのリストカラムの中にある日付データと日付データの合計を数える	df[aList].isin([value, value2]).sum()
双方向キューが空かどうか確認する	len(deq) == 0
部分文字列が文字列の開始位置と終了位置の間に存在するか調べる	s.find(sub, start, end) != -1
オブジェクトにフィールドが存在する	hasattr(obj, プロパティ名)
データフレームから数値データの列を取り出す	df.select_dtypes('number')
＜オプション＞区切りを改行にする	sep = '\n'
ヒストグラムの色をゴールデンロッドにセットする	plt.hist(データ列, color='goldenrod')
リストをビン数nとしてビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
配列とリストの散布図を描き、、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
線グラフを描画してその色を白に設定する	plt.plot(データ列, データ列2, color='white')
nをn2だけ減少させる	n -= n2
英数字が文字列内にある	any(c.isalnum() for c in s)
辞書順で文字列は文字列より後か調べる	s > s2
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
データフレームのカラムの名前を一度に文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
＜オプション＞ターコイズ色を使用する	color = 'turquoise'
文字列が印字できるか調べる	s.isprintable()
最大値・最小値の範囲で一様な乱数を発生させる	random.uniform(最小値, 最大値)
カラーバーを水平に付ける	plt.colorbar(orientation='horizontal')
配列とリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
最大長を指定して、両端キュー	collections.deque(maxlen=n)
＜オプション＞ターコイズ色を使う	color = 'turquoise'
暗いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
多い順にカウンタを列挙する	aCounter.most_common()
配列と配列の折れ線を描いて、色を文字列に指定する	plt.plot(xdata, ydata, color=s)
データフレームのカラムの標本標準偏差	df[col].std()
両端キュー中の要素のインデックス	deq.index(element)
キーがマッピングにあるか	key in aDict
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
＜オプション＞エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
散布図に赤色のバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
リストを暗い色のヒストグラムで描画する	plt.hist(xdata, color='dark')
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
2次元リストの転置行列を計算する	[list(x) for x in list(zip(*aList))]
直後の値でデータフレームのカラムのNaNを補う	df[col].fillna(method='bfill')
ボックスチャートを２つ並べる	plt.boxplot([データ列, データ列2])
数字を全て見る	string.digits
ホワイトスモークにヒストグラムの色を変更する	plt.hist(データ列, color='whitesmoke')
現在が何年か知る	datetime.datetime.today().year
＜オプション＞グラフの色をバイオレットにする	color = 'violet'
nとn2のビット和	n | n2
＜オプション＞グラフの色をアクアに変更する	color = 'aqua'
折れ線グラフに緑色の星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
青色の色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
淡い色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='muted')
ヒストグラムを描画して色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
データ列とデータ列についての散布図にカラーコードの△マーカーを描く	plt.plot(xdata, ydata, marker='^', c=rgb)
列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
データフレームの列の中にと日付データが存在するか調べる	df[col].isin([value, value2])
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
データフレームのリスト列の欠損値を直前の値に変更する	df[aList].fillna(method='ffill')
グラフを色差別なくする	sns.set(pallete='colorblind')
＜オプション＞ダーク・スラテグレー色を使用する	color = 'darkslategrey'
黒色の左三角マーカーを配列とリストについての散布図に描く	plt.plot(xdata, ydata, marker='<', c='k')
全要素を０で初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
nをn2だけ左シフトする	n << n2
ファイルの読み込みストリームを使う	open(filepath)
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
＜オプション＞色をダークシアンに設定する	color = 'darkcyan'
リストとリストのパステル調のを描いて色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
句読点文字を全て使う	string.punctuation
色を淡くする	sns.set(pallete='muted')
折れ線グラフにサイズnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
青緑色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
文字列の終了位置より前に部分文字列が存在しないか	s.find(sub, 0, end) == -1
最大長を指定して双方向キューを作る	collections.deque(maxlen=n)
整数を万の位で丸める	round(x, -4)
双方向キュー	collections.deque()
オーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orchid')
ふたつの集合の∩	aSet.intersection(aSet2)
データフレームのリスト列の中に文字列があるか調べる	df[aList].isin([value])
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
データフレームの列の値がx以下の行を抽出する	df[df[column] <= x]
データフレームを複数の列を用いて大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
データフレームのカラムを千の位で丸めて整数型にする	df[col].round(-3).astype(int)
配列とリストについての散布図に右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>')
淡い色で散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
データフレームを各列毎に集約して、カラムの最小値を求める	df.groupby(column)[column2].min()
整数nの2進文字列を見る	bin(n)[2:]
データフレームの重複した行をマスクする	df.duplicated()
＜オプション＞ダークカーキにグラフの色を変更する	color = 'darkkhaki'
データフレームを各列毎に集約して、列の合計を算出する	df.groupby(column)[column2].sum()
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
複数の列でデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True)
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
リストに列を続けた列	itertools.chain(iterable, iterable2)
nがn2か	n == n2
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列, データ列2, color='skyblue')
＜オプション＞ドジャーブルー色を用いる	color = 'dodgerblue'
赤い右三角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='>', c='r')
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
データ列とリストについて破線グラフを描画して、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
リストと配列についての散布図を淡い色を用いてプロットする	plt.plot(xdata, ydata, c='muted')
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
グラフの用途を画面に設定する	sns.set(context='notebook')
データフレームの値が未入力値か	df.isna()
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
数列と配列について散布図を描いて、丸マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='o', c=rgb)
リストとリストの折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
小数点数以下の最大の整数を求める	math.floor(x)
組のn番目からn2番目まで	aTuple[n:n2]
カラーバーを設定する	plt.colorbar()
列の名前の一覧を見る	df.columns
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
折れ線グラフに線幅nの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
出力ストリームを全部読み込む	f.read()
黄色いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
２次元リストをフラット化する	sum(aList)
リストとリストの散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
データフレームから重複を残さず削除する	df.drop_duplicates(keep=False)
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
Pandasで、データ列をPandasの日付型にする	pd.to_datetime(ds)
ヒストグラムを描画して、その色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
散布図に淡い色のマーカーを使う	plt.plot(xdata, ydata, c='muted')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
棒グラフの色をカラーコードに変更する	plt.bar(ラベル列, データ列, color=rgb)
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
柱状グラフとしてデータフレームの列を可視化する	plt.hist(df[column])
データフレームのリストカラムの未入力値を後の行の値で補う	df[aList].fillna(method='bfill')
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
＜オプション＞クリムゾン色を使う	color = 'crimson'
散布図に赤い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='r')
文字列を右側から部分文字列で区切る	s.rsplit(sub)
今日をタプルに変換する	datetime.datetime.today().timetuple()
線グラフを描画して、その色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
配列とリストについての散布図を明るい色で描く	plt.plot(xdata, ydata, c='bright')
＜オプション＞ディムグレーを使う	color = 'dimgrey'
散布図をバツマーカーで描画する	plt.plot(xdata, ydata, marker='x')
集合から任意の要素を取り出す	aSet.pop()
ヒストグラムを描画して、その色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
ポスターにグラフの目的をセットする	sns.set(context='poster')
ファイルを読み込みモードで開く]	open(filepath, mode='r')
ヒストグラムを描画して色をタンにする	plt.hist(データ列, color='tan')
配列と数列として淡いを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
散布図をポイントマーカーで描画する	plt.plot(xdata, ydata, marker='.')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
データフレームのn行目を選択する	df.loc[n]
ふたつの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
カラーコードの右三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='>', c=rgb)
データフレームを列によってソートして、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
折れ線グラフを描画して、色を黒くする	plt.plot(データ列, データ列2, color='k')
散布図を黒い星マーカーを用いて描画する	plt.plot(xdata, ydata, marker='*', c='k')
配列の列ごとの平均値	np.mean(aArray, axis=0)
＜オプション＞色をマルーンに変更する	color = 'maroon'
ヒストグラムをstartからendまでの範囲で描く	plt.hist(データ列, range=(start, end))
＜オプション＞改行なし	end = ''
プロットの背景色を暗くする	sns.set(style='darkgrid')
データフレームの中に文字列があるか調べる	df.isin([value])
リストの要素数を調べる	len(aList)
散布図に左三角マーカーを使用する	plt.plot(xdata, ydata, marker='<')
本日は何曜日か知る	datetime.datetime.today().weekday()
文字列の開始位置より後に部分文字列が含まれるか確認する	s.find(sub, start) != -1
文字列はタプルに含まれないか調べる	element not in aTuple
リストを緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
データ列の中にある日付データの合計をカウントする	ds.isin([value]).sum()
データ列の中にある文字列と文字列の数を数える	ds.isin([value, value2]).sum()
＜オプション＞昇順にする	ascending = True
ヒストグラムを描画して、その色を青に設定する	plt.hist(データ列, color='blue')
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
リストの各値を関数に適用した結果で並べ直す	sorted(aList, key=func)
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
イテラブル自身を2回あわせた直積	itertools.product(iterable, repeat=2)
最頻値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
リストとリストについての散布図にポイントマーカーを描く	plt.plot(xdata, ydata, marker='.')
分子n分母mの有理数を用意する	fractions.Fraction(numerator=n, denominator=m)
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
小数点以下の表示精度を指定する	pd.set_option('precision', n)
オブジェクトがリストの要素でない	element not in aList
1からnまでの整数列	list(range(1, n+1))
リストを引数として展開して表示する	print(*aList)
グラフ中の(x,y)の位置に凡例を加える	plt.legend(loc=(x, y))
折れ線グラフを描画してその色をダークマゼンタにする	plt.plot(データ列, データ列2, color='darkmagenta')
現在の作業ディレクトリ	os.getcwd()
マップの項目名を要素にする	aDict[key] = element
ふたつの集合の共通部分を計算する	aSet.intersection(aSet2)
データ列の中にと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
折れ線グラフの色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
折れ線グラフの色をダークオリーブグリーンにセットする	plt.plot(データ列, データ列2, color='darkolivegreen')
部分文字列を文字列の接頭辞から安全に消す	s.removeprefix(sub)
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
nが一桁の整数かどうか判定する	0 <= n <= 9
辞書から最後のエントリをポップする	aDict.popitem()
メディアンでデータ列のNaNを補う	ds.fillna(ds.median())
項目名が辞書上で未定義かどうか	key not in aDict
＜オプション＞ミディアムターコイズにグラフの色を変更する	color = 'mediumturquoise'
折れ線グラフの大バツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
データフレームのNaNがある行を削除する	df.dropna()
折れ線グラフを描画して、その色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
マッピングの項目名とその値をペアとして取り出す	aDict.items()
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
＜オプション＞色をディムグレーに指定する	color = 'dimgray'
データフレームを'A'列を用いてソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
文字列を部分文字列で分割したときの前半の文字列	s.partition(sub)[0]
データフレームを各列と列の組み合わせ毎に分類して、分散を計算する	df.groupby([column, column2], as_index=False).var()
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
オブジェクトが型かどうか調べる	isinstance(obj, クラス)
折れ線グラフに赤い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
グラフの中のy座標にuntitledというラベルを付ける	plt.ylabel(untitled)
リストの長さを見る	len(aList)
配列とリストの青色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
データフレームを列名リストによってまとめたグループ	df.groupby(columns)
データフレームを列によって並べ、更新する	df.sort_values(by=column, inplace=True)
直後の値でデータフレームのリスト列のNaNを埋める	df[aList].fillna(method='bfill')
環境がWindows	sys.platform.startswith('win32')
データ列の欠損値をモードで補う	ds.fillna(ds.mode().iloc[0])
データフレームのカラムの中に含まれる文字列の数を数える	df[col].isin([value]).sum()
ヒストグラムを描画して、色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
淡いピンク色色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightpink')
グラフ中の(x,y)の場所にデータラベルを付ける	plt.legend(loc=(x, y))
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategrey'
配列の次元数	aArray.ndim
バリーウッドにヒストグラムの色をする	plt.hist(データ列, color='burlywood')
データフレームの値が欠損値かどうか確認する	df.isna()
プログラムの実行を正常に終了する	sys.exit(0)
リストとリストについての散布図に赤色の大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c='r')
データフレームの中にある日付データの合計を数える	df.isin([value]).sum()
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
データフレームを表示するとき表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
数値を緑色化する	f'\033[32m{value}\033[0m'
リストとリストについての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
オブジェクトがタプルクラス	isinstance(obj, tuple)
平均値でデータフレームの欠損値を埋める	df.fillna(df.mean())
赤色で文字列をプリントする	print(f'\033[31m{value}\033[0m')
代数計算を使用する	import sympy
辞書のコピーを生成する	aDict.copy()
グラフで使うフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ファイルがあるか調べる	os.path.exists(filepath)
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
データフレームのリストで指定された列のヒートマップを描画する	sns.heatmap(df[aList].corr())
散布図を赤いポイントマーカーとして描く	plt.plot(xdata, ydata, marker='.', c='r')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
複素数型のゼロ埋めされた行列を作成する	np.zeros(要素数, dtype=bool)
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
追加モードでファイルをオープンして]、fとする	f = open(filepath, mode='a')
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgrey'
プログラムの実行を強制的に終了する	sys.exit()
最小値でデータ列の未入力値を埋める	ds.fillna(ds.min())
再帰が何回までできるかを調べる	sys.getrecursionlimit()
明るいグラフをリストと配列でプロットしてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
ファイルを全部、読む	f.read()
淡いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
Pandasでデータフレームのcollをフォーマットfmtでタイムスタンプ型にする	pd.to_datetime(df[col], format=fmt)
文字列中の部分文字列の登場回数をカウントする	s.count(sub)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
辞書の項目名と値を入れ替える	{v: k for k, v in aDict.items()}
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
線グラフを描画して、その色をラベンダーにセットする	plt.plot(データ列, データ列2, color='lavender')
パスのセパレータ記号	os.sep
整数nの16進数文字列を使う	hex(n)[2:]
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
行列の要素ごとの積	np.multiply(aArray, aArray2)
＜オプション＞色をプラムに設定する	color = 'plum'
リストとデータ列の明るいグラフを描画し、、その色を黒くする	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームのリストカラムの相関行列スピアマン相関係数としてを計算する	df[aList].corr(method='spearman')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
＜オプション＞グラフの色をペルーに設定する	color = 'peru'
リストとイテラブルの散布図を描画してマーカーの色を暗いに指定する	plt.plot(xdata, ydata, c='dark')
実数のn乗して実数による余り	pow(x, n, y)
＜オプション＞フクシアを使う	color = 'fuchsia'
カラムの値を正規表現で一度に置き換える	ds.replace(pattern, repl, regex=True)
折れ線グラフのダイアモンドマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データ列を1000の位で丸めて、整数にする	ds.round(-3).astype(int)
配列と配列について破線を描画し、、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
配列の差	aArray - aArray2
ヒストグラムを描画して、色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
明るいの色を青色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='b')
配列と数列についての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
predicateFuncを適用したときTrueになる配列の要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフに丸マーカーを加える	plt.plot(データ列, データ列2, marker='o')
２つの表データを列'A'と列'B'をキーとして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
数列とデータ列についての散布図を明るい色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
線グラフを描画して、色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
データフレームのカラムを丸める	df[col].round()
日付時刻データの曜日を整数で求める	aDatetime.weekday()
リストとリストについて散布図を描画し、、その大きさをnに指定する	plt.scatter(xdata, ydata, s=n)
＜オプション＞プラム色を使う	color = 'plum'
縦棒グラフをプロットして、中央寄せする	plt.bar(ラベル列, データ列, align='center')
赤い左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ファイルを全部読む	f.read()
複数カラムの関係性を一度にプロットする	sns.pairplot(df[[column, column2, column3]])
辞書の全エントリを消去する	aDict.clear()
二つの文字列が等しくない	s != s2
リストが空でないか	len(aList) != 0
安全に文字列の接尾辞から部分文字列を消す	s.removesuffix(sub)
濃いグラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
データフレームの列を丸めて、整数型にする	df[col].round().astype(int)
リストとリストの黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
整数LCM	math.lcm(n, n2)
カウンタから最も頻出な要素の件数	aCounter.most_common()[1]
濃いの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
＜オプション＞スラッシュを区切りで使う	sep = '/'
リストをn個に等間隔でビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
＜オプション＞ブール型を用いる	dtype = np.int32
文字列の先頭が部分文字列	s.startswith(sub)
三つの文字列を順にプリントする	print(value, value2, value3)
黒い三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='k')
折れ線グラフの色をネイビーに指定する	plt.plot(データ列, データ列2, color='navy')
二つの表データを横向きにマージする	pd.merge(df, df2)
文字列は全て識別子名か調べる	s.isidentifier()
暗いグラフの色を青色に設定する	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列の示す文字コードで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=s)
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
型は名前付きタプルか調べる	issubclass(C, tuple)
新しい文字列で正規表現にマッチした文字列を置換する	re.sub(pattern, newsub, s)
折れ線グラフの色をダークブルーに設定する	plt.plot(データ列, データ列2, color='darkblue')
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
リストとリストについての散布図を明るい色として描く	plt.plot(xdata, ydata, c='bright')
バイトオーダ	sys.byteorder
データフレームのリスト列を丸める	df[aList].round()
データフレームの行の一覧を使う	df.index
データフレームを10の位で丸めて整数型にする	df.round(-1).astype(int)
何回まで再帰ができるかを知る	sys.getrecursionlimit()
折れ線グラフに描画してマーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
リストの末尾にリストを追加して拡張する	aList.extend(aList2)
実行結果を太文字にする	f'\033[1m{value}\033[0m'
データフレームの尖度	df.skew()
カウンタのktopを列挙する	aCounter.most_common(k)
ヒストグラムの色を黄色に指定する	plt.hist(データ列, color='yellow')
データ列とラベルを指定して、棒を描画する	plt.bar(ラベル列, データ列)
日付データが何曜日か知る	aDate.weekday()
要素ひとつのタプルを作る	(element,)
リストの先頭を除く	aList[1:]
オブジェクトがn回繰り返す列	itertools.repeat(element, n)
ファイルからベースファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
データフレームを列で昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
＜オプション＞ライトシアン色を使う	color = 'lightcyan'
＜オプション＞オーキッドにグラフの色を設定する	color = 'orchid'
パステル調のの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
データフレームのリストカラムの歪度	df[aList].kurt()
実数の双曲線余弦の逆数	math.acosh(x)
startからendまでヒストグラムにする	plt.hist(データ列, range=(start, end))
＜オプション＞バイオレット色を使う	color = 'violet'
データ列のNaNをxに変更する	ds.fillna(x)
透明度alphaの折れ線をプロットする	plt.plot(xdata, ydata, alpha=alpha)
組を引数として展開して表示する	print(*aTuple)
文字列を全て大文字にする	s.upper()
文字列の開始位置から終了位置の間で部分文字列をカウントする	s.count(sub, start, end)
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列, データ列2, marker='D')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
ヒストグラムの色をレベッカパープルにセットする	plt.hist(データ列, color='rebeccapurple')
ダークグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkgreen')
＜オプション＞大バツマーカーを使う	marker = 'X'
折れ線グラフの色をダークシアンに指定する	plt.plot(データ列, データ列2, color='darkcyan')
データフレームの指定された２つの列を抽出する	df[[column, column2]]
破線の色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
ヒストグラムの色をカーキにセットする	plt.hist(データ列, color='khaki')
データフレームから破壊的に重複をドロップする	df.drop_duplicates(inplace=True)
リストとリストについての散布図に▽マーカーを描画する	plt.plot(xdata, ydata, marker='v')
改行なしに文字列をプリントする	print(value, end='')
＜オプション＞アイボリーを使う	color = 'ivory'
リストのn番目を削除する	del aList[n]
データフレームのカラムの日を見る	df[col].dt.day
英字の大文字列	string.ascii_uppercase
プログラムの実行を異常終える	sys.exit(1)
ベージュにヒストグラムの色をセットする	plt.hist(データ列, color='beige')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
線グラフを描画して、色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
原点から(実数,y)の距離	math.hypot(x, y)
nとn2が等しいか	n == n2
重なりを見やすく明るい色で散布図を描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
データフレームの列を削除する	df.drop(column, axis=1)
折れ線グラフを描画して、その色をダークマゼンタに変更する	plt.plot(データ列, データ列2, color='darkmagenta')
データフレームをJSONLファイルにSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
破線に折れ線グラフを変更する	plt.plot(データ列, データ列2, linestyle='dashed')
ハローワールドとプリントする	print('Hello World')
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
nがセットのひとつか調べる	n in aSet
ヒストグラムを描画してその色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
オブジェクトは文字列型	isinstance(obj, str)
マップのキーとその項目をペアとして取り出す	aDict.items()
nがn2以下かどうか	n <= n2
凡例を文字列と文字列と入れる	plt.legend([s, s2])
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
文字列はカタカナかどうか調べる	('ァ' <= ch <= 'ン')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
後の値でデータフレームのカラムのNaNを埋める	df[col].fillna(method='bfill')
線グラフを描画してその色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
黒い星マーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='*', c='k')
リストとリストの淡いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列, データ列2, color='oldlace')
ヒストグラムを描画して、その色をダークゴールデンロッドに指定する	plt.hist(データ列, color='darkgoldenrod')
カラーコードの△マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
標準出力のバッファをフラッシュする	sys.stdout.flush()
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
＜オプション＞色をグリーンに変更する	color = 'green'
Pandasで文字列をdatetime64型に変換する	pd.to_datetime(s)
ファイルからの入力ストリームを使う	open(filepath)
nを切り捨てながらn2分の一にする	n //= n2
グラフで使える色名の一覧を使う	matplotlib.colors.cnames
アリスブルーにヒストグラムの色を変更する	plt.hist(データ列, color='aliceblue')
データフレームの列のヒストグラムを描画する	plt.hist(df[column])
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
文字列は全て印字できるか確認する	s.isprintable()
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
行列の行ごとの標準偏差	np.std(aArray, axis=1)
線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
文字列をバイト列に変換する	bytes(s)
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
データ列を等しい量になるように分割数nでビン分割する	pd.qcut(ds, n)
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
両端キュー中の値のインデックスを使う	deq.index(element)
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
数字を全部使う	string.digits
オブジェクトに属性があるか調べる	hasattr(obj, プロパティ名)
ファイルからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
カウンタを辞書で更新する	aCounter.update(aDict)
カラーコードの右三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフを描画して、その色をレベッカパープルに指定する	plt.plot(データ列, データ列2, color='rebeccapurple')
列によってデータフレームをグループ化して合計を求める	df.groupby(column).sum()
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
上限長nの両端キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
日付データからn日を減らす	aDate - datetime.timedelta(days=n)
＜オプション＞グラフの色をダークスレートブルーにセットする	color = 'darkslateblue'
データフレームを複数の列で昇順に並べ直す	df.sort_values(by=column, ascending=True)
折れ線グラフを描画して、その色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
＜オプション＞色をシーグリーンに設定する	color = 'seagreen'
日付データが何年か知る	aDate.year
リストとデータ列についての散布図に▽マーカーをプロットする	plt.plot(xdata, ydata, marker='v')
全要素を０で初期化された論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
タイムスタンプデータにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフの下三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
実数を実数で割って、切り捨てる	x // y
＜オプション＞色をスノーに変更する	color = 'snow'
列名を列挙する	df.columns
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
データ列の中に存在する文字列の個数をカウントする	ds.isin([value]).sum()
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
折れ線グラフの菱形マーカーの線幅をnにセットする	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
文字列はタイトルケース	s.istitle()
＜オプション＞丸マーカーを加える	marker = 'o'
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
折れ線グラフを描画して、その色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
データフレームを表示するとき、最大行数を増やす	pd.set_option('display.max_rows', n)
文字列を白色にする	f'\033[37m{value}\033[0m'
＜オプション＞オレンジ色を使う	color = 'orange'
ファイルを文字列の示すエンコーディングを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
パターンをコンパイルする	re.compile(pattern)
データフレームの重複していない行だけを選ぶ	df[not df.duplicated(keep=False)]
暗いの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='dark', color='r')
グラフで使うフォントをfontNameに指定する	sns.set(font=fontName)
散布図に上三角マーカーを使用する	plt.plot(xdata, ydata, marker='^')
プロットの色をpalleteNameで指定する	sns.set(pallete=palleteName)
逆双曲線正弦を求める	math.asinh(x)
明るいパレットをグラフの描画で使う	sns.set(pallete='bright')
データフレームから指定された４つの列のみ抽出する	df[[column, column2, column3, column4]]
浮動小数点数を実数で除した余り	x % y
折れ線グラフを描画して、色をオレンジレッドに指定する	plt.plot(データ列, データ列2, color='orangered')
＜オプション＞貝殻を使う	color = 'seashell'
＜オプション＞改行を分割記号で使う	sep = '\n'
xを整数に変換する	int(x)
線グラフを描画して、色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
原点から点までの距離	math.hypot(x, y)
データフレームの中の欠損値がある行を削除する	df.dropna()
＜オプション＞読み込まないフッタをnにする	skipfooter = n
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列, データ列2, color='lavender')
ヒストグラムの色を真紅に指定する	plt.hist(データ列, color='crimson')
＜オプション＞グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
折れ線グラフの色を青に変更する	plt.plot(データ列, データ列2, color='blue')
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['A'].value_counts().sort_index().index
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
ヒストグラムの色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
３つの文字列を順にプリントする	print(value, value2, value3)
文字コードtextでファイルパスをオープンする]	open(filepath, encoding=text)
整数nを16進数文字列に変換する	hex(n)[2:]
リストとリストの折れ線グラフを描画して透明度をalphaにする	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞グラフの色をグリーンイエローに設定する	color = 'greenyellow'
ヒストグラムを描画し、透明度をxに設定する	plt.hist(データ列, alpha=x)
ヒストグラムを描画してその色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
ヒストグラムを描画して、色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
＜オプション＞アリスブルーを使う	color = 'aliceblue'
空白で文字列を分割して、列挙する	s.split()
ヒストグラムを描画してその色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
リストとデータ列についてカラーコードの明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
数列とデータ列についての散布図を淡い色で重なりを見やすく描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
配列を2次元1列に変形する	aArray.reshape(-1, 1)
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
文字列の先頭を求める	s[0]
項目名で指定された項目を辞書からポップする	aDict.pop(key)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
ライムグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='limegreen')
＜オプション＞ピーチパフに色を設定する	color = 'peachpuff'
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
＜オプション＞色をディムグレーに指定する	color = 'dimgrey'
＜オプション＞グラフの色をナバホホワイトに変更する	color = 'navajowhite'
データ列の一意な値	ds.unique()
ファイルからストリームを読み込み、fileとする	file = open(filepath)
タプルをカウンタに変換する	collections.Counter(aDict)
二つのオブジェクトが同一参照か調べる	obj is obj2
値を緑色で表示する	print(f'\033[32m{value}\033[0m')
青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
数列とリストについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
ヒストグラムを描画して色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列, データ列2, color='lightcyan')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
＜オプション＞グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
ヒストグラムの色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
0で全要素を初期化した配列	np.zeros(要素数)
ビスクにヒストグラムの色を変更する	plt.hist(データ列, color='bisque')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
線グラフの色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
整数を実数で整数除算する	x // y
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
＜オプション＞インデックスを自動的な連番に変更する	index_col = None
プロットの色をパステル調にする	sns.set(pallete='pastel')
大文字を全部使う	string.ascii_uppercase
ヒストグラムを描画して、その色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
タプルの要素を逆順にする	aTuple[::-1]
rangeの無限バージョン	itertools.count(start=n, step=step)
折れ線グラフを描画して、その色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
＜オプション＞グラフの色をホワイトに設定する	color = 'white'
nの二乗を計算する	n ** 2
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
＜オプション＞ナバホホワイト色を使う	color = 'navajowhite'
ファイルパスを文字コードtextを使って追加できるように開く]	open(filepath, mode='a', encoding=text)
日付データは日付データと同時かどうか調べる	aDate == aDate2
＜オプション＞どのカラムもインデックスに設定しない	index_col = None
データフレームを'A'列によってを用いて降順に整列する	df.sort_values(by='A', ascending=False)
mathを使う	import math
カーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='khaki')
データ列と数列について散布図を描画してその大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
Pandasでタイムスタンプのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
ヒストグラムを描画して、色を紺に設定する	plt.hist(データ列, color='darkblue')
文字列にイテラブルを変換して、空白によって連結する	' '.join(map(str, iterable))
リストとデータ列として淡いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
線グラフを描画して、その色をミディアムオーキッドにセットする	plt.plot(データ列, データ列2, color='mediumorchid')
数の小数点以下を丸める	round(x)
暗いの折れ線をリストとリストで描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
配列とリストの散布図にポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.')
集合から別の集合を取り除く	aSet.difference_update(aSet2)
散布図に四角マーカーを使用する	plt.plot(xdata, ydata, marker='s')
整数nを8進表記に変換する	oct(n)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
データフレームからn行ランダムサンプリングする	df.sample(n)
列と列をつなぐ	itertools.chain(iterable, iterable2)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
データ列とリストの黒い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
ファイルパスから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
10を底とする実数の対数を計算する	math.log10(x)
＜オプション＞オリーブ色を使う	color = 'olive'
配列をリストを境界値としてビンニングする	pd.cut(aArray, aList)
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
＜オプション＞グラフの色をパープルに設定する	color = 'purple'
データフレームの重複した行を数える	df.duplicated().sum()
タプルの先頭のn要素を取り除く	aTuple[n:]
ベクトル演算をする	import numpy as np
複数のデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
表データの中で列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
データフレームのリストカラムのNaNをxで補う	df[aList].fillna(x)
日付データが木曜日か調べる	aDate.weekday() == 3
折れ線グラフを描画してその色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
散布図にカラーコードの三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
配列とリストを折れ線グラフで描く	plt.plot(xdata, ydata)
折れ線グラフのダイアモンドマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データフレームの中の列を等量でビン数nでビニングする	pd.qcut(df[col], n)
配列とリストの散布図に黒色の右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
配列と数列についての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
変数を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
グラフで日本語を表示できるようにする	sns.set(font='IPAexGothic')
折れ線グラフにバツマーカーを使う	plt.plot(データ列, データ列2, marker='x')
にy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
文字列を赤色にする	f'\033[31m{value}\033[0m'
辞書のコピーを作る	dict(aDict)
折れ線グラフの色をアリスブルーに指定する	plt.plot(データ列, データ列2, color='aliceblue')
＜オプション＞文字コードを文字列の示す文字コードに設定する	encoding = s
タプルをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
文字列を空白で区切り、、整数リストに変換する	map(int, s.split())
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
文字列としてイテラブルを連結する	''.join(map(str, iterable))
論文にグラフの用途を設定する	sns.set(context='paper')
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='grey')
nとn2の論理和	n | n2
＜オプション＞3二ビット整数型を使う	dtype = np.int16
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
黒いクロスマーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='x', c='k')
明るいグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
リストとリストを結合する	aList + aList2
列のNaNを中央値で埋める	ds.fillna(ds.median())
オブジェクトはリストかタプルかどうか調べる	isinstance(obj, (list)
数の複素数	complex(x)
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
＜オプション＞オレンジレッド色を使う	color = 'orangered'
文字列の接頭辞が部分文字列	s.startswith(sub)
リストをn回連結する	aList * n
線グラフを描画してその色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
リストの要素をソートする	sorted(aList)
オプションで、出力先をファイルに変更する	file = sys.open(filename, 'w')
日付時刻データの月数	aDatetime.month
＜オプション＞グラフの色をライトスレイグレーに指定する	color = 'lightslategrey'
データフレームを列によってソートし、、行を振り直す	df.sort_values(columns).reset_index(drop=True)
散布図のマーカーの大きさを指定する	plt.scatter(xdata, ydata, s=n)
リストの個数だけ繰り返す	range(len(aList))
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
散布図に赤い星マーカーを使用する	plt.plot(xdata, ydata, marker='*', c='r')
＜オプション＞ダーク・スラテグレーを使用する	color = 'darkslategrey'
スレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='slateblue')
空のカウンタ	collections.Counter()
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
文字列の大文字と小文字を逆にする	s.swapcase()
自然数の順列の総数を求める	math.perm(n)
列をベクトルにする	pd.get_dummies(iterable)
変数を緑色化する	f'\033[32m{value}\033[0m'
折れ線グラフの菱形印を赤くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
Pandasでエポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームの行を条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
データ列の月	ds.dt.month
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
列をキーにしてデータフレームを整列する	df.sort_values(by=column)
文字列を最後の部分文字列を使って二分する	s.rpartition(sub)
カラーパレットを全般的に暗くする	sns.set(pallete='dark')
散布図をポイントマーカーとして描画する	plt.plot(xdata, ydata, marker='.')
＜オプション＞色をパールゴールデンロッドにセットする	color = 'palegoldenrod'
データフレームのリスト列の空文字を未入力値に変換しドロップする	df[aList].replace('', np.nan).dropna()
折れ線グラフの四角印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
グラフの中のy軸の軸ラベルをuntitledに指定する	plt.ylabel(untitled)
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
書き込みできるようにファイルパスをオープンする]	open(filepath, mode='w')
項目名が辞書に存在する	key in aDict
＜オプション＞紺色を使う	color = 'darkblue'
リストとデータ列の淡いグラフをプロットして、色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
散布図にポイントマーカーを使う	plt.plot(xdata, ydata, marker='.')
＜オプション＞フクシア色を用いる	color = 'fuchsia'
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
データフレームのリストカラムの平均値	df[aList].mean()
カウンタ間で∪	aCounter | aCounter2
データフレームから指定された三つの列だけ抽出する	df[[column, column2, column3]]
黒色の下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c='k')
＜オプション＞グラフの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
文字列が全て小文字	s.islower()
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
nがn2で割り切れない	n % n2 != 0
折れ線グラフの色を小麦色に指定する	plt.plot(データ列, データ列2, color='wheat')
プログラムの実行を正しく終える	sys.exit(0)
ミディアムスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumslateblue')
セットから全要素を消す	aSet.clear()
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
ヒストグラムを描画して、その色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
折れ線グラフを描画して、その色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategrey')
データフレームのリストカラムの中に存在する文字列との合計を数える	df[aList].isin([value, value2]).sum()
データフレームの欠損値を最大値で補う	df.fillna(df.max())
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
横棒グラフの幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
データフレームのカラムの値が未入力値か調べる	df[col].isna()
線グラフの色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
マッピングから項目名の値	aDict.get(key)
startからendの区間の度数分布図を用いてリストを描画する	plt.hist(データ列, range=(start, end))
グラフの色を全般的に明るくする	sns.set(pallete='bright')
＜オプション＞線種を一点鎖線に設定する	linestyle = 'dashbot'
実数を整数にする	int(x)
ヒストグラムの色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
＜オプション＞ゴールデンロッド色を使う	color = 'goldenrod'
文字列からformatのパターンでタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
nが無限に続くイテラブル	itertools.repeat(n)
十六進数字を全て使う	string.hexdigits
数式の変数に数式を代入する	e.subs(z, e2)
ビンの数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
＜オプション＞ミントクリーム色を使用する	color = 'mintcream'
データ列の中央値	ds.median()
データフレームを列で並べてインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
データフレームの中のカラムを等量でn個にビンニングする	pd.qcut(df[col], n)
nにn2をかける	n * n2
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
リストとデータ列についての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
文字列が全て英数字か調べる	s.isalnum()
折れ線グラフに大きさnの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
リストとリストの青い濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='b')
カラーコードの▽マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
＜オプション＞SJISを使う	encoding = 'shift_jis'
散布図にカラーコードのバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムを描画して、その色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
リストとリストの淡いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ファイルパスの拡張子付きのファイル名	os.path.basename(filepath)
小数点数の小数部を求める	math.modf(x)[0]
文字列が組の要素でないかどうか調べる	element not in aTuple
データフレームのリストカラムの中にいくつ欠損値が含まれるか求める	df[aList].isna().sum()
＜オプション＞色をコーラルに設定する	color = 'coral'
文字列リストを結合する	''.join(aStringList)
折れ線グラフを描画してその色をチョコレートに変更する	plt.plot(データ列, データ列2, color='chocolate')
列と列を連結する	itertools.chain(iterable, iterable2)
降順に'A'列によってデータフレームを破壊的に並べる	df.sort_values(by='A', ascending=False, inplace=True)
三自然数の最大公約数を計算する	math.gcd(n, n2, n3)
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
ファイルパスを文字列の示すエンコーディングで書き込みできるように開く]	open(filepath, mode='w', encoding=s)
データ列の歪度	ds.kurt()
＜オプション＞スカイブルーに色を指定する	color = 'skyblue'
ヒストグラムを描画して、ビン数をnに設定する	plt.hist(データ列, bins=n)
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
＜オプション＞レモンシフォン色を使う	color = 'lemonchiffon'
＜オプション＞複素数型を用いる	dtype = bool
ヒストグラムを描画してその色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
データフレームを100の位で四捨五入して、整数型にする	df.round(-2).astype(int)
パラメータが無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, oo)
＜オプション＞オリベドラブ色を使う	color = 'olivedrab'
デフォルトを適用する	sns.set()
＜オプション＞色をディムグレーに設定する	color = 'dimgray'
配列とリストの散布図を描画して、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
エラーなく集合から値を取り除く	aSet.discard(element)
範囲を指定して整数乱数を計算する	random.randint(最小値, 最大値)
線グラフを描画して、その色をビスクに変更する	plt.plot(データ列, データ列2, color='bisque')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ヒストグラムを描画して、その色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
双方向キューの先頭から要素を取り除く	deq.popleft()
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()//60
＜オプション＞オリベドラブを使用する	color = 'olivedrab'
リストとリストについての散布図に星マーカーを描く	plt.plot(xdata, ydata, marker='*')
'A'列の値でデータフレームをグループ化し、記述統計量を求める	df.groupby('A').describe()
＜オプション＞グラフの色をミディアムアクアマリンにセットする	color = 'mediumaquamarine'
線グラフを描画して、その色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
ヒストグラムを描画して、色を紺に変更する	plt.hist(データ列, color='darkblue')
辞書の全値をクリアする	aDict.clear()
日付時刻データの時間	aDatetime.time()
方程式の解	sympy.solve(e)
＜オプション＞青紫色を使う	color = 'violet'
折れ線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
列でデータフレームをグループ化して列の要約統計量を求める	df.groupby(column).describe()[column2]
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
濃いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
前もってパターンをコンパイルする	re.compile(pattern)
データフレームのカラムの分散を計算する	df[col].var()
データフレームのカラムの中にあるの合計を数える	df[col].isin([value]).sum()
列を用いてデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True)
黒いバツ印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
データフレームの列名を指定された名前リストに置き換える	df.columns = columns
折れ線グラフの左三角印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
マッピングにマッピングの項目を更新する	aDict.update(aDict2)
＜オプション＞色をアンティークホワイトにする	color = 'antiquewhite'
カラーコードの大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
2つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
タプルを引数として展開して表示する	print(*aTuple)
シアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='cyan')
ヒストグラムを描画して色をブラックに設定する	plt.hist(データ列, color='black')
線グラフを描画して、その色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
複数の列によってデータフレームを並べて、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
要素が集合に含まれるか調べる	element in aSet
緑色で値をプリントする	print(f'\033[32m{value}\033[0m')
データフレームの中で何行、重複するか見る	df.duplicated().sum()
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
＜オプション＞グラフの色をクリムゾンにする	color = 'crimson'
データ列とラベル列を指定して、積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
リストとリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
配列とリストで淡いを描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
二つの集合がセットと交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
折れ線グラフに黄色い▽印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
＜オプション＞ミディアムスレートブルーを使う	color = 'mediumslateblue'
実数を３乗する	x ** 3
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
スチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='steelblue')
タイムスタンプデータが日付時刻データより前か調べる	aDatetime < aDatetime2
＜オプション＞ネイビー色を用いる	color = 'navy'
ヒストグラムを描画して、その色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
データフレームを関数によってグループ化し要約統計量を算出する	df.groupby(関数).describe()
リストの出力を改行せず行う	print(value, end='')
文字列が小文字	s.islower()
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
黒い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
ポスターにグラフの用途を指定する	sns.set(context='poster')
現在の日数	datetime.datetime.today().day
黒い大バツマーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='X', c='k')
グラフの描画でパステル調のパレットを使う	sns.set(pallete='pastel')
濃い色の折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
＜オプション＞ライトスチールブルーを使う	color = 'lightsteelblue'
＜オプション＞バツマーカーを加える	marker = 'x'
リストとイテラブルについての散布図に黒色の星マーカーを描く	plt.plot(xdata, ydata, marker='*', c='k')
データフレームを'A'列で昇順にソートする	df.sort_values(by='A', ascending=True)
ふたつの集合が集合と交わりを持たないか	aSet.isdisjoint(aSet2)
ヒストグラムを描画して色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
二点間のユークリッド距離	math.dist(point, point2)
折れ線グラフに描画してマーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
文字列をトリムする	s.strip()
データフレームのカラムがどれだけ、分散しているか見る	df[col].var()
コーラルにヒストグラムの色をセットする	plt.hist(データ列, color='coral')
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
データフレームの中に存在する文字列と文字列の合計を求める	df.isin([value, value2]).sum()
青い明るいをプロットする	plt.plot(xdata, ydata, linestyle='bright', color='b')
ヒストグラムを描画して、色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ヒストグラムの色をインディアンレッドにセットする	plt.hist(データ列, color='indianred')
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
色差別ないの折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データフレームのリスト列の中にいくつ文字列が含まれるか数える	df[aList].isin([value]).sum()
nかつn2	n and n2
散布図に黒いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='k')
折れ線グラフを描画して、その色をインディゴにセットする	plt.plot(データ列, データ列2, color='indigo')
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
横に並べてヒストグラムを描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
データフレームのカラムは正規分布からどの程度、尖っているか見る	df[col].skew()
折れ線グラフのマーカーを菱形にする	plt.plot(データ列, データ列2, marker='D')
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
余弦の逆数を計算する	math.acos(x)
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
2つの文字列をカンマで区切って出力する	print(value, value2, sep=',')
カラーバーをプロットする	plt.colorbar()
ヒストグラムの透明度をxに指定する	plt.hist(データ列, alpha=x)
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
ヒストグラムを描画してその色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
カラムはどの程度、分散しているか見る	ds.var()
nにn2を加える	n + n2
文字列がリストに含まれるか調べる	element in aList
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフを描画して色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
ヒストグラムを描いて半透明化にする	plt.hist(データ列, alpha=0.5)
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgray'
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
nを八進リテラルに変換する	oct(n)
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
折れ線グラフを描画してその色をダーク・スラテグレーにセットする	plt.plot(データ列, データ列2, color='darkslategrey')
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
ひとつでも小文字が文字列内に含まれるかどうか調べる	any(c.islower() for c in s)
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
データフレームを列を用いて並べて更新する	df.sort_values(by=column, inplace=True)
データ列とデータ列の折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
耐火レンガにヒストグラムの色をセットする	plt.hist(データ列, color='firebrick')
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列, データ列2, color='yellowgreen')
リストと配列についての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
＜オプション＞文字列の示す文字コードを使う	encoding = s
ヒストグラムを描画して、その色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
year年month月day日hour時minute分のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
文字列を最後の部分文字列で二分し、残りの文字列を見る	s.rpartition(sub)[-1]
＜オプション＞グラフの色をライムグリーンに設定する	color = 'limegreen'
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
淡いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
変数について数式の微分を計算する	sympy.diff(e, z)
赤い四角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='s', c='r')
ヒストグラムを描画して、その色を暗い赤に指定する	plt.hist(データ列, color='darkred')
実数が整数かどうか	x.is_integer()
文字列をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームの標本標準偏差を求める	df.std()
＜オプション＞下三角マーカーを使う	marker = 'v'
折れ線グラフを描画して、色をカデットブルーにセットする	plt.plot(データ列, データ列2, color='cadetblue')
データフレームの欠損値をxにする	df.fillna(x)
実数の双曲線正弦の逆数	math.asinh(x)
nとkのコンビネーション	math.comb(n, k)
色差別ない色の折れ線グラフを描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
＜オプション＞リネンにグラフの色を設定する	color = 'linen'
データフレームの中にある文字列と文字列の合計を求める	df.isin([value, value2]).sum()
文字列は組に含まれるか調べる	element in aTuple
配列の次元を変形する	aArray.reshape(行数, 列数)
暗いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
データフレームを配列に変換する	df.values
データフレームのリストカラムの中にと文字列がいくつ存在するか数える	df[aList].isin([value, value2]).sum()
データフレームのリストカラムの平均値を計算する	df[aList].mean()
正方単位行列	np.identity(N)
2つのデータフレームをジョインする	pd.merge(df, df2)
＜オプション＞文字列をセパレータで使う	sep = s
実数は有限か	math.isfinite(x)
マップの値の一覧	aDict.values()
＜オプション＞整数型を使う	dtype = np.int
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
ファイルからのストリームを使う	open(filepath)
＜オプション＞色をスカイブルーに指定する	color = 'skyblue'
リストと配列の散布図をプロットして、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
折れ線グラフの色をピンクに指定する	plt.plot(データ列, データ列2, color='pink')
コマンドライン引数	sys.argv
列を用いてデータフレームを並べて、更新する	df.sort_values(by=column, inplace=True)
ヒストグラムを描画してその色を青紫に設定する	plt.hist(データ列, color='violet')
＜オプション＞オレンジレッド色を使用する	color = 'orangered'
列のコンビネーションを得る	itertools.combinations(iterable, n)
プロットを全般的にパステル調にする	sns.set(pallete='pastel')
データ列の値はNaNかどうか確認する	ds.isna()
ヒストグラムを描画して色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
両端キューに文字列をプッシュする	deq.append(element)
列を等量でn個にビン分割する	pd.qcut(ds, n)
＜オプション＞パレットトルコイズにグラフの色を設定する	color = 'paleturquoise'
範囲を指定して整数乱数を得る	random.randint(最小値, 最大値)
イテラブルとイテラブルについて散布図を描画して、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategrey')
キーが辞書にあるいるかどうかテストする	key not in aDict
文字列内にひとつでも数字が含まれるかどうか調べる	any(c.isdigit() for c in s)
文字列が全て空白か調べる	s.isspace()
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
折れ線グラフの大バツ印を赤色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
データフレームを各列毎にグループ化し、、列の標準偏差を求める	df.groupby(column)[column2].std()
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
折れ線グラフの色をグリーンイエローにセットする	plt.plot(データ列, データ列2, color='greenyellow')
配列をx座標と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
＜オプション＞ピーチパフを用いる	color = 'peachpuff'
'A'列を用いてによって破壊的にデータフレームを並べる	df.sort_values(by='A', inplace=True)
ビン数nとしてリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
昇順にリストの要素を並べる	sorted(aList, reverse=False)
数列と配列の青色のパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
リストと配列について散布図をプロットして、マーカーを大バツに指定する	plt.plot(xdata, ydata, marker='X')
散布図に赤い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='r')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列, データ列2, marker='v')
列を配列に変換する	df[column].values
nが1、もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
Pandasで、データフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
全要素を０で初期化された符号なし８ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.uint8)
集合が空でないかどうか	len(aSet) != 0
ヒストグラムを描画して、その色をデピンクに設定する	plt.hist(データ列, color='deeppink')
文字列内にひとつでも空白が含まれるかどうか	any(c.isspace() for c in s)
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
dateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
ゴールド色の線グラフを描画する	plt.plot(データ列, データ列2, color='gold')
カラムの未入力値を最大値で補う	ds.fillna(ds.max())
データフレームを'A'列によってによって破壊的に並べる	df.sort_values(by='A', inplace=True)
破壊的にデータフレームを二つの列を用いて降順にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
＜オプション＞デピンクを用いる	color = 'deeppink'
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
nの二乗を求める	n ** 2
列の各要素に対して、predicateFuncの適用が真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
２つの列で昇順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
２つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
現在の年数	datetime.datetime.today().year
データフレームのカラムの中の欠損値の数を求める	df[col].isna().sum()
kを底とする実数の対数	math.log(x, k)
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
データフレームのカラムの中にと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
データフレームを関数の値によってグループ化する	df.groupby(関数)
プログラムのファイルの名前	sys.argv[0]
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
線グラフを描画して、色をダークスラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategray')
ヒストグラムを描画して色を青紫に変更する	plt.hist(データ列, color='violet')
数値のパラメータの解を方程式として計算する	sympy.solve(e, z)
実行環境の再帰の最大回数	sys.getrecursionlimit()
＜オプション＞グラフの色をライトブルーに設定する	color = 'lightblue'
イテラブルとリストについて濃い色の折れ線グラフを描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
ヒストグラムを描画して、その色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフを描画して、色をインディアンレッドに変更する	plt.plot(データ列, データ列2, color='indianred')

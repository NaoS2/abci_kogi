サイコロ	random.randint(1, 6)
オプションで、標準出力を出力にする	file = sys.stdout
散布図にカラーコードの四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c=rgb)
リストを色差別ない色のヒストグラムで描画する	plt.hist(xdata, color='colorblind')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
赤い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
文字列を空白で区切る	s.split()
偽	False
ブラック色の線グラフを描画する	plt.plot(データ列, データ列2, color='black')
＜オプション＞追加モードに設定する	mode = 'a'
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
ユーザから入力される	input()
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
現在が何分か知る	datetime.date.today().minute
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
折れ線グラフの三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
文字列の長さ	len(s)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
＜オプション＞グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
折れ線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
アルファベットを全部使う	string.ascii_letters
折れ線グラフの色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
ヒストグラムを描画して、その色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
レベッカパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='rebeccapurple')
リストとリストについて散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
実数を万の位で丸める	round(x, -4)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
上位集合か調べる	aSet.issuperset(aSet2)
折れ線グラフを描画して、色を黄色くする	plt.plot(データ列, データ列2, color='y')
ライトコーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcoral')
折れ線グラフに黄色い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
プラットフォームの符号付き整数の最大値	sys.maxsize
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
nをn2で割った余りをnに代入する	n %= n2
＜オプション＞ミディアムブルー色を使う	color = 'mediumblue'
リストとリストの濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
要素∉集合	element not in aSet
データフレームのカラムとカラムを折れ線グラフで描画する	plt.plot(df[col], df[col2])
折れ線グラフを描画して、その色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
ローングリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lawngreen')
両端キューをリストに変換する	list(deq)
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
折れ線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
本日をタプルに変換する	datetime.datetime.today().timetuple()
＜オプション＞グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
リストとリストについて散布図を描画して、三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
オプションで、標準エラーに出力する	file = sys.stderr
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
JSONを使う	import json
＜オプション＞グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
デピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='deeppink')
データフレームのリストカラムの要約統計量	df[aList].describe()
淡い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
折れ線グラフの星マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフの右三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
リストとリストについて散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
＜オプション＞チョコレート色を使う	color = 'chocolate'
空白	' '
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
折れ線グラフを描画して、その色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
タプルの要素をソートする	sorted(aTuple)
ヒストグラムを描画して、その色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
折れ線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
＜オプション＞グラフの色を茶色に設定する	color = 'brown'
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
データフレームから指定された二つの列を抽出する	df[[column, column2]]
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
カウンタの全数	aCounter.total()
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
データフレームを関数によってまとめたグループ	df.groupby(関数)
実数のn乗	pow(x, n)
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
nの三乗	n ** 3
ヒストグラムを描画して、その色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
赤い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='r')
グラフの見栄えを良くする	import seaborn as sns
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
折れ線グラフに緑色の右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
nをn2乗に増やす	n **= n2
データフレームから列を三つ選択する	df[[column, column2, column3]]
タプルの合計値	sum(aTuple)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
タプルをナンバリングする	enumerate(aTuple)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフに緑色の大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
本日が何日か知る	datetime.datetime.today().day
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフを描画して、その色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
リストの末尾	aList[-1]
赤い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s')
nを切り捨てながらn2分の一にする	n //= n2
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
折れ線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
文字列中に部分文字列が含まれるか調べる	sub in s
＜オプション＞グラフの色をナバホホワイトに設定する	color = 'navajowhite'
データフレームのstart行目からend行目まで抽出する	df[start:end]
文字列をバイト列に変換する	bytes(s)
＜オプション＞四角マーカーを描画する	marker = 's'
リストとリストについての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
データ列の第一四分位数	ds.quantile(0.25)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
リストとリストの青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
リストとリストについて散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
時間を使う	import time
＜オプション＞グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
グリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='green')
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
整数nの十六進文字列	hex(n)[2:]
＜オプション＞ダークオリーブグリーン色を使う	color = 'darkolivegreen'
nが1、もしくは2か調べる	n == 1 or n == 2
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
＜オプション＞赤色を使う	color = 'red'
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
実数を小数点以下で丸める	round(x, n)
＜オプション＞グラフの色を白に設定する	color = 'white'
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
日付データをISO形式の文字列に変換する	aDate.isoformat()
グラフの描画で明るいカラーパレットを使う	sns.set(pallete='bright')
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
文字列を文字コード列に変換する	[ord(ch) for ch in s]
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
xを浮動小数点数型に変換する	float(x)
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
濃いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
散布図にカラーコードの丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
点線ヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
JSON形式の文字列を読み込む	json.loads(jsonString)
ヒストグラムの透明度をxに設定する	plt.hist(データ列, alpha=x)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列, データ列2, color='gainsboro')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
リストの先頭のn要素を取り除く	aList[n:]
カラーバーを描画する	plt.colorbar()
ダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
オールドレース色の線グラフを描画する	plt.plot(データ列, データ列2, color='oldlace')
辞書をカウンタに変換する	collections.Counter(aDict)
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
リストとリストのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
＜オプション＞改行コードを旧Macに設定する	newline = '\r'
＜オプション＞セパレータを改行にする	sep = '\n'
折れ線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
標準入力から1行読み取る	input()
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
データフレームの数値をまとめて丸める	df.round()
データフレームのカラムの最頻値	df[col].mode()
リストに文字列を追加する	aList.append(element)
＜オプション＞先頭のカラムをインデックスに設定する	index_col = 0
データフレームのデータ型の一覧	df.dtypes
データフレームから最後の列を除く	df[df.columns[:-1]]
リストを引数として展開して表示する	print(*aList)
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
リストの要素を昇順にソートする	sorted(aList, reverse=False)
分子割る分母	fractions.Fraction(分子, 分母)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
＜オプション＞SJISを使う	encoding = 'shift_jis'
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
ヒストグラムを描画して、その色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
データフレームをインデックスによってソートする	df.sort_index()
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
両端キューの要素をインプレースに反転する	deq.reverse()
データフレームのn行目を削除する	df.drop(n, axis=0)
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
折れ線グラフに黄色い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
折れ線グラフを描画して、その色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
＜オプション＞昇順にする	ascending = True
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
文字列をゼロ埋めする	s.zfill(文字列幅)
カラーコードのバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムの色を白くする	plt.hist(データ列, color='w')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palevioletred')
＜オプション＞バッファリングを無効にする	buffering = 0
折れ線グラフに線幅nの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフを描画して、その色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgray'
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
折れ線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
グラフの描画で濃いカラーパレットを使う	sns.set(pallete='deep')
ヒストグラムの色を青くする	plt.hist(データ列, color='b')
リストとリストの色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
実数を切り下げて整数に変換する	math.floor(x)
棒グラフを積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
文字列は全て十進数字か調べる	s.isdecimal()
ホットピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='hotpink')
整数nがリストのどれかか調べる	n in aList
リストとリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
リストを引数として展開して表示する	print(*aList, sep=',')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
データフレームの欠損値をxで埋める	df.fillna(x)
＜オプション＞オレンジレッド色を使う	color = 'orangered'
＜オプション＞ミディアムターコイズ色を使う	color = 'mediumturquoise'
折れ線グラフを描画して、色を白くする	plt.plot(データ列, データ列2, color='w')
リストの先頭を取り除く	aList[1:]
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
実数をn乗する	x ** n
折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linewidth=n)
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
赤いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
ヒストグラムをstartからendまでの範囲で描画する	plt.hist(データ列, range=(start, end))
両端キューのn番目に要素を挿入する	deq.insert(n, element)
折れ線グラフを描画して、その色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
ヒストグラムを描画して、その色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
nわるn2	n / n2
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
配列が何次元か	aArray.ndim
折れ線グラフを描画して、その色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
ヒストグラムを描画して、その色をラベンダーに設定する	plt.hist(データ列, color='lavender')
文字列を部分文字列で区切る	s.split(sub)
データフレームの指定された列を配列に変換する	df[column].values
＜オプション＞データ型を指定する	dtype = np.int32
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
文字列を正規表現で分割する	re.split(pattern, s)
＜オプション＞データ型を指定する	dtype = np.int8
八進文字列を整数に変換する	int(s, 8)
折れ線グラフに黄色いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
＜オプション＞グラフの色をタンに設定する	color = 'tan'
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
＜オプション＞グラフの色をスチールブルーに設定する	color = 'steelblue'
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
オリーブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olive')
＜オプション＞グラフの色をゲインズボロに設定する	color = 'gainsboro'
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフに大きさnの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
＜オプション＞改行コードをUNIXに設定する	newline = '\n'
折れ線グラフを描画して、その色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
＜オプション＞マルーン色を使う	color = 'maroon'
ヒストグラムを描画して、その色をペルーに設定する	plt.hist(データ列, color='peru')
長さnのリスト	[0] * n
文字列を左寄せにする	s.ljust(文字列幅)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightseagreen')
文字列の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
散布図にカラーコードの右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c=rgb)
リストとリストについての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞サドルブラウン色を使う	color = 'saddlebrown'
文字列の変数名を数式に変換する	sympy.Symbol(s)
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
濃いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
キーが辞書上で定義済みか調べる	key in aDict
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
nとn2の値を足してnに代入する	n += n2
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
スプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='springgreen')
第一引数で指定されたファイルの名前	sys.argv[1]
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
実数がNaNか調べる	math.isnan(x)
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
リストを反転する	reversed(aList)
日付データが火曜日か調べる	aDate.weekday() == 1
数式の平方根を求める	sympy.sqrt(e)
nが奇数か調べる	n % 2 == 1
リストを逆順にする	aList[::-1]
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データ列をビン数nでビン分割する	pd.cut(ds, n)
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
実数に実数を掛ける	x * y
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
オブジェクトのメモリビュー	memoryview(obj)
ヒストグラムの色を黄色くする	plt.hist(データ列, color='y')
青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列がタプルの要素でないか調べる	element not in aTuple
文字列が正規表現にマッチさせる	re.match(pattern, s)
リストをパステル調の色のヒストグラムで描画する	plt.hist(xdata, color='pastel')
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
折れ線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
行列の転置行列	aArray.T
正規表現を使う	import re
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
散布図に左三角マーカーを使う	plt.plot(xdata, ydata, marker='<')
カウンタの項目を列挙する	aCounter.keys()
変数について数式の微分を行う	sympy.diff(e, z)
カウンタを辞書に変換する	dict(aCounter)
リストとリストについて淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
＜オプション＞トマト色を使う	color = 'tomato'
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
マゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='magenta')
実数の指数	math.frexp(x)[1]
ネイピア数	math.e
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
配列をヒストグラムで可視化する	plt.hist(aArray)
折れ線グラフに下三角マーカーを使う	plt.plot(データ列, データ列2, marker='v')
両端キューの末尾に要素を追加する	deq.append(element)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
カラーコードの四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
折れ線グラフの下三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
＜オプション＞グラフの色をサーモンに設定する	color = 'salmon'
タプルのn番目からn2番目までの部分	aTuple[n:n2]
折れ線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
xを整数に変換する	int(x)
日付データが日曜日か調べる	aDate.weekday() == 6
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
折れ線グラフの色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
配列をビン分割する	pd.cut(aArray, aList)
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
明るいグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
リストとリストについて破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
ヒストグラムを描画して、その色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
リストとリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞グラフの色をオールドレースに設定する	color = 'oldlace'
散布図に赤い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データ列の秒	ds.dt.second
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
濃い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgray')
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
リストの平均値	sum(aList)/len(aList)
日付データが水曜日か調べる	aDate.weekday() == 2
青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
実数の双曲線余弦の逆数	math.acosh(x)
データ列の欠損値をxで埋める	ds.fillna(x)
第二引数で指定されたファイルの名前	sys.argv[1]
折れ線グラフに緑色の下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
ヒストグラムを描画して、その色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
ダークグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgreen')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
折れ線グラフを描画して、その色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
データフレームの列のユニークな値	df[col].unique()
日付時刻データが何年か知る	aDatetime.year
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
辞書からキーの値	aDict.get(key)
ヒストグラムを描画して、その色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
文字列を式として評価する	eval(s)
＜オプション＞コーンフラワーブルー色を使う	color = 'cornflowerblue'
＜オプション＞改行コードをWindowsに設定する	newline = '\r\n'
折れ線グラフのスタイルを破線に設定する	plt.plot(データ列, データ列2, linestyle='dashed')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
散布図に赤いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='r')
文字列が全て空白文字からなるか調べる	s.isspace()
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
折れ線グラフにラベルを付ける	plt.plot(xdata, ydata, label=untitled)
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
nをn2で整数除算する	n // n2
リストとリストの青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
実数の複素数	complex(x)
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
ヒストグラムを描画して、その色をトマトに設定する	plt.hist(データ列, color='tomato')
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
リストを展開してプリントする	print(*aList)
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
ヒストグラムを描画して、その色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
行列の行ごとの標準偏差	np.std(aArray, axis=1)
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
＜オプション＞グラフの色をダークシアンに設定する	color = 'darkcyan'
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
折れ線グラフの丸マーカーを黄色くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
数字を全部使う	string.digits
折れ線グラフのスタイルを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
タプルをn倍する	aTuple * n
数式の変数にnを代入する	e.subs(z, n)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
タプルをnからナンバリングする	enumerate(aTuple, start=n)
ナバホホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='navajowhite')
＜オプション＞グラフの色をダークカーキに設定する	color = 'darkkhaki'
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
＜オプション＞グラフの種類を実線に設定する	linestyle = 'solid'
＜オプション＞グラフの色をライトコーラルに設定する	color = 'lightcoral'
xの印字可能な文字列	ascii(x)
nからn2の値を引いてnに代入する	n -= n2
ヒストグラムを描画して、その色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
数式を展開する	sympy.expand(e)
バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフを描画して、その色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
データ列の平均値	ds.mean()
横棒グラフを積み上げにする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
散布図に赤い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='r')
折れ線グラフのポイントマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
集合から任意の要素を取り出す	aSet.pop()
データフレームの列の各データ値の出現数	df[col].value_counts()
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavenderblush')
ヒストグラムを描画して、その色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
リストとリストの折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
リストとリストの折れ線グラフを描画して、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
文字列の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
折れ線グラフの右三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
ヒストグラムを描画して、その色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
折れ線グラフに緑色の丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
データフレームのn行目を抽出する	df.loc[n]
リストを横軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
折れ線グラフの四角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
データフレームを使う	import pandas as pd
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
文字列をシンボルに変換する	sympy.Symbol(s)
イテラブルを集合に変換する	set(iterable)
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
＜オプション＞グラフの色をカデットブルーに設定する	color = 'cadetblue'
リストとリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
＜オプション＞インディゴ色を使う	color = 'indigo'
空の辞書	{}
ガンマ関数の値	math.gamma(x)
nをn2だけ左シフトする	n << n2
実数の双曲線正弦の逆数	math.asinh(x)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
＜オプション＞グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
＜オプション＞丸マーカーを描画する	marker = 'o'
辞書のキーの一覧	aDict.keys()
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
文字列を右トリムする	s.rstrip()
現在の秒数	datetime.date.today().second
＜オプション＞ダークマゼンタ色を使う	color = 'darkmagenta'
スチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='steelblue')
＜オプション＞グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
整数nのバイト長	(n.bit_length() + 7) // 8
書式をargsを引数としてフォーマットする	formatText.format(*args)
サーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='salmon')
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategrey')
xが真か調べる	bool(x)
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
日付データと日付データの時間差	aDate - aDate2
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
破線グラフの色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
＜オプション＞グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
リストとリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
折れ線グラフを描画して、その色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
数式を部分分数に展開する	sympy.apart(e)
＜オプション＞ASCII文字に限定する	flag = re.ASCII
折れ線グラフに黄色い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
＜オプション＞n番目のカラムをインデックスに設定する	index_col = n
＜オプション＞アクア色を使う	color = 'aqua'
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
集合が空でないか調べる	len(aSet) != 0
両端キューの最大長	deq.maxlen
折れ線グラフのマーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
折れ線グラフを描画して、その色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumorchid')
暗いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
現在の再帰の最大回数	sys.getrecursionlimit()
データフレームから最初の列を除く	df[df.columns[1:]]
折れ線グラフに線幅nのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
ヒストグラムを描画して、その色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
データフレームの要約統計量	df.describe()
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
＜オプション＞ライトブルー色を使う	color = 'lightblue'
＜オプション＞ミッドナイトブルー色を使う	color = 'midnightblue'
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
折れ線グラフに緑色の星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
折れ線グラフを描画して、その色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
小麦色色の線グラフを描画する	plt.plot(データ列, データ列2, color='wheat')
リストとリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
折れ線グラフに黄色いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
折れ線グラフにバツマーカーを使う	plt.plot(データ列, データ列2, marker='x')
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
＜オプション＞ナバホホワイト色を使う	color = 'navajowhite'
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
＜オプション＞三角マーカーを描画する	marker = '^'
リストの末尾のn要素を取り除く	aList[:-n]
リストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
日付時刻データが何秒か知る	aDatetime.second
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
淡い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='muted')
リストとリストの明るいグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
連立方程式を解く	sympy.solve([e, e2])
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色を黒くする	plt.plot(データ列, データ列2, color='k')
ネイビー色の線グラフを描画する	plt.plot(データ列, データ列2, color='navy')
散布図に丸マーカーを使う	plt.plot(xdata, ydata, marker='o')
ヒストグラムを描画して、その色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
現在の分数	datetime.date.today().minute
配列のデータ型	aArray.dtype()
黒い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
文字列がタプルに含まれるか調べる	element in aTuple
辞書を浅くコピーする	dict(aDict)
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
オレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='orange')
パープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='purple')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
ヒストグラムを描画して、その色をシエナに設定する	plt.hist(データ列, color='sienna')
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumspringgreen')
データフレームのリストカラムの分散	df[aList].var()
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
＜オプション＞グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
ヒストグラムを描画して、その色をピンクに設定する	plt.hist(データ列, color='pink')
折れ線グラフを描画して、その色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
ヒストグラムの色を赤くする	plt.hist(データ列, color='r')
赤い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
文字列をトリムする	s.strip()
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
両端キューの末尾から要素を取り除く	deq.pop()
ポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
＜オプション＞グラフの色をインディアンレッドに設定する	color = 'indianred'
折れ線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
折れ線グラフのマーカーを星にする	plt.plot(データ列, データ列2, marker='*')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
ヒストグラムを描画して、その色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
明るい色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
リストとリストの黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
カラーコードの左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
折れ線グラフを描画して、その色を白に設定する	plt.plot(データ列, データ列2, color='white')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
データフレームのカラムが何月か見る	df[col].dt.month
データ列のユニークな値の個数	ds.nunique()
タプルの中の最小値	min(aTuple)
要素ひとつのタプル	(element,)
標準入力を得る	sys.stdin
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
＜オプション＞グラフの色をグレーに設定する	color = 'grey'
ヒストグラムを描画して、色を青くする	plt.hist(データ列, color='b')
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
データフレームのカラムのどの値が頻出か見る	df[col].mode()
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
リストの長さだけ繰り返す	range(len(aList))
＜オプション＞下三角マーカーを描画する	marker = 'v'
折れ線グラフを描画して、その色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
リスト内の要素が全て真か調べる	all(aList)
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
＜オプション＞ライトスチールブルー色を使う	color = 'lightsteelblue'
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
両端キューの末尾	deq[-1]
コレクションを使う	import collections
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
＜オプション＞グラフの色を赤に設定する	color = 'red'
ファイルから1文字、読み込む	f.read(1)
文字列の先頭だけ大文字化する	s.capitalize()
赤いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
データフレームを'A'列によってまとめたグループ	df.groupby('A')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームの列をヒストグラムにする	plt.hist(df[column])
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
グローバル変数の一覧	globals()
文字列が文字列より辞書順で前か調べる	s < s2
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
＜オプション＞グラフの色をライムに設定する	color = 'lime'
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
＜オプション＞文字列をセパレータで使う	sep = s
配列をヒストグラムにする	plt.hist(aArray)
データ列をインポートする	import pandas as pd
実数とyの斜辺	math.hypot(x, y)
実数の双曲線余弦	math.cosh(x)
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
グラフをスライド用に設定する	sns.set(context='talk')
ベージュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='beige')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
折れ線グラフの丸マーカーを青くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
両端キューに要素をエンキューする	deq.appendleft(element)
＜オプション＞コーラル色を使う	color = 'coral'
集合から要素を取り除く	aSet.remove(element)
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
赤いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
パステル調の色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
整数nを十六進表現に変換する	hex(n)
ファイルのディレクトリ名	os.path.dirname(filepath)
データフレームのインデックスをリセットする	df.reset_index()
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
ヒストグラムを描画して、その色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
暗いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
文字列の末尾から部分文字列を探す	s.rfind(sub)
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
osモジュールをインポートする	import os
ファイル全体を行単位で分割して読み込む	f.readlines()
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
整数nを二進表現に変換する	bin(n)
折れ線グラフの色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
リストとリストについて散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
＜オプション＞ポイントマーカーを描画する	marker = '.'
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightgreen'
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
データフレームをJSONLファイルに保存する	df.to_csv(filename)
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
データ列を折れ線グラフに描画して、マーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
データフレームの指定された列をリストに変換する	df[column].values.tolist()
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
集合をタプルに変換する	tuple(aSet)
ヒストグラムを描画して、その色を茶色に設定する	plt.hist(データ列, color='brown')
リストとリストについての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
二つのオブジェクトが同一参照か調べる	obj is obj2
折れ線グラフの色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
＜オプション＞暗い赤色を使う	color = 'darkred'
折れ線グラフに大きさnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
＜オプション＞オールドレース色を使う	color = 'oldlace'
＜オプション＞インディアンレッド色を使う	color = 'indianred'
グラフの横軸のラベルをuntitledに設定する	plt.xlabel(untitled)
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
散布図のマーカーの大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
データ列をインポートする	import pandas as pd
データ列を折れ線グラフに描画して、マーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
ヒストグラムを描画して、その色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
青緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
リストとリストの淡いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
＜オプション＞ロイヤルブルー色を使う	color = 'royalblue'
パウダーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='powderblue')
リストとリストの折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
実数を十六進表記の文字列に変換する	x.hex()
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
インディゴ色の線グラフを描画する	plt.plot(データ列, データ列2, color='indigo')
オブジェクトのオブジェクト識別子	id(obj)
黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
＜オプション＞パールゴールデンロッド色を使う	color = 'palegoldenrod'
配列の標準偏差	np.std(aArray)
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
折れ線グラフのスタイルを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
＜オプション＞グラフの色をライトイエローに設定する	color = 'lightyellow'
＜オプション＞グラフの色を青緑に設定する	color = 'teal'
データ列のpercent分位数	ds.quantile(percent/100)
文字列の右側からタブを取り除く	s.rstrip('\t')
＜オプション＞ライトグレー色を使う	color = 'lightgrey'
＜オプション＞セパレータをコロンにする	sep = ':'
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
＜オプション＞読み込む行番号をnamesで指定する	usecols = names
文字列がリストの要素か調べる	element in aList
色差別ないグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
リストとリストについての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
折れ線グラフを描画して、その色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
日付時刻データの月数	aDatetime.month
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
変数を定義する	x = n
折れ線グラフを描画して、その色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
空の両端キュー	collections.deque()
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
＜オプション＞バイナリ書き込みモードを使う	mode = 'wb'
データフレームを列によってまとめたグループ	df.groupby(column)
ふたつの集合の差集合	aSet.difference(aSet2)
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
データフレームの列の一覧	df.info()
イテラブルから重複を取り除く	set(iterable)
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
＜オプション＞グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
＜オプション＞バツマーカーを描画する	marker = 'x'
＜オプション＞グラフの色をダークオレンジに設定する	color = 'darkorange'
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
nからn2までのスライス	slice(n, n2)
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
＜オプション＞値を置き換える	inplace = True
＜オプション＞ライトコーラル色を使う	color = 'lightcoral'
全ての数字	string.digits
nが正の数か調べる	n > 0
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='paleturquoise')
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
Pandasのバージョンを見る	print(pd.__version__)
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgrey')
FIXME	np.linalg.eig(aArray)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
＜オプション＞エンコーディングを文字コードtextに設定する	encoding = text
タプルを引数として展開して表示する	print(*aTuple)
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムを描画して、その色をネイビーに設定する	plt.hist(データ列, color='navy')
折れ線グラフを描画して、その色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
＜オプション＞マーカーを下三角に変更する	marker = 'v'
折れ線グラフにポイントマーカーを使う	plt.plot(データ列, データ列2, marker='.')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
データフレームからランダムに抽出する	df.sample()
データフレームから数値データの列を抽出する	df.select_dtypes('number')
＜オプション＞三二ビット整数型を使う	dtype = np.int16
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
現在のモジュール	sys.modules[__name__]
ダークシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
＜オプション＞カンマをセパレータで使う	sep = ','
データ列の母標準偏差	ds.std(ddof=0)
折れ線グラフの丸マーカーを緑色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
散布図に黒いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='k')
＜オプション＞シスル色を使う	color = 'thistle'
折れ線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
実数の自然対数	math.log(x)
自然数の順列の総数	math.perm(n)
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
＜オプション＞ハニーデュー色を使う	color = 'honeydew'
ラジアンの角度	math.degrees(x)
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフを描画して、その色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
青色の線グラフを描画する	plt.plot(データ列, データ列2, color='blue')
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgray'
ヒストグラムを描画して、その色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
＜オプション＞グラフの色をダークバイオレットに設定する	color = 'darkviolet'
グラフの用途を論文に設定する	sns.set(context='paper')
＜オプション＞耐火レンガ色を使う	color = 'firebrick'
データ列の最頻値	ds.mode()
データフレームのインデックスの一覧	df.index
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
全要素を0で初期化された配列	np.zeros(要素数)
ヒストグラムを描画して、その色をアイボリーに設定する	plt.hist(データ列, color='ivory')
文字列を二分する	s.partition(sep)
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
リストのn番目以降の部分を取り出す	aList[n:]
黒いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
＜オプション＞グラフの色をロージーブラウンに設定する	color = 'rosybrown'
プラットフォームのコードポイントの最大値	sys.maxunicode
データ列の年	ds.dt.year
折れ線グラフの大バツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
折れ線グラフを描画して、その色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
ヒストグラムを描画して、その色を青緑に設定する	plt.hist(データ列, color='teal')
タプルを逆順にする	aTuple[::-1]
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ユーザから入力される	int(input())
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
実数の二進対数	math.log2(x)
ファイルを一行ずつ読み込む	f.readline()
オブジェクトが関数か調べる	callable(obj)
＜オプション＞マーカーをポイントに変更する	marker = '.'
文字列がリストに含まれるか調べる	element in aList
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
折れ線グラフのポイントマーカーを緑色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
行列の行ごとの最大値	np.max(aArray, axis=1)
＜オプション＞改行しない	end = ''
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
全要素を1で初期化された行列	np.ones(行数, 列数, dtype=np.int)
右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>')
集合が空か調べる	len(aSet) == 0
貝殻色の線グラフを描画する	plt.plot(データ列, データ列2, color='seashell')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ヒストグラムを描画して、その色をアクアに設定する	plt.hist(データ列, color='aqua')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
現在のタイムスタンプ	int(time.time())
＜オプション＞グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
NaN	math.nan
カデットブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cadetblue')
リストをタプルに変換する	tuple(aList)
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
折れ線グラフに線幅nの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
最初のプログラムを書く	print('Hello World')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
数式を微分する	sympy.diff(e)
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
文字列が全て大文字か調べる	s.isupper()
データフレームのpercent分位数	df.quantile(percent/100)
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
等差数列を配列に変換する	np.arange(開始値, 終端値, 等差)
＜オプション＞エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
配列のスカラー倍	aArray * n
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
辞書の値を列挙する	aDict.values()
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
＜オプション＞ディープスカイブルー色を使う	color = 'deepskyblue'
データフレームの母標準偏差	df.std(ddof=0)
＜オプション＞グラフの色を小麦色に設定する	color = 'wheat'
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
ヒストグラムを描画して、その色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
全要素を初期値で初期化された行列	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
数式を方程式として解く	sympy.solve(e)
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
データ列の歪度	ds.kurt()
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
itertoolsモジュールをインポートする	import itertools
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
折れ線グラフの大バツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
ユーザが整数を入力する	int(input())
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
＜オプション＞エンコーディングをUTF8に設定する	encoding = 'utf-8'
Pythonパスの一覧	sys.path
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
0からnまでのスライス	slice(n)
オブジェクトのバイトサイズ	sys.getsizeof(obj)
＜オプション＞グレー色を使う	color = 'gray'
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
グラフの用途を画面に設定する	sns.set(context='notebook')
折れ線グラフを描画して、その色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
＜オプション＞グラフの色をダークターコイズに設定する	color = 'darkturquoise'
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
＜オプション＞プラム色を使う	color = 'plum'
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
＜オプション＞グラフの色をライトシアンに設定する	color = 'lightcyan'
両端キュー中の要素のインデックス	deq.index(element)
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
赤い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
等差数列から整数乱数を生成する	random.randrange(start, end, step)
リストが空か調べる	len(aList) == 0
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
データ列の尖度	ds.skew()
散布図に三角マーカーを使う	plt.plot(xdata, ydata, marker='^')
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
真	True
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
全要素を０で初期化されたブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
辞書のキーを要素に設定する	aDict[key] = element
＜オプション＞ミディアムパープル色を使う	color = 'mediumpurple'
パステル調のグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
カウンタをイテラブルで更新する	aCounter.update(iterable)
実数を千の位で丸める	round(x, -3)
データフレームのリストカラムの平均値	df[aList].mean()
ヒストグラムを描画して、その色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
文字列をカンマで区切って、列挙する	s.split(',')
アルファベットの小文字列	string.ascii_lowercase
データフレームの中の欠損値がある行を削除する	df.dropna()
文字コードに対応する文字	chr(unicode)
＜オプション＞グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
リストとリストについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
整数nを八進表現に変換する	oct(n)
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
折れ線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
折れ線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
＜オプション＞グラフの色をインディゴに設定する	color = 'indigo'
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
全要素を初期値で初期化された配列	np.full(要素数, 初期値, dtype=np.int)
原点から(実数,y)の距離	math.hypot(x, y)
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムを描画して、その色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
折れ線グラフを描画して、その色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
文字列のn番目	s[n]
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
実数の逆双曲線正弦	math.asinh(x)
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
リストを明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
＜オプション＞追加モードを使う	mode = 'a'
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
折れ線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
文字列の左側から空白を取り除く	s.lstrip(' ')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
二つのリストから辞書	dict(zip(aList, aList2))
ヒストグラムの線のスタイルを破線に設定する	plt.hist(データ列, linestyle='dashed')
ヒストグラムを描画して、その色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
パステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
ファイルのファイル名	os.path.basename(filepath)
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
透明度alphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
数式の因数分解を行う	sympy.factor(e)
文字コードを文字に変換する	chr(unicode)
両端キューをポップする	deq.pop()
イテラブルの全順列	itertools.permutations(iterable)
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
カラーバーを付ける	plt.colorbar()
＜オプション＞ダークスラテグレー色を使う	color = 'darkslategray'
実数を実数で割る	x / y
ヒストグラムを描画して、その色をタンに設定する	plt.hist(データ列, color='tan')
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
折れ線グラフを描画して、その色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフを描画して、その色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
＜オプション＞ベージュ色を使う	color = 'beige'
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
＜オプション＞グラフの色をラベンダーに設定する	color = 'lavender'
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
実数の正接の逆数	math.atan(x)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
＜オプション＞グラフの色をベージュに設定する	color = 'beige'
実線ヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
データフレームから列を二つ選択する	df[[column, column2]]
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
文字列は全て数値か調べる	s.isnumeric()
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
オプションで、標準出力に出力する	file = sys.stdout
折れ線グラフの丸マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
nが-9以上、9以下か調べる	-9 <= n <= 9
暗い赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
カウンタの項目を増やす	aCounter[element] += 1
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
標準入力を使う	sys.stdin
三変数の最大値	max(x, y, z)
データフレームのカラムを丸める	df[col].round()
折れ線グラフを描画して、その色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
データフレームのカラムの平均値	df[col].mean()
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
グラフにグリッド線を入れる	plt.grid(True)
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムを描画して、その色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
データフレームの列をインデックスに設定する	df.set_index(column)
カウンタからゼロカウントを取り除く	+aCounter
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
リストとリストについて散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
実数を百の位で丸める	round(x, -2)
折れ線グラフに線幅nのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
赤い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='r')
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
データフレームから列を一つ選択する	df[[column]]
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
色差別ないグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
数式の数値を求める	float(e)
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
折れ線グラフの色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
オブジェクトのハッシュ値	hash(obj)
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
折れ線グラフの下三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
＜オプション＞ダークオーキッド色を使う	color = 'darkorchid'
折れ線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
ヒストグラムを描画して、その色をオーキッドに設定する	plt.hist(データ列, color='orchid')
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
アリスブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='aliceblue')
nの桁数	len(str(n))
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
＜オプション＞アンティークホワイト色を使う	color = 'antiquewhite'
文字列が部分文字列で終わるか調べる	s.endswith(sub)
折れ線グラフの色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
リストをイミュータブルにする	tuple(aList)
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='blueviolet')
日付データの日数	aDate.day
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
リストとリストについて散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
リストとリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
＜オプション＞グラフの色をスレートブルーに設定する	color = 'slateblue'
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
折れ線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
ヒストグラムを描画して、その色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
実数の平方根	math.sqrt(x)
カウンタの上位を列挙する	aCounter.most_common(k)
折れ線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
棒グラフの幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
データフレームの行と列を入れ替える	df.T
折れ線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
xが一桁の正の数か調べる	0 <= x <= 9
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
要素が集合に含まれるか調べる	element in aSet
折れ線グラフに線幅nの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
nとn2の論理和	n | n2
グラフのサイズを設定する	plt.figure(figsize=(width, height))
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
配列を平坦にする	aArray.flatten()
全要素を０で初期化された行列	np.zeros(行数, 列数)
両端キューをデキューする	deq.popleft()
折れ線グラフを描画して、その色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
＜オプション＞グラフの色をターコイズに設定する	color = 'turquoise'
nが5で割り切れるか調べる	n % 5 == 0
折れ線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
ファイルからn文字、読み込む	f.read(n)
ヒストグラムでカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
リストとリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
辞書からキーで指定された項目をポップする	aDict.pop(key)
リストとリストについて散布図を描画して、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
ヒストグラムを描画して、その色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
散布図にカラーコードの三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームを小数点以下n桁で丸める	df.round(n)
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
データフレームから重複を削除する	df.drop_duplicates()
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
横棒グラフの色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
日付データが土曜日か調べる	aDate.weekday() == 5
自然数の最大公約数	math.gcd(n, n2)
データ列の曜日数	ds.dt.dayofweek
二つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
データフレームからランダムにn行を抽出する	df.sample(n)
集合を空にする	aSet.clear()
データフレームから列名を複数指定して選択する	df[columns]
＜オプション＞符号なし８ビット整数型を使う	dtype = np.uint8
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
データ列が何曜日か見る	ds.dt.weekday_name
＜オプション＞カーキ色を使う	color = 'khaki'
データフレームを複数の列によってソートする	df.sort_values(by=column)
線幅nの折れ線グラフを描画する	plt.plot(xdata, ydata, linewidth=n)
文字列を空白で区切って、文字列リストに変換する	s.split()
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X')
データフレームの先頭n行	df.head(n)
＜オプション＞アリスブルー色を使う	color = 'aliceblue'
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
＜オプション＞コーンズシルク色を使う	color = 'cornsilk'
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
＜オプション＞カデットブルー色を使う	color = 'cadetblue'
タン色の線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
棒グラフの色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
オーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orchid')
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()

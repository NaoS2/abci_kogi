ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームから重複を削除する	df.drop_duplicates()
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
行列の列ごとの分散	np.var(aArray, axis=0)
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
ふたつの集合の和集合	aSet.union(aSet2)
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
配列の最大値	np.max(aArray)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
nがn2よりも小さいか調べる	n < n2
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
option: マーカーをダイアモンドに変更する	marker = 'D'
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
データフレームのカラムの曜日数	df[col].dt.dayofweek
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームのカラムの標本標準偏差	df[col].std()
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
option: コーンズシルク色を使う	color = 'cornsilk'
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: グラフの色をライムに設定する	color = 'lime'
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
option: SJISを使う	encoding = 'shift_jis'
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
整数nがタプルのどれかか調べる	n in aTuple
option: グラフの色をデピンクに設定する	color = 'deeppink'
配列の列ごとの平均値	np.mean(aArray, axis=0)
option: 符号なし８ビット整数型を使う	dtype = np.uint8
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: 三角マーカーを描画する	marker = '^'
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
0から始まる無限数列	itertools.count()
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
リストをn回、連結する	aList * n
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
リストをnからナンバリングする	enumerate(aList, start=n)
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
タプルの要素をソートする	sorted(aTuple)
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
nではない	not n
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
nをn2だけ増加させる	n += n2
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
数式の数値を求める	float(e)
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
option: サンディーブラウン色を使う	color = 'sandybrown'
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
option: 下三角マーカーを使う	marker = 'v'
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
文字列のケースを変換する	s.casefold()
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
nがn2と等しいか調べる	n == n2
nが一桁の数か調べる	-9 <= n <= 9
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
nが何桁か	len(str(n))
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
整数nがリストのどれかか調べる	n in aList
option: ライトシアン色を使う	color = 'lightcyan'
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
option: インディゴ色を使う	color = 'indigo'
option: カーキ色を使う	color = 'khaki'
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
データフレームを関数によってまとめたグループ	df.groupby(関数)
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
文字列を青色にする	f'\033[34m{value}\033[0m'
option: グラフの色をスラグレーに設定する	color = 'slategrey'
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: セパレータを改行にする	sep = '\n'
コーパスのバージョン	version = 'wcce2022-0.1'
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
グリッド線	plt.grid(linewidth=3.0)
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
横棒グラフを描画する	plt.barh(ラベル列, データ列)
グラフの描画を見やすくする	import seaborn as sns
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
データフレームの中央値	df.median()
option: ライトグレー色を使う	color = 'lightgray'
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: グラフの色をオールドレースに設定する	color = 'oldlace'
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
部分文字列を範囲を指定して探す	s.find(sub, start, end)
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
行列の列ごとの最大値	np.max(aArray, axis=0)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
グラフを使う準備をする	import matplotlib.pyplot as plt
リストの平均値	sum(aList)/len(aList)
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームのリストカラムの標本標準偏差	df[aList].std()
option: 青緑色を使う	color = 'teal'
nとn2の論理積	n & n2
option: 読み込まない列番号をnamesで指定する	skiprows = names
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
空の両端キュー	collections.deque()
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
nの三乗	n ** 3
カウンタの項目数	len(aCounter)
nがn2の倍数でないか調べる	n % n2 != 0
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
文字列をコロンで区切って、列挙する	s.split(':')
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
配列の累積和	np.cumsum(aArray)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
配列が何のデータ型か調べる	aArray.dtype()
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
データフレームの平均値	df.mean()
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: 左三角マーカーを描画する	marker = '<'
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
実数を切り上げて整数に変換する	math.ceil(x)
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
第二コマンド引数	sys.argv[1]
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: マーカーを左三角に変更する	marker = '<'
データフレームの列の各データ値の出現数	df[col].value_counts()
option: 書き込みモードを使う	mode = 'w'
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
option: 三角マーカーを使う	marker = '^'
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
リストを引数として展開して表示する	print(*aList, sep=',')
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
実数の逆双曲線正接	math.atanh(x)
変数について数式を積分する	sympy.integrate(e, z)
文字列の右側から空白を取り除く	s.rstrip(' ')
グラフの見栄えを良くする	import seaborn as sns
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
JSON形式の文字列を読み込む	json.loads(jsonString)
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
浮動小数点数の最小値	sys.float_info.min
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
原点から(実数,y)の距離	math.hypot(x, y)
データ列の中の欠損値の合計を数える	ds.isna().sum()
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
ヒストグラムを青くする	plt.hist(データ列, color='b')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
option: セパレータをコロンにする	sep = ':'
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
横軸の目盛を対数に変更する	plt.xscale('log')
nが正の数か調べる	n > 0
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
nからn2の範囲	range(n, n2)
表データを使う	import pandas as pd
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
option: ダークグレー色を使う	color = 'darkgray'
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
白いグリッド線を引く	plt.grid(color='w')
option: グラフの色をオーキッドに設定する	color = 'orchid'
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームを列によってまとめたグループ	df.groupby(column)
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
二つの文字列は同じか調べる	s == s2
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
ガンマ関数	math.gamma(x)
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
コマンドライン引数	sys.argv
配列から重複を除いた配列を作る	np.unique(aArray)
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
文字列を全て小文字に変換する	s.casefold()
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
辞書を浅くコピーする	dict(aDict)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
実数を実数で割った余り	x % y
日付時刻データの年数	aDatetime.year
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
実数の小数部	math.modf(x)[0]
option: グラフの色をシスルに設定する	color = 'thistle'
データ列の偏りを平方根変換する	np.sqrt(データ列)
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
リストを引数として展開して表示する	print(*aList)
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
option: レモンシフォン色を使う	color = 'lemonchiffon'
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列をキャピタライズする	s.capitalize()
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
option: グラフの色をグレーに設定する	color = 'gray'
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
空のリスト	[]
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: 欠損値も無視しない	dropna = True
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
グラフの縦横比を等しくする	plt.axis('equals')
実数が正の数か調べる	x > 0
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
数式を変数について微分する	sympy.diff(e, z)
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
mathをインポートする	import math
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
option: 線の種類を点線に設定する	linestyle = 'dotted'
option: 読み込みモードを使う	mode = 'r'
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
カウンタをリセットする	aCounter.clear()
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームをインデックスによってソートする	df.sort_index()
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
データフレームから最初の列を除く	df[df.columns[1:]]
日付データが木曜日か調べる	aDate.weekday() == 3
option: グリーンイエロー色を使う	color = 'greenyellow'
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
option: ライトグリーン色を使う	color = 'lightgreen'
データフレームの列の名前の一覧を使う	df.columns
option: バリーウッド色を使う	color = 'burlywood'
データフレームのn行目を抽出する	df.loc[n]
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
nをn2だけ減少させる	n -= n2
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ふたつの辞書を合体する	aDict | aDict2
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
nの無限数列	itertools.repeat(n)
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
タプルを引数として展開して表示する	print(*aTuple, sep=',')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
偽	False
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
イテラブルからカウンタを作る	collections.Counter(iterable)
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
xを文字列に変換する	str(x)
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
両端キューの先頭に要素を追加する	deq.appendleft(element)
文字列がリストに含まれるか調べる	element in aList
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
nにn2を足して代入する	n += n2
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: モカシン色を使う	color = 'moccasin'
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
option: 改行なし	end = ''
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
データフレームの第三四分位数	df.quantile(0.75)
データフレームの列がxでない行をフィルタする	df[df[column] == x]
両端キューに要素をエンキューする	deq.appendleft(element)
有理数を使う	import fractions
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
nからn2までの整数列	list(range(n, n2+1))
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
文字列がタプルの要素でないか調べる	element not in aTuple
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
変数について数式の積分を求める	sympy.integrate(e, z)
ファイルをオープンする]	open(filepath)
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
文字列をシアンにする	f'\033[36m{value}\033[0m'
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
データフレームの重複した行を数える	df.duplicated().sum()
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
両端キューの末尾	deq[-1]
option: グラフの色をライトグレーに設定する	color = 'lightgray'
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
option: 改行コードを動作環境依存に設定する	newline = None
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
改行なしに二つの文字列をプリントする	print(value, value2, end='')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
文字列が文字列リストに含まれるか調べる	s in aStringList
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
全ての句読点文字	string.punctuation
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データフレームの列を削除する	df.drop(column, axis=1)
グラフで使える色名の一覧	matplotlib.colors.cnames
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
本日の日付	datetime.date.today()
option: トマト色を使う	color = 'tomato'
データ列のどの値が頻出か見る	ds.mode()
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
文字列が全てアルファベットか調べる	s.isalpha()
option: アクア色を使う	color = 'aqua'
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
グローバル変数の一覧	globals()
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
集合から要素を取り除く	aSet.remove(element)
日付時刻データが何秒か知る	aDatetime.second
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: グラフの色をアクアに設定する	color = 'aqua'
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
データフレームのデータ型の一覧	df.dtypes
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
リストを配列に変換する	np.array(aList)
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
データフレームのリストカラムの中央値	df[aList].median()
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
タブ	'\t'
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
文字列がタプルの要素か調べる	element in aTuple
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
キーが辞書上で未定義か調べる	key not in aDict
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
実数の余弦	math.cos(x)
ユーザが整数を入力する	int(input())
両端キュー中の要素のインデックス	deq.index(element)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
カウンタの項目を列挙する	aCounter.keys()
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
データフレームのカラムの平均値	df[col].mean()
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
空の集合	set()
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データ列をビン数nでビン分割する	pd.cut(ds, n)
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
データフレームのカラムの分散	df[col].var()
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
option: パウダーブルー色を使う	color = 'powderblue'
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
データフレームの第一四分位数	df.quantile(0.25)
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
option: グラフの色をネイビーに設定する	color = 'navy'
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
文字列の右側からタブを取り除く	s.rstrip('\t')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
部分集合か調べる	aSet.issubset(aSet2)
option: インデックスを自動的な連番に設定する	index_col = None
リストが空か調べる	len(aList) == 0
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
nまたはn2	n or n2
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームのカラムの分	df[col].dt.minute
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
縦軸の目盛を対数に変更する	plt.yscale('log')
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
イテラブルを配列に変換する	np.array(iterable)
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
option: ダークスラテグレー色を使う	color = 'darkslategray'
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
option: 決定木の深さを制限する	maxdepth = n
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
オブジェクトのイテレータ	iter(obj)
行列の値	aArray[行番号, 列番号]
両端キューが空か調べる	len(deq) == 0
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データ列を丸めて、整数型にする	ds.round().astype(int)
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
最大長nの両端キューを作る	collections.deque(maxlen=n)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: どの行もヘッダにしない	header = None
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
辞書のキーの一覧	aDict.keys()
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
データ列の時	ds.dt.hour
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
変数をスワップする	x, y = y, x
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
option: 星マーカーを描画する	marker = '*'
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
カラーバーを付ける	plt.colorbar()
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
日付データをISO形式の文字列に変換する	aDate.isoformat()
グリッドを破線にする	plt.grid(linestyle='dashed')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームを使う	import pandas as pd
有理数の分子	q.numerator
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
option: グラフの色を黄色に設定する	color = 'yellow'
データフレームのstart行目からend行目まで抽出する	df[start:end]
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
nがn2より小さいか調べる	n < n2
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
実数のn乗の実数剰余	pow(x, n, y)
実数の仮数	math.frexp(x)[0]
option: フローラルホワイト色を使う	color = 'floralwhite'
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
オプションで、標準エラーを出力にする	file = sys.stderr
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
option: グラフの色をリネンに設定する	color = 'linen'
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
文字列を置き換える	s.replace(sub, newsub)
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
日付時刻データが何月か知る	aDatetime.month
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
グリッド線を赤くする	plt.grid(color='r')
文字列を二分する	s.partition(sep)
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
サイコロ	random.randint(1, 6)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
日付データが火曜日か調べる	aDate.weekday() == 1
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
option: グレー色を使う	color = 'gray'
グラフのタイトルを設定する	plt.title('グラフの名称')
option: ネイビー色を使う	color = 'navy'
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
option: スチールブルー色を使う	color = 'steelblue'
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
実数を百の位で丸める	round(x, -2)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: スラグレー色を使う	color = 'slategrey'
option: 整数型を使う	dtype = np.int
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
数式の因数分解を行う	sympy.factor(e)
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームのインデックスがnの行を抽出する	df.loc[n]
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
辞書のキーとその値を列挙する	aDict.items()
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
option: 改行コードをWindowsに設定する	newline = '\r\n'
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
グラフで使うフォントを指定する	sns.set(font=フォント名)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
データ列がどの程度、分散しているか見る	ds.var()
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
現在のタイムスタンプ	int(time.time())
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
データフレームのリストカラムを丸める	df[aList].round()
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
辞書のキーを要素に設定する	aDict[key] = element
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
二点間のユークリッド距離	math.dist(point, point2)
option: 複数行に対応する	flag = re.MULTILINE
データフレームのカラムが何年か見る	df[col].dt.year
実数のn乗して実数による余り	pow(x, n, y)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
リストをn倍する	aList * n
文字列の長さ	len(s)
実数以上の最小の整数	math.ceil(x)
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
タプルの長さ	len(aTuple)
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: ベージュ色を使う	color = 'beige'
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
データフレームのリスト列の相関行列	df[aList].corr()
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
ガンマ関数の値	math.gamma(x)
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
nにn2をかけた値をnに代入する	n *= n2
option: 先頭のカラムをインデックスに設定する	index_col = 0
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
試しに何か動かす	print('Hello World')
カウンタの項目一覧	aCounter.keys()
データ列の四分位を可視化する	plt.boxplot(データ列)
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
グラフからグリッド線を消す	plt.grid(False)
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームを'A'列によってソートする	df.sort_values(by='A')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
配列の差	aArray - aArray2
行列の行ごとの分散	np.var(aArray, axis=1)
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
行列の列ごとの最小値	np.min(aArray, axis=0)
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: ポイントマーカーを使う	marker = '.'
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
文字列をバイト配列に変換する	bytearray(s)
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列を赤色にする	f'\033[31m{value}\033[0m'
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
実数が無限大か調べる	math.isinf(x)
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
option: フォレストグリーン色を使う	color = 'forestgreen'
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
文字列中の大文字を小文字に変換する	s.lower()
データ列を使う	import pandas as pd
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
文字列の末尾	s[-1]
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
オプションで、標準エラーを使う	file = sys.stderr
オプションで、標準エラーに出力する	file = sys.stderr
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
実数の正接	math.tan(x)
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: グラフの種類を点線に設定する	linestyle = 'dotted'
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
真部分集合か調べる	aSet < aSet2
辞書からカウンタを作る	collections.Counter(aDict)
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
整数nを二進文字列に変換する	bin(n)[2:]
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
リストのn番目に文字列を挿入する	aList.insert(n, element)
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームからn行、サンプリングする	df.sample(n)
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
option: グラフの色をカーキに設定する	color = 'khaki'
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データ列の秒	ds.dt.second
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
option: サーモン色を使う	color = 'salmon'
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
オプションで、標準出力に出力する	file = sys.stdout
データ列を100の位で丸める	ds.round(-2)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
nが5で割り切れるか調べる	n % 5 == 0
x,yの複素数	complex(x, y)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
option: グラフの色をハニーデューに設定する	color = 'honeydew'
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
オプションで、標準出力を使う	file = sys.stdout
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
オブジェクトのハッシュ値	hash(obj)
データフレームの末尾	df.tail()
グラフの色を淡くする	sns.set(pallete='muted')
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
データフレームの歪度	df.kurt()
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ユニークな値を要素とする配列	np.unique(aArray)
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
何回まで再帰ができるかを	sys.getrecursionlimit()
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
集合からエラーなく要素を取り除く	aSet.discard(element)
変数を定義する	x = n
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: パパイヤウィップ色を使う	color = 'papayawhip'
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
タプルの末尾のn要素を取り除く	aTuple[:-n]
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
空のカウンタ	collections.Counter()
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
サイコロと同じ乱数	random.randint(1, 6)
配列の累積積	np.cumprod(aArray)
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: ゴールド色を使う	color = 'gold'
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
方程式として数式の変数の解を求める	sympy.solve(e, z)
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データ列の偏りを対数変換する	np.log(データ列)
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: ナバホホワイト色を使う	color = 'navajowhite'
縦軸の目盛を表示しない	plt.yticks([])
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
文字列がタプルに含まれるか調べる	element in aTuple
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
データフレームの列の名前を列挙する	df.columns
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
n2分のn	n / n2
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
線形モデルの回帰変数	model.coef_
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
グリッド線	plt.grid(alpha=0.5)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
option: セパレータを使わない	sep = ''
実数が有限か調べる	math.isfinite(x)
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
文字列を式として評価する	eval(s)
有理数の分母	q.denominator
グラフ中のフォントを設定する	sns.set(font=フォント名)
数式の変数に数式を代入する	e.subs(z, e2)
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
option: 紺碧色を使う	color = 'azure'
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
自然数の順列の総数	math.perm(n)
データフレームの母標準偏差	df.std(ddof=0)
option: グラフの色をミントクリームに設定する	color = 'mintcream'
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
option: 白色を使う	color = 'white'
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
データ列の月	ds.dt.month
option: ディムグレー色を使う	color = 'dimgrey'
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
両端キューの長さを制限する	collections.deque(maxlen=n)
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
データフレームの指定された列を抽出する	df[column]
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
データフレームのカラムの要約統計量	df[col].describe()
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームの中に文字列があるか調べる	df.isin([value])
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
データ列の欠損値をxで埋める	ds.fillna(x)
ファイル全体を行単位で分割して読み込む	f.readlines()
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
コギーくんを使いたい	import kogi
両端キューの中に要素が含まれてるか調べる	element in deq
option: チョコレート色を使う	color = 'chocolate'
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
タプルの平均値	sum(aTuple)/len(aTuple)
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
日付データが日付データより後ろか調べる	aDate > aDate2
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
二つの変数を同じ値にする	x = y = n
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
日付データをタプルに変換する	aDate.timetuple()
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
データ列の分	ds.dt.minute
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
実数の双曲線余弦	math.cosh(x)
文字列中の文字を列挙する	list(s)
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
文字列が全て数字か調べる	s.isdigit()
日付データが土曜日か調べる	aDate.weekday() == 5
year年month月の日付	datetime.date(year=year, month=month, day=1)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
nにn2を加える	n + n2
数式を因数分解する	sympy.factor(e)
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
nをn2だけ右シフトする	n >> n2
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
option: グラフの色をラベンダーに設定する	color = 'lavender'
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
二つの文字列は等しくないか調べる	s != s2
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
option: グラフの色をターコイズに設定する	color = 'turquoise'
三つの文字列を順にプリントする	print(value, value2, value3)
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームのリストカラムの分散	df[aList].var()
辞書をコピーする	aDict.copy()
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
データ列を小数点以下n桁で丸める	ds.round(n)
データフレームのカラムの月	df[col].dt.month
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
option: スノー色を使う	color = 'snow'
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
オプションで、出力先を標準出力に設定する	file = sys.stdout
日付時刻データの時間数	aDatetime.hour
nのn2乗	n ** n2
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
空のチェーンマップ	collections.ChainMap()
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
変数名をキーとして、辞書	dict(name=element)
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
option: ブラック色を使う	color = 'black'
option: グラフの色をオレンジに設定する	color = 'orange'
xを浮動小数点数に変換する	float(x)
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
オブジェクトが関数か調べる	callable(obj)
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
プラットホームの名前	sys.platform
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
標準入力から1行読み取る	input()
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
文字列が全て小文字か調べる	s.islower()
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
カウンタを辞書に変換する	dict(aCounter)
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
データ列を1000の位で丸める	ds.round(-3)
リスト内の要素が全て真か調べる	all(aList)
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
n個の数値イテラブル	range(n)
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
本日が何日か知る	datetime.datetime.today().day
xが一桁の数か調べる	-9 <= x <= 9
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列を空白で区切って、文字列リストに変換する	s.split()
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
整数nを十六進文字列に変換する	hex(n)[2:]
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
option: グラフの色をビスクに設定する	color = 'bisque'
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
データフレームのリストカラムの平均値	df[aList].mean()
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
nをn2で割る	n / n2
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
配列のデータ型	aArray.dtype()
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
グラフを正方形にする	plt.axis('equals')
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
再帰の上限を上げる	sys.setrecursionlimit(1000000)
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
文字コードを文字に変換する	chr(unicode)
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データ列が何曜日か見る	ds.dt.weekday_name
グラフの色を濃くする	sns.set(pallete='deep')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
option: ラベンダー色を使う	color = 'lavender'
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
辞書の値の一覧	aDict.values()
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
option: パープル色を使う	color = 'purple'
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
文字列を積極的に小文字に変換する	s.casefold()
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
option: グラフの色をパープルに設定する	color = 'purple'
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
タプルの先頭	aTuple[0]
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
option: 文字列の示すエンコーディングを使う	encoding = s
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
配列の和	aArray + aArray2
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
グラフをスライド用に設定する	sns.set(context='talk')
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
データ列が何分か見る	ds.dt.minute
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
データフレームのカラムを1000の位で丸める	df[col].round(-3)
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
配列の要素数	aArray.size
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
option: ダークオーキッド色を使う	color = 'darkorchid'
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
数式を数値計算する	float(e)
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
nが偶数か調べる	n % 2 == 0
黄色いグリッド線を引く	plt.grid(color='y')
アルファベットの小文字列	string.ascii_lowercase
nを切り捨てながらn2分の一にする	n //= n2
配列の行ごとの平均値	np.mean(aArray, axis=1)
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
二次元タプルをフラット化する	sum(aTuple)
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
両端キューをリストに変換する	list(deq)
実数が負の数か調べる	x < 0
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
角度のラジアン	math.radians(degree)
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
整数nを八進文字列に変換する	oct(n)[2:]
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
文字列は全て数値か調べる	s.isnumeric()
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
数式の部分分数化を行う	sympy.apart(e)
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
整数nを半分にする	n //= 2
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
カウンタ同士でユニオン演算する	aCounter | aCounter2
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
キーが辞書上で定義済みか調べる	key in aDict
辞書のキーに対応した値	aDict.get(key)
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
綺麗なグラフを描画する準備をする	import seaborn as sns
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
データ列の標本標準偏差	ds.std()
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
nがn2以下か調べる	n <= n2
正規表現を使う	import re
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
グラフの色をパステル調にする	sns.set(pallete='pastel')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
option: オレンジ色を使う	color = 'orange'
データ列を使う	import pandas as pd
実数を千の位で丸める	round(x, -3)
両端キューのn番目	deq[n]
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
グラフの背景色を暗くする	sns.set(style='darkgrid')
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
option: ８ビット整数型を使う	dtype = np.int8
グリッドを点線にする	plt.grid(linestyle='dotted')
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
三自然数の最大公約数	math.gcd(n, n2, n3)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
option: 紺色を使う	color = 'darkblue'
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
空白	' '
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
option: ロイヤルブルー色を使う	color = 'royalblue'
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
辞書の値を列挙する	aDict.values()
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
現在の再帰の最大回数	sys.getrecursionlimit()
タプルとタプルを連結する	aTuple + aTuple2
文字列がリストの要素でないか調べる	element not in aList
文字列のn番目	s[n]
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
option: ゴールデンロッド色を使う	color = 'goldenrod'
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
リストをタプルに変換する	tuple(aList)
option: アイボリー色を使う	color = 'ivory'
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
日付データと日付データの時間差	aDate - aDate2
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
option: リネン色を使う	color = 'linen'
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
nとn2の差	n - n2
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
日付データの日数	aDate.day
二次元リストをフラット化する	sum(aList)
実数を実数で割って、切り捨てる	x // y
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
option: グラフの色をベージュに設定する	color = 'beige'
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
実数を文字列に変換する	str(x)
文字列を最後の部分文字列で二分する	s.rpartition(sub)
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
タプルをn回、連結する	aTuple * n
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
データ列をインポートする	import pandas as pd
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
文字列の出力を改行なしに行う	print(value, end='')
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
分子割る分母	fractions.Fraction(分子, 分母)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
キーが辞書に存在するか調べる	key not in aDict
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: namesをカラムの名前に設定する	names = names
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
option: ダークバイオレット色を使う	color = 'darkviolet'
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
縦軸だけグリッド線	plt.grid(axis='y')
日付データが何年か知る	aDate.year
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: グラフの色をシルバーに設定する	color = 'silver'
プログラムの実行を正しく終了する	sys.exit(0)
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
日付データが何曜日か知る	aDate.weekday()
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
数値の符号をコピーにする	math.copysign(x, x2)
イテラブルのイミュータブルな集合	frozenset(iterable)
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームを丸める	df.round()
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
文字列を左トリムする	s.lstrip()
日付データが水曜日か調べる	aDate.weekday() == 2
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
文字列をセンタリングにする	s.center(文字列幅)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
長さnのリスト	[0] * n
データフレームの列がxの行を抽出する	df[df[column] == x]
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
現在のモジュール	sys.modules[__name__]
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
第二引数で指定されたファイルの名前	sys.argv[1]
データフレームのカラムの値が欠損値か調べる	df[col].isna()
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
整数nのバイト長	(n.bit_length() + 7) // 8
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームの列の名前を付け直す	df.rename(columns={column: name})
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
グリッド線を黄色くする	plt.grid(color='y')
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データ列の要約統計量	ds.describe()
数式の簡略化を行う	sympy.sympify(e)
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
ファイルを一行ずつ読み込む	f.readline()
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
リストの末尾のn要素を取り除く	aList[:-n]
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
実数を十の位で丸める	round(x, -1)
文字列が全て空白文字からなるか調べる	s.isspace()
表データをインポートする	import pandas as pd
option: グラフの色をスラグレーに設定する	color = 'slategray'
日付時刻データが何分か知る	aDatetime.minute
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
option: ライトグリーン色を使う	color = 'lightseagreen'
option: 三二ビット整数型を使う	dtype = np.int16
正規表現モジュールをインポートする	import re
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
部分文字列か調べる	sub in s
配列は何次元か調べる	aArray.ndim
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
乱数で要素を埋めた配列	np.random.random(N)
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
タプルを引数として展開して表示する	print(*aTuple)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
データフレームの重複した行数のマスク	df.duplicated()
option: オリベドラブ色を使う	color = 'olivedrab'
option: 色を半透明にする	alpha = 0.5
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
nまでの奇整数列	list(range(1, n, 2))
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')

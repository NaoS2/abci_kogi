棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
データフレームを２つの列で分類してグループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
整数がセットの要素でないか調べる	数 not in セット
整数が整数2以下、それか、n3以上かどうか	整数 <= 整数2 or 整数 >= n3
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
データ列を箱髭図として描画する	plt.boxplot(データ列)
xを整数にする	int(x)
データフレームを２つの列でまとめたグループ	df.groupby(['列A', '列B'])
ある列の値ごとの分散を求める	df.groupby('列A').var()
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
ライトブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
ブラックにヒストグラムの色を変更する	plt.hist(データ列, color='black')
データフレームの選択したカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
データフレームの中のカラムを中央値でビン分割する	pd.qcut(df[col], 2)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームからカテゴリデータの列を選択する	df.select_dtypes('object')
整数の階乗	math.factorial(n)
線グラフを青い点線を使って描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームを調べる	df.head()
コマンド引数で指定されたファイルをひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
文字列を大文字に変換する	文字列.upper()
データフレームの標本標準偏差を求める	df.std(ddof=1)
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
year年day月をタイムスタンプにする	datetime.datetime(year=year, month=month, day=1)
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームのカラムの偏差値を算出する	50 + 10 * scipy.stats.zscore(df['列A'])
option: ダークシアグリーンに色を設定する	color = 'darkseagreen'
カラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
シアン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
ヒストグラムをダークターコイズ色として描画する	plt.hist(データ列, color='darkturquoise')
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
数値がセットのメンバーでない	数 not in セット
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
option: 線を太くする	linewidth = 3.0
フォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
横棒グラフをゲインズボロ色を用いて描画する	plt.barh(データ列x, データ列y, color='gainsboro')
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
文字列リストを結合してひとつの文字列にする	''.join(文字列)
パープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
deqのn番目	両端キュー[n]
配列の各要素の最小公倍数	np.lcm(aArray, aArray2)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか	文字列.find(部分文字列, 開始位置, 終了位置) == -1
リストの要素を文字列として'改行で連結する	'\n'.join(map(str, リスト))
実数の逆双曲線正弦	math.asinh(x)
整数を8進文字列に変換する	oct(整数)[2:]
xを変数化する	x = sympy.Symbol('x')
option: インディゴ色を使う	color = 'indigo'
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
option: 左三角マーカーを加える	marker = '<'
複数のデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
データフレームの一部のカラムのメディアン	df[['列A', '列B']].median()
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ヒストグラムの色をティールに変更する	plt.hist(データ列, color='teal')
データフレームを100の位で丸める	df.round(-2)
エクセルファイルを読み込む	pd.read_excel('file.xlsx')
データシリーズを丸めて、整数にする	ds.round().astype(int)
格子をグラフに描画する	plt.grid(True)
タプルの各要素を空白区切りで表示する	print(*タプル)
バイナリ書き込みモードでファイルをオープンして]fとする	f = open(filepath, mode='wb')
折れ線グラフの上三角印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの欠損値を後の値で置換する	df.fillna(method='bfill')
黒い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
文字が指定した文字列にないかどうか調べる	文字 not in 文字列
データフレームの指定した列を十の位で四捨五入して、整数型にする	df['列A'].round(-1).astype(int)
文字が片仮名か	# Tips<nl>('ァ' <= 文字 <= 'ン')
大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
文字列がリストに含まれるかテストする	文字列 in リスト
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
チップのデータセットをロードする	df = sns.load_dataset('tips')
データシリーズの中にある文字列と日付データの個数を求める	ds.isin([value, value2]).sum()
option: 小麦色を用いる	color = 'wheat'
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
綺麗なグラフを使う準備をする	import seaborn as sns
option: アンティークホワイトを使用する	color = 'antiquewhite'
辞書からキーとバリューのペアを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
文字列を最後の部分文字列で二分して、最初の方を見る	文字列.rpartition(部分文字列)[0]
要素がセットのメンバーか	要素 in セット
ヒストグラムの色をミディアムパープルに変更する	plt.hist(データ列, color='mediumpurple')
コロンで文字列を二分割する	文字列.partition(':')
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
最大値・最小値として乱数を得る	random.randint(最小値, 最大値)
キーが辞書上で定義済みかどうか	キー in 辞書
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
縦棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
両端キューの先頭に文字列を付け加える	両端キュー.appendleft(文字列)
データフレームのある列を小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
文字列を最初のコロンで二つに分ける	文字列.partition(':')
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
リストを引数として展開して出力する	print(*リスト)
option: ライトスカイブルー色を使う	color = 'lightskyblue'
環境がMacOS	sys.platform.startswith('darwin')
xを改行しないでプリントする	print(x, end='')
rgbに棒グラフの色を変更する	plt.bar(ラベル列, データ列, color=rgb)
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
スタックの最大長	両端キュー.maxlen
色付きの点線としてデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
整数の五乗を	整数 ** 5
変数について数式の積分を求める	sympy.integrate(数式, 変数)
データフレームを２つの列の値ごとにグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
折れ線グラフをデピンク色を使って描画する	plt.plot(データ列x, データ列y, color='deeppink')
数列を集合に変換する	set(数列)
フィシャー流の尖度を算出する	scipy.stats.kurtosis(配列, fisher=True, bias=False)
ベクトルの行ごとの平均値を求める	np.mean(aArray, axis=1)
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
２つの文字列をケースを無視して比較する	文字列.casefold() < 文字列2.casefold()
データフレームを表示するときn行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
配列とデータ列の散布図を描画して、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
リストを分割数nとしてビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
自分自身をモジュールとしてを使う	sys.modules[__name__]
データ列のMAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
改行せず数値を表示する	print(数値, end='')
グラフで使用するフォントを指定する	sns.set(font=フォント名)
データシリーズの未入力値を平均値に指定する	ds.fillna(ds.mean())
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームの中にいくつ日付データがあるかカウントする	df.isin([value]).sum()
データシリーズが何月か知る	ds.dt.month
データフレームのあるカラムの中に文字列とがいくつあるか求める	df['列A'].isin([value, value2]).sum()
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
オブジェクトがコルーチン	inspect.iscoroutine(オブジェクト)
空の回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データフレームのあるカラムは何秒か見る	df['列A'].dt.second
両端キューが空かどうか調べる	len(両端キュー) == 0
文字列の中の正規表現によるマッチを使う	re.findall(pattern, s)
辞書をネスト化する	collections.ChainMap(aDict)
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
文字列に漢字が使われている	re.search('[\u4E00-\u9FD0]', 文字列)
ふたつの列からグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
整数のそれぞれの桁の総和がほしい	sum(map(int, str(整数)))
数列と配列の散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
リストの変化を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
赤い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
文字列が大文字か調べる	文字列.isupper()
表データの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
データフレームの選択したカラムのNaNを50パーセンタイルで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
UTF8でファイルをオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
リストの最後に別のリストを追加して広げる	リスト.extend(リスト2)
グラフをスライド用に設定する	sns.set(context='talk')
データシリーズを1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
データフレームをある列によって昇順にソートする	df.sort_values(by='列A', ascending=True)
折れ線グラフの色を淡い茶色に変更する	plt.plot(データ列x, データ列y, color='tan')
データフレームからカテゴリデータの列のみ取り出す	df.select_dtypes('object')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: マーカーをポイントに変更する	marker = '.'
データシリーズの中にいくつ日付データがあるかカウントする	ds.isin([value]).sum()
散布図のクロス印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
実行を異常終了する	sys.exit(1)
横棒グラフをダークスラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
折れ線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
行列の差	aArray - aArray2
レベッカパープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
エラーを無視して文字列をバイト列に変換する	文字列.encode(errors='ignore')
カンマ区切りのファイルからデータフレームをロードする	pd.read_csv('file.csv', sep=',')
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームの選択した列を丸めて、整数にする	df[['列A', '列B']].round().astype(int)
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
散布図の▽マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
表データをグループ化し、分散を求める	df.groupby('列A').var()
インデント幅を指定してリストをJSON文字列にする	json.dumps(リスト, ensure_ascii=False, indent=n)
インデント幅を指定して文字列をJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
最小値でデータフレームの選択した列の欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
タプルの要素が最初に見つかるインデックスを探す	タプル.index(要素)
文字列を走査し、パターンにASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
セットを別のセットとのインターセクションだけに更新する	セット.intersection_update(セット2)
ミディアムターコイズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
ファイルを文字列の示すエンコーディングとしてオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
あるカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
ペルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
整数を二進表現に変換する	bin(整数)
２つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: 色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
xを水色で表示する	print(f'\033[36m{x}\033[0m')
ひとつでも小文字が文字列中にあるか調べる	any(c.islower() for c in 文字列)
option: スキップするフッタをnにセットする	skipfooter = n
散布図の大バツ印を赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
列のユニークな値を見る	ds.unique()
スタックをデキューする	両端キュー.popleft()
両端キューの先頭に整数を追加する	両端キュー.appendleft(整数)
線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
option: 小さい順にする	ascending = True
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
データ列を日付データに変換する	pd.to_datetime(ds)
変数名が関数か	inspect.isfunction(識別子)
データフレームの重複を数える	df.duplicated().sum()
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
リストとリストについて散布図を描画し、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
折れ線グラフをブルーバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='blueviolet')
縦棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
option: 線の種類を一点鎖線に変更する	linestyle = 'dashbot'
正規分布の累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
変数名がモジュールかどうか調べる	inspect.ismodule(識別子)
データフレームをカテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
散布図のクロスマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
小数点数を切り上げて整数に変換する	math.ceil(x)
option: エクセルシートの名前を変更する	sheet_name = ['A', 'B']
配列と配列の散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
predicateFuncがTrueとならない列の部分を取り出す	itertools.dropwhile(predicateFunc, iterable)
整数を2進数文字列に変換する	bin(整数)[2:]
データ列を全てdatetime64型にする	pd.to_datetime(ds)
現在の分数	datetime.date.today().minute
キューを空にする	両端キュー.clear()
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームの選択した列の未入力値をxに設定する	df[['列A', '列B']].fillna(x)
option: 改行コードをWindowsに変更する	newline = '\r\n'
文字列中の文字を新しい文字に置き換える	文字列.replace(部分文字列, 置換後の文字列)
xを整数にする	int(x)
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
ライトイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
マゼンタ色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
モデルを学習する	model.fit(説明変数, 目的変数)
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
データシリーズの中にいくつ未入力値が含まれるか調べる	ds.isna().sum()
option: ライトサーモン色を使用する	color = 'lightsalmon'
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
ダークオレンジ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
option: フォントの色をペルーに設定する	color = 'peru'
ポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.')
複数のシートを表計算から読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
リストの末尾を除く	リスト[:-1]
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
整数を8進数文字列に変換する	oct(整数)[2:]
サーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
散布図に黒い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームのカラムのスピアマンの相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
整数を整数でわる	整数 / 整数2
データフレームの列をにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
配列と数列の散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのカラムが正規分布からどれだけ、歪んでいるか確認する	df['列A'].kurt()
データフレームの記述統計量	df.describe()
マップを別の辞書として更新する	辞書.update(辞書2)
文字列から改行を取り除く	文字列.replace('\n', '')
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
両端キューの先頭にリストの各要素を追加する	両端キュー.extendleft(リスト)
データシリーズの未入力値を最大値に指定する	ds.fillna(ds.max())
2変数の最小値を計算する	min(x, y)
ファイルパスをバイナリできるようにオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
グラフの大きさを変更する	plt.figure(figsize=(横幅, 高さ))
多層パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
横棒プロットの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
option: オールドレース色を使用する	color = 'oldlace'
rgbのダイアモンドマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
データフレームから5行をランダムに抽出する	df.sample(5)
データシリーズの欠損値を中央値に設定する	ds.fillna(ds.median())
両端キューの先頭に文字列を追加する	両端キュー.appendleft(文字列)
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
リストをベクトルにする	np.array(aList)
イテラブルからn要素、サンプリングしてリスト化する	random.sample(イテラブル, k=n)
option: ミディアムパープルにグラフの色をセットする	color = 'mediumpurple'
日付データが何年か知る	aDate.year
データフレームの指定したカラムが正規分布からどれだけ尖っているか確認する	df['列A'].skew()
散布図をペルー色を使って描画する	plt.scatter(データ列x, データ列y, color='peru')
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
プロットをパステル調にする	sns.set(pallete='pastel')
折れ線グラフをライムグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
コーパスのバージョンを知る	version = 'wcce2022-0.1'
数列間のケンドールの順位相関係数を計算する	scipy.stats.kendalltau(数列, 数列2)
データフレームの内容を見る	df.head()
列のエポック秒をdatetime64型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
列を関数でフィルタする	filter(func, iterable)
リネン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームのどの値が最も出現するか見る	df.mode()
リストとイテラブルについての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
既存のファイルを追加できるように文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
イテラブルを配列にする	np.array(iterable)
option: 貝殻にグラフの色を指定する	color = 'seashell'
データフレームの列名を一度に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
xを整数に変換する	int(x)
option: ダイアモンドマーカーを使う	marker = 'D'
データ列の相関を可視化する	plt.scatter(データ列x, データ列y)
ライムグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
浮動小数点数から浮動小数点数を引く	x - y
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
データフレームの指定した列の歪みを求める	df['列A'].kurt()
相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
散布図の菱形印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
カウンタの項目を列挙する	aCounter.keys()
データフレームの選択した列の母標準偏差を求める	df[['列A', '列B']].std(ddof=0)
リストに要素を追加する	リスト.append(要素)
横棒グラフをインディゴ色を用いて描画する	plt.barh(データ列x, データ列y, color='indigo')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ダークカーキにヒストグラムの色をセットする	plt.hist(データ列, color='darkkhaki')
変数の値を切り捨てながら整数分の1にする	変数 //= 整数
オブジェクトが非同期ジェネレータかテストする	inspect.isasyncgen(オブジェクト)
データシリーズの欠損値を前の行の値に設定する	ds.fillna(method='ffill')
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
両端キューを数列から生成する	collections.deque(数列)
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
変数の値を切り捨てながら整数分の一にする	変数 //= 整数
データフレームの指定したカラムを四捨五入する	df['列A'].round()
配列と列のデカルト積を得る	itertools.product(iterable, iterable2)
リストの値を小さい順にソートする	sorted(リスト, reverse=True)
データフレームの選択したカラムの中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
現在が水曜日かどうか	datetime.datetime.today().weekday() == 2
リストを等間隔でn個に分割する	pd.cut(aList, n)
ライトコーラル色としてヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
CSVファイルを読み込む	pd.read_csv('file.csv', sep=',')
線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データを最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
タプルのn番目のを求める	タプル[n]
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
xが無限大に近づくときの極限値を算出する	sympy.limit(数式, [|変数]x, oo)
データフレームを並べ直し、、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
データフレームの列の未入力値を直前の値に設定する	df['列A'].fillna(method='ffill')
文字列のある位置より前に部分文字列があるか	文字列.find(部分文字列, 0, 終了位置) != -1
カンマで区切ってxとyを表示する	print(x, y, sep=',')
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
文字列中の部分文字列の出現をカウントする	文字列.count(部分文字列)
文字列から右端を取り除く	文字列.removeprefix(部分文字列)
辞書の値数を得る	len(辞書)
折れ線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
シルバー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
option: データ型を指定する	np.int8 = np.int<nl>dtype = np.int8
切片なしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
配列の折れ線グラフを描いて、RGBで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
セットから例外なく項を取り除く	セット.discard(要素)
改行しないで文字列をプリントする	print(文字列, end='')
xを青色で表示できる文字列に変換する	f'\033[34m{x}\033[0m'
option: ローングリーンを使う	color = 'lawngreen'
ユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
二つのオブジェクトは同一参照か調べる	obj is obj2
小数点数の双曲線正接の逆数を計算する	math.atanh(x)
日付時刻データが日付時刻データより前か調べる	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
x軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
文字列の後ろから部分文字列を取り除く	文字列.rstrip(部分文字列)
データシリーズの中にある文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームのあるカラム	df['列A']
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
2つの文字列を改行なしにプリントする	print(文字列, 文字列, end='')
データフレームをシートの名前を指定してExcelからロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
文字列の左側から不要な空白を取り除く	文字列.lstrip()
整数に整数を加算する	整数 + 整数2
パールバイオレットレッドにヒストグラムの色を指定する	plt.hist(データ列, color='palevioletred')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
英字の文字列	string.ascii_letters
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategray')
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
正接	math.tan(x)
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
変数の出力を改行なしに行う	print(変数名, end='')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
マゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
整数が3の倍数か確認する	整数 % 3 == 0
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
アイボリー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
オブジェクトをイテラブルに変換する	iter(obj)
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
名前付きタプルを使う	import collections
縦軸の軸名をuntitledに設定する	plt.ylabel('y軸ラベル')
整数の四乗	整数 ** 4
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
JSONフォーマットの入力ストリームを辞書に変換する	json.load(ファイル入力)
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
コマンドライン	sys.argv
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
option: グラフの色をレモンシフォンにする	color = 'lemonchiffon'
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
配列を円プロットにする	plt.pie(データ列, startangle=90)
小数点数の指数を求める	math.frexp(x)[1]
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
データシリーズを100の位で丸めて、整数にする	ds.round(-2).astype(int)
変数について数式をn階微分する	sympy.diff(数式, 変数, n)
キーが辞書上でまだ定義されていないかどうか	キー not in 辞書
データフレームのある列の中にとがいくつ存在するかカウントする	df['列A'].isin([value, value2]).sum()
option: グラフの色をライトゴールドロディイエローにする	color = 'lightgoldenrodyellow'
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
数式をxについてn階微分する	sympy.diff(数式, [|変数]x, n)
配列とリストについての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
カラムのKurtosisを求める	scipy.stats.kurtosis(df['列A'], bias=False)
数値時刻の列から日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームの相関行列	df.corr()
データフレームの選択した列の欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
主成分分析として多次元データを整数次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
線グラフをシエナ色を用いて描画する	plt.plot(データ列x, データ列y, color='sienna')
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: フォントの色をレベッカパープルに変更する	color = 'rebeccapurple'
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
散らばりを可視化する	plt.scatter(データ列x, データ列y)
ブルーバイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
文字列をコロンを用いて二分する	文字列.partition(':')
option: 色をライトグリーンに変更する	color = 'lightgreen'
ヒストグラムの色をネイビーに変更する	plt.hist(データ列, color='navy')
マッピングの項目名の値	辞書[キー]
小数点数の天井数	math.ceil(x)
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
リストとリストの散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
２点間のユークリッド距離を求める	math.dist(point, point2)
文字列を最後のセパレータで分けたときの後半の文字列	文字列.rpartition(セパレータ)[-1]
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightseagreen')
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
option: 色をスラグレーに設定する	color = 'slategrey'
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
カウンタの上位をリストとして得る	aCounter.most_common(k)
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
行列の標準偏差	np.std(aArray)
末尾のカラムを除いたデータフレーム	df[df.columns[:-1]]
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
セットにイテラブルを追加する	セット.update(リスト)
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
太文字でxをプリントする	print(f'\033[1m{x}\033[0m')
データフレームの未入力値を直前の値に変更する	df.fillna(method='ffill')
option: フォントの色をブラウンに変更する	color = 'brown'
配列の累積和を求める	np.cumsum(aArray)
リストの先頭を使う	リスト[0]
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
円プロットにラベルを設定する	plt.pie(データ列, startangle=90, labels=ラベル列)
リストからランダムn個に選んでリスト化する	random.choices(リスト, k=n)
ヒストグラムをダークターコイズ色を用いて描画する	plt.hist(データ列, color='darkturquoise')
サンディーブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
棒グラフを紺碧色を用いて描画する	plt.bar(データ列x, データ列y, color='azure')
グリッド線	plt.grid(linewidth=3.0)
配列とリストの散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列が全て小文字か	文字列.islower()
データフレームを千の位で四捨五入する	df.round(-3)
option: グラフのラインスタイルを点線に設定する	linestyle = 'dotted'
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
見やすいグラフを用いる準備をする	import seaborn as sns
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
文字列を最後のコロンで二分割して、前半を求める	文字列.rpartition(':')[0]
文字列はPythonのキーワード	keyword.iskeyword(文字列)
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
空文字	''
指定のカラムに重複があればドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
インディアンレッドにヒストグラムの色を変更する	plt.hist(データ列, color='indianred')
度数分布図を描画し、合計を1にする	plt.hist(データ列, density=True)
現在の秒数	datetime.date.today().second
項目名が辞書に存在するかどうか	キー not in 辞書
option: グラフの色をライトイエローに変更する	color = 'lightyellow'
option: カラム名をリストで変更する	names = 列名リスト
option: サンディーブラウン色を用いる	color = 'sandybrown'
数式のxについてのn階微分を計算する	sympy.diff(数式, [|変数]x, n)
縦棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
データフレームの一部の列の欠損値を平均値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
綺麗なグラフを描画する	import seaborn as sns
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ゲインズボロ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
赤い▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
実行を強制的に停止する	sys.exit()
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
データフレームから指定した列名一覧の列だけ選択する	columns = ['列A', '列B']<nl>df[columns]
文字列をカンマで区切り、文字列リストに変換する	文字列.split(',')
フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
３つの変数を順にプリントする	print(変数名, 変数名, 変数名)
データフレームのあるカラムの時刻	df['列A'].dt.hour
両端キューの末尾にイテラブルの各要素を追加する	両端キュー.extend(イテラブル)
リストが空	len(リスト) == 0
データフレームの選択したカラムの値はNaNか調べる	df[['列A', '列B']].isna()
縦に複数のデータフレームを結合する	pd.concat([df, df2, df3], axis=1)
option: 線のスタイルを一点鎖線に変更する	linestyle = 'dashbot'
option: 標準エラーを使う	file = sys.stderr
昇順に破壊的にある列によってデータフレームを並べる	df.sort_values(by='列A', ascending=True, inplace=True)
データフレームのカラムの平均の標準誤差を算出する	scipy.stats.sem(df['列A'])
整数が1、もしくは2か調べる	整数 == 1 or 整数 == 2
折れ線グラフの三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データ列を平方根する	np.sqrt(データ列)
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
数式の微分を求める	sympy.diff(数式)
データフレームのある列をリストとして抽出する	df['列A'].values.tolist()
線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
長さの制限された双方向キューをイテラブルから作成する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
カウンタの項目を一つ増やす	aCounter[element] += 1
データシリーズが正規分布からどの程度、尖っているか確認する	ds.skew()
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
文字列の後ろから範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データフレームを破壊的に昇順にある列によって並べ直す	df.sort_values(by='列A', ascending=True, inplace=True)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
二つの列によってデータフレームをグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームの信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
データフレームをある列としてグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
変数の値を切り捨てながら半分にする	変数 //= 2
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
文字列がセットの要素に含まれるか調べる	文字列 in セット
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
カンマ区切り形式でデータフレームを書き出す	df.to_csv('file.csv')
配列と数列についての散布図に赤い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
表データを配列に変換する	df.values
印字できる文字を全部使う	string.printable
n個に等間隔で配列を分割する	pd.cut(aArray, n)
書き込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='w')
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
ラベンダーブラッシュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
ティール色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
オブジェクトがジェネレータかどうか判定する	inspect.isgenerator(オブジェクト)
列のそれぞれを関数でフィルタする	filter(func, iterable)
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
プラットホームはリナックスか調べる	sys.platform.startswith('linux')
変数の値を整数分の１にする	変数 /= 整数
データシリーズの中に文字列と日付データがあるか確認する	ds.isin([value, value2])
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
t分布型確率的近傍埋め込み法として多次元データを文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
option: 改行コードを動作環境依存に設定する	newline = None
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
長さの制限された両端キューを数列から作る	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
オブジェクトがジェネレータ関数	inspect.isgeneratorfunction(オブジェクト)
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
小数点数が有限かどうか判定する	math.isfinite(x)
アンサンブル学習を使ってクラス分類を行う	sklearn.ensemble.VotingClassifier()
リストの値を並べ変える	sorted(リスト)
データシリーズの中に文字列と日付データがいくつ存在するか数える	ds.isin([value, value2]).sum()
文字列をファイルに書き込む	s = ''<nl>f.write(s)
折れ線グラフをアンティークホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
日付データが月曜日か調べる	aDate.weekday() == 0
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
あるカラムのカテゴリごとの合計	df.groupby('列A').sum()
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
option: 色をライトグレーに指定する	color = 'lightgray'
option: 追加用に指定する	mode = 'a'
option: アクアマリン色を使用する	color = 'aquamarine'
散布図に赤いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
ふたつのセットは共通の要素を持たないか	セット.isdisjoint(セット2)
データフレームの行を条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
自然数の最大公約数	math.gcd(n, n2)
散布図にバツ印を使う	plt.scatter(データ列x, データ列y, marker='x')
黄色で表示できる文字列に変換する	f'\033[33m{x}\033[0m'
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
赤いポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
タブ	'\t'
線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
配列間のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
ダークスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
文字列を走査し、パターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
複数行対応としてパターンで文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
辞書を多重集合にする	collections.Counter(aDict)
等差数列から整数乱数を求める	random.randrange(start, end, step)
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
パウダーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
プロットを使用する準備をする	import matplotlib.pyplot as plt
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ダークカーキ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
表データのインデックスの一覧を求める	df.index
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
option: シーグリーンを使う	color = 'seagreen'
データフレームのカラムが正規分布に従うかどうか調べる	scipy.stats.shapiro(df['列A'])
フォレストグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
点線にヒストグラムをセットする	plt.hist(データ列, linestyle='dotted')
横軸の目盛を表示しない	plt.xticks([])
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
グラフに目盛り線を表示する	plt.grid(True)
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
イテラブルとデータ列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの指定したカラムを丸めて整数型にする	df['列A'].round().astype(int)
ホットピンク色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムをアリスブルー色を使って描画する	plt.hist(データ列, color='aliceblue')
xでデータフレームの欠損値を埋める	df.fillna(x)
文字列の先頭でパターンに大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
浮動小数点数を実数に加算する	x + y
昇順にリストの値をソートする	sorted(リスト, reverse=True)
ヒストグラムの色をターコイズに指定する	plt.hist(データ列, color='turquoise')
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
改行文字を使う	'\n'
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
ファイルをクローズする	f.close()
変数の値を半分にする	変数 //= 2
バツマーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
プラムにヒストグラムの色を変更する	plt.hist(データ列, color='plum')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
数式の変数についてのn階偏微分を行う	sympy.diff(数式, 変数, n)
データフレームの一部のカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: シエナ色を使う	color = 'sienna'
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
変数が無限大に近づく時の数式の極限値を求める	sympy.limit(数式, 変数, oo)
option: インディゴにグラフの色を指定する	color = 'indigo'
双方向キューをリストに変換する	list(両端キュー)
データフレームをグループ化し、それぞれの最小値を求める	df.groupby('列A').min()
データフレームのn番目の行を抽出する	df.loc[n]
文字列の中の大文字・小文字を無視してパターンによる全マッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
option: 色を青緑に設定する	color = 'teal'
ファイルを開いて]、バイナリストリームを使う	'rb' = 'a'<nl>open(filepath, mode='rb')
option: ▽マーカーを描画する	marker = 'v'
データフレームの列を万の位で丸める	df['列A'].round(-4)
option: グラフの色を茶色に設定する	color = 'brown'
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームのカラム間のスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
データフレームの中の列を等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
カウンタを辞書で更新する	aCounter.update(aDict)
option: スチールブルーを使う	color = 'steelblue'
縦棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
大量のデータが正規分布に従うかどうか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
平均と分散を使って標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
n個の整数列	list(range(n))
文字列をn回だけ置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
識別子が非同期ジェネレータか	inspect.isasyncgen(識別子)
プロットを論文用に設定する	sns.set(context='paper')
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
数列とイテラブルについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
今日の日付時刻	datetime.datetime.now()
複数のリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
変数名がコルーチンかどうか調べる	inspect.iscoroutine(識別子)
option: グラフの色をオリーブに変更する	color = 'olive'
option: インディゴ色を使用する	color = 'indigo'
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
折れ線グラフの色をデピンクにする	plt.plot(データ列x, データ列y, color='deeppink')
平均でデータフレームのNaNを補う	df.fillna(df.mean())
リストの各値を両端キューの末尾に追加する	両端キュー.extend(リスト)
option: バッファのサイズを大きくする	buffering = 4096
表データから重複を残さず重複をドロップする	df.drop_duplicates(keep=False)
データフレームをグループ化しある列に対し個数を算出する	df.groupby('列A')['列B'].count()
リストの要素を文字列として空白を用いて連結する	' '.join(map(str, リスト))
データフレームの指定したカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
要素がセットの要素	要素 in セット
折れ線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線プロットでリストの移り変わりを作図する	plt.plot(range(len(データ列)), データ列)
データフレームの上100行	df.head(100)
ミスティローズにヒストグラムの色を変更する	plt.hist(データ列, color='mistyrose')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
整数の右シフト	整数 >> n
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
辞書にキーワード引数で加えて、更新する	辞書.update(**kwargs)
整数が整数2より小さい	整数 < 整数2
リストの各値を関数に適用した結果でソートする	sorted(リスト, key=func)
配列の内積	np.dot(aArray, aArray2)
配列をビニングする	pd.cut(aArray, aList)
区間を設定してヒストグラムをプロットする	plt.hist(データ列, bins=区関数)
ネイビー色を用いてヒストグラムを描画する	plt.hist(データ列, color='navy')
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
rgbの△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: パパイヤウィップにフォントの色を設定する	color = 'papayawhip'
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
日付時刻データが土曜日かどうか	aDatetime.weekday() == 5
option: オリーブにフォントの色を設定する	color = 'olive'
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
nと整数が等しいかどうか確認する	整数 == 整数2
棒グラフをアクア色を用いて描画する	plt.bar(データ列x, データ列y, color='aqua')
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
文字列からJSONを読む	data = json.loads(文字列)
二つのデータフレームをジョインする	pd.merge(df, df2)
改行しないで変数をプリントする	print(変数名, end='')
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
タプル内の要素が少なくともひとつ真	any(タプル)
変数が0に近づく場合の数式の極限値を求める	sympy.limit(数式, 変数, 0)
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームの指定したカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
三つのデータフレームを縦向きに合体させる	pd.concat([df, df2, df3], axis=0)
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
データシリーズの欠損値を最小値で埋める	ds.fillna(ds.min())
リストと数列について散布図を描画し、、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
色付きの点線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ガンマ関数の値を計算する	math.gamma(x)
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
カラムの歪度を求める	scipy.stats.skew(df['列A'], bias=False)
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
フォーマットを使ってデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format='%Y-%m-%d')
全８進数字	string.octdigits
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
ヒストグラムの色をハニーデューにセットする	plt.hist(データ列, color='honeydew')
変数が0に近づくときの数式の極限値を算出する	sympy.limit(数式, 変数, 0)
２つの変数を順にプリントする	print(変数名, 変数名)
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
データフレームの行を範囲指定して抽出する	df[start:end]
線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgreen')
棒グラフをミディアムパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
その最頻値でデータシリーズのNaNを補完する	ds.fillna(ds.mode().iloc[0])
データフレームの中の列を等しい量になるようにビン数nでビニングする	pd.qcut(df[col], n)
日付時刻データの時刻	aDatetime.time()
行列の行ごとの最小値を見る	np.min(aArray, axis=1)
折れ線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ファイルパスを文字列の示すエンコーディングを使って書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
ベクトルから重複を除いた行列を作成する	np.unique(aArray)
長さの制限された双方向キューをイテラブルから生成する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
データフレームをグループ化して、ヒストグラムとして描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
折れ線グラフに菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
実数を整数に変換する	int(x)
データフレームの選択したカラムのNaNを平均値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
散布図の色をティールにする	plt.scatter(データ列x, データ列y, color='teal')
ASCII限定としてあらかじめ正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームの選択した列の相関行列	df[['列A', '列B']].corr()
データフレームの末尾100行を抽出する	df.tail(100)
文字列を走査し、パターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
文字が別の文字列に含まれないか調べる	文字 not in 文字列
データフレームを表示するとき、ヘッダー行を右寄せに減らす	pd.set_option('colheader_justify', 'right')
nは整数と等しいか	整数 == 整数2
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
半透明の一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
データフレームの選択した列は正規分布からどの程度、尖っているか確認する	df[['列A', '列B']].skew()
mathモジュールを用いる	import math
正接の逆数を求める	math.atan(x)
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
整数の最大公約数を計算する	math.gcd(n, n2)
データシリーズの欠損値を平均値に設定する	ds.fillna(ds.mean())
折れ線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
文字列を最初の部分文字列で二分する	文字列.partition(部分文字列)
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
リストとデータ列についての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
二つのデータフレームを異なる列をキーにして左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
文字列中のカタカナを平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
データフレームの列の種類	df.info()
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
文字列の開始位置番目からと終了位置までの間に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
option: フォントの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
UTF8を用いて書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
option: モカシン色を使う	color = 'moccasin'
ヒストグラムを紺色を用いて描画する	plt.hist(データ列, color='darkblue')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
二つの数値を出力する	print(数値, 数値)
リストの移り変わりを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ロージーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
データフレームの指定した列の文字列をNaNにする	df['列A'].replace(値, np.nan)
辞書にキーワード引数を用いて加えて、更新する	辞書.update(**kwargs)
行列が何次元か調べる	aArray.ndim
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
ボックスチャートを二つ並べてプロットする	plt.boxplot([データ列, データ列])
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
グラフからグリッド線を消す	plt.grid(False)
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
データフレームの指定したカラムの記述統計量	df['列A'].describe()
データフレームの指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
カウンタ同士でインターセクション演算する	aCounter & aCounter2
xとyを順に表示する	print(x, y)
行列の個数	aArray.size
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
整数が非負数でないかどうか確認する	整数 >= 0
赤い大バツマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
イテラブルの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
option: フォントの色を紺碧に指定する	color = 'azure'
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
部分文字列を範囲を指定して探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
チップのデータセットをデータフレームとしてロードする	df = sns.load_dataset('tips')
option: 大バツ印を加える	marker = 'X'
x,y,zをプリントする	print(x, y, z)
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='gray')
xを緑色にする	f'\033[32m{x}\033[0m'
option: ナバホホワイト色を使う	color = 'navajowhite'
データフレームのあるカラムの未入力値を直後の値で埋める	df['列A'].fillna(method='bfill')
データフレームのあるカラムが何分か知る	df['列A'].dt.minute
リストの末尾からn番目以前の部分を抽出する	リスト[:-n]
オブジェクトは浮動小数点数クラスか確認する	float = int<nl>isinstance(obj, float)
上限指定をしたカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
クラスのサブクラス	issubclass(サブクラス, クラス)
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
0からnまでのスライス	slice(n)
option: 色をオーキッドにセットする	color = 'orchid'
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
辞書を浅くコピーする	dict(辞書)
deqのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
上限制限された長さnの両端キューを作る	collections.deque(maxlen=最大長)
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
セットをイミュータブルに変換する	frozenset(セット)
新しい文字列で文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
ヒストグラムの色をダークゴールデンロッドに指定する	plt.hist(データ列, color='darkgoldenrod')
リストをイミュータブルなセットにする	frozenset(リスト)
year年month月day日hour時minute分second秒をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
データフレームを指定された列の値でグループ化する	df.groupby('列A')
option: 箱ひげ図を横向きにする	vert = False
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
イテラブルの長さを制限する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
データ列の変遷を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
ゼロ埋めされた８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int8)
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
空のマップ	辞書 = {}
データフレームの選択したカラムの中に文字列と文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
文字列の右端から指定した文字を除く	文字列.rstrip(文字)
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
辞書を階層化マップに変換する	collections.ChainMap(aDict)
ある列のカテゴリごとの最小値	df.groupby('列A').min()
要素がリストの要素	要素 in リスト
リストをn個に等間隔で分割する	pd.cut(aList, n)
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
イテラブルと配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームをあるカラムの値によってまとめた表	df.groupby('列A')
ある列を用いてデータフレームをソートしてNaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
n個にデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ひとつでも非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in 文字列)
連立方程式の解を求める	sympy.solve([数式, 数式2])
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: 文字列の示す文字コードを用いる	encoding = s
整数が1、もしくは2、もしくは3に等しいか	整数 == 1 or 整数 == 2 or 整数 == 3
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
日付時刻データが日曜日か	aDatetime.weekday() == 6
赤い実線で配列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
配列をランダムにシャッフルしてリストにする	random.sample(配列, len(配列))
グラフを描画する準備をする	import matplotlib.pyplot as plt
カウンタを辞書として更新する	aCounter.update(aDict)
散布図にrgbのクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
カウンタの各項目をカウントだけ列挙する	aCounter.elements()
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
スタックの最初から要素を取り出す	両端キュー.popleft()
ヒストグラムの区間の数を設定する	plt.hist(データ列, bins=区関数)
predicateFuncが真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
option: マーカーを左三角に変更する	marker = '<'
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
文字列が指定した文字列で終わる	文字列.endswith(部分文字列)
配列とリストについて散布図を描画し、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
正規表現でデータシリーズをまとめて置き換える	ds.replace(pattern, repl, regex=True)
グラフをいい感じに変更する	sns.set()
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
キューから最初の整数を削除する	両端キュー.remove(整数)
JSONを用いる	import json
実数のハイパボリック・タンジェントを計算する	math.tanh(x)
実数が有限か調べる	math.isfinite(x)
option: フクシア色を使う	color = 'fuchsia'
空白によって文字列を区切って、整数リストにする	list(map(int, 文字列.split()))
カテゴリで色分けして、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
黄色い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
ある列の値がxに等しいデータを抽出する	df[df['列A'] == x]
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
横に並べてヒストグラムを描く	plt.hist([データ列, データ列], color=['b', 'r'])
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
赤い三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームを表示するとき、表示できる列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
カウンタの最頻出の項目	aCounter.most_common()[0]
タプルの値を並べ変える	sorted(タプル)
データシリーズの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
フクシアにヒストグラムの色を指定する	plt.hist(データ列, color='fuchsia')
整数が5で割り切れるかどうか調べる	整数 % 5 == 0
タイムスタンプデータは何秒か知る	aDatetime.second
ヒストグラムをミッドナイトブルー色として描画する	plt.hist(データ列, color='midnightblue')
文字列の中で正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
行列の転置行列	aArray.T
ヒストグラムの色をオーキッドに指定する	plt.hist(データ列, color='orchid')
黒い▽マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
リストから一つランダムに選んでリストにする	random.choice(リスト)
両端キューの末尾に整数を追加する	両端キュー.append(整数)
文字列中に非大文字がある	any(not c.isupper() for c in 文字列)
赤いクロスマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのインデックスの一覧	df.index
変数名をキーとして、辞書	dict(name='kogi', age=6)
セットを更新不能にする	frozenset(セット)
折れ線グラフの色をダークオレンジにセットする	plt.plot(データ列x, データ列y, color='darkorange')
タイムスタンプデータの年数	aDatetime.year
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
リストのn番目の要素を削除する	del リスト[n]
xを文字列に変換してファイルに書く	x = 0<nl>f.write(str(x))
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
option: フォントの色をコーンズシルクに設定する	color = 'cornsilk'
データ列の移り変わりを折れ線グラフを用いて可視化する	plt.plot(range(len(データ列)), データ列)
ソートして文字列をJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
実数を小数点以下で四捨五入する	round(x, n)
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
列でデータフレームを集約して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
option: グラフの色をミディアムターコイズに指定する	color = 'mediumturquoise'
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームをあるカラムをキーにしてソートする	df.sort_values(by='列A')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
rgbの左三角マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
カウンタのキーとカウントを列挙する	aCounter.items()
折れ線グラフの色をナバホホワイトにする	plt.plot(データ列x, データ列y, color='navajowhite')
スクリプトの名前	sys.argv[0]
2つのデータフレームをカラム名を指定して外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
線グラフをハニーデュー色を使って描画する	plt.plot(データ列x, データ列y, color='honeydew')
ヒストグラムの色をドジャーブルーに変更する	plt.hist(データ列, color='dodgerblue')
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
２つの文字列は等しくないかどうか確認する	文字列 != 文字列2
黒い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
データ列の折れ線グラフをポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
右三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
option: ダークシアグリーンを用いる	color = 'darkseagreen'
データフレームがどれだけ、分散しているか確認する	df.var()
折れ線グラフを黄緑色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
キーで指定された項目を辞書からポップする	辞書.pop(キー)
データフレームの上n行	df.head(n)
option: ダークスラテグレー色を用いる	color = 'darkslategray'
データフレームのあるカラムが何日か見る	df['列A'].dt.day
赤い下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
オブジェクトが非同期ジェネレータ関数かどうか	inspect.isasyncgenfunction(オブジェクト)
青い点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: スノー色を使う	color = 'snow'
ゼロ埋めされた符号なし８ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.uint8)
リストに要素を加える	リスト.append(要素)
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
y座標の目盛を表示しない	plt.yticks([])
入力から２つの文字列を読む	A, B = map(str, input().split())
ひとつでも非小文字が文字列中に含まれるか	any(not c.islower() for c in 文字列)
ボックスチャートを二つ並べて描画する	plt.boxplot([データ列, データ列])
貝殻色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームのふたつのカラムをドロップしてみる	df.drop(['列A', '列B'], axis=1)
多次元データを多次元尺度構成法で文字列次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
パレットトルコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
タプルの要素を昇順にソートする	sorted(タプル, reverse=True)
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
文字列を最初のカンマで二分し、、前の方を使う	文字列.partition(',')[0]
セットの浅いコピーを作る	セット.copy()
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
データフレームの一部の列の不偏標準偏差	df[['列A', '列B']].std()
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
中央値でデータフレームのNaNを埋める	df.fillna(df.median())
表の上5行	df.head(5)
その平均値でデータシリーズのNaNを埋める	ds.fillna(ds.mean())
マッピングにキーが存在する場合、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
折れ線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
タプルの最後の要素	タプル[-1]
散布図に黒い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのあるカラムの日にちを使う	df['列A'].dt.day
エラーなくセットから要素を除去する	セット.discard(要素)
リストとリストについて散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
deqのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
現在のワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
実数から浮動小数点数を引く	x - y
データ列を２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
外れ値を除いたデータフレームのカラムの算術平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
カラーパレットを全般的に暗くする	sns.set(pallete='dark')
行列のスカラー倍	aArray * n
データフレームを表示するとき、小数点以下の表示精度を増やす	pd.set_option('precision', n)
箱ひげ図としてデータ列を可視化する	plt.boxplot(データ列)
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
末尾から文字列を区切り記号で区切る	文字列.rsplit(セパレータ)
option: ミディアムパープル色を使用する	color = 'mediumpurple'
データフレームのある列を配列に変換する	df['列A'].values
配列とイテラブルの散布図を描画し、▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
標準入力から1行分読む	sys.stdin.readline()
整数が奇数かどうか	整数 % 2 == 1
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
クラス分類のPPVを計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
2つの文字列を順にプリントする	print(文字列, 文字列)
オブジェクトがビルトイン	inspect.isbuiltin(オブジェクト)
データフレームのあるカラムは何年か見る	df['列A'].dt.year
自然数個のものからk個取り出したときの並べ方を計算する	math.perm(n, k)
散布図を赤いポイントマーカーでプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームのある列の中にいくつ欠損値があるか調べる	df['列A'].isna().sum()
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
カデットブルー色でヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
ドジャーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ヒストグラムをダークゴールデンロッド色を用いて描画する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフの色をレモンシフォンにする	plt.plot(データ列x, データ列y, color='lemonchiffon')
マップのエントリ数	len(辞書)
双方向キューを全て取り除く	両端キュー.clear()
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
横棒グラフをネイビー色を使って描画する	plt.barh(データ列x, データ列y, color='navy')
データシリーズのモード	ds.mode()
option: アンティークホワイト色を用いる	color = 'antiquewhite'
赤い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
deqのn番目の要素を使う	両端キュー[n]
option: ライトスレイグレーにフォントの色を指定する	color = 'lightslategray'
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
外れ値に強い重クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
option: 更新する	inplace = True
散布図の左三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データシリーズはどの程度分散しているか調べる	ds.var()
option: 色を半透明にする	alpha = 0.5
ヘッダを指定せずCSVファイルを読み込む	pd.read_csv('file.csv', header=None)
グリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
整数を十の位で丸める	round(x, -1)
行列の行ごとの合計値	np.sum(aArray, axis=1)
単回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストと配列について散布図を描画して、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
タプルの長さ	len(タプル)
リストを文字列としてカンマを用いて連結する	','.join(map(str, リスト))
x軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
option: ミントクリーム色を使う	color = 'mintcream'
option: バイナリ用に変更する	mode = 'rb'
半透明の破線を用いてリストの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
カウンタの項目のカウント	aCounter[element]
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームのモードを求める	df.mode()
実数から浮動小数点数を減算する	x - y
データフレームのカラムのn次モーメントを計算する	scipy.stats.moment(df['列A'], moment=n)
複数のデータフレームを横向きに合体させる	pd.concat([df, df2, df3], axis=1)
データ列を分割数nとしてビン分割する	pd.cut(ds, n)
線グラフを暗い赤色として描画する	plt.plot(データ列x, データ列y, color='darkred')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
数式の変数の解を方程式として算出する	sympy.solve(数式, 変数)
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
全要素を初期値で初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
ファイルからJSONフォーマットのデータを読み込む	with open('file.json') as f:<nl><tab>data = json.load(f)
閾値としてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
最後のコロンで文字列を二分して、最初の方を使う	文字列.rpartition(':')[0]
option: 改行を区切りで使用する	sep = '\n'
option: アイボリー色を用いる	color = 'ivory'
整数が一桁の数か調べる	-9 <= 整数 <= 9
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
折れ線グラフの左三角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
整数のn分の一を計算する	整数 / n
整数が整数2よりも大きい	整数 > 整数2
今日の日を使う	datetime.datetime.today().day
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
データフレームの選択した列の中に日付データと日付データがいくつ含まれるか数える	df[['列A', '列B']].isin([value, value2]).sum()
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
option: ターコイズにグラフの色を設定する	color = 'turquoise'
データフレームの中にあると日付データの合計を調べる	df.isin([value, value2]).sum()
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ある列のカテゴリの分散	df.groupby('列A').var()
コーラル色を用いてヒストグラムを描画する	plt.hist(データ列, color='coral')
データフレームのカラムを百の位で四捨五入して、整数型にする	df['列A'].round(-2).astype(int)
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
データフレームの選択したカラムを千の位で丸めて、整数にする	df[['列A', '列B']].round(-3).astype(int)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
青い実線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
xの小数点以下'3'桁までをプリントする	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
三自然数の最大公約数	math.gcd(n, n2, n3)
ミディアムスレートブルーにヒストグラムの色をする	plt.hist(データ列, color='mediumslateblue')
文字列の末尾	文字列[-1]
プロットに鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
折れ線グラフの色をレモンシフォンにセットする	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフのポイント印の色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
nと整数が等しい	整数 == 整数2
横棒グラフの色をティールにする	plt.barh(データ列x, データ列y, color='teal')
option: ライトブルー色を用いる	color = 'lightblue'
横方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v')
本日の月	datetime.datetime.today().month
数値はセットに含まれないか確認する	数 not in セット
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
日付データの曜日を整数で使う	aDate.weekday()
文字列をコロンで分割して、文字列リストに変換する	文字列.split(':')
識別子はビルトインか	inspect.isbuiltin(識別子)
ある列のカテゴリの最小値	df.groupby('列A').min()
線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの平均などを確認する	df.describe()
折れ線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
識別子がジェネレータかどうか	inspect.isgenerator(識別子)
文字列が全て数字かどうか調べる	文字列.isdigit()
文字列の左側から部分文字列を取り除く	文字列.lstrip(部分文字列)
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
オブジェクトが浮動小数点数型か調べる	float = int<nl>isinstance(obj, float)
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
予測データのコンフュージョン・マトリックスを計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: ディムグレー色を使う	color = 'dimgray'
タプルの要素数	len(タプル)
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームをグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
option: ピーチパフを使う	color = 'peachpuff'
日付データが日付データと同時かどうか	aDate == aDate2
リストからn個、サンプリングしてリスト化する	random.sample(リスト, k=n)
文字列を最後のコロンで分割して、残りを使う	文字列.rpartition(':')[-1]
データシリーズの不偏分散を求める	ds.var(ddof=1)
折れ線グラフの色をダークターコイズに指定する	plt.plot(データ列x, データ列y, color='darkturquoise')
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: マルーンにグラフの色を設定する	color = 'maroon'
昇順にタプルの要素を並べる	sorted(タプル, reverse=False)
イテラブルからカウンタを作る	collections.Counter(iterable)
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
既存の配列を元に全要素が初期値のベクトルを作る	np.full_like(aArray, 初期値)
リストとデータ列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの欠損値を前の行の値で埋める	df.fillna(method='ffill')
黒い丸マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
標準入力のソースがターミナルか調べる	os.isatty(sys.stdin.fileno())
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
カラム名を指定して二つのデータフレームを左結合する	pd.merge(df, df2, on='列A', how='left')
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
キューをリストにする	list(両端キュー)
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
データフレームの選択したカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
コロンで右から文字列を分割する	文字列.rsplit(':')
整数を二進数文字列にする	bin(整数)[2:]
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
列名を指定して二つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
option: ライトグリーンにグラフの色を指定する	color = 'lightseagreen'
ファイルパスをBOM付きとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
ある列にリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
実数を数に掛ける	x * y
floatの最大値を求める	sys.float_info.max
双方向キューの最後に要素を入れる	両端キュー.append(要素)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
タプルの最後からn番目以前の部分を取り出す	タプル[:-n]
標準エラーを求める	sys.stderr
option: グラフを破線に指定する	linestyle = 'dashed'
折れ線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
辞書にキーが存在するか確認する	キー in 辞書
UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
双方向キューの要素を左にローテーションする	両端キュー.rotate(-1)
折れ線グラフの▲マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
方程式として数式のパラメータの解を求める	sympy.solve(数式, 変数)
xを黒色でプリントできる文字列に変換する	f'\033[30m{x}\033[0m'
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
二つのセットが互いに素か調べる	セット.isdisjoint(セット2)
ファイルパスからの入力ストリームを見る	open(filepath)
折れ線グラフをミディアムターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ある列の値がx以上、y未満のデータを抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
配列の標準誤差	scipy.stats.sem(配列)
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
ファイル入力からJSONを読む	json.load(ファイル入力)
option: リネンを使う	color = 'linen'
ネイビー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
数式のxを指定した数式で置き換える	数式.subs([|変数]x, 数式2)
列の重複組み合せ	itertools.combinations_with_replacement(iterable, n)
要素がセットのメンバーか調べる	要素 in セット
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
ダークシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
明日の日付を求める	datetime.date.today() + datetime.timedelta(days=1)
ふたつの列からグループ化し、標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
option: ミディアムバイオレットレッドにフォントの色を指定する	color = 'mediumvioletred'
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
yについて数式のインテグラルを計算する	sympy.integrate(数式, y)
疑似乱数を生成する	random.random()
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
列を行列に変換する	np.array(iterable)
点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフの色をミディアムシアグリーンにセットする	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームの指定したカラムの要約統計量	df['列A'].describe()
イテラブルからn個、サンプリングしてリスト化する	random.sample(イテラブル, k=n)
データフレームをグループ化し、最大値を算出する	df.groupby('列A').max()
データフレームの列が正規分布からどの程度、尖っているか確認する	df['列A'].skew()
黒い星マーカーをイテラブルとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームをグループ化し個数を求める	df.groupby('列A').count()
2を底とする小数点数の対数を求める	math.log2(x)
リストとリストの散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
右から空白で文字列を分割する	文字列.rsplit()
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
暗い赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
箱ひげ図を描画し、平均線を加える	plt.boxplot(データ列, meanline=True)
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームからn行、ランダムサンプリングする	df.sample(n)
データフレームを複数の列をキーにして並べて、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
カテゴリで色分けして、データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
縦棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
データフレームの一部のカラムの値が未入力値か調べる	df[['列A', '列B']].isna()
相関係数としてデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
半透明の一点鎖線を用いて数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームがどの程度、分散しているか見る	df.var()
折れ線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
文字列が別の文字列に含まれるか	文字列 in 別の文字列
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
散布図を黒い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: グレー色を用いる	color = 'gray'
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
標準入力を使う	sys.stdin
横棒グラフを濃いシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
option: フォントの色をグレーに指定する	color = 'gray'
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
データフレームの選択したカラムを十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
オブジェクトは数値か調べる	isinstance(obj, (int,float))
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
数列とデータ列についての散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列の中の正規表現による全てのマッチを見る	re.findall(pattern, s)
改行しないで文字列の出力を行う	print(文字列, end='')
セットが空	len(セット) == 0
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームのデータ型のリストを使う	df.dtypes
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: 色をミディアムパープルに指定する	color = 'mediumpurple'
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
シーグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームを表示するとき、小数点以下の表示精度をセットする	pd.set_option('precision', n)
データ列の割合を円プロットで描画する	plt.pie(データ列, startangle=90)
nの無限イテラブルを得る	itertools.repeat(n)
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
カラムのn次モーメントを算出する	scipy.stats.moment(df['列A'], moment=n)
関数の値によってデータフレームをグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データシリーズをPandasの日付型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
無限大	math.inf
小数点数を切り下げる	math.floor(x)
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
折れ線グラフをミディアムスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
変数がマイナス無限大に近づく時、数式の極限値を求める	sympy.limit(数式, 変数, -oo)
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: グラフの色をディムグレーにセットする	color = 'dimgrey'
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgray')
アンティークホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
文字列がセットのメンバーでないか確認する	文字列 not in セット
データフレームをある列のカテゴリでグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
セットから全要素を除く	セット.clear()
双方向キューの末尾に数列の各値を追加する	両端キュー.extend(数列)
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
文字列の左側から改行を除く	文字列.lstrip('\n')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
要素を両端キューにエンキューする	両端キュー.append(要素)
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
数列間の積立相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
折れ線グラフの△マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列を最後からコロンで区切る	文字列.rsplit(':')
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
２つのデータフレームを横方向に合体させる	pd.merge(df, df2)
棒グラフをブルーバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームの指定したカラムの標本分散を求める	df['列A'].var(ddof=0)
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ダーク・スラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
実数の双曲線正接の逆数	math.atanh(x)
タプルが空でないか	len(タプル) != 0
option: 表計算ファイルシートの名前を設定する	sheet_name = ['A', 'B']
option: ダークマゼンタにフォントの色を設定する	color = 'darkmagenta'
折れ線グラフの△印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列中にひとつでもアルファベットがある	any(c.isalpha() for c in 文字列)
グラフのy軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
未初期化の行列を作る	np.empty(要素数, dtype=np.int)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
リストが空でないかどうか確認する	len(リスト) != 0
配列とリストの散布図をプロットしてダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームを表示するとき表示できる最大行数を変更する	pd.set_option('display.max_rows', n)
折れ線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
カラーバーを横向きでプロットする	plt.colorbar(orientation='horizontal')
等量でデータフレームの中のカラムをn個に分割する	pd.qcut(df[col], n)
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
赤い丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
文字列をカンマで二つに分けて、後半を使う	文字列.partition(',')[-1]
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
グラフの色使いを濃くする	sns.set(pallete='deep')
クリムゾン色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
データフレームをある列によって降順にソートする	df.sort_values(by='列A', ascending=False)
rgbの四角マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データシリーズの中にある日付データの合計を数える	ds.isin([value]).sum()
自然数の階乗	math.factorial(n)
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
２つのセットは交わりを持たないか	セット.isdisjoint(セット2)
ベクトルの次元の数を求める	aArray.ndim
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
データフレームを関数によってグループ化する	df.groupby(関数)
整数が整数2以下	整数 <= 整数2
タプルを順にプリントする	print(*タプル)
真部分集合	セット < セット2
自然対数	math.log(x)
折れ線グラフの色をイエローグリーンにセットする	plt.plot(データ列x, データ列y, color='yellowgreen')
ふたつのリストの差分を使う	list(set(リスト).difference(set(リスト2)))
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
データフレームからランダムにn行を取り出す	df.sample(n)
要素を両端キューの左に入れる	両端キュー.appendleft(要素)
ライトゴールドロディイエロー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
黄色でプリントできる文字列にする	f'\033[33m{x}\033[0m'
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
option: 右三角マーカーを用いる	marker = '>'
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームの選択したカラムの中のNaNの数を数える	df[['列A', '列B']].isna().sum()
ふたつの集合に共通する要素からなる集合	セット.intersection(セット2)
部分文字列が文字列の指定した区間に含まれるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームのある列の不偏分散を求める	df['列A'].var(ddof=1)
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
option: ライトサーモン色を使う	color = 'lightsalmon'
データフレームの複数の列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgray')
文字列中にひとつでも英数字が含まれるかどうか調べる	any(c.isalnum() for c in 文字列)
実数が無限大	math.isinf(x)
辞書のキーを要素に設定する	辞書[キー] = element
データフレームの最初100行	df.head(100)
標準エラー	sys.stderr
option: バイナリ書き込みモードを使う	mode = 'wb'
文字列中にひとつも空白が含まれない	any(not c.isspace() for c in 文字列)
０で全要素を初期化した行列を作る	np.zeros(行数, 列数)
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
表データのある列をリストとして抽出する	df['列A'].values.tolist()
ピアソンの積立相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
ターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
イテラブルと数列の散布図を描画して、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
散布図の四角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
散布図をrgbの星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
表を使う	import numpy as np<nl>import pandas as pd
option: マーカーをダイアモンドに設定する	marker = 'D'
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
ミントクリームにヒストグラムの色を指定する	plt.hist(データ列, color='mintcream')
配列をシャッフルしてリストにする	random.sample(配列, len(配列))
データフレームのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
文字列を最初のコロンで二分して後ろの方を使う	文字列.partition(':')[-1]
整数プラス整数を求める	整数 + 整数2
データフレームから指定したデータ型のカラム名の一覧	df.select_dtypes(型).columns
標準出力がターミナル出力か調べる	sys.stdout.isatty()
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
数列とリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: グラフの色をモカシンに指定する	color = 'moccasin'
option: フォントの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
タプルの平均	sum(タプル)/len(タプル)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
グリッド線	plt.grid(alpha=0.5)
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
今日の日付時刻を求める	datetime.datetime.now()
両端キューのサイズ	len(両端キュー)
実行時に標準出力がパイプかどうか確認する	not sys.stdout.isatty()
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
散布図をシルバー色として描画する	plt.scatter(データ列x, データ列y, color='silver')
リストとリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データ列と配列について散布図をプロットして、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームをグループ化し、ある列に対し平均値を算出する	df.groupby('列A')['列B'].mean()
option: パパイヤウィップに色を設定する	color = 'papayawhip'
option: グラフの色をダークターコイズに変更する	color = 'darkturquoise'
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
option: グラフの線の種類を破線に設定する	linestyle = 'dashed'
データフレームの一部のカラムの中に文字列と文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
option: マーカーを右三角に設定する	marker = '>'
正規表現patternでデータシリーズの値をreplに全部置換する	ds.replace(pattern, repl, regex=True)
タイムスタンプデータからn日分、減らす	aDatetime - datetime.timedelta(days=n)
整数の五乗	整数 ** 5
数列をイミュータブルな集合に変換する	frozenset(数列)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
キーが辞書上で定義済みかどうか確認する	キー in 辞書
行列の行列式	np.linalg.det(aArray)
識別子が非同期ジェネレータ関数かテストする	inspect.isasyncgenfunction(識別子)
棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
リストを文字列として、ある文字で連結する	文字.join(map(str, リスト))
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームのカラムのトリム分散を使う	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: ダークグレーを使う	color = 'darkgray'
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
一点鎖線で配列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
整数がnの倍数	整数 % n == 0
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
データフレームのある列の値がxに等しくない行を取り出す	df[df['列A'] != x]
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
ヒートマップでデータフレームの相関行列を可視化する	sns.heatmap(df.corr())
横棒グラフをトマト色を用いて描画する	plt.barh(データ列x, データ列y, color='tomato')
あるカラムの文字列が部分文字列で始まる行を抽出する	df[df['列A'].str.startswith(部分文字列)]
データフレームの指定したカラムを小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
一点鎖線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
xとyをカンマで区切ってプリントする	print(x, y, sep=',')
全要素を０で初期化した行列	np.zeros(行数, 列数)
文字列を末尾から空白で区切る	文字列.rsplit()
配列のn次モーメントを求める	scipy.stats.moment(配列, moment=n)
option: 読み込みモードを用いる	mode = 'r'
文字列を最後の区切り記号を用いて二分する	文字列.rpartition(セパレータ)
多次元尺度構成法で整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
マップ上でキーが未定義か調べる	キー not in 辞書
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
実数の逆双曲線正弦を求める	math.asinh(x)
黄緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームの列名の一覧を使う	df.columns
データシリーズのNaNを直後の値に設定する	ds.fillna(method='bfill')
option: 色の透明度を指定する	alpha = 0.5
文字列は全て数値か	文字列.isnumeric()
エクセルファイルをデータフレームとして読む	pd.read_excel('file.xlsx')
option: ライトグリーン色を使う	color = 'lightgreen'
MLPで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
オブジェクトにフィールドが存在するか確認する	hasattr(obj, プロパティ名)
回数制限して文字列を置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
折れ線グラフの色をライトスカイブルーにセットする	plt.plot(データ列x, データ列y, color='lightskyblue')
option: ベージュを用いる	color = 'beige'
ヒストグラムの色をオリベドラブにする	plt.hist(データ列, color='olivedrab')
option: EUCを用いる	encoding = 'euc_jp'
文字列中にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in 文字列)
オブジェクトが集合クラスか調べる	set = int<nl>isinstance(obj, set)
折れ線グラフの色をシスルに指定する	plt.plot(データ列x, データ列y, color='thistle')
線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
散布図のバツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
文字列を特殊文字も含め小文字に変換する	文字列.casefold()
option: ポイントマーカーを描画する	marker = '.'
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
一点鎖線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
プロットで使う横軸の軸名を設定する	plt.xlabel('x軸ラベル')
色を明るくする	sns.set(pallete='bright')
データフレームのあるカラムの分	df['列A'].dt.minute
カラムのn次モーメントを計算する	scipy.stats.moment(df['列A'], moment=n)
ヒストグラムを上限から下限までの範囲で描く	plt.hist(データ列, range=(start, end))
データ列の変遷を半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
整数の各桁の和を求める	sum(map(int, str(整数)))
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: グラフの色を青緑に指定する	color = 'teal'
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
折れ線グラフのダイアモンドマーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
散布図の▲印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
横軸の目盛を非表示にする	plt.xticks([])
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
レベッカパープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームの選択したカラムの文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
今日をISO8601書式の文字列に変換する	datetime.datetime.today().isoformat()
列にシーケンスを続けた列	itertools.chain(iterable, iterable2)
データフレームの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
ダークバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
０で全要素を初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
データ列と配列について散布図をプロットして、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列を最後の区切り記号で二分割する	文字列.rpartition(セパレータ)
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの線の種類を破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
文字列の右側から指定した文字を消す	文字列.rstrip(文字)
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
option: オリベドラブに色を設定する	color = 'olivedrab'
配列の割合を円プロットを使って描画する	plt.pie(データ列, startangle=90)
データ列を折れ線グラフとして可視化する	plt.plot(データ列x, データ列y)
折れ線グラフの丸印の線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
xを赤色でプリントする	print(f'\033[31m{x}\033[0m')
option: フォントの色をシスルに設定する	color = 'thistle'
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
二つの条件が何れか成り立つ	条件 or 条件2
折れ線グラフの△マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームをあるカラムによってまとめたグループ	df.groupby('列A')
データフレームの先頭100行を確認する	df.head(100)
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
配列の最小値	np.min(aArray)
option: バイナリモードに設定する	mode = 'rb'
折れ線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
xを赤色でプリントできる文字列にする	f'\033[31m{x}\033[0m'
配列をフラット化する	aArray.flatten()
配列の形を見る	aArray.shape
シーケンスからカウンタを作る	collections.Counter(iterable)
正規分布で疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
データシリーズがどれだけ、正規分布から歪んでいるか確認する	ds.kurt()
数列を横棒グラフにする	plt.barh(ラベル列, データ列)
グリッド線を白くする	plt.grid(color='w')
二つのデータフレームを異なる列をキーにして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
オブジェクトはバイト列クラスのインスタンスかどうか調べる	bytes = int<nl>isinstance(obj, bytes)
データフレームをヘッダを付けず出力する	df.to_csv('file.csv', header=None)
散布図を黄色色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellow')
青い一点鎖線でリストの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
右から文字列を空白で区切る	文字列.rsplit()
データフレームのカラムのスピアマンの順位相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列の折れ線プロットを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
文字列の左端からタブを取り除く	文字列.lstrip('\t')
複数の数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
グラフを表示する	plt.show()
識別子がモジュールか調べる	inspect.ismodule(識別子)
オレンジにヒストグラムの色をセットする	plt.hist(データ列, color='orange')
データフレームの選択したカラムの値を正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
散布図を赤い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
縦棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ファイルとfilenameを結合する	os.path.join(filepath, filename)
青い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
ロバスト推定を用いてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
データフレームを二つの列でグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
表データのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
データフレームは正規分布からどれだけ、尖っているか調べる	df.skew()
配列とリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データシリーズの曜日が何日目か見る	ds.dt.dayofweek
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
辞書順で文字列が文字列より後	文字列 > 文字列2
二つのデータフレームを連結する	# concat<nl>pd.concat([df, df2])
ティール色でヒストグラムを描画する	plt.hist(データ列, color='teal')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
青色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
BOM付きでファイルを追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
二数の最大値	max(x, y)
option: グラフの色をゴールデンロッドにする	color = 'goldenrod'
nの無限数列	itertools.repeat(n)
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
イテラブルと配列の散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
箱ひげ図としてデータ列を描画する	plt.boxplot(データ列)
n2行n列の二次元リストを作る	[[0] * n for _ in range(n2)]
半透明の点線として配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
JSONフォーマットの文字列を読み込む	data = json.loads(文字列)
日付データからn週間分、引く	aDate - datetime.timedelta(weeks=n)
タプル中の要素が全て真か調べる	all(タプル)
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列をエラーを無視してバイト列に変換する	文字列.encode(errors='ignore')
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
文字列を右側から部分文字列で区切る	文字列.rsplit(部分文字列)
整数が整数2より大きいか	整数 > 整数2
ネイビー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
option: グラフの色をダークスラテグレーに変更する	color = 'darkslategray'
折れ線グラフのポイント印の線幅を指定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
最大値でデータフレームのカラムの欠損値を置換する	df['列A'].fillna(df['列A'].max())
ファイルを開いて]バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
数列とリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
方程式として数式の変数の解を求める	sympy.solve(数式, y)
全要素を初期値で初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
浮動小数点数のn乗	pow(x, n)
データ列のヒストグラムを描画する	plt.hist(データ列)
菱形印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
両端キューの末尾から要素を取り出す	両端キュー.pop()
データフレームを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームを一度に四捨五入する	df.round()
配列から重複を除いた配列を作る	np.unique(aArray)
option: 標準出力を出力先にする	file = sys.stdout
リストの各要素を空白区切りで表示する	print(*リスト)
文字列中の文字をカウントする	文字列.count(文字)
散布図をブランチドアーモンド色として描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
option: ダークターコイズにグラフの色を指定する	color = 'darkturquoise'
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
本日が日曜日かどうか	datetime.datetime.today().weekday() == 6
クラス分類の分類精度を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
黒い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームの最初	df.head()
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
タプルの総和	sum(タプル)
JSONフォーマットのファイル入力を辞書に変換する	json.load(ファイル入力)
切片なしの重回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
切り上げて整数に変換する	math.ceil(x)
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
ダークレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ライムグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データシリーズの欠損値を最大値で埋める	ds.fillna(ds.max())
データフレームをグループ化して、ヒストグラムとして見る	sns.histplot(df, x='列名', hue='カテゴリ名')
ふたつの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
コマンド引数の一覧を使う	sys.argv[1:]
xを黒色化する	f'\033[30m{x}\033[0m'
deqから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
ミディアムスプリンググリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
双曲線余弦の逆数	math.acosh(x)
SVDを行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
option: 右三角マーカーを描画する	marker = '>'
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
縦棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
データ列をy軸、データ列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
浮動小数点数に実数を加える	x + y
データフレームの中の列をビニングする	pd.cut(df[col], aList)
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
option: サンディーブラウンにグラフの色を設定する	color = 'sandybrown'
配列からnデータ、サンプリングしてリスト化する	random.sample(配列, k=n)
3つの文字列を順にプリントする	print(文字列, 文字列, 文字列)
option: 標準出力を使う	file = sys.stdout
文字列をトリムする	文字列.strip()
文字が別の文字列にあるか調べる	文字 in 文字列
グラフの中に枠なしの簡単な説明を表示する	plt.legend(frameon=False)
データフレームをタブ区切り形式として書き出す	df.to_csv('file.tsv', sep='\t')
二つの計算結果を順に表示する	print(式, 式)
変数名が非同期ジェネレータか	inspect.isasyncgen(識別子)
正規分布を判定する	scipy.stats.shapiro(df['列A'])
文字列中のパターンを新しい文字列として置換する	re.sub(pattern, newsub, s)
モデルのバージョン	version = 'wcce2022-0.1'
xを浮動小数点数にする	float(x)
リストと配列について散布図を描いて星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストから配列を作成する	np.array(aList)
ゼロ埋めしたベクトル	np.zeros(要素数)
配列のユニークな要素	np.unique(aArray)
ラベンダーブラッシュ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
配列の平均値	np.mean(aArray)
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
折れ線グラフを半透明の破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
四角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
２つの浮動小数点数はほぼ等しいか確認する	math.isclose(x, x2)
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
サポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
黄色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
セットが空でないか調べる	len(セット) != 0
折れ線グラフの丸マーカーの色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
リストとリストの散布図をプロットして、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
option: n番目のカラムをインデックスにセットする	index_col = n
ある列毎の最大値	df.groupby('列A').max()
xで指定したカラムのNaNを置換する	df['列A'].fillna(x)
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
散布図をrgbの左三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: グラフの色をバイオレットに変更する	color = 'violet'
ベクトルの列ごとの分散	np.var(aArray, axis=0)
データフレームの複数の列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
バリーウッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
ファイル入力からJSON形式のデータを読み込む	json.load(ファイル入力)
セットを組にする	tuple(セット)
黒い上三角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムの色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
変数名が非同期ジェネレータ関数かどうか調べる	inspect.isasyncgenfunction(識別子)
タプルの値を逆順にする	タプル[::-1]
option: ライムグリーン色を用いる	color = 'limegreen'
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
グラフのy座標の説明をuntitledにセットする	plt.ylabel('y軸ラベル')
改行しなくて二つの数値を出力する	print(数値, 数値, end='')
散布図のクロスマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
タプル内の要素が少なくともひとつ真か	any(タプル)
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
浮動小数点数の逆双曲線余弦を算出する	math.acosh(x)
データフレームのn行目を抽出する	df.loc[n]
x軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データフレームを関数によってまとめたグループ	df.groupby(関数)
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
シエナ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
棒グラフをライムグリーン色として描画する	plt.bar(データ列x, データ列y, color='limegreen')
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームの複数の列を消してみる	df.drop(['列A', '列B'], axis=1)
実行中の関数名を得る	inspect.currentframe().f_code.co_name
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ベクトルの要素ごとの最大公約数	np.gcd(aArray, aArray2)
ビン数nとして配列をビン分割する	pd.cut(aArray, n)
option: グラフの線幅を3.0ポイントにセットする	linewidth = 3.0
整数がnの倍数か判定する	整数 % n == 0
文字列をセパレータで二分して、前の方を使う	文字列.partition(セパレータ)[0]
option: ゴールド色を用いる	color = 'gold'
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないか確認する	文字列.find(部分文字列, 開始位置, 終了位置) == -1
折れ線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
まとめてデータフレームをValueMapで変更する	df.replace(ValueMap)
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
出力ストリームからn文字、読み込む	f.read(n)
整数を符号付きでバイト列に変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
カラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
日付時刻データの分	aDatetime.minute
あるカラムの代表値を求める	df['列A'].describe()
タプルを累積する	itertools.accumulate(iterable, operator.mul)
実数を数で除する	x / y
最大値でデータを正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
option: ダークシアンを用いる	color = 'darkcyan'
コーンズシルク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
xとyをタブで区切って出力する	print(x, y, sep='\t')
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
横棒グラフをミッドナイトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームの値は未入力値	df.isna()
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
線グラフの色をミディアムパープルに指定する	plt.plot(データ列x, データ列y, color='mediumpurple')
二つの集合の∪を求める	セット.union(セット2)
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
配列の要素ごとの積を求める	np.multiply(aArray, aArray2)
新しいヒストグラムベースの勾配ブースティング回帰木を作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
行列の和	aArray + aArray2
カテゴリ列で色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
オブジェクトのハッシュ値を計算する	hash(obj)
データフレームのある列の中にあるとの合計を求める	df['列A'].isin([value, value2]).sum()
二つの最大値	max(x, y)
本日が何曜日か知る	datetime.datetime.today().weekday()
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
ゼロ埋めされた行列を作る	np.zeros(行数, 列数)
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームの行数と列数	df.shape
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
配列と配列の散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ヒストグラムを一点鎖線として描く	plt.hist(データ列, linestyle='dashbot')
オブジェクトはクラス	inspect.isclass(オブジェクト)
カラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
スペース	' '
データフレームのNaNを50パーセンタイルで埋める	df.fillna(df.median())
データ列をビン数nでビン分割する	pd.cut(ds, n)
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
データシリーズを小数点以下n桁で丸める	n = 2<nl>ds.round(n)
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
文字列の最後から部分文字列を探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
複数のシートを指定してエクセルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
バイトオーダを使う	sys.byteorder
折れ線グラフの▲印の線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
rgbのポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
数列とリストについての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightgreen')
ある列のカテゴリごとの分散	df.groupby('列A').var()
データシリーズの平均値	ds.mean()
データフレームをインデックスで降順で整列する	df.sort_index(ascending=False)
オブジェクトが非同期ジェネレータ関数かどうか判定する	inspect.isasyncgenfunction(オブジェクト)
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: 切片を算出しない	fit_intercept = False
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
折れ線グラフの左三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
文字列がキーワードか調べる	keyword.iskeyword(文字列)
データをJSONフォーマットにエンコードする	json.dumps(データ, ensure_ascii=False)
データフレームを行によって並べ直す	df.sort_index()
散布図を△マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
赤い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
プロットの描画で濃くカラーパレットを使用する	sns.set(pallete='deep')
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームの指定したカラムの50パーセンタイル	df['列A'].median()
空のリスト	[]
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
項はセットのメンバーかどうか調べる	要素 in セット
日付データの年数を求める	aDate.year
配列の形状	aArray.shape
タプル内の要素が全て真	all(タプル)
n個に等間隔でデータ列をビン分割する	pd.cut(ds, n)
グラフのタイトルを設定する	plt.title('グラフの名称')
option: グリーン色を使う	color = 'green'
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
option: ベージュ色を使う	color = 'beige'
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
散布図に丸印を使用する	plt.scatter(データ列x, データ列y, marker='o')
option: 降順にする	ascending = False
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
日付データが日付データより前	aDate2 = aDatetime<nl>aDate < aDate2
option: 行を連番に設定する	index_col = None
ファイルパスを開いて]、バイナリ書き込みストリームを見る	'wb' = 'a'<nl>open(filepath, mode='wb')
標準入力から1行分読み込んで改行を取り除く	sys.stdin.readline().rstrip()
識別子がモジュールか	inspect.ismodule(識別子)
option: △マーカーを加える	marker = '^'
データシリーズがどの程度、分散しているか調べる	ds.var()
重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
データシリーズの時	ds.dt.hour
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
今日が何月か知る	datetime.datetime.today().month
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
option: フォントの色をサドルブラウンに変更する	color = 'saddlebrown'
タイタニックのデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
option: ミディアムシアグリーン色を使用する	color = 'mediumseagreen'
リストを等しい量になるようにn個に分割する	pd.qcut(aList, n)
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
色を淡くする	sns.set(pallete='muted')
rgbの▲マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
標準入力から1行読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
あるカラムにおいてどの値が頻出か見る	df['列A'].mode()
浮動小数点数の双曲線正接の逆数	math.atanh(x)
文字列がセットに含まれるか調べる	文字列 in セット
縦棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
配列が正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
データシリーズの中に日付データと文字列があるかどうか調べる	ds.isin([value, value2])
ヒストグラムをミディアムオーキッド色を用いて描画する	plt.hist(データ列, color='mediumorchid')
空の辞書が欲しい	辞書 = {}
データフレームを使う	import numpy as np<nl>import pandas as pd
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームをグループ化しある列の要約統計量を算出する	df.groupby('列A').describe()['列B']
整数の八乗を計算する	整数 ** 8
散布図を赤い丸マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='o', c='r')
大きさnで配列とリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategrey')
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
横棒グラフをマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='magenta')
ある列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
日付データのデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
コマンドフラグの状態を調べる	sys.flags
上限指定をしたデータフレームのカラムの分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
xの方程式として数式を解く	sympy.solve(数式, [|変数]x)
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
リストと配列の散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
箱髭図を描画して平均値を追加する	plt.boxplot(データ列, showmeans=True)
ライトスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightskyblue')
nの無限数列を得る	itertools.repeat(n)
データシリーズの曜日を使う	ds.dt.weekday_name
現在が金曜日かどうか判定する	datetime.datetime.today().weekday() == 4
文字列から接尾辞を取り除く	文字列.removesuffix(部分文字列)
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
変数の値を整数倍にする	変数 *= 整数
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
リストを横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
文字列を部分文字列で分割して文字列リストにする	文字列.split(部分文字列)
リストのn番目以降の部分を抽出する	リスト[n:]
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
現在の再帰の上限	sys.getrecursionlimit()
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
ファイルをEUCとしてオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
カラムの母標準偏差を求める	df['列A'].std(ddof=0)
バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
全句読点文字	string.punctuation
option: オーキッドにグラフの色を設定する	color = 'orchid'
データフレームのある列の中に日付データとがいくつあるか数える	df['列A'].isin([value, value2]).sum()
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
数値を出力する	print(数値)
文字列中に大文字がないかどうか調べる	any(not c.isupper() for c in 文字列)
リストとリストについて散布図を描画して、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
インデント幅を指定して辞書をJSON文字列にする	json.dumps(辞書, ensure_ascii=False, indent=n)
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
紺碧色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
横棒グラフをリネン色を使って描画する	plt.barh(データ列x, データ列y, color='linen')
イテラブルから配列を作る	np.array(iterable)
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
表データの先頭n行	df.head(n)
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ファイルをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
パステル調に色をグラフの描画で使う	sns.set(pallete='pastel')
文字列中の小文字を大文字に変換する	文字列.upper()
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
option: エンコーディングを文字コードtextにする	encoding = text
ダークカーキ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
xを黒色でプリントできる文字列にする	f'\033[30m{x}\033[0m'
ゴールド色を使ってヒストグラムを描画する	plt.hist(データ列, color='gold')
文字列を最後の部分文字列で二分して前半を見る	文字列.rpartition(部分文字列)[0]
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
2つのカラムによってデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
パレットトルコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
散布図を赤い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームの選択したカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
小麦色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
十六進数字を使う	string.hexdigits
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
横軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
数式の微分を算出する	sympy.diff(数式)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
ファイルをEUCで開く]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
日付データを文字列を使ってフォーマットする	"aDate.strftime(""%d/%m/%y"")"
リストを複製する	リスト.copy()
ミディアムオーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
ランダムな整数のリストがほしい	random.sample(range(100), 10)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
縦方向に2つのデータフレームを一つにする	pd.concat([df, df2], axis=0)
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
ポイント印を使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
方程式の解を計算する	sympy.solve(数式)
破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
xについて数式の積分を計算する	sympy.integrate(数式, [|変数]x)
文字列を最後のコロンで二つに分け、、後半を使う	文字列.rpartition(':')[-1]
option: アリスブルーを使う	color = 'aliceblue'
バイナリモードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
リストとリストの散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
データフレームから型型のみ抽出する	df.select_dtypes(ty)
データフレームをある列のカテゴリで集約し、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データシリーズの値は未入力値	ds.isna()
プロットの名前を設定する	plt.title('グラフの名称')
散布図の印をポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
ふたつの列からグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームのカラムのKurtosisを求める	scipy.stats.kurtosis(df['列A'], bias=False)
データシリーズの時を使う	ds.dt.hour
データフレームの重複する行を抽出する	df[df.duplicated(keep=False)]
二つの集合の差	セット.difference(セット2)
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
option: アリスブルーに色を変更する	color = 'aliceblue'
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
xを表示する	print(x)
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
ふたつの整数の和	整数 + 整数2
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
散布図の△マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムの色をインディゴに指定する	plt.hist(データ列, color='indigo')
印字可能な文字を全部使う	string.printable
文字列中に非空白が含まれるか判定する	any(not c.isspace() for c in 文字列)
文字列の左側	文字列[0]
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ディープスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='deepskyblue')
ベージュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
セットから全ての要素を消す	セット.clear()
option: 改行コードをUNIXに変更する	newline = '\n'
文字列を最後のカンマで二つに分ける	文字列.rpartition(',')
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
散布図の星マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
全要素が1の行列を初期化する	np.ones(行数, 列数, dtype=np.int)
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームの選択したカラムのNaNをxに設定する	df[['列A', '列B']].fillna(x)
散布図の三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
リストの長さを制限する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
ふたつの列からグループ化し個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
日付データのデータフレームのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
データシリーズの欠損値を最大値に設定する	ds.fillna(ds.max())
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
新しい単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
回帰直線データフレームのカテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
識別子がジェネレータ関数かどうか調べる	inspect.isgeneratorfunction(識別子)
プログラムの実行を強制的に停止する	sys.exit()
文字列の先頭だけ大文字化する	文字列.capitalize()
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
データフレームのあるカラムの分を求める	df['列A'].dt.minute
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
みっつの条件が何か成り立つ	条件 or 条件2 or 条件3
グラフの横軸の名前を設定する	plt.xlabel('x軸ラベル')
データフレームをグループ化し、ある列の要約統計量を算出する	df.groupby('列A').describe()['列B']
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
配列から重複なく、ランダムにn個選んでリスト化する	random.sample(配列, k=n)
識別子がメソッドかどうか	inspect.ismethod(識別子)
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
書き込みできるようにEUCを使ってファイルパスを開く]	open(filepath, mode='w', encoding='euc_jp')
データフレームに重複があるか確認する	df.duplicated()
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
データフレームのカラムの欠損値をxに設定する	df['列A'].fillna(x)
option: 淡い茶色色を用いる	color = 'tan'
option: グラフの色をシーグリーンに変更する	color = 'seagreen'
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
ファイルを開いて]バイナリストリームを見る	'rb' = 'a'<nl>open(filepath, mode='rb')
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
データフレームのある列を最初のカテゴリーを除外し、ダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
option: 小麦色色を使う	color = 'wheat'
書き込みモードとしてファイルを開き]、fとする	f = open(filepath, mode='w')
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
L2ノルムとしてデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
リストとイテラブルについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
リストとデータ列についての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの中にいくつNaNがあるか数える	df.isna().sum()
ロイヤルブルーにヒストグラムの色をセットする	plt.hist(データ列, color='royalblue')
配列の歪み	scipy.stats.skew(配列, bias=False)
青緑にヒストグラムの色をセットする	plt.hist(データ列, color='teal')
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
トマト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
浮動小数点数に浮動小数点数を掛ける	x * y
変数についてのn階偏微分を求める	sympy.diff(数式, 変数, n)
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
パールゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
ダークレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームの選択した列の尖り	df[['列A', '列B']].skew()
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
1行から二つの実数値を読む	A, B = map(float, input().split())
散布図をローングリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームからn行サンプリングする	df.sample(n)
線グラフの色をグレーにする	plt.plot(データ列x, データ列y, color='gray')
ランダムにデータフレームから取り出す	df.sample()
折れ線グラフでデータフレームの列を描画する	plt.plot(df[column], df[column])
option: 出力先を標準エラーに設定する	file = sys.stderr
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
双方向キューをデキューする	両端キュー.popleft()
データシリーズの標準偏差を求める	ds.std()
書き込み用にファイルをオープンして]、fとする	f = open(filepath, mode='w')
文字列の右側から部分文字列を除く	文字列.rstrip(部分文字列)
入力から二つの文字列値を読み込む	A, B = map(str, input().split())
散布図の▲印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
配列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
名前付きタプルを辞書にする	aNamedTupleObject._asdict()
今日のタイムスタンプを使う	datetime.datetime.today()
データフレームの指定した列のパーセンタイル	df['列A'].quantile(パーセント/100)
データフレームをあるカラムを用いて昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
折れ線グラフのクロス印の色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
改行せず文字列をプリントする	print(文字列, end='')
縦棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
xを整数に変換する	int(x)
データフレームの中の列を分割数nを用いてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
プロットで使うタイトルをセットする	plt.title('グラフの名称')
横棒グラフをトマト色を使って描画する	plt.barh(データ列x, データ列y, color='tomato')
散布図をrgbの▼マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストの中の一番小さい値を求める	min(リスト)
タプルをナンバリングしながら、一つずつ処理する	for i, value in enumerate(タプル):<nl><tab>print(i, value)  # value はタプルの要素
option: グラフの色を白にセットする	color = 'white'
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
option: ミディアムスレートブルーにフォントの色を設定する	color = 'mediumslateblue'
特異値分解で多次元データを項次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
option: グラフの色を青に設定する	color = 'blue'
日付データが日付データより早いか	aDate2 = aDatetime<nl>aDate < aDate2
マルーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: 改行の代わりに文字列を用いる	end = 文字列
ターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データフレームの一部の列を千の位で丸める	df[['列A', '列B']].round(-3)
option: クロスマーカーを用いる	marker = 'x'
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
データ列を等間隔でn個に分割する	pd.cut(ds, n)
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
整数を両端キューにenqueueする	両端キュー.append(整数)
指定した列のカテゴリで集計しそれぞれの分散を求める	df.groupby('列A').var()
文字列中に英数字がある	any(c.isalnum() for c in 文字列)
数式の変数の解を方程式として計算する	sympy.solve(数式, y)
指定された列で集計し合計を求める	df.groupby('列A').sum()
両端キューに文字列をenqueueする	両端キュー.append(文字列)
option: オレンジにグラフの色を設定する	color = 'orange'
全ての空白文字	string.whitespace
option: 文字列を区切りで用いる	sep = s
1からnまでの整数リストを使う	list(range(1, n+1))
整数を左シフトする	整数 << n
見やすいグラフを描画する準備をする	import seaborn as sns
option: ダイアモンドマーカーを描画する	marker = 'D'
日付データが日付データより前か確認する	aDate2 = aDatetime<nl>aDate < aDate2
リネン色を用いてヒストグラムを描画する	plt.hist(データ列, color='linen')
標準出力のバッファを強制表示する	sys.stdout.flush()
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
ヒストグラムをビスク色として描画する	plt.hist(データ列, color='bisque')
ふたつのセットが互いに素か調べる	セット.isdisjoint(セット2)
散布図の四角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
箱ひげ図にラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームからカテゴリデータだけ選択する	df.select_dtypes('object')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
option: パウダーブルー色を用いる	color = 'powderblue'
双方向キューの要素をインプレースに反転する	両端キュー.reverse()
実行時の標準入力のソースがターミナル	os.isatty(sys.stdin.fileno())
option: 色をホワイトに設定する	color = 'white'
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
辞書を計数器に変換する	collections.Counter(aDict)
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
option: ビスクを用いる	color = 'bisque'
棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
八進数文字列をバイナリに変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightseagreen')
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
文字は平仮名	('ぁ' <= 文字 <= 'ん')
データフレームの列の種類を見る	df.info()
文字列を最後のセパレータで二分し、残りを使う	文字列.rpartition(セパレータ)[-1]
データフレームをグループ化しそれぞれの標準偏差を算出する	df.groupby('列A').std()
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
棒グラフをペールグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='palegreen')
ファイルパスをバイナリ書き込みモードでオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
カウンタの最も頻出な項目	aCounter.most_common()[0]
破線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dashed')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: スラグレーにグラフの色を指定する	color = 'slategray'
タイムスタンプデータを数値にする	aDatetime.timestamp()
グラフの用途をポスターに設定する	sns.set(context='poster')
option: チョコレートを使う	color = 'chocolate'
折れ線グラフの右三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
散布図に下三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
アイボリーにヒストグラムの色を変更する	plt.hist(データ列, color='ivory')
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
predicateFuncが真となる列の要素を取り出す	itertools.takewhile(predicateFunc, iterable)
リストの合計値を計算する	sum(リスト)
整数の十六進表現	hex(整数)
データ列の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
option: ダークシアンにグラフの色をする	color = 'darkcyan'
文字列の末尾からタブを取り除く	文字列.rstrip('\t')
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
Excelファイルファイルでデータフレームを書き出す	df.to_excel('file.xlsx')
線グラフの色をタンに変更する	plt.plot(データ列x, データ列y, color='tan')
散布図に上三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
ファイルから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
タイムスタンプデータにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
半透明の破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
y座標の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
ひとつでも非数字が文字列中にある	any(not c.isdigit() for c in 文字列)
線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
リストの推移を半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
行列の行を選択する	aArray[行番号]
ラベンダーブラッシュ色でヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
プラム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
追加できるようにファイルをオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
option: 紺碧にグラフの色を変更する	color = 'azure'
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 星マーカーを使う	marker = '*'
配列の幾何平均	scipy.stats.gmean(配列)
オリベドラブ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
データフレームのあるカラムの平均など	df['列A'].describe()
散布図の下三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データシリーズの中に日付データがあるかどうか調べる	ds.isin([value])
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
文字列を部分文字列によって二分する	文字列.partition(部分文字列)
数列とリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
双方向キューの先頭に数列の各要素を追加する	両端キュー.extendleft(数列)
変数xについて数式の積分を求める	sympy.integrate(数式, [|変数]x)
タプルをn回、加える	タプル * n
単位正方行列	np.identity(n)
カウンタのユニオン	aCounter | aCounter2
列をセットに追加する	セット.update(リスト)
四角マーカーを使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
データフレームの一部のカラムを1000の位で丸めて整数型にする	df[['列A', '列B']].round(-3).astype(int)
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
option: 青紫色を使う	color = 'violet'
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
散布図の菱形マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
配列をビン分割する	pd.cut(aArray, aList)
文字列の終了位置以前に部分文字列が存在するか調べる	文字列.find(部分文字列, 0, 終了位置) != -1
シーケンスを配列に変換する	np.array(iterable)
データシリーズが何秒か見る	ds.dt.second
option: スカイブルーを使う	color = 'skyblue'
折れ線グラフを青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列が別のに含まれるか	文字列 not in 別の文字列
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
折れ線グラフに△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
要素がタプルの要素でないかテストする	要素 not in タプル
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
ミディアムスレートブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
文字列の終了位置より前に部分文字列が含まれるか調べる	文字列.find(部分文字列, 0, 終了位置) != -1
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
２つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
5行をランダムにデータフレームから重複ありでサンプリングする	df.sample(5, replace=True)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
行列の列ごとの合計値	np.sum(aArray, axis=0)
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムを３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(df['列A'], 'norm')
大量のデータが正規分布か調べる	scipy.stats.kstest(配列, 'norm')
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: シスルにフォントの色を設定する	color = 'thistle'
SJISでデータフレームを保存する	df.to_csv('file.csv', encoding='shift_jis')
データフレームの選択したカラムの未入力値を最大値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
整数を整数で割ったmodを求める	整数 % 整数2
文字列の先頭から指定した文字を取り除く	文字列.lstrip(文字)
ダークオリーブグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
円グラフでデータ列の割合を描画する	plt.pie(データ列, startangle=90)
実数の指数部	math.frexp(x)[1]
データフレームの指定したカラムのNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
option: スラグレーを使う	color = 'slategray'
ライトサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='lightsalmon')
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの欠損値が含まれる箇所を色付けする	df.style.highlight_null()
eの実数乗	math.exp(x)
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をネイビーに設定する	color = 'navy'
option: フォントの色をサンディーブラウンに変更する	color = 'sandybrown'
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
散布図に青い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
xの出力を改行なしに行う	print(x, end='')
線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ユニークな値を要素とする配列	np.unique(aArray)
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
データフレームの指定したカラムの値が欠損値	df['列A'].isna()
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
ヒストグラムを紺碧色として描画する	plt.hist(データ列, color='azure')
日付データが日付データよりあとか	aDate > aDate2
データフレームの指定した列の母標準偏差	df['列A'].std(ddof=0)
キーが辞書にあるいるか調べる	キー in 辞書
ファイルパスを読み込み用に開く]	'r' = 'a'<nl>open(filepath, mode='r')
リストとリストの散布図を描画して、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
ヒストグラムの色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
散布図の四角印の色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
リストとリストについて散布図を描画し、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
散布図を右三角印を使って描画する	plt.scatter(データ列x, データ列y, marker='>')
option: 色を耐火レンガに設定する	color = 'firebrick'
データフレームのNaNを最小値で補う	df.fillna(df.min())
回帰分析をアンサンブル学習でする	sklearn.ensemble.VotingRegressor()
散布図に赤い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームのカラムを柱状グラフで描画する	plt.hist(df[column])
多い順にカウンタを列挙する	aCounter.most_common()
行列の和を見る	aArray + aArray2
イテラブルと配列についての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
option: ライトグリーンにグラフの色を変更する	color = 'lightseagreen'
辞書のキーの一覧	list(辞書)
ヒストグラムの色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
小数点以下'5'桁までを表示する	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
データフレームのカラムの一意な値	df[col].unique()
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
文字列がセットのメンバーか確認する	文字列 in セット
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
K最近傍法としてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
黄色い線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
マップからキーとその値を組として取り出す	辞書.items()
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データシリーズの中にいくつ日付データが含まれるか数える	ds.isin([value]).sum()
棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: 淡い茶色色を使う	color = 'tan'
配列を等間隔でn個に分割する	pd.cut(aArray, n)
上三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームのインデックス一覧を使う	df.index
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
文字列中にひとつでも小文字があるか	any(c.islower() for c in 文字列)
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
こんにちは世界をプリントする	print('Hello World')
グリッドの線スタイルを破線に変更する	plt.grid(linestyle='dashed')
ロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
アルファベットの文字列	string.ascii_letters
option: オレンジレッドを用いる	color = 'orangered'
配列をセットにする	set(配列)
ダークサーモン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームの選択したカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
浮動小数点数を小数点第一位で丸める	round(x, 1)
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
辞書のキーをひとつずつ処理する	for key in 辞書.keys():<nl><tab>print(辞書[key])  # FIXME
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
リストとデータ列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
オリーブ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
option: フォントの色をミディアムブルーにセットする	color = 'mediumblue'
現在が土曜日か判定する	datetime.datetime.today().weekday() == 5
列の各値の出現数	ds.value_counts()
配列を連結してひとつの文字列にする	''.join(map(str, 配列))
要素ひとつのタプルを作る	(要素,)
option: 線を細くする	linewidth = 3.0
カラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
データフレームの選択したカラムが正規分布からどの程度尖っているか確認する	df[['列A', '列B']].skew()
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームの一部のカラムの中にあるの個数を数える	df[['列A', '列B']].isin([value]).sum()
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
線グラフの線種を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの一部の列の欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データシリーズのNaNを最大値に指定する	ds.fillna(ds.max())
1からNまでの配列	np.arange(1, N+1)
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
option: シエナを使う	color = 'sienna'
データフレームの中に日付データがあるかどうか調べる	df.isin([value])
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgrey')
数式のxに別の数式を代入する	数式.subs([|変数]x, 数式2)
列の一意な値を見る	ds.unique()
option: ダーク・スラテグレーを用いる	color = 'darkslategrey'
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
エポック秒からタイムスタンプにする	datetime.datetime.fromtimestamp(timestamp)
散布図をバツマーカーを使用して描画する	plt.scatter(データ列x, データ列y, marker='x')
要素が辞書の値として含まれているか調べる	element in 辞書.values()
折れ線グラフに▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
イテラブルと配列の散布図に上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
ヒストグラムの色をペルーに変更する	plt.hist(データ列, color='peru')
option: 淡いピンク色色を用いる	color = 'lightpink'
整数のn乗	x ** n
データフレームの未入力値を後の行の値で補う	df.fillna(method='bfill')
日付時刻データが水曜日かどうか	aDatetime.weekday() == 2
データフレームを指定された列で集計する	df.groupby('列A')
プラム色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
option: グラフの色をブルーバイオレットに指定する	color = 'blueviolet'
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
数列とリストについての散布図に▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
カラムの数値時刻をdatetime64型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
あらかじめASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフをダークオーキッド色として描画する	plt.barh(データ列x, データ列y, color='darkorchid')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
整数が一桁の正の数か調べる	0 <= 整数 <= 9
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
リストを円グラフにする	plt.pie(データ列, startangle=90)
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
ファイルを書き込み用に文字列の示すエンコーディングとしてオープンする]	open(filepath, mode='w', encoding=s)
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
タプルの最初を捨てる	タプル[1:]
プロットの使途を画面に設定する	sns.set(context='notebook')
option: 読む行番号をnamesで指定する	usecols = names
プロットの背景色を白くする	sns.set(style='whitegrid')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
グラフの大きさを変更する	plt.figure(figsize=(横幅, 高さ))
条件が二つとも成り立つ	条件 and 条件2
カレントワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
SDGを用いて回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
option: ロードする行番号をnamesで指定する	usecols = names
整数同士の論理積	整数 & 整数2
整数2がn以上、かつ、n3以下か調べる	整数 <= 整数2 and 整数2 <= n3
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
長さの制限した両端キューをリストから作成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
黒い四角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
実数の余弦	math.cos(x)
ファイルを書き込みできるように開く]	'w' = 'a'<nl>open(filepath, mode='w')
カウンタをセットに変換する	set(aCounter)
黒い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
数で実数を整数除算する	x // y
データフレームの選択したカラムを百の位で丸めて、整数にする	df[['列A', '列B']].round(-2).astype(int)
青い▼マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
カーキ色としてヒストグラムを描画する	plt.hist(データ列, color='khaki')
セットから整数を除く	セット.remove(数)
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightseagreen')
全ての数字	string.digits
正規化したヒストグラムを描画する	plt.hist(データ列, density=True)
option: 上三角マーカーを描画する	marker = '^'
option: 色をホットピンクに設定する	color = 'hotpink'
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ヒストグラムの色をライトスレイグレーにする	plt.hist(データ列, color='lightslategray')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
線グラフの色をダークオーキッドにする	plt.plot(データ列x, データ列y, color='darkorchid')
イテラブルにシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
多次元データを主成分分析で要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
数列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムを点線として描く	plt.hist(データ列, linestyle='dotted')
両端キューの最初	両端キュー[0]
ポスター用にグラフを設定する	sns.set(context='poster')
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
データフレームのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
option: グラフの色を耐火レンガに変更する	color = 'firebrick'
option: データ型を指定する	np.int32 = np.int<nl>dtype = np.int32
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
文字列の開始位置先に部分文字列が存在するかどうか調べる	文字列.find(部分文字列, 開始位置) != -1
２つ並べてデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
縦棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
横棒グラフをサンディーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='sandybrown')
グラフの用途を画面に設定する	sns.set(context='notebook')
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
グラフの見た目をデフォルトでイイ感じにする	sns.set()
サドルブラウン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
アルファベットを全部使う	string.ascii_letters
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
分類モデルの再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
rgbの丸マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
小麦色にヒストグラムの色を指定する	plt.hist(データ列, color='wheat')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
縦棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
文字列を最後の区切り記号で二分して、残りを使う	文字列.rpartition(セパレータ)[-1]
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
n回だけ文字列を置換する	文字列.replace(部分文字列, 置換後の文字列, n)
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
変数名がクラスかどうか確認する	inspect.isclass(識別子)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
yについて偏微分を行う	sympy.diff(数式, y)
xがマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
オブジェクトは浮動小数点数	float = int<nl>isinstance(obj, float)
青緑色として線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
整数がタプルのどれかか調べる	aTuple = [0, 1, 2]<nl>整数 in aTuple
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
データフレームをあるカラムのカテゴリでグループ化する	df.groupby('列A')
データ列とリストについて散布図を描画し、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: NaNも含める	dropna = True
データフレームの選択したカラムの中にと文字列が存在する	df[['列A', '列B']].isin([value, value2])
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
表示可能な最大行数をnにセットする	pd.set_option('display.max_rows', n)
データフレームをある列によって大きい順にソートする	df.sort_values(by='列A', ascending=False)
二つの文字列をケースを無視して比較する	文字列.casefold() < 文字列2.casefold()
データフレームの選択したカラムの欠損値を50パーセンタイルに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
数式のyを指定された数式で置き換える	数式.subs(y, 数式2)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
浮動小数点数の自然対数	math.log(x)
option: ダークオレンジ色を使用する	color = 'darkorange'
タプルの要素を昇順に並べ変える	sorted(タプル, reverse=True)
表データを用いる	import pandas as pd
option: スカイブルー色を使う	color = 'skyblue'
等間隔でn個にデータフレームの中の列をビン分割する	pd.cut(df[col], n)
日付時刻データの秒数	aDatetime.second
表データのあるカラムの曜日数	df['列A'].dt.dayofweek
指定したカラムの標本標準偏差	df['列A'].std(ddof=1)
ヒストグラムの線の種類を実線に変更する	plt.hist(データ列, linestyle='solid')
option: 真紅色を使う	color = 'crimson'
エポック秒の列からタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
カテゴリ列で色付けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ダークレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
ダークスラテグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
option: グレーにグラフの色を設定する	color = 'grey'
破線でヒストグラムを描く	plt.hist(データ列, linestyle='dashed')
文字列を最後のコロンで二つに分け、、残りを使う	文字列.rpartition(':')[-1]
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
データフレームを百の位で丸めて、整数にする	df.round(-2).astype(int)
数式の因数分解を行う	sympy.factor(数式)
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
データシリーズの下位25％	ds.quantile(0.75)
両端キューから整数を取り除く	両端キュー.remove(整数)
データシリーズの欠損値を最小値に設定する	ds.fillna(ds.min())
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
全要素を０で初期化した３２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
option: 貝殻色を使う	color = 'seashell'
イテラブルから長さの制限された両端キューを作成する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図を濃いシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームのある列を万の位で丸める	df['列A'].round(-4)
カーネル密度分布図をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのNaNを最大値に設定する	df.fillna(df.max())
条件または条件	条件 and 条件2 and 条件3
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
項がセットに含まれない	要素 not in セット
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
ダークスラテグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームを散布図で可視化して、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ライトゴールドロディイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
文字列を最後の区切り記号で分けた場合の残りの文字列	文字列.rpartition(セパレータ)[-1]
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: フォレストグリーンに色をセットする	color = 'forestgreen'
折れ線グラフのダイアモンド印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
数式処理を使用する	import sympy
縦棒グラフを描画して棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
縦棒グラフをダークシアグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
縦棒プロットを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
表データが重複しているか調べる	df.duplicated()
横棒グラフをシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='cyan')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
ふたつの集合の差集合を算出する	セット.difference(セット2)
タプル中の要素が最初に見つかるインデックス	タプル.index(要素)
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
グラフの横軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
小数点数の正弦を算出する	math.sin(x)
アルファベットの大文字を全部見る	string.ascii_uppercase
二つの文字列が大文字小文字を無視して同じか	文字列.casefold() == 文字列2.casefold()
option: 四角マーカーを描画する	marker = 's'
文字列をエンコーディングを用いてバイト列に変換する	文字列.encode(encoding=encoding)
実行時の標準出力の出力先がターミナルかどうか確認する	sys.stdout.isatty()
散布図をスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームの最頻値	df.mode()
分類モデルの正解率を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
データ列の柱状グラフを描画する	plt.hist(データ列)
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
実数の逆双曲線余弦を求める	math.acosh(x)
スタックの最初に文字列を入れる	両端キュー.appendleft(文字列)
実数が負か調べる	x < 0
折れ線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
区間から配列	np.linspace(最小値, 最大値, 要素数)
ファイル入力からJSONを読み込む	json.load(ファイル入力)
文字列をスタックのn番目に挿入する	両端キュー.insert(n, 文字列)
整数が負の整数かどうか	整数 < 0
ヒストグラムを真紅色で描画する	plt.hist(データ列, color='crimson')
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
重回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームをグループ化し、それぞれの合計を算出する	df.groupby('列A').sum()
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
横棒グラフをミディアムオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
インデントを指定して辞書をJSON文字列にする	json.dumps(辞書, ensure_ascii=False, indent=n)
ファイルからの入力ストリームを使う	open(filepath)
リストが空か調べる	len(リスト) == 0
データフレームの指定したカラムの代表値	df['列A'].describe()
カテゴリ別で色分けして、データフレームの全カラムの散布図をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
イテラブルを累加する	itertools.accumulate(iterable)
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
データフレームの指定したカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
データシリーズの欠損値を最大値に指定する	ds.fillna(ds.max())
グラフで用いる縦軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
平均値付き箱髭図を描画する	plt.boxplot(データ列, showmeans=True)
文字列はセットのいずれかどうか調べる	文字列 in セット
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
十六進数字を全部使う	string.hexdigits
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
option: n番目のカラムを行に指定する	index_col = n
空の集合	set()
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
変数名は抽象クラスか確認する	inspect.isabstract(識別子)
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
サポートベクターマシンとして回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データ列とリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データシリーズが何月か調べる	ds.dt.month
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
キューの最大長	両端キュー.maxlen
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データシリーズの中にがある	ds.isin([value])
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: ティールを用いる	color = 'teal'
イテラブルを2回あわせたデカルト積を算出する	itertools.product(iterable, repeat=2)
option: グラフの色をフクシアにセットする	color = 'fuchsia'
データフレームのあるカラムが何秒か見る	df['列A'].dt.second
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
option: バイオレットにグラフの色を設定する	color = 'violet'
タイムスタンプデータの月数を求める	aDatetime.month
回帰モデルをクロスバリデーションする	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ライトスレイグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
n個に配列をビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: グラフの色を茶色に変更する	color = 'brown'
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームを２つの列によってまとめた表を使う	df.groupby(['列A', '列B'])
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
option: バッファを使わない	buffering = 0
データフレームのあるカラムは何曜日か知る	df['列A'].dt.weekday_name
ロバストな線形モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
option: アリスブルーを用いる	color = 'aliceblue'
データフレームの指定した列名一覧の列のみ抽出する	columns = ['列A', '列B']<nl>df[columns]
ミディアムパープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
ファイルから1バイト、読み込む	f.read(1)
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
表データのあるカラムが何秒か見る	df['列A'].dt.second
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
タプル中の最初の要素を探す	タプル.index(要素)
二つのデータフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
データフレームを二つの列の値によってグループ化し、要約統計量を計算する	df.groupby(['列A', '列B']).describe()
マルーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
文字列の末尾から部分文字列を除く	文字列.rstrip(部分文字列)
横棒プロットの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
配列のデータ型を求める	aArray.dtype()
データシリーズのどの値が頻出か調べる	ds.mode()
文字をユニコードに変換する	ord(文字)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
option: 先頭の行をカラムの名前に指定する	header = 0
棒グラフを淡いピンク色色を用いて描画する	plt.bar(データ列x, データ列y, color='lightpink')
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
指定した列の値で集計し、標準偏差を求める	df.groupby('列A').std()
データフレームのあるカラムの中に日付データと日付データがいくつあるか調べる	df['列A'].isin([value, value2]).sum()
ブランチドアーモンド色を使ってヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データ列をフォーマットで日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
option: 複素数型を用いる	bool = np.int<nl>dtype = bool
整数のバイト長を確認する	(整数.bit_length() + 7) // 8
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ヒストグラムの色をゴールデンロッドに指定する	plt.hist(データ列, color='goldenrod')
日付データの年を使う	aDate.year
セットからエラーなく項を取り除く	セット.discard(要素)
データフレームのあるカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
降順で行でデータフレーム全体をソートする	df.sort_index(ascending=False)
整数が1もしくは2か調べる	整数 == 1 or 整数 == 2
option: マーカーをダイアモンドに変える	marker = 'D'
文字列中に非アルファベットが含まれるか調べる	any(not c.isalpha() for c in 文字列)
ファイルをEUCでオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
整数はリストのどれかかどうか調べる	aList = [0, 1, 2]<nl>整数 in aList
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
異なるカラムをキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
プロットの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
セットからエラーなく文字列を取り除く	セット.discard(文字列)
行列の行ごとの最小値を使う	np.min(aArray, axis=1)
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
グラフを論文に指定する	sns.set(context='paper')
データフレームのパーセンタイルを求める	df.quantile(パーセント/100)
黒い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
option: エンコーディングをUTF8にセットする	encoding = 'utf-8'
線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
線形回帰モデルの切片	model.intercept_
変数の値を半分にする	変数 /= 2
で表の相関行列を算出する	df.corr(method='kendall')
スプリンググリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームの選択したカラムの欠損値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
データシリーズの中の欠損値の合計を数える	ds.isna().sum()
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
x,y,zを順に表示する	print(x, y, z)
データフレームを表示するとき表示できる最大行数をnに設定する	pd.set_option('display.max_rows', n)
赤い実線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
キューの最初に文字列を追加する	両端キュー.appendleft(文字列)
黒い上三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: 出力先を標準エラーに変更する	file = sys.stderr
折れ線グラフを実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの選択した列の値が欠損値	df[['列A', '列B']].isna()
option: グラフの色をグリーンにする	color = 'green'
双方向キューの右に要素を付け加える	両端キュー.append(要素)
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
ユークリッド距離	math.dist(point, point2)
トマト色としてヒストグラムを描画する	plt.hist(データ列, color='tomato')
option: 線の種類を破線に設定する	linestyle = 'dashed'
線形モデルの係数	model.coef_
重回帰モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
昇順にリストの要素をソートする	sorted(リスト, reverse=True)
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
ファイルから1文字、読み込む	f.read(1)
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
空文字を使う	''
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
整数の順列の総数を求める	math.perm(n)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
ライトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightblue')
タプルを引数として展開して表示する	print(*タプル)
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
リストとデータ列についての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
縦棒グラフを描画して、バーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
日付時刻データが金曜日か	aDatetime.weekday() == 4
リストとリストについて散布図をプロットし、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
JSON形式の文字列を辞書に変換する	data = json.loads(文字列)
線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
双方向キューに文字列をプッシュする	両端キュー.append(文字列)
改行で区切ってxとyをプリントする	print(x, y, sep='\n')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
環境がLinuxか	sys.platform.startswith('linux')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
表示できる行数をnに設定する	pd.set_option('display.max_rows', n)
option: 欠損値も含める	dropna = True
カーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
y軸だけグリッド線	plt.grid(axis='y')
小数点数の余弦の逆数を求める	x = 0.33<nl>math.acos(x)
リストの各要素を関数に適用した結果で並べ変える	sorted(リスト, key=func)
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
文字列の左側がsubか調べる	文字列.startswith(部分文字列)
文字列中にひとつも空白が含まれないか調べる	any(not c.isspace() for c in 文字列)
option: マゼンタ色を使う	color = 'magenta'
フクシア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
左三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
棒グラフをオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='orange')
片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
文字列をISO書式を用いてタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの要約統計量を求める	df.describe()
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
データをインデントを指定してJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
option: ターコイズを用いる	color = 'turquoise'
ミディアムパープル色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
xとyを文字列で区切って表示する	print(x, y, sep=s)
文字列中の部分文字列を新しい文字列に置換する	文字列.replace(部分文字列, 置換後の文字列)
ライトスチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームの指定した列が正規分布からどれだけ、尖っているか見る	df['列A'].skew()
データフレームをある列をキーにして昇順にソートする	df.sort_values(by='列A', ascending=True)
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
イテラブルの重複組み合わせを得る	itertools.combinations_with_replacement(iterable, n)
異なる列をキーにしてデータフレームを結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
文字列は全て数値か調べる	文字列.isnumeric()
三自然数の最大公約数を求める	math.gcd(n, n2, n3)
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフの四角印を青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データ列を複数並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列を区切り記号で二分して、前半を使う	文字列.partition(セパレータ)[0]
配列と配列リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
option: サンディーブラウン色を使用する	color = 'sandybrown'
文字列をプリントする	print(文字列)
プロットの色を濃くする	sns.set(pallete='deep')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
縦棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームのカラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
データフレームの一部の列の欠損値を最大値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データフレームのある列をリストとして選択する	df['列A'].values.tolist()
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
散布図をフローラルホワイト色として描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
x,yの複素数を算出する	complex(x, y)
カウンタからゼロカウントを取り除く	+aCounter
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
エンコーディング	sys.getdefaultencoding()
変数名をキーとしてマップ	dict(name='kogi', age=6)
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
カウンタの文字列数	len(aCounter)
双方向キューの長さ	len(両端キュー)
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフをグリーンイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='greenyellow')
数式を変数についてn階微分する	sympy.diff(数式, 変数, n)
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
標準エラーを使用する	sys.stderr
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
浮動小数点数を切り上げる	math.ceil(x)
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
option: 印を大バツに変更する	marker = 'X'
ファイルに文字列を書き込む	s = ''<nl>f.write(s)
数列の各データを両端キューの先頭に追加する	両端キュー.extendleft(数列)
グラフのテーマをパステル調にする	sns.set(pallete='pastel')
折れ線グラフの菱形マーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
グラフで使用するx座標にラベルを付ける	plt.xlabel('x軸ラベル')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
オリーブ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
縦棒グラフをミスティローズ色を使って描画する	plt.bar(データ列x, データ列y, color='mistyrose')
option: 青色を使用する	color = 'blue'
散布図の星マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
散布図をブルーバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
データフレームのあるカラムが何分か見る	df['列A'].dt.minute
データシリーズを100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームをグループ化し各分散を算出する	df.groupby('列A').var()
y座標だけ目盛線	plt.grid(axis='y')
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
標準入力から1行読む	sys.stdin.readline()
データ列の折れ線グラフを星印として描画する	plt.plot(データ列x, データ列y, marker='*')
代数計算モジュールを使う	import sympy
線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: グラフの色をアクアに設定する	color = 'aqua'
散布図を青色として描画する	plt.scatter(データ列x, データ列y, color='blue')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
タプルの最後を取り除く	タプル[:-1]
大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X')
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
option: ▽印を描画する	marker = 'v'
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
散布図をブラウン色で描画する	plt.scatter(データ列x, データ列y, color='brown')
レベッカパープル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
文字列を小文字に変換する	文字列.casefold()
ある列の値がxより大きく、yより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
タプルをひとつ置きに取り出す	タプル[::2]
ヒストグラムの色をタンにセットする	plt.hist(データ列, color='tan')
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
日付データが何月か知る	aDate.month
数値がセットに含まれるかどうか調べる	数 in セット
双方向キューをセットに変換する	set(両端キュー)
10を底とする対数	math.log10(x)
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
整数の2分の一	整数 / 2
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ソートしてリストをJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
プロットを画面に設定する	sns.set(context='notebook')
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
リストの最初を見る	リスト[0]
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
配列のスピアマンの相関係数を計算する	scipy.stats.spearmanr(配列, 配列2)
グラフを用いる	import matplotlib.pyplot as plt
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
OSはWindowsか調べる	sys.platform.startswith('win32')
データ列の変遷を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
リストと配列について散布図をプロットし、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
タプルを連結する	タプル + タプル2
折れ線グラフに▲印を加える	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色を青紫に変更する	color = 'violet'
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
ふたつの条件がいずれか成り立つ	条件 or 条件2
データフレームのあるカラムの母標準偏差	df['列A'].std(ddof=0)
事前に正規表現をコンパイルする	re.compile(pattern)
データフレームの指定した列を10の位で丸める	df['列A'].round(-1)
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: フォントの色をスラグレーに指定する	color = 'slategrey'
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
xを黄色化する	f'\033[33m{x}\033[0m'
リストから行列を作る	np.array(aList)
を小さくする	変数 -= 整数
変数の出力を改行せず行う	print(変数名, end='')
データシリーズの第三四分位数	ds.quantile(0.75)
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
深紅色として線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
option: カンマをセパレータで使う	sep = ','
文字列が全て数字か	文字列.isdigit()
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
右三角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
整数の八進数文字列を使う	oct(整数)[2:]
トマト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
複数のシートを指定して表計算からデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
分割数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
数列をセットに変換する	set(数列)
カテゴリで色付けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
列をカテゴリデータに変換する	ds.astype(object)
フォーマットで列をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
横棒グラフをダークオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkorange')
現在が何月か知る	datetime.datetime.today().month
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(配列)
茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
異なる列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
データシリーズの50パーセンタイル	ds.median()
標準入力を使う	sys.stdin
文字列をJSONフォーマットとして出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
有理数の分母	q.denominator
文字列の開始位置以降がsubで始まるか	文字列.startswith(部分文字列, 開始位置)
データフレームのある列をワンホット・ベクトルにする	pd.get_dummies(df['列A'])
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
year年の日付	datetime.date(year=year, month=1, day=1)
実数を実数で除算して、切り捨てる	x // y
ヒストグラムの色をダークブルーに指定する	plt.hist(データ列, color='darkblue')
横棒グラフをフクシア色として描画する	plt.barh(データ列x, データ列y, color='fuchsia')
predicateFuncがTrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
あるカラムを1000の位で四捨五入して、整数型にする	df['列A'].round(-3).astype(int)
浮動小数点数で実数を割って、小数点以下を切り捨てる	x // y
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
赤い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列が空白文字か	文字列.isspace()
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
型が名前付きタプル	issubclass(C, tuple)
カウンタの最も頻出な項目を求める	aCounter.most_common()[0]
グラフのデータラベルの場所を(x,y)に設定する	plt.legend(loc=(x, y))
ヒストグラムをオールドレース色を用いて描画する	plt.hist(データ列, color='oldlace')
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
両端キューの中に文字列が含まれてる	文字列 in 両端キュー
黒いバツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームをあるカラムでグループ化し要約統計量を求める	df.groupby('列A').describe()
option: 紺碧を用いる	color = 'azure'
整数がリストのどれかかどうか調べる	aList = [0, 1, 2]<nl>整数 in aList
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
整数の2分の一を求める	整数 / 2
数列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
イテラブルと配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
散布図の色を濃いシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
色調を暗くする	sns.set(pallete='dark')
日付データが火曜日か調べる	aDate.weekday() == 1
四分位点を用いてスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
文字列をユニコード列に変換する	[ord(ch) for ch in 文字列]
縦棒グラフを描いて、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
やわらかい青色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: グラフの線の幅を3.0ポイントにセットする	linewidth = 3.0
文字列の中で正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s)
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
ファイルをバイナリ書き込みモードとしてオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
データフレームの列のリスト	df.info()
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
option: フォントの色をライトスレイグレーに変更する	color = 'lightslategrey'
データフレームからある列の名前一覧の列を抽出する	columns = ['列A', '列B']<nl>df[columns]
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
横棒グラフをアクア色を用いて描画する	plt.barh(データ列x, データ列y, color='aqua')
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図を黒いバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='k')
いつまでも数え上げる	itertools.count()
整数がセットのいづれかか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
データフレームから型リストで指定したデータ型の列のみ選択する	df.select_dtypes(include=typeList)
ベクトルの最小	np.min(aArray)
線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
二つ並べてデータ列を柱状グラフにする	plt.hist([データ列, データ列], color=['b', 'r'])
空の回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
整数を8進数表記に変換する	oct(整数)
タブ区切りのファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
ふたつの整数の積	整数 * 整数2
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
データフレームの列の種類を確認する	df.info()
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
直前の値でデータフレームの一部の列の未入力値を置換する	df[['列A', '列B']].fillna(method='ffill')
ソートして辞書をJSONフォーマットにエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
option: ブランチドアーモンドにグラフの色を変更する	color = 'blanchedalmond'
option: ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
折れ線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
最初の部分文字列によって文字列を二分する	文字列.partition(部分文字列)
多次元データを主成分分析を使って整数次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
リストと数列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
データフレームは正規分布からどの程度尖っているか見る	df.skew()
文字列を文字リストにする	list(文字列)
文字列のn番目	文字列[n]
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
折れ線グラフを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームの中にいくつ欠損値があるか求める	df.isna().sum()
ファイルパスを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
配列のn次モーメントを使う	scipy.stats.moment(配列, moment=n)
欠損値がある行をドロップし、みる	df.dropna()
option: アンティークホワイトにフォントの色を設定する	color = 'antiquewhite'
四分位点としてデータをスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームのある列の不偏標準偏差	df['列A'].std()
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
指定したカラムの未入力値を中央値にセットする	df['列A'].fillna(df['列A'].median())
option: 出力先をファイルに変更する	file = sys.open('file.txt', 'w')
折れ線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
実行中のメソッド名を得る	inspect.currentframe().f_code.co_name
８進数字を全部使う	string.octdigits
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームの相関行列をとして求める	df.corr(method='kendall')
データフレームから同じ内容のデータを削除する	df.drop_duplicates(inplace=True)
ファイルパスを追加モードを用いてオープンして]fとする	f = open(filepath, mode='a')
データフレームのあるカラムをインプレイスでドロップする	df.drop('列A', axis=1, inplace=True)
文字列の中で複数行対応として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
文字列中に大文字がないか確認する	any(not c.isupper() for c in 文字列)
データフレームの選択した列の文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
データシリーズの欠損値を最頻値で置換する	ds.fillna(ds.mode().iloc[0])
あるカラムの値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
データフレームの選択した列の中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
書式としてカラムを日付データにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
データフレームの列の中に文字列と文字列があるか確認する	df['列A'].isin([value, value2])
数のn乗	x ** n
折れ線グラフの菱形マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ふたつの辞書を合体する	辞書 | 辞書2
小数点数の逆正弦を求める	math.asin(x)
文字列が識別子かどうか確認する	文字列.isidentifier()
JSON形式としてデータを指定されたファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
ダークターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
線グラフの色をダークオレンジに指定する	plt.plot(データ列x, データ列y, color='darkorange')
ファイルをBOM付きでオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
小数点以下'3'桁までを表示する	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
散布図をシアン色として描画する	plt.scatter(データ列x, データ列y, color='cyan')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
option: フォントの色をダークグレーに設定する	color = 'darkgray'
実数の仮数	math.frexp(x)[0]
文字列の接尾辞がか	文字列.endswith(部分文字列)
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
RANSACとして回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームのある列の値がx以下のデータを抽出する	df[df['列A'] <= x]
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
文字列を最後の区切り文字で分割して、最初の方を見る	文字列.rpartition(セパレータ)[0]
option: ダークバイオレット色を使用する	color = 'darkviolet'
表データのあるカラムの月	df['列A'].dt.month
右三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='>')
データフレームを並べ直して下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
本日の月数	datetime.datetime.today().month
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
行列の行ごとの最小	np.min(aArray, axis=1)
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ふたつの集合の積集合を求める	セット.intersection(セット2)
箱髭図を描き、、平均値を加える	plt.boxplot(データ列, showmeans=True)
BOM付きで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
識別子はトレースバック	inspect.istraceback(識別子)
データフレームのカラムの第三四分位数	df['列A'].quantile(0.75)
データフレームのNaNを中央値に設定する	df.fillna(df.median())
ある列毎の最小値	df.groupby('列A').min()
既存のファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
データフレームを２つの列毎にグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
ファイルパスを文字列の示す文字コードとしてオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
数式を数値に変換する	float(数式)
1からNまでの行列を作る	np.arange(1, N+1)
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: 読み込まないフッタをnに指定する	skipfooter = n
ファイルを文字コードtextでオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
文字列をコロンで区切って、文字列リストに変換する	文字列.split(':')
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
option: 色をスカイブルーにする	color = 'skyblue'
バギングとしてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
指定した列の値でデータフレームをグループ化し、記述統計量を求める	df.groupby('列A').describe()
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
リストを２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
変数について数式の積分を計算する	sympy.integrate(数式, 変数)
円グラフを真円にする	plt.axis('equals')
列を2回あわせたデカルト積を得る	itertools.product(iterable, repeat=2)
コロンで区切ってxとyを表示する	print(x, y, sep=':')
xを白色でプリントできる文字列に変換する	f'\033[37m{x}\033[0m'
線グラフをダークバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
ビン数nで等量でデータ列をビン分割する	pd.qcut(ds, n)
リストをナンバリングする	enumerate(リスト)
散布図の三角印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
JSON形式の入力ストリームを辞書にする	json.load(ファイル入力)
散布図のクロスマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
リストから両端キューを作る	collections.deque(リスト)
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
リスト中の要素が最初に見つかるインデックス	リスト.index(要素)
行列の各要素に加算する	aArray + aArray2
二つの整数の和	整数 + 整数2
散布図のダイアモンドマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームを関数の値によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
option: リネンにフォントの色を設定する	color = 'linen'
散布図のポイントマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
option: スラグレー色を使う	color = 'slategrey'
option: 色をスカイブルーに変更する	color = 'skyblue'
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ゴミ集めの参照カウント	sys.getrefcount(オブジェクト)
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
option: グラフの色をサーモンにセットする	color = 'salmon'
option: ライトスレイグレーを使う	color = 'lightslategray'
文字列の後半から部分文字列を探す	文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列リストを連結してひとつの文字列にする	''.join(文字列)
ダークサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='darksalmon')
セットから別のセットとの共通要素を全て取り除く	セット.symmetric_difference_update(セット2)
データをJSON形式でファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
イテラブルの長さnの順列	itertools.permutations(iterable, n)
散布図のダイアモンドマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
縦棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
浮動小数点数を万の位で丸める	round(x, -4)
ある列は正規分布からどの程度尖っているか見る	df['列A'].skew()
タプルをベクトルに変換する	np.array(iterable)
散布図の下三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
リストをダミー変数に変換する	pd.get_dummies(リスト)
等量でリストをn個にビニングする	pd.qcut(aList, n)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ふたつの集合の∪	セット.union(セット2)
データシリーズの曜日	ds.dt.weekday_name
文字コードtextとしてファイルを開く]	text = 'utf-8'<nl>open(filepath, encoding=text)
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
option: デピンク色を使う	color = 'deeppink'
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
あるカラムの中に文字列と文字列がいくつあるか調べる	df['列A'].isin([value, value2]).sum()
入力から二つの文字列を読む	A, B = map(str, input().split())
線グラフを赤い実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
パウダーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
整数がnの倍数でない	整数 % n != 0
線グラフの色をホワイトスモークにセットする	plt.plot(データ列x, データ列y, color='whitesmoke')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
option: グラフの色をシルバーに変更する	color = 'silver'
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
option: 色をナバホホワイトに変更する	color = 'navajowhite'
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
nでシードを固定する	random.seed(n)
データ列を箱ひげ図で可視化する	plt.boxplot(データ列)
文字列が全て空白文字かどうか調べる	文字列.isspace()
ファイルを文字コードtextとしてオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
配列とイテラブルの散布図を描画し、、マーカーをクロスにセットする	plt.plot(データ列x, データ列y, marker='x')
要素はセットに含まれる	要素 in セット
折れ線グラフの下三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
グラフのx軸を対数目盛に変更する	plt.xscale('log')
データをJSONフォーマットの文字列にする	json.dumps(データ, ensure_ascii=False)
スプリンググリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
ハローワールドと出力する	print('Hello World')
今日が金曜日か	datetime.datetime.today().weekday() == 4
データフレームから1つの列のみ抽出する	df[['列A']]
折れ線グラフにバツ印を加える	plt.plot(データ列x, データ列y, marker='x')
option: エラーがあるとき、例外を発生させる	errors = 'strict'
文字列を文字コードエスケープでバイト列に変換する	文字列.encode(encoding='unicode_escape')
新しいヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
実数が整数かどうか	x.is_integer()
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
JSON形式を用いて文字列を出力ストリームにダンプする	json.dump(文字列, ファイル出力, ensure_ascii=False)
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
実数の逆双曲線正接を計算する	math.atanh(x)
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
リストと数列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
赤い破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ゴーストホワイト色でヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
FIXME:カテゴリーデータを出現頻度順にソートする	df['列A'].value_counts().sort_index().index
データシリーズの母標準偏差を求める	ds.std(ddof=0)
整数の三乗	整数 ** 3
数列と配列についての散布図に黒い△マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
ある列の文字列に部分文字列が含まれない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
データフレームの指定したカラムの値が欠損値か調べる	df['列A'].isna()
折れ線グラフの左三角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
インデントを指定して文字列をJSON文字列に変換する	json.dumps(文字列, ensure_ascii=False, indent=n)
浮動小数点数を千の位で四捨五入する	round(x, -3)
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: ホットピンクを用いる	color = 'hotpink'
縦軸の目盛を対数に変更する	plt.yscale('log')
文字列をバイト配列にする	bytearray(s)
データシリーズをValueMapでまとめて置き換える	ds.replace(ValueMap)
線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
線グラフの色をライトコーラルにセットする	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの列を指定して重複を削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
ライトサーモン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
nから始まる無限数列を求める	itertools.count(start=n)
縦棒プロットを描画し、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
range関数の無限バージョン	itertools.count(start=n, step=step)
ファイルパスをオープンして]、バイナリ書き込みストリームを求める	'wb' = 'a'<nl>open(filepath, mode='wb')
改行せずxをプリントする	print(x, end='')
正規分布を判定する	scipy.stats.shapiro(配列)
option: マゼンタ色を用いる	color = 'magenta'
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
イテラブルの要素を	''.join(map(str, イテラブル))
xをシアンで表示できる文字列に変換する	f'\033[36m{x}\033[0m'
横棒グラフをクリムゾン色として描画する	plt.barh(データ列x, データ列y, color='crimson')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
整数が1、もしくは2、もしくは3に等しいかテストする	整数 == 1 or 整数 == 2 or 整数 == 3
n進数文字列をバイナリにする	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
散布図に菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
異なる列をキーとしてデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
常用対数を求める	math.log10(x)
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(数式, 変数, oo)
ロードしたモジュールの一覧	sys.modules
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
オリベドラブ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
２つの文字列を表示する	print(文字列, 文字列)
横棒グラフを青色を使って描画する	plt.barh(データ列x, データ列y, color='blue')
イテラブルと配列について散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
実行中の関数名	inspect.currentframe().f_code.co_name
白色でxをプリントする	print(f'\033[37m{x}\033[0m')
要素がタプルに含まれる	要素 in タプル
小数点以下'3'桁の文字列にする	':.3f'.format(x)
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
ダークカーキ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフの▼マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームの末尾100行を選択する	df.tail(100)
データフレームをソートして新しい行を加える	df.sort_values('キーとなる列').reset_index()
データフレームの選択した列を百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
上限指定をした配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
分子と分母から分数を新規生成する	fractions.Fraction(分子, 分母)
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
option: フォントの色をダークオーキッドにする	color = 'darkorchid'
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
ファイルパスの入力ストリームを使う	open(filepath)
線グラフをサンディーブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフに青い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフの△マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: バイナリ書き込みモードに指定する	mode = 'wb'
option: 配列のデータ型を指定する	np.int16 = np.int<nl>dtype = np.int16
ベクトルの行ごとの合計	np.sum(aArray, axis=1)
文字列中に部分文字列がいくつか含まれるか数える	文字列.count(部分文字列)
辞書をJSONフォーマットとして出力ストリームに出力する	json.dump(辞書, ファイル出力, ensure_ascii=False)
線グラフの色をミディアムアクアマリンにセットする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムを赤色を用いて描画する	plt.hist(データ列, color='red')
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
option: フォントの色をコーンフラワーブルーにセットする	color = 'cornflowerblue'
リストからランダム複数個に選んでリストにする	random.choices(リスト, k=n)
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
浮動小数点数以上の最小の整数を計算する	math.ceil(x)
濃い青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
二つの集合の対称差集合	セット.symmetric_difference(セット2)
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
文字を文字コードにする	ord(文字)
表データを使う	import pandas as pd
マッピングのキーを要素に設定する	辞書[キー] = element
散布図をシエナ色を用いて描画する	plt.scatter(データ列x, データ列y, color='sienna')
現在が木曜日か調べる	datetime.datetime.today().weekday() == 3
両端キューがほしい	両端キュー = collections.deque()
文字列の中の大文字・小文字を無視してパターンによる全マッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をカデットブルーにする	plt.plot(データ列x, データ列y, color='cadetblue')
シエナ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
配列の列ごとの平均値	np.mean(aArray, axis=0)
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
整数がセットのメンバーでないか調べる	数 not in セット
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
リストと数列の散布図を描画して、マーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
ヒストグラムをオーキッド色を用いて描画する	plt.hist(データ列, color='orchid')
リストをJSON形式を用いてファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
リストに別のリストを展開する	リスト.extend(リスト2)
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
リネン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
今日が月曜日か判定する	datetime.datetime.today().weekday() == 0
辞書の項目名をリストに変換する	list(辞書.keys())
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
データシリーズの標本標準偏差	ds.std(ddof=1)
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
文字列を回数制限して置換する	文字列.replace(部分文字列, 置換後の文字列, n)
現在の時間数	datetime.date.today().hour
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
文字列がセットのメンバー	文字列 in セット
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
option: 決定木の深さを制限する	maxdepth = n
データフレームの指定した列を百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
文字列をインデントを指定してJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
変数名はジェネレータ関数か	inspect.isgeneratorfunction(識別子)
整数が整数2より大きい	整数 > 整数2
折れ線グラフの色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
リストと配列について散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフにバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
セットから例外なく文字列を取り除く	セット.discard(文字列)
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
縦棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
xを黄色でプリントできる文字列に変換する	f'\033[33m{x}\033[0m'
多次元尺度構成法で多次元データを要素次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
x軸とy軸の比率を等しくする	plt.axis('equals')
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
データ列をヒストグラムにする	plt.hist(データ列)
文字列が別のにあるか調べる	文字列 not in 別の文字列
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
option: オリーブにグラフの色を設定する	color = 'olive'
ヒストグラムの色をピンクにする	plt.hist(データ列, color='pink')
変数xについて数式の積分を算出する	sympy.integrate(数式, [|変数]x)
リストとリストについて散布図を描画して、マーカーを▽に指定する	plt.plot(データ列x, データ列y, marker='v')
option: 色をミッドナイトブルーに設定する	color = 'midnightblue'
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
変数の値を改行なしに表示する	print(変数名, end='')
カウンタを高頻出な方から列挙する	aCounter.most_common()
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
ダーク・スラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
option: 文字列をセパレータで使用する	sep = s
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
日付データが日曜日か調べる	aDate.weekday() == 6
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
option: 全体を計算対象にする	axis = None
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
浮動小数点数を万の位で四捨五入する	round(x, -4)
イテラブルの変化を赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
xの小数点以下'5'桁まで表示する	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
全要素を0で初期化した配列を作る	np.zeros(要素数)
否定する	not 条件
JSONフォーマットとして文字列をファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
散布図のマーカーをクロス印にする	plt.scatter(データ列x, データ列y, marker='x')
３つの数値を出力する	print(数値, 数値, 数値)
文字列を最初のコロンで二つに分けて後ろの方を使う	文字列.partition(':')[-1]
折れ線グラフをブラック色を用いて描画する	plt.plot(データ列x, データ列y, color='black')
リストから複数個ランダムに選んでリストにする	random.choices(リスト, k=n)
データフレームをあるカラムで小さい順に並べて、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ひとつでも非数字が文字列中に存在する	any(not c.isdigit() for c in 文字列)
整数2がn以上、かつn3以下	整数 <= 整数2 and 整数2 <= n3
実数で実数を割って、切り捨てる	x // y
アリスブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
未入力値が存在する行をドロップする	df.dropna(inplace=True)
デピンクにヒストグラムの色を指定する	plt.hist(データ列, color='deeppink')
文字列の末尾から部分文字列を取り除く	文字列.rstrip(部分文字列)
棒グラフをドジャーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: グラフの色をダークゴールデンロッドにセットする	color = 'darkgoldenrod'
淡いピンク色色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
xの小数点以下'4'桁までをプリントする	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
データシリーズのパーセンタイルを算出する	ds.quantile(パーセント/100)
ローングリーン色でヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
option: マーカーを星に変更する	marker = '*'
文字列をセパレータで二分して、残りを求める	文字列.partition(セパレータ)[-1]
ライトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
標準入力から入力される	input()
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
小数点以下'3'桁までの文字列にする	':.3f'.format(x)
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームの列の各値は何回出現するか見る	df[col].value_counts()
ひとつでも空白が文字列中に存在するか調べる	any(c.isspace() for c in 文字列)
データフレームの指定した列を丸める	df['列A'].round()
カウンタの正の数のみ残す	+aCounter
最大値・最小値の範囲として一様な疑似乱数を求める	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
辞書内の値をリストとして	list(辞書.values())
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
上位集合	セット.issuperset(セット2)
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
キューに整数をプッシュする	両端キュー.append(整数)
option: ライトグリーンを使用する	color = 'lightgreen'
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in 文字列)
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
option: ミスティローズを使用する	color = 'mistyrose'
空白で文字列を二分する	文字列.partition()
option: グラフの色をライトシアンに変更する	color = 'lightcyan'
option: ライトグリーンを使用する	color = 'lightseagreen'
データフレームの全カラムを散布図で描画する	sns.pairplot(df)
option: バツ印を使う	marker = 'x'
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
半透明の点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
日付時刻データが日付時刻データより前	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
両端キューから最初の整数を取り除く	両端キュー.remove(整数)
文字列が別のに含まれるか確認する	文字列 not in 別の文字列
線グラフの色をディムグレーにする	plt.plot(データ列x, データ列y, color='dimgray')
オブジェクトはコードか調べる	inspect.iscode(オブジェクト)
横棒グラフをビスク色を用いて描画する	plt.barh(データ列x, データ列y, color='bisque')
ファイルをSJISとしてオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
ダークグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
文字列を左寄せする	文字列.ljust(文字列幅)
セットから任意の要素を取り出す	セット.pop()
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
option: 色をダークシアグリーンにセットする	color = 'darkseagreen'
データフレームの一部のカラムの上位25％を算出する	df[['列A', '列B']].quantile(0.25)
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームのある列の値がxより小さい行を抽出する	df[df['列A'] < x]
文字列の無限列	itertools.repeat(element)
ファイルをSJISで書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
改行によって文字列を区切る	文字列.splitlines()
文字列を最後のカンマで二分し、残りを使う	文字列.rpartition(',')[-1]
計算結果を改行なしにプリントする	print(式, end='')
横棒グラフをデピンク色として描画する	plt.barh(データ列x, データ列y, color='deeppink')
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
行列の和を求める	aArray + aArray2
option: ファイルを出力にする	file = sys.open('file.txt', 'w')
整数∉セット	数 not in セット
タプルの要素をソートする	sorted(タプル)
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
文字コードに相当する文字を求める	chr(文字コード)
option: シスル色を使う	color = 'thistle'
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
データフレームの指定したカラムの中の欠損値の個数を数える	df['列A'].isna().sum()
データフレームを二つのカラムのカテゴリによってグループ化する	df.groupby(['列A', '列B'])
二つのリストを接続する	リスト + リスト2
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
整数の8分の一	整数 / 8
リストとリストについて散布図を描画してマーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
今日の日付時刻	datetime.datetime.today()
空文字列	''
数を百の位で四捨五入する	round(x, -2)
散布図をホワイトスモーク色として描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームをグループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色をタンに設定する	color = 'tan'
パールゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
色調を濃くする	sns.set(pallete='deep')
ロードされたモジュールの一覧	sys.modules
リストと数列の散布図をプロットして、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
逆順の双方向キュー	reversed(両端キュー)
データフレームから同じ内容の行をドロップする	df.drop_duplicates(inplace=True)
度数分布図を二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: グラフの種類を実線に変更する	linestyle = 'solid'
カウンタの項目の出現回数	aCounter[element]
変数の値を整数分の一にする	変数 //= 整数
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
データフレームの指定したカラムの中に存在する文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
データフレームのカラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
バイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='violet')
データ列を横棒プロットにする	plt.barh(ラベル列, データ列)
識別子はトレースバックか調べる	inspect.istraceback(識別子)
option: チョコレート色を使用する	color = 'chocolate'
文字列をシンボルにする	sympy.Symbol(変数名)
正規表現を大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームの一部のカラムはどれだけ、分散しているか調べる	df[['列A', '列B']].var()
配列の合計値	np.sum(aArray)
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
文字列の最初だけ大文字化する	文字列.capitalize()
option: ダークスラテグレーにグラフの色を指定する	color = 'darkslategray'
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
コロンで文字列を分割して、文字列リストに変換する	文字列.split(':')
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
アクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='aquamarine')
グラフのデータラベルの場所を指定する	plt.legend(loc=(x, y))
データ列の一意な要素数	ds.nunique()
データフレームの選択したカラムを千の位で丸める	df[['列A', '列B']].round(-3)
昇順にリストの要素を並べ直す	sorted(リスト, reverse=False)
縦棒グラフを描いて、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
０で全要素を初期化した行列	np.zeros(行数, 列数)
散布図の大バツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
改行なしに二つの数値をプリントする	print(数値, 数値, end='')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
データフレームの行と列をひっくり返す	df.T
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
棒グラフをインディアンレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='indianred')
ふたつの列からグループ化し、個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
作画の縦横の比率を等しくする	plt.axis('equals')
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
リストの四分位を可視化する	plt.boxplot(データ列)
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
文字のASCIIコード	ord(文字)
タイムスタンプのデータシリーズをインデックスにする	df.index = pd.DatetimeIndex(ds)
文字列はセットのメンバーに含まれるか	文字列 in セット
ひとつも空白が文字列中に含まれないか	any(not c.isspace() for c in 文字列)
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
棒グラフをサンディーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='sandybrown')
option: 先頭の行をヘッダに設定する	header = 0
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
縦棒グラフをディムグレー色を使って描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームの指定したカラムの分散を計算する	df['列A'].var()
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
縦棒グラフを赤色を用いて描画する	plt.bar(データ列x, データ列y, color='red')
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフの色をミントクリームにする	plt.plot(データ列x, データ列y, color='mintcream')
option: グラフの色をダークレッドに設定する	color = 'darkred'
カウンタの∩	aCounter & aCounter2
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
配列をイミュータブルなセットに変換する	frozenset(配列)
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
ふたつの列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
xの小数点以下'5'桁までをプリントする	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
xを太字でプリントできる文字列にする	f'\033[1m{x}\033[0m'
option: アクア色を使う	color = 'aqua'
線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategray')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
グラフの見栄えをよくする	import seaborn as sns
データフレーム中の未入力値をドロップし、みる	df.dropna()
行列の最大値	np.max(aArray)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
散布図にrgbの▼マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
方程式の解を求める	sympy.solve(数式)
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
データフレームのあるカラムの欠損値を前の行の値で埋める	df['列A'].fillna(method='ffill')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
データフレームのある列のSkewness	df['列A'].skew()
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
カテゴリ列で色付けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
データフレームの一部のカラムの欠損値をその中央値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
横棒グラフをライトイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightyellow')
数値時刻のカラムから日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
nまでの偶整数列	list(range(2, n, 2))
白色でxを出力する	print(f'\033[37m{x}\033[0m')
オブジェクトの種類を使う	type(obj)
ある列の中にいくつ欠損値があるか数える	df['列A'].isna().sum()
option: ペルー色を使用する	color = 'peru'
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
整数の三乗を算出する	整数 ** 3
ロージーブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
グリーンイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
入力からJSON形式のデータを読む	json.load(ファイル入力)
大きい順にデータフレームを二つの列によって並べる	df.sort_values(by=['列A', '列B'], ascending=False)
実数の双曲線正弦	math.sinh(x)
ファイルを追加できるように文字列の示すエンコーディングで開く]	open(filepath, mode='a', encoding=s)
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図の▽マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
xを黒色にする	f'\033[30m{x}\033[0m'
バツ印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
nから始まる無限整数リスト	itertools.count(start=n)
要素をキューの右に入れる	両端キュー.append(要素)
rgbのバツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
option: グラフの色をシャルトリューズにする	color = 'chartreuse'
小数点数の小数部	math.modf(x)[0]
赤い破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
行列の行ごとの最大値を求める	np.max(aArray, axis=1)
配列のn次モーメントを計算する	scipy.stats.moment(配列, moment=n)
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
線形回帰モデルのバイアス	model.intercept_
データシリーズをPandasの日付型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
データフレームからカテゴリデータのカラム名を列挙する	df.select_dtypes('object').columns
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
文字列のケースを変換する	文字列.casefold()
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
折れ線グラフの▽印の大きさを指定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの選択したカラムを万の位で丸める	df[['列A', '列B']].round(-4)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
option: 書き込みモードに変更する	mode = 'w'
JSON形式の文字列をロードする	data = json.loads(文字列)
線グラフの色を青緑にする	plt.plot(データ列x, データ列y, color='teal')
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
２つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
タイムスタンプデータは日付時刻データより後ろか調べる	aDatetime > aDatetime2
セットから要素を全て取り除く	セット.clear()
option: シエナを使用する	color = 'sienna'
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
option: 耐火レンガ色を用いる	color = 'firebrick'
データフレームの一部のカラムのNaNを直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
行列の列ごとの最小値	np.min(aArray, axis=0)
CSVファイルを読む	pd.read_csv('file.csv', sep=',')
option: グラフの色をダーク・スラテグレーにする	color = 'darkslategrey'
ヒストグラムの色を耐火レンガにする	plt.hist(データ列, color='firebrick')
二つの列からグループ化し、最大値を計算する	df.groupby(['列A', '列B'], as_index=False).max()
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
タプルをnからナンバリングする	enumerate(タプル, start=n)
rgbの三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームから型の列を選択する	df.select_dtypes(ty)
三つのデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=1)
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
ヒストグラムの色をブラックにする	plt.hist(データ列, color='black')
セットの要素数	len(セット)
2つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
辞書からキーとバリューの組を取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
点線を使ってリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ダークオリーブグリーンに色を設定する	color = 'darkolivegreen'
外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
整数が2で割り切れない	整数 % 2 == 1
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
小さい順にデータフレームをある列によってソートして更新する	df.sort_values(by='列A', ascending=True, inplace=True)
option: シャルトリューズにフォントの色を指定する	color = 'chartreuse'
'A'列の値がxに等しいデータを選択する	df[df['列A'] == x]
入力ストリームからJSON形式のデータを読む	json.load(ファイル入力)
整数が整数2より小さいか調べる	整数 < 整数2
タプルの先頭を使う	タプル[0]
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
ふたつの集合のユニオン	セット.union(セット2)
option: 四角マーカーを加える	marker = 's'
線グラフをインディアンレッド色として描画する	plt.plot(データ列x, データ列y, color='indianred')
リストから重複なく、ランダムにn要素選んでリスト化する	random.sample(リスト, k=n)
２つの整数のビット和	整数 | 整数2
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
整数が整数2より小さいかどうか調べる	整数 < 整数2
散布図をミディアムブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームの選択した列を千の位で丸める	df[['列A', '列B']].round(-3)
コマンド引数を列挙する	sys.argv
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
半透明の点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
リストと配列の散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
データフレームの指定した列の第一四分位数	df['列A'].quantile(0.25)
作画のグリッドを白くする	sns.set(style='whitegrid')
多次元データを多次元尺度構成法として文字列次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
文字列が全て小文字かどうか確認する	文字列.islower()
ヒストグラムの色をパパイヤウィップにセットする	plt.hist(データ列, color='papayawhip')
データ列とリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: グラフの色をコーンズシルクにする	color = 'cornsilk'
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
データフレームの選択したカラムを十の位で丸める	df[['列A', '列B']].round(-1)
データフレームを二つの列によってソートしてNaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
カテゴリ別でグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
八進数文字列を整数にする	int(文字列, 8)
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
折れ線グラフの大バツマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
オブジェクトにプロパティが存在するか確認する	hasattr(obj, プロパティ名)
スピアマンでデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='spearman')
option: UTF8を使う	encoding = 'utf-8'
option: 文字コードを文字コードtextに指定する	encoding = text
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
データフレームの中の列をビン数nを使ってビン分割する	pd.cut(df[col], n)
ヒストグラムをティール色を用いて描画する	plt.hist(データ列, color='teal')
折れ線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データシリーズの値が欠損値	ds.isna()
option: ポイントマーカーを使う	marker = '.'
ライムグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
データフレームを欠損値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
option: ナバホホワイトを使用する	color = 'navajowhite'
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
replに正規表現で一度にデータフレームの一部のカラムの値を置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
データフレームから型を抽出する	df.select_dtypes(ty)
イテラブルとデータ列についての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列の接尾辞がか調べる	文字列.endswith(部分文字列)
表のカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
横棒グラフをグリーンイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='greenyellow')
リストを等量でビン数nを用いてビン分割する	pd.qcut(aList, n)
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
文字列の開始位置からと終了位置番目までの間に部分文字列がないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
小数点数が有限	math.isfinite(x)
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
xをマゼンタでプリントできる文字列にする	f'\033[35m{x}\033[0m'
青色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
度数分布図のビン数を変更する	plt.hist(データ列, bins=区関数)
ヒストグラムをダークカーキ色を用いて描画する	plt.hist(データ列, color='darkkhaki')
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: フォントの色をサーモンに設定する	color = 'salmon'
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
ホワイトスモーク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
表データの重複した行を数える	df.duplicated().sum()
実数を小数点数で割った剰余を求める	math.remainder(x, x2)
リストの最後の値	リスト[-1]
配列からn個、サンプリングしてリスト化する	random.sample(配列, k=n)
行列の列ごとの最大値	np.max(aArray, axis=0)
データシリーズの欠損値を最小値に増やす	ds.fillna(ds.min())
リストからn個、サンプリングしてリストにする	random.sample(リスト, k=n)
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
破線に線グラフの線種をセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
JSON形式として文字列をファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: 読み込まないフッタをnに変更する	skipfooter = n
エクセルファイルからシートの名前を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
xとyをカンマで区切って表示する	print(x, y, sep=',')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
option: バイナリ書き込み用にする	mode = 'wb'
数列から重複なく、n個ランダムに選んでリストにする	random.sample(数列, k=n)
option: ブルーバイオレット色を用いる	color = 'blueviolet'
アンダーライン付きにする	f'\033[4m{x}\033[0m'
option: グラフの色をホワイトスモークにセットする	color = 'whitesmoke'
黒い下三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: 改行を分割記号で使う	sep = '\n'
リストから要素を取り除く	リスト.remove(要素)
インデントを指定してリストをJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
タプルの要素を展開してプリントする	print(*タプル)
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
タプルを昇順にソートする	sorted(タプル, reverse=True)
縦棒グラフをサドルブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ふたつの列を組み合わせてグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
散布図のダイアモンド印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
リストの中の最小値を算出する	min(リスト)
データフレームを行によって整列する	df.sort_index()
文字列中に非大文字が含まれるか調べる	any(not c.isupper() for c in 文字列)
日付データが日付データより早いか調べる	aDate2 = aDatetime<nl>aDate < aDate2
データ列とリストについて散布図をプロットし、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
数値をプリントする	print(数値)
ラベンダーブラッシュ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
辞書からエラーなくキーの値を参照する	辞書.get(キー, 見つからない場合の値)
option: ダークオリーブグリーンを使用する	color = 'darkolivegreen'
データシリーズの欠損値を前の行の値に指定する	ds.fillna(method='ffill')
データフレームを二つの列の値によって集計する	df.groupby(['列A', '列B'])
配列を平坦化する	aArray.flatten()
データフレームの列を千の位で四捨五入して整数型にする	df['列A'].round(-3).astype(int)
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
文字列がいつまでも繰り返す列	itertools.repeat(element)
データフレームの選択したカラムの尖度	df[['列A', '列B']].skew()
縦棒グラフをティール色を用いて描画する	plt.bar(データ列x, データ列y, color='teal')
句点文字を全部使う	string.punctuation
サブ型かどうか	issubclass(サブクラス, クラス)
データフレームからランダムに抽出する	df.sample()
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
散布図の大バツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
空の辞書	辞書 = {}
カラムの名前を指定せずCSVファイルを読み込む	pd.read_csv('file.csv', header=None)
文字を別の文字に置き換える	文字列.replace(部分文字列, 置換後の文字列)
オブジェクトが関数か調べる	inspect.isfunction(オブジェクト)
表データのあるカラムは何月か見る	df['列A'].dt.month
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
指定した列リストのみデータフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
日付データが日付データと同時かどうか調べる	aDate == aDate2
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
新しいロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
文字列がリストに存在するか調べる	文字列 in リスト
ディムグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in 文字列)
ホワイトスモーク色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ヒストグラムを小麦色色を用いて描画する	plt.hist(データ列, color='wheat')
折れ線グラフに赤いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ファイルをオープンして]読み込みストリームを見る	'r' = 'a'<nl>open(filepath, mode='r')
文字列をセパレータで二分して、残りを使う	文字列.partition(セパレータ)[-1]
リストから要素と等しい最初の要素を取り除く	リスト.remove(要素)
部分文字列が文字列の指定した区間位置の間にあるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
最後の区切り文字を用いて文字列を二分する	文字列.rpartition(セパレータ)
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
option: グラフの色をホワイトスモークに変更する	color = 'whitesmoke'
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
3二ビット整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int16)
行列を転置する	aArray.T
縦棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
ペルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムを耐火レンガ色を用いて描画する	plt.hist(データ列, color='firebrick')
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
変数をスワップする	x, y = y, x
option: 淡い茶色に色を指定する	color = 'tan'
折れ線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
レモンシフォン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図をダークレッド色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
リストとリストの散布図を描画して、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
二つの集合に共通する要素からなる集合を使う	セット.intersection(セット2)
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
データシリーズが何月か見る	ds.dt.month
エクセルファイルからシートの名前を指定して読む	pd.read_excel('file.xlsx', sheet_name=シート名)
線形モデルの切片	model.intercept_
オブジェクトがトレースバックか調べる	inspect.istraceback(オブジェクト)
有理数を使う	import fractions
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
option: イエローグリーンに色を指定する	color = 'yellowgreen'
オブジェクトに属性が存在するかどうか調べる	hasattr(obj, プロパティ名)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
ベクトルの形を調べる	aArray.shape
日付データが土曜日かどうか	aDate.weekday() == 5
数を三乗する	x ** 3
データフレームをある列で小さい順にソートし、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
方程式の解	sympy.solve(数式)
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
色付きの実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
イテラブルを両端キューにする	collections.deque(イテラブル)
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
小さい順にデータフレームを二つの列でソートする	df.sort_values(by=['列A', '列B'], ascending=True)
文字列を最後の部分文字列で分割し、、前半を使う	文字列.rpartition(部分文字列)[0]
整数の左シフトをが欲しい	整数 << n
データフレームを整列して、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
データフレームの選択したカラムにおいてどの値が頻出か確認する	df[['列A', '列B']].mode()
データフレームのSkewness	df.skew()
今日の日付時刻を使う	datetime.datetime.today()
折れ線グラフを点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ハニーデュー色を使用する	color = 'honeydew'
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
0からnの範囲で	range(n)
散布図を白色として描画する	plt.scatter(データ列x, データ列y, color='white')
ナバホホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
数列を両端キューに変換する	collections.deque(数列)
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
床	math.floor(x)
データフレームからある２列のみ抽出する	df[['列A', '列B']]
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
文字列が別のに含まれるか調べる	文字列 not in 別の文字列
出力ストリームからnバイト、読み込む	f.read(n)
多次元データをt-SNEとして項次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
ファイルを追加モードを使ってオープンして]fとする	f = open(filepath, mode='a')
データフレームのカラムを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
実数が整数かどうか調べる	x.is_integer()
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
スタックのn番目に要素を挿入する	両端キュー.insert(n, 要素)
オブジェクトはタプルクラスか確認する	tuple = int<nl>isinstance(obj, tuple)
散布図に黒い下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
ミディアムアクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
データフレームを指定された列によって昇順に並べ直して、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
option: グラフの色をマルーンに指定する	color = 'maroon'
を切り捨てながら整数分の1にする	変数 //= 整数
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
ハイパボリック・コサインの逆数	math.acosh(x)
黒い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列の先頭から不要な空白やタブを取り除く	文字列.lstrip()
option: グラフの色をブラックに指定する	color = 'black'
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
青いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データシリーズのNaNを最大値に設定する	ds.fillna(ds.max())
データフレームを指定した列によってソートする	df.sort_values(by='列A')
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
ミスティローズにヒストグラムの色を指定する	plt.hist(データ列, color='mistyrose')
リストの要素を	''.join(map(str, リスト))
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
横棒グラフをカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='khaki')
データフレームの列の名前を変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
リストと配列について散布図を描画してポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
リストと配列について散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: 区切りを使わない	sep = ''
ファイルを読み込みモードでオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
整数の2乗を求める	整数 ** 2
ブラック色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームをグループ化し、ある列に対し標準偏差を計算する	df.groupby('列A')['列B'].std()
配列とリストリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
指定した列リストだけデータフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
折れ線グラフの▼マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
整数がセットのメンバーに含まれるか調べる	数 in セット
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
データフレームを二つの列の値によってグループ分けし、、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
識別子はメソッドか調べる	inspect.ismethod(識別子)
あるカラムの値ごとの最大値	df.groupby('列A').max()
シアンで表示できる文字列に変換する	f'\033[36m{x}\033[0m'
文字列をJSON形式でファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
双方向キューの末尾にリストの各値を追加する	両端キュー.extend(リスト)
ミディアムスレートブルーにヒストグラムの色をセットする	plt.hist(データ列, color='mediumslateblue')
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
２つの数値を順にプリントする	print(数値, 数値)
改行せずに2つの文字列をプリントする	print(文字列, 文字列, end='')
符号付き整数の最大値	sys.maxsize
度数分布図の描画し、、正規化する	plt.hist(データ列, density=True)
データフレームをある列で集計し、、各グループの件数を知る	df.groupby('列A').size()
クラス分類をよりランダムなランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
文字列を改行で分割し、文字列リストに変換する	文字列.splitlines()
リストの要素を文字列として空白によって連結する	' '.join(map(str, リスト))
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフに丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
文字列の中で大文字・小文字を無視してパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
文字列を最後のコロンで二分し、、後ろの方を使う	文字列.rpartition(':')[-1]
マッピングの全をクリアする	辞書.clear()
データフレームの選択した列をValueMapで全部置換する	df[['列A', '列B']].replace(ValueMap)
棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
配列のスピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
変数が0に近づくときの極限値を計算する	sympy.limit(数式, 変数, 0)
データシリーズを十の位で丸めて整数型にする	ds.round(-1).astype(int)
ゼロ埋めされた複素数型の配列を作成する	np.zeros(要素数, dtype=bool)
ひとつでもアスキー文字が文字列中に含まれるか確認する	any(c.isascii() for c in 文字列)
ヒストグラムの色をブラックに指定する	plt.hist(データ列, color='black')
折れ線グラフの印をポイント印にする	plt.plot(データ列x, データ列y, marker='.')
option: ライトグレーを使う	color = 'lightgray'
option: バッファのサイズを小さくする	buffering = 4096
文字列を最初のセパレータで分割して、後半を使う	文字列.partition(セパレータ)[-1]
option: マーカーの色を深紅にする	markerfacecolor = 'crimson'
option: アクアを用いる	color = 'aqua'
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
データフレームの欠損値をxに指定する	df.fillna(x)
箱髭図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
整数の左シフトを計算する	整数 << n
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームの指定した列の不偏分散を求める	df['列A'].var(ddof=1)
オブジェクトがビルトイン関数か確認する	inspect.isbuiltin(オブジェクト)
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
線形回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
カラムの標本標準偏差	df['列A'].std(ddof=1)
リストの要素を入れ替える	リスト[x], リスト[y] = リスト[y], リスト[x]
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
キーが辞書に存在するか	キー not in 辞書
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
クラス分類のF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
あるカラムのカテゴリごとの標準偏差を求める	df.groupby('列A').std()
option: 改行をセパレータで使用する	sep = '\n'
整数の並べ方の総数を計算する	math.perm(n)
ヒストグラムの色をアンティークホワイトに指定する	plt.hist(データ列, color='antiquewhite')
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
ピーチパフ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
カウンタを列をカウントして更新する	aCounter.update(iterable)
データフレームの選択したカラムの上位25％	df[['列A', '列B']].quantile(0.25)
文字列を最後のコロンで二分割して、残りを使う	文字列.rpartition(':')[-1]
自然数の順列の総数を求める	math.perm(n)
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
辞書をJSONフォーマットでファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
JSONLファイルからデータフレームをロードする	pd.read_json(filename, orient='records', lines=True)
option: 回帰木の深さを制限する	maxdepth = n
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategray')
スラッシュで区切ってxとyを表示する	print(x, y, sep='/')
整数を符号なしでバイナリにする	整数.to_bytes(length=バイト数, byteorder='big')
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ライトコーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ある列の値がxに等しくないデータを選択する	df[df['列A'] != x]
ライトスカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
配列とイテラブルについて散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームの中の列をビン数nで分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームの一部のカラムの不偏標準偏差を求める	df[['列A', '列B']].std()
カラムの分位数	df['列A'].quantile(パーセント/100)
色付きの破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
散布図のダイアモンド印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
グラフの描画を綺麗にする	import seaborn as sns
0からN未満までの行列	np.arange(N)
ヒストグラムの色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
表データからランダムに100行を抽出する	df.sample(100)
散布図のダイアモンド印を赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
ヒストグラムをターコイズ色を用いて描画する	plt.hist(データ列, color='turquoise')
十六進数文字列をバイト列にする	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
整数2がnより大きく、かつn3未満か調べる	整数 < 整数2 and 整数2 < n3
文字列中の部分文字列の出現	文字列.count(部分文字列)
year年month月day日hour時のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
日付データにn分分加える	aDate + datetime.timedelta(minutes=n)
０で全要素を初期化した三2ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
散布図に赤いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
日付時刻データの時間数を使う	aDatetime.hour
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列から末尾を取り除いた文字列	文字列.removesuffix(部分文字列)
グラフにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
スタックの中に要素が含まれてるか調べる	要素 in 両端キュー
赤い破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
プロットの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
オブジェクトの参照カウントを知る	sys.getrefcount(オブジェクト)
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムを赤色を使って描画する	plt.hist(データ列, color='red')
相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
option: 出力先を標準出力に変更する	file = sys.stdout
配列のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
n個に等間隔でデータフレームの中の列をビン分割する	pd.cut(df[col], n)
全数字	string.digits
データフレームの列間の相関行列を全部求める	df.corr()
リストと数列についての散布図にrgbの上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列をカンマによって分割し、、列挙する	文字列.split(',')
データフレームの選択したカラムの値が欠損値か調べる	df[['列A', '列B']].isna()
整数が-9以上、9以下か	-9 <= 整数 <= 9
シーケンスのそれぞれを関数でフィルタする	filter(func, iterable)
双方向キューから最初の要素を取り除く	両端キュー.remove(要素)
リストと数列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
option: グラフの色をバリーウッドに変更する	color = 'burlywood'
整数の五分の一	整数 / 5
データフレームの行列を入れ替える	df.T
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
実数が有限か	math.isfinite(x)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
両端キューの要素を右に輪番で回す	両端キュー.rotate(1)
再帰の上限を上げる	sys.setrecursionlimit(1000000)
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
黒い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームを使用する	import numpy as np<nl>import pandas as pd
折れ線グラフの色をオーキッドにセットする	plt.plot(データ列x, データ列y, color='orchid')
ラジアンの角度を求める	math.degrees(x)
option: ▲マーカーを描画する	marker = '^'
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ある列の文字列が正規表現にマッチするデータを取り出す	df[df['列A'].str.match(正規表現)]
データフレームのデータ型リスト	df.dtypes
関数の値によってデータフレームをグループ分けし、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
文字列が全て空白文字からなるか調べる	文字列.isspace()
行列の平均値	np.mean(aArray)
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
指定したカラムの未入力値をメディアンで埋める	df['列A'].fillna(df['列A'].median())
日付データの月を使う	aDate.month
散布図の丸印の色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
データフレームのあるカラムの歪度	df['列A'].kurt()
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
文字列中にひとつでも非英数字があるか	any(not c.isalnum() for c in 文字列)
データフレームの一部のカラムのKurtosisを求める	df[['列A', '列B']].kurt()
横棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列をシンボルに変換する	sympy.Symbol(変数名)
横棒グラフをロイヤルブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='royalblue')
配列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
両端キュー中の整数の数を数える	両端キュー.count(整数)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
リストから重複なく、n個選ぶ	random.sample(リスト, k=n)
ファイルが存在するかどうか	os.path.exists(filepath)
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
日付データと日付データの時間差は何分か知る	(aDate - aDate2).total_seconds()//60
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
数列をイミュータブルな集合にする	frozenset(数列)
データフレームをグループ化し、あるカラムの記述統計量を求める	df.groupby('列A').describe()['列B']
option: NaNを含めない	dropna = True
グラフのデザインを良くする	import seaborn as sns
表データの指定の列に重複があれば消す	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
行列の次元数	aArray.ndim
文字列の両端から空白を除く	文字列.strip('\t')
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
文字列が文字列より辞書順で後か	文字列 > 文字列2
データフレームのあるカラムが何分か調べる	df['列A'].dt.minute
数列の値を両端キューの末尾に追加する	両端キュー.extend(数列)
オブジェクトはメソッド	inspect.ismethod(オブジェクト)
option: ライトグリーン色を使う	color = 'lightseagreen'
赤い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフのダイアモンド印の線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
文字列を最後のカンマで二分して、残りを使う	文字列.rpartition(',')[-1]
配列のトリム分散を計算する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
プロットを使う	import matplotlib.pyplot as plt
配列と数列の散布図をプロットし、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
指定された列によってデータフレームをまとめたグループ	df.groupby('列A')
データフレームの選択したカラムが正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
セットにリストの要素を追加する	セット.update(リスト)
棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
改行する	print()
文字列中の大文字を小文字に変換する	文字列.lower()
整数を十六進文字列に変換する	hex(整数)[2:]
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームの指定した列の記述統計量	df['列A'].describe()
データフレームから数値データの列を抽出する	df.select_dtypes('number')
日付データが金曜日か確認する	aDate.weekday() == 4
リストの末尾	リスト[-1]
データフレームから指定した列名一覧の列を抽出する	columns = ['列A', '列B']<nl>df[columns]
文字列中からパターンにマッチする文字列を探す	re.search(pattern, s)
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームを小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
２つのオブジェクトが等しいかどうか調べる	obj == obj2
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
option: グラフの色をブラウンに設定する	color = 'brown'
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
文字列を評価する	eval(s)
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
要素はリストの要素か	要素 in リスト
リッジ回帰分析の準備をする	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
データフレームのカラムのピアソンの相関係数を使う	scipy.stats.pearsonr(df['列A'], df['列B'])
棒グラフをパールバイオレットレッド色を使って描画する	plt.bar(データ列x, データ列y, color='palevioletred')
リストとリストの散布図にrgbの上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
イテラブルからランダム複数個に選んでリストにする	random.choices(イテラブル, k=n)
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
グラフのパレットを淡くする	sns.set(pallete='muted')
option: フォントの色をスラグレーに変更する	color = 'slategrey'
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
日付時刻データの年	aDatetime.year
ある列の文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
長さの制限された両端キューをイテラブルから作る	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
配列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ファイルパスのセパレータ記号	os.sep
コーンフラワーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
整数が-9以上、9以下か	-9 <= 整数 <= 9
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
小数点数の平方根を求める	math.sqrt(x)
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
赤い▼印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: 無視する列番号をnamesで指定する	skiprows = names
データフレームの列を散布図で可視化し、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
リストをひとつ置きに抽出する	リスト[::2]
インデントを指定して辞書をJSONにエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
辞書をJSON形式としてファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
赤い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
指定した列のカテゴリで集計し、最大値を求める	df.groupby('列A').max()
実数の逆双曲線余弦	math.acosh(x)
インデントを指定してリストをJSON文字列にする	json.dumps(リスト, ensure_ascii=False, indent=n)
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
縦棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの指定したカラムの欠損値を平均値にする	df['列A'].fillna(df['列A'].mean())
Pandasの日付型のデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
データフレームの複数のカラムをドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
散布図の印の線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
nとkのコンビネーションを求める	math.comb(n, k)
データフレームのある列を破壊的にドロップする	df.drop('列A', axis=1, inplace=True)
文字列を最後の部分文字列で分割したときの残りの文字列	文字列.rpartition(部分文字列)[-1]
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
文字列がセットに含まれないかどうか判定する	文字列 not in セット
データフレームの重複した行をマスクする	df.duplicated()
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
整数が一桁の整数	-9 <= 整数 <= 9
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
実数のタンジェントの逆数を求める	math.atan(x)
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
カーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
オブジェクトの種類	type(obj)
安全に文字列の接頭辞から部分文字列を除く	文字列.removeprefix(部分文字列)
整数が5で割り切れるか調べる	整数 % 5 == 0
終了位置まで部分文字列を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
折れ線グラフの色をダークマゼンタにする	plt.plot(データ列x, データ列y, color='darkmagenta')
xの絶対値	abs(x)
プロットの縦横比を等しくする	plt.axis('equals')
棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
タプルのn番目の	タプル[n]
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
文字列は印字できるか確認する	文字列.isprintable()
配列からランダム複数個に選んでリスト化する	random.choices(配列, k=n)
データフレームの指定したカラムを千の位で四捨五入する	df['列A'].round(-3)
データを四分位点を用いて標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データシリーズはどの程度分散しているか確認する	ds.var()
要素が全て初期値のベクトルを作成する	np.full(要素数, 初期値, dtype=np.int)
ランダムな整数のリスト	random.sample(range(100), 10)
レベッカパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
識別子はクラスか調べる	inspect.isclass(識別子)
option: バリーウッド色を使う	color = 'burlywood'
xがマイナス無限大に近づく時の数式の極限値を算出する	sympy.limit(数式, [|変数]x, -oo)
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
ある列のカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
xについてのn階微分を求める	sympy.diff(数式, [|変数]x, n)
列をn個に分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
双方向キューに文字列をenqueueする	両端キュー.append(文字列)
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
ファイルパスのストリームを使う	open(filepath)
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
文字列内に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
データフレームの文字列を未入力値に変換する	df.replace(値, np.nan)
ビスク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in 文字列)
数列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
折れ線グラフの上三角印の色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列が指定した文字列で終わるか調べる	文字列.endswith(部分文字列)
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列を最後のカンマによって二分割する	文字列.rpartition(',')
オブジェクトがジェネレータかどうか	inspect.isgenerator(オブジェクト)
大バツ印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
ヒストグラムの色をライトブルーにする	plt.hist(データ列, color='lightblue')
標準入力から1行だけ読む	sys.stdin.readline()
データフレームのカラムの第一四分位数	df['列A'].quantile(0.25)
option: グラフの色をフクシアに設定する	color = 'fuchsia'
オブジェクトがクラスか調べる	isinstance(obj, クラス)
リストの要素を文字列として、指定した文字列でつなげる	文字列.join(map(str, リスト))
⊆か調べる	セット.issubset(セット2)
散布図をフクシア色を用いて描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
縦棒グラフをライトグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームのあるカラムのNaNを前の行の値で埋める	df['列A'].fillna(method='ffill')
整数が整数2よりも小さいかどうか確認する	整数 < 整数2
データシリーズの未入力値を最小値にセットする	ds.fillna(ds.min())
散布図を貝殻色を用いて描画する	plt.scatter(データ列x, データ列y, color='seashell')
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
リストからベクトルを初期化する	np.array(aList)
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
配列の列ごとの合計を計算する	np.sum(aArray, axis=0)
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
データシリーズは何年か知る	ds.dt.year
rgbに棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
赤い左三角マーカーをイテラブルと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームの中の列をn個に等間隔で分割する	pd.cut(df[col], n)
ある列の文字列が部分文字列で始まる行を選択する	df[df['列A'].str.startswith(部分文字列)]
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
日付データが木曜日	aDate.weekday() == 3
option: フォントの色をパールバイオレットレッドに設定する	color = 'palevioletred'
最大長を指定して両端キューを作成する	collections.deque(maxlen=最大長)
指定した列の値で集計し、各最大値を算出する	df.groupby('列A').max()
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
モカシン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
指定したカラムのNaNを直前の値に設定する	df['列A'].fillna(method='ffill')
ポスターにグラフを指定する	sns.set(context='poster')
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
線グラフをミディアムバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ダークサーモン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ロバストな線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
折れ線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
配列の標準偏差を計算する	np.std(aArray)
データフレームを２つの列の値によってまとめた表	df.groupby(['列A', '列B'])
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
グリッド線を黒くする	plt.grid(color='k')
データフレームをグループ化し、あるカラムに対し最小値を計算する	df.groupby('列A')['列B'].min()
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
円プロットの特定の要素を目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
文字列を最後のコロンで分けたときの後半の文字列を取り出す	文字列.rpartition(':')[-1]
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
青いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
タイムスタンプデータが何曜日か知る	aDatetime.weekday()
両端キューの中に要素は存在する	要素 in 両端キュー
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
辞書をインデントを指定してJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
ある列を削除し、みる	df.drop('列A', axis=1)
t-SNEとして多次元データを文字列次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームの指定したカラムの中にいくつ文字列があるか求める	df['列A'].isin([value]).sum()
線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフの色をシーグリーンにセットする	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフのポイントマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
要素はリストに含まれる	要素 in リスト
横棒グラフの色を濃いシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
シーケンスを2回あわせた直積	itertools.product(iterable, repeat=2)
部分文字列で右から文字列を区切る	文字列.rsplit(部分文字列)
半透明の一点鎖線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
タプルの要素を空白区切りで表示する	print(*タプル)
配列のデータ型を計算する	aArray.dtype()
データ列を三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
２つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
日付を表現した文字列をdatetime64型に変換する	pd.to_datetime(日付を表現した文字列)
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームの最後5行を抽出する	df.tail(5)
マップからキーとバリューを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
インデントを指定してデータをJSON文字列にする	json.dumps(データ, ensure_ascii=False, indent=n)
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
ある列の値がxより大きいデータを抽出する	df[df['列A'] > x]
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
ある列の文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
ベクトルをフラット化する	aArray.flatten()
option: 丸印を使用する	marker = 'o'
データフレームのあるカラムが何月か見る	df['列A'].dt.month
データフレームの選択したカラムの欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線グラフの色をピンクにセットする	plt.plot(データ列x, データ列y, color='pink')
ファイルパスをオープンする]	open(filepath)
モデルの精度を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
Pythonのバージョンを確認する	if sys.version_info >= (3, 4):<nl><tab>print(sys.version_info)
散布図の▼マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
キーとその値をペアとして取り出す	辞書.items()
ダークサーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
折れ線グラフの▼印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
整数が3で割り切れるか確認する	整数 % 3 == 0
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列の順序をシャッフルする	''.join(random.sample(文字列, len(文字列)))
異なる列をキーとして表をジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
option: シスルを使用する	color = 'thistle'
データフレームの選択したカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
オブジェクトをイテレータに変換する	iter(obj)
カウンタから最も頻出な値の件数	aCounter.most_common()[1]
リネン色としてヒストグラムを描画する	plt.hist(データ列, color='linen')
散布図の右三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
データフレームのカラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
SJISでファイルパスをオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
辞書に項目名が存在している	キー not in 辞書
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームからカテゴリデータのカラム名の一覧を使う	df.select_dtypes('object').columns
タプルの順番をシャッフルする	tuple(random.sample(タプル, len(タプル)))
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
最後のコロンで文字列を二分して前半を使う	文字列.rpartition(':')[0]
ヒストグラムを3つ並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データシリーズが何曜日か調べる	ds.dt.weekday_name
線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
タプルの各要素を関数に適用した結果でソートする	sorted(タプル, key=func)
データフレームの欠損値を最頻値で補う	df.fillna(df.mode().iloc[0])
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
ディレクトリをPythonパスに追加する	sys.path.append(ディレクトリ名)
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
数列からn要素、サンプリングしてリストにする	random.sample(数列, k=n)
数列の推移を色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
パールゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図の下三角印の色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
配列のデータを双方向キューの末尾に追加する	両端キュー.extend(配列)
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
両端キューに要素をプッシュする	両端キュー.append(要素)
文字列を右端から部分文字列で区切る	文字列.rsplit(部分文字列)
チョコレート色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ふたつの列からグループ化し最小値を算出する	df.groupby(['列A', '列B'], as_index=False).min()
黒い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
一点鎖線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
option: ドジャーブルーを使う	color = 'dodgerblue'
両端キューの最初に要素を追加する	両端キュー.appendleft(要素)
下三角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
データフレームの内である列に重複があれば、削除する	df.drop_duplicates(subset='列A', inplace=True)
リストとデータ列について散布図をプロットして三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
スピアマン相関係数としてデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='spearman')
データフレームのNaNを取り除く	df.dropna(inplace=True)
option: グラフの色をダークオーキッドにセットする	color = 'darkorchid'
データフレームの選択したカラムの歪度	df[['列A', '列B']].kurt()
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
イエローグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
テンプレートをarg文字列を引数としてフォーマットする	書式.format(*args)
option: NaNは例外を投げる	nan_policy = 'raise'
既存のファイルパスをEUCとして追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
option: 色をダークスラテグレーに指定する	color = 'darkslategray'
オブジェクトの型を使う	type(obj)
データフレームを関数のカテゴリによってグループ化する	df.groupby(関数)
横軸を対数に変更する	plt.xscale('log')
option: 標準エラーを出力にする	file = sys.stderr
散布図を黒い▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの中に文字列と文字列が存在する	df.isin([value, value2])
オブジェクトがある型のインスタンス	isinstance(obj, クラス)
文字列の末尾から部分文字列を除く	文字列.removesuffix(部分文字列)
データフレームから列を2つだけ選択する	df[['列A', '列B']]
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
データフレームの指定したカラムを10の位で丸める	df['列A'].round(-1)
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
データフレームの列の名前を全て文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
n進数文字列をバイナリに変換する	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
指定した列のモード	df['列A'].mode()
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
回帰直線データフレームのグループ化した散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
グラフをプレゼンてション用に設定する	sns.set(context='talk')
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
ヒストグラムの色をシスルに指定する	plt.hist(データ列, color='thistle')
指定した列のメディアンを計算する	df['列A'].median()
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
列の各データ値の出現数	df[col].value_counts()
xをプリントする	print(x)
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
データシリーズの欠損値を最小値に指定する	ds.fillna(ds.min())
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
コロンで文字列を分割して文字列リストに変換する	文字列.split(':')
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
明るくカラーパレットをプロットの描画で使う	sns.set(pallete='bright')
折れ線グラフのダイアモンド印を黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列をコロンで二分して、前半を使う	文字列.partition(':')[0]
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
文字列を文字リストに変換する	list(文字列)
文字列をカンマで二分する	文字列.partition(',')
日付時刻データが木曜日か確認する	aDatetime.weekday() == 3
空白文字	' '
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
文字列中のタブを空白に置き換える	文字列.expandtabs(tabsize=n)
データシリーズの中に文字列と日付データがいくつ存在するかカウントする	ds.isin([value, value2]).sum()
t-SNEで多次元データを文字列次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
整数がセットのメンバーか調べる	数 in セット
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
赤い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: 青紫を使う	color = 'violet'
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
カウンタを辞書に変換する	dict(aCounter)
option: 下三角マーカーを使う	marker = 'v'
option: 小麦色色を用いる	color = 'wheat'
茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
配列とリストについての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
双方向キューの最初	両端キュー[0]
ヒストグラムの色をオレンジに指定する	plt.hist(データ列, color='orange')
ヒストグラムの色をデピンクに指定する	plt.hist(データ列, color='deeppink')
あるカラムの文字列が正規表現文字列にマッチしないデータを選ぶ	df[~df['列A'].str.match(正規表現)]
散布図としてデータフレームの全カラムをグラフ化する	sns.pairplot(df)
データフレームをグループ化し、ある列に対し最小値を求める	df.groupby('列A')['列B'].min()
データフレームのあるカラムの欠損値を最大値で補う	df['列A'].fillna(df['列A'].max())
y座標の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
縦に３つのデータフレームを結合する	pd.concat([df, df2, df3], axis=1)
線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='grey')
整数が1、もしくは2	整数 == 1 or 整数 == 2
箱ひげ図を描画して、平均値を追加する	plt.boxplot(データ列, showmeans=True)
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
スレートブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
横棒プロットを描画し、、下寄せする	plt.barh(ラベル列, データ列, align='edge')
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
整数が偶数か確認する	整数 % 2 == 0
オブジェクトがスタックフレームか調べる	inspect.isframe(オブジェクト)
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
色付きの破線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
部分的最小二乗法として回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: パウダーブルー色を使用する	color = 'powderblue'
配列の要素ごとの最大公約数を調べる	np.gcd(aArray, aArray2)
行列の分散を求める	np.var(aArray)
文字列中にひとつでも空白が含まれるかテストする	any(c.isspace() for c in 文字列)
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
二つのデータフレームを異なるカラムをキーとして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
リスト中の要素が全て真か	all(リスト)
セットをタプルにする	tuple(セット)
黒いポイントマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c='k')
黒いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
option: フォレストグリーンを使用する	color = 'forestgreen'
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフの色をダーク・スラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ホットピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
数式の簡略化を行う	sympy.sympify(数式)
等しい量になるようにリストをn個にビン分割する	pd.qcut(aList, n)
文字列がセットの要素でないか調べる	文字列 not in セット
現在のミリ秒	int(time.time() * 1000)
n回だけ文字列中の文字を置換する	文字列.replace(部分文字列, 置換後の文字列, n)
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
nullに等しいもの	None
カウンタのそれぞれの文字列を出現回数だけ列挙する	aCounter.elements()
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの選択したカラムのNaNを最小値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
改行なしに二つの変数を表示する	print(変数名, 変数名, end='')
グラフの中の縦軸にキャプションを付ける	plt.ylabel('y軸ラベル')
項がセットの要素に含まれないかどうか調べる	要素 not in セット
データフレームの形状を調べる	df.shape
行列の行列積を求める	np.matmul(aArray, aArray2)
イテラブルからn要素、サンプリングしてリストにする	random.sample(イテラブル, k=n)
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
縦棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
辞書を複製する	辞書.copy()
データフレームから指定した二つの列を抽出する	df[['列A', '列B']]
配列とイテラブルについて散布図を描画して、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
データフレームの選択した列を百の位で丸めて整数型にする	df[['列A', '列B']].round(-2).astype(int)
文字列中に大文字が存在するか	any(c.isupper() for c in 文字列)
option: フォントの色をスノーに設定する	color = 'snow'
option: 改行コードをUNIXにする	newline = '\n'
折れ線グラフの左三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
平均値でデータフレームの一部の列の未入力値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
option: エラーを無視する	errors = 'ignore'
標準出力のバッファをフラッシュする	sys.stdout.flush()
データフレームのカラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
フローラルホワイト色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
タプルをn回、結合する	タプル * n
option: ネイビーを使う	color = 'navy'
配列の最頻値	mode, count = scipy.stats.mode(配列)
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
option: ダーク・スラテグレー色を用いる	color = 'darkslategrey'
カテゴリでグループ化してデータフレームの全カラムの散布図をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
データフレームのカラム間のケンドールの相関係数を算出する	scipy.stats.kendalltau(df['列A'], df['列B'])
データシリーズの欠損値をその最頻値で埋める	ds.fillna(ds.mode().iloc[0])
線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ヒストグラムの範囲をセットする	plt.hist(データ列, range=(start, end))
辞書に項目名が存在していない場合、処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
EUCで書き込み用にファイルを開く]	open(filepath, mode='w', encoding='euc_jp')
散布図のダイアモンド印の大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
異なるカラムをキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
タプルの平均を求める	sum(タプル)/len(タプル)
n進数文字列を整数にする	int(文字列, n)
JSON形式のバイト列をパースする	json.loads(バイト列.decode('unicode-escape'))
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
xを緑色で表示できる文字列に変換する	f'\033[32m{x}\033[0m'
文字列を最初のコロンで二分割して、前半を使う	文字列.partition(':')[0]
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
データフレームの選択したカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
option: ダークスレートブルーを使用する	color = 'darkslateblue'
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
データフレームの列間の相関行列をまとめて求める	df.corr()
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
三つの変数を順にプリントする	print(変数名, 変数名, 変数名)
実数のkを底とする対数	math.log(x, k)
散布図のバツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
半透明の破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
カラムを10の位で丸める	df['列A'].round(-1)
散布図の上三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
正規表現patternでデータシリーズをまとめてreplに変更する	ds.replace(pattern, repl, regex=True)
棒グラフをホワイト色で描画する	plt.bar(データ列x, データ列y, color='white')
xとyを順にプリントする	print(x, y)
option: ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
棒グラフを紺色を使って描画する	plt.bar(データ列x, データ列y, color='darkblue')
predicateFuncを適用したとき真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
文字列をJSON形式としてファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
データフレームの選択したカラムの欠損値を後の行の値に指定する	df[['列A', '列B']].fillna(method='bfill')
セットから文字列を取り除く	セット.remove(文字列)
データフレームの選択したカラムの欠損値を第二四分位数で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
両端キューの最大長を使う	両端キュー.maxlen
データシリーズの50パーセンタイルを求める	ds.median()
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
データフレームの指定したカラムの欠損値を直後の値で置換する	df['列A'].fillna(method='bfill')
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
クラス分類をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
データ列の折れ線グラフを丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
表データをインポートする	import pandas as pd
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
スクリプトのファイル名	sys.argv[0]
散布図をバツ印を用いる描画する	plt.scatter(データ列x, データ列y, marker='x')
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
列名を指定して二つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
ファイルを改行除外して一行ずつ読み込む	f.readline()
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
データフレームを関数のカテゴリで集計する	df.groupby(関数)
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
新しいロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
浮動小数点数のn乗の浮動小数点数剰余	pow(x, n, y)
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
二つの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
データフレームのカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
データフレームの一部の列の相関行列をスピアマン相関係数で求める	df[['列A', '列B']].corr(method='spearman')
日付データは何日か知る	aDate.day
タイムスタンプデータにn日分、加算する	aDatetime + datetime.timedelta(days=n)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
マルーンにヒストグラムの色を変更する	plt.hist(データ列, color='maroon')
シエナ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
フィシャー流の尖度	scipy.stats.kurtosis(配列, fisher=True, bias=False)
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
文字列から指定した文字を全て取り除く	文字列.replace(文字, '')
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
実数が無限大かどうか	math.isinf(x)
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='teal')
ファイルパスを文字列の示すエンコーディングでオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
xとyを順に出力する	print(x, y)
現在のモジュールを見る	sys.modules[__name__]
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
クラス分類をブースティングとして行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
アルファベットを全部求める	string.ascii_letters
線グラフをローングリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームの列からユニークな値を抽出しリスト化する	df[col].unique().tolist()
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
スクリプトファイルのパスを見る	os.path.abspath(__file__)
option: 色をダークカーキに設定する	color = 'darkkhaki'
タプルを空白区切りで表示する	print(*タプル)
データシリーズを千の位で丸めて、整数にする	ds.round(-3).astype(int)
両端キュー中の文字列を数える	両端キュー.count(文字列)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
小数点数のアークタンジェント	math.atan(x)
棒グラフの色を深紅にする	plt.bar(データ列x, データ列y, color='crimson')
リストとリストについて散布図を描いて丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムの色をマルーンにセットする	plt.hist(データ列, color='maroon')
レモンシフォンにヒストグラムの色を変更する	plt.hist(データ列, color='lemonchiffon')
option: オリーブにグラフの色をセットする	color = 'olive'
ヒストグラムの色をゴーストホワイトに変更する	plt.hist(データ列, color='ghostwhite')
グラフの描画で濃く色を使う	sns.set(pallete='deep')
数を万の位で丸める	round(x, -4)
rgbの四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
赤色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
ハローワールドとプリントする	print('Hello World')
クラス分類のPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
識別子はトレースバックかどうか調べる	inspect.istraceback(識別子)
横棒グラフをアリスブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='aliceblue')
等間隔のベクトルを初期化する＼	np.arange(開始値, 終了値, 等差)
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
データフレームの一部のカラムの値は欠損値かどうか調べる	df[['列A', '列B']].isna()
異なるカラムをキーとしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
縦棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgray')
データシリーズの曜日が何日目か知る	ds.dt.dayofweek
縦棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
文字列を両端キューから削除する	両端キュー.remove(文字列)
option: グラフの色をフォレストグリーンに指定する	color = 'forestgreen'
データシリーズの不偏分散	ds.var(ddof=1)
行列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
データフレームの選択したカラムの欠損値をxで埋める	df[['列A', '列B']].fillna(x)
整数がリストのひとつであるかどうか調べる	aList = [0, 1, 2]<nl>整数 in aList
データをJSON形式の文字列にする	json.dumps(データ, ensure_ascii=False)
option: ダークグリーン色を用いる	color = 'darkgreen'
predicateFuncがTrueとなるシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
実数の正接	math.tan(x)
折れ線グラフを色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ミディアムターコイズにヒストグラムの色をセットする	plt.hist(データ列, color='mediumturquoise')
散布図の下三角印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
辞書内の値をリストとして見る	list(辞書.values())
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームのあるカラムの時を使う	df['列A'].dt.hour
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
インデント幅を指定してデータをJSON文字列に変換する	json.dumps(データ, ensure_ascii=False, indent=n)
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
リストと数列についての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
option: グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
主成分分析として多次元データを要素次元に削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図を下三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v')
option: タブをセパレータで使う	sep = '\t'
縦方向に３つのデータフレームを結合する	pd.concat([df, df2, df3], axis=1)
オブジェクトは数値	isinstance(obj, (int,float))
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
散布図を黒いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列の中のASCII限定として正規表現によるすべてのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
ダークマゼンタにヒストグラムの色を変更する	plt.hist(データ列, color='darkmagenta')
ヒストグラムをナバホホワイト色として描画する	plt.hist(データ列, color='navajowhite')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列を最後の部分文字列で分割したときの後半の文字列を見る	文字列.rpartition(部分文字列)[-1]
行列にはいくつ要素があるか調べる	aArray.size
データフレームからランダムに100行を取り出す	df.sample(100)
option: フォントの色をロイヤルブルーに変更する	color = 'royalblue'
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: グラフの線種を点線に設定する	linestyle = 'dotted'
二つの数値を改行せずプリントする	print(数値, 数値, end='')
オブジェクトのクラスを使う	type(obj)
折れ線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*')
列名を指定して二つのデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームの中央値	df.median()
線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
変数名はジェネレータ関数	inspect.isgeneratorfunction(識別子)
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
モジュールを検索するパスを列挙する	sys.path
ヒストグラムを点線に指定する	plt.hist(データ列, linestyle='dotted')
データフレームのカラム名を置き換える	df.columns = columns
xをシアンでプリントできる文字列に変換する	f'\033[36m{x}\033[0m'
リストとリストの散布図を描画し、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの指定したカラムの中に文字列と日付データが存在するかどうか調べる	df['列A'].isin([value, value2])
配列の推移を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: ライトシアンを使う	color = 'lightcyan'
predicateFuncが真となるイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
配列の行ごとの最小値	np.min(aArray, axis=1)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームの末尾10行を選ぶ	df.tail(10)
オブジェクトがジェネレータ関数か調べる	inspect.isgeneratorfunction(オブジェクト)
折れ線グラフをゴーストホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
ふたつのタプルを連結する	タプル + タプル2
辞書の内部もコピーする	{k: copy.copy(v) for k, v in 辞書.items()}
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
option: ミディアムブルーにフォントの色を設定する	color = 'mediumblue'
ゼロ埋めされた複素数型の行列を作成する	np.zeros(要素数, dtype=bool)
option: ファイルを使用する	file = sys.open('file.txt', 'w')
ハニーデュー色を用いてヒストグラムを描画する	plt.hist(データ列, color='honeydew')
主成分分析で多次元データを文字列次元に削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^')
回帰分析をスタッキングを使って行う	sklearn.ensemble.StackingRegressor()
イテラブルと数列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ファイルを一行ずつ読む	f.readline()
小数点数の逆余弦	x = 0.33<nl>math.acos(x)
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
実数が正の数かどうか調べる	x > 0
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
option: ロージーブラウン色を使う	color = 'rosybrown'
数列と配列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: ミディアムオーキッドを使用する	color = 'mediumorchid'
リストと配列について散布図を描画して、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
データフレームをある列でグループ化して、各グループごとの件数を知る	df.groupby('列A').size()
文字列を最初のカンマで二分割し、、前半を見る	文字列.partition(',')[0]
両端キューの右に要素を追加する	両端キュー.append(要素)
画面用にグラフを変更する	sns.set(context='notebook')
リストとデータ列の散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 赤にグラフの色をする	color = 'red'
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
option: ▽マーカーを使う	marker = 'v'
ファイルパスを追加モードでオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
データフレームの一部の列はどれだけ、正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
ユーザから入力される	int(input())
イテラブルの要素をひとつの文字列にする	''.join(map(str, イテラブル))
線グラフを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームをCSV形式で出力する	df.to_csv('file.tsv', sep='\t')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
配列とリストの散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
多次元尺度構成法として整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
文字列をコロンで二つに分け、、残りを使う	文字列.partition(':')[-1]
一点鎖線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
辞書をJSONフォーマットでファイル出力に出力する	json.dump(辞書, ファイル出力, ensure_ascii=False)
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
既存のベクトルをベースに全要素が1の行列	np.ones_like(aArray)
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategray')
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
データ列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムを描画して、ビンを設定する	plt.hist(データ列, bins=区関数)
データフレームをグループ化し、各合計を算出する	df.groupby('列A').sum()
配列間の各要素の最大公約数を求める	np.gcd(aArray, aArray2)
折れ線グラフの三角印の色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
アクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データシリーズを100の位で丸める	ds.round(-2)
辞書の項目の一覧を見る	辞書.values()
データフレームの一部の列の記述統計量	df[['列A', '列B']].describe()
カラムのケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
option: 改行コードを旧Macに設定する	newline = '\r'
イテラブルとリストをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
リストをイミュータブルなに変換する	frozenset(リスト)
JSON形式のファイル入力を辞書に変換する	json.load(ファイル入力)
実数を三乗する	x ** 3
外れ値を除いたカラムの分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
整数がセットの要素でない	数 not in セット
option: マゼンタにグラフの色を設定する	color = 'magenta'
区切り記号を用いて文字列を区切って、列挙する	文字列.split(セパレータ)
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
外れ値を除いたデータフレームのカラムの分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
列の最大幅をnに変更する	pd.set_option('max_colwidth', n)
最大値でデータフレームの欠損値を置換する	df.fillna(df.max())
パウダーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
タプルの先頭の要素	タプル[0]
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ファイルパスのファイル名を使う	os.path.basename(filepath)
折れ線グラフに星印を加える	plt.plot(データ列x, データ列y, marker='*')
クラス分類を確率的勾配降下でする	model = sklearn.linear_model.SGDClassifier()
線グラフの色を青紫にセットする	plt.plot(データ列x, データ列y, color='violet')
散布図を▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
アリスブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームから指定したデータ型のカラム名の一覧を使う	df.select_dtypes(型).columns
折れ線グラフをローングリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lawngreen')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
ヒストグラムをベージュ色を用いて描画する	plt.hist(データ列, color='beige')
option: フォントの色をブラウンに指定する	color = 'brown'
option: グラフの色をデピンクにセットする	color = 'deeppink'
カウンタの項目をリストとして得る	aCounter.keys()
散布図の△印を赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図の印をダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
リストが空かどうか調べる	len(リスト) == 0
JSON形式の文字列を読む	data = json.loads(文字列)
ゴーストホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データシリーズの歪度を求める	ds.kurt()
偽陽性を避けたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
複数行対応として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
リストと数列について散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのひとつの列のみ説明変数にする	説明変数 = df[['列名']]
散布図に三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in 文字列)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
option: フォントの色をゴーストホワイトに設定する	color = 'ghostwhite'
option: 箱髭図に平均を加える	showmeans = False
データフレームの中に日付データがあるか	df.isin([value])
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
ロバスト分類モデルを作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの選択したカラムの欠損値をその平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
2つの文字列をケースを無視して比較する	文字列.casefold() < 文字列2.casefold()
データシリーズの欠損値を直後の値で補完する	ds.fillna(method='bfill')
option: ピンクにフォントの色を設定する	color = 'pink'
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
数列を変更不能なセットに変換する	frozenset(数列)
データシリーズの欠損値を直前の値で補う	ds.fillna(method='ffill')
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
辞書を浅く複製する	dict(辞書)
横棒グラフをクリムゾン色を使って描画する	plt.barh(データ列x, データ列y, color='crimson')
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
カウンタから最も頻出な項目の件数を求める	aCounter.most_common()[1]
散布図をレモンシフォン色として描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
セットの要素が別のセット2に含まれるか調べる	セット.issubset(セット2)
タプルの要素が最初に見つかるインデックスを見る	タプル.index(要素)
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
オブジェクトはリストクラス	list = int<nl>isinstance(obj, list)
数列をy軸、リストをx座標として大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
ベクトルの合計値	np.sum(aArray)
ヒストグラムをハニーデュー色を用いて描画する	plt.hist(データ列, color='honeydew')
整数の桁数を計算する	len(str(整数))
書き込みできるようにファイルをSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
要素はリストの要素でないか調べる	要素 not in リスト
二つの整数最小公倍数	math.lcm(n, n2)
プラム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
列を中央値でビンニングする	pd.qcut(ds, 2)
浮動小数点数のハイパボリック・タンジェントを計算する	math.tanh(x)
折れ線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: 深紅色を使う	color = 'crimson'
改行なしにxを出力する	print(x, end='')
折れ線グラフをライトスチールブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ある列にリストの値が含まれる行を選択する	df[df['列A'].isin(リスト)]
option: ミントクリームにグラフの色を変更する	color = 'mintcream'
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
日付時刻データの時間	aDatetime.hour
xでデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(x)
option: グラフの色をダークレッドに変更する	color = 'darkred'
文字列を末尾からコロンで区切る	文字列.rsplit(':')
主成分分析で整数次元に削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
プラットフォームの文字コードの最大値	sys.maxunicode
option: グラフの色をグレーに設定する	color = 'grey'
乱数シードをnで固定する	random.seed(n)
日付データが水曜日かどうか	aDate.weekday() == 2
rgbの左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
リストの各要素を関数に適用した結果でソートする	sorted(リスト, key=func)
文字列中にひとつも空白がない	any(not c.isspace() for c in 文字列)
整数が1もしくは2かどうか調べる	整数 == 1 or 整数 == 2
option: フォントの色をマルーンに設定する	color = 'maroon'
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
プロットのグリッドを暗くする	sns.set(style='darkgrid')
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームのstart行目からend行目までを抽出する	df[start:end]
横軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: 箱ひげ図に平均を追記する	showmeans = False
クラス分類の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
配列のKurtosis	scipy.stats.kurtosis(配列, bias=False)
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
リストとリストについての散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
option: オリベドラブを使う	color = 'olivedrab'
EUCとしてファイルパスをオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
リストに別のリストを加えて拡張する	リスト.extend(リスト2)
パステル調にカラーパレットをグラフの描画で使う	sns.set(pallete='pastel')
データフレームは正規分布からどの程度、尖っているか確認する	df.skew()
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
イテラブルと数列の散布図を描画して、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
ふたつの関係が部分集合か確認する	セット.issubset(セット2)
文字列を左トリムする	文字列.lstrip()
option: フォントの色をライトグリーンに変更する	color = 'lightseagreen'
xが無限大に近づくときの数式の極限値を計算する	sympy.limit(数式, [|変数]x, oo)
データシリーズの欠損値を50パーセンタイルで埋める	ds.fillna(ds.median())
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
文字列をコロンによって二分割する	文字列.partition(':')
option: 改行コードをUNIXに指定する	newline = '\n'
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
黒い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
option: グラフの色をスレートブルーにセットする	color = 'slateblue'
option: ダークスラテグレーに色を設定する	color = 'darkslategray'
小数点数の逆双曲線正弦	math.asinh(x)
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
option: バイナリ書き込みモードを使用する	mode = 'wb'
シャルトリューズ色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
カラムのKurtosisを使う	scipy.stats.kurtosis(df['列A'], bias=False)
ホワイトスモーク色を用いてヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
カテゴリ列で色付けして、に箱ひげ図としてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
本日が木曜日かテストする	datetime.datetime.today().weekday() == 3
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
配列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
表データの上10行	df.head(10)
ある列の文字列が正規表現文字列にマッチしない行を抽出する	df[~df['列A'].str.match(正規表現)]
イテラブルとデータ列についての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
タプルの合計	sum(タプル)
一点鎖線でイテラブルの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列が指定された文字列で終わるかどうか確認する	文字列.endswith(部分文字列)
数式をyの方程式として解く	sympy.solve(数式, y)
データフレームの欠損値を平均値にセットする	df.fillna(df.mean())
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
バリーウッド色としてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
書式文字列をarg文字列を引数として文字列整形する	書式.format(*args)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
文字列をSJISでバイト列に変換する	文字列.encode(encoding='sjis', errors='ignore')
ライトコーラル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: 青緑色を使う	color = 'teal'
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
整数の各桁の和	sum(map(int, str(整数)))
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategray')
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
option: ピーチパフにフォントの色を設定する	color = 'peachpuff'
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
データフレームのあるカラムの中にいくつ日付データがあるかカウントする	df['列A'].isin([value]).sum()
変数名を項目名として、辞書	dict(name='kogi', age=6)
option: フクシアを使用する	color = 'fuchsia'
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームの列の名前の一覧を見る	df.columns
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
option: ベージュを使用する	color = 'beige'
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
option: シスルにフォントの色を指定する	color = 'thistle'
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームをグループ化しある列に対し分散を計算する	df.groupby('列A')['列B'].var()
ターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
n個の整数列を得る	list(range(n))
イテラブルを更新不能なに変換する	frozenset(イテラブル)
option: サーモンにフォントの色を設定する	color = 'salmon'
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
option: ミディアムパープルを用いる	color = 'mediumpurple'
option: グレーを使う	color = 'gray'
option: スラグレー色を使う	color = 'slategray'
option: ライトブルーを用いる	color = 'lightblue'
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
数列の推移を半透明の実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: フォントの色をゲインズボロに設定する	color = 'gainsboro'
線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
option: マーカーをバツに変更する	marker = 'x'
インディゴ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
配列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
タプルの要素を並べ直す	sorted(タプル)
year年month月を日付にする	datetime.date(year=year, month=month, day=1)
データ列の各データが何回出現するか調べる	ds.value_counts()
配列の変遷を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
プロットのx座標の軸ラベルを設定する	plt.xlabel('x軸ラベル')
整数が一桁の数か調べる	-9 <= 整数 <= 9
2つのデータフレームを列名を指定して左結合する	pd.merge(df, df2, on='列A', how='left')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
データフレームの選択したカラムのNaNを平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
データシリーズを一万の位で四捨五入する	ds.round(-4)
再帰の上限を増やす	sys.setrecursionlimit(1000000)
ひとつでも非空白が文字列中に存在するか確認する	any(not c.isspace() for c in 文字列)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データフレームをグループ化しある列に対し最大値を求める	df.groupby('列A')['列B'].max()
リストの値を昇順にソートする	sorted(リスト, reverse=True)
データフレームをある列によって昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
中央値でデータフレームの選択したカラムの未入力値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データフレームの最頻値を求める	df.mode()
棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データフレームの中にいくつがあるか求める	df.isin([value]).sum()
option: バイナリ書き込みモードに設定する	mode = 'wb'
ある列の文字列に部分文字列がある行を抽出する	df[df['列A'].str.contains(部分文字列)]
変数名がジェネレータ	inspect.isgenerator(識別子)
文字列が全て小文字かどうか調べる	文字列.islower()
実数を２乗する	x ** 2
青い実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: ダークレッドにグラフの色をする	color = 'darkred'
列をカウントしてカウンタを更新する	aCounter.update(iterable)
配列をビン数nで等しい量になるようにビンニングする	pd.qcut(aArray, n)
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
表データのある列を破壊的にドロップする	df.drop('列A', axis=1, inplace=True)
option: ダークオーキッド色を用いる	color = 'darkorchid'
セットをイミュータブルな集合にする	frozenset(セット)
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのある列の値がxに等しいデータを選択する	df[df['列A'] == x]
本日の年数	datetime.datetime.today().year
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームの母標準偏差	df.std(ddof=0)
縦棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
両端キューをタプルにする	tuple(両端キュー)
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
option: ハニーデュー色を使う	color = 'honeydew'
指定した列リストだけ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
整数を整数で割って小数点以下を切り捨てる	整数 // 整数2
文字列を部分文字列で二分して、前半を使う	文字列.partition(部分文字列)[0]
二つの列の値によってデータフレームをグループ化し、基本統計量を求める	df.groupby(['列A', '列B']).describe()
表データのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
ある列の文字列に部分文字列が存在しない行を選ぶ	df[~df['列A'].str.contains(部分文字列)]
整数を二進数文字列に変換する	bin(整数)[2:]
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
データフレームの指定したカラムの歪みを計算する	df['列A'].kurt()
データフレームをグループ化し、ある列に対し個数を求める	df.groupby('列A')['列B'].count()
xをアンダーライン付きで表示できる文字列に変換する	f'\033[4m{x}\033[0m'
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
標準入力から1行改行なしで読む	sys.stdin.readline().rstrip()
折れ線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
要素がセットのいずれかどうか調べる	要素 in セット
分類モデルの正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ヒストグラムをインディアンレッド色を使って描画する	plt.hist(データ列, color='indianred')
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
整数足す整数を求める	整数 + 整数2
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
文字列中に非小文字が含まれる	any(not c.islower() for c in 文字列)
タンにヒストグラムの色を指定する	plt.hist(データ列, color='tan')
文字列が別のに含まれるかどうか調べる	文字列 not in 別の文字列
ふたつの列でグループ化し分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
10を底とする小数点数の対数	math.log10(x)
データフレームの選択した列の代表値を求める	df[['列A', '列B']].describe()
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフをダーク・スラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
外れ値を除いたデータフレームのカラムの分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: ダークカーキ色を使用する	color = 'darkkhaki'
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
option: NaNを先頭に来るようにする	na_position = 'first'
データフレームのヒストグラム付き散布図を描く	sns.jointplot(x='列名', y='列名', data=df)
option: グラフの色をホットピンクに変更する	color = 'hotpink'
識別子がビルトイン関数か	inspect.isbuiltin(識別子)
散布図の菱形マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの選択した列の欠損値をモードに変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
青いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ライトイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
タプルの最後を除く	タプル[:-1]
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
リストとイテラブルについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ボックスチャートを横方向にする	plt.boxplot(データ列, vert=False)
ペルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
日付データをn秒前にする	aDate - datetime.timedelta(seconds=n)
文字列を両端キューの先頭に入れる	両端キュー.appendleft(文字列)
ある列の値ごとの最大値を計算する	df.groupby('列A').max()
整数を整数で割ったモジュロ	整数 % 整数2
データシリーズの中にがあるか判定する	ds.isin([value])
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
option: グラフの色をネイビーに変更する	color = 'navy'
rgbのポイントマーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
数列から両端キューを用意する	collections.deque(数列)
両端キューが空でないか調べる	len(両端キュー) != 0
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
折れ線グラフをスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='slateblue')
マップをコピーする	辞書.copy()
折れ線グラフに赤いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
実数以上の最小の整数を求める	math.ceil(x)
整数がセットのどれかか判定する	aSet = [0, 1, 2]<nl>整数 in aSet
データフレームの選択したカラムの要約統計量を求める	df[['列A', '列B']].describe()
リストを組にする	tuple(リスト)
プロットのカラーテーマを暗くする	sns.set(pallete='dark')
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
文字列が全てアスキー文字か確認する	文字列.isascii()
横棒グラフをライトスチールブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データフレームの未入力値を平均値で埋める	df.fillna(df.mean())
オレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
実数の角度を求める	math.degrees(x)
option: ダークスレートブルー色を使う	color = 'darkslateblue'
辞書に項目名が存在していないならば、処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
イテラブルとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
整数がセットのメンバーに含まれないかどうか調べる	数 not in セット
データフレームをある列によって昇順に破壊的に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
nの無限リストを求める	itertools.repeat(n)
3つの変数の値を順にプリントする	print(変数名, 変数名, 変数名)
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
辞書からキーとバリューの組を取り出しひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
xを太字で表示する	print(f'\033[1m{x}\033[0m')
option: ミディアムシアグリーンに色を設定する	color = 'mediumseagreen'
グラフの描画で暗くカラーテーマを使用する	sns.set(pallete='dark')
最初の文字列を両端キューから取り除く	両端キュー.remove(文字列)
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
rgbの左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームを表示するとき、表示可能な最大行数をnに減らす	pd.set_option('display.max_rows', n)
データシリーズの中にいくつ欠損値があるか調べる	ds.isna().sum()
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
オブジェクトは論理値か	bool = int<nl>isinstance(obj, bool)
二つのデータフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
グリッドの線スタイルを一点鎖線に変更する	plt.grid(linestyle='dashbot')
タプルの順序をランダムにシャッフルする	tuple(random.sample(タプル, len(タプル)))
線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: スプリンググリーン色を用いる	color = 'springgreen'
文字列の先頭で正規表現にケースを無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
ファイルをバイナリ用に開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
データフレームの選択したカラムの統計量を確認する	df[['列A', '列B']].describe()
配列の幾何平均を算出する	scipy.stats.gmean(配列)
カーキ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
グラフの色テーマを暗くする	sns.set(pallete='dark')
未入力値がある行を取り除き、みる	df.dropna()
折れ線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
クラス分類をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データをインデント幅を指定してJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
predicateFuncが真となるイテラブルの要素を除去する	itertools.dropwhile(predicateFunc, iterable)
レベッカパープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの色をミスティローズにセットする	plt.plot(データ列x, データ列y, color='mistyrose')
リストに別のリストを追加して拡張する	リスト.extend(リスト2)
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列の左側から空白を除去する	文字列.lstrip('\t')
整数を八進数表現に変換する	oct(整数)
rgbのバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
入力ストリームを一行ずつ読む	f.readline()
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
配列を変更不能なセットに変換する	frozenset(配列)
ユニークな要素ごとの出現回数を見る	np.unique(aArray, return_counts=True)
キューをセットに変換する	set(両端キュー)
イテラブルのコンビネーション	itertools.combinations(iterable, n)
文字列からタブを全て除く	文字列.replace('\t', '')
散布図の大バツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
ヒストグラムをフォレストグリーン色を使って描画する	plt.hist(データ列, color='forestgreen')
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
n個に等量でデータフレームの中のカラムをビン分割する	pd.qcut(df[col], n)
データフレームの最初10行	df.head(10)
双方向キュー中の整数のインデックス	両端キュー.index(整数)
改行なしに変数をプリントする	print(変数名, end='')
データフレームのインデックス名を一度に変更する	df.rename(index={x: y})
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
データフレームの一部の列の文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
マップのキーに対応した値を参照する	辞書.get(キー, 見つからない場合の値)
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
プロットの描画で色差別なくパレットを使う	sns.set(pallete='colorblind')
データシリーズが何日か見る	ds.dt.day
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
長さの制限された双方向キューをイテラブルから用意する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
カンマ区切りのファイルをカラム名を指定せず読み込む	pd.read_csv('file.csv', header=None)
データフレームの選択したカラムの未入力値を直後の値にセットする	df[['列A', '列B']].fillna(method='bfill')
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
リストとリストについて散布図を描画してマーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
異なる列をキーとして2つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームをソートし、、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
配列をn個に等しい量になるようにビン分割する	pd.qcut(aArray, n)
リストとデータ列についての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
option: フォントの色をレベッカパープルに設定する	color = 'rebeccapurple'
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
新しい重回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
option: データ型としてブール型を用いる	np.int32 = np.int<nl>dtype = np.int32
表データの列の種類	df.info()
数式をxについて偏微分する	sympy.diff(数式, [|変数]x)
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフのクロス印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: パープルにグラフの色を変更する	color = 'purple'
イテラブルから複数個ランダムに選んでリスト化する	random.choices(イテラブル, k=n)
棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
散布図の▽印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
option: ミスティローズに色を設定する	color = 'mistyrose'
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
マゼンタでプリントできる文字列にする	f'\033[35m{x}\033[0m'
カウンタの積集合演算する	aCounter & aCounter2
文字列の接尾辞が	文字列.endswith(部分文字列)
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
プログラムのファイルの名前	sys.argv[0]
y軸の目盛りを表示しない	plt.yticks([])
両端キューは空かどうか調べる	len(両端キュー) == 0
option: ゴーストホワイトにグラフの色を指定する	color = 'ghostwhite'
縦棒グラフを描画し、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
文字列の開始位置番目からと終了位置番目までの間に部分文字列が含まれない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
セットを別のセットとの共通要素のみにする	セット.intersection_update(セット2)
option: 赤にグラフの色を設定する	color = 'red'
カウンタのKトップをリストとして得る	aCounter.most_common(k)
バイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='violet')
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
整数を二進数表現にする	bin(整数)
散布図の印を▲印にする	plt.scatter(データ列x, データ列y, marker='^')
タプルのn番目のの要素	タプル[n]
青い一点鎖線を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームの行と列を入れ替える	df.T
ミディアムスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
文字列が別のに含まれる	文字列 not in 別の文字列
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームからカラムを２つだけ選択する	df[['列A', '列B']]
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
整数が一桁の整数か調べる	0 <= 整数 <= 9
線グラフの色をグリーンにセットする	plt.plot(データ列x, データ列y, color='green')
回帰分析を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームの列の一覧	df.info()
option: パープルにグラフの色を設定する	color = 'purple'
散布図をダークレッド色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
散布図に黒い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
ダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
入力ストリームを改行を取り除いて一行ずつ読む	f.readline()
データフレームを万の位で四捨五入する	df.round(-4)
データフレームの指定した列のNaNを直後の値に変更する	df['列A'].fillna(method='bfill')
指定した列の中の欠損値の合計を数える	df['列A'].isna().sum()
実数を十六進表記の文字列に変換する	x.hex()
本日の日数	datetime.datetime.today().day
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
リストと配列の散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
データフレームを百の位で丸めて整数にする	df.round(-2).astype(int)
データフレームのn行より後ろを取り出す	df[n:]
データ列の分布を描画する	plt.scatter(データ列x, データ列y)
現在は何分か知る	datetime.date.today().minute
識別子は非同期ジェネレータかどうか調べる	inspect.isasyncgen(識別子)
辞書の値の一覧	list(辞書.values())
星マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
ExcelファイルファイルをSJISでロードする	pd.read_csv('file.csv', encoding='shift_jis')
データ列とリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ロバストな重回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
データフレームのカラム間の相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
ふたつのリストを加える	リスト + リスト2
サドルブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ファイルパスをSJISとして書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
ダークオリーブグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
青い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
文字列がアルファベットかどうか調べる	文字列.isalpha()
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
整数の割り算の余り	整数 % 整数2
マッピングから多重集合を作成する	collections.Counter(aDict)
折れ線グラフをダークレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
グラフを用いる準備をする	import matplotlib.pyplot as plt
リストの平均値を求める	sum(リスト)/len(リスト)
表データの先頭10行	df.head(10)
指定した列で集計し、それぞれの平均値を計算する	df.groupby('列A').mean()
option: グラフの種類を破線に設定する	linestyle = 'dashed'
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
option: フォントの色をローングリーンにセットする	color = 'lawngreen'
変数xについて数式の積分を行う	sympy.integrate(数式, [|変数]x)
サンディーブラウン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
正規表現モジュールをインポートする	import re
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
整数の二進数リテラルを使う	bin(整数)
option: グラフの色を白に設定する	color = 'white'
リストと配列について散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列を走査し、正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
データシリーズの母標準偏差	ds.std(ddof=0)
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: タン色を使用する	color = 'tan'
青い破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: オールドレースにグラフの色を変更する	color = 'oldlace'
option: ライトコーラル色を使う	color = 'lightcoral'
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
リストとリストについて散布図を描画してマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
浮動小数点数の正接の逆数	math.atan(x)
新しいガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムをミスティローズ色を使って描画する	plt.hist(データ列, color='mistyrose')
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
アクア色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
リストと数列について散布図をプロットし、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
オブジェクトはタプルクラス	tuple = int<nl>isinstance(obj, tuple)
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームの指定した列の空文字を欠損値に変換しドロップする	df['列A'].replace('', np.nan).dropna()
現在の作業ディレクトリ	os.getcwd()
数列の推移を半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
option: グラフの色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
変数xについて数式をn階偏微分する	sympy.diff(数式, [|変数]x, n)
数を複素数に変換する	complex(x)
文字列がセットのメンバーでないか調べる	文字列 not in セット
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
赤いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
範囲を指定して整数乱数を得る	random.randint(最小値, 最大値)
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
赤い実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
文字列をセットから取り除く	セット.remove(文字列)
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
xを下線付きにする	f'\033[4m{x}\033[0m'
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
十六進数文字列をバイト列に変換する	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
方程式の解を算出する	sympy.solve(数式)
データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ローングリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
一方に含まれ、他方に含まれない集合を見る	セット.difference(セット2)
棒グラフをダークオーキッド色を使って描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームの指定した列名リストの列のみ抽出する	columns = ['列A', '列B']<nl>df[columns]
文字列は両端キューの中に含まれてるかどうか調べる	文字列 in 両端キュー
カウンタの項目一覧を見る	aCounter.keys()
データフレームの選択した列の欠損値を中央値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: バッファリングのサイズを大きくする	buffering = 4096
日付時刻データからn秒を引く	aDatetime - datetime.timedelta(seconds=n)
混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
データフレームの指定した列の値がNaN	df['列A'].isna()
全ての十六進数字	string.hexdigits
ふたつの集合の積集合を使う	セット.intersection(セット2)
折れ線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
文字列を文字のリストにする	list(文字列)
データフレームの指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
データフレームの中にある文字列の合計を求める	df.isin([value]).sum()
データフレームから指定した三つの列を選択する	df[['列A', '列B', '列C']]
option: 色をオリーブに変更する	color = 'olive'
縦方向にデータフレームを連結する	pd.concat([df, df2], axis=0)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
文字列からサフィックスを取り除く	文字列.removesuffix(部分文字列)
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームのあるカラムの曜日名	df['列A'].dt.weekday_name
ベクトルの演算をする	import numpy as np
文字列を最後の区切り記号で分けたときの後半の文字列	文字列.rpartition(セパレータ)[-1]
配列と配列の散布図に黒い菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
option: ダークグリーンを使う	color = 'darkgreen'
線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
ベストな位置にデータラベルを表示する	plt.legend(loc='best')
文字列中の部分文字列の登場を範囲を指定して数える	文字列.count(部分文字列, 開始位置, 終了位置)
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
データフレームの指定したカラムがどの程度、分散しているか見る	df['列A'].var()
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
カウンタを列として更新する	aCounter.update(iterable)
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
option: グラフの色をダークオーキッドに指定する	color = 'darkorchid'
グラフの描画を見やすくする	import seaborn as sns
ヒストグラムの色をクリムゾンに指定する	plt.hist(データ列, color='crimson')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフを耐火レンガ色を用いて描画する	plt.plot(データ列x, データ列y, color='firebrick')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
xを赤色にする	f'\033[31m{x}\033[0m'
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
option: プラム色を用いる	color = 'plum'
数列を	''.join(map(str, 数列))
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
小数点数のサインを計算する	math.sin(x)
option: 色をナバホホワイトに設定する	color = 'navajowhite'
データフレームの指定したカラムのNaNをxで埋める	df['列A'].fillna(x)
ヒストグラムをライトイエロー色を用いて描画する	plt.hist(データ列, color='lightyellow')
ファイルパスを追加モードを用いてオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
両端キュー中の要素をカウントする	両端キュー.count(要素)
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
ファイルパスのファイルサイズ	os.path.get_size(filepath)
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームの指定したカラムの統計量	df['列A'].describe()
データ列とリストの散布図を描画して、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
２つの列によってデータフレームをグループ化し統計量を算出する	df.groupby(['列A', '列B']).describe()
三つの数値を順に出力する	print(数値, 数値, 数値)
ヒストグラムをフローラルホワイト色として描画する	plt.hist(データ列, color='floralwhite')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
半透明の実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
xの出力を改行しなくて行う	print(x, end='')
キューの末尾に文字列を付け加える	両端キュー.append(文字列)
折れ線グラフの丸印の大きさを設定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
option: グラフの色を青紫に設定する	color = 'violet'
折れ線グラフを実線として描く	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
ファイルからn文字読み込む	f.read(n)
実数の逆余弦	x = 0.33<nl>math.acos(x)
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
計算結果の出力を改行せずに行う	print(式, end='')
option: n番目の列をインデックスに設定する	index_col = n
ヒストグラムの色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
モデルを作る	model.fit(説明変数, 目的変数)
イテラブルのイミュータブルな集合を求める	frozenset(イテラブル)
赤い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
改行せず複数の変数を表示する	print(変数名, 変数名, end='')
エクセルファイルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームのある列の値がxより大きい行を選択する	df[df['列A'] > x]
切片なしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
カテゴリで色付けして、データフレームをに箱ひげ図としてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
リストをJSON文字列にする	json.dumps(リスト, ensure_ascii=False)
赤色でプリントできる文字列に変換する	f'\033[31m{x}\033[0m'
文字列から部分文字列の位置を探す	文字列.find(部分文字列)
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
回帰分析をバギングとしてする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
タイムスタンプデータの曜日を使う	aDatetime.weekday()
２つのカウンタの共通する要素	aCounter & aCounter2
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
文字列中にひとつでも英数字が含まれる	any(c.isalnum() for c in 文字列)
ラジアンの角度	math.degrees(x)
ファイルをオープンして]、追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
リストとリストについての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データシリーズの中にいくつ文字列が含まれるか数える	ds.isin([value]).sum()
配列とデータ列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
分割数nを用いてデータフレームの中の列を分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ベクトルを一次元化する	aArray.flatten()
文字列がセットに含まれない	文字列 not in セット
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
文字列を小文字にする	文字列.lower()
浮動小数点数を切り上げて整数に変換する	math.ceil(x)
実数に実数を加算する	x + y
option: 四角印を使う	marker = 's'
option: 書き込みモードに設定する	mode = 'w'
折れ線グラフをベージュ色を使って描画する	plt.plot(データ列x, データ列y, color='beige')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
データフレームのあるカラムをリストに変換する	df['列A'].values.tolist()
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
回帰分析をSDGとして行う	model = sklearn.linear_model.SGDRegressor()
小数点以下'4'桁までをプリントする	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
後の行の値でデータフレームの指定した列の欠損値を埋める	df['列A'].fillna(method='bfill')
ファイルを開き]書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
データフレームの標準偏差	df.std()
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
モデルの残差を算出する	目的変数 - model.predict(説明変数)
データフレームの選択した列の中にいくつ文字列があるかカウントする	df[['列A', '列B']].isin([value]).sum()
列自身の長さnの順列を求める	itertools.permutations(iterable, n)
改行なしに２つの計算結果を表示する	print(式, 式, end='')
あるカラムの文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
色付きの実線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
プロットの背景色を暗くする	sns.set(style='darkgrid')
データフレームを関数によってグループ分けし、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データシリーズの中にいくつがあるか数える	ds.isin([value]).sum()
データフレームを２つの列によって並べ、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
バイアスなしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
文字列の右側から空白を取り除く	文字列.rstrip()
前もってASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
xをマゼンタで表示できる文字列に変換する	f'\033[35m{x}\033[0m'
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
数のn乗を計算する	pow(x, n)
データフレームの選択したカラムの中に文字列があるか調べる	df[['列A', '列B']].isin([value])
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列の左側から指定された文字を取り除く	文字列.lstrip(文字)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
option: アイボリーを使用する	color = 'ivory'
画面にプロットの用途を設定する	sns.set(context='notebook')
実数の平方根を求める	math.sqrt(x)
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
度数分布図の範囲を設定する	plt.hist(データ列, range=(start, end))
クラス分類をブースティングでする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
数列からn個、サンプリングしてリストにする	random.sample(数列, k=n)
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
行列の行列式を求める	np.linalg.det(aArray)
文字列の先頭から不要な空白を取り除く	文字列.lstrip()
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
option: 茶色色を用いる	color = 'brown'
ライム色としてヒストグラムを描画する	plt.hist(データ列, color='lime')
線グラフを黄緑色を用いて描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームの選択したカラムの欠損値を直後の値で置換する	df[['列A', '列B']].fillna(method='bfill')
option: グラフの色をライトサーモンに指定する	color = 'lightsalmon'
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
数列とリストについての散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
両端キューの中に整数があるか	整数 in 両端キュー
ふたつの列を組み合わせてグループ化し、合計を算出する	df.groupby(['列A', '列B'], as_index=False).sum()
実数を実数で割った剰余を算出する	math.remainder(x, x2)
データシリーズが何秒か調べる	ds.dt.second
データフレームを指定した列を用いて昇順に整列する	df.sort_values(by='列A', ascending=True)
マップからキーで指定されたエントリをポップする	辞書.pop(キー)
配列を平坦にする	aArray.flatten()
データフレームの最後n行を取り出す	df.tail(n)
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ライトコーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
実数の余弦の逆数を求める	x = 0.33<nl>math.acos(x)
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図をrgbの三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
小数点数を実数で割った剰余を求める	math.remainder(x, x2)
数式をyについて偏微分する	sympy.diff(数式, y)
デフォルトのエンコーディングを見る	sys.getdefaultencoding()
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()//60
タプルの値だけプリントする	print(*タプル)
データフレームのメディアンを算出する	df.median()
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
無限なリストを得る	itertools.count()
真紅色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
配列とデータ列についての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
文字列がリストのいずれでもないか判定する	文字列 not in リスト
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
表の末尾10行を取り出す	df.tail(10)
全要素を0で初期化した配列	np.zeros(要素数)
行列の列ごとの最大値を求める	np.max(aArray, axis=0)
大バツ印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
データフレームのヒストグラムを縦横に並べてグラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
項目名が辞書にないとき、要素を追加する	辞書.setdefault(キー, element)
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
入力ストリームをJSONとして構文解析する	json.load(ファイル入力)
数列のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
データフレームを行によって降順でソートする	df.sort_index(ascending=False)
正規分布のパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームをグループ化しある列の要約統計量を計算する	df.groupby('列A').describe()['列B']
0からnまでの整数列	list(range(n+1))
データフレームの選択したカラムを百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
日付データと日付データの時間差を秒で算出する	(aDate - aDate2).total_seconds()//60
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの上三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
複数の数値を順に表示する	print(数値, 数値, 数値)
折れ線グラフのポイントマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
両端キューの中に整数が含まれてるか調べる	整数 in 両端キュー
オブジェクトがメソッドか調べる	inspect.ismethod(オブジェクト)
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
全要素を初期値で初期化した行列を作成する	np.full(要素数, 初期値, dtype=np.int)
option: グラフの色を青緑に指定する	color = 'turquoise'
行列の累積積	np.cumprod(aArray)
データフレームからある三つの列のみ抽出する	df[['列A', '列B', '列C']]
ライトグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lightseagreen')
両端キューの長さを制限する	collections.deque(maxlen=最大長)
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
配列とイテラブルについて散布図を描き、、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
最後の部分文字列によって文字列を二分する	文字列.rpartition(部分文字列)
要素がセットに含まれないかどうか調べる	要素 not in セット
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
ダークグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
リストをランダムにシャッフルしてリストにする	random.sample(リスト, len(リスト))
辞書の全値をクリアする	辞書.clear()
nとkのコンビネーション	math.comb(n, k)
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
環境のエンコーディングを使う	sys.getdefaultencoding()
重複する行だけ	df[df.duplicated(keep=False)]
自然数のGCD	math.gcd(n, n2)
JSONファイルファイル名が	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
改行なしに変数の値を表示する	print(変数名, end='')
option: ゴールド色を使用する	color = 'gold'
特異値分解として数値次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データフレームの一部のカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
日本語が文字列に含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
ヒストグラムをダークオーキッド色を用いて描画する	plt.hist(データ列, color='darkorchid')
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
横棒グラフを描画し、、バーの縦幅を変更する	plt.barh(ラベル列, データ列, width=0.5)
要素ひとつのタプル	(要素,)
バイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列は全て数値	文字列.isnumeric()
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
全要素を０で初期化した複素数型の行列を作成する	np.zeros(行数, 列数, dtype=bool)
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
option: スラッシュをセパレータで使う	sep = '/'
0で全要素を初期化した配列	np.zeros(要素数)
配列を転置する	aArray.T
オブジェクトがコード	inspect.iscode(オブジェクト)
ターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データ列と配列の散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データシリーズの欠損値を直前の値に減らす	ds.fillna(method='ffill')
整数が一桁の整数か	-9 <= 整数 <= 9
ひとつもASCII文字が文字列中にない	any(not c.isascii() for c in 文字列)
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
option: ヘッダを連番に減らす	header = None
データフレームの一部のカラムのNaNをxに設定する	df[['列A', '列B']].fillna(x)
タプルの末尾を使う	タプル[-1]
データラベルをプロットの表示する	plt.legend()
データ列のUNIX時間をタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
配列とイテラブルについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームを表示するとき、最大列数を増やす	pd.set_option('display.max_columns', n)
option: 下三角マーカーを使用する	marker = 'v'
グラフで使える色名の一覧を知る	matplotlib.colors.cnames
要素を双方向キューの最初に追加する	両端キュー.appendleft(要素)
データフレームから列を二つ選択する	df[['列A', '列B']]
データシリーズの要約統計量	ds.describe()
データフレームをグループ化し、それぞれの個数を求める	df.groupby('列A').count()
二つの列を組み合わせてグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
option: ダークターコイズを用いる	color = 'darkturquoise'
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
漢字が文字列に存在する	re.search('[\u4E00-\u9FD0]', 文字列)
行列の列ごとの最小を計算する	np.min(aArray, axis=0)
データフレームの指定した列の75パーセンタイル	df['列A'].quantile(0.75)
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
配列とデータ列についての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図をダークオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorange')
▲印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
整数同士の論理和	整数 | 整数2
辞書からエラーなく項目名の値	辞書.get(キー, 見つからない場合の値)
option: 青色を用いる	color = 'blue'
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
常用対数	math.log10(x)
列の名前を列挙する	df.columns
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
表データのあるカラムの分	df['列A'].dt.minute
データフレームの列を名前変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
データフレームから重複をドロップする	df.drop_duplicates(inplace=True)
アイリスのデータセットをロードする	df = sns.load_dataset('iris')
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データシリーズを四捨五入して、整数型にする	ds.round().astype(int)
n個の集まりからk個重複なく選ぶ方法を計算する	math.comb(n, k)
範囲を指定して整数乱数を計算する	random.randint(最小値, 最大値)
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
リストを文字列として、'改行で連結する	'\n'.join(map(str, リスト))
データを最大値と最小値を使って正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
八進数字を見る	string.octdigits
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
データシリーズの未入力値を中央値に設定する	ds.fillna(ds.median())
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
赤いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
等量でデータ列をビン数nとして分割する	pd.qcut(ds, n)
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
散布図を黒い右三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='>', c='k')
option: グラフの色をデピンクに設定する	color = 'deeppink'
データ列の推移を半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフの星マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
偽陽性を抑えたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
数列と配列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列をカンマで分割し、、後ろの方を見る	文字列.partition(',')[-1]
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
option: ゴールデンロッド色を用いる	color = 'goldenrod'
イテラブルから配列を初期化する	np.array(iterable)
折れ線グラフの大バツ印の色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ダイアモンド印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
カーネル密度による分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
改行なしに数値をプリントする	print(数値, end='')
円プロットのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
リストを一つの文字列にする	''.join(map(str, リスト))
散布図の▽マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
文字列をエンコーディングでバイト列に変換する	文字列.encode(encoding=encoding)
折れ線グラフの丸印の太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
散布図を黒い丸マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの尖度を求める	df.skew()
データフレームをTSVファイルで保存する	df.to_csv('file.tsv', sep='\t')
ファイルを追加モードを用いて開いて]fとする	f = open(filepath, mode='a')
リストを番号付けする	enumerate(リスト)
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
option: 色をトマトに設定する	color = 'tomato'
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
nからn2までの整数列を使う	list(range(n, n2+1))
棒プロットの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームのカラムを標準化する	scipy.stats.zscore(df['列A'])
折れ線グラフのマーカーを▼印にする	plt.plot(データ列x, データ列y, marker='v')
シエナ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
ターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
文字列が全て大文字か調べる	文字列.isupper()
option: 下三角マーカーを加える	marker = 'v'
無限にオブジェクトが繰り返すイテラブル	itertools.repeat(element)
リストを文字列として、タブで一つにする	'\t'.join(map(str, リスト))
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
点線にヒストグラムを変更する	plt.hist(データ列, linestyle='dotted')
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ラベンダー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
NaNのある行をドロップする	df.dropna(inplace=True)
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームをグループ化し、ある列に対し最小値を算出する	df.groupby('列A')['列B'].min()
指定した列の値で集計しそれぞれの平均値を求める	df.groupby('列A').mean()
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データフレームから型リストで指定したデータ型の列のみ取り出す	df.select_dtypes(include=typeList)
無限にオブジェクトが繰り返すイテラブルを得る	itertools.repeat(element)
データシリーズのタイムゾーンを指定する	ds.tz_convert('Asia/Tokyo')
折れ線グラフをミディアムスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
欠損値も加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
文字列中に非英字が含まれるかどうか	any(not c.isalpha() for c in 文字列)
折れ線グラフの色をゲインズボロにセットする	plt.plot(データ列x, データ列y, color='gainsboro')
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
複数のデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
十六進数字を全て使う	string.hexdigits
折れ線グラフをネイビー色を使って描画する	plt.plot(データ列x, データ列y, color='navy')
ValueMapでまとめてデータフレームの指定したカラムの値を置換する	df['列A'].replace(ValueMap)
スクリプトファイルのパス	os.path.abspath(__file__)
option: 線の種類を一点鎖線に指定する	linestyle = 'dashbot'
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームのNaNを最頻値で埋める	df.fillna(df.mode().iloc[0])
配列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
ラベンダー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
散布図に黒い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
棒グラフをミディアムスプリンググリーン色を使って描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
カラムのピアソンの積立相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ある列を削除する	df.drop('列A', axis=1, inplace=True)
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: グラフの種類を実線にセットする	linestyle = 'solid'
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
配列としてデータフレームのある列を抽出する	df['列A'].values
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
ロージーブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
データフレームの指定したカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
小数点数の双曲線余弦を算出する	math.cosh(x)
データフレームの選択した列の相関行列をスピアマン相関係数を使って求める	df[['列A', '列B']].corr(method='spearman')
プロットのテーマをパステル調にする	sns.set(pallete='pastel')
ヒストグラムを実線で描く	plt.hist(データ列, linestyle='solid')
上限から下限までの範囲で柱状グラフを描画する	plt.hist(データ列, range=(start, end))
サポートベクター分類器を用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
３つの文字列を順にプリントする	print(文字列, 文字列, 文字列)
破線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
グレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームから一つのカラムだけ抽出する	df[['列A']]
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
ヒストグラムをオリベドラブ色を用いて描画する	plt.hist(データ列, color='olivedrab')
データフレームの指定したカラムの中に文字列があるかどうか確認する	df['列A'].isin([value])
eの実数乗を計算する	math.exp(x)
文字列中にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in 文字列)
カデットブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
配列からn個、サンプリングしてリストにする	random.sample(配列, k=n)
折れ線グラフの色をバイオレットに指定する	plt.plot(データ列x, データ列y, color='violet')
プロットの縦軸を対数に変更する	plt.yscale('log')
整数が1、もしくは2もしくは3に等しいかどうか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームの選択したカラムの中に含まれる文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
文字列はセットに含まれないかどうか	文字列 not in セット
データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'])
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
整数の五分の一を算出する	整数 / 5
rgbのダイアモンドマーカーを数列と数列についての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
ロードされたモジュールを列挙する	sys.modules
データフレームの平均値を計算する	df.mean()
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
データフレームのあるカラムの中にある日付データの数を数える	df['列A'].isin([value]).sum()
縦棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線グラフの右三角印の太さを変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
辞書からキーとその値をペアとして取り出す	辞書.items()
棒グラフをフローラルホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
エクセルファイルファイルからSJISでCSVファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
折れ線グラフの色をターコイズにセットする	plt.plot(データ列x, データ列y, color='turquoise')
線グラフをライトサーモン色として描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
セットにリストを追加更新する	セット.update(リスト)
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
パターンにASCII限定として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
データフレームの指定された三つの列だけ取り出す	df[['列A', '列B', '列C']]
指定した列のNaNを直後の値に設定する	df['列A'].fillna(method='bfill')
ある列の値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
▼マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
プロットのデータラベルの場所を(x,y)に設定する	plt.legend(loc=(x, y))
二進数文字列をバイト列にする	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
option: マゼンタを使用する	color = 'magenta'
数列の相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
リストを変更不能なセットに変換する	frozenset(リスト)
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
３変数の最も小さい値	min(x, y, z)
タプル内の要素は少なくとも一つ真か確認する	any(タプル)
パープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図に大バツ印を使う	plt.scatter(データ列x, データ列y, marker='X')
部分文字列を文字列の先頭から探す	文字列.find(部分文字列)
整数が一桁の数	0 <= 整数 <= 9
要素がタプルに含まれない	要素 not in タプル
セットからエラーなく整数を除く	セット.discard(数)
rgbの菱形マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付時刻データの分数	aDatetime.minute
option: グラフの色をシーグリーンにする	color = 'seagreen'
今日が何日か知る	datetime.datetime.today().day
rgbのダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
タプルの要素を昇順にソートする	sorted(タプル, reverse=False)
重複していない行のみ	df[~ df.duplicated(keep=False)]
データシリーズが何年か調べる	ds.dt.year
データフレームのヒストグラムを横に並べて描画する	sns.displot(df, x='列名', col='カテゴリ名')
リストとリストについて散布図をプロットして丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図の菱形印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
オブジェクトがジェネレータ	inspect.isgenerator(オブジェクト)
ファイルの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
オブジェクトは論理値クラスのインスタンス	bool = int<nl>isinstance(obj, bool)
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図に黒い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフに▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
縦棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームのカラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
データフレームの選択したカラムにおいてどの値が頻出か見る	df[['列A', '列B']].mode()
縦棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
縦棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
実数を数で割った余り	x % y
データフレームをグループ化し、それぞれの分散を算出する	df.groupby('列A').var()
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
リストとリストについての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をアクアにセットする	plt.hist(データ列, color='aqua')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
列の欠損値を直前の値に指定する	df['列A'].fillna(method='ffill')
寄与率を計算する	sklearn.metrics.r2_score(データ列, データ列2)
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ひとつも空白が文字列中に含まれないかどうか調べる	any(not c.isspace() for c in 文字列)
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
二つの列によってデータフレームを集約し、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
文字列を最後の区切り文字で二分割して、前半を使う	文字列.rpartition(セパレータ)[0]
文字列がアスキー文字か調べる	文字列.isascii()
ダークターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
整数をバイナリに変換する	整数.to_bytes(length=バイト数, byteorder='big')
データフレームの一部のカラムの中央値を求める	df[['列A', '列B']].median()
文字列の最後から範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
線グラフの色をホワイトスモークに指定する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームの指定した列はどの程度、正規分布から尖っているか見る	df['列A'].skew()
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
散布図の星マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
ヒストグラムの色をサーモンにする	plt.hist(データ列, color='salmon')
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
整数のn乗を計算する	整数 ** n
整数を整数で割って小数点以下を切り上げる	(整数 + 整数2 - 1) // 整数2
option: バリーウッド色を用いる	color = 'burlywood'
option: フォントの色をレモンシフォンに変更する	color = 'lemonchiffon'
改行せず複数の文字列をプリントする	print(文字列, 文字列, end='')
データフレームの指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
日付時刻データが日付時刻データよりあとか確認する	aDatetime > aDatetime2
散布図の左三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
xの小数点以下'5'桁までを表示する	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
折れ線グラフを青い点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列を最後のコロンで二分して、前半を使う	文字列.rpartition(':')[0]
もしコマンドラインが与えられたなら、処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
列を全て日付データにする	pd.to_datetime(df['列A'])
option: グラフの色をブルーバイオレットにする	color = 'blueviolet'
改行なしに複数の変数を表示する	print(変数名, 変数名, end='')
配列から重複なくn要素ランダムに選んでリストにする	random.sample(配列, k=n)
option: 黄色色を使う	color = 'yellow'
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
プラットホームはウィンドウズか判定する	sys.platform.startswith('win32')
文字列を最後のカンマで二分し、後半を使う	文字列.rpartition(',')[-1]
棒グラフをベージュ色を用いて描画する	plt.bar(データ列x, データ列y, color='beige')
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
データフレームの欠損値を平均値に指定する	df.fillna(df.mean())
散布図をダークグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgray')
双方向キュー中の文字列のインデックス	両端キュー.index(文字列)
option: どのカラムもインデックスに設定しない	index_col = None
option: フォントの色をやわらかい青に設定する	color = 'cornflowerblue'
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
グリッドを点線にする	plt.grid(linestyle='dotted')
青い実線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームの指定した列の中に文字列が存在するか調べる	df['列A'].isin([value])
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
ランダムにデータフレームから抽出する	df.sample()
option: ライトグリーン色を使用する	color = 'lightseagreen'
文字列がリストに含まれないか	文字列 not in リスト
データフレームをCSVファイルにSJISで出力する	df.to_csv('file.csv', encoding='shift_jis')
オールドレースにヒストグラムの色を変更する	plt.hist(データ列, color='oldlace')
２つのマッピングを階層的につなぐ	collections.ChainMap(aDict, aDict2)
option: グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
英数字が文字列中に含まれない	any(not c.isalnum() for c in 文字列)
データシリーズのNaNを最大値で埋める	ds.fillna(ds.max())
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
縦棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
セパレータで文字列を二分する	文字列.partition(セパレータ)
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
カウンタの要素を回数だけ列挙する	aCounter.elements()
双方向キューの先頭から要素を取り出す	両端キュー.popleft()
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
データシリーズが何分か調べる	ds.dt.minute
文字列中に部分文字列がいくつか含まれるか調べる	文字列.count(部分文字列)
n個の整数列を作る	list(range(n))
開始位置を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
要素はリストの要素かどうか	要素 in リスト
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームのあるカラムをValueMapでまとめて変更する	df['列A'].replace(ValueMap)
文字列中にひとつでもASCII文字があるかどうか確認する	any(c.isascii() for c in 文字列)
プログラムの実行を異常止める	sys.exit(1)
縦棒グラフをミディアムスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
データフレームの数値を一度に丸める	df.round()
ひとつでも非英数字が文字列中に含まれるかどうか確認する	any(not c.isalnum() for c in 文字列)
option: EUCを使用する	encoding = 'euc_jp'
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
プロットで使う色を指定する	sns.set(pallete=パレット名)
折れ線グラフの色をライトイエローにセットする	plt.plot(データ列x, データ列y, color='lightyellow')
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
横棒グラフをミディアムバイオレットレッド色を使って描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
等量でn個に列をビン分割する	pd.qcut(ds, n)
破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ミディアムシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
最頻値でデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: ダークグリーン色を使う	color = 'darkgreen'
プロットの描画で色差別なく色を使う	sns.set(pallete='colorblind')
要素がセットのいずれか調べる	要素 in セット
正規分布を用いて疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
環境がWindowsか	sys.platform.startswith('win32')
散布図をポイントマーカーを使って描画する	plt.scatter(データ列x, データ列y, marker='.')
両端キューをセットにする	set(両端キュー)
文字列リストをつなげる	''.join(文字列)
棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
x,y,zを順にプリントする	print(x, y, z)
縦棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
あるカラムのカテゴリごとの分散	df.groupby('列A').var()
実数を数に加える	x + y
データフレームの選択したカラムの平均	df[['列A', '列B']].mean()
リストの先頭を捨てる	リスト[1:]
長さの制限された双方向キューをイテラブルから作る	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
ヒストグラムの色をアンティークホワイトに変更する	plt.hist(データ列, color='antiquewhite')
シスル色としてヒストグラムを描画する	plt.hist(データ列, color='thistle')
リストとリストについて散布図を描いて、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
浮動小数点数の複素数	complex(x)
データをJSON形式でファイル出力に出力する	json.dump(データ, ファイル出力, ensure_ascii=False)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
表のある列の値がx以上の行を取り出す	df[df['列A'] >= x]
データフレームの指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
カラムの歪度	df['列A'].kurt()
データシリーズの曜日が何日目か調べる	ds.dt.dayofweek
散布図のポイント印の色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームのカラム間の相関行列を求める	df.corr()
データフレームの欠損値を平均で埋める	df.fillna(df.mean())
option: マゼンタを使う	color = 'magenta'
日付を表現した文字列をタイムスタンプにする	pd.to_datetime(日付を表現した文字列)
実数の複素数	complex(x)
整数を二進文字列に変換する	bin(整数)[2:]
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
option: グラフの色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
ビスク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームのある列はどれだけ、分散しているか確認する	df['列A'].var()
データフレームの未入力値を平均に設定する	df.fillna(df.mean())
数式の展開を行う	sympy.expand(数式)
散布図の右三角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
２つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
1からnまでの整数列	list(range(1, n+1))
実数が負の数	x < 0
option: ナバホホワイト色を使用する	color = 'navajowhite'
タイムスタンプデータとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
散布図のダイアモンド印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
複数行対応としてパターンを事前にコンパイルする	re.compile(pattern, flag=re.MULTILINE)
日付時刻データが木曜日	aDatetime.weekday() == 3
データフレームのあるカラムを百の位で四捨五入して、整数型にする	df['列A'].round(-2).astype(int)
リストの値を小さい順に並べる	sorted(リスト, reverse=False)
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
ダークゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
両端キュー中の文字列の出現数を数える	両端キュー.count(文字列)
ベクトル間の要素ごとの最大公約数を計算する	np.gcd(aArray, aArray2)
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
散布図を赤色を使って描画する	plt.scatter(データ列x, データ列y, color='red')
データフレームをまとめて小数点以下n桁で四捨五入する	df.round(n)
指定したカラムの第一四分位数	df['列A'].quantile(0.25)
データフレームの列の最頻値	df['列A'].mode()
ユークリッド距離を計算する	math.dist(point, point2)
折れ線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ヒートマップを使ってクラス分類の予測精度を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
勾配ブースティングとしてクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
下三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
実数のハイパボリック・タンジェント	math.tanh(x)
整数が一桁かどうか調べる	-9 <= 整数 <= 9
整数マイナス整数	整数 - 整数2
ファイルパスがない	not os.path.exists(filepath)
データ列の変遷を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
パターンに文字列がマッチさせる	re.match(pattern, s)
主成分分析を用いて項次元に削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
リストと数列についての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
変数名はモジュールか調べる	inspect.ismodule(識別子)
青い一点鎖線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ベクトルの累積積	np.cumprod(aArray)
ふたつのリストの差分	list(set(リスト).difference(set(リスト2)))
データフレームを整列して、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
横棒グラフをマルーン色を用いて描画する	plt.barh(データ列x, データ列y, color='maroon')
整数がセットに含まれるか調べる	数 in セット
データフレームを列でまとめたグループ	df.groupby('列A')
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
データフレームの下n行を取り出す	df.tail(n)
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
正則化付き線形モデルを作成する	model = sklearn.linear_model.ElasticNet()
データフレームの一部の列の標本分散	df[['列A', '列B']].var(ddof=0)
ファイルパスを読み込みモードでオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
ヒストグラムの色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
暗い赤色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
整数が何桁か	len(str(整数))
シートの名前を指定してデータフレームをエクセルファイルからロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
option: インデックスを自動的な連番に増やす	index_col = None
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
option: シャルトリューズを使う	color = 'chartreuse'
整数が一桁の整数か	0 <= 整数 <= 9
リストのイミュータブルな集合	frozenset(リスト)
option: 大文字・小文字を無視する	flag = re.IGNORECASE
偽	False
option: ミントクリーム色を用いる	color = 'mintcream'
線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
暗い赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
度数分布図のビン数を設定する	plt.hist(データ列, bins=区関数)
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
タイムスタンプデータの日付を使う	aDatetime.date()
辞書のキーとその値を列挙する	辞書.items()
ファイルから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
option: グラフの色をディープスカイブルーに変更する	color = 'deepskyblue'
線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームの選択した列のNaNをモードで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
xが無限大に近づくとき、極限値を求める	sympy.limit(数式, [|変数]x, oo)
option: ダークオレンジ色を使う	color = 'darkorange'
ファイルをBOM付きとしてオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
オレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
線を破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ミディアムブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
グローバル変数の一覧	globals()
option: 三角マーカーを使う	marker = '^'
タプルのn番目からn2番目	タプル[n:n2]
n回文字列を繰り返すイテラブルを得る	itertools.repeat(element, n)
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
散布図の下三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
変数の値を入れ替える	x, y = y, x
データフレームのあるカラムを十の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
option: パウダーブルーにグラフの色を指定する	color = 'powderblue'
3つの文字列を表示する	print(文字列, 文字列, 文字列)
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
文字列をコロンで二分割する	文字列.partition(':')
変数について数式の偏微分を行う	sympy.diff(数式, 変数)
データフレームを散布図で可視化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
配列にはいくつ要素があるか調べる	aArray.size
文字列を文字コードエスケープでバイト列にする	文字列.encode(encoding='unicode_escape')
文字列を最後の部分文字列で二分して、残りを見る	文字列.rpartition(部分文字列)[-1]
イテラブルをシャッフルしてリストにする	random.sample(イテラブル, len(イテラブル))
option: ミディアムターコイズを使う	color = 'mediumturquoise'
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図の菱形マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
条件がふたつとも成り立つ	条件 and 条件2
折れ線グラフに下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
整数の三分の一を求める	整数 / 3
ダークマゼンタ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
option: サンディーブラウンにフォントの色を設定する	color = 'sandybrown'
配列からランダムにひとつ選んでリストにする	random.choice(配列)
option: スノーを使う	color = 'snow'
モデル教師データでを学習する	model.fit(説明変数, 目的変数)
リストとデータ列について散布図を描画し、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
フクシア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
yについて数式を積分する	sympy.integrate(数式, y)
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
データフレームを二つの列によって小さい順にソートして更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データフレームの平均	df.mean()
データフレームのカラムの歪み	scipy.stats.skew(df['列A'], bias=False)
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
データフレームを行をキーにして昇順に並べ直す	df.sort_index(ascending=True)
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
文字列の左側からある文字を除去する	文字列.lstrip(文字)
yがマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(数式, y, -oo)
データフレームを表示するとき小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
表データのあるカラムが何曜日か知る	df['列A'].dt.weekday_name
指定した列の値で集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
データフレームからランダムに10行を抽出する	df.sample(10)
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
マップのキーと値を入れ替える	{v: k for k, v in 辞書.items()}
データフレームの未入力値をxで埋める	df.fillna(x)
option: 色を紺碧にする	color = 'azure'
文字列の両端から指定した文字を取り除く	文字列.strip(文字)
option: グラフの色を青に指定する	color = 'blue'
指定した列で集計しそれぞれの合計を計算する	df.groupby('列A').sum()
自然数個のものからk個取り出した場合の並べ方の総数	math.perm(n, k)
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x')
線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
赤い破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームを二つの列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
ピーチパフ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列中の指定した文字の出現	文字列.count(文字)
ジェネレータベースのコルーチンと通常のジェネレータを区別する	inspect.isawaitable(オブジェクト)
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
エラーの種類	etype, evalue, traceback = sys.exc_info()
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
データフレームの下位25％	df.quantile(0.75)
option: 茶色色を使う	color = 'brown'
データフレームの選択したカラムの欠損値を最大値で置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
バイアスなしの回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
散布図に▼マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
option: ブルーバイオレットにグラフの色を指定する	color = 'blueviolet'
指定した列のメディアンを求める	df['列A'].median()
点線に折れ線グラフを変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: オールドレース色を用いる	color = 'oldlace'
横棒グラフをデピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='deeppink')
データフレームの指定したカラムの第一四分位数	df['列A'].quantile(0.25)
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
二つのオブジェクトが同じ参照か調べる	obj is obj2
option: 三角マーカーを加える	marker = '^'
イテラブルを関数でフィルタする	filter(func, iterable)
データフレームを用いる	import numpy as np<nl>import pandas as pd
散布図にダイアモンド印を加える	plt.scatter(データ列x, データ列y, marker='D')
option: グラフの色をビスクにセットする	color = 'bisque'
ミッドナイトブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
option: デピンクを用いる	color = 'deeppink'
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
空のタプル	()
実数を切り下げて整数に変換する	math.floor(x)
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データシリーズのどの値が頻出か見る	ds.mode()
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
文字列中の部分文字列の出現を範囲を指定してカウントする	文字列.count(部分文字列, 開始位置, 終了位置)
変数名が関数か判定する	inspect.isfunction(識別子)
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
長さの制限された両端キューを数列から生成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
グラフで使うフォントを日本語に設定する	sns.set(font='IPAexGothic')
長さの制限された両端キューを配列から新規生成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
オーキッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
カラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
クリムゾンにヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
ケンドール相関係数でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
分類モデルの適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
タプルのn番目以降の要素を得る	タプル[n:]
option: スチールブルーにグラフの色を変更する	color = 'steelblue'
option: 標準出力に出力する	file = sys.stdout
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
option: フォントの色を茶色に設定する	color = 'brown'
文字列の開始位置以降がsubで始まるかどうか	文字列.startswith(部分文字列, 開始位置)
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
キーが辞書上で未定義か	キー not in 辞書
ASCII限定として正規表現をあらかじめコンパイルする	re.compile(pattern, flag=re.ASCI)
リストを文字列として、指定した文字で連結する	文字.join(map(str, リスト))
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
２つのデータフレームを横向きに合体させる	pd.merge(df, df2)
データフレームから型の列を取り出す	df.select_dtypes(ty)
グリーンイエロー色でヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
xを印字できる文字列にする	ascii(x)
データフレームの指定したカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
文字列中の大文字を小文字にする	文字列.lower()
最大値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
あるカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
外れ値に強い線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
文字列中に空白が含まれるかどうか調べる	any(c.isspace() for c in 文字列)
xのハッシュ値を計算する	hash(x)
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
整数が配列のどれかか調べる	aArray = [0, 1, 2]<nl>整数 in aArray
option: 改行するの代わりに文字列を用いる	end = 文字列
ゼロ埋めされた配列を初期化する	np.zeros(要素数)
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in 文字列)
TSVファイルからデータフレームをロードする	pd.read_csv('file.tsv', sep='\t')
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
ヒストグラムを点線でプロットする	plt.hist(データ列, linestyle='dotted')
辞書の値の一覧	辞書.values()
実数の正接の逆数を算出する	math.atan(x)
散布図の▲マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
リストとデータ列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
関数でデータフレームをグループ分けして、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
リストをナンバリングしながらひとつずつ処理する	for i, value in enumerate(リスト):<nl><tab>print(i, value)  # value はリストの要素
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
パターンをコンパイルする	re.compile(pattern)
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
半透明の一点鎖線としてイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームがどれだけ正規分布から歪んでいるか確認する	df.kurt()
辞書を階層化する	collections.ChainMap(aDict)
ダークターコイズにヒストグラムの色をする	plt.hist(データ列, color='darkturquoise')
散布図の▲印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
配列を元に全要素が0のベクトル	np.zeros_like(aArray)
ミディアムスプリンググリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumspringgreen')
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
複数のデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
ヒストグラムをホワイト色を用いて描画する	plt.hist(データ列, color='white')
実数の双曲線余弦の逆数	math.acosh(x)
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データをJSONフォーマットを使ってファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
グラフの見栄えをいい感じに指定する	sns.set()
双方向キューの先頭に整数を入れる	両端キュー.appendleft(整数)
整数わる整数を算出する	整数 / 整数2
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
散布図をターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='turquoise')
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図に星印を加える	plt.scatter(データ列x, データ列y, marker='*')
リストの各要素を両端キューの先頭に追加する	両端キュー.extendleft(リスト)
整数に変換する	int(x)
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
最大値でデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
縦棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
option: 色をミディアムオーキッドにセットする	color = 'mediumorchid'
データフレームの指定した列の中央値	df['列A'].median()
ヒストグラムを点線として描画する	plt.hist(データ列, linestyle='dotted')
ファイルからファイル名を使う	os.path.basename(filepath)
データフレームの選択したカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
t分布型確率的近傍埋め込み法を使って数値次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
option: エンコーディングを文字列の示すエンコーディングに変更する	encoding = s
データフレームをカンマ区切り形式を使って保存する	df.to_csv('file.csv')
データシリーズの曜日の名前	ds.dt.weekday_name
1からNまでの配列を初期化する	np.arange(1, N+1)
カラーコードで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
文字列が別の文字列に存在するか調べる	文字列 in 別の文字列
文字列から文字を全て取り除く	文字列.replace(文字, '')
白色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
エクセルファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
双方向キューの中に整数が存在するか確認する	整数 in 両端キュー
option: グラフの色をブルーバイオレットにセットする	color = 'blueviolet'
データフレームを十の位で丸める	df.round(-1)
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
option: バッファリングのサイズを設定する	buffering = 4096
印字を全て使う	string.printable
マゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
option: 大バツマーカーを描画する	marker = 'X'
文字列の開始位置番目からと終了位置までの間に部分文字列が存在しないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
nは整数かどうか調べる	整数 == 整数2
棒グラフをライムグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='limegreen')
文字列を大文字・小文字を無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
青紫色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
文字が平仮名かどうか調べる	('ぁ' <= 文字 <= 'ん')
黒い四角マーカーをリストとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
データフレームのあるカラムの不偏標準偏差	df['列A'].std()
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
x軸の目盛りを整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
サーモン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
日付データが日曜日	aDate.weekday() == 6
タプルを多重集合に変換する	collections.Counter(aDict)
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
実数を千の位で四捨五入する	round(x, -3)
エラーなくセットから文字列を除く	セット.discard(文字列)
n回の数値イテラブル	range(n)
option: カラム名をリストで設定する	names = 列名リスト
リストを引数として展開して出力する	print(*リスト, sep=',')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
一方に含まれ、他方に含まれない集合を使う	セット.difference(セット2)
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
両端キューの最後から要素を取り出す	両端キュー.pop()
データフレームを二つの列でソートする	df.sort_values(by=['列A', '列B'])
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
要素ひとつのりスト	[要素]
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: グラフの色をピーチパフにセットする	color = 'peachpuff'
棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
日本語フォントをグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
ヒストグラムを黄緑色を用いて描画する	plt.hist(データ列, color='chartreuse')
散布図の上三角印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
棒グラフの色をrgbにセットする	plt.bar(ラベル列, データ列, color=rgb)
option: フォントの色をパウダーブルーに指定する	color = 'powderblue'
データフレームの一部のカラムの尖り	df[['列A', '列B']].skew()
リストをソートしてJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
ヒストグラムの色をミディアムスレートブルーにセットする	plt.hist(データ列, color='mediumslateblue')
マルーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームの指定したカラムの第一四分位数を求める	df['列A'].quantile(0.25)
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
プロットのタイトルを設定する	plt.title('グラフの名称')
データフレームが重複している	df.duplicated()
青紫色で線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
折れ線グラフに左三角印を用いる	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をホットピンクに設定する	color = 'hotpink'
最頻値でデータシリーズの未入力値を補完する	ds.fillna(ds.mode().iloc[0])
JSONを使う	import json
折れ線グラフをグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='green')
全要素を1で初期化した配列を作る	np.ones(要素数, dtype=np.int)
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(配列, 'norm')
ゲインズボロ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
二つの列によってデータフレームを集約して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
赤い実線で配列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
数で実数を割って、切り捨てる	x // y
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
リストの末尾を取り除く	リスト[:-1]
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
リストをインデントを指定してJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
データシリーズの中に存在する文字列の合計を調べる	ds.isin([value]).sum()
空の勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色を真紅に変更する	plt.hist(データ列, color='crimson')
全要素を初期値で初期化した配列を作る	np.full(要素数, 初期値, dtype=np.int)
文字列が十進数字か調べる	文字列.isdecimal()
データフレームの欠損値を最大値にする	df.fillna(df.max())
既存のファイルを追加できるように文字列の示す文字コードで開く]	open(filepath, mode='a', encoding=s)
散布図に▽印を使う	plt.scatter(データ列x, データ列y, marker='v')
２つの文字列が同じ	文字列 == 文字列2
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームの指定したカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
option: グラフの色を赤に指定する	color = 'red'
リストとイテラブルについて散布図を描画し、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
3つの数値を順にプリントする	print(数値, 数値, 数値)
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
ニューラルネットで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データシリーズのタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
あるカラムの分散を求める	df.groupby('列A').var()
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
ソートしてデータをJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False, sort_keys=True)
データフレームの一部のカラムの平均値	df[['列A', '列B']].mean()
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ヒストグラムの色をアンティークホワイトにセットする	plt.hist(データ列, color='antiquewhite')
データフレームのn行まで選択する	df[:n]
実行中の例外情報	etype, evalue, traceback = sys.exc_info()
行列のユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
変数名はジェネレータ関数かどうか調べる	inspect.isgeneratorfunction(識別子)
option: ライトスレイグレーを用いる	color = 'lightslategrey'
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフの▽マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
日付時刻データとタイムスタンプデータの時間差を算出する	aDatetime - aDatetime2
線グラフの色をアリスブルーに指定する	plt.plot(データ列x, データ列y, color='aliceblue')
日付時刻データが何曜日か知る	aDatetime.weekday()
データシリーズの中にいくつNaNが存在するか数える	ds.isna().sum()
ダークグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
文字列が全て数値	文字列.isnumeric()
実行時に標準出力がパイプか	not sys.stdout.isatty()
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
ミディアムシアグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームの欠損値を平均値で置き換える	df.fillna(df.mean())
イテラブルから両端キューを作る	collections.deque(イテラブル)
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームから100行、サンプリングする	df.sample(100)
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図をティール色で描画する	plt.scatter(データ列x, データ列y, color='teal')
時計回りに円プロットをプロットする	plt.pie(データ列, startangle=90, counterclock=False)
耐火レンガ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
nが整数か	整数 == 整数2
異なる列をキーにしてデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
実行時の標準入力の入力元がターミナルか調べる	os.isatty(sys.stdin.fileno())
option: インディアンレッドを用いる	color = 'indianred'
option: 複素数型を使う	bool = np.int<nl>dtype = bool
文字列を空白で区切り、、列挙する	文字列.split()
初期値で全要素を初期化した行列	np.full(要素数, 初期値, dtype=np.int)
option: 表計算ファイルシートの名前を増やす	sheet_name = ['A', 'B']
線グラフの色をビスクにセットする	plt.plot(データ列x, データ列y, color='bisque')
デックをポップする	両端キュー.pop()
オブジェクトは集合か調べる	set = int<nl>isinstance(obj, set)
JSONフォーマットでデータをファイル出力に保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
小数点数の双曲線正弦の逆数を計算する	math.asinh(x)
二つの列を組み合わせてグループ化し合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
ある列によってデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
本日が土曜日	datetime.datetime.today().weekday() == 5
オブジェクトのクラスを調べる	type(obj)
n個の数値イテラブルを使う	range(n)
文字列を最後のコロンで分けたときの残りの文字列を取り出す	文字列.rpartition(':')[-1]
リストとイテラブルについて散布図をプロットし、、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
整数がnで割り切れる	整数 % n == 0
整数を符号なしでバイト列にする	整数.to_bytes(length=バイト数, byteorder='big')
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームをある列の値によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
リストとリストについての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
キーが辞書上で未定義か調べる	キー not in 辞書
option: ディムグレーに色を変更する	color = 'dimgray'
識別子はビルトイン関数	inspect.isbuiltin(識別子)
option: ライトグレーにグラフの色をセットする	color = 'lightgrey'
CSVファイルにヘッダを付けずデータフレームを保存する	df.to_csv('file.csv', header=None)
現在をISO8601形式の文字列にする	datetime.datetime.today().isoformat()
リストを順番付けする	enumerate(リスト)
データフレームをある列でグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
オールドレース色として散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
横棒グラフを濃い青色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
前もって正規表現をコンパイルする	re.compile(pattern)
青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
バイナリ書き込みモードとしてファイルパスをオープンして]、fとする	f = open(filepath, mode='wb')
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
データフレームの指定したカラムの中に文字列と日付データがいくつあるか求める	df['列A'].isin([value, value2]).sum()
配列のトリム平均を使う	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
option: シャルトリューズにグラフの色を指定する	color = 'chartreuse'
option: 大バツマーカーを加える	marker = 'X'
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
整数が3の倍数か調べる	整数 % 3 == 0
rgbの丸マーカーをイテラブルとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
オレンジレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
xが0に近づくときの数式の極限値を求める	sympy.limit(数式, [|変数]x, 0)
配列をリストから作る	np.array(aList)
グラフの描画で淡く色を使う	sns.set(pallete='muted')
シエナ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
データ列の各データは何回出現するか見る	ds.value_counts()
改行しないでxとyを順にプリントする	print(x, y, end='')
ミディアムスレートブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
文字列のサフィックスから部分文字列を除去する	文字列.removesuffix(部分文字列)
日付データのデータフレームのあるカラムを表データのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
データフレームの列名一覧で指定されたカラムをドロップする	df.drop(columns, axis=1, inplace=True)
列名を指定してデータフレームをジョインする	'<nl>pd.merge(df, df2, on='列A')
リストを四分位数ごとにビニングする	pd.qcut(aList, 4)
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
赤い▽マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図にrgbの△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ライトスレイグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
要素はタプルに含まれないかどうか調べる	要素 not in タプル
2つの浮動小数点数が近似値か	math.isclose(x, x2)
日付時刻データと日付時刻データの時間差を求める	aDatetime - aDatetime2
有理数を使用する	import fractions
折れ線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
カラムの中にいくつNaNがあるか数える	df['列A'].isna().sum()
文字列の両端から指定された文字を取り除く	文字列.strip(文字)
リストのn番目以降の要素を抽出する	リスト[n:]
文字列のn番目の文字を使う	文字列[n]
マルーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
重複ありでn行をランダムにデータフレームからサンプリングする	df.sample(n, replace=True)
等間隔のベクトル	np.arange(開始値, 終了値, 等差)
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
浮動小数点数を3乗する	x ** 3
ふたつの整数の商	整数 / 整数2
文字列を最後のカンマで二分する	文字列.rpartition(',')
文字列の最初	文字列[0]
データフレームの文字列を欠損値にする	df.replace(値, np.nan)
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
八進文字列をバイト列にする	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
3変数の最も大きい値を計算する	max(x, y, z)
線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
文字列を最後のコロンで分割したときの後半の文字列を使う	文字列.rpartition(':')[-1]
データフレームの選択した列の中に含まれるとの合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
ガウス過程として回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
オブジェクトはリストクラスか	list = int<nl>isinstance(obj, list)
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
データフレームの一部のカラムを丸める	df[['列A', '列B']].round()
カウンタの項目を増やす	aCounter[element] += 1
紫色でプリントできる文字列に変換する	f'\033[35m{x}\033[0m'
文字列の無限のイテラブル	itertools.repeat(element)
グリーン色としてヒストグラムを描画する	plt.hist(データ列, color='green')
整数同士の論理和を計算する	整数 | 整数2
折れ線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
文字列がセットのいずれかどうか	文字列 in セット
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
文字列を最初のカンマで二分する	文字列.partition(',')
option: グラフの線の種類を点線に変更する	linestyle = 'dotted'
n個に等量でリストをビン分割する	pd.qcut(aList, n)
データフレームの選択したカラムの未入力値をxで埋める	df[['列A', '列B']].fillna(x)
オブジェクトをユーザ向けの文字列に変換する	str(obj)
色名をからコードにする	matplotlib.colors.cnames[色名]
リストの全要素をクリアにする	リスト.clear()
出力ストリームを全部、読み込む	f.read()
文字列中に数字が含まれるか調べる	any(c.isdigit() for c in 文字列)
縦棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
クラス分類の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
ベクトルの合計値を計算する	np.sum(aArray)
要素はタプルの要素でないかどうか	要素 not in タプル
双方向キューが空か調べる	len(両端キュー) == 0
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
ダークスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームの欠損値をその中央値で補完する	df.fillna(df.median())
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
黒い▼マーカーを数列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
二つのカウンタの共通する要素を計算する	aCounter & aCounter2
辞書のキーの一覧を参照する	list(辞書)
option: 読み込まないフッタをnに設定する	skipfooter = n
折れ線グラフの星印を赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
折れ線グラフの色を暗い赤にセットする	plt.plot(データ列x, データ列y, color='darkred')
データフレームを小数点以下n桁で四捨五入する	n = 2<nl>df.round(n)
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
データフレームを二つの列の値でグループ化し、記述統計量を求める	df.groupby(['列A', '列B']).describe()
数値を表示する	print(数値)
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
最大最小としてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
要素はリストの要素	要素 in リスト
option: ライトスレイグレー色を使う	color = 'lightslategray'
三つの数値を順にプリントする	print(数値, 数値, 数値)
データシリーズの中に文字列と文字列が存在する	ds.isin([value, value2])
折れ線グラフを半透明の実線を使って描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
リストと配列についての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列の開始位置より後に部分文字列がないかどうか	文字列.find(部分文字列, 開始位置) == -1
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
整数掛ける整数を計算する	整数 * 整数2
日付時刻データが水曜日か確認する	aDatetime.weekday() == 2
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
リストとリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
オブジェクトはタプルかどうか調べる	tuple = int<nl>isinstance(obj, tuple)
折れ線グラフをミディアムスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
赤い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データ列の折れ線プロットを描画して色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
option: カデットブルーを使う	color = 'cadetblue'
既にロードしたモジュールの一覧	sys.modules
書き込みモードを使ってファイルパスをオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
n個に列を分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
nxn2の２次元リストを得る	[[0] * n for _ in range(n2)]
正規表現でデータシリーズをまとめて変更する	ds.replace(pattern, repl, regex=True)
ミディアムアクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データシリーズの中にあるの合計を調べる	ds.isin([value]).sum()
識別子がメソッドか	inspect.ismethod(識別子)
ネイビーにヒストグラムの色を指定する	plt.hist(データ列, color='navy')
データ列の出現頻度を描画する	plt.hist(データ列)
ヒストグラムをチョコレート色として描画する	plt.hist(データ列, color='chocolate')
option: ラベンダーにグラフの色を指定する	color = 'lavender'
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
データフレームをTSVファイルから読む	pd.read_csv('file.tsv', sep='\t')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
オブジェクトがリストクラスか調べる	list = int<nl>isinstance(obj, list)
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
小数点数のバイナリ対数	math.log2(x)
リストから複数個ランダムに選ぶ	random.choices(リスト, k=n)
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
二つの文字列が等しくない	文字列 != 文字列2
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
エラーなく辞書から項目名の値を見る	辞書.get(キー, 見つからない場合の値)
データフレームの平均など	df.describe()
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
確率的勾配降下としてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
線を青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
辞書の内部も複製する	{k: copy.copy(v) for k, v in 辞書.items()}
データフレームの選択した列の中にいくつNaNが存在するかカウントする	df[['列A', '列B']].isna().sum()
散布図を赤い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
両端キュー中の文字列のインデックス	両端キュー.index(文字列)
散布図の▼マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
第二四分位数でデータシリーズのNaNを埋める	ds.fillna(ds.median())
0からnの範囲を使う	range(n)
ヒストグラムの色をダークターコイズにする	plt.hist(データ列, color='darkturquoise')
日付時刻データはタイムスタンプデータより遅い	aDatetime > aDatetime2
PNGファイルとしてグラフを保存する	plt.savefig('foo.png')
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
option: グラフの色をアリスブルーに変更する	color = 'aliceblue'
既存の配列を元にして全要素が1の配列を作る	np.ones_like(aArray)
文字列の右側からタブを除く	文字列.rstrip('\t')
yについて偏微分する	sympy.diff(数式, y)
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
辞書からキーで指定された項目をポップする	辞書.pop(キー)
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データシリーズのSkewness	ds.skew()
1行改行を取り除いて標準入力から読む	sys.stdin.readline().rstrip()
xを浮動小数点数型にする	float(x)
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
現在が何年か知る	datetime.datetime.today().year
リストとリストの散布図を描画し、、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
本日の年	datetime.datetime.today().year
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
数列と配列の散布図に上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
リストと数列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームのカラムの標準誤差を求める	scipy.stats.sem(df['列A'])
文字列中のタブ文字を空白に置き換える	文字列.expandtabs(tabsize=n)
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: △マーカーを描画する	marker = '^'
散布図をバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
散布図の右三角印の太さを変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフに▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データシリーズの中にいくつ未入力値があるか数える	ds.isna().sum()
option: フォントの色をダークカーキに設定する	color = 'darkkhaki'
データフレームの列の名前の一覧を使う	df.columns
データ列を2つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
黒い下三角マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: バイナリモードに指定する	mode = 'rb'
確率的勾配降下を用いて回帰分析をする	model = sklearn.linear_model.SGDRegressor()
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
数列とリストについての散布図に文字列という短い説明用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色をライトゴールドロディイエローにセットする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
リストから要素を除く	リスト.remove(要素)
ファイルパスをバイナリ書き込みできるようにオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
オブジェクトは文字列型かどうか	str = int<nl>isinstance(obj, str)
データフレームの選択したカラムの欠損値を中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
アイリスのデータセットからデータフレームをロードする	df = sns.load_dataset('iris')
データフレームの値が欠損値か	df.isna()
双方向キューの要素を右に回転させる	両端キュー.rotate(1)
サポートベクター回帰モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの選択したカラムを100の位で丸めて整数型にする	df[['列A', '列B']].round(-2).astype(int)
セットが上位集合	セット.issuperset(セット2)
全空白文字	string.whitespace
両端キューから最初の要素を削除する	両端キュー.remove(要素)
要素一つのタプル	(要素,)
リストと数列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームをCSVファイルに小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
黄色でxを表示する	print(f'\033[33m{x}\033[0m')
整数の三分の一	整数 / 3
配列と配列について散布図を描いて、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
表データを整列し、、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をゴールドに変更する	plt.hist(データ列, color='gold')
グラフのy座標を対数に変更する	plt.yscale('log')
散布図の大バツマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームの選択した列の最頻値	df[['列A', '列B']].mode()
文字列に漢字があるかどうか	re.search('[\u4E00-\u9FD0]', 文字列)
データフレームの選択したカラムの欠損値を中央値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
要素がセットのいずれか	要素 in セット
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
列のコンビネーションを求める	itertools.combinations(iterable, n)
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
データをJSON形式の文字列に変換する	json.dumps(データ, ensure_ascii=False)
キーがマッピング上で定義済みか	キー in 辞書
空の組を作る	()
オブジェクトのハッシュ値を求める	hash(obj)
文字の文字コードを使う	ord(文字)
一方に含まれ、他方に含まれない集合を計算する	セット.difference(セット2)
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
MSEを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図の色を濃い青にする	plt.scatter(データ列x, データ列y, color='darkblue')
文字列中にひとつでも小文字が含まれるか調べる	any(c.islower() for c in 文字列)
数式のn階微分を求める	sympy.diff(数式, [|変数]x, n)
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
シスル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
縦棒グラフを描画して左寄せする	plt.bar(ラベル列, データ列, align='edge')
列自身の長さnの順列	itertools.permutations(iterable, n)
文字列中に大文字があるか	any(c.isupper() for c in 文字列)
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームのNaNをxに設定する	df.fillna(x)
ガンマ関数の値	math.gamma(x)
最後の区切り文字で文字列を二つに分ける	文字列.rpartition(セパレータ)
両端キューの要素をインプレースに反転する	両端キュー.reverse()
option: ダークシアグリーン色を使う	color = 'darkseagreen'
昇順にリストの要素を並べ変える	sorted(リスト, reverse=False)
整数のそれぞれの桁の和を計算する	sum(map(int, str(整数)))
数列の積立相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
ネイピア数	math.e
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
表データから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
一番右側の列を除いたデータフレーム	df[df.columns[:-1]]
散布図を下三角マーカーを使って描画する	plt.scatter(データ列x, データ列y, marker='v')
データフレームの中の列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
点線を用いて数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
カラムの各値の出現数	df[col].value_counts()
プラットフォームの符号付き整数の最大値	sys.maxsize
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
option: 平均を加える	showmeans = False
ローングリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームをCSVファイルに小数点以下3桁まで書き出す	df.to_csv('file.csv', float_format='%.3f')
データフレームは何行重複するか調べる	df.duplicated().sum()
データフレームを線形回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
イテラブルの各要素に対して、predicateFuncの適用がTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
主成分分析として要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
option: グラフの色を淡いピンク色にする	color = 'lightpink'
新しいヒストグラムベースの勾配ブースティング分類木を準備する	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームのカラムのスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
データシリーズのNaNを最頻値で埋める	ds.fillna(ds.mode().iloc[0])
文字列の大文字小文字を変換する	文字列.casefold()
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
リストを引数として展開して表示する	print(*リスト, sep=',')
データ列とリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: コーンズシルク色を使う	color = 'cornsilk'
散布図に▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
散布図の星マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
リストをナンバリングしながら、ひとつずつ処理する	for i, value in enumerate(リスト):<nl><tab>print(i, value)  # value はリストの要素
ある列のカテゴリ毎の個数	df.groupby('列A').count()
ValueMapで一度にデータフレームの選択したカラムの値を置き換える	df[['列A', '列B']].replace(ValueMap)
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
文字コードから文字へ変換する	chr(文字コード)
データシリーズを百の位で四捨五入する	ds.round(-2)
データをソートしてJSONにエンコードする	json.dumps(データ, ensure_ascii=False, sort_keys=True)
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ポスター用にグラフを指定する	sns.set(context='poster')
リストとイテラブルについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
ファイルからストリームを開き]、fileとする	file = open(filepath)
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
文字列がセットに含まれるか判定する	文字列 in セット
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
文字列の無限な列を求める	itertools.repeat(element)
部分文字列で文字列を二分する	文字列.partition(部分文字列)
データフレームにおいてどの値が頻出か確認する	df.mode()
100行をデータフレームから重複ありでランダムにサンプリングする	df.sample(100, replace=True)
散布図の大バツ印を赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
色付きの実線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
データシリーズの欠損値を第二四分位数にセットする	ds.fillna(ds.median())
グラフのフォントを日本語に設定する	sns.set(font='IPAexGothic')
ヒストグラムの色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
何回まで再帰ができるかを	sys.getrecursionlimit()
行列演算をする	import numpy as np
データシリーズの中にある文字列との合計をカウントする	ds.isin([value, value2]).sum()
TSVファイルから文字コードを指定して読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
カラムのKurtosisを計算する	scipy.stats.kurtosis(df['列A'], bias=False)
タイムスタンプデータとタイムスタンプデータの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
列と列の直積	itertools.product(iterable, iterable2)
データフレームの選択した列のNaNをモードに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ヒートマップでクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
文字列中の文字を別の文字に置き換える	文字列.replace(部分文字列, 置換後の文字列)
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームの一部のカラムを100の位で丸める	df[['列A', '列B']].round(-2)
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームの指定したカラムを正規表現patternでまとめて置き換える	df['列A'].replace(pattern, repl, regex=True)
変数が無限大に近づく場合、極限値を求める	sympy.limit(数式, 変数, oo)
縦棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
タン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
線グラフをバリーウッド色を用いて描画する	plt.plot(データ列x, データ列y, color='burlywood')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ロバスト推定でクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
降順で行をキーにしてデータフレームをソートする	df.sort_index(ascending=False)
最小値でデータフレームの指定した列のNaNを埋める	df['列A'].fillna(df['列A'].min())
リストと配列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
表計算をデータフレームとして読み込む	pd.read_excel('file.xlsx')
散布図をrgbのポイントマーカーとして描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
整数を十六進表記に変換する	hex(整数)
タイムスタンプデータにn日分、足す	aDatetime + datetime.timedelta(days=n)
データ列の折れ線グラフを▼印で描画する	plt.plot(データ列x, データ列y, marker='v')
ふたつの列でグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
option: カデットブルーにフォントの色を変更する	color = 'cadetblue'
散布図の▼印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
セットを変更不能な集合に変換する	frozenset(セット)
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
浮動小数点数に実数をかける	x * y
線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
散布図のマーカーの大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
散布図のポイントマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ミディアムブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumblue')
文字列中にひとつでも数字があるか調べる	any(c.isdigit() for c in 文字列)
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
文字列を区切り記号で分割して文字列リストに変換する	文字列.split(セパレータ)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
２つの列毎にデータフレームをグループ化し、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
行列を元に全要素が1のベクトル	np.ones_like(aArray)
線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ペールグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
散布図に赤いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
option: フォントの色をインディゴに設定する	color = 'indigo'
改行なしに２つの数値をプリントする	print(数値, 数値, end='')
折れ線グラフの菱形印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ベクトルの行	aArray[行番号]
リストとデータ列の散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
日付時刻データは日付時刻データと同時か調べる	aDatetime == aDatetime2
option: ベージュに色を指定する	color = 'beige'
option: グリーンイエロー色を使用する	color = 'greenyellow'
データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
整数が-9以上、9以下か確認する	-9 <= 整数 <= 9
option: 色をバリーウッドに設定する	color = 'burlywood'
両端キューの要素を左に回転させる	両端キュー.rotate(-1)
リストにシーケンスを続けた列	itertools.chain(iterable, iterable2)
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
棒グラフをダークレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
プログラムを強制的に終了する	sys.exit()
文字列の開始位置から終了位置まで部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
未初期化の行列	np.empty(要素数, dtype=np.int)
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームの行を抽出する	df[start:end]
黒色でプリントできる文字列に変換する	f'\033[30m{x}\033[0m'
option: 改行しないように設定する	end = ''
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
２つの計算結果をプリントする	print(式, 式)
データフレームのNaNを後の値に変更する	df.fillna(method='bfill')
横棒グラフをライトスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
トマトにヒストグラムの色を設定する	plt.hist(データ列, color='tomato')
表データのあるカラムが何年か見る	df['列A'].dt.year
リストが少なくとも一つ真	any(リスト)
縦棒グラフをスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='slateblue')
グラフを論文用に設定する	sns.set(context='paper')
データフレームの一部のカラムの文字列を未入力値にする	df[['列A', '列B']].replace(値, np.nan)
データフレームを二つのカラムをキーにしてソートする	df.sort_values(by=['列A', '列B'])
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
データフレームの列の名前一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
折れ線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
赤い実線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 貝殻に色を指定する	color = 'seashell'
指定したカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
散布図に黒い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
横棒グラフをサンディーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='sandybrown')
オブジェクトは文字列か調べる	str = int<nl>isinstance(obj, str)
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
非数値データを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
イテラブルをいつまでも繰り返す	itertools.cycle(iterable)
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
リスト内の要素が少なくとも一つ真	any(リスト)
ひとつでも非英数字が文字列中に含まれるか確認する	any(not c.isalnum() for c in 文字列)
淡いピンク色色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
数列とデータ列について散布図を描画してマーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
文字列はPythonのキーワードかどうか調べる	keyword.iskeyword(文字列)
空の両端キューを作る	両端キュー = collections.deque()
TSVファイルから文字エンコーディングを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
データフレームを2つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
ひとつでも非空白が文字列中にあるかどうか調べる	any(not c.isspace() for c in 文字列)
整数の二進文字列	bin(整数)[2:]
度数分布図のプロットし、、正規化する	plt.hist(データ列, density=True)
イテラブルと列をペア化する	itertools.zip_longest(iterable, iterable2)
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列の指定した位置以降に部分文字列が含まれるかどうか	文字列.find(部分文字列, 開始位置) != -1
計算機イプシロンを算出する	sys.float_info.epsilon
二つの条件のうちいずれか成り立つ	条件 or 条件2
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
リストと数列の散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
一点鎖線に線グラフのスタイルを指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
青い点線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
その最頻値で指定した列の未入力値を置換する	df['列A'].fillna(df['列A'].mode().iloc[0])
データフレームのあるカラムの中にいくつ欠損値があるか求める	df['列A'].isna().sum()
option: グラフの色をトマトに設定する	color = 'tomato'
列の長さnの順列	itertools.permutations(iterable, n)
配列の要素ごとの積	np.multiply(aArray, aArray2)
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
スピアマン順位相関係数でデータフレームの相関行列を計算する	df.corr(method='spearman')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
データシリーズの分散を計算する	ds.var()
タプルの中の最大値を算出する	max(タプル)
縦棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
文字列の末尾がか調べる	文字列.endswith(部分文字列)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
リストをビン数nを用いてビニングする	pd.cut(aList, n)
ファイルの拡張子付きのファイル名を使う	os.path.basename(filepath)
option: ダークブルーに色を設定する	color = 'darkblue'
配列をダミー変数に変換する	pd.get_dummies(配列)
データシリーズの未入力値を最大値で埋める	ds.fillna(ds.max())
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
ベクトルの列	aArray[:, 列番号]
データシリーズの歪みを算出する	ds.kurt()
option: スラッシュをセパレータで用いる	sep = '/'
日付データが金曜日かどうか調べる	aDate.weekday() == 4
タプルを結合する	タプル + タプル2
データシリーズの秒を見る	ds.dt.second
データシリーズの分散	ds.var()
タイムスタンプデータからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
散布図にrgbの▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色をローングリーンにセットする	color = 'lawngreen'
オブジェクトはタプルクラスか調べる	tuple = int<nl>isinstance(obj, tuple)
イテラブルを両端キューに変換する	collections.deque(イテラブル)
ヒストグラムのラインスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
折れ線グラフの色をデピンクに指定する	plt.plot(データ列x, データ列y, color='deeppink')
線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
option: フォントの色を黄色に変更する	color = 'yellow'
リストとリストの散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: ディムグレー色を使う	color = 'dimgrey'
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
項がセットの要素でないか確認する	要素 not in セット
option: マーカーの大きさを設定する	markersize = 2.0
option: 印の線幅を指定する	markeredgewidth = 2.5
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
オブジェクトがコードか	inspect.iscode(オブジェクト)
四分位数ごとにデータ列を分割する	pd.qcut(ds, 4)
横棒グラフをダークスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
ダークグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
中央値でデータフレームの中の列を分割する	pd.qcut(df[col], 2)
データフレームを小数点以下n桁で丸める	n = 2<nl>df.round(n)
書式でカラムをタイムスタンプ型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
散布図の印をクロスにする	plt.scatter(データ列x, データ列y, marker='x')
文字列の開始位置番目からと終了位置番目までの間に部分文字列が存在しない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
option: グラフの色をローングリーンに変更する	color = 'lawngreen'
リストの要素をひとつの文字列にする	''.join(map(str, リスト))
データフレームの指定したカラムの標本標準偏差	df['列A'].std(ddof=1)
イテラブルの各値を両端キューの末尾に追加する	両端キュー.extend(イテラブル)
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
ピアソンとしてデータフレームの相関行列を算出する	df.corr(method='pearson')
データフレームの選択した列の欠損値を最頻値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
紺色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データシリーズの基本統計量を計算する	ds.describe()
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
文字列がリストに含まれない	文字列 not in リスト
書式文字列をarg文字列を引数としてフォーマットする	書式.format(*args)
文字列をカンマで二分して、前半を使う	文字列.partition(',')[0]
リストとリストについて散布図を描画して、マーカーを丸にセットする	plt.plot(データ列x, データ列y, marker='o')
線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
商と余りを同時に算出する	divmod(x, y)
データフレームをソートして、行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
折れ線プロットを用いてデータフレームの列を可視化する	plt.plot(df[column], df[column])
マッピングの項目名をリストに変換する	list(辞書.keys())
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
リストと配列について散布図を描いてマーカーを上三角に指定する	plt.plot(データ列x, データ列y, marker='^')
ファイル名のセパレータ記号	os.sep
数列を更新不能なに変換する	frozenset(数列)
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
補助目盛を有効にする	plt.minorticks_on()
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
リストと配列の散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
表データ全体をインデックスによって並べる	df.sort_index()
日付データが水曜日か	aDate.weekday() == 2
数値がセットのメンバーかどうか	数 in セット
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
ミディアムオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームの欠損値がある部分を	df.style.highlight_null()
等差数列から乱数を得る	random.randrange(start, end, step)
両端キューの先頭にイテラブルの要素を追加する	両端キュー.extendleft(イテラブル)
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
ライトゴールドロディイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
xでデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(x)
データフレームのある列の値がxに等しくない行を選ぶ	df[df['列A'] != x]
option: ライムにグラフの色を変更する	color = 'lime'
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: ロイヤルブルー色を使う	color = 'royalblue'
数列から長さの制限された両端キューを新規生成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
データフレームの指定したカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
データフレームをあるカラムで昇順にソートする	df.sort_values(by='列A', ascending=True)
rgbの▽マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列中にひとつも小文字が含まれないかどうか	any(not c.islower() for c in 文字列)
日付時刻データが土曜日	aDatetime.weekday() == 5
最後のカラムを外したデータフレーム	df[df.columns[:-1]]
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
ファイルパスから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
列名を指定して二つのデータフレームをジョインする	'<nl>pd.merge(df, df2, on='列A')
itertoolsモジュールをインポートする	import itertools
散布図を黄緑色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
数列から複数個ランダムに選んでリスト化する	random.choices(数列, k=n)
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をライトスカイブルーにする	plt.hist(データ列, color='lightskyblue')
折れ線グラフのクロス印の色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
行列の行ごとの最小値	np.min(aArray, axis=1)
出力ストリームから1文字、読む	f.read(1)
データ列の出現頻度を可視化する	plt.hist(データ列)
option: 右三角印を描画する	marker = '>'
option: バッファリングを無効にする	buffering = 0
option: フクシアにグラフの色を指定する	color = 'fuchsia'
配列とリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
要素がマッピングの値に含まれていないか確認する	element not in 辞書.values()
要素はセットのメンバーでないか判定する	要素 not in セット
線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
文字列の前半から部分文字列を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
散布図の菱形マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
リストの要素を展開して表示する	print(*リスト)
キーが辞書に存在していないとき、要素を追加する	辞書.setdefault(キー, element)
データフレームの選択したカラムの標本標準偏差を求める	df[['列A', '列B']].std(ddof=1)
リストから重複なく、n個ランダムに選んでリストにする	random.sample(リスト, k=n)
グラフを使う準備をする	import matplotlib.pyplot as plt
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
バイトオーダを知る	sys.byteorder
ヒストグラムの色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
ブランチドアーモンド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
あるカラムの値がx以上、y未満のデータを選択する	df[(x <= df['列A']) & (df['列A'] < y)]
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
数列から両端キューを作成する	collections.deque(数列)
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
データフレームの統計量	df.describe()
コマンドtextを実行する	"text = ""echo 'A'""<nl>os.system(text)"
option: 文字列をセパレータで使う	sep = s
整数が1、もしくは2か調べる	整数 == 1 or 整数 == 2
オブジェクトがトレースバック	inspect.istraceback(オブジェクト)
整数をキューにエンキューする	両端キュー.append(整数)
浮動小数点数のコサインの逆数	x = 0.33<nl>math.acos(x)
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
ダークゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームの列の一意な値の個数	df[col].nunique()
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
数値がセットに含まれる	数 in セット
現在のタイムスタンプ	int(time.time())
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
等量でデータフレームの中の列をn個にビン分割する	pd.qcut(df[col], n)
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
option: 3二ビット整数型を使用する	np.int16 = np.int<nl>dtype = np.int16
NaNも加えてデータフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
数列をダミー変数にする	pd.get_dummies(数列)
ヒストグラムをグレー色を使って描画する	plt.hist(データ列, color='grey')
yについて数式の偏微分を行う	sympy.diff(数式, y)
散布図に青い▼印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
セットに項を追加する	セット.add(要素)
ファイルのディレクトリ名を見る	os.path.dirname(filepath)
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
リストとイテラブルの散布図を描画し、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ASCII限定として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
シルバー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
二つの変数を順にプリントする	print(変数名, 変数名)
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
option: グラフの色をスラグレーに指定する	color = 'slategray'
データフレームの指定したカラムの母標準偏差を算出する	df['列A'].std(ddof=0)
プロットを描画する準備をする	import matplotlib.pyplot as plt
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
アンティークホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
行列の値を使う	aArray[行番号, 列番号]
浮動小数点数の2乗	x ** 2
表の列の名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
ダークカーキ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ネイビーにヒストグラムの色を変更する	plt.hist(データ列, color='navy')
ランダムに5行をデータフレームから抽出する	df.sample(5)
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームの指定した列を四捨五入して、整数にする	df['列A'].round().astype(int)
行列の行列積を計算する	np.matmul(aArray, aArray2)
リストが空でない	len(リスト) != 0
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
折れ線グラフをシアン色を使って描画する	plt.plot(データ列x, データ列y, color='cyan')
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
option: インディアンレッドにフォントの色を設定する	color = 'indianred'
カウンタの最も頻出な要素	aCounter.most_common()[0]
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
実数が無限大か確認する	math.isinf(x)
線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
タイタニック号のデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
データシリーズのタイムゾーンを東京に指定する	ds.tz_convert('Asia/Tokyo')
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
ファイル全体を行分割して読み込む	f.readlines()
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
数式のyについてのn階微分を求める	sympy.diff(数式, y, n)
リストの最後から値を取り除く	リスト.pop()
横棒グラフを描画し、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列を最後の区切り文字で二分して、後半を見る	文字列.rpartition(セパレータ)[-1]
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームを関数のカテゴリによって分類する	df.groupby(関数)
コレクションを使う	import collections
指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
データフレームの指定したカラムの中にいくつがあるか数える	df['列A'].isin([value]).sum()
ライム色を用いてヒストグラムを描画する	plt.hist(データ列, color='lime')
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
複数の計算結果を順にプリントする	print(式, 式, 式)
散布図を青紫色として描画する	plt.scatter(データ列x, データ列y, color='violet')
整数を整数で割ってその結果を切り上げる	(整数 + 整数2 - 1) // 整数2
両端キューを作る	両端キュー = collections.deque()
散布図の四角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
▼印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
句読点文字を使う	string.punctuation
配列を集合にする	set(配列)
グループ化してデータフレームの散布図を横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
自分自身をモジュールとして	sys.modules[__name__]
カテゴリで色分けして、カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
オブジェクトはコード	inspect.iscode(オブジェクト)
両端キュー中の整数の位置を使う	両端キュー.index(整数)
オレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
option: フォントの色をパープルに設定する	color = 'purple'
リストとデータ列について散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
パールゴールデンロッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
リストと配列についての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: オリーブを使う	color = 'olive'
指定した列のカテゴリで集計しそれぞれの平均値を求める	df.groupby('列A').mean()
折れ線グラフの星印を青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
中央値でデータ列を分割する	pd.qcut(ds, 2)
データフレームとして表計算ファイルのシートをロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
リストと配列についての散布図に黒い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
スーパーセットもしくは等しいか調べる	セット >= セット2
リストの要素を逆順にする	リスト[::-1]
横棒グラフを描いてバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームの母標準偏差を求める	df.std(ddof=0)
カラムの調和平均を求める	scipy.stats.hmean(df['列A'])
上位集合か	セット.issuperset(セット2)
option: カーキを用いる	color = 'khaki'
クラス名が名前付きタプル	issubclass(C, tuple)
方程式として数式を解く	sympy.solve(数式)
項がセットに含まれる	要素 in セット
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
線グラフの色をダーク・スラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategrey')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
ある列の未入力値を直前の値で埋める	df['列A'].fillna(method='ffill')
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームの一部のカラムの欠損値を最大値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
マッピングのキーと値を入れ替える	{v: k for k, v in 辞書.items()}
文字コードtextで書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding=text)
フォレストグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
折れ線グラフの色をダークブルーに設定する	plt.plot(データ列x, データ列y, color='darkblue')
文字列をキューの最後に付け加える	両端キュー.append(文字列)
日付データが木曜日かどうか確認する	aDate.weekday() == 3
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
両端キュー中の要素の位置を使う	両端キュー.index(要素)
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
折れ線グラフをダークシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ボックスチャートにラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
数列の各要素を両端キューの末尾に追加する	両端キュー.extend(数列)
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
データフレームのカラムの中の欠損値の合計を求める	df['列A'].isna().sum()
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
両端キューの最初の要素を使う	両端キュー[0]
ファイルパスをEUCを用いてオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
２つのデータフレームを列名を指定して全ジョインする	pd.merge(df, df2, on='列A', how='outer')
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
折れ線グラフのバツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
イテラブルを関数でフィルタする	map(func, iterable)
タプルをカウンタに変換する	collections.Counter(aDict)
クラスのサブクラスか	issubclass(サブクラス, クラス)
文字列の開始位置以降に部分文字列が含まれるか調べる	文字列.find(部分文字列, 開始位置) != -1
文字列の終了位置より前に部分文字列が含まれないかどうか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
横棒グラフをダークスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
option: グラフの色をトマトに指定する	color = 'tomato'
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
散布図を四角印を用いる描画する	plt.scatter(データ列x, データ列y, marker='s')
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
配列の尖度を算出する	scipy.stats.kurtosis(配列, bias=False)
option: 青緑を使う	color = 'turquoise'
option: ライトコーラル色を用いる	color = 'lightcoral'
表データの列名の一覧	df.columns
データフレームの指定したカラムを丸める	df['列A'].round()
ある列の値ごとの標準偏差を求める	df.groupby('列A').std()
棒グラフをパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='purple')
y軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
データフレームのn行より前取り出す	df[:n]
文字列を空白で分割し、、列挙する	文字列.split()
ペルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
縦棒グラフをダークサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='darksalmon')
一点鎖線を使ってヒストグラムをプロットする	plt.hist(データ列, linestyle='dashbot')
最大値・最小値の範囲で一様な疑似乱数を得る	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
文字列の変数名を数式に変換する	sympy.Symbol(変数名)
n個に等間隔で配列をビン分割する	pd.cut(aArray, n)
イテラブルから重複なく、n個ランダムに選んでリストにする	random.sample(イテラブル, k=n)
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
option: ASCII文字に限定する	flag = re.ASCII
データフレームのあるカラムの値がxに等しいデータを取り出す	df[df['列A'] == x]
データフレームの二つの列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
リストとリストについて散布図を描いて、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの要約統計量	df.describe()
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
タプルを逆順にする	reversed(タプル)
散布図の印を右三角にする	plt.scatter(データ列x, データ列y, marker='>')
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
イテラブルとリストをペア化する	itertools.zip_longest(iterable, iterable2)
両端キューの要素を反転する	両端キュー.reverse()
タプルは少なくともひとつ真か調べる	any(タプル)
文字列から空白を全て除く	文字列.replace('\t', '')
要素が両端キューの中に存在するか確認する	要素 in 両端キュー
破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
本日の日付時刻	datetime.datetime.today()
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
配列を分割する	pd.cut(aArray, aList)
ファイルをBOM付きで追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
option: ナバホホワイトを使う	color = 'navajowhite'
データフレームを二つの列によって昇順に整列し、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
RANSACで回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
要素がリストの要素でないかどうかテストする	要素 not in リスト
データフレームの中の列をビン数nでビンニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ヒストグラムの色をベージュに指定する	plt.hist(データ列, color='beige')
ダークオレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
option: 分割記号を改行にする	sep = '\n'
データ列を中央値でビン分割する	pd.qcut(ds, 2)
指定したカラムの中に日付データがあるか調べる	df['列A'].isin([value])
option: 未入力値を先頭にする	na_position = 'first'
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
列を日付データにする	pd.to_datetime(df['列A'])
イテラブルからn個サンプリングしてリストにする	random.sample(イテラブル, k=n)
文字列を空白を用いて区切り、、数列にする	list(map(int, 文字列.split()))
xを浮動小数点数にする	float(x)
異なる列をキーとして２つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
オブジェクトはバイト列クラスか調べる	bytes = int<nl>isinstance(obj, bytes)
リストとリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフをシスル色を使って描画する	plt.plot(データ列x, データ列y, color='thistle')
勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.GradientBoostingClassifier()
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
書き込み用にファイルを文字列の示す文字コードを使ってオープンする]	open(filepath, mode='w', encoding=s)
option: レベッカパープルを使う	color = 'rebeccapurple'
線グラフをスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='slateblue')
option: 印を三角に変更する	marker = '^'
列の全順列	itertools.permutations(iterable)
文字列を最後の部分文字列で二分割して前半を求める	文字列.rpartition(部分文字列)[0]
棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
無限大を使う	math.inf
リストとリストについて散布図を描画し、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
xを文字列にする	str(x)
文字列にある文字がいくつあるか調べる	文字列.count(文字)
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
配列とリストについて散布図を描画して、ダイアモンドマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
予測結果の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: 暗い赤色を使う	color = 'darkred'
データフレームを表示するとき、ヘッダー行を右寄せにセットする	pd.set_option('colheader_justify', 'right')
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
クラス分類をロバスト推定として行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
回帰分析を部分的最小二乗法でする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
文字列はタイトルケースかどうか調べる	文字列.istitle()
棒グラフを淡いピンク色色を使って描画する	plt.bar(データ列x, データ列y, color='lightpink')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
文字列を空白で区切る	文字列.split()
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
２つのリストから辞書を作る	dict(zip(リスト, リスト2))
散布図をシエナ色を使って描画する	plt.scatter(データ列x, データ列y, color='sienna')
カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
三自然数のGCD	math.gcd(n, n2, n3)
配列とイテラブルの散布図を描画し、、マーカーを下三角に変更する	plt.plot(データ列x, データ列y, marker='v')
横棒グラフを茶色色を使って描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームをグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
浮動小数点数を浮動小数点数で割った余り	x % y
option: 整数型を使う	np.int = np.int<nl>dtype = np.int
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
option: 文字コードをSJISにセットする	encoding = 'shift_jis'
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
指定したカラムの標準偏差	df['列A'].std()
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
線グラフをラベンダーブラッシュ色を用いて描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
rgbの左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
説明変数と目的変数を用いてモデルを学習する	model.fit(説明変数, 目的変数)
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
実数を切り上げる	math.ceil(x)
モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
符号なし８ビット整数型のゼロ埋めされた行列を作る	np.zeros(要素数, dtype=np.uint8)
カンマで文字列を区切り、、文字列リストに変換する	文字列.split(',')
UTF8で書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
変数名はスタックフレーム	inspect.isframe(識別子)
データシリーズの曜日数	ds.dt.dayofweek
青色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
棒グラフをピンク色を使って描画する	plt.bar(データ列x, データ列y, color='pink')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
オリーブ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
青紫にヒストグラムの色を変更する	plt.hist(データ列, color='violet')
星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
option: 色をタンに設定する	color = 'tan'
シーケンスから計数器を作る	collections.Counter(iterable)
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
データフレームの選択したカラムのNaNを最大値に増やす	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: パウダーブルーを用いる	color = 'powderblue'
データフレームを散布図で可視化し、、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
数式のn階微分を行う	sympy.diff(数式, [|変数]x, n)
折れ線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
文字列の末尾から改行を除去する	文字列.rstrip('\n')
文字列を最後の区切り記号で分けた時の後半の文字列を取り出す	文字列.rpartition(セパレータ)[-1]
全てデータフレームの値を正規表現patternで置き換える	df.replace(pattern, repl, regex=True)
何か試しに動かしてみる	print('Hello World')
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
散布図を暗い赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkred')
散布図をグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='gray')
option: マーカーの色をブラックにする	markerfacecolor = 'black'
配列を中央値でビニングする	pd.qcut(aArray, 2)
実行を正しく終了する	sys.exit(0)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
アルファベットの大文字列	string.ascii_uppercase
文字コードによって文字列をバイト列に変換する	文字列.encode(encoding=encoding)
ボックスチャートにラベルを設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
option: フォントの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データフレームの中の列を等間隔でn個に分割する	pd.cut(df[col], n)
グラフをポスターに設定する	sns.set(context='poster')
x座標を対数目盛に変更する	plt.xscale('log')
リストの合計値	sum(リスト)
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
タイムスタンプデータをISO形式の文字列にする	aDatetime.isoformat()
リストから重複なく、n個ランダムに選んでリスト化する	random.sample(リスト, k=n)
データフレームの欠損値を直後の値で置き換える	df.fillna(method='bfill')
横棒グラフをインディアンレッド色を使って描画する	plt.barh(データ列x, データ列y, color='indianred')
TSVファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
折れ線グラフの▼マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
文字列中にひとつでもアルファベットが含まれるか	any(c.isalpha() for c in 文字列)
真紅色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
rgbの四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
マップの項目名をひとつずつ処理する	for key in 辞書.keys():<nl><tab>print(辞書[key])  # FIXME
TSVファイルから文字コードを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
▼印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
縦棒グラフをシルバー色を用いて描画する	plt.bar(データ列x, データ列y, color='silver')
プラットホームはMacOSか調べる	sys.platform.startswith('darwin')
線形モデルの回帰変数を使う	model.coef_
プロットの色を全般的に明るくする	sns.set(pallete='bright')
グラフの色を全般的に濃くする	sns.set(pallete='deep')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
キーがマップ上で未定義か確認する	キー not in 辞書
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
option: オレンジ色を使う	color = 'orange'
option: ミディアムスレートブルーを使用する	color = 'mediumslateblue'
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
リストをナンバリングしながら一つずつ処理する	for i, value in enumerate(リスト):<nl><tab>print(i, value)  # value はリストの要素
浮動小数点数が整数かテストする	x.is_integer()
データフレーム中の欠損値をドロップしてみる	df.dropna()
option: 色をライトグレーに設定する	color = 'lightgrey'
配列のトリム平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
赤い下三角マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームのある列の値がxより小さいデータを抽出する	df[df['列A'] < x]
option: BOM付きを使用する	encoding = 'utf_8_sig'
棒グラフをスノー色を用いて描画する	plt.bar(データ列x, データ列y, color='snow')
データシリーズの年を使う	ds.dt.year
部分文字列が文字列の終了位置より前に含まれるかテストする	文字列.find(部分文字列, 0, 終了位置) != -1
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgray')
線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
空白区切りでタプルの要素を表示する	print(*タプル)
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフの左三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
ダークゴールデンロッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列をインデントを指定してJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
パパイヤウィップ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
option: フォントの色をプラムに変更する	color = 'plum'
データシリーズの中の未入力値の合計を数える	ds.isna().sum()
xを紫色でプリントできる文字列にする	f'\033[35m{x}\033[0m'
option: データ型を指定する	np.uint8 = np.int<nl>dtype = np.uint8
リストと配列の散布図を描いてマーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
データフレームのNaNを中央値に増やす	df.fillna(df.median())
ある文字列で文字列が終了するか	文字列.endswith(部分文字列)
双曲線正弦の逆数	math.asinh(x)
折れ線グラフの▲マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームの先頭10行	df.head(10)
option: 紺色を使う	color = 'darkblue'
キューから最初の要素を取り除く	両端キュー.remove(要素)
右三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
縦に２つのデータフレームを連結する	pd.concat([df, df2], axis=0)
データフレームを表示するとき、表示可能な列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
小数点以下'1'桁の文字列にする	':.1f'.format(x)
あらかじめケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
文字列を部分文字列で分割して、前半を使う	文字列.partition(部分文字列)[0]
図のインチを設定する	plt.figure(figsize=(横幅, 高さ))
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
多次元データを多次元尺度構成法で数値次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
指定した列のカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
nが無限に続く数列を求める	itertools.repeat(n)
折れ線グラフの色をライトサーモンに変更する	plt.plot(データ列x, データ列y, color='lightsalmon')
濃いシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
タプルが少なくともひとつ真か調べる	any(タプル)
タプルの中の最小値を求める	min(タプル)
散布図をダークマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
デピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: ミディアムターコイズ色を使用する	color = 'mediumturquoise'
データフレームのカラムをリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
option: 配列のデータ型を指定する	np.int = np.int<nl>dtype = np.int
色付きの実線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
文字列を空白を用いて分割して、整数のリストに変換する	list(map(int, 文字列.split()))
データフレームを表示するとき折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
データフレームの未入力値をメディアンにセットする	df.fillna(df.median())
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
日付データが金曜日か	aDate.weekday() == 4
線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
タブを求める	'\t'
散布図に黒い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
円グラフの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
開始位置から終了位置までに部分文字列がいくつか存在するか調べる	文字列.count(部分文字列, 開始位置, 終了位置)
行列のユニークな要素	np.unique(aArray)
イテラブルからn要素サンプリングしてリストにする	random.sample(イテラブル, k=n)
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ヒストグラムの色を青紫にセットする	plt.hist(データ列, color='violet')
JSONバイト列をパースする	json.loads(バイト列.decode('unicode-escape'))
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
多次元尺度構成法の準備をする	model = sklearn.manifold.MSD(n_components=n)
等しい量になるようにデータフレームの中の列をn個にビン分割する	pd.qcut(df[col], n)
ミディアムターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
やわらかい青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
データフレームの中に文字列と日付データがある	df.isin([value, value2])
最大値でデータフレームの指定した列の未入力値を埋める	df['列A'].fillna(df['列A'].max())
データフレームの選択したカラムを丸める	df[['列A', '列B']].round()
全ての印字	string.printable
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
文字列に指定された文字がいくつあるか調べる	文字列.count(文字)
論理値型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
カウンタ同士でユニオン演算する	aCounter | aCounter2
データフレームをある列のカテゴリとしてグループ分けして、各グループごとの件数を知る	df.groupby('列A').size()
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
オレンジレッドにヒストグラムの色を指定する	plt.hist(データ列, color='orangered')
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
辞書を別のマップを用いて更新する	辞書.update(辞書2)
タプルをナンバリングする	enumerate(タプル)
行列の行ごとの標準偏差を使う	np.std(aArray, axis=1)
実部と虚部から複素数を生成する	complex(x, y)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
ファイル名がCSVファイルかどうか	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
０で全要素を初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
表のある列を最初のカテゴリーを除外してダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
ダークシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ロイヤルブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
ユーザの入力を整数として受け取る	int(input())
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
文字列が全て大文字かどうか調べる	文字列.isupper()
ゼロ埋めされた複素数型のベクトル	np.zeros(要素数, dtype=bool)
文字をn回だけ置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
ゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
シルバー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
書き込み用にファイルパスをUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
散布図の△印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
点線にヒストグラムの線の種類を変更する	plt.hist(データ列, linestyle='dotted')
ダークマゼンタ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームの指定した列の中にと文字列があるか調べる	df['列A'].isin([value, value2])
nと整数が等しいか調べる	整数 == 整数2
太文字で表示できる文字列に変換する	f'\033[1m{x}\033[0m'
option: ダークスレートブルーを使う	color = 'darkslateblue'
現在の再帰の最大回数	sys.getrecursionlimit()
整数が負の数	整数 < 0
データフレームのあるカラムのNaNを数値で補う	df['列A'].fillna(x)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
破線に線グラフの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームから列を３つ選択する	df[['列A', '列B', '列C']]
マップに要素を項目名として加える	辞書[キー] = element
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
両端キュー中の整数のインデックス	両端キュー.index(整数)
あるカラムの不偏標準偏差	df['列A'].std()
ヒストグラムの色をダークグレーにする	plt.hist(データ列, color='darkgray')
識別子がクラスか	inspect.isclass(識別子)
イテラブルを横棒グラフにする	plt.barh(ラベル列, データ列)
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの選択したカラムの中にいくつNaNがあるか数える	df[['列A', '列B']].isna().sum()
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
散布図に左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をミスティローズに指定する	color = 'mistyrose'
スクリプトファイルの絶対パス	os.path.abspath(__file__)
折れ線グラフの色をライトゴールドロディイエローにする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: 色をネイビーに指定する	color = 'navy'
ビン数nでデータフレームの中のカラムをビン分割する	pd.cut(df[col], n)
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
リストをy軸、リストをx軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
三角マーカーを使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ドジャーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
グラフの短い説明を表示する	plt.legend()
線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
マゼンタでxをプリントする	print(f'\033[35m{x}\033[0m')
折れ線グラフの色をダークグレーにする	plt.plot(データ列x, データ列y, color='darkgray')
文字列は全て識別子かどうか調べる	文字列.isidentifier()
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
整数の二進数表現	bin(整数)
ミディアムブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
文字列の先頭でパターンにマッチするか確認する	re.match(pattern, s)
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームを指定した列によってソートし、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
色名をからコードに変換する	matplotlib.colors.cnames[色名]
を整数分の一にする	変数 /= 整数
option: カラムの名前を自動的な連番に変更する	header = None
要素がセットに含まれるか確認する	要素 in セット
option: グラフの色を珊瑚に指定する	color = 'coral'
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
インデントを指定してデータをJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
線を青い実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフの色をダークレッドに指定する	plt.plot(データ列x, データ列y, color='darkred')
CSV形式にデータフレームを小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
前もってパターンを複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
イテラブルをヒストグラムにする	plt.hist(データ列)
指定した列のカテゴリで集計し、それぞれの最大値を求める	df.groupby('列A').max()
等差数列から整数乱数を得る	random.randrange(start, end, step)
エクセルファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
カウンタ間でユニオン演算する	aCounter | aCounter2
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
option: ８ビット整数型を使う	np.int8 = np.int<nl>dtype = np.int8
データフレームの選択したカラムの平均値	df[['列A', '列B']].mean()
option: ブラウン色を使う	color = 'brown'
黒いポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c='k')
上位集合かどうか調べる	セット.issuperset(セット2)
方程式として数式のパラメータの解を求める	sympy.solve(数式, [|変数]x)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
白色で表示できる文字列に変換する	f'\033[37m{x}\033[0m'
データフレームの指定したカラムの値を正規表現patternでまとめてreplに置換する	df['列A'].replace(pattern, repl, regex=True)
option: ホワイトスモーク色を使う	color = 'whitesmoke'
データフレームのあるカラムのタイムゾーンを東京に変更する	df['列A'].tz_convert('Asia/Tokyo')
option: 印を四角に変更する	marker = 's'
空の両端キュー	両端キュー = collections.deque()
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
ベクトルの計算をする	import numpy as np
エクセルファイルを読む	pd.read_excel('file.xlsx')
option: シーグリーンを用いる	color = 'seagreen'
データフレームの尖り	df.skew()
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
折れ線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
整数は組のどれか	aTuple = [0, 1, 2]<nl>整数 in aTuple
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
データシリーズを千の位で四捨五入して、整数にする	ds.round(-3).astype(int)
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
散布図のクロス印の太さを設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムをミディアムパープル色を使って描画する	plt.hist(データ列, color='mediumpurple')
リストの値のみプリントする	print(*リスト)
データフレームをグループ化し、標準偏差を計算する	df.groupby('列A').std()
option: マーカーを三角に変える	marker = '^'
option: ブルーバイオレット色を使う	color = 'blueviolet'
データシリーズの欠損値を直後の値に設定する	ds.fillna(method='bfill')
リストの全ての値を空にする	リスト.clear()
タプルの個数	len(タプル)
データフレームの選択したカラムの中にいくつ未入力値があるか数える	df[['列A', '列B']].isna().sum()
キーがマップ上で未定義	キー not in 辞書
JSON形式でデータを指定されたファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
0からN未満までのベクトル	np.arange(N)
データフレームの指定したカラムの未入力値を直後の値で補う	df['列A'].fillna(method='bfill')
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
文字列中に非大文字が存在するかどうか調べる	any(not c.isupper() for c in 文字列)
線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
文字列中に非大文字があるか調べる	any(not c.isupper() for c in 文字列)
セットの補集合を求める	セット.difference(セット2)
0から始まる無限なリスト	itertools.count()
ある列によってデータフレームをグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
最大長nの両端キューを生成する	collections.deque(maxlen=最大長)
ファイルを全部、読み込む	f.read()
列のエポック秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
セパレータで文字列を区切って、列挙する	文字列.split(セパレータ)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列を最初のコロンで二分する	文字列.partition(':')
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
折れ線グラフの△マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
コマンドラインで指定されたファイル名をひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
コマンドラインを列挙する	sys.argv[1:]
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
二つの集合のいずれか一方だけの集合を使う	セット.symmetric_difference(セット2)
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームの未入力値をxで置換する	df.fillna(x)
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: レモンシフォン色を用いる	color = 'lemonchiffon'
空のマッピングが欲しい	辞書 = {}
データシリーズの欠損値をその最小値で埋める	ds.fillna(ds.min())
散布図をアンティークホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
ヒストグラムをライトコーラル色として描画する	plt.hist(データ列, color='lightcoral')
文字列を空白で区切って、文字列リストに変換する	文字列.split()
文字列からある文字を全て取り除く	文字列.replace(文字, '')
シーグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
列概要	df.info()
ある列の文字列に部分文字列が含まれない行を選択する	df[~df['列A'].str.contains(部分文字列)]
NaN	math.nan
数に実数を加える	x + y
データフレームのカラムを度数分布図にする	plt.hist(df[column])
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
数式を積分する	sympy.integrate(数式)
配列と配列について散布図を描いて大バツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
配列を等量で分割数nでビン分割する	pd.qcut(aArray, n)
表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
ヒストグラムをダークオリーブグリーン色として描画する	plt.hist(データ列, color='darkolivegreen')
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
ゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
配列をイミュータブルな集合に変換する	frozenset(配列)
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列リストをひとつの文字列にする	''.join(文字列)
文字列がリストのいずれか調べる	文字列 in リスト
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
整数のバイト長を見る	(整数.bit_length() + 7) // 8
リストと配列について散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
大文字を小文字にする	文字列.lower()
深紅にヒストグラムの色を指定する	plt.hist(データ列, color='crimson')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
option: ディムグレー色を用いる	color = 'dimgrey'
縦棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
オブジェクトは浮動小数点数型	float = int<nl>isinstance(obj, float)
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
識別子がジェネレータかどうか確認する	inspect.isgenerator(識別子)
折れ線グラフの色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
イテラブルを一つの文字列にする	''.join(map(str, イテラブル))
列の各データが何回出現するか見る	ds.value_counts()
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
行列の形状	aArray.shape
リストをJSONフォーマットを用いて出力に保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
二つの文字列が同じかどうか	文字列 == 文字列2
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
モデルを当てはめる	model.fit(説明変数, 目的変数)
データフレームの指定したカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
ローングリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
部分文字列が文字列の指定した位置以降に含まれない	文字列.find(部分文字列, 開始位置) == -1
既存のファイルをUTF8を使って追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
表データのあるカラムは何月か知る	df['列A'].dt.month
ファイルパスをオープンして]、書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
柱状図でリストを描画する	plt.hist(データ列)
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ファイルをバイナリ書き込みできるように開く]	'wb' = 'a'<nl>open(filepath, mode='wb')
option: グラフの色をグレーに指定する	color = 'gray'
線グラフのラインスタイルを一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
option: 紺碧色を使用する	color = 'azure'
指定した列の値によってデータフレームをグループ化する	df.groupby('列A')
青色にする	f'\033[34m{x}\033[0m'
タイムスタンプデータの月数	aDatetime.month
双方向キューが空でない	len(両端キュー) != 0
二つのオブジェクトは同一参照	obj is obj2
配列から一つランダムに選んでリストにする	random.choice(配列)
文字列を最初の部分文字列で二分して、後ろの方を求める	文字列.partition(部分文字列)[-1]
データフレームの標本分散を求める	df.var(ddof=0)
データフレームの一部のカラムの平均などをまとめて調べる	df[['列A', '列B']].describe()
色付きの破線を用いて数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データでモデルを学習する	model.fit(説明変数, 目的変数)
棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
疑似乱数を正規分布として生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームとデータシリーズを横に連結する	pd.concat([df, ds], axis=1)
数列と配列についての散布図にrgbの上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
日付データが火曜日	aDate.weekday() == 1
タイムスタンプデータの秒数	aDatetime.second
データ列の推移を赤い点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ベクトルの行ごとの標準偏差	np.std(aArray, axis=1)
セットが真部分集合かどうか調べる	セット < セット2
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
折れ線グラフをチョコレート色を用いて描画する	plt.plot(データ列x, データ列y, color='chocolate')
方程式として数式のパラメータの解を求める	sympy.solve(数式, y)
グラフの名称を設定する	plt.title('グラフの名称')
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
ミスティローズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
破線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
日付データが日曜日かどうか調べる	aDate.weekday() == 6
数列とリストについて散布図を描画し、、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: ダイアモンド印を用いる	marker = 'D'
タプルを順番付けする	enumerate(タプル)
ライトグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lightseagreen')
ヒストグラムをゴールデンロッド色を用いて描画する	plt.hist(データ列, color='goldenrod')
リストと配列の散布図を描画し、、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
二つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
カウンタからゼロ出現回数を取り除く	+aCounter
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
0から始まる無限数列	itertools.count()
オブジェクトはリストかタプル	isinstance(obj, (list)
二つのデータフレームを列名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
ヒストグラムの色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
ある列のカテゴリで集計し、最大値を求める	df.groupby('列A').max()
n番目の列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
option: コーンフラワーブルー色を使用する	color = 'cornflowerblue'
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
option: オレンジレッド色を使う	color = 'orangered'
データフレームのカラムを折れ線グラフで作図する	plt.plot(df[column], df[column])
カウンタ同士で共通部分演算する	aCounter & aCounter2
縦棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
正弦を求める	math.sin(x)
カウンタのユニオン演算する	aCounter | aCounter2
イテラブルの変化を青い一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
タプルの先頭を求める	タプル[0]
option: 印を右三角に変える	marker = '>'
指定した列のカテゴリで集計し、分散を求める	df.groupby('列A').var()
ファイルパスからのストリームを求める	open(filepath)
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
カウンタのボトムをリストとして得る	aCounter.most_common()[:-n-1:-1]
プロットにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
シスル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの中にと文字列がいくつあるか求める	df.isin([value, value2]).sum()
option: 色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
nが無限に続く整数リスト	itertools.repeat(n)
原点から(実数,y)の距離	math.hypot(x, y)
option: どの行もカラムの名前にしない	header = None
カラムの尖度を使う	scipy.stats.kurtosis(df['列A'], bias=False)
実数の常用対数を求める	math.log10(x)
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
配列が正規分布かどうか調べる	scipy.stats.shapiro(配列)
列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby('列A').describe()
データフレームの行がnの行を選択する	df.loc[n]
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: グラフの色をラベンダーに設定する	color = 'lavender'
文字列を最後のカンマで二分割し、、前半を使う	文字列.rpartition(',')[0]
データフレームのあるカラムのタイムゾーンを日本に変更する	df['列A'].tz_convert('Asia/Tokyo')
ヒストグラムをホワイト色として描画する	plt.hist(データ列, color='white')
option: 印を△に変える	marker = '^'
ある列の値の個数	df.groupby('列A').count()
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: n番目のカラムを行に設定する	index_col = n
データフレームの一部のカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
二つの文字列はケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
コーンフラワーブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
2を底とする実数の対数	math.log2(x)
データフレームの選択した列においてどの値が頻出か確認する	df[['列A', '列B']].mode()
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
両端キューのn番目に整数を差し込む	両端キュー.insert(n, 整数)
50パーセンタイルでデータシリーズの欠損値を補う	ds.fillna(ds.median())
stringモジュールをインポートする	import string
列の組み合せ	itertools.combinations(iterable, n)
リストを反転する	reversed(リスト)
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
リストに別のリストを追加する	リスト.extend(リスト2)
横棒グラフをミディアムスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
横軸だけ目盛り線	plt.grid(axis='x')
文字列中にひとつでも非数字が含まれるか	any(not c.isdigit() for c in 文字列)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
正弦の逆数	math.asin(x)
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
データシリーズの中にいくつ欠損値が含まれるか数える	ds.isna().sum()
option: グラフの色をダークカーキにする	color = 'darkkhaki'
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
データシリーズの欠損値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
ヒストグラムを濃い青色で描画する	plt.hist(データ列, color='darkblue')
縦棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
黒いクロスマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
配列を双方向キューにする	collections.deque(配列)
散布図のポイントマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
option: マーカーの大きさを変更する	markersize = 2.0
カウンタの最頻出の要素	aCounter.most_common()[0]
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
円周率を使う	math.pi
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
文字列の終了位置より前に部分文字列が含まれないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
黒色で表示できる文字列にする	f'\033[30m{x}\033[0m'
実数の逆双曲線正接	math.atanh(x)
文字列の右側から空白を取り除く	文字列.rstrip('\t')
データシリーズの欠損値をxに設定する	ds.fillna(x)
データフレームのあるカラムが何時か見る	df['列A'].dt.hour
データフレームの選択したカラムの最頻値	df[['列A', '列B']].mode()
ラジアンの角度を算出する	math.degrees(x)
ムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
データフレームの選択したカラムの中に存在する文字列の合計を求める	df[['列A', '列B']].isin([value]).sum()
入力ストリームからn文字読み込む	f.read(n)
点線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dotted')
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: ホワイトに色を設定する	color = 'white'
バツマーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
文字列の中で複数行対応として正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
出現頻度を作図する	plt.hist(データ列)
option: 茶色にフォントの色を設定する	color = 'brown'
データフレームの一部の列の歪み	df[['列A', '列B']].kurt()
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
xが真か確認する	bool(x)
option: ライトイエロー色を用いる	color = 'lightyellow'
折れ線グラフの下三角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
option: ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
カラムのどの値が最も出現するか調べる	df['列A'].mode()
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
リストと配列についての散布図に黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
数列をヒストグラムとして可視化する	plt.hist(データ列)
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
option: マーカーをポイントに変える	marker = '.'
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
シーケンスの各要素を関数でフィルタする	map(func, iterable)
x,yの複素数	complex(x, y)
線グラフのラインスタイルを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
列を分割する	pd.cut(ds, aList)
option: 色をシャルトリューズに指定する	color = 'chartreuse'
文字列を複数行対応としてパターンで区切る	re.split(pattern, s, flags=re.MULTILINE)
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
文字が平仮名かテストする	('ぁ' <= 文字 <= 'ん')
データフレームのカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームを並べ直し、、上の方n件を取り出す	df.sort_values('キーとなる列').head(n)
二つのセットが交わりを持たないか調べる	セット.isdisjoint(セット2)
データフレームをエクセルファイルファイルで出力する	df.to_excel('file.xlsx')
データフレームの重複していない行のみを取り出す	df[~ df.duplicated(keep=False)]
列をフォーマットでdatetime64型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
ダークオーキッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
紺色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
浮動小数点数の双曲線正弦	math.sinh(x)
変数がマイナス無限大に近づく場合の極限値を求める	sympy.limit(数式, 変数, -oo)
辞書に辞書2の値を加えて、更新する	辞書.update(辞書2)
横棒グラフをミディアムパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
行列の最小値	np.min(aArray)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
回帰木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
リストの中の一番大きい値を計算する	max(リスト)
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
データフレームの一部のカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
option: フォントの色をミントクリームに設定する	color = 'mintcream'
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
予測値とデータの離れ具合を描く	sns.residplot(x='列名', y='列名', data=df)
データフレームの選択したカラムがどの程度分散しているか調べる	df[['列A', '列B']].var()
文字列をJSONにエンコードする	json.dumps(文字列, ensure_ascii=False)
option: フォントの色をコーンズシルクに指定する	color = 'cornsilk'
辞書の項目名の一覧	list(辞書.keys())
分子n分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
散布図をアクアマリン色を使って描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
整数の4分の一	整数 / 4
横棒グラフをオレンジ色を使って描画する	plt.barh(データ列x, データ列y, color='orange')
入力をJSONとして構文解析する	json.load(ファイル入力)
xを論理値に変換する	bool(x)
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
すべてのシートをエクセルから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
配列の行ごとの平均値を求める	np.mean(aArray, axis=1)
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
タイムスタンプデータが日曜日かどうか調べる	aDatetime.weekday() == 6
全角数字を半角数字に変換する	文字列.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
散布図の▲印の太さを変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームをNaNを含めてある列の値でグループ分けする	df.groupby('列A', dropna=False)
配列を更新不能なセットにする	frozenset(配列)
辞書でカウンタを更新する	aCounter.update(aDict)
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
大バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
xを白色で表示できる文字列にする	f'\033[37m{x}\033[0m'
ファイルを文字列の示すエンコーディングとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
まとめてreplに正規表現patternでデータフレームの値を置き換える	df.replace(pattern, repl, regex=True)
リストとリストについての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図をrgbのダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
三変数の最大値	max(x, y, z)
ダークオレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ある列の値毎の最大値	df.groupby('列A').max()
データ列の推移を色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
配列とリストについての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
整数を符号付きでバイト列に変換する	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
ヒストグラムの色をオールドレースに変更する	plt.hist(データ列, color='oldlace')
最後の部分文字列で文字列を二分する	文字列.rpartition(部分文字列)
数式の微分を計算する	sympy.diff(数式)
文字列の先頭から部分文字列を除去する	文字列.lstrip(部分文字列)
青い実線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームから10行、サンプリングする	df.sample(10)
ある列をキーにしてデータフレームを並べる	df.sort_values(by='列A')
データフレームの指定したカラムの中に文字列があるか調べる	df['列A'].isin([value])
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
配列の変遷を半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
リストと配列について散布図を描画し、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: 耐火レンガを用いる	color = 'firebrick'
1行から二つの浮動小数数を読む	A, B = map(float, input().split())
データフレームの選択したカラムの相関行列	df[['列A', '列B']].corr()
データフレームを関数の値によってグループ化する	df.groupby(関数)
あるカラムの記述統計量	df['列A'].describe()
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
option: グラフの色をプラムに設定する	color = 'plum'
データフレームをグループ化し、各合計を求める	df.groupby('列A').sum()
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
複数のシートを指定してエクセルファイルからデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
グラフに水平方向の点線をつける	plt.axhline(y=0, linestyle='dotted')
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
整数が整数2より大きいか調べる	整数 > 整数2
数式を浮動小数点数に変換する	float(数式)
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
ある列の文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
カウンタから辞書を引く	aCounter.subtract(aDict)
多次元データをMSDで文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
行列の行ごとの最大値	np.max(aArray, axis=1)
グレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームの列間の相関係数を一度に算出する	df.corr()
グローバル変数の一覧を使う	globals()
ファイルパスをSJISでオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
option: ゴールドに色を設定する	color = 'gold'
ふたつのリストを結合する	リスト + リスト2
先頭のを除いたデータフレーム	df[df.columns[1:]]
文字列を部分文字列で区切って、列挙する	文字列.split(部分文字列)
リストの要素を文字列として、タブで連結する	'\t'.join(map(str, リスト))
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
プラットホームの名前	sys.platform
データフレームの選択したカラムのパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データシリーズの記述統計量を計算する	ds.describe()
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
あるカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
データフレームのカラムを一万の位で丸める	df['列A'].round(-4)
データフレームの指定したカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
数値がセットに含まれるか	数 in セット
スチールブルーにヒストグラムの色を指定する	plt.hist(データ列, color='steelblue')
標準エラーを使う	sys.stderr
グラフを暗くする	sns.set(pallete='dark')
縦棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
xを下線付きで表示できる文字列にする	f'\033[4m{x}\033[0m'
option: 菱形マーカーを描画する	marker = 'D'
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
カテゴリに並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: カーキ色を使用する	color = 'khaki'
FIXME:カテゴリーデータを出現頻度順に並べる	df['列A'].value_counts().sort_index().index
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
マップからキーとその値をペアとして取り出す	辞書.items()
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
辞書で文字列を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
真⊂か	セット < セット2
t分布型確率的近傍埋め込み法を行う	model = sklearn.manifold.TSNE(n_components=n)
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
ファイルを追加用に開いて]、fとする	f = open(filepath, mode='a')
n個にデータ列を等間隔でビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
データシリーズの標準偏差を計算する	ds.std()
データフレーム全体をインデックスによってソートする	df.sort_index()
kを底とする対数を計算する	math.log(x, k)
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
折れ線グラフでデータ列を可視化する	plt.plot(データ列x, データ列y)
ターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
アンティークホワイトにヒストグラムの色をセットする	plt.hist(データ列, color='antiquewhite')
タプル内の要素が少なくともひとつ真か調べる	any(タプル)
エラーなくセットから整数を除去する	セット.discard(数)
データフレームの指定した列の欠損値を直前の値で置換する	df['列A'].fillna(method='ffill')
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
option: n番目のカラムをインデックスに設定する	index_col = n
折れ線グラフの色を小麦色にする	plt.plot(データ列x, データ列y, color='wheat')
データフレームのある列を100の位で丸める	df['列A'].round(-2)
色付きの実線で配列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
要素はタプルに含まれないか	要素 not in タプル
日付時刻データの秒	aDatetime.second
棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
平方根	math.sqrt(x)
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
フォレストグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: コーンズシルクにグラフの色を設定する	color = 'cornsilk'
データフレームのカラムの歪度を算出する	scipy.stats.skew(df['列A'], bias=False)
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
分類モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
option: フォントの色をアクアに変更する	color = 'aqua'
横棒グラフを描画して、バーの幅を変更する	plt.barh(ラベル列, データ列, width=0.5)
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
実数のk進対数	math.log(x, k)
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
決定木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
ハローワールドと表示する	print('Hello World')
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
ホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='white')
オブジェクトがビルトイン関数か調べる	inspect.isbuiltin(オブジェクト)
プラットフォームのコードポイントの最大値	sys.maxunicode
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
ある列によってデータフレームを大きい順に並べる	df.sort_values(by='列A', ascending=False)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
日付時刻データにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
折れ線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
新しいロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのあるカラムの値がx以下の行を抽出する	df[df['列A'] <= x]
オブジェクトが抽象クラスか確認する	inspect.isabstract(オブジェクト)
データフレームのインデックスの名前の一覧	df.index
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
部分文字列を範囲を指定して後方から探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
option: 印を下三角に変更する	marker = 'v'
折れ線グラフをダークシアン色を使って描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ふたつの列としてグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
要素はリストに含まれるかどうか調べる	要素 in リスト
option: スチールブルー色を使う	color = 'steelblue'
散布図を耐火レンガ色として描画する	plt.scatter(データ列x, データ列y, color='firebrick')
文字列をコロンで分割し、、列挙する	文字列.split(':')
辞書のキーを列挙する	辞書.keys()
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
nが整数と等しい	整数 == 整数2
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
散布図に黒い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列中の部分文字列を置き換える	文字列.replace(部分文字列, 置換後の文字列)
option: スラグレーにグラフの色を変更する	color = 'slategray'
指定したカラムはどれだけ、分散しているか見る	df['列A'].var()
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(文字列リスト)
データシリーズは何時か見る	ds.dt.hour
データフレームのあるカラムの欠損値を最頻値で置換する	df['列A'].fillna(df['列A'].mode().iloc[0])
ビン数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
option: 色をやわらかい青に設定する	color = 'cornflowerblue'
リストの要素の位置をエラーなく見る	リスト.index(要素) if 要素 in リスト else -1
sepを区切りとして文字列リストを連結する	sep.join(文字列リスト)
出力するCSVファイルの小数点以下の桁数を指定する	df.to_csv('file.csv', float_format='%.3f')
折れ線グラフに赤い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
yについて偏微分を求める	sympy.diff(数式, y)
整数のn乗を求める	整数 ** n
回帰分析を多層パーセプトロンで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
横棒グラフをパールバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palevioletred')
文字列が全て英数字か	文字列.isalnum()
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
整数の八進数表現	oct(整数)
ファイルを書き込みモードでオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
ティール色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
二つのデータ列の散布図として残差をプロットする	sns.residplot(x=データ列, y=データ列)
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
線を青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
xの小数点以下'4'桁の文字列にする	':.4f'.format(x)
２つの数値を改行なしにプリントする	print(数値, 数値, end='')
タイムスタンプデータが水曜日か調べる	aDatetime.weekday() == 2
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフに大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
データシリーズの中に日付データがあるか調べる	ds.isin([value])
オブジェクトはスタックフレームかどうか調べる	inspect.isframe(オブジェクト)
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
配列から複数個ランダムに選んでリスト化する	random.choices(配列, k=n)
小麦色色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
整数の五分の一を求める	整数 / 5
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
折れ線グラフをフローラルホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='floralwhite')
分割数nとしてデータフレームの中の列を分割する	pd.cut(df[col], n)
散布図の三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
オブジェクトがコードか調べる	inspect.iscode(オブジェクト)
データフレームの選択した列の欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
変数xについて数式を偏微分する	sympy.diff(数式, [|変数]x)
データを平均と分散を用いて標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
日付データからn週間分、減らす	aDate - datetime.timedelta(weeks=n)
最大行数を減らす	pd.set_option('display.max_rows', n)
昇順にタプルをソートする	sorted(タプル, reverse=False)
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データフレームのn行まで抽出する	df[:n]
グラフ中のフォントを変更する	sns.set(font=フォント名)
配列のイミュータブルな集合	frozenset(配列)
リストの末尾のn要素を取り除く	リスト[:-n]
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
日本語をプロット中で表示できるようにする	sns.set(font='IPAexGothic')
option: ライトサーモンにフォントの色をする	color = 'lightsalmon'
セットをリストに変換する	list(セット)
浮動小数点数が負か判定する	x < 0
データフレームから指定した２つの列を抽出する	df[['列A', '列B']]
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの指定した列の不偏分散	df['列A'].var(ddof=1)
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
縦棒グラフを描画し、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームの末尾10行を抽出する	df.tail(10)
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの選択した列は正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
散布図を黒いダイアモンドマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームから5行、サンプリングする	df.sample(5)
データ列間の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
文字列の終了位置より前に部分文字列が含まれない	文字列.find(部分文字列, 0, 終了位置) == -1
正規表現に文字列がマッチさせる	re.match(pattern, s)
破壊的に昇順にデータフレームを二つの列によってソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
横棒グラフをミディアムスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
ロイヤルブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームから指定した2列を抽出する	df[['列A', '列B']]
イテラブルを連結してひとつの文字列にする	''.join(map(str, イテラブル))
散布図をrgbの▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのある列の欠損値を前の値で置換する	df['列A'].fillna(method='ffill')
プロット中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
多次元データを特異値分解で項次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
インデックスをキーにしてデータフレームを昇順にソートする	df.sort_index(ascending=True)
文字列を改行で分割し、文字列リストにする	文字列.splitlines()
エクセルファイルファイルからCSVファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
option: クロスマーカーを描画する	marker = 'x'
日付データの曜日を使う	aDate.weekday()
改行で文字列を区切り、文字列リストに変換する	文字列.splitlines()
散布図をrgbの菱形マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
カウンタの要素を増やす	aCounter[element] += 1
日付時刻データを数値に変換する	aDatetime.timestamp()
インデントを指定して文字列をJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
カレントワーキングディレクトリを使う	os.getcwd()
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
文字列が全てアルファベット	文字列.isalpha()
両端キューの先頭に要素をつけ加える	両端キュー.appendleft(要素)
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
小麦色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
n個に配列をビニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
スラグレー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
option: スキップするフッタをnに指定する	skipfooter = n
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
列とイテラブルのデカルト積を得る	itertools.product(iterable, iterable2)
縦棒グラフを描画してラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームの列の分散	df['列A'].var()
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
あるカラムの文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
数式を展開する	sympy.expand(数式)
option: 符号なし８ビット整数型を使う	np.uint8 = np.int<nl>dtype = np.uint8
データフレームの一部のカラムがどの程度、正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
データフレームの選択したカラムの中の欠損値の個数を数える	df[['列A', '列B']].isna().sum()
変数の値を大きくする	変数 += 整数
配列からひとつランダムに選んでリストにする	random.choice(配列)
縦棒プロットを描く	plt.bar(ラベル列, データ列)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
グレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
自然数の階乗を求める	math.factorial(n)
整数がセットのいづれかかどうか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
ベクトルの行ごとの最大値	np.max(aArray, axis=1)
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
表データのあるカラムが何月か見る	df['列A'].dt.month
データシリーズの日を見る	ds.dt.day
散布図をシャルトリューズ色を使って描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
縦棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
option: ローングリーン色を使う	color = 'lawngreen'
2次元リストをフラット化する	sum(リスト)
option: ダークターコイズを使う	color = 'darkturquoise'
変数名がメソッドかどうか確認する	inspect.ismethod(識別子)
散布図の丸印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
文字列を最後のコロンで二分割し、、前半を求める	文字列.rpartition(':')[0]
データ列の折れ線グラフを▽印で描画する	plt.plot(データ列x, データ列y, marker='v')
ベクトルが何次元か調べる	aArray.ndim
文字列を最後の区切り記号で二つに分けて後半を求める	文字列.rpartition(セパレータ)[-1]
折れ線グラフをライトコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ロバストな重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
整数が整数2よりも大きいかどうか調べる	整数 > 整数2
option: ターコイズを使う	color = 'turquoise'
文字列はキーワードか調べる	keyword.iskeyword(文字列)
ゼロ埋めされたベクトル	np.zeros(要素数)
nからn2までの整数列を求める	list(range(n, n2+1))
option: 青緑色を使用する	color = 'teal'
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
データシリーズを整数に四捨五入する	ds.round()
データフレームのあるカラムの値がxより大きいデータを抽出する	df[df['列A'] > x]
項がセットのいずれでもないどうか	要素 not in セット
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
辞書を消去する	辞書.clear()
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
リストとリストについて散布図を描画し、、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストの末尾からn番目以前の要素を取り出す	リスト[:-n]
option: グラフの色をシスルにセットする	color = 'thistle'
線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
option: マルーンにグラフの色を指定する	color = 'maroon'
日付時刻データの秒を求める	aDatetime.second
行列の行ごとの平均を求める	np.mean(aArray, axis=1)
折れ線グラフの色をダークカーキにする	plt.plot(データ列x, データ列y, color='darkkhaki')
ゴールド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
タブを使う	'\t'
option: ブランチドアーモンドを用いる	color = 'blanchedalmond'
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフの色をライトスレイグレーにする	plt.plot(データ列x, データ列y, color='lightslategray')
数式のyを指定した数式で置き換える	数式.subs(y, 数式2)
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
オブジェクトはコルーチンか調べる	inspect.iscoroutine(オブジェクト)
文字列が全て数字	文字列.isdigit()
線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
リストの各要素を双方向キューの先頭に追加する	両端キュー.extendleft(リスト)
データフレームを関数の値によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
option: ブラウンにグラフの色を設定する	color = 'brown'
ヒートマップとしてクラス分類の偽陽性を確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データフレームの先頭	df.head()
乱数の行列を初期化する	np.random.random((行数, 列数))
折れ線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
折れ線グラフをシルバー色として描画する	plt.plot(データ列x, データ列y, color='silver')
option: フォレストグリーンに色を設定する	color = 'forestgreen'
option: セパレータをコロンにする	sep = ':'
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームの選択したカラムの欠損値を前の行の値に設定する	df[['列A', '列B']].fillna(method='ffill')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
文字列をセンタリングにする	文字列.center(文字列幅)
黒いポイントマーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
option: ダークオーキッドを用いる	color = 'darkorchid'
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
文字列を複数行対応として正規表現で分ける	re.split(pattern, s, flags=re.MULTILINE)
ヒストグラムを描画して、ビン数を変更する	plt.hist(データ列, bins=区関数)
文字列の中のケースを無視して正規表現による全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
最大値・最小値を使って整数乱数を得る	random.randint(最小値, 最大値)
配列を元にして全要素が1のベクトル	np.ones_like(aArray)
xについて数式の微分を行う	sympy.diff(数式, [|変数]x)
項目名が辞書に存在し、いるか調べる	キー in 辞書
タプルを引数として展開してプリントする	print(*タプル)
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
既存のファイルパスを追加できるように文字列の示す文字コードでオープンする]	open(filepath, mode='a', encoding=s)
日付データの日	aDate.day
数式のn階偏微分を求める	sympy.diff(数式, 変数, n)
単回帰モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
option: フォントの色をチョコレートに変更する	color = 'chocolate'
日付時刻データがタイムスタンプデータと同時か	aDatetime == aDatetime2
散布図の▽印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ハニーデュー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームの一部のカラムを千の位で丸めて、整数にする	df[['列A', '列B']].round(-3).astype(int)
折れ線グラフの四角印を黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
表データのインデックスの名前をまとめて変更する	df.rename(index={x: y})
リストの要素を全てセットに追加する	セット.update(リスト)
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
データフレームの標本分散	df.var(ddof=0)
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: グラフの色をオレンジに変更する	color = 'orange'
折れ線グラフの線の種類を点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのカラムの中にある文字列の数をカウントする	df['列A'].isin([value]).sum()
リストをビン数nを使ってビン分割する	pd.cut(aList, n)
線を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
文字列を最後のセパレータによって分割する	文字列.rpartition(セパレータ)
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
option: グラフの色をカーキに指定する	color = 'khaki'
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
分数の分子	q.numerator
ダークシアン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
半透明の一点鎖線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字列中から正規表現にケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
リストをn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ファイルパスを文字コードtextで開く]	text = 'utf-8'<nl>open(filepath, encoding=text)
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
折れ線グラフのバツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ミントクリーム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
青い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの四分位点などを確認する	df.describe()
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
オリーブ色を使ってヒストグラムを描画する	plt.hist(データ列, color='olive')
配列をビン数nとしてビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図のバツ印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
文字列を両端キューの先頭に付け加える	両端キュー.appendleft(文字列)
縦棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
八進数字を全て求める	string.octdigits
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの空文字を未入力値に変換し、ドロップする	df.replace('', np.nan).dropna()
データフレームをグループ化し各平均値を求める	df.groupby('列A').mean()
ヒストグラムの色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
year年month月day日をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day)
option: サドルブラウン色を使用する	color = 'saddlebrown'
option: 色の透明度を変更する	alpha = 0.5
整数が集合のどれかか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
実線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
カウンタを高頻度な方から列挙する	aCounter.most_common()
現在の時間を使う	datetime.date.today().hour
現在処理中の例外情報	etype, evalue, traceback = sys.exc_info()
seabornのデフォルトを適用する	sns.set()
折れ線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
option: フォントの色をフォレストグリーンにセットする	color = 'forestgreen'
データを最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
配列の平均の標準誤差	scipy.stats.sem(配列)
ベクトルを一次元にする	aArray.flatten()
ある列の文字列に部分文字列が存在しない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
数を二乗する	x ** 2
キーとその値を組として取り出す	辞書.items()
yがマイナス無限大に近づくときの数式の極限値を算出する	sympy.limit(数式, y, -oo)
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
指定した列で集計し個数を算出する	df.groupby('列A').count()
option: マーカーを星に指定する	marker = '*'
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
文字列から改行を全て取り除く	文字列.replace('\n', '')
線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列をJSONフォーマットで出力ストリームに保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
データフレームの選択したカラムの中に文字列があるか確認する	df[['列A', '列B']].isin([value])
散布図の菱形マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
文字列をセパレータで分割して、文字列リストに変換する	文字列.split(セパレータ)
データフレームのNaNが含まれる箇所を色つけする	df.style.highlight_null()
データフレームの値は欠損値か調べる	df.isna()
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
タプルをリストに変換する	list(タプル)
option: グラフの色をドジャーブルーに変更する	color = 'dodgerblue'
リストを等しい量になるようにビン数nとしてビン分割する	pd.qcut(aList, n)
数列とリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
変数の値を累乗に増やす	変数 **= 整数
リストをnからナンバリングする	enumerate(リスト, start=n)
散布図の星印の大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
option: カーキ色を使う	color = 'khaki'
配列のスピアマンの順位相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
散布図のバツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームのある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
行列の行ごとの最大値を算出する	np.max(aArray, axis=1)
サイコロと同じ乱数を発生させる	random.randint(1, 6)
文字列が指定した文字列に存在するか調べる	文字列 in 別の文字列
文字列がある文字列で終わる	文字列.endswith(部分文字列)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
グラフの使途をプレゼンに設定する	sns.set(context='talk')
option: フォントの色をダークマゼンタに指定する	color = 'darkmagenta'
SVDを使って数値次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
オレンジ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
ビン数nを用いて配列を分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
グラフの背景色を暗くする	sns.set(style='darkgrid')
最大長nの両端キューを作る	collections.deque(maxlen=最大長)
折れ線グラフにポイント印を用いる	plt.plot(データ列x, データ列y, marker='.')
option: シーグリーン色を使う	color = 'seagreen'
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
リストをタプルに変換する	tuple(リスト)
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
整数が-9以上9以下かどうか調べる	-9 <= 整数 <= 9
トマト色を用いてヒストグラムを描画する	plt.hist(データ列, color='tomato')
カウンタの各項目を、そのカウントだけ列挙する	aCounter.elements()
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
二つの条件が何か成り立つ	条件 or 条件2
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームの選択した列の相関行列をケンドール相関係数で計算する	df[['列A', '列B']].corr(method='kendall')
散布図をインディゴ色を用いて描画する	plt.scatter(データ列x, データ列y, color='indigo')
日付時刻データは何月か知る	aDatetime.month
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の大バツマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
配列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ファイルをオープンして]、バイナリストリームを使う	'rb' = 'a'<nl>open(filepath, mode='rb')
いつまでもカウントアップする	itertools.count()
option: 区切りをコロンにする	sep = ':'
単位行列を初期化する	np.eye(行数, 列数)
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
xを改行なしに出力する	print(x, end='')
データシリーズの欠損値を最小値で補う	ds.fillna(ds.min())
option: ベージュ色を用いる	color = 'beige'
平均値でデータフレームの選択したカラムの未入力値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
縦棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
クラス分類の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
option: オリーブ色を使用する	color = 'olive'
コマンド引数	sys.argv
グラフの描画で暗くカラーパレットを使用する	sns.set(pallete='dark')
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
xがマイナス無限大に近づく際、極限値を求める	sympy.limit(数式, [|変数]x, -oo)
改行で文字列を分割し、文字列リストに変換する	文字列.splitlines()
xを水色でプリントする	print(f'\033[36m{x}\033[0m')
赤い四角マーカーを配列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ファイルパスをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
0からN未満までのベクトルを作る	np.arange(N)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
散布図をゲインズボロ色として描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームの上5行を取り出す	df.head(5)
主成分分析として多次元データを文字列次元に削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
方程式として数式の変数の解を計算する	sympy.solve(数式, [|変数]x)
配列の最大値	np.max(aArray)
option: グラフの色をグリーンに指定する	color = 'green'
辞書をコピーする	dict(辞書)
データシリーズを小数点以下n桁で四捨五入する	n = 2<nl>ds.round(n)
文字列がセットのいずれか調べる	文字列 in セット
データフレームを並べ直す	df.sort_values('キーとなる列')
最初のカテゴリーを除外してデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
棒グラフをレベッカパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
2進数文字列を整数に変換する	int(文字列, 2)
JSON形式として辞書をファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームの選択したカラムの中に文字列が存在するかどうか調べる	df[['列A', '列B']].isin([value])
識別子が関数	inspect.isfunction(識別子)
カラムの中にがあるか調べる	df['列A'].isin([value])
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: グラフの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
縦軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームをある列として集約してそれぞれのグループごとの件数を知る	df.groupby('列A').size()
双方向キュー中の文字列のインデックスを使う	両端キュー.index(文字列)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの最後n行を抽出する	df.tail(n)
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームの一部のカラムを百の位で丸める	df[['列A', '列B']].round(-2)
線グラフの線の種類を破線にセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフを暗い赤色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
xの小数点以下'1'桁までプリントする	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
データ列を全てタイムスタンプ型にする	pd.to_datetime(ds)
カウンタをイテラブルから用意する	collections.Counter(iterable)
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
UTF8を用いてファイルをオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
データフレームを指定した列によって降順にソートする	df.sort_values(by='列A', ascending=False)
配列の調和平均を求める	scipy.stats.hmean(配列)
二進文字列をバイト列に変換する	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
文字列をASCIIコードエスケープでバイト列に変換する	文字列.encode(encoding='unicode_escape')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
グリッド線	plt.grid(alpha=0.5)
データフレームをある列のカテゴリでグループ化して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
最初のセパレータで文字列を二つに分ける	文字列.partition(セパレータ)
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
散布図をオールドレース色として描画する	plt.scatter(データ列x, データ列y, color='oldlace')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データシリーズのNaNを最大値で置換する	ds.fillna(ds.max())
辞書	辞書 = {}
関数でデータフレームをまとめたグループ	df.groupby(関数)
データフレームのNaNを最大値で埋める	df.fillna(df.max())
イテラブルとリストの散布図をプロットして、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
数列をボックスチャートとして描く	plt.boxplot(データ列)
データフレームの指定したカラムの中に文字列がある	df['列A'].isin([value])
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
データフレームを並べ直し、、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
データシリーズが正規分布からどれだけ、歪んでいるか確認する	ds.kurt()
option: ミスティローズを用いる	color = 'mistyrose'
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
n個の要素があるリストを得る	[要素] * n
option: 色をライトブルーに指定する	color = 'lightblue'
平均値でデータフレームの欠損値を埋める	df.fillna(df.mean())
最初の整数をキューから取り除く	両端キュー.remove(整数)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
データフレームの指定した列のNaNをxに設定する	df['列A'].fillna(x)
リストからn要素サンプリングする	random.sample(リスト, k=n)
カラーバーを描画する	plt.colorbar()
配列は何のデータ型か調べる	aArray.dtype()
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
項目名が辞書に存在するか調べる	キー not in 辞書
文字列からformatのパターンを使って日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
青い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
クリムゾン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの指定したカラムにおいてどの値が最も出現するか見る	df['列A'].mode()
option: フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
ある列の文字列に部分文字列が含まれる行を取り出す	df[df['列A'].str.contains(部分文字列)]
データフレームを表示するとき小数点以下をn桁に設定する	pd.set_option('precision', n)
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
柱状図を二つ並べてプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームから数値データの列のみ取り出す	df.select_dtypes('number')
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームをBOM付きで書き出す	df.to_csv('file.csv', encoding='utf_8_sig')
表の相関行列をヒートマップとして可視化する	sns.heatmap(df.corr())
データフレームのある列を配列として抽出する	df['列A'].values
xをシアンでプリントする	print(f'\033[36m{x}\033[0m')
要素がタプルに含まれないか確認する	要素 not in タプル
データフレームの指定したカラムの未入力値を最大値に設定する	df['列A'].fillna(df['列A'].max())
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
空行をプリントする	print()
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
マップから項目名で指定された項目を取り除く	辞書.pop(キー)
数値がセットに含まれないか調べる	数 not in セット
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
特異値分解で要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
グラフの描画で淡く色を使用する	sns.set(pallete='muted')
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
線グラフの色をミディアムパープルにセットする	plt.plot(データ列x, データ列y, color='mediumpurple')
option: 線の種類を点線に変更する	linestyle = 'dotted'
リストの推移を点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: グラフの色をコーンフラワーブルーに指定する	color = 'cornflowerblue'
リストを等間隔でn個にビンニングする	pd.cut(aList, n)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
option: グラフの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
最後のカンマで文字列を分割して、最初の方を使う	文字列.rpartition(',')[0]
グラフの用途をポスターに指定する	sns.set(context='poster')
入力から二つの整数を読み込む	A, B = map(int, input().split())
散布図に青い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
現在の年	datetime.datetime.today().year
列自身を2回あわせたデカルト積を求める	itertools.product(iterable, repeat=2)
option: ダークオーキッド色を使う	color = 'darkorchid'
データフレームの列間の相関行列を一度に算出する	df.corr()
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
文字列中にひとつでも非大文字が含まれる	any(not c.isupper() for c in 文字列)
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
実数を百の位で四捨五入する	round(x, -2)
等量でデータフレームの中のカラムをn個にビン分割する	pd.qcut(df[col], n)
２つの文字列が大文字小文字を無視して同じか	文字列.casefold() == 文字列2.casefold()
イテラブルを累加した列	itertools.accumulate(iterable)
辞書の項目名の一覧を参照する	list(辞書.keys())
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームの指定したカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
option: ドジャーブルー色を用いる	color = 'dodgerblue'
rgbの▽マーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グラフの見栄えを良くする	import seaborn as sns
縦棒プロットをプロットする	plt.bar(ラベル列, データ列)
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
データフレームをあるカラムによってグループ分けしてグループ名を列挙する	[name for name, _ in df.groupby('列A')]
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
再帰が何回までできるか	sys.getrecursionlimit()
ダークオレンジにヒストグラムの色を指定する	plt.hist(データ列, color='darkorange')
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
ヒストグラムをライトブルー色を用いて描画する	plt.hist(データ列, color='lightblue')
option: グラフの色を珊瑚に設定する	color = 'coral'
リストからランダムに1個選ぶ	random.choice(リスト)
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
バギングを使ってクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
ミントクリーム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
option: サドルブラウンを使用する	color = 'saddlebrown'
ファイルをSJISでオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
グリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
option: ライトスカイブルー色を使用する	color = 'lightskyblue'
各グループごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: フォントの色をミディアムオーキッドにする	color = 'mediumorchid'
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in 文字列)
リストと数列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
マッピングのキーに対応した値	辞書[キー]
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
両端キューの先頭にリストの各データを追加する	両端キュー.extendleft(リスト)
ダークマゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
空列を得る	[]
黒い▲マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
option: フォントの色をモカシンに設定する	color = 'moccasin'
データフレームの中の列をn個に等間隔で分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列中の文字をn回だけ置換する	文字列.replace(部分文字列, 置換後の文字列, n)
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
２つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
複数の文字列を出力する	print(文字列, 文字列, 文字列)
データシリーズの欠損値を平均値で埋める	ds.fillna(ds.mean())
option: グラフの色をライムに設定する	color = 'lime'
リストとイテラブルについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
２つのセットが交わりを持たないかどうか	セット.isdisjoint(セット2)
プロットの背景色を暗くする	sns.set(style='darkgrid')
縦棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
指定した列のカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
線グラフをミディアムスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
文字列は文字列より辞書順で後かどうか調べる	文字列 > 文字列2
データフレームの指定したカラムを十の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
rgbに横棒プロットの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
データフレームの一部のカラムを1000の位で丸める	df[['列A', '列B']].round(-3)
option: グラフの色をピーチパフに指定する	color = 'peachpuff'
レモンシフォン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データシリーズは正規分布からどれだけ歪んでいるか見る	ds.kurt()
配列の要素数	aArray.size
データフレームを関数でグループ化し要約統計量を算出する	df.groupby(関数).describe()
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
インディゴにヒストグラムの色を変更する	plt.hist(データ列, color='indigo')
横棒プロットの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
データフレームの未入力値を最大値に増やす	df.fillna(df.max())
JSON形式でデータをファイル出力に保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
データフレームの未入力値を最大値で埋める	df.fillna(df.max())
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
二つのセットが共通の要素を持たない	セット.isdisjoint(セット2)
文字列を最後の部分文字列によって二分する	文字列.rpartition(部分文字列)
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
option: ダークグレーにフォントの色を設定する	color = 'darkgrey'
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
option: ダークゴールデンロッドにフォントの色を設定する	color = 'darkgoldenrod'
ファイル入力からJSON形式のデータを読む	json.load(ファイル入力)
整数が整数2以下かどうか調べる	整数 <= 整数2
切り捨てながら変数の値を半分にする	変数 //= 2
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
ランダムに重複を認めてn行をデータフレームからサンプリングする	df.sample(n, replace=True)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
実数を数で整数除算する	x // y
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
散布図にrgbの▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
スタッキングを用いてクラス分類を行う	sklearn.ensemble.StackingClassifier()
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
option: ポイント印を加える	marker = '.'
ある列のカテゴリごとの分散を求める	df.groupby('列A').var()
文字コードtextとしてファイルをオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
日付データからn秒分減算する	aDate - datetime.timedelta(seconds=n)
リストからサンプリングする	random.sample(リスト, 抽出したい個数)
option: 色をカーキにセットする	color = 'khaki'
option: グラフの色をグリーンにセットする	color = 'green'
方程式として数式のパラメータの解を計算する	sympy.solve(数式, 変数)
文字列リストを一つの文字列にする	''.join(文字列)
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
option: データ型として８ビット整数型を使用する	np.int8 = np.int<nl>dtype = np.int8
文字列をn回だけ置換する	文字列.replace(部分文字列, 置換後の文字列, n)
データフレームとして複数のシートを指定してエクセルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: 印をダイアモンドに変更する	marker = 'D'
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
簡単な説明の場所を(x,y)に設定する	plt.legend(loc=(x, y))
データフレームの指定したカラムの不偏標準偏差	df['列A'].std()
標準入力	sys.stdin
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: 符号なし８ビット整数型を用いる	np.uint8 = np.int<nl>dtype = np.uint8
option: グラフの色をアイボリーに設定する	color = 'ivory'
タプル内の要素が全て真か調べる	all(タプル)
文字を文字コードに変換する	ord(文字)
リストと配列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの最初10行を抽出する	df.head(10)
折れ線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
ヒストグラムの線種を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームのカラムを散布図でグラフ化してカテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームのSkewnessを求める	df.skew()
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
リストの要素数	len(リスト)
ミディアムアクアマリン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
整数の各桁の総和を算出する	sum(map(int, str(整数)))
入力から二つの自然数を読む	A, B = map(int, input().split())
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
デフォルトでグラフをいい感じに設定する	sns.set()
ロードされたモジュールの一覧を確認する	sys.modules
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームを関数によってまとめた表を使う	df.groupby(関数)
サドルブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
文字列中の文字をn回だけ置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
option: グリーンイエローにグラフの色を設定する	color = 'greenyellow'
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
タプルをn回、接続する	タプル * n
アンティークホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームから重複を残さず重複を削除する	df.drop_duplicates(keep=False)
逆行列	np.linalg.inv(aArray)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
文字列を最後のコロンで分けたときの後半の文字列	文字列.rpartition(':')[-1]
散布図を赤い大バツマーカーを使ってプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図をミディアムシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
nからn2までの整数列	list(range(n, n2+1))
各カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
数列間のケンドールの相関係数を算出する	scipy.stats.kendalltau(数列, 数列2)
小数点数のsin	math.sin(x)
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームをValueMapでまとめて置き換える	df.replace(ValueMap)
タイムスタンプデータが月曜日かどうか調べる	aDatetime.weekday() == 0
回帰分析をKNNとして行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
指定したカラムの値で集計し標準偏差を求める	df.groupby('列A').std()
直前の値でデータフレームの選択したカラムのNaNを置換する	df[['列A', '列B']].fillna(method='ffill')
セットが上位集合もしくは等しいかどうか調べる	セット >= セット2
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
数列の要素を	''.join(map(str, 数列))
青い実線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ヒストグラムをライトスカイブルー色を用いて描画する	plt.hist(データ列, color='lightskyblue')
データシリーズを百の位で丸める	ds.round(-2)
データシリーズの欠損値をそのメディアンで埋める	ds.fillna(ds.median())
option: ホワイト色を使う	color = 'white'
横棒グラフをゴールド色を使って描画する	plt.barh(データ列x, データ列y, color='gold')
線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの平均を求める	df.mean()
部分文字列によって文字列を二分する	文字列.partition(部分文字列)
折れ線グラフに四角印を加える	plt.plot(データ列x, データ列y, marker='s')
データフレームの列の名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
サポートベクトル分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列を最初のカンマで二分割して、前半を見る	文字列.partition(',')[0]
配列から重複なく、n個ランダムに選んでリスト化する	random.sample(配列, k=n)
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
青紫色としてヒストグラムを描画する	plt.hist(データ列, color='violet')
データフレームをグループ化し、ある列に対し分散を計算する	df.groupby('列A')['列B'].var()
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
折れ線グラフの右三角印を黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
'A'列の値がxに等しい行を抽出する	df[df['列A'] == x]
表データのあるカラムの秒	df['列A'].dt.second
最大値・最小値で整数乱数を計算する	random.randint(最小値, 最大値)
データフレームの尖度	df.skew()
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
赤いダイアモンドマーカーをイテラブルとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
スチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='steelblue')
整数を三乗する	x ** 3
最初のを除いたデータフレーム	df[df.columns[1:]]
カテゴリでグループ化してデータフレームの全カラムの相関をプロット化する	sns.pairplot(df, hue='カテゴリ列')
カンマ区切り形式にデータフレームを小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
データシリーズを百の位で四捨五入して整数型にする	ds.round(-2).astype(int)
データフレームの指定したカラムの中に文字列と文字列があるか調べる	df['列A'].isin([value, value2])
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
データフレームを関数の値でグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
カウンタの全出現回数	aCounter.total()
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
配列を等しい量になるように分割数nでビン分割する	pd.qcut(aArray, n)
n階微分を算出する	sympy.diff(数式, y, n)
option: 先頭の行をヘッダに変更する	header = 0
文字列を最後の部分文字列で分けたときの残りの文字列	文字列.rpartition(部分文字列)[-1]
クリムゾン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
xを文字列にしてファイルに書き込む	x = 0<nl>f.write(str(x))
赤いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
指定した列の値によってデータフレームをグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
整数の右シフトを算出する	整数 >> n
データフレームを千の位で丸めて、整数にする	df.round(-3).astype(int)
データフレームの選択したカラムの相関行列をケンドール相関係数で求める	df[['列A', '列B']].corr(method='kendall')
整数から整数を減算する	整数 - 整数2
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
option: ディムグレー色を使用する	color = 'dimgrey'
イテラブルから重複なくn個ランダムに選んでリストにする	random.sample(イテラブル, k=n)
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
リストの折れ線グラフをプロットして、色をRGBを用いて指定する	plt.plot(データ列x, データ列y, color='#800080')
文字列を最後の部分文字列で分けた時の後半の文字列	文字列.rpartition(部分文字列)[-1]
インデントを指定してデータをJSONにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
数式の変数の解を方程式として求める	sympy.solve(数式, [|変数]x)
リストをJSON形式を用いて出力ストリームに出力する	json.dump(リスト, ファイル出力, ensure_ascii=False)
双方向キュー	両端キュー = collections.deque()
指定したカラムの値を正規表現patternで一度にreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
CSVをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
文字列の右側から空白を除く	文字列.rstrip('\t')
option: レベッカパープルにグラフの色をセットする	color = 'rebeccapurple'
本日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
option: 色をペルーに変更する	color = 'peru'
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
カラム間の積立相関係数を算出する	scipy.stats.pearsonr(df['列A'], df['列B'])
セットからエラーなく整数を取り除く	セット.discard(数)
ライトゴールドロディイエロー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの指定した列の歪度	df['列A'].kurt()
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
option: 耐火レンガにグラフの色を設定する	color = 'firebrick'
グラフで使える色名の一覧を見る	matplotlib.colors.cnames
rgbの丸マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
リストと配列についての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
文字列の左側からタブを取り除く	文字列.lstrip('\t')
折れ線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
赤い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: アンティークホワイト色を使う	color = 'antiquewhite'
2つの列でデータフレームを降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
option: ゴールド色を使う	color = 'gold'
二つのデータフレームを横向きにマージする	pd.merge(df, df2)
マップ内の値をリストとして	list(辞書.values())
データフレームの中に含まれる日付データの数を数える	df.isin([value]).sum()
プロットの横軸の軸名を設定する	plt.xlabel('x軸ラベル')
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
option: グラフの色をライトスチールブルーにセットする	color = 'lightsteelblue'
データフレームのあるカラムは何時か知る	df['列A'].dt.hour
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
リストとリストについての散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
オブジェクトのバイト長	sys.getsizeof(オブジェクト)
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
option: ゴーストホワイトに色を指定する	color = 'ghostwhite'
線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
文字列の指定された位置より前に部分文字列が存在しないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
データフレームのインデックス名をまとめて変更する	df.rename(index={x: y})
データフレームの選択したカラムの代表値を求める	df[['列A', '列B']].describe()
各グループ列ごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
predicateFuncがTrueとなる列の部分を取り出す	itertools.takewhile(predicateFunc, iterable)
縦棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームを表示するとき、データフレームをn列まで表示できるようにする	pd.set_option('display.max_columns', n)
縦方向に３つのデータフレームを結合する	pd.concat([df, df2, df3], axis=0)
散布図をモカシン色を使って描画する	plt.scatter(データ列x, データ列y, color='moccasin')
黒い大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
色付きの点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームのあるカラムを千の位で丸める	df['列A'].round(-3)
数式の変数xに数値を代入する	数式.subs([|変数]x, 数値)
文字列のn番目をユニコードにする	ord(文字列[n])
折れ線グラフとして数列の推移を可視化する	plt.plot(range(len(データ列)), データ列)
標準入力の入力元がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
散布図にrgbの星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の四角印の色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームを行を付けず出力する	df.to_csv('file.csv', index=None)
変数名が関数か調べる	inspect.isfunction(識別子)
リストと配列について散布図をプロットして大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: フォントの色をデピンクに設定する	color = 'deeppink'
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
xを黄色で出力する	print(f'\033[33m{x}\033[0m')
大文字・小文字を無視して正規表現で文字列を分ける	re.split(pattern, s, flags=re.IGNORECASE)
データフレームの一部の列が正規分布からどれだけ尖っているか見る	df[['列A', '列B']].skew()
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
直前の値でデータシリーズの欠損値を埋める	ds.fillna(method='ffill')
最小値でデータフレームの選択したカラムの欠損値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
数列からn個ランダムに選んでリストにする	random.choices(数列, k=n)
日付時刻データが月曜日か	aDatetime.weekday() == 0
option: 色をピンクに設定する	color = 'pink'
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
両端キューの大きさ	len(両端キュー)
行列のデータ型を求める	aArray.dtype()
option: グリーンイエローにグラフの色を変更する	color = 'greenyellow'
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
星印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
パステル調にパレットをグラフの描画で使用する	sns.set(pallete='pastel')
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
文字列中にひとつでも非小文字が含まれるか	any(not c.islower() for c in 文字列)
二つの集合の積集合	セット.intersection(セット2)
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
option: 左三角マーカーを描画する	marker = '<'
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
文字列をカンマで区切って、文字列リストにする	文字列.split(',')
ゼロ埋めされた行列	np.zeros(要素数)
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
文字列の両端から指定した文字を除去する	文字列.strip(文字)
データフレームの選択した列の中の欠損値の数を数える	df[['列A', '列B']].isna().sum()
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
最後のカンマで文字列を二分する	文字列.rpartition(',')
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
セットに文字列を追加する	セット.add(文字列)
二つの整数の差をが欲しい	整数 - 整数2
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
データフレームの指定したカラムの未入力値を後の行の値に設定する	df['列A'].fillna(method='bfill')
格子をプロットに入れる	plt.grid(True)
辞書のエントリ数	len(辞書)
指定したカラムを小数点以下n桁で四捨五入する	n = 2<nl>df['列A'].round(n)
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
文字列をコロンで二分して、残りを使う	文字列.partition(':')[-1]
データ列を四分位数ごとに分割する	pd.qcut(ds, 4)
追加できるように既存のファイルパスを文字列の示すエンコーディングでオープンする]	open(filepath, mode='a', encoding=s)
データシリーズの秒を使う	ds.dt.second
散布図を赤い△マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
グラフの補足の位置を指定する	plt.legend(loc=(x, y))
を整数乗に増やす	変数 **= 整数
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
符号なし８ビット整数型の全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数, dtype=np.uint8)
データフレームの基本統計量	df.describe()
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームのカラムの最頻値を計算する	mode, count = scipy.stats.mode(df['列A'])
直後の値でデータフレームの選択したカラムのNaNを補う	df[['列A', '列B']].fillna(method='bfill')
英大文字から１文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
option: マーカーを四角に変更する	marker = 's'
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
横に並べて柱状図を描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ライトサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
数値の出力を改行なしに行う	print(数値, end='')
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
option: 改行をセパレータで使う	sep = '\n'
数列から重複なく、ランダムにn要素選んでリストにする	random.sample(数列, k=n)
ヒストグラムをペールグリーン色を用いて描画する	plt.hist(データ列, color='palegreen')
文字列を積極的に小文字にする	文字列.casefold()
異なる列をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
乱数生成系列をnで初期化する	random.seed(n)
両端キューの中に整数が含まれてるかどうか調べる	整数 in 両端キュー
折れ線グラフの丸マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
ファイルからフォルダ名を見る	os.path.dirname(filepath)
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
その最頻値でデータシリーズの未入力値を埋める	ds.fillna(ds.mode().iloc[0])
小数点数は無限大	math.isinf(x)
整数の4乗を計算する	整数 ** 4
指定した列のカテゴリで集計し、それぞれの平均値を求める	df.groupby('列A').mean()
プログラムの実行を異常終了する	sys.exit(1)
両端キューの先頭に配列の要素を追加する	両端キュー.extendleft(配列)
標準出力を使う	sys.stdout
ある列を10の位で丸める	df['列A'].round(-1)
横に並べてリストをヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
等しい量になるようにデータフレームの中の列を分割数nとして分割する	pd.qcut(df[col], n)
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
最大値・最小値として整数乱数を求める	random.randint(最小値, 最大値)
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
リストとリストについての散布図に上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データ列の折れ線グラフを四角印として描画する	plt.plot(データ列x, データ列y, marker='s')
散布図に黒い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: ローングリーン色を使用する	color = 'lawngreen'
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
折れ線グラフの色をフローラルホワイトにする	plt.plot(データ列x, データ列y, color='floralwhite')
乱数で要素を埋めた行列	np.random.random(N)
文字列の後半から部分文字列の位置を探す	文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
配列のスカラー倍	aArray * n
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
長さnのリストを作る	[0] * n
昇順にリストの値を並べる	sorted(リスト, reverse=False)
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: ブラックを使う	color = 'black'
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
整数を両端キューにエンキューする	両端キュー.append(整数)
散布図のバツ印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
option: カーキを使う	color = 'khaki'
アクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
データシリーズの秒	ds.dt.second
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
平均と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
データシリーズの第一四分位数	ds.quantile(0.25)
最後のカラムを除いたデータフレームを見る	df[df.columns[:-1]]
BOMを付けてデータフレームを保存する	df.to_csv('file.csv', encoding='utf_8_sig')
ロイヤルブルー色でヒストグラムを描画する	plt.hist(データ列, color='royalblue')
データフレームから重複したデータを残さず除く	df.drop_duplicates(keep=False)
オブジェクトはリストクラスか判定する	list = int<nl>isinstance(obj, list)
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
xを緑色化する	f'\033[32m{x}\033[0m'
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
入力ストリーム全体を行単位で分割して読み込む	f.readlines()
行列を横ベクトルに変形する	aArray.reshape(1, -1)
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
指定したカラムを万の位で丸める	df['列A'].round(-4)
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
文字列の大文字小文字を交換する	文字列.swapcase()
option: グラフの色を青緑に設定する	color = 'teal'
データフレームの数値を一度に小数点以下n桁で四捨五入する	df.round(n)
データフレームから重複を残さず重複をドロップする	df.drop_duplicates(keep=False)
option: グラフの色をハニーデューに設定する	color = 'honeydew'
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
散布図のマーカーを上三角印にする	plt.scatter(データ列x, データ列y, marker='^')
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
日付時刻データは日付時刻データと同時	aDatetime == aDatetime2
ある列の文字列に部分文字列が存在する行を選ぶ	df[df['列A'].str.contains(部分文字列)]
コロンで文字列を二分し、、残りを使う	文字列.partition(':')[-1]
イテラブルから新しいカウンタを用意する	collections.Counter(iterable)
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
整数同士の排他的論理和	整数 ^ 整数2
データシリーズにおいてどの値が頻出か見る	ds.mode()
CSVファイルのn行目を行として読む	pd.read_csv('file.csv', index_col=n)
option: 右三角マーカーを使う	marker = '>'
要素をキューの末尾から取り出す	両端キュー.pop()
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
データフレームのカラムを整数に丸める	df['列A'].round()
全要素が1の行列を作る	np.ones(行数, 列数, dtype=np.int)
配列をセットに変換する	set(配列)
配列とリストについての散布図に文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
マップを浅くコピーする	dict(辞書)
紺碧色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
キュー中の要素のインデックス	両端キュー.index(要素)
SDGでクラス分類をする	model = sklearn.linear_model.SGDClassifier()
標準出力のバッファを即時表示する	sys.stdout.flush()
データフレームのある列の欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームのあるカラムのNaNを直前の値に設定する	df['列A'].fillna(method='ffill')
タプルを引数として展開してプリントする	print(*タプル, sep=',')
本日のタイムスタンプ	datetime.datetime.today()
ある列のカテゴリの個数	df.groupby('列A').count()
option: 深紅を使う	color = 'crimson'
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
リストを累加する	itertools.accumulate(iterable)
線グラフの色をスチールブルーにセットする	plt.plot(データ列x, データ列y, color='steelblue')
エクセルファイルからCSVファイルを文字化けしないように読む	pd.read_csv('file.csv', encoding='shift_jis')
実数の整数部	math.modf(x)[1]
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
データフレームを表示するとき、列数の最大値をnに増やす	pd.set_option('display.max_columns', n)
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データフレームをグループ化し、各標準偏差を求める	df.groupby('列A').std()
グラフに水平方向の実線をつける	plt.axhline(y=0, linestyle='solid')
プロットをスライド用に指定する	sns.set(context='talk')
指定したカラムを百の位で丸める	df['列A'].round(-2)
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
データ列の推移を青い破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
浮動小数点数の小数部	math.modf(x)[0]
文字列を末尾から部分文字列で区切る	文字列.rsplit(部分文字列)
散布図をクリムゾン色を使って描画する	plt.scatter(データ列x, データ列y, color='crimson')
データシリーズの中に存在する文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
配列間の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
1からnまでの整数リスト	list(range(1, n+1))
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームのn行目をドロップする	df.drop(n, axis=0, inplace=True)
文字列中にひとつも空白が含まれないかどうか確認する	any(not c.isspace() for c in 文字列)
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
正規分布にしたがってランダムに配列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
カテゴリ列でグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
パレットトルコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
オレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
ゼロ埋めされた行列を作成する	np.zeros(要素数)
散布図の三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをミディアムオーキッド色として描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ファイルに文字列を書く	s = ''<nl>f.write(s)
タンジェントを求める	math.tan(x)
指定したカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
散布図の左三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
数値でデータフレームの欠損値を置き換える	df.fillna(x)
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
部分文字列を文字列の開始位置から終了位置まで探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
option: グラフの線幅を3.0ポイントに指定する	linewidth = 3.0
文字列が文字列より辞書順で後かどうか調べる	文字列 > 文字列2
データフレームのn行以降抽出する	df[n:]
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
整数が整数2以下か調べる	整数 <= 整数2
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ヒストグラムを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
文字列を部分文字列で分割して、文字列リストに変換する	文字列.split(部分文字列)
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='turquoise')
折れ線グラフの色をコーラルに変更する	plt.plot(データ列x, データ列y, color='coral')
リストと配列について散布図を描いて、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
数列から長さの制限された両端キューを生成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
リストを	''.join(map(str, リスト))
線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームのカラム名の一覧を見る	df.columns
リストを縦軸、配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
文字列がセットのいずれでもないどうか	文字列 not in セット
option: コーンズシルクを使う	color = 'cornsilk'
数で数を除算して、小数点以下を切り捨てる	x // y
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
option: 印を丸に変更する	marker = 'o'
データフレームを表示するとき表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
多次元データをt分布型確率的近傍埋め込み法として要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
配列とリストについて散布図を描画してマーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
最大値を使ってデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
option: 色を濃いシアンに指定する	color = 'darkcyan'
８進数字を全て使う	string.octdigits
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
全十六進数字	string.hexdigits
キーワード引数で辞書に追加する	辞書.update(**kwargs)
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
現在が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
配列と数列の散布図に黒い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ライトスレイグレーを使用する	color = 'lightslategray'
バツマーカーを使用してデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
横棒プロットを描画し、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
黒いポイントマーカーを配列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
タプルを階層化する	collections.ChainMap(aDict)
範囲指定してデータフレームの行を取り出す	df[start:end]
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
散布図を黒いダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
オブジェクトをイテラブルにする	iter(obj)
折れ線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
文字列からタブを除く	文字列.replace('\t', '')
複数の列で降順にデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=False)
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
リストとリストについての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
オブジェクトがいつまでも繰り返す列を得る	itertools.repeat(element)
散布図を淡いピンク色色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightpink')
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
プロットのx座標のラベルを設定する	plt.xlabel('x軸ラベル')
文字が漢字	('\u4E00' <= 文字 <= '\u9FD0')
ふたつの列からグループ化し、分散を算出する	df.groupby(['列A', '列B'], as_index=False).var()
ブルーバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: カデットブルーに色を設定する	color = 'cadetblue'
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
ローングリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
折れ線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
データフレームを表示するとき、小数点以下の表示精度をn桁に減らす	pd.set_option('precision', n)
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
データフレームから100行サンプリングする	df.sample(100)
ピアソンの積立相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
option: どの行もヘッダにしない	header = None
線形モデルの回帰変数	model.coef_
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
数を実数で割って、小数点以下を切り捨てる	x // y
ヒストグラムの色をダークグレーにする	plt.hist(データ列, color='darkgrey')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
２つのリストから辞書	dict(zip(リスト, リスト2))
何回まで再帰ができるか、	sys.getrecursionlimit()
文字列はセットのメンバーかどうか調べる	文字列 in セット
リストをビン数nを用いて等量でビニングする	pd.qcut(aList, n)
カテゴリ列でグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
散布図の下三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
リストの値を逆順にする	リスト[::-1]
黒いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
赤い菱形マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
オブジェクトの参照カウント	sys.getrefcount(オブジェクト)
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
計算結果の出力を改行しないで行う	print(式, end='')
2つのデータフレームを連結する	# concat<nl>pd.concat([df, df2])
option: オレンジ色を用いる	color = 'orange'
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
option: ドジャーブルー色を使う	color = 'dodgerblue'
色付きの点線で数列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
八進数文字列を整数に変換する	int(文字列, 8)
yが0に近づく場合の数式の極限値を計算する	sympy.limit(数式, y, 0)
折れ線グラフの菱形マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データフレームをある列をキーにして昇順に並べる	df.sort_values(by='列A', ascending=True)
モジュールの検索パスにディレクトリを追加する	sys.path.append(ディレクトリ名)
勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
option: ドジャーブルーに色を変更する	color = 'dodgerblue'
文字列中にひとつもアルファベットが含まれない	any(not c.isalpha() for c in 文字列)
ランダムに10行を表データから重複ありでサンプリングする	df.sample(10, replace=True)
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
整数を複素数に変換する	complex(x)
option: 改行コードを動作環境依存にする	newline = None
散布図をrgbの下三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストの折れ線プロットを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ライムグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
データ列のユニークな値の個数	ds.nunique()
リストから複数個、ランダムに選ぶ	random.choices(リスト, k=n)
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
イテラブルの散布図を描画する	plt.scatter(データ列x, データ列y)
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
2つの計算結果を順に表示する	print(式, 式)
データフレームの列を千の位で丸める	df['列A'].round(-3)
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: スノーにグラフの色をセットする	color = 'snow'
カウンタのユニークな項目を列挙する	list(aCounter)
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
文字列のn番目の文字	文字列[n]
折れ線グラフの丸印の大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
日付時刻データの曜日を整数で求める	aDatetime.weekday()
縦棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
リストを組に変換する	tuple(リスト)
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの先頭のカラム以外を説明変数にする	説明変数 = df[df.columns[1:]]
直後の値でデータシリーズの欠損値を埋める	ds.fillna(method='bfill')
データフレームの選択した列のNaNをそのメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
option: フォントの色をシアンにセットする	color = 'cyan'
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
データフレームの指定したカラムの文字列をNaNにする	df['列A'].replace(値, np.nan)
パターンに文字列全体を複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データシリーズが何時か調べる	ds.dt.hour
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
二つの集合のいずれか一方だけの集合	セット.symmetric_difference(セット2)
目盛線	plt.grid(alpha=0.5)
グラフをポスター用に設定する	sns.set(context='poster')
データフレームをある列の値によってグループ分けする	df.groupby('列A')
最適な位置に簡単な説明を表示する	plt.legend(loc='best')
データフレームの選択した列の第二四分位数	df[['列A', '列B']].median()
クラス分類をKNNで行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
小数点数のハイパボリック・タンジェントの逆数	math.atanh(x)
データシリーズのNaNを平均値に設定する	ds.fillna(ds.mean())
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
文字列はセットのいずれ	文字列 in セット
日付時刻データのタイムゾーン	aDatetime.timetz()
後の行の値でデータシリーズの欠損値を埋める	ds.fillna(method='bfill')
シーケンスから行列を作成する	np.array(iterable)
パープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
データシリーズの月を使う	ds.dt.month
黒い左三角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ふたつの列からグループ化し、標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
ファイルを閉じる	f.close()
SJISを使ってファイルを開く]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
option: コーンズシルク色を用いる	color = 'cornsilk'
文字列全体がパターンにマッチするか調べる	re.fullmatch(pattern, s)
ライトグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
パターンを事前にコンパイルする	re.compile(pattern)
正規分布によるパーセント・ポイント関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
2つのオブジェクトは同一参照	obj is obj2
列名を指定して２つのデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
サポートベクター回帰モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
２つのカウンタのいずれかに含まれる要素を求める	aCounter | aCounter2
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの一部のカラムがどの程度、分散しているか見る	df[['列A', '列B']].var()
三つの数値をプリントする	print(数値, 数値, 数値)
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
文字列を右トリムする	文字列.rstrip()
数式のxに数値を代入する	数式.subs([|変数]x, 数値)
小文字を全部使う	string.ascii_lowercase
文字列を最後のセパレータで二分して、残りを使う	文字列.rpartition(セパレータ)[-1]
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
指定した列の値で集計し、最大値を求める	df.groupby('列A').max()
データフレームの選択した列を万の位で丸める	df[['列A', '列B']].round(-4)
折れ線グラフの色をロージーブラウンに変更する	plt.plot(データ列x, データ列y, color='rosybrown')
リストを中央値でビニングする	pd.qcut(aList, 2)
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
ファイルをバイナリ書き込みモードとしてオープンして]fとする	f = open(filepath, mode='wb')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
横棒グラフをコーラル色を使って描画する	plt.barh(データ列x, データ列y, color='coral')
数列から長さの制限された両端キューを用意する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
ユニコードに対応する文字	chr(文字コード)
赤いポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームの形状を確認する	df.shape
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
マップからエラーなくキーの値を得る	辞書.get(キー, 見つからない場合の値)
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
二つの表を列名を指定して外部結合する	pd.merge(df, df2, on='列A', how='outer')
実数を小数点以下第一位で丸める	round(x, 1)
リストから複数個ランダムに選んでリスト化する	random.choices(リスト, k=n)
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
浮動小数点数の三乗を求める	x ** 3
空白で文字列を最後から区切る	文字列.rsplit()
ケンドール順位相関係数を用いてデータフレームの相関行列を計算する	df.corr(method='kendall')
ファイルパスをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
タイムスタンプデータにn分分、足す	aDatetime + datetime.timedelta(minutes=n)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの一部のカラムを千の位で丸める	df[['列A', '列B']].round(-3)
イテラブルをイミュータブルなセットに変換する	frozenset(イテラブル)
本日の日付	datetime.date.today()
データフレームの一部のカラムの中に存在する文字列と日付データの数をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
分類モデルのリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームをあるカラムの値によってグループ化し要約統計量を求める	df.groupby('列A').describe()
折れ線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフをピーチパフ色を使って描画する	plt.bar(データ列x, データ列y, color='peachpuff')
要素はタプルに含まれるかどうか	要素 in タプル
折れ線グラフで数列の推移を作図する	plt.plot(range(len(データ列)), データ列)
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
ヒストグラムの色をモカシンに指定する	plt.hist(データ列, color='moccasin')
リストを縦軸、リストをx軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
整数が3の倍数かどうか調べる	整数 % 3 == 0
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのどの値が頻出か見る	df.mode()
正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
リストとリストについての散布図にrgbの三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
リストの全ての要素をクリアにする	リスト.clear()
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
文字列の中でASCII限定としてパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
ヒストグラムの上限下限を設定する	plt.hist(データ列, range=(start, end))
ランダムに10行をデータフレームから取り出す	df.sample(10)
半透明の点線で配列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ファイルからファイル名を取り出す	os.path.basename(filepath)
二つの表をジョインする	pd.merge(df, df2)
yが無限大に近づくときの極限値を求める	sympy.limit(数式, y, oo)
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
画像ファイルとしてプロットを保存する	plt.savefig('foo.png')
折れ線グラフのラインスタイルを点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
カウンタをシーケンスで更新する	aCounter.update(iterable)
サイコロと同じ乱数を得る	random.randint(1, 6)
option: ラベンダーを用いる	color = 'lavender'
アルファベットからランダムに一つ選ぶ	random.choice(string.ascii_uppercase)
本日の曜日を整数で求める	datetime.datetime.today().weekday()
文字列はタイトルケースか調べる	文字列.istitle()
ダークブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
文字列中から部分文字列を探す	文字列.find(部分文字列)
折れ線グラフの透明度を指定する	plt.plot(データ列x, データ列y, alpha=0.5)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
グラフをスライドに設定する	sns.set(context='talk')
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームをある列を用いて降順に並べ直す	df.sort_values(by='列A', ascending=False)
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
option: フクシアにフォントの色を設定する	color = 'fuchsia'
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
緑色でxをプリントする	print(f'\033[32m{x}\033[0m')
日付時刻データとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームの選択した列の欠損値を前の行の値に設定する	df[['列A', '列B']].fillna(method='ffill')
散布図の大バツ印を青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
切り捨てながらを半分にする	変数 //= 2
非数値データ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームの末尾n行を抽出する	df.tail(n)
データフレームの選択したカラムの文字列を未入力値にする	df[['列A', '列B']].replace(値, np.nan)
エクセルファイルから複数のシートをロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ヒストグラムをパープル色を用いて描画する	plt.hist(データ列, color='purple')
xをシンボルにする	x = sympy.Symbol('x')
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
xとyをプリントする	print(x, y)
一度にValueMapでデータシリーズを置き換える	ds.replace(ValueMap)
パステル調にカラーパレットをプロットの描画で使う	sns.set(pallete='pastel')
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
識別子がコードかどうか調べる	inspect.iscode(識別子)
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
option: フォントの色をゲインズボロに変更する	color = 'gainsboro'
ファイルパスからストリームを読み込みfileとする	file = open(filepath)
インデントを指定してリストをJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
スカイブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
文字列の右側から部分文字列を除去する	文字列.rstrip(部分文字列)
option: 標準エラーを使用する	file = sys.stderr
グラフの色をパステル調にする	sns.set(pallete='pastel')
リストが空でないか調べる	len(リスト) != 0
ダークグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
option: グラフの色をスラグレーに変更する	color = 'slategray'
オレンジレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
option: マーカーの色をダークブルーにする	markerfacecolor = 'darkblue'
赤い三角マーカーを配列とイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
メディアンでデータフレームのカラムのNaNを置き換える	df['列A'].fillna(df['列A'].median())
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
データフレームのある列を配列として選択する	df['列A'].values
線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
option: オーキッド色を使う	color = 'orchid'
xについて数式のインテグラルを計算する	sympy.integrate(数式, [|変数]x)
明るく色をプロットの描画で用いる	sns.set(pallete='bright')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
全ての８進数字	string.octdigits
オブジェクトが集合クラス	set = int<nl>isinstance(obj, set)
option: 列名をリストで設定する	names = 列名リスト
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
色付きの一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: ペールグリーンを使用する	color = 'palegreen'
ファイルのフォルダ名	os.path.dirname(filepath)
option: 左三角マーカーを使う	marker = '<'
折れ線グラフをモカシン色を使って描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: グレーを使用する	color = 'grey'
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
option: ダークシアグリーンを使う	color = 'darkseagreen'
折れ線グラフの三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
黒い左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの列を指定して重複を除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
文字列を最後の部分文字列で分けた時の後半の文字列を使う	文字列.rpartition(部分文字列)[-1]
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
縦棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
縦棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
データフレームをある列によって昇順に破壊的に並べ直す	df.sort_values(by='列A', ascending=True, inplace=True)
option: マーカーを三角に指定する	marker = '^'
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
大文字が文字列中に含まれないか調べる	any(not c.isupper() for c in 文字列)
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
option: プラムにフォントの色を変更する	color = 'plum'
option: グラフの色を紺碧に設定する	color = 'azure'
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ある列にリストの値が含まれる行を選ぶ	df[df['列A'].isin(リスト)]
散布図のダイアモンド印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
配列の歪度を求める	scipy.stats.skew(配列, bias=False)
日付時刻データをエポック秒にする	aDatetime.timestamp()
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
データフレームの選択したカラムの中に日付データと文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
指定したカラムの母標準偏差	df['列A'].std(ddof=0)
option: 上三角印を描画する	marker = '^'
データシリーズの分	ds.dt.minute
破線に折れ線グラフの線の種類を指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
文字列がいつまでも続くイテラブルを得る	itertools.repeat(element)
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
実数が負の数か調べる	x < 0
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
カウンタの最頻出な項目	aCounter.most_common()[0]
二つの表データを縦方向に結合する	pd.concat([df, df2], axis=0)
文字列を全て小文字にする	文字列.casefold()
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
ピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
小数点数の双曲線正接の逆数	math.atanh(x)
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
あるカラムの要約統計量を求める	df['列A'].describe()
実数の絶対値	math.fabs(x)
データフレームの先頭100行	df.head(100)
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='grey')
識別子が関数か調べる	inspect.isfunction(識別子)
線グラフの色をダークバイオレットに指定する	plt.plot(データ列x, データ列y, color='darkviolet')
ハニーデュー色としてヒストグラムを描画する	plt.hist(データ列, color='honeydew')
折れ線グラフの四角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: ダークマゼンタ色を使う	color = 'darkmagenta'
イテラブルの要素を両端キューの末尾に追加する	両端キュー.extend(イテラブル)
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
小麦色色としてヒストグラムを描画する	plt.hist(データ列, color='wheat')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
イテラブルをカウンタにする	collections.Counter(iterable)
バイナリモードとしてファイルをオープンして]fとする	f = open(filepath, mode='rb')
データフレームをソートして、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
バギングを用いて回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
散布図を丸マーカーで描画する	plt.scatter(データ列x, データ列y, marker='o')
option: マルーン色を使う	color = 'maroon'
文字列を両端キューのn番目に追加する	両端キュー.insert(n, 文字列)
1文字標準入力から読み込む	sys.stdin.read(1)
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
データフレームをCSV形式で書き出す	df.to_csv('file.tsv', sep='\t')
整数の三分の一を計算する	整数 / 3
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
大文字を全部使う	string.ascii_uppercase
実行を正常終了する	sys.exit(0)
小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
線グラフの色をレベッカパープルに指定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: イエローグリーン色を使う	color = 'yellowgreen'
option: ライトゴールドロディイエローに色を変更する	color = 'lightgoldenrodyellow'
改行なしに２つの文字列を表示する	print(文字列, 文字列, end='')
閾値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
双方向キューの末尾に数列の各要素を追加する	両端キュー.extend(数列)
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='grey')
データシリーズを10の位で丸める	ds.round(-1)
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
option: グラフの色をスノーに指定する	color = 'snow'
縦棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
縦棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: アクアにグラフの色をセットする	color = 'aqua'
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
配列から双方向キューを作る	collections.deque(配列)
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
現在の日付	datetime.date.today()
文字列をJSONフォーマットでファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
10行をデータフレームからランダムに選択する	df.sample(10)
整数が1、もしくは2、もしくは3に等しい	整数 == 1 or 整数 == 2 or 整数 == 3
日付データの曜日を整数で見る	aDate.weekday()
CSVを読み込む	pd.read_csv('file.csv', sep=',')
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
横棒グラフをダークシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
散布図をプラム色を用いて描画する	plt.scatter(データ列x, データ列y, color='plum')
星印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
指定したカラムの値を正規表現patternで全部replに置換する	df['列A'].replace(pattern, repl, regex=True)
行列の平均	np.mean(aArray)
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
紺碧色として散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
yが無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, y, oo)
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
変数がマイナス無限大に近づくときの数式の極限値を算出する	sympy.limit(数式, 変数, -oo)
白色でプリントできる文字列にする	f'\033[37m{x}\033[0m'
データフレームの一部のカラムの分散	df[['列A', '列B']].var()
最適な位置に補足を表示する	plt.legend(loc='best')
リストの各値を関数に適用した結果で並べ直す	sorted(リスト, key=func)
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
識別子はメソッドかどうか	inspect.ismethod(識別子)
データフレームのあるカラムを10の位で丸めて整数型にする	df['列A'].round(-1).astype(int)
散布図に黒いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
数列を変更不能なに変換する	frozenset(数列)
棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
rgbの四角マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
ライトスレイグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightslategrey')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
識別子がトレースバックか確認する	inspect.istraceback(識別子)
option: 下三角マーカーを描画する	marker = 'v'
option: グラフの色をビスクに変更する	color = 'bisque'
option: グラフの色をホットピンクにセットする	color = 'hotpink'
散布図の印の線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームの選択した列を丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
最初のカテゴリーを除き、データフレームのある列をワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], drop_first=True)
option: オールドレースにグラフの色を設定する	color = 'oldlace'
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
1行だけカラムを除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
横棒グラフをオーキッド色として描画する	plt.barh(データ列x, データ列y, color='orchid')
オブジェクトはリスト型のインスタンス	list = int<nl>isinstance(obj, list)
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
x座標の目盛の値を変更する	plt.xticks(目盛りの値リスト)
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの印を左三角にする	plt.plot(データ列x, データ列y, marker='<')
option: グリーンを使用する	color = 'green'
オブジェクトは辞書クラスか調べる	dict = int<nl>isinstance(obj, dict)
アクア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
オブジェクトのメモリビューを求める	memoryview(obj)
行列の逆行列を求める	np.linalg.inv(aArray)
数列から1個ランダムに選んでリストにする	random.choice(数列)
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ヒストグラムをプラム色を用いて描画する	plt.hist(データ列, color='plum')
実数の逆双曲線正接を算出する	math.atanh(x)
option: グラフの色をインディゴに設定する	color = 'indigo'
コーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
データフレームの指定した列の欠損値をモードに指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフをコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='coral')
小数点数のk進対数	math.log(x, k)
x座標だけグリッド線	plt.grid(axis='x')
カラムのUNIX時間をPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
ヒストグラムの色をパパイヤウィップに指定する	plt.hist(データ列, color='papayawhip')
option: マーカーを右三角に変更する	marker = '>'
二次元リストをフラット化する	sum(リスト)
ヒストグラムを濃いシアン色を使って描画する	plt.hist(データ列, color='darkcyan')
横棒グラフをオレンジレッド色として描画する	plt.barh(データ列x, データ列y, color='orangered')
オブジェクトがクラス	inspect.isclass(オブジェクト)
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
オブジェクトは論理値型か調べる	bool = int<nl>isinstance(obj, bool)
日付データと日付データの時間差	aDate - aDate2
浮動小数点数の分数近似	q.limit_denominator(max_denominator=1000000)
ヒストグラムの色をミディアムオーキッドにセットする	plt.hist(データ列, color='mediumorchid')
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
配列とデータ列について散布図を描画してマーカーを▲に変更する	plt.plot(データ列x, データ列y, marker='^')
文字列が全てアルファベットか調べる	文字列.isalpha()
リストをひとつの文字列にする	''.join(map(str, リスト))
あるカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
散布図の丸印を黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
ファイルパスを開いて]、読み込みストリームを使う	'r' = 'a'<nl>open(filepath, mode='r')
ターコイズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
青色でxをプリントする	print(f'\033[34m{x}\033[0m')
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
整数に整数を加える	整数 + 整数2
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
文字列中に数字がない	any(not c.isdigit() for c in 文字列)
文字列が指定した文字列で終わるか	文字列.endswith(部分文字列)
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
option: グラフの色をスノーに設定する	color = 'snow'
コマンド引数のリスト	sys.argv
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
option: オレンジ色を使用する	color = 'orange'
データフレームのある列をインデックスに指定する	df.set_index('列A')
データフレームのカラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
点線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dotted')
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
文字列の左側から部分文字列を除去する	文字列.lstrip(部分文字列)
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
青紫色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
option: グリーンイエロー色を使う	color = 'greenyellow'
ペールグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
ライトサーモン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームを二つの列で集約して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
横棒グラフをマゼンタ色を使って描画する	plt.barh(データ列x, データ列y, color='magenta')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
長さの制限された両端キューを配列から作る	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
文字列を最後のセパレータで二分して、最初の方を使う	文字列.rpartition(セパレータ)[0]
色付きの破線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
イテラブルの推移を折れ線プロットで作図する	plt.plot(range(len(データ列)), データ列)
ファイルを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
正規分布にしたがって配列をランダムに生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
ふたつの列を組み合わせてグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
折れ線グラフをマゼンタ色を使って描画する	plt.plot(データ列x, データ列y, color='magenta')
ベクトルをベースにして全要素が0の配列	np.zeros_like(aArray)
n進文字列をバイト列にする	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
データフレームをグループ化し、ある列に対し最大値を算出する	df.groupby('列A')['列B'].max()
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ティール色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
文字列がリストに存在しない	文字列 not in リスト
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
整数の八乗を求める	整数 ** 8
散布図の印を黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
セットにイテラブルを追加更新する	セット.update(リスト)
option: グラフの色をカーキに設定する	color = 'khaki'
訓練データで回帰モデルを学習する	model.fit(説明変数, 目的変数)
散布図の上三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
改行を求める	'\n'
辞書からカウンタを新規生成する	collections.Counter(aDict)
棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
散布図を黒い丸マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
折れ線グラフをドジャーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: 表示を半透明にする	alpha = 0.5
現在が月曜日か	datetime.datetime.today().weekday() == 0
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
小さい順にタプルの要素をソートする	sorted(タプル, reverse=True)
テンプレートを辞書で文字列整形する	書式.format_map(辞書)
折れ線グラフの印を星にする	plt.plot(データ列x, データ列y, marker='*')
散布図をダークオリーブグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
折れ線グラフで配列を描画する	plt.plot(データ列x, データ列y)
option: 色をダークマゼンタに設定する	color = 'darkmagenta'
改行しなくて文字列をプリントする	print(文字列, end='')
配列のトリム分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
subで部分文字列が始まるか調べる	文字列.startswith(部分文字列)
predicateFuncを適用したときTrueになるイテラブルの要素を消す	itertools.dropwhile(predicateFunc, iterable)
を切り捨てながら半分にする	変数 //= 2
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
オブジェクトがメソッドかどうか	inspect.ismethod(オブジェクト)
データフレームの列を型にする	df[col] = df[col].astype(ty)
両端キューをタプルに変換する	tuple(両端キュー)
データフレームの内である列に重複があれば、消す	df.drop_duplicates(subset='列A', inplace=True)
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
リストの中の一番大きい値	max(リスト)
option: プラムを使う	color = 'plum'
データシリーズの統計量	ds.describe()
円プロットでデータ列の比率を可視化する	plt.pie(データ列, startangle=90)
ホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
度数分布図を上限から下限までの範囲で描く	plt.hist(データ列, range=(start, end))
データフレームはどれだけ、分散しているか確認する	df.var()
散布図のマーカーの大きさをnにセットする	plt.scatter(データ列x, データ列y, s=n)
▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
サポートベクター分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
要素がタプルの要素か調べる	要素 in タプル
二つの最も小さい値	min(x, y)
ホワイト色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
スタックの末尾に整数をつけ加える	両端キュー.append(整数)
折れ線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームのstart行目からend行目まで取り出す	df[start:end]
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
deqのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
耐火レンガ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
xとyの商と余りを同時に求める	divmod(x, y)
データフレームのn行目を除いてみる	df.drop(n, axis=0)
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
イテラブルをダミー変数にする	pd.get_dummies(イテラブル)
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
異なる列をキーとして２つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
行列の行ごとの平均値	np.mean(aArray, axis=1)
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
数式を変数について微分する	sympy.diff(数式, 変数)
数列とリストの散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
半透明の点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの列を折れ線グラフを用いて可視化する	plt.plot(df[column], df[column])
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
option: ライトサーモンを使う	color = 'lightsalmon'
部分集合か	セット.issubset(セット2)
カラーパレットを濃くする	sns.set(pallete='deep')
エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
既存の配列を元に全要素が初期値のベクトル	np.full_like(aArray, 初期値)
ベクトルから重複を除いた配列を作る	np.unique(aArray)
棒グラフをダークターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
縦棒グラフをマルーン色を使って描画する	plt.bar(データ列x, データ列y, color='maroon')
辞書として文字列を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
option: ディープスカイブルーを使う	color = 'deepskyblue'
データ列をビン分割する	pd.cut(ds, aList)
全要素を０で初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
ヒストグラムの色をインディゴにする	plt.hist(データ列, color='indigo')
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
ディープスカイブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームを表示するときヘッダー行を左寄せに増やす	pd.set_option('colheader_justify', 'left')
線グラフの色をミディアムシアグリーンにセットする	plt.plot(データ列x, データ列y, color='mediumseagreen')
bとn2から成るペア	(n, n2)
データシリーズが何分か知る	ds.dt.minute
淡くカラーパレットをグラフの描画で用いる	sns.set(pallete='muted')
カラムの調和平均を算出する	scipy.stats.hmean(df['列A'])
辞書をJSON形式として指定したファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
折れ線グラフの色をインディアンレッドにセットする	plt.plot(データ列x, データ列y, color='indianred')
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
文字列をアスキーコードのリストに変換する	[ord(ch) for ch in 文字列]
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
空のロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図の三角印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
数式の変数xを指定した数式で置き換える	数式.subs([|変数]x, 数式2)
データフレームが重複しているか	df.duplicated()
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
x軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
データフレームをグループ化し、個数を算出する	df.groupby('列A').count()
データフレームから１つの列のみ抽出する	df[['列A']]
数列をイミュータブルなセットに変換する	frozenset(数列)
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
数列と数列についての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図をマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='magenta')
数列から重複を取り除く	set(数列)
ある列の文字列が部分文字列で終わらないデータを選択する	df[~ df['列A'].str.endswith(部分文字列)]
全要素を1で初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
xについて数式を微分する	sympy.diff(数式, [|変数]x)
option: ライトゴールドロディイエロー色を使用する	color = 'lightgoldenrodyellow'
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
n個に等しい量になるように配列をビニングする	pd.qcut(aArray, n)
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
オブジェクトがあるクラスか	isinstance(obj, クラス)
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
二つの集合に共通する要素からなる集合を求める	セット.intersection(セット2)
option: ペールグリーン色を用いる	color = 'palegreen'
線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
散布図を赤い三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
配列と数列の散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
８進数字を使う	string.octdigits
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
配列と数列についての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
option: グラフの色をダーク・スラテグレーに指定する	color = 'darkslategrey'
散布図の▼マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
CSVをカラム名なしで読む	pd.read_csv('file.csv', header=None)
バイナリ対数を算出する	math.log2(x)
オブジェクトはビルトインか	inspect.isbuiltin(オブジェクト)
二進数文字列をバイト列に変換する	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
要素がリストに含まれない	要素 not in リスト
option: オリーブ色を用いる	color = 'olive'
データシリーズの中にいくつ文字列が存在するか数える	ds.isin([value]).sum()
例外のメッセージ	etype, evalue, traceback = sys.exc_info()
option: 色をデピンクに設定する	color = 'deeppink'
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
グラフにグリッド線を付ける	plt.grid(True)
多次元データをMSDで整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
リストとデータ列についての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
グラフをスライド用にセットする	sns.set(context='talk')
数列からn要素、サンプリングしてリスト化する	random.sample(数列, k=n)
オブジェクトをイテレータにする	iter(obj)
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
数値の符号を同じにする	math.copysign(x, x2)
実数が整数か調べる	x.is_integer()
パレットトルコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
rgbの▼マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
句読点文字を全部見る	string.punctuation
option: ナバホホワイトに色を指定する	color = 'navajowhite'
文字が指定した文字列に存在するか	文字 in 文字列
データフレームの欠損値を直後の値に指定する	df.fillna(method='bfill')
option: グラフの色をクリムゾンに設定する	color = 'crimson'
スレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
カテゴリで色分けして、データフレームをに箱ひげ図として見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの指定したデータ型のカラム名を列挙する	df.select_dtypes(型).columns
正規分布によるパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームのn行より前抽出する	df[:n]
散布図のマーカーを下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
表データのあるカラムは何秒か見る	df['列A'].dt.second
option: ゴーストホワイトを使う	color = 'ghostwhite'
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
文字列の左側から指定した文字を除く	文字列.lstrip(文字)
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: 三二ビット整数型を用いる	np.int16 = np.int<nl>dtype = np.int16
辞書をコピーする	辞書.copy()
二つのリストからマップ	dict(zip(リスト, リスト2))
原点から(小数点数,y)の距離	math.hypot(x, y)
文字列中の指定した文字の登場	文字列.count(文字)
2つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
10を底とする浮動小数点数の対数	math.log10(x)
データフレームのカラムにおいてどの値が頻出か見る	df['列A'].mode()
タプルの要素数を見る	len(タプル)
タプルからカウンタを作る	collections.Counter(aDict)
折れ線グラフに星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
２つの文字列が等しくない	文字列 != 文字列2
閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
指定したカラムを10の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
データを最大値を用いて正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
option: グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
option: ダークグリーンにフォントの色を設定する	color = 'darkgreen'
２つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
option: フォントの色を黄緑に変更する	color = 'chartreuse'
option: グラフの色をブランチドアーモンドに変更する	color = 'blanchedalmond'
タプルの要素が最初に見つかる位置	タプル.index(要素)
ヘッダなしでCSVファイルを読み込む	pd.read_csv('file.csv', header=None)
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
ローングリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
小数点数の整数部を求める	math.modf(x)[1]
ファイル名がテキストファイルか判定する	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
データフレームのあるカラムの値がxより大きい行を抽出する	df[df['列A'] > x]
option: セパレータを文字列にする	sep = s
リストとリストについての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
大文字と小文字を逆にする	文字列.swapcase()
行列のデータ型	aArray.dtype()
option: ライトブルー色を使う	color = 'lightblue'
散布図の▼マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
表データのあるカラムは何年か見る	df['列A'].dt.year
プロットで使用する縦軸の軸ラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
データフレームのある列の値がxより少ない行を抽出する	df[df['列A'] < x]
数列を円プロットにする	plt.pie(データ列, startangle=90)
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
option: グラフの色をシエナにセットする	color = 'sienna'
折れ線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
データシリーズの基本統計量	ds.describe()
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
オブジェクトが関数かどうか	callable(obj)
三つの文字列を順に出力する	print(文字列, 文字列, 文字列)
指定した列のカテゴリで集計し、分散を計算する	df.groupby('列A').var()
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
リストとイテラブルについて散布図を描画して、マーカーを三角にセットする	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
ライトブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
多次元尺度構成法で多次元データを項次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームの列名一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
日付データが木曜日か調べる	aDate.weekday() == 3
指定された列のカテゴリで集計し、個数を求める	df.groupby('列A').count()
文字列をコロンで末尾から分割する	文字列.rsplit(':')
散布図をネイビー色を用いて描画する	plt.scatter(データ列x, データ列y, color='navy')
データフレームの選択した列の中にあるの合計を数える	df[['列A', '列B']].isin([value]).sum()
データフレームを2つの列の値でグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
文字列からformatのパターンでタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
赤い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
空の単回帰モデルを準備する	model = sklearn.linear_model.LinearRegression()
両端キューの順を右にローテーションする	両端キュー.rotate(1)
縦棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
シーグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
正則化付き単回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
option: ターコイズ色を使う	color = 'turquoise'
データフレームを表示するときデータフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
option: グラフの色をオーキッドに設定する	color = 'orchid'
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
rgbのポイントマーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
今日が月曜日か	datetime.datetime.today().weekday() == 0
日付時刻データが日曜日かどうかテストする	aDatetime.weekday() == 6
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
データシリーズの分を見る	ds.dt.minute
option: グラフの色をシアンに設定する	color = 'cyan'
エンディアンを使う	sys.byteorder
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
フォレストグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='forestgreen')
標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
rgbの星マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを指定した列によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
リストと配列についての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列の中の正規表現によるすべてのマッチを見る	re.findall(pattern, s)
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
日付データからn時間分、引く	aDate - datetime.timedelta(hours=n)
ある列の値がxに等しく、別の列の値がyに等しいデータを抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ハニーデュー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
option: グラフの色をダークマゼンタに指定する	color = 'darkmagenta'
文字列の中のASCII限定として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
浮動小数点数を実数で割って、切り捨てる	x // y
ライトシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ふたつのタプルを結合する	タプル + タプル2
リストとリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
ヒストグラムを紺碧色を使って描画する	plt.hist(データ列, color='azure')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
２次元リストの転置行列	[list(x) for x in list(zip(*aList))]
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
文字列内に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', 文字列)
紺碧色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
option: 行を連番に変更する	index_col = None
文字列が英数字か調べる	文字列.isalnum()
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
ダークシアグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
xを黄色でプリントできる文字列にする	f'\033[33m{x}\033[0m'
安全に文字列の末尾から部分文字列を除去する	文字列.removesuffix(部分文字列)
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
変数が0に近づく際の数式の極限値を求める	sympy.limit(数式, 変数, 0)
パープル色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
リストと数列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
ダーク・スラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
実行環境がLinux	sys.platform.startswith('linux')
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
指定された列を用いて昇順にデータフレームを並べ直して、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
オブジェクトはタプルか調べる	tuple = int<nl>isinstance(obj, tuple)
リストの最後を使う	リスト[-1]
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データ列の折れ線グラフを三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
文字列からタブを全て取り除く	文字列.replace('\t', '')
リストをビン数nでビン分割する	pd.cut(aList, n)
指定した列の第三四分位数	df['列A'].quantile(0.75)
黒い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
リスト内の要素は少なくとも一つ真か調べる	any(リスト)
要素がセットのメンバーでないかどうか	要素 not in セット
範囲指定をした配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
表データのインデックスの名前を一度に変更する	df.rename(index={x: y})
暗い赤色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
変数を改行せずプリントする	print(変数名, end='')
小麦色色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
両端キューの先頭にリストの値を追加する	両端キュー.extendleft(リスト)
変数の値を減少させる	変数 -= 整数
数式を方程式として解く	sympy.solve(数式)
散布図に赤い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
リストの要素が最初に見つかるインデックスを探す	リスト.index(要素)
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
２つのデータ列を箱髭図にする	plt.boxplot([データ列, データ列])
実数を2乗する	x ** 2
ダークターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
データフレームのあるカラムの標準偏差を求める	df['列A'].std()
リストを文字列として、文字列によって連結する	文字列.join(map(str, リスト))
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
黒い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列の左端から部分文字列を取り除く	文字列.lstrip(部分文字列)
タプルの平均値	sum(タプル)/len(タプル)
ヒストグラムの色を白にセットする	plt.hist(データ列, color='white')
配列の行ごとの合計	np.sum(aArray, axis=1)
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
データフレームの選択した列の欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
クラス分類をガウス過程として行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
文字が別の文字列に含まれる	文字 in 文字列
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームのカラムの尖り	scipy.stats.kurtosis(df['列A'], bias=False)
配列のモードを使う	mode, count = scipy.stats.mode(配列)
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームの中の列をビン数nとして分割する	pd.cut(df[col], n)
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
データ列とリストについて散布図をプロットして、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームの選択したカラムはどの程度、分散しているか調べる	df[['列A', '列B']].var()
三つの文字列を順にプリントする	print(文字列, 文字列, 文字列)
データフレームを二つの列をキーにして昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
データシリーズがどの程度、分散しているか見る	ds.var()
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をオーキッドにセットする	plt.hist(データ列, color='orchid')
データフレームから指定された２つの列のみ抽出する	df[['列A', '列B']]
折り返しを無効にする	pd.set_option('expand_frame_repr', False)
データフレームのインデックスがnの行を抽出する	df.loc[n]
整数が整数2以下、または、n3以上	整数 <= 整数2 or 整数 >= n3
クラス分類をパーセプトロンで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データシリーズの中にいくつ文字列があるか数える	ds.isin([value]).sum()
データフレームの未入力値をドロップする	df.dropna(inplace=True)
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
整数が整数2よりも小さいか	整数 < 整数2
整数が整数2以下または、n3以上	整数 <= 整数2 or 整数 >= n3
暗い赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームをインデックスで並べ直す	df.sort_index()
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
グリッド線	plt.grid(linewidth=3.0)
文字列中にアルファベットが含まれない	any(not c.isalpha() for c in 文字列)
配列の次元数	aArray.ndim
シーケンスをカウンタにする	collections.Counter(iterable)
棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
配列を等しい量になるようにn個にビニングする	pd.qcut(aArray, n)
カテゴリでグループ化して、データフレームをにバイオリン図として図示する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームとしてタブ区切りのファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
option: 出力の終端に文字列を用いる	end = 文字列
整数と整数のビット積	整数 & 整数2
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
辞書をチェーンマップにする	collections.ChainMap(aDict)
ファイルパスをバイナリモードでオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
option: 文字コードをBOM付きにセットする	encoding = 'utf_8_sig'
文字列中にひとつもASCII文字が含まれないか調べる	any(not c.isascii() for c in 文字列)
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in 文字列)
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
その平均でデータシリーズのNaNを埋める	ds.fillna(ds.mean())
指定したカラムの中央値を算出する	df['列A'].median()
データフレームをCSVファイルにBOMを付けて出力する	df.to_csv('file.csv', encoding='utf_8_sig')
縦棒グラフをダークシアン色を使って描画する	plt.bar(データ列x, データ列y, color='darkcyan')
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームをヘッダを付けず保存する	df.to_csv('file.csv', header=None)
整数を八進数表記に変換する	oct(整数)
ライトイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
整数を十六進数表記に変換する	hex(整数)
ファイルパスをBOM付きで書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
オブジェクトをユーザ向けの文字列にする	str(obj)
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
リストと配列の散布図を描画してポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
リストとリストについて散布図を描画して右三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
散布図の丸印を青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
イテラブルとリストについて散布図を描画し、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
双方向キューの末尾から要素を取り出す	両端キュー.pop()
双方向キューに文字列をスタックする	両端キュー.append(文字列)
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
双方向キューから最初の整数を取り除く	両端キュー.remove(整数)
文字列を最後の区切り記号で分割した時の後半の文字列を求める	文字列.rpartition(セパレータ)[-1]
シアンで表示できる文字列にする	f'\033[36m{x}\033[0m'
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
数列のスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(配列)
辞書をJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False)
オブジェクトはリストクラスか調べる	list = int<nl>isinstance(obj, list)
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
option: グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['列A'].value_counts().sort_index().index
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
option: やわらかい青色を使う	color = 'cornflowerblue'
文字列を空白で二分割する	文字列.partition()
リストから両端キューを作成する	collections.deque(リスト)
t-SNEを用いて数値次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
変数がマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(数式, 変数, -oo)
タプルをひとつ置きに得る	タプル[::2]
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
ヒストグラムをシスル色を用いて描画する	plt.hist(データ列, color='thistle')
改行なしに二つの変数をプリントする	print(変数名, 変数名, end='')
ゴールドにヒストグラムの色をする	plt.hist(データ列, color='gold')
文字列の末尾からタブを除く	文字列.rstrip('\t')
項目名がマッピングに存在していない時要素を追加する	辞書.setdefault(キー, element)
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
ライトスチールブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
二つの整数の最大公約数	math.gcd(n, n2)
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
rgbの▲マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 色を淡いピンク色に変更する	color = 'lightpink'
バリーウッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
青い点線で配列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列を小文字に変換する	文字列.lower()
データフレームをグループ化しそれぞれの平均値を計算する	df.groupby('列A').mean()
線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
エクセルファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームの未入力値をxで補完する	df.fillna(x)
データフレームの選択したカラムを小数点以下n桁で四捨五入する	n = 2<nl>df[['列A', '列B']].round(n)
散布図をダークターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
アイボリー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
イテラブルの重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='brown')
線形モデルのバイアス	model.intercept_
リストを集合に変換する	set(リスト)
文字列をカンマで二分し、、残りを見る	文字列.partition(',')[-1]
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
マゼンタにする	f'\033[35m{x}\033[0m'
改行なしに計算結果をプリントする	print(式, end='')
イテラブルからひとつランダムに選んでリストにする	random.choice(イテラブル)
折れ線グラフに菱形印を加える	plt.plot(データ列x, データ列y, marker='D')
カンマ区切りのファイルのn行目を行として読み込む	pd.read_csv('file.csv', index_col=n)
散布図をインディアンレッド色として描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームの選択したカラムの中に文字列と文字列が含まれる	df[['列A', '列B']].isin([value, value2])
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
日付データが日付データよりあとか調べる	aDate > aDate2
大文字・小文字を無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
改行	'\n'
日付時刻データが何日か知る	aDatetime.day
リストの中の最小値	min(リスト)
線グラフの色をミントクリームにセットする	plt.plot(データ列x, データ列y, color='mintcream')
日付データの月数	aDate.month
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームのあるカラムの曜日は何日目か知る	df['列A'].dt.dayofweek
赤い右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
xとyを文字列で区切って出力する	print(x, y, sep=s)
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
データシリーズは何月か見る	ds.dt.month
日付データが日付データより後ろか判定する	aDate > aDate2
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
要素がセットに含まれないか確認する	要素 not in セット
区間数を設定して度数分布図をプロットする	plt.hist(データ列, bins=区関数)
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの中に文字列が含まれるかどうか確認する	df.isin([value])
option: 破壊的に操作する	inplace = True
日付データが何曜日か知る	aDate.weekday()
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
書き込み用にファイルをSJISとしてオープンする]	open(filepath, mode='w', encoding='shift_jis')
predicateFuncがTrueとなるリストの要素	itertools.takewhile(predicateFunc, iterable)
紺碧色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
キューは空	len(両端キュー) == 0
インデントを指定して辞書をJSON文字列に変換する	json.dumps(辞書, ensure_ascii=False, indent=n)
線グラフの色をクリムゾンにする	plt.plot(データ列x, データ列y, color='crimson')
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
横棒グラフをラベンダーブラッシュ色として描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
指定された列のみデータフレームの重複を見る	df.duplicated(subset='列A')
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
xを白色でプリントする	print(f'\033[37m{x}\033[0m')
ミディアムバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: 改行コードをUNIXに設定する	newline = '\n'
ValueMapでデータフレームのあるカラムの値を一度に置き換える	df['列A'].replace(ValueMap)
エクセルファイルから複数のシートをデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
黒いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームをある列の値としてグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
整数わる整数	整数 / 整数2
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
ヒストグラムをグレー色を使って描画する	plt.hist(データ列, color='gray')
option: スノー色を用いる	color = 'snow'
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
双方向キューの先頭を使う	両端キュー[0]
散布図を赤い▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列の先頭から部分文字列の位置を探す	文字列.find(部分文字列)
識別子が非同期ジェネレータか調べる	inspect.isasyncgen(識別子)
イテラブルとリストについて散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームのカラムの文字列長を列として使う	df[col].str.len()
データシリーズの値を正規表現patternで全て置き換える	ds.replace(pattern, repl, regex=True)
赤い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
長さnのリストを得る	[0] * n
データ列間の当てはまりの良さを求める	sklearn.metrics.r2_score(データ列, データ列2)
データフレームの指定した列の標本分散	df['列A'].var(ddof=0)
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
option: エクセルファイルシート名を設定する	sheet_name = ['A', 'B']
predicateFuncを適用したとき真になるシーケンスの部分	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
プロットの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
チョコレート色として線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
イテラブルとデータ列についての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフを青緑色を使って描画する	plt.plot(データ列x, データ列y, color='turquoise')
配列の個数を算出する	aArray.size
整数の8乗	整数 ** 8
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
大文字・小文字を無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
文字列が文字列より辞書順で前か調べる	文字列 < 文字列2
数列の要素を双方向キューの先頭に追加する	両端キュー.extendleft(数列)
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
データフレームはどの程度正規分布から尖っているか確認する	df.skew()
バイト列からJSONフォーマットのデータを読む	json.loads(バイト列.decode('unicode-escape'))
日付データからn日を減らす	aDate - datetime.timedelta(days=n)
データフレーム中のNaNをドロップする	df.dropna(inplace=True)
多次元データを特異値分解で整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
xを緑色でプリントできる文字列にする	f'\033[32m{x}\033[0m'
データフレームをグループ化し、ある列の統計量を計算する	df.groupby('列A').describe()['列B']
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
線グラフをコーンズシルク色を用いて描画する	plt.plot(データ列x, データ列y, color='cornsilk')
棒グラフを暗い赤色を使って描画する	plt.bar(データ列x, データ列y, color='darkred')
ダークスレートブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
option: データ型を指定する	bool = np.int<nl>dtype = bool
イテラブルからn個ランダムに選んでリストにする	random.choices(イテラブル, k=n)
データフレームの列を散布図でグラフ化してカテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ピアソンとしてデータフレームの相関行列を計算する	df.corr(method='pearson')
データフレームが何行重複するか調べる	df.duplicated().sum()
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
空のカウンタを作る	collections.Counter()
option: グラフの色をパープルに設定する	color = 'purple'
現在の再帰の上限を知る	sys.getrecursionlimit()
現在のモジュールを使う	sys.modules[__name__]
データフレームのn行目をドロップしてみる	df.drop(n, axis=0)
整数が整数2以下、それか、n3以上かどうか調べる	整数 <= 整数2 or 整数 >= n3
淡いピンク色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
文字列を走査し正規表現にマッチするか調べる	re.search(pattern, s)
辞書を複製する	dict(辞書)
数列から双方向キューを準備する	collections.deque(数列)
データフレームの指定したカラムの中に文字列とがあるか調べる	df['列A'].isin([value, value2])
棒グラフを青紫色として描画する	plt.bar(データ列x, データ列y, color='violet')
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
文字列の両端からタブを除去する	文字列.strip('\t')
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
要素が辞書の値に含まれていないか調べる	element not in 辞書.values()
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: 色をダークオレンジに設定する	color = 'darkorange'
浮動小数点数の正弦の逆数を求める	math.asin(x)
10を底とする実数の対数	math.log10(x)
散布図の印を▼印にする	plt.scatter(データ列x, データ列y, marker='v')
ヒストグラムの色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
データ列の移り変わりを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
指定されたカラムリストのみ、データフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
マップで文字列の数をカウントする	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
xを赤色でプリントできる文字列に変換する	f'\033[31m{x}\033[0m'
option: ネイビー色を使用する	color = 'navy'
多次元データをt-SNEで数値次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
両端キューが空であるか調べる	len(両端キュー) == 0
文字列の指定した区間位置の間に部分文字列が含まれるか判定する	文字列.find(部分文字列, 開始位置, 終了位置) != -1
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
指定したカラムの中に存在する文字列との数を求める	df['列A'].isin([value, value2]).sum()
データシリーズは何曜日か見る	ds.dt.weekday_name
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
データシリーズの中に含まれる文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
整数2がnより大きくかつ、n3より小さいか調べる	整数 < 整数2 and 整数2 < n3
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
縦棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
グリーンイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームの指定したカラムにおいてどの値が頻出か見る	df['列A'].mode()
多次元データをSVDで整数次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
折れ線グラフの色を珊瑚にセットする	plt.plot(データ列x, データ列y, color='coral')
散布図に赤いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの選択したカラムの中に文字列がある	df[['列A', '列B']].isin([value])
部分分数に数式を展開する	sympy.apart(数式)
データフレームを一万の位で四捨五入する	df.round(-4)
配列を集合に変換する	set(配列)
本日が金曜日かどうか確認する	datetime.datetime.today().weekday() == 4
を整数分の一にする	変数 //= 整数
青い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ライトブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
文字列中にひとつでも非英数字が存在するか	any(not c.isalnum() for c in 文字列)
option: ゲインズボロ色を使う	color = 'gainsboro'
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームの列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
リストをJSON形式でファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
データフレームから列を2つ選択する	df[['列A', '列B']]
モカシン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データシリーズをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
グリッドを実線にする	plt.grid(linestyle='solid')
イテラブルと数列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
プロットを全般的に色差別なくする	sns.set(pallete='colorblind')
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
グラフから格子線を消す	plt.grid(False)
プロットの補助目盛りを有効にする	plt.minorticks_on()
N未満までのベクトルを作成する	np.arange(N)
option: 線の種類を破線に指定する	linestyle = 'dashed'
縦棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
option: 色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
ファイルパスを追加できるようにUTF8を使ってオープンする]	open(filepath, mode='a', encoding='utf-8')
配列を累積した列	itertools.accumulate(iterable, operator.mul)
データフレームの２つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
データフレームの選択したカラムの中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
ミディアムブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ある列のカテゴリごとの平均値	df.groupby('列A').mean()
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
ファイルパスのセパレータ記号を用いる	os.sep
散布図をマルーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='maroon')
データフレームの二つの列を並べて箱ひげ図として可視化する	plt.boxplot([df['カラム'], df['カラム']])
タプルを累加したイテラブルを求める	itertools.accumulate(iterable)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
エンディアンを知る	sys.byteorder
既存のファイルパスを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int)
もしコマンド引数が与えられたなら処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
配列の最頻値を求める	mode, count = scipy.stats.mode(配列)
ふたつの条件が同時に成り立つ	条件 and 条件2
二つの列を組み合わせてグループ化し、分散を計算する	df.groupby(['列A', '列B'], as_index=False).var()
縦棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
縦棒グラフをコーンフラワーブルー色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
カウンタから最も頻出な文字列の件数	aCounter.most_common()[1]
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
ヒストグラムの色をスチールブルーにセットする	plt.hist(データ列, color='steelblue')
option: アリスブルー色を使う	color = 'aliceblue'
option: 出力先を標準エラーにする	file = sys.stderr
データシリーズの尖度	ds.skew()
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
デピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
文字列が全て十進数字か調べる	文字列.isdecimal()
整数がリストのどれかか調べる	aList = [0, 1, 2]<nl>整数 in aList
二つのデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
アクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
xをマゼンタでプリントする	print(f'\033[35m{x}\033[0m')
データフレームの未入力値を中央値で置換する	df.fillna(df.median())
データフレームの列リスト	df.info()
実数の正接を求める	math.tan(x)
リストの要素を昇順にソートする	sorted(リスト, reverse=True)
折れ線グラフをライトグレー色を使って描画する	plt.plot(データ列x, データ列y, color='lightgray')
Excelファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
散布図をスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='steelblue')
データフレームの列の各データ値の出現数	df[col].value_counts()
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
改行せず複数の数値をプリントする	print(数値, 数値, end='')
ヒストグラムの色をピーチパフにセットする	plt.hist(データ列, color='peachpuff')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
データを最大最小で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
ファイルを追加モードで開く]	'a' = 'a'<nl>open(filepath, mode='a')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
二変数の最大値を求める	max(x, y)
nは整数と等しい	整数 == 整数2
カラムのトリム平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
文字がカタカナかどうか調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
リストとリストの散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
JSONフォーマットで辞書をファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
データをインデント幅を指定してJSONにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
option: 色をホワイトに変更する	color = 'white'
散布図の四角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
数列のイミュータブルな集合	frozenset(数列)
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
文字列をカンマで二分して残りを使う	文字列.partition(',')[-1]
プログラムの実行を強制的に終了する	sys.exit()
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
列の各値が何回出現するか見る	ds.value_counts()
option: ライトスレイグレーを用いる	color = 'lightslategray'
マルーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
option: コーンズシルクを使用する	color = 'cornsilk'
ファイルのファイルサイズ	os.path.get_size(filepath)
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
リストをリストを境界値として分割する	pd.cut(aList, aList)
折れ線グラフの星マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
ヒストグラムの色をトマトにする	plt.hist(データ列, color='tomato')
option: フォントの色をライムグリーンに指定する	color = 'limegreen'
最大長nの両端キューを準備する	collections.deque(maxlen=最大長)
xを青色でプリントできる文字列に変換する	f'\033[34m{x}\033[0m'
欠損値がある行を削除してみる	df.dropna()
整数の差	整数 - 整数2
文字列からサフィックスを取り除く	文字列.removeprefix(部分文字列)
オブジェクトはトレースバックかどうか	inspect.istraceback(オブジェクト)
黒い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
配列の要素ごとに加算する	aArray + aArray2
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
文字列を区切り文字を用いて区切って列挙する	文字列.split(セパレータ)
多次元データを多次元尺度構成法で要素次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
ひとつもアルファベットが文字列中に含まれない	any(not c.isalpha() for c in 文字列)
データフレームをSJISで出力する	df.to_csv('file.csv', encoding='shift_jis')
ポイント印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
整数が2で割り切れる	整数 % 2 == 0
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームのある列が正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
ファイルを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
データフレームの選択したカラムの標準偏差	df[['列A', '列B']].std()
データ列の推移を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: 説明変数を事前に正規化する	normalize = True
カラムを全て日付データに変換する	pd.to_datetime(df['列A'])
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
日付データからn日分、引く	aDate - datetime.timedelta(days=n)
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
option: ミディアムスレートブルーに色を設定する	color = 'mediumslateblue'
ナバホホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームの選択したカラムのNaNを最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
ある列のカテゴリごとの標準偏差	df.groupby('列A').std()
ファイルを文字列の示す文字コードとして開く]	s = 'utf-8'<nl>open(filepath, encoding=s)
ヒストグラムの色を貝殻にセットする	plt.hist(データ列, color='seashell')
データシリーズが正規分布からどれだけ尖っているか見る	ds.skew()
オブジェクトがメソッドかどうか調べる	inspect.ismethod(オブジェクト)
グラフの色を濃くする	sns.set(pallete='deep')
データフレームを配列にする	df.values
ある列の値がx以上y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
文字列∉セット	文字列 not in セット
ダークグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
カテゴリ別で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
イテラブルでカウンタを更新する	aCounter.update(iterable)
双方向キューの先頭に要素を入れる	両端キュー.appendleft(要素)
データフレームから列を２つだけ選択する	df[['列A', '列B']]
option: グラフの色をオレンジに設定する	color = 'orange'
実数以下の最大の整数	math.floor(x)
プラムにヒストグラムの色をセットする	plt.hist(データ列, color='plum')
上位集合もしくは等しい	セット >= セット2
ヒストグラムの色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
散布図に赤い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
文字列の最初から空白を取り除く	文字列.lstrip()
整数引く整数を算出する	整数 - 整数2
双方向キューのn番目に文字列を挿入する	両端キュー.insert(n, 文字列)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
option: エンコーディングをBOM付きにセットする	encoding = 'utf_8_sig'
option: ラベンダーに色を指定する	color = 'lavender'
Pythonインタプリタの実行ファイルの絶対パスを知る	sys.executable
データフレームの末尾100行を選ぶ	df.tail(100)
整数が正の整数かどうか調べる	整数 > 0
データフレームの選択した列の未入力値をメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
カラムの欠損値をモードに変更する	df['列A'].fillna(df['列A'].mode().iloc[0])
日付時刻データが何年か知る	aDatetime.year
文字列を部分文字列で二分し、、前半を求める	文字列.partition(部分文字列)[0]
数列間のケンドールの相関係数を使う	scipy.stats.kendalltau(数列, 数列2)
マッピングに項目名が存在するかどうか調べる	キー in 辞書
辞書のキーと値を入れ替える	{v: k for k, v in 辞書.items()}
散布図を菱形印で描画する	plt.scatter(データ列x, データ列y, marker='D')
縦棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
折れ線グラフに赤い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
実数とyの斜辺を計算する	math.hypot(x, y)
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを行によって降順で並べ直す	df.sort_index(ascending=False)
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: 追加モードに設定する	mode = 'a'
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
本日が月曜日	datetime.datetime.today().weekday() == 0
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
パウダーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
列の各データ値の出現回数を求める	df[col].value_counts()
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
数列の長さを制限する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
xの小数点以下'3'桁まで表示する	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
イテラブルの全順列を得る	itertools.permutations(iterable)
列の一意な要素	ds.unique()
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
散布図をパウダーブルー色として描画する	plt.scatter(データ列x, データ列y, color='powderblue')
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
散布図を三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
t-SNEで多次元データを要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
双方向キューの末尾に要素を付け加える	両端キュー.append(要素)
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
データシリーズの年度	ds.dt.year
線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
小数点数の自然対数	math.log(x)
フィシャー流の尖度を使う	scipy.stats.kurtosis(配列, fisher=True, bias=False)
浮動小数点数の最小値	sys.float_info.min
双方向キューの末尾にリストの各要素を追加する	両端キュー.extend(リスト)
ヒストグラムを描画する	plt.hist(データ列)
最後のカンマで文字列を二つに分けて、前半を使う	文字列.rpartition(',')[0]
列の各データ値の出現数を計算する	ds.value_counts()
整数を八進リテラルに変換する	oct(整数)
散布図の印の色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
散布図を右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
ファイルからベースファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
整数の四分の一	整数 / 4
線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
タプルの末尾からn番目以前の部分を得る	タプル[:-n]
縦棒グラフをオールドレース色を使って描画する	plt.bar(データ列x, データ列y, color='oldlace')
カウンタを多い順にリストとして得る	aCounter.most_common()
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
行列の全要素の値を変更する	aArray[:, :] = 指定の値
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: グラフの色をディムグレーに指定する	color = 'dimgray'
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データシリーズの中にが存在する	ds.isin([value])
整数型の０で全要素を初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int)
ファイルを全て読む	f.read()
実数を実数に加える	x + y
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
フローラルホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
データ列の文字列長を列として使う	ds.str.len()
双方向キューの中に文字列は存在するかどうか	文字列 in 両端キュー
option: グラフの色をモカシンに設定する	color = 'moccasin'
棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
カウントプロットをプロットする	sns.countplot(x='列名', data=df)
辞書として文字列の数を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
配列とリストについて散布図をプロットし、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
xの小数点以下'4'桁までを表示する	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
プロットに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
配列の列ごとの合計を求める	np.sum(aArray, axis=0)
ヒストグラムをダークスレートブルー色を用いて描画する	plt.hist(データ列, color='darkslateblue')
三つのデータフレームを縦につなぐ	pd.concat([df, df2, df3], axis=0)
ゴールド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
シーケンスを多重集合にする	collections.Counter(iterable)
option: ディープスカイブルー色を使う	color = 'deepskyblue'
文字列中にひとつでも非大文字が存在する	any(not c.isupper() for c in 文字列)
今日の日数を見る	datetime.datetime.today().day
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
指定したカラムのモード	df['列A'].mode()
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
一点鎖線にヒストグラムの線の種類を変更する	plt.hist(データ列, linestyle='dashbot')
データフレームの選択したカラムのNaNを最頻値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
整数を文字列に変換する	str(x)
データシリーズの欠損値をメディアンに設定する	ds.fillna(ds.median())
数値がセットに含まれないかどうか調べる	数 not in セット
配列を等量でn個に分割する	pd.qcut(aArray, n)
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: ブラウンにフォントの色を設定する	color = 'brown'
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
最初のコマンド引数	sys.argv[1]
作業ディレクトリを使う	os.getcwd()
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
キーで指定された値を辞書から取り除く	辞書.pop(キー)
文字列中にひとつも小文字が含まれないか調べる	any(not c.islower() for c in 文字列)
列の全順列を求める	itertools.permutations(iterable)
ヒストグラムの色をダークグリーンにセットする	plt.hist(データ列, color='darkgreen')
ファイルのベースファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
配列を2次元1行に変形する	aArray.reshape(1, -1)
データシリーズの未入力値をメディアンで埋める	ds.fillna(ds.median())
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
行によってデータフレームをソートする	df.sort_index()
変数の値を整数分の1にする	変数 //= 整数
データフレームのカラムの相乗平均を求める	scipy.stats.gmean(df['列A'])
散布図のマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
スピアマン相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
データフレームのあるカラムの分散を求める	df['列A'].var()
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
▽印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
直前の値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(method='ffill')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
ブラック色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
ファイルを書き込み用にオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
2進対数	math.log2(x)
文字列を空白で分割して、文字列リストに変換する	文字列.split()
スタッキングとしてクラス分類を行う	sklearn.ensemble.StackingClassifier()
リストとリストについて散布図を描画して、三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: ダイアモンド印を加える	marker = 'D'
オブジェクトがバイト列	bytes = int<nl>isinstance(obj, bytes)
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームのn行目より前を取り出す	df[:n]
散布図をオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='orange')
散布図をゴールド色を用いて描画する	plt.scatter(データ列x, データ列y, color='gold')
折れ線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
三つ並べてリストをヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームの一部の列の平均	df[['列A', '列B']].mean()
バイナリできるようにファイルをオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
データフレームの一部の列の中に存在する文字列と日付データの数をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
option: グラフの色をティールに指定する	color = 'teal'
リストを等しい量になるように分割数nでビン分割する	pd.qcut(aList, n)
要素がリストに含まれるか調べる	要素 in リスト
重複した行のみを選択する	df[df.duplicated(keep=False)]
整数の二進数表記を使う	bin(整数)
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
数列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
プロットの用途をポスターに設定する	sns.set(context='poster')
データフレームの選択したカラムを100の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-2).astype(int)
あるカラムの欠損値を最頻値で置換する	df['列A'].fillna(df['列A'].mode().iloc[0])
イテラブルとデータ列の散布図を描いて、マーカーを大バツにセットする	plt.plot(データ列x, データ列y, marker='X')
xがマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
option: モカシン色を使用する	color = 'moccasin'
ヒストグラムの描画し、正規化する	plt.hist(データ列, density=True)
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
本日の曜日を整数で使う	datetime.datetime.today().weekday()
折れ線グラフの色をピーチパフにする	plt.plot(データ列x, データ列y, color='peachpuff')
タイムスタンプデータが何日か知る	aDatetime.day
外れ値を除いたカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
新しいロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
データ列を全てPandasの日付型に変換する	pd.to_datetime(ds)
散布図をダークスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
散布図の左三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
文字列を最初の部分文字列で二分割する	文字列.partition(部分文字列)
円グラフにラベルを設定する	plt.pie(データ列, startangle=90, labels=ラベル列)
データフレームのカラムのトリム分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
線グラフの色をダークシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
データシリーズを十の位で丸めて、整数型にする	ds.round(-1).astype(int)
ライトスチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightsteelblue')
xを白色にする	f'\033[37m{x}\033[0m'
option: コーラル色を使う	color = 'coral'
データフレームのある列の値がxより大きい行を取り出す	df[df['列A'] > x]
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
データフレームの指定した列の中に日付データと文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
要素がセットのメンバーかテストする	要素 in セット
辞書の値の一覧を参照する	辞書.values()
折れ線グラフを点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
改行なしに２つの変数を表示する	print(変数名, 変数名, end='')
データ列の各データ値の出現回数	ds.value_counts()
今日をタプルに変換する	datetime.datetime.today().timetuple()
option: グラフの色を黄色に指定する	color = 'yellow'
英大文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
文字列を走査し正規表現にマッチするか確認する	re.search(pattern, s)
パターンに文字列全体をマッチさせる	re.fullmatch(pattern, s)
今日が日曜日	datetime.datetime.today().weekday() == 6
散布図をダークターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
本日が何月か知る	datetime.datetime.today().month
オブジェクトがクラスかどうか調べる	isinstance(obj, クラス)
データ列とリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの色をオーキッドに変更する	color = 'orchid'
識別子が抽象クラスか確認する	inspect.isabstract(識別子)
ピーチパフ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームを千の位で丸める	df.round(-3)
散布図を四角印を使用して描画する	plt.scatter(データ列x, データ列y, marker='s')
列名を指定して二つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
データフレームの指定したカラムの平均値	df['列A'].mean()
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
外れ値を除いた配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
UNIXコマンドtextを実行する	"text = ""echo 'A'""<nl>os.system(text)"
折れ線グラフのマーカーを丸印にする	plt.plot(データ列x, データ列y, marker='o')
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
双方向キューのn番目に要素を挿入する	両端キュー.insert(n, 要素)
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
文字列の左側から文字を消す	文字列.lstrip(文字)
option: SJISを使う	encoding = 'shift_jis'
実数を実数で割った剰余	math.remainder(x, x2)
option: グラフを実線に設定する	linestyle = 'solid'
数列とリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
あるカラムの値ごとの分散	df.groupby('列A').var()
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
三変数の最小値	min(x, y, z)
連続した配列の作成する	np.arange(開始値, 終了値, 等差)
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
option: 読み込みモードを使う	mode = 'r'
formatパターンの文字列をタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームのNaNを最小値に指定する	df.fillna(df.min())
文字列の中のパターンによる全てのマッチを見る	re.findall(pattern, s)
データ列のUNIX時間をタイムスタンプにする	pd.to_datetime(ds, unit='s', utc=True)
文字列の中の複数行対応としてパターンによるマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
大文字・小文字を無視して正規表現で文字列を区切る	re.split(pattern, s, flags=re.IGNORECASE)
カウンタ同士で積集合を求める	aCounter & aCounter2
切片なしの重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
両端キューの末尾に要素を追加する	両端キュー.append(要素)
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
散布図をダークバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
イテラブルとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
配列を縦棒グラフにする	plt.bar(ラベル列, データ列)
文字列が全て英数字か調べる	文字列.isalnum()
縦軸の目盛りを対数に変更する	plt.yscale('log')
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
現在が水曜日	datetime.datetime.today().weekday() == 2
データフレームの全列の相関を可視化する	sns.pairplot(df)
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
カウンタ間でユニオン	aCounter | aCounter2
ASCIIコードエスケープで文字列をバイト列に変換する	文字列.encode(encoding='unicode_escape')
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
連番の配列の作成する	np.arange(開始値, 終了値, 等差)
データフレームのある列の母標準偏差	df['列A'].std(ddof=0)
マッピングの浅いコピーを作る	辞書.copy()
部分文字列が文字列の終了位置以前に含まれないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
例外のメッセージを見る	etype, evalue, traceback = sys.exc_info()
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
option: グラフの色をダークスレートブルーに指定する	color = 'darkslateblue'
データフレームを表示するときデータフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
散布図に赤い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
マップのコピー	dict(辞書)
テンプレートをarg文字列を引数として文字列整形する	書式.format(*args)
タプルをnから番号付けする	enumerate(タプル, start=n)
option: マーカーを四角に変える	marker = 's'
option: 書き込みモードを使用する	mode = 'w'
rgbのバツマーカーを数列と配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
プログラムのファイル名	sys.argv[0]
文字列中の部分文字列を置換する	文字列.replace(部分文字列, 置換後の文字列)
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
x座標の目盛を表示しない	plt.xticks([])
部分文字列が文字列の指定した位置以降にないかどうか調べる	文字列.find(部分文字列, 開始位置) == -1
option: フローラルホワイトに色を指定する	color = 'floralwhite'
線グラフの色をライトスカイブルーに変更する	plt.plot(データ列x, データ列y, color='lightskyblue')
ファイルをUTF8として書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
文字列の右端からタブを取り除く	文字列.rstrip('\t')
データ列とイテラブルの散布図を描いて、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
黒いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
文字列からある文字を全て除去する	文字列.replace(文字, '')
データフレームから型の列を抽出する	df.select_dtypes(ty)
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
文字列中に小文字が含まれる	any(c.islower() for c in 文字列)
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をタンに指定する	color = 'tan'
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
表データのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
配列とリストについての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
xが0に近づく時の数式の極限値を算出する	sympy.limit(数式, [|変数]x, 0)
文字列を最後の部分文字列で分割した場合の後半の文字列	文字列.rpartition(部分文字列)[-1]
リストの変遷を半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
小数点数の双曲線余弦の逆数	math.acosh(x)
折れ線グラフをライトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightblue')
グラフをパステル調にする	sns.set(pallete='pastel')
黄緑色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr()
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
タプルを昇順にソートする	sorted(タプル, reverse=False)
nが整数かどうか調べる	整数 == 整数2
イテラブルを	''.join(map(str, イテラブル))
紫色でxをプリントする	print(f'\033[35m{x}\033[0m')
文字列がセットのメンバーに含まれないか調べる	文字列 not in セット
データ列の折れ線グラフを描いて色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
ファイルパスをUTF8を用いてオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
折れ線プロットを描く	plt.plot(データ列x, データ列y)
データフレームのある列をドロップする	df.drop('列A', axis=1, inplace=True)
箱ひげ図を二つ並べて描く	plt.boxplot([データ列, データ列])
新しい文字列でパターンにマッチした文字列を置換する	re.sub(pattern, newsub, s)
データフレームの重複していない行のみを選ぶ	df[~ df.duplicated(keep=False)]
整数を整数で割った余り	整数 % 整数2
横棒グラフをプロットし、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
異なる列をキーとして二つの表データを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
文字列を空白で区切って、整数リストに変換する	list(map(int, 文字列.split()))
要素はマップの値に含まれていないか確認する	element not in 辞書.values()
浮動小数点数のn乗を求める	pow(x, n)
要素∉セット	要素 not in セット
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
x軸の目盛を対数に変更する	plt.xscale('log')
部分文字列がsubで開始するか調べる	文字列.startswith(部分文字列)
整数の十六進文字列	hex(整数)[2:]
折れ線グラフの色をスチールブルーにする	plt.plot(データ列x, データ列y, color='steelblue')
ヒストグラムの色をライトイエローにセットする	plt.hist(データ列, color='lightyellow')
ビン数nで配列をビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
双方向キューのn番目に文字列を差し込む	両端キュー.insert(n, 文字列)
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
データシリーズの日	ds.dt.day
標準入力から1行読み取る	input()
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
n階微分を求める	sympy.diff(数式, 変数, n)
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
日付データが木曜日か	aDate.weekday() == 3
ミディアムオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumorchid')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの一部のカラムの分位数	df[['列A', '列B']].quantile(パーセント/100)
xをブール値に変換する	bool(x)
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
新しいヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列を最後のコロンで二分割して、後ろの方を見る	文字列.rpartition(':')[-1]
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
デピンク色として線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
黒い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
0から始まるn個の整数列	list(range(n))
option: ダーク・スラテグレーを使用する	color = 'darkslategrey'
折れ線グラフの星マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
オブジェクトがフレームかどうか調べる	inspect.isframe(オブジェクト)
文字列が文字列より辞書順で後かどうか	文字列 > 文字列2
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
文字列をカンマで分割して、文字列リストに変換する	文字列.split(',')
ライトスカイブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ふたつの集合の共通部分	セット.intersection(セット2)
大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムを用いてデータ列を可視化する	plt.hist(データ列)
配列とリストの散布図をプロットして、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
散布図の右三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
文字列の最初の文字	文字列[0]
学習データのバージョン	version = 'wcce2022-0.1'
option: グラフの色をミントクリームに変更する	color = 'mintcream'
線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
赤い点線としてイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
下三角マーカーを使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
三つのデータフレームを縦向きに合体する	pd.concat([df, df2, df3], axis=0)
セットから要素を全て消す	セット.clear()
Pandasのバージョンを確認する	print(pd.__version__)
文字列を式として評価する	eval(s)
表データのあるカラムの秒を見る	df['列A'].dt.second
直後の値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(method='bfill')
n個に配列を分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
文字列の左側がsubかどうか	文字列.startswith(部分文字列)
ファイルパスをSJISで開く]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
カテゴリで色分けしてデータフレームをに箱ひげ図としてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
リストから複数個、ランダムに抽出する	random.choices(リスト, k=n)
実数を実数で割った余り	x % y
option: ミディアムブルー色を使う	color = 'mediumblue'
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
単位行列を作る	np.eye(行数, 列数)
xが0に近づく際の数式の極限値を計算する	sympy.limit(数式, [|変数]x, 0)
改行を取り除いて1行だけ標準入力から読み込む	sys.stdin.readline().rstrip()
文字列を最後の部分文字列を使って二分する	文字列.rpartition(部分文字列)
ベクトルの要素ごとのアダマール積	np.multiply(aArray, aArray2)
数列からn個、サンプリングしてリスト化する	random.sample(数列, k=n)
オブジェクトはビルトイン関数か	inspect.isbuiltin(オブジェクト)
散布図に赤い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
リストの要素を文字列としてカンマによって結合する	','.join(map(str, リスト))
option: グラフの色をライトブルーに設定する	color = 'lightblue'
文字列中の文字を列挙する	list(文字列)
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームのカーネル密度による分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
数が正の数か調べる	x > 0
項がセットに含まれないか調べる	要素 not in セット
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
文字列を区切り記号で二分割し、、前半を使う	文字列.partition(セパレータ)[0]
データフレームをグループ化し、平均値を計算する	df.groupby('列A').mean()
横方向に2つのデータフレームをマージする	pd.merge(df, df2)
データフレームのあるカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
データフレームから	df.select_dtypes(型).columns
文字列は全て印字できるか調べる	文字列.isprintable()
表計算ファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
option: グラフの色を黄色に設定する	color = 'yellow'
option: バッファリングのサイズを小さくする	buffering = 4096
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
空の部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ブランチドアーモンドにヒストグラムの色を変更する	plt.hist(データ列, color='blanchedalmond')
ある列の文字列が部分文字列で始まるデータを取り出す	df[df['列A'].str.startswith(部分文字列)]
平均値付きボックスチャートを描画する	plt.boxplot(データ列, showmeans=True)
整数が5の倍数かどうか確認する	整数 % 5 == 0
空の階層化辞書	collections.ChainMap()
yについてのn階偏微分を求める	sympy.diff(数式, y, n)
小数点数の正弦の逆数	math.asin(x)
option: 分類木の深さを制限する	maxdepth = n
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
黒い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
変数について偏微分を行う	sympy.diff(数式, 変数)
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
青い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
文字列でフォーマットして今日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
文字列中にひとつでもアスキー文字があるか調べる	any(c.isascii() for c in 文字列)
S-W検定を行う	scipy.stats.shapiro(df['列A'])
ダークサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
オブジェクトの無限イテラブル	itertools.repeat(element)
option: ディムグレーに色を設定する	color = 'dimgray'
実数とyのノルムを計算する	math.hypot(x, y)
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
option: バツマーカーを使う	marker = 'x'
モジュールを検索するパス	sys.path
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
複数の計算結果を順に表示する	print(式, 式, 式)
文字列の大文字と小文字を逆にする	文字列.swapcase()
横棒グラフの色を黄緑にする	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
データフレームの指定したカラムのNaNを中央値に変更する	df['列A'].fillna(df['列A'].median())
ある列の値毎の個数を求める	df.groupby('列A').count()
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
ファイルからファイル名を求める	os.path.basename(filepath)
事前に大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
グラフの色を全般的に明るくする	sns.set(pallete='bright')
rgbの星マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
両端キューの要素をインプレースに逆順にする	両端キュー.reverse()
ベクトルの内積	np.dot(aArray, aArray2)
option: 色をタンに指定する	color = 'tan'
横棒グラフを耐火レンガ色を使って描画する	plt.barh(データ列x, データ列y, color='firebrick')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
グラフの横軸を対数目盛に変更する	plt.xscale('log')
折れ線グラフの丸マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
データフレームのカラムの最頻値を求める	mode, count = scipy.stats.mode(df['列A'])
データフレームの列の名前を列挙する	df.columns
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
データフレームの指定したカラムの中にいくつ欠損値が存在するか調べる	df['列A'].isna().sum()
文字列中に非空白が含まれる	any(not c.isspace() for c in 文字列)
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
真部分集合か調べる	セット < セット2
散布図でデータフレームを可視化してカテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色を青緑に設定する	color = 'turquoise'
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
本日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
ふたつのセットが共通の要素を持たないかどうか調べる	セット.isdisjoint(セット2)
散布図をスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='springgreen')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
配列から複数個ランダムに選んでリストにする	random.choices(配列, k=n)
option: グラフの色をサーモンに設定する	color = 'salmon'
モカシンにヒストグラムの色を指定する	plt.hist(データ列, color='moccasin')
破線にラインの線の種類をセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
グラフの描画でパステル調に色調を使う	sns.set(pallete='pastel')
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
xとyを順に改行なしに表示する	print(x, y, end='')
棒グラフをライトシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcyan')
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
タプルが空かどうか調べる	len(タプル) == 0
変数をプリントする	print(変数名)
リストのすべての要素を除く	リスト.clear()
データフレームの選択したカラムの中に日付データがあるか調べる	df[['列A', '列B']].isin([value])
option: ラベンダー色を使う	color = 'lavender'
データフレームのあるカラムはどれだけ分散しているか確認する	df['列A'].var()
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
線グラフの色をダークバイオレットに変更する	plt.plot(データ列x, データ列y, color='darkviolet')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
セットを更新不能なセットに変換する	frozenset(セット)
option: ３２ビット整数型を使う	np.int16 = np.int<nl>dtype = np.int16
データフレームの選択したカラムの値が欠損値か	df[['列A', '列B']].isna()
データシリーズの第二四分位数	ds.median()
散布図をディープスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
インディゴ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
リストの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
アイリスのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
option: EUCを使う	encoding = 'euc_jp'
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
整数が一桁	-9 <= 整数 <= 9
リストが空でないかどうか調べる	len(リスト) != 0
ファイルをオープンして]、読み込みストリームを使う	'r' = 'a'<nl>open(filepath, mode='r')
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
リストと配列についての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
データフレームからカテゴリデータのカラム名の一覧	df.select_dtypes('object').columns
option: ライトグレー色を用いる	color = 'lightgray'
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: オリベドラブ色を使う	color = 'olivedrab'
文字列の変数名を数式にする	sympy.Symbol(変数名)
ミディアムバイオレットレッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
二点間のユークリッド距離	math.dist(point, point2)
折れ線グラフを半透明の実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
度数分布図でデータ列を可視化する	plt.hist(データ列)
縦棒グラフを深紅色を用いて描画する	plt.bar(データ列x, データ列y, color='crimson')
ファイルパスを書き込みできるようにオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
識別子がトレースバック	inspect.istraceback(識別子)
データフレームから型リストデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
option: シーグリーンに色を設定する	color = 'seagreen'
データシリーズの中に文字列が含まれるか	ds.isin([value])
線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
特異値分解として多次元データを要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
数列とリストについて散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームの列の欠損値をxに指定する	df['列A'].fillna(x)
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
やわらかい青色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
縦棒グラフをミディアムパープル色を使って描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
識別子がスタックフレームか調べる	inspect.isframe(識別子)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
リストの末尾のn要素を除く	リスト[:-n]
データフレームの指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームをグループ化し、ある列に対し個数を計算する	df.groupby('列A')['列B'].count()
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフの左三角印の色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
option: フォントの色をアイボリーに設定する	color = 'ivory'
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
エポック秒の列からPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
実数の二進対数	math.log2(x)
空白を使う	' '
データフレームをCSVファイルを用いて出力する	df.to_csv('file.csv')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
オブジェクトに属性が存在する	hasattr(obj, プロパティ名)
n個の集まりからk個選ぶ方法	math.comb(n, k)
作画の背景色を暗くする	sns.set(style='darkgrid')
棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
レモンシフォン色を使ってヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
配列と配列についての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
リストから重複なく、n個ランダムに抽出する	random.sample(リスト, k=n)
option: プラムを用いる	color = 'plum'
ダークシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図のマーカーを菱形印にする	plt.scatter(データ列x, データ列y, marker='D')
データシリーズが何分か見る	ds.dt.minute
配列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
オブジェクトは整数クラスか調べる	int = int<nl>isinstance(obj, int)
双方向キューの末尾にイテラブルの各要素を追加する	両端キュー.extend(イテラブル)
文字列を最後の区切り記号で分割したときの残りの文字列	文字列.rpartition(セパレータ)[-1]
ファイルの絶対ファイルパス	os.path.abspath(filepath)
セットから共通要素を全て取り除く	セット.symmetric_difference_update(セット2)
変数名をキーとして辞書	dict(name='kogi', age=6)
タン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
バイト列からJSON形式のデータを読む	json.loads(バイト列.decode('unicode-escape'))
長さが一致しないときのzip	itertools.zip_longest(iterable, iterable2)
リストの要素を文字列としてタブで結合する	'\t'.join(map(str, リスト))
文字列中にひとつも英数字が含まれないか調べる	any(not c.isalnum() for c in 文字列)
データフレームから重複を認めてランダムに10行をサンプリングする	df.sample(10, replace=True)
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
xでデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(x)
n個の数値イテラブル	range(n)
ゲインズボロ色としてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
配列とリストについて散布図を描画し、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
こんにちは世界を出力する	print('Hello World')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
タプルをナンバリングしながら、ひとつずつ処理する	for i, value in enumerate(タプル):<nl><tab>print(i, value)  # value はタプルの要素
データフレームの指定したカラムの母標準偏差	df['列A'].std(ddof=0)
縦棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列を最後のカンマで二分して、後ろの方を見る	文字列.rpartition(',')[-1]
ヒストグラムの色をブラックに変更する	plt.hist(データ列, color='black')
option: マーカーの線幅を変更する	markeredgewidth = 2.5
実数を整数にする	int(x)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
赤い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
ValueMapでまとめて指定したカラムの値を置き換える	df['列A'].replace(ValueMap)
線グラフの色をクリムゾンに変更する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
散布図に赤い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
option: アイボリーにグラフの色をセットする	color = 'ivory'
バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データ列の各データが何回出現するか見る	ds.value_counts()
シエナ色を用いてヒストグラムを描画する	plt.hist(データ列, color='sienna')
option: レモンシフォンを使用する	color = 'lemonchiffon'
year年day月を日付時刻にする	datetime.datetime(year=year, month=month, day=1)
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームを各列毎に集約し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
折れ線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
xの小数点以下'3'桁までプリントする	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
ASCII限定として文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
option: 文字コードを文字列の示すエンコーディングに変更する	encoding = s
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
リストの要素が最初に見つかるインデックス	リスト.index(要素)
データフレームのあるカラムの欠損値を最頻値にする	df['列A'].fillna(df['列A'].mode().iloc[0])
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
option: ダークスレートブルーにフォントの色をする	color = 'darkslateblue'
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
二つの変数の値を改行せずプリントする	print(変数名, 変数名, end='')
データフレームのカラムの未入力値を後の行の値で置換する	df['列A'].fillna(method='bfill')
リストから要素を捨てる	リスト.remove(要素)
行列の要素ごとに加算する	aArray + aArray2
xを浮動小数点数型に変換する	float(x)
整数足す整数	整数 + 整数2
option: ディムグレーを使う	color = 'dimgrey'
option: データ型として８ビット整数型を用いる	np.int8 = np.int<nl>dtype = np.int8
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
配列とリストの散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
数列とリストについての散布図に赤い△マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
NaNを使う	math.nan
データフレームのカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
option: マーカーの色を赤にする	markerfacecolor = 'red'
昇順にタプルの要素を並べ変える	sorted(タプル, reverse=False)
option: ダークカーキ色を使う	color = 'darkkhaki'
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
実数の符号を同じにする	math.copysign(x, x2)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
要素がタプルに含まれるか確認する	要素 in タプル
マゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
二つのカラムからグループ化し個数を算出する	df.groupby(['列A', '列B'], as_index=False).count()
リストと配列について散布図を描画し、、下三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
行列の行	aArray[行番号]
カウンタの∪演算する	aCounter | aCounter2
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
ミディアムオーキッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
日付時刻データが日付時刻データより後ろ	aDatetime > aDatetime2
option: グラフの色をライトスカイブルーに指定する	color = 'lightskyblue'
半透明の点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
印字可能な文字を全部求める	string.printable
ある列の分位数	df['列A'].quantile(パーセント/100)
実数の自然対数を求める	math.log(x)
マップのキーとその項目を列挙する	辞書.items()
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
実数が正か調べる	x > 0
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
ファイルからnバイト、読み込む	f.read(n)
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
散布図に黒い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
グラフの見た目を綺麗にする	import seaborn as sns
セットを変更不能なセットに変換する	frozenset(セット)
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
リストを文字列として文字によって結合する	文字.join(map(str, リスト))
整数が一桁の正の整数か調べる	0 <= 整数 <= 9
カウンタのユニークな値をリストとして得る	list(aCounter)
線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
整数が奇数	整数 % 2 == 1
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
データフレームの列名を列挙する	df.columns
オブジェクトは論理値クラスかどうか	bool = int<nl>isinstance(obj, bool)
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
破線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashed')
辞書をJSON形式の文字列に変換する	json.dumps(辞書, ensure_ascii=False)
散布図の▼印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
棒グラフをゲインズボロ色を用いて描画する	plt.bar(データ列x, データ列y, color='gainsboro')
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
スピアマン相関係数でデータフレームの相関行列を算出する	df.corr(method='spearman')
データ列とリストの散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: グラフの色をチョコレートに設定する	color = 'chocolate'
データフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr()
整数が整数2よりも大きいか調べる	整数 > 整数2
散布図のポイント印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
文字列中にアスキー文字がないか	any(not c.isascii() for c in 文字列)
データフレームが重複しているか調べる	df.duplicated()
option: ミスティローズ色を使う	color = 'mistyrose'
option: ティールにグラフの色を設定する	color = 'teal'
文字列をケースを無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
真紅色で線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
ヒストグラムの色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
線形回帰データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
タプルの先頭	タプル[0]
文字列の開始位置番目と終了位置番目の間に部分文字列がない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
散布図の△印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
パールゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ゼロ埋めされた三二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
数列の各データを両端キューの末尾に追加する	両端キュー.extend(数列)
CSVファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
識別子はクラス	inspect.isclass(識別子)
y軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
折れ線グラフに三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
option: ライトイエロー色を使う	color = 'lightyellow'
要素を両端キューの最後から取り出す	両端キュー.pop()
クラス分類の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
数字を全部使う	string.digits
文字列がセットに含まれる	文字列 in セット
数列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(配列, 'norm')
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
ダークスラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
整数が奇数か	整数 % 2 == 1
乱数シードを初期化する	random.seed()
空集合	set()
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
部分文字列で文字列を二分して、前半を見る	文字列.partition(部分文字列)[0]
データ列とリストについて散布図をプロットして、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
日付時刻データは何分か知る	aDatetime.minute
カウンタを低頻出方からリストとして得る	aCounter.most_common()[::-1]
option: 区切りをカンマにする	sep = ','
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームから数値データを抽出する	df.select_dtypes('number')
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
現在の時間	datetime.date.today().hour
ミディアムターコイズにヒストグラムの色をする	plt.hist(データ列, color='mediumturquoise')
シャルトリューズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
シードをnで固定化する	random.seed(n)
データシリーズがどれだけ、分散しているか確認する	ds.var()
日付データからn時間を減らす	aDate - datetime.timedelta(hours=n)
イテラブルとリストの散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データ列の折れ線グラフを大バツ印を用いて描画する	plt.plot(データ列x, データ列y, marker='X')
デックの要素を逆順にする	両端キュー.reverse()
縦に二つのデータフレームを結合する	pd.concat([df, df2], axis=0)
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
縦棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
今日が何曜日か知る	datetime.datetime.today().weekday()
データフレームの指定したカラムの尖りを求める	df['列A'].skew()
ヒストグラムをパールバイオレットレッド色として描画する	plt.hist(データ列, color='palevioletred')
指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
二進文字列をバイト列にする	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
識別子がビルトインか調べる	inspect.isbuiltin(識別子)
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
折れ線グラフのラベルをセットする	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフの色を淡いピンク色にセットする	plt.plot(データ列x, データ列y, color='lightpink')
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
ある列の文字列が正規表現文字列にマッチしないデータを選ぶ	df[~df['列A'].str.match(正規表現)]
散布図を赤い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
要素がタプルに含まれるか調べる	要素 in タプル
あるカラムによって破壊的にデータフレームを降順にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
データをJSON形式であるファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
NaNも加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
データフレームをグループ化し、あるカラムに対し合計を計算する	df.groupby('列A')['列B'].sum()
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
xとyを改行で区切って出力する	print(x, y, sep='\n')
ファイルパスを書き込み用にEUCで開く]	open(filepath, mode='w', encoding='euc_jp')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
文字列を改行を用いて分割する	文字列.splitlines()
データフレームの中のカラムを四分位数ごとに分割する	pd.qcut(df[col], 4)
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
多次元データを多次元尺度構成法で文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ひとつも数字が文字列中にないか確認する	any(not c.isdigit() for c in 文字列)
配列のKurtosis	scipy.stats.kurtosis(配列, bias=False)
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
二つのリストから辞書	dict(zip(リスト, リスト2))
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
両端キューの左側から要素を取り出す	両端キュー.popleft()
線グラフを茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
識別子がモジュール	inspect.ismodule(識別子)
線グラフの色をライムにセットする	plt.plot(データ列x, データ列y, color='lime')
データフレームを関数でグループ化し、要約統計量を求める	df.groupby(関数).describe()
データフレームの選択した列を丸めて整数型にする	df[['列A', '列B']].round().astype(int)
日付データにn日を加える	aDate + datetime.timedelta(days=n)
フローラルホワイト色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
グラフの凡例を表示する	plt.legend()
本日をISO8601書式の文字列に変換する	datetime.datetime.today().isoformat()
線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
データフレームの一部のカラムの値が欠損値	df[['列A', '列B']].isna()
タプルの最後のn要素を取り除く	タプル[:-n]
を累乗に増やす	変数 **= 整数
option: ライムグリーンにグラフの色を設定する	color = 'limegreen'
３つのデータフレームを横向きに合体する	pd.concat([df, df2, df3], axis=1)
option: フォントの色をロイヤルブルーに設定する	color = 'royalblue'
ヒストグラムとしてデータフレームのカラムをプロットする	plt.hist(df[column])
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
三つの数値を順に表示する	print(数値, 数値, 数値)
正規表現をあらかじめコンパイルする	re.compile(pattern)
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
浮動小数点数を整数に変換する	int(x)
タプルのn番目からn2番目までの部分	タプル[n:n2]
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: 青緑に色を変更する	color = 'teal'
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
データシリーズを10の位で四捨五入して整数型にする	ds.round(-1).astype(int)
複数のデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=1)
データフレームを異なる列をキーにして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
データフレームの最初10行	df.head(10)
xを下線付きで表示できる文字列に変換する	f'\033[4m{x}\033[0m'
複素数型の０で全要素を初期化した行列を作る	np.zeros(行数, 列数, dtype=bool)
deqの末尾	両端キュー[-1]
文字列の接頭辞から部分文字列を除去する	文字列.removeprefix(部分文字列)
グラフのサイズをセットする	plt.figure(figsize=(横幅, 高さ))
折れ線グラフの△マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
右に両端キューの要素を回転させる	両端キュー.rotate(1)
データフレームの選択したカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
最頻値でデータフレームの選択した列の未入力値を置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
エポック秒の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
整数が1、もしくは2か確認する	整数 == 1 or 整数 == 2
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
棒グラフをピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='pink')
イテラブルをイミュータブルなにする	frozenset(イテラブル)
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
カンマ区切りのファイルを読む	pd.read_csv('file.csv', sep=',')
データ列のエポック秒を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
ヒストグラムを茶色色を使って描画する	plt.hist(データ列, color='brown')
ふたつの集合の積集合を計算する	セット.intersection(セット2)
表データを使用する	import pandas as pd
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
リスト内の要素が全て真か調べる	all(リスト)
option: カデットブルー色を使用する	color = 'cadetblue'
正接の逆数	math.atan(x)
二つの文字列を改行なしにプリントする	print(文字列, 文字列, end='')
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
イテラブルと数列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフを破線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
改行なしにxとyを表示する	print(x, y, end='')
整数を小数点以下第一位で丸める	round(x, 1)
シーケンスと列の直積	itertools.product(iterable, iterable2)
データフレームのカラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
折れ線グラフの色をライトブルーにする	plt.plot(データ列x, データ列y, color='lightblue')
グリッド線をグラフから表示しない	plt.grid(False)
両端キューの先頭にイテラブルの各値を追加する	両端キュー.extendleft(イテラブル)
線グラフをライトグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lightgreen')
既存の配列を元に全要素が初期値の行列	np.full_like(aArray, 初期値)
最初のカテゴリーを除き、データフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
キューをリストに変換する	list(両端キュー)
無限な数列	itertools.count()
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
データシリーズを丸めて、整数型にする	ds.round().astype(int)
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
ヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
縦棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
bとn2から成るペアを作る	(n, n2)
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データシリーズは何分か調べる	ds.dt.minute
整数が整数2以下か判定する	整数 <= 整数2
整数が組のどれかか調べる	aTuple = [0, 1, 2]<nl>整数 in aTuple
データシリーズの欠損値を平均値で置換する	ds.fillna(ds.mean())
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
リストの最初のn要素を取り除く	リスト[n:]
ある列リストついて、表データの重複を確認する	df.duplicated(subset=['列A', '列B'])
表の先頭5行	df.head(5)
指定したカラムの欠損値をその最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ケンドール相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
オブジェクトが関数か	inspect.isfunction(オブジェクト)
文字列リストをsepを区切りとして一つにする	sep.join(文字列リスト)
折れ線グラフの印を大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
箱髭図に簡単な説明をつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
データシリーズを100の位で四捨五入する	ds.round(-2)
オブジェクトは非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(オブジェクト)
日付データが金曜日か調べる	aDate.weekday() == 4
表を関数の値によってグループ化し、統計量を計算する	df.groupby(関数).describe()
線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
xを黄色でプリントする	print(f'\033[33m{x}\033[0m')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列の中の大文字・小文字を無視してパターンによる全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
リストを文字列として、タブで連結する	'\t'.join(map(str, リスト))
オブジェクトが文字列クラス	str = int<nl>isinstance(obj, str)
整数の8分の1を求める	整数 / 8
棒グラフをパウダーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='powderblue')
整数割り算の切り上げを算出する	(整数 + 整数2 - 1) // 整数2
文字列中に英数字があるか確認する	any(c.isalnum() for c in 文字列)
大文字・小文字を無視して正規表現を事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
入力ストリームを解放する	f.close()
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
イテラブルから両端キューを作成する	collections.deque(イテラブル)
option: 上三角マーカーを加える	marker = '^'
option: 色をブルーバイオレットに指定する	color = 'blueviolet'
オブジェクトがモジュールかどうか判定する	inspect.ismodule(オブジェクト)
折れ線グラフの左三角印を赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
縦棒グラフをプロットして、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
実数の床	math.floor(x)
トマト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
黒い丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
マッピングを空にする	辞書.clear()
オブジェクトはあるクラスか調べる	isinstance(obj, クラス)
Pandasのバージョンをプリントする	print(pd.__version__)
rgbの大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを指定した列によって並べる	df.sort_values(by='列A')
文字列中にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in 文字列)
折れ線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームの一部のカラムの中にいくつがあるか数える	df[['列A', '列B']].isin([value]).sum()
マップのエントリを列挙する	辞書.values()
データフレームの中の欠損値の合計を数える	df.isna().sum()
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
配列と配列について散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
実数のn乗して実数による余り	pow(x, n, y)
要素ひとつのりストを作る	[要素]
文字列がセットのいずれかテストする	文字列 in セット
option: 標準エラーを出力先にする	file = sys.stderr
option: ８ビット整数型を用いる	np.int8 = np.int<nl>dtype = np.int8
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
y軸の目盛りを対数に変更する	plt.yscale('log')
ファイルパスを開いて]、バイナリストリームを見る	'rb' = 'a'<nl>open(filepath, mode='rb')
データシリーズは何時か調べる	ds.dt.hour
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
option: ディムグレーを使う	color = 'dimgray'
回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
オブジェクトはリストか調べる	list = int<nl>isinstance(obj, list)
option: フォレストグリーンにグラフの色を設定する	color = 'forestgreen'
データフレームをCSV形式にBOM付きで出力する	df.to_csv('file.csv', encoding='utf_8_sig')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: ダークカーキを用いる	color = 'darkkhaki'
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
行列の最大	np.max(aArray)
二つの整数の差を計算する	整数 - 整数2
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
ある列の記述統計量	df['列A'].describe()
平均付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
赤い大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ネイピア数を使う	math.e
全部データフレームの一部のカラムを正規表現で置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
データフレームの指定したカラムの欠損値を直後の値に減らす	df['列A'].fillna(method='bfill')
文字列を区切り記号で分割して、前の方を見る	文字列.partition(セパレータ)[0]
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
整数が正の数か調べる	整数 > 0
折れ線グラフに四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
リストとイテラブルについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
文字列をカンマを使って区切り、列挙する	文字列.split(',')
option: ペールグリーン色を使う	color = 'palegreen'
文字列中に非アルファベットがあるか調べる	any(not c.isalpha() for c in 文字列)
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
文字列から指定した文字を取り除く	文字列.replace(文字, '')
文字列の左端から空白を除去する	文字列.lstrip('\t')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
グラフで使用するカラーパレットを指定する	sns.set(pallete=パレット名)
リストと配列の散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
option: 星マーカーを描画する	marker = '*'
タプルのn番目からn2番目まで	タプル[n:n2]
データ列の折れ線グラフをダイアモンド印として描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの指定したカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
文字列がセットに含まれないかどうか調べる	文字列 not in セット
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
option: ラインスタイルを一点鎖線にする	linestyle = 'dashbot'
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
リストと数列の散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームをタブ区切りのファイルから読む	pd.read_csv('file.tsv', sep='\t')
データフレームの第一四分位数	df.quantile(0.25)
データフレームのカラムの幾何平均を算出する	scipy.stats.gmean(df['列A'])
ディープスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
配列を両端キューにする	collections.deque(配列)
データフレームのNaNを直後の値に設定する	df.fillna(method='bfill')
option: グラフの色をグリーンに設定する	color = 'green'
replにまとめてデータフレームの指定したカラムの値を正規表現で置き換える	df['列A'].replace(pattern, repl, regex=True)
双方向キューの先頭にイテラブルの要素を追加する	両端キュー.extendleft(イテラブル)
ISO8601形式の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフの四角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
２つの浮動小数点数が近似値	math.isclose(x, x2)
新しいリッジ回帰モデルを作る	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
文字列の右側からタブを取り除く	文字列.rstrip('\t')
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
パパイヤウィップ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
折れ線グラフの左三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
データシリーズの値をValueMapで一度に置換する	ds.replace(ValueMap)
モデルをあてはめる	model.fit(説明変数, 目的変数)
option: グラフの色をコーラルにセットする	color = 'coral'
リストの末尾から要素を取り出す	リスト.pop()
文字列がセットの要素に含まれない	文字列 not in セット
データフレームのあるカラムが何秒か調べる	df['列A'].dt.second
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
折れ線グラフの色をシャルトリューズにする	plt.plot(データ列x, データ列y, color='chartreuse')
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
option: ゴールドにグラフの色を設定する	color = 'gold'
option: ポイントマーカーを用いる	marker = '.'
データフレームの次元の大きさ	df.shape
ブースティングとしてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
文字列を最後のカンマで二分して前半を使う	文字列.rpartition(',')[0]
option: 茶色色を使用する	color = 'brown'
コマンドラインで与えられたファイル名を一つずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
散布図のマーカーをポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
データフレームを二つの列をキーにして小さい順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
JSON形式の文字列を構文解析する	data = json.loads(文字列)
散布図の菱形マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: 色をインディゴに変更する	color = 'indigo'
グラフのタイトルを指定する	plt.title('グラフの名称')
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
データフレームの列を目的変数にする	目的変数 = df['列名']
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
イテラブルを計数器に変換する	collections.Counter(iterable)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
改行だけ出力する	print()
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
データ列とイテラブルについて散布図をプロットしてその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
データ列を箱ひげ図にする	plt.boxplot(データ列)
option: 色をピーチパフにする	color = 'peachpuff'
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
option: 淡いピンク色色を使用する	color = 'lightpink'
option: タンにグラフの色を設定する	color = 'tan'
ヒストグラムの色をライムグリーンにセットする	plt.hist(データ列, color='limegreen')
実数で数を割る	x / y
縦棒プロットを描いて、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
オブジェクトが名前付きタプルか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
数列とリストについて散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
配列の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
事前にパターンをコンパイルする	re.compile(pattern)
データフレームのインデックスをリセットする	df.reset_index()
部分文字列が文字列の開始位置番目からと終了位置までの範囲にないかどうか	文字列.find(部分文字列, 開始位置, 終了位置) == -1
折れ線グラフの三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
整数が3の倍数かどうか	整数 % 3 == 0
ライトシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
正規表現をコンパイルする	re.compile(pattern)
カウンタの文字列を増やす	aCounter[element] += 1
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
散布図に大バツ印を加える	plt.scatter(データ列x, データ列y, marker='X')
文字列中の文字を新しい文字へ置き換える	文字列.replace(部分文字列, 置換後の文字列)
自然数個のものからk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
UNIX秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
ミディアムシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
環境がWindows	sys.platform.startswith('win32')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
整数が負の数かどうか調べる	整数 < 0
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームを丸めて、整数型にする	df.round().astype(int)
文字列中に非数字があるかどうか調べる	any(not c.isdigit() for c in 文字列)
データフレームがどの程度分散しているか見る	df.var()
xを黄色で表示できる文字列にする	f'\033[33m{x}\033[0m'
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
アンティークホワイト色を使ってヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
青い点線で配列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフに青い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
オブジェクトはジェネレータ	inspect.isgenerator(オブジェクト)
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
平均値と標準偏差から乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
タイムスタンプデータをISO8601書式の文字列にする	aDatetime.isoformat()
グラフの題名を指定する	plt.title('グラフの名称')
指定したカラムの25パーセンタイルを算出する	df['列A'].quantile(0.25)
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
実数の天井	math.ceil(x)
まとめてデータシリーズの値を正規表現patternでreplに変更する	ds.replace(pattern, repl, regex=True)
文字が別の文字列に含まれないか	文字 not in 文字列
データフレームをグループ化し、それぞれの合計を求める	df.groupby('列A').sum()
データフレームをグループ化し、あるカラムに対し標準偏差を求める	df.groupby('列A')['列B'].std()
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
リスト内の要素は少なくともひとつ真か	any(リスト)
カウンタ同士で交わり	aCounter & aCounter2
配列の行ごとの合計値	np.sum(aArray, axis=1)
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
横棒グラフをグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='green')
option: 色をゴールデンロッドに指定する	color = 'goldenrod'
オブジェクトは整数	int = int<nl>isinstance(obj, int)
データフレームの列をグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
二つのカウンタのいずれかに含まれる要素を求める	aCounter | aCounter2
ガンマ関数	math.gamma(x)
ふたつの集合のインターセクション	セット.intersection(セット2)
リストの各要素を空白区切りで出力する	print(*リスト)
xのハッシュ値	hash(x)
データフレームの中の列を分割数nとしてビン分割する	pd.cut(df[col], n)
データ列を日付データにする	pd.to_datetime(ds)
標準入力から1文字だけ読む	sys.stdin.read(1)
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
明るくパレットをグラフの描画で用いる	sns.set(pallete='bright')
まとめて表の列名を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
二つ並べてデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
ホールドアウトを用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
データフレームの選択した列の母標準偏差	df[['列A', '列B']].std(ddof=0)
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
線グラフをビスク色を用いて描画する	plt.plot(データ列x, データ列y, color='bisque')
データシリーズの欠損値を直前の値に設定する	ds.fillna(method='ffill')
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
チョコレート色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
2次元リストをflattenする	sum(リスト)
ファイルパスを文字コードtextを用いてオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: ▲印を使う	marker = '^'
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
xについて数式の偏微分を行う	sympy.diff(数式, [|変数]x)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
グリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
データシリーズの月を見る	ds.dt.month
タプル内の要素が少なくともひとつ真かどうか調べる	any(タプル)
縦棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
度数分布図を三つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの平均値	df.mean()
option: ブラックにグラフの色を設定する	color = 'black'
ファイルパスを文字列の示すエンコーディングを用いてオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
データフレームから型リストデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
オブジェクトが非同期ジェネレータ関数	inspect.isasyncgenfunction(オブジェクト)
変数名はメソッドか	inspect.ismethod(識別子)
オーキッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
リストの末尾から要素をポップする	リスト.pop()
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームを1000の位で丸める	df.round(-3)
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
青い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
横棒グラフをプロットする	plt.barh(ラベル列, データ列)
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
データ列の推移を赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: グラフの色をライトブルーに指定する	color = 'lightblue'
文字列の先頭から改行を取り除く	文字列.lstrip('\n')
整数が偶数	整数 % 2 == 0
散布図の星印を赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
イテラブルを出現回数してカウンタから引く	aCounter.subtract(iterable)
データフレームの記述統計量を一度に確認する	df.describe()
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
整数プラス整数	整数 + 整数2
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
実数のタンジェントの逆数	math.atan(x)
データフレームのあるカラムが何日か調べる	df['列A'].dt.day
あるカラムの値によってデータフレームを分類する	df.groupby('列A')
線を青い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
option: ミッドナイトブルーを使う	color = 'midnightblue'
折れ線グラフの色を青紫にする	plt.plot(データ列x, データ列y, color='violet')
キーがマップに存在しているか調べる	キー in 辞書
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
黒い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
単位行列	np.eye(行数, 列数)
二つの数値を順に出力する	print(数値, 数値)
整数が1、もしくは2、もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
option: スレートブルー色を使用する	color = 'slateblue'
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
文字列が数字	文字列.isdigit()
カテゴリで色付けして、データフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
データ列の移り変わりを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
二つのデータフレームを列名を指定してジョインする	'<nl>pd.merge(df, df2, on='列A')
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
xを実数にする	float(x)
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
既存のファイルパスをSJISとして追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
第一コマンド引数	sys.argv[1]
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
散布図を黒いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ダークシアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
両端キューの順序を右にローテーションする	両端キュー.rotate(1)
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
日付データは日付データと同時	aDate == aDate2
外れ値を除いたデータフレームのカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
赤い実線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
横棒グラフを青紫色を使って描画する	plt.barh(データ列x, データ列y, color='violet')
イテラブルとリストをペアリングする	itertools.zip_longest(iterable, iterable2)
nでシードを初期化する	random.seed(n)
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ダークシアグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
タイムスタンプデータは日付時刻データよりあとか	aDatetime > aDatetime2
横棒グラフの色を珊瑚にする	plt.barh(データ列x, データ列y, color='coral')
両端キューの中に文字列は含まれてるか調べる	文字列 in 両端キュー
データフレームをあるカラムのカテゴリでグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
option: マーカーを下三角に変える	marker = 'v'
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
一度に正規表現でデータフレームの値を変更する	df.replace(pattern, repl, regex=True)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
配列のSkewnessを求める	scipy.stats.skew(配列, bias=False)
option: ゴーストホワイトを使用する	color = 'ghostwhite'
配列のケンドールの順位相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
分数の分母	q.denominator
リストをビン分割する	pd.cut(aList, aList)
データシリーズの分を使う	ds.dt.minute
列の重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
行列をイテラブルから作る	np.array(iterable)
文字列をカンマで二つに分け、、前半を使う	文字列.partition(',')[0]
データフレームのあるカラムの時	df['列A'].dt.hour
リストをカウントして、カウンタを更新する	aCounter.update(iterable)
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
グラフの中のy軸に軸ラベルをつける	plt.ylabel('y軸ラベル')
データ列と数列の散布図を描いて、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
全印字可能な文字	string.printable
現在のタイムスタンプ	datetime.datetime.now()
データフレームをTSVから読み込む	pd.read_csv('file.tsv', sep='\t')
オブジェクトは浮動小数点数クラスか調べる	float = int<nl>isinstance(obj, float)
rgbに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
マッピングにキーが存在しないとき、要素を追加する	辞書.setdefault(キー, element)
棒グラフをライトサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
でデータフレームの相関行列を求める	df.corr(method='kendall')
セットから全ての要素を取り除く	セット.clear()
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
データフレームのふたつの列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
小数点数とyの斜辺を求める	math.hypot(x, y)
option: 書き込み用に設定する	mode = 'w'
エクセルファイルからシートを指定してデータフレームをロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームから重複する行を残さずドロップする	df.drop_duplicates(keep=False)
ファイルを追加モードで開いて]、fとする	f = open(filepath, mode='a')
option: 箱ひげ図に平均を加える	showmeans = False
リストとリストについての散布図に黒い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
option: ダークターコイズ色を使う	color = 'darkturquoise'
配列とリストについて散布図を描画して、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
カテゴリデータを連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
縦方向に二つのデータフレームを一つにまとめる	pd.concat([df, df2], axis=0)
option: 最初のカラムをインデックスに指定する	index_col = 0
クラス分類をロバスト推定でする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ひとつも大文字が文字列中に含まれないか調べる	any(not c.isupper() for c in 文字列)
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
辞書から最後の項目をポップする	辞書.popitem()
要素をセットから除く	セット.remove(要素)
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ビン数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
三自然数の最小公倍数を算出する	math.lcm(n, n2, n3)
標準エラーを用いる	sys.stderr
複数のシートをExcelファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
例外の種類	etype, evalue, traceback = sys.exc_info()
横棒グラフをダークターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
オブジェクトがジェネレータかテストする	inspect.isgenerator(オブジェクト)
リストを分割数nで等量で分割する	pd.qcut(aList, n)
option: 色をダークシアンに設定する	color = 'darkcyan'
ダークスラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
菱形マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D')
横棒グラフをイエローグリーン色として描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
複数の列によってデータフレームを昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
オブジェクトがジェネレータか調べる	inspect.isgenerator(オブジェクト)
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
option: ミディアムパープル色を使う	color = 'mediumpurple'
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
ヒストグラムを深紅色として描画する	plt.hist(データ列, color='crimson')
option: マーカーの色を変更する	markerfacecolor = '#800080'
折れ線グラフのダイアモンド印の色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
コーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
カラーパレットを全般的に濃くする	sns.set(pallete='deep')
ファイルを読み込みモードで開いて]、fとする	f = open(filepath, mode='r')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
改行せず数値をプリントする	print(数値, end='')
データフレームの選択した列の中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
リスト中の要素が全て真か確認する	all(リスト)
ライトサーモン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームの選択したカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
option: カーキ色を用いる	color = 'khaki'
データシリーズをValueMapでまとめて置換する	ds.replace(ValueMap)
データフレームのある列が正規分布からどの程度、尖っているか確認する	df['列A'].skew()
ファイルを全て読み込む	f.read()
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
タブ文字を使う	'\t'
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
オブジェクトが整数か調べる	int = int<nl>isinstance(obj, int)
マッピングのキーの値	辞書[キー]
yがマイナス無限大に近づく際の数式の極限値を計算する	sympy.limit(数式, y, -oo)
スカイブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
要素がセットに含まれるかどうか	要素 in セット
データフレームの指定した列の平均値	df['列A'].mean()
折れ線グラフの色をオールドレースにセットする	plt.plot(データ列x, データ列y, color='oldlace')
ファイルをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
option: 文字コードtextを用いる	encoding = text
データフレームの指定したカラムの標準偏差	df['列A'].std()
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームの中に文字列があるか確認する	df.isin([value])
文字列中にひとつでも非英数字が含まれるか	any(not c.isalnum() for c in 文字列)
グラフの色テーマを指定する	sns.set(pallete=パレット名)
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
ミディアムパープル色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
リストから1個ランダムに選ぶ	random.choice(リスト)
option: 色をプラムに設定する	color = 'plum'
option: 色をグリーンにセットする	color = 'green'
データフレームのあるカラムの標準偏差	df['列A'].std()
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
ふたつの列としてグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
データフレームのヒストグラムを縦横に並べて、見る	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
文字列をカンマで二分し、前半を見る	文字列.partition(',')[0]
複数の列をキーにしてデータフレームをソートし、、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
option: 文字列を分割記号で使う	sep = s
データフレームのある列の平均値	df['列A'].mean()
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
option: セパレータをスラッシュにする	sep = '/'
三つの変数の値を順にプリントする	print(変数名, 変数名, 変数名)
データフレームをエクセルファイルファイルで保存する	df.to_excel('file.xlsx')
文字列をコロンで二分し、、前半を使う	文字列.partition(':')[0]
タプルの要素を逆順にする	タプル[::-1]
option: ロイヤルブルーに色を設定する	color = 'royalblue'
xとyを改行で区切ってプリントする	print(x, y, sep='\n')
ユニークな値を要素とするベクトルを使う	np.unique(aArray)
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
データをソートしてJSONフォーマットにエンコードする	json.dumps(データ, ensure_ascii=False, sort_keys=True)
マップのキーに対応した値を得る	辞書[キー]
散布図に黒い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
クラスのサブクラスか確認する	issubclass(サブクラス, クラス)
ゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データ列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
折れ線グラフをダークサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
エクセルファイルファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
option: ダークカーキを使用する	color = 'darkkhaki'
開始位置から終了位置までに部分文字列がいくつか含まれるか調べる	文字列.count(部分文字列, 開始位置, 終了位置)
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
データフレームの指定したカラムを千の位で丸めて、整数にする	df['列A'].round(-3).astype(int)
option: グラフの色をラベンダーブラッシュにする	color = 'lavenderblush'
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
縦軸の目盛りを非表示にする	plt.yticks([])
折れ線グラフをレモンシフォン色を使って描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をホワイトスモーク色を用いて描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データシリーズの歪度	ds.kurt()
オブジェクトは文字列	str = int<nl>isinstance(obj, str)
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
縦棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
空のガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
文字列を出力ストリームに書く	s = ''<nl>f.write(s)
両端キューの最初から要素を取り出す	両端キュー.popleft()
文字列をカンマで分割して列挙する	文字列.split(',')
棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
現在は何秒か知る	datetime.date.today().second
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
回帰分析をニューラルネットで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
グリーンイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
両端キューをリストにする	list(両端キュー)
文字列中にひとつでも空白が含まれるか調べる	any(c.isspace() for c in 文字列)
多次元尺度構成法として多次元データを整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
文字列の先頭がsub	文字列.startswith(部分文字列)
リスト中の最初の要素を探す	リスト.index(要素)
紺碧色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
３つの変数の値を順にプリントする	print(変数名, 変数名, 変数名)
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
option: 色をライトスチールブルーに指定する	color = 'lightsteelblue'
ヒストグラムの色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ミディアムバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
行列の行ごとの最小値を求める	np.min(aArray, axis=1)
文字列の両端からタブを除く	文字列.strip('\t')
データフレームの行の名前を一度に付け直す	df.rename(index={x: y})
線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
リストの末尾に別のリストを追加する	リスト.extend(リスト2)
データフレームの先頭n行	df.head(n)
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
折れ線グラフの色を珊瑚に変更する	plt.plot(データ列x, データ列y, color='coral')
文字列中に小文字が含まれるかどうか判定する	any(c.islower() for c in 文字列)
線グラフを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: グラフの線の種類を実線に指定する	linestyle = 'solid'
線グラフを赤い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
書き込みできるようにファイルをオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
セットが空集合でないか調べる	len(セット) != 0
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
異なる列をキーとして二つのデータフレームを全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
疑似乱数を得る	random.random()
散布図としてデータフレームを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
シーケンスとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
三つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
文字列の指定された位置より前に部分文字列がないかどうか確認する	文字列.find(部分文字列, 0, 終了位置) == -1
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
表計算ファイルを読む	pd.read_excel('file.xlsx')
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
option: フォントの色をミディアムブルーに指定する	color = 'mediumblue'
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
データフレームを散布図で描画して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
配列とリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色を珊瑚にセットする	color = 'coral'
追加できるようにファイルをBOM付きで開く]	open(filepath, mode='a', encoding='utf_8_sig')
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
ドジャーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
黒いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
option: ヘッダを自動的な連番に設定する	header = None
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
横棒グラフをホワイトスモーク色を使って描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ペールグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
連立方程式の解を計算する	sympy.solve([数式, 数式2])
文字列の左側から部分文字列を除く	文字列.lstrip(部分文字列)
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
文字列をISO書式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
データをJSONフォーマットでファイル出力に保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
データフレームを２つの列によって降順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
行列から重複を除いた行列を作る	np.unique(aArray)
リストと数列の散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列中にひとつでもアルファベットがあるかどうか調べる	any(c.isalpha() for c in 文字列)
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
あるカラムの文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
赤い▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
データフレームのあるカラムの平均値を求める	df['列A'].mean()
データフレームの列名リストを見る	df.columns
二つの集合の対称差を求める	セット.symmetric_difference(セット2)
option: アンティークホワイトに色を設定する	color = 'antiquewhite'
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームの列の文字列長を列として使う	df[col].str.len()
オブジェクトがタプル型か判定する	tuple = int<nl>isinstance(obj, tuple)
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
整数の2乗を計算する	整数 ** 2
option: アリスブルーにグラフの色を変更する	color = 'aliceblue'
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
文字列が空白文字からなる	文字列.isspace()
データフレームから型リストで指定されたデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
横棒グラフを描画して、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
数式を変数についてn階偏微分する	sympy.diff(数式, 変数, n)
ローングリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
両端キューの上限制限された長さ	両端キュー.maxlen
リストとリストについての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
option: 小麦色にグラフの色をセットする	color = 'wheat'
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
カンマで文字列を区切って、文字列リストにする	文字列.split(',')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
今日が月曜日か調べる	datetime.datetime.today().weekday() == 0
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
option: アクアマリンを使用する	color = 'aquamarine'
0から始まる無限の数列を求める	itertools.count()
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
データフレームの選択したカラムの欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
Pythonのバージョン	sys.version
ラインを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ヒストグラムの線種を一点鎖線にセットする	plt.hist(データ列, linestyle='dashbot')
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
リストとリストについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
データフレームを並べて、下位を取り出す	df.sort_values('キーとなる列').tail(n)
ヒストグラムの色をやわらかい青に指定する	plt.hist(データ列, color='cornflowerblue')
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
パレットトルコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列の開始位置以降に部分文字列が存在しない	文字列.find(部分文字列, 開始位置) == -1
実数から実数を引く	x - y
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
折れ線グラフをオールドレース色を使って描画する	plt.plot(データ列x, データ列y, color='oldlace')
日付を表現した文字列をdatetime64型にする	pd.to_datetime(日付を表現した文字列)
カラムの最頻値	mode, count = scipy.stats.mode(df['列A'])
ペルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
整数がnで割り切れるか確認する	整数 % n == 0
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
タイムスタンプデータの分数を使う	aDatetime.minute
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
破壊的にデータフレームをある列によって昇順に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
カラーバーを描く	plt.colorbar()
1行から２つの文字列を取り出す	A, B = map(str, input().split())
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
縦棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
エポック秒を日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
縦棒グラフをリネン色を用いて描画する	plt.bar(データ列x, データ列y, color='linen')
グラフの色を全般的に濃くする	sns.set(pallete='deep')
相関を可視化する	plt.scatter(データ列x, データ列y)
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
列を全て日付データに変換する	pd.to_datetime(df['列A'])
二進数文字列を整数に変換する	int(文字列, 2)
K-S検定を行う	scipy.stats.kstest(配列, 'norm')
rgbの上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
JSON形式のファイル入力を辞書にする	json.load(ファイル入力)
上三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームの欠損値を直前の値で補完する	df.fillna(method='ffill')
option: 色をオールドレースに設定する	color = 'oldlace'
option: グラフの線の種類を実線にセットする	linestyle = 'solid'
データフレームから重複をインプレイスで除く	df.drop_duplicates(inplace=True)
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
option: フローラルホワイト色を用いる	color = 'floralwhite'
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
文字列の終了位置より前に部分文字列がある	文字列.find(部分文字列, 0, 終了位置) != -1
要素をデックにエンキューする	両端キュー.append(要素)
折れ線グラフをスノー色を使って描画する	plt.plot(データ列x, データ列y, color='snow')
列の各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
折れ線グラフの星印の大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
実数のn乗の整数剰余を求める	pow(x, n, y)
データを平均と分散を使って標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: インディアンレッド色を使用する	color = 'indianred'
ファイルをバイナリモードとして開いて]、fとする	f = open(filepath, mode='rb')
折れ線グラフを描く	plt.plot(データ列x, データ列y)
タイタニックのデータセットをロードする	df = sns.load_dataset('titanic')
棒グラフをインディゴ色を用いて描画する	plt.bar(データ列x, データ列y, color='indigo')
option: スレートブルーにグラフの色を変更する	color = 'slateblue'
ある列の値がx以上、y未満のデータを取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
option: 四角マーカーを使う	marker = 's'
データ列を全て日付データに変換する	pd.to_datetime(ds)
二数の最小値	min(x, y)
replにデータフレームの値をまとめて正規表現patternで置き換える	df.replace(pattern, repl, regex=True)
文字列の無限イテラブル	itertools.repeat(element)
横棒プロットを描いて中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
スクリプトのファイルの名前	sys.argv[0]
ひとつも英数字が文字列中に存在しないか調べる	any(not c.isalnum() for c in 文字列)
最頻値でデータフレームのあるカラムの欠損値を埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
横棒グラフをライム色として描画する	plt.barh(データ列x, データ列y, color='lime')
xがマイナス無限大に近づく際の数式の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
データフレームの欠損値を平均値で補う	df.fillna(df.mean())
xを青色で表示する	print(f'\033[34m{x}\033[0m')
円周率	math.pi
列名を指定して二つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
ヒストグラムの色をフクシアにする	plt.hist(データ列, color='fuchsia')
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームのn行まで取り出す	df[:n]
データフレームを列によってまとめたグループを求める	df.groupby('列A')
３つの数値を順にプリントする	print(数値, 数値, 数値)
option: バイナリ書き込み用に設定する	mode = 'wb'
option: ダークブルー色を使う	color = 'darkblue'
線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
リストから標本抽出する	random.sample(リスト, 抽出したい個数)
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
棒グラフを耐火レンガ色を使って描画する	plt.bar(データ列x, データ列y, color='firebrick')
整数がセットのメンバーに含まれるか	数 in セット
option: 色をハニーデューに設定する	color = 'honeydew'
option: 読み込まない列番号をnamesで指定する	skiprows = names
ヒストグラムを白くする	plt.hist(データ列, color='w')
線形回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
大文字と小文字を交換する	文字列.swapcase()
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームの指定したカラムを1000の位で丸める	df['列A'].round(-3)
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
文字列をコロンで二分して前半を見る	文字列.partition(':')[0]
option: グラフの色をライムに変更する	color = 'lime'
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームの指定したカラムのNaNを前の行の値に増やす	df['列A'].fillna(method='ffill')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
マップに別のマップ2のエントリを追加する	辞書.update(辞書2)
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
タブ区切りのファイルをデータフレームとして読む	pd.read_csv('file.tsv', sep='\t')
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
モジュールとして自分自身を	sys.modules[__name__]
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
ある列によって昇順にデータフレームをソートする	df.sort_values(by='列A', ascending=True)
半透明の実線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
デピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
色付きの実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフを半透明の点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データシリーズを10の位で四捨五入する	ds.round(-1)
データフレームの選択した列の中にいくつがあるか数える	df[['列A', '列B']].isin([value]).sum()
整数の左シフトを求める	整数 << n
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
option: 色をダークオリーブグリーンにする	color = 'darkolivegreen'
option: ブラウンを使う	color = 'brown'
二つの文字列が同じ	文字列 == 文字列2
両端キューの末尾にリストの各要素を追加する	両端キュー.extend(リスト)
数列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
辞書のキーを列挙する	list(辞書)
nが整数か調べる	整数 == 整数2
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
タプルの中の一番大きい値	max(タプル)
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
option: 印を右三角に変更する	marker = '>'
縦棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: スカイブルー色を用いる	color = 'skyblue'
淡い茶色色のヒストグラムを描画する	plt.hist(データ列, color='tan')
部分文字列が文字列の開始位置以降にある	文字列.find(部分文字列, 開始位置) != -1
データフレームのカラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
データフレームの列の中のNaNの合計を求める	df['列A'].isna().sum()
データフレームの列のユニークな要素を確認する	df[col].unique()
ベクトルの転置行列	aArray.T
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
等しい量になるように配列をビン数nとして分割する	pd.qcut(aArray, n)
新しい文字列を用いて文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
ファイルを追加モードでオープンして]fとする	f = open(filepath, mode='a')
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
コマンドラインで指定されたファイル名を一つずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
ヒストグラムをアイボリー色を使って描画する	plt.hist(データ列, color='ivory')
データフレームのあるカラムの日を使う	df['列A'].dt.day
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
日付時刻データからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
データ列を使う	import pandas as pd
リストと配列の散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフの色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
配列の分散を算出する	np.var(aArray)
option: バイナリモードを使う	mode = 'rb'
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
カラムのどの値が頻出か見る	df['列A'].mode()
赤い下三角マーカーをイテラブルとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
リストからn個ランダムに選んでリストにする	random.choices(リスト, k=n)
データ列の推移を一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの未入力値をその最小値で埋める	df.fillna(df.min())
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
十六進数字を全て見る	string.hexdigits
オブジェクトがあるクラス	isinstance(obj, クラス)
外れ値を除いた配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
0から始まる無限の整数リスト	itertools.count()
折れ線グラフの色をミッドナイトブルーにセットする	plt.plot(データ列x, データ列y, color='midnightblue')
文字列中にひとつもアルファベットが存在しないか調べる	any(not c.isalpha() for c in 文字列)
データフレームのKurtosisを算出する	df.kurt()
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
カテゴリ列で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
タイムスタンプデータの時刻	aDatetime.time()
第一コマンドライン	sys.argv[1]
ヘッダを付けずデータフレームを保存する	df.to_csv('file.csv', header=None)
縦棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
タプルをn回、連結する	タプル * n
行列の次元を変形する	aArray.reshape(行数, 列数)
辞書の項目名を列挙する	list(辞書)
画面用にグラフを設定する	sns.set(context='notebook')
option: ターコイズ色を用いる	color = 'turquoise'
双方向キューの中に要素は含まれてるかどうか調べる	要素 in 両端キュー
データフレームのヒストグラムを横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名')
整数の二進数表現を求める	bin(整数)
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
ヒストグラムを使ってデータフレームの列を描画する	plt.hist(df[column])
option: 印を△に変更する	marker = '^'
ふたつの列からグループ化し標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
文字列の両端からタブを取り除く	文字列.strip('\t')
日付を用いる	import datetime
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
データフレームを指定した列の値によってグループ化し記述統計量を計算する	df.groupby('列A').describe()
option: グラフの色をライトグレーに設定する	color = 'lightgray'
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
NULLに等しい識別子	None
リストとリストについての散布図に菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D')
読み込みモードでファイルをオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
option: スチールブルーにフォントの色を設定する	color = 'steelblue'
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
多次元データを主成分分析として要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
行列の列ごとの分散	np.var(aArray, axis=0)
プロットの描画で濃く色を使う	sns.set(pallete='deep')
変数xについて数式をn階微分する	sympy.diff(数式, [|変数]x, n)
数式の部分分数化する	sympy.apart(数式)
リスト中の要素が最初に見つかる位置を探す	リスト.index(要素)
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
xを黒色で出力する	print(f'\033[30m{x}\033[0m')
散布図をレベッカパープル色として描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
四分位数ごとに列をビン分割する	pd.qcut(ds, 4)
両端キューは空でないか調べる	len(両端キュー) != 0
ヒストグラムをスカイブルー色を使って描画する	plt.hist(データ列, color='skyblue')
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
文字列を代数計算の変数に変換する	sympy.Symbol(変数名)
浮動小数点数の絶対値を求める	math.fabs(x)
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
リストと配列の散布図を描画し、、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
箱髭図を横向きにする	plt.boxplot(データ列, vert=False)
ラインを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
配列と配列についての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの中にと日付データがいくつあるか数える	df.isin([value, value2]).sum()
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
縦棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
文字列を最後から空白で分割する	文字列.rsplit()
データフレームの指定したカラムの中に文字列と文字列があるか	df['列A'].isin([value, value2])
リストと配列についての散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列の右端から部分文字列を取り除く	文字列.rstrip(部分文字列)
文字列はセットのいずれでもないどうか	文字列 not in セット
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
option: フォントの色をリネンに設定する	color = 'linen'
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
浮動小数点数の最大値を求める	sys.float_info.max
相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
リストの最後を除く	リスト[:-1]
全印字	string.printable
データフレームの選択したカラムを四捨五入する	df[['列A', '列B']].round()
グラフのグリッドを白くする	sns.set(style='whitegrid')
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図をチョコレート色を用いて描画する	plt.scatter(データ列x, データ列y, color='chocolate')
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
yについて数式の微分を行う	sympy.diff(数式, y)
データをJSON形式でファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
L1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
数のn乗	pow(x, n)
散布図をrgbの▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの指定したカラムの標準偏差を計算する	df['列A'].std()
エクセルをデータフレームとしてロードする	pd.read_excel('file.xlsx')
三変数の最も大きい値	max(x, y, z)
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
配列の列ごとの標準偏差	np.std(aArray, axis=0)
ヒストグラムの色をライムに変更する	plt.hist(データ列, color='lime')
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
リストの末尾のn要素を捨てる	リスト[:-n]
rgbのバツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
複数の列によって昇順にデータフレームをソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
マッピングの全項目をクリアする	辞書.clear()
option: ゴールデンロッドを使う	color = 'goldenrod'
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
要素が全て初期値のベクトルを作る	np.full(要素数, 初期値, dtype=np.int)
本日のタイムスタンプを使う	datetime.datetime.today()
option: フォントの色をパールバイオレットレッドに変更する	color = 'palevioletred'
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, markersize=2.0)
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
赤い△マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
２つの最大値	max(x, y)
フォーマットで列を日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
配列からn要素、サンプリングしてリストにする	random.sample(配列, k=n)
線を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
黒いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
ファイルを絶対パスにする	os.path.abspath(filepath)
ヒストグラムの色をペルーにする	plt.hist(データ列, color='peru')
赤色で表示できる文字列に変換する	f'\033[31m{x}\033[0m'
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: シートの名前をセットする	sheet_name = ['A', 'B']
データフレームとデータシリーズを横につなぐ	pd.concat([df, ds], axis=1)
実数を浮動小数点数で整数除算する	x // y
マップの浅いコピーを新規生成する	辞書.copy()
option: アクアを使う	color = 'aqua'
配列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
青い破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: グラフの色をオレンジレッドに変更する	color = 'orangered'
横棒グラフをバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='violet')
文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
小数点数のtanの逆数を求める	math.atan(x)
マゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
ヒストグラムを貝殻色として描画する	plt.hist(データ列, color='seashell')
ヒストグラムのビン数を変更する	plt.hist(データ列, bins=区関数)
本日をタプルにする	datetime.datetime.today().timetuple()
線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
option: グラフの色をダークシアグリーンにセットする	color = 'darkseagreen'
横棒グラフをコーンズシルク色として描画する	plt.barh(データ列x, データ列y, color='cornsilk')
タイムスタンプデータが何秒か知る	aDatetime.second
二つの文字列が等しくないか調べる	文字列 != 文字列2
日付時刻データからn日を減らす	aDatetime - datetime.timedelta(days=n)
データシリーズの中の欠損値の数をカウントする	ds.isna().sum()
リストをひとつ置きに得る	リスト[::2]
ファイルをオープンして]、バイナリ書き込みストリームを求める	'wb' = 'a'<nl>open(filepath, mode='wb')
棒グラフをゴールド色を用いて描画する	plt.bar(データ列x, データ列y, color='gold')
マップの項目をひとつずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
2つの浮動小数点数が十分に近い	math.isclose(x, x2)
全要素を0で初期化した配列を作成する	np.zeros(要素数)
カーキ色を使ってヒストグラムを描画する	plt.hist(データ列, color='khaki')
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
option: 文字列を改行の代わりに用いる	end = 文字列
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
リストから一つランダムに選ぶ	random.choice(リスト)
データフレームをランダムサンプリングする	df.sample()
rgbの大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
スライド用にグラフを設定する	sns.set(context='talk')
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームを２つの列によってソートする	df.sort_values(by=['列A', '列B'])
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
配列が何のデータ型か調べる	aArray.dtype()
プロットに被らない場所に補足を表示する	plt.legend(loc='best')
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームの列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
ゴールド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
辞書のコピーを生成する	dict(辞書)
日付データが土曜日か調べる	aDate.weekday() == 5
ゼロ埋めされた配列	np.zeros(要素数)
データシリーズの中に文字列と日付データがいくつあるか数える	ds.isin([value, value2]).sum()
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
入力から2つの整数を取り出す	A, B = map(int, input().split())
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
option: 三二ビット整数型を使う	np.int16 = np.int<nl>dtype = np.int16
散布図に青い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
deqの右	両端キュー[-1]
文字列からformatのパターンを用いてタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列を最後からセパレータで区切る	文字列.rsplit(セパレータ)
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
２つの列を組み合わせてグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
日付時刻データが日曜日	aDatetime.weekday() == 6
リストの要素をスワップする	リスト[x], リスト[y] = リスト[y], リスト[x]
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
日付時刻データとタイムスタンプデータの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
長さの制限された両端キューを配列から作成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
option: オリベドラブを用いる	color = 'olivedrab'
データフレームの一部のカラムのNaNを平均で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
0からnまでの整数列を得る	list(range(n+1))
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
オブジェクトはタプルクラスのインスタンスか確認する	tuple = int<nl>isinstance(obj, tuple)
ディムグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
両端キューの最大長	両端キュー.maxlen
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
ドジャーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
日付時刻データを数値にする	aDatetime.timestamp()
ファイルの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
ライトシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
折れ線グラフに赤い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
現在が何秒か知る	datetime.date.today().second
数列とリストの散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストの先頭の値	リスト[0]
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
文字列を回数制限して置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
辞書から項目名とバリューのペアを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
指定した列の値で集計し、それぞれの個数を求める	df.groupby('列A').count()
データフレームの指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
カラムを1000の位で丸める	df['列A'].round(-3)
ピアソンでデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
辞書に辞書2の項目を更新する	辞書.update(辞書2)
文字列をパターンで区切る	re.split(pattern, s)
データフレームの中である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
sepを区切りとして文字列リストをつなげる	sep.join(文字列リスト)
ブルーバイオレット色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
実数の逆正弦を計算する	math.asin(x)
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
句読点文字を全部使う	string.punctuation
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
ヒストグラムで配列を可視化する	plt.hist(データ列)
オブジェクトがプロパティを持つかどうか調べる	hasattr(obj, プロパティ名)
文字列の開始位置からと終了位置までの間に部分文字列がないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
折れ線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
縦棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
option: ダークサーモン色を使う	color = 'darksalmon'
線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
UNIX時間のデータ列からPandasの日付型にする	pd.to_datetime(ds, unit='s', utc=True)
カウンタのそれぞれの文字列を、そのカウントだけ列挙する	aCounter.elements()
データフレームの指定したカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
読み込み用にファイルパスをオープンして]、fとする	f = open(filepath, mode='r')
文字列を一文字ずつ表示する	for c in 文字列:<nl><tab>print(c)
option: 印を星に変える	marker = '*'
数列と配列の散布図を描画し、、マーカーを四角にセットする	plt.plot(データ列x, データ列y, marker='s')
キューの先頭	両端キュー[0]
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
符号付きで整数をバイト列にする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
kを底とする実数の対数	math.log(x, k)
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
散布図の下三角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
青い線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームのあるカラムを配列として抽出する	df['列A'].values
option: 文字コードtextを使う	encoding = text
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
改行しなくてxをプリントする	print(x, end='')
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
データシリーズの文字列を欠損値にする	ds.replace(値, np.nan)
度数分布図のビン数を指定する	plt.hist(データ列, bins=区関数)
緑色で表示できる文字列に変換する	f'\033[32m{x}\033[0m'
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
文字列がセットのメンバーか調べる	文字列 in セット
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
破線にヒストグラムのラインスタイルを設定する	plt.hist(データ列, linestyle='dashed')
散布図を黒い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
列名を指定してデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
色差別なくカラーパレットをプロットの描画で使う	sns.set(pallete='colorblind')
配列とイテラブルのデカルト積	itertools.product(iterable, iterable2)
グラフの縦横比を等しくする	plt.axis('equals')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
データフレームをダミー変数にする	pd.get_dummies(df)
シーケンスの全順列を得る	itertools.permutations(iterable)
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データシリーズの中に文字列と文字列がいくつ含まれるか数える	ds.isin([value, value2]).sum()
xが無限大に近づく時、数式の極限値を求める	sympy.limit(数式, [|変数]x, oo)
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
タプルの順序をシャッフルする	tuple(random.sample(タプル, len(タプル)))
方程式として数式の変数の解を計算する	sympy.solve(数式, 変数)
option: ホットピンクを使用する	color = 'hotpink'
スプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフのマーカーを四角印にする	plt.plot(データ列x, データ列y, marker='s')
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
多次元データをt-SNEを用いて項次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
カラムの調和平均	scipy.stats.hmean(df['列A'])
キーが辞書に存在するか調べる	キー not in 辞書
データフレームの複数の列を削除する	df.drop(['列A', '列B'], axis=1, inplace=True)
マップ上でキーが定義済みか	キー in 辞書
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
option: グラフの色をバリーウッドにセットする	color = 'burlywood'
ファイルパスを読み込みモードを用いてオープンして]fとする	f = open(filepath, mode='r')
サポートベクトル分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
横に並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
データフレームのNaNをモードに増やす	df.fillna(df.mode().iloc[0])
アルファベットを使う	string.ascii_letters
実数を実数で割って、切り捨てる	x // y
文字列はセットに含まれない	文字列 not in セット
ビンの数を設定して度数分布図をプロットする	plt.hist(データ列, bins=区関数)
リストをヒストグラムにする	plt.hist(データ列)
散布図をタン色として描画する	plt.scatter(データ列x, データ列y, color='tan')
日付データと日付データの時間差を計算する	aDate - aDate2
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
ファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
オブジェクトがコルーチンか調べる	inspect.iscoroutine(オブジェクト)
両端キューの最後に整数を付け加える	両端キュー.append(整数)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
データフレームからランダムに5行を取り出す	df.sample(5)
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
非小文字が文字列中に含まれるかどうか調べる	any(not c.islower() for c in 文字列)
パーセント付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
タプルの合計値	sum(タプル)
分類木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
データフレーム中のNaNをドロップし、みる	df.dropna()
最大値でデータシリーズのNaNを補完する	ds.fillna(ds.max())
浮動小数点数の小数点以下を丸める	round(x)
rangeの無限バージョン	itertools.count(start=n, step=step)
リストを文字列として、指定した文字列で連結する	文字列.join(map(str, リスト))
折れ線グラフの△マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
文字コードエスケープで文字列をバイト列にする	文字列.encode(encoding='unicode_escape')
option: ライム色を用いる	color = 'lime'
MSDで多次元データを整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームのカラムの一意な要素	df[col].unique()
列とシーケンスをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
タプルが少なくともひとつ真	any(タプル)
カウンタの全カウント	aCounter.total()
現在のUNIX時刻	int(time.time())
キュー中の整数の出現数を数える	両端キュー.count(整数)
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
色付きの一点鎖線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
タプルが空でないかどうか調べる	len(タプル) != 0
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
グリッド線を黄色くする	plt.grid(color='y')
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
option: オリベドラブに色を変更する	color = 'olivedrab'
osモジュールをインポートする	import sys<nl>import os
データフレームの一部のカラムの欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
サンディーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='sandybrown')
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
散布図に▽印を加える	plt.scatter(データ列x, データ列y, marker='v')
文字列を右寄せにする	文字列.rjust(文字列幅)
小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
作画の色調を指定する	sns.set(pallete=パレット名)
コーンズシルク色を用いてヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
ファイルパスから追加ストリームを開き]、fとする	f = open(filepath, mode='a')
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームの一部のカラムは正規分布からどの程度歪んでいるか見る	df[['列A', '列B']].kurt()
部分文字列がsubで始まるか調べる	文字列.startswith(部分文字列)
データフレームの列名を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
項目名ワード引数で辞書に更新する	辞書.update(**kwargs)
あるカラムの文字列が部分文字列で始まらない行を取り出す	df[~ df['列A'].str.startswith(部分文字列)]
数列を度数分布図で可視化する	plt.hist(データ列)
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
浮動小数点数を実数で除算した余り	x % y
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
折れ線グラフの左三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ひとつでも非小文字が文字列中に存在するかどうか調べる	any(not c.islower() for c in 文字列)
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
イテラブルを変更不能なセットに変換する	frozenset(イテラブル)
インディゴ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
セットを別のセットとの差分だけに更新する	セット.difference_update(セット2)
ファイルパスからバイナリ書き込みストリームを開き]、fとする	f = open(filepath, mode='wb')
配列の調和平均を見る	scipy.stats.hmean(配列)
タイムスタンプデータからn日を減らす	aDatetime - datetime.timedelta(days=n)
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
option: ダークマゼンタにグラフの色をする	color = 'darkmagenta'
ヒストグラムをミディアムオーキッド色として描画する	plt.hist(データ列, color='mediumorchid')
線グラフの色をオリベドラブにセットする	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームの列の未入力値を直前の値で埋める	df['列A'].fillna(method='ffill')
数列のスピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
横棒グラフをブラウン色で描画する	plt.barh(データ列x, データ列y, color='brown')
nからn2までの整数リスト	list(range(n, n2+1))
散布図の右三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
整数が一桁の数か	0 <= 整数 <= 9
データフレームを２つの列にグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
ある列の値がxに等しく、かつ別の列の値がyに等しい行を選択する	df[(df['列A'] == x) & (df['列B'] == y)]
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
空の階層化マップ	collections.ChainMap()
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
リストとイテラブルについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
UNIX時間の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
線グラフを赤い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームの欠損値を削除し、みる	df.dropna()
ある列のカテゴリで集計し、それぞれの分散を計算する	df.groupby('列A').var()
折れ線グラフのマーカーを▽にする	plt.plot(データ列x, データ列y, marker='v')
エンコーディングを調べる	sys.getdefaultencoding()
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
エクセルファイルファイルからカンマ区切りのファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
option: パールバイオレットレッドを使う	color = 'palevioletred'
偽陰性を抑えたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
イテラブルを多重集合に変換する	collections.Counter(iterable)
折れ線グラフを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データ列間のRMSEを算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
option: グラフの色をダークレッドに指定する	color = 'darkred'
option: ゲインズボロ色を用いる	color = 'gainsboro'
折れ線グラフに青い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの指定したカラムを千の位で丸める	df['列A'].round(-3)
ファイルを読み込み用にオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
グラフで用いるフォントを指定する	sns.set(font=フォント名)
オブジェクトが抽象クラスかどうか調べる	inspect.isabstract(オブジェクト)
ふたつの列を組み合わせてグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
option: 色をライムに設定する	color = 'lime'
モジュールを列挙する	sys.modules
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
指定された列のカテゴリで集計し、最大値を算出する	df.groupby('列A').max()
シーケンスを累積したイテラブルを求める	itertools.accumulate(iterable, operator.mul)
整数の二分の1を求める	整数 / 2
ある列の値がx以上、y以下のデータを抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
ファイルパスをオープンして]、追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
折れ線グラフの△印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
オーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
プラットホームはマック	sys.platform.startswith('darwin')
option: フローラルホワイトを使う	color = 'floralwhite'
線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='turquoise')
本日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
モカシン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
表データのあるカラムの日を求める	df['列A'].dt.day
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
折れ線グラフの星マーカーの色を変える	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
赤色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
文字列が全て小文字か調べる	文字列.islower()
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
四角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
ミッドナイトブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
作画の縦横比を等しくする	plt.axis('equals')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの一部のカラムの中央値	df[['列A', '列B']].median()
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
横棒グラフをライトサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
散布図をナバホホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
ファイルからストリームをオープンして]fileとする	file = open(filepath)
predicateFuncが真とならない列の部分を取り出す	itertools.dropwhile(predicateFunc, iterable)
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ハニーデューにヒストグラムの色をする	plt.hist(データ列, color='honeydew')
タイムスタンプを用いる	import time
option: ダークシアンを使う	color = 'darkcyan'
折れ線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
乱数で要素を埋めた配列	np.random.random(N)
指定の列に重複があれば除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
ファイルが存在しないか調べる	not os.path.exists(filepath)
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
データ列の推移を折れ線プロットを用いて可視化する	plt.plot(range(len(データ列)), データ列)
配列のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
破線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
グリッド線	plt.grid(linestyle='--')
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
出力ストリームをクローズする	f.close()
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
ファイルパスを絶対ファイルパスに変換する	os.path.abspath(filepath)
マッピングを階層化マップにする	collections.ChainMap(aDict)
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
CSVファイルにインデックスを付けずデータフレームを保存する	df.to_csv('file.csv', index=None)
黒い▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
文字列が全て数字か調べる	文字列.isdigit()
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
整数がセットのどれかか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
度数分布図でデータフレームの列を描画する	plt.hist(df[column])
スプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='springgreen')
線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
数列をイミュータブルなに変換する	frozenset(数列)
赤い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
配列をビン数nでビン分割する	pd.cut(aArray, n)
ダークグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
折れ線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
option: 暗い赤色を用いる	color = 'darkred'
カウンタの上位を列挙する	aCounter.most_common(k)
rgbの丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
日付時刻データは何時か知る	aDatetime.hour
データフレームの欠損値がある箇所を	df.style.highlight_null()
option: スラッシュをセパレータで使用する	sep = '/'
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
配列を分割数nで分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームから指定した三つの列を取り出す	df[['列A', '列B', '列C']]
文字列が指定された文字列で終わる	文字列.endswith(部分文字列)
赤いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
データ列を指定された値を用いてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
分類モデルの訓練を開始する	model.fit(説明変数, 目的変数)
リストの最初を使う	リスト[0]
タプルの値を昇順に並べる	sorted(タプル, reverse=True)
あるカラムのモードを求める	df['列A'].mode()
識別子はコルーチンか確認する	inspect.iscoroutine(識別子)
option: ミディアムブルーを使う	color = 'mediumblue'
year年month月day日hour時minute分second秒の日付時刻	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
データフレームの列のユニークな値の個数	df[col].nunique()
折れ線グラフの印をダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
カウンタからリストをカウントして減らす	aCounter.subtract(iterable)
列を日付データに変換する	pd.to_datetime(df['列A'])
整数の八進リテラル	oct(整数)
線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
オブジェクトは整数クラスのインスタンス	int = int<nl>isinstance(obj, int)
指定したカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
最大値・最小値の範囲で一様な疑似乱数を生成する	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
黒い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
配列の合計	np.sum(aArray)
option: ベクトルのデータ型を指定する	np.int8 = np.int<nl>dtype = np.int8
折れ線グラフの色をラベンダーにセットする	plt.plot(データ列x, データ列y, color='lavender')
データフレームの一部の列の中にいくつ未入力値があるか数える	df[['列A', '列B']].isna().sum()
データフレームの最初の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
ヒストグラムの色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
指定したカラムを10000の位で丸める	df['列A'].round(-4)
文字列中から部分文字列の位置を探す	文字列.find(部分文字列)
データをJSONフォーマットで出力ストリームに保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
ある列のカテゴリごとの合計を計算する	df.groupby('列A').sum()
モジュールを検索するパスにディレクトリを追加する	sys.path.append(ディレクトリ名)
逆順の両端キューを使う	reversed(両端キュー)
データフレームの指定したカラムが正規分布からどれだけ、歪んでいるか確認する	df['列A'].kurt()
オブジェクトのハッシュ値	hash(obj)
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
option: フォントの色をチョコレートに設定する	color = 'chocolate'
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
ひとつでも英数字が文字列中に含まれるかどうか	any(c.isalnum() for c in 文字列)
要素が全て1の配列	np.ones(要素数, dtype=np.int)
赤い▼マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
表データの末尾5行を抽出する	df.tail(5)
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
プラットホームはMacOS	sys.platform.startswith('darwin')
ヒストグラムをロージーブラウン色を使って描画する	plt.hist(データ列, color='rosybrown')
データフレームの選択したカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
ダークターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='darkturquoise')
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
データフレームのある列を抽出する	df['列A']
赤い▼マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
配列の累積積を計算する	np.cumprod(aArray)
ファイルからJSON形式のデータを読み込む	with open('file.json') as f:<nl><tab>data = json.load(f)
みっつの条件のうちいずれか成り立つ	条件 or 条件2 or 条件3
option: グラフの色を紺に設定する	color = 'darkblue'
文字列中にひとつでもアルファベットがあるか調べる	any(c.isalpha() for c in 文字列)
ブルーバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
要素を両端キューにenqueueする	両端キュー.append(要素)
JSONLファイルからデータフレームをロードする	pd.read_json(filename, orient='records', lines=True)
リストをカンマ区切りで出力する	print(*リスト, sep=',')
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
散布図の左三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
タプルが空か調べる	len(タプル) == 0
option: 丸マーカーを使う	marker = 'o'
データシリーズの空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
プロットにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
数列から長さの制限された両端キューを作成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
option: NaNを無視しない	nan_policy = 'propagate'
横棒グラフをティール色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフに三角印を使う	plt.plot(データ列x, データ列y, marker='^')
要素がセットに含まれるか調べる	要素 in セット
整数の四分の一を計算する	整数 / 4
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームから5行、ランダムサンプリングする	df.sample(5)
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
option: 読み込まないフッタをnに増やす	skipfooter = n
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
標準入力から1行受け取る	input()
サドルブラウン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
CSVをn番目の列をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
文字列が英数字かどうか調べる	文字列.isalnum()
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ふたつの列でグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
双方向キューをリストにする	list(両端キュー)
数列を連結してひとつの文字列にする	''.join(map(str, 数列))
インデントを指定してデータをJSON文字列に変換する	json.dumps(データ, ensure_ascii=False, indent=n)
開始位置を指定して部分文字列の位置を探す	文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
option: グラフの線の種類を破線に変更する	linestyle = 'dashed'
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
ライトコーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
整数が集合のどれかかどうか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
折れ線グラフに青い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
EUCでファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
ヒストグラムの色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
xがマイナス無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
ファイルパスの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
行列の要素ごとのアダマール積を計算する	np.multiply(aArray, aArray2)
辞書に項目名があるか調べる	キー in 辞書
データフレームを２つの列でグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in 文字列)
文字列の終了位置より前に部分文字列がないかどうかテストする	文字列.find(部分文字列, 0, 終了位置) == -1
棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
全要素を0で初期化した行列を作る	np.zeros(要素数)
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
関数によってデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
赤い破線を使ってデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
整数をバイト列にする	整数.to_bytes(length=バイト数, byteorder='big')
数に数を加える	x + y
option: 線種を一点鎖線に指定する	linestyle = 'dashbot'
システム時刻で乱数を初期化する	random.seed()
ファイルパスを文字コードtextとして開く]	text = 'utf-8'<nl>open(filepath, encoding=text)
横軸の目盛を対数に変更する	plt.xscale('log')
文字列が指定したにある	文字列 not in 別の文字列
データフレームをグループ化し、それぞれの個数を算出する	df.groupby('列A').count()
一度にデータフレームの列の名前を文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
リストとリストについての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
キーが辞書上で定義されているかどうか調べる	キー in 辞書
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
文字列をアスキーコードのリストにする	[ord(ch) for ch in 文字列]
option: フォントの色をシエナに設定する	color = 'sienna'
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データシリーズの空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
文字列を全て小文字に変換する	文字列.casefold()
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: コーラルに色を設定する	color = 'coral'
配列とデータ列について散布図を描画してその大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
棒グラフをミディアムバイオレットレッド色を使って描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
オブジェクトはジェネレータかどうか調べる	inspect.isgenerator(オブジェクト)
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
線グラフを半透明の実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
カウンタをリストに変換する	list(aCounter)
データフレームのカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
タイムスタンプデータをエポック秒にする	aDatetime.timestamp()
整数の2進表記	bin(整数)
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
破壊的にデータフレームを降順にある列によってソートする	df.sort_values(by='列A', ascending=False, inplace=True)
データフレームの指定したカラムを10000の位で丸める	df['列A'].round(-4)
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
縦軸の目盛を表示しない	plt.yticks([])
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
データフレームから数値データのみ抽出する	df.select_dtypes('number')
文字列中にアスキー文字があるか	any(c.isascii() for c in 文字列)
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgrey')
option: 真紅色を用いる	color = 'crimson'
文字列中に英字が含まれないか確認する	any(not c.isalpha() for c in 文字列)
文字列が空白文字	文字列.isspace()
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
データフレームの先頭100行を取り出す	df.head(100)
cos	math.cos(x)
option: ハニーデューにグラフの色を設定する	color = 'honeydew'
色付きの実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
多項式回帰データフレームの散布図にを加える	sns.regplot(data=df, x='列名', y='列名', order=2)
本日が水曜日か確認する	datetime.datetime.today().weekday() == 2
ファイルを絶対ファイルパスにする	os.path.abspath(filepath)
option: アクアに色を指定する	color = 'aqua'
ヒストグラムを小麦色色として描画する	plt.hist(データ列, color='wheat')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
指定した列の値で集計し、それぞれの合計を計算する	df.groupby('列A').sum()
散布図でデータフレームをグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
文字列が印字できるか調べる	文字列.isprintable()
nからn2までのstepごとによるスライス	slice(n, n2, step)
rgbのポイントマーカーを配列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
現在が何時か知る	datetime.date.today().hour
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
パレットを淡くする	sns.set(pallete='muted')
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
option: グラフの色をライトグレーに指定する	color = 'lightgray'
リストの要素を昇順に並べ変える	sorted(リスト, reverse=False)
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategrey')
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
データをJSONフォーマットとしてファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
ブラック色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
ヒストグラムの色をラベンダーにセットする	plt.hist(データ列, color='lavender')
数列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
日付時刻データを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
xを実数に変換する	float(x)
xをマゼンタにする	f'\033[35m{x}\033[0m'
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
配列の最頻値を算出する	mode, count = scipy.stats.mode(配列)
最初のを外したデータフレーム	df[df.columns[1:]]
option: スノー色を使用する	color = 'snow'
特異値分解として要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
スチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
リストの要素を空白区切りで出力する	print(*リスト)
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
折れ線グラフの色をホットピンクにセットする	plt.plot(データ列x, データ列y, color='hotpink')
データシリーズの月	ds.dt.month
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
両端キューに整数をエンキューする	両端キュー.append(整数)
既存の行列を元にして全要素が初期値のベクトル	np.full_like(aArray, 初期値)
ダークカーキにヒストグラムの色をする	plt.hist(データ列, color='darkkhaki')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
散布図を耐火レンガ色を用いて描画する	plt.scatter(データ列x, データ列y, color='firebrick')
JSON形式で辞書をファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
列を累積した列	itertools.accumulate(iterable, operator.mul)
スタック中の整数のインデックス	両端キュー.index(整数)
シーケンスにリストを続ける	itertools.chain(iterable, iterable2)
データ列のユニークな要素	ds.unique()
数を3乗する	x ** 3
線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの中のカラムを等間隔でn個にビン分割する	pd.cut(df[col], n)
nから始まる無限の数列	itertools.count(start=n)
オブジェクトはバイト列クラスかどうかテストする	bytes = int<nl>isinstance(obj, bytes)
全てのシートを表計算ファイルから読む	pd.read_excel('file.xlsx', sheet_name=None)
option: マーカーをポイントに設定する	marker = '.'
リストからひとつランダムに選ぶ	random.choice(リスト)
辞書から最後の値をポップする	辞書.popitem()
データフレームから10行をランダムに重複ありでサンプリングする	df.sample(10, replace=True)
データフレームのあるカラムを表データの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
文字列中の全角数字を半角数字に変換する	文字列.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフの色をパレットトルコイズにする	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: グレーにグラフの色を指定する	color = 'grey'
整数同士の排他的論理和を求める	整数 ^ 整数2
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフの▲マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
配列からn個サンプリングしてリストにする	random.sample(配列, k=n)
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
ファイル名がTSVファイルか調べる	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
二つの条件がいずれか成り立つ	条件 or 条件2
データフレームをNaNを含めてある列の値で集約する	df.groupby('列A', dropna=False)
散布図のダイアモンドマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
カラムが正規分布に従うか調べる	scipy.stats.shapiro(df['列A'])
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
折れ線グラフのダイアモンド印の色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
分割数nでリストを分割する	pd.cut(aList, n)
データシリーズの中央値を計算する	ds.median()
カラムのSkewnessを見る	scipy.stats.skew(df['列A'], bias=False)
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: モカシンにグラフの色を変更する	color = 'moccasin'
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームの値は欠損値	df.isna()
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列をJSON形式でファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
列のエポック秒をPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
option: エクセルファイルシートの名前を設定する	sheet_name = ['A', 'B']
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
タプルの中の最大値を求める	max(タプル)
整数の十六進数表現	hex(整数)
option: ラインを太くする	linewidth = 3.0
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムの色をフローラルホワイトにセットする	plt.hist(データ列, color='floralwhite')
データフレームの列間の相関係数を求める	df.corr()
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームを関数でグループ分けして、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
データ列の文字列長を列として見る	ds.str.len()
L1ノルムでデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
二つのオブジェクトは等しい	obj == obj2
データフレームの一部のカラムの欠損値を平均値にする	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
数式のxについてのn階微分を算出する	sympy.diff(数式, [|変数]x, n)
データフレームのある列を取り出す	df['列A']
option: 紺碧を使う	color = 'azure'
第一引数のファイルの名前	sys.argv[1]
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
0から始まる無限の整数イテラブル	itertools.count()
正規分布による確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
データ列をビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
エクセルファイルから文字化けしないようにカンマ区切りのファイルを読む	pd.read_csv('file.csv', encoding='shift_jis')
文字列を積極的に小文字に変換する	文字列.casefold()
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
点線を用いてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
横棒プロットを描画する	plt.barh(ラベル列, データ列)
日付時刻データと日付時刻データの時間差を算出する	aDatetime - aDatetime2
上限から下限までの範囲でヒストグラムをプロットする	plt.hist(データ列, range=(start, end))
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
predicateFuncを適用したとき真になる列の要素を消す	itertools.dropwhile(predicateFunc, iterable)
カウンタを集合に変換する	set(aCounter)
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
ファイルパスが存在しないか調べる	not os.path.exists(filepath)
リストとリストについて散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
二つの集合の差を使う	セット.difference(セット2)
エポック秒のカラムからPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
最小値でデータフレームのNaNを埋める	df.fillna(df.min())
イテラブルからランダムにひとつ選んでリストにする	random.choice(イテラブル)
option: グラフの色をスラグレーに設定する	color = 'slategrey'
二つのデータフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
まとめてValueMapでデータフレームの選択したカラムの値を置き換える	df[['列A', '列B']].replace(ValueMap)
option: フォントの色をパールバイオレットレッドに指定する	color = 'palevioletred'
OSがMacOSかどうか調べる	sys.platform.startswith('darwin')
リストの長さ	len(リスト)
リストを文字列としてカンマで一つにする	','.join(map(str, リスト))
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
データフレームからランダムに重複を認めて10行をサンプリングする	df.sample(10, replace=True)
散布図を赤い菱形マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
線グラフの色をスチールブルーにする	plt.plot(データ列x, データ列y, color='steelblue')
要素がタプルに含まれるか	要素 in タプル
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームを二つの列の値によってグループ化する	df.groupby(['列A', '列B'])
ミディアムバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
リストをn個にビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
タイムスタンプデータが金曜日か確認する	aDatetime.weekday() == 4
グラフをデフォルトでイイ感じに設定する	sns.set()
散布図に右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
option: パパイヤウィップ色を用いる	color = 'papayawhip'
ふたつのセットが互いに素	セット.isdisjoint(セット2)
option: ピーチパフ色を用いる	color = 'peachpuff'
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
option: 右三角マーカーを使用する	marker = '>'
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
year年month月day日の日付をオブジェクト化する	datetime.date(year=year, month=month, day=day)
n個に等間隔でリストをビン分割する	pd.cut(aList, n)
散布図の大バツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームをグループ化し、個数を求める	df.groupby('列A').count()
あるカラムのカテゴリの平均値を求める	df.groupby('列A').mean()
year年month月の日付をオブジェクト化する	datetime.date(year=year, month=month, day=1)
データフレームの選択したカラムの未入力値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
データフレームをCSVファイルで保存する	df.to_csv('file.csv')
option: ホワイトにフォントの色を設定する	color = 'white'
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
散布図に三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
リストとリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
グリッドの線スタイルを点線に変更する	plt.grid(linestyle='dotted')
外れ値を除いたカラムの算術平均を使う	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: グラフの色をライトスレイグレーにする	color = 'lightslategrey'
データフレームをある列を用いて降順にソートする	df.sort_values(by='列A', ascending=False)
データフレームの値が欠損値か調べる	df.isna()
データフレームから型リストで指定したデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
option: パレットトルコイズ色を使う	color = 'paleturquoise'
横棒グラフを青緑色を使って描画する	plt.barh(データ列x, データ列y, color='teal')
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
辞書上でキーが定義されているか調べる	キー in 辞書
整数に整数をかける	整数 * 整数2
折れ線グラフをアリスブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ランダムにデータフレームからn行を重複を認めてサンプリングする	df.sample(n, replace=True)
深紅色を使ってヒストグラムを描画する	plt.hist(データ列, color='crimson')
あるカラムの文字列が正規表現にマッチする行を抽出する	df[df['列A'].str.match(正規表現)]
データフレームをエクセルファイルから読み込む	pd.read_excel('file.xlsx')
データフレームを指定したカラムでソートしてNaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
データフレーム中の欠損値をドロップする	df.dropna(inplace=True)
例外の種類を知る	etype, evalue, traceback = sys.exc_info()
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
リストとデータ列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
グラフにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
３自然数の最小公倍数	math.lcm(n, n2, n3)
線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: ライトグリーンにグラフの色を変更する	color = 'lightgreen'
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
データフレームの指定したカラムの欠損値を平均値に指定する	df['列A'].fillna(df['列A'].mean())
散布図をホワイト色で描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームのカラムを百の位で丸めて整数型にする	df['列A'].round(-2).astype(int)
option: インディアンレッド色を使う	color = 'indianred'
ジェネレータベースのコルーチンと通常のジェネレータを区別する	inspect.isawaitable(識別子)
指定した列だけ、データフレームの重複を見る	df.duplicated(subset='列A')
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
option: グレー色を使う	color = 'grey'
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
３二ビット整数型の０で全要素を初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
縦棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
option: トマト色を使用する	color = 'tomato'
データフレームの選択したカラムの欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
カウンタ同士でユニオンを求める	aCounter | aCounter2
タプルの最後のn要素を除く	タプル[:-n]
上三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの色をダーク・スラテグレーにセットする	plt.hist(データ列, color='darkslategrey')
赤いバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
グリッドを破線にする	plt.grid(linestyle='dashed')
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
折れ線グラフの右三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームのカラム間のケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
カウンタの最も頻出の項目	aCounter.most_common()[0]
正規分布のパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
文字列を全て大文字に変換する	文字列.upper()
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: 三角マーカーを使用する	marker = '^'
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: ダークシアン色を使用する	color = 'darkcyan'
文字列を最後のコロンで分割したときの後半の文字列	文字列.rpartition(':')[-1]
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
グリーンにヒストグラムの色をセットする	plt.hist(データ列, color='green')
整数かける整数を計算する	整数 * 整数2
ある列の文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
表データから指定した三つの列を抽出する	df[['列A', '列B', '列C']]
option: アリスブルー色を用いる	color = 'aliceblue'
両端キューの末尾に数列の各要素を追加する	両端キュー.extend(数列)
スピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
折れ線グラフに簡単な説明をつける	plt.plot(データ列x, データ列y, label='ラベル')
辞書の全値を空にする	辞書.clear()
データシリーズの欠損値をメディアンで埋める	ds.fillna(ds.median())
ファイルからJSON形式のデータをロードする	with open('file.json') as f:<nl><tab>data = json.load(f)
データフレームの選択したカラムの中に文字列があるかどうか	df[['列A', '列B']].isin([value])
散布図を赤いバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='r')
タプルが空	len(タプル) == 0
文字が別の文字列に含まれるか調べる	文字 in 文字列
option: ビスク色を使う	color = 'bisque'
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
ファイルからバイナリストリームを開いて]fとする	f = open(filepath, mode='rb')
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
リストとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
赤い▽マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
option: ベクトルのデータ型を指定する	bool = np.int<nl>dtype = bool
数を小数点で四捨五入する	round(x, n)
option: グラフの色をダークグリーンにする	color = 'darkgreen'
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
要素ひとつのりストを得る	[要素]
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
リストを文字列として'改行で連結する	'\n'.join(map(str, リスト))
option: 文字列を出力の終端に用いる	end = 文字列
部分文字列を後方から範囲を指定して探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
変数xが無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, [|変数]x, oo)
リスト内の要素が少なくともひとつ真か調べる	any(リスト)
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: 貝殻色を使用する	color = 'seashell'
データフレームを見る	df.head()
JSON形式で文字列をファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
オブジェクトは集合クラスか調べる	set = int<nl>isinstance(obj, set)
option: クロス印を加える	marker = 'x'
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
変数名がビルトイン	inspect.isbuiltin(識別子)
配列から両端キューを新規生成する	collections.deque(配列)
配列のトリム分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームからn行、サンプリングする	df.sample(n)
棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
nから始まる無限数列	itertools.count(start=n)
散布図に▼印を使用する	plt.scatter(データ列x, データ列y, marker='v')
カテゴリで色分けして、データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
表データのあるカラムが何日か見る	df['列A'].dt.day
一度にデータフレームの値をValueMapで置き換える	df.replace(ValueMap)
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
実数の余弦の逆数	x = 0.33<nl>math.acos(x)
指定した列の欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
データフレームを指定した列によって小さい順にソートする	df.sort_values(by='列A', ascending=True)
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
標準入力から1行だけ改行を取り除いて読み込む	sys.stdin.readline().rstrip()
散布図を赤い星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームの相関行列をヒートマップを用いてグラフ化する	sns.heatmap(df.corr())
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
ケンドール相関係数でデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='kendall')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
データシリーズの曜日の名前を見る	ds.dt.weekday_name
データシリーズを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
辞書の値に要素が含まれていないか確認する	element not in 辞書.values()
option: 色をライトスレイグレーに設定する	color = 'lightslategray'
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
両端キューをクリアする	両端キュー.clear()
エクセルからすべてのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
双方向キューの先頭にイテラブルの各値を追加する	両端キュー.extendleft(イテラブル)
散布図の三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
大バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
三数の最大値を算出する	max(x, y, z)
TSVファイルファイル名が	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
未入力値がある行をドロップする	df.dropna(inplace=True)
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
配列をベースにして全要素が1の行列	np.ones_like(aArray)
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategray')
数字を見る	string.digits
整数を十六進数文字列に変換する	hex(整数)[2:]
標準出力をフラッシュする	sys.stdout.flush()
データ列の折れ線グラフを描画して色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ロージーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データシリーズを10000の位で四捨五入する	ds.round(-4)
リストとリストについての散布図に文字列という補足用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
部分集合か調べる	セット.issubset(セット2)
リストと配列の散布図をプロットして、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
２つの文字列を順にプリントする	print(文字列, 文字列)
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
option: ピーチパフ色を使う	color = 'peachpuff'
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
リストをランダムにシャッフルしてリスト化する	random.sample(リスト, len(リスト))
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
リストと配列の散布図を描画して、マーカーを△に変更する	plt.plot(データ列x, データ列y, marker='^')
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列は全て変数名	文字列.isidentifier()
ファイルパスのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
エクセルファイルをロードする	pd.read_excel('file.xlsx')
ダークバイオレット色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
リストを連結する	リスト + リスト2
列とイテラブルをジップする	itertools.zip_longest(iterable, iterable2)
option: パープル色を使う	color = 'purple'
データフレームのn行より後ろを抽出する	df[n:]
耐火レンガ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
グラフを正方形にする	plt.axis('equals')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
データシリーズの時刻を見る	ds.dt.hour
計算結果の出力を改行せず行う	print(式, end='')
データフレームの指定したカラムを小数点以下n桁で四捨五入する	n = 2<nl>df['列A'].round(n)
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
実行をここで終了する	sys.exit()
データフレームの選択した列がどの程度、分散しているか見る	df[['列A', '列B']].var()
データ列とリストについて散布図をプロットして、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
折れ線グラフをミディアムシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ファイルを追加用にオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
ゲインズボロ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
データフレームの欠損値をモードにする	df.fillna(df.mode().iloc[0])
option: 色をスカイブルーに設定する	color = 'skyblue'
option: パウダーブルー色を使う	color = 'powderblue'
KNNを用いて回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
円グラフを円にする	plt.axis('equals')
縦棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: ラベンダーブラッシュにグラフの色を変更する	color = 'lavenderblush'
実数を十の位で丸める	round(x, -1)
変数を改行なしに表示する	print(変数名, end='')
配列の要素を一つの文字列にする	''.join(map(str, 配列))
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
指定したカラムの未入力値を中央値に設定する	df['列A'].fillna(df['列A'].median())
option: バイナリ書き込みモードにする	mode = 'wb'
日付時刻データが金曜日か確認する	aDatetime.weekday() == 4
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
実数の３乗	x ** 3
赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフの大バツ印の色を指定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
整数が非負数でないかどうか調べる	整数 >= 0
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
プロットの用途をポスターに指定する	sns.set(context='poster')
折れ線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
三つのデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=0)
ビン数を設定して柱状グラフを描く	plt.hist(データ列, bins=区関数)
ミディアムシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
タイムスタンプデータからn日分減算する	aDatetime - datetime.timedelta(days=n)
分割数nを使って配列をビン分割する	pd.cut(aArray, n)
option: ホットピンクにグラフの色を指定する	color = 'hotpink'
日付データが何日か知る	aDate.day
計算機イプシロン	sys.float_info.epsilon
option: 半透明にする	alpha = 0.5
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
両端キューの末尾に配列の要素を追加する	両端キュー.extend(配列)
黒色でxを表示する	print(f'\033[30m{x}\033[0m')
option: 色をゴーストホワイトに設定する	color = 'ghostwhite'
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
△印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データ列とイテラブルの散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
xの小数点以下'1'桁までを出力する	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
データ列のユニークな値	ds.unique()
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データをL2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
オブジェクトは非同期ジェネレータか	inspect.isasyncgen(オブジェクト)
プロットをポスター用に設定する	sns.set(context='poster')
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
リストを分割数nでビン分割する	pd.cut(aList, n)
両端キューに要素をエンキューする	両端キュー.append(要素)
マップとして文字列をカウントする	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
線グラフの色を赤にする	plt.plot(データ列x, データ列y, color='red')
インデント幅を指定してリストをJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False, indent=n)
文字が指定した文字列に含まれないか調べる	文字 not in 文字列
xを水色で表示できる文字列に変換する	f'\033[36m{x}\033[0m'
option: オレンジレッド色を用いる	color = 'orangered'
空のリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
yについて数式を偏微分する	sympy.diff(数式, y)
データフレームの指定した列の欠損値を最大値で補う	df['列A'].fillna(df['列A'].max())
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
環境の名前	sys.platform
線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
整数の八分の一	整数 / 8
BOM付きでファイルを開く]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
３つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=0)
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
n番目のカラムを行にしてCSVを読み込む	pd.read_csv('file.csv', index_col=n)
データフレームのある列を行に指定する	df.set_index('列A')
データフレームをソートして、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
セットの補集合	セット.difference(セット2)
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: エラーを無視するように指定する	errors = 'ignore'
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
上位集合もしくは等しいか確認する	セット >= セット2
データフレームのカラムを正規表現patternで一度に置換する	df['列A'].replace(pattern, repl, regex=True)
２つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
ダークターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
option: グレー色を用いる	color = 'grey'
ゼロ埋めされた複素数型のベクトルを作る	np.zeros(要素数, dtype=bool)
双方向キュー中の要素の出現数を数える	両端キュー.count(要素)
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
データフレームを丸めて、整数にする	df.round().astype(int)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
データ列の折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
下線付きで表示できる文字列に変換する	f'\033[4m{x}\033[0m'
四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
データフレームの相関行列をスピアマン相関係数で求める	df.corr(method='spearman')
散布図のマーカーを右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
データフレームの選択したカラムの空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データフレームを各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフに三角印を使用する	plt.plot(データ列x, データ列y, marker='^')
カンマで文字列を末尾から区切る	文字列.rsplit(',')
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
option: 色をダークサーモンに設定する	color = 'darksalmon'
散布図をライトシアン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
セットが空か調べる	len(セット) == 0
データフレームの選択したカラムの欠損値を平均で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
配列から重複を除いたベクトルを作る	np.unique(aArray)
文字列はタイトルケースか	文字列.istitle()
グラフで使うフォントを指定する	sns.set(font=フォント名)
データフレームの列をヒストグラムで描く	plt.hist(df[column])
xを緑色でプリントできる文字列に変換する	f'\033[32m{x}\033[0m'
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
改行を使う	'\n'
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
本日の月を使う	datetime.datetime.today().month
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
逆双曲線余弦	math.acosh(x)
リストのn番目からn2番目までを得る	リスト[n:n2]
xを黒色で表示する	print(f'\033[30m{x}\033[0m')
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
コサインを求める	math.cos(x)
棒グラフをダークスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
文字列の先頭から部分文字列を探す	文字列.find(部分文字列)
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームの指定したカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
リストを順に表示する	print(*リスト)
縦棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
散布図の▼マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='gray')
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
サーモン色を使ってヒストグラムを描画する	plt.hist(データ列, color='salmon')
文字列を区切り記号で二分して、後半を使う	文字列.partition(セパレータ)[-1]
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列をユニコードのリストにする	[ord(ch) for ch in 文字列]
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgray')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
二つの文字列を辞書順で比較する	文字列 < 文字列2
スタックの最大長を求める	両端キュー.maxlen
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
列のユニークな値の個数を見る	df[col].nunique()
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(数式, 変数, -oo)
散布図に青い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
配列の差	aArray - aArray2
ヒストグラムの色をダークバイオレットにする	plt.hist(データ列, color='darkviolet')
x軸だけグリッド線	plt.grid(axis='x')
棒グラフをダークオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='darkorange')
アンティークホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='antiquewhite')
折れ線グラフにクロスマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ヒストグラムをイエローグリーン色を使って描画する	plt.hist(データ列, color='yellowgreen')
option: 色をミディアムオーキッドに設定する	color = 'mediumorchid'
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
データフレームのカーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: フォントの色をオレンジに設定する	color = 'orange'
グラフの色を暗くする	sns.set(pallete='dark')
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
日付データをタプルに変換する	aDate.timetuple()
ある列の文字列が部分文字列で終わるデータを抽出する	df[df['列A'].str.endswith(部分文字列)]
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
option: グラフの色をピンクに設定する	color = 'pink'
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ライトグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
タプルのn番目からn2番目までの部分を取り出す	タプル[n:n2]
外れ値に強い線形分類器を作成する	model = sklearn.linear_model.HuberClassifier()
散布図をライトイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームの列の空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
ヒストグラムの色をシエナに変更する	plt.hist(データ列, color='sienna')
スノーにヒストグラムの色を指定する	plt.hist(データ列, color='snow')
標準入力から1行分改行なしで読み込む	sys.stdin.readline().rstrip()
ヒストグラムの色を珊瑚にセットする	plt.hist(データ列, color='coral')
option: グリーン色を使用する	color = 'green'
散布図にダイアモンド印を用いる	plt.scatter(データ列x, データ列y, marker='D')
ファイルを書き込み用に開く]	'w' = 'a'<nl>open(filepath, mode='w')
作画のx軸とy軸の比率を等しくする	plt.axis('equals')
整数が整数2未満、もしくはn3以上かどうか調べる	整数 < 整数2 or 整数 >= n3
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
日本語が文字列中にある	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
リスト内の要素が少なくともひとつ真	any(リスト)
標準入力から1行だけ改行を取り除いて読む	sys.stdin.readline().rstrip()
データフレームの指定したカラムを正規表現でまとめて置換する	df['列A'].replace(pattern, repl, regex=True)
xの小数点以下'2'桁まで表示する	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
1からNまでの行列	np.arange(1, N+1)
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
整数が整数2以下、または、n3以上か調べる	整数 <= 整数2 or 整数 >= n3
データフレームから数値データの列を取り出す	df.select_dtypes('number')
option: マーカーを丸に変更する	marker = 'o'
イテラブルとリストについて散布図を描き、、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
最大値・最小値として整数乱数を得る	random.randint(最小値, 最大値)
変数名がフレーム	inspect.isframe(識別子)
整数をバイト列に変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big')
列を等間隔でn個にビン分割する	pd.cut(ds, n)
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
最後のカンマで文字列を二分し、、前半を見る	文字列.rpartition(',')[0]
プロットの凡例の位置を指定する	plt.legend(loc=(x, y))
ふたつの集合に共通する要素からなる集合を使う	セット.intersection(セット2)
データフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
ヒストグラムの色を赤にセットする	plt.hist(データ列, color='red')
データフレームのあるカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
文字列をバイト配列に変換する	bytearray(s)
データフレームの一部のカラムの歪み	df[['列A', '列B']].kurt()
1で全要素を初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列])
タプルの最初を取り除く	タプル[1:]
xを黒色でプリントする	print(f'\033[30m{x}\033[0m')
option: ミディアムシアグリーンを使用する	color = 'mediumseagreen'
option: 色をダークシアグリーンに設定する	color = 'darkseagreen'
試しに何か動かす	print('Hello World')
ある列の値がxに等しく、かつ別の列の値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
文字列の先頭から余分な空白やタブを取り除く	文字列.lstrip()
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
データフレームをある列のカテゴリとして集計して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
データ列の一意な要素数を確認する	ds.nunique()
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
数式をxについてn階偏微分する	sympy.diff(数式, [|変数]x, n)
日付データをn週間前にする	aDate - datetime.timedelta(weeks=n)
指定したカラムの値を正規表現patternで一度に置き換える	df['列A'].replace(pattern, repl, regex=True)
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
外れ値を除いたデータフレームのカラムの分散を見る	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
英数字が文字列中に含まれないか調べる	any(not c.isalnum() for c in 文字列)
option: グラフの線種を実線に設定する	linestyle = 'solid'
整数除算の切り上げ	(整数 + 整数2 - 1) // 整数2
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
データフレームをある列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データフレームをソートして、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
文字列をスタックにプッシュする	両端キュー.append(文字列)
option: グラフの色をリネンに設定する	color = 'linen'
指定した列の値で集計し、標準偏差を計算する	df.groupby('列A').std()
タイムスタンプデータの日を使う	aDatetime.day
折れ線グラフの色をダークバイオレットに変更する	plt.plot(データ列x, データ列y, color='darkviolet')
箱ひげ図として数列を作図する	plt.boxplot(データ列)
双方向キューの長さを制限する	collections.deque(maxlen=最大長)
線グラフをダークオーキッド色として描画する	plt.plot(データ列x, データ列y, color='darkorchid')
リッジ回帰分析を行う	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
データフレームのカラムの歪度	scipy.stats.skew(df['列A'], bias=False)
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
文字列の中のケースを無視してパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
散布図にポイント印を加える	plt.scatter(データ列x, データ列y, marker='.')
option: フォントの色をミッドナイトブルーに変更する	color = 'midnightblue'
青色でxを表示する	print(f'\033[34m{x}\033[0m')
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
option: グラフの種類を一点鎖線に指定する	linestyle = 'dashbot'
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
データフレームのカラムからユニークな要素を抽出しリスト化する	df[col].unique().tolist()
カウンタの∪	aCounter | aCounter2
文字列を改行によって区切る	文字列.splitlines()
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
文字列を右寄せする	文字列.rjust(文字列幅)
JSON文字列をロードする	data = json.loads(文字列)
タプルの最後からn番目以前の部分を抽出する	タプル[:-n]
指定した列のカテゴリで集計し、それぞれの標準偏差を算出する	df.groupby('列A').std()
ふたつの列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
自然数LCM	math.lcm(n, n2)
表データのあるカラムの曜日名を使う	df['列A'].dt.weekday_name
縦棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
整数の最大公約数	math.gcd(n, n2)
option: フォントの色をディープスカイブルーに変更する	color = 'deepskyblue'
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
改行なしに２つの計算結果を出力する	print(式, 式, end='')
数値がセットのいずれかどうか調べる	数 in セット
データシリーズの中にとがいくつ含まれるか数える	ds.isin([value, value2]).sum()
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データシリーズの値がNaNか調べる	ds.isna()
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
配列とイテラブルの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームを関数によってグループ化し、統計量を算出する	df.groupby(関数).describe()
データフレームの不偏分散を計算する	df.var(ddof=1)
データフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
散布図をバリーウッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='burlywood')
CSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv('file.csv', index_col=n)
散布図をバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='violet')
度数分布図を３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
データフレームの選択したカラムの欠損値を直前の値で補完する	df[['列A', '列B']].fillna(method='ffill')
線グラフの色をデピンクにセットする	plt.plot(データ列x, データ列y, color='deeppink')
数値を改行なしにプリントする	print(数値, end='')
option: フォントの色をライトグリーンに設定する	color = 'lightseagreen'
インタプリタの実行ファイルの絶対パスを調べる	sys.executable
option: クリムゾンにグラフの色を設定する	color = 'crimson'
グラフの色を全般的に淡くする	sns.set(pallete='muted')
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
文字列を区切り記号で二分して、残りを使う	文字列.partition(セパレータ)[-1]
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ベクトルの各要素の積	np.multiply(aArray, aArray2)
シスル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
option: フォントの色をアリスブルーに設定する	color = 'aliceblue'
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
ファイルの拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
配列の標準偏差を求める	np.std(aArray)
有理数をインポートする	import fractions
データフレームの指定したカラムのNaNを中央値に設定する	df['列A'].fillna(df['列A'].median())
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
イテラブルをランダムにシャッフルしてリストにする	random.sample(イテラブル, len(イテラブル))
データフレームの値が欠損値	df.isna()
リストと配列についての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列の接頭辞がsubか調べる	文字列.startswith(部分文字列)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
新しいロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
浮動小数点数のハイパボリック・タンジェントの逆数	math.atanh(x)
二つのオブジェクトが同じか	obj is obj2
混同行列をヒートマップを用いて確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgray')
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
折れ線グラフの色をミディアムバイオレットレッドにする	plt.plot(データ列x, データ列y, color='mediumvioletred')
赤い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
小さい順に指定したカラムでデータフレームをソートし、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
データシリーズのNaNを直前の値にセットする	ds.fillna(method='ffill')
option: ネイビー色を用いる	color = 'navy'
データフレームをグループ化しそれぞれの合計を計算する	df.groupby('列A').sum()
縦棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
x,yの複素数を求める	complex(x, y)
ペルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
指定したカラムの尖りを算出する	df['列A'].skew()
文字列の最後から改行を取り除く	文字列.rstrip()
ビスク色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: グラフの色をマルーンに変更する	color = 'maroon'
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
数列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームのNaNを最小値で埋める	df.fillna(df.min())
棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ピンク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
縦棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
SDGでクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
箱ひげ図でデータフレームの二つの列を並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
キーワード引数として辞書に加えて、更新する	辞書.update(**kwargs)
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
整数のn乗	pow(x, n)
リストの変化を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
メソッド名	inspect.currentframe().f_code.co_name
整数がnで割り切れるか判定する	整数 % n == 0
option: グラフの種類を点線に設定する	linestyle = 'dotted'
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
整数が奇数か確認する	整数 % 2 == 1
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
stringをインポートする	import string
回帰分析をガウス過程として行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
ある列の値がx以上、y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
文字列の大文字小文字をする	文字列.casefold()
文字列が全て空白からなるか調べる	文字列.isspace()
要素はタプルの要素でないか調べる	要素 not in タプル
棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
列の値によってデータフレームをグループ化し要約統計量を計算する	df.groupby('列A').describe()
配列をn個に分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
グラフの横軸にラベルをつける	plt.xlabel('x軸ラベル')
画面用にグラフをする	sns.set(context='notebook')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
目盛線	plt.grid(color='#800080')
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
新しい勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
データフレームの一部のカラムの基本統計量	df[['列A', '列B']].describe()
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
整数をキューの先頭に追加する	両端キュー.appendleft(整数)
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
option: グラフの色をデピンクに指定する	color = 'deeppink'
異なる列をキーとしてデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
文字列の両端から改行を取り除く	文字列.strip('\n')
option: 色をグリーンイエローに設定する	color = 'greenyellow'
option: ナバホホワイトを用いる	color = 'navajowhite'
predicateFuncがTrueとなるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
現在の月数を見る	datetime.datetime.today().month
識別子がジェネレータか調べる	inspect.isgenerator(識別子)
実数の床を求める	math.floor(x)
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
n階微分を行う	sympy.diff(数式, 変数, n)
整数を2進表記に変換する	bin(整数)
タプルの各値を関数に適用した結果で並べ直す	sorted(タプル, key=func)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
option: サドルブラウンを使う	color = 'saddlebrown'
データ列をボックスチャートで可視化する	plt.boxplot(データ列)
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
小文字を全て使う	string.ascii_lowercase
データフレームをグループ化し、ある列の要約統計量を計算する	df.groupby('列A').describe()['列B']
書式文字列を引数としてarg文字列をフォーマットする	書式.format(*args)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
option: 耐火レンガ色を使う	color = 'firebrick'
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
折れ線グラフをサドルブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
識別子がトレースバックか調べる	inspect.istraceback(識別子)
データフレームの選択したカラムの下位25パーセント	df[['列A', '列B']].quantile(0.75)
整数を両端キューにスタックする	両端キュー.append(整数)
ある列の文字列が部分文字列で始まる行を取り出す	df[df['列A'].str.startswith(部分文字列)]
整数が整数2よりも小さい	整数 < 整数2
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
日付データが日付データより後ろか確認する	aDate > aDate2
グラフの凡例の場所を指定する	plt.legend(loc=(x, y))
シーケンスの長さnの順列	itertools.permutations(iterable, n)
データフレームを各列毎にグループ分けし、、文字列というグループの大きさを求める	df.groupby(column).size()[s]
配列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
グラフの中の縦軸に名前を設定する	plt.ylabel('y軸ラベル')
書き込み用にファイルをUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームの列を度数分布図にする	plt.hist(df[column])
ロイヤルブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームのある列を百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
データフレームの指定したカラムのNaNを最小値で埋める	df['列A'].fillna(df['列A'].min())
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
日付を使う	import datetime
xを太字で表示できる文字列に変換する	f'\033[1m{x}\033[0m'
option: ライトグレー色を使う	color = 'lightgray'
eの乗数	math.exp(x)
真⊂か調べる	セット < セット2
珊瑚色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
横棒グラフをペールグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='palegreen')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
1行から２つの整数を読む	A, B = map(int, input().split())
データフレームの選択したカラムの空文字を欠損値に変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
ロバスト推定を使ってクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
散布図の四角印を青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
xを太文字でプリントする	print(f'\033[1m{x}\033[0m')
プロットからグリッド線を表示しない	plt.grid(False)
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
文字列を最後の部分文字列で二分する	文字列.rpartition(部分文字列)
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列中にひとつも大文字が含まれない	any(not c.isupper() for c in 文字列)
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
option: 文字列の示すエンコーディングを使用する	encoding = s
配列と数列の散布図を描画して、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
文字列を最後のセパレータで二分し、後半を使う	文字列.rpartition(セパレータ)[-1]
折れ線グラフをサドルブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
データをJSON形式を使ってファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
縦棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
行列の列	aArray[:, 列番号]
リストの出現頻度を可視化する	plt.hist(データ列)
文字列の指定した区間位置の間に部分文字列が存在するか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
データシリーズの欠損値を平均に設定する	ds.fillna(ds.mean())
文字列を両端キューにプッシュする	両端キュー.append(文字列)
タプルをn倍する	タプル * n
データフレームの指定したカラムのSkewness	df['列A'].skew()
データフレームのNaNを直前の値に指定する	df.fillna(method='ffill')
折れ線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
両端キューの中に整数が含まれてるかどうか	整数 in 両端キュー
option: 3二ビット整数型を用いる	np.int16 = np.int<nl>dtype = np.int16
リストを文字列として、ある文字列で一つにする	文字列.join(map(str, リスト))
タプルの先頭のn要素を取り除く	タプル[n:]
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
数列を両端キューにする	collections.deque(数列)
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
カデットブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
タイムスタンプデータはタイムスタンプデータより先かどうか確認する	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
文字列の先頭でケースを無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をマルーンにセットする	plt.plot(データ列x, データ列y, color='maroon')
改行なしに二つの文字列をプリントする	print(文字列, 文字列, end='')
リストと配列の散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
数列から複数個ランダムに選んでリストにする	random.choices(数列, k=n)
データフレームのあるカラムの年	df['列A'].dt.year
その最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
散布図に赤いクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
赤いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
等間隔の行列	np.arange(開始値, 終了値, 等差)
整数の順列の総数	math.perm(n)
文字をユニコードにする	ord(文字)
棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
配列とイテラブルの散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
配列のスピアマンの相関係数を使う	scipy.stats.spearmanr(配列, 配列2)
オブジェクトのフィールドを削除する	delattr(obj, プロパティ名)
代数計算を使う	import sympy
データフレームの指定したカラムの欠損値をメディアンに指定する	df['列A'].fillna(df['列A'].median())
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
ある列の文字列が正規表現文字列にマッチしない行を取り出す	df[~df['列A'].str.match(正規表現)]
小さい順にデータフレームを２つの列でソートする	df.sort_values(by=['列A', '列B'], ascending=True)
整数が非負数でないか調べる	整数 >= 0
option: グラフの色をオールドレースに設定する	color = 'oldlace'
データフレームをインデックスによってソートする	df.sort_index()
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
条件がみっつとも同時に成り立つ	条件 and 条件2 and 条件3
データフレームの選択した列の欠損値をxに設定する	df[['列A', '列B']].fillna(x)
文字列中に大文字が含まれるか調べる	any(c.isupper() for c in 文字列)
パーセプトロンとしてクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
文字列が数字か調べる	文字列.isdigit()
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
四角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
10行をデータフレームからランダムに抽出する	df.sample(10)
文字列の接尾辞から部分文字列を取り除く	文字列.removesuffix(部分文字列)
日付データが月曜日か確認する	aDate.weekday() == 0
データフレームの選択したカラムの中にある文字列の合計をカウントする	df[['列A', '列B']].isin([value]).sum()
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
タプルをnから順序付けする	enumerate(タプル, start=n)
三つの最小値	min(x, y, z)
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
縦棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
整数がnで割り切れないか	整数 % n != 0
コマンドラインの一覧	sys.argv[1:]
グリーンイエロー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
箱髭図でデータ列を可視化する	plt.boxplot(データ列)
▼印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの一部の列の歪度	df[['列A', '列B']].kurt()
数値の符号をコピーにする	math.copysign(x, x2)
データ列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
折れ線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームのある列の値がxに等しいデータを抽出する	df[df['列A'] == x]
ダークオリーブグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームの指定したカラムの標本分散を計算する	df['列A'].var(ddof=0)
指定した列リストのみ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの選択したカラムの中に文字列と文字列がいくつ含まれるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
リストの要素の位置をエラーなく使う	リスト.index(要素) if 要素 in リスト else -1
相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
全角数字を半角数字にする	文字列.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
整数の八分の一を算出する	整数 / 8
識別子がクラスか調べる	inspect.isclass(識別子)
符号なし８ビット整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.uint8)
中央値で配列をビン分割する	pd.qcut(aArray, 2)
データフレームの中に存在する文字列と日付データの合計をカウントする	df.isin([value, value2]).sum()
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
文字列全体がパターンに複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
横棒プロットをプロットして、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
最後から文字列をコロンで区切る	文字列.rsplit(':')
切片なしの回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ヒストグラムをコーンズシルク色を用いて描画する	plt.hist(データ列, color='cornsilk')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
配列と同じ大きさの空配列を作成する	np.empty_like(aArray)
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
データシリーズの標本分散	ds.var(ddof=0)
変数の値を整数だけ減少させる	変数 -= 整数
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: コロンを分割記号で使う	sep = ':'
xの絶対値を求める	abs(x)
整数の八分の一を求める	整数 / 8
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
指定したカラムのNaNを直後の値で埋める	df['列A'].fillna(method='bfill')
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
小麦色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
色付きの点線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
範囲から配列を作る	np.linspace(最小値, 最大値, 要素数)
色付きの破線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ベクトルは何次元か調べる	aArray.ndim
列に列を続けたイテラブルを求める	itertools.chain(iterable, iterable2)
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategrey')
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
数式を部分分数として展開する	sympy.apart(数式)
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
行列の合計値	np.sum(aArray)
ファイルがないか判定する	not os.path.exists(filepath)
配列が正規分布に従うか調べる	scipy.stats.shapiro(配列)
２つのカウンタの共通する要素を算出する	aCounter & aCounter2
回帰分析をスタッキングで行う	sklearn.ensemble.StackingRegressor()
SJISでデータフレームをCSVファイルに保存する	df.to_csv('file.csv', encoding='shift_jis')
線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
カラムの尖りを計算する	scipy.stats.kurtosis(df['列A'], bias=False)
折れ線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データシリーズの75パーセンタイル	ds.quantile(0.75)
データフレームをある列のカテゴリとしてグループ化し、それぞれのグループの件数を知る	df.groupby('列A').size()
シーグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='seagreen')
カウンタからマッピングを減らす	aCounter.subtract(aDict)
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
最大最小としてデータを揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
折れ線グラフの星マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ある列の値がx以下の行を抽出する	df[df['列A'] <= x]
ディープスカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
リストとデータ列の散布図にrgbの三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
配列の偏差値を計算する	50 + 10 * scipy.stats.zscore(配列)
ネイビー色としてヒストグラムを描画する	plt.hist(データ列, color='navy')
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
整数を二進数表現に変換する	bin(整数)
option: ライトスカイブルーを使う	color = 'lightskyblue'
折れ線グラフのポイント印の線幅を変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ある列の値がxに等しい行を取り出す	df[df['列A'] == x]
横棒グラフを茶色色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
書き込み用にファイルを文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
日付データの曜日を整数で求める	aDate.weekday()
データフレームから同じ行を削除する	df.drop_duplicates(inplace=True)
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
リストを並べる	sorted(リスト)
リストとデータ列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: プラム色を使う	color = 'plum'
文字列の開始位置以降がsubで開始するか調べる	文字列.startswith(部分文字列, 開始位置)
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
option: 色をダークバイオレットに設定する	color = 'darkviolet'
折れ線グラフの色をロイヤルブルーにセットする	plt.plot(データ列x, データ列y, color='royalblue')
赤い▽マーカーをリストとデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図の印を右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
リストと数列について散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ふたつのカラムからグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
option: レベッカパープルにグラフの色を設定する	color = 'rebeccapurple'
プログラムの実行を異常停止する	sys.exit(1)
実数に実数を掛ける	x * y
option: 色をディムグレーに設定する	color = 'dimgray'
文字列の中でケースを無視してパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
小数点数のハイパボリック・コサイン	math.cosh(x)
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
ラインを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
実数を文字列に変換する	str(x)
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームの一部のカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
Excelファイルからデータフレームをシートの名前を指定してロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
プロット中のフォントを変更する	sns.set(font=フォント名)
データフレームの一部のカラムの歪度	df[['列A', '列B']].kurt()
配列を	''.join(map(str, 配列))
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
オブジェクトは抽象クラスか	inspect.isabstract(オブジェクト)
option: 右三角印を加える	marker = '>'
タプルを展開して表示する	print(*タプル)
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
リストの重複を取り除く	sorted(set(リスト), key=リスト.index)
セットを空にする	セット.clear()
データシリーズの年	ds.dt.year
データフレームのあるカラムを配列として選択する	df['列A'].values
線グラフの色をスカイブルーにセットする	plt.plot(データ列x, データ列y, color='skyblue')
option: アイボリー色を使用する	color = 'ivory'
y軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
表データからカテゴリデータを抽出する	df.select_dtypes('object')
列名をリストで置き換える	df.columns = columns
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
配列とイテラブルについて散布図を描画し、、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
保存するCSVファイルの小数点以下の桁数をセットする	df.to_csv('file.csv', float_format='%.3f')
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='palevioletred')
option: コロンをセパレータで使う	sep = ':'
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
水色化する	f'\033[36m{x}\033[0m'
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
リストとデータ列について散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: ミディアムターコイズにフォントの色を設定する	color = 'mediumturquoise'
yについて微分を行う	sympy.diff(数式, y)
オブジェクトは非同期ジェネレータか調べる	inspect.isasyncgen(オブジェクト)
二つのデータフレームを異なるカラムをキーにして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
プロットの中に枠なしの凡例を付ける	plt.legend(frameon=False)
データシリーズの欠損値を最大値に変更する	ds.fillna(ds.max())
縦棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
両端キュー中の要素のインデックス	両端キュー.index(要素)
行列積	np.matmul(aArray, aArray2)
セットが空集合でないかどうか調べる	len(セット) != 0
文字列を末尾からカンマで区切る	文字列.rsplit(',')
やわらかい青色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
赤いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
ブラックにヒストグラムの色を指定する	plt.hist(データ列, color='black')
option: パープルを使う	color = 'purple'
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='grey')
文字列を部分文字列によって区切り、、列挙する	文字列.split(部分文字列)
nが整数と等しいか調べる	整数 == 整数2
option: ポイント印を使う	marker = '.'
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
スレートブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
rgbの丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの中にあるの合計を調べる	df.isin([value]).sum()
option: ライトグレーを使用する	color = 'lightgrey'
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
ファイルをバイナリ書き込みできるようにオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
ベクトルの列ごとの最小値	np.min(aArray, axis=0)
やわらかい青色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データシリーズの曜日数を使う	ds.dt.dayofweek
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
指定したカラムの標本標準偏差を算出する	df['列A'].std(ddof=1)
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
option: フォントの色をダークオレンジに変更する	color = 'darkorange'
入力から二つの整数値を読む	A, B = map(int, input().split())
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
変数が無限大に近づくとき極限値を算出する	sympy.limit(数式, 変数, oo)
リストを文字列として指定された文字で一つにする	文字.join(map(str, リスト))
要素を両端キューの最後に付け加える	両端キュー.append(要素)
xとyの商と余りを同時に計算する	divmod(x, y)
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
平均でデータフレームの指定した列のNaNを埋める	df['列A'].fillna(df['列A'].mean())
データフレームから5行をランダムに重複ありでサンプリングする	df.sample(5, replace=True)
option: シエナにグラフの色を変更する	color = 'sienna'
ゴーストホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
線形回帰モデルの回帰変数	model.coef_
二変数の最小値	min(x, y)
指定したカラムの最頻値	df['列A'].mode()
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ファイルパスをフォルダ名とファイル名に分割する	os.path.split(filepath)
オブジェクトのオブジェクト識別子	id(obj)
データフレームを散布図として図示する	sns.scatterplot(data=df, x='列名', y='列名')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
ヒストグラムの色をスノーに変更する	plt.hist(データ列, color='snow')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
オブジェクトは非同期ジェネレータ関数か確認する	inspect.isasyncgenfunction(オブジェクト)
数列からn値サンプリングしてリストにする	random.sample(数列, k=n)
データフレームをグループ化しあるカラムに対し分散を求める	df.groupby('列A')['列B'].var()
option: フォントの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
三つのデータフレームを縦向きに結合する	pd.concat([df, df2, df3], axis=0)
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
二つのデータフレームを横に結合する	pd.concat([df, df2], axis=1)
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
x軸の目盛りを非表示にする	plt.xticks([])
散布図を赤い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
文字列の出力を改行しないで行う	print(文字列, end='')
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
変数を定義する	x = n
ファイルをオープンして]読み込みストリームを求める	'r' = 'a'<nl>open(filepath, mode='r')
データフレームの指定したカラムのNaNを最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
文字列を最後の区切り文字を用いて二分する	文字列.rpartition(セパレータ)
英数字が文字列中に含まれるか調べる	any(c.isalnum() for c in 文字列)
リストを連結してひとつの文字列にする	''.join(map(str, リスト))
データフレームの一部のカラムのNaNを直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
二つの文字列は同じ	文字列 == 文字列2
デック	両端キュー = collections.deque()
データ列とリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ブラック色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
リストから複数の要素をランダムに重複なく選ぶ	random.sample(リスト, k=n)
データ列をカテゴリデータに変換する	ds.astype(object)
エクセルファイルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
ある列を用いて破壊的にデータフレームを昇順に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
今日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
option: グラフの色をライトグリーンに変更する	color = 'lightseagreen'
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
配列の偏差値を算出する	50 + 10 * scipy.stats.zscore(配列)
変数名がモジュールか	inspect.ismodule(識別子)
折れ線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
データフレームをグループ化し、最小値を求める	df.groupby('列A').min()
整数が整数2以上か	整数 >= 整数2
ディムグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
数列の要素を連結してひとつの文字列にする	''.join(map(str, 数列))
タプルが空か	len(タプル) == 0
識別子が関数かどうか調べる	inspect.isfunction(識別子)
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフのバツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: バイオレットにフォントの色を変更する	color = 'violet'
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
セットから共通要素を取り除く	セット.symmetric_difference_update(セット2)
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
option: 色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
データフレームのある列の25パーセンタイル	df['列A'].quantile(0.25)
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームをCSVファイルにカラムの名前を付けず保存する	df.to_csv('file.csv', header=None)
データフレームの選択したカラムの欠損値を中央値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データフレームから重複ありでランダムに10行をサンプリングする	df.sample(10, replace=True)
データフレームの一部のカラムの不偏分散を計算する	df[['列A', '列B']].var(ddof=1)
データ列の推移を折れ線グラフで描画する	plt.plot(range(len(データ列)), データ列)
ミディアムバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
ある列の欠損値を中央値に変更する	df['列A'].fillna(df['列A'].median())
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
実数を浮動小数点数で割って切り捨てる	x // y
データフレームの選択したカラムの不偏標準偏差	df[['列A', '列B']].std()
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
折れ線グラフの上三角印を赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
横棒グラフを青紫色を用いて描画する	plt.barh(データ列x, データ列y, color='violet')
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
毎回異なるように乱数を初期化する	random.seed()
配列をリストを境界値として分割する	pd.cut(aArray, aList)
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームを保存する	df.to_csv('file.csv')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
整数が整数2よりも小さいか確認する	整数 < 整数2
両端キューの末尾にリストの値を追加する	両端キュー.extend(リスト)
パウダーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='powderblue')
option: フォントの色をダークスレートブルーに変更する	color = 'darkslateblue'
ベクトルの平均を求める	np.mean(aArray)
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
リストと数列について散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
最後のコロンで文字列を二分し、前半を使う	文字列.rpartition(':')[0]
グラフのパレットを濃くする	sns.set(pallete='deep')
整数が一桁の正の数か	0 <= 整数 <= 9
タプルの末尾からn番目以前の部分を取り出す	タプル[:-n]
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
データシリーズのどの値が最も出現するか見る	ds.mode()
整数が偶数か調べる	整数 % 2 == 0
イテラブルとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列からJSONフォーマットのデータを読む	data = json.loads(文字列)
実数とyの斜辺	math.hypot(x, y)
配列と配列の散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をダークオレンジに指定する	color = 'darkorange'
データフレームの複数の列を消す	df.drop(['列A', '列B'], axis=1, inplace=True)
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
ファイルを開いて]追加ストリームを見る	'a' = 'a'<nl>open(filepath, mode='a')
縦棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
Pythonのバージョンを知る	if sys.version_info >= (3, 4):<nl><tab>print(sys.version_info)
option: フォントの色をグリーンにする	color = 'green'
パールバイオレットレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
ディープスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
凡例の位置を指定する	plt.legend(loc=(x, y))
線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
黒いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームの中のカラムをビンニングする	pd.cut(df[col], aList)
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの中に文字列と文字列があるか	df.isin([value, value2])
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategrey'
リストの変化を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
文字列から空白を取り除く	文字列.replace('\t', '')
一番右側の列を外したデータフレーム	df[df.columns[:-1]]
真	True
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
散布図にバツ印を加える	plt.scatter(データ列x, データ列y, marker='x')
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
両端キューの長さ	len(両端キュー)
二つの浮動小数点数が十分に近い	math.isclose(x, x2)
option: アンティークホワイトを使う	color = 'antiquewhite'
ヒストグラムを黄色色を用いて描画する	plt.hist(データ列, color='yellow')
option: ライトイエローにフォントの色を設定する	color = 'lightyellow'
データフレームをValueMapでまとめて変更する	df.replace(ValueMap)
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
option: 色を濃い青に指定する	color = 'darkblue'
空のカウンタ	collections.Counter()
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
リストの最初の要素を探す	リスト.index(要素)
文字列を最後の部分文字列で二分割して、残りを見る	文字列.rpartition(部分文字列)[-1]
option: グラフの色をアクアに変更する	color = 'aqua'
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
ヒストグラムの色をライムにする	plt.hist(データ列, color='lime')
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ヒストグラムの線の種類を実線に指定する	plt.hist(データ列, linestyle='solid')
CSVファイルにデータフレームを小数点以下3桁まで書き出す	df.to_csv('file.csv', float_format='%.3f')
散布図に黒い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
配列とリストの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
セットの濃度を求める	len(セット)
散布図のクロス印の色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ダーク・スラテグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: ライトシアンにグラフの色を設定する	color = 'lightcyan'
平均値で指定した列の欠損値を補う	df['列A'].fillna(df['列A'].mean())
データフレームの選択したカラムを丸めて整数にする	df[['列A', '列B']].round().astype(int)
折れ線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
option: 右三角印を使用する	marker = '>'
データフレームを千の位で丸めて整数型にする	df.round(-3).astype(int)
縦に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
データフレームをまとめて丸める	df.round()
option: 白色を使う	color = 'white'
数式の数値	float(数式)
折れ線グラフの四角印の線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
実数を実数で割った剰余を求める	math.remainder(x, x2)
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
ひとつ置きにリストを取り出す	リスト[::2]
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
まとめてデータフレームを正規表現patternでreplに置き換える	df.replace(pattern, repl, regex=True)
コードポイントの最大値を調べる	sys.maxunicode
０で全要素を初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
両端キューに文字列をエンキューする	両端キュー.append(文字列)
option: 色をスプリンググリーンに変更する	color = 'springgreen'
文字列中に漢字が含まれるか確認する	re.search('[\u4E00-\u9FD0]', 文字列)
16進文字列をバイト列に変換する	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
実数を切り上げて整数に変換する	math.ceil(x)
文字列を最後のコロンで二分して、残りを使う	文字列.rpartition(':')[-1]
オブジェクトが型	isinstance(obj, クラス)
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
両端キューの左に整数を追加する	両端キュー.appendleft(整数)
あるカラムのカテゴリごとの標準偏差	df.groupby('列A').std()
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
タプルの要素を展開して出力する	print(*タプル)
リストを縦棒プロットにする	plt.bar(ラベル列, データ列)
ひとつでも数字が文字列中に含まれる	any(c.isdigit() for c in 文字列)
ふたつのリストを連結する	リスト + リスト2
データフレームの一部のカラムの中の欠損値の合計をカウントする	df[['列A', '列B']].isna().sum()
黄緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
十六進文字列をバイト列に変換する	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
黒い左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
整数がセットのメンバーでないか	数 not in セット
マッピングを階層化マップに変換する	collections.ChainMap(aDict)
浮動小数点数に実数を掛ける	x * y
option: グラフの色をダークグレーに設定する	color = 'darkgray'
データフレームの指定した列のメディアン	df['列A'].median()
改行せず計算結果をプリントする	print(式, end='')
スピアマン相関係数としてデータフレームの相関行列を求める	df.corr(method='spearman')
option: シアンにグラフの色を設定する	color = 'cyan'
線グラフの色をブルーバイオレットにする	plt.plot(データ列x, データ列y, color='blueviolet')
ボックスチャートを描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
データフレームのある列の欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
両端キュー中の文字列の位置	両端キュー.index(文字列)
文字列が無限に続くイテラブル	itertools.repeat(element)
ボックスチャートに簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
リストを文字列として、'改行でつなげる	'\n'.join(map(str, リスト))
ダークグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='darkgreen')
棒グラフを真紅色として描画する	plt.bar(データ列x, データ列y, color='crimson')
ファイルの絶対パスを使う	os.path.abspath(filepath)
データフレームをある列によってソートする	df.sort_values(by='列A')
行列積を求める	np.matmul(aArray, aArray2)
文字列中にひとつもアルファベットが含まれないか	any(not c.isalpha() for c in 文字列)
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
配列のピアソンの相関係数	scipy.stats.pearsonr(配列, 配列2)
データフレームの指定したカラムを万の位で丸める	df['列A'].round(-4)
散布図に赤い▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
option: グラフの種類を破線にする	linestyle = 'dashed'
辞書をJSON形式を使って指定したファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
リストの中の一番小さい値	min(リスト)
複数の文字列を順にプリントする	print(文字列, 文字列, 文字列)
ユークリッド距離を算出する	math.dist(point, point2)
データフレームの選択したカラムの欠損値を最小値で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
日付時刻データの日付を求める	aDatetime.date()
横に並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
リストをJSONフォーマットとしてファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
多次元データを主成分分析で文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
両端キューの先頭に配列の各要素を追加する	両端キュー.extendleft(配列)
ファイルからディレクトリ名を求める	os.path.dirname(filepath)
文字列をJSON形式でファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
横棒グラフをターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='turquoise')
浮動小数点数を十六進表記の文字列に変換する	x.hex()
option: シルバーにグラフの色を設定する	color = 'silver'
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
グラフのy軸を対数に変更する	plt.yscale('log')
ファイルを文字列の示すエンコーディングでオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
横棒グラフをプラム色を使って描画する	plt.barh(データ列x, データ列y, color='plum')
スピアマンの順位相関係数を計算する	scipy.stats.spearmanr(数列, 数列2)
正規分布にしたがって配列の値が発生する確率を使う	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
入力ストリームを全て読む	f.read()
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: 色をダークグレーに変更する	color = 'darkgrey'
実数をn乗する	x ** n
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
データフレームの選択したカラムの中央値を求める	df[['列A', '列B']].median()
配列と同じ大きさの空の配列を作る	np.empty_like(aArray)
文字の文字コードを求める	ord(文字)
ヒストグラムをスプリンググリーン色を用いて描画する	plt.hist(データ列, color='springgreen')
イテラブルからn個、サンプリングしてリストにする	random.sample(イテラブル, k=n)
オブジェクトは文字列クラスのインスタンスか調べる	str = int<nl>isinstance(obj, str)
折れ線グラフの星印の大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
データフレームのあるカラムの月	df['列A'].dt.month
折れ線グラフの下三角印を赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
浮動小数点数が負の数	x < 0
表データのあるカラムの曜日は何日目か見る	df['列A'].dt.dayofweek
n進文字列をバイナリにする	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
両端キューの先頭に数列の値を追加する	両端キュー.extendleft(数列)
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
option: グラフの色をダークサーモンに変更する	color = 'darksalmon'
データフレームのあるカラムの中に文字列と日付データがあるか調べる	df['列A'].isin([value, value2])
ベクトルのユニークな要素とその位置を計算する	u, indices = np.unique(aArray, return_index=True)
データフレームをグループ化しある列に対し合計を計算する	df.groupby('列A')['列B'].sum()
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
双方向キューに文字列をエンキューする	両端キュー.append(文字列)
パパイヤウィップ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームのカラムが正規分布かどうか仮説検定する	scipy.stats.shapiro(df['列A'])
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
二つのオブジェクトが等しいか調べる	obj == obj2
複数の列によってデータフレームをソートする	df.sort_values(by=['列A', '列B'])
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
文字列から末尾を取り除く	文字列.removesuffix(部分文字列)
横棒グラフをダークゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
文字列が全てアスキー文字か調べる	文字列.isascii()
黒い▽マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムをダークグリーン色として描画する	plt.hist(データ列, color='darkgreen')
プロットの用途を論文に設定する	sns.set(context='paper')
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
option: オールドレースにフォントの色を設定する	color = 'oldlace'
文字列はセットのメンバーに含まれる	文字列 in セット
整数を整数にする	int(x)
散布図をミディアムスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ISO書式の文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
カラムを指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
数式の変数を指定した数式で置き換える	数式.subs(変数, 数式2)
辞書をJSON形式で指定したファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
テキストファイルファイル名がかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
マゼンタで表示できる文字列に変換する	f'\033[35m{x}\033[0m'
nが無限に続く整数イテラブル	itertools.repeat(n)
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
大文字・小文字を無視して正規表現をあらかじめコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
訓練データで分類モデルを学習する	model.fit(説明変数, 目的変数)
マッピングを浅くコピーする	dict(辞書)
ヒストグラムをカデットブルー色を用いて描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフの色をオールドレースにする	plt.plot(データ列x, データ列y, color='oldlace')
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
イテラブルとリストについての散布図にrgbの▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの全カラムを散布図として見る	sns.pairplot(df)
データフレームの最初n行	df.head(n)
整数の八進文字列	oct(整数)[2:]
ヒストグラムを赤くする	plt.hist(データ列, color='r')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
文字列内に漢字があるか調べる	re.search('[\u4E00-\u9FD0]', 文字列)
二つのセットが交わりを持たない	セット.isdisjoint(セット2)
ライトスチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
セットが空かどうか	len(セット) == 0
データフレームの列の標準偏差	df['列A'].std()
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
あるカラムのカテゴリごとの平均値	df.groupby('列A').mean()
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
ヒストグラムをダークシアグリーン色を用いて描画する	plt.hist(データ列, color='darkseagreen')
文字列の右側から指定された文字を取り除く	文字列.rstrip(文字)
文字列を両端キューにエンキューする	両端キュー.append(文字列)
year年month月の日付	datetime.date(year=year, month=month, day=1)
ファイルから1バイト読み込む	f.read(1)
ある列の値がxに等しく、別の列の値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
ファイルからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
option: 3２ビット整数型を使う	np.int16 = np.int<nl>dtype = np.int16
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
辞書のキーの一覧を得る	list(辞書.keys())
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ひとつでも非小文字が文字列中にある	any(not c.islower() for c in 文字列)
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
xとyをスラッシュで区切って表示する	print(x, y, sep='/')
データフレームの選択したカラムの歪みを求める	df[['列A', '列B']].kurt()
カウンタの文字列を列挙する	aCounter.keys()
双曲線余弦の逆数を計算する	math.acosh(x)
入力から２つの自然数を読む	A, B = map(int, input().split())
文字列の左端から改行を取り除く	文字列.lstrip('\n')
ファイル入力をJSONとして構文解析する	json.load(ファイル入力)
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
文字列から空白を全て取り除く	文字列.replace('\t', '')
ファイルを追加モードでオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
オブジェクトは整数クラスかどうか調べる	int = int<nl>isinstance(obj, int)
小数点数のタンジェントの逆数を求める	math.atan(x)
文字列から指定された文字を全て取り除く	文字列.replace(文字, '')
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
文字列のプレフィックスから部分文字列を除く	文字列.removeprefix(部分文字列)
行列の演算をする	import numpy as np
文字列中の小文字を大文字にする	文字列.upper()
要素がリストに含まれないか調べる	要素 not in リスト
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
数式の変数についてのn階微分を求める	sympy.diff(数式, 変数, n)
option: 色をダークグリーンに設定する	color = 'darkgreen'
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
配列とリストの散布図を描画し、、文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
ValueMapでまとめてデータフレームの選択した列を置換する	df[['列A', '列B']].replace(ValueMap)
条件が三つとも成り立つ	条件 and 条件2 and 条件3
散布図をダークブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkblue')
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
表データから指定された３つの列を抽出する	df[['列A', '列B', '列C']]
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
右三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データシリーズの欠損値を最小値に減らす	ds.fillna(ds.min())
文字列中にひとつも英数字が含まれない	any(not c.isalnum() for c in 文字列)
ヒストグラムをスレートブルー色を用いて描画する	plt.hist(データ列, color='slateblue')
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ファイルが存在するかどうか調べる	os.path.exists(filepath)
ダークオリーブグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
空のタプルを作る	()
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ひとつでも非アスキー文字が文字列中に含まれるかどうか	any(not c.isascii() for c in 文字列)
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
黒い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
縦棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
ファイルを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
赤い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
文字列モジュールをインポートする	import string
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
option: 暗い赤を使う	color = 'darkred'
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
ある列を消し、みる	df.drop('列A', axis=1)
t-SNEを用いて多次元データを文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ラインを色付きの実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
指定した列の空文字を欠損値に変換しドロップする	df['列A'].replace('', np.nan).dropna()
グラフを画面用に設定する	sns.set(context='notebook')
option: グラフの色を小麦色にセットする	color = 'wheat'
横棒グラフをシルバー色を用いて描画する	plt.barh(データ列x, データ列y, color='silver')
ミディアムアクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
リストと配列の散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
フォレストグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームのある列の値がxより大きいデータを抽出する	df[df['列A'] > x]
日付時刻データにn分を加える	aDatetime + datetime.timedelta(minutes=n)
文字列の両端から指定された文字を除く	文字列.strip(文字)
空行を表示する	print()
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
option: クロスマーカーを使う	marker = 'x'
2進数文字列をバイナリに変換する	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
データフレームの指定したカラムを千の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
データフレームを関数の値でグループ分けする	df.groupby(関数)
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
データフレームの数値をまとめて丸める	df.round()
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームの一部のカラムの中に文字列がある	df[['列A', '列B']].isin([value])
ケンドール相関係数でデータフレームの相関行列を計算する	df.corr(method='kendall')
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
カテゴリ別で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
線グラフの色をスプリンググリーンにセットする	plt.plot(データ列x, データ列y, color='springgreen')
リストをJSON形式の文字列に変換する	json.dumps(リスト, ensure_ascii=False)
データ列と数列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
要素が全て1の行列	np.ones(要素数, dtype=np.int)
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
整数が整数2未満、またはn3以上か調べる	整数 < 整数2 or 整数 >= n3
option: 左三角印を描画する	marker = '<'
文字列を改行せず表示する	print(文字列, end='')
文字列を最初のコロンで二分して、前半を使う	文字列.partition(':')[0]
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
辞書にキーが存在しない場合、処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
マッピングのキーに対応した値を得る	辞書.get(キー, 見つからない場合の値)
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
ロバスト回帰モデルを新規作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
識別子は非同期ジェネレータか	inspect.isasyncgen(識別子)
イテラブルをダミー変数に変換する	pd.get_dummies(イテラブル)
グリッド線を赤くする	plt.grid(color='r')
サイコロ	random.randint(1, 6)
回帰モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームの選択したカラムの75パーセンタイル	df[['列A', '列B']].quantile(0.75)
データフレームの選択したカラムの欠損値を最小値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
クリムゾン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
インディアンレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
サンディーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
option: 区切り記号をカンマにする	sep = ','
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
紺にヒストグラムの色をセットする	plt.hist(データ列, color='darkblue')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
項がセットのいずれかどうか調べる	要素 in セット
データシリーズの中にある文字列と文字列の個数を調べる	ds.isin([value, value2]).sum()
n進数文字列をバイト列に変換する	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
辞書で文字列をカウントする	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
セットを複製する	セット.copy()
ふたつのカラムからグループ化し、最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
データフレームの欠損値を数値で補完する	df.fillna(x)
タプルの要素を昇順に並べ直す	sorted(タプル, reverse=True)
キーがマップに存在しないとき、要素を追加する	辞書.setdefault(キー, element)
ある列を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
データフレームのn行までを選択する	df[:n]
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データ列の折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ひとつも数字が文字列中に含まれないかどうかテストする	any(not c.isdigit() for c in 文字列)
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
折れ線グラフに赤い△印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
辞書から計数器を作る	collections.Counter(aDict)
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
文字はカタカナか調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
入力からJSONフォーマットのデータを読み込む	json.load(ファイル入力)
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
データフレームの中に文字列と文字列が含まれる	df.isin([value, value2])
データフレームの選択したカラムの欠損値を直前の値に指定する	df[['列A', '列B']].fillna(method='ffill')
整数が負の数か	整数 < 0
データフレームをグループ化しある列に対し最小値を算出する	df.groupby('列A')['列B'].min()
y軸の目盛を表示しない	plt.yticks([])
実線でヒストグラムを描く	plt.hist(データ列, linestyle='solid')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフを青い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
option: グラフの色をブラックに設定する	color = 'black'
ASCII文字が文字列中に含まれないかどうか調べる	any(not c.isascii() for c in 文字列)
散布図を菱形マーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
タプルを引数として展開して表示する	print(*タプル, sep=',')
配列の行列式	np.linalg.det(aArray)
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
折れ線グラフの大バツ印を赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
文字列中のある文字を数える	文字列.count(文字)
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
option: フォントの色をドジャーブルーに設定する	color = 'dodgerblue'
ヒストグラムと勾配ブースティングでクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
数列とリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
JSON文字列を辞書に変換する	data = json.loads(文字列)
配列を連結して一つの文字列にする	''.join(map(str, 配列))
折れ線グラフの色をダークターコイズにする	plt.plot(データ列x, データ列y, color='darkturquoise')
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ヒストグラムを青くする	plt.hist(データ列, color='b')
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
ヒストグラムの線の種類を一点鎖線にセットする	plt.hist(データ列, linestyle='dashbot')
データフレームをグループ化してヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレーム全体をインデックスで降順でソートする	df.sort_index(ascending=False)
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームを複数の列によってソートする	df.sort_values(by=['列A', '列B'])
カテゴリで色分けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
一点鎖線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの一部の列のNaNを平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
数列とリストについての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
分割数nで配列をビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
ダーク・スラテグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
辞書の値に要素が含まれていない	element not in 辞書.values()
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
条件かつ条件	条件 and 条件2
指定した列リストのみ、データフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
整数が5の倍数か調べる	整数 % 5 == 0
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
文字列の右側から指定した文字を取り除く	文字列.rstrip(文字)
データシリーズの中に文字列があるか調べる	ds.isin([value])
option: フォントの色をサンディーブラウンにする	color = 'sandybrown'
折れ線グラフのダイアモンドマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
整数がnで割り切れるか	整数 % n == 0
データフレームを指定した列によってグループ化し記述統計量を計算する	df.groupby('列A').describe()
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
表データのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
データシリーズの欠損値をxに指定する	ds.fillna(x)
最大値・最小値の範囲として一様な疑似乱数を発生させる	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
プロットを表示する	plt.show()
ASCII限定として正規表現で文字列を分ける	re.split(pattern, s, flags=re.ASCI)
option: 欠損値は無視する	dropna = True
データフレームのある列の値がx以下の行を抽出する	df[df['列A'] <= x]
散布図を黒い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ナバホホワイトにフォントの色を設定する	color = 'navajowhite'
データフレームの選択したカラムの欠損値を最大値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ファイルにxを文字列に変換して書き込む	x = 0<nl>f.write(str(x))
アイボリー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
百分率付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
プロットに簡単な説明を追記する	plt.legend(['凡例A', '凡例B'])
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
コーンフラワーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
プロットからグリッド線を消す	plt.grid(False)
データフレームを関数によってグループ分けし、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データフレームの指定した列の不偏標準偏差	df['列A'].std()
ベクトルにはいくつ要素が存在するか調べる	aArray.size
オブジェクトはトレースバックか調べる	inspect.istraceback(オブジェクト)
リストのn番目のを使う	リスト[n]
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
棒グラフを青緑色を用いて描画する	plt.bar(データ列x, データ列y, color='teal')
文字列リストをsepを区切りとして連結する	sep.join(文字列リスト)
シーケンスを累加する	itertools.accumulate(iterable)
インディアンレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
データフレームの選択したカラムの中に文字列と文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
文字列のある位置より後に部分文字列が存在しないかどうか調べる	文字列.find(部分文字列, 開始位置) == -1
UNIX時間のカラムからPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
横棒グラフをターコイズ色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図の左三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
データ列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
珊瑚色でヒストグラムを描画する	plt.hist(データ列, color='coral')
タプルを逆順にする	タプル[::-1]
昨日の日付を求める	datetime.date.today() - datetime.timedelta(days=1)
改行なしに二つの変数の値をプリントする	print(変数名, 変数名, end='')
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームを関数の値によってまとめたグループを使う	df.groupby(関数)
クラス分類をバギングを用いてする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
十六進数文字列をバイナリに変換する	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
散布図の左三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列を代数計算の変数にする	sympy.Symbol(変数名)
箱ヒゲ図を描いて、平均値を追加する	plt.boxplot(データ列, showmeans=True)
データフレームをCSVファイルとして出力する	df.to_csv('file.csv')
表データのn行目をドロップしてみる	df.drop(n, axis=0)
二つの集合の差集合	セット.difference(セット2)
双方向キューの要素をローテーションする	両端キュー.rotate(1)
option: やわらかい青を使う	color = 'cornflowerblue'
deqの最後	両端キュー[-1]
データシリーズの欠損値をその第二四分位数で埋める	ds.fillna(ds.median())
配列の尖りを使う	scipy.stats.kurtosis(配列, bias=False)
文字列中にひとつでも大文字があるか	any(c.isupper() for c in 文字列)
双方向キュー中の要素のインデックス	両端キュー.index(要素)
ふたつのマップを合体する	辞書 | 辞書2
配列とリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
オブジェクトはトレースバック	inspect.istraceback(オブジェクト)
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
辞書の項目の一覧	list(辞書.values())
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
文字列の先頭から部分文字列を消す	文字列.lstrip(部分文字列)
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
辞書にキーが存在しないとき、処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
option: ライムグリーンを使う	color = 'limegreen'
ファイルパスからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
識別子がクラス	inspect.isclass(識別子)
nullに等しい値	None
コマンドラインで与えられたファイルをひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
数値がセットの要素でない	数 not in セット
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
コーンフラワーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
データ列の折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
option: どの列も行に設定しない	index_col = None
整数はセットに含まれるか調べる	数 in セット
配列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
実数のn乗	x ** n
n個に等しい量になるようにデータ列をビン分割する	pd.qcut(ds, n)
整数が正の数	整数 > 0
ヒストグラムの線種を破線に設定する	plt.hist(データ列, linestyle='dashed')
整数を整数で割ったモジュロを求める	整数 % 整数2
データフレームの中に存在する日付データと文字列の個数を数える	df.isin([value, value2]).sum()
yが0に近づく時数式の極限値を算出する	sympy.limit(数式, y, 0)
SVDで要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフのバツ印を青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データシリーズの中央値	ds.median()
option: 線の幅を設定する	linewidth = 3.0
複数横に並べてヒストグラムを描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: スレートブルーにグラフの色を指定する	color = 'slateblue'
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
黒いクロスマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
ダークサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='darksalmon')
色付きの破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
リストと配列についての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
スーパーセット	セット.issuperset(セット2)
seabornのデフォルト見栄えを適用する	sns.set()
リストのn番目のを見る	リスト[n]
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
文字列がセットに含まれないか調べる	文字列 not in セット
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
文字コードから文字へする	chr(文字コード)
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
カラム名を指定して表データを結合する	'<nl>pd.merge(df, df2, on='列A')
空のロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ヒストグラムの色をパープルにする	plt.hist(データ列, color='purple')
多次元データを特異値分解で文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
整数が-9以上9以下か	-9 <= 整数 <= 9
整数が1、もしくは2かどうか調べる	整数 == 1 or 整数 == 2
ダークレッド色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
２つの列の値でデータフレームをグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
最初の整数を双方向キューから取り除く	両端キュー.remove(整数)
条件が二つとも同時に成り立つ	条件 and 条件2
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームをグループ化しそれぞれの最小値を算出する	df.groupby('列A').min()
xをアンダーライン付きで表示できる文字列にする	f'\033[4m{x}\033[0m'
箱ヒゲ図を横方向にする	plt.boxplot(データ列, vert=False)
option: ロイヤルブルー色を使用する	color = 'royalblue'
リストから重複なくn要素ランダムに選ぶ	random.sample(リスト, k=n)
リストを引数として展開して表示する	print(*リスト)
文字が別の文字列に存在しないかどうか調べる	文字 not in 文字列
3変数の最も大きい値	max(x, y, z)
subで部分文字列が開始するかどうか	文字列.startswith(部分文字列)
データシリーズの未入力値を直後の値で埋める	ds.fillna(method='bfill')
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
option: フォントの色をスプリンググリーンに変更する	color = 'springgreen'
データフレームをグループ化し、ある列に対し合計を求める	df.groupby('列A')['列B'].sum()
時間を使用する	import time
データ列の推移を青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: ボックスチャートを横向きにする	vert = False
列名を指定してデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
データフレームを昇順に行によって並べ直す	df.sort_index(ascending=True)
ファイルを一行ずつ読み込む	f.readline()
文字列を空白で区切って、文字列リストにする	文字列.split()
あるカラムの第三四分位数	df['列A'].quantile(0.75)
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
オブジェクトのイテレータ	iter(obj)
マッピングをカウンタに変換する	collections.Counter(aDict)
線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
整数のn分の1を計算する	整数 / n
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
ファイルパスから拡張子付きのファイル名を使う	os.path.basename(filepath)
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列の開始位置以降がsubで始まる	文字列.startswith(部分文字列, 開始位置)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
ファイルパスを開いて]、追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
最小値で指定したカラムの欠損値を埋める	df['列A'].fillna(df['列A'].min())
ふたつのカラムからグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
データフレームのあるカラムの曜日が何日目か知る	df['列A'].dt.dayofweek
ひとつも数字が文字列中に存在しないかどうか調べる	any(not c.isdigit() for c in 文字列)
辞書をJSON形式でファイル出力に保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
ダークカーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
二つの文字列は等しいか	文字列 == 文字列2
配列の和	aArray + aArray2
アンダーライン付きで表示できる文字列に変換する	f'\033[4m{x}\033[0m'
スレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
複数行対応として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図をポイントマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='.')
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
折れ線グラフの色をクリムゾンに指定する	plt.plot(データ列x, データ列y, color='crimson')
n番目の列を除いたデータフレームを求める	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: サンディーブラウンに色を指定する	color = 'sandybrown'
乱数の行列を作る	np.random.random((行数, 列数))
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
上位集合もしくは等しいか調べる	セット >= セット2
文字列を走査し、正規表現にケースを無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
文字列を部分文字列で区切って列挙する	文字列.split(部分文字列)
行列の次元の数	aArray.ndim
線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
グラフで使える色名の一覧	matplotlib.colors.cnames
option: ダークシアン色を使う	color = 'darkcyan'
ダーク・スラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
全ての印字可能な文字	string.printable
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフを半透明の一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
色付きの一点鎖線でリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
データフレームにおいてどの値が頻出か見る	df.mode()
option: リネンを用いる	color = 'linen'
文字列を最後の部分文字列で二つに分ける	文字列.rpartition(部分文字列)
散布図をダークスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
文字列中にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in 文字列)
整数が5で割り切れる	整数 % 5 == 0
ミディアムスプリンググリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
実数のn乗	pow(x, n)
option: フォントの色をロイヤルブルーに指定する	color = 'royalblue'
折れ線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をスノーにセットする	plt.hist(データ列, color='snow')
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームを出力する	df.to_csv('file.csv')
文字列をセパレータで区切って、列挙する	文字列.split(セパレータ)
option: スタイルを破線にセットする	linestyle = 'dashed'
日付時刻データの秒数を使う	aDatetime.second
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
配列の形	aArray.shape
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
カテゴリ列で色分けして、に箱ひげ図としてデータフレームをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
実数の逆余弦を求める	x = 0.33<nl>math.acos(x)
カラムの母標準偏差	df['列A'].std(ddof=0)
空のリストを作る	[]
プロットを全般的に濃くする	sns.set(pallete='deep')
データフレームの指定したカラムの第三四分位数	df['列A'].quantile(0.75)
配列の相乗平均を求める	scipy.stats.gmean(配列)
列名を置き換える	df.columns = columns
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
データフレームの選択した列の中のNaNの合計をカウントする	df[['列A', '列B']].isna().sum()
整数と整数の論理積	整数 & 整数2
ミスティローズ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ある列の文字列に部分文字列が含まれる行を抽出する	df[df['列A'].str.contains(部分文字列)]
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
option: フォントの色をダークグレーに設定する	color = 'darkgrey'
両端キュー中の要素の数をカウントする	両端キュー.count(要素)
データフレームの選択したカラムの欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームから型リストで指定したデータ型の列を抽出する	df.select_dtypes(include=typeList)
8進数文字列をバイト列に変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
散布図を紺碧色を使って描画する	plt.scatter(データ列x, データ列y, color='azure')
ファイルの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
折れ線グラフをレベッカパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ピンク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
キューが空か確認する	len(両端キュー) == 0
option: フォントの色を淡いピンク色に変更する	color = 'lightpink'
option: チョコレートに色を設定する	color = 'chocolate'
表データのあるカラムの年	df['列A'].dt.year
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
文字列の右側から改行を取り除く	文字列.rstrip('\n')
タイムスタンプデータがタイムスタンプデータと同時かどうか	aDatetime == aDatetime2
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
整数のビット長	整数.bit_length()
数を文字列に変換する	str(x)
配列が正規分布に従うかどうか調べる	scipy.stats.shapiro(配列)
文字列を最後のカンマで分割する	文字列.rpartition(',')
半透明の一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
両端キューの中に要素があるかどうか調べる	要素 in 両端キュー
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
グラフにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
左三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
数列とデータ列の散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームをCSVファイルにSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
要素がタプルに含まれるかどうか調べる	要素 in タプル
変数名がジェネレータ関数	inspect.isgeneratorfunction(識別子)
文字列中にひとつでも非空白が存在するかテストする	any(not c.isspace() for c in 文字列)
固有値分解の準備をする	model = sklearn.decomposition.PCA(n_components=n)
オブジェクトは論理値クラス	bool = int<nl>isinstance(obj, bool)
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列を文字コードのリストに変換する	[ord(ch) for ch in 文字列]
長さの制限された双方向キューを数列から作成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
nで乱数シードを固定する	random.seed(n)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データ列とデータ列の散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
縦棒グラフを淡いピンク色色を使って描画する	plt.bar(データ列x, データ列y, color='lightpink')
文字列を最後のコロンで二分する	文字列.rpartition(':')
線グラフの色を青に指定する	plt.plot(データ列x, データ列y, color='blue')
小数点数以下の最大の整数を計算する	math.floor(x)
プロットの色を濃くする	sns.set(pallete='deep')
option: ロイヤルブルーを用いる	color = 'royalblue'
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
option: グラフの色をライトサーモンに変更する	color = 'lightsalmon'
等しい量になるようにデータフレームの中の列をn個に分割する	pd.qcut(df[col], n)
二つの列の値でデータフレームをグループ分けする	df.groupby(['列A', '列B'])
折れ線グラフの▽マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
xを青色化する	f'\033[34m{x}\033[0m'
option: フォントの色をライトイエローに設定する	color = 'lightyellow'
配列と数列の散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムをプロットして区間数を指定する	plt.hist(データ列, bins=区関数)
xが真かどうか調べる	bool(x)
乱数生成系列を初期化する	random.seed()
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
文字列を置換する	文字列.replace(部分文字列, 置換後の文字列)
ヒストグラムをオリーブ色を用いて描画する	plt.hist(データ列, color='olive')
y座標の目盛を非表示にする	plt.yticks([])
SJISを用いて書き込み用にファイルを開く]	open(filepath, mode='w', encoding='shift_jis')
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
前もってケースを無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
タン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
数列の移り変わりを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームをある列の値によってグループ化する	df.groupby('列A')
指定した値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
文字列の終了位置より前に部分文字列がない	文字列.find(部分文字列, 0, 終了位置) == -1
ロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
グラフの色を淡くする	sns.set(pallete='muted')
外れ値を除いたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
セットをイミュータブルなセットにする	frozenset(セット)
表を破壊的に昇順に2つの列を用いてソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: 先頭のカラムを行に設定する	index_col = 0
ミントクリーム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
リストとリストについて散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ミディアムターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='mediumturquoise')
ユニコードを文字へ変換する	chr(文字コード)
オブジェクトはリスト	list = int<nl>isinstance(obj, list)
セットから別のセットとの共通要素を取り除く	セット.symmetric_difference_update(セット2)
ミディアムバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
余弦の逆数を求める	x = 0.33<nl>math.acos(x)
option: ライトスレイグレー色を使用する	color = 'lightslategray'
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの選択したカラムのパーセンタイルを算出する	df[['列A', '列B']].quantile(パーセント/100)
option: フォントの色をミディアムスレートブルーにする	color = 'mediumslateblue'
データシリーズの標準偏差	ds.std()
小数点数の床を求める	math.floor(x)
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
横棒グラフをハニーデュー色を用いて描画する	plt.barh(データ列x, データ列y, color='honeydew')
レベッカパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
色付きの実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
両端キューを配列から作る	collections.deque(配列)
タプルをミュータブルにする	list(タプル)
日付時刻データの時間を使う	aDatetime.time()
データフレームを使う	import pandas as pd
リストとリストについて散布図を描き、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
カウンタをリセットする	aCounter.clear()
辞書を階層化辞書にする	collections.ChainMap(aDict)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
部分集合か判定する	セット.issubset(セット2)
二つ並べてヒストグラムを描く	plt.hist([データ列, データ列], color=['b', 'r'])
整数が整数2以下か確認する	整数 <= 整数2
セットが空集合かどうか	len(セット) == 0
JSON入力ストリームを辞書に変換する	json.load(ファイル入力)
データフレームのカラムの相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
折れ線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
太字でxを出力する	print(f'\033[1m{x}\033[0m')
ふたつの関係が⊆か調べる	セット.issubset(セット2)
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
整数が一桁の整数か調べる	-9 <= 整数 <= 9
整数が1、もしくは2、もしくは3に等しい	整数 == 1 or 整数 == 2 or 整数 == 3
ピアソンを用いてデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
実数を小数点で丸める	round(x, n)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
オブジェクトの属性の値を値に指定する	setattr(obj, プロパティ名, 値)
タプル内の要素が全て真かどうか調べる	all(タプル)
データフレームから重複を認めてランダムに5行をサンプリングする	df.sample(5, replace=True)
行列の標準偏差を使う	np.std(aArray)
破線にヒストグラムの線の種類をセットする	plt.hist(データ列, linestyle='dashed')
プログラムの実行を適切に停止する	sys.exit(0)
JSON文字列を構文解析する	data = json.loads(文字列)
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
イエローグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
文字コードエスケープで文字列をバイト列に変換する	文字列.encode(encoding='unicode_escape')
棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
折れ線グラフのダイアモンド印を青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
作画の色を指定する	sns.set(pallete=パレット名)
カウンタのそれぞれの項目を、その出現回数だけ列挙する	aCounter.elements()
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
アヤメのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
データフレームの選択した列においてどの値が最も出現するか調べる	df[['列A', '列B']].mode()
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
データフレームをソートする	df.sort_values('キーとなる列')
空のロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
線グラフの色をラベンダーブラッシュにセットする	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームを10000の位で丸める	df.round(-4)
データフレームを行によって並べる	df.sort_index()
オブジェクトのプロパティの値を指定する	setattr(obj, プロパティ名, 値)
ミディアムターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームから型型の列のみ選ぶ	df.select_dtypes(ty)
ヒストグラムをパレットトルコイズ色を用いて描画する	plt.hist(データ列, color='paleturquoise')
option: グラフの色をアクアに指定する	color = 'aqua'
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
2つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
長さnのリスト	[0] * n
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列のケースを入れ替える	文字列.swapcase()
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
文字列中の文字を別の文字へ置き換える	文字列.replace(部分文字列, 置換後の文字列)
上限nの両端キューを作る	collections.deque(maxlen=最大長)
正規表現に文字列の先頭でケースを無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
配列の和を求める	aArray + aArray2
時計回りに円プロットを描画する	plt.pie(データ列, startangle=90, counterclock=False)
option: グラフの色を耐火レンガにセットする	color = 'firebrick'
文字列をカンマで二分して、残りを使う	文字列.partition(',')[-1]
キューの要素をインプレースに反転する	両端キュー.reverse()
自分自身をモジュールとしてを見る	sys.modules[__name__]
文字列リストを結合する	''.join(文字列)
順序を保持しながらリストの重複を除去する	sorted(set(リスト), key=リスト.index)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
option: 読み込み用に指定する	mode = 'r'
リストの各要素を両端キューの末尾に追加する	両端キュー.extend(リスト)
縦棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
predicateFuncが真とならないイテラブルの要素を得る	itertools.dropwhile(predicateFunc, iterable)
option: 色をスチールブルーに変更する	color = 'steelblue'
枠なしのデータラベルをプロットの中に入れる	plt.legend(frameon=False)
文字列をJSON形式の文字列にする	json.dumps(文字列, ensure_ascii=False)
データシリーズの欠損値を直前の値で埋める	ds.fillna(method='ffill')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
目盛り線	plt.grid(linestyle='--')
オブジェクトはタプル型か調べる	tuple = int<nl>isinstance(obj, tuple)
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
データフレームをある列のカテゴリでグループ分けし、、それぞれのグループの件数を知る	df.groupby('列A').size()
文字列中の部分文字列を新しい文字列に置き換える	文字列.replace(部分文字列, 置換後の文字列)
リストをシャッフルする	random.shuffle(リスト)  # 破壊的操作
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
データフレームの一部のカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
データをL1ノルムを使って正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
nの無限整数リスト	itertools.repeat(n)
n番目のカラムをインデックスとしてカンマ区切りのファイルを読み込む	pd.read_csv('file.csv', index_col=n)
option: フォントの色をホットピンクに設定する	color = 'hotpink'
その平均値でデータフレームのNaNを埋める	df.fillna(df.mean())
データフレームの全カラムの相関をプロットする	sns.pairplot(df)
ピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
option: マーカーの線幅を変える	markeredgewidth = 2.5
行としてCSVファイルのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
今日は何月か知る	datetime.datetime.today().month
文字列中にひとつでも小文字があるか調べる	any(c.islower() for c in 文字列)
文字列の大文字と小文字を交換する	文字列.swapcase()
データフレームのヒストグラムを横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名')
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
要素をセットから取り除く	セット.remove(要素)
線グラフの色をダークオレンジにセットする	plt.plot(データ列x, データ列y, color='darkorange')
縦棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ダークゴールデンロッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームのあるカラムの曜日数を使う	df['列A'].dt.dayofweek
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームの指定したカラムの第二四分位数	df['列A'].median()
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
辞書をJSONにエンコードする	json.dumps(辞書, ensure_ascii=False)
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
棒グラフをコーンフラワーブルー色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
オブジェクトのメモリビュー	memoryview(obj)
折れ線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
リストと配列についての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
クラス分類の正確さを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
散布図をフォレストグリーン色として描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
nからn2の範囲	range(n, n2)
辞書の項目名に対応した値	辞書.get(キー, 見つからない場合の値)
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
実数を十六進表記の文字列にする	x.hex()
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
横棒グラフをオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='orchid')
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
ピアソンを用いてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
ファイルをバイナリモードを用いてオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
小数点以下'5'桁までの文字列にする	':.5f'.format(x)
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
データフレームの指定した列の欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
双方向キューの先頭に配列の各要素を追加する	両端キュー.extendleft(配列)
データシリーズの欠損値を最頻値に減らす	ds.fillna(ds.mode().iloc[0])
表の列名をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
option: 文字列の示す文字コードを使う	encoding = s
データフレームを各列毎にグループ化し、、文字列というグループの個数を計算する	df.groupby(column).size()[s]
赤いポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
year年の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
整数が一桁の数	-9 <= 整数 <= 9
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
文字列を部分文字列で二分割する	文字列.partition(部分文字列)
三整数のGCD	math.gcd(n, n2, n3)
option: ライムを使用する	color = 'lime'
緑色でプリントできる文字列に変換する	f'\033[32m{x}\033[0m'
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
データフレームを二つの列の値によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
整数の階乗を計算する	math.factorial(n)
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
0から始まるn個の整数リストを得る	list(range(n))
option: トマトにグラフの色を指定する	color = 'tomato'
線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
散布図を▲印で描画する	plt.scatter(データ列x, データ列y, marker='^')
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
数式を簡略化する	sympy.sympify(数式)
ふたつの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
複数の列からグループ化し分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
ひとつでも英数字が文字列中に含まれるか調べる	any(c.isalnum() for c in 文字列)
指定したカラムの平均値を計算する	df['列A'].mean()
配列とリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
多次元データを多次元尺度構成法で整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
棒グラフをライトスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
リネン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
オブジェクトがジェネレータ関数か確認する	inspect.isgeneratorfunction(オブジェクト)
二つの整数の積	整数 * 整数2
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(df['列A'])
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
nで乱数シードを初期化する	random.seed(n)
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
凡例を最適な場所に表示する	plt.legend(loc='best')
ライトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
日付時刻データからn日分、減らす	aDatetime - datetime.timedelta(days=n)
option: カデットブルー色を使う	color = 'cadetblue'
文字列を置き換える	文字列.replace(部分文字列, 置換後の文字列)
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
折れ線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
option: ホワイト色を用いる	color = 'white'
条件が三つとも同時に成り立つ	条件 and 条件2 and 条件3
配列から長さの制限した両端キューを生成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データ列の一意な値を確認する	ds.unique()
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
散布図を大バツ印を使って描画する	plt.scatter(データ列x, データ列y, marker='X')
文字列を部分文字列で二分する	文字列.partition(部分文字列)
データフレームを丸める	df.round()
デックをタプルに変換する	tuple(両端キュー)
option: グラフの色をスチールブルーに指定する	color = 'steelblue'
ヒストグラムをゴールド色を使って描画する	plt.hist(データ列, color='gold')
現在のエポック	int(time.time())
データフレームの選択した列の中にいくつ日付データがあるか調べる	df[['列A', '列B']].isin([value]).sum()
平均と分散を用いてデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
数列の移り変わりを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データ列を全て日付データにする	pd.to_datetime(ds)
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データラベルを最適な位置に表示する	plt.legend(loc='best')
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
リストとデータ列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームの指定した列の値が欠損値かどうか	df['列A'].isna()
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
option: ライトグレーを使う	color = 'lightgrey'
ファイルを読み込みモードで開いて]fとする	f = open(filepath, mode='r')
データフレームの一部のカラムの未入力値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
文字列中のタブ文字をn個の空白にする	文字列.expandtabs(tabsize=n)
ベクトル間の各要素の最大公約数を求める	np.gcd(aArray, aArray2)
ファイルからベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
option: 欠損値を先頭に来るようにする	na_position = 'first'
xの印字可能な文字列	ascii(x)
オブジェクトのバイトサイズ	sys.getsizeof(オブジェクト)
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
行列計算をする	import numpy as np
整数のn乗を算出する	整数 ** n
青いヒストグラムを描画する	plt.hist(データ列, color='b')
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: ライムグリーンにフォントの色を指定する	color = 'limegreen'
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
カウンタを辞書から準備する	collections.Counter(aDict)
データフレームを転置する	df.T
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
小数点数の床	math.floor(x)
ある列ごとの最小値を求める	df.groupby('列A').min()
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
表データのあるカラムの曜日が何日目か知る	df['列A'].dt.dayofweek
赤色でxをプリントする	print(f'\033[31m{x}\033[0m')
赤い破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
辞書のキーをリストにする	list(辞書.keys())
散布図をカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='khaki')
エラーなくセットから要素を取り除く	セット.discard(要素)
リストとリストについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
サンディーブラウン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
整数が非負数でない	整数 >= 0
文字列中にアルファベットが含まれる	any(c.isalpha() for c in 文字列)
文字列を区切り記号で二分する	文字列.partition(セパレータ)
数が正	x > 0
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
折れ線グラフを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
クラス分類の分類精度を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
散布図を赤い左三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの列一覧を見る	df.info()
データシリーズの中にある文字列と文字列の数をカウントする	ds.isin([value, value2]).sum()
リストとしてデータフレームのある列を選ぶ	df['列A'].values.tolist()
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
変数がマイナス無限大に近づくときの極限値を求める	sympy.limit(数式, 変数, -oo)
option: ミディアムブルーを用いる	color = 'mediumblue'
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
辞書を多重集合に変換する	collections.Counter(aDict)
データシリーズの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	文字列.rpartition(部分文字列)[-1]
option: マーカーをダイアモンドに変更する	marker = 'D'
マッピングでカウンタを更新する	aCounter.update(aDict)
ヒストグラムの線のスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
アイボリー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
ファイルパスから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
凡例をグラフの表示する	plt.legend()
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgray')
カウンタを列を出現回数して更新する	aCounter.update(iterable)
辞書順で文字列は文字列より前	文字列 < 文字列2
option: 分割記号をカンマにする	sep = ','
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームを関数の値でグループ化する	df.groupby(関数)
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
双方向キューをタプルに変換する	tuple(両端キュー)
折れ線グラフの線の種類を破線に変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: ロージーブラウンを用いる	color = 'rosybrown'
option: シスル色を用いる	color = 'thistle'
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
棒グラフをピーチパフ色を用いて描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
データフレームをグループ化し、それぞれの最大値を計算する	df.groupby('列A').max()
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
動作環境はマック	sys.platform.startswith('darwin')
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
配列の要素数を求める	aArray.size
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
色テーマを明るくする	sns.set(pallete='bright')
データシリーズを十の位で丸めて、整数にする	ds.round(-1).astype(int)
セットから例外なく項を除去する	セット.discard(要素)
リストと数列についての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
タイムスタンプデータの分数	aDatetime.minute
option: グラフの色をマゼンタに設定する	color = 'magenta'
文字列を空白で区切って文字列リストにする	文字列.split()
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
横棒グラフをオリベドラブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
ビン数nでリストをビン分割する	pd.cut(aList, n)
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
データフレームの一部のカラムの欠損値を最頻値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
数式をyについて微分する	sympy.diff(数式, y)
ダークスラテグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームの選択したカラムの相関行列をスピアマン相関係数で計算する	df[['列A', '列B']].corr(method='spearman')
ある列のカテゴリ毎の平均値を計算する	df.groupby('列A').mean()
データをソートしてJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False, sort_keys=True)
option: マーカーを下三角に変更する	marker = 'v'
option: グラフの色を赤に設定する	color = 'red'
要素をキューの最初から取り出す	両端キュー.popleft()
辞書の値を列挙する	辞書.values()
ファイルパスが存在するか判定する	os.path.exists(filepath)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
option: ファイルを使う	file = sys.open('file.txt', 'w')
predicateFuncがTrueとならない列の要素	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムの色をダークゴールデンロッドにセットする	plt.hist(データ列, color='darkgoldenrod')
option: コロンを区切りで使う	sep = ':'
リストをひとつ置きに取り出す	リスト[::2]
度数分布図の範囲を変更する	plt.hist(データ列, range=(start, end))
辞書をJSON形式を用いてファイル出力に出力する	json.dump(辞書, ファイル出力, ensure_ascii=False)
辞書にキーワード引数で更新する	辞書.update(**kwargs)
縦棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
両端キューをセットに変換する	set(両端キュー)
棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
文字列に文字がいくつあるか調べる	文字列.count(文字)
リストをn回、連結する	リスト * n
折れ線グラフをドジャーブルー色を使って描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
散布図をオリベドラブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
イテラブルを行列に変換する	np.array(iterable)
ある列の値がxより少ない行を取り出す	df[df['列A'] < x]
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
散布図の▲マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
グラフの描画で色差別なくパレットを使う	sns.set(pallete='colorblind')
ダークゴールデンロッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
option: 色をロージーブラウンに設定する	color = 'rosybrown'
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
識別子は関数か調べる	inspect.isfunction(識別子)
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
ある列のカテゴリごとの標準偏差を求める	df.groupby('列A').std()
折れ線グラフの▽印を青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
キューの最初に要素を付け加える	両端キュー.appendleft(要素)
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
ダークオーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
線形回帰モデルの回帰変数を使う	model.coef_
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
配列の列ごとの合計値	np.sum(aArray, axis=0)
散布図の▼印の太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
変数名はコルーチンか	inspect.iscoroutine(識別子)
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
option: ダークグリーン色を使用する	color = 'darkgreen'
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
リストと配列の散布図を描画し、、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
データフレームの中である列に重複があれば、削除する	df.drop_duplicates(subset='列A', inplace=True)
丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
ダークオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ふたつの集合の差集合を求める	セット.difference(セット2)
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
ファイルパスからフォルダ名を求める	os.path.dirname(filepath)
データフレームの重複していない行だけを抽出する	df[~ df.duplicated(keep=False)]
データフレームのNaNを中央値で埋める	df.fillna(df.median())
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
ライトスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
文字列はキーワード	keyword.iskeyword(文字列)
データフレームのあるカラムが何年か調べる	df['列A'].dt.year
ヒストグラムをミディアムパープル色を用いて描画する	plt.hist(データ列, color='mediumpurple')
option: ディムグレーに色をする	color = 'dimgrey'
イテラブルをセットに変換する	set(イテラブル)
ダークオレンジ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
データフレームの一部のカラムを百の位で四捨五入して整数にする	df[['列A', '列B']].round(-2).astype(int)
横棒グラフをラベンダー色として描画する	plt.barh(データ列x, データ列y, color='lavender')
リストから重複なくn個ランダムに選んでリスト化する	random.sample(リスト, k=n)
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
インディアンレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
KNNで回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
オブジェクトは抽象クラス	inspect.isabstract(オブジェクト)
JSON形式としてリストを出力ストリームに出力する	json.dump(リスト, ファイル出力, ensure_ascii=False)
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
散布図をブランチドアーモンド色を用いて描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
データフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
option: 黄色にフォントの色を設定する	color = 'yellow'
エクセルファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
文字が別の文字列に存在しないか	文字 not in 文字列
文字列を改行で区切る	文字列.splitlines()
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: ラベンダーブラッシュにグラフの色を設定する	color = 'lavenderblush'
指定したカラムを丸める	df['列A'].round()
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
双方向キューに要素をプッシュする	両端キュー.append(要素)
文字列の先頭からタブを取り除く	文字列.lstrip('\t')
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
あるカラムを十の位で四捨五入して、整数にする	df['列A'].round(-1).astype(int)
整数が組のいづれか	aTuple = [0, 1, 2]<nl>整数 in aTuple
データシリーズは何分か見る	ds.dt.minute
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
散布図をライトブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: グラフの色をシルバーに設定する	color = 'silver'
棒グラフの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
option: アクアマリン色を用いる	color = 'aquamarine'
データフレームをグループ化し、合計を求める	df.groupby('列A').sum()
データフレームのある列をリストにする	df['列A'].values.tolist()
nは整数	整数 == 整数2
データフレームのある列をインデックスにする	df.set_index('列A')
文字列がPythonのキーワードかどうか調べる	keyword.iskeyword(文字列)
xでデータシリーズの欠損値を補う	ds.fillna(x)
カンマで文字列を区切って、列挙する	文字列.split(',')
データフレームの欠損値を後の値で埋める	df.fillna(method='bfill')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
ファイルからフォルダ名を使う	os.path.dirname(filepath)
改行しないで複数の文字列をプリントする	print(文字列, 文字列, end='')
option: 論理値型を使う	np.int32 = np.int<nl>dtype = np.int32
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
option: グラフの色を暗い赤に設定する	color = 'darkred'
折れ線グラフの▲印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: ロイヤルブルー色を用いる	color = 'royalblue'
数値がセットに含まれない	数 not in セット
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
数列間のケンドールの順位相関係数を算出する	scipy.stats.kendalltau(数列, 数列2)
数式を微分する	sympy.diff(数式)
文字列中にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in 文字列)
リストから長さの制限された両端キューを用意する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
ソートしてリストをJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
ヒストグラムをマルーン色を用いて描画する	plt.hist(データ列, color='maroon')
文字列全体がパターンに複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
データフレームのモードを計算する	df.mode()
option: ブラック色を使用する	color = 'black'
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
文字列中の文字の出現回数	文字列.count(文字)
リストの要素を並べ変える	sorted(リスト)
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
タプル内の要素が全て真か確認する	all(タプル)
option: マーカーの大きさを変える	markersize = 2.0
ゴールド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
赤い▼マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列は十進数字か調べる	文字列.isdecimal()
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
最大値としてデータを正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
白色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
商と余りを同時に計算する	divmod(x, y)
配列と数列について散布図を描画し、、マーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
配列とリストについて散布図を描画してその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
縦棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
最大最小値でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
option: グラフの色をシャルトリューズに指定する	color = 'chartreuse'
散布図を黒い星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
1で全要素を初期化した行列を作る	np.ones(要素数, dtype=np.int)
数列の出現頻度を可視化する	plt.hist(データ列)
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
青紫色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
リストのn番目以降の部分を取り出す	リスト[n:]
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
配列の値	aArray[行番号, 列番号]
型のサブ型かどうか調べる	issubclass(サブクラス, クラス)
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
変数計算を使う	import sympy
棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
スピアマン相関係数を使ってデータフレームの相関行列を求める	df.corr(method='spearman')
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
回帰分析をSDGで行う	model = sklearn.linear_model.SGDRegressor()
特異値分解で数値次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
散布図に▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
整数がセットのメンバーでない	数 not in セット
既存のファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
リストを文字列として、'改行を使って連結する	'\n'.join(map(str, リスト))
標準出力を使用する	sys.stdout
縦方向に複数のデータフレームを結合する	pd.concat([df, df2, df3], axis=1)
整数が3で割り切れるか判定する	整数 % 3 == 0
リストをセットに変換する	set(リスト)
散布図にrgbの三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
エラーなく辞書からキーの値	辞書.get(キー, 見つからない場合の値)
配列の差を求める	aArray - aArray2
データシリーズのパーセンタイル	ds.quantile(パーセント/100)
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
マップに辞書2の項目を加えて、更新する	辞書.update(辞書2)
タプルを反転する	reversed(タプル)
散布図を左三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='<')
リストと数列についての散布図に黒い菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
整数の二乗	整数 ** 2
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
折れ線グラフにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフの色をコーンフラワーブルーに指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームの選択したカラムのメディアン	df[['列A', '列B']].median()
データフレームがどれだけ、正規分布から歪んでいるか調べる	df.kurt()
データ列とリストについて散布図を描画してマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
分類結果の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
リストをJSONフォーマットでファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
棒プロットの色を変更する	plt.bar(ラベル列, データ列, color=rgb)
タプルの各要素を関数に適用した結果で並べる	sorted(タプル, key=func)
両端キューの最大長を求める	両端キュー.maxlen
ヒストグラムを淡いピンク色色を使って描画する	plt.hist(データ列, color='lightpink')
カーキ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データ列の折れ線グラフを丸印として描画する	plt.plot(データ列x, データ列y, marker='o')
配列と数列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
条件がみっつとも成り立つ	条件 and 条件2 and 条件3
あるカラムの値がxに等しくかつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
RANSACを使って回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
縦棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
数列と配列についての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
確率的勾配降下としてクラス分類をする	model = sklearn.linear_model.SGDClassifier()
整数をバイト列にする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big')
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ベクトルのスカラー倍	aArray * n
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
リストをシャッフルしてリスト化する	random.sample(リスト, len(リスト))
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
ある列の値がxより大きい行を抽出する	df[df['列A'] > x]
折れ線グラフの色を青にセットする	plt.plot(データ列x, データ列y, color='blue')
ゼロ埋めされた８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
淡い茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
実数の双曲線正弦の逆数を計算する	math.asinh(x)
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
文字列を区切り記号で区切り、、列挙する	文字列.split(セパレータ)
ある列のカテゴリごとの最大値	df.groupby('列A').max()
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
棒グラフをスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='slateblue')
二つの文字列を順に出力する	print(文字列, 文字列)
タプルの各値を関数に適用した結果でソートする	sorted(タプル, key=func)
２つの整数の論理積	整数 & 整数2
ロイヤルブルーにヒストグラムの色を指定する	plt.hist(データ列, color='royalblue')
リストを等しい量になるように分割数nとしてビン分割する	pd.qcut(aList, n)
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
新しいリッジ回帰モデルを用意する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
オブジェクトが集合	set = int<nl>isinstance(obj, set)
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
文字列が全てアスキー文字	文字列.isascii()
データフレームのあるカラムのタイムゾーンを東京に指定する	df['列A'].tz_convert('Asia/Tokyo')
縦棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
データフレームの中にある文字列の数をカウントする	df.isin([value]).sum()
データフレームを関数の値でまとめたグループを使う	df.groupby(関数)
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
文字列から部分文字列を全て取り除く	文字列.replace(部分文字列, '')
データフレームの選択したカラムの分位数	df[['列A', '列B']].quantile(パーセント/100)
プロット中で日本語を使えるようにする	sns.set(font='IPAexGothic')
option: 色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
タブで区切ってxとyをプリントする	print(x, y, sep='\t')
横棒グラフをイエローグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
折れ線グラフの▲印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
グラフで使える色の一覧	matplotlib.colors.cnames
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
CSVファイルにSJISでデータフレームを出力する	df.to_csv('file.csv', encoding='shift_jis')
リストを文字列として、空白で連結する	' '.join(map(str, リスト))
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データシリーズの欠損値をその最頻値で補う	ds.fillna(ds.mode().iloc[0])
xとyを文字列で区切ってプリントする	print(x, y, sep=s)
リストとリストの散布図をプロットしてその大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
リストをリバースする	reversed(リスト)
option: マーカーを三角に変更する	marker = '^'
ヒストグラムの色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
確率的勾配降下として回帰分析をする	model = sklearn.linear_model.SGDRegressor()
整数を整数で割る	整数 / 整数2
複数の列によってデータフレームを破壊的に降順に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
データフレームを２つの列によって集約し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
折れ線グラフの菱形マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データをインデントを指定してJSONにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
散布図としてデータフレームをプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
文字列の指定された区間位置の間に部分文字列があるかどうか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
ハッシュ値	hash(x)
0から始まる無限リスト	itertools.count()
文字列を末尾から区切り記号で区切る	文字列.rsplit(セパレータ)
文字列からひとつずつ文字を列挙する	list(文字列)
データフレームのカラムを丸める	df['列A'].round()
option: ライトスレイグレー色を用いる	color = 'lightslategray'
2つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
option: 配列のデータ型を指定する	bool = np.int<nl>dtype = bool
十六進文字列をバイト列にする	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
行列を一次元化する	aArray.flatten()
文字列の順序をランダムにシャッフルする	''.join(random.sample(文字列, len(文字列)))
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
シーケンスの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
プロットのパレットを全般的にパステル調にする	sns.set(pallete='pastel')
棒グラフを青紫色を使って描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームの一部のカラムの中にいくつ日付データがあるか調べる	df[['列A', '列B']].isin([value]).sum()
棒グラフをプラム色を使って描画する	plt.bar(データ列x, データ列y, color='plum')
リスト内の要素は全て真かどうか	all(リスト)
オブジェクトはトレースバックかどうか調べる	inspect.istraceback(オブジェクト)
折れ線グラフを大バツ印を用いて描画する	plt.plot(データ列x, データ列y, marker='X')
リストの末尾の要素	リスト[-1]
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
トマト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
データシリーズの未入力値を中央値に指定する	ds.fillna(ds.median())
ふたつのリストの共通要素	list(set(リスト).intersection(set(リスト2)))
データフレームの一部のカラムを10の位で丸める	df[['列A', '列B']].round(-1)
ファイルパスをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
リストを配列に変換する	np.array(aList)
スクリプトファイルのディレクトリパスを見る	os.path.dirname(os.path.abspath(__file__))
ピーチパフ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
文字列を最後の区切り文字で二分割する	文字列.rpartition(セパレータ)
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
分類結果の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
時間を使う	import time
整数をnだけ右シフトする	整数 >> n
配列とリストの散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
表データのカラム名をリストで置き換える	df.columns = columns
縦棒グラフを描いて、バーの幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
箱髭図を描いて、平均線を追加する	plt.boxplot(データ列, meanline=True)
二つの計算結果を改行なしにプリントする	print(式, 式, end='')
xを緑色で出力する	print(f'\033[32m{x}\033[0m')
双方向キューの上限	両端キュー.maxlen
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
横棒プロットを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームの一部のカラムを1000の位で四捨五入する	df[['列A', '列B']].round(-3)
大バツ印を用いるデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームをカラム名を指定して内部結合する	pd.merge(df, df2, on='列A', how='inner')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
ロージーブラウン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
行列の列ごとの標準偏差を計算する	np.std(aArray, axis=0)
option: 色をネイビーに設定する	color = 'navy'
あるカラムの中に含まれると日付データの合計を数える	df['列A'].isin([value, value2]).sum()
ファイルからストリームを読み込みfileとする	file = open(filepath)
option: 大バツマーカーを使う	marker = 'X'
xを太文字でプリントできる文字列に変換する	f'\033[1m{x}\033[0m'
文字列をカンマによって区切って、列挙する	文字列.split(',')
文字列を最後の部分文字列で分けた時の後半の文字列を見る	文字列.rpartition(部分文字列)[-1]
データフレームの選択した列を千の位で四捨五入する	df[['列A', '列B']].round(-3)
辞書をソートしてJSONフォーマットにエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategray')
データフレームを10の位で丸めて整数型にする	df.round(-1).astype(int)
option: フォントの色をライトスカイブルーに変更する	color = 'lightskyblue'
カンマ区切りのファイルのn行目をインデックスとして読む	pd.read_csv('file.csv', index_col=n)
有理数の分子	q.numerator
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
数を十六進表記の文字列に変換する	x.hex()
セットを共通要素だけに更新する	セット.intersection_update(セット2)
option: 列方向に処理する	axis = 0
目盛り線	plt.grid(alpha=0.5)
日付データのデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
ヒストグラムの色をダークシアンにセットする	plt.hist(データ列, color='darkcyan')
文字が漢字か調べる	('\u4E00' <= 文字 <= '\u9FD0')
リストの先頭のn要素を捨てる	リスト[n:]
データフレームの重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
整数かける整数	整数 * 整数2
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
天井数	math.ceil(x)
ファイルを書き込みできるようにオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
あるカラムのNaNを平均値に設定する	df['列A'].fillna(df['列A'].mean())
配列から長さの制限された双方向キューを用意する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
配列のユニークな要素とそのインデックスを見る	u, indices = np.unique(aArray, return_index=True)
データフレームをある列によって昇順に破壊的に整列する	df.sort_values(by='列A', ascending=True, inplace=True)
クリムゾン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
option: フォントの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
線形回帰モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
配列とリストについての散布図に黒い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
黄緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図の三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
区切り文字で文字列を右端から区切る	文字列.rsplit(セパレータ)
引数から名前付きタプルをインスタンス化する	C._make(パラメータ)
数列間のスピアマンの順位相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
データフレームの分位数	df.quantile(パーセント/100)
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
option: ダークグレー色を用いる	color = 'darkgray'
データフレームをワンホット・ベクトルにする	pd.get_dummies(df)
データシリーズをreplに全部正規表現patternで置換する	ds.replace(pattern, repl, regex=True)
文字列を最後の部分文字列で二つに分けて、前半を使う	文字列.rpartition(部分文字列)[0]
option: ホワイトスモーク色を使用する	color = 'whitesmoke'
黒い下三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
y座標に軸名をつける	plt.ylabel('y軸ラベル')
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
リストとリストについての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
数列をランダムにシャッフルしてリストにする	random.sample(数列, len(数列))
日付時刻データが火曜日か確認する	aDatetime.weekday() == 1
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
散布図の左三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
箱ひげ図を横に並べてプロットする	plt.boxplot([データ列, データ列])
両端キューの末尾に文字列を追加する	両端キュー.append(文字列)
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
リストを両端キューに変換する	collections.deque(リスト)
最大長nの両端キューを作成する	collections.deque(maxlen=最大長)
ファイルパスをバイナリ書き込みモードを使ってオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
マッピングを別の辞書で更新する	辞書.update(辞書2)
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
正規表現で文字列を区切る	re.split(pattern, s)
rgbの下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
コマンド引数を一覧として使う	sys.argv[1:]
カデットブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
数が負かどうか調べる	x < 0
タプルのn番目以降の部分を取り出す	タプル[n:]
二つの数値を順にプリントする	print(数値, 数値)
UNIX秒の列からタイムスタンプ型にする	pd.to_datetime(df['列A'], unit='s', utc=True)
シーグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
散布図を左三角印で描画する	plt.scatter(データ列x, データ列y, marker='<')
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
両端キューの末尾に文字列を付け加える	両端キュー.append(文字列)
option: 淡いピンク色色を使う	color = 'lightpink'
正規表現にASCII限定として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
データフレームの選択した列の欠損値をxに指定する	df[['列A', '列B']].fillna(x)
辞書の値をひとつずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
オレンジ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
カウンタを配列をカウントして更新する	aCounter.update(iterable)
その最小値でデータフレームの欠損値を補完する	df.fillna(df.min())
ファイルパスを追加できるように開く]	'a' = 'a'<nl>open(filepath, mode='a')
データフレームの値は未入力値か調べる	df.isna()
リストのn番目からn2番目の部分	リスト[n:n2]
グラフの名前を設定する	plt.title('グラフの名称')
タプルをリストにする	list(タプル)
横棒グラフを茶色色として描画する	plt.barh(データ列x, データ列y, color='brown')
option: グラフの色をベージュに設定する	color = 'beige'
枠なしの凡例を加える	plt.legend(frameon=False)
deqのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
データフレームの欠損値をxに設定する	df.fillna(x)
データフレームのカラムの欠損値をxに増やす	df['列A'].fillna(x)
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
棒グラフをコーンズシルク色を用いて描画する	plt.bar(データ列x, データ列y, color='cornsilk')
散布図の三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
改行で文字列を分割し、文字列リストにする	文字列.splitlines()
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
データフレームの列を選んで重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
散布図に大バツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='X')
データフレームから重複した行を残さず削除する	df.drop_duplicates(keep=False)
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
２点間のユークリッド距離	math.dist(point, point2)
現在が何分か知る	datetime.date.today().minute
文字列の中でASCII限定として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
タイムスタンプデータが何分か知る	aDatetime.minute
整数と整数の排他的論理和を求める	整数 ^ 整数2
タイムスタンプデータをタプルにする	aDatetime.timetuple()
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
数式の変数をある数式で置き換える	数式.subs(変数, 数式2)
データフレームの相関行列を相関係数で求める	df.corr(method='pearson')
計算機イプシロンを計算する	sys.float_info.epsilon
二つの列でグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
実数の三乗	x ** 3
最大最小値を使ってデータをスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ビンの数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
整数の4乗	整数 ** 4
浮動小数点数の小数点を丸める	round(x)
文字列の左側から部分文字列を除く	文字列.removeprefix(部分文字列)
option: バイナリ書き込みモードに変更する	mode = 'wb'
コギーくんを使いたい	import kogi
グラフに鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
データフレームをCSVファイルにインデックスを付けず保存する	df.to_csv('file.csv', index=None)
option: パパイヤウィップ色を使う	color = 'papayawhip'
データ列のエポック秒をdatetime64型にする	pd.to_datetime(ds, unit='s', utc=True)
データフレームの指定したカラムの尖度	df['列A'].skew()
角度のラジアン	math.radians(degree)
N未満までのベクトル	np.arange(N)
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
指定したカラムの標本標準偏差を計算する	df['列A'].std(ddof=1)
疑似乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
重回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
シーグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
整数乱数で要素を埋めた行列を初期化する	np.random.randint(開始値, 終了値, N)
ガベージコレクションの参照カウント	sys.getrefcount(オブジェクト)
オブジェクトはリストかタプルか確認する	isinstance(obj, (list)
ベクトルの要素数	aArray.size
あるカラムごとの最大値	df.groupby('列A').max()
xを出力する	print(x)
xで指定したカラムの欠損値を補う	df['列A'].fillna(x)
散布図のダイアモンド印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データシリーズのタイムゾーンを設定する	ds.tz_convert('Asia/Tokyo')
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
辞書から項目名で指定されたエントリをポップする	辞書.pop(キー)
整数が一桁の数か調べる	0 <= 整数 <= 9
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
リストとイテラブルについて散布図をプロットして、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
横棒グラフをオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='orange')
縦棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
実数の双曲線正接	math.tanh(x)
nの無限な整数リスト	itertools.repeat(n)
ロージーブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
シルバー色を用いてヒストグラムを描画する	plt.hist(データ列, color='silver')
option: 区切り記号を文字列にする	sep = s
実数の小数点以下を丸める	round(x)
表データのあるカラムの月を使う	df['列A'].dt.month
行列間の各要素の最大公約数	np.gcd(aArray, aArray2)
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
データ列を折れ線プロットとして可視化する	plt.plot(データ列x, データ列y)
実数のn乗して実数による余りを算出する	pow(x, n, y)
文字列の中でASCII限定としてパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
データフレームを並べて、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
見やすいグラフを描画する	import seaborn as sns
データフレームの中に存在するの合計をカウントする	df.isin([value]).sum()
データフレームの空文字をNaNに変換しドロップする	df.replace('', np.nan).dropna()
option: 色をアクアマリンに設定する	color = 'aquamarine'
配列の和を調べる	aArray + aArray2
主成分分析を使って整数次元に削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
整数を符号なしでバイナリに変換する	整数.to_bytes(length=バイト数, byteorder='big')
option: ベクトルのデータ型を指定する	np.int = np.int<nl>dtype = np.int
シルバー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
タイムスタンプデータをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
リストとリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
数列と配列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
オブジェクトがメソッド	inspect.ismethod(オブジェクト)
xをシアンにする	f'\033[36m{x}\033[0m'
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
英字が文字列中に含まれないか調べる	any(not c.isalpha() for c in 文字列)
データフレームの指定したカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
文字列の右側から文字を除く	文字列.rstrip(文字)
二つの集合の∩	セット.intersection(セット2)
ダークオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データ列をインポートする	import pandas as pd
マッピングにキーが存在しないならば、処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
ファイルパスをEUCでオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
配列とリストについて散布図を描画し、マーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
データシリーズのタイムゾーンを日本にセットする	ds.tz_convert('Asia/Tokyo')
option: SJISを使用する	encoding = 'shift_jis'
項目名が辞書上で定義済みか調べる	キー in 辞書
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
多次元尺度構成法で多次元データを要素次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
文字列を全て小文字に変換する	文字列.lower()
棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
データフレームの一部のカラムの尖度を計算する	df[['列A', '列B']].skew()
文字列から接尾辞を取り除く	文字列.removeprefix(部分文字列)
リストから複数の要素をランダムに選ぶ	random.sample(リスト, k=n)
空のマップ	辞書 = {}
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
指定したカラムの未入力値を直後の値に設定する	df['列A'].fillna(method='bfill')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
線グラフの色をグリーンイエローにする	plt.plot(データ列x, データ列y, color='greenyellow')
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
文字列を最後のカンマで二分して、前半を使う	文字列.rpartition(',')[0]
文字列をコロンによって区切り、、列挙する	文字列.split(':')
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
配列の移り変わりを半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームの選択したカラムを10の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
シエナ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
データシリーズは何時か知る	ds.dt.hour
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームをシートを指定してエクセルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
option: 赤を用いる	color = 'red'
文字列をエラーを無視してバイト列にする	文字列.encode(errors='ignore')
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
散布図の丸マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
整数を符号付きでバイナリにする	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
データフレームをグループ化し標準偏差を算出する	df.groupby('列A').std()
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
データフレームの選択した列の尖度	df[['列A', '列B']].skew()
ソートして辞書をJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
データフレームの列をに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
カウンタの正の出現回数のみ残す	+aCounter
ライムグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データフレームの一部の列が正規分布からどの程度、歪んでいるか確認する	df[['列A', '列B']].kurt()
実数を二乗する	x ** 2
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
option: イエローグリーンを使う	color = 'yellowgreen'
ミディアムバイオレットレッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumvioletred')
option: ダークスラテグレー色を使う	color = 'darkslategray'
データフレームの選択したカラムの中にある文字列の個数を数える	df[['列A', '列B']].isin([value]).sum()
数列と配列の散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
rgbの菱形マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
指定したカラムの分散	df['列A'].var()
最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
リストと配列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
データ列を使う	import pandas as pd
タイムスタンプデータからn時間分減らす	aDatetime - datetime.timedelta(hours=n)
イテラブルの重複組み合せを得る	itertools.combinations_with_replacement(iterable, n)
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
ヒストグラムをダークバイオレット色を使って描画する	plt.hist(データ列, color='darkviolet')
両端キューの末尾に配列の各要素を追加する	両端キュー.extend(配列)
柱状図の描画し、、正規化する	plt.hist(データ列, density=True)
リスト順番をランダムにシャッフルする	random.shuffle(リスト)  # 破壊的操作
タイムスタンプデータの時間	aDatetime.time()
option: ダークグレー色を使用する	color = 'darkgray'
双方向キューをタプルにする	tuple(両端キュー)
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
ロージーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
option: マーカーの色をバイオレットにする	markerfacecolor = 'violet'
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
自然数個からk個取り出したときの順列の総数を計算する	math.perm(n, k)
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
データフレームの信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
セットをコピーする	セット.copy()
配列の調和平均を使う	scipy.stats.hmean(配列)
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ファイル全体を行単位で分割して読み込む	f.readlines()
縦棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
切片なしの線形回帰モデルを作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
オブジェクトが非同期ジェネレータか調べる	inspect.isasyncgen(オブジェクト)
指定の列に重複があれば削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
n行をランダムに重複ありでデータフレームからサンプリングする	df.sample(n, replace=True)
ファイルパスの拡張子付きのファイル名	os.path.basename(filepath)
データフレームのある列をインデックスに増やす	df.set_index('列A')
２数の最も小さい値を求める	min(x, y)
日付時刻データにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
ファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームからランダムに100行を抽出する	df.sample(100)
整数のn分の一を求める	整数 / n
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームをダミー変数に変換する	pd.get_dummies(df)
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
大量のデータが正規分布に従うかどうか仮説検定する	scipy.stats.kstest(配列, 'norm')
ピーチパフ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
配列を両端キューに変換する	collections.deque(配列)
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
表データの列間の相関行列をまとめて求める	df.corr()
データフレームの選択したカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
マゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
オブジェクトが属性を持つ	hasattr(obj, プロパティ名)
四角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの一部の列の標準偏差を算出する	df[['列A', '列B']].std()
option: ベクトルのデータ型を指定する	np.int32 = np.int<nl>dtype = np.int32
マッピングを階層化辞書に変換する	collections.ChainMap(aDict)
ふたつの列としてグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
やわらかい青色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
文字列がリストのいずれでもないか調べる	文字列 not in リスト
文字列中にひとつも英数字がない	any(not c.isalnum() for c in 文字列)
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの未入力値を最大値に変更する	df.fillna(df.max())
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
文字列の右端から改行を除去する	文字列.rstrip('\n')
折れ線グラフをミディアムバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
リストをイミュータブルなセットに変換する	frozenset(リスト)
既存のベクトルを元に全要素が初期値の行列	np.full_like(aArray, 初期値)
辞書をJSONフォーマットの文字列に変換する	json.dumps(辞書, ensure_ascii=False)
整数のバイト長	(整数.bit_length() + 7) // 8
シャルトリューズにヒストグラムの色をセットする	plt.hist(データ列, color='chartreuse')
散布図に▼印を使う	plt.scatter(データ列x, データ列y, marker='v')
文字列をカンマで二分し、、前半を見る	文字列.partition(',')[0]
入力から二つの整数を読む	A, B = map(int, input().split())
option: スラグレーを使用する	color = 'slategray'
パレットトルコイズにヒストグラムの色をする	plt.hist(データ列, color='paleturquoise')
線を赤い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
二つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
データフレームの選択したカラムの中のNaNの合計を数える	df[['列A', '列B']].isna().sum()
横棒グラフをコーラル色として描画する	plt.barh(データ列x, データ列y, color='coral')
配列の行ごとの分散	np.var(aArray, axis=1)
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データシリーズのNaNを中央値で埋める	ds.fillna(ds.median())
最大値でデータフレームの選択した列の欠損値を補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
配列からランダムに一つ選んでリストにする	random.choice(配列)
空のスタック	両端キュー = collections.deque()
グラフに目盛り線を入れる	plt.grid(True)
オリーブにヒストグラムの色を指定する	plt.hist(データ列, color='olive')
英字の大文字列	string.ascii_uppercase
option: シルバーを使う	color = 'silver'
列のエポック秒を日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
option: ホワイトスモークを使う	color = 'whitesmoke'
ポイント印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
破線で数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
キューの末尾に整数を付け加える	両端キュー.append(整数)
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
散布図を黒いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: 色をシアンに設定する	color = 'cyan'
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
青い点線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフをパールゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
整数を符号付きでバイト列にする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームのあるカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
文字列を空白で二分する	文字列.partition()
option: インディアンレッド色を用いる	color = 'indianred'
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
オーキッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
リストをn個にビン分割する	pd.cut(aList, n)
xを緑色で表示する	print(f'\033[32m{x}\033[0m')
本日の月を見る	datetime.datetime.today().month
ガウス過程を用いてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
option: フォントの色をライトグリーンに設定する	color = 'lightgreen'
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ハニーデュー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
整数が整数2以下または、n3以上か判定する	整数 <= 整数2 or 整数 >= n3
日付データが月曜日かどうか調べる	aDate.weekday() == 0
色付きの実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
文字列からJSON形式のデータを読む	data = json.loads(文字列)
文字列の開始位置以降に部分文字列が存在しないか調べる	文字列.find(部分文字列, 開始位置) == -1
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
nまでの偶整数リスト	list(range(2, n, 2))
指定した列を四捨五入する	df['列A'].round()
アルファベットの小文字列	string.ascii_lowercase
度数分布図の区間を設定する	plt.hist(データ列, bins=区関数)
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
データフレームをグループ化し、ある列の要約統計量を求める	df.groupby('列A').describe()['列B']
プロットの凡例の場所を(x,y)に変更する	plt.legend(loc=(x, y))
黒い大バツマーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
識別子はビルトイン関数か	inspect.isbuiltin(識別子)
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
ベクトルにはいくつ要素があるか調べる	aArray.size
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
数列と数列についての散布図にrgbの▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
xとyをコロンで区切って出力する	print(x, y, sep=':')
データフレームの選択した列の中にいくつ未入力値が存在するか数える	df[['列A', '列B']].isna().sum()
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データフレームの指定したカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
日付時刻データが土曜日か確認する	aDatetime.weekday() == 5
option: グラフの種類を実線に指定する	linestyle = 'solid'
小数点以下'2'桁までプリントする	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
符号付きで整数をバイト列に変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
二つの計算結果を順にプリントする	print(式, 式)
最初のカンマで文字列を二分する	文字列.partition(',')
データフレームの選択した列が正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
に箱ひげ図としてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データシリーズの曜日の名前を求める	ds.dt.weekday_name
x軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
データシリーズの25パーセンタイル	ds.quantile(0.25)
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
リストのピアソンの相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
データフレームの標本標準偏差	df.std(ddof=1)
オブジェクトは論理値クラスか調べる	bool = int<nl>isinstance(obj, bool)
折れ線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: ミディアムスプリンググリーンを使用する	color = 'mediumspringgreen'
データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
スレートブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
option: どの列もインデックスにしない	index_col = None
綺麗なグラフを描画する準備をする	import seaborn as sns
オブジェクトのポインタ	id(obj)
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
文字が漢字かどうか調べる	('\u4E00' <= 文字 <= '\u9FD0')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
シーケンスと列を連結する	itertools.chain(iterable, iterable2)
表示される行数を変更する	pd.set_option('display.max_rows', n)
リストの中の最大値	max(リスト)
ゴーストホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームの指定した列の中の欠損値の数を数える	df['列A'].isna().sum()
文字列をカンマで二分して残りを見る	文字列.partition(',')[-1]
折れ線グラフを淡い茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='tan')
rgbのポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
リストとリストについて散布図を描いて、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ファイルをバイナリできるようにオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
option: ブラック色を用いる	color = 'black'
データフレームの選択したカラムの中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
日付データの曜日を見る	aDate.weekday()
非数値データを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
範囲指定してデータフレームの行を抽出する	df[start:end]
縦棒グラフをアンティークホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
yについて数式の積分を算出する	sympy.integrate(数式, y)
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
浮動小数点数にする	float(x)
実数が正か	x > 0
識別子がビルトイン	inspect.isbuiltin(識別子)
線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
nまでの奇整数リスト	list(range(1, n, 2))
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
データフレームの指定したカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
切片なしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
散布図に星印を用いる	plt.scatter(データ列x, データ列y, marker='*')
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
文字列は全て数値かどうか確認する	文字列.isnumeric()
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
xを下線付きで出力する	print(f'\033[4m{x}\033[0m')
パウダーブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
文字列を最後の区切り記号で二分し、後ろの方を見る	文字列.rpartition(セパレータ)[-1]
文字列を走査し、パターンにマッチするか確認する	re.search(pattern, s)
ファイルパスをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
変数xが0に近づく時の極限値を求める	sympy.limit(数式, [|変数]x, 0)
データフレームのNaNを直後の値に変更する	df.fillna(method='bfill')
yが無限大に近づくとき数式の極限値を求める	sympy.limit(数式, y, oo)
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
option: オリーブ色を使う	color = 'olive'
マップの値の一覧を得る	list(辞書.values())
グラフの用途を画面に変更する	sns.set(context='notebook')
文字が指定した文字列にないか判定する	文字 not in 文字列
データ列の出現頻度を作図する	plt.hist(データ列)
グラフにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
100行をランダムに重複ありでデータフレームからサンプリングする	df.sample(100, replace=True)
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
指定したカラムの欠損値を最大値で補う	df['列A'].fillna(df['列A'].max())
線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
タプルの値を昇順にソートする	sorted(タプル, reverse=False)
イテラブルをセットにする	set(イテラブル)
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
配列のSkewness	scipy.stats.skew(配列, bias=False)
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
折れ線グラフの色をダークオーキッドに指定する	plt.plot(データ列x, データ列y, color='darkorchid')
指定したカラムのカテゴリで集計し、平均値を求める	df.groupby('列A').mean()
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
リストとリストについて散布図を描画し、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
文字列は識別子か	文字列.isidentifier()
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの指定した列の中に文字列と日付データがいくつあるか調べる	df['列A'].isin([value, value2]).sum()
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
プラットホームがLinuxかどうか調べる	sys.platform.startswith('linux')
n回だけ文字列を置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
データシリーズの中に文字列と文字列があるか調べる	ds.isin([value, value2])
ヒストグラムの色をライトブルーにセットする	plt.hist(データ列, color='lightblue')
現在は何時か知る	datetime.date.today().hour
ふたつの列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
データを最大最小として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: 欠損値を含めない	dropna = True
データフレームをグループ化し、ある列に対し分散を求める	df.groupby('列A')['列B'].var()
パーセプトロンを使ってクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
両端キューに要素をスタックする	両端キュー.append(要素)
イテラブルと配列についての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
データ列のヒストグラムを描く	plt.hist(データ列)
データフレームの指定したカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
多次元データを主成分分析で項次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
表データから重複をドロップする	df.drop_duplicates(inplace=True)
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
データフレームの指定した二カラムを抽出する	df[['列A', '列B']]
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
プロットの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
ヒストグラムのラインスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
辞書をJSON形式でファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
文字が指定した文字列に含まれないか	文字 not in 文字列
ヒストグラムの色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
日付データの日数	aDate.day
棒グラフをロイヤルブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='royalblue')
文字列を区切り記号で分割して、文字列リストに変換する	文字列.split(セパレータ)
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
数式を数値にする	float(数式)
リストのn番目からn2番目	リスト[n:n2]
ファイルからストリームを開いて]、fileとする	file = open(filepath)
下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
小文字を大文字にする	文字列.upper()
ヒストグラムをシアン色を使って描画する	plt.hist(データ列, color='cyan')
OSがLinux	sys.platform.startswith('linux')
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフをリネン色を用いて描画する	plt.plot(データ列x, データ列y, color='linen')
リストの要素のみ表示する	print(*リスト)
青い破線でラインを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
リストを展開してプリントする	print(*リスト)
データフレームの列を折れ線プロットとして可視化する	plt.plot(df[column], df[column])
option: ミッドナイトブルー色を使う	color = 'midnightblue'
option: ケースを無視する	flag = re.IGNORECASE
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
xの小数点以下'1'桁までをプリントする	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
option: 色をディープスカイブルーに指定する	color = 'deepskyblue'
菱形マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列が文字列より辞書順で後か判定する	文字列 > 文字列2
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
ベクトルの差を見る	aArray - aArray2
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
変数について微分を行う	sympy.diff(数式, 変数)
最後のコロンで文字列を二分して、前半を求める	文字列.rpartition(':')[0]
ふたつのリストの差集合を見る	list(set(リスト).difference(set(リスト2)))
リッジ回帰モデルを用意する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
割り算の余りを求める	整数 % 整数2
数式のxを指定された数式で置き換える	数式.subs([|変数]x, 数式2)
識別子が非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(識別子)
データフレームをある列で集約して、各グループの件数を知る	df.groupby('列A').size()
グラフのy座標のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
グラフに使うフォントを指定する	sns.set(font=フォント名)
両端キューのn番目に整数を途中追加する	両端キュー.insert(n, 整数)
ヒストグラムのラインスタイルを破線に指定する	plt.hist(データ列, linestyle='dashed')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
コロンで文字列を二分して、残りを使う	文字列.partition(':')[-1]
リストを文字列としてタブで連結する	'\t'.join(map(str, リスト))
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
replにまとめて正規表現patternでデータフレームの選択したカラムの値を置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
データを四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
グラフの色テーマを濃くする	sns.set(pallete='deep')
識別子がモジュールかどうか確認する	inspect.ismodule(識別子)
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームの中に文字列があるかどうか調べる	df.isin([value])
option: 印を▼に変える	marker = 'v'
散布図に黒い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ミントクリーム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
データフレームをある列のカテゴリを用いてグループ化してグループ名で取り出す	df.groupby('列A').get_group(グループ名)
ファイルから書き込みストリームを開き]、fとする	f = open(filepath, mode='w')
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図に星マーカーを加える	plt.scatter(データ列x, データ列y, marker='*')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
二つの列の値によって表を集約して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
色付きの一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
入力ストリームからnバイト読み込む	f.read(n)
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列の順番をランダムにシャッフルする	''.join(random.sample(文字列, len(文字列)))
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ヒストグラムでリストを作図する	plt.hist(データ列)
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
赤い△マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図の星印を青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
あらかじめ複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
R2を計算する	sklearn.metrics.r2_score(データ列, データ列2)
オブジェクトがモジュールか	inspect.ismodule(オブジェクト)
option: アイボリー色を使う	color = 'ivory'
日付時刻データとタイムスタンプデータの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
赤い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
サポートベクターマシンを使って回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ある列の値がx以上のデータを抽出する	df[df['列A'] >= x]
文字列をJSONフォーマットでファイル出力にダンプする	json.dump(文字列, ファイル出力, ensure_ascii=False)
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
データフレームの中の欠損値の合計をカウントする	df.isna().sum()
文字列の先頭	文字列[0]
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームをCSVファイルにインデックスを付けず書き出す	df.to_csv('file.csv', index=None)
option: アクアマリンにフォントの色を設定する	color = 'aquamarine'
条件を否定する	not 条件
線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: マーカーの色を真紅にする	markerfacecolor = 'crimson'
変数の値を整数で割った余りにする	変数 %= 整数
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
双方向キューに要素をエンキューする	両端キュー.append(要素)
option: 黄色を使う	color = 'yellow'
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
色付きの点線を用いてリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
バイナリモードとしてファイルをオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
option: 印の色を指定する	markerfacecolor = '#800080'
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
縦棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
浮動小数点数とyのノルム	math.hypot(x, y)
ある列の文字列に部分文字列が含まれるデータを抽出する	df[df['列A'].str.contains(部分文字列)]
option: グラフの色をコーンズシルクにセットする	color = 'cornsilk'
リストとリストについて散布図を描いてダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列を最後の部分文字列で二分して、前半を使う	文字列.rpartition(部分文字列)[0]
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
太文字でプリントできる文字列にする	f'\033[1m{x}\033[0m'
浮動小数点数の双曲線余弦の逆数を計算する	math.acosh(x)
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
辞書のエントリ数を得る	len(辞書)
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
実数の双曲線余弦の逆数を求める	math.acosh(x)
変数が無限大に近づくときの数式の極限値を計算する	sympy.limit(数式, 変数, oo)
配列とデータ列について散布図を描き、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
縦棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
文字は平仮名か調べる	('ぁ' <= 文字 <= 'ん')
データシリーズのNaNを最頻値で置換する	ds.fillna(ds.mode().iloc[0])
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
TSVをデータフレームとして読み込む	pd.read_csv('file.tsv', sep='\t')
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ヒストグラムをダークシアグリーン色を使って描画する	plt.hist(データ列, color='darkseagreen')
データをJSON形式としてファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
リストをランダムにシャッフルする	random.shuffle(リスト)  # 破壊的操作
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
整数はセットのメンバー	数 in セット
縦棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
複数の条件が成り立つ	条件 and 条件2 and 条件3
配列からn個ランダムに選んでリストにする	random.choices(配列, k=n)
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
ひとつもアルファベットが文字列中にないか調べる	any(not c.isalpha() for c in 文字列)
各グループ列ごとにグループ化してデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ユニコードから文字へする	chr(文字コード)
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
rgbの三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色をライトグリーンに指定する	color = 'lightgreen'
入力から二つの浮動小数数値を読み込む	A, B = map(float, input().split())
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
データフレームの選択したカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
Excelファイルからシートを指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
ビン数nでデータ列を分割する	pd.cut(ds, n)
タプルの末尾を除く	タプル[:-1]
データシリーズの欠損値を平均値に指定する	ds.fillna(ds.mean())
ガンマ関数の値を求める	math.gamma(x)
全要素を０で初期化した３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
UNIX秒の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
リストが空か	len(リスト) == 0
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
入力から2つの浮動小数数を読み込む	A, B = map(float, input().split())
識別子が抽象クラスか調べる	inspect.isabstract(識別子)
セットから例外なく要素を取り除く	セット.discard(要素)
option: レモンシフォン色を使う	color = 'lemonchiffon'
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
TSVファイルから文字コードを指定してデータフレームをロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
３つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=1)
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
option: NaNを先頭にする	na_position = 'first'
折れ線グラフの色をサドルブラウンにセットする	plt.plot(データ列x, データ列y, color='saddlebrown')
option: ホットピンク色を用いる	color = 'hotpink'
文字列をソートしてJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
データフレームをある列によって降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
option: 追加モードを使う	mode = 'a'
ヒストグラムでカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
整数を符号付きでバイナリに変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
実数の仮数部を求める	math.frexp(x)[0]
アルファベットから1文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
実数の自然対数	math.log(x)
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームの選択したカラムの標本分散を算出する	df[['列A', '列B']].var(ddof=0)
n進文字列をバイト列に変換する	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
データシリーズの文字列を未入力値に変換する	ds.replace(値, np.nan)
ヒストグラムを白色として描画する	plt.hist(データ列, color='white')
線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
yが無限大に近づくとき数式の極限値を計算する	sympy.limit(数式, y, oo)
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
パレットトルコイズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
辞書の項目名の一覧	list(辞書)
グラフの中のy座標に説明を付ける	plt.ylabel('y軸ラベル')
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgrey')
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
タプルの総和を計算する	sum(タプル)
xを下線付きでプリントする	print(f'\033[4m{x}\033[0m')
縦軸だけグリッド線	plt.grid(axis='y')
option: グリーン色を用いる	color = 'green'
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
要素がタプルに含まれないか調べる	要素 not in タプル
文字列リストをつなげるひとつの文字列にする	''.join(文字列)
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームを10の位で丸める	df.round(-1)
ヒストグラムを上限から下限までの範囲でプロットする	plt.hist(データ列, range=(start, end))
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
キーがマッピングに存在するか確認する	キー in 辞書
配列とリストについて散布図をプロットして、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
パーセント付きの円プロットを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
赤い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
predicateFuncを適用したときTrueとなるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ダークゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームの選択したカラムを100の位で丸めて、整数にする	df[['列A', '列B']].round(-2).astype(int)
データフレームの列のユニークな値を見る	df[col].unique()
パールバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
円プロットにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
縦方向に2つのデータフレームを結合する	pd.concat([df, df2], axis=0)
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
空白文字を全部使う	string.whitespace
タプルの先頭を除く	タプル[1:]
オリーブ色を用いてヒストグラムを描画する	plt.hist(データ列, color='olive')
文字列の接頭辞から部分文字列を取り除く	文字列.removeprefix(部分文字列)
円グラフでデータ列の比率を可視化する	plt.pie(データ列, startangle=90)
度数分布図として数列を可視化する	plt.hist(データ列)
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
カウンタの正のカウントのみ残す	+aCounter
リストとリストの散布図を描画して、マーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
欠損値がある行をドロップしてみる	df.dropna()
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
最適な位置に凡例を表示する	plt.legend(loc='best')
項∈セット	要素 in セット
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
線を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ヒストグラムの色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
整数の八進表現	oct(整数)
データ列と数列の散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
最初のプログラムを書く	print('Hello World')
データフレームの指定したカラムの統計量を確認する	df['列A'].describe()
文字コードtextとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データフレームをグループ化し、ある列に対し最大値を求める	df.groupby('列A')['列B'].max()
横棒グラフの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
行列の列ごとの合計	np.sum(aArray, axis=0)
データフレームの指定したカラムがどの程度、正規分布から歪んでいるか見る	df['列A'].kurt()
データフレームの一部のカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
CSVファイルをロードする	pd.read_csv('file.csv', sep=',')
コロンで文字列を後ろから区切る	文字列.rsplit(':')
option: グラフの色をミディアムパープルに指定する	color = 'mediumpurple'
スペースを見る	' '
キーが辞書上でまだ定義されていない	キー not in 辞書
ロージーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='rosybrown')
棒グラフをネイビー色を用いて描画する	plt.bar(データ列x, データ列y, color='navy')
再帰の最大回数を知る	sys.getrecursionlimit()
折れ線グラフの色をアクアマリンにセットする	plt.plot(データ列x, データ列y, color='aquamarine')
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
プロットで用いるフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
カウンタから最頻出な文字列の件数を算出する	aCounter.most_common()[1]
アリスブルーにヒストグラムの色をセットする	plt.hist(データ列, color='aliceblue')
ライトイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームの一部の列の要約統計量を求める	df[['列A', '列B']].describe()
ヒストグラムと勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
新しい回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
小数点数の正接の逆数	math.atan(x)
文字列の末尾から範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
数値がセットに含まれるか調べる	数 in セット
データフレームの選択したカラムの中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
二つの列によって表を降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
紺色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
主成分分析で要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
赤い四角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
タプルの先頭を捨てる	タプル[1:]
数で数を除算して、切り捨てる	x // y
縦棒グラフをパレットトルコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データシリーズを100の位で丸めて整数型にする	ds.round(-2).astype(int)
平均値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
データフレームをグループ化しある列に対し合計を求める	df.groupby('列A')['列B'].sum()
ふたつのリストの積集合を求める	list(set(リスト).intersection(set(リスト2)))
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
タイムスタンプデータにn日を加算する	aDatetime + datetime.timedelta(days=n)
カウンタのキーとカウントをリストとして得る	aCounter.items()
日付時刻データが日曜日かどうか	aDatetime.weekday() == 6
文字列中の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームを散布図を用いて可視化する	sns.scatterplot(data=df, x='列名', y='列名')
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
二つのデータフレームを異なる列をキーとして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
データシリーズを百の位で丸めて整数型にする	ds.round(-2).astype(int)
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
データフレームの一部のカラムの欠損値を最大値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データフレームの選択したカラムの25パーセンタイルを求める	df[['列A', '列B']].quantile(0.25)
散布図に黒いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 三角マーカーを描画する	marker = '^'
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
タプルのn番目からn2番目の部分	タプル[n:n2]
配列を標準化する	scipy.stats.zscore(配列)
配列の尖り	scipy.stats.kurtosis(配列, bias=False)
線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ダークターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
２つの列の値によってデータフレームをまとめた表を見る	df.groupby(['列A', '列B'])
実数を万の位で丸める	round(x, -4)
データフレームから型リストで指定されたデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
線形回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: グラフの色をターコイズに変更する	color = 'turquoise'
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: グラフの色をカデットブルーに変更する	color = 'cadetblue'
データフレームのカラムのケンドールの相関係数を計算する	scipy.stats.kendalltau(df['列A'], df['列B'])
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
符号付きで整数をバイト列に変換する	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
リストからn要素、サンプリングする	random.sample(リスト, k=n)
文字列を最後の部分文字列で二分し、、前半を求める	文字列.rpartition(部分文字列)[0]
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データシリーズの平均値を算出する	ds.mean()
rgbのバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのあるカラムの値がNaN	df['列A'].isna()
ライトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
option: 色をパウダーブルーにセットする	color = 'powderblue'
散布図をライムグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データフレームのある列の値がxより大きい行を抽出する	df[df['列A'] > x]
データフレームの一部のカラムがどれだけ、分散しているか確認する	df[['列A', '列B']].var()
データフレームの指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
散布図の▽印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: インディアンレッドを使う	color = 'indianred'
部分文字列の位置を文字列から探す	文字列.find(部分文字列)
空白区切りでリストを表示する	print(*リスト)
アリスブルー色としてヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
アヤメのデータセットをロードする	df = sns.load_dataset('iris')
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
２つの文字列は同じ	文字列 == 文字列2
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
year年の日付をオブジェクト化する	datetime.date(year=year, month=1, day=1)
辞書にキーが存在する場合処理する	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームをある列の値で集約して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
option: 暗い赤を使用する	color = 'darkred'
セットから文字列を除く	セット.remove(文字列)
マップのキーの値	辞書[キー]
文字列を大文字・小文字を無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
option: ライトグレーにグラフの色を設定する	color = 'lightgray'
線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
ヒストグラムの色をミディアムパープルに指定する	plt.hist(データ列, color='mediumpurple')
データシリーズの値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
文字列を左寄せにする	文字列.ljust(文字列幅)
ダークスレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
要素はセットに含まれないか調べる	要素 not in セット
option: オレンジレッドを使用する	color = 'orangered'
日付時刻データは何秒か知る	aDatetime.second
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
yが0に近づくときの数式の極限値を求める	sympy.limit(数式, y, 0)
△マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
グラフの題名を設定する	plt.title('グラフの名称')
整数が非負数でないかどうか	整数 >= 0
データフレームから重複を削除する	df.drop_duplicates(inplace=True)
配列とイテラブルの散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
リストと配列の散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
マッピングの項目名と値を入れ替える	{v: k for k, v in 辞書.items()}
指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
ヒストグラムをサーモン色として描画する	plt.hist(データ列, color='salmon')
直後の値で指定したカラムのNaNを補う	df['列A'].fillna(method='bfill')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
点線に線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
太字でプリントできる文字列に変換する	f'\033[1m{x}\033[0m'
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
実数の逆双曲線余弦を算出する	math.acosh(x)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
部分文字列が文字列のある位置以降に含まれない	文字列.find(部分文字列, 開始位置) == -1
整数はタプルのいづれかか	aTuple = [0, 1, 2]<nl>整数 in aTuple
option: 分割記号をコロンにする	sep = ':'
最大長を指定して、キューを作成する	collections.deque(maxlen=最大長)
浮動小数点数が整数か	x.is_integer()
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
データシリーズの分散を求める	ds.var()
nから始まる無限の数列が欲しい	itertools.count(start=n)
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
データフレームを二つの列によってソートする	df.sort_values(by=['列A', '列B'])
今日の日付	datetime.date.today()
option: ダークオーキッドを使う	color = 'darkorchid'
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
2次元タプルをflattenする	sum(タプル)
yがマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(数式, y, -oo)
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
文字列を右から区切り文字で分割する	文字列.rsplit(セパレータ)
リストとリストについて散布図をプロットし、、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
データシリーズを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
回帰分析をスタッキングとして行う	sklearn.ensemble.StackingRegressor()
カウンタのキー数を見る	len(aCounter)
データフレームの一部のカラムの中にある文字列と文字列の合計を調べる	df[['列A', '列B']].isin([value, value2]).sum()
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
option: フォレストグリーンを用いる	color = 'forestgreen'
データフレームを２つの列によって集計する	df.groupby(['列A', '列B'])
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
タイムスタンプデータが水曜日かどうか調べる	aDatetime.weekday() == 2
option: ペールグリーン色を使用する	color = 'palegreen'
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
等差数列から整数乱数を計算する	random.randrange(start, end, step)
折れ線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
文字列中のタブをn個の空白に置き換える	文字列.expandtabs(tabsize=n)
現在が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ランダムにデータフレームから10行を取り出す	df.sample(10)
イテラブルから双方向キューを用意する	collections.deque(イテラブル)
データフレームのあるカラムの分散	df['列A'].var()
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
辞書にキーが存在しているか調べる	キー not in 辞書
２つの列でデータフレームを並べる	df.sort_values(by=['列A', '列B'])
option: 最初のカラムをインデックスにセットする	index_col = 0
黒い左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
データフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
青紫色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
文字列を空白によって区切る	文字列.split()
最大長のあるキュー	collections.deque(maxlen=最大長)
赤い一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列をコロンを用いて分割する	文字列.partition(':')
データフレームの中の列をn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: 先頭のカラムをインデックスに設定する	index_col = 0
option: グラフの色をライトスレイグレーにする	color = 'lightslategray'
文字列を最後のカンマで分けたときの後半の文字列	文字列.rpartition(',')[-1]
グラフの全般的に色をパステル調にする	sns.set(pallete='pastel')
データフレームを散布図で可視化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
行列の形状を変形する	aArray.reshape(行数, 列数)
ファイル全体をリストとして読み込む	f.readlines()
ホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
リストからn要素サンプリングしてリストにする	random.sample(リスト, k=n)
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
正規分布にしたがって配列の値が発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
既存のファイルを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
空のロバスト回帰モデルを準備する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
両端キューをリストに変換する	list(両端キュー)
option: グラフの色をディムグレーに設定する	color = 'dimgray'
でデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='kendall')
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
ある列の値ごとの標準偏差	df.groupby('列A').std()
Pandasの日付型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームの指定した列名一覧の列だけ取り出す	columns = ['列A', '列B']<nl>df[columns]
2次元リストの転置行列	[list(x) for x in list(zip(*aList))]
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
文字のアスキーコードを使う	ord(文字)
rgbのポイントマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
変数の方程式として数式を解く	sympy.solve(数式, 変数)
ディムグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
カラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームの未入力値を平均値に設定する	df.fillna(df.mean())
option: ディムグレー色を使用する	color = 'dimgray'
カウンタの項目のカウントを求める	aCounter[element]
縦棒グラフを描画して、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
指定したカラムの値が欠損値か調べる	df['列A'].isna()
ライトスレイグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームの一部の列を十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
データシリーズを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
データフレームのあるカラムをドロップしてみる	df.drop('列A', axis=1)
option: ゴールドを用いる	color = 'gold'
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
現在のモジュール	sys.modules[__name__]
データフレームのあるカラムを選ぶ	df['列A']
等しい量になるようにビン数nでデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
option: 青色を使う	color = 'blue'
散布図の大バツ印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
折れ線グラフの色をリネンにセットする	plt.plot(データ列x, データ列y, color='linen')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
最初のカテゴリーを除いてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
Pythonパスにディレクトリを追加する	sys.path.append(ディレクトリ名)
区切り記号で文字列を区切り、列挙する	文字列.split(セパレータ)
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
整数が正の整数か確認する	整数 > 0
option: 配列のデータ型を指定する	np.int32 = np.int<nl>dtype = np.int32
データシリーズのタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
ダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムをペルー色として描画する	plt.hist(データ列, color='peru')
データ構造を用いる	import collections
データフレームの文字列を欠損値にする	df.replace(値, np.nan)
ファイルをUTF8でオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
option: 読み込み用に設定する	mode = 'r'
データフレームを２つの列によって昇順に並べ直して、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
イテラブルとリストについて散布図を描画して、マーカーを右三角にセットする	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
ミディアムスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームからカテゴリデータのカラム名一覧を使う	df.select_dtypes('object').columns
文字列が無限に繰り返すイテラブルを得る	itertools.repeat(element)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
文字列の指定した範囲位置の間に部分文字列が含まれるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
option: データ型として符号なし８ビット整数型を使う	np.uint8 = np.int<nl>dtype = np.uint8
指定したカラムの第三四分位数	df['列A'].quantile(0.75)
文字列をキューから取り除く	両端キュー.remove(文字列)
棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
データフレームをある列によってソートし、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
折れ線グラフをハニーデュー色を使って描画する	plt.plot(データ列x, データ列y, color='honeydew')
データシリーズは正規分布からどの程度、歪んでいるか確認する	ds.kurt()
データフレームのある列をインデックスに設定する	df.set_index('列A')
ヒストグラムをオーキッド色を使って描画する	plt.hist(データ列, color='orchid')
ふたつのセットは共通の要素を持たないか調べる	セット.isdisjoint(セット2)
ポイントマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
カウンタのユニークなキーを列挙する	list(aCounter)
プロットにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
整数の五乗を求める	整数 ** 5
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
CSVファイルからデータフレームを読む	pd.read_csv('file.csv', sep=',')
option: 上三角マーカーを使う	marker = '^'
ファイルをSJISを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
ラベンダー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
箱ひげ図としてリストを可視化する	plt.boxplot(データ列)
BOM付きでファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
方程式として数式の変数の解を算出する	sympy.solve(数式, y)
データ列を使用する	import pandas as pd
スクリプトのサブディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), ディレクトリ名))
線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
整数の二進数表現を使う	bin(整数)
要素が辞書の値に含まれていないか	element not in 辞書.values()
スタッキングとして回帰分析をする	sklearn.ensemble.StackingRegressor()
予測データのコンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
既存のファイルを文字列の示すエンコーディングを使って追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
二つの変数の値を改行なしにプリントする	print(変数名, 変数名, end='')
オブジェクトは関数か調べる	callable(obj)
論理値型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int32)
文字列を最後の区切り文字で二分して残りを使う	文字列.rpartition(セパレータ)[-1]
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
部分文字列を置換する	文字列.replace(部分文字列, 置換後の文字列)
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
データフレームをカテゴリごとに色付けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: フォントの色を小麦色に設定する	color = 'wheat'
ふたつの整数の和を計算する	整数 + 整数2
データフレームの選択したカラムの欠損値を第二四分位数にする	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
xとyをコロンで区切ってプリントする	print(x, y, sep=':')
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
数式を変数について偏微分する	sympy.diff(数式, 変数)
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
タイムスタンプ型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
辞書順で文字列が文字列より後か	文字列 > 文字列2
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
整数のn分の一をが欲しい	整数 / n
横軸の目盛りを表示しない	plt.xticks([])
option: マーカーの色をティールにする	markerfacecolor = 'teal'
スチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
データシリーズを万の位で丸める	ds.round(-4)
出力ストリームにxを文字列に変換して書き込む	x = 0<nl>f.write(str(x))
コマンド引数を一覧として見る	sys.argv[1:]
日付データを文字列を用いてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
コーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
文字列全体がパターンにマッチするか確認する	re.fullmatch(pattern, s)
ダークゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
リストの最初を捨てる	リスト[1:]
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
カウンタを高頻度方からリストとして得る	aCounter.most_common()
入力ストリームを全部、読み込む	f.read()
文字列の文字数を使う	len(文字列)
スピアマンでデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
指定した列の値で集計しそれぞれの個数を求める	df.groupby('列A').count()
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
option: 出力先をファイルに指定する	file = sys.open('file.txt', 'w')
ヒストグラムの色をロージーブラウンに変更する	plt.hist(データ列, color='rosybrown')
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
データフレームをグループ化し、ある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
カウンタをイテラブルで更新する	aCounter.update(iterable)
アルファベットの大文字を見る	string.ascii_uppercase
折れ線グラフのポイントマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
マップのキーをひとつずつ処理する	for key in 辞書.keys():<nl><tab>print(辞書[key])  # FIXME
ファイルパスをBOM付きとして開く]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
イテラブルから重複なく、ランダムにn個選んでリストにする	random.sample(イテラブル, k=n)
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
双方向キュー中の整数の数をカウントする	両端キュー.count(整数)
数式のインテグラルを行う	sympy.integrate(数式)
散布図を星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*')
実線でヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
多次元データを主成分分析として文字列次元に削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
相関係数でデータフレームの相関行列を算出する	df.corr(method='pearson')
option: ライトスレイグレー色を使う	color = 'lightslategrey'
本日が木曜日かどうか確認する	datetime.datetime.today().weekday() == 3
線グラフをパールゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
カウンタの正の数だけ残す	+aCounter
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの右三角印の色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
グラフの用途をスライドに指定する	sns.set(context='talk')
ピアソンの相関係数	scipy.stats.pearsonr(配列, 配列2)
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv('file.csv', float_format='%.3f')
列名を指定してデータフレームを全ジョインする	pd.merge(df, df2, on='列A', how='outer')
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
プロットの描画で淡くカラーパレットを使用する	sns.set(pallete='muted')
ヒストグラムをダークオレンジ色を用いて描画する	plt.hist(データ列, color='darkorange')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
日付時刻データの月	aDatetime.month
二つのリストの共通要素を算出する	list(set(リスト).intersection(set(リスト2)))
スラグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフの菱形印の色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
線グラフを青色を用いて描画する	plt.plot(データ列x, データ列y, color='blue')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
デピンクにヒストグラムの色を変更する	plt.hist(データ列, color='deeppink')
辞書上でキーが定義済みか判定する	キー in 辞書
xについて数式を積分する	sympy.integrate(数式, [|変数]x)
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームの選択したカラムの欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
整数が1もしくは2、もしくは3に等しい	整数 == 1 or 整数 == 2 or 整数 == 3
option: n番目のカラムをインデックスに指定する	index_col = n
データフレームのカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
option: 耐火レンガを使用する	color = 'firebrick'
option: 色をライトシアンに設定する	color = 'lightcyan'
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
赤い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
グラフの色を濃くする	sns.set(pallete='deep')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
コマンド引数を列挙する	sys.argv[1:]
option: 色の透明度を設定する	alpha = 0.5
リストの長さだけ繰り返す	range(len(リスト))
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
今日が日曜日か確認する	datetime.datetime.today().weekday() == 6
数式のyについてのn階微分を計算する	sympy.diff(数式, y, n)
データフレームを複数の列によって昇順に並べ、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
3つのデータフレームを縦方向につなぐ	pd.concat([df, df2, df3], axis=0)
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
データ列のパーセンタイルを図示する	plt.boxplot(データ列)
ファイルをバイナリモードでオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
列名を指定して二つのデータフレームを外部結合する	pd.merge(df, df2, on='列A', how='outer')
option: ミディアムブルー色を用いる	color = 'mediumblue'
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
グラフの全般的にカラーパレットを色差別なくする	sns.set(pallete='colorblind')
青色としてヒストグラムを描画する	plt.hist(データ列, color='blue')
アクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
2つの文字列を大文字小文字を無視して比較する	文字列.casefold() < 文字列2.casefold()
二次元リストをflattenする	sum(リスト)
オブジェクトが抽象クラスか調べる	inspect.isabstract(オブジェクト)
浮動小数点数のn乗を求める	x ** n
英字が文字列中に含まれないかどうか調べる	any(not c.isalpha() for c in 文字列)
散布図をサドルブラウン色として描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
その最小値でデータフレームのNaNを埋める	df.fillna(df.min())
文字列の右側から部分文字列を取り除く	文字列.rstrip(部分文字列)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
耐火レンガ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
文字列をバイト列に変換する	bytes(s)
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
標準出力がターミナル出力	sys.stdout.isatty()
双方向キューの先頭に要素を追加する	両端キュー.appendleft(要素)
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
整数が整数2よりも小さいか調べる	整数 < 整数2
option: ダイアモンド印を使う	marker = 'D'
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームのカラムを折れ線グラフで可視化する	plt.plot(df[column], df[column])
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
文字列を最後の部分文字列で分けたときの後半の文字列	文字列.rpartition(部分文字列)[-1]
線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
変数の値を整数分の1にする	変数 /= 整数
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
配列とイテラブルについて散布図をプロットして、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストとデータ列について散布図を描画し、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのあるカラムの日	df['列A'].dt.day
文字列中にひとつでも非小文字があるかどうか調べる	any(not c.islower() for c in 文字列)
中央値でデータシリーズの欠損値を埋める	ds.fillna(ds.median())
タプルの全順列	itertools.permutations(iterable)
文字列のケースを交換する	文字列.swapcase()
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
カウンタを少ない順番にリストとして得る	aCounter.most_common()[::-1]
xとyをスラッシュで区切ってプリントする	print(x, y, sep='/')
ミディアムパープルにヒストグラムの色を変更する	plt.hist(データ列, color='mediumpurple')
配列の平均値を求める	np.mean(aArray)
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
文字列の左側から改行を除去する	文字列.lstrip('\n')
option: ディムグレーにグラフの色を指定する	color = 'dimgrey'
棒グラフをクリムゾン色を用いて描画する	plt.bar(データ列x, データ列y, color='crimson')
棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
散布図をバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='violet')
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームのNaNをxに指定する	df.fillna(x)
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
分類モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
option: ダークターコイズを使用する	color = 'darkturquoise'
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
半透明の破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームのカラムのKurtosisを使う	scipy.stats.kurtosis(df['列A'], bias=False)
両端キューが空でないか	len(両端キュー) != 0
リストn番目から値をポップする	リスト.pop(n)
プラットフォームの整数の最大値を知る	sys.maxsize
一度にValueMapでデータフレームを置き換える	df.replace(ValueMap)
セットに要素を追加する	セット.add(要素)
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
option: エンコーディングを文字コードtextにセットする	encoding = text
二つの文字列は等しくないかどうか確認する	文字列 != 文字列2
スチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームを指定した列をキーにして昇順にソートして更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
作画のフォントを日本語表示にする	sns.set(font='IPAexGothic')
空白文字を全て使う	string.whitespace
データフレームを10の位で四捨五入して、整数にする	df.round(-1).astype(int)
1行から二つの浮動小数数を読み込む	A, B = map(float, input().split())
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
横棒グラフをライトコーラル色として描画する	plt.barh(データ列x, データ列y, color='lightcoral')
縦棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
列を累積する	itertools.accumulate(iterable, operator.mul)
データフレームがどれだけ、正規分布から歪んでいるか見る	df.kurt()
option: グラフの色をシエナに設定する	color = 'sienna'
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
グラフの全般的にカラーパレットを濃くする	sns.set(pallete='deep')
列を書式でPandasの日付型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
プロットで使うフォントを指定する	sns.set(font=フォント名)
２つの文字列は同じかどうか調べる	文字列 == 文字列2
option: ディムグレーを用いる	color = 'dimgray'
データフレームの中のNaNの合計を数える	df.isna().sum()
線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ファイルパスを開いて]追加ストリームを求める	'a' = 'a'<nl>open(filepath, mode='a')
辞書をインデントを指定してJSONフォーマットにエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
データフレームの選択したカラムの欠損値を最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
折れ線グラフの▲印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: パールバイオレットレッド色を使用する	color = 'palevioletred'
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
配列を分割数nを使ってビン分割する	pd.cut(aArray, n)
タイムスタンプデータを浮動小数点数に変換する	aDatetime.timestamp()
文字列を区切り記号によって二分する	文字列.partition(セパレータ)
ヒストグラムを上限から下限の範囲で描く	plt.hist(データ列, range=(start, end))
配列の長さを制限する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
option: 色をラベンダーに設定する	color = 'lavender'
ニューラルネットを用いて回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフの色をダークグリーンにする	plt.plot(データ列x, データ列y, color='darkgreen')
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
Pythonパスにスクリプトのサブディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), ディレクトリ名))
青い点線として配列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
フローラルホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
二つの列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
グラフの見栄えを綺麗にする	import seaborn as sns
option: 色をライトスチールブルーに設定する	color = 'lightsteelblue'
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
データフレームを列名を指定してジョインする	'<nl>pd.merge(df, df2, on='列A')
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
折れ線グラフを赤い一点鎖線を使って描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
プログラムの実行を正しく停止する	sys.exit(0)
option: レベッカパープルにフォントの色を設定する	color = 'rebeccapurple'
大文字が文字列中に存在しない	any(not c.isupper() for c in 文字列)
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データシリーズのNaNを中央値に減らす	ds.fillna(ds.median())
xが0に近づくときの極限値を求める	sympy.limit(数式, [|変数]x, 0)
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
option: 出力先を標準出力に設定する	file = sys.stdout
データフレームのあるカラムの曜日の名前	df['列A'].dt.weekday_name
データフレームを万の位で丸める	df.round(-4)
逆双曲線正弦	math.asinh(x)
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgrey')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
データフレームの列の名前一覧を見る	df.columns
プロットをスライド用に設定する	sns.set(context='talk')
リストと配列の散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
文字列の最後を使う	文字列[-1]
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
グラフで用いる横軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
option: グラフの色をマゼンタに変更する	color = 'magenta'
データ列の折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムをライトブルー色を使って描画する	plt.hist(データ列, color='lightblue')
ある列の文字列が部分文字列で始まらないデータを抽出する	df[~ df['列A'].str.startswith(部分文字列)]
カテゴリでグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
ふたつの整数の和を算出する	整数 + 整数2
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
濃い青にヒストグラムの色を指定する	plt.hist(データ列, color='darkblue')
データフレームのカラムが正規分布か仮説検定する	scipy.stats.shapiro(df['列A'])
option: ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
データシリーズの欠損値をメディアンに減らす	ds.fillna(ds.median())
第一引数で指定したファイルの名前	sys.argv[1]
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
ある列の文字列が部分文字列で始まる行を抽出する	df[df['列A'].str.startswith(部分文字列)]
データシリーズが何時か見る	ds.dt.hour
リストと配列について散布図を描画し、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのカラムの未入力値を前の行の値に設定する	df['列A'].fillna(method='ffill')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
文字列を区切り記号で区切り、列挙する	文字列.split(セパレータ)
グリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
ひとつでも非アスキー文字が文字列中に存在するか調べる	any(not c.isascii() for c in 文字列)
データフレームの相関行列をヒートマップで可視化する	sns.heatmap(df.corr())
ダークレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームのカラムのモードを求める	mode, count = scipy.stats.mode(df['列A'])
文字列を部分文字列で二分割して、前半を使う	文字列.partition(部分文字列)[0]
数式のxについてのn階微分を求める	sympy.diff(数式, [|変数]x, n)
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
文字列を改行せずプリントする	print(文字列, end='')
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
整数の16進数表記	hex(整数)
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
イテラブルとリストの散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
カンマで文字列を二つに分ける	文字列.partition(',')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
分割数nでデータ列を分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
三つの計算結果を順にプリントする	print(式, 式, 式)
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
スピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
イテラブルをカウンタに変換する	collections.Counter(iterable)
文字列中にひとつでも小文字が含まれるか	any(c.islower() for c in 文字列)
option: グラフの色をゴールドに設定する	color = 'gold'
線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームを整数に四捨五入する	df.round()
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
▽マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
タイムスタンプ型のデータフレームのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
year年month月day日hour時minute分second秒の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
数列をランダムにシャッフルしてリスト化する	random.sample(数列, len(数列))
データフレームのある列の標本標準偏差	df['列A'].std(ddof=1)
option: グラフの線の幅を3.0ポイントに設定する	linewidth = 3.0
あるカラムの中に含まれる日付データの合計をカウントする	df['列A'].isin([value]).sum()
ミスティローズ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ファイルパスが存在するかどうか	os.path.exists(filepath)
データフレームから型のみ抽出する	df.select_dtypes(ty)
option: シアン色を使う	color = 'cyan'
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
データフレームを表示するとき、表示可能な行数をnにする	pd.set_option('display.max_rows', n)
二進対数を計算する	math.log2(x)
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームの末尾を調べる	df.tail()
option: 出力先を標準出力にセットする	file = sys.stdout
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
option: 丸マーカーを用いる	marker = 'o'
折れ線プロットのラベルをセットする	plt.plot(データ列x, データ列y, label='ラベル')
option: ロージーブラウンに色を設定する	color = 'rosybrown'
ファイルを追加できるようにオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
昇順にデータフレーム全体を行によって並べ直す	df.sort_index(ascending=True)
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategray')
文字列を正規表現で分割する	re.split(pattern, s)
青い▼マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
データフレームを関数のカテゴリによって集計する	df.groupby(関数)
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
配列は何次元か調べる	aArray.ndim
散布図のマーカーの大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
辞書に項目名が存在しないとき処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
日付データをISO8601形式の文字列にする	aDate.isoformat()
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
eの小数点数乗	math.exp(x)
行列の各要素の最小公倍数を求める	np.lcm(aArray, aArray2)
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
上三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ファイルを追加モードとしてオープンして]、fとする	f = open(filepath, mode='a')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
浮動小数点数の正弦の逆数	math.asin(x)
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
リストとリストの散布図を描画し、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
nからn2までの整数リストを使う	list(range(n, n2+1))
option: 色のアルファを設定する	alpha = 0.5
線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
全要素を0で初期化したベクトル	np.zeros(要素数)
整数が1、もしくは2、もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
option: グレー色を使う	color = 'gray'
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
複数のカラムによって小さい順にデータフレームを並べる	df.sort_values(by=['列A', '列B'], ascending=True)
データフレームをサンプリングする	df.sample()
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
データフレームの行をリセットする	df.reset_index()
整数をセットに追加する	セット.add(数)
option: 改行コードをWindowsに設定する	newline = '\r\n'
日付データは何年か知る	aDate.year
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
等間隔でリストをn個にビン分割する	pd.cut(aList, n)
データフレームの選択したカラムがどの程度、分散しているか調べる	df[['列A', '列B']].var()
青色でxを出力する	print(f'\033[34m{x}\033[0m')
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
閾値としてデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ミディアムパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
線グラフの色をダークブルーに設定する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムをミディアムスプリンググリーン色を使って描画する	plt.hist(データ列, color='mediumspringgreen')
option: グラフの色をグレーに設定する	color = 'gray'
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
タイムスタンプデータとタイムスタンプデータの時間差	aDatetime - aDatetime2
データフレームを各列毎にグループ化して、文字列というグループの個数を算出する	df.groupby(column).size()[s]
データフレームが重複しているかどうか調べる	df.duplicated()
変数名が非同期ジェネレータ	inspect.isasyncgen(識別子)
辞書から最後の項目を取り除く	辞書.popitem()
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
ヒストグラムをオリーブ色として描画する	plt.hist(データ列, color='olive')
散布図をミッドナイトブルー色として描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
ファイルをバイナリモードとして開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
スピアマンの相関係数を計算する	scipy.stats.spearmanr(配列, 配列2)
縦棒グラフを描画し、、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
yが0に近づくとき、極限値を求める	sympy.limit(数式, y, 0)
データフレームの選択したカラムを10の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
イテラブルとイテラブルの散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データをインデントを指定してJSON文字列に変換する	json.dumps(データ, ensure_ascii=False, indent=n)
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
散布図を赤い▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ディープスカイブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
スピアマン相関係数を用いてデータフレームの相関行列を計算する	df.corr(method='spearman')
折れ線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
非数	math.nan
データシリーズを1000の位で丸める	ds.round(-3)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
実線に折れ線グラフをセットする	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの色をライトシアンにする	plt.plot(データ列x, データ列y, color='lightcyan')
option: ダークマゼンタを使う	color = 'darkmagenta'
辞書にマップ2の項目を更新する	辞書.update(辞書2)
グラフの描画で濃くパレットを使う	sns.set(pallete='deep')
ふたつのリストの積集合	list(set(リスト).intersection(set(リスト2)))
リストを文字列として、'改行で結合する	'\n'.join(map(str, リスト))
両端キューの要素をインプレースに逆に並べ直す	両端キュー.reverse()
整数が5の倍数	整数 % 5 == 0
指定された列のカテゴリで集計しそれぞれの標準偏差を算出する	df.groupby('列A').std()
option: 印の太さを指定する	markeredgewidth = 2.5
リストを文字列として、'改行によってつなげる	'\n'.join(map(str, リスト))
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
データフレームをCSV形式にヘッダを付けず保存する	df.to_csv('file.csv', header=None)
データフレームのあるカラムを配列にする	df['列A'].values
データフレームの指定したカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
リストとリストの散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
常用対数を計算する	math.log10(x)
黒い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
リスト中の要素が少なくともひとつ真か調べる	any(リスト)
データシリーズは何月か調べる	ds.dt.month
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
データシリーズの中に文字列と日付データが含まれる	ds.isin([value, value2])
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
横棒グラフをレベッカパープル色として描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームの文字列をNaNにする	df.replace(値, np.nan)
ある列の値ごとの分散	df.groupby('列A').var()
識別子はメソッドかテストする	inspect.ismethod(識別子)
文字列を空白を用いて区切って整数リストに変換する	list(map(int, 文字列.split()))
データをJSON文字列に変換する	json.dumps(データ, ensure_ascii=False)
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
配列の各要素の積	np.multiply(aArray, aArray2)
エクセルファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
整数はセットのいづれかか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
識別子がコルーチン	inspect.iscoroutine(識別子)
全要素を０で初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフの菱形印を黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
オブジェクトの属性の値を指定する	setattr(obj, プロパティ名, 値)
上位集合もしくは等しいかどうか	セット >= セット2
識別子が非同期ジェネレータ関数	inspect.isasyncgenfunction(識別子)
数字を全て見る	string.digits
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
辞書のキーに対応した値を得る	辞書[キー]
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームのNaNを平均値に指定する	df.fillna(df.mean())
イテラブルと列をチェインする	itertools.chain(iterable, iterable2)
青い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
option: 色をインディアンレッドに設定する	color = 'indianred'
シーケンスにシーケンスを続ける	itertools.chain(iterable, iterable2)
現在の分	datetime.date.today().minute
option: 菱形印を描画する	marker = 'D'
データ列間のMAEを計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
オブジェクトが属性を持つか調べる	hasattr(obj, プロパティ名)
ライムグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データシリーズは正規分布からどの程度歪んでいるか確認する	ds.kurt()
データフレームの一部のカラムの25パーセンタイル	df[['列A', '列B']].quantile(0.25)
データフレームの一部のカラムの値が未入力値	df[['列A', '列B']].isna()
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図をダークブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
実数に数を掛ける	x * y
散布図をrgbの四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
濃く色調をグラフの描画で用いる	sns.set(pallete='deep')
リストn番目から要素をポップする	リスト.pop(n)
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
長さの制限された双方向キューをリストから生成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
リストから長さの制限した両端キューを作成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
リストを文字列として、タブで結合する	'\t'.join(map(str, リスト))
ある列の文字列が正規表現文字列にマッチしない行を選択する	df[~df['列A'].str.match(正規表現)]
数列とリストについて散布図をプロットして、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
縦棒グラフをホワイト色として描画する	plt.bar(データ列x, データ列y, color='white')
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
ビンを設定してヒストグラムをプロットする	plt.hist(データ列, bins=区関数)
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフの菱形印の太さを変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームから型リストであるデータ型の列を抽出する	df.select_dtypes(include=typeList)
option: カンマを区切り記号で使う	sep = ','
２つのオブジェクトが同じか調べる	obj is obj2
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
小数点以下3桁までデータフレームを保存する	df.to_csv('file.csv', float_format='%.3f')
リストをインデントを指定してJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False, indent=n)
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
データシリーズの要約統計量を求める	ds.describe()
折れ線グラフを実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの指定した列の名前一覧の列を取り出す	columns = ['列A', '列B']<nl>df[columns]
ボックスチャートを描いて、平均線を加える	plt.boxplot(データ列, meanline=True)
破線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
散布図をミスティローズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図の右三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: デピンクにグラフの色を設定する	color = 'deeppink'
行列の値	aArray[行番号, 列番号]
option: シーグリーンにフォントの色を変更する	color = 'seagreen'
配列から重複なく、n個ランダムに選んでリストにする	random.sample(配列, k=n)
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
変数名がメソッドかどうか調べる	inspect.ismethod(識別子)
yが無限大に近づくときの数式の極限値を求める	sympy.limit(数式, y, oo)
option: 色をシスルに設定する	color = 'thistle'
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
ある列の値ごとの個数	df.groupby('列A').count()
ドジャーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
オブジェクトは関数	inspect.isfunction(オブジェクト)
文字列中に部分文字列がいくつかあるかカウントする	文字列.count(部分文字列)
最後の部分文字列で文字列を分割する	文字列.rpartition(部分文字列)
大文字・小文字を無視して文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
文字列の終了位置以前に部分文字列が存在しないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
データシリーズのNaNをxに設定する	ds.fillna(x)
データフレームの指定したカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
ファイルを全部読み込む	f.read()
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
二つのデータ列の散布図として残差を描く	sns.residplot(x=データ列, y=データ列)
要素はセットのいずれかどうか調べる	要素 in セット
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
数列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
度数分布図をプロットし、、ビン数を設定する	plt.hist(データ列, bins=区関数)
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データフレームの指定したカラムを十の位で丸めて整数型にする	df['列A'].round(-1).astype(int)
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
両端キュー中の文字列の位置を使う	両端キュー.index(文字列)
データフレームをグループ化し、あるカラムに対し個数を求める	df.groupby('列A')['列B'].count()
option: フォントの色をブラックにセットする	color = 'black'
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
両端キューを全て取り除く	両端キュー.clear()
ラジアンの角度を計算する	math.degrees(x)
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
両端キューから文字列を取り除く	両端キュー.remove(文字列)
データフレームから型リストのデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
整数の8進表現	oct(整数)
カウンタ同士で積集合	aCounter & aCounter2
あるカラムによってデータフレームを並べる	df.sort_values(by='列A')
ランダムにデータフレームから100行を抽出する	df.sample(100)
データ列の変遷を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列をコロンで区切って、列挙する	文字列.split(':')
折れ線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
option: 複数行に対応する	flag = re.MULTILINE
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
mathをインポートする	import math
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategray')
カウンタから列をカウントして引く	aCounter.subtract(iterable)
option: ネイビーを使用する	color = 'navy'
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
リストと配列について散布図をプロットし、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフのポイント印を赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
グラフの縦軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
整数が2で割り切れないか確認する	整数 % 2 == 1
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
オブジェクトは辞書	dict = int<nl>isinstance(obj, dict)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
リストを双方向キューに変換する	collections.deque(リスト)
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: 赤を使用する	color = 'red'
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
データフレームの選択した列のNaNを最頻値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
文字列を最後の区切り記号で二分して後ろの方を見る	文字列.rpartition(セパレータ)[-1]
データフレームのあるカラムは何時か調べる	df['列A'].dt.hour
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
Pythonパスの一覧	sys.path
折れ線グラフの色をパウダーブルーにセットする	plt.plot(データ列x, データ列y, color='powderblue')
ベクトルをベースに全要素が1の行列を作る	np.ones_like(aArray)
リストを昇順にソートする	sorted(リスト, reverse=False)
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
文字列は全て十進数字かどうか調べる	文字列.isdecimal()
横軸の名称を変更する	plt.xlabel('x軸ラベル')
データフレームの一部のカラムを十の位で丸める	df[['列A', '列B']].round(-1)
配列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列が全て十進数字か確認する	文字列.isdecimal()
データフレームのカラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ひとつでも非ASCII文字が文字列中に存在するか調べる	any(not c.isascii() for c in 文字列)
option: コーンフラワーブルーにグラフの色をする	color = 'cornflowerblue'
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
データシリーズのNaNを直後の値で埋める	ds.fillna(method='bfill')
データフレームの選択したカラムの中に存在する文字列の個数を数える	df[['列A', '列B']].isin([value]).sum()
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
xを水色でプリントできる文字列にする	f'\033[36m{x}\033[0m'
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
タプルの最初	タプル[0]
文字列中にひとつでも小文字が含まれる	any(c.islower() for c in 文字列)
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
散布図にrgbの上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ふたつの列でグループ化し、最小値を算出する	df.groupby(['列A', '列B'], as_index=False).min()
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
SVDを用いて多次元データを整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
ヒストグラムをオールドレース色として描画する	plt.hist(データ列, color='oldlace')
連番の行列の作成する	np.arange(開始値, 終了値, 等差)
文字列の示すエンコーディングで書き込みできるようにファイルパスをオープンする]	open(filepath, mode='w', encoding=s)
option: マゼンタに色を設定する	color = 'magenta'
変数について数式のインテグラルを行う	sympy.integrate(数式, 変数)
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
ふたつのセットは互いに素かどうか確認する	セット.isdisjoint(セット2)
option: 色を紺に設定する	color = 'darkblue'
縦棒グラフをライトスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
円プロットを真円にする	plt.axis('equals')
散布図にrgbの大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ラベンダーにヒストグラムの色を変更する	plt.hist(データ列, color='lavender')
横棒グラフをスノー色として描画する	plt.barh(データ列x, データ列y, color='snow')
日付データが日付データと同時	aDate == aDate2
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
ある列だけ、データフレームの重複を見る	df.duplicated(subset='列A')
現在の分数を使う	datetime.date.today().minute
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
ファイル名がテキストファイルか確認する	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
配列とリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
ダークレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
ヒストグラムの色をブルーバイオレットに指定する	plt.hist(データ列, color='blueviolet')
イテラブルから長さの制限した両端キューを作る	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
分類木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
辞書にキーワード引数として更新する	辞書.update(**kwargs)
折れ線グラフをライトシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcyan')
option: ホワイト色を使用する	color = 'white'
列とイテラブルの直積	itertools.product(iterable, iterable2)
日付データは何曜日か知る	aDate.weekday()
ミディアムスプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムをシアン色として描画する	plt.hist(データ列, color='cyan')
文字列の先頭から空白を取り除く	文字列.lstrip()
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
カウンタの項目数	len(aCounter)
文字列中にひとつでも非英字が含まれるか調べる	any(not c.isalpha() for c in 文字列)
ヒストグラムの色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
両端キュー	両端キュー = collections.deque()
整数同士の論理積をがほしい	整数 & 整数2
ヒストグラムを描画して半透明化にする	plt.hist(データ列x, alpha=0.5)
ダークブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
整数がnの倍数でないか確認する	整数 % n != 0
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
option: 黄色色を使用する	color = 'yellow'
option: ダークバイオレットにフォントの色を設定する	color = 'darkviolet'
リストの要素を文字列として、カンマで連結する	','.join(map(str, リスト))
紫色でxを表示する	print(f'\033[35m{x}\033[0m')
1行から二つの文字値を取り出す	A, B = map(str, input().split())
文字列をUTF8でバイト列に変換する	文字列.encode(encoding='utf-8', errors='strict')
文字列を末尾から空白で分割する	文字列.rsplit()
線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
パウダーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
辞書の項目数	len(辞書)
未入力値がある行をドロップしてみる	df.dropna()
まとめてデータシリーズの値をValueMapで置き換える	ds.replace(ValueMap)
配列が正規分布か仮説検定する	scipy.stats.shapiro(配列)
小数点数の天井	math.ceil(x)
リストをJSON形式でファイル出力に保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
標準出力を使う	sys.stdout
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
データフレームの形状	df.shape
データフレームのカラムのNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
横方向に３つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=1)
データフレームから一つの列を抽出する	df[['列A']]
JSON形式の文字列をデータにする	data = json.loads(文字列)
印字可能な文字列	ascii(x)
折れ線グラフの色を貝殻にセットする	plt.plot(データ列x, データ列y, color='seashell')
データフレームを表示するとき、カラムの最大幅をnにセットする	pd.set_option('max_colwidth', n)
option: グラフの色をオリーブに設定する	color = 'olive'
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
インデント幅を指定して文字列をJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
ヒストグラムの色を黄色に指定する	plt.hist(データ列, color='yellow')
追加できるようにBOM付きとして既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
タイムスタンプデータの日数	aDatetime.day
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
rgbの丸マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
インデックスで降順でデータフレームを並べる	df.sort_index(ascending=False)
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
option: n番目の列をインデックスにする	index_col = n
辞書をJSONフォーマットでファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
option: カンマを分割記号で使う	sep = ','
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: 茶色を使う	color = 'brown'
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
目盛線	plt.grid(linewidth=3.0)
ふたつのリストの積集合を計算する	list(set(リスト).intersection(set(リスト2)))
線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightseagreen')
線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
ひとつも小文字が文字列中に含まれない	any(not c.islower() for c in 文字列)
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
スクリプトファイルと同じディレクトリのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
文字列の左側から文字を除去する	文字列.lstrip(文字)
文字列中に非空白が含まれるか調べる	any(not c.isspace() for c in 文字列)
数列とリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストの末尾を捨てる	リスト[:-1]
ガウス過程としてクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
二次元タプルをフラット化する	sum(タプル)
二つの条件が成り立つ	条件 and 条件2
線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
option: ブール型を使う	np.int32 = np.int<nl>dtype = np.int32
option: 読み込む行番号をnamesで指定する	usecols = names
JSONフォーマットのファイルを構文解析する	with open('file.json') as f:<nl><tab>data = json.load(f)
辞書のキーに対応した値	辞書.get(キー, 見つからない場合の値)
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
EUCとしてファイルを書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
散布図に三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
白色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
縦棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
変数が無限大に近づく時の数式の極限値を算出する	sympy.limit(数式, 変数, oo)
浮動小数点数を文字列に変換する	str(x)
文字列中にひとつも数字が含まれない	any(not c.isdigit() for c in 文字列)
スプリンググリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
x座標だけ目盛線	plt.grid(axis='x')
横棒グラフの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
整数乱数の行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
多次元データをt-SNEとして整数次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
配列の列ごとの最小	np.min(aArray, axis=0)
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: ナバホホワイトにグラフの色をセットする	color = 'navajowhite'
データフレームから数値データのカラムを選択する	df.select_dtypes('number')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
nとkのnCkを求める	math.comb(n, k)
option: 青紫にグラフの色を設定する	color = 'violet'
複数横に並べてデータ列を柱状グラフにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
ラベンダー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ヒストグラムを茶色色を用いて描画する	plt.hist(データ列, color='brown')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
縦棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームからランダムに5行を抽出する	df.sample(5)
ふたつの集合のいずれか一方だけの集合を算出する	セット.symmetric_difference(セット2)
xがマイナス無限大に近づく際の極限値を算出する	sympy.limit(数式, [|変数]x, -oo)
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図を大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X')
option: シエナ色を用いる	color = 'sienna'
CSVファイルのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
データシリーズの欠損値をxにセットする	ds.fillna(x)
四分位数ごとにデータ列をビン分割する	pd.qcut(ds, 4)
棒グラフをナバホホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='navajowhite')
線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
散布図を赤いダイアモンドマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
辞書を別の辞書で更新する	辞書.update(辞書2)
ヒストグラムの線の種類を一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
データシリーズの値を正規表現でまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
数列をセットにする	set(数列)
文字列を最後の区切り記号で分割した時の残りの文字列を取り出す	文字列.rpartition(セパレータ)[-1]
データフレームの選択した列が正規分布からどれだけ、尖っているか確認する	df[['列A', '列B']].skew()
日付時刻データは日付時刻データよりあとか調べる	aDatetime > aDatetime2
データシリーズを千の位で四捨五入する	ds.round(-3)
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
配列と列を連結する	itertools.chain(iterable, iterable2)
ダークサーモン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの欠損値を最小値に増やす	df.fillna(df.min())
浮動小数点数のハイパボリック・タンジェント	math.tanh(x)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
データフレームのカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
数式の部分分数化を行う	sympy.apart(数式)
既存のベクトルを元にして全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
縦棒グラフを小麦色色を使って描画する	plt.bar(データ列x, データ列y, color='wheat')
リストとリストについての散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
数式を簡略にする	sympy.sympify(数式)
ある列の値ごとの合計	df.groupby('列A').sum()
フィシャー流の尖度を求める	scipy.stats.kurtosis(配列, fisher=True, bias=False)
データフレームをインデックスを付けず出力する	df.to_csv('file.csv', index=None)
option: ダークバイオレット色を用いる	color = 'darkviolet'
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
コロンによって文字列を二分割する	文字列.partition(':')
option: デピンク色を使用する	color = 'deeppink'
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
ケンドールの順位相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
列名を指定して２つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
オリーブ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
配列から長さの制限された両端キューを作る	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
整数を両端キューのn番目に挿入する	両端キュー.insert(n, 整数)
あるカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
データフレームのヒストグラムを横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名')
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
文字列を部分文字列で二分して、残りを求める	文字列.partition(部分文字列)[-1]
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
プラットホームがウィンドウズか	sys.platform.startswith('win32')
赤いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
yが無限大に近づくときの数式の極限値を計算する	sympy.limit(数式, y, oo)
散布図を赤いダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
グラフのカラーテーマを全般的に明るくする	sns.set(pallete='bright')
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
整数が負の数か調べる	整数 < 0
文字列を全て大文字にする	文字列.upper()
折れ線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
文字列をセパレータで二分して、前の方を見る	文字列.partition(セパレータ)[0]
下限指定をしたデータフレームのカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
配列とデータ列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データ列の一意な要素	ds.unique()
線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
インデント幅を指定して文字列をJSON文字列に変換する	json.dumps(文字列, ensure_ascii=False, indent=n)
散布図を四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s')
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
データフレームのある列を削除し、みる	df.drop('列A', axis=1)
ライトゴールドロディイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
先頭のを外したデータフレーム	df[df.columns[1:]]
セットの濃度	len(セット)
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
ミスティローズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
タプルの中の最大値	max(タプル)
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームのあるカラムの曜日数	df['列A'].dt.dayofweek
option: タブをセパレータで用いる	sep = '\t'
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
データフレームの指定したカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
日付データが月曜日	aDate.weekday() == 0
指定した列のカテゴリで集計し、最小値を求める	df.groupby('列A').min()
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
範囲指定してデータフレームの行を選択する	df[start:end]
二つの変数を改行せず出力する	print(変数名, 変数名, end='')
日付データが火曜日か	aDate.weekday() == 1
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
データシリーズの標本分散を求める	ds.var(ddof=0)
文字列を最後のカンマを用いて二分する	文字列.rpartition(',')
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
既存の行列を元にして全要素が1の配列	np.ones_like(aArray)
データ列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
データシリーズが何年か見る	ds.dt.year
ダークオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
ファイルをバイナリ書き込みモードでオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
データフレームの中に文字列があるか調べる	df.isin([value])
線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
SVDで多次元データを数値次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
環境はMacOSか調べる	sys.platform.startswith('darwin')
データフレームの相関行列をで求める	df.corr(method='kendall')
線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
パパイヤウィップ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
リストから重複を取り除く	set(リスト)
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
横棒グラフをライトシアン色を使って描画する	plt.barh(データ列x, データ列y, color='lightcyan')
表データからランダムに100行を取り出す	df.sample(100)
天井	math.ceil(x)
データフレームの列をヒストグラムにする	plt.hist(df[column])
数値でデータシリーズの未入力値を埋める	ds.fillna(x)
青い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
二つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
両端キューのn番目に整数を挿入する	両端キュー.insert(n, 整数)
散布図に▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
空の計数器	collections.Counter()
カラムの尖り	scipy.stats.kurtosis(df['列A'], bias=False)
option: 右三角マーカーを加える	marker = '>'
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
リストをセットにする	set(リスト)
最後の列を除いたデータフレーム	df[df.columns[:-1]]
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
データフレームの欠損値を最頻値に変更する	df.fillna(df.mode().iloc[0])
エラーなく文字列の接頭辞から部分文字列を除去する	文字列.removeprefix(部分文字列)
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
文字列からサフィックスを取り除いた文字列	文字列.removeprefix(部分文字列)
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
整数のそれぞれの桁の総和	sum(map(int, str(整数)))
リストとリストについて散布図を描画して、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図に黒い△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームを各列毎に集約して、文字列というグループの大きさを算出する	df.groupby(column).size()[s]
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
セットを組に変換する	tuple(セット)
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
データシリーズの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
プロットの色を全般的に濃くする	sns.set(pallete='deep')
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
行列の逆行列を調べる	np.linalg.inv(aArray)
配列の調和平均を計算する	scipy.stats.hmean(配列)
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
データシリーズの日にち	ds.dt.day
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
イテラブルから双方向キューを作成する	collections.deque(イテラブル)
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
ブランチドアーモンド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
xとyをタブで区切ってプリントする	print(x, y, sep='\t')
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
配列の分散	np.var(aArray)
黒いダイアモンドマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
ヘッダー行を右寄せにする	pd.set_option('colheader_justify', 'right')
リストと数列について散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
プロットにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
真紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ある列ごとの標準偏差	df.groupby('列A').std()
整数が奇数かどうか確認する	整数 % 2 == 1
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
ファイルを書き込みモードを用いて開く]	'w' = 'a'<nl>open(filepath, mode='w')
散布図に赤い△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの選択したカラムの空文字をNaNに変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
イテラブルのイミュータブルな集合を作る	frozenset(イテラブル)
データフレームの指定した列の欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
表をグループ化し、ある列に対し個数を算出する	df.groupby('列A')['列B'].count()
バリーウッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
識別子がメソッドか調べる	inspect.ismethod(識別子)
グラフをプレゼン用に設定する	sns.set(context='talk')
整数はセットのいずれでもないどうか	数 not in セット
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフの▽印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのあるカラムの秒	df['列A'].dt.second
両端キューの先頭にイテラブルの各要素を追加する	両端キュー.extendleft(イテラブル)
ファイルの絶対パスを求める	os.path.abspath(filepath)
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
あるカラムを小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
文字列をJSON形式としてあるファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
リストを文字列としてカンマで連結する	','.join(map(str, リスト))
ヒストグラムをシルバー色として描画する	plt.hist(データ列, color='silver')
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
リストとリストについて散布図を描いて、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
散布図の△マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの重複する行のみを選ぶ	df[df.duplicated(keep=False)]
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
タイムスタンプデータが何月か知る	aDatetime.month
カラムの幾何平均を使う	scipy.stats.gmean(df['列A'])
連続した行列の作成する	np.arange(開始値, 終了値, 等差)
ファイルパスをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
部分文字列が文字列の終了位置より前に含まれないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
キュー中の整数の数をカウントする	両端キュー.count(整数)
縦棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームの選択したカラムの中に文字列と文字列があるかどうか確認する	df[['列A', '列B']].isin([value, value2])
実数のn乗の実数剰余を算出する	pow(x, n, y)
文字列をSJISでバイト列にする	文字列.encode(encoding='sjis', errors='ignore')
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
辞書からカウンタを生成する	collections.Counter(aDict)
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
整数を八進文字列に変換する	oct(整数)[2:]
カウンタの共通部分	aCounter & aCounter2
線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
CSVファイルをデータフレームとして読み込む	pd.read_csv('file.csv', sep=',')
線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
ファイルパスからファイル名を見る	os.path.basename(filepath)
option: 赤色を使う	color = 'red'
x座標のラベルを変更する	plt.xlabel('x軸ラベル')
オブジェクトは辞書か調べる	dict = int<nl>isinstance(obj, dict)
二つの行列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
数列の推移を点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
リストの要素を小さい順に並べる	sorted(リスト, reverse=True)
プロットの色を指定する	sns.set(pallete=パレット名)
要素はセットのいずれかどうか	要素 in セット
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
整数の5乗	整数 ** 5
タイムスタンプデータが日曜日	aDatetime.weekday() == 6
最頻値でデータフレームのNaNを埋める	df.fillna(df.mode().iloc[0])
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
データフレームのカラムの標準誤差	scipy.stats.sem(df['列A'])
バツマーカーを用いる折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームのあるカラムが何秒か知る	df['列A'].dt.second
ふたつの集合の和集合	セット.union(セット2)
データフレームを2つの列によってグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームをある列の値でグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
nは整数か調べる	整数 == 整数2
CSVファイルをヘッダを指定せず読み込む	pd.read_csv('file.csv', header=None)
折り返しをオフにセットする	pd.set_option('expand_frame_repr', False)
横棒グラフをスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='steelblue')
文字列をISO書式を用いてタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
整数が-9以上、9以下かどうか調べる	-9 <= 整数 <= 9
整数の二乗を求める	整数 ** 2
文字列の左側がsubか	文字列.startswith(部分文字列)
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
下限指定をした配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
文字列中にひとつでも非ASCII文字が含まれる	any(not c.isascii() for c in 文字列)
データ列と数列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームのあるカラムがどれだけ、分散しているか見る	df['列A'].var()
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
両端キューのn番目に文字列を挿入する	両端キュー.insert(n, 文字列)
ふたつのリストの差を求める	list(set(リスト).difference(set(リスト2)))
データフレームの選択したカラムの欠損値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ファイルをオープンして]、書き込みストリームを見る	'w' = 'a'<nl>open(filepath, mode='w')
データフレームの中にある文字列の数を調べる	df.isin([value]).sum()
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データシリーズの不偏標準偏差	ds.std()
データ列のR2を求める	sklearn.metrics.r2_score(データ列, データ列2)
本日の日付時刻を使う	datetime.datetime.today()
表データを並べ、、新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
プロットを正方形にする	plt.axis('equals')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
黒色でxをプリントする	print(f'\033[30m{x}\033[0m')
文字列から部分文字列を取り除く	文字列.replace(部分文字列, '')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
小さい順にタプルの要素をソートする	sorted(タプル, reverse=False)
データフレームをTSVファイルを用いて保存する	df.to_csv('file.tsv', sep='\t')
分類モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
横向きに２つの表を結合する	pd.concat([df, df2], axis=1)
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
ひとつでも空白が文字列中に存在するかどうか調べる	any(c.isspace() for c in 文字列)
データフレームの中の列をn個に分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
空白で文字列を区切り、、整数のリストに変換する	list(map(int, 文字列.split()))
データフレームから型リストで指定されたデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
データフレームのあるカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
コマンド引数で与えられたファイル名をひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
区切り記号によって文字列を二つに分ける	文字列.partition(セパレータ)
データフレームを表示するとき小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
実数のn乗の実数剰余	pow(x, n, y)
リストと配列についての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムをミディアムアクアマリン色を使って描画する	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
データフレームの末尾5行を抽出する	df.tail(5)
オブジェクトはモジュールか調べる	inspect.ismodule(オブジェクト)
文字列が全て小文字	文字列.islower()
ファイルからJSON形式のデータを読む	with open('file.json') as f:<nl><tab>data = json.load(f)
オブジェクトがn回繰り返す列を得る	itertools.repeat(element, n)
複素数	complex(x, y)
データフレームをグループ化し、それぞれの標準偏差を求める	df.groupby('列A').std()
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
セットに整数を追加する	セット.add(数)
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
クラス分類をRANSACで行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
特異値分解で多次元データを整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
option: 配列のデータ型を指定する	np.uint8 = np.int<nl>dtype = np.uint8
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
データシリーズを丸める	ds.round()
rgbの三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
CSVファイルにデータフレームをインデックスを付けず保存する	df.to_csv('file.csv', index=None)
データフレームに重複があるか見る	df.duplicated()
自然数の順列の総数	math.perm(n)
文字列中にひとつも小文字がないか調べる	any(not c.islower() for c in 文字列)
データフレームのある列の最頻値	df['列A'].mode()
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
オブジェクトの型	type(obj)
データシリーズが何曜日か見る	ds.dt.weekday_name
多次元データを多次元尺度構成法で整数次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームのカラムの平均の標準誤差を求める	scipy.stats.sem(df['列A'])
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
ビスク色としてヒストグラムを描画する	plt.hist(データ列, color='bisque')
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
最小値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
option: フォントの色をダークグレーに変更する	color = 'darkgray'
option: 切片を計算しない	fit_intercept = False
データフレームの欠損値をxに変更する	df.fillna(x)
折れ線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
整数を符号付きでバイナリにする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
カウンタをクリアする	aCounter.clear()
データシリーズの欠損値をその中央値で置換する	ds.fillna(ds.median())
最大長を指定して、双方向キュー	collections.deque(maxlen=最大長)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
nで乱数生成系列を固定する	random.seed(n)
配列とリストについて散布図をプロットして、マーカーを下三角にセットする	plt.plot(データ列x, データ列y, marker='v')
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
マップのキーの一覧	list(辞書.keys())
折れ線グラフの大バツ印の線幅を指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
保存するCSVファイルの小数点以下の桁数を増やす	df.to_csv('file.csv', float_format='%.3f')
散布図をミントクリーム色を用いて描画する	plt.scatter(データ列x, データ列y, color='mintcream')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
折れ線グラフのアルファを設定する	plt.plot(データ列x, データ列y, alpha=0.5)
カウンタからマッピングを引く	aCounter.subtract(aDict)
データシリーズを百の位で丸めて、整数型にする	ds.round(-2).astype(int)
カウンタ同士で交わり演算する	aCounter & aCounter2
変数が0に近づくときの数式の極限値を求める	sympy.limit(数式, 変数, 0)
何か試しに動かす	print('Hello World')
散布図をライトスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: グラフの色を紺碧に変更する	color = 'azure'
データフレームの中の列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
行列の最小を求める	np.min(aArray)
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
列の各値は何回出現するか見る	ds.value_counts()
赤いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
指定したカラムの不偏標準偏差	df['列A'].std()
データシリーズの中にいくつ欠損値があるか数える	ds.isna().sum()
マルーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
日付時刻データからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
整数を八進数文字列にする	oct(整数)[2:]
複数のの条件がいずれか成り立つ	条件 or 条件2 or 条件3
半透明の実線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ある列ごとの合計を求める	df.groupby('列A').sum()
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
option: ホワイトスモークにグラフの色を変更する	color = 'whitesmoke'
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
データフレームの指定した列の欠損値を最頻値に指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
リストをJSONフォーマットとしてファイル出力に保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
現在の日	datetime.datetime.today().day
データフレームの歪度を求める	df.kurt()
データフレームをソートして、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
文字列中にASCII文字が含まれないか調べる	any(not c.isascii() for c in 文字列)
要素がリストに含まれる	要素 in リスト
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
ある列によってデータフレームを小さい順に破壊的に整列する	df.sort_values(by='列A', ascending=True, inplace=True)
0からN未満までの配列を初期化する	np.arange(N)
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightgreen')
データフレームの指定した列の中の欠損値の合計を数える	df['列A'].isna().sum()
コマンドラインを一覧として使う	sys.argv[1:]
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
データフレームの欠損値が含まれる部分を色付けする	df.style.highlight_null()
データフレームのカラムの歪度を計算する	scipy.stats.skew(df['列A'], bias=False)
option: フォントの色をバリーウッドに変更する	color = 'burlywood'
option: 出力先を標準エラーに指定する	file = sys.stderr
データ列をリストを境界値としてビンニングする	pd.cut(ds, aList)
データフレームの未入力値を最小値に設定する	df.fillna(df.min())
option: グラフの色を小麦色に設定する	color = 'wheat'
ファイルパスをオープンして]、追加ストリームを見る	'a' = 'a'<nl>open(filepath, mode='a')
文字列を最後のコロンで分けた時の後半の文字列を取り出す	文字列.rpartition(':')[-1]
シーケンスのコンビネーション	itertools.combinations(iterable, n)
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
両端キューの順を左に輪番で回す	両端キュー.rotate(-1)
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
ゼロ埋めされた三２ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
option: アンティークホワイト色を使用する	color = 'antiquewhite'
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
プラットホームがマックか調べる	sys.platform.startswith('darwin')
データフレームを二つの列によって並べ直す	df.sort_values(by=['列A', '列B'])
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームの指定したカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームのパーセンタイル	df.quantile(パーセント/100)
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列がスタックの中に存在する	文字列 in 両端キュー
データフレームを二つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームのn行目をインプレイスで削除する	df.drop(n, axis=0, inplace=True)
リストとリストの散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフをゴールド色を用いて描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームのカラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
散布図の印の大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
散布図のクロス印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
変数がマイナス無限大に近づくときの極限値を計算する	sympy.limit(数式, 変数, -oo)
option: スレートブルーを使用する	color = 'slateblue'
nまでの奇整数列	list(range(1, n, 2))
CSVをカラムの名前なしで読み込む	pd.read_csv('file.csv', header=None)
現在が月曜日かどうか	datetime.datetime.today().weekday() == 0
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
タプルの値をソートする	sorted(タプル)
option: マーカーを大バツに変更する	marker = 'X'
文字列が文字列より辞書順で前	文字列 < 文字列2
リストの推移を青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: グラフの線の種類を実線に変更する	linestyle = 'solid'
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
option: 標準エラーに出力する	file = sys.stderr
データ列の各データ値の出現数	ds.value_counts()
でデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='kendall')
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
回帰分析をパーセプトロンを用いてする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
リストとイテラブルについて散布図をプロットして、下三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
アンサンブル学習で回帰分析をする	sklearn.ensemble.VotingRegressor()
整数がnの倍数か調べる	整数 % n == 0
線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
ライトシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
文字列の左側から部分文字列を消す	文字列.lstrip(部分文字列)
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
整数乱数で要素を埋めたベクトルを作る	np.random.randint(開始値, 終了値, N)
疑似乱数を求める	random.random()
既存の行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
左三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
文字列はタイトル大文字小文字か調べる	文字列.istitle()
整数の八進数文字列	oct(整数)[2:]
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
整数が整数2よりも大きいか判定する	整数 > 整数2
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
option: グラフの色をダークゴールデンロッドに指定する	color = 'darkgoldenrod'
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
メディアンでデータフレームのNaNを置き換える	df.fillna(df.median())
配列から重複なく、ランダムにn個選んでリストにする	random.sample(配列, k=n)
数式を数値計算する	float(数式)
シーケンスの組み合せ	itertools.combinations(iterable, n)
データ列間の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
整数の16進表現	hex(整数)
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
整数の二進表現を使う	bin(整数)
リストの最後に別のリストを追加して拡張する	リスト.extend(リスト2)
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
小数点数以上の最小の整数	math.ceil(x)
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: ダークシアグリーンにフォントの色を設定する	color = 'darkseagreen'
アルファベットの大文字を全て使う	string.ascii_uppercase
ヒストグラムの色をダークレッドに設定する	plt.hist(データ列, color='darkred')
option: サンディーブラウン色を使う	color = 'sandybrown'
二つの列によってデータフレームをグループ分けして、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
イテラブルの全順列	itertools.permutations(iterable)
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
ある列にリストの値が含まれるデータを取り出す	df[df['列A'].isin(リスト)]
文字列を最後のセパレータで二つに分けて、前半を使う	文字列.rpartition(セパレータ)[0]
データシリーズを丸めて整数にする	ds.round().astype(int)
整数が負の整数かどうか調べる	整数 < 0
option: ミディアムバイオレットレッドを用いる	color = 'mediumvioletred'
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
格子をグラフから消す	plt.grid(False)
カーネル密度による分布図をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの指定した列の欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
データフレームの選択したカラムの統計量	df[['列A', '列B']].describe()
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
文字列を部分文字列で区切って、文字列リストにする	文字列.split(部分文字列)
文字列が全て空白文字	文字列.isspace()
リストをJSON形式でファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
列の文字列長を列として使う	ds.str.len()
option: ゲインズボロ色を使用する	color = 'gainsboro'
ゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
配列から新しいカウンタを作成する	collections.Counter(iterable)
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
多次元データをMSDとして要素次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームの未入力値を直前の値で埋める	df.fillna(method='ffill')
散布図を上三角印で描画する	plt.scatter(データ列x, データ列y, marker='^')
散布図を▲マーカーで描く	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
option: セパレータをタブにする	sep = '\t'
行列の累積和	np.cumsum(aArray)
ふたつのタプルを接続する	タプル + タプル2
option: フォントの色を貝殻に設定する	color = 'seashell'
2数の一番小さい値を求める	min(x, y)
ゼロ埋めされた三二ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
rgbのクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムの色をダークゴールデンロッドにする	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
辞書をカウンタに変換する	collections.Counter(aDict)
カラムの欠損値を直後の値に指定する	df['列A'].fillna(method='bfill')
縦棒グラフをライムグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='limegreen')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
リストをn回、加える	リスト * n
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
ダークシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームをCSVファイルにBOM付きで書き出す	df.to_csv('file.csv', encoding='utf_8_sig')
折れ線グラフをダークターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列がPythonのキーワードか調べる	keyword.iskeyword(文字列)
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
平均線付きボックスチャートを描画する	plt.boxplot(データ列, meanline=True)
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
整数最小公倍数	math.lcm(n, n2)
option: アンティークホワイトにグラフの色を指定する	color = 'antiquewhite'
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
散布図の印を左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
リストとリストの散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
option: グラフの色をインディゴに変更する	color = 'indigo'
変数の値をスワップする	x, y = y, x
データ列をヒストグラムで可視化する	plt.hist(データ列)
リストをひとつ飛ばしで得る	リスト[::2]
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
二つの列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgray')
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をライトスチールブルーにする	plt.hist(データ列, color='lightsteelblue')
ファイルパスを書き込みモードを使ってオープンして]、fとする	f = open(filepath, mode='w')
散布図に黒い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
オブジェクトの無限なイテラブル	itertools.repeat(element)
データフレームの指定したカラムの中に日付データと文字列が存在するかどうか	df['列A'].isin([value, value2])
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategrey')
線グラフの色をブラックにセットする	plt.plot(データ列x, データ列y, color='black')
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
ライトスカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: オーキッドを使う	color = 'orchid'
グラフの色を明るくする	sns.set(pallete='bright')
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
折れ線グラフの色をオレンジに指定する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
スノー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
データシリーズの欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
文字列を文字のリストに変換する	list(文字列)
データをスケーリングする	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
青い実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
マップに項目名が存在しないとき、処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
散布図に上三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
タプルの要素を小さい順にソートする	sorted(タプル, reverse=False)
文字が別の文字列に存在する	文字 in 文字列
目盛り線	plt.grid(linewidth=3.0)
option: グラフの色をロージーブラウンにする	color = 'rosybrown'
条件が成り立たない	not 条件
表データのあるカラムが何秒か知る	df['列A'].dt.second
8進文字列をバイト列に変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
カウンタの文字列一覧を使う	aCounter.keys()
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
レモンシフォン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
リストと配列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストとリストの散布図を描画して、右三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
数列とリストの散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
識別子はスタックフレーム	inspect.isframe(識別子)
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームのヒストグラム付き散布図をプロットする	sns.jointplot(x='列名', y='列名', data=df)
実数は無限大かどうか	math.isinf(x)
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
漢字が文字列に使われているか	re.search('[\u4E00-\u9FD0]', 文字列)
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームの一部のカラムの平均	df[['列A', '列B']].mean()
ネイピア数を用いる	math.e
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
黒い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストの末尾に要素を追加する	リスト.append(要素)
線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
実数に浮動小数点数を加える	x + y
ヒストグラムをミディアムバイオレットレッド色として描画する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
デックの先頭に整数を追加する	両端キュー.appendleft(整数)
カラーバーをプロットする	plt.colorbar()
整数2がnより大きく、かつ、n3未満	整数 < 整数2 and 整数2 < n3
タイムスタンプをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
カテゴリ別でグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
指定された列のカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
option: 線の種類を点線に設定する	linestyle = 'dotted'
データフレームをグループ化し、標準偏差を求める	df.groupby('列A').std()
option: ダークオーキッドにフォントの色を設定する	color = 'darkorchid'
データフレームのカラムを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ある列の文字列が正規表現にマッチする行を選択する	df[df['列A'].str.match(正規表現)]
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームの選択したカラムの欠損値を最小値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
データシリーズの記述統計量	ds.describe()
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
ベクトルを元に全要素が0の配列	np.zeros_like(aArray)
1行から二つの文字列を読み込む	A, B = map(str, input().split())
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
オブジェクトは辞書かどうか	dict = int<nl>isinstance(obj, dict)
無限に数え上げる	itertools.count()
xについて数式の積分を算出する	sympy.integrate(数式, [|変数]x)
整数掛ける整数	整数 * 整数2
散布図に左三角印を使用する	plt.scatter(データ列x, データ列y, marker='<')
上三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
日付データをn日前にする	aDate - datetime.timedelta(days=n)
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
ヒストグラムを横に並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(文字列リスト)
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
データフレームの指定したカラムの値はNaNかどうか調べる	df['列A'].isna()
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
横棒グラフを淡い茶色色で描画する	plt.barh(データ列x, データ列y, color='tan')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
ファイルパスをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
整数の2進数表現	bin(整数)
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
カウンタから最頻出の項目の件数を求める	aCounter.most_common()[1]
numpyを使う	import numpy as np
データフレームの選択したカラムがどの程度、分散しているか見る	df[['列A', '列B']].var()
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
折れ線グラフの菱形マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
配列のスピアマンの順位相関係数	scipy.stats.spearmanr(配列, 配列2)
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの値をValueMapで一度に置き換える	df.replace(ValueMap)
文字列中に漢字が使われているか	re.search('[\u4E00-\u9FD0]', 文字列)
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
オブジェクトのプロパティの値を見る	getattr(obj, プロパティ名)
1からNまでの配列を作る	np.arange(1, N+1)
数式のyに別の数式を代入する	数式.subs(y, 数式2)
指定した列をキーにして破壊的に大きい順に表データを並べる	df.sort_values(by='列A', ascending=False, inplace=True)
BOM付きでファイルパスをオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
自然数最小公倍数を求める	math.lcm(n, n2)
ディープスカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームから列を三つ選択する	df[['列A', '列B', '列C']]
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
文字が片仮名か調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
データフレームを全部、丸める	df.round()
シルバー色としてヒストグラムを描画する	plt.hist(データ列, color='silver')
散布図でデータフレームの全列を可視化する	sns.pairplot(df)
多次元データを主成分分析で数値次元に削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
新しいヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: マーカーの色を淡い茶色にする	markerfacecolor = 'tan'
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームのあるカラムは何分か見る	df['列A'].dt.minute
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
異なる列をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
option: UTF8を用いる	encoding = 'utf-8'
小数点数の仮数	math.frexp(x)[0]
識別子が関数か	inspect.isfunction(識別子)
option: オールドレースを使う	color = 'oldlace'
表示可能な列数を変更する	pd.set_option('display.max_columns', n)
クラス分類の真陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
乱数の行列	np.random.random((行数, 列数))
カウンタをタプルとして更新する	aCounter.update(aDict)
文字列は全て識別子か判定する	文字列.isidentifier()
データフレームの指定したカラムの欠損値を最大値にセットする	df['列A'].fillna(df['列A'].max())
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
箱ひげ図を描画し、平均線を追加する	plt.boxplot(データ列, meanline=True)
配列のケンドールの相関係数を見る	scipy.stats.kendalltau(配列, 配列2)
データシリーズを千の位で丸めて、整数型にする	ds.round(-3).astype(int)
データ列の推移を青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームから重複ありでランダムに5行をサンプリングする	df.sample(5, replace=True)
ハニーデュー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
エクセルファイルファイルでデータフレームを保存する	df.to_excel('file.xlsx')
エラーなくリストの要素の位置を使う	リスト.index(要素) if 要素 in リスト else -1
散布図をポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.')
option: セパレータを改行にする	sep = '\n'
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
ヒートマップとしてデータフレームの相関行列を可視化する	sns.heatmap(df.corr())
セットのコピー	セット.copy()
ロバストな回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ファイルからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
指定された列で集計し、個数を求める	df.groupby('列A').count()
マップからキーで指定した項目をポップする	辞書.pop(キー)
データフレームをグループ化しある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
色付きの一点鎖線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ペールグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
数値∈セット	数 in セット
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
データフレームの一部の列の値を正規表現でまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
日付データが土曜日	aDate.weekday() == 5
データシリーズの欠損値をxで補う	ds.fillna(x)
整数引く整数	整数 - 整数2
データフレームの指定したカラムの欠損値を前の行の値に設定する	df['列A'].fillna(method='ffill')
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列の左側からタブを消す	文字列.lstrip('\t')
カラムの相乗平均を算出する	scipy.stats.gmean(df['列A'])
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
リストと数列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
辞書を浅くコピーする	辞書.copy()
1行から二つの文字列を取り出す	A, B = map(str, input().split())
散布図にバツ印を使用する	plt.scatter(データ列x, データ列y, marker='x')
文字列がセットのメンバーに含まれない	文字列 not in セット
ファイルをオープンして]追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
整数のGCD	math.gcd(n, n2)
昇順にデータフレームを二つの列によって並べて、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
実数がNaNかどうか確認する	math.isnan(x)
リストを配列にする	np.array(aList)
グラフの補助目盛を有効にする	plt.minorticks_on()
シアン化する	f'\033[36m{x}\033[0m'
辞書を空にする	辞書.clear()
ふたつの集合の差集合	セット.difference(セット2)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
option: オーキッド色を使用する	color = 'orchid'
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データシリーズを十の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
option: バツ印を使用する	marker = 'x'
ふたつのリストの差集合	list(set(リスト).difference(set(リスト2)))
文字列リストをsepを区切りにして一つの文字列にする	sep.join(文字列リスト)
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
折れ線グラフのポイントマーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
外れ値を除いた配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
グラフの目的をスライドに設定する	sns.set(context='talk')
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
データフレームの指定した列の名前一覧の列のみ取り出す	columns = ['列A', '列B']<nl>df[columns]
実数を実数で整数除算する	x // y
散布図を大バツマーカーで描画する	plt.scatter(データ列x, データ列y, marker='X')
散布図のダイアモンドマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
option: スチールブルーにフォントの色を指定する	color = 'steelblue'
色付きの点線を使って折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
JSONファイルを構文解析する	with open('file.json') as f:<nl><tab>data = json.load(f)
数式処理を使う	import sympy
option: 無視するフッタをnにセットする	skipfooter = n
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか確認する	文字列.find(部分文字列, 開始位置, 終了位置) == -1
配列のデータ型	aArray.dtype()
文字列の示すエンコーディングを用いてファイルをオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
option: 丸印を描画する	marker = 'o'
ファイルが存在するか調べる	os.path.exists(filepath)
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
新しいロジスティック回帰モデルを作成する	model = sklearn.linear_model.LogisticRegression()
option: イエローグリーン色を用いる	color = 'yellowgreen'
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
柱状グラフの範囲を設定する	plt.hist(データ列, range=(start, end))
グラフ描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in 文字列)
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
rgbの大バツマーカーを配列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
グラフの使途を画面に設定する	sns.set(context='notebook')
データシリーズが何日か知る	ds.dt.day
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
データフレームの中にある文字列と文字列の個数を数える	df.isin([value, value2]).sum()
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
日付データが水曜日	aDate.weekday() == 2
option: 青にフォントの色を変更する	color = 'blue'
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
リストとリストの散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図の左三角印を赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
変数について数式の積分を算出する	sympy.integrate(数式, 変数)
列を累加したイテラブル	itertools.accumulate(iterable)
グラフの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
deqのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(配列, 'norm')
左に両端キューの要素をローテーションする	両端キュー.rotate(-1)
t-SNEで文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
option: レベッカパープル色を使う	color = 'rebeccapurple'
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
option: オリベドラブ色を使用する	color = 'olivedrab'
ビン数nでデータ列をビン分割する	pd.cut(ds, n)
実数に実数を加える	x + y
数列からランダムn個に選んでリスト化する	random.choices(数列, k=n)
線グラフを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
長さの制限された双方向キューを配列から作る	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
折れ線グラフの色をダークシアグリーンにする	plt.plot(データ列x, データ列y, color='darkseagreen')
イテラブルから計数器を作る	collections.Counter(iterable)
散布図を赤い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームの指定したカラムのNaNを平均値で埋める	df['列A'].fillna(df['列A'].mean())
赤い四角マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
散布図の下三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: 線種を実線に設定する	linestyle = 'solid'
データフレームをValueMapで全部置換する	df.replace(ValueMap)
n進数文字列を整数に変換する	int(文字列, n)
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
イテラブルに列を続けたイテラブルを得る	itertools.chain(iterable, iterable2)
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
データフレームの中のNaNの合計を求める	df.isna().sum()
option: グラフの色を暗い赤にセットする	color = 'darkred'
配列とリストについて散布図を描画し、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
二つのリストから辞書を作る	dict(zip(リスト, リスト2))
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
赤にヒストグラムの色を変更する	plt.hist(データ列, color='red')
n個にデータフレームの中の列を分割する	pd.cut(df[col], n)
横棒グラフをディープスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
グラフを描く準備をする	import matplotlib.pyplot as plt
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
option: 紺碧色を使う	color = 'azure'
要素が全て初期値のベクトル	np.full(要素数, 初期値, dtype=np.int)
データフレームの全カラムの散らばりをグラフ化する	sns.pairplot(df)
ひとつもASCII文字が文字列中に含まれない	any(not c.isascii() for c in 文字列)
横棒グラフを描き、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
option: 青緑色を使う	color = 'turquoise'
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: ミスティローズを使う	color = 'mistyrose'
データフレームの選択した列の標本標準偏差	df[['列A', '列B']].std(ddof=1)
横棒グラフをアンティークホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
シードをnで初期化する	random.seed(n)
option: 配列のデータ型を指定する	np.int8 = np.int<nl>dtype = np.int8
整数が偶数かどうか確認する	整数 % 2 == 0
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
データフレームから10行サンプリングする	df.sample(10)
データシリーズのタイムゾーンを変更する	ds.tz_convert('Asia/Tokyo')
ミディアムシアグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データシリーズの中にいくつ日付データが存在するかカウントする	ds.isin([value]).sum()
グレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
セットの要素が別のセット2に含まれるかどうか調べる	セット.issubset(セット2)
テンプレートを辞書でフォーマットする	書式.format_map(辞書)
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
ファイルパスを書き込みモードで開いて]、fとする	f = open(filepath, mode='w')
折れ線グラフにクロス印を使う	plt.plot(データ列x, データ列y, marker='x')
日付時刻データが何秒か知る	aDatetime.second
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ランダムに100行をデータフレームから取り出す	df.sample(100)
列と列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
浮動小数点数のn乗して実数による余りを求める	pow(x, n, y)
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
白色でヒストグラムを描画する	plt.hist(データ列, color='white')
option: 色を青に指定する	color = 'blue'
未初期化のベクトル	np.empty(要素数, dtype=np.int)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
ヒストグラムをサンディーブラウン色を用いて描画する	plt.hist(データ列, color='sandybrown')
散布図をデピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='deeppink')
文字列が全て空白文字からなるか確認する	文字列.isspace()
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
リストとリストについての散布図にrgbの▽マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
tanを算出する	math.tan(x)
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
SJISでファイルを追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
散布図にrgbの星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
rgbの四角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームを関数によってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
タプルの要素を関数に適用した結果で並べる	sorted(タプル, key=func)
ダークサーモン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
配列からランダムn個に選んでリストにする	random.choices(配列, k=n)
カラーバーを横向きで設定する	plt.colorbar(orientation='horizontal')
コマンド引数で与えられたファイル名を一つずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
マップから項目名とその値をペアとして取り出す	辞書.items()
線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
文字列の順番をシャッフルする	''.join(random.sample(文字列, len(文字列)))
文字列が英字かどうか確認する	文字列.isalpha()
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
replにデータフレームの選択したカラムを一度に正規表現で変更する	df[['列A', '列B']].replace(pattern, repl, regex=True)
改行なしに文字列をプリントする	print(文字列, end='')
数式を変数の方程式として解く	sympy.solve(数式, 変数)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
最大値・最小値の範囲で一様な疑似乱数	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
ある列の値がx以上、y未満の行を取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
TSVファイルでデータフレームを保存する	df.to_csv('file.tsv', sep='\t')
ヒストグラムの色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
両端キューに整数を積む	両端キュー.append(整数)
白色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
セットを別のセットとの共通要素だけに更新する	セット.intersection_update(セット2)
散布図の右三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
下限指定をした配列の分散を算出する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームの中にある文字列と日付データの個数をカウントする	df.isin([value, value2]).sum()
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: シャルトリューズ色を用いる	color = 'chartreuse'
外れ値を除いたカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
主成分分析で多次元データを整数次元に削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
最初のカテゴリーを除外してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
一点鎖線に線の線種を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
本日の日数を使う	datetime.datetime.today().day
入力から2つの文字値を読む	A, B = map(str, input().split())
文字列がアルファベット	文字列.isalpha()
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
項がセットの要素	要素 in セット
配列の各要素を両端キューの末尾に追加する	両端キュー.extend(配列)
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
変数を改行なしにプリントする	print(変数名, end='')
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(配列, 'norm')
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
リストとデータ列についての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
データフレームの中に存在する文字列と文字列の合計を求める	df.isin([value, value2]).sum()
文字列中の文字を新しい文字へ置換する	文字列.replace(部分文字列, 置換後の文字列)
ある列の値ごとの平均値を計算する	df.groupby('列A').mean()
文字列をJSONフォーマットでファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
文字列がリストに含まれる	文字列 in リスト
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
黄色でxをプリントする	print(f'\033[33m{x}\033[0m')
文字列をn回繰り返す列	itertools.repeat(element, n)
データ列を円プロットにする	plt.pie(データ列, startangle=90)
ゴーストホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
データフレームをグループ列ごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの50パーセンタイル	df.median()
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
行列の逆行列	np.linalg.inv(aArray)
新しい線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
棒グラフをライトコーラル色を使って描画する	plt.bar(データ列x, データ列y, color='lightcoral')
イテラブルからランダム複数個に選んでリスト化する	random.choices(イテラブル, k=n)
option: プリントの終端に文字列を用いる	end = 文字列
リストを逆順にする	リスト[::-1]
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
ある列に重複があれば、削除する	df.drop_duplicates(subset='列A', inplace=True)
指定した列の母標準偏差	df['列A'].std(ddof=0)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
折れ線グラフの色をパールバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='palevioletred')
多次元データを多次元尺度構成法として項次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
整数の2進数文字列	bin(整数)[2:]
データフレームがどれだけ、正規分布から尖っているか見る	df.skew()
折れ線グラフに黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データシリーズのSkewnessを算出する	ds.skew()
キューから最初の文字列を取り除く	両端キュー.remove(文字列)
を半分にする	変数 /= 2
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
表データの行と列を入れ替える	df.T
option: エラーを無視するように変更する	errors = 'ignore'
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームの中に文字列と文字列が存在するかどうか調べる	df.isin([value, value2])
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
変数が0に近づく時の数式の極限値を求める	sympy.limit(数式, 変数, 0)
option: グラフの色をゴーストホワイトにセットする	color = 'ghostwhite'
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームのカテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列リストを連結する	''.join(文字列)
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データ列を対数変換する	np.log(データ列)
数列とイテラブルについての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オブジェクトの参照カウントを使う	sys.getrefcount(オブジェクト)
ベクトルを平坦にする	aArray.flatten()
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
プラットホームはLinux	sys.platform.startswith('linux')
データフレームの未入力値を平均値にする	df.fillna(df.mean())
変数xが無限大に近づく場合の数式の極限値を計算する	sympy.limit(数式, [|変数]x, oo)
ホワイトスモーク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
整数を両端キューの末尾に追加する	両端キュー.append(整数)
線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
リストからひとつランダムに選んでリストにする	random.choice(リスト)
データフレームの相関行列を描画する	sns.heatmap(df.corr())
文字コードに相当する文字	chr(文字コード)
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
みっつの条件がいずれか成り立つ	条件 or 条件2 or 条件3
青紫色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
辞書からカウンタを作る	collections.Counter(aDict)
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの選択したカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
データフレームに重複があるか調べる	df.duplicated()
シアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
コマンドの第一引数を調べる	sys.argv[1]
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
option: ライトグレー色を使用する	color = 'lightgrey'
文字列を部分文字列で区切って文字列リストに変換する	文字列.split(部分文字列)
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
K-S検定を行う	scipy.stats.kstest(df['列A'], 'norm')
option: ピンクを使う	color = 'pink'
指定したカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
option: 黄緑を使用する	color = 'chartreuse'
表を一度に小数点以下n桁で四捨五入する	df.round(n)
小数点数の双曲線余弦	math.cosh(x)
データフレームを二つのカラムによって降順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
リストをインデントを指定してJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
文字列の中のASCII限定としてパターンによる全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列を末尾から部分文字列で分割する	文字列.rsplit(部分文字列)
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
オブジェクトが非同期ジェネレータ関数かテストする	inspect.isasyncgenfunction(オブジェクト)
部分文字列を置き換える	文字列.replace(部分文字列, 置換後の文字列)
データフレームの欠損値をxで埋める	df.fillna(x)
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
指定したカラムの中にが存在するか	df['列A'].isin([value])
イテラブルを2回あわせたデカルト積	itertools.product(iterable, repeat=2)
nの無限なイテラブルを求める	itertools.repeat(n)
カラムのピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
option: 茶色を使用する	color = 'brown'
青紫色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
日付時刻データが火曜日	aDatetime.weekday() == 1
option: サーモン色を使う	color = 'salmon'
マップをコピーする	dict(辞書)
整数型のゼロ埋めした行列	np.zeros(要素数, dtype=np.int)
JSON文字列をデータに変換する	data = json.loads(文字列)
データフレームのあるカラムをリストとして取り出す	df['列A'].values.tolist()
カデットブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
リストをダミー変数にする	pd.get_dummies(リスト)
辞書をJSON文字列に変換する	json.dumps(辞書, ensure_ascii=False)
散布図の丸マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ミディアムオーキッド色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
ターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
option: クリムゾンを用いる	color = 'crimson'
折れ線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
ファイルを開いて]、読み込みストリームを使う	'r' = 'a'<nl>open(filepath, mode='r')
2つの数値を順にプリントする	print(数値, 数値)
リストとイテラブルについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
半透明の一点鎖線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
現在の分数を求める	datetime.date.today().minute
下位集合か	セット.issubset(セット2)
マップの項目名とその値を列挙する	辞書.items()
文字列をカンマで区切って文字列リストに変換する	文字列.split(',')
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
試しに何か動かしてみる	print('Hello World')
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
文字列から右側を取り除いた文字列	文字列.removesuffix(部分文字列)
データフレームの欠損値を直後の値で置換する	df.fillna(method='bfill')
数列とデータ列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの選択したカラムの中に日付データとがいくつ存在するか数える	df[['列A', '列B']].isin([value, value2]).sum()
データフレームの指定したカラムを百の位で丸める	df['列A'].round(-2)
ボックスチャートを用いてデータ列を図示する	plt.boxplot(データ列)
option: 先頭の列を行に設定する	index_col = 0
xをアンダーライン付きでプリントする	print(f'\033[4m{x}\033[0m')
option: グラフの色をコーラルに設定する	color = 'coral'
指定したカラムを千の位で丸める	df['列A'].round(-3)
黄色にヒストグラムの色をセットする	plt.hist(データ列, color='yellow')
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
プロットのy座標を対数目盛に変更する	plt.yscale('log')
リストとリストの散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
ふたつの整数の差	整数 - 整数2
文字列中にひとつでも英字が含まれる	any(c.isalpha() for c in 文字列)
数式の変数に別の数式を代入する	数式.subs(変数, 数式2)
スタックを全て取り除く	両端キュー.clear()
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
スタックをセットに変換する	set(両端キュー)
データフレームのカラムのピアソンの積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
リストの要素を文字列として、空白によってつなげる	' '.join(map(str, リスト))
deqのstart〜endの要素を使う	collections.deque(itertools.islice(deq, start, end))
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
散布図に左三角印を使う	plt.scatter(データ列x, データ列y, marker='<')
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in 文字列)
文字が指定した文字列に含まれる	文字 in 文字列
配列とリストの散布図をプロットして、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
実数の逆正弦	math.asin(x)
指定したカラムはどの程度、分散しているか見る	df['列A'].var()
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
データシリーズの記述統計量を求める	ds.describe()
プロットのグリッドを白くする	sns.set(style='whitegrid')
改行せず計算結果の出力を行う	print(式, end='')
折れ線グラフの三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
実数を小数点以下で丸める	round(x, n)
プロットの色をパステル調にする	sns.set(pallete='pastel')
貝殻色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
文字列を最後のコロンで二分し、後半を使う	文字列.rpartition(':')[-1]
に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
リストから長さの制限された両端キューを作成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
option: サドルブラウン色を使う	color = 'saddlebrown'
円プロットを円にする	plt.axis('equals')
列から行列を初期化する	np.array(iterable)
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
折れ線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
リストと数列についての散布図に短い説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
重複ありで5行をデータフレームからランダムにサンプリングする	df.sample(5, replace=True)
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
整数の八乗	整数 ** 8
option: フォントの色をパレットトルコイズに設定する	color = 'paleturquoise'
データフレームのあるカラムの記述統計量を求める	df['列A'].describe()
ふたつの集合の対称差を使う	セット.symmetric_difference(セット2)
リストを縦軸データ列をx座標として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
ベクトルのユニークな要素を求める	np.unique(aArray)
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
折れ線グラフにクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
データ列の折れ線グラフをダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ミディアムオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
整数が配列のどれかかどうか調べる	aArray = [0, 1, 2]<nl>整数 in aArray
整数の三乗を計算する	整数 ** 3
リストのイミュータブルな集合を見る	frozenset(リスト)
まとめてreplにデータフレームの値を正規表現patternで置換する	df.replace(pattern, repl, regex=True)
数を数で割って小数点以下を切り捨てる	x // y
因子分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
カウンタの全数	aCounter.total()
3つ並べてデータ列を度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームを２つの列によって昇順に並べ直し、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ベクトルの形状	aArray.shape
部分文字列がsubで始まるか確認する	文字列.startswith(部分文字列)
関数によって表データをグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
option: 色をグリーンに変更する	color = 'green'
リストを文字列として空白で連結する	' '.join(map(str, リスト))
option: 色をパレットトルコイズにする	color = 'paleturquoise'
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
ある列の未入力値を直前の値に設定する	df['列A'].fillna(method='ffill')
大量のデータが正規分布に従うかどうか調べる	scipy.stats.kstest(配列, 'norm')
直前の値でデータシリーズの未入力値を補完する	ds.fillna(method='ffill')
縦棒グラフを淡いピンク色色を用いて描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: フォントの色をパパイヤウィップに設定する	color = 'papayawhip'
8進数文字列をバイナリに変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
横棒グラフをダークグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='darkgreen')
文字列を部分文字列で区切り、、列挙する	文字列.split(部分文字列)
折れ線グラフの星印を赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
リストの先頭を取り除く	リスト[1:]
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
識別子がコルーチンか確認する	inspect.iscoroutine(識別子)
折れ線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
option: 色のアルファ値を設定する	alpha = 0.5
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
option: エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
option: グラフの色を黄色にする	color = 'yellow'
散布図を黒い星マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
全部正規表現でデータフレームの値を置き換える	df.replace(pattern, repl, regex=True)
空列	[]
ヒストグラムをダークスレートブルー色として描画する	plt.hist(データ列, color='darkslateblue')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームのn行目を除く	df.drop(n, axis=0, inplace=True)
データフレームの指定したカラムの空文字を欠損値に変換しドロップする	df['列A'].replace('', np.nan).dropna()
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
非数値データをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
文字列リストを一つにする	''.join(文字列)
option: 符号なし８ビット整数型を使用する	np.uint8 = np.int<nl>dtype = np.uint8
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
教師データで分類モデルを学習する	model.fit(説明変数, 目的変数)
論文にグラフを指定する	sns.set(context='paper')
折れ線グラフの▼印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
二変数の最小値を求める	min(x, y)
タプルの要素を小さい方から並べ直す	sorted(タプル, reverse=True)
文字列中の部分文字列の出現回数を数える	文字列.count(部分文字列)
データフレームの選択した列を10の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
データシリーズのNaNを最小値に設定する	ds.fillna(ds.min())
アークコサイン	x = 0.33<nl>math.acos(x)
要素がマップの値として含まれているかどうか調べる	element in 辞書.values()
方程式として数式の変数の解を求める	sympy.solve(数式, 変数)
文字列中にひとつでも非アルファベットが存在するか調べる	any(not c.isalpha() for c in 文字列)
リストとデータ列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
棒グラフをゲインズボロ色を使って描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ベージュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
データフレームを２つのカラムで昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
rgbのクロスマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
２次元リストをフラット化する	sum(リスト)
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
MSDとして項次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームをある列によって集計して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: 色をダーク・スラテグレーに変更する	color = 'darkslategrey'
キーが辞書上で定義済みか調べる	キー in 辞書
文字列を最初のカンマで二つに分け、、残りを見る	文字列.partition(',')[-1]
昨日の日付を見る	datetime.date.today() - datetime.timedelta(days=1)
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
xとyをコロンで区切って表示する	print(x, y, sep=':')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
数列と配列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
縦棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: グラフを破線に設定する	linestyle = 'dashed'
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
2を底とする対数を算出する	math.log2(x)
データシリーズの文字列をNaNにする	ds.replace(値, np.nan)
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
配列と数列の散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
辞書の浅いコピーを作る	辞書.copy()
ある列の値がxより大きく、yより小さい行を取り出す	df[(x < df['列A']) & (df['列A'] < y)]
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
k進対数	math.log(x, k)
主成分分析で要素次元に削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
x座標の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
データフレームの指定したカラムの中にいくつ文字列が存在するか数える	df['列A'].isin([value]).sum()
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
赤い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ひとつでも非アスキー文字が文字列中に含まれるか	any(not c.isascii() for c in 文字列)
ゼロ埋めした三二ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
印字できる文字を全部見る	string.printable
n個に配列を等間隔でビン分割する	pd.cut(aArray, n)
全ての句点文字	string.punctuation
折れ線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
ある列のカテゴリごとの合計	df.groupby('列A').sum()
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in 辞書.items()}
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
△印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームをある列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
散布図に赤い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
グラフの用途をスライドに設定する	sns.set(context='talk')
オブジェクトが関数	callable(obj)
実数の正弦	math.sin(x)
データフレームの下5行を抽出する	df.tail(5)
ゼロ埋めした行列	np.zeros(行数, 列数)
ヒストグラムをグリーン色を用いて描画する	plt.hist(データ列, color='green')
数式をyについてn階微分する	sympy.diff(数式, y, n)
分子と分母から有理数を準備する	fractions.Fraction(分子, 分母)
ホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
option: スラグレーを使う	color = 'slategrey'
赤い大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
y軸の目盛を対数に変更する	plt.yscale('log')
option: バイアスを計算しない	fit_intercept = False
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
日付データからn分、減らす	aDate - datetime.timedelta(minutes=n)
オブジェクトのクラス	type(obj)
黄色色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
棒グラフをダークオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorange')
カウンタのキーと回数を列挙する	aCounter.items()
両端キューから最初の要素を取り除く	両端キュー.remove(要素)
option: 分割記号を文字列にする	sep = s
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
折れ線グラフの色を濃いシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
キーが辞書に存在するかどうか調べる	キー not in 辞書
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
線グラフの色をクリムゾンに指定する	plt.plot(データ列x, データ列y, color='crimson')
数列からn値、サンプリングしてリストにする	random.sample(数列, k=n)
タイムスタンプデータは日付時刻データと同時か	aDatetime == aDatetime2
データシリーズを十の位で丸める	ds.round(-1)
逆順の両端キュー	reversed(両端キュー)
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
イテラブルと配列について散布図を描画し、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
日付時刻データが日付時刻データより遅いか調べる	aDatetime > aDatetime2
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
配列とデータ列についての散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
作画のカラーパレットを指定する	sns.set(pallete=パレット名)
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
option: グラフの色をマゼンタにする	color = 'magenta'
文字列中にひとつも数字が含まれないか調べる	any(not c.isdigit() for c in 文字列)
ファイルパスをオープンして]、バイナリストリームを求める	'rb' = 'a'<nl>open(filepath, mode='rb')
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
10行をランダムにデータフレームから重複ありでサンプリングする	df.sample(10, replace=True)
文字列を走査しパターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストについて散布図を描画し、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='gray')
指定した列の未入力値をxに設定する	df['列A'].fillna(x)
カデットブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
JSONフォーマットのバイト列を構文解析する	json.loads(バイト列.decode('unicode-escape'))
データフレームの中のNaNの数を数える	df.isna().sum()
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
項がセットのいずれか判定する	要素 in セット
文字列を最初のカンマで二つに分けて後半を見る	文字列.partition(',')[-1]
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
連続したベクトルの自動作成する	np.arange(開始値, 終了値, 等差)
標準入力から1行だけ読み込む	sys.stdin.readline()
折れ線グラフの色をダークスレートブルーに指定する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: インデックスを自動的な連番に設定する	index_col = None
辞書をインデントを指定してJSONにエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
日付時刻データの月数	aDatetime.month
データフレームをCSV形式で保存する	df.to_csv('file.tsv', sep='\t')
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
文字列中にひとつでも大文字があるかどうか	any(c.isupper() for c in 文字列)
データ列とリストについて散布図をプロットして菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
３数の最小値	min(x, y, z)
文字列中に小文字が含まれるかどうか調べる	any(c.islower() for c in 文字列)
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
ある列によってデータフレームを小さい順に並べる	df.sort_values(by='列A', ascending=True)
データフレームの指定した列の名前一覧の列を抽出する	columns = ['列A', '列B']<nl>df[columns]
やわらかい青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: ダークカーキに色を設定する	color = 'darkkhaki'
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
データフレームの行を範囲指定して選択する	df[start:end]
ヒストグラムをダークオリーブグリーン色を使って描画する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
列を分割数nでビン分割する	pd.cut(ds, n)
文字列がセットのメンバーか	文字列 in セット
文字列の左側から空白を取り除く	文字列.lstrip('\t')
縦棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
線グラフの色をコーンフラワーブルーにセットする	plt.plot(データ列x, データ列y, color='cornflowerblue')
リストのn番目に要素を挿入する	リスト.insert(n, 要素)
折れ線グラフの色をフクシアにセットする	plt.plot(データ列x, データ列y, color='fuchsia')
文字列は全て識別子か調べる	文字列.isidentifier()
横棒グラフを紺色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
イテラブルを更新不能なセットに変換する	frozenset(イテラブル)
黒い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
双方向キューの先頭にイテラブルの各要素を追加する	両端キュー.extendleft(イテラブル)
クラス分類の偽陰性をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
整数が-9以上、9以下か調べる	-9 <= 整数 <= 9
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
option: 線の幅を3.0ポイントに変更する	linewidth = 3.0
整数の二進数文字列を使う	bin(整数)[2:]
option: フォントの色をゴーストホワイトに変更する	color = 'ghostwhite'
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
変数名がコルーチンか調べる	inspect.iscoroutine(識別子)
複数の列でデータフレームを破壊的に降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ある列によってデータフレームをグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
option: グラフの色をシスルに設定する	color = 'thistle'
文字列中にひとつでも非英数字が含まれる	any(not c.isalnum() for c in 文字列)
option: 星印を使う	marker = '*'
ひとつでも小文字が文字列中に含まれる	any(c.islower() for c in 文字列)
未初期化の配列	np.empty(要素数, dtype=np.int)
ファイル名がTSVファイルか	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
option: フォントの色をスレートブルーに設定する	color = 'slateblue'
外れ値に強い線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
サンディーブラウン色を使ってヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
リストと数列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付データが水曜日か調べる	aDate.weekday() == 2
逆余弦を計算する	x = 0.33<nl>math.acos(x)
データシリーズがどの程度、正規分布から尖っているか見る	ds.skew()
ゴーストホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
濃い青色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
オブジェクトが関数か調べる	callable(obj)
部分文字列で末尾から文字列を分割する	文字列.rsplit(部分文字列)
リストの移り変わりを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムの色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
辞書から多重集合を作る	collections.Counter(aDict)
option: グラフの色をリネンにする	color = 'linen'
データフレームのポイントプロットを描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
欠損値も加えてデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], dummy_na=True)
カラーパレットを色差別なくする	sns.set(pallete='colorblind')
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
option: オリベドラブにグラフの色を変更する	color = 'olivedrab'
数字を全て使う	string.digits
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
浮動小数点数が有限か判定する	math.isfinite(x)
整数はタプルのひとつか	aTuple = [0, 1, 2]<nl>整数 in aTuple
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
両端キュー中の要素の位置	両端キュー.index(要素)
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
実数を千の位で丸める	round(x, -3)
リストの要素が最初に見つかる場所	リスト.index(要素)
文字列の末尾から空白を取り除く	文字列.rstrip()
データフレームを二つのカラムで並べて、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
半透明の破線を用いてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
浮動小数点数のハイパボリック・サイン	math.sinh(x)
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
文字列の両端から余分な空白を取り除く	文字列.strip()
既存のベクトルを元に全要素が1の行列	np.ones_like(aArray)
データをJSONフォーマットの文字列に変換する	json.dumps(データ, ensure_ascii=False)
文字列の大きさを使う	len(文字列)
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
コロンで文字列を区切って列挙する	文字列.split(':')
option: ライトスチールブルー色を用いる	color = 'lightsteelblue'
黒い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: スプリンググリーン色を使う	color = 'springgreen'
データフレームをあるカラムをキーにして大きい順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
ディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
数列のピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
散布図をパパイヤウィップ色として描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
リストの要素数だけ繰り返す	range(len(リスト))
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
リストとデータ列の散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフを赤い点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
を切り捨てながら整数分の一にする	変数 //= 整数
リストをJSON形式で出力に出力する	json.dump(リスト, ファイル出力, ensure_ascii=False)
xをシンボル化する	x = sympy.Symbol('x')
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームの相関行列を可視化する	sns.heatmap(df.corr())
タプルのn番目以降の部分を抽出する	タプル[n:]
イテラブルを回数してカウンタを更新する	aCounter.update(iterable)
文字列の左端から指定した文字を除く	文字列.lstrip(文字)
カウンタをイテラブルを用いて更新する	aCounter.update(iterable)
範囲を指定して部分文字列を文字列の後ろから探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
リストにシーケンスを続ける	itertools.chain(iterable, iterable2)
データフレームのカラムのユニークな要素数	df[col].nunique()
リストを昇順に並べる	sorted(リスト, reverse=False)
データフレームの選択した列の空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
折れ線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
文字列がリストのいずれかどうか調べる	文字列 in リスト
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
データフレームの一部のカラムの未入力値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
日付データにn日分加える	aDate + datetime.timedelta(days=n)
データフレームの数値をまとめて四捨五入する	df.round()
option: グラフの色をシーグリーンに指定する	color = 'seagreen'
縦横比を等しくする	plt.axis('equals')
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
n個の整数リスト	list(range(n))
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
ヒストグラムのプロットし、、正規化する	plt.hist(データ列, density=True)
表データの最後10行を抽出する	df.tail(10)
色付きの破線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ヒストグラムの色をミディアムパープルにセットする	plt.hist(データ列, color='mediumpurple')
多次元データをt分布型確率的近傍埋め込み法を用いて文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
散布図の△マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームの相関行列をスピアマン相関係数で算出する	df.corr(method='spearman')
散布図をシーグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='seagreen')
データフレームのあるカラムのNaNを最大値で置換する	df['列A'].fillna(df['列A'].max())
散布図の▼印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの一部の列の値をまとめてValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
数式を因数分解する	sympy.factor(数式)
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
破線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
ダイアモンド印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
データフレームをある列によってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
データフレームの選択したカラムのNaNを最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: フォントの色をネイビーに設定する	color = 'navy'
キューが空である	len(両端キュー) == 0
ファイルを書き込み用にBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームの選択した列の文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
option: フォレストグリーン色を使用する	color = 'forestgreen'
日付時刻データは何日か知る	aDatetime.day
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
複数の文字列を改行せずに表示する	print(文字列, 文字列, end='')
イテラブルと数列の散布図をプロットして、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
データフレームの選択したカラムの要約統計量	df[['列A', '列B']].describe()
三つの条件が何か成り立つ	条件 or 条件2 or 条件3
実数の指数	math.frexp(x)[1]
option: 事前に説明変数を正規化する	normalize = True
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
ルートの階層化マップ	collections.ChainMap()
線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
両端キューの左	両端キュー[0]
option: 丸マーカーを描画する	marker = 'o'
文字列に漢字が含まれる	re.search('[\u4E00-\u9FD0]', 文字列)
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
ダークグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
プロットをポスター用に変更する	sns.set(context='poster')
配列の逆行列	np.linalg.inv(aArray)
実数のn乗して浮動小数点数による余り	pow(x, n, y)
折れ線グラフの色を暗い赤に指定する	plt.plot(データ列x, データ列y, color='darkred')
タプルのn番目のの値	タプル[n]
暗い赤にヒストグラムの色をセットする	plt.hist(データ列, color='darkred')
yについて数式の積分を求める	sympy.integrate(数式, y)
option: ディムグレーを用いる	color = 'dimgrey'
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
分類モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
実数の正接の逆数	math.atan(x)
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
縦棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
ライトゴールドロディイエロー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
イテラブルを累加した列を得る	itertools.accumulate(iterable)
subで文字列の開始位置以降が始まるか	文字列.startswith(部分文字列, 開始位置)
ダークターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
データシリーズの欠損値を直後の値で埋める	ds.fillna(method='bfill')
現在が月曜日か調べる	datetime.datetime.today().weekday() == 0
表の列の種類	df.info()
線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
文字列中の部分文字列の出現回数をカウントする	文字列.count(部分文字列)
ファイルをオープンする]	open(filepath)
数列のスピアマンの順位相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
データフレームの複数のカラムをドロップしてみる	df.drop(['列A', '列B'], axis=1)
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
実数を浮動小数点数から減ずる	x - y
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
方程式として数式の変数の解を求める	sympy.solve(数式, [|変数]x)
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
yについて数式の積分を行う	sympy.integrate(数式, y)
リストとリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
コーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
配列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: ファイルに出力する	file = sys.open('file.txt', 'w')
データフレームから列を２つ選択する	df[['列A', '列B']]
両端キュー中の整数をカウントする	両端キュー.count(整数)
セットを別のセットとの差分だけにする	セット.difference_update(セット2)
xの小数点以下'4'桁まで出力する	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
グラフを論文用に指定する	sns.set(context='paper')
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
タイムスタンプデータが何時か知る	aDatetime.hour
折れ線グラフの色をシアンにセットする	plt.plot(データ列x, データ列y, color='cyan')
ファイルの拡張子付きのファイル名	os.path.basename(filepath)
文字列を区切り記号で区切って、列挙する	文字列.split(セパレータ)
文字列が英字か判定する	文字列.isalpha()
空行を出力する	print()
散布図をライトシアン色として描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
データフレームの中のカラムを等量でビン数nでビン分割する	pd.qcut(df[col], n)
インディアンレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: ミディアムパープルにフォントの色を指定する	color = 'mediumpurple'
データフレームの指定したカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフの色をサンディーブラウンにする	plt.plot(データ列x, データ列y, color='sandybrown')
マッピングの項目名の一覧	list(辞書.keys())
指定したカラムのカテゴリで集計し、個数を計算する	df.groupby('列A').count()
整数2がnより大きく、かつ、n3未満か調べる	整数 < 整数2 and 整数2 < n3
option: 改行コードを旧Macに変更する	newline = '\r'
最初の区切り記号で文字列を二つに分け、、前半を見る	文字列.partition(セパレータ)[0]
今日の日数	datetime.datetime.today().day
option: グラフの色をライムに指定する	color = 'lime'
xを太文字でプリントできる文字列にする	f'\033[1m{x}\033[0m'
辞書をインデント幅を指定してJSON文字列にする	json.dumps(辞書, ensure_ascii=False, indent=n)
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
黄色化する	f'\033[33m{x}\033[0m'
ファイル名がCSVファイル	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
リストの要素が最初に見つかる位置	リスト.index(要素)
線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
横棒グラフを黄緑色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
option: フォレストグリーン色を使う	color = 'forestgreen'
折れ線グラフの三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
列の文字列長を列として求める	ds.str.len()
ライトサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='lightsalmon')
プロットの描画で暗く色を使う	sns.set(pallete='dark')
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
データ列をインポートする	import pandas as pd
オブジェクトが非同期ジェネレータ関数か	inspect.isasyncgenfunction(オブジェクト)
線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
オブジェクトが論理値か調べる	bool = int<nl>isinstance(obj, bool)
xを青色でプリントする	print(f'\033[34m{x}\033[0m')
レモンシフォン色としてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
データフレームをグループ化し、それぞれの平均値を求める	df.groupby('列A').mean()
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
イテラブルと配列についての散布図に文字列という簡単な説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
シアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
自然数個からk個取り出したときの順列の総数を求める	math.perm(n, k)
データフレームがどの程度正規分布から歪んでいるか見る	df.kurt()
箱ひげ図で数列を可視化する	plt.boxplot(データ列)
整数の八分の1	整数 / 8
リストを縦軸リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
文字列が別の文字列に含まれるか調べる	文字列 in 別の文字列
文字列中にひとつでもアルファベットがあるか判定する	any(c.isalpha() for c in 文字列)
option: ダークマゼンタ色を使用する	color = 'darkmagenta'
文字コードに対応する文字	chr(文字コード)
セットが空でないか確認する	len(セット) != 0
ヒストグラムを貝殻色を用いて描画する	plt.hist(データ列, color='seashell')
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
option: ダークゴールデンロッドに色を設定する	color = 'darkgoldenrod'
両端キュー中の整数の位置を見る	両端キュー.index(整数)
option: ヘッダを連番に設定する	header = None
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
データフレームの列名を置き換える	df.columns = columns
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
xを緑色でプリントする	print(f'\033[32m{x}\033[0m')
２つの文字列は等しくないか調べる	文字列 != 文字列2
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: フォントの色を赤に設定する	color = 'red'
８ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int8)
リストの要素を昇順に並べる	sorted(リスト, reverse=True)
データシリーズの未入力値を直前の値に指定する	ds.fillna(method='ffill')
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
データシリーズを100の位で丸めて、整数型にする	ds.round(-2).astype(int)
ヒストグラムをミディアムスレートブルー色を使って描画する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフを赤い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
等間隔で配列をn個にビン分割する	pd.cut(aArray, n)
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データ列の折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
ある列の統計量	df['列A'].describe()
昇順にデータフレームをある列で並べ、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
四分位数ごとにデータフレームの中のカラムを分割する	pd.qcut(df[col], 4)
ピンク色としてヒストグラムを描画する	plt.hist(データ列, color='pink')
切片なしの単回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
黄色にする	f'\033[33m{x}\033[0m'
列をビン数nとして分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
散布図を赤い星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ビン数nを用いてリストをビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^')
option: ペールグリーンに色を指定する	color = 'palegreen'
データフレームの列の各データが何回出現するか調べる	df[col].value_counts()
ロバストな線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
辞書のキーに対応した値を参照する	辞書[キー]
整数のn乗	整数 ** n
rgbのバツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をミッドナイトブルーに変更する	color = 'midnightblue'
option: グラフの色を耐火レンガに指定する	color = 'firebrick'
線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
xを白色化する	f'\033[37m{x}\033[0m'
ランダムな整数のリストを求める	random.sample(range(100), 10)
クリムゾン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
小数点数の逆正接を求める	math.atan(x)
データを最大値を使って正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
サイコロを振る	random.randint(1, 6)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
データフレームの選択したカラムの統計量を見る	df[['列A', '列B']].describe()
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
データ列の四分位を可視化する	plt.boxplot(データ列)
表から重複ありでランダムに5行をサンプリングする	df.sample(5, replace=True)
データフレームのあるカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
option: マゼンタ色を使用する	color = 'magenta'
インデントを指定して辞書をJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
実数を切り下げる	math.floor(x)
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
ヒストグラムの色を濃い青にセットする	plt.hist(データ列, color='darkblue')
セット＼セット2	セット.difference(セット2)
文字列に指定した文字がいくつあるか調べる	文字列.count(文字)
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
バイナリ書き込みできるようにファイルを開く]	'wb' = 'a'<nl>open(filepath, mode='wb')
ベージュ色としてヒストグラムを描画する	plt.hist(データ列, color='beige')
配列のスピアマンの順位相関係数を計算する	scipy.stats.spearmanr(配列, 配列2)
データフレームを百の位で丸める	df.round(-2)
カラムが正規分布か仮説検定する	scipy.stats.shapiro(df['列A'])
配列の要素を	''.join(map(str, 配列))
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
リストとリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの色をスカイブルーに指定する	plt.plot(データ列x, データ列y, color='skyblue')
文字列を最初のコロンを使って二分する	文字列.partition(':')
option: シルバー色を用いる	color = 'silver'
アンティークホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
サイコロと同じ乱数	random.randint(1, 6)
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームの中に含まれる文字列と文字列の個数を数える	df.isin([value, value2]).sum()
カラーバーを横向きにプロットする	plt.colorbar(orientation='horizontal')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ヒストグラムをコーンフラワーブルー色を使って描画する	plt.hist(データ列, color='cornflowerblue')
ファイルのファイル名を見る	os.path.basename(filepath)
option: フォントの色をスチールブルーにセットする	color = 'steelblue'
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データフレームの指定したカラムの分位数	df['列A'].quantile(パーセント/100)
option: 暗い赤にグラフの色を設定する	color = 'darkred'
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
データフレームの指定した列を1000の位で丸める	df['列A'].round(-3)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: どの列もインデックスに設定しない	index_col = None
散布図のバツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
赤いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
折れ線グラフを深紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
n個の集まりからk個選ぶ方法を計算する	math.comb(n, k)
としてデータフレームの相関行列を求める	df.corr(method='kendall')
ロードされたモジュールの一覧を調べる	sys.modules
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
両端キュー中の文字列のインデックスを使う	両端キュー.index(文字列)
option: フォントの色をミッドナイトブルーに指定する	color = 'midnightblue'
赤い▼マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
双方向キューに整数をenqueueする	両端キュー.append(整数)
本日が何年か知る	datetime.datetime.today().year
subで文字列の開始位置以降が始まる	文字列.startswith(部分文字列, 開始位置)
option: フォントの色をスカイブルーに設定する	color = 'skyblue'
縦棒グラフを描画して、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
配列を2次元1列に変形する	aArray.reshape(-1, 1)
数列とリストについて散布図を描いてマーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
横軸だけグリッド線	plt.grid(axis='x')
折れ線グラフの色をアイボリーにする	plt.plot(データ列x, データ列y, color='ivory')
既存の配列をベースに全要素が1の配列	np.ones_like(aArray)
数のn乗の浮動小数点数剰余	pow(x, n, y)
実数を複素数に変換する	complex(x)
ヒストグラムをアリスブルー色を用いて描画する	plt.hist(データ列, color='aliceblue')
数値がセットのメンバーに含まれる	数 in セット
スカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
ミディアムオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
数式のyに数値を代入する	数式.subs(y, 数値)
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
プロットの色を淡くする	sns.set(pallete='muted')
ライトスチールブルーにヒストグラムの色を変更する	plt.hist(データ列, color='lightsteelblue')
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
分子割る分母	fractions.Fraction(分子, 分母)
option: 色をペルーに設定する	color = 'peru'
option: シルバー色を使う	color = 'silver'
データフレームが正規分布からどの程度尖っているか見る	df.skew()
小数点数が有限かどうか調べる	math.isfinite(x)
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データ列を中央値で分割する	pd.qcut(ds, 2)
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
列を周期的に繰り返す	itertools.cycle(iterable)
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
オレンジレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: 文字コードを文字列の示すエンコーディングに設定する	encoding = s
ミディアムスプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
文字列を空白を用いて区切る	文字列.split()
option: ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
ライトコーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
y軸の目盛りの値を変更する	plt.yticks(目盛りの値リスト)
カンマで右から文字列を区切る	文字列.rsplit(',')
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
多次元データをt-SNEで要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
キーが辞書上で定義されているかどうか	キー in 辞書
カテゴリでグループ化して、データフレームをにバイオリン図を用いてプロットする	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データシリーズの値を正規表現patternで一度にreplに置き換える	ds.replace(pattern, repl, regex=True)
データシリーズを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
キューの中に整数は含まれてるか調べる	整数 in 両端キュー
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
文字列の左端から改行を除去する	文字列.lstrip('\n')
辞書に項目名があるか調べる	キー not in 辞書
リストを文字列として空白によってつなげる	' '.join(map(str, リスト))
黒い三角マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
散布図の印を青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
カウンタのktopを列挙する	aCounter.most_common(k)
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
文字列を最後の区切り文字で二分して、残りを見る	文字列.rpartition(セパレータ)[-1]
文字列をカンマを使って二分する	文字列.partition(',')
折れ線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
多次元データを主成分分析で整数次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
イテラブルからn個ランダムに選んでリスト化する	random.choices(イテラブル, k=n)
有理数モジュールをインポートする	import fractions
あるカラムのカテゴリで集計しそれぞれの最大値を求める	df.groupby('列A').max()
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
データシリーズの値がNaNかどうか	ds.isna()
ある列のカテゴリ毎の最小値	df.groupby('列A').min()
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
option: バツ印を描画する	marker = 'x'
散布図を小麦色色を使って描画する	plt.scatter(データ列x, データ列y, color='wheat')
スラッシュで区切ってxとyを出力する	print(x, y, sep='/')
option: ビスクにグラフの色を設定する	color = 'bisque'
データシリーズの空文字をドロップする	ds.replace('', np.nan).dropna()
リストとイテラブルについて散布図を描き、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
option: バイアスを算出しない	fit_intercept = False
アクア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図にクロスマーカーを使用する	plt.scatter(データ列x, データ列y, marker='x')
option: 色をグレーに設定する	color = 'gray'
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
赤いポイントマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
色付きの点線としてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
カラムの中にいくつNaNが存在するか数える	df['列A'].isna().sum()
ガウス過程分類器を用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
グラフのデザインを綺麗にする	import seaborn as sns
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームを２つの列の値によってグループ化し、記述統計量を計算する	df.groupby(['列A', '列B']).describe()
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
両端キューの最後に要素を入れる	両端キュー.append(要素)
辞書をソートしてJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
柱状図を描画し、、ビンの数を設定する	plt.hist(データ列, bins=区関数)
データ列の偏りを平方根変換する	np.sqrt(データ列)
新しいロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
カウンタの最頻出の項目を計算する	aCounter.most_common()[0]
縦棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
黄色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
n階微分を求める	sympy.diff(数式, [|変数]x, n)
自然数の並べ方の総数	math.perm(n)
option: グラフの色を貝殻に変更する	color = 'seashell'
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
option: グラフの色をビスクに設定する	color = 'bisque'
浮動小数点数を小数点以下で丸める	round(x, n)
ロイヤルブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
数の複素数	complex(x)
option: フォントの色をトマトに設定する	color = 'tomato'
文字列が空白文字かどうか確認する	文字列.isspace()
アンサンブル学習として回帰分析をする	sklearn.ensemble.VotingRegressor()
暗く色テーマをグラフの描画で使う	sns.set(pallete='dark')
散布図を星マーカーで描く	plt.plot(データ列x, データ列y, marker='*')
実数のアークタンジェントを計算する	math.atan(x)
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームのカラムのモードを算出する	mode, count = scipy.stats.mode(df['列A'])
タプルの要素が最初に見つかる位置を探す	タプル.index(要素)
変数名がコード	inspect.iscode(識別子)
浮動小数点数を実数で割った剰余を計算する	math.remainder(x, x2)
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフに青い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
両端キューの中に文字列が含まれてるか調べる	文字列 in 両端キュー
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
実数のハイパボリック・サインの逆数	math.asinh(x)
空白で文字列を後ろから分割する	文字列.rsplit()
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
セットの浅いコピー	セット.copy()
ホワイトスモーク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
要素がセットのいずれでもないどうか	要素 not in セット
実数の三乗を算出する	x ** 3
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
リストの値を関数に適用した結果でソートする	sorted(リスト, key=func)
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
折れ線グラフをレモンシフォン色を用いて描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
平方根を計算する	math.sqrt(x)
計算結果の出力を改行なしに行う	print(式, end='')
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
オブジェクトがn回繰り返すイテラブル	itertools.repeat(element, n)
option: パールバイオレットレッド色を使う	color = 'palevioletred'
rgbの▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列を部分文字列で二分して、残りを使う	文字列.partition(部分文字列)[-1]
文字列をカンマで区切って、列挙する	文字列.split(',')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ヒストグラムをプラム色を使って描画する	plt.hist(データ列, color='plum')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
ライトシアンにヒストグラムの色を指定する	plt.hist(データ列, color='lightcyan')
横棒グラフをオレンジレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='orangered')
列をn個に分割する	pd.cut(ds, n)
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
データフレームの選択したカラムの中央値	df[['列A', '列B']].median()
二つの文字列を順にプリントする	print(文字列, 文字列)
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
２つの文字列をプリントする	print(文字列, 文字列)
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
option: スラッシュを区切りで使う	sep = '/'
xをアンダーライン付き化する	f'\033[4m{x}\033[0m'
yについて数式のインテグラルを行う	sympy.integrate(数式, y)
数字を全部求める	string.digits
ライトスレイグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightslategray')
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
貝殻にヒストグラムの色を指定する	plt.hist(データ列, color='seashell')
option: アイボリーを用いる	color = 'ivory'
データシリーズのタイムゾーンをセットする	ds.tz_convert('Asia/Tokyo')
辞書の項目名を要素に設定する	辞書[キー] = element
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
データフレームの一部のカラムの中に文字列とがあるか調べる	df[['列A', '列B']].isin([value, value2])
指定した列を万の位で丸める	df['列A'].round(-4)
折れ線グラフをコーンズシルク色を用いて描画する	plt.plot(データ列x, データ列y, color='cornsilk')
アイボリー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
データフレームの選択した列を十の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
辞書の項目名とその値を列挙する	辞書.items()
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
横棒プロットをプロットして、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
読み込みできるようにファイルパスをオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
文字列を最後の部分文字列で二つに分けて、残りを使う	文字列.rpartition(部分文字列)[-1]
文字列を最後の区切り記号で分けた時の後半の文字列	文字列.rpartition(セパレータ)[-1]
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームの一部の列を十の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
ふたつのカラムでグループ化し、標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
オブジェクトはクラスか調べる	inspect.isclass(オブジェクト)
直前の値でデータフレームのNaNを埋める	df.fillna(method='ffill')
散布図に右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
折れ線グラフをドジャーブルー色として描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
折れ線グラフに赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
option: 珊瑚を使う	color = 'coral'
整数の八進数リテラル	oct(整数)
option: シエナに色を変更する	color = 'sienna'
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
全要素を０で初期化した三２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
文字列中にひとつも大文字が含まれないか調べる	any(not c.isupper() for c in 文字列)
折れ線グラフのマーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
タプルをnから順番付けする	enumerate(タプル, start=n)
リストからn値、サンプリングしてリストにする	random.sample(リスト, k=n)
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategray')
要素がリストに含まれないか	要素 not in リスト
エクセルのシートをデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
シーケンスをセットに追加する	セット.update(リスト)
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
横棒グラフをダークマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データフレームの指定したカラムの中に含まれる文字列の合計をカウントする	df['列A'].isin([value]).sum()
option: 平均を追記する	showmeans = False
xを太字にする	f'\033[1m{x}\033[0m'
棒グラフをミディアムブルー色を使って描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ある列のカテゴリごとの個数	df.groupby('列A').count()
赤い破線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図の色をホワイトにする	plt.scatter(データ列x, データ列y, color='white')
行列は何のデータ型か調べる	aArray.dtype()
データフレームをグループ化し、それぞれの標準偏差を算出する	df.groupby('列A').std()
実測値をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ディレクトリをモジュールの検索パスに追加する	sys.path.append(ディレクトリ名)
列の各要素に対して、predicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
文字列の左側から改行を取り除く	文字列.lstrip('\n')
ダークシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
両端キューが空かどうか確認する	len(両端キュー) == 0
横棒グラフをライムグリーン色として描画する	plt.barh(データ列x, データ列y, color='limegreen')
データフレームを各列毎にグループ化して、文字列というグループの大きさを計算する	df.groupby(column).size()[s]
イテラブルを集合に変換する	set(イテラブル)
データフレームを関数毎にグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
折れ線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
散布図の色をダークレッドにする	plt.scatter(データ列x, データ列y, color='darkred')
空セット	set()
文字列から部分文字列を全て除く	文字列.replace(部分文字列, '')
option: NaNを無視する	nan_policy = 'omit'
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
スペースを使う	' '
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
指定したカラムの標準偏差を計算する	df['列A'].std()
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
線グラフの色をビスクに変更する	plt.plot(データ列x, データ列y, color='bisque')
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
多次元データをSVDで文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
配列の行ごとの平均値	np.mean(aArray, axis=1)
文字列をバイト列に変換する	文字列.encode(encoding='utf-8', errors='strict')
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
ラインを色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
リストをJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False)
折れ線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
ラインを赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームの列の文字列長を列として見る	df[col].str.len()
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
データフレームの一部の列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
変数の値を出力する	print(変数名)
説明変数と目的変数としてモデルを学習する	model.fit(説明変数, 目的変数)
トマト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
パウダーブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: データ型として整数型を使用する	np.int = np.int<nl>dtype = np.int
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
２つの浮動小数点数が十分に近いかどうか確認する	math.isclose(x, x2)
整数の四乗を計算する	整数 ** 4
実数を３乗する	x ** 3
ファイルからnバイト読み込む	f.read(n)
データフレームの欠損値が含まれる箇所に	df.style.highlight_null()
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
文字列の右端から空白を除く	文字列.rstrip('\t')
xを太字でプリントできる文字列に変換する	f'\033[1m{x}\033[0m'
文字列をコロンで分割して、文字列リストにする	文字列.split(':')
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
項目名がマッピング上でまだ定義されていないか調べる	キー not in 辞書
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
ミスティローズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
縦棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
半透明の一点鎖線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
淡いピンク色にヒストグラムの色を変更する	plt.hist(データ列, color='lightpink')
ロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
クラス分類の予測精度をヒートマップとして調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
実数の指数を求める	math.frexp(x)[1]
option: 印を丸に指定する	marker = 'o'
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
最後に追加した値をマッピングからポップする	辞書.popitem()
option: 大バツ印を描画する	marker = 'X'
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
オブジェクトがn回繰り返す列を求める	itertools.repeat(element, n)
クロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
末尾の列を除いたデータフレーム	df[df.columns[:-1]]
option: タブを分割記号で用いる	sep = '\t'
NaNがある行を破壊的にドロップする	df.dropna(inplace=True)
辞書のコピーを新規生成する	辞書.copy()
ValueMapでデータシリーズの値を全部置き換える	ds.replace(ValueMap)
チップのデータセットからデータフレームを読み込む	df = sns.load_dataset('tips')
最大値・最小値として乱数を求める	random.randint(最小値, 最大値)
整数が-9以上9以下か調べる	-9 <= 整数 <= 9
２つの列によってデータフレームをまとめたグループ	df.groupby(['列A', '列B'])
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
整数の各桁の総和	sum(map(int, str(整数)))
文字列中のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
文字列を部分文字列で分割して、文字列リストにする	文字列.split(部分文字列)
ライトグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
データフレームの行の名前をまとめて付け直す	df.rename(index={x: y})
バイナリモードとしてファイルパスを開いて]fとする	f = open(filepath, mode='rb')
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
折れ線グラフに青い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ファイルが存在しないか	not os.path.exists(filepath)
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
散布図を星マーカーを使い、描画する	plt.scatter(データ列x, データ列y, marker='*')
データフレームのカラムを10の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
データ列をボックスチャートを用いて描画する	plt.boxplot(データ列)
ファイルから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの列の各データが何回出現するか確認する	df[col].value_counts()
オブジェクトが属性を持つかどうか確認する	hasattr(obj, プロパティ名)
指定した列のカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
二つの配列をボックスチャートにする	plt.boxplot([データ列, データ列])
分類結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
option: グラフの色をスラグレーに設定する	color = 'slategray'
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
文字列中に数字が含まれないか判定する	any(not c.isdigit() for c in 文字列)
option: 不偏分散を用いる	ddof = 1
rgbの四角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームを表示するとき折り返しを無効に指定する	pd.set_option('expand_frame_repr', False)
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
xの小数点以下'2'桁までをプリントする	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
データフレームの一部のカラムの空文字をNaNに変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
文字列の左端から文字を取り除く	文字列.lstrip(文字)
ベクトルから重複を除いたベクトルを初期化する	np.unique(aArray)
データフレームの指定した列を10の位で四捨五入する	df['列A'].round(-1)
1行から２つの文字列値を取り出す	A, B = map(str, input().split())
文字列内に日本語が存在するかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
データフレームを合体させる	# concat<nl>pd.concat([df, df2])
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
上限指定をした配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
option: ピーチパフを使用する	color = 'peachpuff'
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームの分位数を求める	df.quantile(パーセント/100)
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
データフレームの未入力値をxに設定する	df.fillna(x)
データフレームをCSV形式として出力する	df.to_csv('file.tsv', sep='\t')
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
ある列の値で集計しそれぞれの個数を計算する	df.groupby('列A').count()
S-W検定を行う	scipy.stats.shapiro(配列)
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
数列のピアソンの相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
実数を万の位で四捨五入する	round(x, -4)
ユニークな値を要素とするベクトル	np.unique(aArray)
データフレームの中にいくつ文字列があるかカウントする	df.isin([value]).sum()
3自然数の最小公倍数	math.lcm(n, n2, n3)
カウンタ同士でユニオン	aCounter | aCounter2
数列を更新不能なセットにする	frozenset(数列)
option: フクシアを用いる	color = 'fuchsia'
文字列の開始位置から先に部分文字列が存在しないか	文字列.find(部分文字列, 開始位置) == -1
数式をyについてn階偏微分する	sympy.diff(数式, y, n)
キーがマップにないとき要素を追加する	辞書.setdefault(キー, element)
TSVからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
文字を新しい文字に置換する	文字列.replace(部分文字列, 置換後の文字列)
丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
オブジェクトがビルトインか確認する	inspect.isbuiltin(オブジェクト)
ローングリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lawngreen')
リストとリストについて散布図を描画し、、マーカーを下三角にセットする	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの四角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
整数がnで割り切れるか調べる	整数 % n == 0
データフレームから同じ内容のデータをドロップする	df.drop_duplicates(inplace=True)
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
データフレームの中に日付データとがいくつあるかカウントする	df.isin([value, value2]).sum()
小数点数のサインの逆数	math.asin(x)
リストの先頭を除く	リスト[1:]
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
ファイルをBOM付きを用いてオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
ふたつの集合のいずれか一方だけの集合を求める	セット.symmetric_difference(セット2)
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
2つの変数を順にプリントする	print(変数名, 変数名)
散布図をダークシアグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
分割数nで配列を分割する	pd.cut(aArray, n)
ファイルを読み込みモードとしてオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
データフレームのstart行目からend行目まで抽出する	df[start:end]
整数が奇数か調べる	整数 % 2 == 1
実数が正の数か調べる	x > 0
文字列中に非英数字が存在するか	any(not c.isalnum() for c in 文字列)
データフレームの一部のカラムの欠損値をxで埋める	df[['列A', '列B']].fillna(x)
等量で配列をビン数nでビン分割する	pd.qcut(aArray, n)
数のn乗の実数剰余を求める	pow(x, n, y)
データフレームの指定した列の欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
ミディアムパープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
文字が指定された文字列に含まれないか調べる	文字 not in 文字列
データフレームの指定したカラムの75パーセンタイル	df['列A'].quantile(0.75)
配列と配列について散布図を描画し、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
option: 色をダークサーモンに変更する	color = 'darksalmon'
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
日付時刻データが日付時刻データより先	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
横棒グラフをスラグレー色を使って描画する	plt.barh(データ列x, データ列y, color='slategrey')
データフレームのカラム間のスピアマンの相関係数を使う	scipy.stats.spearmanr(df['列A'], df['列B'])
option: グラフの色をダークグレーに変更する	color = 'darkgray'
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
整数の十六進数リテラル	hex(整数)
エクセルファイルから複数のシートを読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
パパイヤウィップ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ミディアムブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームの欠損値をその最小値で補う	df.fillna(df.min())
option: グラフの色をライトシアンに指定する	color = 'lightcyan'
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
ヒストグラムをネイビー色を用いて描画する	plt.hist(データ列, color='navy')
option: グラフの色をオールドレースに指定する	color = 'oldlace'
セットからエラーなく要素を取り除く	セット.discard(要素)
暗い赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
空のリッジ回帰モデルを作る	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
数値∉セット	数 not in セット
データフレームのあるカラムがどの程度、分散しているか見る	df['列A'].var()
イエローグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
実数の双曲線正弦を求める	math.sinh(x)
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
表データのあるカラムの曜日の名前	df['列A'].dt.weekday_name
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
縦棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
長さの制限された両端キューをリストから作る	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
インディアンレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
半透明の実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
xが真か調べる	bool(x)
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームのカラムを千の位で丸める	df['列A'].round(-3)
整数∈セット	数 in セット
データフレームの一部のカラムを千の位で四捨五入する	df[['列A', '列B']].round(-3)
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
数列とイテラブルについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの選択したカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
option: 濃いシアンにグラフの色を指定する	color = 'darkcyan'
横棒グラフを貝殻色を用いて描画する	plt.barh(データ列x, データ列y, color='seashell')
データフレームの複数の列を並べて箱髭図として描画する	plt.boxplot([df['カラム'], df['カラム']])
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
option: クリムゾン色を使う	color = 'crimson'
ディムグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
ヒストグラムをライトグレー色を用いて描画する	plt.hist(データ列, color='lightgrey')
いつまでもnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
サインを求める	math.sin(x)
横棒グラフを貝殻色を使って描画する	plt.barh(データ列x, データ列y, color='seashell')
平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
データシリーズの欠損値を中央値で埋める	ds.fillna(ds.median())
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
小数点数の整数部	math.modf(x)[1]
小数点数の小数部を求める	math.modf(x)[0]
整数の4分の1	整数 / 4
ダークゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: フォントの色をオリベドラブに設定する	color = 'olivedrab'
option: 文字コードを文字コードtextに設定する	encoding = text
option: ライトグリーン色を用いる	color = 'lightseagreen'
データフレームをエクセルファイルで出力する	df.to_excel('file.xlsx')
ライトブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
折れ線グラフをダークレッド色として描画する	plt.plot(データ列x, データ列y, color='darkred')
３つのデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
ミディアムブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームから列を1つだけ選択する	df[['列A']]
データフレームを関数の値によってグループ化し、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データフレームからランダムにn行を重複を認めてサンプリングする	df.sample(n, replace=True)
実数が有限か判定する	math.isfinite(x)
逆正接	math.atan(x)
散布図に赤い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
黒い星マーカーを配列とデータ列の散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='k')
既存のファイルを追加できるようにEUCで開く]	open(filepath, mode='a', encoding='euc_jp')
浮動小数点数で実数を整数除算する	x // y
オブジェクトがフィールドを持つ	hasattr(obj, プロパティ名)
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
散布図をミディアムパープル色として描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
折れ線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
スタック中の文字列のインデックスを使う	両端キュー.index(文字列)
option: 書き込みモードを使う	mode = 'w'
リストの相関を可視化する	plt.scatter(データ列x, データ列y)
列の各データが何回出現するか見る	df[col].value_counts()
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
データフレームの先頭100行	df.head(100)
辞書にキーがあるとき、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
yが無限大に近づくとき、数式の極限値を求める	sympy.limit(数式, y, oo)
二つのセットが交わりを持たないかどうか調べる	セット.isdisjoint(セット2)
データシリーズの未入力値をxにセットする	ds.fillna(x)
整数をセットから取り除く	セット.remove(数)
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
列を分割数nを使ってビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
option: 丸印を使う	marker = 'o'
データ列とリストの散布図を描画して、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
データフレームをある列によって降順に破壊的に並べる	df.sort_values(by='列A', ascending=False, inplace=True)
リストとイテラブルの散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
データ列の移り変わりを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
文字列の先頭がsubか調べる	文字列.startswith(部分文字列)
文字列の両端から文字を除く	文字列.strip(文字)
整数の十六進数文字列	hex(整数)[2:]
線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
散布図をオリベドラブ色として描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
縦方向に二つのデータフレームを結合する	pd.concat([df, df2], axis=0)
オリーブ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
ふたつの集合の積集合	セット.intersection(セット2)
表データのあるカラムが何月か知る	df['列A'].dt.month
option: マーカーを四角に指定する	marker = 's'
数式をxの方程式として解く	sympy.solve(数式, [|変数]x)
にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
ファイルをオープンして]、書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
パターンにマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
ファイルパスを文字列の示す文字コードで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
折れ線グラフのバツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
空の計数器を新規生成する	collections.Counter()
リストとリストについて散布図をプロットして、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
行列を2次元1列に変形する	aArray.reshape(-1, 1)
文字列の開始位置以降がsubで開始するか	文字列.startswith(部分文字列, 開始位置)
xの小数点以下'4'桁までプリントする	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
分数をインポートする	import fractions
タプルのn番目のの要素を使う	タプル[n]
option: グラフの色をフローラルホワイトに変更する	color = 'floralwhite'
クラス分類の予測精度をヒートマップとして確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ある列の値がxより大きく、yより小さい行を選択する	df[(x < df['列A']) & (df['列A'] < y)]
二つのデータフレームを縦向きに結合する	pd.concat([df, df2], axis=0)
データフレームを整数に丸める	df.round()
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
文字列の左端から空白やタブを取り除く	文字列.lstrip()
データフレームの末尾	df.tail()
option: 複素数型を使用する	bool = np.int<nl>dtype = bool
option: インデックスを連番に変更する	index_col = None
整数を16進表現に変換する	hex(整数)
プラットホーム名	sys.platform
識別子がジェネレータ関数か調べる	inspect.isgeneratorfunction(識別子)
データフレームのあるカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
オブジェクトがスタックフレームかどうか調べる	inspect.isframe(オブジェクト)
TSVを読み込む	pd.read_csv('file.tsv', sep='\t')
option: マーカーを▲に変更する	marker = '^'
現在が何曜日か知る	datetime.datetime.today().weekday()
文字列中の全角数字を半角数字にする	文字列.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
新しいロッソ回帰モデルを準備する	model = sklearn.linear_model.Rosso(alpha=正則化項)
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
コーンズシルク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
指定した列で集計し、それぞれの最小値を計算する	df.groupby('列A').min()
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
3変数の最小値を求める	min(x, y, z)
データフレームの選択したカラムの値は欠損値か	df[['列A', '列B']].isna()
データフレームの選択したカラムのNaNを最小値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
データフレームのカラムの歪度を求める	scipy.stats.skew(df['列A'], bias=False)
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
配列をイミュータブルなに変換する	frozenset(配列)
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
データフレームの指定したカラムの欠損値をxで埋める	df['列A'].fillna(x)
データフレームの中のカラムを四分位数ごとにビニングする	pd.qcut(df[col], 4)
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
青紫色でヒストグラムを描画する	plt.hist(データ列, color='violet')
浮動小数点数の三乗	x ** 3
散布図を黒い△マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームのあるカラムの75パーセンタイル	df['列A'].quantile(0.75)
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
文字列の接頭辞はsubか確認する	文字列.startswith(部分文字列)
整数の二分の一	整数 / 2
option: ミディアムバイオレットレッドを使用する	color = 'mediumvioletred'
散布図を青緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='teal')
option: フォントの色をビスクに指定する	color = 'bisque'
ファイルをUTF8で開く]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
散布図としてデータフレームの全列を描く	sns.pairplot(df)
シアンにする	f'\033[36m{x}\033[0m'
黒い菱形マーカーをデータ列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
バイアスなしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: 印を上三角に指定する	marker = '^'
変数名はトレースバック	inspect.istraceback(識別子)
小文字を大文字に変換する	文字列.upper()
整数が非負数でないか確認する	整数 >= 0
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
縦棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
追加できるように既存のファイルパスを文字コードtextとしてオープンする]	open(filepath, mode='a', encoding=text)
両端キューをデキューする	両端キュー.popleft()
ヒストグラムをラベンダーブラッシュ色として描画する	plt.hist(データ列, color='lavenderblush')
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
データ列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
赤い上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームをグループ化し、ある列に対し合計を計算する	df.groupby('列A')['列B'].sum()
線グラフをレベッカパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
n回オブジェクトを繰り返すイテラブルを得る	itertools.repeat(element, n)
小数点以下の表示精度を設定する	pd.set_option('precision', n)
数列と配列について散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データシリーズの中にある文字列の合計を数える	ds.isin([value]).sum()
スチールブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
option: コーラルにグラフの色を設定する	color = 'coral'
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
ヒストグラムをパールゴールデンロッド色を用いて描画する	plt.hist(データ列, color='palegoldenrod')
グラフの描画で色差別なく色を使う	sns.set(pallete='colorblind')
今日は何日か知る	datetime.datetime.today().day
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
option: パレットトルコイズ色を使用する	color = 'paleturquoise'
プロットの中に枠なしの補足を入れる	plt.legend(frameon=False)
タイムスタンプデータの日	aDatetime.day
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
識別子がコードか調べる	inspect.iscode(識別子)
今日が火曜日	datetime.datetime.today().weekday() == 1
n個にデータ列を等量でビン分割する	pd.qcut(ds, n)
貝殻色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
二つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
リネンにヒストグラムの色を指定する	plt.hist(データ列, color='linen')
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategray')
文字列をJSONフォーマットの文字列に変換する	json.dumps(文字列, ensure_ascii=False)
ファイルを読み込みできるようにオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
シーケンスを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
xを白色でプリントできる文字列にする	f'\033[37m{x}\033[0m'
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
イテラブルとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
y軸だけ目盛り線	plt.grid(axis='y')
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
データフレームのグループ化した散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
両端キューの先頭に整数を付け加える	両端キュー.appendleft(整数)
ピーチパフ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
数式の平方根を求める	sympy.sqrt(数式)
rgbの左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
実行時の標準入力の入力元がターミナル	os.isatty(sys.stdin.fileno())
1行だけ標準入力から読む	sys.stdin.readline()
文字のユニコード	ord(文字)
黒い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
プロットの色を明るくする	sns.set(pallete='bright')
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
文字列の中の大文字・小文字を無視して正規表現による全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
タプルの値を関数に適用した結果で並べる	sorted(タプル, key=func)
文字列を最後のカンマで分けた場合の残りの文字列	文字列.rpartition(',')[-1]
３自然数の最大公約数を算出する	math.gcd(n, n2, n3)
option: ネイビー色を使う	color = 'navy'
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
ヒストグラムの色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
折れ線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
両端キューの末尾に数列の要素を追加する	両端キュー.extend(数列)
ピーチパフ色を使ってヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
データ列を箱ひげ図を用いて描画する	plt.boxplot(データ列)
双方向キューの先頭に文字列を追加する	両端キュー.appendleft(文字列)
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ヒストグラムの色をシャルトリューズに変更する	plt.hist(データ列, color='chartreuse')
データフレームをグループ化し、それぞれの最大値を求める	df.groupby('列A').max()
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
折れ線グラフの色をやわらかい青に指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: ベージュにグラフの色を設定する	color = 'beige'
破線を使ってヒストグラムを描く	plt.hist(データ列, linestyle='dashed')
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
マップを複製する	辞書.copy()
両端キューに文字列をプッシュする	両端キュー.append(文字列)
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
等量で分割数nでリストをビン分割する	pd.qcut(aList, n)
青紫色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
あるカラムの文字列に部分文字列がないデータを選択する	df[~df['列A'].str.contains(部分文字列)]
パスのセパレータ記号	os.sep
タプルの末尾の要素を見る	タプル[-1]
リストと数列について散布図を描画して、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
標準出力がパイプ	not sys.stdout.isatty()
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
データフレームの指定した列の中にいくつ文字列が含まれるか数える	df['列A'].isin([value]).sum()
データフレームの指定したカラムの分位数を求める	df['列A'].quantile(パーセント/100)
option: チョコレート色を使う	color = 'chocolate'
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: ペルーを用いる	color = 'peru'
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
オブジェクトを文字列に変換する	str(obj)
変数の値の出力を改行なしに行う	print(変数名, end='')
文字列がリストに含まれないか調べる	文字列 not in リスト
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
ポイントマーカーを使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
option: 淡いピンク色にグラフの色を変更する	color = 'lightpink'
データシリーズを千の位で丸めて整数型にする	ds.round(-3).astype(int)
ベクトルの最大	np.max(aArray)
半透明の一点鎖線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
クラス分類をスタッキングでする	sklearn.ensemble.StackingClassifier()
データフレームのあるカラムを丸めて、整数型にする	df['列A'].round().astype(int)
アクア色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
文字列を最後のコロンによって二分する	文字列.rpartition(':')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
ある列のカテゴリごとの個数を求める	df.groupby('列A').count()
option: グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
散布図の右三角印を青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
半透明の一点鎖線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字がひらがなかどうか調べる	('ぁ' <= 文字 <= 'ん')
データフレームの最後	df.tail()
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
特異値分解で文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
option: ゴーストホワイト色を使う	color = 'ghostwhite'
エラーを出力する	sys.stderr
option: 星マーカーを用いる	marker = '*'
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
option: フォントの色をグレーに設定する	color = 'gray'
列の各データ値の出現回数	ds.value_counts()
文字列をJSONフォーマットとしてファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
データフレームをある列をキーにしてソートし、、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
option: ホットピンクにフォントの色を指定する	color = 'hotpink'
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームはどの程度正規分布から歪んでいるか見る	df.kurt()
option: ロージーブラウンにグラフの色を指定する	color = 'rosybrown'
option: ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
マップにマッピング2のエントリを更新する	辞書.update(辞書2)
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
実数のハイパボリック・コサインの逆数	math.acosh(x)
淡いピンク色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
行列の行ごとの分散	np.var(aArray, axis=1)
データフレームの先頭10行	df.head(10)
データフレームの未入力値を直前の値に設定する	df.fillna(method='ffill')
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ヒストグラムの色を暗い赤に変更する	plt.hist(データ列, color='darkred')
ファイルパスのフォルダ名	os.path.dirname(filepath)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
データ列の推移を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
線グラフの色をブランチドアーモンドにセットする	plt.plot(データ列x, データ列y, color='blanchedalmond')
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
タプルの最初の要素を探す	タプル.index(要素)
整数が2で割り切れないか調べる	整数 % 2 == 1
ダークサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
数列から重複なくn個ランダムに選んでリストにする	random.sample(数列, k=n)
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのあるカラムの空文字を未入力値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
散布図に丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
列とシーケンスの直積	itertools.product(iterable, iterable2)
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列の右側は	文字列.endswith(部分文字列)
データフレームのカラムの幾何平均を計算する	scipy.stats.gmean(df['列A'])
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列中にひとつも数字が含まれないかどうか調べる	any(not c.isdigit() for c in 文字列)
ふたつのカラムでグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
列名の一覧	df.columns
文字列をUTF8でバイト列にする	文字列.encode(encoding='utf-8', errors='strict')
サンディーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
リストをタプルにする	tuple(リスト)
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
両端キューを配列から準備する	collections.deque(配列)
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
指定したカラムの尖り	df['列A'].skew()
折れ線グラフの色をスノーにセットする	plt.plot(データ列x, データ列y, color='snow')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
文字列の両端から部分文字列を取り除く	文字列.strip(部分文字列)
データフレームを指定した列によって大きい順にソートする	df.sort_values(by='列A', ascending=False)
ファイルからJSONを読む	with open('file.json') as f:<nl><tab>data = json.load(f)
数式の変数に数値を代入する	数式.subs(変数, 数値)
データフレームの選択したカラムのNaNを後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
ファイルを文字コードtextで書き込みできるように開く]	open(filepath, mode='w', encoding=text)
データフレームの中の列を等量でビン数nとしてビン分割する	pd.qcut(df[col], n)
赤い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
ゴーストホワイト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
option: 文字列の示すエンコーディングを使う	encoding = s
JSONバイト列を構文解析する	json.loads(バイト列.decode('unicode-escape'))
セットから整数を取り除く	セット.remove(数)
ヘッダー行を右寄せにセットする	pd.set_option('colheader_justify', 'right')
ある列のどの値が頻出か調べる	df['列A'].mode()
データフレームを行によって昇順に並べ直す	df.sort_index(ascending=True)
積率相関係数で表の選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
ミディアムブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームの最初100行	df.head(100)
ある列の文字列が正規表現文字列にマッチしないデータを選択する	df[~df['列A'].str.match(正規表現)]
実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ランダムに5行をデータフレームから選択する	df.sample(5)
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
タイタニック号のデータセットをロードする	df = sns.load_dataset('titanic')
配列とリストについて散布図を描いて、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
データフレームのメディアンを求める	df.median()
データフレームの指定した列の欠損値を数値で埋める	df['列A'].fillna(x)
option: フローラルホワイト色を使う	color = 'floralwhite'
データフレームのNaNをそのモードで補う	df.fillna(df.mode().iloc[0])
複数の表データを横方向に連結する	pd.concat([df, df2, df3], axis=1)
データフレームを関数の値によってグループ化し要約統計量を算出する	df.groupby(関数).describe()
タプルのn番目以降の部分を得る	タプル[n:]
データフレームをグループ化しそれぞれの合計を求める	df.groupby('列A').sum()
タプルが空でないか確認する	len(タプル) != 0
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
整数がセットに含まれないか確認する	数 not in セット
データフレームのあるカラムの値が欠損値	df['列A'].isna()
標準入力から改行なしで1行だけ読む	sys.stdin.readline().rstrip()
option: 分割記号をタブにする	sep = '\t'
ビスク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
プロットにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
実数がNaNかどうか	math.isnan(x)
数列と配列について散布図をプロットし、、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
nが無限に続く数列	itertools.repeat(n)
折れ線グラフの四角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ファイルを開き]、バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
列を累加する	itertools.accumulate(iterable)
縦棒グラフをホットピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='hotpink')
配列間のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
整数が3で割り切れるか調べる	整数 % 3 == 0
option: 出力先をファイルに設定する	file = sys.open('file.txt', 'w')
option: フォントの色をゴールドにセットする	color = 'gold'
辞書順で文字列は文字列より後か確認する	文字列 > 文字列2
今日は何年か知る	datetime.datetime.today().year
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
改行なしに複数の数値をプリントする	print(数値, 数値, end='')
項目名がマップ上で未定義か調べる	キー not in 辞書
イテラブルから1個ランダムに選んでリストにする	random.choice(イテラブル)
文字列の中で複数行対応としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
縦棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
２つの文字列は大文字小文字を無視して同じか	文字列.casefold() == 文字列2.casefold()
最大長を指定して双方向キュー	collections.deque(maxlen=最大長)
半透明の破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームの列のユニークな要素を調べる	df[col].unique()
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
ダークスラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
実数を小数点第一位で四捨五入する	round(x, 1)
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
日付データが土曜日かどうか調べる	aDate.weekday() == 5
スラッシュで区切ってxとyをプリントする	print(x, y, sep='/')
データシリーズの時刻を求める	ds.dt.hour
タプルの先頭を取り除く	タプル[1:]
スプリンググリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データシリーズの中の未入力値の数をカウントする	ds.isna().sum()
データフレームを指定された列の値毎にグループ分けして列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
JSON形式のファイルを構文解析する	with open('file.json') as f:<nl><tab>data = json.load(f)
ランダムに重複ありで10行をデータフレームからサンプリングする	df.sample(10, replace=True)
データフレームの選択したカラムのNaNを後の行の値で埋める	df[['列A', '列B']].fillna(method='bfill')
文字列を最初のカンマで二分して、残りを見る	文字列.partition(',')[-1]
option: 青緑にグラフの色を設定する	color = 'teal'
配列をダミー変数にする	pd.get_dummies(配列)
線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
オブジェクトの固有のID	id(obj)
横棒グラフをシーグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='seagreen')
変数xが無限大に近づくときの数式の極限値を算出する	sympy.limit(数式, [|変数]x, oo)
双方向キューの最大長	両端キュー.maxlen
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
双方向キューの中に整数が存在するかどうか調べる	整数 in 両端キュー
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
浮動小数点数の最小値を計算する	sys.float_info.min
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームの指定したカラムの欠損値を最大値に変更する	df['列A'].fillna(df['列A'].max())
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
赤色にする	f'\033[31m{x}\033[0m'
もしコマンド引数が与えられたなら、処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
option: バイナリモードを用いる	mode = 'rb'
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
配列の相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
データフレームをある列によってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
rgbの丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの選択したカラムの中にいくつ文字列が含まれるか求める	df[['列A', '列B']].isin([value]).sum()
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
列名を指定してデータフレームを左結合する	pd.merge(df, df2, on='列A', how='left')
モデルの正確さを計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
整数が両端キューの中に存在する	整数 in 両端キュー
SJISで表計算ファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
データフレームの指定したカラムのNaNを最小値に設定する	df['列A'].fillna(df['列A'].min())
ファイルをバイナリモードを用いて開いて]、fとする	f = open(filepath, mode='rb')
ロバストな重クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
データフレームの欠損値をその中央値で置換する	df.fillna(df.median())
折れ線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
自然数最小公倍数	math.lcm(n, n2)
折れ線グラフの色をデピンクに変更する	plt.plot(データ列x, データ列y, color='deeppink')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
データフレームの選択したカラムを小数点以下n桁で丸める	n = 2<nl>df[['列A', '列B']].round(n)
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: サーモン色を使用する	color = 'salmon'
現在が金曜日かどうかテストする	datetime.datetime.today().weekday() == 4
赤い菱形マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
データシリーズの中にが存在するかどうか調べる	ds.isin([value])
行列の列ごとの標準偏差	np.std(aArray, axis=0)
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
実部と虚部から複素数	complex(x, y)
整数2がn以上、かつn3以下か	整数 <= 整数2 and 整数2 <= n3
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームの選択した列のモード	df[['列A', '列B']].mode()
表データのあるカラムの日にち	df['列A'].dt.day
コサインの逆数	x = 0.33<nl>math.acos(x)
縦棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
リストとリストについて散布図を描いて、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
行列の計算をする	import numpy as np
十六進数文字列を整数に変換する	int(文字列, 16)
イテラブルを箱ひげ図で描画する	plt.boxplot(データ列)
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
実数がNaNか調べる	math.isnan(x)
リストとリストについての散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
データフレームの統計量を全部見る	df.describe()
線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
アイリスのデータセットをデータフレームとしてロードする	df = sns.load_dataset('iris')
option: フォントの色をダークグレーに指定する	color = 'darkgrey'
option: ロージーブラウン色を用いる	color = 'rosybrown'
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
区切り記号で文字列を分割して、文字列リストに変換する	文字列.split(セパレータ)
データフレームを二つの列をキーにしてソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データ列の割合を円グラフで作図する	plt.pie(データ列, startangle=90)
配列とイテラブルについての散布図に赤い菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
配列から1個ランダムに選んでリストにする	random.choice(配列)
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
year年month月day日hour時minute分second秒を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
変数の値をプリントする	print(変数名)
赤色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
option: フォントの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
カラーバーを付ける	plt.colorbar()
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
コマンドの第一引数を知る	sys.argv[1]
データフレームの要約統計量を計算する	df.describe()
n個の要素があるリスト	[要素] * n
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
珊瑚色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフの色をミディアムパープルにする	plt.plot(データ列x, データ列y, color='mediumpurple')
整数が2で割り切れるか調べる	整数 % 2 == 0
追加できるように既存のファイルをSJISとしてオープンする]	open(filepath, mode='a', encoding='shift_jis')
辞書順で文字列が文字列より前かどうか調べる	文字列 < 文字列2
文字列の最後から指定した文字を取り除く	文字列.rstrip(文字)
浮動小数点数を浮動小数点数に乗算する	x * y
データフレームの選択した列を丸める	df[['列A', '列B']].round()
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
タプル内の要素は全て真かどうか	all(タプル)
グラフの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ポスターにプロットの使途を変更する	sns.set(context='poster')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
データフレームのあるカラムの月を求める	df['列A'].dt.month
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
タイムスタンプデータは何分か知る	aDatetime.minute
データフレームのインデックスの一覧を使う	df.index
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
指定したカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
浮動小数点数が有限かどうか確認する	math.isfinite(x)
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
浮動小数点数を千の位で丸める	round(x, -3)
辞書からエラーなくキーの値	辞書.get(キー, 見つからない場合の値)
日付データからn秒分、引く	aDate - datetime.timedelta(seconds=n)
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
散布図の三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ヒストグラムの色をスチールブルーにする	plt.hist(データ列, color='steelblue')
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
xをマゼンタでプリントできる文字列に変換する	f'\033[35m{x}\033[0m'
本日が木曜日	datetime.datetime.today().weekday() == 3
双方向キューの先頭にリストの各要素を追加する	両端キュー.extendleft(リスト)
散布図の印を三角にする	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムの色をダークマゼンタに指定する	plt.hist(データ列, color='darkmagenta')
0からnの範囲	range(n)
リストをJSON形式であるファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
データフレームのあるカラムが何月か知る	df['列A'].dt.month
option: ブルーバイオレットにフォントの色を設定する	color = 'blueviolet'
ファイルの絶対パス	os.path.abspath(filepath)
黒い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
イテラブルと配列の散布図を描いて、マーカーを菱形に指定する	plt.plot(データ列x, データ列y, marker='D')
新しい部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
文字列を最初の部分文字列で二分して残りを使う	文字列.partition(部分文字列)[-1]
折れ線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフの色をインディアンレッドにする	plt.plot(データ列x, データ列y, color='indianred')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
上位集合か調べる	セット.issuperset(セット2)
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
データフレームをグループ化しそれぞれの分散を求める	df.groupby('列A').var()
黒いグリッド線を引く	plt.grid(color='k')
コーンフラワーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
ペルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='peru')
option: ダークカーキ色を用いる	color = 'darkkhaki'
小数点数の逆正接を算出する	math.atan(x)
折れ線グラフに四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
配列と配列について散布図を描画してマーカーをクロスにセットする	plt.plot(データ列x, データ列y, marker='x')
データフレームのカラムのn次モーメント	scipy.stats.moment(df['列A'], moment=n)
辞書のキーをリストに変換する	list(辞書.keys())
t-SNEで多次元データを項次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームの列のユニークな値	df[col].unique()
点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームはどの程度、分散しているか調べる	df.var()
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
データフレームの一部のカラムの相関行列を積率相関係数として求める	df[['列A', '列B']].corr(method='pearson')
整数の三乗	x ** 3
最大長のある双方向キュー	collections.deque(maxlen=最大長)
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
棒グラフをシエナ色を使って描画する	plt.bar(データ列x, データ列y, color='sienna')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
データをJSON形式でファイル出力に保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
ひとつでも非大文字が文字列中に含まれる	any(not c.isupper() for c in 文字列)
option: ハニーデューにグラフの色を指定する	color = 'honeydew'
スカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='skyblue')
実数は有限か調べる	math.isfinite(x)
データ列の離れ具合をプロット化する	sns.residplot(x=データ列, y=データ列)
文字列の出力を改行しなくて行う	print(文字列, end='')
ペアリストpairsからカウンタを準備する	collections.Counter(dict(pairs))
データシリーズの未入力値を直後の値に変更する	ds.fillna(method='bfill')
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
カウンタを多い順に列挙する	aCounter.most_common()
文字列を最後のコロンによって二分割する	文字列.rpartition(':')
ミディアムターコイズ色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図の三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
作画のグリッドを暗くする	sns.set(style='darkgrid')
日付時刻データにn日分足す	aDatetime + datetime.timedelta(days=n)
文字列の先頭から空白やタブを取り除く	文字列.lstrip()
データフレームの中にいくつNaNがあるかカウントする	df.isna().sum()
両端キューを空にする	両端キュー.clear()
データシリーズを整数に丸める	ds.round()
双方向キューに要素をenqueueする	両端キュー.append(要素)
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
データフレームをある列のカテゴリでグループ化してそれぞれのグループごとの件数を知る	df.groupby('列A').size()
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
▽印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
散布図に黒いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='k')
線グラフの色をダークレッドに変更する	plt.plot(データ列x, データ列y, color='darkred')
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
セットをイミュータブルなセットに変換する	frozenset(セット)
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
その平均値でデータフレームのあるカラムの欠損値を補完する	df['列A'].fillna(df['列A'].mean())
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
データフレームのあるカラムの不偏分散	df['列A'].var(ddof=1)
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
文字列中にひとつもアルファベットがない	any(not c.isalpha() for c in 文字列)
ライトコーラルにヒストグラムの色を指定する	plt.hist(データ列, color='lightcoral')
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
大文字・小文字を無視してパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
ファイルパスから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
二つのカウンタの共通する要素	aCounter & aCounter2
option: 右三角印を使う	marker = '>'
第一引数で指定されたファイルの名前	sys.argv[1]
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
散布図の左三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
クラス分類をランダム性を強化したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
option: ボックスチャートを横方向にする	vert = False
データフレームを二つの列によってまとめたグループ	df.groupby(['列A', '列B'])
データフレームのあるカラムを日付データに変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
書き込みモードでファイルをオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
文字列中にひとつでも空白が存在するか調べる	any(c.isspace() for c in 文字列)
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
黒い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
ファイルをオープンして]、バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
二つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
リッジ回帰モデルを作る	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームの選択した列の空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データフレームの最後100行を抽出する	df.tail(100)
大きさnでデータ列とリストについての散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
option: グラフの色をライトイエローに指定する	color = 'lightyellow'
角度のラジアンを求める	math.radians(degree)
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
折れ線グラフの色を青に指定する	plt.plot(データ列x, データ列y, color='blue')
要素はセットに含まれるか	要素 in セット
整数は配列のひとつである	aArray = [0, 1, 2]<nl>整数 in aArray
折れ線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
データフレームの相関行列を計算する	df.corr()
文字列中に大文字があるかどうか調べる	any(c.isupper() for c in 文字列)
ダークサーモン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: ロイヤルブルーを使う	color = 'royalblue'
多次元データを特異値分解で要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
整数がnで割り切れないか調べる	整数 % n != 0
列名を指定してデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
赤い点線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列の開始位置以降がsubで始まるか調べる	文字列.startswith(部分文字列, 開始位置)
既存のファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
データフレームの重複を見る	df.duplicated()
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
ティール色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームのある列をリストに変換する	df['列A'].values.tolist()
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
ファイルからn文字、読み込む	f.read(n)
文字列はPythonのキーワードか調べる	keyword.iskeyword(文字列)
配列と配列についての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
ある列の第一四分位数	df['列A'].quantile(0.25)
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: ▼印を使う	marker = 'v'
整数がnの倍数でないか調べる	整数 % n != 0
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
縦棒グラフをオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='orange')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
文字列を最初のカンマで二つに分けて、前半を使う	文字列.partition(',')[0]
例外のトレースバック	etype, evalue, traceback = sys.exc_info()
８進数字を全て見る	string.octdigits
option: 色をオリーブに設定する	color = 'olive'
リストから行列を初期化する	np.array(aList)
データフレームの中に存在する日付データの合計を数える	df.isin([value]).sum()
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgrey')
リストをn回、結合する	リスト * n
折れ線グラフの大バツマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
カウンタのユニークな文字列を列挙する	list(aCounter)
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
option: 四角印を加える	marker = 's'
要素がリストに含まれないか確認する	要素 not in リスト
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
連立方程式を解く	sympy.solve([数式, 数式2])
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
option: パールゴールデンロッドにフォントの色をセットする	color = 'palegoldenrod'
データフレームの標準偏差を求める	df.std()
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフを淡い茶色色を使って描画する	plt.plot(データ列x, データ列y, color='tan')
横棒グラフをチョコレート色を用いて描画する	plt.barh(データ列x, データ列y, color='chocolate')
変数名が抽象クラスか	inspect.isabstract(識別子)
セットから何でもいいからひとつ取り出す	セット.pop()
実数のn乗して数による余り	pow(x, n, y)
ヒストグラムを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
濃い青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
散布図のクロスマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
淡いピンク色にヒストグラムの色をする	plt.hist(データ列, color='lightpink')
正規表現patternでreplにデータフレームの値を一度に変更する	df.replace(pattern, repl, regex=True)
リストから複数の要素をランダムに重複なく抽出する	random.sample(リスト, k=n)
ヒストグラムの色をスプリンググリーンにセットする	plt.hist(データ列, color='springgreen')
線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
カウンタを辞書にする	dict(aCounter)
タプルの平均値を求める	sum(タプル)/len(タプル)
数値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(x)
実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
option: ダークスラテグレー色を使用する	color = 'darkslategray'
ケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
option: スレートブルー色を使う	color = 'slateblue'
option: シートの名前を設定する	sheet_name = ['A', 'B']
処理中の例外情報	etype, evalue, traceback = sys.exc_info()
多次元データをMSDとして要素次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
プロットのフォントを日本語に指定する	sns.set(font='IPAexGothic')
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
文字列をJSON形式の文字列に変換する	json.dumps(文字列, ensure_ascii=False)
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
文字列中の部分文字列の登場をカウントする	文字列.count(部分文字列)
option: グラフの色をクリムゾンに指定する	color = 'crimson'
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
数列とリストの散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
予測値とデータの離れ具合を見る	sns.residplot(x='列名', y='列名', data=df)
データフレームをインポートする	import numpy as np<nl>import pandas as pd
本日が火曜日	datetime.datetime.today().weekday() == 1
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
正規分布として疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
オブジェクトのプロパティを消す	delattr(obj, プロパティ名)
option: フォントの色をパパイヤウィップに指定する	color = 'papayawhip'
四分位数でリストをビン分割する	pd.qcut(aList, 4)
オブジェクトは集合	set = int<nl>isinstance(obj, set)
データフレームのあるカラムの曜日が何日目か調べる	df['列A'].dt.dayofweek
箱髭図を描画して、平均を加える	plt.boxplot(データ列, showmeans=True)
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
option: フォントの色をスラグレーにセットする	color = 'slategray'
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
x座標の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
データフレームの選択したカラムの欠損値をモードに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
オーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
データフレームを二つの列によって集計する	df.groupby(['列A', '列B'])
ファイルを書き込みモードとしてオープンして]fとする	f = open(filepath, mode='w')
円グラフをきれいな円にする	plt.axis('equals')
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
クラス分類の偽陰性をヒートマップを用いて確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
option: イエローグリーンを用いる	color = 'yellowgreen'
赤色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
辞書のエントリを列挙する	辞書.values()
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
option: リネン色を使う	color = 'linen'
データ列の偏りを対数変換する	np.log(データ列)
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
文字列の左側から指定した文字を取り除く	文字列.lstrip(文字)
追加できるようにUTF8で既存のファイルパスを開く]	open(filepath, mode='a', encoding='utf-8')
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
predicateFuncを適用したときtrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームをあるカラムによって降順にソートする	df.sort_values(by='列A', ascending=False)
二つの集合の差集合を求める	セット.difference(セット2)
データフレームをグループ化し、各平均値を算出する	df.groupby('列A').mean()
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図に▲マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
辞書のキーの一覧	list(辞書.keys())
データフレームの指定したカラムの中にいくつが存在するかカウントする	df['列A'].isin([value]).sum()
実数に整数をかける	x * y
データフレームのカラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
文字列を最初の部分文字列で二つに分ける	文字列.partition(部分文字列)
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
カテゴリ別に並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
散布図の印を△にする	plt.scatter(データ列x, データ列y, marker='^')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
option: ホットピンク色を使う	color = 'hotpink'
リスト内の要素は少なくとも一つ真かどうか調べる	any(リスト)
文字列を走査し、パターンに複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
セットからエラーなく文字列を除去する	セット.discard(文字列)
フォレストグリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
多次元データをt-SNEで文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
赤い右三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
新しい勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
今日をISO形式の文字列にする	datetime.datetime.today().isoformat()
option: トマトを使う	color = 'tomato'
散布図をrgbの四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
横棒グラフをブルーバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
option: グラフの色を真紅に変更する	color = 'crimson'
辞書に項目名が存在するとき処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
データフレームの相関行列をヒートマップを使って描画する	sns.heatmap(df.corr())
辞書のコピーを準備する	辞書.copy()
両端キュー	両端キュー = collections.deque()
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
ポイントマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームの選択したカラムの最頻値を計算する	df[['列A', '列B']].mode()
データフレームの選択した列の中に文字列とが存在する	df[['列A', '列B']].isin([value, value2])
実数を小数点第一位で丸める	round(x, 1)
option: フォントの色をアンティークホワイトにセットする	color = 'antiquewhite'
線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
二つのリストの積集合	list(set(リスト).intersection(set(リスト2)))
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
文字列中にひとつでも小文字が存在する	any(c.islower() for c in 文字列)
線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
指定した列のカテゴリで集計しそれぞれの最大値を求める	df.groupby('列A').max()
論文にプロットを設定する	sns.set(context='paper')
データフレームの一部のカラムの値をreplにまとめて正規表現patternで置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
改行せず計算結果を表示する	print(式, end='')
縦棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
ミディアムシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
リストを分割する	pd.cut(aList, aList)
縦棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
縦棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームの末尾10行を取り出す	df.tail(10)
データフレーム全体をインデックスによって昇順にソートする	df.sort_index(ascending=True)
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
ファイルの入力ストリームを使う	open(filepath)
実数がNaN	math.isnan(x)
データフレームの選択した列の統計量を確認する	df[['列A', '列B']].describe()
出力ストリーム全体を行単位で分割して読み込む	f.readlines()
データフレームの一部のカラムを1000の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
キーが辞書上で未定義かどうか	キー not in 辞書
タプルの順番をランダムにシャッフルする	tuple(random.sample(タプル, len(タプル)))
オブジェクトがフィールドを持つか	hasattr(obj, プロパティ名)
プロットで用いるy座標にラベルをつける	plt.ylabel('y軸ラベル')
deqから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
ヒストグラムをチョコレート色を用いて描画する	plt.hist(データ列, color='chocolate')
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
イテラブルとリストの散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームの値をValueMapで全部置き換える	df.replace(ValueMap)
整数をnだけ左シフトする	整数 << n
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: コーラルを使用する	color = 'coral'
データフレームの指定したカラムの歪度	df['列A'].kurt()
データシリーズを1000の位で丸めて整数型にする	ds.round(-3).astype(int)
三つのデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
リストを等間隔でn個にビニングする	pd.cut(aList, n)
紺碧色を用いてヒストグラムを描画する	plt.hist(データ列, color='azure')
deqの末尾の要素を見る	両端キュー[-1]
データシリーズのNaNをxで埋める	ds.fillna(x)
改行除外してファイルを一行ずつ読む	f.readline()
option: グラフの色をペールグリーンに指定する	color = 'palegreen'
nと整数が同じ値かどうか調べる	整数 == 整数2
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
CSVからデータフレームを読む	pd.read_csv('file.csv', sep=',')
横棒グラフの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
ファイルのディレクトリ名	os.path.dirname(filepath)
option: 色をシルバーに設定する	color = 'silver'
文字列が印字できる	文字列.isprintable()
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
rgbに横棒プロットの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
2つのデータフレームを列名を指定して右ジョインする	pd.merge(df, df2, on='列A', how='right')
カウンタの値を列挙する	aCounter.keys()
リストとリストについての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
日付時刻データの年数を使う	aDatetime.year
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
データフレームのカラムの尖度を使う	scipy.stats.kurtosis(df['列A'], bias=False)
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
行列と同じ大きさの空ベクトルを作成する	np.empty_like(aArray)
ふたつの集合のいずれか一方だけの集合を使う	セット.symmetric_difference(セット2)
整数が1もしくは2、もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データシリーズの値が欠損値か調べる	ds.isna()
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
年月日と時間から日付時刻を作る	datetime.datetime(年, 月, 日, 時, 分, 秒)
目的変数をモデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
ミディアムブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
イテラブルを2回あわせたデカルト積を得る	itertools.product(iterable, repeat=2)
データシリーズの中にいくつ欠損値があるかカウントする	ds.isna().sum()
あるカラムの値がxより大きく、yより小さい行を選択する	df[(x < df['列A']) & (df['列A'] < y)]
空白	' '
散布図を三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^')
タプルの要素が最初に見つかるインデックス	タプル.index(要素)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
タイムスタンプデータにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームをある列の値でグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
２つの整数の論理和	整数 | 整数2
文字は漢字か調べる	('\u4E00' <= 文字 <= '\u9FD0')
option: ブラウンを使用する	color = 'brown'
整数のn分の一を算出する	整数 / n
文字列中の指定した文字をカウントする	文字列.count(文字)
線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
キュー	両端キュー = collections.deque()
n進数文字列をバイト列にする	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
データ列のユニークな値の個数を見る	ds.nunique()
散布図のバツマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームをグループ化しある列の要約統計量を求める	df.groupby('列A').describe()['列B']
ゼロ埋めされた行列	np.zeros(行数, 列数)
３つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
option: ダークグレーを使う	color = 'darkgrey'
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgray')
既存のベクトルを元に全要素が0の配列	np.zeros_like(aArray)
縦棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
辞書のキーの値を得る	辞書[キー]
バイナリモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='rb')
散布図を黒い左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
折れ線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームをある列のカテゴリとしてグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
文字列中にアスキー文字があるか調べる	any(c.isascii() for c in 文字列)
文字列中にひとつもアスキー文字が含まれないか調べる	any(not c.isascii() for c in 文字列)
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
紺色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
option: シャルトリューズ色を使う	color = 'chartreuse'
オブジェクトは文字列かテストする	str = int<nl>isinstance(obj, str)
散布図に黒い△印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのあるカラムにおいてどの値が頻出か見る	df['列A'].mode()
オブジェクトがクラスか調べる	inspect.isclass(オブジェクト)
関数の値によってデータフレームをグループ化する	df.groupby(関数)
縦棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
文字列の末尾から部分文字列を探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
文字列が別の文字列に含まれるかどうか調べる	文字列 in 別の文字列
データフレームを二つの列によって昇順に整列する	df.sort_values(by=['列A', '列B'], ascending=True)
データフレームの内容を調べる	df.head()
整数の桁数	len(str(整数))
文字列の接尾辞から部分文字列を除く	文字列.removesuffix(部分文字列)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
シアンでxを出力する	print(f'\033[36m{x}\033[0m')
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
０で全要素を初期化した８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
オブジェクトがビルトインか調べる	inspect.isbuiltin(オブジェクト)
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
整数がセットのいずれでもないどうか	数 not in セット
整数が1、もしくは2、もしくは3に等しいか	整数 == 1 or 整数 == 2 or 整数 == 3
データフレームの列名リストで指定された列をドロップする	df.drop(columns, axis=1, inplace=True)
棒グラフをモカシン色として描画する	plt.bar(データ列x, データ列y, color='moccasin')
赤いポイントマーカーをイテラブルとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
凡例を表示する	plt.legend()
数式を変数xについて偏微分する	sympy.diff(数式, [|変数]x)
青い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
文字列中に小文字が含まれないか	any(not c.islower() for c in 文字列)
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
乱数で要素を埋めた行列	np.random.random((行数, 列数))
小文字列	string.ascii_lowercase
文字列をJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False)
リストの平均を求める	sum(リスト)/len(リスト)
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
散布図をブラック色を用いて描画する	plt.scatter(データ列x, データ列y, color='black')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
標準入力から1行分改行なしで読む	sys.stdin.readline().rstrip()
イテラブルを双方向キューに変換する	collections.deque(イテラブル)
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
文字列を両端キューの最後に入れる	両端キュー.append(文字列)
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームのあるカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
イテラブルから一つランダムに選んでリストにする	random.choice(イテラブル)
浮動小数点数の指数	math.frexp(x)[1]
指定した列の中に文字列が存在するか調べる	df['列A'].isin([value])
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図にバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
実数の小数部を求める	math.modf(x)[0]
散布図の色をバイオレットにする	plt.scatter(データ列x, データ列y, color='violet')
浮動小数点数の３乗	x ** 3
データフレームのカラムの調和平均を求める	scipy.stats.hmean(df['列A'])
空のガウス過程回帰モデルを準備する	model = sklearn.gaussian_process.GaussianProcessRegressor()
option: ブラック色を使う	color = 'black'
回帰分析をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
整数かける整数を算出する	整数 * 整数2
ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
指定した列を整数に四捨五入する	df['列A'].round()
文字列中のパターンを新しい文字列を使って置換する	re.sub(pattern, newsub, s)
行列の最小	np.min(aArray)
データフレームの列の名前をまとめて文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
バイト列からJSONを読む	json.loads(バイト列.decode('unicode-escape'))
辞書にキーがあるとき処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
option: フォントの色をミディアムターコイズに設定する	color = 'mediumturquoise'
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
option: ベージュを使う	color = 'beige'
データフレームの先頭100行を抽出する	df.head(100)
ふたつの集合に共通する要素からなる集合を計算する	セット.intersection(セット2)
文字列は文字列より辞書順で前かどうか調べる	文字列 < 文字列2
データ列をカテゴリデータにする	ds.astype(object)
サブクラスか	issubclass(サブクラス, クラス)
文字列が全て英字か調べる	文字列.isalpha()
ブースティングを使ってクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
両端キューの要素を右にローテーションする	両端キュー.rotate(1)
カウンタの積集合	aCounter & aCounter2
option: 無視するフッタをnに設定する	skipfooter = n
縦棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
リストとリストの散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
コマンドの第一引数を確める	sys.argv[1]
シーケンスの全順列	itertools.permutations(iterable)
クラス分類を確率的勾配降下を用いて行う	model = sklearn.linear_model.SGDClassifier()
リストと配列についての散布図にrgbの下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
最初の区切り記号を使って文字列を二分割する	文字列.partition(セパレータ)
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
データフレームのあるカラムを日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
項∉セット	要素 not in セット
文字列中にひとつでも数字が含まれる	any(c.isdigit() for c in 文字列)
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
両端キューの末尾にリストの要素を追加する	両端キュー.extend(リスト)
変数について数式を積分する	sympy.integrate(数式, 変数)
整数がセットのいずれか調べる	数 in セット
option: 黄緑色を用いる	color = 'chartreuse'
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
ファイル名がCSVファイルか調べる	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
データフレームの欠損値を最小値で補う	df.fillna(df.min())
option: フォントの色をプラムに設定する	color = 'plum'
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
グラフの見た目をデフォルトでいい感じに設定する	sns.set()
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
赤いバツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
改行なしに複数の計算結果を出力する	print(式, 式, end='')
データフレームから指定した三つの列を抽出する	df[['列A', '列B', '列C']]
データフレームの指定したカラムの分散	df['列A'].var()
範囲指定をした配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
棒グラフをリネン色を用いて描画する	plt.bar(データ列x, データ列y, color='linen')
両端キューが空	len(両端キュー) == 0
複数の列によってデータフレームを破壊的に降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
JSONを使用する	import json
棒グラフをグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='green')
整数が2で割り切れるか	整数 % 2 == 0
縦棒プロットを描画してラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
グラフの補足を表示する	plt.legend()
文字列から空白を全て除去する	文字列.replace('\t', '')
数値の出力を改行せず行う	print(数値, end='')
Excelファイルをデータフレームとしてロードする	pd.read_excel('file.xlsx')
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
散布図にクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
勾配ブースティングとして回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
両端キュー中の整数を数える	両端キュー.count(整数)
区切り記号で文字列を二分し、、残りを見る	文字列.partition(セパレータ)[-1]
印字可能な文字を使う	string.printable
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
散布図のバツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
ダークスラテグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
グリーンイエロー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データ列をビン数nで等しい量になるようにビン分割する	pd.qcut(ds, n)
横棒グラフをゴールド色として描画する	plt.barh(データ列x, データ列y, color='gold')
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
option: グラフの色をダークカーキに変更する	color = 'darkkhaki'
辞書に別の辞書2の項目を更新する	辞書.update(辞書2)
棒グラフをミントクリーム色を用いて描画する	plt.bar(データ列x, データ列y, color='mintcream')
ブルーバイオレットにヒストグラムの色をセットする	plt.hist(データ列, color='blueviolet')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
半透明の破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
折れ線グラフの色を赤にセットする	plt.plot(データ列x, データ列y, color='red')
データフレームから指定されたカラムの名前一覧の列を抽出する	columns = ['列A', '列B']<nl>df[columns]
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
寄与率を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: 読み込みモードに変更する	mode = 'r'
無限大を用いる	math.inf
日付時刻データがタイムスタンプデータより前か	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
xについて微分する	sympy.diff(数式, [|変数]x)
リストが全て真か調べる	all(リスト)
変数を改行しないでプリントする	print(変数名, end='')
option: 大きい順にする	ascending = False
ヒストグラムをフローラルホワイト色を使って描画する	plt.hist(データ列, color='floralwhite')
option: 白を使う	color = 'white'
黒い上三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
option: SJISを用いる	encoding = 'shift_jis'
データフレームの一部のカラムの代表値	df[['列A', '列B']].describe()
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
表データのあるカラムが何年か調べる	df['列A'].dt.year
散布図をライトグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
キューの要素を左にローテーションする	両端キュー.rotate(-1)
散布図のポイント印の色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
ベクトルの累積和を計算する	np.cumsum(aArray)
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
カウンタから列を出現回数して引く	aCounter.subtract(iterable)
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
データフレームのカラムの最頻値を計算する	df['列A'].mode()
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
文字列がリストに含まれるか調べる	文字列 in リスト
カウンタの項目一覧	aCounter.keys()
整数が配列のひとつか調べる	aArray = [0, 1, 2]<nl>整数 in aArray
浮動小数点数が整数かどうか調べる	x.is_integer()
現在をタプルに変換する	datetime.datetime.today().timetuple()
正則化付き線形回帰モデルを準備する	model = sklearn.linear_model.ElasticNet()
ヒストグラムをライトシアン色を用いて描画する	plt.hist(データ列, color='lightcyan')
散布図に赤い菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
横棒グラフをパールゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
日付時刻データが水曜日か	aDatetime.weekday() == 2
スラグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
アクアにヒストグラムの色を変更する	plt.hist(データ列, color='aqua')
リストとデータ列の散布図を描画し、、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
アイボリー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
xの小数点以下'1'桁の文字列にする	':.1f'.format(x)
イテラブルの各データを両端キューの先頭に追加する	両端キュー.extendleft(イテラブル)
yが0に近づくときの数式の極限値を算出する	sympy.limit(数式, y, 0)
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
変数がマイナス無限大に近づく時の数式の極限値を計算する	sympy.limit(数式, 変数, -oo)
ポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.')
キューの最初に要素を追加する	両端キュー.appendleft(要素)
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
スラグレーにヒストグラムの色を変更する	plt.hist(データ列, color='slategrey')
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
option: 箱ひげ図を水平方向にする	vert = False
カンマで文字列を分割して、文字列リストに変換する	文字列.split(',')
青い実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
マップのキーを列挙する	辞書.keys()
データフレームの値が未入力値かどうか	df.isna()
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: ロイヤルブルーにフォントの色を設定する	color = 'royalblue'
シエナ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
列とイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
リストを文字列として、指定された文字で一つにする	文字.join(map(str, リスト))
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
カウンタを多い順番に列挙する	aCounter.most_common()
option: シャルトリューズ色を使用する	color = 'chartreuse'
データシリーズのパーセンタイルを求める	ds.quantile(パーセント/100)
タイムスタンプデータと日付時刻データの時間差を計算する	aDatetime - aDatetime2
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
ドジャーブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgray')
棒グラフをダークバイオレット色を使って描画する	plt.bar(データ列x, データ列y, color='darkviolet')
整数を千の位で丸める	round(x, -3)
線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
横棒グラフを描く	plt.barh(ラベル列, データ列)
option: グラフの色をダークサーモンに指定する	color = 'darksalmon'
配列と配列の散布図を描画し、、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
整数の十六進数表現を使う	hex(整数)
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
option: バイナリ書き込み用に変更する	mode = 'wb'
数式のxについてのn階偏微分を求める	sympy.diff(数式, [|変数]x, n)
双方向キュー中の文字列を数える	両端キュー.count(文字列)
二つのデータフレームを横方向に合体する	pd.concat([df, df2], axis=1)
データフレームのカラムの平均の標準誤差を使う	scipy.stats.sem(df['列A'])
標準入力の入力元がターミナルかどうか	os.isatty(sys.stdin.fileno())
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
セットの全ての要素が別のセット2に含まれるか調べる	セット.issubset(セット2)
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
日付時刻データが何時か知る	aDatetime.hour
ファイルをバイナリ用にオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
rgbのダイアモンドマーカーを数列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: バツマーカーを描画する	marker = 'x'
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
文字列を最後のコロンで二つに分け、、前半を求める	文字列.rpartition(':')[0]
文字列はセットに含まれないか調べる	文字列 not in セット
表データのあるカラムの曜日は何日目か知る	df['列A'].dt.dayofweek
セットから要素を取り除く	セット.remove(要素)
浮動小数点数の平方根	math.sqrt(x)
option: 左三角印を用いる	marker = '<'
整数が5の倍数かどうか調べる	整数 % 5 == 0
ヒストグラムを２つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
両端キューの先頭に配列の各値を追加する	両端キュー.extendleft(配列)
option: 線の種類を実線に設定する	linestyle = 'solid'
ファイルをオープンして]、バイナリストリームを見る	'rb' = 'a'<nl>open(filepath, mode='rb')
数列の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
アスキー文字が文字列中にないか確認する	any(not c.isascii() for c in 文字列)
欠損値がある行を除く	df.dropna(inplace=True)
option: グラフを一点鎖線にセットする	linestyle = 'dashbot'
識別子が非同期ジェネレータ関数かどうか確認する	inspect.isasyncgenfunction(識別子)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの選択したカラムをValueMapでまとめて変更する	df[['列A', '列B']].replace(ValueMap)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームの選択したカラムを10の位で丸める	df[['列A', '列B']].round(-1)
チップのデータセットからデータフレームをロードする	df = sns.load_dataset('tips')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
option: 追加モードに指定する	mode = 'a'
option: ライトスカイブルーを用いる	color = 'lightskyblue'
双曲線正弦の逆数を計算する	math.asinh(x)
配列と配列についての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
文字列はセットに含まれるかどうか調べる	文字列 in セット
option: ライトグレーを用いる	color = 'lightgray'
関数によってデータフレームをまとめた表	df.groupby(関数)
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
データフレームを表示するとき、ヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
整数を十六進数表現に変換する	hex(整数)
二つの文字列は等しくないかどうか判定する	文字列 != 文字列2
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
ライトスチールブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームのあるカラムのタイムゾーンをする	df['列A'].tz_convert('Asia/Tokyo')
原点から点までの距離を求める	math.hypot(x, y)
範囲から配列を作成する	np.linspace(最小値, 最大値, 要素数)
グラフをプロットする準備をする	import matplotlib.pyplot as plt
横棒グラフをダークオリーブグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
rgbの丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: ライム色を使う	color = 'lime'
補助目盛りを有効にする	plt.minorticks_on()
option: 改行コードを旧Macに指定する	newline = '\r'
データシリーズの中に文字列が存在するかどうか調べる	ds.isin([value])
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
データフレームの指定した列の中にいくつ欠損値があるか数える	df['列A'].isna().sum()
指定したカラムの中にある日付データの合計を数える	df['列A'].isin([value]).sum()
option: クリムゾンを使う	color = 'crimson'
散布図をパールゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
整数が整数2以上	整数 >= 整数2
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
option: ミディアムブルー色を使用する	color = 'mediumblue'
グラフを綺麗にする	import seaborn as sns
方程式として数式の変数の解を算出する	sympy.solve(数式, [|変数]x)
データフレームの欠損値をxで補完する	df.fillna(x)
棒グラフをロージーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='rosybrown')
プロットで使う横軸にラベルを設定する	plt.xlabel('x軸ラベル')
データシリーズが正規分布からどれだけ、尖っているか調べる	ds.skew()
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
データフレームのNaNを第二四分位数に設定する	df.fillna(df.median())
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
データフレームのあるカラムが何時か知る	df['列A'].dt.hour
変数xが0に近づくときの数式の極限値を算出する	sympy.limit(数式, [|変数]x, 0)
本日が何日か知る	datetime.datetime.today().day
日付時刻データがタイムスタンプデータより後ろか調べる	aDatetime > aDatetime2
インデックスとしてCSVのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
配列からn値、サンプリングしてリスト化する	random.sample(配列, k=n)
識別子がフレームか調べる	inspect.isframe(識別子)
データフレームの中の列をビン数nでビニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
ある列で破壊的に降順にデータフレームをソートする	df.sort_values(by='列A', ascending=False, inplace=True)
リストとデータ列の散布図を描画して左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
クラス分類の適合率と再現率の調和平均を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
ある列の文字列に部分文字列が存在する行を抽出する	df[df['列A'].str.contains(部分文字列)]
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
ふたつの整数の差を求める	整数 - 整数2
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ミディアムシアグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ヒストグラムを描いてビン数を設定する	plt.hist(データ列, bins=区関数)
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
散布図のダイアモンド印を黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
太文字化する	f'\033[1m{x}\033[0m'
線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
モカシン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データ構造を使う	import collections
データフレームの選択した列のNaNを直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
カテゴリで色分けして、データフレームをに箱ひげ図として図示する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
3自然数の最大公約数	math.gcd(n, n2, n3)
データフレームのある列の値がx以上の行を選択する	df[df['列A'] >= x]
ポイントマーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
option: 線種を一点鎖線に設定する	linestyle = 'dashbot'
フィシャー流の尖度を計算する	scipy.stats.kurtosis(配列, fisher=True, bias=False)
option: ラベンダーブラッシュ色を使用する	color = 'lavenderblush'
数列の折れ線グラフを描いて、色をRGBとして設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの分散	df.var()
その最小値でデータフレームのNaNを置換する	df.fillna(df.min())
回帰分析をアンサンブル学習としてする	sklearn.ensemble.VotingRegressor()
今日が土曜日か確認する	datetime.datetime.today().weekday() == 5
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
option: オールドレース色を使う	color = 'oldlace'
ルートのチェーンマップを作る	collections.ChainMap()
データフレームの一部のカラムの欠損値をその最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
空白で文字列を区切って、整数のリストに変換する	list(map(int, 文字列.split()))
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: パパイヤウィップを使う	color = 'papayawhip'
整数が1もしくは2、もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
切り下げて整数に変換する	math.floor(x)
オブジェクトの無限列	itertools.repeat(element)
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
option: グレーを使用する	color = 'gray'
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
数が負の数か確認する	x < 0
赤い点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データシリーズを千の位で丸める	ds.round(-3)
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
文字列中に大文字が含まれる	any(c.isupper() for c in 文字列)
ラインを青い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
散布図をrgbの右三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
イテラブルと配列について散布図を描画して、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを散布図を使って可視化する	sns.scatterplot(data=df, x='列名', y='列名')
イテラブルのイミュータブルな集合	frozenset(イテラブル)
エポック秒からタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
高頻出方からカウンタをリストとして得る	aCounter.most_common()
データフレームをあるカラムによって小さい順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
option: ライトスレイグレーを使う	color = 'lightslategrey'
xを下線付きでプリントできる文字列に変換する	f'\033[4m{x}\033[0m'
カテゴリで色分けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ダークゴールデンロッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
数列と数列の散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
標準エラーを使う	sys.stderr
データフレームをに箱ひげ図でプロットする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの指定したカラムのNaNをxに設定する	df['列A'].fillna(x)
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
三自然数の最小公倍数	math.lcm(n, n2, n3)
散布図に黒い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: エラーがあるとき例外を発生させるように指定する	errors = 'strict'
青緑色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ファイルを解放する	f.close()
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
タプルが空でないか調べる	len(タプル) != 0
特異値分解で多次元データを要素次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データフレームのあるカラムのタイムゾーンを指定する	df['列A'].tz_convert('Asia/Tokyo')
ブランチドアーモンド色としてヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
既存の配列を元に全要素が0のベクトル	np.zeros_like(aArray)
辞書のコピー	dict(辞書)
エクセルファイルのシートをデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=シート名)
線グラフを白色を使って描画する	plt.plot(データ列x, データ列y, color='white')
やわらかい青色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ISO書式の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: リネンに色を変更する	color = 'linen'
データフレームを整列し、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
ヒストグラムをクリムゾン色として描画する	plt.hist(データ列, color='crimson')
option: フォントの色をダークグレーにセットする	color = 'darkgray'
としてデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
データシリーズの欠損値を最頻値で補完する	ds.fillna(ds.mode().iloc[0])
整数から整数を引く	整数 - 整数2
グラフの横軸を対数に変更する	plt.xscale('log')
データフレームの一部のカラムの不偏標準偏差	df[['列A', '列B']].std()
日付時刻データの曜日を見る	aDatetime.weekday()
指定した列を10の位で丸める	df['列A'].round(-1)
整数を八進表現に変換する	oct(整数)
データフレームの選択したカラムを千の位で丸めて整数型にする	df[['列A', '列B']].round(-3).astype(int)
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
線グラフをゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: スラグレー色を用いる	color = 'slategray'
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
イテラブルと配列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: マーカーを左三角に変える	marker = '<'
サポートベクトル分類モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: シアン色を用いる	color = 'cyan'
データフレームの選択したカラムの中に存在する文字列との合計をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
EUCとして追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='euc_jp')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームからカテゴリデータを選択する	df.select_dtypes('object')
option: 色をパパイヤウィップに設定する	color = 'papayawhip'
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ターコイズにヒストグラムの色をする	plt.hist(データ列, color='turquoise')
カウンタのユニークな要素を列挙する	list(aCounter)
データフレームのあるカラムの中に含まれる文字列と文字列の合計をカウントする	df['列A'].isin([value, value2]).sum()
ヒストグラムの色をダークグレーにセットする	plt.hist(データ列, color='darkgrey')
文字列を最後のカンマで分割したときの後半の文字列を使う	文字列.rpartition(',')[-1]
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
凡例をプロットの表示する	plt.legend()
ゴールド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
二つの数値を改行なしに出力する	print(数値, 数値, end='')
自然数個のものからk個取り出したときの並べ方	math.perm(n, k)
二つの文字列は同じか調べる	文字列 == 文字列2
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
シャルトリューズ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
双方向キューの要素を右にローテーションする	両端キュー.rotate(1)
折れ線グラフの線の種類を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
入力から二つの文字列値を読む	A, B = map(str, input().split())
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ある列を用いてデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
option: アクアマリンを使う	color = 'aquamarine'
度数分布図を描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフのクロスマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
グラフの背景色を暗くする	sns.set(style='darkgrid')
リストを縦軸配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ベクトル演算を行う	import numpy as np
整数はセットのメンバーに含まれるか調べる	数 in セット
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
色付きの点線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
辞書をJSONフォーマットを用いて出力ストリームに保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
すべてのシートを表計算ファイルから読む	pd.read_excel('file.xlsx', sheet_name=None)
JSONフォーマットの文字列を読む	data = json.loads(文字列)
option: ダークオリーブグリーンにグラフの色を指定する	color = 'darkolivegreen'
option: トマト色を使う	color = 'tomato'
option: バツ印を用いる	marker = 'x'
日付時刻データは日付時刻データより先か判定する	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
カウンタを高頻出方から列挙する	aCounter.most_common()
配列のトリム平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
両端キューが空か調べる	len(両端キュー) == 0
データフレームをソートして、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
ゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
文字列の長さ	len(文字列)
線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
リストの末尾からn番目以前の部分を取り出す	リスト[:-n]
データをL1ノルムを用いて正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームとデータシリーズを横方向に連結する	pd.concat([df, ds], axis=1)
データフレームから指定した名前リストの列を取り出す	columns = ['列A', '列B']<nl>df[columns]
整数が負の整数か調べる	整数 < 0
一点鎖線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
実数を十の位で四捨五入する	round(x, -1)
横棒グラフをホワイトスモーク色を用いて描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームのあるカラムの中の欠損値の個数を数える	df['列A'].isna().sum()
データ列の決定係数を算出する	sklearn.metrics.r2_score(データ列, データ列2)
正規表現に複数行対応として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
文字列を隔離する	sys.intern(文字列)
ターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
実線に線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='solid')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
ある列毎の合計	df.groupby('列A').sum()
データフレームの中であるカラムに重複があれば除く	df.drop_duplicates(subset='列A', inplace=True)
表データからランダムにn行を抽出する	df.sample(n)
散布図の印を黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
リストの折れ線プロットを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの指定したカラムを100の位で丸める	df['列A'].round(-2)
散布図をダークマゼンタ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムを小麦色色を使って描画する	plt.hist(データ列, color='wheat')
option: フォントの色を真紅に設定する	color = 'crimson'
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
多次元データをt分布型確率的近傍埋め込み法で文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
実数の2乗を計算する	x ** 2
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
散布図のバツ印を黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
イテラブルから重複なく、ランダムにn個選んでリスト化する	random.sample(イテラブル, k=n)
オリベドラブ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
折れ線グラフを茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
リストから配列を作る	np.array(aList)
整数が3の倍数	整数 % 3 == 0
option: マーカーをバツに変える	marker = 'x'
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
０で全要素を初期化した３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
文字列は識別子か調べる	文字列.isidentifier()
predicateFuncが真となる列の部分	itertools.takewhile(predicateFunc, iterable)
option: ベージュ色を使用する	color = 'beige'
指定した列の値で集計し、それぞれの最大値を計算する	df.groupby('列A').max()
データシリーズの中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
x,y,zを順に出力する	print(x, y, z)
平均と標準偏差から疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
赤い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
t分布型確率的近傍埋め込み法で整数次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
青いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
８ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
データフレームをソートし、、下の方を取り出す	df.sort_values('キーとなる列').tail(n)
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
ロージーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
ベストな場所にデータラベルを表示する	plt.legend(loc='best')
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
列によってデータフレームをまとめた表を使う	df.groupby('列A')
要素はタプルに含まれないかどうかテストする	要素 not in タプル
データフレームの2つの列を並べて箱ひげ図で作図する	plt.boxplot([df['カラム'], df['カラム']])
動作環境はWindowsか調べる	sys.platform.startswith('win32')
option: フォントの色をダークグレーに変更する	color = 'darkgrey'
ヒストグラムを珊瑚色として描画する	plt.hist(データ列, color='coral')
ファイルをオープンして]バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
散布図の▽マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームから重複を破壊的にドロップする	df.drop_duplicates(inplace=True)
両端キューからポップする	両端キュー.pop()
option: ディムグレー色を用いる	color = 'dimgray'
カテゴリ別で色分けしてにバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
イエローグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
アクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
option: 欠損値も無視しない	dropna = True
要素はタプルの要素かどうか確認する	要素 in タプル
配列と数列について散布図を描いてマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データフレームの数値を全て小数点以下n桁で丸める	df.round(n)
データフレームをグループ化し、最小値を計算する	df.groupby('列A').min()
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
ファイル名がJSONファイルか	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
関数によってデータフレームをグループ分けし、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
n2行n列の2次元リストを作る	[[0] * n for _ in range(n2)]
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列とリストの散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
小数点数の双曲線正弦	math.sinh(x)
数列と数列について散布図を描画して、クロスマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
リストをn倍する	リスト * n
文字列を最後のコロンを用いて二分する	文字列.rpartition(':')
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
マップを空にする	辞書.clear()
データフレームの不偏標準偏差を求める	df.std()
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
現在のUNIXタイム	int(time.time())
データフレームの選択したカラムのNaNを第二四分位数に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
追加できるように既存のファイルを文字コードtextで開く]	open(filepath, mode='a', encoding=text)
ヒストグラムをライトスレイグレー色を使って描画する	plt.hist(データ列, color='lightslategray')
リストと配列について散布図を描いて下三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
データフレームの先頭5行	df.head(5)
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
ある列の値によってデータフレームを集計し、、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
y座標の最大・最小値を変更する	plt.ylim(最小値, 最大値)
データシリーズの中に存在する文字列と文字列の合計を調べる	ds.isin([value, value2]).sum()
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
カラム概要	df.info()
線形モデルの切片を使う	model.intercept_
option: 印の色を変更する	markerfacecolor = '#800080'
リストとリストについて散布図を描いて、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
変数xについて数式の偏微分を行う	sympy.diff(数式, [|変数]x)
option: フォントの色をホワイトに変更する	color = 'white'
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
2つの列からグループ化し、個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
0から始まる無限数列を求める	itertools.count()
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
予測結果の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
要素∈セット	要素 in セット
リストから重複なく、n要素ランダムに抽出する	random.sample(リスト, k=n)
散布図にrgbのポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
整数2がnより大きく、かつ、n3未満か確認する	整数 < 整数2 and 整数2 < n3
リストをシャッフルしてリストにする	random.sample(リスト, len(リスト))
データフレームの選択したカラムの分散	df[['列A', '列B']].var()
グリーンイエローにヒストグラムの色を設定する	plt.hist(データ列, color='greenyellow')
両端キューに整数をプッシュする	両端キュー.append(整数)
リストからn個サンプリングする	random.sample(リスト, k=n)
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
サドルブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: パレットトルコイズにグラフの色を指定する	color = 'paleturquoise'
変数が無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, 変数, oo)
入力ストリーム全体をリストに変換する	[s.strip() for s in f.readlines()]
カウンタを多い順番にリストとして得る	aCounter.most_common()
ダークマゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
データフレームの列をに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの上5行	df.head(5)
指定した列のみ、データフレームの重複を調べる	df.duplicated(subset='列A')
要素ひとつの組	(要素,)
ベクトルの分散	np.var(aArray)
列の全順列を得る	itertools.permutations(iterable)
カテゴリ列で色分けしてデータフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
正規表現patternでデータフレームの一部のカラムの値をまとめて置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
要素がリストの要素でない	要素 not in リスト
ふたつのセットが共通の要素を持たないか調べる	セット.isdisjoint(セット2)
ダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
文字列を最後の部分文字列で二つに分けて、最初の方を使う	文字列.rpartition(部分文字列)[0]
紺色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
カウンタ同士で積集合演算する	aCounter & aCounter2
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームを十の位で丸めて、整数にする	df.round(-1).astype(int)
オブジェクトは辞書クラス	dict = int<nl>isinstance(obj, dict)
イテラブルから長さの制限された両端キューを作る	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
整数が-9以上、9以下	-9 <= 整数 <= 9
データフレームの選択したカラムのNaNを前の行の値に減らす	df[['列A', '列B']].fillna(method='ffill')
データフレームのある列の値がx以上の行を取り出す	df[df['列A'] >= x]
option: 色をライトイエローに設定する	color = 'lightyellow'
t-SNEを用いて整数次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ピアソンでデータフレームの相関行列を算出する	df.corr(method='pearson')
縦方向に2つのデータフレームを連結する	pd.concat([df, df2], axis=0)
印字可能な文字を全て使う	string.printable
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ファイルを文字列の示すエンコーディングで書き込みできるように開く]	open(filepath, mode='w', encoding=s)
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
リストのn番目を削除する	del リスト[n]
ヒストグラムの色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
複数のシートを指定して表計算ファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: グラフの色を貝殻に設定する	color = 'seashell'
列名を指定して２つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
整数を十六進表記の文字列にする	x.hex()
文字列中に小文字がないか調べる	any(not c.islower() for c in 文字列)
複数の列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
ストリーム全体を行単位で分割して読み込む	f.readlines()
小麦色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
空のセット	set()
折れ線グラフをアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='aquamarine')
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
グラフを見やすくする	import seaborn as sns
ファイルを読み込みモードを用いてオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
散布図のポイント印の太さを設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
5行をデータフレームからランダムに抽出する	df.sample(5)
無限にカウントアップする	itertools.count()
データフレームの指定したカラムの標本分散	df['列A'].var(ddof=0)
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
実数のハイパボリック・サイン	math.sinh(x)
ファイル名がテキストファイルかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
破壊的に２つの列を用いてデータフレームを降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
文字列をゼロ埋めする	文字列.zfill(文字列幅)
リストとリストの散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
二つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
アルファベットの大文字を全部使う	string.ascii_uppercase
赤い破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
多次元データをt-SNEで整数次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
アクア色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
散布図をライトイエロー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームの一部のカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
等しい量になるようにn個に配列をビン分割する	pd.qcut(aArray, n)
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
行列を平坦化する	aArray.flatten()
セットの要素数を求める	len(セット)
前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
本日の日付時刻	datetime.datetime.now()
データフレームのカラムのケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
option: シート名を設定する	sheet_name = ['A', 'B']
最頻値でデータシリーズの欠損値を補完する	ds.fillna(ds.mode().iloc[0])
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
カウンタのユニークな項目をリストとして得る	list(aCounter)
オブジェクトはスタックフレームか	inspect.isframe(オブジェクト)
データフレームの選択した列においてどの値が頻出か見る	df[['列A', '列B']].mode()
option: フォントの色をホワイトに設定する	color = 'white'
データフレームのあるカラムが何年か見る	df['列A'].dt.year
折れ線グラフの三角印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
カラムの各データ値の出現数を求める	df[col].value_counts()
option: グラフの線の幅を3.0ポイントに指定する	linewidth = 3.0
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
赤いグリッド線を引く	plt.grid(color='r')
横棒プロットを描画して棒の幅をセットする	plt.barh(ラベル列, データ列, width=0.5)
文字列を文字コード列に変換する	[ord(ch) for ch in 文字列]
ふたつの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
箱髭図としてデータ列を可視化する	plt.boxplot(データ列)
SDGとして回帰分析をする	model = sklearn.linear_model.SGDRegressor()
太字化する	f'\033[1m{x}\033[0m'
xを下線付き化する	f'\033[4m{x}\033[0m'
option: グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームの列名の一覧	df.columns
ファイルパスからストリームを読み込んで、fileとする	file = open(filepath)
散布図に△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データフレームの指定したカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
データフレームの選択したカラムの欠損値を直前の値で補う	df[['列A', '列B']].fillna(method='ffill')
option: ペルーを使う	color = 'peru'
異なる列をキーにしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
データフレームの中に文字列と日付データがあるか調べる	df.isin([value, value2])
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
ファイル名がJSONファイルか調べる	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
データシリーズが何曜日か知る	ds.dt.weekday_name
データフレームの選択したカラムを1000の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
option: ビスク色を用いる	color = 'bisque'
リストを縦軸、データ列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
入力ストリームから1バイト、読む	f.read(1)
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
辞書のキーに対応した値	辞書[キー]
予測値とデータの離れ具合をグラフ化する	sns.residplot(x='列名', y='列名', data=df)
データ列のUNIX時間を日付データにする	pd.to_datetime(ds, unit='s', utc=True)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データフレームのあるカラムを欠損値も加えてワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], dummy_na=True)
option: 青紫色を用いる	color = 'violet'
ピアソンでデータフレームの相関行列を求める	df.corr(method='pearson')
整数の2進文字列を見る	bin(整数)[2:]
option: 色をシアンに変更する	color = 'cyan'
ランダムフォレストでクラス分類をする	model = sklearn.ensemble.RandomForestClassifier()
option: フォントの色を耐火レンガにする	color = 'firebrick'
線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
データフレームから指定した２つの列のみ抽出する	df[['列A', '列B']]
折れ線グラフの色をゴールドにする	plt.plot(データ列x, データ列y, color='gold')
逆双曲線余弦を求める	math.acosh(x)
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
option: 先頭のカラムをインデックスに指定する	index_col = 0
日付データの年数	aDate.year
パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
option: ゴールデンロッド色を使う	color = 'goldenrod'
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
縦棒グラフの色を真紅にする	plt.bar(データ列x, データ列y, color='crimson')
オブジェクトは文字列クラスか調べる	str = int<nl>isinstance(obj, str)
プロットにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
ライトグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
部分文字列の位置を文字列の先頭から探す	文字列.find(部分文字列)
カテゴリ列でグループ化して、データフレームの全列の相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
散布図に赤いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
n×n2の２次元リスト	[[0] * n for _ in range(n2)]
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
option: 淡いピンク色にグラフの色を設定する	color = 'lightpink'
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
フォーマットを用いてカラムをタイムスタンプ型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
実数が負の数かどうか	x < 0
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
疑似乱数平均値と標準偏差からを求める	random.normalvariate(mu=0.5, sigma=0.2)
棒グラフをダークサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
リストとリストの散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
二つの浮動小数点数が近似値かどうか調べる	math.isclose(x, x2)
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
文字列中に数字が含まれる	any(c.isdigit() for c in 文字列)
option: ミディアムパープルに色を設定する	color = 'mediumpurple'
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategray')
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
両端キューの要素を左にローテーションする	両端キュー.rotate(-1)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
option: データ型として８ビット整数型を使う	np.int8 = np.int<nl>dtype = np.int8
文字列中からパターンにケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
二つの整数の積をが欲しい	整数 * 整数2
option: 大バツマーカーを使用する	marker = 'X'
横軸の目盛りを対数に変更する	plt.xscale('log')
点線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
データシリーズが正規分布からどの程度、尖っているか見る	ds.skew()
方程式として数式のパラメータの解を計算する	sympy.solve(数式, y)
文字列をJSON文字列に変換する	json.dumps(文字列, ensure_ascii=False)
データフレームをある列によってまとめたグループ	df.groupby('列A')
option: シルバー色を使用する	color = 'silver'
ヒストグラムの色をペルーにセットする	plt.hist(データ列, color='peru')
CSVファイルファイル名がか調べる	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
データフレームの選択したカラムを百の位で丸める	df[['列A', '列B']].round(-2)
プロットの色使いを明るくする	sns.set(pallete='bright')
線を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
カラーテーマを全般的に明るくする	sns.set(pallete='bright')
折れ線グラフをカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='khaki')
ゼロ埋めされた三二ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
タプルの最初のn要素を除く	タプル[n:]
タイムスタンプを使う	import time
option: レモンシフォンにグラフの色をセットする	color = 'lemonchiffon'
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
日付時刻データが水曜日	aDatetime.weekday() == 2
データフレームの全列を散布図でグラフ化する	sns.pairplot(df)
句点文字を全て使う	string.punctuation
データシリーズを百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
両端キューの要素数	len(両端キュー)
整数を右シフトする	整数 >> n
イテラブルのイミュータブルな集合を使う	frozenset(イテラブル)
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
ベクトルの平均値を求める	np.mean(aArray)
３自然数のGCD	math.gcd(n, n2, n3)
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
割合付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
整数が1、もしくは2	整数 == 1 or 整数 == 2
オブジェクトがタプルクラスか調べる	tuple = int<nl>isinstance(obj, tuple)
文字列の右側から余分な空白を取り除く	文字列.rstrip()
ゼロ埋めされた３二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
option: グラフの種類を実線に設定する	linestyle = 'solid'
データフレームの指定したカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
大文字を全て使う	string.ascii_uppercase
赤い四角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
K最近傍法で回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ダークマゼンタ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
タプルの先頭のn要素を捨てる	タプル[n:]
今日の月数	datetime.datetime.today().month
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をアクアマリンに変更する	color = 'aquamarine'
散布図に赤い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
実行中の関数の名前を得る	inspect.currentframe().f_code.co_name
空のチェーンマップ	collections.ChainMap()
xを黄色にする	f'\033[33m{x}\033[0m'
散布図に左三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='<')
赤い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
option: ダークゴールデンロッドを使用する	color = 'darkgoldenrod'
整数2がn以上かつn3以下	整数 <= 整数2 and 整数2 <= n3
縦棒グラフを青色を用いて描画する	plt.bar(データ列x, データ列y, color='blue')
ロバストなクラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
Pandasのバージョンを表示する	print(pd.__version__)
文字列のプレフィックスがsubか	文字列.startswith(部分文字列)
option: 黄緑色を使う	color = 'chartreuse'
データフレームのある列の値がxに等しい行を抽出する	df[df['列A'] == x]
分類木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
表データの次元の大きさを確認する	df.shape
数式の積分を行う	sympy.integrate(数式)
文字列の長さを使う	len(文字列)
日付時刻データをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフをオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orchid')
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgray')
エラーなくセットから文字列を除去する	セット.discard(文字列)
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
JSON形式のバイト列を構文解析する	json.loads(バイト列.decode('unicode-escape'))
データフレームの中央値を求める	df.median()
オブジェクトはある型	isinstance(obj, クラス)
２つの文字列がケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
データフレームの第三四分位数	df.quantile(0.75)
タブ文字	'\t'
リストのn番目からn2番目までを取り出す	リスト[n:n2]
標準出力を見る	sys.stdout
データフレームから一つの列を取り出す	df[['列A']]
整数がセットのいずれ	数 in セット
タプルが全て真か調べる	all(タプル)
ファイルパスを追加できるようにオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
外れ値に強い線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
データフレームの指定した列の空文字をドロップする	df['列A'].replace('', np.nan).dropna()
文字列∈セット	文字列 in セット
ブランチドアーモンド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
マルーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='maroon')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
データフレームの指定したカラムの母標準偏差を求める	df['列A'].std(ddof=0)
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データシリーズの中のNaNの合計をカウントする	ds.isna().sum()
リストとイテラブルの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
空文字列を使う	''
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
データフレームの指定したカラムの欠損値を平均値に減らす	df['列A'].fillna(df['列A'].mean())
文字列をJSON形式としてファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
ファイル入力をJSONとしてパースする	json.load(ファイル入力)
ユニークな要素ごとの出現回数	np.unique(aArray, return_counts=True)
シンボル計算を使う	import sympy
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
リストとリストの散布図をプロットして、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
キュー中の文字列の出現数を数える	両端キュー.count(文字列)
データフレームの文字列を未入力値にする	df.replace(値, np.nan)
配列の変化を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
カテゴリ別で色分けしてカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列をコロンで二分する	文字列.partition(':')
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
整数を八進数文字列に変換する	oct(整数)[2:]
縦棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データ列を閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データシリーズのNaNをxにする	ds.fillna(x)
縦棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
ファイルパスの区切り記号を使う	os.sep
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
縦棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
ファイルのファイル名	os.path.basename(filepath)
イテラブルから重複を取り除く	set(イテラブル)
オブジェクトが抽象クラス	inspect.isabstract(オブジェクト)
option: ▽印を使う	marker = 'v'
折れ線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
▲印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
整数の5乗をが欲しい	整数 ** 5
option: シスルを使う	color = 'thistle'
シーケンスを無限に繰り返す	itertools.cycle(iterable)
ふたつの列を組み合わせてグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
棒グラフをターコイズ色として描画する	plt.bar(データ列x, データ列y, color='turquoise')
ヒストグラムをインディアンレッド色を用いて描画する	plt.hist(データ列, color='indianred')
双方向キューの末尾に文字列を追加する	両端キュー.append(文字列)
ダークスレートブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
データ列の偏りを平方根する	np.sqrt(データ列)
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
リストの要素を文字列として、'改行で一つにする	'\n'.join(map(str, リスト))
折れ線グラフをパールゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームの選択したカラムの標準偏差を計算する	df[['列A', '列B']].std()
円プロットを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
入力から２つの浮動小数数値を取り出す	A, B = map(float, input().split())
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
整数を符号付きでバイト列にする	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
▼印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
option: セパレータを使わない	sep = ''
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
折れ線グラフを一点鎖線にセットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: フォントの色をオーキッドに設定する	color = 'orchid'
データシリーズの空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ダークオレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
ヒストグラムをダーク・スラテグレー色として描画する	plt.hist(データ列, color='darkslategrey')
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
要素がリストの要素か調べる	要素 in リスト
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
三自然数のLCM	math.lcm(n, n2, n3)
データフレームを四捨五入する	df.round()
整数が配列のどれかかどうか	aArray = [0, 1, 2]<nl>整数 in aArray
データフレームをカラムでまとめたグループ	df.groupby('列A')
option: 印をダイアモンドに設定する	marker = 'D'
実数が無限大かどうかテストする	math.isinf(x)
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
データフレームから数値データの列だけ抽出する	df.select_dtypes('number')
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
実数の仮数部	math.frexp(x)[0]
option: フォントの色をマゼンタに変更する	color = 'magenta'
列をセットに追加更新する	セット.update(リスト)
改行なしにxとyをプリントする	print(x, y, end='')
データフレームの指定した列の標本標準偏差	df['列A'].std(ddof=1)
option: 改行なし	end = ''
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
作画の背景色を白くする	sns.set(style='whitegrid')
順序を保持しながらリストから重複を取り除く	sorted(set(リスト), key=リスト.index)
表の内容を調べる	df.head()
数式のyについてのn階微分を行う	sympy.diff(数式, y, n)
文字列を後ろから区切り記号で区切る	文字列.rsplit(セパレータ)
散布図のマーカーの太さを変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
作画に用いるフォントを指定する	sns.set(font=フォント名)
データフレームのある列の中にあるの合計を求める	df['列A'].isin([value]).sum()
整数のn分の1	整数 / n
option: 左三角印を加える	marker = '<'
文字列を文字コードによってバイト列にする	文字列.encode(encoding=encoding)
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
サドルブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
凡例を加える	plt.legend(['凡例A', '凡例B'])
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
配列から重複を取り除く	set(配列)
インデックスを付けずデータフレームをCSVファイルに出力する	df.to_csv('file.csv', index=None)
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
文字列中に小文字が含まれないかどうか調べる	any(not c.islower() for c in 文字列)
データフレームを関数の値ごとにグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
ある列のカテゴリで集計し各個数を求める	df.groupby('列A').count()
option: パウダーブルーを使う	color = 'powderblue'
文字列の開始位置以降に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置) == -1
option: タン色を用いる	color = 'tan'
コマンドラインフラグの状態	sys.flags
option: インデックスを自動的な連番に変更する	index_col = None
イテラブルを配列に変換する	np.array(iterable)
ふたつのセットはdisjointか確認する	セット.isdisjoint(セット2)
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
全要素を０で初期化した整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int)
線グラフの色をディムグレーにする	plt.plot(データ列x, データ列y, color='dimgrey')
スタックの順序を左に回転させる	両端キュー.rotate(-1)
自然数の順列の総数を算出する	math.perm(n)
文字列をコロンによって区切って列挙する	文字列.split(':')
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をライトスレイグレーにする	plt.plot(データ列x, データ列y, color='lightslategrey')
部分文字列を文字列のサフィックスから除去する	文字列.removesuffix(部分文字列)
データフレームのヒストグラムを縦横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
縦棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
グリッド線	plt.grid(color='#800080')
ライトスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
両端キュー中の要素の数を数える	両端キュー.count(要素)
データフレームをBOMを付けて保存する	df.to_csv('file.csv', encoding='utf_8_sig')
変数の値を整数分の一にする	変数 /= 整数
散布図をブラック色を使って描画する	plt.scatter(データ列x, データ列y, color='black')
列の尖度	df['列A'].skew()
データ列を等量で分割数nとしてビン分割する	pd.qcut(ds, n)
行列の行列積	np.matmul(aArray, aArray2)
データフレームの列の文字列をNaNにする	df['列A'].replace(値, np.nan)
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
要素がタプルの要素でないか調べる	要素 not in タプル
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
プロットに鉛直方向の実線をつける	plt.axvline(x=0, linestyle='solid')
タプルの末尾	タプル[-1]
数式の数値を求める	float(数式)
改行なしに複数の計算結果をプリントする	print(式, 式, end='')
ふたつの集合の共通部分を算出する	セット.intersection(セット2)
縦棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
タイムスタンプデータが日付時刻データより後ろ	aDatetime > aDatetime2
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
数列からひとつランダムに選んでリストにする	random.choice(数列)
マップから項目名とバリューのペアを取り出しひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
データシリーズの文字列を未入力値に変換する	ds.replace(値, np.nan)
option: ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
円グラフを用いて配列の割合を作図する	plt.pie(データ列, startangle=90)
多次元データを特異値分解として文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
複数の列を組み合わせてグループ化し、標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
配列を2回あわせた直積	itertools.product(iterable, repeat=2)
1行分標準入力から改行なしで読み込む	sys.stdin.readline().rstrip()
線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
整数が整数2より小さいか	整数 < 整数2
Pandasのバージョンを見る	print(pd.__version__)
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データシリーズのNaNを直前の値で埋める	ds.fillna(method='ffill')
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をミディアムスレートブルーに指定する	plt.hist(データ列, color='mediumslateblue')
新しいヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
アクア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームの末尾100行を取り出す	df.tail(100)
数式を簡単にする	sympy.sympify(数式)
イテラブルをセットに追加する	セット.update(リスト)
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
ダークグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
整数の3分の一	整数 / 3
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
データフレームを複数の列を用いてソートして、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
配列の次元を変形する	aArray.reshape(行数, 列数)
列の欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
カウンタをイテラブルをカウントして更新する	aCounter.update(iterable)
リストが少なくともひとつ真	any(リスト)
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの欠損値を数値で補う	df.fillna(x)
ダークターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
青いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
プロットの補足の位置を(x,y)に設定する	plt.legend(loc=(x, y))
数列をダミー変数に変換する	pd.get_dummies(数列)
要素がリストの要素でないか調べる	要素 not in リスト
指定したカラムを四捨五入して、整数にする	df['列A'].round().astype(int)
x軸を対数に変更する	plt.xscale('log')
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: フォントの色をライトグリーンに指定する	color = 'lightgreen'
横方向に２つのデータフレームを連結する	pd.concat([df, df2], axis=1)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
サドルブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
CSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
要素がセットのメンバーに含まれないかどうか判定する	要素 not in セット
整数がセットのいづれか	aSet = [0, 1, 2]<nl>整数 in aSet
リストとリストについて散布図を描いて下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
黄色いグリッド線を引く	plt.grid(color='y')
データフレームを各列毎にグループ化して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
二つの列の値によってデータフレームをまとめたグループを求める	df.groupby(['列A', '列B'])
xが無限大に近づくときの数式の極限値を求める	sympy.limit(数式, [|変数]x, oo)
棒グラフをオレンジレッド色を使って描画する	plt.bar(データ列x, データ列y, color='orangered')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
ファイルを追加用に開く]	'a' = 'a'<nl>open(filepath, mode='a')
オブジェクトがスタックフレーム	inspect.isframe(オブジェクト)
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームをグループ化し、それぞれの分散を求める	df.groupby('列A').var()
xを文字列に変換する	str(x)
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
データフレームを二つの列によって集約し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
英字の小文字列	string.ascii_lowercase
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
グラフに格子線を加える	plt.grid(True)
タイムスタンプデータは何年か知る	aDatetime.year
データフレームの一部の列を百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
最大値・最小値の範囲で一様な乱数を生成する	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
グラフの見栄えをデフォルトでいい感じに変更する	sns.set()
option: ライトブルーにグラフの色を設定する	color = 'lightblue'
日付データが木曜日かどうか	aDate.weekday() == 3
列をビン分割する	pd.cut(ds, aList)
両端キューの先頭	両端キュー[0]
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
xを浮動小数点数に変換する	float(x)
データフレームの選択した列の平均	df[['列A', '列B']].mean()
両端キューに整数をenqueueする	両端キュー.append(整数)
データフレームを複数の列で降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
option: ペルーにグラフの色を設定する	color = 'peru'
option: 色をライムグリーンに設定する	color = 'limegreen'
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
ヒストグラムの色をマゼンタにする	plt.hist(データ列, color='magenta')
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
ふたつの列からグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
折れ線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をホワイトに変更する	plt.hist(データ列, color='white')
縦棒グラフを描いて、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
データフレームを表示するとき、折り返しを無効に指定する	pd.set_option('expand_frame_repr', False)
ふたつの条件のうちいずれか成り立つ	条件 or 条件2
文字列を最後のセパレータで分けたときの後半の文字列を取り出す	文字列.rpartition(セパレータ)[-1]
リストと配列の散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
識別子は非同期ジェネレータ関数	inspect.isasyncgenfunction(識別子)
数を文字列にする	str(x)
表データのあるカラムが何時か見る	df['列A'].dt.hour
ナバホホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='navajowhite')
データフレームのカラムのピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
文字列がセットのメンバーでないかどうか確認する	文字列 not in セット
イテラブルと数列の散布図にrgbの▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='gray')
整数を16進数表現にする	hex(整数)
データフレームを連結する	# concat<nl>pd.concat([df, df2])
文字列の開始位置以降に部分文字列が含まれるかどうか調べる	文字列.find(部分文字列, 開始位置) != -1
データフレームのある列の値がx以上の行を抽出する	df[df['列A'] >= x]
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
ファイルからフォルダ名取り出す	os.path.dirname(filepath)
データフレームのNaNをメディアンに設定する	df.fillna(df.median())
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
マッピングを階層化する	collections.ChainMap(aDict)
今日の年数	datetime.datetime.today().year
オブジェクトの参照カウントを見る	sys.getrefcount(オブジェクト)
ティール色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
option: エラーがあるとき例外を発生させるように設定する	errors = 'strict'
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
文字列の開始位置からと終了位置までの間に部分文字列が存在しないかどうか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
要素はセットに含まれない	要素 not in セット
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
非数値データ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
複数のシートを表計算ファイルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームのあるカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
ヒストグラムの色を青紫にする	plt.hist(データ列, color='violet')
マッピングにキーがあるかどうか確認する	キー in 辞書
数列とリストについて散布図をプロットして、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: エンコーディングを文字コードtextに設定する	encoding = text
高頻出方からカウンタを列挙する	aCounter.most_common()
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
CSVファイルでデータフレームを書き出す	df.to_csv('file.csv')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
データフレームのカラムを目的変数にする	目的変数 = df['列名']
単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
option: ビスクを使う	color = 'bisque'
折れ線グラフを赤い点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
数式の変数の解を方程式として求める	sympy.solve(数式, y)
タプルの最初を除く	タプル[1:]
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
文字列をユニコードエスケープでバイト列に変換する	文字列.encode(encoding='unicode_escape')
option: ロイヤルブルーを使用する	color = 'royalblue'
リストとリストについて散布図を描画して、丸マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
option: 追加モードに変更する	mode = 'a'
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
セットから文字列を除去する	セット.remove(文字列)
データ列をビン数nを使ってビニングする	pd.cut(ds, n)
乱数シードをnで初期化する	random.seed(n)
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
散布図を黒いポイントマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
整数が-9以上、9以下か調べる	-9 <= 整数 <= 9
数値でデータフレームの欠損値を埋める	df.fillna(x)
オブジェクトはリストかタプルかどうか	isinstance(obj, (list)
箱ひげ図をプロットして、平均線を加える	plt.boxplot(データ列, meanline=True)
シエナ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
文字列を最後の区切り記号で二分して、前半を使う	文字列.rpartition(セパレータ)[0]
未定値	None
辞書をJSONフォーマットにエンコードする	json.dumps(辞書, ensure_ascii=False)
deqのn番目の要素	両端キュー[n]
データフレームの一部のカラムの中にいくつ欠損値が存在するか数える	df[['列A', '列B']].isna().sum()
縦棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
整数が偶数かテストする	整数 % 2 == 0
データフレームをCSVファイルにBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
データフレームの名前リストで指定した列を除く	df.drop(columns, axis=1, inplace=True)
中央値で配列を分割する	pd.qcut(aArray, 2)
データ列を箱ヒゲ図で図示する	plt.boxplot(データ列)
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
配列の偏差値を求める	50 + 10 * scipy.stats.zscore(配列)
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ファイルにxを文字列にして書く	x = 0<nl>f.write(str(x))
セットにリストの要素を全て追加する	セット.update(リスト)
散布図を赤い▽マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='r')
小数点以下'1'桁までを出力する	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
正規分布による累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
整数が組のどれか	aTuple = [0, 1, 2]<nl>整数 in aTuple
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
配列間の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
データフレームのあるカラムの曜日は何日目か見る	df['列A'].dt.dayofweek
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
option: オーキッドを使用する	color = 'orchid'
リストのヒストグラムを描く	plt.hist(データ列)
データシリーズが何秒か知る	ds.dt.second
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームの指定した列の未入力値を最頻値で補完する	df['列A'].fillna(df['列A'].mode().iloc[0])
オブジェクトはバイト列型	bytes = int<nl>isinstance(obj, bytes)
FIXME	np.linalg.eig(aArray)
三二ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
数列を複数横に並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
rgbの▲マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
行列の行ごとの分散を求める	np.var(aArray, axis=1)
アリスブルーにヒストグラムの色を変更する	plt.hist(データ列, color='aliceblue')
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
右三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
実数の小数部	math.modf(x)[0]
要素は辞書の値として含まれているかどうかテストする	element in 辞書.values()
データフレームのカラムのスピアマンの相関係数を使う	scipy.stats.spearmanr(df['列A'], df['列B'])
JSON形式でリストをファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
変数について数式をn階偏微分する	sympy.diff(数式, 変数, n)
option: 色をスチールブルーに設定する	color = 'steelblue'
複素数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=bool)
データフレームのn行以降を抽出する	df[n:]
文字列を区切り記号で二つに分けて、後半を見る	文字列.partition(セパレータ)[-1]
option: リネン色を用いる	color = 'linen'
文字を新しい文字へ置き換える	文字列.replace(部分文字列, 置換後の文字列)
追加モードでファイルをオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
両端キュー中の整数の数をカウントする	両端キュー.count(整数)
散布図に▼マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
表データのあるカラムが何日か調べる	df['列A'].dt.day
データフレームのカラムの各値の出現数	df[col].value_counts()
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
数列から一つランダムに選んでリストにする	random.choice(数列)
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
表データのあるカラムは何時か見る	df['列A'].dt.hour
データフレームをグループ化し、あるカラムに対し個数を算出する	df.groupby('列A')['列B'].count()
リストから1個ランダムに選んでリストにする	random.choice(リスト)
リストからランダムにひとつ選んでリストにする	random.choice(リスト)
辞書の全項目をクリアする	辞書.clear()
散布図の▽マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
現在のエポック秒	int(time.time())
スピアマンでデータフレームの相関行列を求める	df.corr(method='spearman')
点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
データフレームの選択したカラムの中に含まれる文字列との合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
散布図の星印を赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
リストの要素を昇順にソートする	sorted(リスト, reverse=False)
整数の8分の1	整数 / 8
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
データフレームを２つの列によって並べて、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: レモンシフォン色を使用する	color = 'lemonchiffon'
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgray')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
プロットを用いる	import matplotlib.pyplot as plt
実数の平方根	math.sqrt(x)
データフレームをエクセルファイルからシートの名前を指定して読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
文字列をソートしてJSONフォーマットにエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
青いグリッド線を引く	plt.grid(color='b')
グラフを全般的に淡くする	sns.set(pallete='muted')
散布図をrgbの菱形マーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
SJISで文字列をバイト列に変換する	文字列.encode(encoding='sjis', errors='ignore')
option: スラグレー色を用いる	color = 'slategrey'
option: BOM付きを使う	encoding = 'utf_8_sig'
横棒グラフを青緑色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
グラフの背景色を白くする	sns.set(style='whitegrid')
rgbの左三角マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: 標準出力を出力にする	file = sys.stdout
option: マーカーをダイアモンドに指定する	marker = 'D'
等量で分割数nでデータ列をビン分割する	pd.qcut(ds, n)
数列を集合にする	set(数列)
文字列を最初の部分文字列で二分し、、前の方を使う	文字列.partition(部分文字列)[0]
現在は何曜日か知る	datetime.datetime.today().weekday()
実数は無限大かどうかテストする	math.isinf(x)
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ブランチドアーモンド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
線グラフの色をネイビーにする	plt.plot(データ列x, データ列y, color='navy')
データフレームを配列に変換する	df.values
双方向キューを作る	両端キュー = collections.deque()
回帰木をグラフにする	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
表データを複数の列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
文字列の末尾から安全に部分文字列を除去する	文字列.removesuffix(部分文字列)
赤い左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
その第二四分位数でデータフレームの一部の列の欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ヒストグラムの色をスレートブルーにする	plt.hist(データ列, color='slateblue')
散布図のポイント印を青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
変数名が非同期ジェネレータ関数	inspect.isasyncgenfunction(識別子)
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
グラフのグリッドを暗くする	sns.set(style='darkgrid')
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
行列式	np.linalg.det(aArray)
ヒストグラムの色をマゼンタにセットする	plt.hist(データ列, color='magenta')
線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
option: ダークバイオレット色を使う	color = 'darkviolet'
データフレームをグループ化し、各個数を求める	df.groupby('列A').count()
二つのリストのインターセクション	list(set(リスト).intersection(set(リスト2)))
配列を分割数nで分割する	pd.cut(aArray, n)
線グラフをドジャーブルー色を使って描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームのあるカラムの値がx以上の行を取り出す	df[df['列A'] >= x]
二つの条件のうち何か成り立つ	条件 or 条件2
辞書にキーが存在するとき、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ファイルをオープンして]、読み込みストリームを見る	'r' = 'a'<nl>open(filepath, mode='r')
文字列を特殊文字も含め小文字にする	文字列.casefold()
日付時刻データの年数	aDatetime.year
ふたつのセットは共通の要素を持たない	セット.isdisjoint(セット2)
線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
小数点以下'1'桁までをプリントする	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
データフレームを整列し、、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
折れ線グラフに四角印を使う	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
配列の累積和	np.cumsum(aArray)
文字列中にひとつも数字がないかどうか	any(not c.isdigit() for c in 文字列)
線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
折れ線グラフの星マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: フォントの色をペールグリーンに指定する	color = 'palegreen'
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
データフレームの選択したカラムの欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
データフレームをBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
クラス分類をガウス過程でする	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの中にがあるか調べる	df.isin([value])
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列の末尾から指定した文字を取り除く	文字列.rstrip(文字)
数列の出現頻度を図示する	plt.hist(データ列)
両端キューの中に要素が含まれてるか調べる	要素 in 両端キュー
散布図でデータフレームを可視化して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
外れ値を除いた配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
RANSACとしてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
日付と時間からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
option: 行方向に計算する	axis = 1
指定したカラムのNaNを最小値に変更する	df['列A'].fillna(df['列A'].min())
データ列の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='grey')
色付きの破線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
リストを文字列として、指定した文字を用いて連結する	文字.join(map(str, リスト))
リストから両端キューを新規生成する	collections.deque(リスト)
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
線グラフの線の種類を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの選択したカラムの欠損値を最大値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
配列の散布図を描画する	plt.scatter(データ列x, データ列y)
リストとリストの散布図をプロットし、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
option: グラフの色をライトスカイブルーにセットする	color = 'lightskyblue'
棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームの一部の列の欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: 色をグレーに変更する	color = 'gray'
データフレームの指定したカラムの空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
実数の双曲線正弦の逆数	math.asinh(x)
ファイルを読み込みモードで開く]	'r' = 'a'<nl>open(filepath, mode='r')
両端キューの最後に文字列を追加する	両端キュー.append(文字列)
rgbのダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
縦棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
珊瑚色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
双方向キューの先頭に整数を追加する	両端キュー.appendleft(整数)
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: エラーを無視するようにセットする	errors = 'ignore'
option: フォントの色をオリベドラブにセットする	color = 'olivedrab'
ファイルパスを書き込みモードでオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
タプルを空白区切りでプリントする	print(*タプル)
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ラインを色付きの実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
標準入力を使用する	sys.stdin
データフレームから10行を重複を認めてランダムにサンプリングする	df.sample(10, replace=True)
要素はリストに含まれるか調べる	要素 in リスト
日付データにn分を加える	aDate + datetime.timedelta(minutes=n)
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
複数の文字列を順に出力する	print(文字列, 文字列, 文字列)
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
オブジェクトが辞書か確認する	dict = int<nl>isinstance(obj, dict)
文字列がリストにある	文字列 in リスト
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ベクトルのムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
文字列の右端から指定した文字を消す	文字列.rstrip(文字)
整数のn分の一	整数 / n
リストを分割数nでビニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
あるカラムの欠損値を最大値で補う	df['列A'].fillna(df['列A'].max())
データフレームのあるカラムをValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
ニューラルネットとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
漢字が文字列中に含まれるか	re.search('[\u4E00-\u9FD0]', 文字列)
option: グラフの色をインディアンレッドに変更する	color = 'indianred'
整数はタプルのどれかかどうか	aTuple = [0, 1, 2]<nl>整数 in aTuple
タプルの末尾の要素	タプル[-1]
データフレームの相関行列をヒートマップとしてグラフ化する	sns.heatmap(df.corr())
整数の二進文字列を使う	bin(整数)[2:]
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
データシリーズの値は欠損値か	ds.isna()
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフをダークカーキ色を使って描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
グリーンイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
数列をひとつの文字列にする	''.join(map(str, 数列))
データフレームの先頭5行	df.head(5)
日付をインポートする	import datetime
整数の三乗を求める	整数 ** 3
リストとイテラブルについての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
プロットのデータラベルの場所を指定する	plt.legend(loc=(x, y))
option: タブを区切りで使用する	sep = '\t'
イテラブルとリストについて散布図を描画してマーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
最後からカンマで文字列を区切る	文字列.rsplit(',')
yについてのn階偏微分を行う	sympy.diff(数式, y, n)
ブルーバイオレット色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
二つのオブジェクトが同一参照か調べる	obj is obj2
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
リストから重複なくn個ランダムに抽出する	random.sample(リスト, k=n)
コロンで文字列を二分し、前半を使う	文字列.partition(':')[0]
線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
サポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データシリーズの欠損値を最頻値にセットする	ds.fillna(ds.mode().iloc[0])
文字列が正規表現にマッチさせる	re.match(pattern, s)
データフレームの指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
等間隔の配列を初期化する＼	np.arange(開始値, 終了値, 等差)
option: 左三角印を使う	marker = '<'
option: どの行もカラムの名前に設定しない	header = None
二つのデータフレームを合体させる	# concat<nl>pd.concat([df, df2])
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
２つの列を用いてデータフレームを並べる	df.sort_values(by=['列A', '列B'])
スピアマンで表データの相関行列を求める	df.corr(method='spearman')
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
変数名をキーとして、マップ	dict(name='kogi', age=6)
茶色色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ヒストグラムをロイヤルブルー色として描画する	plt.hist(データ列, color='royalblue')
文字列をJSON形式でファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
入力から二つの浮動小数数を読み込む	A, B = map(float, input().split())
数列から両端キューを作る	collections.deque(数列)
リストとリストについて散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
三つの変数を順に出力する	print(変数名, 変数名, 変数名)
両端キューの先頭に要素を追加する	両端キュー.appendleft(要素)
縦棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフのポイント印を黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
シルバー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
散布図の丸マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
数値はセットのいずれかどうか	数 in セット
データフレームの先頭n行	df.head(n)
フォーマットでカラムを日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
新しいサポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
変数の値を増加させる	変数 += 整数
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
リストの最後を捨てる	リスト[:-1]
オレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
アルファベットの小文字を全部使う	string.ascii_lowercase
全要素が初期値の行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
配列とリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: 四角印を描画する	marker = 's'
識別子はコード	inspect.iscode(識別子)
両端キューが空でない	len(両端キュー) != 0
データフレームをグループ化し、ある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
option: パールバイオレットレッドにグラフの色を変更する	color = 'palevioletred'
行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
日付時刻データのタイムゾーンを見る	aDatetime.timetz()
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
option: セパレータをカンマにする	sep = ','
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
直前の値でデータフレームの選択したカラムの未入力値を埋める	df[['列A', '列B']].fillna(method='ffill')
箱ひげ図を描画して、平均を追加する	plt.boxplot(データ列, showmeans=True)
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
リストと配列について散布図を描画して、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
整数が整数2よりも大きいか	整数 > 整数2
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
year年のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
文字列の先頭で正規表現に複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データシリーズのNaNをxに指定する	ds.fillna(x)
折れ線グラフの色をロージーブラウンにセットする	plt.plot(データ列x, データ列y, color='rosybrown')
ベクトルの要素ごとに加算する	aArray + aArray2
整数の二進数文字列	bin(整数)[2:]
配列の標準誤差を計算する	scipy.stats.sem(配列)
y座標の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
ヒストグラムの線のスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
オリーブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
x座標の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
色付きの一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
数値がセットのいずれでもないどうか	数 not in セット
実数の２乗	x ** 2
実数の小数点を四捨五入する	round(x)
リストが全て真	all(リスト)
ヒストグラムをミディアムスレートブルー色として描画する	plt.hist(データ列, color='mediumslateblue')
テンプレをarg文字列を引数としてフォーマットする	書式.format(*args)
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
文字列の中の大文字・小文字を無視して正規表現によるマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
実数の双曲線正弦の逆数を求める	math.asinh(x)
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
折れ線グラフの四角印の色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
イテラブルとリストの散布図をプロットし、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
option: デピンク色を用いる	color = 'deeppink'
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
配列と数列の散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ロイヤルブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
数を実数で割った余り	x % y
整数をキューの末尾に追加する	両端キュー.append(整数)
変数xについて数式を積分する	sympy.integrate(数式, [|変数]x)
二つの文字列がケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
文字列の中でケースを無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストと配列について散布図を描画してマーカーをクロスに変更する	plt.plot(データ列x, データ列y, marker='x')
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
データフレームのn行目を取り出す	df.loc[n]
黒いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
点線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの中の列をリストを境界値としてビニングする	pd.cut(df[col], aList)
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
イテラブルを２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ライトグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
データフレームのある列を選ぶ	df['列A']
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
フォレストグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='forestgreen')
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
データフレームの一部のカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
リストとデータ列について散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
２つのカラムによって破壊的にデータフレームを小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
全要素が初期値の行列を初期化する	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームからカラムを三つのみ選択する	df[['列A', '列B', '列C']]
線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
散布図の▼マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
ミディアムスレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
配列とリストの散布図をプロットして、マーカーを▼にセットする	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列を最後のコロンで二分して残りを見る	文字列.rpartition(':')[-1]
エクセルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
データフレームの欠損値を平均で置換する	df.fillna(df.mean())
エクセルファイルファイルからCSVファイルを文字化けしないように読む	pd.read_csv('file.csv', encoding='shift_jis')
データフレームの指定したカラムの欠損値を平均に指定する	df['列A'].fillna(df['列A'].mean())
文字列中にひとつでも非英字が存在するかどうか	any(not c.isalpha() for c in 文字列)
書き込み用にBOM付きでファイルを開く]	open(filepath, mode='w', encoding='utf_8_sig')
option: ロイヤルブルーに色を指定する	color = 'royalblue'
TSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
二つのセットは交わりを持たないか調べる	セット.isdisjoint(セット2)
KNNを用いてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
カテゴリデータを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
数列と配列の散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
Excelファイルファイルからカンマ区切りのファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
両端キューの末尾に要素を入れる	両端キュー.append(要素)
option: データ型を指定する	np.int = np.int<nl>dtype = np.int
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
目盛線	plt.grid(linewidth=3.0)
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
現在が日曜日か調べる	datetime.datetime.today().weekday() == 6
文字をASCIIコードにする	ord(文字)
縦棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
辞書の項目数を得る	len(辞書)
パパイヤウィップにヒストグラムの色を変更する	plt.hist(データ列, color='papayawhip')
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
option: ライムを使う	color = 'lime'
文字コードで文字列をバイト列に変換する	文字列.encode(encoding=encoding)
リストのn番目の	リスト[n]
空列を作る	[]
Pythonパス	sys.path
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
データフレームの歪度	df.kurt()
文字列中にひとつもアルファベットが含まれないか調べる	any(not c.isalpha() for c in 文字列)
整数がセットに含まれないか調べる	数 not in セット
マップをクリアする	辞書.clear()
文字列はセットのメンバーか調べる	文字列 in セット
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
option: ライトシアン色を用いる	color = 'lightcyan'
折れ線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
列の不偏分散	df['列A'].var(ddof=1)
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
青いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
列の名前一覧を使う	df.columns
データ列とリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームの中の列を等量でビン数nを用いてビン分割する	pd.qcut(df[col], n)
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
option: フォントの色を黄色に設定する	color = 'yellow'
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='grey')
ある列の値がxより小さい行を抽出する	df[df['列A'] < x]
横棒グラフをダークスラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategray')
option: 追加モードを用いる	mode = 'a'
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
上限指定をした配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
棒グラフをオリベドラブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olivedrab')
option: ライム色を使用する	color = 'lime'
option: オレンジレッドにグラフの色を指定する	color = 'orangered'
順序を保持しながらリストの重複を取り除く	sorted(set(リスト), key=リスト.index)
option: パウダーブルーを使用する	color = 'powderblue'
JSONフォーマットの文字列を構文解析する	data = json.loads(文字列)
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
散布図をrgbの下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
文字列を最後のセパレータによって二分する	文字列.rpartition(セパレータ)
縦棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
整数を2進数表現に変換する	bin(整数)
二つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
option: アクアマリン色を使う	color = 'aquamarine'
散布図のダイアモンドマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
二つの文字列は等しくないか調べる	文字列 != 文字列2
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
option: 丸印を加える	marker = 'o'
入力ストリームをクローズする	f.close()
リストとリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データ列の折れ線グラフを星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
グリッド線を青くする	plt.grid(color='b')
オブジェクトが非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(オブジェクト)
option: マーカーの大きさを指定する	markersize = 2.0
第二四分位数でデータフレームの列の欠損値を埋める	df['列A'].fillna(df['列A'].median())
デフォルトでグラフのデザインをいい感じに変更する	sns.set()
クラス分類をアンサンブル学習でする	sklearn.ensemble.VotingClassifier()
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
配列のトリム平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
option: 色をゴールデンロッドに設定する	color = 'goldenrod'
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
オブジェクトがコルーチンか	inspect.iscoroutine(オブジェクト)
深紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
▼マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
リストとリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
イテラブルをイミュータブルなに変換する	frozenset(イテラブル)
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
二つのリストの差集合	list(set(リスト).difference(set(リスト2)))
主成分分析で多次元データを整数次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
エンコーディングを知る	sys.getdefaultencoding()
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: グラフの色をシエナに変更する	color = 'sienna'
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ファイル全体を行単位で分割して読む	f.readlines()
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
リストをイミュータブルにする	tuple(リスト)
折れ線グラフに青い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
rgbの▽マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームをある列のカテゴリで分類し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
行列の各要素の積	np.multiply(aArray, aArray2)
数列と配列の散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
八進数文字列をバイト列に変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
ライトシアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
ヒストグラムを破線でプロットする	plt.hist(データ列, linestyle='dashed')
数列とリストの散布図を描画してマーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
文字列からJSON形式のデータをロードする	data = json.loads(文字列)
点線を用いて折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
散布図に黒いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムをグリーン色を使って描画する	plt.hist(データ列, color='green')
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームの指定した列の第三四分位数	df['列A'].quantile(0.75)
文字列がリストのいずれかどうか確認する	文字列 in リスト
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
サブセットか調べる	セット.issubset(セット2)
目盛り線	plt.grid(linewidth=3.0)
辞書として文字列の数をカウントする	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
ブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
両端キューの中に整数が存在するか	整数 in 両端キュー
オブジェクトをデバッグ向けの文字列にする	repr(obj)
要素がセットのメンバーでない	要素 not in セット
リスト順番をシャッフルする	random.shuffle(リスト)  # 破壊的操作
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
三つ並べてリストを度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
マップのキーの一覧	list(辞書)
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: ブルーバイオレットに色を設定する	color = 'blueviolet'
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
x軸とy軸の比率を同じする	plt.axis('equals')
option: パパイヤウィップにグラフの色を指定する	color = 'papayawhip'
文字列中にひとつでも非数字が存在するかどうか確認する	any(not c.isdigit() for c in 文字列)
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
グラフをデフォルトでいい感じに設定する	sns.set()
コーラルにヒストグラムの色を変更する	plt.hist(データ列, color='coral')
実数が無限大か調べる	math.isinf(x)
ひとつでも非アスキー文字が文字列中にある	any(not c.isascii() for c in 文字列)
複数の列からグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
ホワイト色でヒストグラムを描画する	plt.hist(データ列, color='white')
データフレームの最初100行を抽出する	df.head(100)
２つのリストから辞書を作成する	dict(zip(リスト, リスト2))
散布図のバツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの指定したカラムを10の位で四捨五入する	df['列A'].round(-1)
文字列の指定した位置以前に部分文字列が含まれる	文字列.find(部分文字列, 0, 終了位置) != -1
ヒストグラムをサーモン色を用いて描画する	plt.hist(データ列, color='salmon')
整数の3乗	整数 ** 3
折れ線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
文字列を最初のカンマを用いて二つに分ける	文字列.partition(',')
option: ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
ピアソンでデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
指定した列で集計し、分散を算出する	df.groupby('列A').var()
リストと数列についての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の星マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
両端キューが空か	len(両端キュー) == 0
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
option: カラムの名前をリストで増やす	names = 列名リスト
小文字を使う	string.ascii_lowercase
文字列がセットに含まれるかどうか調べる	文字列 in セット
散布図を暗い赤色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
横棒グラフをプロットして中央寄せする	plt.barh(ラベル列, データ列, align='center')
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
指定した列の値で集計し、それぞれの最小値を算出する	df.groupby('列A').min()
オリベドラブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
辞書の項目名を要素に変更する	辞書[キー] = element
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgray')
整数乱数で要素を埋めたベクトル	np.random.randint(開始値, 終了値, N)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
データフレームの中の列を分割数nでビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの中であるカラムに重複があれば、消す	df.drop_duplicates(subset='列A', inplace=True)
option: グラフの色を青紫にする	color = 'violet'
縦軸だけ目盛線	plt.grid(axis='y')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
JSON文字列をオブジェクトに変換する	data = json.loads(文字列)
option: マーカーの色を青にする	markerfacecolor = 'blue'
を整数倍にする	変数 *= 整数
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
指定された列ついて、データフレームの重複を調べる	df.duplicated(subset='列A')
セットを差分のみに更新する	セット.difference_update(セット2)
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
数式のn階微分を行う	sympy.diff(数式, y, n)
option: データ型として符号なし８ビット整数型を用いる	np.uint8 = np.int<nl>dtype = np.uint8
出現頻度を可視化する	plt.hist(データ列)
リッジ回帰モデルを準備する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
データシリーズのタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
データフレームを表示するとき、ヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
赤い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
リストをひとつ飛ばしで取り出す	リスト[::2]
行列の平均値を計算する	np.mean(aArray)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
スピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
文字列の終了位置以前に部分文字列が含まれるか判定する	文字列.find(部分文字列, 0, 終了位置) != -1
100行をデータフレームからランダムに抽出する	df.sample(100)
xについて数式の積分を求める	sympy.integrate(数式, [|変数]x)
主成分分析で文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
データフレームの選択した列の値をValueMapで全部置き換える	df[['列A', '列B']].replace(ValueMap)
ヒストグラムの色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
文字列は全て十進数字か調べる	文字列.isdecimal()
数列間のスピアマンの順位相関係数	scipy.stats.spearmanr(数列, 数列2)
図のサイズを設定する	plt.figure(figsize=(横幅, 高さ))
横棒グラフをネイビー色を用いて描画する	plt.barh(データ列x, データ列y, color='navy')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
指定した列の不偏分散を求める	df['列A'].var(ddof=1)
option: 行列のデータ型を指定する	np.uint8 = np.int<nl>dtype = np.uint8
データフレームの中に文字列が含まれるか調べる	df.isin([value])
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
あるカラムの値ごとの分散を算出する	df.groupby('列A').var()
アンサンブル学習でクラス分類をする	sklearn.ensemble.VotingClassifier()
データフレームの数値をまとめて整数に四捨五入する	df.round()
文字列中にひとつも小文字が存在しない	any(not c.islower() for c in 文字列)
辞書を更新する	辞書.update(辞書2)
暗い赤色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
日付を表現した文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
エクセルファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
散布図に菱形マーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
多次元データを主成分分析として整数次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームの不偏分散	df.var(ddof=1)
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
オブジェクトはジェネレータ関数か	inspect.isgeneratorfunction(オブジェクト)
データフレームの中にいくつ欠損値が含まれるか数える	df.isna().sum()
整数が5で割り切れるかどうか確認する	整数 % 5 == 0
rgbの星マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
大バツマーカーを使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
横方向に二つのデータフレームを結合する	pd.concat([df, df2], axis=1)
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
疑似乱数平均と標準偏差からを得る	random.normalvariate(mu=0.5, sigma=0.2)
散布図を黄緑色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
option: 青紫色を使用する	color = 'violet'
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
n個にデータ列をビン分割する	pd.cut(ds, n)
データシリーズのNaNをその中央値で補う	ds.fillna(ds.median())
カラムを小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
縦棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
出力ストリームを一行ずつ読み込む	f.readline()
キーが辞書に存在しないとき、要素を追加する	辞書.setdefault(キー, element)
ある列にリストの値が含まれる行を取り出す	df[df['列A'].isin(リスト)]
option: パープル色を用いる	color = 'purple'
プログラムの実行を正しく終了する	sys.exit(0)
散布図をフォレストグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
辞書を別のマップとして更新する	辞書.update(辞書2)
オブジェクトは浮動小数点数型のインスタンスか調べる	float = int<nl>isinstance(obj, float)
nxn2の二次元リストを得る	[[0] * n for _ in range(n2)]
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
散布図の右三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームのあるカラムの時刻を使う	df['列A'].dt.hour
型のサブクラスかどうか調べる	issubclass(サブクラス, クラス)
データシリーズを万の位で四捨五入する	ds.round(-4)
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
表データのあるカラムのタイムゾーンを日本に指定する	df['列A'].tz_convert('Asia/Tokyo')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
列の文字列長を列として見る	ds.str.len()
rgbの丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
Excelファイルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
配列の累積積	np.cumprod(aArray)
カラムのトリム分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
ファイルを書き込みモードで開いて]、fとする	f = open(filepath, mode='w')
データフレームから列名を複数指定して選択する	columns = ['列A', '列B']<nl>df[columns]
ポスターにグラフの用途を設定する	sns.set(context='poster')
クリムゾン色としてヒストグラムを描画する	plt.hist(データ列, color='crimson')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
シャルトリューズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ゼロ埋めされた３二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
折れ線グラフをゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='goldenrod')
変数について数式を偏微分する	sympy.diff(数式, 変数)
フクシア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
xを太字で出力する	print(f'\033[1m{x}\033[0m')
辞書から項目名とバリューを取り出しひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
マッピングを浅く複製する	辞書.copy()
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
説明変数と目的変数として分類モデルを学習する	model.fit(説明変数, 目的変数)
データフレームの一部のカラムにおいてどの値が最も出現するか見る	df[['列A', '列B']].mode()
データフレームのカラムの調和平均	scipy.stats.hmean(df['列A'])
文字列をインデントを指定してJSONフォーマットにエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
option: ダークオリーブグリーンを使う	color = 'darkolivegreen'
グラフのパレットを指定する	sns.set(pallete=パレット名)
x軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
指定した列のカテゴリで集計し、各最小値を算出する	df.groupby('列A').min()
option: ボックスチャートに平均を加える	showmeans = False
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
option: ライトサーモンにフォントの色を設定する	color = 'lightsalmon'
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
下位集合	セット.issubset(セット2)
文字列をタイムスタンプにする	pd.to_datetime(日付を表現した文字列)
データフレームのデータ型の一覧	df.dtypes
文字列中の部分文字列をカウントする	文字列.count(部分文字列)
ふたつのカラムからグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
散布図に青い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
青色を用いてヒストグラムを描画する	plt.hist(データ列, color='blue')
データフレームの不偏分散を算出する	df.var(ddof=1)
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
文字列中に部分文字列がいくつか含まれるかカウントする	文字列.count(部分文字列)
整数が3で割り切れる	整数 % 3 == 0
データシリーズの中に日付データと文字列が存在するか調べる	ds.isin([value, value2])
文字列を最後のセパレータで二分割して、前半を使う	文字列.rpartition(セパレータ)[0]
スノー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
折れ線グラフの大バツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ある列の文字列が正規表現にマッチする行を抽出する	df[df['列A'].str.match(正規表現)]
列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
二変数の最大値	max(x, y)
横棒グラフをピーチパフ色を用いて描画する	plt.barh(データ列x, データ列y, color='peachpuff')
改行なしに二つの計算結果をプリントする	print(式, 式, end='')
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
実数とyのノルムを算出する	math.hypot(x, y)
オブジェクトがバイト列クラスのインスタンス	bytes = int<nl>isinstance(obj, bytes)
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
ファイルパスを文字コードtextでオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
折れ線グラフの四角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
文字列の末尾から部分文字列を消す	文字列.removesuffix(部分文字列)
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgray')
実数を文字列にする	str(x)
パレットをパステル調にする	sns.set(pallete='pastel')
辞書の項目名を列挙する	辞書.keys()
n個の数値イテラブルを見る	range(n)
ゼロ埋めした三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
ヒストグラムの色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
浮動小数点数とyの斜辺	math.hypot(x, y)
プラットホームのエンコーディング	sys.getdefaultencoding()
スプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='springgreen')
option: フォレストグリーンにグラフの色をセットする	color = 'forestgreen'
実数のハイパボリック・コサインを求める	math.cosh(x)
option: パレットトルコイズを用いる	color = 'paleturquoise'
線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
文字列を最後のコロンで二つに分ける	文字列.rpartition(':')
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームを関数によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
散布図にrgbの四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オブジェクトがあるクラスのインスタンスかどうか	isinstance(obj, クラス)
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
文字列を区切り記号で二分割する	文字列.partition(セパレータ)
線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
データフレームの選択した列の空文字を未入力値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
option: オレンジにフォントの色を設定する	color = 'orange'
要素一つのりスト	[要素]
文字列をケースを無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
配列の型を求める	aArray.dtype()
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
整数の商を求める	整数 / 整数2
小数点数の逆双曲線正接を計算する	math.atanh(x)
日付時刻データが何分か知る	aDatetime.minute
黒い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
クラスは名前付きタプルかどうか確認する	issubclass(C, tuple)
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
option: エラーを無視するように設定する	errors = 'ignore'
散布図のクロスマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
整数を整数除算する	整数 // 整数2
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
横棒グラフをリネン色を用いて描画する	plt.barh(データ列x, データ列y, color='linen')
日付データが日付データより後ろか調べる	aDate > aDate2
データシリーズの中に存在する日付データとの合計をカウントする	ds.isin([value, value2]).sum()
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: グラフの色をダークグリーンに指定する	color = 'darkgreen'
option: ゴールデンロッドを使用する	color = 'goldenrod'
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
グラフの描画で濃くカラーテーマを使用する	sns.set(pallete='deep')
双方向キューの左側に文字列を付け加える	両端キュー.appendleft(文字列)
JSONフォーマットでリストを指定したファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
option: フォントの色を暗い赤に設定する	color = 'darkred'
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームの行を条件で取り除く	df[(df['列A'] == x) & (df['列B'] == y)]
ケンドール相関係数を使ってデータフレームの相関行列を求める	df.corr(method='kendall')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
カウンタをリストにする	list(aCounter)
折れ線グラフの印を右三角印にする	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの大バツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ミディアムオーキッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データシリーズが正規分布からどの程度、歪んでいるか見る	ds.kurt()
ゼロ埋めした複素数型の配列	np.zeros(要素数, dtype=bool)
サーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
データシリーズにおいてどの値が最も出現するか確認する	ds.mode()
文字列の先頭でパターンに大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
ガウス過程を使って回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
option: ブラウン色を用いる	color = 'brown'
データフレームを関数によってまとめたグループを見る	df.groupby(関数)
配列の列ごとの平均	np.mean(aArray, axis=0)
ある列の文字列が部分文字列で終わるデータを取り出す	df[df['列A'].str.endswith(部分文字列)]
データフレームをまとめて整数に四捨五入する	df.round()
データフレームの選択した列の分散を求める	df[['列A', '列B']].var()
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
赤い一点鎖線を用いてリストの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: 色をシエナに指定する	color = 'sienna'
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
散布図をダークシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
正則化付き重回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
データフレームの一部の列の欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
主成分分析として文字列次元に削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
散布図を左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
キューの左に要素を追加する	両端キュー.appendleft(要素)
データフレームの選択したカラムの中に文字列と日付データがいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
グレー色を使ってヒストグラムを描画する	plt.hist(データ列, color='gray')
辞書のキーの値	辞書[キー]
タイムスタンプデータにn秒分加える	aDatetime + datetime.timedelta(seconds=n)
オブジェクトがモジュールか調べる	inspect.ismodule(オブジェクト)
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
option: グラフを破線にする	linestyle = 'dashed'
インディアンレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
option: ゴーストホワイトにフォントの色を設定する	color = 'ghostwhite'
ダークグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
コンビネーション	math.comb(n, k)
現在の時間数を求める	datetime.date.today().hour
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
n個にデータフレームの中のカラムを分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストの推移を色付きの破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
配列のn次モーメント	scipy.stats.moment(配列, moment=n)
データシリーズの欠損値を直後の値にセットする	ds.fillna(method='bfill')
リストを文字列としてある文字でつなげる	文字.join(map(str, リスト))
option: グラフを実線にセットする	linestyle = 'solid'
を減少させる	変数 -= 整数
データフレームの選択したカラムの標本標準偏差を計算する	df[['列A', '列B']].std(ddof=1)
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
安全に文字列の接尾辞から部分文字列を取り除く	文字列.removesuffix(部分文字列)
赤い四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームの選択したカラムはどれだけ、正規分布から歪んでいるか調べる	df[['列A', '列B']].kurt()
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ベージュ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
フォーマットでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームのカラムのNaNを平均値で埋める	df['列A'].fillna(df['列A'].mean())
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
赤い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
データシリーズのNaNを最大値で補完する	ds.fillna(ds.max())
散布図を描画する	plt.scatter(データ列x, データ列y)
変数について微分する	sympy.diff(数式, 変数)
文字列を小文字にする	文字列.casefold()
データフレームの選択したカラムの中にいくつ未入力値があるか求める	df[['列A', '列B']].isna().sum()
データフレームのあるカラムのNaNを第二四分位数に増やす	df['列A'].fillna(df['列A'].median())
リストの要素を展開してプリントする	print(*リスト)
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ファイルを文字列の示すエンコーディングで書き込み用に開く]	open(filepath, mode='w', encoding=s)
小数点以下'2'桁までをプリントする	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
日付データが日付データよりあと	aDate > aDate2
横棒プロットを描いて下寄せする	plt.barh(ラベル列, データ列, align='edge')
数列の変遷を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
データフレームの指定したカラムの不偏分散	df['列A'].var(ddof=1)
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
散布図をrgbのダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームを整列し、上位を取り出す	df.sort_values('キーとなる列').head(n)
現在の年数	datetime.datetime.today().year
数列とデータ列の散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
要素がリストの要素でないかどうか確認する	要素 not in リスト
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
ファイルパスをオープンして]、バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
既存のベクトルをベースにして全要素が0の配列	np.zeros_like(aArray)
折れ線グラフのアルファ値を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
option: どのカラムもインデックスにしない	index_col = None
リストを中央値でビン分割する	pd.qcut(aList, 2)
カラーコードを用いて折れ線プロットの色を変更する	plt.plot(データ列x, データ列y, color='#800080')
既存のファイルパスをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
明るくカラーパレットをプロットの描画で用いる	sns.set(pallete='bright')
オブジェクトからプロパティを取り除く	delattr(obj, プロパティ名)
折れ線グラフの色をミディアムスレートブルーにする	plt.plot(データ列x, データ列y, color='mediumslateblue')
縦棒グラフを描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
整数はセットのいずれ	数 in セット
データフレームの選択したカラムのNaNを最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
文字列中に非数字が含まれるか	any(not c.isdigit() for c in 文字列)
折れ線グラフの色を濃いシアンにする	plt.plot(データ列x, データ列y, color='darkcyan')
棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
ダークマゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
横棒グラフをハニーデュー色を使って描画する	plt.barh(データ列x, データ列y, color='honeydew')
データフレームの指定したカラムの中央値	df['列A'].median()
ヒストグラムをダークシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
赤い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフを赤い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの選択した列の中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
option: 箱ひげ図を横方向にする	vert = False
日付時刻データの時間数	aDatetime.hour
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: 追加モードを使用する	mode = 'a'
文字列を最後の区切り記号で二分する	文字列.rpartition(セパレータ)
要素がセットに含まれないか調べる	要素 not in セット
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
ある列の値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
暗い赤色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
複数横に並べて数列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームの次元数	df.shape
散布図をrgbの大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
一番左のを除いたデータフレームを使う	df[df.columns[1:]]
バイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
要素はリストの要素でない	要素 not in リスト
インデントを指定してリストをJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False, indent=n)
整数が整数2以上か調べる	整数 >= 整数2
option: ダークグレー色を使う	color = 'darkgrey'
配列と配列についての散布図に文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
カラーバーをつける	plt.colorbar()
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
指定したカラムを四捨五入する	df['列A'].round()
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
option: フォントの色をシャルトリューズに設定する	color = 'chartreuse'
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
option: グレーにグラフの色を設定する	color = 'gray'
リストの各要素を関数に適用した結果で並べる	sorted(リスト, key=func)
実数を3乗する	x ** 3
辞書の値として要素が含まれているか	element in 辞書.values()
表データをグループ化し、合計を計算する	df.groupby('列A').sum()
折れ線グラフをダークゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
黒い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
option: スレートブルーにフォントの色を設定する	color = 'slateblue'
黒い四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
箱ひげ図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
プロットにグリッド線を入れる	plt.grid(True)
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
実行時の標準入力の入力元がターミナルか	os.isatty(sys.stdin.fileno())
折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
プロットにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
ヒストグラムの色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
タプルの末尾のn要素を除く	タプル[:-n]
数列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
両端キュー中の要素の出現数を数える	両端キュー.count(要素)
xがマイナス無限大に近づく時の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
実測値をモデルの予測値と対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームのNaNを前の行の値に変更する	df.fillna(method='ffill')
空セットを作成する	set()
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
長さの制限された双方向キューを配列から作成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
折れ線グラフの色を茶色にする	plt.plot(データ列x, データ列y, color='brown')
全ての句読点文字	string.punctuation
カラムのトリム分散を使う	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ファイル名がテキストファイルか調べる	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
option: ペルー色を使う	color = 'peru'
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
配列から両端キューを作る	collections.deque(配列)
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
青い実線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームの全列の散らばりを可視化する	sns.pairplot(df)
異なる列をキーにして２つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
要素を両端キューのn番目に挿入する	両端キュー.insert(n, 要素)
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
データフレームの選択したカラムの欠損値をその最小値で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
折れ線グラフの丸印を黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
数式を変数xについてn階微分する	sympy.diff(数式, [|変数]x, n)
option: ミッドナイトブルーを使用する	color = 'midnightblue'
オレンジレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
半透明の点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
セットの全ての要素が別のセット2に含まれるか判定する	セット.issubset(セット2)
指定した列のカテゴリで集計し、それぞれの合計を計算する	df.groupby('列A').sum()
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
折れ線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
サーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
nとkのnCk	math.comb(n, k)
データフレームのカラムの歪みを計算する	scipy.stats.skew(df['列A'], bias=False)
キーワード引数で辞書に更新する	辞書.update(**kwargs)
データフレームの列間の相関をまとめて求める	df.corr()
黒い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
暗くパレットをプロットの描画で用いる	sns.set(pallete='dark')
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
２つの文字列はケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
データフレームのあるカラムを小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
1からnまでの整数列を見る	list(range(1, n+1))
再帰エラーを防ぐ	sys.setrecursionlimit(1000000)
データフレームの選択した列のNaNを直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
要素はタプルの要素でないかどうか調べる	要素 not in タプル
文字列の前半から部分文字列の位置を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
赤い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: マーカーを右三角に変える	marker = '>'
小麦色にヒストグラムの色を変更する	plt.hist(データ列, color='wheat')
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームのあるカラムの中にある日付データと文字列の合計を数える	df['列A'].isin([value, value2]).sum()
昇順にリストの要素をソートする	sorted(リスト, reverse=False)
度数分布図を上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
横棒グラフをロージーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='rosybrown')
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
データシリーズはどれだけ、正規分布から歪んでいるか見る	ds.kurt()
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
日付データが日付データより前か調べる	aDate2 = aDatetime<nl>aDate < aDate2
グラフの用途を論文に設定する	sns.set(context='paper')
データフレームをNaNを含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
データフレームから１つの列を抽出する	df[['列A']]
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
黒い左三角マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
サーモン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
両端キューの先頭から要素を取り出す	両端キュー.popleft()
折れ線グラフの下三角印の色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
要素がリストに含まれないかどうか	要素 not in リスト
データフレームの選択した列の文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
ヒストグラムの色をサーモンに指定する	plt.hist(データ列, color='salmon')
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
整数乱数で要素を埋めた配列を作る	np.random.randint(開始値, 終了値, N)
モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
空白文字を全部見る	string.whitespace
表の最初100行	df.head(100)
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
データフレームのカラムの最頻値	mode, count = scipy.stats.mode(df['列A'])
yが無限大に近づくときの極限値を算出する	sympy.limit(数式, y, oo)
option: バイオレット色を使う	color = 'violet'
ヒートマップを用いて混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
黒い三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
イテラブルから複数個ランダムに選んでリストにする	random.choices(イテラブル, k=n)
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
長さの制限された両端キューを数列から作成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
折れ線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
文字列を右からカンマで区切る	文字列.rsplit(',')
データフレームの一部の列においてどの値が頻出か確認する	df[['列A', '列B']].mode()
ユーザが整数を入力する	int(input())
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
オブジェクトが名前付きタプル型かどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
JSON形式でリストを出力ストリームに保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
データフレームから重複ありでランダムに100行をサンプリングする	df.sample(100, replace=True)
リストを等量でビン数nを用いて分割する	pd.qcut(aList, n)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
文字のアスキーコード	ord(文字)
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
文字列がリストにない	文字列 not in リスト
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
アンティークホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図の三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列を最後のカンマで分割したときの後半の文字列	文字列.rpartition(',')[-1]
データフレームのあるカラムをインデックスに設定する	df.set_index('列A')
セットが上位集合もしくは等しいか確認する	セット >= セット2
要素がセットに含まれない	要素 not in セット
ドジャーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ファイルをEUCで書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
ファイルを書き込みできるように文字コードtextとして開く]	open(filepath, mode='w', encoding=text)
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
オブジェクトがコードかどうか	inspect.iscode(オブジェクト)
データフレームを横方向につなぐ	pd.concat([df, df2], axis=1)
ペルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
縦棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
option: ライトイエローにグラフの色を指定する	color = 'lightyellow'
セットのイミュータブル版	frozenset(セット)
コマンド引数の一覧	sys.argv[1:]
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='turquoise')
文字が別の文字列に含まれない	文字 not in 文字列
オブジェクトにプロパティが存在するかどうか調べる	hasattr(obj, プロパティ名)
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
ユニークな値を要素とする行列	np.unique(aArray)
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
データフレームの列名をリストで置き換える	df.columns = columns
ピーチパフ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームから列を一つ選択する	df[['列A']]
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
option: ホットピンクにフォントの色を設定する	color = 'hotpink'
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
カラーマップとしてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
折れ線グラフをライトブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightblue')
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
xがマイナス無限大に近づく時の数式の極限値を計算する	sympy.limit(数式, [|変数]x, -oo)
列を等量でビン数nでビン分割する	pd.qcut(ds, n)
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
列のエポック秒をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
配列の幾何平均を求める	scipy.stats.gmean(配列)
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
行列の行ごとの合計を求める	np.sum(aArray, axis=1)
変数の値を整数乗に増やす	変数 **= 整数
整数を十六進表現に変換する	hex(整数)
ディムグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
日付時刻データが何月か知る	aDatetime.month
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: 色をイエローグリーンに指定する	color = 'yellowgreen'
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
オブジェクトは集合クラスかどうか調べる	set = int<nl>isinstance(obj, set)
浮動小数点数の最大値	sys.float_info.max
三自然数の最小公倍数を求める	math.lcm(n, n2, n3)
配列をビン数nで等量で分割する	pd.qcut(aArray, n)
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
散布図を黒いダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
タプルの中の最小値	min(タプル)
option: モカシンにフォントの色を設定する	color = 'moccasin'
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
散布図のクロス印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ファイルを全部、読む	f.read()
option: 色をスラグレーに設定する	color = 'slategray'
データシリーズの代表値	ds.describe()
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
棒グラフを赤色を用いて描画する	plt.bar(データ列x, データ列y, color='red')
データフレームの選択したカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
黒い大バツマーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='k')
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
カウンタをイテラブルから作る	collections.Counter(iterable)
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
文字列はセットに含まれないかどうか調べる	文字列 not in セット
リストの要素を文字列として、指定した文字で結合する	文字.join(map(str, リスト))
線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
プロットのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
nilに等しいもの	None
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
日付時刻データの日付	aDatetime.date()
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
データフレームを表示するとき折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
ブラック色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
指定した列リストだけデータフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
日本語が文字列に含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
数列と数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列を最後の部分文字列で分割した場合の後半の文字列を取り出す	文字列.rpartition(部分文字列)[-1]
option: 色をダークグレーに設定する	color = 'darkgray'
データフレームの一部の列の値をまとめて正規表現patternでreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: 紺を使う	color = 'darkblue'
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
赤いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
棒グラフをライムグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='limegreen')
整数が整数2以下、もしくは、n3以上	整数 <= 整数2 or 整数 >= n3
リストの全要素を消去する	リスト.clear()
四分位点を用いて標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
整数がセットのどれか	aSet = [0, 1, 2]<nl>整数 in aSet
グラフのx軸とy軸の比率を同じする	plt.axis('equals')
空のロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
キューをタプルに変換する	tuple(両端キュー)
データフレームの選択したカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
オブジェクトが名前付きタプルかどうか判定する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
option: ダークオーキッドに色を設定する	color = 'darkorchid'
データフレームの指定したカラムのメディアン	df['列A'].median()
option: ライトスチールブルーに色を設定する	color = 'lightsteelblue'
option: グラフの色をミントクリームに設定する	color = 'mintcream'
棒グラフをナバホホワイト色として描画する	plt.bar(データ列x, データ列y, color='navajowhite')
実数の常用対数	math.log10(x)
リストとリストについて散布図を描いて、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
数列と配列についての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ライトスレイグレーにグラフの色を指定する	color = 'lightslategray'
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
ある列の値がxより大きくyより小さい行を選択する	df[(x < df['列A']) & (df['列A'] < y)]
ファイルから1文字読み込む	f.read(1)
実数の双曲線正接を計算する	math.tanh(x)
赤い一点鎖線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図を丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームの選択したカラムが正規分布からどの程度尖っているか見る	df[['列A', '列B']].skew()
文字列中の部分文字列を別の文字列に置換する	文字列.replace(部分文字列, 置換後の文字列)
部分文字列を新しい文字列に置換する	文字列.replace(部分文字列, 置換後の文字列)
2つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
正方単位行列	np.identity(n)
小数点数の絶対値	math.fabs(x)
浮動小数点数のn乗	x ** n
整数2がnより大きく、かつ、n3未満かどうか調べる	整数 < 整数2 and 整数2 < n3
折れ線グラフに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
整数の左シフト	整数 << n
プラットフォームのコードポイントの最大値を知る	sys.maxunicode
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
整数割り算の切り上げ	(整数 + 整数2 - 1) // 整数2
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ファイル名がTSVファイル	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
空白を用いて文字列を区切る	文字列.split()
線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
クラス分類の予測精度をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
実数以下の最大の整数を求める	math.floor(x)
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
データフレームのデータ型リストを使う	df.dtypes
データシリーズの中の欠損値の合計をカウントする	ds.isna().sum()
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
データフレームの指定したカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
部分文字列で文字列を右から区切る	文字列.rsplit(部分文字列)
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色をビスクにする	plt.hist(データ列, color='bisque')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
青い一点鎖線を用いて線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
要素を双方向キューにエンキューする	両端キュー.append(要素)
最大値・最小値で整数乱数を算出する	random.randint(最小値, 最大値)
小数点数が無限大	math.isinf(x)
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
ベクトルの標準偏差	np.std(aArray)
option: 改行コードを動作環境依存に指定する	newline = None
TSVから文字コードを指定してロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームの未入力値をxに指定する	df.fillna(x)
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
マッピングのキーに対応した値を得る	辞書[キー]
リストと配列についての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
スチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
マッピングをカウンタにする	collections.Counter(aDict)
option: 色をダークシアンにセットする	color = 'darkcyan'
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
文字列から指定した文字を全て除く	文字列.replace(文字, '')
指定した列の値で集計し、最大値を計算する	df.groupby('列A').max()
リストとデータ列について散布図を描いて星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを関数によってまとめた表	df.groupby(関数)
selectorsでマスクされた配列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームを関数の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
真サブセットか	セット < セット2
データフレーム中の欠損値を破壊的にドロップする	df.dropna(inplace=True)
行列をベースに全要素が初期値の行列を作る	np.full_like(aArray, 初期値)
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
折れ線グラフの色を珊瑚に指定する	plt.plot(データ列x, データ列y, color='coral')
指定したカラムの未入力値を第二四分位数に変更する	df['列A'].fillna(df['列A'].median())
deqの最後の要素	両端キュー[-1]
異なる列をキーとしてデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
空白が文字列中に含まれるか調べる	any(c.isspace() for c in 文字列)
リストの要素を文字列として、空白で結合する	' '.join(map(str, リスト))
option: ビスク色を使用する	color = 'bisque'
縦棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
日付時刻データの日数	aDatetime.day
リストとイテラブルの散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データシリーズの中に文字列がある	ds.isin([value])
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
行列の合計	np.sum(aArray)
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ファイルパスをオープンして]、追加ストリームを求める	'a' = 'a'<nl>open(filepath, mode='a')
整数のモジュロ	整数 % 整数2
データフレームの列の名前をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
rgbの大バツマーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
タイムスタンプデータが日付時刻データより先か	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
文字列を部分文字列で二つに分け、、後半を使う	文字列.partition(部分文字列)[-1]
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
ダーク・スラテグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
横棒グラフをミディアムスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
option: 読み込みモードに設定する	mode = 'r'
ディレクトリをモジュールを検索するパスに追加する	sys.path.append(ディレクトリ名)
整数を十六進数文字列にする	hex(整数)[2:]
グラフのタイトルをする	plt.title('グラフの名称')
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
カウンタ間で積集合演算する	aCounter & aCounter2
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
マップの値をひとつずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
リストのn番目以降の部分を得る	リスト[n:]
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
xを太字でプリントする	print(f'\033[1m{x}\033[0m')
ふたつの集合の対称差集合	セット.symmetric_difference(セット2)
整数を16進数表現に変換する	hex(整数)
データフレームは何行重複するか見る	df.duplicated().sum()
ライトグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
N未満までの配列	np.arange(N)
表データのあるカラムの年を使う	df['列A'].dt.year
スクリプトファイルのディレクトリ名を使う	os.path.dirname(os.path.abspath(__file__))
を整数分の１にする	変数 /= 整数
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
下限指定をした配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
正規分布にしたがって配列の値が発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
数列から重複なく、n要素ランダムに選んでリストにする	random.sample(数列, k=n)
配列とリストの散布図をプロットし、、マーカーを丸にセットする	plt.plot(データ列x, データ列y, marker='o')
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
列名を指定して２つのデータフレームをジョインする	'<nl>pd.merge(df, df2, on='列A')
option: 昇順にする	ascending = True
ひとつでも非英数字が文字列中に含まれる	any(not c.isalnum() for c in 文字列)
両端キューの要素を輪番で回す	両端キュー.rotate(1)
ふたつのマップをマージする	辞書 | 辞書2
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームの中にと文字列があるか調べる	df.isin([value, value2])
青い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
指定した列のみ、データフレームの重複を見る	df.duplicated(subset='列A')
セットをタプルに変換する	tuple(セット)
日付データをISO8601書式の文字列に変換する	aDate.isoformat()
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
計算結果をプリントする	print(式)
ファイルを書き込みモードで開く]	'w' = 'a'<nl>open(filepath, mode='w')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
カテゴリ別に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
クリムゾン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフの下三角印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
マッピング	辞書 = {}
配列とリストについて散布図を描画し、、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
リストと数列についての散布図にrgbの三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
印字可能な文字を見る	string.printable
を整数で割った余りにする	変数 %= 整数
散布図に黒いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
異なる列をキーとしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
データフレームからランダムにn行を抽出する	df.sample(n)
ハニーデュー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
option: 珊瑚色を用いる	color = 'coral'
濃くカラーパレットをグラフの描画で使う	sns.set(pallete='deep')
xを青色にする	f'\033[34m{x}\033[0m'
整数の複素数	complex(x)
n進文字列を整数にする	int(文字列, n)
filepathにディレクトリを変更する	os.chdir(os.dirname(filepath))
タプルの値を並べる	sorted(タプル)
文字列の末尾から部分文字列を除去する	文字列.rstrip(部分文字列)
文字列を中央寄せにする	文字列.center(文字列幅)
配列の標準誤差を求める	scipy.stats.sem(配列)
エラーなくセットから数値を取り除く	セット.discard(数)
プロットに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
データフレームから指定したデータ型のカラム名リスト	df.select_dtypes(型).columns
エポック秒のデータ列からタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
カラム一覧	df.info()
ひとつも空白が文字列中にない	any(not c.isspace() for c in 文字列)
numpyを入れる	import numpy as np
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
浮動小数点数の最小値を求める	sys.float_info.min
散布図をパパイヤウィップ色を用いて描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
もしコマンド引数が指定されたなら、処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
ベージュにヒストグラムの色を指定する	plt.hist(データ列, color='beige')
正規分布で疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
ダークシアグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: 色をターコイズに設定する	color = 'turquoise'
整数が整数2未満、もしくはn3以上	整数 < 整数2 or 整数 >= n3
線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
全要素を０で初期化した論理値型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
改行なしに文字列を表示する	print(文字列, end='')
データシリーズの中にあるの合計をカウントする	ds.isin([value]).sum()
option: サンディーブラウンを使う	color = 'sandybrown'
赤い▼マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームの選択したカラムの欠損値を50パーセンタイルで置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
整数を両端キューから削除する	両端キュー.remove(整数)
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
モデルの残差を求める	目的変数 - model.predict(説明変数)
文字列は印字できる	文字列.isprintable()
option: 青を使う	color = 'blue'
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
多次元データをSVDで数値次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
文字列がリストに存在する	文字列 in リスト
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームの指定した列の未入力値を最小値にセットする	df['列A'].fillna(df['列A'].min())
シーケンスとリストを連結する	itertools.chain(iterable, iterable2)
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
データ列を度数分布図にする	plt.hist(データ列)
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
数のn乗の浮動小数点数剰余を計算する	pow(x, n, y)
二つの列によってデータフレームを分類する	df.groupby(['列A', '列B'])
ヒストグラムの色をミスティローズにする	plt.hist(データ列, color='mistyrose')
option: 青にグラフの色を設定する	color = 'blue'
データフレームの中の未入力値の合計を数える	df.isna().sum()
印字できる文字を使う	string.printable
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列x, データ列y, color='midnightblue')
実数の正弦の逆数	math.asin(x)
整数はセットのメンバーに含まれないかどうか調べる	数 not in セット
オブジェクトはトレースバックか確認する	inspect.istraceback(オブジェクト)
ランダムな整数のリストが欲しい	random.sample(range(100), 10)
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
リストから重複なく、n個ランダムに選ぶ	random.sample(リスト, k=n)
option: フォントの色をディムグレーに設定する	color = 'dimgray'
日付時刻データは何曜日か知る	aDatetime.weekday()
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームのn行目まで取り出す	df[:n]
x軸の目盛りを対数に変更する	plt.xscale('log')
option: グラフの色をマルーンに設定する	color = 'maroon'
両端キューの先頭に数列の各要素を追加する	両端キュー.extendleft(数列)
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
データ列をn個にビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: 標準出力を用いる	file = sys.stdout
ミディアムシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
データフレームの選択した列の不偏標準偏差	df[['列A', '列B']].std()
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
円グラフを用いて配列の割合を可視化する	plt.pie(データ列, startangle=90)
データフレームの指定したカラムの中にと文字列がいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
ハイパボリック・コサインの逆数を計算する	math.acosh(x)
フォレストグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: 回帰木の最大深さを設定する	maxdepth = n
文字列の右側から部分文字列を消す	文字列.rstrip(部分文字列)
カウンタの全数を使う	aCounter.total()
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
文字列中の部分文字列の登場を数える	文字列.count(部分文字列)
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームをグループ化し、個数を計算する	df.groupby('列A').count()
PLSとして回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームの最初n行	df.head(n)
option: ミディアムバイオレットレッドにグラフの色を指定する	color = 'mediumvioletred'
リストの要素を文字列として、ある文字を使って連結する	文字.join(map(str, リスト))
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
ファイルパスをバイナリ書き込み用に開く]	'wb' = 'a'<nl>open(filepath, mode='wb')
データフレームとデータシリーズを横方向に合体させる	pd.concat([df, ds], axis=1)
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
グレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
t分布型確率的近傍埋め込み法で文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
文字列中のひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
オレンジレッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
セットから別のセットとの共通要素を全て除く	セット.symmetric_difference_update(セット2)
リストと配列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ダイアモンド印を描画する	marker = 'D'
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
データフレームの選択したカラムの標本分散	df[['列A', '列B']].var(ddof=0)
データフレームから列を一つのみ選択する	df[['列A']]
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
ひとつでもアスキー文字が文字列中に含まれる	any(c.isascii() for c in 文字列)
option: グラフの色をコーンズシルクに指定する	color = 'cornsilk'
黒いクロスマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
文字列の中の大文字・小文字を無視してパターンによるマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をバリーウッドにする	plt.plot(データ列x, データ列y, color='burlywood')
エクセルからデータフレームを読む	pd.read_excel('file.xlsx')
数を数で割った余り	x % y
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
オブジェクトは浮動小数点数か調べる	float = int<nl>isinstance(obj, float)
本日が水曜日	datetime.datetime.today().weekday() == 2
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
プラットホームがリナックスか調べる	sys.platform.startswith('linux')
変数について数式の積分を行う	sympy.integrate(数式, 変数)
算術計算ライブラリをインポートする	import math
タプルの末尾のn要素を捨てる	タプル[:-n]
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
折れ線グラフの左三角印を黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
要素がリストの要素でないか	要素 not in リスト
option: マーカーを下三角に指定する	marker = 'v'
リストの最初のn要素を除く	リスト[n:]
部分文字列で文字列を区切って、文字列リストに変換する	文字列.split(部分文字列)
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データをJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False)
グリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ファイルパスを書き込み用に文字列の示す文字コードを用いてオープンする]	open(filepath, mode='w', encoding=s)
プラットホームがWindows	sys.platform.startswith('win32')
option: ピンク色を使う	color = 'pink'
要素がセットのメンバーでないか調べる	要素 not in セット
1文字標準入力から読む	sys.stdin.read(1)
要素は両端キューの中に含まれてるか確認する	要素 in 両端キュー
option: ミディアムパープルにグラフの色をする	color = 'mediumpurple'
改行なしにxをプリントする	print(x, end='')
両端キューから最初の文字列を取り除く	両端キュー.remove(文字列)
マップの項目名の一覧	list(辞書.keys())
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームを欠損値を含めてあるカラムで集約する	df.groupby('列A', dropna=False)
Excelのシートをデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
リストを文字列として、カンマで連結する	','.join(map(str, リスト))
カウンタをリストで更新する	aCounter.update(iterable)
列名を指定して２つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
実数のアークタンジェント	math.atan(x)
データフレームを1000の位で四捨五入して整数にする	df.round(-3).astype(int)
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
データフレームのあるカラムのタイムゾーンをセットする	df['列A'].tz_convert('Asia/Tokyo')
option: ライトグレー色を使う	color = 'lightgrey'
データフレームをグループ化して、ヒストグラムで図示する	sns.histplot(df, x='列名', hue='カテゴリ名')
option: ライトグリーンを用いる	color = 'lightseagreen'
棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
配列をビン数nを用いてビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: 色を貝殻に設定する	color = 'seashell'
nからn2までのスライス	slice(n, n2)
リストの平均値	sum(リスト)/len(リスト)
文字列のn番目をユニコードに変換する	ord(文字列[n])
一行をランダムにデータフレームから抽出する	df.sample()
数列から重複なくn要素ランダムに選んでリスト化する	random.sample(数列, k=n)
ダークスラテグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
プロットにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
データフレームをBOM付きでCSVファイルに保存する	df.to_csv('file.csv', encoding='utf_8_sig')
カウンタの項目数を使う	len(aCounter)
データフレームのあるカラムの最頻値	df['列A'].mode()
タイムスタンプデータををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
日付時刻データをタプルに変換する	aDatetime.timetuple()
ユニークな値を要素とする配列を使う	np.unique(aArray)
表データをグループ化し個数を求める	df.groupby('列A').count()
タプルの末尾の値	タプル[-1]
プログラムを正しく終了する	sys.exit(0)
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
リストからn個、ランダムに選ぶ	random.choices(リスト, k=n)
xを紫色で表示できる文字列に変換する	f'\033[35m{x}\033[0m'
ミディアムアクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
折れ線グラフに左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
列を指定して重複を除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
辞書に要素をキーとして加える	辞書[キー] = element
文字列中の文字の登場	文字列.count(文字)
option: マーカーを四角に設定する	marker = 's'
xについて数式をn階微分する	sympy.diff(数式, [|変数]x, n)
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
整数がキューの中にある	整数 in 両端キュー
データフレームを二つの列で大きい順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
折れ線グラフに▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
リスト中の要素が最初に見つかる場所を探す	リスト.index(要素)
空白で文字列を区切り、文字列リストに変換する	文字列.split()
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
特異値分解で整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
文字列が全て識別子	文字列.isidentifier()
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
パレットトルコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
深紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
本日が日曜日か判定する	datetime.datetime.today().weekday() == 6
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
数式の積分を求める	sympy.integrate(数式)
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
折れ線グラフの色をRGBとして変更する	plt.plot(データ列x, データ列y, color='#800080')
オブジェクトの属性を取り除く	delattr(obj, プロパティ名)
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
整数をバイト列に変換する	整数.to_bytes(length=バイト数, byteorder='big')
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームを指定した列の値によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
formatのパターンで文字列からタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列からJSONを読み込む	data = json.loads(文字列)
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
シスル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
タプルが少なくともひとつ真かどうか調べる	any(タプル)
option: グラフの色をダークオレンジに変更する	color = 'darkorange'
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
赤い実線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
欠損値がある行をドロップする	df.dropna(inplace=True)
点線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
n個に配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
文字列がASCII文字かどうか確認する	文字列.isascii()
整数を双方向キューの末尾に付け加える	両端キュー.append(整数)
タプルの末尾のn要素を取り除く	タプル[:-n]
縦棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
ファイルパスを絶対パスに変換する	os.path.abspath(filepath)
イテラブルと数列についての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
グラフの描画で明るくカラーパレットを用いる	sns.set(pallete='bright')
カウンタを集合にする	set(aCounter)
データフレームのシェイプ	df.shape
横棒グラフをベージュ色を用いて描画する	plt.barh(データ列x, データ列y, color='beige')
option: ライトスチールブルー色を使用する	color = 'lightsteelblue'
タイムスタンプデータがタイムスタンプデータより先か	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
整数のビット長を見る	整数.bit_length()
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ダイアモンドマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
実数の指数部を求める	math.frexp(x)[1]
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
実数を浮動小数点数で割る	x / y
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
データ列とリストについての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
ある列の値がxより大きく、yより小さいデータを抽出する	df[(x < df['列A']) & (df['列A'] < y)]
整数が整数2よりも大きいかどうか確認する	整数 > 整数2
データフレームの未入力値を最小値にする	df.fillna(df.min())
文字列の両端からある文字を取り除く	文字列.strip(文字)
目盛り線	plt.grid(alpha=0.5)
データフレームをソートして、下位を取り出す	df.sort_values('キーとなる列').tail(n)
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
折れ線グラフの線種を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
整数わる整数を計算する	整数 / 整数2
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
範囲を指定して後方から部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
行列を列から作成する	np.array(iterable)
散布図の上三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
棒グラフをスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='skyblue')
イエローグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
タプル中の要素が全て真か判定する	all(タプル)
コーパスのバージョン	version = 'wcce2022-0.1'
散布図をミスティローズ色を使って描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
重複していない行だけ	df[~ df.duplicated(keep=False)]
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
ライム色でヒストグラムを描画する	plt.hist(データ列, color='lime')
整数の8進数文字列	oct(整数)[2:]
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ある列でデータフレームをグループ化する	df.groupby('列A')
文字列の中の複数行対応として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
replにデータシリーズの値をまとめて正規表現で変更する	ds.replace(pattern, repl, regex=True)
文字列がリストに含まれないかどうか調べる	文字列 not in リスト
カウンタの文字列をひとつ増やす	aCounter[element] += 1
文字列の接尾辞は	文字列.endswith(部分文字列)
実数の二乗	x ** 2
データフレームを表示するとき、表示する最大列数を変更する	pd.set_option('display.max_columns', n)
option: ライムグリーン色を使う	color = 'limegreen'
実数を浮動小数点数から引く	x - y
入力ストリームを一行ずつ読み込む	f.readline()
ゲインズボロ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
青色でヒストグラムを描画する	plt.hist(データ列, color='blue')
ポスター用にプロットを設定する	sns.set(context='poster')
文字列リストをsepを区切りとしてつなげる	sep.join(文字列リスト)
実数で実数を除する	x / y
最後の部分文字列で文字列を二分して前半を使う	文字列.rpartition(部分文字列)[0]
リストを文字列として、文字列で連結する	文字列.join(map(str, リスト))
データフレームの指定したカラムの欠損値を直後の値で補完する	df['列A'].fillna(method='bfill')
折れ線グラフをティール色として描画する	plt.plot(データ列x, データ列y, color='teal')
配列をフラットにする	aArray.flatten()
データ列と配列の散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
option: タンを使う	color = 'tan'
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
ヒストグラムの色をレベッカパープルにセットする	plt.hist(データ列, color='rebeccapurple')
横棒グラフをドジャーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データシリーズがどれだけ、分散しているか調べる	ds.var()
option: 列方向に計算する	axis = 0
横棒グラフの色を深紅にする	plt.barh(データ列x, データ列y, color='crimson')
option: 濃いシアン色を使う	color = 'darkcyan'
イテラブルから重複なく、n要素ランダムに選んでリストにする	random.sample(イテラブル, k=n)
データ列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
整数がタプルのいづれかかどうか調べる	aTuple = [0, 1, 2]<nl>整数 in aTuple
日付データをISO形式の文字列に変換する	aDate.isoformat()
文字列がPythonのキーワードかどうか判定する	keyword.iskeyword(文字列)
白いグリッド線を引く	plt.grid(color='w')
折れ線グラフの左三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
名前付きタプルを用いる	import collections
リストをビン数nを用いて分割する	pd.cut(aList, n)
ふたつの列を組み合わせてグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
現在の曜日を整数で使う	datetime.datetime.today().weekday()
グラフにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
ふたつの列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
日付データが日付データと同時か	aDate == aDate2
option: 値を置き換える	inplace = True
データシリーズの欠損値をxで埋める	ds.fillna(x)
表データのあるカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: グラフの色をペルーに設定する	color = 'peru'
トマトにヒストグラムの色を変更する	plt.hist(データ列, color='tomato')
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
option: レモンシフォンを使う	color = 'lemonchiffon'
ヒストグラムの色をフォレストグリーンに指定する	plt.hist(データ列, color='forestgreen')
ファイルからの読み込みストリームを使う	open(filepath)
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
数列の相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
リストと数列についてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
配列とリストについて散布図を描画し、、大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームを表示するとき最大行数を変更する	pd.set_option('display.max_rows', n)
整数を八進数リテラルに変換する	oct(整数)
文字列の出力を改行なしに行う	print(文字列, end='')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームの列の各値は何回出現するか調べる	df[col].value_counts()
実数のn乗して実数による余りを求める	pow(x, n, y)
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
折れ線グラフを赤い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
データシリーズの値をValueMapでまとめて置き換える	ds.replace(ValueMap)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
ラインを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
あるカラムの歪度を求める	df['列A'].kurt()
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
等間隔でデータ列をn個にビン分割する	pd.cut(ds, n)
文字列をJSON形式で出力ストリームに出力する	json.dump(文字列, ファイル出力, ensure_ascii=False)
二変数の最も大きい値	max(x, y)
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
コロンで後ろから文字列を区切る	文字列.rsplit(':')
オブジェクトがフレームか調べる	inspect.isframe(オブジェクト)
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
ダークバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
散布図をパールバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームのカラムを説明変数にする	説明変数 = df[['列名', '列名2']]
文字列全体を正規表現に複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
指定したカラムの未入力値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
リストとリストについて散布図を描画してマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームのある列をドロップしてみる	df.drop('列A', axis=1)
ゼロ埋めされたブール型の配列を作る	np.zeros(要素数, dtype=np.int32)
タプルのn番目のの値を使う	タプル[n]
データシリーズの欠損値を前の行の値に増やす	ds.fillna(method='ffill')
option: ダークサーモンを使う	color = 'darksalmon'
option: マーカーの色をライムにする	markerfacecolor = 'lime'
オブジェクトのクラスを求める	type(obj)
折れ線グラフの△マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ブール型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
実数の逆正接	math.atan(x)
ヒストグラムをホワイトスモーク色を使って描画する	plt.hist(データ列, color='whitesmoke')
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
option: ライトコーラルにフォントの色を設定する	color = 'lightcoral'
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
縦棒グラフを描画してラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
数列のパーセンタイルを可視化する	plt.boxplot(データ列)
本日が金曜日	datetime.datetime.today().weekday() == 4
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
黒い丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
日付を表現した文字列を日付データにする	pd.to_datetime(日付を表現した文字列)
リストの要素を文字列として、タブによって結合する	'\t'.join(map(str, リスト))
データフレームの指定したカラムはどの程度正規分布から歪んでいるか見る	df['列A'].kurt()
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
データフレームの選択したカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
変数名をキーとして辞書を生成する	dict(name='kogi', age=6)
文字列を最後の部分文字列で二分して、残りを使う	文字列.rpartition(部分文字列)[-1]
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
option: グラフの色をスレートブルーにする	color = 'slateblue'
異なる列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
データフレームを指定したカラムによってまとめたグループ	df.groupby('列A')
黒い四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの不偏標準偏差	df.std()
セットをリストにする	list(セット)
棒グラフをライトスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームの選択した列の中に日付データと日付データがいくつあるか調べる	df[['列A', '列B']].isin([value, value2]).sum()
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
sepを区切りとして文字列リストを一つにする	sep.join(文字列リスト)
データフレームの選択したカラムの中にいくつ日付データがあるかカウントする	df[['列A', '列B']].isin([value]).sum()
option: 色をカデットブルーに設定する	color = 'cadetblue'
散布図の▽印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの選択したカラムを10の位で丸めて、整数にする	df[['列A', '列B']].round(-1).astype(int)
両端キューから要素を取り除く	両端キュー.remove(要素)
変数名が抽象クラス	inspect.isabstract(識別子)
データフレームのあるカラムが何時か調べる	df['列A'].dt.hour
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
折れ線グラフにポイント印を使用する	plt.plot(データ列x, データ列y, marker='.')
データシリーズにおいてどの値が最も出現するか見る	ds.mode()
option: グリーンを使う	color = 'green'
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
モカシン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データシリーズの欠損値を前の行の値で埋める	ds.fillna(method='ffill')
option: 印の大きさを変更する	markersize = 2.0
デック中の整数の出現数を数える	両端キュー.count(整数)
文字列でフォーマットして本日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
タプルの末尾を取り除く	タプル[:-1]
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
option: フォントの色をサドルブラウンに設定する	color = 'saddlebrown'
option: アクア色を用いる	color = 'aqua'
ファイルパスのファイル名	os.path.basename(filepath)
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームをグループ化し、最大値を求める	df.groupby('列A').max()
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
2つの文字列を辞書順で比較する	文字列 < 文字列2
欠損値のある行を破壊的にドロップする	df.dropna(inplace=True)
データシリーズを四捨五入して、整数にする	ds.round().astype(int)
明日の日付を見る	datetime.date.today() + datetime.timedelta(days=1)
option: 色をロイヤルブルーに設定する	color = 'royalblue'
Pythonのバージョンを知る	sys.version
青い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
リストと数列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームの選択した列の平均値	df[['列A', '列B']].mean()
文字列中にひとつも大文字がない	any(not c.isupper() for c in 文字列)
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
箱ひげ図を使ってデータ列を可視化する	plt.boxplot(データ列)
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データシリーズを表データの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ヒストグラムの色をオーキッドにする	plt.hist(データ列, color='orchid')
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
日付時刻データにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
option: ミディアムアクアマリンにグラフの色を指定する	color = 'mediumaquamarine'
オレンジレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
識別子がコルーチンか調べる	inspect.iscoroutine(識別子)
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
整数をデックの末尾につけ加える	両端キュー.append(整数)
リストは少なくともひとつ真	any(リスト)
折れ線グラフの△マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
配列とリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームをグループ化し、それぞれの最小値を計算する	df.groupby('列A').min()
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
option: ライトブルーにグラフの色を指定する	color = 'lightblue'
文字が平仮名か調べる	('ぁ' <= 文字 <= 'ん')
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
整数を八進数表現にする	oct(整数)
データフレームの中の列を等間隔でn個にビンニングする	pd.cut(df[col], n)
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
データをL1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
option: グラフの色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
文字列に日本語が存在するかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
配列を中央値でビンニングする	pd.qcut(aArray, 2)
真下位集合か	セット < セット2
option: カラムの名前をリストで設定する	names = 列名リスト
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
ピアソンの積立相関係数	scipy.stats.pearsonr(配列, 配列2)
一方に含まれ、他方に含まれない集合	セット.difference(セット2)
計算結果を改行しなくてプリントする	print(式, end='')
カウンタからイテラブルを出現回数して引く	aCounter.subtract(iterable)
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
option: グラフの色をレモンシフォンに変更する	color = 'lemonchiffon'
実数の双曲線余弦	math.cosh(x)
線グラフの色を黄緑に変更する	plt.plot(データ列x, データ列y, color='chartreuse')
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
最頻値でデータフレームの未入力値を埋める	df.fillna(df.mode().iloc[0])
カーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームの列を折れ線グラフとして描画する	plt.plot(df[column], df[column])
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
赤いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
全てのシートを表計算から読み込む	pd.read_excel('file.xlsx', sheet_name=None)
作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
整数の二進数表現を見る	bin(整数)
表計算ファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
散布図を赤い四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
配列の各値を双方向キューの先頭に追加する	両端キュー.extendleft(配列)
イテラブルをイミュータブルな集合に変換する	frozenset(イテラブル)
option: ライトシアン色を使う	color = 'lightcyan'
文字列は全て十進数字	文字列.isdecimal()
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
データシリーズの最頻値	ds.mode()
predicateFuncが真となるイテラブルの部分を得る	itertools.takewhile(predicateFunc, iterable)
両端キューをポップする	両端キュー.pop()
ヒストグラムの色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
タプルをカンマ区切りでプリントする	print(*タプル, sep=',')
横棒グラフの色を濃い青にする	plt.barh(データ列x, データ列y, color='darkblue')
ゼロ埋めされた複素数型の行列を作る	np.zeros(要素数, dtype=bool)
キーが辞書に存在するか調べる	キー in 辞書
データ列と配列の散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
ベクトルの最大値	np.max(aArray)
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
非数値データ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
インデント幅を指定して辞書をJSON文字列に変換する	json.dumps(辞書, ensure_ascii=False, indent=n)
リストの要素をソートする	sorted(リスト)
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
インデントを指定して文字列をJSON文字列にする	json.dumps(文字列, ensure_ascii=False, indent=n)
部分文字列で文字列を区切って、文字列リストにする	文字列.split(部分文字列)
辞書の項目名をひとつずつ処理する	for key in 辞書.keys():<nl><tab>print(辞書[key])  # FIXME
データフレームの選択したカラムの歪度を求める	df[['列A', '列B']].kurt()
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
マゼンタで表示できる文字列にする	f'\033[35m{x}\033[0m'
データフレームの中に文字列がある	df.isin([value])
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
配列のユニークな要素を求める	np.unique(aArray)
実数を百の位で丸める	round(x, -2)
option: ラインを細くする	linewidth = 3.0
表データを２つの列によってグループ化してグループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
データフレームの欠損値が含まれる箇所に色をつける	df.style.highlight_null()
データフレームのインデックスの名前をまとめて付け直す	df.rename(index={x: y})
プログラムの実行をここで終了する	sys.exit()
データフレームをある列の値によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データフレームの選択した列のNaNをxで補う	df[['列A', '列B']].fillna(x)
データシリーズの中に存在する文字列と文字列の合計を求める	ds.isin([value, value2]).sum()
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データシリーズの中に存在する文字列の合計を数える	ds.isin([value]).sum()
option: モカシン色を用いる	color = 'moccasin'
配列の値を変更する	aArray[行番号, 列番号] = 指定の値
小数点数を切り上げる	math.ceil(x)
数の複素数を求める	complex(x)
二つのデータフレームを横向きに一つにする	pd.concat([df, df2], axis=1)
折れ線グラフを濃いシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
赤い一点鎖線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
リストのn番目からn2番目までの部分	リスト[n:n2]
文字列がリストのいずれか	文字列 in リスト
指定した列のカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
option: マーカーの色を白にする	markerfacecolor = 'white'
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
標準エラー	sys.stderr
ファイルをSJISで開く]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
オブジェクトは抽象クラスか調べる	inspect.isabstract(オブジェクト)
折れ線グラフを青い破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの指定したカラムの最頻値	df['列A'].mode()
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
ピーチパフ色を用いてヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
リストが空かどうか確認する	len(リスト) == 0
グラフ中のフォントを設定する	sns.set(font=フォント名)
文字列を空白で分割し、、文字列リストに変換する	文字列.split()
データフレームのあるカラムの未入力値を直前の値に設定する	df['列A'].fillna(method='ffill')
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
新しいガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
半透明の実線を用いてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ゴールドにヒストグラムの色を変更する	plt.hist(データ列, color='gold')
プロットの描画で淡く色テーマを使う	sns.set(pallete='muted')
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
日付データが日付データと同時か調べる	aDate == aDate2
ヒートマップでクラス分類の予測精度を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データフレームをある列をキーにして昇順に並べ、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ブランチドアーモンド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
タイタニック号のデータセットをデータフレームとしてロードする	df = sns.load_dataset('titanic')
上限指定をしたデータフレームのカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームをグループ化し、あるカラムの要約統計量を求める	df.groupby('列A').describe()['列B']
タン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
データフレームの選択したカラムの中にいくつ欠損値があるか求める	df[['列A', '列B']].isna().sum()
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームの指定したカラムの値を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
xが0に近づくときの極限値を算出する	sympy.limit(数式, [|変数]x, 0)
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
補足の場所を(x,y)に変更する	plt.legend(loc=(x, y))
実数の整数部を計算する	math.modf(x)[1]
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
最初の文字列をキューから削除する	両端キュー.remove(文字列)
散布図に丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
現在の秒	datetime.date.today().second
リストの要素を小さい順にソートする	sorted(リスト, reverse=True)
格子線をプロットに付ける	plt.grid(True)
実数の余弦を求める	math.cos(x)
グレー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
最大長のある両端キュー	collections.deque(maxlen=最大長)
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
複数の列としてグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
標準入力から1文字読む	sys.stdin.read(1)
青い三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: ミスティローズにグラフの色を設定する	color = 'mistyrose'
青い破線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフの菱形印を赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
２つのデータフレームを横に結合する	pd.concat([df, df2], axis=1)
データフレームの一部の列の統計量を全部見る	df[['列A', '列B']].describe()
option: 印をクロスに変更する	marker = 'x'
オブジェクトは関数かどうか調べる	callable(obj)
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データ列と数列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
option: グラフの色を淡い茶色に指定する	color = 'tan'
文字列中のタブ文字をn個の空白に置き換える	文字列.expandtabs(tabsize=n)
散布図を四角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='s')
ダークグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
文字列中にひとつでも非大文字があるか確認する	any(not c.isupper() for c in 文字列)
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
文字列が文字列より辞書順で後か調べる	文字列 > 文字列2
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
日付時刻データの月数を使う	aDatetime.month
線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
カテゴリ列で色付けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
縦棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
0からN未満までの配列	np.arange(N)
文字列のn番目を文字コードに変換する	ord(文字列[n])
データフレームからカテゴリデータの列名一覧	df.select_dtypes('object').columns
整数を両端キューの最後に入れる	両端キュー.append(整数)
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
CSVをヘッダを指定せずロードする	pd.read_csv('file.csv', header=None)
データフレームの列の名前一覧	df.columns
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ライトスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
アンティークホワイトにヒストグラムの色をする	plt.hist(データ列, color='antiquewhite')
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
文字列を最後のカンマで二分し、、残りを使う	文字列.rpartition(',')[-1]
オレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
option: グラフの色をオーキッドに指定する	color = 'orchid'
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図をグリーンイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図をペールグリーン色として描画する	plt.scatter(データ列x, データ列y, color='palegreen')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
カラーバーを水平につける	plt.colorbar(orientation='horizontal')
データフレームのある列をNaNも加えてダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
散布図を下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
文字列が双方向キューの中に含まれてるかどうか	文字列 in 両端キュー
実数以上の最小の整数	math.ceil(x)
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
クラス分類の真陽性率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
最大値と最小値を用いてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
二つのデータ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図の丸印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームを指定された列を用いて破壊的に小さい順にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
option: タン色を使う	color = 'tan'
スピアマンの相関係数を計算する	scipy.stats.spearmanr(df['列A'], df['列B'])
option: グラフの色をミディアムスプリンググリーンにセットする	color = 'mediumspringgreen'
データフレームの選択したカラムの欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
コロンで文字列を区切って文字列リストにする	文字列.split(':')
折れ線グラフの線の種類を一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: 改行しない	end = ''
配列の標準偏差	np.std(aArray)
コマンド引数で指定されたファイルを一つずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
ユニークな要素ごとの頻度を見る	np.unique(aArray, return_counts=True)
散布図をアイボリー色を用いて描画する	plt.scatter(データ列x, データ列y, color='ivory')
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームをCSVファイルにヘッダを付けず保存する	df.to_csv('file.csv', header=None)
データシリーズの値が欠損値かどうか調べる	ds.isna()
データフレームの欠損値を前の値に設定する	df.fillna(method='ffill')
データフレームの指定したカラムはどれだけ、分散しているか見る	df['列A'].var()
リストの先頭	リスト[0]
表示される列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: ベクトルのデータ型を指定する	np.int16 = np.int<nl>dtype = np.int16
データシリーズのNaNを最頻値に指定する	ds.fillna(ds.mode().iloc[0])
分類結果の正解率を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
回帰モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
nと整数が等しいかどうか調べる	整数 == 整数2
ふたつの列を組み合わせてグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
折れ線グラフの色をコーンフラワーブルーにセットする	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列の最後から空白を取り除く	文字列.rstrip()
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
文字列の中でパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s)
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームを並べ、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='grey')
option: 欠損値を先頭にする	na_position = 'first'
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームの指定した列の値がNaNかどうか	df['列A'].isna()
データフレームの中に文字列と文字列がいくつあるかカウントする	df.isin([value, value2]).sum()
スプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
rgbの四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
グラフの縦軸を対数に変更する	plt.yscale('log')
整数同士のビット積	整数 & 整数2
要素はマップの値として含まれているか調べる	element in 辞書.values()
データフレームとデータフレームの列を横方向にくっつける	pd.concat([df, ds], axis=1)
縦棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
オブジェクトがメソッドかどうかテストする	inspect.ismethod(オブジェクト)
文字列をキャピタライズする	文字列.capitalize()
リストを関数でフィルタする	filter(func, iterable)
出力ストリームに文字列を書き込む	s = ''<nl>f.write(s)
イテラブルからランダムn個に選んでリストにする	random.choices(イテラブル, k=n)
箱ひげ図を描画して平均線を加える	plt.boxplot(データ列, meanline=True)
option: ミントクリームを用いる	color = 'mintcream'
折れ線グラフに▽印を使う	plt.plot(データ列x, データ列y, marker='v')
散布図をライトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightblue')
最大長を指定して、両端キュー	collections.deque(maxlen=最大長)
option: ダークグレー色を使う	color = 'darkgray'
スノー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
複数の列でグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
線グラフをマルーン色として描画する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
アリスブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
シーグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgray')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
複数のデータフレームを縦向きに結合する	pd.concat([df, df2, df3], axis=1)
数式のパラメータの解を方程式として求める	sympy.solve(数式, 変数)
最後のカンマで文字列を分割し、、前半を使う	文字列.rpartition(',')[0]
リストの要素を文字列としてカンマで一つにする	','.join(map(str, リスト))
エクセルファイルから全シートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
縦棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
リストの要素の位置をエラーなく求める	リスト.index(要素) if 要素 in リスト else -1
ひとつもアスキー文字が文字列中にないか調べる	any(not c.isascii() for c in 文字列)
カデットブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
両端キューのn番目に要素を挿入する	両端キュー.insert(n, 要素)
文字列を部分文字列を使って二分する	文字列.partition(部分文字列)
ベクトル演算をする	import numpy as np
散布図をオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orchid')
両端キュー中の文字列の数を数える	両端キュー.count(文字列)
ふたつの集合のいずれか一方だけの集合	セット.symmetric_difference(セット2)
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームの選択したカラムの中に含まれると文字列の個数を数える	df[['列A', '列B']].isin([value, value2]).sum()
ヒストグラムを上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
文字列をコロンで二分して残りを使う	文字列.partition(':')[-1]
要素がタプルの要素	要素 in タプル
あるカラムの未入力値を平均値に指定する	df['列A'].fillna(df['列A'].mean())
黒い星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
数式を部分分数に展開する	sympy.apart(数式)
小数点以下'4'桁までの文字列にする	':.4f'.format(x)
文字列の両端から空白を取り除く	文字列.strip()
８ビット整数型のゼロ埋めされたベクトルを作る	np.zeros(要素数, dtype=np.int8)
行列と同じ大きさの空配列を作る	np.empty_like(aArray)
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームを二つの列の値でグループ化し、統計量を求める	df.groupby(['列A', '列B']).describe()
散布図にクロス印を使う	plt.scatter(データ列x, データ列y, marker='x')
列の組み合わせ	itertools.combinations(iterable, n)
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
ふたつのリストの差集合を使う	list(set(リスト).difference(set(リスト2)))
双方向キューのサイズ	len(両端キュー)
option: ライトゴールドロディイエローを用いる	color = 'lightgoldenrodyellow'
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', 文字列)
option: 小麦色色を使用する	color = 'wheat'
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
入力ストリーム全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
日付データが火曜日か判定する	aDate.weekday() == 1
指定した列のカテゴリで集計し、それぞれの個数を求める	df.groupby('列A').count()
識別子が非同期ジェネレータ	inspect.isasyncgen(識別子)
データ列の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
ユーザから入力される	input()
データフレームをある列によって昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
配列間のピアソンの積立相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
折れ線グラフの左三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
指定した列の値で集計しそれぞれの標準偏差を算出する	df.groupby('列A').std()
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
本日をタプルに変換する	datetime.datetime.today().timetuple()
整数が一桁の整数かどうか調べる	-9 <= 整数 <= 9
２つの文字列を辞書順で比較する	文字列 < 文字列2
変数名が非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(識別子)
データフレームの中の列を等量で分割数nとしてビン分割する	pd.qcut(df[col], n)
散布図にrgbのクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの列をに箱ひげ図を用いてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
分類モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
数字を全て求める	string.digits
イテラブルを連結して一つの文字列にする	''.join(map(str, イテラブル))
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
ゼロ埋めした論理値型の行列	np.zeros(要素数, dtype=np.int32)
2つのカラムからグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
TSVファイルファイル名がか調べる	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
データフレームの重複した行を数える	df.duplicated().sum()
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
文字列を区切り文字で分割して、文字列リストにする	文字列.split(セパレータ)
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
ある列のカテゴリの最大値	df.groupby('列A').max()
切片なしの重回帰モデルを作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: 改行を区切りで用いる	sep = '\n'
標準出力を求める	sys.stdout
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ソートして文字列をJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
リストの先頭のn要素を取り除く	リスト[n:]
データシリーズを10000の位で丸める	ds.round(-4)
正規表現を使う	import re
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
カウンタの全数を求める	aCounter.total()
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
文字列をカンマで二つに分けて、前の方を使う	文字列.partition(',')[0]
数列の推移を赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの一部のカラムを小数点以下n桁で丸める	n = 2<nl>df[['列A', '列B']].round(n)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
暗くカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
option: ファイルを用いる	file = sys.open('file.txt', 'w')
データフレームの一部のカラムのNaNを平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
データ列の各値の出現数を求める	ds.value_counts()
option: 色をイエローグリーンに設定する	color = 'yellowgreen'
option: ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
今日の日付を使う	datetime.date.today()
複数の列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
横棒グラフをやわらかい青色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
デピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
predicateFuncが真となる列の部分	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムをミディアムシアグリーン色を用いて描画する	plt.hist(データ列, color='mediumseagreen')
文字列中にひとつでも英字が含まれるかどうか調べる	any(c.isalpha() for c in 文字列)
データシリーズの不偏分散を計算する	ds.var(ddof=1)
要素がタプルの要素かどうか調べる	要素 in タプル
グラフにグリッド線を入れる	plt.grid(True)
両端キューに要素をenqueueする	両端キュー.append(要素)
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
データフレームのある列の値をValueMapで一度に変更する	df['列A'].replace(ValueMap)
option: グラフの色をターコイズに設定する	color = 'turquoise'
配列のピアソンの相関係数を見る	scipy.stats.pearsonr(配列, 配列2)
要素をセットに追加する	セット.add(要素)
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
xでデータシリーズの未入力値を埋める	ds.fillna(x)
折れ線グラフの色をダークオリーブグリーンにセットする	plt.plot(データ列x, データ列y, color='darkolivegreen')
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
データシリーズのNaNをその最小値で埋める	ds.fillna(ds.min())
文字列がリストのいずれでもない	文字列 not in リスト
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
リストを文字列として、文字で連結する	文字.join(map(str, リスト))
多次元尺度構成法で文字列次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
文字の文字コード	ord(文字)
リストの平均	sum(リスト)/len(リスト)
ケースを無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
横棒グラフをパレットトルコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
option: チョコレートを用いる	color = 'chocolate'
データフレームのメディアン	df.median()
暗い赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
データフレームのあるカラムが正規分布からどの程度、歪んでいるか調べる	df['列A'].kurt()
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
データシリーズを10の位で丸めて整数型にする	ds.round(-1).astype(int)
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
実数を実数で割る	x / y
3つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
リストからn個、サンプリングする	random.sample(リスト, k=n)
列をビン数nとしてビン分割する	pd.cut(ds, n)
タプルを引数として展開して出力する	print(*タプル, sep=',')
変数名がトレースバック	inspect.istraceback(識別子)
配列の平均の標準誤差を求める	scipy.stats.sem(配列)
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
タイムスタンプデータと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
配列の正規分布を判定する	scipy.stats.shapiro(配列)
散布図をミスティローズ色として描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
終了位置を指定して部分文字列の位置を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
option: 決定木の最大深さを設定する	maxdepth = n
データフレームの選択したカラムの欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
散布図を星マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='*')
データフレームの先頭5行を取り出す	df.head(5)
線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
列の各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
最後のカンマで文字列を二分割して、前半を使う	文字列.rpartition(',')[0]
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'

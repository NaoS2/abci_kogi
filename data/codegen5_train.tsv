散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
上限から下限までの上限下限でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
シーケンスの長さnの順列	itertools.permutations(iterable, n)
貝殻色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
キューに文字列をエンキューする	両端キュー.append(文字列)
配列をイミュータブルな集合にする	frozenset(配列)
辞書のキーの値を参照する	辞書[キー]
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
数値がセットのいずれ	数 in セット
自然対数を求める	math.log(x)
凡例の場所を(x,y)にする	plt.legend(loc=(x, y))
実数の双曲線正弦の逆数	math.asinh(x)
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
赤い左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの選択したカラムの中に文字列と文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
数式のn階微分を算出する	sympy.diff(数式, 変数, n)
リストと配列についての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
白色でヒストグラムを描画する	plt.hist(データ列, color='white')
整数がnの倍数か調べる	整数 % n == 0
データフレームの一部の列の相関行列をピアソンで求める	df[['列A', '列B']].corr(method='pearson')
データフレームをグループ化し、それぞれの平均値を算出する	df.groupby('列A').mean()
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
データフレームの選択した列の欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
英字を使う	string.ascii_letters
ヒストグラムを用いてデータフレームの列を描く	plt.hist(df[column])
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
数式のn階微分を求める	sympy.diff(数式, [|変数]x, n)
現在が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
本日が金曜日	datetime.datetime.today().weekday() == 4
線グラフをハニーデュー色を使って描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームの選択したカラムを1000の位で四捨五入して、整数にする	df[['列A', '列B']].round(-3).astype(int)
データ列の折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
二つの集合の∪を見る	セット.union(セット2)
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
二つのセットは互いに素か判定する	セット.isdisjoint(セット2)
整数が1、もしくは2、もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
タプルの要素を逆順にする	タプル[::-1]
赤色で表示できる文字列にする	f'\033[31m{x}\033[0m'
行列の行ごとの最大値	np.max(aArray, axis=1)
パープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
現在の時刻	datetime.date.today().hour
実数の逆正弦を算出する	math.asin(x)
散布図の菱形マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ふたつの集合の和集合	セット.union(セット2)
option: 珊瑚にフォントの色を変更する	color = 'coral'
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
黒いダイアモンドマーカーをデータ列とイテラブルについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフのバツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
文字列の指定した位置以降に部分文字列が含まれないかどうか	文字列.find(部分文字列, 開始位置) == -1
イテラブルの全順列を求める	itertools.permutations(iterable)
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
３変数の最小値を求める	min(x, y, z)
散布図をオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='orchid')
改行なしに文字列をプリントする	print(文字列, end='')
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
８進数字を求める	string.octdigits
切り下げて整数にする	math.floor(x)
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategrey'
ゼロ埋めした複素数型の配列を作成する	np.zeros(要素数, dtype=bool)
n進文字列を整数に変換する	int(文字列, n)
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
全要素を０で初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
自然数の最大公約数を求める	math.gcd(n, n2)
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: 大バツマーカーを加える	marker = 'X'
ファイルをSJISとしてオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
シーグリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
グラフで使う名前を指定する	plt.title('グラフの名称')
二つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
日付データの曜日を整数で使う	aDate.weekday()
追加できるように既存のファイルを文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
新しい線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
散布図に黒い下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムの色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
データフレームをTSVファイルから読み込む	pd.read_csv('file.tsv', sep='\t')
改行せずxを出力する	print(x, end='')
文字列中の指定した文字の登場	文字列.count(文字)
option: スカイブルー色を使用する	color = 'skyblue'
文字列中にひとつも英字が含まれない	any(not c.isalpha() for c in 文字列)
option: ホットピンク色を用いる	color = 'hotpink'
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフの菱形マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
改行なしに文字列の出力を行う	print(文字列, end='')
ガンマ関数	math.gamma(x)
データフレームの一部のカラムの中にいくつがあるか求める	df[['列A', '列B']].isin([value]).sum()
セットを差分だけに更新する	セット.difference_update(セット2)
紫色にする	f'\033[35m{x}\033[0m'
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームの選択した列の中にいくつ欠損値があるかカウントする	df[['列A', '列B']].isna().sum()
文字列を最後のカンマで分けた場合の残りの文字列を使う	文字列.rpartition(',')[-1]
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
オブジェクトはコードか	inspect.iscode(オブジェクト)
データフレームの指定した列の要約統計量	df['列A'].describe()
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
標準エラーを求める	sys.stderr
あるカラムにリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
データフレームのカラムのピアソンの積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
アークサイン	math.asin(x)
リストからランダム複数個に選んでリストにする	random.choices(リスト, k=n)
インクリメンタルを書きたい	X += 1
文字列の右端から空白を取り除く	文字列.rstrip('\t')
散布図をダーク・スラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
文字列から改行を全て除く	文字列.replace('\n', '')
赤い破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
散布図の四角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
数式を因数分解する	sympy.factor(数式)
整数除算の切り上げを求める	(整数 + 整数2 - 1) // 整数2
指定された列で集計し、それぞれの標準偏差を算出する	df.groupby('列A').std()
0からnまでの整数列を作る	list(range(n+1))
データフレームの選択したカラムがどの程度、分散しているか見る	df[['列A', '列B']].var()
ヒストグラムの色を白にセットする	plt.hist(データ列, color='white')
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
スピアマン順位相関係数でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
０で全要素を初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
データフレームの選択したカラムのNaNを最大値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: 濃いシアンにフォントの色を設定する	color = 'darkcyan'
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームのカラムが正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(df['列A'])
要素がリストの要素かテストする	要素 in リスト
ファイルのディレクトリ名	os.path.dirname(filepath)
文字列中にひとつも英字が含まれないか調べる	any(not c.isalpha() for c in 文字列)
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
条件を満たす限り動作をループさせたい	while 条件式:<nl><tab>print('繰り返し')  # 直して
データフレームの一部のカラムが正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
配列のスピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
計算機イプシロンを求める	sys.float_info.epsilon
データフレームの選択したカラムのNaNを直前の値に変更する	df[['列A', '列B']].fillna(method='ffill')
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
ASCII限定として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
option: ライトシアンにグラフの色を設定する	color = 'lightcyan'
辞書に項目名ワード引数で加えて、更新する	辞書.update(**kwargs)
サドルブラウンにヒストグラムの色をセットする	plt.hist(データ列, color='saddlebrown')
黒い下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの指定したカラムを1000の位で四捨五入して整数型にする	df['列A'].round(-3).astype(int)
線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
日付データを文字列を使ってフォーマットする	"aDate.strftime(""%d/%m/%y"")"
双方向キューからポップする	両端キュー.pop()
文字列がリストにあるかどうか確認する	文字列 in リスト
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
option: グラフの色をブランチドアーモンドに変更する	color = 'blanchedalmond'
条件分岐が書きたい	if 条件式:<nl><tab>print('真のとき')  # 直して<nl>else:<nl><tab>print('そうでなければ')  # 直して
文字列をISO書式でタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
棒グラフをサドルブラウン色を使って描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
数列の要素を連結してひとつの文字列にする	''.join(map(str, 数列))
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
整数をn乗する	x ** n
折れ線グラフの下三角印の太さを指定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ヒストグラムの色をビスクにする	plt.hist(データ列, color='bisque')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
ポスターにグラフの用途を変更する	sns.set(context='poster')
ヒストグラムの色をミディアムスレートブルーにする	plt.hist(データ列, color='mediumslateblue')
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
多次元データを主成分分析で整数次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームのカラムをヒストグラムにする	plt.hist(df[column])
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
xを白色化する	f'\033[37m{x}\033[0m'
ヒストグラムをライトグレー色を用いて描画する	plt.hist(データ列, color='lightgrey')
日付データにn週間を足す	aDate + datetime.timedelta(weeks=n)
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
オブジェクトが浮動小数点数型	float = int<nl>isinstance(obj, float)
データフレームの指定した列名一覧の列だけ抽出する	columns = ['列A', '列B']<nl>df[columns]
箱ひげ図に簡単な説明をつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
データ列とリストの散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
データフレームのあるカラムは何日か見る	df['列A'].dt.day
イテラブルを関数でフィルタする	filter(func, iterable)
データシリーズは正規分布からどの程度、歪んでいるか見る	ds.kurt()
文字列の先頭がsub	文字列.startswith(部分文字列)
縦棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
散布図をカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='khaki')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
データフレームの歪度を計算する	df.kurt()
リストをセットに変換する	set(リスト)
青にヒストグラムの色を変更する	plt.hist(データ列, color='blue')
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームの列の各値の出現数を算出する	df[col].value_counts()
xを文字列に変換してファイルに書く	x = 0<nl>f.write(str(x))
マッピングのキーを列挙する	list(辞書)
データシリーズが何時か知る	ds.dt.hour
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
option: フォントの色をホワイトスモークに変更する	color = 'whitesmoke'
option: フォントの色を白に設定する	color = 'white'
行列の行ごとの分散	np.var(aArray, axis=1)
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
CSVファイルをヘッダを指定せず読み込む	pd.read_csv('file.csv', header=None)
星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*')
option: フォントの色をゲインズボロに設定する	color = 'gainsboro'
y軸だけ目盛り線	plt.grid(axis='y')
option: グラフの色を真紅に設定する	color = 'crimson'
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
option: フォントの色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
option: グラフの色を紺碧に設定する	color = 'azure'
データフレームのあるカラムを10の位で四捨五入する	df['列A'].round(-1)
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
入力から二つの少数を読む	A, B = map(float, input().split())
データフレームのあるカラムの値がxに等しいデータを抽出する	df[df['列A'] == x]
棒グラフをラベンダーブラッシュ色を使って描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
あるカラムのカテゴリごとの標準偏差	df.groupby('列A').std()
option: ダークオレンジを用いる	color = 'darkorange'
ヒストグラムの色を小麦色にする	plt.hist(データ列, color='wheat')
辞書を消去する	辞書.clear()
文字列を区切り記号で二分割して、前の方を求める	文字列.partition(セパレータ)[0]
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
文字列を最後のカンマで二分して、前半を求める	文字列.rpartition(',')[0]
整数割り算の切り上げ	(整数 + 整数2 - 1) // 整数2
逆正接を求める	math.atan(x)
長さの制限された両端キューを数列から作成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
縦棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
文字列を区切り記号で区切って列挙する	文字列.split(セパレータ)
データフレームの選択した列の未入力値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
両端キュー中の文字列の数をカウントする	両端キュー.count(文字列)
浮動小数点数を百の位で丸める	round(x, -2)
スケーリングする	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列をセパレータで二分割し、、前半を使う	文字列.partition(セパレータ)[0]
十六進数文字列を整数に変換する	int(文字列, 16)
列とリストをペアリングする	itertools.zip_longest(iterable, iterable2)
サイコロを振る	random.randint(1, 6)
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
２つの列によってデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
散布図の菱形印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ファイルパスをオープンして]、追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
データフレームの一部のカラムは正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
データフレームをグループ化しあるカラムの記述統計量を計算する	df.groupby('列A').describe()['列B']
データフレームをグループ化し、それぞれの分散を計算する	df.groupby('列A').var()
連立方程式を解く	sympy.solve([数式, 数式2])
データフレームのあるカラムのタイムゾーンを日本に変更する	df['列A'].tz_convert('Asia/Tokyo')
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
データシリーズの中にいくつ欠損値があるか数える	ds.isna().sum()
データフレームの標準偏差を算出する	df.std()
Xの８乗を求めたい	X ** 8
ヒストグラムの色をライトグレーにする	plt.hist(データ列, color='lightgrey')
データフレームの選択したカラムの中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
option: フォントの色をローングリーンに変更する	color = 'lawngreen'
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
キーとその値をタプルとして取り出す	辞書.items()
黒い下三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
option: 線の種類を破線に指定する	linestyle = 'dashed'
データフレームの指定した列の未入力値を平均にセットする	df['列A'].fillna(df['列A'].mean())
データフレームを横方向に結合する	pd.concat([df, df2], axis=1)
x軸とy軸の比率を同じする	plt.axis('equals')
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフをターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='turquoise')
プロットの全般的に色をパステル調にする	sns.set(pallete='pastel')
文字列がリストに含まれないかどうか調べる	文字列 not in リスト
リストの要素を文字列として、'改行で結合する	'\n'.join(map(str, リスト))
両端キューの先頭に配列の各値を追加する	両端キュー.extendleft(配列)
option: 色をリネンに指定する	color = 'linen'
ブラック色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
回数制限して文字列を置換する	文字列.replace(部分文字列, 置換後の文字列, n)
グラフを使う準備をする	import matplotlib.pyplot as plt
横棒グラフをグレー色を使って描画する	plt.barh(データ列x, データ列y, color='grey')
日付時刻データが日付時刻データより後ろ	aDatetime > aDatetime2
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
ヒストグラムをライトグレー色を用いて描画する	plt.hist(データ列, color='lightgray')
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
入力から2つの文字を読む	A, B = map(str, input().split())
セットから共通要素を全て取り除く	セット.symmetric_difference_update(セット2)
識別子がメソッド	inspect.ismethod(識別子)
データフレームを関数の値ごとにグループ分けし、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
マッピングを更新する	辞書.update(辞書2)
数列からランダムに一つ選んでリストにする	random.choice(数列)
要素はタプルの要素	要素 in タプル
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
入力ストリームからJSONフォーマットのデータを読む	json.load(ファイル入力)
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
L1ノルムを用いてデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
上三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
option: シャルトリューズ色を使用する	color = 'chartreuse'
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
データフレームのカラムをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
今日が何月か知る	datetime.datetime.today().month
option: グラフの色をシアンに設定する	color = 'cyan'
データフレームの列を十の位で四捨五入する	df['列A'].round(-1)
タプルのn番目以降の部分を取り出す	タプル[n:]
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
イテラブルとリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームからカテゴリデータの列だけ抽出する	df.select_dtypes('object')
配列の差	aArray - aArray2
3自然数の最大公約数を求める	math.gcd(n, n2, n3)
辞書の値数を見る	len(辞書)
カラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ベージュ色としてヒストグラムを描画する	plt.hist(データ列, color='beige')
折れ線グラフの下三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
複数の条件はどちらでもよく書きたい	条件式 or 条件式2
データをJSON形式でファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
配列をビン数nでビニングする	pd.cut(aArray, n)
データシリーズの中に文字列があるか調べる	ds.isin([value])
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
ヒートマップで混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
データフレームの中である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
配列とリストの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列中の部分文字列を新しい文字列へ置換する	文字列.replace(部分文字列, 置換後の文字列)
ヒストグラムの色をプラムに変更する	plt.hist(データ列, color='plum')
モードであるカラムの未入力値を埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフをマルーン色として描画する	plt.plot(データ列x, データ列y, color='maroon')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: バイナリモードに設定する	mode = 'rb'
データフレームの選択したカラムの歪み	df[['列A', '列B']].kurt()
データフレームの指定したカラムのNaNを数値で補う	df['列A'].fillna(x)
グリッド線を黄色くする	plt.grid(color='y')
グラフのパレットを淡くする	sns.set(pallete='muted')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
y軸の目盛りを表示しない	plt.yticks([])
option: グラフの色をシルバーに設定する	color = 'silver'
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
散布図をダークサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
リストの長さを制限する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
現在は何日か知る	datetime.datetime.today().day
ファイルを文字列の示すエンコーディングでオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
イテラブルをイミュータブルなセットに変換する	frozenset(イテラブル)
文字列の右側から文字を除去する	文字列.rstrip(文字)
配列と配列の散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームの内である列に重複があれば、除く	df.drop_duplicates(subset='列A', inplace=True)
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
カテゴリ別に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの一部のカラムの中に文字列と日付データが存在するか	df[['列A', '列B']].isin([value, value2])
文字列中にひとつでも空白が含まれるか	any(c.isspace() for c in 文字列)
ValueMapでデータフレームの指定したカラムをまとめて置き換える	df['列A'].replace(ValueMap)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
データフレームから100行ランダムサンプリングする	df.sample(100)
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: 丸印を使用する	marker = 'o'
コレクションを使う	import collections
折れ線グラフの丸マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ヒストグラムをシアン色を用いて描画する	plt.hist(データ列, color='cyan')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
データフレームをCSV形式にインデックスを付けず保存する	df.to_csv('file.csv', index=None)
リストをn回結合する	リスト * n
データフレームのある列の値はNaNか調べる	df['列A'].isna()
データフレームの指定したカラムのNaNを最小値に指定する	df['列A'].fillna(df['列A'].min())
リストの要素をスワップする	リスト[x], リスト[y] = リスト[y], リスト[x]
縦棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
ファイルをSJISとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
インディアンレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
配列を変形する	aArray.reshape(行数, 列数)
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
option: ゴーストホワイトを使う	color = 'ghostwhite'
データフレームの列の文字列長を列として見る	df[col].str.len()
散布図の星マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
正規分布かどうか仮説検定する	scipy.stats.shapiro(df['列A'])
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
n進数文字列をバイト列にする	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
数を実数で割った余り	x % y
xの小数点以下'5'桁までプリントする	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフのスタイルを点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ラインを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームから列を1つ選択する	df[['列A']]
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
yについて数式の積分を求める	sympy.integrate(数式, y)
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームの選択したカラムの中にいくつNaNがあるかカウントする	df[['列A', '列B']].isna().sum()
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
option: ダークゴールデンロッドにグラフの色を指定する	color = 'darkgoldenrod'
データフレームの選択した列の下位25パーセント	df[['列A', '列B']].quantile(0.75)
平均値でデータシリーズの未入力値を置換する	ds.fillna(ds.mean())
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
文字列が英字か	文字列.isalpha()
正則化付き線形回帰モデルを準備する	model = sklearn.linear_model.ElasticNet()
散布図を赤い星マーカーとして描く	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームの先頭100行	df.head(100)
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
JSON形式で文字列を指定したファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
わり算の余りの計算を書きたい	X % Y
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
両端キューの中に要素が含まれてるか調べる	要素 in 両端キュー
option: 文字列を区切りで用いる	sep = s
データフレームから重複を除く	df.drop_duplicates(inplace=True)
サポートベクター分類器を用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
カウンタの全数を使う	aCounter.total()
文字列全体が正規表現にケースを無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
イテラブルから両端キューを作る	collections.deque(イテラブル)
縦棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
カテゴリでグループ化してデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
最初のカテゴリーを除外してデータフレームのある列をワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], drop_first=True)
インデント幅を指定して辞書をJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
文字列の大文字と小文字を交換する	文字列.swapcase()
ゲインズボロ色を用いてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
文字列をn回繰り返すイテレータを求める	itertools.repeat(文字列, n)
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
キーが辞書上で既に定義されている	キー in 辞書
文字列を最初のカンマを用いて二分する	文字列.partition(',')
整数を両端キューのn番目に差し込む	両端キュー.insert(n, 整数)
option: プラムを使う	color = 'plum'
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
マップの値を列挙する	辞書.values()
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
配列のn次モーメント	scipy.stats.moment(配列, moment=n)
option: オリーブ色を使う	color = 'olive'
最初のカテゴリーを除外し、データフレームのある列をワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], drop_first=True)
データシリーズの欠損値を中央値に設定する	ds.fillna(ds.median())
ファイルをBOM付きとして書き込みできるように開く]	open(filepath, mode='w', encoding='utf_8_sig')
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図の四角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの丸印を黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
辞書にキーが存在するか調べる	キー in 辞書
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
整数が一桁の整数か調べる	-9 <= 整数 <= 9
文字列を双方向キューの先頭に付け加える	両端キュー.appendleft(文字列)
散布図を茶色色を使って描画する	plt.scatter(データ列x, データ列y, color='brown')
タイムスタンプデータの曜日を整数で求める	aDatetime.weekday()
option: 標準出力を使用する	file = sys.stdout
文字列を区切り文字で二分する	文字列.partition(セパレータ)
ガンマ関数の値を計算する	math.gamma(x)
カラムのトリム平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: 印をバツに変更する	marker = 'x'
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
リストとリストの散布図を描き、文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
データ列の文字列長を列として見る	ds.str.len()
横棒グラフをパールバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='palevioletred')
日付と時刻からタイムスタンプを作成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
rgbの右三角マーカーをリストと数列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: マーカーを丸に変更する	marker = 'o'
入力から二つの文字値を読み込む	A, B = map(str, input().split())
小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
多次元データをt分布型確率的近傍埋め込み法として数値次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
指定した列のカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
数列の各要素を両端キューの末尾に追加する	両端キュー.extend(数列)
データフレームのNaNをxに設定する	df.fillna(x)
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
データフレームの選択した列の不偏分散	df[['列A', '列B']].var(ddof=1)
replに正規表現patternで一度にデータフレームを置換する	df.replace(pattern, repl, regex=True)
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
オブジェクトのメモリビューを使う	memoryview(obj)
デフォルトのエンコーディング	sys.getdefaultencoding()
option: カデットブルー色を使う	color = 'cadetblue'
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
要素の無限イテラブル	itertools.repeat(要素)
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
チョコレート色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
x座標だけグリッド線	plt.grid(axis='x')
文字をユニコードに変換する	ord(文字)
データフレームからある３つの列だけ抽出する	df[['列A', '列B', '列C']]
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
黄色にヒストグラムの色を変更する	plt.hist(データ列, color='yellow')
折れ線グラフの色をスノーにセットする	plt.plot(データ列x, データ列y, color='snow')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
配列にはいくつ要素があるか調べる	aArray.size
option: ダークブルー色を使用する	color = 'darkblue'
ある列のカテゴリで集計し個数を求める	df.groupby('列A').count()
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームとデータフレームの列を横方向に合体させる	pd.concat([df, ds], axis=1)
散布図をブランチドアーモンド色を用いて描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
ヒストグラムをチョコレート色として描画する	plt.hist(データ列, color='chocolate')
文字列がセットに含まれるか	文字列 in セット
xをプリントする	print(x)
nから始まる無限イテラブル	itertools.count(start=n)
ある列の値がx以上、y未満の行を選択する	df[(x <= df['列A']) & (df['列A'] < y)]
ベージュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
配列の累積和を算出する	np.cumsum(aArray)
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
文字列の末尾が	文字列.endswith(部分文字列)
ファイルをバイナリ書き込みモードとして開く]	'wb' = 'a'<nl>open(filepath, mode='wb')
日付時刻データの日数	aDatetime.day
セットをイミュータブルな集合に変換する	frozenset(セット)
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
マップのキーとそのエントリを列挙する	辞書.items()
折れ線グラフを破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
日付データが日付データと同時か調べる	aDate == aDate2
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategray')
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームをグループ化しある列の要約統計量を求める	df.groupby('列A').describe()['列B']
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ミディアムスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフの菱形印を黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
タプルのn番目のを使う	タプル[n]
今日が土曜日か調べる	datetime.datetime.today().weekday() == 5
配列とリストの散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
折れ線グラフをロイヤルブルー色を使って描画する	plt.plot(データ列x, データ列y, color='royalblue')
option: 文字列を改行するの代わりに用いる	end = 文字列
option: ダイアモンド印を描画する	marker = 'D'
部分文字列で文字列を二分割して残りを見る	文字列.partition(部分文字列)[-1]
データフレームの一部のカラムを丸める	df[['列A', '列B']].round()
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
カラムの尖度を算出する	scipy.stats.kurtosis(df['列A'], bias=False)
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
データフレームをグループ化しあるカラムに対し個数を求める	df.groupby('列A')['列B'].count()
モデルの残差を計算する	目的変数 - model.predict(説明変数)
文字列を双方向キューにエンキューする	両端キュー.append(文字列)
データフレームを小数点以下3桁までCSVファイルに保存する	df.to_csv('file.csv', float_format='%.3f')
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
標準入力を使う	sys.stdin
タプルの中の最大値を求める	max(タプル)
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
平均と標準偏差から疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
option: グラフの色をライトコーラルに変更する	color = 'lightcoral'
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
乱数で要素を埋めた配列	np.random.random(N)
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
1文字だけ標準入力から読む	sys.stdin.read(1)
リストをn個に等量でビニングする	pd.qcut(aList, n)
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
折れ線グラフの色をスチールブルーにする	plt.plot(データ列x, データ列y, color='steelblue')
xの絶対値	abs(x)
文字列を区切り文字によって区切り、、列挙する	文字列.split(セパレータ)
連続した配列の作成する	np.arange(開始値, 終了値, 等差)
タプル中の要素が全て真かどうか調べる	all(タプル)
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
暗い赤色としてヒストグラムを描画する	plt.hist(データ列, color='darkred')
データフレームのn行目までを選ぶ	df[:n]
カラムのn次モーメントを算出する	scipy.stats.moment(df['列A'], moment=n)
シエナ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
グラフの簡単な説明の位置を(x,y)に指定する	plt.legend(loc=(x, y))
変数がマイナス無限大に近づく際の数式の極限値を計算する	sympy.limit(数式, 変数, -oo)
変数名がクラスか調べる	inspect.isclass(識別子)
グラフの縦軸を対数に変更する	plt.yscale('log')
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
データシリーズのNaNを最小値に指定する	ds.fillna(ds.min())
異なる列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
散布図の下三角印の太さを設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
配列のトリム平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
散布図の菱形マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
配列の列ごとの平均を使う	np.mean(aArray, axis=0)
1からNまでの配列	np.arange(1, N+1)
ファイルのベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
リストと配列についての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
カウンタ間でユニオン演算する	aCounter | aCounter2
データフレームをグループ化し、それぞれの標準偏差を算出する	df.groupby('列A').std()
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データフレームの欠損値を中央値に減らす	df.fillna(df.median())
文字列をコロンで最後から区切る	文字列.rsplit(':')
折れ線グラフのポイントマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
配列から長さの制限された両端キューを用意する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
リストと配列の散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列の先頭でパターンにマッチするか調べる	re.match(pattern, s)
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
表データから100行、サンプリングする	df.sample(100)
線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームの末尾5行を抽出する	df.tail(5)
タプルの先頭を捨てる	タプル[1:]
ヒストグラムの色をカデットブルーにセットする	plt.hist(データ列, color='cadetblue')
option: グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
xを水色でプリントできる文字列に変換する	f'\033[36m{x}\033[0m'
データフレームの指定した列の母標準偏差を求める	df['列A'].std(ddof=0)
二つの列の値によってデータフレームをグループ化する	df.groupby(['列A', '列B'])
タイタニックのデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
空の勾配ブースティング分類木を準備する	model = sklearn.ensemble.GradientBoostingClassifier()
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
データフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームをグループ化し、ある列に対し最小値を計算する	df.groupby('列A')['列B'].min()
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
xを緑色で表示できる文字列に変換する	f'\033[32m{x}\033[0m'
配列の平均の標準誤差を計算する	scipy.stats.sem(配列)
データフレームのカラムを丸めて、整数型にする	df['列A'].round().astype(int)
タプルの値を逆順にする	タプル[::-1]
ビン数を設定してヒストグラムをプロットする	plt.hist(データ列, bins=区関数)
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
タン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
データフレームのあるカラムの中に文字列と文字列がいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
配列をn個に等量で分割する	pd.qcut(aArray, n)
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
option: 色をスプリンググリーンに設定する	color = 'springgreen'
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
option: ミスティローズにフォントの色を設定する	color = 'mistyrose'
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
マップからキーとバリューの組を取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
データシリーズの欠損値を平均に設定する	ds.fillna(ds.mean())
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
書式文字列をarg文字列を引数としてフォーマットする	書式.format(*args)
日付時刻データの曜日を整数で見る	aDatetime.weekday()
option: スラグレー色を使用する	color = 'slategrey'
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
縦棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
マゼンタ色としてヒストグラムを描画する	plt.hist(データ列, color='magenta')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
赤い一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: ミディアムシアグリーンに色を設定する	color = 'mediumseagreen'
折れ線グラフを青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データ列をインポートする	import pandas as pd
データ列の変遷を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
option: 貝殻を使う	color = 'seashell'
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
データフレームを散布図で可視化し、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームの一部のカラムの標準偏差	df[['列A', '列B']].std()
文字列をISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ドジャーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
データフレームの選択した列のパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
ダークシアグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: アンティークホワイトにグラフの色を指定する	color = 'antiquewhite'
回帰分析をK最近傍法でする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
option: ミスティローズにグラフの色を指定する	color = 'mistyrose'
文字列が正規表現にマッチさせる	re.match(pattern, s)
パターンに大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
グラフを使用する準備をする	import matplotlib.pyplot as plt
実数のn乗の浮動小数点数剰余	pow(x, n, y)
ベクトルの次元数	aArray.ndim
ひとつでも非英字が文字列中に含まれるかどうか判定する	any(not c.isalpha() for c in 文字列)
データ列の離れ具合をプロットする	sns.residplot(x=データ列, y=データ列)
option: 分割記号をコロンにする	sep = ':'
縦棒グラフを描画し、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
乗算を書きたい	X * Y
配列と配列の散布図をプロットして、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: 真紅にグラフの色をする	color = 'crimson'
option: グラフの色をサドルブラウンに指定する	color = 'saddlebrown'
ヒストグラムをダークシアン色として描画する	plt.hist(データ列, color='darkcyan')
データフレームのデータ型の一覧を求める	df.dtypes
データフレームの選択した列の標本標準偏差を計算する	df[['列A', '列B']].std(ddof=1)
文字列をJSONフォーマットでファイル出力にダンプする	json.dump(文字列, ファイル出力, ensure_ascii=False)
折れ線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
実数の正接の逆数	math.atan(x)
変数の値を整数乗に増やす	変数 **= 整数
整数が整数2未満、もしくはn3以上かどうか	整数 < 整数2 or 整数 >= n3
ダークゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームをある列によってまとめたグループ	df.groupby('列A')
デピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: 色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
回帰モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
文字列の出力を改行しなくて行う	print(文字列, end='')
データフレームの中に文字列と文字列が存在するか調べる	df.isin([value, value2])
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
ふたつの列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
リネン色でヒストグラムを描画する	plt.hist(データ列, color='linen')
文字列を最後のコロンで二分し、、後ろの方を求める	文字列.rpartition(':')[-1]
option: 色をピーチパフに設定する	color = 'peachpuff'
散布図でデータフレームを描画して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: ダークオレンジ色を使用する	color = 'darkorange'
option: スラッシュを区切りで使う	sep = '/'
実数の自然対数	math.log(x)
文字列は全て印字できる	文字列.isprintable()
データフレームの選択したカラムの中にいくつ欠損値があるかカウントする	df[['列A', '列B']].isna().sum()
折れ線グラフの大バツ印の色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
数式をyの方程式として解く	sympy.solve(数式, y)
凡例を表示する	plt.legend()
散布図の丸印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
リストと配列について散布図を描画して星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
実線にヒストグラムの線種を指定する	plt.hist(データ列, linestyle='solid')
ひとつでも非ASCII文字が文字列中に含まれるか	any(not c.isascii() for c in 文字列)
rgbの下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストとリストについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
JSON形式の文字列を辞書に変換する	data = json.loads(文字列)
キーがマップに存在しないとき、要素を追加する	辞書.setdefault(キー, element)
ふたつの列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
option: 追加モードを使う	mode = 'a'
両端キューの最初に整数を追加する	両端キュー.appendleft(整数)
データシリーズのNaNを平均値で埋める	ds.fillna(ds.mean())
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
ヒストグラムをゴールド色を使って描画する	plt.hist(データ列, color='gold')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
データフレームの一部のカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
新しいリッジ回帰モデルを新規作成する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
option: ハニーデュー色を用いる	color = 'honeydew'
データフレームの一部の列の欠損値を後の行の値で埋める	df[['列A', '列B']].fillna(method='bfill')
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
分類モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームの選択したカラムの欠損値を最大値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
散布図をロージーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
マッピングの内部も複製する	{k: copy.copy(v) for k, v in 辞書.items()}
データフレームを二つの列で並べ直す	df.sort_values(by=['列A', '列B'])
ペールグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
文字列がリストのいずれでもないか	文字列 not in リスト
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームをグループ化し、ある列に対し分散を算出する	df.groupby('列A')['列B'].var()
ダークゴールデンロッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
TSVファイルからデータフレームをロードする	pd.read_csv('file.tsv', sep='\t')
箱髭図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
option: グレー色を使う	color = 'grey'
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
option: グラフの色をグレーに変更する	color = 'grey'
数式の変数を指定した数式で置き換える	数式.subs(変数, 数式2)
ヒストグラムの色をミディアムスプリンググリーンにセットする	plt.hist(データ列, color='mediumspringgreen')
縦棒プロットを描画する	plt.bar(ラベル列, データ列)
ケースを無視して正規表現で文字列を区切る	re.split(pattern, s, flags=re.IGNORECASE)
数列を縦軸、リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
option: マゼンタ色を用いる	color = 'magenta'
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
折れ線グラフのダイアモンド印を赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの選択したカラムの欠損値をメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
今日の曜日を整数で見る	datetime.datetime.today().weekday()
整数の二乗	整数 ** 2
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの指定したカラムの未入力値を数値で埋める	df['列A'].fillna(x)
option: グラフの色をライトブルーに設定する	color = 'lightblue'
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ヒストグラムの色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
散布図をダークマゼンタ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
赤い点線としてリストの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
散布図を▲印で描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
配列を一次元にする	aArray.flatten()
データフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
グラフの全般的にカラーパレットをパステル調にする	sns.set(pallete='pastel')
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: ケースを無視する	flag = re.IGNORECASE
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームの選択したカラムの未入力値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
変数の値を大きくする	変数 += 整数
出力ストリームから1文字読み込む	f.read(1)
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列はセットに含まれるか	文字列 in セット
ヒストグラムの色をダークレッドに設定する	plt.hist(データ列, color='darkred')
ダークオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
option: グラフの線の種類を実線に変更する	linestyle = 'solid'
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
冪乗を書きたい	X ** Y
整数が奇数か	整数 % 2 == 1
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
文字列の中のASCII限定としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
双方向キューの先頭に整数を追加する	両端キュー.appendleft(整数)
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
紺色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: フォントの色をディムグレーに設定する	color = 'dimgray'
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
散布図のクロス印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: フォントの色をマゼンタに指定する	color = 'magenta'
折れ線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
カウンタの各文字列を、そのカウントだけ列挙する	aCounter.elements()
リストとデータ列についての散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列の中のパターンによる全マッチを求める	re.findall(pattern, s)
ゴーストホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='ghostwhite')
リストをイミュータブルなセットにする	frozenset(リスト)
option: ライトイエローにグラフの色を変更する	color = 'lightyellow'
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
変数名がコードか判定する	inspect.iscode(識別子)
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: グラフのラインスタイルを実線にセットする	linestyle = 'solid'
セットのイミュータブル版	frozenset(セット)
多次元データを多次元尺度構成法で要素次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
イテラブルの組み合せ	itertools.combinations(iterable, n)
option: 全体を計算対象にする	axis = None
JSON形式でデータをファイル出力にダンプする	json.dump(データ, ファイル出力, ensure_ascii=False)
辞書をインデントを指定してJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
散布図に赤い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
文字列の最初から空白を取り除く	文字列.lstrip()
入力から２つの浮動小数数を読む	A, B = map(float, input().split())
ファイルパスをUTF8でオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
リストのイミュータブルな集合を作成する	frozenset(リスト)
リストから重複なく、n要素ランダムに選んでリスト化する	random.sample(リスト, k=n)
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
整数の3分の一	整数 / 3
リストを等間隔でn個に分割する	pd.cut(aList, n)
縦棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
イテラブルとデータ列の散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームのあるカラムの尖度	df['列A'].skew()
二つの文字列を大文字小文字を無視して比較する	文字列.casefold() < 文字列2.casefold()
指定した列のカテゴリで集計し、各最大値を求める	df.groupby('列A').max()
option: ASCII文字に限定する	flag = re.ASCII
year年を日付にする	datetime.date(year=year, month=1, day=1)
セットを共通要素だけに更新する	セット.intersection_update(セット2)
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
線グラフを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
ヒストグラムの色をスチールブルーに指定する	plt.hist(データ列, color='steelblue')
データフレームのあるカラムの平均値を求める	df['列A'].mean()
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
イテラブルの組み合わせ	itertools.combinations(iterable, n)
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
コマンドラインを一覧として見る	sys.argv[1:]
データフレームの選択したカラムの値がNaNか	df[['列A', '列B']].isna()
文字列は全て十進数字か調べる	文字列.isdecimal()
option: 標準出力に出力する	file = sys.stdout
散布図の▲マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
配列とイテラブルについて散布図をプロットし、、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
外れ値を除いた配列の算術平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
ダークターコイズ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
JSON形式の文字列を読む	data = json.loads(文字列)
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームのカラムのn次モーメントを使う	scipy.stats.moment(df['列A'], moment=n)
分類モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームの相関行列をヒートマップを用いて可視化する	sns.heatmap(df.corr())
要素はセットのいずれかどうか調べる	要素 in セット
表データのあるカラムの月	df['列A'].dt.month
イテラブルとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
文字列の中で複数行対応としてパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
数を小数点で丸める	round(x, n)
rgbの下三角マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グリッドを点線にする	plt.grid(linestyle='dotted')
ヒストグラムをターコイズ色を用いて描画する	plt.hist(データ列, color='turquoise')
データフレームの列の名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフをブラウン色として描画する	plt.plot(データ列x, データ列y, color='brown')
プロットの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
散布図の四角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
散布図の菱形印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
xの小数点以下'4'桁までを出力する	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
n個の整数列を得る	list(range(n))
縦方向に二つのデータフレームを結合する	pd.concat([df, df2], axis=0)
文字列を最後のコロンによって二つに分ける	文字列.rpartition(':')
データフレームをグループ化し、分散を計算する	df.groupby('列A').var()
データシリーズにおいてどの値が最も出現するか確認する	ds.mode()
データシリーズを10の位で丸める	ds.round(-1)
空白で文字列を分割し、、文字列リストに変換する	文字列.split()
option: パウダーブルーにフォントの色を設定する	color = 'powderblue'
rgbの右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
大バツ印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
リストは全て真か調べる	all(リスト)
商を求めたい	X // Y
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
マップにキーがない場合、処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
度数分布図のビン数を指定する	plt.hist(データ列, bins=区関数)
学習データのバージョンを知る	version = 'wcce2022-0.1'
配列の要素ごとの積	np.multiply(aArray, aArray2)
データフレームの選択したカラムの中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
データフレームをある列のカテゴリによってグループ化する	df.groupby('列A')
データシリーズを日付データに変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
三つのデータフレームを縦に一つにまとめる	pd.concat([df, df2, df3], axis=0)
棒グラフをシエナ色を使って描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームの一部のカラムを千の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
option: 菱形マーカーを加える	marker = 'D'
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データ列を3つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
配列と配列について散布図をプロットして、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
出力ストリームからn文字、読む	f.read(n)
二つの文字列を順にプリントする	print(文字列, 文字列)
印字可能な文字を全部使う	string.printable
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
JSON形式でデータを出力に出力する	json.dump(データ, ファイル出力, ensure_ascii=False)
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
作画のフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
option: 青紫にフォントの色を設定する	color = 'violet'
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ファイルパスをBOM付きを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
列のNaNをその最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
リストの中の最も大きい値	max(リスト)
データフレームのカラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
ビスク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
データフレームのカラムの標本標準偏差を求める	df['列A'].std(ddof=1)
変数について微分を計算する	sympy.diff(数式, 変数)
データフレームをあるカラムによってまとめたグループ	df.groupby('列A')
ダークオレンジ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
列名を指定して２つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
最後に追加した値を辞書からポップする	辞書.popitem()
モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
option: ペールグリーン色を使用する	color = 'palegreen'
タイムスタンプデータが日曜日かどうか調べる	aDatetime.weekday() == 6
指定された列で集計し、最大値を計算する	df.groupby('列A').max()
option: クロス印を描画する	marker = 'x'
イテラブルの各値を両端キューの末尾に追加する	両端キュー.extend(イテラブル)
配列の幾何平均	scipy.stats.gmean(配列)
データフレームを表示するとき、最大行数をnにセットする	pd.set_option('display.max_rows', n)
配列と数列について散布図を描いてマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
赤いダイアモンドマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
イテラブルとイテラブルについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
実数の小数部	math.modf(x)[0]
ふたつの列からグループ化し、標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
タイムスタンプデータにn日分、加える	aDatetime + datetime.timedelta(days=n)
ファイルをオープンして]、バイナリストリームを求める	'rb' = 'a'<nl>open(filepath, mode='rb')
線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
ヒストグラムの色を淡いピンク色にセットする	plt.hist(データ列, color='lightpink')
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
リストとリストについての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
リストの値を両端キューの末尾に追加する	両端キュー.extend(リスト)
勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームのカラムの調和平均を求める	scipy.stats.hmean(df['列A'])
データ列とデータ列の散布図を描画して、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの選択した列を百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
リストと数列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
プログラムのメソッドの名前を得る	inspect.currentframe().f_code.co_name
行列が何のデータ型か調べる	aArray.dtype()
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
標準入力から1文字分読み込む	sys.stdin.read(1)
イテラブルから重複なくn個ランダムに選んでリスト化する	random.sample(イテラブル, k=n)
ヒストグラムの色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
折れ線プロットでデータ列を可視化する	plt.plot(データ列x, データ列y)
データフレームの欠損値を50パーセンタイルで埋める	df.fillna(df.median())
データフレームの選択したカラムの中に文字列と文字列が含まれるかどうか	df[['列A', '列B']].isin([value, value2])
折れ線グラフをオリーブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olive')
散布図をパパイヤウィップ色として描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図をシャルトリューズ色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
赤い三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
配列をy軸リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
配列と配列についての散布図に黒いクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
正規分布にしたがって配列の値が発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
インプレースに両端キューの要素を反転する	両端キュー.reverse()
カウンタから最頻出な項目の件数を求める	aCounter.most_common()[1]
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
整数が正の数	整数 > 0
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図の三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
二つの整数の商を求める	整数 / 整数2
コマンド引数で与えられたファイル名をひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
データフレームの列を並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
プログラムの実行を異常停止する	sys.exit(1)
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
整数を二進文字列にする	bin(整数)[2:]
折れ線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
ダークスレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
エクセルファイルファイルでデータフレームを出力する	df.to_excel('file.xlsx')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
データフレームのある列をドロップしてみる	df.drop('列A', axis=1)
option: 青緑色を使う	color = 'teal'
オブジェクトは辞書クラス	dict = int<nl>isinstance(obj, dict)
option: ローングリーン色を使用する	color = 'lawngreen'
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列中にひとつもアスキー文字が含まれないか調べる	any(not c.isascii() for c in 文字列)
データフレームの指定したカラムを一万の位で四捨五入する	df['列A'].round(-4)
キューの上限	両端キュー.maxlen
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
ミディアムオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumorchid')
作画のグリッドを暗くする	sns.set(style='darkgrid')
オブジェクトは辞書クラスか調べる	dict = int<nl>isinstance(obj, dict)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
文字列の左側から改行を取り除く	文字列.lstrip('\n')
リストをn倍する	リスト * n
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
予測値とデータの離れ具合をプロットする	sns.residplot(x='列名', y='列名', data=df)
データシリーズの分散	ds.var()
欠損値を含めてデータフレームをある列でグループ分けする	df.groupby('列A', dropna=False)
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
イテラブルに列を続けたイテラブル	itertools.chain(iterable, iterable2)
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
実数の複素数	complex(x)
横棒グラフをダークバイオレット色を使って描画する	plt.barh(データ列x, データ列y, color='darkviolet')
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
配列をセットにする	set(配列)
表計算から複数のシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームのあるカラムのNaNを直後の値に設定する	df['列A'].fillna(method='bfill')
改行しないで複数の計算結果をプリントする	print(式, 式, end='')
文字列を最初のセパレータで二分し、、前半を使う	文字列.partition(セパレータ)[0]
JSON形式で文字列をファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
カラーパレットを淡くする	sns.set(pallete='muted')
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列がn回繰り返すイテラブルを得る	itertools.repeat(element, n)
データフレームのカラムを散布図で図示し、、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
キューの先頭から要素を取り出す	両端キュー.popleft()
ゼロ埋めした行列	np.zeros(要素数)
２つの列からグループ化し、標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
折れ線グラフをライトスチールブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
整数が整数2より小さいかどうか調べる	整数 < 整数2
表データを用いる	import pandas as pd
option: グラフの色をトマトに指定する	color = 'tomato'
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
シエナ色としてヒストグラムを描画する	plt.hist(データ列, color='sienna')
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ふたつのリストの差を使う	list(set(リスト).difference(set(リスト2)))
データフレームのあるカラムの月	df['列A'].dt.month
青いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
ファイルパスを追加モードで開く]	'a' = 'a'<nl>open(filepath, mode='a')
あるカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
散布図を黒い星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
列名を指定して二つのデータフレームをジョインする	'<nl>pd.merge(df, df2, on='列A')
ファイルの拡張子付きのファイル名	os.path.basename(filepath)
文字列が全て数字か調べる	文字列.isdigit()
データフレームのあるカラムの曜日数	df['列A'].dt.dayofweek
棒グラフをダークシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
数を千の位で丸める	round(x, -3)
データフレームの選択したカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
散布図をダークゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
表データのあるカラムが何年か知る	df['列A'].dt.year
△マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
グラフの見栄えを綺麗にする	import seaborn as sns
文字列がセットのメンバーかどうか確認する	文字列 in セット
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
黒い左三角マーカーを配列とリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図に菱形印を加える	plt.scatter(データ列x, データ列y, marker='D')
線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
option: ダークマゼンタを用いる	color = 'darkmagenta'
タプルの要素を展開して出力する	print(*タプル)
黒いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
８乗を計算したい	X ** 8
データフレームの指定したカラムのNaNを最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
文字列中に大文字があるか調べる	any(c.isupper() for c in 文字列)
データフレームのヒストグラムを縦横に並べて図示する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
長さの制限された両端キューを数列から生成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データシリーズを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームのカラムをリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
クラス分類をロバスト推定として行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
キューは空でないかテストする	len(両端キュー) != 0
リストの末尾から値を捨てる	リスト.pop()
有理数モジュールを使用する	import fractions
Xの４乗を欲しい	X ** 4
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
折れ線グラフの△マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
xが無限大に近づく時の極限値を求める	sympy.limit(数式, [|変数]x, oo)
year年month月day日hour時minute分second秒をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
両端キューから文字列を取り除く	両端キュー.remove(文字列)
ライトゴールドロディイエローにヒストグラムの色をする	plt.hist(データ列, color='lightgoldenrodyellow')
黒いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの中の列をビニングする	pd.cut(df[col], aList)
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
双方向キューをポップする	両端キュー.pop()
option: ナバホホワイトを使用する	color = 'navajowhite'
データフレームのある列の標本標準偏差を計算する	df['列A'].std(ddof=1)
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
ホワイトスモーク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
横方向に２つのデータフレームをマージする	pd.merge(df, df2)
文字列がリストに存在する	文字列 in リスト
メディアンでデータシリーズの欠損値を補う	ds.fillna(ds.median())
ダークオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='darkorchid')
パステル調に色をグラフの描画で使う	sns.set(pallete='pastel')
０で全要素を初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
option: 印を上三角に設定する	marker = '^'
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
オブジェクトの属性の値を指定する	setattr(obj, プロパティ名, 値)
散布図のバツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
文字列を最後の部分文字列で二分し、前半を見る	文字列.rpartition(部分文字列)[0]
配列を連結してひとつの文字列にする	''.join(map(str, 配列))
データフレームのあるカラムは何月か見る	df['列A'].dt.month
xの小数点以下'2'桁の文字列にする	':.2f'.format(x)
分類結果の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: 欠損値を先頭に来るようにする	na_position = 'first'
ループをもう一度実行し直したい	if 条件式:<nl><tab>continue
インタプリタの実行ファイルの絶対パス	sys.executable
データフレームの中に日付データとがあるかどうか調べる	df.isin([value, value2])
標準出力を用いる	sys.stdout
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
カラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
JSONフォーマットを使ってデータを出力ストリームに出力する	json.dump(データ, ファイル出力, ensure_ascii=False)
エクセルからシートの名前を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
辞書をJSONフォーマットとしてファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
n進数文字列をバイト列に変換する	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
データフレームの指定したカラムの不偏分散を求める	df['列A'].var(ddof=1)
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの指定したカラムの不偏標準偏差を求める	df['列A'].std()
辞書からキーとバリューの組を取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
データフレームを各列毎にグループ化して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
ヒストグラムを描画して、ビン数を変更する	plt.hist(データ列, bins=区関数)
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
文字列の両端から改行を消す	文字列.strip('\n')
ビン数nとして列をビン分割する	pd.cut(ds, n)
データフレームを表示するとき、表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
ヒストグラムの線の種類を実線に変更する	plt.hist(データ列, linestyle='solid')
リストとリストについて散布図を描画し、、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
折れ線グラフを菱形マーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
イテラブルからn個、サンプリングしてリストにする	random.sample(イテラブル, k=n)
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
option: ダークスラテグレー色を使用する	color = 'darkslategray'
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
赤い菱形マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c='r')
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
変数名が抽象クラス	inspect.isabstract(識別子)
浮動小数点数の平方根を算出する	math.sqrt(x)
配列を横ベクトルに変形する	aArray.reshape(1, -1)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
黒い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列中にひとつでも空白が含まれるか調べる	any(c.isspace() for c in 文字列)
ヒストグラムを青色を使って描画する	plt.hist(データ列, color='blue')
ダークゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
本日の月を使う	datetime.datetime.today().month
色付きの一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
分子n、分母mの分数を作成する	fractions.Fraction(numerator=n, denominator=m)
コマンドフラグの状態	sys.flags
option: 色をライトグレーに設定する	color = 'lightgrey'
正規表現を事前に複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
データ列の散布を作図する	plt.scatter(データ列x, データ列y)
option: アイボリー色を用いる	color = 'ivory'
ヒストグラムをビスク色として描画する	plt.hist(データ列, color='bisque')
実数の双曲線正接の逆数を計算する	math.atanh(x)
オブジェクトは文字列クラスのインスタンス	str = int<nl>isinstance(obj, str)
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
白色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
rgbの丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: オリーブ色を用いる	color = 'olive'
両端キューがほしい	両端キュー = collections.deque()
option: フォントの色を紺碧に指定する	color = 'azure'
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
変数名はスタックフレーム	inspect.isframe(識別子)
文字列を最後からコロンで区切る	文字列.rsplit(':')
横棒グラフをディムグレー色を使って描画する	plt.barh(データ列x, データ列y, color='dimgray')
小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
option: 未入力値は無視する	dropna = True
deqの末尾の要素を求める	両端キュー[-1]
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
predicateFuncを適用したときTrueとなる列の部分	itertools.dropwhile(predicateFunc, iterable)
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
文字列がアスキー文字	文字列.isascii()
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
バリーウッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
標準エラーを使用する	sys.stderr
現在の分を求める	datetime.date.today().minute
データフレームの選択した列のNaNをxに設定する	df[['列A', '列B']].fillna(x)
クラス分類をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingClassifier()
データシリーズの中に文字列と日付データが含まれるか調べる	ds.isin([value, value2])
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
実数のハイパボリック・サインを計算する	math.sinh(x)
データフレームをあるカラムによって大きい順に整列する	df.sort_values(by='列A', ascending=False)
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
コマンドフラグの状態を調べる	sys.flags
文字列の末尾から部分文字列を探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
横棒プロットを描画する	plt.barh(ラベル列, データ列)
破壊的にデータフレームを２つのカラムを用いて小さい順に並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
散布図をインディアンレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='indianred')
ファイルを書き込みモードとしてオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
指定したカラムを小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
option: フォントの色をコーラルに変更する	color = 'coral'
横棒グラフをライトスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
ヒストグラムの線種を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
JSONフォーマットの文字列をロードする	data = json.loads(文字列)
フクシア色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
折れ線グラフの線の種類を点線にセットする	plt.plot(データ列x, データ列y, linestyle='dotted')
数列と数列について散布図を描いて、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
実線にヒストグラムを設定する	plt.hist(データ列, linestyle='solid')
option: グリーンイエローにグラフの色を変更する	color = 'greenyellow'
変数が無限大に近づく時極限値を算出する	sympy.limit(数式, 変数, oo)
option: グリーン色を使う	color = 'green'
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をダークスラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategray')
文字コードに相当する文字	chr(文字コード)
xの絶対値を算出する	abs(x)
赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
データフレームの指定したカラムの値が未入力値かどうか調べる	df['列A'].isna()
異なる列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
青い一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
2つの文字列はケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
option: フォントの色を黄色に変更する	color = 'yellow'
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームの選択したカラムのパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
ミディアムスプリンググリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
グラフの描画で明るく色を用いる	sns.set(pallete='bright')
折れ線グラフの下三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
表データを使う	import numpy as np<nl>import pandas as pd
文字列はセットの要素に含まれないかどうか調べる	文字列 not in セット
シルバー色を用いてヒストグラムを描画する	plt.hist(データ列, color='silver')
散布図の下三角印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ゴーストホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
数列のスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
イテラブルとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
文字列の出力を改行せず行う	print(文字列, end='')
データフレームの一部のカラムの文字列を未入力値にする	df[['列A', '列B']].replace(値, np.nan)
データフレームから型のカラムを取り出す	df.select_dtypes(ty)
グラフのデザインをデフォルトでいい感じに設定する	sns.set()
データフレームから指定されたデータ型の列名一覧を使う	df.select_dtypes(型).columns
データシリーズの欠損値を最小値に指定する	ds.fillna(ds.min())
再帰の上限を上げる	sys.setrecursionlimit(1000000)
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
タブ区切りのファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
整数が3の倍数か調べる	整数 % 3 == 0
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
散布図でデータフレームを見て、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
動作環境がマックか調べる	sys.platform.startswith('darwin')
JSON文字列を構文解析する	data = json.loads(文字列)
リストから配列を作る	np.array(aList)
既存のファイルパスを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
整数が一桁の正の整数かどうか調べる	0 <= 整数 <= 9
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
辞書に辞書2の項目を更新する	辞書.update(辞書2)
データフレームの選択した列の25パーセンタイル	df[['列A', '列B']].quantile(0.25)
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
option: グラフの色をアイボリーに変更する	color = 'ivory'
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの大バツ印の太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
リストの積立相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
文字列中の部分文字列の出現回数を範囲を指定してカウントする	文字列.count(部分文字列, 開始位置, 終了位置)
線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
列とシーケンスを連結する	itertools.chain(iterable, iterable2)
option: スカイブルーにグラフの色を変更する	color = 'skyblue'
右から部分文字列で文字列を区切る	文字列.rsplit(部分文字列)
折れ線グラフをアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='aquamarine')
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
データシリーズが何年か知る	ds.dt.year
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
ケースを無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
実線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: グラフの色をマルーンに変更する	color = 'maroon'
文字列を最後の区切り記号で二分割して、前半を使う	文字列.rpartition(セパレータ)[0]
整数が無限に繰り返すイテラブル	itertools.repeat(整数)
プロットの中の縦軸にキャプションを付ける	plt.ylabel('y軸ラベル')
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategrey')
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
数を小数点以下で丸める	round(x, n)
データ列を分割する	pd.cut(ds, aList)
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
散布図をパープル色を使って描画する	plt.scatter(データ列x, データ列y, color='purple')
ある列のカテゴリごとの最小値	df.groupby('列A').min()
データシリーズは何年か見る	ds.dt.year
ピアソンを用いてデータフレームの相関行列を求める	df.corr(method='pearson')
色付きの破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: マーカーの色をティールにする	markerfacecolor = 'teal'
実数を実数で整数除算する	x // y
要素がセットのメンバーかどうか確認する	要素 in セット
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
カウンタからタプルを引く	aCounter.subtract(aDict)
全てデータフレームの列名を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
整数が一桁の整数かテストする	0 <= 整数 <= 9
大文字を全部見る	string.ascii_uppercase
折れ線グラフの色をシエナにセットする	plt.plot(データ列x, データ列y, color='sienna')
数列とリストについて散布図を描画し、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
配列を元に全要素が初期値の行列を作成する	np.full_like(aArray, 初期値)
線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
x,y,zを順にプリントする	print(x, y, z)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
複数のシートを指定してデータフレームとしてエクセルファイルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
三つの計算結果を順にプリントする	print(式, 式, 式)
散布図に▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
要素がセットに含まれないかどうか調べる	要素 not in セット
プロットのグリッドを暗くする	sns.set(style='darkgrid')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
ヒストグラムをオールドレース色として描画する	plt.hist(データ列, color='oldlace')
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
指定したカラムのどの値が頻出か調べる	df['列A'].mode()
線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
ファイルパスをバイナリ書き込みモードでオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
作画を正方形にする	plt.axis('equals')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
カウントプロットを描く	sns.countplot(x='列名', data=df)
折れ線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
変数がマイナス無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, 変数, -oo)
十六進数字を全部求める	string.hexdigits
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームを関数によってグループ化してグループ名を列挙する	[name for name, _ in df.groupby(関数)]
割った余りを求めたい	X % Y
コマンドラインで与えられたファイルをひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
option: ミスティローズ色を用いる	color = 'mistyrose'
整数の八分の一	整数 / 8
文字列の接頭辞から部分文字列を取り除く	文字列.removeprefix(部分文字列)
option: ブルーバイオレット色を使う	color = 'blueviolet'
折れ線グラフのポイント印を黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: ポイント印を用いる	marker = '.'
指定した列リストのみデータフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
xを黄色で表示できる文字列にする	f'\033[33m{x}\033[0m'
オリーブ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
画像ファイルとしてプロットを保存する	plt.savefig('foo.png')
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの指定したカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
ビン数nでデータフレームの中の列をビンニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
アリスブルーにヒストグラムの色を指定する	plt.hist(データ列, color='aliceblue')
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
二つの最小値	min(x, y)
リストを順番付けする	enumerate(リスト)
数列とイテラブルについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
y軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
実数を3乗する	x ** 3
二つのリストを結合する	リスト + リスト2
カラムを十の位で丸める	df['列A'].round(-1)
小数点数の双曲線正接の逆数	math.atanh(x)
両端キューの先頭に数列のデータを追加する	両端キュー.extendleft(数列)
リストをシャッフルする	random.shuffle(リスト)  # 破壊的操作
option: 色をサンディーブラウンに変更する	color = 'sandybrown'
文字列を両端キューにエンキューする	両端キュー.append(文字列)
配列を中央値でビニングする	pd.qcut(aArray, 2)
ブラックにヒストグラムの色を変更する	plt.hist(データ列, color='black')
データフレームの標準偏差	df.std()
バイナリモードでファイルをオープンして]、fとする	f = open(filepath, mode='rb')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
データをスケーリングする	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
TSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
非ASCII文字が文字列中に含まれるかどうか調べる	any(not c.isascii() for c in 文字列)
データフレームの選択したカラムを10の位で四捨五入する	df[['列A', '列B']].round(-1)
横棒グラフをダークゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
データフレームの選択した列の欠損値を中央値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: カラム名をリストで指定する	names = 列名リスト
データフレームの指定した列がどの程度分散しているか見る	df['列A'].var()
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
深紅色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: フォントの色を赤に設定する	color = 'red'
カウンタからイテラブルを出現回数して減らす	aCounter.subtract(iterable)
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
文字列中の部分文字列の登場をカウントする	文字列.count(部分文字列)
データフレームの母標準偏差	df.std(ddof=0)
足し算を書きたい	X + Y
データフレームから数値データの列を抽出する	df.select_dtypes('number')
縦棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
ふたつの整数の和	整数 + 整数2
折れ線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームの指定した列の未入力値を前の値で補う	df['列A'].fillna(method='ffill')
データフレームをグループ化し、平均値を算出する	df.groupby('列A').mean()
リストと数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
二つの変数の小さい方を知りたい	min(X, Y)
ファイルパスをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
データフレームを2つの列によって大きい順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
文字列が全てアルファベットか調べる	文字列.isalpha()
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
ダークシアン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図を黒い右三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの指定したカラムの標本標準偏差	df['列A'].std(ddof=1)
整数同士の論理和を算出する	整数 | 整数2
データフレームの中の列をビン数nを用いてビニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
文字列の先頭だけ大文字化する	文字列.capitalize()
リストから両端キューを準備する	collections.deque(リスト)
option: ピンク色を使用する	color = 'pink'
チョコレート色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
モカシン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
グラフの描画で淡く色を使用する	sns.set(pallete='muted')
実数の指数	math.frexp(x)[1]
リストとイテラブルについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
日付時刻データはタイムスタンプデータより後ろかどうか調べる	aDatetime > aDatetime2
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
ファイルパスを文字コードtextとしてオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
実部と虚部から複素数を作成する	complex(x, y)
データフレームのある列の値がx以上の行を選択する	df[df['列A'] >= x]
整数を符号付きでバイト列に変換する	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ライトサーモン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
列の各データが何回出現するか確認する	ds.value_counts()
データフレームの欠損値を50パーセンタイルで置換する	df.fillna(df.median())
列の各データ値の出現数	ds.value_counts()
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
タブ区切りのファイルを読む	pd.read_csv('file.tsv', sep='\t')
あるカラムの値は欠損値か調べる	df['列A'].isna()
option: グラフを点線に設定する	linestyle = 'dotted'
ファイルにxを文字列にして書く	x = 0<nl>f.write(str(x))
リストの要素を文字列として文字列によって結合する	文字列.join(map(str, リスト))
最大値・最小値の範囲を用いて一様な疑似乱数を発生させる	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
option: マーカーの色をタンにする	markerfacecolor = 'tan'
リストから重複なく、n個ランダムに選んでリスト化する	random.sample(リスト, k=n)
ヒストグラムをピーチパフ色を用いて描画する	plt.hist(データ列, color='peachpuff')
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
本日を文字列を使ってフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームの列の名前を列挙する	df.columns
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
ExcelファイルファイルからCSVをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
ヒストグラムを一点鎖線で描く	plt.hist(データ列, linestyle='dashbot')
リスト間のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
列をぐるぐると繰り返す	itertools.cycle(iterable)
ベクトルの平均値	np.mean(aArray)
整数が一桁の正の数か	0 <= 整数 <= 9
文字列の両端からタブを取り除く	文字列.strip('\t')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
ファイルをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
option: 色をロージーブラウンに指定する	color = 'rosybrown'
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
両端キューを数列から生成する	collections.deque(数列)
文字列を部分文字列で分割して、前半を見る	文字列.partition(部分文字列)[0]
配列の推移を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームを表示するとき、最大行数をnに指定する	pd.set_option('display.max_rows', n)
データフレームが何行重複するか見る	df.duplicated().sum()
日付データの月数を使う	aDate.month
行列を平坦化する	aArray.flatten()
データ列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
イテラブルから複数個ランダムに選んでリストにする	random.choices(イテラブル, k=n)
ヒストグラムの色をピンクにする	plt.hist(データ列, color='pink')
文字列中からパターンに複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
淡いピンク色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
配列間の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
option: 切片を算出しない	fit_intercept = False
配列のピアソンの相関係数	scipy.stats.pearsonr(配列, 配列2)
ふたつの列を組み合わせてグループ化し、最大値を計算する	df.groupby(['列A', '列B'], as_index=False).max()
指定した文字列で文字列が終了するか調べる	文字列.endswith(部分文字列)
シーケンスをセットに追加更新する	セット.update(リスト)
option: フォントの色をアクアマリンに変更する	color = 'aquamarine'
両端キューの末尾にイテラブルの要素を追加する	両端キュー.extend(イテラブル)
リストとデータ列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
耐火レンガ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームの選択した列の欠損値を第二四分位数に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
変数xがマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
ダークレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
プロットの横軸を対数目盛に変更する	plt.xscale('log')
折れ線グラフにポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
赤い四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ある列の文字列に部分文字列が含まれる行を抽出する	df[df['列A'].str.contains(部分文字列)]
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
整数の八分の一を計算する	整数 / 8
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
タプルの要素を展開して表示する	print(*タプル)
改行なしにxとyを出力する	print(x, y, end='')
タプルをナンバリングしながらひとつずつ処理する	for i, value in enumerate(タプル):<nl><tab>print(i, value)  # value はタプルの要素
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
コメントアウトしたい	# コメント
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
連続したベクトルの自動作成する	np.arange(開始値, 終了値, 等差)
双曲線余弦の逆数を求める	math.acosh(x)
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
セットから共通要素を取り除く	セット.symmetric_difference_update(セット2)
オブジェクトはモジュールか調べる	inspect.ismodule(オブジェクト)
N回、繰り返したい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
Xの四乗が求めたい	X ** 4
全要素を０で初期化した８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
散布図に赤い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
両端キューに整数をプッシュする	両端キュー.append(整数)
指定された列のカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
ファイルからストリームをオープンして]fileとする	file = open(filepath)
ピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
散布図に星マーカーを加える	plt.scatter(データ列x, データ列y, marker='*')
option: フォントの色をミディアムブルーに設定する	color = 'mediumblue'
文字列が全て小文字	文字列.islower()
線形回帰モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
線形モデルの切片を使う	model.intercept_
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
両端キューの中に整数が存在するか調べる	整数 in 両端キュー
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
要素はリストに含まれない	要素 not in リスト
CSVファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
現在の作業ディレクトリ	os.getcwd()
option: ライムを使う	color = 'lime'
配列の要素数	aArray.size
オブジェクトが論理値か調べる	bool = int<nl>isinstance(obj, bool)
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
例外を捉えたい	try:<nl><tab># ここに処理を入れる<nl><tab>pass<nl>except Exception as e:<nl><tab>print(e)
nからn2までのスライス	slice(n, n2)
データフレームの指定したカラムにおいてどの値が頻出か見る	df['列A'].mode()
部分文字列で文字列を二分して、残りを使う	文字列.partition(部分文字列)[-1]
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
nが整数か調べる	整数 == 整数2
データフレームから重複を取り除く	df.drop_duplicates(inplace=True)
ヒストグラムの色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
ファイル名がTSVファイルかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
日付データと日付データの時間差を計算する	aDate - aDate2
データフレームの指定したカラムの第三四分位数	df['列A'].quantile(0.75)
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
新しい文字列で文字列中のパターンを置換する	re.sub(pattern, newsub, s)
ダークサーモン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
線グラフをダークシアン色を使って描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームのカラム間の相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
option: 先頭のカラムをインデックスに設定する	index_col = 0
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
二つのオブジェクトが同じか調べる	obj is obj2
線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
両端キューをイテラブルから生成する	collections.deque(イテラブル)
茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
UTF8でファイルを開く]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
欠損値がある行をドロップし、みる	df.dropna()
双方向キューの先頭	両端キュー[0]
整数が5で割り切れるかどうか	整数 % 5 == 0
option: グラフの色をデピンクに設定する	color = 'deeppink'
青色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
option: ライトイエロー色を使用する	color = 'lightyellow'
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
カウンタ同士で∪演算する	aCounter | aCounter2
option: 先頭のカラムを行に設定する	index_col = 0
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
リストと配列についての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
一度にValueMapでデータフレームの列の値を置換する	df['列A'].replace(ValueMap)
セットのコピーを作る	セット.copy()
指定した列のカテゴリで集計し、最小値を求める	df.groupby('列A').min()
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
識別子がクラスか調べる	inspect.isclass(識別子)
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームの選択したカラムの中央値	df[['列A', '列B']].median()
データフレームの複数の列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
最初の部分文字列で文字列を二つに分ける	文字列.partition(部分文字列)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
半透明の破線を使ってデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
重複していない行を選択する	df[~ df.duplicated(keep=False)]
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
二つのリストからマップ	dict(zip(リスト, リスト2))
空のガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
リストとリストの散布図を描画し、、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
表データのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
option: ライトスレイグレー色を使う	color = 'lightslategrey'
ライトコーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
線グラフの線のスタイルを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
データフレームをソートする	df.sort_values('キーとなる列')
小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
折れ線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
赤い左三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列のn番目	文字列[n]
正規表現に文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データ列のユニークな値の個数	ds.nunique()
棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
配列のスピアマンの相関係数を計算する	scipy.stats.spearmanr(配列, 配列2)
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
スピアマン順位相関係数を用いてデータフレームの相関行列を求める	df.corr(method='spearman')
２重ループを書きたい	for x in range(X):<nl><tab>for y in range(Y):<nl><tab><tab>print((x, y))  # 直して
識別子はモジュール	inspect.ismodule(識別子)
プロットの補足を表示する	plt.legend()
データフレームの指定したカラムの欠損値を前の値に指定する	df['列A'].fillna(method='ffill')
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
整数にする	int(x)
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
option: 右三角マーカーを加える	marker = '>'
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
文字列を左トリムする	文字列.lstrip()
文字列は全て印字できるかどうか調べる	文字列.isprintable()
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
散布図の左三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
型のサブ型	issubclass(サブクラス, クラス)
配列をランダムにシャッフルしてリスト化する	random.sample(配列, len(配列))
マップにキーがあるとき処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
整数がn回繰り返すイテレータ	itertools.repeat(整数, n)
データ列の折れ線グラフを丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列中にひとつも小文字が存在しないかどうか調べる	any(not c.islower() for c in 文字列)
ヒストグラムを黄色色として描画する	plt.hist(データ列, color='yellow')
イテラブルからn個サンプリングしてリスト化する	random.sample(イテラブル, k=n)
横棒グラフをスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='slateblue')
option: フォントの色をライムに設定する	color = 'lime'
データフレームの先頭100行	df.head(100)
データフレームを使う	import numpy as np<nl>import pandas as pd
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
n個にデータ列を等量で分割する	pd.qcut(ds, n)
カラムのUNIX秒をPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
縦棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
ネイビー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
複数の条件が成り立つ	条件 and 条件2 and 条件3
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
L1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームをグループ化し、それぞれの個数を求める	df.groupby('列A').count()
ロバスト推定として回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
predicateFuncを適用したとき真とならないリストの要素を求める	itertools.dropwhile(predicateFunc, iterable)
縦棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
データフレームの相関行列をピアソンとして求める	df.corr(method='pearson')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
n2行n列の二次元リストを得る	[[0] * n for _ in range(n2)]
データフレームのインデックスの名前の一覧	df.index
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
カラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
rgbのバツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
カウンタ同士でユニオン演算する	aCounter | aCounter2
破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
ファイルからの読み込みストリームを使う	open(filepath)
配列が正規分布かどうか調べる	scipy.stats.shapiro(配列)
データ列と数列の散布図にrgbの▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストを更新不能なセットに変換する	frozenset(リスト)
ターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
変数の値を改行しないでプリントする	print(変数名, end='')
日付データが日付データより早いか確認する	aDate2 = aDatetime<nl>aDate < aDate2
文字列の右側から余分な空白を取り除く	文字列.rstrip()
option: 色をダークグレーに変更する	color = 'darkgrey'
ヒストグラムをバリーウッド色を用いて描画する	plt.hist(データ列, color='burlywood')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図の丸マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
整数が配列のいづれかか	aArray = [0, 1, 2]<nl>整数 in aArray
ベクトルの最小を算出する	np.min(aArray)
ファイルをオープンして]、バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
文字列の後ろ	文字列[-1]
現在が水曜日	datetime.datetime.today().weekday() == 2
配列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(配列)
あるカラムの統計量	df['列A'].describe()
文字列のサフィックスがか確認する	文字列.endswith(部分文字列)
赤い左三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
を整数乗に増やす	変数 **= 整数
データフレームのあるカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
文字列の文字数	len(文字列)
日付時刻データの秒数	aDatetime.second
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
シアンにする	f'\033[36m{x}\033[0m'
データフレームからn行、ランダムサンプリングする	df.sample(n)
実数を実数から引く	x - y
モデル教師データでを学習する	model.fit(説明変数, 目的変数)
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
双方向キューをイテラブルから生成する	collections.deque(イテラブル)
リストをリストを境界値としてビンニングする	pd.cut(aList, aList)
option: グラフの色をミントクリームに設定する	color = 'mintcream'
茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
エクセルファイルファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
xの小数点以下'3'桁までをプリントする	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
データフレームの選択した列を万の位で丸める	df[['列A', '列B']].round(-4)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
エクセルファイルからシートの名前を指定して読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
ファイルを文字コードtextで開く]	text = 'utf-8'<nl>open(filepath, encoding=text)
データフレームを二つの列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
要素がデックの中に存在するか調べる	要素 in 両端キュー
全角数字を半角数字に変換する	文字列.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
NaN	math.nan
双方向キューのn番目に整数を差し込む	両端キュー.insert(n, 整数)
文字列中のタブ文字を空白にする	文字列.expandtabs(tabsize=n)
縦棒グラフをプロットして、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
グラフの背景色を白くする	sns.set(style='whitegrid')
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
整数が整数2よりも大きいか確認する	整数 > 整数2
平均と分散でデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列中の部分文字列の出現をカウントする	文字列.count(部分文字列)
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
データシリーズの第二四分位数	ds.median()
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
小数点数以上の最小の整数	math.ceil(x)
xを赤色でプリントできる文字列に変換する	f'\033[31m{x}\033[0m'
タプルの最後からn番目以前の要素を取り出す	タプル[:-n]
マッピングにキーが存在するか	キー in 辞書
変数が0に近づく時、数式の極限値を求める	sympy.limit(数式, 変数, 0)
データフレームを指定した列の値によってグループ化し要約統計量を求める	df.groupby('列A').describe()
データフレームから型型の列を選ぶ	df.select_dtypes(ty)
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データシリーズがどの程度、分散しているか調べる	ds.var()
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームをある列によってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
ゼロ埋めされた８ビット整数型のベクトル	np.zeros(要素数, dtype=np.int8)
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
整数乱数で要素を埋めたベクトル	np.random.randint(開始値, 終了値, N)
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
整数をバイナリに変換する	整数.to_bytes(length=バイト数, byteorder='big')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
ファイルパスを書き込みモードで開く]	'w' = 'a'<nl>open(filepath, mode='w')
プロットの色を淡くする	sns.set(pallete='muted')
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
TSVファイルファイル名がか調べる	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
黒い大バツマーカーをイテラブルと数列についての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='k')
ある列の値がxより大きく、yより小さい行を選択する	df[(x < df['列A']) & (df['列A'] < y)]
データフレームが重複している	df.duplicated()
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
データフレームの選択したカラムの中に存在するの数を数える	df[['列A', '列B']].isin([value]).sum()
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
ミディアムターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの▲マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列の右端から指定した文字を取り除く	文字列.rstrip(文字)
グラフの色を明るくする	sns.set(pallete='bright')
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
配列のデータ型	aArray.dtype()
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
データフレームのカラムの相乗平均を算出する	scipy.stats.gmean(df['列A'])
八進数字を求める	string.octdigits
option: アクアマリンに色を変更する	color = 'aquamarine'
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
折れ線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
２つのデータフレームを異なるカラムをキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
文字列中の部分文字列を数える	文字列.count(部分文字列)
実数の二進対数を求める	math.log2(x)
ベクトルの形状	aArray.shape
データフレームを見る	df.head()
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
スクリプトファイルのディレクトリパスを使う	os.path.dirname(os.path.abspath(__file__))
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列を全て小文字にする	文字列.casefold()
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
option: グラフの種類を破線に指定する	linestyle = 'dashed'
多次元データをt分布型確率的近傍埋め込み法として文字列次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
文字列をコロンで区切って、列挙する	文字列.split(':')
リスト中の要素は全て真かどうか調べる	all(リスト)
ヒストグラムの色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
項目名が辞書上で未定義かどうか調べる	キー not in 辞書
スクリプトの名前	sys.argv[0]
データをJSONフォーマットで指定したファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
縦棒グラフをライトサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
指定したカラムの中の欠損値の数を数える	df['列A'].isna().sum()
浮動小数点数に変換する	float(x)
option: ライトコーラルにグラフの色を変更する	color = 'lightcoral'
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
整数がn回続くイテラブル	itertools.repeat(整数, n)
データフレームのあるカラムの分位数	df['列A'].quantile(パーセント/100)
文字列を区切り記号で分割して、文字列リストに変換する	文字列.split(セパレータ)
ライトグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lightseagreen')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
変数について偏微分する	sympy.diff(数式, 変数)
表データのあるカラムの曜日数	df['列A'].dt.dayofweek
2つの条件はどちらでもよく書きたい	条件式 or 条件式2
散布図に四角印を使用する	plt.scatter(データ列x, データ列y, marker='s')
全数字	string.digits
既存の行列をベースに全要素が初期値の行列を作成する	np.full_like(aArray, 初期値)
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
option: グラフの色をライムグリーンに指定する	color = 'limegreen'
データフレームの一部のカラムの欠損値を最頻値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
文字列中にひとつも英数字が含まれないか調べる	any(not c.isalnum() for c in 文字列)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
文字列中にひとつでも非アスキー文字が存在するか調べる	any(not c.isascii() for c in 文字列)
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列中にひとつも大文字が存在しない	any(not c.isupper() for c in 文字列)
データフレームを二つの列毎にグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
モジュールとして自分自身を	sys.modules[__name__]
option: グラフの色をデピンクにする	color = 'deeppink'
ポスター用にグラフを指定する	sns.set(context='poster')
インデントを指定してデータをJSONにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
文字列を変数にする	sympy.Symbol(変数名)
option: フォントの色をビスクに指定する	color = 'bisque'
欠損値のある行を破壊的に削除する	df.dropna(inplace=True)
双方向キューに要素をプッシュする	両端キュー.append(要素)
ファイルを文字コードtextとして開く]	text = 'utf-8'<nl>open(filepath, encoding=text)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
線グラフの色をスカイブルーにセットする	plt.plot(データ列x, データ列y, color='skyblue')
nからn2の範囲を見る	range(n, n2)
データフレームの指定したカラムが正規分布からどの程度尖っているか見る	df['列A'].skew()
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
データフレームから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
リストとイテラブルについて散布図を描いて、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
指定した列の中にある日付データの合計を数える	df['列A'].isin([value]).sum()
deqの最後を見る	両端キュー[-1]
折れ線グラフのバツ印の線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
列を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
カウンタからイテラブルを出現回数して引く	aCounter.subtract(iterable)
nの無限イテラブル	itertools.repeat(n)
日付時刻データからn秒を引く	aDatetime - datetime.timedelta(seconds=n)
データシリーズが正規分布からどの程度、尖っているか見る	ds.skew()
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
データフレームのn行より前を抽出する	df[:n]
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
先頭のを除いたデータフレーム	df[df.columns[1:]]
赤い実線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: ライトイエローにフォントの色を設定する	color = 'lightyellow'
ふたつのカラムからグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
イテラブルとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
入力ストリームからJSONフォーマットのデータを読み込む	json.load(ファイル入力)
折れ線グラフの△マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームのn行より後ろ抽出する	df[n:]
option: グラフの色をカーキに変更する	color = 'khaki'
リストを縦軸、データ列をx軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
オブジェクトは文字列型	str = int<nl>isinstance(obj, str)
option: フォントの色を小麦色に設定する	color = 'wheat'
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
nと整数が同じ値か調べる	整数 == 整数2
文字列の右端から改行を消す	文字列.rstrip('\n')
オブジェクトがクラスかどうか	inspect.isclass(オブジェクト)
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
黒いバツマーカーをリストとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
表データのあるカラムのタイムゾーンをする	df['列A'].tz_convert('Asia/Tokyo')
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
option: 最初の行をカラムの名前に設定する	header = 0
あるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
KNNで回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームの列をカテゴリデータにする	df[col].astype(object)
折れ線グラフにバツ印を用いる	plt.plot(データ列x, データ列y, marker='x')
option: 色をシーグリーンに変更する	color = 'seagreen'
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
ポイントマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
漢字が文字列に使われているか調べる	re.search('[\u4E00-\u9FD0]', 文字列)
データフレームの中のカラムをビン数nを用いて等量でビン分割する	pd.qcut(df[col], n)
リストの中の最も小さい値	min(リスト)
折れ線グラフの印を星印にする	plt.plot(データ列x, データ列y, marker='*')
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
ヒストグラムをオレンジレッド色を用いて描画する	plt.hist(データ列, color='orangered')
色名をからコードに変換する	matplotlib.colors.cnames[色名]
ピアソンの積立相関係数	scipy.stats.pearsonr(配列, 配列2)
ヒストグラムをナバホホワイト色として描画する	plt.hist(データ列, color='navajowhite')
あるカラムの記述統計量を見る	df['列A'].describe()
xを紫色で表示できる文字列にする	f'\033[35m{x}\033[0m'
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
スカイブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
カラムの欠損値をモードに変更する	df['列A'].fillna(df['列A'].mode().iloc[0])
散布図を深紅色を用いて描画する	plt.scatter(データ列x, データ列y, color='crimson')
配列の合計値を求める	np.sum(aArray)
データシリーズの標本標準偏差	ds.std(ddof=1)
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームの一部の列のNaNをモードで補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
option: チョコレートに色を指定する	color = 'chocolate'
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
文字列がリストに存在しない	文字列 not in リスト
データフレームの一部のカラムの未入力値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
範囲を指定して乱数を得る	random.randint(最小値, 最大値)
データフレームから列を3つだけ選択する	df[['列A', '列B', '列C']]
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
データフレームの中に含まれる文字列の合計を数える	df.isin([value]).sum()
配列を分割する	pd.cut(aArray, aList)
ヒストグラムをマゼンタ色を用いて描画する	plt.hist(データ列, color='magenta')
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
option: 配列のデータ型を指定する	np.int32 = np.int<nl>dtype = np.int32
本日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
最大値と最小値として揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
縦棒グラフをホットピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='hotpink')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
option: フォントの色を白にセットする	color = 'white'
データフレームの行名の一覧	df.index
空のカウンタ	collections.Counter()
リストとリストについての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
横棒プロットを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
文字列の両端から文字を取り除く	文字列.strip(文字)
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフに青い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
双方向キューが空か調べる	len(両端キュー) == 0
option: マーカーを三角に変える	marker = '^'
折れ線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
要素が全て初期値の行列を初期化する	np.full(要素数, 初期値, dtype=np.int)
条件を満たしたら、繰り返しをもう一度実行し直したい	if 条件式:<nl><tab>continue
ファイルを改行なしで一行ずつ読む	f.readline()
ヒストグラムを紺色を用いて描画する	plt.hist(データ列, color='darkblue')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
subで部分文字列が始まるか	文字列.startswith(部分文字列)
カデットブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
データフレームのある列の標本標準偏差	df['列A'].std(ddof=1)
線グラフの色をオリベドラブに変更する	plt.plot(データ列x, データ列y, color='olivedrab')
プロットに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
大文字・小文字を無視してパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ロードされたモジュールの一覧を知る	sys.modules
黒い左三角マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='<', c='k')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
文字列を最初の部分文字列で二つに分けて、残りを使う	文字列.partition(部分文字列)[-1]
３自然数の最大公約数	math.gcd(n, n2, n3)
タプルの要素を昇順にソートする	sorted(タプル, reverse=True)
CSV形式でデータフレームを出力する	df.to_csv('file.csv')
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
線グラフをダーク・スラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
セットをイミュータブルなセットに変換する	frozenset(セット)
プロットの色テーマを全般的に色差別なくする	sns.set(pallete='colorblind')
カテゴリ別で色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
太字でプリントできる文字列に変換する	f'\033[1m{x}\033[0m'
データフレームから重複をドロップする	df.drop_duplicates(inplace=True)
方程式として数式のパラメータの解を計算する	sympy.solve(数式, [|変数]x)
２数の最小の値	min(x, y)
線グラフをゴーストホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
配列のモードを計算する	mode, count = scipy.stats.mode(配列)
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
実数を実数で	x // y
データフレームのあるカラムの中に文字列と文字列が存在する	df['列A'].isin([value, value2])
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
識別子が非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(識別子)
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図に▼マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
ミディアムブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
文字列がセットのメンバーか調べる	文字列 in セット
整数がセットのメンバーでないか調べる	数 not in セット
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
小数点数を切り上げる	math.ceil(x)
本日が木曜日かどうか	datetime.datetime.today().weekday() == 3
等差数列から整数乱数を生成する	random.randrange(start, end, step)
数列とリストについて散布図を描画し、、マーカーを△にセットする	plt.plot(データ列x, データ列y, marker='^')
ファイルからバイナリストリームを開いて]fとする	f = open(filepath, mode='rb')
ニューラルネットで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データフレームを破壊的にある列によって大きい順にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
データフレームのカラムの欠損値を第二四分位数で置換する	df['列A'].fillna(df['列A'].median())
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
option: 色をライムに設定する	color = 'lime'
ファイルを改行を取り除いて一行ずつ読む	f.readline()
折れ線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
ラベンダー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
nから始まる無限列がほしい	itertools.count(start=n)
ライトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図をオリベドラブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
折れ線グラフに上三角印を用いる	plt.plot(データ列x, データ列y, marker='^')
トマト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
option: エラーを無視するように指定する	errors = 'ignore'
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
折れ線グラフの色をフォレストグリーンにセットする	plt.plot(データ列x, データ列y, color='forestgreen')
折れ線グラフの左三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームの行を抽出する	df[start:end]
双方向キューは空でないか	len(両端キュー) != 0
ヒストグラムを白色を用いて描画する	plt.hist(データ列, color='white')
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
xがマイナス無限大に近づくときの極限値を求める	sympy.limit(数式, [|変数]x, -oo)
乱数シードを初期化する	random.seed()
JSON形式のファイルをパースする	with open('file.json') as f:<nl><tab>data = json.load(f)
赤い▼マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列中から部分文字列の位置を探す	文字列.find(部分文字列)
option: n番目の列を行に設定する	index_col = n
散布図の左三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
折れ線グラフの色を紺に変更する	plt.plot(データ列x, データ列y, color='darkblue')
指定したカラムの標準偏差	df['列A'].std()
データフレームのある列の値がx以上の行を取り出す	df[df['列A'] >= x]
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムをグリーン色として描画する	plt.hist(データ列, color='green')
数列から双方向キューを作る	collections.deque(数列)
入力ストリームを全て読む	f.read()
option: フォントの色をフクシアに設定する	color = 'fuchsia'
xとyをカンマで区切って表示する	print(x, y, sep=',')
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
データフレームのあるカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
折れ線グラフに四角印を使う	plt.plot(データ列x, データ列y, marker='s')
列のそれぞれを関数でフィルタする	map(func, iterable)
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
データ列とリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームから同じ内容のデータを除く	df.drop_duplicates(inplace=True)
yが無限大に近づく時の数式の極限値を算出する	sympy.limit(数式, y, oo)
Xのn乗を欲しい	X ** n
整数が双方向キューの中に含まれてるか	整数 in 両端キュー
リストの平均値	sum(リスト)/len(リスト)
option: グラフの色をダークブルーに変更する	color = 'darkblue'
文字列の開始位置からと終了位置番目までの間に部分文字列がないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
型が名前付きタプルか	issubclass(C, tuple)
year年month月day日hour時minute分second秒の日付時刻	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
整数の階乗	math.factorial(n)
リストをインデント幅を指定してJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
数式の積分を計算する	sympy.integrate(数式)
ユニークな要素ごとの出現回数を使う	np.unique(aArray, return_counts=True)
リストを分割数nでビン分割する	pd.cut(aList, n)
散布図をアクア色を用いて描画する	plt.scatter(データ列x, データ列y, color='aqua')
ブランチドアーモンド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
整数が整数2より大きいかどうか調べる	整数 > 整数2
数式の部分分数化を行う	sympy.apart(数式)
縦棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
マップで文字列を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
縦棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
プラットホームはMacOSか調べる	sys.platform.startswith('darwin')
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
配列を両端キューに変換する	collections.deque(配列)
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
オブジェクトが論理値か確認する	bool = int<nl>isinstance(obj, bool)
指定の列に重複があれば、除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
浮動小数点数の三乗	x ** 3
文字列を最後のカンマで二分し、、後ろの方を求める	文字列.rpartition(',')[-1]
リストn番目から値をポップする	リスト.pop(n)
大バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
プロットの縦軸の軸名をuntitledに設定する	plt.ylabel('y軸ラベル')
コーンズシルク色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
空のリッジ回帰モデルを作る	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
データフレームのカラムのケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
度数分布図を３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ひとつ置きにタプルを取り出す	タプル[::2]
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: グラフの色を真紅にする	color = 'crimson'
横棒グラフを珊瑚色として描画する	plt.barh(データ列x, データ列y, color='coral')
カウンタのキー一覧	aCounter.keys()
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
を整数分の一にする	変数 //= 整数
配列の歪度を使う	scipy.stats.skew(配列, bias=False)
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
リストの要素を文字列として、カンマによって連結する	','.join(map(str, リスト))
辞書にキーがあるいるとき、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
セットの補集合を見る	セット.difference(セット2)
線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
三自然数の最大公約数	math.gcd(n, n2, n3)
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームの列の名前の一覧を求める	df.columns
xをシアン化する	f'\033[36m{x}\033[0m'
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
リストをビン数nでビン分割する	pd.cut(aList, n)
option: ペールグリーンにグラフの色を変更する	color = 'palegreen'
リストの要素を昇順に並べ変える	sorted(リスト, reverse=True)
ベクトルの列ごとの最小値	np.min(aArray, axis=0)
データフレームの上n行	df.head(n)
横棒グラフの色をセットする	plt.barh(ラベル列, データ列, color=rgb)
option: コーラルにグラフの色を変更する	color = 'coral'
横棒グラフをダークバイオレット色として描画する	plt.barh(データ列x, データ列y, color='darkviolet')
option: 上三角マーカーを描画する	marker = '^'
ヒストグラムの色をフクシアにする	plt.hist(データ列, color='fuchsia')
最初のコロンで文字列を二分して残りを使う	文字列.partition(':')[-1]
実数を数で割って切り捨てる	x // y
バイナリできるようにファイルを開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
文字列を部分文字列で区切って、列挙する	文字列.split(部分文字列)
ふたつのマップを合体する	辞書 | 辞書2
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
辞書から項目名で指定された値をポップする	辞書.pop(キー)
全要素が初期値の行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
リストと数列についての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
グリッド線	plt.grid(linewidth=3.0)
option: 色をシアンに設定する	color = 'cyan'
option: 書き込みモードに変更する	mode = 'w'
文字列をファイルに書き込む	s = ''<nl>f.write(s)
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
上位集合かどうか確認する	セット.issuperset(セット2)
ヒストグラムの色をゴールドにする	plt.hist(データ列, color='gold')
タプルのn番目からn2番目までの部分	タプル[n:n2]
xをシアンにする	f'\033[36m{x}\033[0m'
リストが空か調べる	len(リスト) == 0
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
２つの条件を書きたい	条件式 and 条件式2
文字列中に小文字が含まれないか調べる	any(not c.islower() for c in 文字列)
リストの変遷を半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列を最後の区切り文字で二分する	文字列.rpartition(セパレータ)
改行なしに複数の計算結果をプリントする	print(式, 式, end='')
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
スカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
列からカウンタを作る	collections.Counter(iterable)
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
ライトグレーにヒストグラムの色をセットする	plt.hist(データ列, color='lightgrey')
散布図に青い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
タブで区切ってxとyをプリントする	print(x, y, sep='\t')
データフレームの選択したカラムにおいてどの値が頻出か見る	df[['列A', '列B']].mode()
二つの整数の積を求める	整数 * 整数2
option: グラフの色を黄緑に設定する	color = 'chartreuse'
破壊的にデータフレームを複数の列によって大きい順に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
n個の数値イテラブル	range(n)
option: ミディアムブルーを使う	color = 'mediumblue'
カウンタの要素数	len(aCounter)
実数のcosの逆数	x = 0.33<nl>math.acos(x)
文字列を部分文字列で二分して、後ろの方を使う	文字列.partition(部分文字列)[-1]
文字列に漢字が使われているかどうか調べる	re.search('[\u4E00-\u9FD0]', 文字列)
実数の指数を求める	math.frexp(x)[1]
シーケンスの重複組み合わせを計算する	itertools.combinations_with_replacement(iterable, n)
配列の形	aArray.shape
多次元データをt-SNEとして項次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームの選択した列の母標準偏差	df[['列A', '列B']].std(ddof=0)
2つ並べて配列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
レベッカパープルにヒストグラムの色をセットする	plt.hist(データ列, color='rebeccapurple')
リストとデータ列についての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 右三角マーカーを描画する	marker = '>'
ピアソンを使ってデータフレームの相関行列を求める	df.corr(method='pearson')
データフレームの一部の列の欠損値を平均で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
カラムにおいてどの値が頻出か見る	df['列A'].mode()
ホットピンク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
要素が全て1の行列を作る	np.ones(要素数, dtype=np.int)
文字列を最初のカンマで二分割して、前半を使う	文字列.partition(',')[0]
データフレームの選択した列の中に文字列と文字列が存在するか確認する	df[['列A', '列B']].isin([value, value2])
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
ライトコーラル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの標本分散を計算する	df.var(ddof=0)
整数の三分の一	整数 / 3
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
折れ線グラフを右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>')
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
グリーンイエロー色でヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
option: コーンズシルク色を用いる	color = 'cornsilk'
辞書からキーとその値をタプルとして取り出す	辞書.items()
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
データフレームの指定した列のNaNをモードで置き換える	df['列A'].fillna(df['列A'].mode().iloc[0])
正規分布にしたがって配列をランダムに生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
ガンマ関数の値を算出する	math.gamma(x)
マップのキーと値を入れ替える	{v: k for k, v in 辞書.items()}
日付データが火曜日かどうか調べる	aDate.weekday() == 1
データフレームから型リストで指定したデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
データフレームの選択したカラムの値は未入力値か調べる	df[['列A', '列B']].isna()
折れ線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
終了位置を指定して部分文字列の位置を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
データフレームの中に文字列が含まれるか	df.isin([value])
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
変数の値を減らしたい	X -= 1
プロットから目盛線を表示しない	plt.grid(False)
ハニーデュー色を用いてヒストグラムを描画する	plt.hist(データ列, color='honeydew')
データシリーズを十の位で丸める	ds.round(-1)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
折れ線グラフをベージュ色を用いて描画する	plt.plot(データ列x, データ列y, color='beige')
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
線グラフをシャルトリューズ色を用いて描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムを白くする	plt.hist(データ列, color='w')
エラーを出力する	sys.stderr
イテラブルとリストについての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データシリーズの中にある文字列と日付データの合計をカウントする	ds.isin([value, value2]).sum()
実数のハイパボリック・サインを算出する	math.sinh(x)
option: ミディアムバイオレットレッドにフォントの色を設定する	color = 'mediumvioletred'
リストの要素を空白区切りで表示する	print(*リスト)
データフレームの一部の列の歪度	df[['列A', '列B']].kurt()
データフレームをある列によって集計して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データシリーズの欠損値をその最頻値で補う	ds.fillna(ds.mode().iloc[0])
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
数式のn階偏微分を求める	sympy.diff(数式, [|変数]x, n)
ナバホホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
横棒グラフをティール色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
option: グラフの色をハニーデューに設定する	color = 'honeydew'
option: バイナリモードを用いる	mode = 'rb'
カウンタの項目数を見る	len(aCounter)
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
要素がセットに含まれる	要素 in セット
両端キュー中の要素の出現数を数える	両端キュー.count(要素)
リストとリストの散布図を描画してポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
配列のイミュータブルな集合を見る	frozenset(配列)
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
散布図に青いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
filepathにカレント作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
散布図に四角印を使う	plt.scatter(データ列x, データ列y, marker='s')
文字列が小文字か調べる	文字列.islower()
整数の各桁の総和	sum(map(int, str(整数)))
option: マーカーの色を変更する	markerfacecolor = '#800080'
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
２つの最も小さい値	min(x, y)
文字列の接尾辞がか調べる	文字列.endswith(部分文字列)
データフレームのn行以降抽出する	df[n:]
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
配列が正規分布か調べる	scipy.stats.shapiro(配列)
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
実数の複素数を計算する	complex(x)
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
要素がセットのいずれ	要素 in セット
オブジェクトは抽象クラスか調べる	inspect.isabstract(オブジェクト)
データフレームのあるカラムは何秒か知る	df['列A'].dt.second
データフレームの欠損値をその平均値で埋める	df.fillna(df.mean())
折れ線グラフのバツ印の線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
日付時刻データの時間数	aDatetime.hour
書式でデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームの選択したカラムを十の位で丸める	df[['列A', '列B']].round(-1)
新しいロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
データシリーズの未入力値を中央値に設定する	ds.fillna(ds.median())
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
リストの要素が最初に見つかる位置を探す	リスト.index(要素)
xが無限大に近づく場合の極限値を求める	sympy.limit(数式, [|変数]x, oo)
ビン数nで配列をビン分割する	pd.cut(aArray, n)
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
８乗を求めたい	X ** 8
データフレームのカラムの中に文字列が含まれるか	df['列A'].isin([value])
オブジェクトがn回繰り返す列を得る	itertools.repeat(element, n)
文字列を部分文字列で区切って、文字列リストにする	文字列.split(部分文字列)
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
数を整数に変換する	int(x)
無限大を用いる	math.inf
スクリプトファイルと同じディレクトリのファイルのパスを見る	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
データフレームのカラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
ダークグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
データフレームをグループ化して、ヒストグラムを用いて図示する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームの選択したカラムが正規分布からどれだけ、歪んでいるか見る	df[['列A', '列B']].kurt()
データフレームの指定したカラムの欠損値をxに増やす	df['列A'].fillna(x)
本日が何日か知る	datetime.datetime.today().day
青色でプリントできる文字列にする	f'\033[34m{x}\033[0m'
数式の変数についてのn階微分を算出する	sympy.diff(数式, 変数, n)
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
ダーク・スラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
整数わる整数を算出する	整数 / 整数2
キーワード引数としてマッピングに追加する	辞書.update(**kwargs)
option: リネンにグラフの色を設定する	color = 'linen'
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
データ列を分割数nとしてビン分割する	pd.cut(ds, n)
整数2がnより大きく、かつ、n3未満か調べる	整数 < 整数2 and 整数2 < n3
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
データフレームの選択した列の欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データフレームの指定したカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
データフレームの一部のカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
黒い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgray')
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
両端キューの要素をインプレースに逆順にする	両端キュー.reverse()
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
何回まで再帰ができるかを	sys.getrecursionlimit()
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
シーケンスをカウンタにする	collections.Counter(iterable)
棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームの指定したカラムの尖度を算出する	df['列A'].skew()
データフレームを指定したカラムの値によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
データフレームのある列をインデックスに変更する	df.set_index('列A')
表に重複があるか確認する	df.duplicated()
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
辞書の項目名をリストに変換する	list(辞書.keys())
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
データをJSONフォーマットを用いてファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
文字列がセットの要素でないか確認する	文字列 not in セット
ライトグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ミディアムオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
実数のルートを求める	math.sqrt(x)
黒い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
ユーザの入力を整数として受け取る	int(input())
0からN未満までの行列	np.arange(N)
ロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ふたつの集合の対称差集合を求める	セット.symmetric_difference(セット2)
線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
実行中のエラー情報	etype, evalue, traceback = sys.exc_info()
線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームの一部の列を100の位で丸める	df[['列A', '列B']].round(-2)
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
データフレームのある列名一覧の列を抽出する	columns = ['列A', '列B']<nl>df[columns]
データシリーズの母標準偏差	ds.std(ddof=0)
データフレームのカラムのケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
データフレームの一部の列を10の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
最大値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
最後の区切り文字で文字列を二分する	文字列.rpartition(セパレータ)
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
シルバー色でヒストグラムを描画する	plt.hist(データ列, color='silver')
データフレームの相関行列をヒートマップを使って描画する	sns.heatmap(df.corr())
option: 箱髭図に平均を追記する	showmeans = False
ある列のカテゴリごとの分散を計算する	df.groupby('列A').var()
option: 追加モードに設定する	mode = 'a'
データフレームの重複する行をマスクする	df.duplicated()
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in 文字列)
プロットにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
正規分布による確率密度関数を使用する	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
リストとデータ列について散布図をプロットし、、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
ダークブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
整数マイナス整数	整数 - 整数2
データシリーズの欠損値を最大値に指定する	ds.fillna(ds.max())
option: 印を大バツに変える	marker = 'X'
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
option: フォントの色をやわらかい青に設定する	color = 'cornflowerblue'
作画の背景色を暗くする	sns.set(style='darkgrid')
度数分布図をビンを設定して描く	plt.hist(データ列, bins=区関数)
回帰分析をPLSで行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データシリーズの中にいくつ未入力値が存在するか数える	ds.isna().sum()
変数の値を整数だけ増やす	変数 += 整数
あるカラムのカテゴリで集計し最小値を求める	df.groupby('列A').min()
データフレームをグループ化し、あるカラムに対し最小値を求める	df.groupby('列A')['列B'].min()
データフレームを降順に破壊的にある列をキーにしてソートする	df.sort_values(by='列A', ascending=False, inplace=True)
option: パパイヤウィップを使う	color = 'papayawhip'
３つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
データフレームの選択したカラムの不偏標準偏差を算出する	df[['列A', '列B']].std()
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
グラフにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
ナバホホワイト色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
指定した列で集計し、それぞれの最大値を求める	df.groupby('列A').max()
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
赤いポイントマーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: バツマーカーを使う	marker = 'x'
積を計算したい	X * Y
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
配列の内積を計算する	np.dot(aArray, aArray2)
データフレームを表示するとき、ヘッダー行を右寄せに増やす	pd.set_option('colheader_justify', 'right')
リストの要素を文字列として、指定した文字列によって連結する	文字列.join(map(str, リスト))
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
黒い左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
パステル調にカラーパレットをグラフの描画で使う	sns.set(pallete='pastel')
stringモジュールをインポートする	import string
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
グリッド線	plt.grid(linewidth=3.0)
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
データフレームを並べ直して、上の方を取り出す	df.sort_values('キーとなる列').head(n)
ふたつの整数の積	整数 * 整数2
option: ゴールデンロッド色を使う	color = 'goldenrod'
未初期化のベクトルを作る	np.empty(要素数, dtype=np.int)
データフレームをグループ化し、それぞれの平均値を求める	df.groupby('列A').mean()
実数の逆双曲線正弦	math.asinh(x)
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
棒グラフをプラム色を用いて描画する	plt.bar(データ列x, データ列y, color='plum')
バイナリ書き込みモードでファイルをオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
線グラフの色をチョコレートにする	plt.plot(データ列x, データ列y, color='chocolate')
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
文字列を部分文字列で二分して、前半を使う	文字列.partition(部分文字列)[0]
ある列の値ごとの平均値	df.groupby('列A').mean()
「もしくは」を書きたい	条件式 or 条件式2
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
整数を8進数表現に変換する	oct(整数)
フローラルホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
グラフからグリッド線を表示しない	plt.grid(False)
データフレームのカラムが正規分布からどの程度、尖っているか確認する	df['列A'].skew()
要素がタプルに含まれるか調べる	要素 in タプル
リストを文字列として、'改行によって結合する	'\n'.join(map(str, リスト))
実数のn乗して数による余りを求める	pow(x, n, y)
折れ線グラフのマーカーを上三角にする	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: 最初の行をヘッダに指定する	header = 0
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
サドルブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='saddlebrown')
xを太字にする	f'\033[1m{x}\033[0m'
option: ホワイトを用いる	color = 'white'
棒グラフをティール色として描画する	plt.bar(データ列x, データ列y, color='teal')
整数がセットの要素に含まれるかどうか調べる	数 in セット
散布図にrgbのクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
整数を八進数表現に変換する	oct(整数)
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
横棒グラフをやわらかい青色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
小文字が文字列中に含まれるか調べる	any(c.islower() for c in 文字列)
実数のハイパボリック・タンジェント	math.tanh(x)
線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
辞書のコピーを生成する	dict(辞書)
option: マーカーを▽に変更する	marker = 'v'
複素数を求める	complex(x, y)
上限指定をしたデータフレームのカラムの算術平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
文字列から空白を全て取り除く	文字列.replace('\t', '')
実行時に標準出力がパイプ	not sys.stdout.isatty()
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
目盛線	plt.grid(alpha=0.5)
整数の四乗を求める	整数 ** 4
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
整数2がnより大きくかつ、n3未満	整数 < 整数2 and 整数2 < n3
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
改行なしに2つの数値をプリントする	print(数値, 数値, end='')
文字コードから文字へ変換する	chr(文字コード)
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
標準入力から1行分改行なしで読む	sys.stdin.readline().rstrip()
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
データフレームの一部のカラムの中に文字列があるかどうか調べる	df[['列A', '列B']].isin([value])
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
ベクトルの行ごとの標準偏差	np.std(aArray, axis=1)
option: ブランチドアーモンドにグラフの色を設定する	color = 'blanchedalmond'
やわらかい青色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
配列から重複なくn要素ランダムに選んでリストにする	random.sample(配列, k=n)
オブジェクトが整数	int = int<nl>isinstance(obj, int)
データシリーズの最頻値を求める	ds.mode()
ヒストグラムと勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
文字列がn回繰り返すイテラブル	itertools.repeat(文字列, n)
データフレームのある列の歪度	df['列A'].kurt()
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
折れ線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
タプルが空でないかテストする	len(タプル) != 0
折れ線グラフをミディアムスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: ミッドナイトブルーを用いる	color = 'midnightblue'
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
N未満までの配列を作る	np.arange(N)
option: グラフの色をライトイエローに変更する	color = 'lightyellow'
カテゴリ列で色分けして、データフレームの全列の散布図を図示する	sns.pairplot(df, hue='カテゴリ列')
折れ線グラフのポイントマーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
x軸の目盛を非表示にする	plt.xticks([])
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
ファイルパスをオープンして]、読み込みストリームを使う	'r' = 'a'<nl>open(filepath, mode='r')
シーケンスとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームの一部の列が正規分布からどれだけ、尖っているか見る	df[['列A', '列B']].skew()
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
データ列のパーセンタイルを可視化する	plt.boxplot(データ列)
日付データは何年か知る	aDate.year
例外をキャッチしたい	try:<nl><tab># ここに処理を入れる<nl><tab>pass<nl>except Exception as e:<nl><tab>print(e)
データフレームを各列毎にグループ化して、文字列というグループの個数を算出する	df.groupby(column).size()[s]
棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
指定した列のカテゴリで集計し、平均値を計算する	df.groupby('列A').mean()
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
標準出力がパイプ	not sys.stdout.isatty()
行列の転置行列	aArray.T
２つの値の小さい方が知りたい	min(X, Y)
ヒストグラムの色をネイビーに変更する	plt.hist(データ列, color='navy')
部分文字列がsubで始まるか確認する	文字列.startswith(部分文字列)
折れ線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
横棒グラフの色をティールにする	plt.barh(データ列x, データ列y, color='teal')
配列のケンドールの順位相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
データフレームの先頭5行	df.head(5)
オブジェクトが非同期ジェネレータ関数かどうか確認する	inspect.isasyncgenfunction(オブジェクト)
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
配列のSkewnessを求める	scipy.stats.skew(配列, bias=False)
option: 色をコーラルに変更する	color = 'coral'
データフレームを関数の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
オリベドラブ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
散布図にrgbの左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームをCSVファイルにヘッダを付けず出力する	df.to_csv('file.csv', header=None)
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: グラフの色をダークバイオレットに変更する	color = 'darkviolet'
目盛り線	plt.grid(alpha=0.5)
散布図の上三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
オブジェクトが論理値クラスかどうか	bool = int<nl>isinstance(obj, bool)
実数のk進対数を算出する	math.log(x, k)
二変数の最大値を求める	max(x, y)
上三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
表データを二つの列毎にグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
今日が日曜日か調べる	datetime.datetime.today().weekday() == 6
改行せずに変数の値をプリントする	print(変数名, end='')
データフレームから10行、サンプリングする	df.sample(10)
データフレームをある列の値によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
変数xについて数式を偏微分する	sympy.diff(数式, [|変数]x)
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
変数が0に近づくときの極限値を算出する	sympy.limit(数式, 変数, 0)
赤いバツマーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列を部分文字列で二分して前の方を使う	文字列.partition(部分文字列)[0]
配列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
赤い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
標準入力から1行読み取る	input()
指定された列のカテゴリで集計しそれぞれの合計を計算する	df.groupby('列A').sum()
文字列中の大文字を小文字にする	文字列.lower()
折れ線グラフを色付きの実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
変数の値をひとつ減らしたい	X -= 1
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
コマンドtextを実行する	"text = ""echo 'A'""<nl>os.system(text)"
二つの集合の和集合	セット.union(セット2)
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
predicateFuncがTrueになる列の要素を除去する	itertools.dropwhile(predicateFunc, iterable)
指定した列の50パーセンタイルを算出する	df['列A'].median()
プロットの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
指定した列の中にいくつ欠損値があるか数える	df['列A'].isna().sum()
折れ線グラフの色をミディアムブルーにセットする	plt.plot(データ列x, データ列y, color='mediumblue')
Xの一０乗を求めたい	X ** 10
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
ある列の文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
データフレームの選択したカラムの欠損値を平均値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
部分文字列の出現を範囲を指定してカウントする	文字列.count(部分文字列, 開始位置, 終了位置)
文字列をJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False)
ヒストグラムをシエナ色を用いて描画する	plt.hist(データ列, color='sienna')
２つの整数の論理積	整数 & 整数2
二つの文字列は等しくないか調べる	文字列 != 文字列2
deqのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
実数のcosの逆数を計算する	x = 0.33<nl>math.acos(x)
ヒストグラムの線種を点線にする	plt.hist(データ列, linestyle='dotted')
紺碧色で線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
二つの表を横方向にマージする	pd.merge(df, df2)
文字列を最後のコロンで二分して残りを求める	文字列.rpartition(':')[-1]
リストの要素を文字列として、'改行を用いて結合する	'\n'.join(map(str, リスト))
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
散布図の丸マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: リネン色を使用する	color = 'linen'
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームの一部の列においてどの値が頻出か確認する	df[['列A', '列B']].mode()
option: グラフの色をリネンに設定する	color = 'linen'
文字列がセットのいずれか確認する	文字列 in セット
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
折れ線グラフの丸印の大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
カウンタからゼロカウントを取り除く	+aCounter
折れ線グラフをブルーバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='blueviolet')
平均線付き箱髭図を描画する	plt.boxplot(データ列, meanline=True)
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
出力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
３乗を書きたい	X ** 3
データ列の折れ線グラフを左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<')
辞書の項目を列挙する	辞書.values()
文字をn回だけ置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
カウンタ同士で積集合演算する	aCounter & aCounter2
データフレームの選択したカラムの値は欠損値	df[['列A', '列B']].isna()
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
データフレームを二つの列の値でグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
データシリーズの基本統計量を求める	ds.describe()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
nから始まる無限の整数イテラブルが欲しい	itertools.count(start=n)
データフレームの一部のカラムをValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
散布図に黒い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
辞書を浅くコピーする	dict(辞書)
折れ線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 線の幅を設定する	linewidth = 3.0
横棒グラフをライトスカイブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
散布図の星印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
赤いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
データシリーズを十の位で丸めて、整数型にする	ds.round(-1).astype(int)
y座標の目盛りを表示しない	plt.yticks([])
標準入力から1行だけ改行を取り除いて読み込む	sys.stdin.readline().rstrip()
データフレームの選択したカラムの文字列をNaNにする	df[['列A', '列B']].replace(値, np.nan)
データフレームの選択したカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
実数を十六進表記の文字列に変換する	x.hex()
タイムスタンプデータの時刻	aDatetime.hour
データフレームの先頭のカラム以外を説明変数にする	説明変数 = df[df.columns[1:]]
ファイルを文字列の示す文字コードでオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
文字列がセットの要素に含まれる	文字列 in セット
耐火レンガ色を用いてヒストグラムを描画する	plt.hist(データ列, color='firebrick')
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
辞書をJSONフォーマットとしてファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
タイムスタンプデータの年数を使う	aDatetime.year
option: ダークバイオレットを使用する	color = 'darkviolet'
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
二つの文字列は同じでないかどうか確認する	文字列 != 文字列2
数式の変数についてのn階微分を求める	sympy.diff(数式, 変数, n)
option: 先頭の行をカラムの名前に設定する	header = 0
指定した列の尖り	df['列A'].skew()
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
Xの１０乗を求めたい	X ** 10
データフレームのあるカラムを丸める	df['列A'].round()
分子n分母mの分数を作成する	fractions.Fraction(numerator=n, denominator=m)
ヒストグラムをパパイヤウィップ色として描画する	plt.hist(データ列, color='papayawhip')
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
文字列をコロンで二つに分け、、前の方を使う	文字列.partition(':')[0]
データフレームの欠損値が含まれる部分を	df.style.highlight_null()
xについて数式のインテグラルを求める	sympy.integrate(数式, [|変数]x)
黄緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
リストと配列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
配列の歪みを求める	scipy.stats.skew(配列, bias=False)
リストを引数として展開して出力する	print(*リスト, sep=',')
３つの計算結果を順にプリントする	print(式, 式, 式)
文字列を文字コード列に変換する	[ord(ch) for ch in 文字列]
画面用にプロットを設定する	sns.set(context='notebook')
多い順番にカウンタをリストとして得る	aCounter.most_common()
データ列と数列について散布図をプロットして、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
高頻出方からカウンタを列挙する	aCounter.most_common()
整数が一桁の整数か調べる	0 <= 整数 <= 9
ヒストグラムの色をリネンにセットする	plt.hist(データ列, color='linen')
実数を実数に加える	x + y
正則化付き線形回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
多次元データを特異値分解として数値次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
option: ターコイズ色を用いる	color = 'turquoise'
データシリーズの分を使う	ds.dt.minute
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
option: 降順にする	ascending = False
ヒストグラムをダーク・スラテグレー色として描画する	plt.hist(データ列, color='darkslategrey')
サイコロと同じ乱数を得る	random.randint(1, 6)
ふたつの集合の差集合を求める	セット.difference(セット2)
文字列をカンマで分割し、列挙する	文字列.split(',')
実数を千の位で四捨五入する	round(x, -3)
データフレームの一部のカラムの未入力値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
既存のファイルパスをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
下三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
predicateFuncが真になるリストの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
正方単位行列	np.identity(n)
データフレームを二つの列の値でグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームの平均と信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの選択したカラムの標準偏差など	df[['列A', '列B']].describe()
eの実数乗	math.exp(x)
散布図のマーカーを▲印にする	plt.scatter(データ列x, データ列y, marker='^')
標準入力から1文字分読む	sys.stdin.read(1)
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
パールゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データ列を全てタイムスタンプ型に変換する	pd.to_datetime(ds)
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
ふたつのカラムからグループ化し、合計を算出する	df.groupby(['列A', '列B'], as_index=False).sum()
プログラムの実行を即座に終了する	sys.exit()
コギーくんを使いたい	import kogi
プログラムを正常に止める	sys.exit(0)
耐火レンガ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
データフレームの指定したカラムの未入力値を最大値に設定する	df['列A'].fillna(df['列A'].max())
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
一方に含まれ他方に含まれない集合を使う	セット.difference(セット2)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
シーケンスを関数でフィルタする	map(func, iterable)
2つのセットが交わりを持たないか	セット.isdisjoint(セット2)
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
ヒストグラムをプロットしてビン数を設定する	plt.hist(データ列, bins=区関数)
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
整数プラス整数を算出する	整数 + 整数2
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
文字列のある範囲位置の間に部分文字列が含まれるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
リストと配列についての散布図にrgbの菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
配列とリストの散布図を描画し、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
データフレームの選択したカラムの欠損値をその最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データ列の離れ具合をプロット化する	sns.residplot(x=データ列, y=データ列)
グラフの題名を変更する	plt.title('グラフの名称')
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームの未入力値をxで埋める	df.fillna(x)
複素数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=bool)
データフレームをグループ化し、ある列に対し合計を求める	df.groupby('列A')['列B'].sum()
ふたつのリストの差集合を求める	list(set(リスト).difference(set(リスト2)))
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
日付時刻データが土曜日	aDatetime.weekday() == 5
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
xを下線付きで表示する	print(f'\033[4m{x}\033[0m')
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
リストをシャッフルしてリストにする	random.sample(リスト, len(リスト))
ヒストグラムをピーチパフ色を使って描画する	plt.hist(データ列, color='peachpuff')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームを2つの列の値でまとめた表	df.groupby(['列A', '列B'])
縦棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
要素が無限に続く列	itertools.repeat(要素)
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
日付データが水曜日か	aDate.weekday() == 2
プロットにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgrey')
グラフの補助目盛を有効にする	plt.minorticks_on()
option: インディアンレッド色を用いる	color = 'indianred'
文字列を走査し、パターンに複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
データフレームの選択した列を十の位で丸める	df[['列A', '列B']].round(-1)
外れ値を除いた配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ファイル名がTSVファイルか	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
整数が-9以上、9以下	-9 <= 整数 <= 9
両端キューのn番目に文字列を差し込む	両端キュー.insert(n, 文字列)
辞書の項目名の一覧	list(辞書)
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームのあるカラムが何時か見る	df['列A'].dt.hour
コマンドラインのリスト	sys.argv
ファイルパスからの入力ストリームを使う	open(filepath)
ファイルをバイナリ用に開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
両端キューの先頭	両端キュー[0]
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
行列の列ごとの最小値	np.min(aArray, axis=0)
配列のスピアマンの順位相関係数を計算する	scipy.stats.spearmanr(配列, 配列2)
option: フォントの色をレベッカパープルに変更する	color = 'rebeccapurple'
データフレームの最後を確認する	df.tail()
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
青い破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
オブジェクトは整数	int = int<nl>isinstance(obj, int)
プロットをスライド用に設定する	sns.set(context='talk')
長さの制限された両端キューをイテラブルから作る	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
黒い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
option: 色をラベンダーブラッシュに指定する	color = 'lavenderblush'
オブジェクトがリストクラスのインスタンス	list = int<nl>isinstance(obj, list)
辞書にキーがない場合、要素を追加する	辞書.setdefault(キー, element)
ヒストグラムの色をミディアムパープルにセットする	plt.hist(データ列, color='mediumpurple')
等しくないと条件に書きたい	X != Y
ダークオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
option: インデックスを自動的な連番に減らす	index_col = None
文字列を右から部分文字列で分割する	文字列.rsplit(部分文字列)
日付時刻データの年を使う	aDatetime.year
暗い赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフのクロスマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
項がセットのいずれか調べる	要素 in セット
タプルをナンバリングしながら、ひとつずつ処理する	for i, value in enumerate(タプル):<nl><tab>print(i, value)  # value はタプルの要素
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
列を累加したイテラブル	itertools.accumulate(iterable)
縦棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図の丸印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
リストとリストについて散布図を描いて、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
データフレームから指定した２列だけ抽出する	df[['列A', '列B']]
欠損値が存在する行を消してみる	df.dropna()
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
リストをnから順番付けする	enumerate(リスト, start=n)
日付データが火曜日かどうか	aDate.weekday() == 1
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
データフレームをある列によって昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
整数の5乗	整数 ** 5
データシリーズがどの程度、分散しているか見る	ds.var()
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
option: ダークグレー色を使う	color = 'darkgrey'
線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
文字列を部分文字列で分割して、文字列リストに変換する	文字列.split(部分文字列)
アクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームのある列の値がxに等しくないデータを抽出する	df[df['列A'] != x]
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
縦棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
リストとリストについての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データフレームの指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
n乗を書きたい	X ** n
紺碧色を用いてヒストグラムを描画する	plt.hist(データ列, color='azure')
オブジェクトは浮動小数点数クラスかどうか	float = int<nl>isinstance(obj, float)
データシリーズをdatetime64型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
オブジェクトはモジュールか	inspect.ismodule(オブジェクト)
アルファベットを使う	string.ascii_letters
白色でxを表示する	print(f'\033[37m{x}\033[0m')
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
データフレームを表示するとき折り返しを無効に変更する	pd.set_option('expand_frame_repr', False)
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
コロンで文字列を二分割する	文字列.partition(':')
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
異なるカラムをキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
半透明の一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: ペルーを用いる	color = 'peru'
破線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
列名を指定して二つのデータフレームを右結合する	pd.merge(df, df2, on='列A', how='right')
グラフのグリッドを暗くする	sns.set(style='darkgrid')
ファイル全体を行単位で分割して読む	f.readlines()
ファイルをバイナリ書き込みモードで開き]fとする	f = open(filepath, mode='wb')
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
データフレームの一部のカラムの未入力値を最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
整数が5の倍数か調べる	整数 % 5 == 0
データ列を等しい量になるようにビン数nでビン分割する	pd.qcut(ds, n)
アリスブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
三2ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
コーンズシルク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
オブジェクトは集合型	set = int<nl>isinstance(obj, set)
文字列がリストのいずれでもないか確認する	文字列 not in リスト
イテラブルと数列についての散布図に▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
ある列のカテゴリごとの個数を計算する	df.groupby('列A').count()
ある列のカテゴリで集計し最小値を算出する	df.groupby('列A').min()
黒い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
option: イエローグリーン色を用いる	color = 'yellowgreen'
ケンドール相関係数としてデータフレームの相関行列を求める	df.corr(method='kendall')
最小値でデータフレームの指定したカラムの欠損値を補う	df['列A'].fillna(df['列A'].min())
データフレームのカラムの母標準偏差	df['列A'].std(ddof=0)
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
空白文字を全部求める	string.whitespace
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
折れ線グラフをディープスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
リストの末尾を捨てる	リスト[:-1]
部分文字列を範囲を指定して探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
option: 白色を使う	color = 'white'
整数が1もしくは2か	整数 == 1 or 整数 == 2
データフレームの選択したカラムのNaNを直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
数列を双方向キューに変換する	collections.deque(数列)
配列と同じ大きさの空の行列を作る	np.empty_like(aArray)
ファイルを追加モードを用いて開いて]、fとする	f = open(filepath, mode='a')
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 色をナバホホワイトに設定する	color = 'navajowhite'
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
文字列を空白で区切って、整数リストに変換する	list(map(int, 文字列.split()))
２次元リストをflattenする	sum(リスト)
双方向キューの末尾に配列の各要素を追加する	両端キュー.extend(配列)
データフレームの選択した列の欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
データシリーズが正規分布からどの程度、歪んでいるか見る	ds.kurt()
文字列を最後のカンマで二分し、後ろの方を見る	文字列.rpartition(',')[-1]
大文字・小文字を無視して事前にパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
長さの制限された両端キューを数列から用意する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
データフレームの標本標準偏差を計算する	df.std(ddof=1)
変数の値を表示する	print(変数名)
データフレームを２つの列のカテゴリによってグループ化する	df.groupby(['列A', '列B'])
データシリーズの中にある文字列の合計をカウントする	ds.isin([value]).sum()
option: ライトグレーを用いる	color = 'lightgrey'
一番右側の列を除いたデータフレームを使う	df[df.columns[:-1]]
列のカテゴリによってデータフレームをグループ分けする	df.groupby('列A')
コロンで文字列を分割して、文字列リストに変換する	文字列.split(':')
データフレームのカラムを千の位で丸める	df['列A'].round(-3)
セットから別のセットとの共通要素を取り除く	セット.symmetric_difference_update(セット2)
データフレームのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
メソッド名	inspect.currentframe().f_code.co_name
option: フォントの色をライトグレーに指定する	color = 'lightgray'
整数の三乗を算出する	整数 ** 3
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
リストを文字列として、'改行で一つにする	'\n'.join(map(str, リスト))
ダークバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームから同じ内容の行をインプレイスで消す	df.drop_duplicates(inplace=True)
ピーチパフ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームのn行目を除いてみる	df.drop(n, axis=0)
リストと数列の散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
表データのあるカラムの曜日を見る	df['列A'].dt.weekday_name
データフレームの指定した列の欠損値を平均に設定する	df['列A'].fillna(df['列A'].mean())
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
Xの４乗を求めたい	X ** 4
棒グラフをモカシン色を用いて描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームの文字列を欠損値にする	df.replace(値, np.nan)
データシリーズの中にある文字列の合計を求める	ds.isin([value]).sum()
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
配列間の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
文字列を最後の区切り記号で分割した時の後半の文字列	文字列.rpartition(セパレータ)[-1]
前の行の値でデータシリーズの欠損値を補完する	ds.fillna(method='ffill')
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
オブジェクトが抽象クラスか	inspect.isabstract(オブジェクト)
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
サーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
横軸の目盛を非表示にする	plt.xticks([])
ライトグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
ヒストグラムの色をホットピンクにセットする	plt.hist(データ列, color='hotpink')
日付時刻データにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
実数を浮動小数点数で割って切り捨てる	x // y
文字列をシンボルに変換する	sympy.Symbol(変数名)
標準入力から1行読み込む	sys.stdin.readline()
データフレームのひとつの列を説明変数にする	説明変数 = df[['列名']]
グリーンイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
折れ線グラフを描く	plt.plot(データ列x, データ列y)
XにYを掛けた値が求めたい	X * Y
グラフの名前を指定する	plt.title('グラフの名称')
文字列をセパレータで分割して、文字列リストに変換する	文字列.split(セパレータ)
分類モデルのF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
配列とリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
やわらかい青にヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
option: BOM付きを使う	encoding = 'utf_8_sig'
新しい線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
ヒストグラムをコーンフラワーブルー色を使って描画する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムを点線にセットする	plt.hist(データ列, linestyle='dotted')
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
柱状図の描いて、正規化する	plt.hist(データ列, density=True)
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
一０乗が求めたい	X ** 10
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
データ列を箱ひげ図にする	plt.boxplot(データ列)
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
イテラブルから一つランダムに選んでリストにする	random.choice(イテラブル)
散布図の△マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
横棒グラフをオレンジ色として描画する	plt.barh(データ列x, データ列y, color='orange')
N回繰り返したい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
データフレームを関数の値でグループ化する	df.groupby(関数)
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
option: 線のスタイルを一点鎖線に設定する	linestyle = 'dashbot'
分類木の重要度をグラフにする	plt.barh(X.columns, model.feature_importances_)
ヒストグラムでリストを作図する	plt.hist(データ列)
折れ線グラフに上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
二つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
整数が1、もしくは2、もしくは3に等しいか	整数 == 1 or 整数 == 2 or 整数 == 3
タイムスタンプデータの日	aDatetime.day
折れ線グラフの色を青に指定する	plt.plot(データ列x, データ列y, color='blue')
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
データフレームの選択したカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
本日の日数	datetime.datetime.today().day
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
グラフ中のフォントをする	sns.set(font=フォント名)
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
パーセント付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
option: 分割記号を改行にする	sep = '\n'
データフレームをに箱ひげ図としてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: n番目のカラムを行にセットする	index_col = n
option: 平均を加える	showmeans = False
文字列をバイト列に変換する	bytes(s)
リストとリストについての散布図に赤い▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
データシリーズの未入力値を直前の値に設定する	ds.fillna(method='ffill')
データフレームを表示するとき表示する最大行数を減らす	pd.set_option('display.max_rows', n)
グラフの色を暗くする	sns.set(pallete='dark')
option: ピーチパフ色を使用する	color = 'peachpuff'
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
識別子は非同期ジェネレータか調べる	inspect.isasyncgen(識別子)
分類結果の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
ファイルパスを絶対パスに変換する	os.path.abspath(filepath)
データフレームの中の列を四分位数で分割する	pd.qcut(df[col], 4)
xを黄色でプリントできる文字列に変換する	f'\033[33m{x}\033[0m'
数式を変数について微分する	sympy.diff(数式, 変数)
グラフに使う横軸のラベルを設定する	plt.xlabel('x軸ラベル')
グリッドの線種を実線に変更する	plt.grid(linestyle='solid')
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
オブジェクトがクラスか	isinstance(obj, クラス)
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
ある列のカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
オブジェクトがクラスか調べる	inspect.isclass(オブジェクト)
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
重回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
option: グラフの色をインディアンレッドに指定する	color = 'indianred'
わり算したい	X / Y
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
オレンジレッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
データフレームを二つの列の値でグループ化する	df.groupby(['列A', '列B'])
データフレームをあるカラムのカテゴリによってグループ化する	df.groupby('列A')
折れ線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
でないを書きたい	not 条件式
文字列のn番目を文字コードに変換する	ord(文字列[n])
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
数値の出力を改行なしに行う	print(数値, end='')
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
データフレームをサンプリングする	df.sample()
赤い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列を最後から空白で分割する	文字列.rsplit()
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
オブジェクトがコードか調べる	inspect.iscode(オブジェクト)
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
棒グラフを暗い赤色を使って描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームの中のNaNの合計を数える	df.isna().sum()
要素はセットに含まれるか調べる	要素 in セット
コマンド引数で指定されたファイル名を一つずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
整数をキューのn番目に挿入する	両端キュー.insert(n, 整数)
nからn2の範囲	range(n, n2)
シャルトリューズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: ベージュ色を使用する	color = 'beige'
グラフの見た目をよくする	import seaborn as sns
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
条件を満たしたら、繰り返し処理を中断したい	if 条件式:<nl><tab>break
実数の余弦	math.cos(x)
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
データフレームを関数の値によってグループ分けして列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データフレームの列の最頻値	df['列A'].mode()
イテラブルからn要素サンプリングしてリスト化する	random.sample(イテラブル, k=n)
文字は漢字	('\u4E00' <= 文字 <= '\u9FD0')
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
作画のフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
変数について数式の積分を算出する	sympy.integrate(数式, 変数)
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムの色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
大きさnでリストとリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
日付と時間からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
ファイルをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
rgbの大バツマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
商を欲しい	X // Y
変数の値を二倍にしたい	X *= 2
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
指定したカラムのカテゴリで集計しそれぞれの最大値を求める	df.groupby('列A').max()
環境の名前を確認する	sys.platform
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ValueMapでカラムの値を一度に変更する	df['列A'].replace(ValueMap)
散布図を用いてデータフレームの全カラムをグラフ化する	sns.pairplot(df)
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
変数の値の型が欲しい	type(X)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
濃いシアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
散布図をマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='magenta')
リストを文字列として、タブでつなげる	'\t'.join(map(str, リスト))
CSVファイルからデータフレームをロードする	pd.read_csv('file.csv', sep=',')
レモンシフォン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
アクア色でヒストグラムを描画する	plt.hist(データ列, color='aqua')
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: 更新する	inplace = True
複数の列によってデータフレームを大きい順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
エクセルファイルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
棒グラフをパウダーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='powderblue')
グラフにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
識別子が非同期ジェネレータ関数かどうか	inspect.isasyncgenfunction(識別子)
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
最大値を欲しい	max(X, Y)
小数点数を切り上げて整数に変換する	math.ceil(x)
大きさnで配列とリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームのカラムのケンドールの順位相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
折れ線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
オブジェクトのメモリビュー	memoryview(obj)
横棒グラフをアリスブルー色を使って描画する	plt.barh(データ列x, データ列y, color='aliceblue')
配列のKurtosisを求める	scipy.stats.kurtosis(配列, bias=False)
データシリーズの欠損値をその中央値で補完する	ds.fillna(ds.median())
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
変数が0に近づくときの数式の極限値を求める	sympy.limit(数式, 変数, 0)
数値はセットに含まれないかどうか	数 not in セット
option: シアン色を使う	color = 'cyan'
ある列の値の合計	df.groupby('列A').sum()
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
predicateFuncが真とならない列の部分	itertools.dropwhile(predicateFunc, iterable)
空のガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
文字列中にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in 文字列)
8進数文字列をバイト列に変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
カラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
データフレームのNaNを最大値で埋める	df.fillna(df.max())
option: グリーンにグラフの色を設定する	color = 'green'
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
文字列を空白で区切って、整数のリストにする	list(map(int, 文字列.split()))
データ列をn個に分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
データフレームの指定した列の値を正規表現でまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in 辞書.items()}
データフレームの指定したカラムを万の位で丸める	df['列A'].round(-4)
両端キューの末尾に要素をつけ加える	両端キュー.append(要素)
棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: 大バツマーカーを使う	marker = 'X'
変数についてのn階微分を求める	sympy.diff(数式, 変数, n)
option: フォントの色をイエローグリーンにする	color = 'yellowgreen'
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
項目名が辞書上でまだ定義されていない	キー not in 辞書
表の末尾n行を取り出す	df.tail(n)
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
option: バイナリ書き込みモードに指定する	mode = 'wb'
データシリーズを十の位で四捨五入して、整数にする	ds.round(-1).astype(int)
主成分分析で要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
読み込みモードでファイルをオープンして]fとする	f = open(filepath, mode='r')
option: マルーン色を使用する	color = 'maroon'
option: ドジャーブルー色を用いる	color = 'dodgerblue'
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
文字列をセパレータで区切り、、文字列リストにする	文字列.split(セパレータ)
半透明の破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
Pythonインタプリタの実行ファイルの絶対パスを知る	sys.executable
データをJSON形式でファイル出力に保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
リストを昇順にソートする	sorted(リスト, reverse=False)
カンマで文字列を二分し、、前半を使う	文字列.partition(',')[0]
カーキ色としてヒストグラムを描画する	plt.hist(データ列, color='khaki')
ある列の値がx以上y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
整数はタプルのいづれかかどうか調べる	aTuple = [0, 1, 2]<nl>整数 in aTuple
折れ線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
rgbの四角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
度数分布図を二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
最後の項目を辞書からポップする	辞書.popitem()
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
データフレームをグループ化しある列に対し最大値を計算する	df.groupby('列A')['列B'].max()
CSVファイルをn番目の列をインデックスにして読み込む	pd.read_csv('file.csv', index_col=n)
論文用にグラフをする	sns.set(context='paper')
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
整数最小公倍数	math.lcm(n, n2)
配列とイテラブルについて散布図を描画し、、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
タプルの先頭のn要素を捨てる	タプル[n:]
option: ミディアムアクアマリンにグラフの色をセットする	color = 'mediumaquamarine'
クラス分類の偽陽性をヒートマップを使って見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
要素がセットのメンバーに含まれないか	要素 not in セット
タプルの順番をランダムにシャッフルする	tuple(random.sample(タプル, len(タプル)))
文字列の示すエンコーディングでファイルをオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
データ列を全て日付データにする	pd.to_datetime(ds)
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
事前に正規表現をASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
リストとリストについて散布図を描画して、マーカーを▼に変更する	plt.plot(データ列x, データ列y, marker='v')
二つの条件が成り立つ	条件 and 条件2
データシリーズの空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
タプルをカウンタに変換する	collections.Counter(aDict)
アルファベットからランダムに一つ選ぶ	random.choice(string.ascii_uppercase)
xとyをスラッシュで区切って出力する	print(x, y, sep='/')
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
指定した列を1000の位で丸める	df['列A'].round(-3)
部分的最小二乗法を使って回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムを上限から下限までの範囲で描く	plt.hist(データ列, range=(start, end))
回帰分析を確率的勾配降下で行う	model = sklearn.linear_model.SGDRegressor()
データシリーズのメディアンを計算する	ds.median()
文字列中にひとつでも非アスキー文字があるか確認する	any(not c.isascii() for c in 文字列)
改行なしに数値を出力する	print(数値, end='')
整数は配列の一つか	aArray = [0, 1, 2]<nl>整数 in aArray
option: バイナリモードにセットする	mode = 'rb'
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
配列と配列についての散布図にrgbのクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
横棒グラフをミディアムシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームの指定したカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
データフレームの指定の列に重複があればドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データフレームの指定した列の名前一覧の列を抽出する	columns = ['列A', '列B']<nl>df[columns]
散布図をペールグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ファイルをUTF8で開く]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
折れ線グラフに左三角印を用いる	plt.plot(データ列x, データ列y, marker='<')
option: 行方向に計算する	axis = 1
折れ線グラフの星印を黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: ラインスタイルを点線に指定する	linestyle = 'dotted'
データシリーズの分散を求める	ds.var()
折れ線グラフの▼マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
整数2がnより大きくかつ、n3より小さいか	整数 < 整数2 and 整数2 < n3
整数が負の整数か	整数 < 0
データフレームの列を指定して重複を削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
リストとリストの散布図を描画して、マーカーを▲に指定する	plt.plot(データ列x, データ列y, marker='^')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
文字が漢字かどうか調べる	('\u4E00' <= 文字 <= '\u9FD0')
配列を列から作る	np.array(iterable)
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
ドジャーブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
データフレームの一部のカラムを10000の位で丸める	df[['列A', '列B']].round(-4)
option: 星印を描画する	marker = '*'
ファイルパスの拡張子を求める	os.path.splitext(filepath)[1].lstrip('.')
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
option: NaNも無視しない	dropna = True
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
日付時刻データが金曜日かどうか	aDatetime.weekday() == 4
折れ線グラフのマーカーを四角印にする	plt.plot(データ列x, データ列y, marker='s')
より大きいと条件を書きたい	X > Y
行列を転置する	aArray.T
空列を作る	[]
文字列を最初のコロンで二つに分けて、前半を求める	文字列.partition(':')[0]
円グラフとして数列の割合を可視化する	plt.pie(データ列, startangle=90)
文字列は全て識別子か調べる	文字列.isidentifier()
綺麗なグラフを描画する	import seaborn as sns
データフレームのKurtosisを計算する	df.kurt()
マップ内の値をリストとして得る	list(辞書.values())
数式をyについて偏微分する	sympy.diff(数式, y)
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
小数点数の双曲線余弦	math.cosh(x)
ふたつの集合の和集合を見る	セット.union(セット2)
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
リストとリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
キューが空でない	len(両端キュー) != 0
文字列中にひとつも数字がないか調べる	any(not c.isdigit() for c in 文字列)
折れ線グラフのクロスマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
青い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの中のカラムを中央値でビン分割する	pd.qcut(df[col], 2)
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
整数の2分の一を算出する	整数 / 2
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
文字列の後半から部分文字列の位置を探す	文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
文字列はキーワードかどうか調べる	keyword.iskeyword(文字列)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフをライトシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcyan')
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
文字列のプレフィックスはsub	文字列.startswith(部分文字列)
ある列の値がxより大きく、yより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
散布図を▲マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^')
文字列をカンマで分割して、後半を求める	文字列.partition(',')[-1]
文字列の左端から部分文字列を取り除く	文字列.lstrip(部分文字列)
棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
二つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
オブジェクトの種類	type(obj)
データフレームをグループ化して、ヒストグラムとしてプロットする	sns.histplot(df, x='列名', hue='カテゴリ名')
ブラウン色でヒストグラムを描画する	plt.hist(データ列, color='brown')
スタックが空であるか調べる	len(両端キュー) == 0
文字列を走査しパターンにASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
横棒グラフの色を珊瑚にする	plt.barh(データ列x, データ列y, color='coral')
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
辞書からキーとバリューのペアを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
データフレームをグループ化しそれぞれの分散を算出する	df.groupby('列A').var()
散布図のダイアモンドマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームのデータ型リスト	df.dtypes
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
辞書をJSON文字列に変換する	json.dumps(辞書, ensure_ascii=False)
Xの５乗が計算したい	X ** 5
ヒストグラムをダークスレートブルー色として描画する	plt.hist(データ列, color='darkslateblue')
散布図をrgbのダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
浮動小数点数を数で除算して切り捨てる	x // y
option: ミディアムスプリンググリーンにフォントの色を設定する	color = 'mediumspringgreen'
2つの変数を改行せずに表示する	print(変数名, 変数名, end='')
グラフに目盛線を加える	plt.grid(True)
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
二つの値の小さい方を知りたい	min(X, Y)
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
表データのあるカラムの年を見る	df['列A'].dt.year
非数値データをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
散布図をハニーデュー色を用いて描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: ベクトルのデータ型を指定する	bool = np.int<nl>dtype = bool
option: 配列のデータ型を指定する	bool = np.int<nl>dtype = bool
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
グラフの描画で色差別なくカラーパレットを用いる	sns.set(pallete='colorblind')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
折れ線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
縦棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
データシリーズの中のNaNの個数を調べる	ds.isna().sum()
散布図をラベンダー色として描画する	plt.scatter(データ列x, データ列y, color='lavender')
グラフの全般的にカラーパレットを明るくする	sns.set(pallete='bright')
空のマップ	辞書 = {}
一０乗を書きたい	X ** 10
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
データ列を閾値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
Excelファイルから複数のシートを指定してデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームのカラムの尖度を計算する	scipy.stats.kurtosis(df['列A'], bias=False)
グラフの色を暗くする	sns.set(pallete='dark')
ある列の値毎の最小値	df.groupby('列A').min()
黒い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
deqのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
option: ライトスチールブルーを用いる	color = 'lightsteelblue'
赤い大バツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図を四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s')
変数の値を増やす	変数 += 整数
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
1で全要素を初期化した行列を作成する	np.ones(行数, 列数, dtype=np.int)
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ミッドナイトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='midnightblue')
データフレームをグループ化し、合計を求める	df.groupby('列A').sum()
リストとシーケンスをつなぐ	itertools.chain(iterable, iterable2)
データフレームを複数の列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
浮動小数点数を小数点第一位で丸める	round(x, 1)
スカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
折れ線グラフの色を黄緑に設定する	plt.plot(データ列x, データ列y, color='chartreuse')
両端キューの末尾に要素を付け加える	両端キュー.append(要素)
データフレームのカラムの中に文字列が含まれる	df['列A'].isin([value])
パールバイオレットレッド色を使ってヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
option: 小さい順にする	ascending = True
option: 色をマルーンに変更する	color = 'maroon'
エクセルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
赤い点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
切り上げて整数にする	math.ceil(x)
データシリーズの記述統計量	ds.describe()
コレクションを使用する	import collections
列から配列を作る	np.array(iterable)
複数の列を組み合わせてグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
文字列中に非大文字があるか判定する	any(not c.isupper() for c in 文字列)
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
要素がセットに含まれないか調べる	要素 not in セット
項がセットのいずれ	要素 in セット
線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
文字が片仮名か調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
大量のデータが正規分布かどうか仮説検定する	scipy.stats.kstest(配列, 'norm')
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図を珊瑚色で描画する	plt.scatter(データ列x, データ列y, color='coral')
xが無限大に近づくときの数式の極限値を求める	sympy.limit(数式, [|変数]x, oo)
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
表のカラムの種類	df.info()
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
レベッカパープルにヒストグラムの色を変更する	plt.hist(データ列, color='rebeccapurple')
option: フォントの色をやわらかい青に指定する	color = 'cornflowerblue'
作業ディレクトリ	os.getcwd()
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
データフレームの選択した列の母標準偏差を求める	df[['列A', '列B']].std(ddof=0)
二進数文字列をバイナリに変換する	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
option: ファイルに出力する	file = sys.open('file.txt', 'w')
アクア色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
文字列が全て印字できるか	文字列.isprintable()
両端キューの末尾に整数を追加する	両端キュー.append(整数)
行列の行列式	np.linalg.det(aArray)
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
次の繰り返しに進みたい	if 条件式:<nl><tab>continue
ソートしてリストをJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
箱ヒゲ図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
option: 色をミディアムパープルに変更する	color = 'mediumpurple'
線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
横棒グラフの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
現在実行中のエラー情報	etype, evalue, traceback = sys.exc_info()
左三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームの列を散布図で可視化して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームをある列によって並べ直し、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
データフレームの指定した列の中に文字列と文字列がいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
整数がタプルのどれかか調べる	aTuple = [0, 1, 2]<nl>整数 in aTuple
ヒストグラムをダークグリーン色を使って描画する	plt.hist(データ列, color='darkgreen')
折れ線グラフの色をミディアムスプリンググリーンにセットする	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームの中に文字列と日付データがあるか調べる	df.isin([value, value2])
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ミントクリームにヒストグラムの色を指定する	plt.hist(データ列, color='mintcream')
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
折れ線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
option: グラフの色をマルーンに設定する	color = 'maroon'
ヒストグラムの色をアクアにする	plt.hist(データ列, color='aqua')
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
線グラフの色をミディアムパープルに指定する	plt.plot(データ列x, データ列y, color='mediumpurple')
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
y軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
破線として配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
サーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
マップのキーをひとつずつ処理する	for key in 辞書.keys():<nl><tab>print(辞書[key])  # FIXME
整数がnの倍数かどうか判定する	整数 % n == 0
日付データが日付データより遅いか	aDate > aDate2
ヒストグラムを描画して、ビン数を指定する	plt.hist(データ列, bins=区関数)
整数の二進数表記	bin(整数)
逆順の双方向キューを求める	reversed(両端キュー)
２つの文字列がケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
双方向キューの末尾から要素を取り出す	両端キュー.pop()
列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
改行する	print()
リストの要素を小さい順に並べ直す	sorted(リスト, reverse=True)
xについて数式の積分を算出する	sympy.integrate(数式, [|変数]x)
二つのセットが互いに素かどうか調べる	セット.isdisjoint(セット2)
一点鎖線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: 線の種類を点線に設定する	linestyle = 'dotted'
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
リストn番目から要素を取り出す	リスト.pop(n)
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
和を求めたい	X + Y
配列の尖り	scipy.stats.kurtosis(配列, bias=False)
散布図に青い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
赤にヒストグラムの色を指定する	plt.hist(データ列, color='red')
右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
データフレームから重複ありでランダムに100行をサンプリングする	df.sample(100, replace=True)
サーモン色を使ってヒストグラムを描画する	plt.hist(データ列, color='salmon')
option: ミスティローズ色を使う	color = 'mistyrose'
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
配列を標準化する	scipy.stats.zscore(配列)
要素が辞書の値に含まれていないかどうか調べる	element not in 辞書.values()
赤色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
折れ線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
yについて数式の偏微分を行う	sympy.diff(数式, y)
データフレームを関数の値で集約する	df.groupby(関数)
データフレームを並べ直す	df.sort_values('キーとなる列')
データフレームからカテゴリデータの列名のリストを使う	df.select_dtypes('object').columns
データシリーズの値をValueMapでまとめて置き換える	ds.replace(ValueMap)
ヒストグラムの色をライトシアンにする	plt.hist(データ列, color='lightcyan')
折れ線グラフの星マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
2つの文字列は同じか調べる	文字列 == 文字列2
クラス分類をスタッキングとして行う	sklearn.ensemble.StackingClassifier()
線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
タプルの最初のn要素を除く	タプル[n:]
option: 大バツ印を使う	marker = 'X'
累乗を書きたい	X ** Y
両端キューの末尾に要素を追加する	両端キュー.append(要素)
改行なしに複数の変数をプリントする	print(変数名, 変数名, end='')
XをYで割った商が求めたい	X // Y
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
縦棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
要素がタプルに含まれないか確認する	要素 not in タプル
ヒストグラムの色をゴールドに指定する	plt.hist(データ列, color='gold')
散布図の下三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
線グラフを色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
改行	'\n'
指定した列の空文字をドロップする	df['列A'].replace('', np.nan).dropna()
文字列を最初のカンマで二分割して前半を使う	文字列.partition(',')[0]
タプルの最初の要素を探す	タプル.index(要素)
線グラフの色をオリーブにセットする	plt.plot(データ列x, データ列y, color='olive')
整数の無限なイテレータを見る	itertools.repeat(整数)
条件を満たしたら、ループ処理を中断したい	if 条件式:<nl><tab>break
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データシリーズの欠損値を最小値で補う	ds.fillna(ds.min())
折れ線グラフの色をイエローグリーンにセットする	plt.plot(データ列x, データ列y, color='yellowgreen')
文字列からタブを除く	文字列.replace('\t', '')
散布図を赤い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
整数が偶数かどうか調べる	整数 % 2 == 0
year年の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
折れ線グラフの丸マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
グラフの色テーマを色差別なくする	sns.set(pallete='colorblind')
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
データシリーズが何時か調べる	ds.dt.hour
グラフのパレットを明るくする	sns.set(pallete='bright')
ファイル名がCSVファイルか判定する	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
みっつの条件が成り立つ	条件 and 条件2 and 条件3
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
リストの末尾のn要素を取り除く	リスト[:-n]
option: ビスク色を使用する	color = 'bisque'
カウンタ同士でユニオンを求める	aCounter | aCounter2
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
実数の床	math.floor(x)
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームのカラム一覧を確認する	df.info()
双曲線余弦の逆数	math.acosh(x)
要素ひとつの組	(要素,)
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
データフレームをCSV形式で保存する	df.to_csv('file.csv')
プロットの色をパステル調にする	sns.set(pallete='pastel')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
ファイルの絶対パスを見る	os.path.abspath(filepath)
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
整数がnの倍数でないかどうか	整数 % n != 0
ファイルを書き込みモードでオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
現在の曜日を整数で使う	datetime.datetime.today().weekday()
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
赤い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
指定したカラムリストのみ、データフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
多次元データをMSDを用いて数値次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
文字列を中央寄せする	文字列.center(文字列幅)
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
実数の双曲線正接の逆数	math.atanh(x)
データフレームの中央値	df.median()
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
データフレームをExcelファイルから読む	pd.read_excel('file.xlsx')
タイムスタンプデータにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
折り返しをしない	pd.set_option('expand_frame_repr', False)
ライトグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
列を等量でビン数nを用いて分割する	pd.qcut(ds, n)
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
条件を満たしたら、ループを抜けたい	if 条件式:<nl><tab>break
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: フォントの色をスプリンググリーンに設定する	color = 'springgreen'
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
縦棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
指定した列の欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
タイムスタンプデータの秒を見る	aDatetime.second
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
床	math.floor(x)
整数が1、もしくは2	整数 == 1 or 整数 == 2
option: ブラックにグラフの色をセットする	color = 'black'
文字列の末尾から余分な空白を取り除く	文字列.rstrip()
空のリスト	[]
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
option: スレートブルー色を使用する	color = 'slateblue'
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
浮動小数点数が有限か	math.isfinite(x)
散布図をオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='orange')
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
ライトイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
開始位置を指定して部分文字列の位置を探す	文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
option: ラインを細くする	linewidth = 3.0
整数を整数で割ったモジュロ	整数 % 整数2
データフレームの記述統計量	df.describe()
全要素を1で初期化した行列を初期化する	np.ones(行数, 列数, dtype=np.int)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
option: グラフの色をクリムゾンに設定する	color = 'crimson'
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
ヒストグラムの区間をセットする	plt.hist(データ列, range=(start, end))
分類結果のF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
正規分布の累積分布関数の逆関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
変数名がジェネレータ関数	inspect.isgeneratorfunction(識別子)
データフレームの中の欠損値の数を求める	df.isna().sum()
カラムのNaNをxで補完する	df['列A'].fillna(x)
散布図に黒い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='k')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
縦棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
データシリーズの曜日数を使う	ds.dt.dayofweek
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
折れ線グラフの右三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
option: レモンシフォン色を用いる	color = 'lemonchiffon'
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
辞書の値の一覧を見る	辞書.values()
辞書をJSONフォーマットの文字列に変換する	json.dumps(辞書, ensure_ascii=False)
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
回帰モデルを学習する	model.fit(説明変数, 目的変数)
データフレームの最後の列以外を説明変数にする	説明変数 = df[df.columns[:-1]]
実数が無限大	math.isinf(x)
ゴーストホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
整数の16進表現	hex(整数)
option: ディムグレーにフォントの色を設定する	color = 'dimgrey'
折れ線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: 線の幅を3.0ポイントに変更する	linewidth = 3.0
セットから要素を取り除く	セット.remove(要素)
数列をイミュータブルなセットに変換する	frozenset(数列)
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
追加できるように既存のファイルをBOM付きでオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ストリームから1文字、読み込む	f.read(1)
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: エラーがあるとき、例外を発生させる	errors = 'strict'
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
文字列中の文字を新しい文字に置換する	文字列.replace(部分文字列, 置換後の文字列)
二つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
三つの変数の値を順に表示する	print(変数名, 変数名, 変数名)
ヒストグラムをミディアムバイオレットレッド色を使って描画する	plt.hist(データ列, color='mediumvioletred')
1行から2つの文字を読む	A, B = map(str, input().split())
option: フォントの色をシエナに設定する	color = 'sienna'
角度のラジアンを算出する	math.radians(degree)
相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
y座標の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
XをYで割った値を切り上げたい	(X + Y - 1) // Y
ファイルを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
部分文字列がsubで始まるか	文字列.startswith(部分文字列)
整数が-9以上、9以下か調べる	-9 <= 整数 <= 9
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
パールゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
option: フォントの色をネイビーに変更する	color = 'navy'
グラフにグリッド線を入れる	plt.grid(True)
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
特異値分解として多次元データを数値次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
文字列をセパレータによって二分する	文字列.partition(セパレータ)
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
y軸の目盛を表示しない	plt.yticks([])
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
データフレームの指定した列のどの値が頻出か見る	df['列A'].mode()
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
開始位置を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
日付時刻データは何時か知る	aDatetime.hour
パールバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
出現頻度を作図する	plt.hist(データ列)
2を底とする対数を求める	math.log2(x)
ベクトルの各要素の最小公倍数	np.lcm(aArray, aArray2)
データをインデント幅を指定してJSONにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
折れ線グラフのクロス印の線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
リストと数列の散布図を描画して、その大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
デック中の文字列を数える	両端キュー.count(文字列)
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
XにYを足した結果を求めたい	X + Y
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
xをアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{x}\033[0m'
リストとリストについての散布図に文字列という補足用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
丸印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
0からnの範囲で	range(n)
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
カウンタ間で積集合演算する	aCounter & aCounter2
８進数字を全部使う	string.octdigits
データフレームをTSVから読み込む	pd.read_csv('file.tsv', sep='\t')
ファイルのファイル名	os.path.basename(filepath)
ファイルにxを文字列に変換して書き込む	x = 0<nl>f.write(str(x))
横棒グラフをインディアンレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='indianred')
ヒストグラムをスカイブルー色を使って描画する	plt.hist(データ列, color='skyblue')
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
データフレームをカンマ区切り形式にヘッダを付けず保存する	df.to_csv('file.csv', header=None)
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
スラグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
長さの制限された両端キューを配列から新規生成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
ライトスレイグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームの内容を見る	df.head()
変数が無限大に近づく時、極限値を算出する	sympy.limit(数式, 変数, oo)
整数が-9以上9以下	-9 <= 整数 <= 9
データフレームの指定したカラムを一万の位で丸める	df['列A'].round(-4)
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: ナバホホワイト色を使う	color = 'navajowhite'
実数が無限大か調べる	math.isinf(x)
KNNでクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
線形回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
文字列の開始位置以降に部分文字列が含まれない	文字列.find(部分文字列, 開始位置) == -1
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
配列の累積和	np.cumsum(aArray)
オブジェクトがフィールドを持つ	hasattr(obj, プロパティ名)
最頻値でデータフレームの一部のカラムの欠損値を置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ファイルをオープンして]追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
文字列全体を正規表現に複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームの選択した列の記述統計量	df[['列A', '列B']].describe()
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
カンマ区切りのファイルをカラム名なしで読み込む	pd.read_csv('file.csv', header=None)
条件に否定したい	not 条件式
縦軸の目盛を表示しない	plt.yticks([])
プロットを使用する	import matplotlib.pyplot as plt
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
等号を書きたい	X == Y
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
データフレームの選択したカラムのNaNをxに増やす	df[['列A', '列B']].fillna(x)
option: ダークゴールデンロッドにグラフの色をする	color = 'darkgoldenrod'
ひとつも数字が文字列中に含まれないかどうか確認する	any(not c.isdigit() for c in 文字列)
文字列の後ろから部分文字列を探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
等差数列を行列にする	np.arange(開始値, 終了値, 等差)
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
データフレームのカラムの偏差値を使う	50 + 10 * scipy.stats.zscore(df['列A'])
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
辞書のキーとその項目を列挙する	辞書.items()
データをソートしてJSONにエンコードする	json.dumps(データ, ensure_ascii=False, sort_keys=True)
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
セットの全ての要素が別のセット2に含まれるか	セット.issubset(セット2)
データフレームの選択した列の値を正規表現patternでまとめてreplに置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
配列の標準誤差	scipy.stats.sem(配列)
mathをインポートする	import math
オレンジレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
散布図の▼マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
バイナリ書き込みできるようにファイルをオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
rgbのポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
双方向キューが欲しい	両端キュー = collections.deque()
要素がセットの要素でないかどうか調べる	要素 not in セット
線グラフの色をグレーにする	plt.plot(データ列x, データ列y, color='grey')
実数の逆正弦	math.asin(x)
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
文字列がリストに含まれる	文字列 in リスト
散布図を赤い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
昇順にデータフレームを２つの列でソートして更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
整数はセットのメンバーでないか調べる	数 not in セット
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
数式のyに別の数式を代入する	数式.subs(y, 数式2)
３つの文字列をプリントする	print(文字列, 文字列, 文字列)
ヒストグラムをダークグリーン色を用いて描画する	plt.hist(データ列, color='darkgreen')
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
XをYで割った余りを計算したい	X % Y
option: スラッシュを区切り記号で使う	sep = '/'
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
整数2がn以上、かつ、n3以下	整数 <= 整数2 and 整数2 <= n3
アンサンブル学習を用いてクラス分類をする	sklearn.ensemble.VotingClassifier()
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
ライトシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
データフレームの指定した列の未入力値を中央値に設定する	df['列A'].fillna(df['列A'].median())
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データ列とイテラブルについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
数列から両端キューを作成する	collections.deque(数列)
データフレームのあるカラムの分を使う	df['列A'].dt.minute
データフレームを表示するとき、列数を変更する	pd.set_option('display.max_columns', n)
ロージーブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ナバホホワイト色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データシリーズの中にと文字列がある	ds.isin([value, value2])
xを緑色化する	f'\033[32m{x}\033[0m'
データフレームの一部のカラムを千の位で四捨五入する	df[['列A', '列B']].round(-3)
文字列をコロンで二分する	文字列.partition(':')
折れ線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
文字列の中でASCII限定としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
文字列を最後の部分文字列で二分して残りを見る	文字列.rpartition(部分文字列)[-1]
多い順番にカウンタを列挙する	aCounter.most_common()
nでシードを初期化する	random.seed(n)
ベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
色付きの点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
棒グラフの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
線グラフを青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
表データをある列で小さい順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
青い一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: グラフの種類を実線に設定する	linestyle = 'solid'
データフレームの欠損値をxで埋める	df.fillna(x)
JSON形式の入力を辞書に変換する	json.load(ファイル入力)
条件が三つとも成り立つ	条件 and 条件2 and 条件3
データフレームのあるカラムが何年か知る	df['列A'].dt.year
標準出力を見る	sys.stdout
数の小数点以下を丸める	round(x)
データフレームをインデックスによってソートする	df.sort_index()
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
rgbの丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
両端キューに文字列をプッシュする	両端キュー.append(文字列)
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
三整数のGCD	math.gcd(n, n2, n3)
リストと配列についての散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図に青い△印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
縦棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
二進文字列を整数に変換する	int(文字列, 2)
表データの先頭n行を確認する	df.head(n)
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
データフレームの一部の列の空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
整数かける整数	整数 * 整数2
ある列の文字列が部分文字列で終わるデータを選ぶ	df[df['列A'].str.endswith(部分文字列)]
リストの合計値	sum(リスト)
日付時刻データからn分引く	aDatetime - datetime.timedelta(minutes=n)
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
option: プラムにグラフの色を設定する	color = 'plum'
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
表計算ファイルからデータフレームとして複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ベクトルの差	aArray - aArray2
線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
多次元データをt-SNEで文字列次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
データフレームのあるカラムがどの程度、正規分布から尖っているか調べる	df['列A'].skew()
yが無限大に近づく場合数式の極限値を求める	sympy.limit(数式, y, oo)
辞書を計数器に変換する	collections.Counter(aDict)
xについて微分を行う	sympy.diff(数式, [|変数]x)
黒い左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: オリーブ色を使用する	color = 'olive'
イテラブルと数列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
Xの四乗を欲しい	X ** 4
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
行列の列ごとの最大値	np.max(aArray, axis=0)
文字列はタイトル大文字小文字かどうかテストする	文字列.istitle()
文字列中にひとつでも小文字があるか確認する	any(c.islower() for c in 文字列)
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
ダークオリーブグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームの指定した列の未入力値を前の行の値で補完する	df['列A'].fillna(method='ffill')
配列からランダム複数個に選んでリストにする	random.choices(配列, k=n)
複数の列を組み合わせてグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
小麦色色を用いてヒストグラムを描画する	plt.hist(データ列, color='wheat')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
データ列の偏りを平方根する	np.sqrt(データ列)
option: ラインを太くする	linewidth = 3.0
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
ダークゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ネイピア数を使う	math.e
実線にヒストグラムの線種を設定する	plt.hist(データ列, linestyle='solid')
ゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
二つの文字列を順に出力する	print(文字列, 文字列)
折れ線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
行列の逆行列	np.linalg.inv(aArray)
指定した列の値で集計し、それぞれの分散を求める	df.groupby('列A').var()
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
文字列を右から部分文字列で区切る	文字列.rsplit(部分文字列)
ふたつのセットが互いに素かどうか	セット.isdisjoint(セット2)
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
プラットフォームの符号付き整数の最大値を調べる	sys.maxsize
リッジ回帰分析の準備をする	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
日付時刻データの月	aDatetime.month
出力するCSVファイルの小数点以下の桁数を変更する	df.to_csv('file.csv', float_format='%.3f')
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
日付時刻データにn日分、足す	aDatetime + datetime.timedelta(days=n)
散布図の印の線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
改行せず文字列をプリントする	print(文字列, end='')
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
リストをn個に等量でビン分割する	pd.qcut(aList, n)
折れ線グラフのダイアモンドマーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
青い一点鎖線を使ってデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データをソートしてJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False, sort_keys=True)
が名前付きタプルのインスタンスかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームから列を２つのみ選択する	df[['列A', '列B']]
グラフに被らない位置にデータラベルを表示する	plt.legend(loc='best')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
OSはWindowsかどうか調べる	sys.platform.startswith('win32')
データフレームをCSV形式にヘッダを付けず書き出す	df.to_csv('file.csv', header=None)
赤い▽印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: フォントの色をホットピンクに設定する	color = 'hotpink'
スノー色を用いてヒストグラムを描画する	plt.hist(データ列, color='snow')
Excelファイルから複数のシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: 色をピンクに設定する	color = 'pink'
SVDを行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
散布図をダークレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='darkred')
グラフを暗くする	sns.set(pallete='dark')
データフレームの一部のカラムの欠損値をモードに減らす	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
名前付きタプルを辞書にする	aNamedTupleObject._asdict()
オブジェクトの参照カウント	sys.getrefcount(オブジェクト)
option: グラフの色をオールドレースに変更する	color = 'oldlace'
データシリーズのNaNを直後の値に設定する	ds.fillna(method='bfill')
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
２つの数値を順にプリントする	print(数値, 数値)
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
配列の各要素を両端キューの末尾に追加する	両端キュー.extend(配列)
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
文字列の中で大文字・小文字を無視して正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
整数を符号付きでバイナリに変換する	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
配列と配列についてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
散布図の丸印の線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
最後の部分文字列を用いて文字列を二分する	文字列.rpartition(部分文字列)
指定したカラムのNaNを平均で埋める	df['列A'].fillna(df['列A'].mean())
日付と時間からタイムスタンプを作成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: 印を▽に変更する	marker = 'v'
マッピングの項目名の一覧を参照する	list(辞書.keys())
ライトコーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
散布図をミディアムオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
リストの末尾を見る	リスト[-1]
日付データが日付データと同時かどうか調べる	aDate == aDate2
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
ベクトルのユニークな要素とその個数を使う	u, counts = np.unique(aArray, return_counts=True)
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
リストを中央値で分割する	pd.qcut(aList, 2)
データシリーズの曜日	ds.dt.weekday_name
散布図を黒いポイントマーカーでプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
浮動小数点数にする	float(x)
option: グラフの色をスカイブルーにする	color = 'skyblue'
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
改行なしに二つの文字列をプリントする	print(文字列, 文字列, end='')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
ベクトルの平均値を求める	np.mean(aArray)
リストが空でないか調べる	len(リスト) != 0
縦棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
文字列を走査し、パターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの一部のカラムの中にいくつ日付データが存在するかカウントする	df[['列A', '列B']].isin([value]).sum()
文字列中にひとつでもアルファベットが含まれるかどうか	any(c.isalpha() for c in 文字列)
プロットに格子線を描画する	plt.grid(True)
オブジェクトを文字列に変換する	str(obj)
option: グラフの色をベージュに変更する	color = 'beige'
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
リストから重複なくn個ランダムに抽出する	random.sample(リスト, k=n)
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
散布図を赤いクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
実数に実数をかける	x * y
リストとリストの散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
3変数の最大値	max(x, y, z)
配列を縦棒プロットにする	plt.bar(ラベル列, データ列)
その平均でデータフレームの列の欠損値を埋める	df['列A'].fillna(df['列A'].mean())
改行しなくてxをプリントする	print(x, end='')
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
十乗を書きたい	X ** 10
マップからキーとその値を組として取り出す	辞書.items()
空のリッジ回帰モデルを用意する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
xを黄色で表示できる文字列に変換する	f'\033[33m{x}\033[0m'
５乗を計算したい	X ** 5
ティール色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
リストのn番目以降の部分を得る	リスト[n:]
フローラルホワイト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
双方向キューの末尾にリストの各値を追加する	両端キュー.extend(リスト)
リストとデータ列についての散布図に文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
指定したカラムで集計し、それぞれの合計を求める	df.groupby('列A').sum()
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
線グラフを色付きの破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
最小値でデータフレームの指定したカラムの欠損値を置換する	df['列A'].fillna(df['列A'].min())
ヒストグラムをダークオリーブグリーン色として描画する	plt.hist(データ列, color='darkolivegreen')
プロットの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
yについて数式のインテグラルを計算する	sympy.integrate(数式, y)
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
リストを等量でビン数nでビニングする	pd.qcut(aList, n)
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
日付データが金曜日か調べる	aDate.weekday() == 4
option: アスキー文字に限定する	flag = re.ASCII
タプルが空でないかどうか確認する	len(タプル) != 0
データシリーズの欠損値をメディアンで埋める	ds.fillna(ds.median())
直後の値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(method='bfill')
チップのデータセットをロードする	df = sns.load_dataset('tips')
リスト中の要素は少なくともひとつ真か	any(リスト)
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
現在のモジュール	sys.modules[__name__]
データ列の寄与率を算出する	sklearn.metrics.r2_score(データ列, データ列2)
正接	math.tan(x)
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
option: モカシンにフォントの色を設定する	color = 'moccasin'
リストをカウントしてカウンタを更新する	aCounter.update(iterable)
整数の八進数表現	oct(整数)
散布図の印を菱形にする	plt.scatter(データ列x, データ列y, marker='D')
配列の標準誤差を算出する	scipy.stats.sem(配列)
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
線形モデルの回帰変数を使う	model.coef_
リストの要素を文字列として、'改行で一つにする	'\n'.join(map(str, リスト))
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
変数の値の出力を改行なしに行う	print(変数名, end='')
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
散布図のポイント印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
データフレームの相関行列	df.corr()
右三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
ある列のカテゴリごとの個数	df.groupby('列A').count()
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
JSON形式で文字列をファイル出力に出力する	json.dump(文字列, ファイル出力, ensure_ascii=False)
線グラフの色をターコイズに変更する	plt.plot(データ列x, データ列y, color='turquoise')
改行せずにxをプリントする	print(x, end='')
オブジェクトはバイト列クラスか判定する	bytes = int<nl>isinstance(obj, bytes)
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
nは整数	整数 == 整数2
線グラフの色をダークスラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategray')
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
プロットを使用する準備をする	import matplotlib.pyplot as plt
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
ライトグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
日付時刻データとタイムスタンプデータの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
配列とリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
散布図の△印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データシリーズの中央値	ds.median()
配列を分割数nとして分割する	pd.cut(aArray, n)
リストの要素が最初に見つかる位置を求める	リスト.index(要素)
ゼロ埋めされた８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int8)
行列の逆行列を求める	np.linalg.inv(aArray)
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
カウンタを集合にする	set(aCounter)
折れ線グラフの上三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
方程式として数式の変数の解を求める	sympy.solve(数式, [|変数]x)
セットをタプルにする	tuple(セット)
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
縦棒グラフを描画し、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: グラフの色を濃いシアンに設定する	color = 'darkcyan'
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
列を四分位数でビニングする	pd.qcut(ds, 4)
整数が一桁の数か調べる	-9 <= 整数 <= 9
正規分布に基づくパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: フローラルホワイト色を使用する	color = 'floralwhite'
option: ローングリーンに色を指定する	color = 'lawngreen'
散布図を赤い左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフの△印の色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
配列の幾何平均を計算する	scipy.stats.gmean(配列)
マップにキーが存在するとき、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
ヒストグラムの色をディープスカイブルーに指定する	plt.hist(データ列, color='deepskyblue')
文字列は全て印字できるか調べる	文字列.isprintable()
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
指定したカラムのどの値が最も出現するか見る	df['列A'].mode()
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
改行を使う	'\n'
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
変数名はコルーチン	inspect.iscoroutine(識別子)
データフレームの一部の列を丸めて、整数にする	df[['列A', '列B']].round().astype(int)
ふたつの集合の差集合	セット.difference(セット2)
option: 区切りを改行にする	sep = '\n'
最後のカンマで文字列を二分割する	文字列.rpartition(',')
データフレームの一部のカラムの標本分散	df[['列A', '列B']].var(ddof=0)
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in 文字列)
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
線グラフを赤い実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
option: グラフの色をダークマゼンタにセットする	color = 'darkmagenta'
データ列をビン分割する	pd.cut(ds, aList)
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの列のユニークな要素を調べる	df[col].unique()
指定した列リストのみ、データフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
積み上げ棒グラフを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
リストとリストの散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
要素を両端キューにenqueueする	両端キュー.append(要素)
回帰分析を確率的勾配降下でする	model = sklearn.linear_model.SGDRegressor()
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
モカシン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
文字列が指定したにあるか確認する	文字列 not in 別の文字列
小数点数のハイパボリック・タンジェントを計算する	math.tanh(x)
データ列の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
カウンタの全カウントを見る	aCounter.total()
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
ケンドールの順位相関係数を計算する	scipy.stats.kendalltau(df['列A'], df['列B'])
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
数列とデータ列について散布図をプロットし、、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
リストの合計値を計算する	sum(リスト)
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
折れ線グラフのバツ印を黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
識別子はトレースバックか	inspect.istraceback(識別子)
折れ線プロットでデータ列の変遷を可視化する	plt.plot(range(len(データ列)), データ列)
数列とリストについて散布図を描画して、マーカーを下三角に変更する	plt.plot(データ列x, データ列y, marker='v')
データフレームのカラムの未入力値をその最小値で埋める	df['列A'].fillna(df['列A'].min())
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
CSVファイルに小数点以下3桁までデータフレームを書き出す	df.to_csv('file.csv', float_format='%.3f')
折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: カデットブルーを使う	color = 'cadetblue'
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
要素が無限に繰り返すイテラブルが欲しい	itertools.repeat(要素)
ファイルを閉じる	f.close()
タプルの中の最小値	min(タプル)
横軸の目盛りの表示値を変更する	plt.xticks(目盛りの値リスト)
白色で表示できる文字列にする	f'\033[37m{x}\033[0m'
データフレームを並べて、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
条件に満たす場合だけ、実行したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
辞書の値に要素は含まれていないか調べる	element not in 辞書.values()
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
文字列の末尾からタブを除く	文字列.rstrip('\t')
グラフの横軸に説明を設定する	plt.xlabel('x軸ラベル')
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
配列の列ごとの分散	np.var(aArray, axis=0)
データフレームの指定したカラムの統計量	df['列A'].describe()
ディープスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
指定した列の欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
データシリーズの中にいくつ欠損値があるか求める	ds.isna().sum()
option: 行列のデータ型を指定する	np.int16 = np.int<nl>dtype = np.int16
双方向キューの先頭を使う	両端キュー[0]
CSVのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームの指定したカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
option: グラフの色を黄色に設定する	color = 'yellow'
両端キューの最大長	両端キュー.maxlen
option: ホットピンク色を使う	color = 'hotpink'
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
末尾の列を除いたデータフレーム	df[df.columns[:-1]]
乱数シードをnで固定化する	random.seed(n)
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
分割数nとしてリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
日付時刻データからn分減算する	aDatetime - datetime.timedelta(minutes=n)
両端キューの末尾に数列の各要素を追加する	両端キュー.extend(数列)
オブジェクトのクラスを使う	type(obj)
今日のタイムスタンプを求める	datetime.datetime.now()
option: インディアンレッドにグラフの色をする	color = 'indianred'
カラーバーを横向きに設定する	plt.colorbar(orientation='horizontal')
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
XをYで割った値を計算したい	X / Y
行列を平坦にする	aArray.flatten()
配列を等量でn個に分割する	pd.qcut(aArray, n)
イテラブルからランダム複数個に選んでリストにする	random.choices(イテラブル, k=n)
データ列のヒストグラムを描く	plt.hist(データ列)
スプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
変数の値を整数倍にする	変数 *= 整数
セットを更新不能なセットに変換する	frozenset(セット)
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
リストと数列の散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ふたつの関係が部分集合か	セット.issubset(セット2)
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
文字列の右端から改行を除去する	文字列.rstrip('\n')
ふたつの集合に共通する要素からなる集合	セット.intersection(セット2)
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
データフレームの平均と信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
整数を両端キューの先頭に追加する	両端キュー.appendleft(整数)
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
2つの変数の大きい方を知りたい	max(X, Y)
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
option: 黄色を用いる	color = 'yellow'
データフレームをTSVファイルで保存する	df.to_csv('file.tsv', sep='\t')
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
オブジェクトがモジュールか調べる	inspect.ismodule(オブジェクト)
直後の値でデータフレームのあるカラムの欠損値を埋める	df['列A'].fillna(method='bfill')
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
最後の列を除いたデータフレームを使う	df[df.columns[:-1]]
散布図のマーカーの色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
カラムのKurtosisを計算する	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
グラフ中のフォントを指定する	sns.set(font=フォント名)
ベクトルと同じ大きさの空の配列を作成する	np.empty_like(aArray)
ダークオーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
一点鎖線にヒストグラムのラインスタイルを設定する	plt.hist(データ列, linestyle='dashbot')
イテラブルを配列に変換する	np.array(iterable)
色差別なくカラーパレットをグラフの描画で用いる	sns.set(pallete='colorblind')
折れ線グラフのポイント印の色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
最小値が求めたい	min(X, Y)
ヒストグラムの色をパウダーブルーにする	plt.hist(データ列, color='powderblue')
等量でn個にデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
ファイルパスが存在するかどうか調べる	os.path.exists(filepath)
option: グラフの種類を実線に変更する	linestyle = 'solid'
ストリーム全体をリストとして読み込む	f.readlines()
追加用にファイルを開き]fとする	f = open(filepath, mode='a')
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
データフレームのカラム間のスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
ベクトルの列ごとの平均値を求める	np.mean(aArray, axis=0)
データシリーズを四捨五入する	ds.round()
整数を両端キューにプッシュする	両端キュー.append(整数)
文字列中にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in 文字列)
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
option: ハニーデューにグラフの色をセットする	color = 'honeydew'
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
ライトゴールドロディイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ベクトルの合計を計算する	np.sum(aArray)
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
ヒストグラムの色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
表データのあるカラムの曜日の名前を使う	df['列A'].dt.weekday_name
最頻値でデータシリーズの欠損値を埋める	ds.fillna(ds.mode().iloc[0])
option: グラフの色をローングリーンに指定する	color = 'lawngreen'
双方向キュー中の文字列の出現数を数える	両端キュー.count(文字列)
棒プロットの色をセットする	plt.bar(ラベル列, データ列, color=rgb)
降順で表データをインデックスをキーにしてソートする	df.sort_index(ascending=False)
列のユニークな要素	df[col].unique()
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
文字列を空白によって区切る	文字列.split()
タイムスタンプデータにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
バイナリモードでファイルをオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
辞書をJSON形式で出力ストリームに保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
データフレームの選択したカラムを四捨五入する	df[['列A', '列B']].round()
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
整数が2で割り切れないか調べる	整数 % 2 == 1
オブジェクトは文字列クラス	str = int<nl>isinstance(obj, str)
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
クラス分類をガウス過程を使ってする	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
３数の最も大きい値	max(x, y, z)
カウンタの要素を列挙する	aCounter.keys()
数列とリストについて散布図を描画して、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
フィシャー流の尖度	scipy.stats.kurtosis(配列, fisher=True, bias=False)
整数が非負数でないかどうか調べる	整数 >= 0
データフレームの欠損値がある箇所に	df.style.highlight_null()
option: 色をパパイヤウィップに設定する	color = 'papayawhip'
リストの要素数を見る	len(リスト)
実数を整数に変換する	int(x)
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
折れ線グラフの丸印の線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
マップのキーに対応した値	辞書[キー]
赤い下三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフに赤い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: 色をブラックに変更する	color = 'black'
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
バイト列からJSONフォーマットのデータを読み込む	json.loads(バイト列.decode('unicode-escape'))
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
日付データの年数を使う	aDate.year
データシリーズを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
option: タブをセパレータで使用する	sep = '\t'
八乗を求めたい	X ** 8
横棒グラフをミッドナイトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='midnightblue')
配列とリストの散布図に黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ファイルからバイナリ書き込みストリームを開き]、fとする	f = open(filepath, mode='wb')
データフレームの指定した列を百の位で丸めて整数型にする	df['列A'].round(-2).astype(int)
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
ロバストな重クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
整数が正の数かどうか	整数 > 0
データフレームのヒストグラムを横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名')
ファイルパスを追加モードで開き]、fとする	f = open(filepath, mode='a')
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
日付データからn秒分減らす	aDate - datetime.timedelta(seconds=n)
option: ファイルを用いる	file = sys.open('file.txt', 'w')
縦棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
データをL2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ダークカーキにヒストグラムの色を変更する	plt.hist(データ列, color='darkkhaki')
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
文字列の両端から空白を除く	文字列.strip('\t')
カテゴリで色付けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
既存のファイルをSJISを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
option: グラフの色をシエナに設定する	color = 'sienna'
色付きの一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: グラフの色をグレーに指定する	color = 'gray'
データを最大最小値を用いてスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
半透明の破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
nまでの偶整数列を作る	list(range(2, n, 2))
デフォルトでグラフの見栄えをいい感じに指定する	sns.set()
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
ひとつでも非英数字が文字列中に含まれる	any(not c.isalnum() for c in 文字列)
時間をインポートする	import time
文字列を走査し、正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: マルーン色を用いる	color = 'maroon'
横軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データシリーズの中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
散布図に赤い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
リストを等量で分割数nとしてビン分割する	pd.qcut(aList, n)
データシリーズの曜日数を見る	ds.dt.dayofweek
タプルをn回、結合する	タプル * n
整数が一桁の整数か	0 <= 整数 <= 9
部分文字列が文字列の指定した位置以降にないか調べる	文字列.find(部分文字列, 開始位置) == -1
リストとリストについて散布図を描いてマーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
配列を等しい量になるようにビン数nを用いて分割する	pd.qcut(aArray, n)
異なる列をキーとして二つの表データを全結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
あるカラムのカテゴリごとの最小値	df.groupby('列A').min()
スピアマンの順位相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
データ列とリストについて散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ある列のカテゴリ毎の最大値	df.groupby('列A').max()
横棒グラフを白色として描画する	plt.barh(データ列x, データ列y, color='white')
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
二つのデータフレームを横方向に一つにする	pd.merge(df, df2)
配列の要素ごとのアダマール積を使う	np.multiply(aArray, aArray2)
線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
データシリーズの年を見る	ds.dt.year
カウンタからゼロ出現回数を削除する	+aCounter
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
ロイヤルブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
文字列がセットのいずれでもないどうか	文字列 not in セット
データフレームの指定したカラムを正規表現patternでまとめてreplに置換する	df['列A'].replace(pattern, repl, regex=True)
ファイルからフォルダ名を見る	os.path.dirname(filepath)
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
option: フォントの色をクリムゾンに指定する	color = 'crimson'
option: ネイビー色を使う	color = 'navy'
最後の列を除いたデータフレームを見る	df[df.columns[:-1]]
横軸だけグリッド線	plt.grid(axis='x')
データフレームの指定したカラムの空文字を未入力値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列とリストリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: バイナリ書き込みモードに設定する	mode = 'wb'
データをJSONフォーマットでファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
二つの表データを縦につなぐ	pd.concat([df, df2], axis=0)
２つの列によってデータフレームを破壊的に昇順に整列する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データフレームをグループ化しある列に対し分散を計算する	df.groupby('列A')['列B'].var()
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
整数がnで割り切れるか判定する	整数 % n == 0
タプルの要素が最初に見つかる位置を探す	タプル.index(要素)
データフレームのあるカラムが何秒か知る	df['列A'].dt.second
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
リストの長さ	len(リスト)
棒グラフを茶色色を使って描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
整数が一桁か確認する	-9 <= 整数 <= 9
文字列をISO8601で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
赤い実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図の印をポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
ヒストグラムの色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
データフレームのカラムの標準誤差を求める	scipy.stats.sem(df['列A'])
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
半透明の一点鎖線でリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
エクセルファイルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
文字列の末尾から空白を取り除く	文字列.rstrip()
option: マルーンを使う	color = 'maroon'
option: ピンクを使う	color = 'pink'
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
nが整数と等しいかどうか調べる	整数 == 整数2
配列の値が正規分布にしたがって発生する累積確率を計算する	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
xでデータフレームの選択したカラムの欠損値を補う	df[['列A', '列B']].fillna(x)
L1ノルムを用いて正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームを異なるカラムをキーとして右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
データフレームのインデックス名を全て付け直す	df.rename(index={x: y})
整数はセットのメンバーに含まれる	数 in セット
配列を等量で分割数nで分割する	pd.qcut(aArray, n)
データフレーム中の欠損値をドロップする	df.dropna(inplace=True)
分割数nで配列をビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
要素が全て初期値の配列を作成する	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
タプルのn番目以降の要素を抽出する	タプル[n:]
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
要素の無限イテレータを使う	itertools.repeat(要素)
数値∈セット	数 in セット
整数はセットのメンバーに含まれるか	数 in セット
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
x,yの複素数を算出する	complex(x, y)
データフレームのある列の分散	df['列A'].var()
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
ヒストグラムの色をライトブルーにセットする	plt.hist(データ列, color='lightblue')
辞書をソートしてJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
option: ベクトルのデータ型を指定する	np.int16 = np.int<nl>dtype = np.int16
option: 色をインディゴに設定する	color = 'indigo'
ロバストな線形モデルを作成する	model = sklearn.linear_model.HuberRegressor()
データフレームをあるカラムとしてグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
データフレームを表示するとき、表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
折れ線グラフの色をダークオリーブグリーンにする	plt.plot(データ列x, データ列y, color='darkolivegreen')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategray')
リストを境界値として配列を分割する	pd.cut(aArray, aList)
データフレームの選択したカラムの中に日付データと文字列が存在する	df[['列A', '列B']].isin([value, value2])
データシリーズを四捨五入して、整数にする	ds.round().astype(int)
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
折れ線グラフをダークシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkcyan')
列を累加した列を得る	itertools.accumulate(iterable)
ヒストグラムを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
日付データの表データのあるカラムを表データのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
分類木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
文字列を改行で区切る	文字列.splitlines()
データフレームの指定したカラムを十の位で四捨五入する	df['列A'].round(-1)
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームをグループ化しそれぞれの合計を算出する	df.groupby('列A').sum()
ヒストグラムの色をライトイエローにセットする	plt.hist(データ列, color='lightyellow')
散布図の印をダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
スプリンググリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='springgreen')
折れ線グラフの右三角印の太さを設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
表データの末尾5行を抽出する	df.tail(5)
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
year年month月day日hour時minute分second秒の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
option: 三角マーカーを使う	marker = '^'
ファイルパスを開き]追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
数列とデータ列について散布図をプロットし、、マーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
コマンド引数	sys.argv
実数以上の最小の整数を算出する	math.ceil(x)
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
'A'列の値がxに等しいデータを抽出する	df[df['列A'] == x]
配列のイミュータブルな集合を作る	frozenset(配列)
黒い上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
散布図をダークグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
文字列を空白を用いて分割し、、整数のリストに変換する	list(map(int, 文字列.split()))
数が正か判定する	x > 0
日付データの曜日を整数で見る	aDate.weekday()
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図をイエローグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
グラフに水平方向の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
ファイルをオープンして]、書き込みストリームを求める	'w' = 'a'<nl>open(filepath, mode='w')
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
イテラブルを連結してひとつの文字列にする	''.join(map(str, イテラブル))
データフレームの全列の相関を可視化する	sns.pairplot(df)
ファイルパスから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
整数を整数でわる	整数 / 整数2
文字列中にひとつでも非ASCII文字があるか調べる	any(not c.isascii() for c in 文字列)
データ列とリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
イテラブルと配列について散布図を描画して、マーカーをクロスに指定する	plt.plot(データ列x, データ列y, marker='x')
変数がマイナス無限大に近づくとき、数式の極限値を算出する	sympy.limit(数式, 変数, -oo)
データフレームの複数の列を消し、みる	df.drop(['列A', '列B'], axis=1)
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: 読み込みモードに設定する	mode = 'r'
option: 色をダークシアグリーンに設定する	color = 'darkseagreen'
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
縦棒グラフをアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='aquamarine')
スペース	' '
ファイル入力からJSON形式のデータをロードする	json.load(ファイル入力)
option: ▲印を描画する	marker = '^'
リストから重複なく、n値ランダムに選んでリストにする	random.sample(リスト, k=n)
ふたつの列を使ってグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
リストをJSON形式として指定したファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
部分文字列を別の文字列に置き換える	文字列.replace(部分文字列, 置換後の文字列)
データフレームの選択した列の値は未入力値か	df[['列A', '列B']].isna()
折れ線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
option: グラフの線幅を3.0ポイントに設定する	linewidth = 3.0
ハニーデュー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
リスト中の要素が最初に見つかるインデックスを探す	リスト.index(要素)
ヒストグラムの色をインディゴに指定する	plt.hist(データ列, color='indigo')
大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
条件を満たしたら、ループを最初から実行し直したい	if 条件式:<nl><tab>continue
縦棒グラフをイエローグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
リストとリストの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
n番目の列を行としてCSVを読み込む	pd.read_csv('file.csv', index_col=n)
データフレームの未入力値をその最小値で補完する	df.fillna(df.min())
データフレームのあるカラムを表データの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
タプルの最後のn要素を取り除く	タプル[:-n]
option: データ型として８ビット整数型を使う	np.int8 = np.int<nl>dtype = np.int8
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
カンマ区切りのファイルをヘッダを指定せずロードする	pd.read_csv('file.csv', header=None)
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
実数が負の数か	x < 0
option: パパイヤウィップ色を使用する	color = 'papayawhip'
表データから重複を残さず重複を除く	df.drop_duplicates(keep=False)
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
列をn個に分割する	pd.cut(ds, n)
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
リストとリストについての散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
疑似乱数を正規分布で求める	random.normalvariate(mu=0.5, sigma=0.2)
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
カラムが正規分布に従うかどうか調べる	scipy.stats.shapiro(df['列A'])
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
文字が片仮名かどうか調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
半透明の実線としてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームのあるカラムが何秒か調べる	df['列A'].dt.second
文字列を表示する	print(文字列)
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
xとyを文字列で区切ってプリントする	print(x, y, sep=s)
文字が別の文字列にあるかどうか調べる	文字 in 文字列
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
平均と標準偏差から乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
ふたつの集合のいずれか一方だけの集合を使う	セット.symmetric_difference(セット2)
ダークオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
文字がカタカナかどうか調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
数列の散布図を描画する	plt.scatter(データ列x, データ列y)
オブジェクトはコードかどうか調べる	inspect.iscode(オブジェクト)
データフレームの選択したカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
文字列から改行を除く	文字列.replace('\n', '')
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
データフレームのカラムがどの程度、分散しているか確認する	df['列A'].var()
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
リストが少なくともひとつ真か調べる	any(リスト)
空のヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
行列の最小	np.min(aArray)
文字列をJSON形式の文字列に変換する	json.dumps(文字列, ensure_ascii=False)
ホワイト色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
折れ線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
Xの3乗を欲しい	X ** 3
イテラブルをイミュータブルな集合にする	frozenset(イテラブル)
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
数列を縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
option: 色を青に設定する	color = 'blue'
数値の符号をコピーにする	math.copysign(x, x2)
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
数値の出力を改行しなくて行う	print(数値, end='')
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
長さの制限された両端キューをリストから作る	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
文字列を最後のセパレータで二分割して残りを求める	文字列.rpartition(セパレータ)[-1]
文字列を最後の部分文字列で分けたときの後半の文字列を使う	文字列.rpartition(部分文字列)[-1]
ある列の値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
option: 印をバツに設定する	marker = 'x'
線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの列名一覧で指定したカラムを削除する	df.drop(columns, axis=1, inplace=True)
ピンクにヒストグラムの色を変更する	plt.hist(データ列, color='pink')
散布図に黒い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
ドジャーブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
xをアンダーライン付きにする	f'\033[4m{x}\033[0m'
セットから例外なく要素を取り除く	セット.discard(要素)
numpyをインポートする	import numpy as np
散布図のバツマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
整数の二進数リテラル	bin(整数)
整数を整数で割って小数点以下を切り上げる	(整数 + 整数2 - 1) // 整数2
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
横棒グラフをパールゴールデンロッド色を使って描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データフレームをExcelファイルファイルで書き出す	df.to_excel('file.xlsx')
データフレームのカラムのトリム分散を使う	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
棒グラフをコーンフラワーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
条件を満たす間動作をループさせたい	while 条件式:<nl><tab>print('繰り返し')  # 直して
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
辞書を別のマップで更新する	辞書.update(辞書2)
空文字列	''
option: ペルーに色を設定する	color = 'peru'
縦棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
両端キューの中に整数が含まれてるか調べる	整数 in 両端キュー
数値がセットのメンバーでないか調べる	数 not in セット
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ミディアムパープル色でヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
option: フクシアを使用する	color = 'fuchsia'
データフレームをグループ化し、ある列に対し平均値を計算する	df.groupby('列A')['列B'].mean()
データフレームの列名を置き換える	df.columns = columns
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
青色で表示できる文字列にする	f'\033[34m{x}\033[0m'
データフレームを二つの列によって並べ直す	df.sort_values(by=['列A', '列B'])
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列を最後のコロンで二つに分けて、後ろの方を使う	文字列.rpartition(':')[-1]
バイアスなしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
要素が無限に繰り返すイテラブル	itertools.repeat(要素)
縦棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
プロットをプレゼンてション用に設定する	sns.set(context='talk')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
三つの条件が何れか成り立つ	条件 or 条件2 or 条件3
リストと配列の散布図を描画し、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
option: ライムにグラフの色を設定する	color = 'lime'
自然数の最大公約数を算出する	math.gcd(n, n2)
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
変数が0に近づく時の極限値を求める	sympy.limit(数式, 変数, 0)
リストを文字列として、空白で連結する	' '.join(map(str, リスト))
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームのヒストグラムを横に並べて、描く	sns.displot(df, x='列名', col='カテゴリ名')
データフレームの選択した列はどれだけ、正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
グラフに鉛直方向の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
オブジェクトが関数か調べる	inspect.isfunction(オブジェクト)
標準入力を使用する	sys.stdin
サーモン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データフレームの中の列を等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
多次元データをSVDで要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
データフレームの選択したカラムの値を正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
文字列から改行を全て消す	文字列.replace('\n', '')
星マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
文字列を最後のセパレータで二つに分けて前半を求める	文字列.rpartition(セパレータ)[0]
xを下線付きにする	f'\033[4m{x}\033[0m'
リストとリストについて散布図をプロットしてポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
あるカラムのNaNをxに設定する	df['列A'].fillna(x)
散布図のマーカーを右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
モカシン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
アンサンブル学習で回帰分析をする	sklearn.ensemble.VotingRegressor()
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
SVDとして整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
等しくないと書きたい	X != Y
モデルを説明変数と目的変数として学習する	model.fit(説明変数, 目的変数)
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
xの絶対値を求める	abs(x)
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
セットに数値を追加する	セット.add(数)
文字列をコロンで二分して、残りを使う	文字列.partition(':')[-1]
列としてカウンタを更新する	aCounter.update(iterable)
配列のイミュータブルな集合を使う	frozenset(配列)
フォーマットを用いてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームの未入力値をその平均値で埋める	df.fillna(df.mean())
データ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
データフレームの一部のカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
棒グラフを紺色を用いて描画する	plt.bar(データ列x, データ列y, color='darkblue')
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
縦棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
棒グラフをディープスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
実数の双曲線余弦	math.cosh(x)
整数がタプルのどれか	aTuple = [0, 1, 2]<nl>整数 in aTuple
option: 出力先を標準エラーにする	file = sys.stderr
カウンタの項目一覧	aCounter.keys()
グラフの中のy軸に説明を付ける	plt.ylabel('y軸ラベル')
データシリーズの欠損値をxで補う	ds.fillna(x)
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
双方向キューを空にする	両端キュー.clear()
データ列の折れ線グラフを四角印を用いて描画する	plt.plot(データ列x, データ列y, marker='s')
option: 改行を区切りで使う	sep = '\n'
数が正の数かどうか	x > 0
折れ線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
要素を双方向キューの右から取り出す	両端キュー.pop()
option: ミッドナイトブルーにグラフの色を指定する	color = 'midnightblue'
リストとイテラブルについての散布図にrgbの星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
小数点数を切り上げて整数にする	math.ceil(x)
英字の文字列	string.ascii_letters
散布図を黒い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図の下三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
option: グラフの色をホワイトにセットする	color = 'white'
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
書式文字列を辞書で文字列整形する	書式.format_map(辞書)
線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
両端キューの先頭に要素を追加する	両端キュー.appendleft(要素)
floatの最小値	sys.float_info.min
ヒストグラムの色をライトゴールドロディイエローにセットする	plt.hist(データ列, color='lightgoldenrodyellow')
数列とリストの散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
イテラブルをダミー変数にする	pd.get_dummies(イテラブル)
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
ドジャーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
リストに別のリストを追加して広げる	リスト.extend(リスト2)
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
ライトブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
両端キューの中に文字列があるか調べる	文字列 in 両端キュー
データシリーズはどの程度分散しているか確認する	ds.var()
パウダーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフをオーキッド色として描画する	plt.barh(データ列x, データ列y, color='orchid')
option: シルバー色を使用する	color = 'silver'
配列とリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: 出力先を標準出力に指定する	file = sys.stdout
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
新しい部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
日付時刻データの年数を使う	aDatetime.year
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
昇順に二つの列によって表データをソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: ローングリーンにグラフの色を変更する	color = 'lawngreen'
配列間の各要素の最大公約数	np.gcd(aArray, aArray2)
辞書を別のマッピングで更新する	辞書.update(辞書2)
カウンタのインターセクション演算する	aCounter & aCounter2
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
ダークサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='darksalmon')
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
ピーチパフにヒストグラムの色を変更する	plt.hist(データ列, color='peachpuff')
二つのセットは交わりを持たないかどうか調べる	セット.isdisjoint(セット2)
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
エラーなくセットから数値を取り除く	セット.discard(数)
数列と配列の散布図を描いて、クロスマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列を走査し、パターンに複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
一点鎖線を使ってデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームをグループ化し、あるカラムに対し個数を計算する	df.groupby('列A')['列B'].count()
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
散布図をrgbの下三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
実数のsin	math.sin(x)
両端キューの先頭に数列の各値を追加する	両端キュー.extendleft(数列)
サポートベクター分類モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフの色をビスクに変更する	plt.plot(データ列x, データ列y, color='bisque')
option: スラッシュをセパレータで用いる	sep = '/'
折れ線グラフの印を▼にする	plt.plot(データ列x, データ列y, marker='v')
ある列の文字列が正規表現文字列にマッチしない行を選ぶ	df[~df['列A'].str.match(正規表現)]
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データシリーズは正規分布からどれだけ、歪んでいるか確認する	ds.kurt()
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ファイルから書き込みストリームを開き]、fとする	f = open(filepath, mode='w')
最後のカンマを用いて文字列を二分する	文字列.rpartition(',')
データシリーズの値を正規表現patternで全てreplに変更する	ds.replace(pattern, repl, regex=True)
2進文字列を整数にする	int(文字列, 2)
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
x軸の目盛りを非表示にする	plt.xticks([])
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in 文字列)
option: ライトゴールドロディイエローにフォントの色を設定する	color = 'lightgoldenrodyellow'
文字列の最後から範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
空のガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
後の行の値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(method='bfill')
カラムのピアソンの積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
データシリーズの中に日付データがあるか確認する	ds.isin([value])
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
実線を使ってラインを描く	plt.plot(データ列x, データ列y, linestyle='solid')
数式を変数xの方程式として解く	sympy.solve(数式, [|変数]x)
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
文字列が文字列より辞書順で後か	文字列 > 文字列2
横棒グラフをライトコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcoral')
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
データフレームの指定したカラムを百の位で丸めて整数にする	df['列A'].round(-2).astype(int)
option: マーカーをクロスに変える	marker = 'x'
データフレームをある列のカテゴリでグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
二進数文字列をバイナリにする	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
末尾から部分文字列で文字列を分割する	文字列.rsplit(部分文字列)
条件で「または」を書きたい	条件式 or 条件式2
列を中央値でビン分割する	pd.qcut(ds, 2)
散布図をサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='salmon')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
リストと配列についての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフを真紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
option: 色をベージュに設定する	color = 'beige'
リストの各要素を双方向キューの先頭に追加する	両端キュー.extendleft(リスト)
XをYで割った商を欲しい	X // Y
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
セットに項を追加する	セット.add(要素)
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
改行しなくて文字列の出力を行う	print(文字列, end='')
論文用にグラフを変更する	sns.set(context='paper')
option: 左三角印を使う	marker = '<'
整数を実数で除算して、小数点以下を切り捨てる	x // y
option: やわらかい青色を用いる	color = 'cornflowerblue'
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
ケンドールの順位相関係数を計算する	scipy.stats.kendalltau(数列, 数列2)
ダイアモンド印を用いるデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
実線に折れ線グラフの線種をセットする	plt.plot(データ列x, データ列y, linestyle='solid')
散布図をサドルブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
配列を円グラフにする	plt.pie(データ列, startangle=90)
横棒グラフをダークターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
イテラブルの長さnの順列を計算する	itertools.permutations(iterable, n)
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
日付データが日付データより後ろか調べる	aDate > aDate2
カウンタの最頻出な項目	aCounter.most_common()[0]
option: 列方向に計算する	axis = 0
縦棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
xを太文字でプリントできる文字列にする	f'\033[1m{x}\033[0m'
折れ線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
全要素を０で初期化した整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int)
勾配ブースティング分類木を準備する	model = sklearn.ensemble.GradientBoostingClassifier()
配列とリストについての散布図にクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
データフレームのヒストグラムを横に並べてプロット化する	sns.displot(df, x='列名', col='カテゴリ名')
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
実数は無限大かテストする	math.isinf(x)
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ある列の値で未入力値を含めてデータフレームをグループ化する	df.groupby('列A', dropna=False)
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
データ列とリストについての散布図に文字列という補足用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
ホットピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
識別子がビルトインか調べる	inspect.isbuiltin(識別子)
配列から重複なくnデータランダムに選んでリスト化する	random.sample(配列, k=n)
文字列を空白で区切って文字列リストに変換する	文字列.split()
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
２つの計算結果を順に出力する	print(式, 式)
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: ライトスチールブルー色を用いる	color = 'lightsteelblue'
xとyをカンマで区切って出力する	print(x, y, sep=',')
リストと数列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
破線に折れ線グラフを変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
正規表現によって文字列を置換する	re.sub(pattern, newsub, s)
折れ線グラフの色を深紅に指定する	plt.plot(データ列x, データ列y, color='crimson')
数式を部分分数として展開する	sympy.apart(数式)
プロットの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
セットを空にする	セット.clear()
データを最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データをL2ノルムを用いて正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
文字列を最後の部分文字列で二分割し、、残りを求める	文字列.rpartition(部分文字列)[-1]
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ダークオレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
改行せずに複数の数値を表示する	print(数値, 数値, end='')
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
SJISで文字列をバイト列に変換する	文字列.encode(encoding='sjis', errors='ignore')
グラフの描画で濃く色を使う	sns.set(pallete='deep')
線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
ローングリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
空白で文字列を区切って整数リストに変換する	list(map(int, 文字列.split()))
option: ラインスタイルを一点鎖線に設定する	linestyle = 'dashbot'
グラフの描画で色差別なく色テーマを使用する	sns.set(pallete='colorblind')
データフレームの行の名前を一度に付け直す	df.rename(index={x: y})
辞書にキーが存在しないならば、処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
文字列を改行によって分割する	文字列.splitlines()
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
文字列の文字数を使う	len(文字列)
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
散布図に黒い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
今日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
表データの先頭5行を調べる	df.head(5)
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
2つのデータフレームを横方向に合体させる	pd.merge(df, df2)
グラフの用途をポスターに変更する	sns.set(context='poster')
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
Excelファイルから複数のシートを読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
文字列中にひとつでも非アスキー文字が存在する	any(not c.isascii() for c in 文字列)
グラフを見やすくする	import seaborn as sns
要素がn回繰り返すイテレータ	itertools.repeat(要素, n)
option: ライトイエロー色を用いる	color = 'lightyellow'
多次元データを特異値分解で整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
option: ダークブルーを使用する	color = 'darkblue'
リストを文字列として、指定した文字列によって連結する	文字列.join(map(str, リスト))
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
行列のスカラー倍	aArray * n
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
ヒストグラムを真紅色として描画する	plt.hist(データ列, color='crimson')
ヒストグラムの色をダークブルーにする	plt.hist(データ列, color='darkblue')
二つの文字列は同じか調べる	文字列 == 文字列2
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
文字列の指定した範囲位置の間に部分文字列が含まれるかどうか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
データシリーズの中にいくつ欠損値があるかカウントする	ds.isna().sum()
数を整数で割った余り	x % y
散布図の左三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームのあるカラムが何秒か見る	df['列A'].dt.second
シャルトリューズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ある列をドロップし、みる	df.drop('列A', axis=1)
実数が負かどうか調べる	x < 0
現在は何月か知る	datetime.datetime.today().month
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの最頻値を求める	df.mode()
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
FIXME:カテゴリーデータを出現頻度順に整列する	df['列A'].value_counts().sort_index().index
配列の値が正規分布にしたがって発生する確率を算出する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
1からnまでの整数列を求める	list(range(1, n+1))
整数の並べ方の総数	math.perm(n)
原点から(実数,y)の距離	math.hypot(x, y)
データフレームを散布図で見、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
二進対数を計算する	math.log2(x)
カーキ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフを色付きの点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
リストをn回連結する	リスト * n
文字列からタブを取り除く	文字列.replace('\t', '')
散布図にバツ印を使う	plt.scatter(データ列x, データ列y, marker='x')
カウンタの最頻出なキー	aCounter.most_common()[0]
整数を8進数表現にする	oct(整数)
year年month月day日hour時minute分second秒のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
ダークグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列を全て小文字に変換する	文字列.casefold()
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
整数をnだけ右シフトする	整数 >> n
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
リストの末尾からn番目以前の部分を抽出する	リスト[:-n]
線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
カウンタをマッピングを用いて更新する	aCounter.update(aDict)
k進対数	math.log(x, k)
データフレームの選択したカラムの標本分散	df[['列A', '列B']].var(ddof=0)
データシリーズの平均	ds.mean()
折れ線グラフの色をブランチドアーモンドにセットする	plt.plot(データ列x, データ列y, color='blanchedalmond')
欠損値がある行を消す	df.dropna(inplace=True)
指定した列の第三四分位数	df['列A'].quantile(0.75)
データフレームをグループ化し、各最小値を算出する	df.groupby('列A').min()
タプルのn番目からn2番目の部分を取り出す	タプル[n:n2]
データフレームをソートして、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
グリッド線	plt.grid(alpha=0.5)
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
両端キューをdequeue	両端キュー.popleft()
列の中に日付データと日付データがあるか調べる	df['列A'].isin([value, value2])
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ラインを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: 印を星に変更する	marker = '*'
ファイルが存在するか	os.path.exists(filepath)
黒いバツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
整数の2進表記を見る	bin(整数)
列を全て日付データに変換する	pd.to_datetime(df['列A'])
散布図をバツ印で描画する	plt.scatter(データ列x, データ列y, marker='x')
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
配列の形状を調べる	aArray.shape
配列のトリム分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
あるカラムを100の位で丸める	df['列A'].round(-2)
グラフに格子を表示する	plt.grid(True)
片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
空白区切りでタプルを表示する	print(*タプル)
新しい勾配ブースティング回帰木を作成する	model = sklearn.ensemble.GradientBoostingRegressor()
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ふたつの整数の差	整数 - 整数2
実線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
整数はセットのメンバーか	数 in セット
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
スタックの中に整数が存在する	整数 in 両端キュー
データ列のヒストグラムを描画する	plt.hist(データ列)
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
データシリーズの曜日名	ds.dt.weekday_name
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
テキストファイルファイル名が	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
ヒストグラムの色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
日付時刻データの分	aDatetime.minute
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', 文字列)
区間数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
yが0に近づくときの数式の極限値を計算する	sympy.limit(数式, y, 0)
２つのオブジェクトは同一か調べる	obj is obj2
2進数文字列をバイト列に変換する	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
数式のインテグラルを求める	sympy.integrate(数式)
標準出力がターミナル出力	sys.stdout.isatty()
整数の五分の一	整数 / 5
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
青い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: 色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
半透明の点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの未入力値を最大値に指定する	df.fillna(df.max())
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
減算を書きたい	X - Y
データフレームの行と列をひっくり返す	df.T
回帰モデルの正確さを計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
リストとリストについての散布図に赤い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
格子線をグラフに入れる	plt.grid(True)
２つの整数の論理積を求める	整数 & 整数2
二点間のユークリッド距離を求める	math.dist(point, point2)
文字列の中の大文字・小文字を無視してパターンによる全マッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
イテラブルから多重集合を作成する	collections.Counter(iterable)
リストを分割数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
指定したカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
データフレームの指定したカラムがどの程度、分散しているか見る	df['列A'].var()
横棒グラフをライトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightblue')
最初の整数を両端キューから削除する	両端キュー.remove(整数)
整数が偶数か調べる	整数 % 2 == 0
デピンク色としてヒストグラムを描画する	plt.hist(データ列, color='deeppink')
ふたつのセットが互いに素	セット.isdisjoint(セット2)
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
正規分布か仮説検定する	scipy.stats.shapiro(配列)
配列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
列のそれぞれを関数でフィルタする	filter(func, iterable)
文字列の末尾から不要な空白を取り除く	文字列.rstrip()
ベクトルから重複を除いた配列を作る	np.unique(aArray)
データフレームはどれだけ分散しているか見る	df.var()
option: チョコレートを使用する	color = 'chocolate'
散布図の印を下三角にする	plt.scatter(データ列x, データ列y, marker='v')
リストの折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
リストn番目から要素をポップする	リスト.pop(n)
データフレームの選択したカラムのパーセンタイルを求める	df[['列A', '列B']].quantile(パーセント/100)
ロイヤルブルー色としてヒストグラムを描画する	plt.hist(データ列, color='royalblue')
改行しないで複数の文字列を表示する	print(文字列, 文字列, end='')
枠なしのデータラベルをグラフの中に入れる	plt.legend(frameon=False)
線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
ラベンダーブラッシュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
折れ線グラフの大バツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームのある列をリストに変換する	df['列A'].values.tolist()
文字列を部分文字列で区切って、文字列リストに変換する	文字列.split(部分文字列)
データフレームから列を三つ選択する	df[['列A', '列B', '列C']]
option: 追加モードに変更する	mode = 'a'
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
データフレームの選択した列を千の位で丸める	df[['列A', '列B']].round(-3)
半透明の点線を用いてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
数列と配列についての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームの中にいくつ日付データがあるか数える	df.isin([value]).sum()
配列をビン分割する	pd.cut(aArray, aList)
折れ線グラフの色をピーチパフにセットする	plt.plot(データ列x, データ列y, color='peachpuff')
数列の度数分布図を描く	plt.hist(データ列)
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
option: 列の名前をリストで設定する	names = 列名リスト
ライトシアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
以上と条件を書きたい	X >= Y
データフレームのカラムをに箱ひげ図として描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
マッピングを階層化マップに変換する	collections.ChainMap(aDict)
データフレームの相関行列をケンドール順位相関係数で求める	df.corr(method='kendall')
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
yがマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(数式, y, -oo)
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in 文字列)
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
あるカラムの平均値を求める	df['列A'].mean()
ファイルパスをオープンして]、バイナリストリームを求める	'rb' = 'a'<nl>open(filepath, mode='rb')
列と列をペア化する	itertools.zip_longest(iterable, iterable2)
識別子がスタックフレームか	inspect.isframe(識別子)
縦棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
option: フローラルホワイト色を使う	color = 'floralwhite'
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ファイルをオープンして]、バイナリストリームを見る	'rb' = 'a'<nl>open(filepath, mode='rb')
リストの先頭の要素	リスト[0]
プログラムの実行を強制的に終了する	sys.exit()
シルバー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
文字列を小文字に変換する	文字列.casefold()
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
列を累加する	itertools.accumulate(iterable)
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
option: 分割記号をタブにする	sep = '\t'
現在のモジュールを使う	sys.modules[__name__]
オブジェクトは数値か	isinstance(obj, (int,float))
方程式として数式の変数の解を計算する	sympy.solve(数式, 変数)
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
スピアマン相関係数としてデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='spearman')
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
ヒストグラムの色をダークゴールデンロッドにセットする	plt.hist(データ列, color='darkgoldenrod')
タプルを番号付けする	enumerate(タプル)
レベッカパープル色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
文字列をセンタリングする	文字列.center(文字列幅)
ファイルパスをオープンする]	open(filepath)
ゼロ埋めされた三２ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
マッピングからエラーなくキーの値を得る	辞書.get(キー, 見つからない場合の値)
xを黒色でプリントできる文字列にする	f'\033[30m{x}\033[0m'
数値∉セット	数 not in セット
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
両端キューに要素をenqueueする	両端キュー.append(要素)
ソートして辞書をJSONにエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
ドジャーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
文字列からJSONを読み込む	data = json.loads(文字列)
三つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームの選択したカラムの中のNaNの合計をカウントする	df[['列A', '列B']].isna().sum()
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームの指定したカラムの欠損値を平均値で補う	df['列A'].fillna(df['列A'].mean())
バギングでクラス分類をする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
日付データは何曜日か知る	aDate.weekday()
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
xを太文字で表示する	print(f'\033[1m{x}\033[0m')
浮動小数点数の符号を同じにする	math.copysign(x, x2)
データフレームを配列にする	df.values
データフレームのあるカラムのタイムゾーンを指定する	df['列A'].tz_convert('Asia/Tokyo')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
パールゴールデンロッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームの一部の列の中にある文字列と日付データの合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
浮動小数点数を整数に変換する	int(x)
変数の値を半分にする	変数 /= 2
両端キュー中の文字列の位置	両端キュー.index(文字列)
棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
文字列を特殊文字も含め小文字にする	文字列.casefold()
平均付き箱髭図を描画する	plt.boxplot(データ列, showmeans=True)
整数がnで割り切れないかどうか判定する	整数 % n != 0
ヒートマップでデータフレームの相関行列を可視化する	sns.heatmap(df.corr())
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
ある列の値がx以上、y以下の行を取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
y座標の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームからカテゴリデータの列名リストを使う	df.select_dtypes('object').columns
空の両端キューを作る	両端キュー = collections.deque()
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
上位集合もしくは等しいかどうか調べる	セット >= セット2
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
スクリプトファイルと同じフォルダのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
列名を指定して二つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
不等価と書きたい	X != Y
ふたつのリストの差	list(set(リスト).difference(set(リスト2)))
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
データシリーズの年	ds.dt.year
ビスク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
折れ線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
改行せず複数の数値をプリントする	print(数値, 数値, end='')
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
デフォルト見栄えを適用する	sns.set()
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
バリーウッド色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
ボックスチャートを横に並べて描画する	plt.boxplot([データ列, データ列])
行列のデータ型	aArray.dtype()
データ列とイテラブルについての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
実数を浮動小数点数で	x // y
データフレームの指定の列に重複があれば、除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
リストと配列について散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
リストとリストについての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
三自然数の最小公倍数を求める	math.lcm(n, n2, n3)
小数点以下'3'桁までプリントする	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
横棒グラフをライム色を用いて描画する	plt.barh(データ列x, データ列y, color='lime')
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
option: フォントの色をインディゴに変更する	color = 'indigo'
2つの文字列が大文字小文字を無視して同じか	文字列.casefold() == 文字列2.casefold()
データフレームを表示するとき行数を変更する	pd.set_option('display.max_rows', n)
データフレームをCSV形式で保存する	df.to_csv('file.tsv', sep='\t')
タプルの末尾からn番目以前の要素を抽出する	タプル[:-n]
辞書から項目名とバリューのペアを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
リストとイテラブルについての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
縦方向に三つのデータフレームを一つにする	pd.concat([df, df2, df3], axis=0)
クラス分類の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
棒グラフをオーキッド色を使って描画する	plt.bar(データ列x, データ列y, color='orchid')
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
本日をタプルに変換する	datetime.datetime.today().timetuple()
ある列の最大値を計算する	df.groupby('列A').max()
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
イテラブルとデータ列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列の中の正規表現による全てのマッチを見る	re.findall(pattern, s)
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
実数が負か調べる	x < 0
線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
サンディーブラウン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
2つのリストを箱ヒゲ図にする	plt.boxplot([データ列, データ列])
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームの選択したカラムを100の位で丸める	df[['列A', '列B']].round(-2)
option: バイナリ書き込み用に設定する	mode = 'wb'
縦軸の目盛りを表示しない	plt.yticks([])
データフレームをCSVファイルで保存する	df.to_csv('file.csv')
スノー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
グラフをポスターに設定する	sns.set(context='poster')
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
辞書から最後の項目を取り除く	辞書.popitem()
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
option: 線の種類を一点鎖線に変更する	linestyle = 'dashbot'
散布図をアリスブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
option: 色をブルーバイオレットに設定する	color = 'blueviolet'
文字コードから文字へする	chr(文字コード)
データフレームのある列を抽出する	df['列A']
ヒストグラムの色をターコイズに指定する	plt.hist(データ列, color='turquoise')
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
配列の値を両端キューの先頭に追加する	両端キュー.extendleft(配列)
辞書でカウンタを更新する	aCounter.update(aDict)
淡いピンク色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムの色をダークオーキッドにセットする	plt.hist(データ列, color='darkorchid')
option: ライトコーラル色を使う	color = 'lightcoral'
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
option: グラフの色をオレンジに設定する	color = 'orange'
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
データフレームの選択したカラムの欠損値をメディアンに増やす	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
行列の演算を行う	import numpy as np
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
xをアンダーライン付き化する	f'\033[4m{x}\033[0m'
横棒グラフをオレンジレッド色として描画する	plt.barh(データ列x, データ列y, color='orangered')
ふたつの列からグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
スノー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
option: フォントの色をダークスレートブルーに設定する	color = 'darkslateblue'
数列の変化を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
変数名はクラス	inspect.isclass(識別子)
データシリーズの欠損値をxに指定する	ds.fillna(x)
カラーバーを描画する	plt.colorbar()
データシリーズを100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
文字列をカンマで区切って、列挙する	文字列.split(',')
オブジェクトがモジュールかどうか	inspect.ismodule(オブジェクト)
指定したカラムのメディアン	df['列A'].median()
関数でデータフレームを集計し、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
文字列の変数名を数式に変換する	sympy.Symbol(変数名)
Excelファイルファイルから文字化けしないようにCSVファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
option: オリーブを使う	color = 'olive'
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
文字列中に空白が含まれるか判定する	any(c.isspace() for c in 文字列)
数の３乗	x ** 3
文字列を最後のカンマで分けたときの後半の文字列を使う	文字列.rpartition(',')[-1]
ファイルからJSONを読み込む	with open('file.json') as f:<nl><tab>data = json.load(f)
データフレームを各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
横棒グラフの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
その第二四分位数でデータフレームのNaNを置き換える	df.fillna(df.median())
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
折れ線グラフの色をマゼンタにする	plt.plot(データ列x, データ列y, color='magenta')
空白文字を全て使う	string.whitespace
クリムゾンにヒストグラムの色をセットする	plt.hist(データ列, color='crimson')
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
グレー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データ列の各データ値の出現数を計算する	ds.value_counts()
データフレームを千の位で四捨五入して整数型にする	df.round(-3).astype(int)
赤い右三角マーカーをリストとイテラブルの散布図にプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ミッドナイトブルー色を使用する	color = 'midnightblue'
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
option: 色をライトサーモンに設定する	color = 'lightsalmon'
縦棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
縦棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
リストの要素数だけ繰り返す	range(len(リスト))
データフレームの指定したカラムの要約統計量を求める	df['列A'].describe()
文字列が無限に繰り返すイテラブル	itertools.repeat(文字列)
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
データフレームを２つの列で降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
UNIX時間の列からdatetime64型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
データフレームを各グループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
句読点文字を全部求める	string.punctuation
ある列の値がxより大きく、yより小さいデータを選択する	df[(x < df['列A']) & (df['列A'] < y)]
変数の値を整数で割った余りにする	変数 %= 整数
条件でかつを書きたい	条件式 and 条件式2
データフレームの一部のカラムを万の位で丸める	df[['列A', '列B']].round(-4)
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
表データをグループ化し、分散を算出する	df.groupby('列A').var()
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
イテラブルからランダムに1個選んでリストにする	random.choice(イテラブル)
十六進文字列をバイト列にする	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
赤い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
option: ゴールドにグラフの色を設定する	color = 'gold'
ロイヤルブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
option: 四角印を描画する	marker = 's'
耐火レンガ色でヒストグラムを描画する	plt.hist(データ列, color='firebrick')
ISO8601の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
option: ホワイトスモークを使う	color = 'whitesmoke'
線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
横棒グラフの色を淡い茶色にする	plt.barh(データ列x, データ列y, color='tan')
実行時の標準出力先がターミナルか調べる	sys.stdout.isatty()
ダークオレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
option: 切片を計算しない	fit_intercept = False
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
範囲から配列	np.linspace(最小値, 最大値, 要素数)
文字列の指定した範囲位置の間に部分文字列が含まれるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
整数が整数2よりも小さいか調べる	整数 < 整数2
オブジェクトはリストクラスのインスタンスか調べる	list = int<nl>isinstance(obj, list)
最大長nの両端キューを作成する	collections.deque(maxlen=最大長)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
オブジェクトはタプルかどうか調べる	tuple = int<nl>isinstance(obj, tuple)
クラス分類をブースティングを用いて行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
２つのリストから辞書	dict(zip(リスト, リスト2))
オブジェクトを文字列にする	str(obj)
実数を数で割る	x / y
option: 色をグレーに設定する	color = 'grey'
データフレームの指定した列の四分位点などを確認する	df['列A'].describe()
文字列を最初の区切り文字で二分して、後半を使う	文字列.partition(セパレータ)[-1]
数を実数で割って、切り捨てる	x // y
データフレームの二つの列をドロップし、みる	df.drop(['列A', '列B'], axis=1)
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
ある列の値ごとの個数	df.groupby('列A').count()
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
ダークオレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
作画で用いるフォントを指定する	sns.set(font=フォント名)
year年month月day日hour時を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour)
ゼロ埋めされた配列を作る	np.zeros(要素数)
ある列の値ごとの分散	df.groupby('列A').var()
イテラブルの各値を双方向キューの末尾に追加する	両端キュー.extend(イテラブル)
文字列を最後の部分文字列で二つに分けて、後ろの方を求める	文字列.rpartition(部分文字列)[-1]
データフレームからランダムに選択する	df.sample()
option: 色をホットピンクに設定する	color = 'hotpink'
ファイルパスをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
レモンシフォン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
文字列中にひとつでも空白が含まれるか確認する	any(c.isspace() for c in 文字列)
データフレームの二つの列を並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
文字列中のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
range関数の無限バージョン	itertools.count(start=n, step=step)
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
右三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
option: SJISを用いる	encoding = 'shift_jis'
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
データシリーズの中に文字列と日付データがある	ds.isin([value, value2])
データフレームのカラムの標本標準偏差	df['列A'].std(ddof=1)
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
整数の順列の総数	math.perm(n)
文字列リストを連結し、一つの文字列にする	''.join(文字列)
浮動小数点数の仮数部	math.frexp(x)[0]
列から行列を作る	np.array(iterable)
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
データフレームの行をリセットする	df.reset_index()
option: ミスティローズにグラフの色を設定する	color = 'mistyrose'
棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
配列とリストについて散布図を描画し、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
線グラフをブラック色を用いて描画する	plt.plot(データ列x, データ列y, color='black')
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
双方向キューをリストにする	list(両端キュー)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
平均値でデータシリーズの欠損値を補完する	ds.fillna(ds.mean())
整数を二進数リテラルにする	bin(整数)
データをインデントを指定してJSONにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
折れ線グラフの左三角印を赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ダークターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
横棒プロットをプロットして、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
クラス名が名前付きタプル	issubclass(C, tuple)
配列とリストについて散布図を描画して、マーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
文字列をSJISでバイト列に変換する	文字列.encode(encoding='sjis', errors='ignore')
イテラブルの各要素を両端キューの末尾に追加する	両端キュー.extend(イテラブル)
データフレームの一部のカラムの分散を求める	df[['列A', '列B']].var()
カウンタをタプルで更新する	aCounter.update(aDict)
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームを表示するとき、カラムの最大幅をnにセットする	pd.set_option('max_colwidth', n)
散布図をアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
データシリーズが何年か調べる	ds.dt.year
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
データフレームの指定したカラムの欠損値をメディアンで埋める	df['列A'].fillna(df['列A'].median())
バリーウッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
option: 配列のデータ型を指定する	np.int16 = np.int<nl>dtype = np.int16
文字列を部分文字列で二分割する	文字列.partition(部分文字列)
線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
ヒストグラムを複数並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: サーモン色を使用する	color = 'salmon'
既存の行列を元にして全要素が0の配列	np.zeros_like(aArray)
整数が1、もしくは2かどうか調べる	整数 == 1 or 整数 == 2
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
配列の累積和を計算する	np.cumsum(aArray)
双方向キューの最初から要素を取り出す	両端キュー.popleft()
ファイルをオープンして]、追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
配列のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
日付時刻データにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
リストから要素を取り除く	リスト.remove(要素)
ひとつでも非空白が文字列中に含まれるかどうか調べる	any(not c.isspace() for c in 文字列)
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
文字列が無限に繰り返すイテレータを使う	itertools.repeat(文字列)
文字列の出力を改行なしに行う	print(文字列, end='')
データフレームの選択したカラムの欠損値をxに変更する	df[['列A', '列B']].fillna(x)
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
小文字を大文字にする	文字列.upper()
option: n番目のカラムをインデックスに設定する	index_col = n
折れ線グラフをフォレストグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='forestgreen')
棒グラフを青色を用いて描画する	plt.bar(データ列x, データ列y, color='blue')
option: 大バツ印を用いる	marker = 'X'
逆双曲線正弦	math.asinh(x)
データフレームのあるカラムの未入力値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
縦棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
データシリーズの値をValueMapで一度に置き換える	ds.replace(ValueMap)
表計算ファイルファイルからCSVファイルを文字化けしないように読む	pd.read_csv('file.csv', encoding='shift_jis')
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ブルーバイオレットにヒストグラムの色をセットする	plt.hist(データ列, color='blueviolet')
option: 紺碧を使う	color = 'azure'
データシリーズの中に文字列と日付データがいくつ存在するかカウントする	ds.isin([value, value2]).sum()
ふたつのセットが共通の要素を持たないか調べる	セット.isdisjoint(セット2)
線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
濃い青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
タプルを順にプリントする	print(*タプル)
rgbの菱形マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: カンマを区切りで使う	sep = ','
実数の双曲線正接	math.tanh(x)
配列の尖度を計算する	scipy.stats.kurtosis(配列, bias=False)
文字列の右端から余分な空白を取り除く	文字列.rstrip()
データシリーズの値がNaNか確認する	ds.isna()
半透明の点線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列の指定した位置以降に部分文字列が含まれない	文字列.find(部分文字列, 開始位置) == -1
横棒プロットをプロットする	plt.barh(ラベル列, データ列)
入力からJSONを読み込む	json.load(ファイル入力)
数列のスピアマンの相関係数を計算する	scipy.stats.spearmanr(数列, 数列2)
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ダーク・スラテグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
option: グラフの色をライトスチールブルーにセットする	color = 'lightsteelblue'
縦棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
本日が木曜日か	datetime.datetime.today().weekday() == 3
列のコンビネーションを得る	itertools.combinations(iterable, n)
列を十の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
文字列中の文字を列挙する	list(文字列)
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
オリーブ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
日付データが土曜日かどうか調べる	aDate.weekday() == 5
分類モデルの予測精度を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
文字列中の文字を新しい文字に置き換える	文字列.replace(部分文字列, 置換後の文字列)
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
入力から二つの実数値を読む	A, B = map(float, input().split())
CSVファイルに小数点以下3桁までデータフレームを保存する	df.to_csv('file.csv', float_format='%.3f')
縦棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
棒グラフの色を真紅にする	plt.bar(データ列x, データ列y, color='crimson')
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
日付時刻データが日付時刻データより前か調べる	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
珊瑚色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
キーが辞書に存在するかどうかテストする	キー in 辞書
ヒストグラムの色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
データフレームのあるカラムの中にと文字列が存在するか調べる	df['列A'].isin([value, value2])
指定した列を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
ヒストグラムの色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
横棒グラフをミディアムターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
オブジェクトはジェネレータかテストする	inspect.isgenerator(オブジェクト)
ヒストグラムを青紫色を用いて描画する	plt.hist(データ列, color='violet')
データフレームの記述統計量をまとめて見る	df.describe()
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
イテラブルの各要素を関数でフィルタする	map(func, iterable)
JSONフォーマットを用いて辞書を出力ストリームに保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
イテラブルの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
ボックスチャートをプロットして、平均を追加する	plt.boxplot(データ列, showmeans=True)
xを太字でプリントする	print(f'\033[1m{x}\033[0m')
リストの値を小さい順にソートする	sorted(リスト, reverse=False)
日付データをISO8601書式の文字列にする	aDate.isoformat()
データフレームのカラムのNaNを平均値に変更する	df['列A'].fillna(df['列A'].mean())
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
option: グラフの色をライトグレーにセットする	color = 'lightgray'
オブジェクトがスタックフレーム	inspect.isframe(オブジェクト)
グリッド線をグラフから表示しない	plt.grid(False)
横方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
option: グリーンに色を指定する	color = 'green'
タイムスタンプデータが何年か知る	aDatetime.year
配列とリストの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
プロットにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
両端キューをセットに変換する	set(両端キュー)
カラムの標本標準偏差	df['列A'].std(ddof=1)
ソートしてリストをJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
nが整数と等しい	整数 == 整数2
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図のクロスマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
縦方向に三つのデータフレームを一つにする	pd.concat([df, df2, df3], axis=1)
文字列が全て小文字か調べる	文字列.islower()
リストの最後に要素を加える	リスト.append(要素)
文字列からJSON形式のデータを読み込む	data = json.loads(文字列)
データフレームの末尾100行を取り出す	df.tail(100)
二つの整数の和を計算する	整数 + 整数2
無限にカウントアップする	itertools.count()
折れ線グラフを上三角印として描画する	plt.plot(データ列x, データ列y, marker='^')
文字列は印字できるか	文字列.isprintable()
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
正規分布で乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
白色にする	f'\033[37m{x}\033[0m'
データフレームをソートして新しい行を加える	df.sort_values('キーとなる列').reset_index()
文字列を最後の部分文字列で分けたときの後半の文字列	文字列.rpartition(部分文字列)[-1]
option: 改行コードをUNIXに指定する	newline = '\n'
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームをに箱ひげ図で図示する	sns.boxplot(x='カテゴリ列', y='列', data=df)
実数を万の位で四捨五入する	round(x, -4)
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
指定した列の未入力値をxに設定する	df['列A'].fillna(x)
ロバスト推定を用いて回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: 欠損値を先頭にする	na_position = 'first'
オブジェクトはバイト列クラスか	bytes = int<nl>isinstance(obj, bytes)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームの一部の列を百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
データシリーズの未入力値を後の行の値にする	ds.fillna(method='bfill')
カテゴリ列でグループ化してデータフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: 星マーカーを加える	marker = '*'
option: エンコーディングを文字コードtextに指定する	encoding = text
要素がリストの要素か確認する	要素 in リスト
データフレームの選択したカラムを小数点以下n桁で丸める	n = 2<nl>df[['列A', '列B']].round(n)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
欠損値が存在する行をドロップする	df.dropna(inplace=True)
文字列の順番をランダムにシャッフルする	''.join(random.sample(文字列, len(文字列)))
列名を指定して二つのデータフレームを外部結合する	pd.merge(df, df2, on='列A', how='outer')
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
両端キューの最初を見る	両端キュー[0]
もしコマンド引数が与えられたなら処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
深紅色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
要素が全て初期値の配列を作る	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
行列の最小値を計算する	np.min(aArray)
平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
リスト内の要素が少なくともひとつ真	any(リスト)
変数名をキーとして、辞書	dict(name='kogi', age=6)
option: ダークグレー色を用いる	color = 'darkgray'
列でデータフレームをまとめた表	df.groupby('列A')
双方向キューの末尾に整数を追加する	両端キュー.append(整数)
データフレームをExcelファイルから読み込む	pd.read_excel('file.xlsx')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図に右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
option: 白を使う	color = 'white'
整数を符号付きでバイト列に変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
全要素を０で初期化した符号なし８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.uint8)
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームから指定した三つの列のみ選択する	df[['列A', '列B', '列C']]
線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームの選択したカラムの標本分散を求める	df[['列A', '列B']].var(ddof=0)
長さの制限された両端キューをイテラブルから準備する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
グラフのフォントを日本語に設定する	sns.set(font='IPAexGothic')
散布図に黒い▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
実数の逆余弦	x = 0.33<nl>math.acos(x)
辞書を階層化する	collections.ChainMap(aDict)
アルファベットの小文字を全部見る	string.ascii_lowercase
option: マーカーを三角に変更する	marker = '^'
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームの一部のカラムの歪度	df[['列A', '列B']].kurt()
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
シスル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
xについて数式の積分を計算する	sympy.integrate(数式, [|変数]x)
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
タプルを引数として展開して表示する	print(*タプル)
option: サドルブラウン色を用いる	color = 'saddlebrown'
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
データフレームをインデックスを用いて降順でソートする	df.sort_index(ascending=False)
インディゴ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
散布図をオリベドラブ色を使って描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
option: フクシアにグラフの色を設定する	color = 'fuchsia'
xを黒色でプリントする	print(f'\033[30m{x}\033[0m')
▽マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v')
option: ライムを使用する	color = 'lime'
ヒストグラムをティール色で描画する	plt.hist(データ列, color='teal')
文字列中の全角数字を半角数字にする	文字列.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
最後の区切り文字で文字列を二分割して前半を使う	文字列.rpartition(セパレータ)[0]
option: オレンジ色を用いる	color = 'orange'
散布図の下三角印の太さを変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
JSONフォーマットを用いて文字列をファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
文字が別の文字列にある	文字 in 文字列
辞書からキーとバリューを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
散布図でデータフレームの全カラムを可視化する	sns.pairplot(df)
スタックの最大長を使う	両端キュー.maxlen
option: グラフの色をベージュに設定する	color = 'beige'
ローングリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lawngreen')
option: 丸マーカーを描画する	marker = 'o'
ValueMapでまとめて指定した列を置換する	df['列A'].replace(ValueMap)
散布図のマーカーを菱形にする	plt.scatter(データ列x, データ列y, marker='D')
組合せを求める	math.comb(n, k)
データフレームのパーセンタイルを算出する	df.quantile(パーセント/100)
ベクトルの次元数を求める	aArray.ndim
双方向キューの中に文字列は存在するか確認する	文字列 in 両端キュー
縦棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線グラフの色を青緑にセットする	plt.plot(データ列x, データ列y, color='teal')
配列からランダムにひとつ選んでリストにする	random.choice(配列)
データフレームの指定したカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ある列の値がx以下の行を取り出す	df[df['列A'] <= x]
データフレームの最後	df.tail()
リストと数列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
無限に文字列が続くイテラブルを求める	itertools.repeat(element)
散布図にダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
二つの文字列が同じか	文字列 == 文字列2
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
折れ線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
セットから例外なく文字列を除く	セット.discard(文字列)
ブラックにヒストグラムの色を指定する	plt.hist(データ列, color='black')
線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
文字列が全て空白からなるか調べる	文字列.isspace()
マッピングからカウンタを用意する	collections.Counter(aDict)
新しい勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
カンマ区切りのファイルをn番目のカラムをインデックスとして読む	pd.read_csv('file.csv', index_col=n)
データシリーズのモード	ds.mode()
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
８乗が書きたい	X ** 8
データフレームを二つの列によって昇順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=True)
黄緑色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームが重複しているか調べる	df.duplicated()
option: イエローグリーンにフォントの色を変更する	color = 'yellowgreen'
日付データにn分分足す	aDate + datetime.timedelta(minutes=n)
0から始まるn個の整数リスト	list(range(n))
エラーなくセットから文字列を除く	セット.discard(文字列)
データフレームをソートし、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
アクア色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
オブジェクトは整数クラスか	int = int<nl>isinstance(obj, int)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームをCSVファイルにSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
横棒グラフをフクシア色として描画する	plt.barh(データ列x, データ列y, color='fuchsia')
標準エラー	sys.stderr
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
タイムスタンプ型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
option: ダークグリーン色を用いる	color = 'darkgreen'
日付データが日付データより後ろ	aDate > aDate2
データフレームの最初n行を確認する	df.head(n)
ファイル名がテキストファイルか判定する	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
整数が集合のどれかか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
文字列を最後のカンマで分割し、後半を見る	文字列.rpartition(',')[-1]
データフレームからランダムに抽出する	df.sample()
標準出力先がターミナルかどうか判定する	sys.stdout.isatty()
表データをある列によって降順に破壊的に整列する	df.sort_values(by='列A', ascending=False, inplace=True)
文字列を文字コードエスケープでバイト列に変換する	文字列.encode(encoding='unicode_escape')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
横棒グラフをモカシン色を用いて描画する	plt.barh(データ列x, データ列y, color='moccasin')
ミッドナイトブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームを1000の位で丸める	df.round(-3)
二つの集合の対称差	セット.symmetric_difference(セット2)
文字列∉セット	文字列 not in セット
JSONファイルをパースする	with open('file.json') as f:<nl><tab>data = json.load(f)
データフレームの一部のカラムのNaNをxで埋める	df[['列A', '列B']].fillna(x)
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
折れ線グラフに△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
配列と配列について散布図をプロットしてダイアモンドマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
要素をデックにプッシュする	両端キュー.append(要素)
散布図に青いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: ライトグリーンを用いる	color = 'lightgreen'
線グラフを一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ある列の文字列が正規表現文字列にマッチしないデータを抽出する	df[~df['列A'].str.match(正規表現)]
ブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
xをシンボルにする	x = sympy.Symbol('x')
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
文字列中にひとつもアスキー文字が存在しない	any(not c.isascii() for c in 文字列)
折れ線グラフをインディアンレッド色を使って描画する	plt.plot(データ列x, データ列y, color='indianred')
半透明の実線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
項目名が辞書に存在するかどうか調べる	キー in 辞書
データフレームをソートして新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
配列を平坦化する	aArray.flatten()
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列の指定した範囲に部分文字列が含まれるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
データフレームの一部のカラムの未入力値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データシリーズの要約統計量を求める	ds.describe()
散布図の印を右三角にする	plt.scatter(データ列x, データ列y, marker='>')
option: ライトコーラルにグラフの色をする	color = 'lightcoral'
縦棒グラフをネイビー色を用いて描画する	plt.bar(データ列x, データ列y, color='navy')
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
文字列をコロンで二分して、残りを見る	文字列.partition(':')[-1]
青い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategray')
行列の内積	np.dot(aArray, aArray2)
option: 四角マーカーを加える	marker = 's'
縦棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
option: ディムグレー色を使用する	color = 'dimgray'
辞書をカウンタにする	collections.Counter(aDict)
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
データフレームのカラムの未入力値を最大値に設定する	df['列A'].fillna(df['列A'].max())
実数を浮動小数点数で割った余り	x % y
option: グラフの色をライトゴールドロディイエローに指定する	color = 'lightgoldenrodyellow'
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
小数点数の正弦	math.sin(x)
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
点線としてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
バイナリモードとしてファイルをオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
バギングとしてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
データフレームを欠損値を含めてある列の値で分類する	df.groupby('列A', dropna=False)
要素が両端キューの中に含まれてる	要素 in 両端キュー
ゼロ埋めされた行列	np.zeros(要素数)
文字列リストをsepを区切りとして連結する	sep.join(文字列リスト)
スライドにグラフをする	sns.set(context='talk')
リストをJSON形式としてファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
オブジェクトが属性を持つか確認する	hasattr(obj, プロパティ名)
プロットを画面用に指定する	sns.set(context='notebook')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
グラフを画面に設定する	sns.set(context='notebook')
辞書をインデント幅を指定してJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
n回整数が続くイテラブル	itertools.repeat(整数, n)
表データの上5行	df.head(5)
グラフに鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
エポック秒を使う	import time
文字列を式として評価する	eval(s)
データフレームのあるカラムの中にいくつ文字列があるかカウントする	df['列A'].isin([value]).sum()
まとめてValueMapでデータフレームの値を置換する	df.replace(ValueMap)
データシリーズの空文字をドロップする	ds.replace('', np.nan).dropna()
データフレームの中に文字列が存在するかどうか調べる	df.isin([value])
文字列をセパレータによって二分割する	文字列.partition(セパレータ)
クラスが名前付きタプル	issubclass(C, tuple)
フォレストグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
整数の二進数表現	bin(整数)
要素がセットのメンバー	要素 in セット
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: グラフの色をスレートブルーに変更する	color = 'slateblue'
option: デピンク色を使う	color = 'deeppink'
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
黒いグリッド線を引く	plt.grid(color='k')
文字列の右側から文字を取り除く	文字列.rstrip(文字)
option: サーモンにフォントの色を変更する	color = 'salmon'
数列とリストについての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
2つの列によってデータフレームをソートする	df.sort_values(by=['列A', '列B'])
指定した列で集計し、合計を算出する	df.groupby('列A').sum()
データフレーム全体を行によって並べる	df.sort_index()
整数の八進数表現を使う	oct(整数)
option: グラフの色をアンティークホワイトに変更する	color = 'antiquewhite'
データフレームの値を正規表現patternでまとめてreplに置換する	df.replace(pattern, repl, regex=True)
配列をn個に分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
リストを文字列として、カンマで連結する	','.join(map(str, リスト))
デック	両端キュー = collections.deque()
データフレームをCSVファイルにインデックスを付けず出力する	df.to_csv('file.csv', index=None)
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
rgbの▼マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: フォントの色をライトグリーンに指定する	color = 'lightgreen'
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
NaNを用いる	math.nan
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
昇順に指定した列によってデータフレームをソートする	df.sort_values(by='列A', ascending=True)
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
３つの数値を順に出力する	print(数値, 数値, 数値)
option: シエナを用いる	color = 'sienna'
点線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列の長さ	len(文字列)
未入力値が存在する行をドロップし、みる	df.dropna()
折れ線グラフの色を小麦色に変更する	plt.plot(データ列x, データ列y, color='wheat')
線グラフの色をゴールドにする	plt.plot(データ列x, データ列y, color='gold')
データフレームをグループ化し、各個数を算出する	df.groupby('列A').count()
実数とyの斜辺を求める	math.hypot(x, y)
実数のアークタンジェント	math.atan(x)
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データフレームの指定したカラムの中にいくつ未入力値があるか数える	df['列A'].isna().sum()
データフレームの指定したカラムのNaNをその最小値で埋める	df['列A'].fillna(df['列A'].min())
正規化されたヒストグラムをプロットする	plt.hist(データ列, density=True)
実数の双曲線余弦の逆数	math.acosh(x)
文字列から文字を全て除く	文字列.replace(文字, '')
マップとして文字列を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
カウンタのキー数	len(aCounter)
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
ローングリーン色でヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
データシリーズの曜日数	ds.dt.dayofweek
項目名がマッピング上で未定義か調べる	キー not in 辞書
印字可能な文字を全て使う	string.printable
シアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
リストを並べ変える	sorted(リスト)
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
文字列の中の複数行対応として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
シスルにヒストグラムの色をセットする	plt.hist(データ列, color='thistle')
コーンフラワーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='cornflowerblue')
インクリメンタル演算子を書きたい	X += 1
クラス分類をサポートベクターマシンを用いてする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
文字列中にアルファベットが含まれないかどうか確認する	any(not c.isalpha() for c in 文字列)
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
日付時刻データを数値にする	aDatetime.timestamp()
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
整数を十六進数文字列にする	hex(整数)[2:]
ヒストグラムのラインスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
一点鎖線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
整数2がn以上、かつ、n3以下か調べる	整数 <= 整数2 and 整数2 <= n3
散布図をレモンシフォン色として描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ダークバイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='darkviolet')
黒い▼マーカーを配列とイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
列名を指定してデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
一点鎖線を用いてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
実数が負の数か調べる	x < 0
1からnまでの整数リスト	list(range(1, n+1))
データフレームをグループ化し、ある列に対し最大値を求める	df.groupby('列A')['列B'].max()
リストとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
二つの文字列を順に表示する	print(文字列, 文字列)
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
文字列を最後のカンマを用いて二分する	文字列.rpartition(',')
要素を両端キューにエンキューする	両端キュー.append(要素)
整数の二進表現	bin(整数)
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
配列とリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの列を各カテゴリごとに色付けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
縦棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームの選択した列の相関行列をピアソンで求める	df[['列A', '列B']].corr(method='pearson')
文字列は全て数値か判定する	文字列.isnumeric()
折れ線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
オブジェクトにプロパティが存在するかどうか	hasattr(obj, プロパティ名)
xとyをタブで区切って出力する	print(x, y, sep='\t')
改行せず2つの数値を表示する	print(数値, 数値, end='')
青紫色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データシリーズの中にある文字列の数を数える	ds.isin([value]).sum()
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
データフレームをカンマ区切りのファイルから読み込む	pd.read_csv('file.csv', sep=',')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
タプルの平均	sum(タプル)/len(タプル)
データフレームの一部のカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
縦棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
文字列をカンマで二分して、前半を使う	文字列.partition(',')[0]
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
option: ラベンダーを用いる	color = 'lavender'
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
リストの要素を小さい順にソートする	sorted(リスト, reverse=True)
リストを境界値としてデータフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
折れ線グラフの色をコーンズシルクにセットする	plt.plot(データ列x, データ列y, color='cornsilk')
文字列の示す文字コードでファイルパスをオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
セットから文字列を取り除く	セット.remove(文字列)
option: ゲインズボロにフォントの色を設定する	color = 'gainsboro'
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
最後の部分文字列で文字列を二分して、前半を使う	文字列.rpartition(部分文字列)[0]
実数を切り下げて整数に変換する	math.floor(x)
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
トマトにヒストグラムの色を設定する	plt.hist(データ列, color='tomato')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
主成分分析を用いて文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
整数が整数2未満、またはn3以上	整数 < 整数2 or 整数 >= n3
昇順にタプルの値を並べる	sorted(タプル, reverse=True)
配列のn次モーメントを計算する	scipy.stats.moment(配列, moment=n)
データフレームの指定したカラムの欠損値をその最頻値で置換する	df['列A'].fillna(df['列A'].mode().iloc[0])
指定したカラムのカテゴリで集計し各個数を求める	df.groupby('列A').count()
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
文字列中にひとつでも非小文字があるか調べる	any(not c.islower() for c in 文字列)
データフレームを並べ直して上位n件を取り出す	df.sort_values('キーとなる列').head(n)
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
条件式で否定を書きたい	not 条件式
実数の余弦の逆数を求める	x = 0.33<nl>math.acos(x)
ピーチパフ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
グリーンイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
指定した列で集計しそれぞれの平均値を求める	df.groupby('列A').mean()
データフレームの先頭10行を抽出する	df.head(10)
データフレームの選択したカラムにおいてどの値が最も出現するか見る	df[['列A', '列B']].mode()
データフレームの尖度	df.skew()
線グラフを実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
ひとつも英数字が文字列中にないかどうか調べる	any(not c.isalnum() for c in 文字列)
最大値でデータシリーズのNaNを補完する	ds.fillna(ds.max())
option: フォントの色をオーキッドにセットする	color = 'orchid'
ファイルから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
一方に含まれ他方に含まれない集合	セット.difference(セット2)
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
自然数のGCD	math.gcd(n, n2)
散布図をペルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='peru')
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
Pythonインタプリタの実行ファイルの絶対パスを調べる	sys.executable
文字列中に文字がいくつあるか調べる	文字列.count(文字)
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
データフレームをインデックスを付けず出力する	df.to_csv('file.csv', index=None)
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームをある列のカテゴリとしてグループ分けして、各グループごとの件数を知る	df.groupby('列A').size()
折れ線グラフの色をサドルブラウンにセットする	plt.plot(データ列x, データ列y, color='saddlebrown')
ヒストグラムをレベッカパープル色を用いて描画する	plt.hist(データ列, color='rebeccapurple')
四分位数でリストをビン分割する	pd.qcut(aList, 4)
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
整数を二進文字列に変換する	bin(整数)[2:]
ファイル名がCSVファイルか調べる	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
実線でヒストグラムをプロットする	plt.hist(データ列, linestyle='solid')
データフレームから型リストで指定したデータ型の列を取り出す	df.select_dtypes(include=typeList)
配列とリストの散布図を描き、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストとリストの散布図を描画して左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
XにYを足した値が求めたい	X + Y
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
要素はリストの要素でない	要素 not in リスト
データフレームの一部のカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
ラベンダーブラッシュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
平均値でデータフレームのカラムのNaNを補う	df['列A'].fillna(df['列A'].mean())
カウンタから最頻出の項目の件数	aCounter.most_common()[1]
条件ででないを書きたい	not 条件式
配列とリストについての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
文字列を最後のコロンで分けたときの残りの文字列	文字列.rpartition(':')[-1]
option: 文字列の示すエンコーディングを使う	encoding = s
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
option: ▼マーカーを使用する	marker = 'v'
データフレームを10000の位で丸める	df.round(-4)
淡いピンク色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列の中でパターンにマッチした文字列をリストに変換する	re.findall(pattern, s)
文字列の両端から指定された文字を取り除く	文字列.strip(文字)
折れ線グラフの色をオリベドラブにする	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
日付データにn時間を加える	aDate + datetime.timedelta(hours=n)
リストから重複なく、n要素ランダムに選ぶ	random.sample(リスト, k=n)
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
タイムスタンプデータは日付時刻データと同時	aDatetime == aDatetime2
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
文字列中の部分文字列の出現	文字列.count(部分文字列)
データフレームの重複した行を数える	df.duplicated().sum()
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
文字列中のある文字をカウントする	文字列.count(文字)
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
option: 色をハニーデューに設定する	color = 'honeydew'
マッピングをカウンタに変換する	collections.Counter(aDict)
option: グラフの色をスラグレーに設定する	color = 'slategray'
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
モデルを当てはめる	model.fit(説明変数, 目的変数)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
データ列の一意な要素数を調べる	ds.nunique()
ラインを青い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: 大バツ印を使用する	marker = 'X'
線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
文字列をカンマで二分割して、前の方を使う	文字列.partition(',')[0]
文字列はPythonのキーワードか調べる	keyword.iskeyword(文字列)
リストの要素が最初に見つかるインデックスを探す	リスト.index(要素)
エクセルファイルファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
複数の文字列をプリントする	print(文字列, 文字列, 文字列)
現在の時間数	datetime.date.today().hour
データフレームのカラムの平均値	df['列A'].mean()
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列の右端から指定した文字を除去する	文字列.rstrip(文字)
データフレームの一部の列の標準偏差を求める	df[['列A', '列B']].std()
方程式として数式の変数の解を計算する	sympy.solve(数式, y)
赤い左三角マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレーム全体をインデックスによって小さい順に整列する	df.sort_index(ascending=True)
整数の2進文字列	bin(整数)[2:]
パレットトルコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームのデータ型一覧	df.dtypes
イテラブル自身の長さnの順列	itertools.permutations(iterable, n)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
オブジェクトのフィールドの値を値に設定する	setattr(obj, プロパティ名, 値)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
option: 箱ひげ図に平均を追記する	showmeans = False
配列のユニークな要素を使う	np.unique(aArray)
データフレームのある列の欠損値を直前の値に指定する	df['列A'].fillna(method='ffill')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
浮動小数点数以下の最大の整数を求める	math.floor(x)
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
データシリーズの基本統計量	ds.describe()
プロット中のフォントをセットする	sns.set(font=フォント名)
整数を両端キューにエンキューする	両端キュー.append(整数)
文字が漢字か確認する	('\u4E00' <= 文字 <= '\u9FD0')
文字列の先頭から不要な空白を取り除く	文字列.lstrip()
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
パールゴールデンロッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
両端キュー中の整数のインデックスを使う	両端キュー.index(整数)
整数を八進数リテラルに変換する	oct(整数)
デピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
双方向キューをリストから作成する	collections.deque(リスト)
外れ値を除いた配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
データ列の推移を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, N)
現在の時刻を使う	datetime.date.today().hour
スクリプトの名前を知る	sys.argv[0]
三数の最小値	min(x, y, z)
要素はセットに含まれないか調べる	要素 not in セット
データフレームの指定したカラムの中にがあるか調べる	df['列A'].isin([value])
データフレームの指定したカラムがどの程度正規分布から尖っているか見る	df['列A'].skew()
インデントを指定してリストをJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
散布図の印の線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
データシリーズの値は欠損値か	ds.isna()
ミディアムターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームのあるカラムの不偏標準偏差	df['列A'].std()
表データを使う	import pandas as pd
データフレームのあるカラムの曜日名	df['列A'].dt.weekday_name
ファイル全体をリストとして読む	f.readlines()
黒いバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
option: 色をライトグレーに指定する	color = 'lightgrey'
プロットの描画で淡くカラーパレットを用いる	sns.set(pallete='muted')
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
option: フォントの色を貝殻に設定する	color = 'seashell'
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
数式を変数について偏微分する	sympy.diff(数式, 変数)
文字コードエスケープで文字列をバイト列に変換する	文字列.encode(encoding='unicode_escape')
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
rgbの丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
短い説明の位置を(x,y)に指定する	plt.legend(loc=(x, y))
option: グラフの色をオリーブに指定する	color = 'olive'
デフォルトでグラフをイイ感じに設定する	sns.set()
option: グラフの色をマゼンタに設定する	color = 'magenta'
デフォルトを適用する	sns.set()
全要素を０で初期化した論理値型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
JSON形式のファイル入力を辞書に変換する	json.load(ファイル入力)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
データフレームのカラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
範囲指定をした配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
スーパーセットか調べる	セット.issuperset(セット2)
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
データフレームの選択したカラムの平均など	df[['列A', '列B']].describe()
predicateFuncを適用したとき真とならないイテラブルの要素を得る	itertools.dropwhile(predicateFunc, iterable)
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
折れ線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
ブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ブラック色としてヒストグラムを描画する	plt.hist(データ列, color='black')
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
オーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
カラムを選んで重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムの色をダークターコイズにセットする	plt.hist(データ列, color='darkturquoise')
オブジェクトはあるクラスか	isinstance(obj, クラス)
カラム名をリストで置き換える	df.columns = columns
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
文字を文字コードに変換する	ord(文字)
option: グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
ダークレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームをある列をキーにしてソートしてNaNを先頭にする	df.sort_values(by='列A', na_position='first')
データフレームの欠損値を直後の値で補完する	df.fillna(method='bfill')
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
データフレームの欠損値を平均に設定する	df.fillna(df.mean())
文字列の両端から指定した文字を除去する	文字列.strip(文字)
文字列の中のASCII限定としてパターンによる全マッチを見る	re.findall(pattern, s, flags=re.ASCI)
option: フローラルホワイトにグラフの色を指定する	color = 'floralwhite'
データフレームの中に文字列と文字列が含まれるかどうか	df.isin([value, value2])
データフレーム全体をインデックスで並べ直す	df.sort_index()
実数の複素数を求める	complex(x)
下限指定をしたカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
縦軸だけ目盛線	plt.grid(axis='y')
折れ線グラフの左三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
小数点数が無限大かどうか確認する	math.isinf(x)
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
文字列中に英数字が存在しない	any(not c.isalnum() for c in 文字列)
二乗を書きたい	X ** 2
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
文字列中にひとつでも小文字が含まれる	any(c.islower() for c in 文字列)
文字列の左側からタブを取り除く	文字列.lstrip('\t')
option: グラフの色をホワイトに設定する	color = 'white'
指定したカラムを10の位で丸める	df['列A'].round(-1)
データフレームのあるカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
データフレームの一部のカラムの未入力値を最大値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データシリーズが何秒か見る	ds.dt.second
option: グラフの色をグリーンイエローに変更する	color = 'greenyellow'
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
縦棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
長さの制限された双方向キューを配列から作る	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
折れ線グラフに星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
逆行列	np.linalg.inv(aArray)
実数を実数で割る	x / y
ランダムな整数のリストがほしい	random.sample(range(100), 10)
データシリーズの中にいくつ文字列があるか調べる	ds.isin([value]).sum()
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
ロバストな線形回帰モデルを作成する	model = sklearn.linear_model.HuberRegressor()
リストを三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
要素を両端キューの右側に付け加える	両端キュー.append(要素)
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
リストを折れ線グラフで作図する	plt.plot(データ列x, データ列y)
option: アクアマリン色を使う	color = 'aquamarine'
データシリーズの上位25％	ds.quantile(0.25)
配列の最大値	np.max(aArray)
リストの全ての要素をクリアにする	リスト.clear()
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
三整数の最小公倍数	math.lcm(n, n2, n3)
マルーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
既存の配列を元に全要素が1の行列	np.ones_like(aArray)
データフレームの指定したカラムのSkewnessを求める	df['列A'].skew()
エクセルファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
プロットの使途を画面にする	sns.set(context='notebook')
n行をランダムにデータフレームから選ぶ	df.sample(n)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
コマンドの第一引数を調べる	sys.argv[1]
セットが空集合かどうか判定する	len(セット) == 0
option: グラフの色をラベンダーに指定する	color = 'lavender'
タイムスタンプをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
リストから重複なく、n要素ランダムに選んでリストにする	random.sample(リスト, k=n)
範囲指定してデータフレームの行を抽出する	df[start:end]
スタックの右に整数を追加する	両端キュー.append(整数)
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
アルファベットが文字列中にないか	any(not c.isalpha() for c in 文字列)
両端キューのn番目に要素を挿入する	両端キュー.insert(n, 要素)
△印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
ASCII限定として正規表現を前もってコンパイルする	re.compile(pattern, flag=re.ASCI)
ヒストグラムをライトコーラル色を使って描画する	plt.hist(データ列, color='lightcoral')
赤い▽マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
ピアソンの相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
わり算の切り上げを書きたい	(X + Y - 1) // Y
キューの先頭に整数を追加する	両端キュー.appendleft(整数)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
識別子がコルーチンかどうか調べる	inspect.iscoroutine(識別子)
データ列を度数分布図にする	plt.hist(データ列)
option: サンディーブラウン色を使う	color = 'sandybrown'
整数の3乗を求める	整数 ** 3
線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
ある列のカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
本日の日付時刻	datetime.datetime.now()
マルーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
データフレームから型リストで指定したデータ型の列を抽出する	df.select_dtypes(include=typeList)
オーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='orchid')
Xの3乗を求めたい	X ** 3
option: マーカーを四角に変える	marker = 's'
プロットの中の縦軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
横棒グラフの色を黄緑にする	plt.barh(データ列x, データ列y, color='chartreuse')
二つの文字列は大文字小文字を無視して同じか	文字列.casefold() == 文字列2.casefold()
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
カンマで文字列を二分し、、後ろの方を見る	文字列.partition(',')[-1]
option: グリーンイエロー色を使う	color = 'greenyellow'
ビン数nで列をビン分割する	pd.cut(ds, n)
リストから要素を除く	リスト.remove(要素)
散布図の大バツ印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームの欠損値を中央値に指定する	df.fillna(df.median())
イコールを書きたい	X == Y
文字列を最後の区切り記号で二分し、前半を使う	文字列.rpartition(セパレータ)[0]
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
CSVファイルのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
折れ線グラフを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
n個にデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
要素がリストの要素でないか調べる	要素 not in リスト
プラットホームはLinuxか	sys.platform.startswith('linux')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
スピアマン相関係数でデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='spearman')
option: グラフの色を青紫にする	color = 'violet'
次の繰り返しへ進みたい	if 条件式:<nl><tab>continue
文字列を空白で分割して、文字列リストにする	文字列.split()
部分文字列を新しい文字列へ置き換える	文字列.replace(部分文字列, 置換後の文字列)
クラス分類をブースティングとして行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ピーチパフ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
整数を双方向キューにプッシュする	両端キュー.append(整数)
データフレームの列間の相関を計算する	df.corr()
データフレームの中のカラムをn個に分割する	pd.cut(df[col], n)
グラフで使うタイトルをする	plt.title('グラフの名称')
ファイルを開き]読み込みストリームを求める	'r' = 'a'<nl>open(filepath, mode='r')
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
データフレームの一部の列の尖度を計算する	df[['列A', '列B']].skew()
カテゴリ列で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
数のn乗	x ** n
option: ミディアムターコイズを用いる	color = 'mediumturquoise'
その中央値でデータフレームの欠損値を補う	df.fillna(df.median())
データフレームの選択した列の標本分散を求める	df[['列A', '列B']].var(ddof=0)
折れ線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列がリストに含まれるか調べる	文字列 in リスト
データシリーズの統計量を全部調べる	ds.describe()
八乗を書きたい	X ** 8
折れ線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
△マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
双方向キューのn番目に文字列を差し込む	両端キュー.insert(n, 文字列)
リストの最後からn番目以前の要素を得る	リスト[:-n]
ハッシュ値を求める	hash(x)
折れ線グラフの色をシーグリーンにする	plt.plot(データ列x, データ列y, color='seagreen')
ダークゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
両端キューをリストに変換する	list(両端キュー)
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームの選択したカラムの中にいくつ日付データが含まれるか求める	df[['列A', '列B']].isin([value]).sum()
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
オブジェクトが関数	callable(obj)
線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの菱形マーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
条件を満たす間処理をループさせたい	while 条件式:<nl><tab>print('繰り返し')  # 直して
実数のサインの逆数	math.asin(x)
option: カーキを使う	color = 'khaki'
データシリーズを千の位で丸めて、整数型にする	ds.round(-3).astype(int)
ダークゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
カーネル密度推定プロット描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
xの印字可能な文字列	ascii(x)
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
データフレームからn行、サンプリングする	df.sample(n)
配列を更新不能なセットに変換する	frozenset(配列)
マルーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
データフレームの分位数	df.quantile(パーセント/100)
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
セットから項を除去する	セット.remove(要素)
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
一度にデータフレームの指定したカラムの値をreplに正規表現patternで置き換える	df['列A'].replace(pattern, repl, regex=True)
多次元データをt分布型確率的近傍埋め込み法で文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
データフレームの選択したカラムの欠損値をxで埋める	df[['列A', '列B']].fillna(x)
多次元データを特異値分解として文字列次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
全ての数字	string.digits
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データ列を全て日付データに変換する	pd.to_datetime(ds)
セットにイテラブルを追加更新する	セット.update(リスト)
整数が負の数かどうか調べる	整数 < 0
要素がタプルの要素	要素 in タプル
赤い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
横棒グラフをライトシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcyan')
option: 文字コードを文字列の示すエンコーディングに設定する	encoding = s
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
option: グラフの色をパープルに設定する	color = 'purple'
データ列と配列の散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームを二つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
データフレームの選択したカラムの文字列をNaNにする	df[['列A', '列B']].replace(値, np.nan)
ディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ミスティローズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
格子をプロットに加える	plt.grid(True)
ある列の文字列が部分文字列で始まらない行を選択する	df[~ df['列A'].str.startswith(部分文字列)]
ファイルから1文字、読む	f.read(1)
配列の折れ線グラフを描いてカラーコードを用いて色を指定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの中にある文字列と日付データの個数を数える	df.isin([value, value2]).sum()
整数が整数2未満もしくはn3以上か確認する	整数 < 整数2 or 整数 >= n3
作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
文字列がセットに含まれないかどうか	文字列 not in セット
散布図の菱形マーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ある列の文字列が部分文字列で始まらない行を取り出す	df[~ df['列A'].str.startswith(部分文字列)]
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームの選択したカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
辞書のコピーを作る	辞書.copy()
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
実数のサイン	math.sin(x)
リストとデータ列の散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをコーラル色として描画する	plt.hist(データ列, color='coral')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
青い一点鎖線を用いてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームの選択した列の欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
データフレームの行一覧	df.index
EUCを用いて既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
0からN未満までのベクトルを作る	np.arange(N)
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
整数は配列のどれかかどうか	aArray = [0, 1, 2]<nl>整数 in aArray
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
yが無限大に近づく場合の数式の極限値を算出する	sympy.limit(数式, y, oo)
散布図をrgbのバツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データ列のUNIX秒を日付データにする	pd.to_datetime(ds, unit='s', utc=True)
ある列毎の平均値を求める	df.groupby('列A').mean()
ダークスラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategray')
配列の行ごとの最小値を求める	np.min(aArray, axis=1)
エポック秒の列からPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
文字列の両端からタブを消す	文字列.strip('\t')
option: Excelファイルシートの名前を設定する	sheet_name = ['A', 'B']
回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
文字列中にひとつも大文字が含まれないか確認する	any(not c.isupper() for c in 文字列)
データフレームをExcelファイルで保存する	df.to_excel('file.xlsx')
データフレームの指定した列の中に文字列と日付データがいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
ライムグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
リストとデータ列についての散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
オブジェクトは論理値	bool = int<nl>isinstance(obj, bool)
ふたつの集合の対称差集合を計算する	セット.symmetric_difference(セット2)
サンディーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
横棒グラフをミスティローズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mistyrose')
整数を千の位で丸める	round(x, -3)
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
t分布型確率的近傍埋め込み法として数値次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int)
配列の平均の標準誤差を算出する	scipy.stats.sem(配列)
辞書の値に要素が含まれていない	element not in 辞書.values()
本日の日付時刻を算出する	datetime.datetime.now()
ファイルパスを追加モードを使ってオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
データフレームのカラムのトリム平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
XにYを足した結果が求めたい	X + Y
数列のピアソンの相関係数	scipy.stats.pearsonr(数列, 数列2)
多次元尺度構成法として多次元データを文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
タプルのn番目以降の要素を得る	タプル[n:]
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
文字列をバイト配列に変換する	bytearray(s)
カテゴリ別でグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
欠損値がある行を除く	df.dropna(inplace=True)
データ列のエポック秒をdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
option: フォントの色をイエローグリーンに変更する	color = 'yellowgreen'
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
リストを文字列として、指定された文字列で連結する	文字列.join(map(str, リスト))
replに全部データフレームを正規表現patternで置き換える	df.replace(pattern, repl, regex=True)
赤い一点鎖線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: パープルにグラフの色をセットする	color = 'purple'
識別子がトレースバックか調べる	inspect.istraceback(識別子)
テンプレートを辞書で文字列整形する	書式.format_map(辞書)
option: グラフの色をピンクに設定する	color = 'pink'
文字列がリストに含まれるか	文字列 in リスト
option: オレンジ色を使用する	color = 'orange'
option: グラフの色をグレーに設定する	color = 'grey'
オブジェクトが関数か調べる	callable(obj)
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
散布図の△マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: シアンにグラフの色をする	color = 'cyan'
option: 赤色を使う	color = 'red'
option: ディープスカイブルーを用いる	color = 'deepskyblue'
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ペルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
タプルを展開して表示する	print(*タプル)
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
整数がリストのどれかかどうか調べる	aList = [0, 1, 2]<nl>整数 in aList
option: 印を左三角に変える	marker = '<'
縦棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
二つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
文字をASCIIコードに変換する	ord(文字)
浮動小数点数をn乗する	x ** n
文字列の前半から部分文字列の位置を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
表のインデックスがnの行を抽出する	df.loc[n]
整数の八進数リテラル	oct(整数)
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
分類モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ある列のカテゴリ毎の分散を求める	df.groupby('列A').var()
カラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
サンディーブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
文字列を最初の区切り記号で二分して、後半を使う	文字列.partition(セパレータ)[-1]
リストのn番目以降の要素を得る	リスト[n:]
変数について偏微分を行う	sympy.diff(数式, 変数)
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
XをYで割った値を求めたい	X / Y
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
文字列がセットに含まれないか調べる	文字列 not in セット
eの実数乗を求める	math.exp(x)
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
整数がnで割り切れるか	整数 % n == 0
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
JSON形式の入力を辞書にする	json.load(ファイル入力)
青色で表示できる文字列に変換する	f'\033[34m{x}\033[0m'
青い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームのある列の値がx以下の行を選ぶ	df[df['列A'] <= x]
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
正規表現に文字列がマッチさせる	re.match(pattern, s)
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
rgbの大バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
ミディアムバイオレットレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
線グラフをネイビー色を使って描画する	plt.plot(データ列x, データ列y, color='navy')
縦棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
棒グラフを黄色色を使って描画する	plt.bar(データ列x, データ列y, color='yellow')
引き算を書きたい	X - Y
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
縦棒グラフをミッドナイトブルー色を使って描画する	plt.bar(データ列x, データ列y, color='midnightblue')
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
ゼロ埋めされた行列を作成する	np.zeros(行数, 列数)
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
データ列を円プロットにする	plt.pie(データ列, startangle=90)
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
横棒グラフをビスク色として描画する	plt.barh(データ列x, データ列y, color='bisque')
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
線形回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
日付時刻データを数値に変換する	aDatetime.timestamp()
option: 青色を使う	color = 'blue'
珊瑚にヒストグラムの色をセットする	plt.hist(データ列, color='coral')
シャルトリューズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
ソートしてリストをJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
1行から二つの整数を読む	A, B = map(int, input().split())
option: サーモンを使用する	color = 'salmon'
TSVファイルから文字エンコーディングを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
配列のイミュータブルな集合	frozenset(配列)
オブジェクトは辞書クラスのインスタンスか	dict = int<nl>isinstance(obj, dict)
option: ディムグレー色を使う	color = 'dimgray'
横棒グラフをスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='steelblue')
散布図に黒いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
上位集合かどうか	セット.issuperset(セット2)
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
option: ライトグリーンにグラフの色を指定する	color = 'lightgreen'
二つ並べてリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
3変数の最小値	min(x, y, z)
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
セットが上位集合か	セット.issuperset(セット2)
データフレームのカラムが正規分布からどれだけ尖っているか見る	df['列A'].skew()
文字列中にひとつでもアルファベットが存在するか	any(c.isalpha() for c in 文字列)
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
縦棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をパールゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームのあるカラムの不偏分散	df['列A'].var(ddof=1)
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
データフレームの一部のカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
変数が無限大に近づく時の数式の極限値を求める	sympy.limit(数式, 変数, oo)
データフレームから	df.select_dtypes(型).columns
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
ゼロ埋めされたベクトルを作る	np.zeros(要素数)
option: ミディアムパープルにグラフの色をする	color = 'mediumpurple'
ライトグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightgray')
ホットピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
option: 線種を点線に指定する	linestyle = 'dotted'
リストとリストについて散布図を描画し、、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
一点鎖線でリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストと配列についての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
散布図に赤い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
文字列の前半から部分文字列を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
データフレームの選択したカラムを十の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
大きい方が欲しい	max(X, Y)
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
データ列を四分位数で分割する	pd.qcut(ds, 4)
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
実数の逆双曲線余弦を算出する	math.acosh(x)
リストを2つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データシリーズのパーセンタイルを求める	ds.quantile(パーセント/100)
データシリーズのNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
キューから整数を取り除く	両端キュー.remove(整数)
空の回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
整数を２乗する	x ** 2
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
双方向キューの先頭に配列の各要素を追加する	両端キュー.extendleft(配列)
データフレームの下5行を選択する	df.tail(5)
指定された列のカテゴリで集計し、個数を求める	df.groupby('列A').count()
みっつの条件のうち何か成り立つ	条件 or 条件2 or 条件3
エクセルからシート名を指定してデータフレームを読む	pd.read_excel('file.xlsx', sheet_name=シート名)
eの乗数	math.exp(x)
ダークマゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームのある列をインデックスに指定する	df.set_index('列A')
折れ線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
ある列の値毎の標準偏差を求める	df.groupby('列A').std()
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
浮動小数点数の逆双曲線余弦	math.acosh(x)
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
リストとリストについての散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストとリストの散布図を描いて、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
データフレームをグループ化し、ある列に対し個数を求める	df.groupby('列A')['列B'].count()
数列のイミュータブルな集合を見る	frozenset(数列)
改行を用いて文字列を区切る	文字列.splitlines()
ダークターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
リストとリストについて散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
エラーなく辞書からキーの値	辞書.get(キー, 見つからない場合の値)
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
グラフを論文用にする	sns.set(context='paper')
空の辞書を準備する	辞書 = {}
散布図の大バツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategray')
両端キューの要素を左にローテーションする	両端キュー.rotate(-1)
ヒストグラムをアイボリー色を用いて描画する	plt.hist(データ列, color='ivory')
option: チョコレートにフォントの色をセットする	color = 'chocolate'
最初のコマンドライン	sys.argv[1]
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: ナバホホワイトにフォントの色を変更する	color = 'navajowhite'
データシリーズの文字列を欠損値にする	ds.replace(値, np.nan)
数式のxに別の数式を代入する	数式.subs([|変数]x, 数式2)
ビスク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
データフレームのカラムをグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ふたつのセットは共通の要素を持たない	セット.isdisjoint(セット2)
日本語が文字列中に含まれるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
散布図を黒い下三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
パールゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
配列が正規分布か仮説検定する	scipy.stats.shapiro(配列)
横棒プロットをプロットし、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
浮動小数点数のn乗	x ** n
最後のカンマで文字列を二分する	文字列.rpartition(',')
nとkのコンビネーション	math.comb(n, k)
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
リストの末尾を取り除く	リスト[:-1]
リストとリストについての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図のポイント印の大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
横棒グラフをシャルトリューズ色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
色付きの実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
配列の差を求める	aArray - aArray2
辞書をJSON形式の文字列に変換する	json.dumps(辞書, ensure_ascii=False)
データフレームの指定したカラムの不偏分散	df['列A'].var(ddof=1)
データフレームの列の名前の一覧を使う	df.columns
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
横棒グラフをターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='turquoise')
数列を	''.join(map(str, 数列))
最適な位置に凡例を表示する	plt.legend(loc='best')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
シスル色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの列からユニークな値を抽出しリスト化する	df[col].unique().tolist()
プロット中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
またはを書きたい	条件式 or 条件式2
文字列モジュールをインポートする	import string
xをマゼンタでプリントできる文字列に変換する	f'\033[35m{x}\033[0m'
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
year年month月day日hour時minute分のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
緑色でxを出力する	print(f'\033[32m{x}\033[0m')
ある列の値がxに等しく、かつ別の列の値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
マゼンタにする	f'\033[35m{x}\033[0m'
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
要素が全て1の配列を作る	np.ones(要素数, dtype=np.int)
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
変数名を項目名として、辞書を作る	dict(name='kogi', age=6)
タイムスタンプデータからn日を減算する	aDatetime - datetime.timedelta(days=n)
辞書に別のマップ2の項目を加えて、更新する	辞書.update(辞書2)
数列を２つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
option: 分類木の深さを制限する	maxdepth = n
要素が辞書の値として含まれているか	element in 辞書.values()
黒い左三角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
辞書から項目名で指定された項目を取り除く	辞書.pop(キー)
option: グラフの色をサドルブラウンに変更する	color = 'saddlebrown'
横棒グラフをミディアムスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームの最初	df.head()
option: シャルトリューズにグラフの色を設定する	color = 'chartreuse'
文字列の中の正規表現による全マッチを求める	re.findall(pattern, s)
縦棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
数式の変数xに別の数式を代入する	数式.subs([|変数]x, 数式2)
データフレームの選択したカラムの欠損値を中央値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: ゴーストホワイト色を使う	color = 'ghostwhite'
option: グラフの種類を点線に設定する	linestyle = 'dotted'
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
本日が何曜日か知る	datetime.datetime.today().weekday()
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
0から始まる無限なイテラブル	itertools.count()
黒い四角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
長さの制限された両端キューをリストから用意する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
データフレームをある列の値によってグループ化する	df.groupby('列A')
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
文字列を最後の区切り記号で二分し、、残りを使う	文字列.rpartition(セパレータ)[-1]
ファイルパスを文字コードtextとして書き込みできるように開く]	open(filepath, mode='w', encoding=text)
指定の列に重複があれば、取り除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
リストとイテラブルの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列を右寄せにする	文字列.rjust(文字列幅)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
ダークグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkgray')
リストの末尾からn番目以前の部分を得る	リスト[:-n]
折れ線グラフの三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
option: ディムグレーにフォントの色を変更する	color = 'dimgray'
option: パープルを使用する	color = 'purple'
カラムが正規分布からどの程度、歪んでいるか確認する	df['列A'].kurt()
データフレームを指定した列によってまとめたグループ	df.groupby('列A')
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
データフレームの中にとがいくつ含まれるかカウントする	df.isin([value, value2]).sum()
データフレームのある列を百の位で丸めて整数型にする	df['列A'].round(-2).astype(int)
部分文字列が文字列の開始位置以降にないかどうか判定する	文字列.find(部分文字列, 開始位置) == -1
配列を縦棒グラフにする	plt.bar(ラベル列, データ列)
ダークオリーブグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
グラフの全般的にカラーパレットを暗くする	sns.set(pallete='dark')
文字列の終了位置以前に部分文字列が存在するか調べる	文字列.find(部分文字列, 0, 終了位置) != -1
配列とリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
黄色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
データフレームの平均値を求める	df.mean()
xが無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, [|変数]x, oo)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
整数の5乗を求める	整数 ** 5
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
整数を整数除算する	整数 // 整数2
条件が成り立たない	not 条件
文字列を改行なしにプリントする	print(文字列, end='')
散布図の大バツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
折れ線グラフの星印を赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
プロットのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
データシリーズの未入力値を最大値に増やす	ds.fillna(ds.max())
折れ線グラフの色をライトシアンにする	plt.plot(データ列x, データ列y, color='lightcyan')
文字列中にひとつでも英数字が存在するか調べる	any(c.isalnum() for c in 文字列)
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
データフレームのカラムを並べて箱ヒゲ図にする	plt.boxplot([df['カラム'], df['カラム']])
データ列をn個にビン分割する	pd.cut(ds, n)
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームをSJISで書き出す	df.to_csv('file.csv', encoding='shift_jis')
ある列の文字列が部分文字列で始まるデータを取り出す	df[df['列A'].str.startswith(部分文字列)]
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
ふたつのセットは共通の要素を持たないかどうか調べる	セット.isdisjoint(セット2)
日付時刻データが木曜日かどうかテストする	aDatetime.weekday() == 3
クラス名は名前付きタプルかどうか調べる	issubclass(C, tuple)
option: 青緑色を使用する	color = 'teal'
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
書き込み用にファイルパスをオープンして]、fとする	f = open(filepath, mode='w')
kを底とする対数	math.log(x, k)
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
サポートベクターマシンを用いて回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
eの乗数を求める	math.exp(x)
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
リストとデータ列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
例外のメッセージを知る	etype, evalue, traceback = sys.exc_info()
ある列のカテゴリごとの分散を求める	df.groupby('列A').var()
長さnのリスト	[0] * n
option: フォントの色をネイビーに設定する	color = 'navy'
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
option: ヘッダを連番に設定する	header = None
双方向キューから最初の要素を取り除く	両端キュー.remove(要素)
列の長さnの順列を求める	itertools.permutations(iterable, n)
データフレームのシェイプ	df.shape
グラフで用いるフォントを指定する	sns.set(font=フォント名)
シードをnで初期化する	random.seed(n)
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
パールバイオレットレッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
option: カンマを分割記号で使う	sep = ','
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
両端キューからポップする	両端キュー.pop()
回帰分析をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をネイビーにセットする	plt.plot(データ列x, データ列y, color='navy')
ブルーバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
キーがマップ上で定義されているか確認する	キー in 辞書
整数を十六進表記にする	hex(整数)
配列をビン数nでビン分割する	pd.cut(aArray, n)
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
赤いバツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ファイルの絶対パスを使う	os.path.abspath(filepath)
散布図の右三角印を青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
辞書をJSON形式を用いて出力ストリームにダンプする	json.dump(辞書, ファイル出力, ensure_ascii=False)
グラフの描画で暗く色を使う	sns.set(pallete='dark')
整数がリストのひとつか	aList = [0, 1, 2]<nl>整数 in aList
文字列を最後のカンマで分けたときの残りの文字列	文字列.rpartition(',')[-1]
リストからサンプリングする	random.sample(リスト, 抽出したい個数)
XをYで割った結果を切り上げたい	(X + Y - 1) // Y
グリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
中央値でデータシリーズのNaNを埋める	ds.fillna(ds.median())
青緑にヒストグラムの色をセットする	plt.hist(データ列, color='teal')
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
２つの変数の小さい方を欲しい	min(X, Y)
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
option: ティールを使う	color = 'teal'
自然数の順列の総数	math.perm(n)
ファイルパスからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
数式をxについて偏微分する	sympy.diff(数式, [|変数]x)
文字列をユニコードのリストに変換する	[ord(ch) for ch in 文字列]
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
指定したカラムを整数に丸める	df['列A'].round()
異なる列をキーにして表データを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
散布図に赤い上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
縦棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
小麦色色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
ミディアムオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ヒストグラムをバイオレット色を用いて描画する	plt.hist(データ列, color='violet')
option: アンティークホワイト色を使う	color = 'antiquewhite'
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
option: 列の名前をリストで指定する	names = 列名リスト
文字列を区切り文字で分割して文字列リストに変換する	文字列.split(セパレータ)
2つの最大値	max(x, y)
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='grey')
option: 複素数型を使う	bool = np.int<nl>dtype = bool
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
折れ線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
列に列を続けたイテラブルを得る	itertools.chain(iterable, iterable2)
整数をキューにenqueueする	両端キュー.append(整数)
一方に含まれ、他方に含まれない集合を求める	セット.difference(セット2)
２つのオブジェクトは等しい	obj == obj2
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
ライトスチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフをディムグレー色を使って描画する	plt.plot(データ列x, データ列y, color='dimgrey')
文字列をセンタリングにする	文字列.center(文字列幅)
リストと配列について散布図を描画して星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
複数の数値をプリントする	print(数値, 数値, 数値)
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
を整数だけ増加させる	変数 += 整数
実数に数をかける	x * y
option: グラフの色をインディアンレッドにする	color = 'indianred'
識別子はジェネレータ関数かテストする	inspect.isgeneratorfunction(識別子)
0から始まる無限な数列	itertools.count()
データフレーム中の欠損値を破壊的にドロップする	df.dropna(inplace=True)
複数の列からグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
リストをJSON形式の文字列に変換する	json.dumps(リスト, ensure_ascii=False)
option: エンコーディングをEUCにセットする	encoding = 'euc_jp'
二つのオブジェクトが同一参照か	obj is obj2
マップの項目名を要素に設定する	辞書[キー] = element
option: ローングリーンにフォントの色を指定する	color = 'lawngreen'
ヒストグラムの色を深紅に変更する	plt.hist(データ列, color='crimson')
option: ゴールドにグラフの色を指定する	color = 'gold'
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
散布図にrgbのポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
英大文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
グラフのy軸を対数目盛に変更する	plt.yscale('log')
option: ブランチドアーモンドを用いる	color = 'blanchedalmond'
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
データフレームをグループ化し、分散を求める	df.groupby('列A').var()
淡いピンク色色としてヒストグラムを描画する	plt.hist(データ列, color='lightpink')
作画で使う色調を指定する	sns.set(pallete=パレット名)
ライトグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
最大最小から配列を初期化する	np.linspace(最小値, 最大値, 要素数)
option: ポイント印を使う	marker = '.'
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データシリーズの日にち	ds.dt.day
オブジェクトが非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(オブジェクト)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
ヒストグラムをシエナ色として描画する	plt.hist(データ列, color='sienna')
日付時刻データが何曜日か知る	aDatetime.weekday()
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
文字列の左側から空白やタブを取り除く	文字列.lstrip()
データフレームをまとめて丸める	df.round()
大文字・小文字を無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームを2つの列ごとに集約して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
スクリプトのファイルの名前を確める	sys.argv[0]
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
ピアソンの積立相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
データフレームをグループ化しあるカラムに対し標準偏差を求める	df.groupby('列A')['列B'].std()
線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
整数がnで割り切れないか調べる	整数 % n != 0
両端キューの長さを算出する	len(両端キュー)
ミディアムブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
青い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
整数の左シフト	整数 << n
散布図をブルーバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
データフレームのカラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
rgbの四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列の四分位を描画する	plt.boxplot(データ列)
指定した列のカテゴリで集計し、個数を計算する	df.groupby('列A').count()
整数は配列のどれか	aArray = [0, 1, 2]<nl>整数 in aArray
指定された列の値で集計し最小値を求める	df.groupby('列A').min()
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
option: フォントの色をライムグリーンに設定する	color = 'limegreen'
ベクトルのデータ型を求める	aArray.dtype()
option: 大文字・小文字を無視する	flag = re.IGNORECASE
整数の左シフトを求める	整数 << n
option: フォントの色をグレーに変更する	color = 'grey'
カウンタの項目のカウント	aCounter[element]
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
ラインを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの文字列を未入力値に変換する	df.replace(値, np.nan)
例外の種類	etype, evalue, traceback = sys.exc_info()
リストを文字列として、文字を使ってつなげる	文字.join(map(str, リスト))
option: グラフの色をインディアンレッドに変更する	color = 'indianred'
option: グラフの色をネイビーに変更する	color = 'navy'
クラスのサブクラスかどうか調べる	issubclass(サブクラス, クラス)
グラフに水平方向の点線をつける	plt.axhline(y=0, linestyle='dotted')
option: グラフの色を濃い青に設定する	color = 'darkblue'
小さい方を計算したい	min(X, Y)
文字列の最後から文字を取り除く	文字列.rstrip(文字)
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
リストとリストの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
変数を使いたい	X = 0
カテゴリでグループ化して、データフレームのカーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
整数を八進数表現にする	oct(整数)
option: マーカーを右三角に変える	marker = '>'
n乗が計算したい	X ** n
ゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
項がセットの要素に含まれないか調べる	要素 not in セット
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
モデルを学習する	model.fit(説明変数, 目的変数)
データフレームの中に文字列があるか調べる	df.isin([value])
２つの文字列を順に出力する	print(文字列, 文字列)
データフレームの指定した列の標本分散	df['列A'].var(ddof=0)
option: フォントの色をシスルに指定する	color = 'thistle'
散布図をrgbの星マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ふたつの集合の積集合	セット.intersection(セット2)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
横棒グラフをモカシン色を使って描画する	plt.barh(データ列x, データ列y, color='moccasin')
option: グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
整数の無限イテラブルを使う	itertools.repeat(整数)
リストから両端キューを作る	collections.deque(リスト)
option: マーカーを菱形に設定する	marker = 'D'
文字列の左端から空白を除去する	文字列.lstrip('\t')
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
関数の値でデータフレームをグループ化し、記述統計量を計算する	df.groupby(関数).describe()
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
指定したカラムのNaNを後の値に設定する	df['列A'].fillna(method='bfill')
JSONを使う	import json
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
散布図の大バツ印を青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームの列の欠損値をxに設定する	df['列A'].fillna(x)
正規分布にしたがって配列の値が発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
キューの大きさ	len(両端キュー)
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
縦棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
ある列の文字列に部分文字列が含まれない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
グラフを論文用に変更する	sns.set(context='paper')
タプルと配列をペアリングする	itertools.zip_longest(iterable, iterable2)
全部ValueMapでデータフレームの選択したカラムを置換する	df[['列A', '列B']].replace(ValueMap)
縦棒グラフをリネン色を使って描画する	plt.bar(データ列x, データ列y, color='linen')
日付データが水曜日か確認する	aDate.weekday() == 2
もしコマンド引数が指定されたなら、処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
カンマ区切りのファイルのn行目をインデックスにして読み込む	pd.read_csv('file.csv', index_col=n)
丸マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='o')
整数が整数2未満、それかn3以上	整数 < 整数2 or 整数 >= n3
数値を表示する	print(数値)
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
xの小数点以下'3'桁までを出力する	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
プロットの用途を論文に指定する	sns.set(context='paper')
ファイルに文字列を書き込む	s = ''<nl>f.write(s)
円グラフでデータ列の割合を作図する	plt.pie(データ列, startangle=90)
データフレームの欠損値を前の行の値で埋める	df.fillna(method='ffill')
インデントを指定して辞書をJSON文字列にする	json.dumps(辞書, ensure_ascii=False, indent=n)
散布図の三角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
カラーバーを水平で描く	plt.colorbar(orientation='horizontal')
実数の正接	math.tan(x)
二つのオブジェクトが等しいか調べる	obj == obj2
ダークオレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
縦棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
インデント幅を指定してデータをJSON文字列に変換する	json.dumps(データ, ensure_ascii=False, indent=n)
データフレームを各列毎にグループ分けして文字列というグループの個数を求める	df.groupby(column).size()[s]
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
1からNまでの行列	np.arange(1, N+1)
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
yが無限大に近づくとき数式の極限値を算出する	sympy.limit(数式, y, oo)
option: グラフの色をミディアムブルーに指定する	color = 'mediumblue'
横棒プロットを描く	plt.barh(ラベル列, データ列)
スプリンググリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
データフレームからある３つの列のみ抽出する	df[['列A', '列B', '列C']]
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
白色でプリントできる文字列に変換する	f'\033[37m{x}\033[0m'
イテラブルを	''.join(map(str, イテラブル))
文字列をコロンで二分して、前半を使う	文字列.partition(':')[0]
文字列が全て変数名か判定する	文字列.isidentifier()
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
ラインを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームを関数によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
半透明の実線を用いて数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
マップからキーで指定されたエントリを取り除く	辞書.pop(キー)
計算結果を改行なしにプリントする	print(式, end='')
数を数で割る	x / y
折れ線グラフの▼マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データシリーズの欠損値をxに設定する	ds.fillna(x)
option: ゴーストホワイトにフォントの色を変更する	color = 'ghostwhite'
スプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
範囲を指定して整数乱数を得る	random.randint(最小値, 最大値)
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
空の集合	set()
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
rgbの右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: グラフの色をライトブルーに指定する	color = 'lightblue'
Xの三乗を求めたい	X ** 3
yの方程式として数式を解く	sympy.solve(数式, y)
ある列の値がx以上y未満の行を取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
文字列を最後の区切り記号で分けたときの後半の文字列	文字列.rpartition(セパレータ)[-1]
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
配列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
複素数型のゼロ埋めしたベクトルを作成する	np.zeros(要素数, dtype=bool)
辞書を多重集合に変換する	collections.Counter(aDict)
辞書から最後の値を取り除く	辞書.popitem()
自然数個のものからk個取り出したときの並べ方	math.perm(n, k)
表データのあるカラムの日を見る	df['列A'].dt.day
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
データフレームのNaNを最大値に減らす	df.fillna(df.max())
指定した列で集計しそれぞれの合計を求める	df.groupby('列A').sum()
マゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
ガウス過程として回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
リストとデータ列の散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
1からNまでの配列を作る	np.arange(1, N+1)
タプルを空白区切りでプリントする	print(*タプル)
データシリーズを千の位で四捨五入する	ds.round(-3)
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームの選択したカラムの尖りを求める	df[['列A', '列B']].skew()
カラムの平均の標準誤差を求める	scipy.stats.sem(df['列A'])
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
縦棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
オールドレース色で線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
縦棒グラフをライムグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='limegreen')
実数の自然対数を求める	math.log(x)
deqの最後	両端キュー[-1]
数列のスピアマンの順位相関係数を使う	scipy.stats.spearmanr(数列, 数列2)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
本日の年数を見る	datetime.datetime.today().year
option: ライトシアン色を使用する	color = 'lightcyan'
xをシアンで出力する	print(f'\033[36m{x}\033[0m')
データフレームの選択した列の要約統計量を算出する	df[['列A', '列B']].describe()
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
日付時刻データがタイムスタンプデータより先かどうか調べる	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
真部分集合かどうか調べる	セット < セット2
乱数生成系列を初期化する	random.seed()
KNNとして回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームの最初を見る	df.head()
SJISでエクセルファイルファイルを読む	pd.read_csv('file.csv', encoding='shift_jis')
乱数生成系列をnで固定化する	random.seed(n)
濃いシアンにヒストグラムの色を指定する	plt.hist(データ列, color='darkcyan')
データフレームを指定した列によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ヒストグラムの色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
小さい方が欲しい	min(X, Y)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
リストからn個サンプリングしてリストにする	random.sample(リスト, k=n)
モジュールを検索するパスにディレクトリを追加する	sys.path.append(ディレクトリ名)
グラフの見た目を綺麗にする	import seaborn as sns
グラフの凡例を表示する	plt.legend()
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
数列を集合にする	set(数列)
リストの要素を文字列として、指定した文字でつなげる	文字.join(map(str, リスト))
xが真か判定する	bool(x)
本日は何年か知る	datetime.datetime.today().year
配列とリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフを赤色を使って描画する	plt.barh(データ列x, データ列y, color='red')
一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
オブジェクトが非同期ジェネレータか調べる	inspect.isasyncgen(オブジェクト)
データフレームの選択したカラムの欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームの指定した列においてどの値が最も出現するか見る	df['列A'].mode()
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
散布図を赤い星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームをグループ化し、ある列に対し分散を求める	df.groupby('列A')['列B'].var()
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
文字列が小文字か確認する	文字列.islower()
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
データをJSON形式でファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
要素がセットの要素か	要素 in セット
文字列全体をパターンにASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
ペアリストpairsからカウンタを用意する	collections.Counter(dict(pairs))
ビン数nで配列をビニングする	pd.cut(aArray, n)
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
赤い四角マーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
回帰分析をブースティングとして行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
文字列が無限に続くイテラブル	itertools.repeat(element)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
日付時刻データが木曜日か確認する	aDatetime.weekday() == 3
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
散布図をダークスラテグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
リストをソートしてJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
プロットに凡例を加える	plt.legend(['凡例A', '凡例B'])
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの次元の大きさ	df.shape
データフレームの上5行	df.head(5)
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
数列の推移を点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
グリーンにヒストグラムの色をセットする	plt.hist(データ列, color='green')
要素一つのりスト	[要素]
２点間のユークリッド距離	math.dist(point, point2)
整数がnの倍数でない	整数 % n != 0
文字列内に漢字が使われている	re.search('[\u4E00-\u9FD0]', 文字列)
オブジェクトが集合型	set = int<nl>isinstance(obj, set)
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
データフレームのカラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
XにYを掛けた結果を求めたい	X * Y
配列の逆行列	np.linalg.inv(aArray)
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
かつを書きたい	条件式 and 条件式2
高頻度方からカウンタをリストとして得る	aCounter.most_common()
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
赤い△マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
線グラフをカデットブルー色を使って描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ロージーブラウンにヒストグラムの色をセットする	plt.hist(データ列, color='rosybrown')
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの一部の列のパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
インデントを指定して文字列をJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
散布図をミディアムスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ボックスチャートを描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
データ列の変化を赤い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列をJSON形式を用いてファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
今日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
辞書をインデントを指定してJSON文字列にする	json.dumps(辞書, ensure_ascii=False, indent=n)
option: ライトイエローを使う	color = 'lightyellow'
データフレームを表示するとき、ヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの一部のカラムを百の位で丸めて整数にする	df[['列A', '列B']].round(-2).astype(int)
散布図に赤い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
データシリーズの中の欠損値の合計をカウントする	ds.isna().sum()
横向きに二つのデータフレームをマージする	pd.merge(df, df2)
整数がセットに含まれるか	数 in セット
棒グラフをコーンズシルク色を用いて描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データフレームの下位25％	df.quantile(0.75)
日付時刻データにn時間分加える	aDatetime + datetime.timedelta(hours=n)
パターンをASCII限定として事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
行列から重複を除いた配列を作成する	np.unique(aArray)
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
option: カデットブルー色を用いる	color = 'cadetblue'
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
リストをJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False)
線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
上位集合かどうか調べる	セット.issuperset(セット2)
ヒストグラムの色をダークカーキにする	plt.hist(データ列, color='darkkhaki')
ある列の文字列が正規表現文字列にマッチしないデータを取り出す	df[~df['列A'].str.match(正規表現)]
まとめてValueMapでデータフレームのあるカラムを置き換える	df['列A'].replace(ValueMap)
ライトイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームをある列によって並べ直し、、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
辞書のキーと値を入れ替える	{v: k for k, v in 辞書.items()}
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
折れ線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
プロットの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
文字列に文字がいくつあるか調べる	文字列.count(文字)
文字列を双方向キューの末尾に付け加える	両端キュー.append(文字列)
データフレームを二つの列を用いて昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
ボックスチャートを描画して平均値を加える	plt.boxplot(データ列, showmeans=True)
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
データフレームを各列毎にグループ分けし、、文字列というグループの個数を求める	df.groupby(column).size()[s]
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの行の名前をまとめて付け直す	df.rename(index={x: y})
option: 色をシャルトリューズに設定する	color = 'chartreuse'
n番目の列を外したデータフレームを使う	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
破線に折れ線グラフの線の種類をセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 黄緑色を使う	color = 'chartreuse'
文字が片仮名かどうか確認する	# Tips<nl>('ァ' <= 文字 <= 'ン')
ある列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
２つの最大値を求める	max(x, y)
データフレームの指定したカラムの欠損値をxで埋める	df['列A'].fillna(x)
option: 青紫を使用する	color = 'violet'
分数の分子	q.numerator
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
イテラブルから複数個ランダムに選んでリスト化する	random.choices(イテラブル, k=n)
散布図をディープスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データフレームの中に存在すると文字列の合計を調べる	df.isin([value, value2]).sum()
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
プログラムの実行を異常終了する	sys.exit(1)
現在の再帰の上限	sys.getrecursionlimit()
正規表現を前もってコンパイルする	re.compile(pattern)
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
ある列によって破壊的に昇順にデータフレームを整列する	df.sort_values(by='列A', ascending=True, inplace=True)
インディゴ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: フォントの色をサーモンに指定する	color = 'salmon'
横棒グラフをサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='salmon')
三つの数値を順にプリントする	print(数値, 数値, 数値)
option: 改行コードを旧Macに設定する	newline = '\r'
横棒グラフを描画して下寄せする	plt.barh(ラベル列, データ列, align='edge')
現在の曜日を使う	datetime.datetime.today().weekday()
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
リストをJSON形式としてファイル出力にダンプする	json.dump(リスト, ファイル出力, ensure_ascii=False)
データ列を折れ線グラフを用いて可視化する	plt.plot(データ列x, データ列y)
option: バリーウッド色を使用する	color = 'burlywood'
option: バッファを使わない	buffering = 0
option: ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
最大最小値としてデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
整数はセットのいづれかかどうか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
実数のk進対数を求める	math.log(x, k)
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
線グラフを半透明の一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
変数を入れ替える	x, y = y, x
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
xを紫色でプリントできる文字列に変換する	f'\033[35m{x}\033[0m'
二進文字列を整数にする	int(文字列, 2)
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
小数点数以下の最大の整数を求める	math.floor(x)
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
セットが空集合でないかどうか調べる	len(セット) != 0
最大値でデータシリーズの欠損値を埋める	ds.fillna(ds.max())
ファイルをオープンして]、書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
option: データ型を指定する	np.int32 = np.int<nl>dtype = np.int32
ファイルを全て読み込む	f.read()
データフレームのn行目をインプレイスでドロップする	df.drop(n, axis=0, inplace=True)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの一部の列の欠損値をxに設定する	df[['列A', '列B']].fillna(x)
データフレームの全カラムの相関を描画する	sns.pairplot(df)
文字列の開始位置以降がsubで始まる	文字列.startswith(部分文字列, 開始位置)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフの▽マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
その最小値でデータフレームの指定したカラムの欠損値を補う	df['列A'].fillna(df['列A'].min())
プラットホームがマックかどうか調べる	sys.platform.startswith('darwin')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
データフレームの指定した列の中に存在する文字列と日付データの個数をカウントする	df['列A'].isin([value, value2]).sum()
整数が双方向キューの中にあるか調べる	整数 in 両端キュー
３つのデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=1)
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: シルバー色を使う	color = 'silver'
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
deqのstart〜endの部分要素を求める	collections.deque(itertools.islice(deq, start, end))
データフレームのあるカラムの時を使う	df['列A'].dt.hour
データフレームの上100行	df.head(100)
出力ストリームを改行なしで一行ずつ読み込む	f.readline()
データフレームを表示するとき最大列数を変更する	pd.set_option('display.max_columns', n)
直後の値でデータフレームの一部のカラムの未入力値を埋める	df[['列A', '列B']].fillna(method='bfill')
deqのstart番目からend番目の要素を使う	collections.deque(itertools.islice(deq, start, end))
データフレームの選択したカラムの不偏標準偏差	df[['列A', '列B']].std()
整数のn分の一	整数 / n
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
ヒストグラムをベージュ色を用いて描画する	plt.hist(データ列, color='beige')
データフレームを二つの列の値で集計する	df.groupby(['列A', '列B'])
半透明の一点鎖線で配列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
option: 文字列の示す文字コードを使う	encoding = s
日付データが金曜日か確認する	aDate.weekday() == 4
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
xをシアンでプリントできる文字列に変換する	f'\033[36m{x}\033[0m'
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
変数名がスタックフレームか調べる	inspect.isframe(識別子)
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムをスチールブルー色を用いて描画する	plt.hist(データ列, color='steelblue')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
行列の和	aArray + aArray2
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
ユニコードを文字へ変換する	chr(文字コード)
実数に実数を加算する	x + y
０で全要素を初期化した32ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
整数を16進数表現にする	hex(整数)
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
文字列のケースを入れ替える	文字列.swapcase()
縦棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ルートのチェーンマップを生成する	collections.ChainMap()
タプルの末尾からn番目以前の部分を取り出す	タプル[:-n]
ヒストグラムの色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
カウンタのそれぞれの文字列をカウントだけリストとして得る	aCounter.elements()
マッピングのキーを要素に設定する	辞書[キー] = element
文字列リストをsepを区切りにして一つの文字列にする	sep.join(文字列リスト)
割ったあまりを求めたい	X % Y
データフレームの列のユニークな値を見る	df[col].unique()
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
ファイルパスをEUCとしてオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
現在の分数	datetime.date.today().minute
無限に整数が繰り返すイテレータを使う	itertools.repeat(整数)
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
文字列の最初だけ大文字化する	文字列.capitalize()
単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
データフレームを複数の列によって並べてNaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
データフレームの選択したカラムの値が欠損値か調べる	df[['列A', '列B']].isna()
辞書のコピー	dict(辞書)
文字列中にひとつも大文字が含まれないか調べる	any(not c.isupper() for c in 文字列)
rgbのポイントマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
アクア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームの数値をまとめて小数点以下n桁で四捨五入する	df.round(n)
散布図を下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v')
データフレームのstart行目からend行目までを取り出す	df[start:end]
行列の演算をする	import numpy as np
ヒストグラムの色をダークマゼンタに指定する	plt.hist(データ列, color='darkmagenta')
線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームの一部のカラムの空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
JSON形式のファイル入力を辞書にする	json.load(ファイル入力)
整数の四分の1	整数 / 4
ライム色としてヒストグラムを描画する	plt.hist(データ列, color='lime')
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
双方向キューの末尾に配列の各データを追加する	両端キュー.extend(配列)
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームの列を目的変数にする	目的変数 = df['列名']
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
整数が何桁か	len(str(整数))
n個の整数列	list(range(n))
データフレームの一部のカラムが正規分布からどれだけ、尖っているか見る	df[['列A', '列B']].skew()
横棒グラフをダークグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgrey')
空文字を使う	''
識別子はフレーム	inspect.isframe(識別子)
辞書上で項目名が定義済み	キー in 辞書
折れ線グラフの左三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
データフレームのある列のSkewness	df['列A'].skew()
データフレームをある列の値でグループ化し、要約統計量を求める	df.groupby('列A').describe()
カラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
option: ダークターコイズ色を使用する	color = 'darkturquoise'
散布図の▼マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの選択した列の中に文字列がある	df[['列A', '列B']].isin([value])
文字列中にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in 文字列)
option: 真紅を使う	color = 'crimson'
二つのデータフレームをジョインする	pd.merge(df, df2)
データフレームの一部の列を千の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
黒い菱形マーカーをイテラブルと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
バイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
バイオレット色のヒストグラムを描画する	plt.hist(データ列, color='violet')
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
option: EUCを使う	encoding = 'euc_jp'
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
一点鎖線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
CSVファイルでデータフレームを書き出す	df.to_csv('file.csv')
文字列の右側からタブを取り除く	文字列.rstrip('\t')
ふたつの列を組み合わせてグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
option: フォントの色をビスクに設定する	color = 'bisque'
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
条件を満たしたらループを抜けたい	if 条件式:<nl><tab>break
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
ベージュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ダークマゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
非アルファベットが文字列中にある	any(not c.isalpha() for c in 文字列)
文字列をASCIIコードエスケープでバイト列に変換する	文字列.encode(encoding='unicode_escape')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
二つの条件はどちらでもよく書きたい	条件式 or 条件式2
散布図のポイントマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ヒストグラムを暗い赤色として描画する	plt.hist(データ列, color='darkred')
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
option: マーカーを上三角に変更する	marker = '^'
JSON形式の文字列をオブジェクトに変換する	data = json.loads(文字列)
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
文字列の最初	文字列[0]
ファイルパスから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
t-SNEで多次元データを文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
折れ線グラフの色を耐火レンガにする	plt.plot(データ列x, データ列y, color='firebrick')
データフレームから指定したデータ型の列名リスト	df.select_dtypes(型).columns
データフレームを100の位で四捨五入して整数にする	df.round(-2).astype(int)
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
実行時の標準入力の入力元がターミナルか調べる	os.isatty(sys.stdin.fileno())
ファイルパスから入力ストリームを求める	open(filepath)
ブルーバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
option: NaNを無視する	nan_policy = 'omit'
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
XをYで割った余りを求めたい	X % Y
文字列がリストに存在するか調べる	文字列 in リスト
表データをNaNを含めてある列でグループ化する	df.groupby('列A', dropna=False)
正規表現を使用する	import re
縦棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
折れ線グラフのダイアモンド印の色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
インディアンレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
JSONLファイルをデータフレームとしてロードする	pd.read_json(filename, orient='records', lines=True)
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
クロスマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x')
正則化付き線形モデルを作る	model = sklearn.linear_model.ElasticNet()
option: ダークオリーブグリーンにフォントの色を変更する	color = 'darkolivegreen'
ヒストグラムの色をグレーにセットする	plt.hist(データ列, color='grey')
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
データシリーズのNaNを最小値に設定する	ds.fillna(ds.min())
リストをイミュータブルにする	tuple(リスト)
データフレームの選択したカラムのNaNをxで補う	df[['列A', '列B']].fillna(x)
正規分布の累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
フィシャー流の尖度を算出する	scipy.stats.kurtosis(配列, fisher=True, bias=False)
オブジェクトがジェネレータ関数か	inspect.isgeneratorfunction(オブジェクト)
データを最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: ディープスカイブルーにグラフの色をする	color = 'deepskyblue'
option: グラフの色をモカシンに設定する	color = 'moccasin'
本日が金曜日か確認する	datetime.datetime.today().weekday() == 4
最初のを除いたデータフレーム	df[df.columns[1:]]
青い実線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
赤い破線で数列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
双方向キュー	両端キュー = collections.deque()
行列の列を選択する	aArray[:, 列番号]
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
リストの要素をランダムにシャッフルする	random.shuffle(リスト)  # 破壊的操作
安全に文字列のプレフィックスから部分文字列を取り除く	文字列.removeprefix(部分文字列)
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ランダムな整数のリストを使う	random.sample(range(100), 10)
相関係数を見る	scipy.stats.pearsonr(数列, 数列2)
データシリーズを小数点以下n桁で丸める	n = 2<nl>ds.round(n)
整数がセットの要素か調べる	数 in セット
セットから全要素を消す	セット.clear()
日付時刻データのタイムゾーン	aDatetime.timetz()
イテラブルを出現回数してカウンタから減らす	aCounter.subtract(iterable)
三自然数の最大公約数を求める	math.gcd(n, n2, n3)
菱形マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D')
option: グラフの色を青緑に設定する	color = 'teal'
折れ線グラフの大バツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
予測データの混同行列を計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフの色をレベッカパープルにセットする	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームの全カラムの相関を見る	sns.pairplot(df)
棒プロットの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
データフレームの中の列を分割数nとして分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列をスタックのn番目に挿入する	両端キュー.insert(n, 文字列)
タイムスタンプデータの日付を使う	aDatetime.date()
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
等間隔でデータ列をn個にビン分割する	pd.cut(ds, n)
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームの選択したカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データフレームとデータシリーズを連結する	pd.concat([df, ds], axis=1)
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
グラフのフォントを日本語表示にセットする	sns.set(font='IPAexGothic')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
辞書をJSON形式として出力ストリームに保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
整数を符号付きでバイト列にする	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
オレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
整数をバイナリにする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big')
ひとつも大文字が文字列中に含まれないかどうかテストする	any(not c.isupper() for c in 文字列)
nで乱数シードを固定化する	random.seed(n)
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
散布図に三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
にバイオリン図としてデータフレームを描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの選択したカラムを百の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-2).astype(int)
インディゴにヒストグラムの色を設定する	plt.hist(データ列, color='indigo')
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列x, データ列y, color='midnightblue')
option: グラフの色をベージュに指定する	color = 'beige'
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
イテラブルをカウントしてカウンタから引く	aCounter.subtract(iterable)
疑似乱数を発生させる	random.random()
列を分割数nで分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
正則化付き回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ピンク色を用いてヒストグラムを描画する	plt.hist(データ列, color='pink')
縦棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: 色をサーモンに指定する	color = 'salmon'
文字列を最後のカンマで二つに分け、、後ろの方を見る	文字列.rpartition(',')[-1]
二つの列によってデータフレームをグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
指定した列のカテゴリで集計し、それぞれの平均値を求める	df.groupby('列A').mean()
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
option: ダークターコイズ色を使う	color = 'darkturquoise'
行列の次元数	aArray.ndim
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
option: ポイント印を描画する	marker = '.'
データフレームのある列の値がxより小さい行を抽出する	df[df['列A'] < x]
双方向キューの末尾に数列の各データを追加する	両端キュー.extend(数列)
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
データフレームのカラムのKurtosisを算出する	scipy.stats.kurtosis(df['列A'], bias=False)
実数が整数か調べる	x.is_integer()
タプルの末尾を取り除く	タプル[:-1]
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
時間を用いる	import time
配列の要素ごとの積を求める	np.multiply(aArray, aArray2)
データフレームの数値をまとめて整数に丸める	df.round()
データフレームの選択したカラムの中にいくつ文字列があるかカウントする	df[['列A', '列B']].isin([value]).sum()
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
オブジェクトは論理値かテストする	bool = int<nl>isinstance(obj, bool)
ライトコーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
辞書の浅いコピーを新規生成する	辞書.copy()
nから始まる無限整数イテラブル	itertools.count(start=n)
項目名がマップに存在しないとき、要素を追加する	辞書.setdefault(キー, element)
日付データが土曜日か調べる	aDate.weekday() == 5
識別子はジェネレータ関数か調べる	inspect.isgeneratorfunction(識別子)
option: スチールブルー色を使う	color = 'steelblue'
xとyを改行しないでプリントする	print(x, y, end='')
を半分にする	変数 /= 2
折れ線グラフの左三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームの欠損値をxに増やす	df.fillna(x)
インデックスをキーにして表データをソートする	df.sort_index()
線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
イテラブルと配列について散布図を描き、、星マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームの一部のカラムにおいてどの値が最も出現するか調べる	df[['列A', '列B']].mode()
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
指定したカラムの中に含まれる日付データの数を数える	df['列A'].isin([value]).sum()
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
変数について数式を偏微分する	sympy.diff(数式, 変数)
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
オブジェクトが抽象クラスか調べる	inspect.isabstract(オブジェクト)
複数のデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
辞書のキーとその値を列挙する	辞書.items()
rgbの丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列のn番目をアスキーコードに変換する	ord(文字列[n])
文字列中からパターンにケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
複数行対応として正規表現を前もってコンパイルする	re.compile(pattern, flag=re.MULTILINE)
入力ストリームを改行を取り除いて一行ずつ読む	f.readline()
リストとリストについての散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ゼロ埋めされた３二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
折れ線グラフの色をアリスブルーに指定する	plt.plot(データ列x, データ列y, color='aliceblue')
文字列を区切り記号で二分する	文字列.partition(セパレータ)
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
折れ線グラフの星印の大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
配列と数列についての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列をセパレータで二分して、前半を使う	文字列.partition(セパレータ)[0]
整数に整数をかける	整数 * 整数2
数式を変数xについて偏微分する	sympy.diff(数式, [|変数]x)
文字列から部分文字列を全て除く	文字列.replace(部分文字列, '')
折れ線グラフの色をサーモンにする	plt.plot(データ列x, データ列y, color='salmon')
乱数シードをnで初期化する	random.seed(n)
option: シーグリーンを用いる	color = 'seagreen'
RANSACで回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列を最後のカンマで二分して最初の方を使う	文字列.rpartition(',')[0]
データフレームの指定したカラムの標準偏差	df['列A'].std()
文字列から改行を取り除く	文字列.replace('\n', '')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
2乗が書きたい	X ** 2
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
deqのn番目を使う	両端キュー[n]
n個にリストを等量でビニングする	pd.qcut(aList, n)
ケンドールの相関係数を算出する	scipy.stats.kendalltau(数列, 数列2)
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
option: バイオレットを使用する	color = 'violet'
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームの指定したカラムを十の位で丸める	df['列A'].round(-1)
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
重複ありでランダムにデータフレームから100行をサンプリングする	df.sample(100, replace=True)
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
要素∈セット	要素 in セット
オブジェクトは論理値クラスのインスタンス	bool = int<nl>isinstance(obj, bool)
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
カウンタの文字列数	len(aCounter)
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
3つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
ファイルを文字コードtextで書き込み用に開く]	open(filepath, mode='w', encoding=text)
日付時刻データは日付時刻データと同時か調べる	aDatetime == aDatetime2
データフレームの選択した列においてどの値が最も出現するか見る	df[['列A', '列B']].mode()
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
ファイル名がJSONファイルかどうか	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
文字が別の文字列に含まれないかどうか調べる	文字 not in 文字列
折れ線グラフに大バツ印を加える	plt.plot(データ列x, データ列y, marker='X')
option: 最初のカラムをインデックスに指定する	index_col = 0
データフレームをインポートする	import numpy as np<nl>import pandas as pd
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
配列からn個、サンプリングしてリストにする	random.sample(配列, k=n)
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
文字列の中の複数行対応として正規表現によるすべてのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
折れ線プロットをプロットする	plt.plot(データ列x, データ列y)
イテラブルから重複なく、n値ランダムに選んでリストにする	random.sample(イテラブル, k=n)
文字列全体が正規表現に複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームのカラムを散布図で可視化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: やわらかい青色を使う	color = 'cornflowerblue'
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
三変数の最小値	min(x, y, z)
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
文字列中に小文字が含まれる	any(c.islower() for c in 文字列)
プロットの見栄えをいい感じに指定する	sns.set()
リストを文字列として'改行を用いてつなげる	'\n'.join(map(str, リスト))
データフレームがどの程度、分散しているか調べる	df.var()
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
句読点文字を全て使う	string.punctuation
標準入力から1行分読む	sys.stdin.readline()
リストの中の一番小さい値を求める	min(リスト)
option: ポイントマーカーを使う	marker = '.'
リストの最後から値をポップする	リスト.pop()
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
２乗が書きたい	X ** 2
文字列を最後の区切り記号で二分して、前半を使う	文字列.rpartition(セパレータ)[0]
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
文字列の指定した区間に部分文字列があるかどうか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
空のタプルを作る	()
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
現在の再帰の最大回数を調べる	sys.getrecursionlimit()
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
プログラムの実行を即座に停止する	sys.exit()
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
出力ストリームを全て読み込む	f.read()
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームのn行目をドロップしてみる	df.drop(n, axis=0)
数列から重複なく、n要素ランダムに選んでリストにする	random.sample(数列, k=n)
データフレームの一部の列のNaNを直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
にバイオリン図でデータフレームの列を可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
プロットの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフの星マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
5行をランダムにデータフレームから抽出する	df.sample(5)
整数はセットに含まれないか	数 not in セット
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
既存のファイルパスをBOM付きとして追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
一番右の列を除いたデータフレーム	df[df.columns[:-1]]
タン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
option: 色をカーキに変更する	color = 'khaki'
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
空の両端キュー	両端キュー = collections.deque()
ファイルパスを文字列の示すエンコーディングで書き込みできるように開く]	open(filepath, mode='w', encoding=s)
グラフのy軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
文字が平仮名か調べる	('ぁ' <= 文字 <= 'ん')
オーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
option: スラグレー色を使う	color = 'slategray'
整数を16進数文字列に変換する	hex(整数)[2:]
日付時刻データの年数	aDatetime.year
オブジェクトは辞書クラスかどうかテストする	dict = int<nl>isinstance(obj, dict)
エクセルから全てのシートを読む	pd.read_excel('file.xlsx', sheet_name=None)
改行しないで二つの計算結果を出力する	print(式, 式, end='')
丸印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
リストの要素が最初に見つかるインデックス	リスト.index(要素)
xを下線付きで表示できる文字列に変換する	f'\033[4m{x}\033[0m'
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
行列の各要素に加算する	aArray + aArray2
option: ダークマゼンタ色を使う	color = 'darkmagenta'
リストの変遷を色付きの破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
横棒グラフをライトスレイグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightslategray')
小数点以下'2'桁までを出力する	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
リストの要素を文字列として、指定した文字列で連結する	文字列.join(map(str, リスト))
リストを更新不能な集合に変換する	frozenset(リスト)
ファイルをクローズする	f.close()
２つの条件はどちらでもよく書きたい	条件式 or 条件式2
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
5行をデータフレームからランダムに選択する	df.sample(5)
ローングリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
option: シエナ色を使う	color = 'sienna'
小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
データフレームのNaNを削除する	df.dropna(inplace=True)
イエローグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
あるカラムの欠損値を最小値に指定する	df['列A'].fillna(df['列A'].min())
ファイルが存在しないかどうか調べる	not os.path.exists(filepath)
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
データ列を使う	import pandas as pd
散布図をミスティローズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
カウンタの項目の出現回数	aCounter[element]
ラインを青い一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
option: 三二ビット整数型を用いる	np.int16 = np.int<nl>dtype = np.int16
nが無限に続くリスト	itertools.repeat(n)
文字列が別のにあるかどうか調べる	文字列 not in 別の文字列
配列の累積和を求める	np.cumsum(aArray)
最後のセパレータによって文字列を二分する	文字列.rpartition(セパレータ)
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
２つの列の値によってデータフレームをまとめたグループを求める	df.groupby(['列A', '列B'])
赤色にする	f'\033[31m{x}\033[0m'
データをJSON文字列に変換する	json.dumps(データ, ensure_ascii=False)
option: 星印を使う	marker = '*'
両端キューに要素をプッシュする	両端キュー.append(要素)
文字列を両端キューに積む	両端キュー.append(文字列)
黄色い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
ファイルをBOM付きとしてオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: グラフの色をペルーに指定する	color = 'peru'
option: グラフの色をミディアムターコイズに変更する	color = 'mediumturquoise'
文字列中にひとつも空白が含まれないか調べる	any(not c.isspace() for c in 文字列)
タプルの平均を算出する	sum(タプル)/len(タプル)
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
データフレームの列間の相関行列を求める	df.corr()
リストをn回、連結する	リスト * n
データフレームの欠損値をxで補う	df.fillna(x)
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
ソートして文字列をJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
小なりイコールと条件に書きたい	X <= Y
ライトグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
改行なしに二つの変数をプリントする	print(変数名, 変数名, end='')
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
ファイルを書き込みできるようにオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
折れ線グラフのダイアモンド印の色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
キューの末尾に整数を付け加える	両端キュー.append(整数)
右に双方向キューの要素をローテーションする	両端キュー.rotate(1)
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
両端キューの要素を逆順にする	両端キュー.reverse()
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
散布図の△マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
変数の値の種類が知りたい	type(X)
赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
リストとリストについての散布図に黒い上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムの色をバイオレットに指定する	plt.hist(データ列, color='violet')
折れ線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
変数の出力を改行なしに行う	print(変数名, end='')
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
ヒストグラムをシーグリーン色を使って描画する	plt.hist(データ列, color='seagreen')
積を欲しい	X * Y
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
option: ミディアムオーキッドを使う	color = 'mediumorchid'
ひとつでも小文字が文字列中にある	any(c.islower() for c in 文字列)
文字列が指定したに含まれるか調べる	文字列 not in 別の文字列
タイムスタンプデータは何秒か知る	aDatetime.second
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
ユニコードから文字にする	chr(文字コード)
ひとつでも非数字が文字列中にあるかどうか	any(not c.isdigit() for c in 文字列)
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
整数が2で割り切れるかどうか	整数 % 2 == 0
データシリーズを小数点以下n桁で四捨五入する	n = 2<nl>ds.round(n)
線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
ピアソンの相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
配列とリストについて散布図を描画して左三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: フォントの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
文字列中の部分文字列の登場回数を範囲を指定してカウントする	文字列.count(部分文字列, 開始位置, 終了位置)
データフレームをグループ化し、それぞれの標準偏差を求める	df.groupby('列A').std()
option: マーカーの太さを変更する	markeredgewidth = 2.5
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
データフレームをインデックスを付けず保存する	df.to_csv('file.csv', index=None)
ローングリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
カウンタをイテラブルで更新する	aCounter.update(iterable)
リストとリストの散布図を描いてポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
整数が2で割り切れる	整数 % 2 == 0
データ列間のR2を求める	sklearn.metrics.r2_score(データ列, データ列2)
option: レベッカパープル色を用いる	color = 'rebeccapurple'
セットからエラーなく文字列を除く	セット.discard(文字列)
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
浮動小数点数の複素数	complex(x)
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
コーンフラワーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='cornflowerblue')
大文字と小文字を逆にする	文字列.swapcase()
赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
辞書のキーの値を得る	辞書[キー]
変数がマイナス無限大に近づくときの極限値を求める	sympy.limit(数式, 変数, -oo)
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
option: 色をパールバイオレットレッドにセットする	color = 'palevioletred'
option: ダークスレートブルーを使う	color = 'darkslateblue'
ヒストグラムの色をクリムゾンに指定する	plt.hist(データ列, color='crimson')
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
双方向キューの長さを制限する	collections.deque(maxlen=最大長)
データフレームをグループ化し最大値を求める	df.groupby('列A').max()
ヒストグラムのラインスタイルを一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
三つの最も小さい値	min(x, y, z)
データフレームの重複を数える	df.duplicated().sum()
データフレームを表示するときn行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
要素がn回繰り返すイテレータが欲しい	itertools.repeat(要素, n)
データフレームの選択したカラムの中にと文字列がいくつ存在するか数える	df[['列A', '列B']].isin([value, value2]).sum()
線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
nが無限に続く数列	itertools.repeat(n)
データフレームをグループ化しある列に対し合計を算出する	df.groupby('列A')['列B'].sum()
カウンタから最頻出なキーの件数	aCounter.most_common()[1]
配列の標準偏差	np.std(aArray)
配列をダミー変数に変換する	pd.get_dummies(配列)
ファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
タプルの中の一番大きい値を求める	max(タプル)
option: 読み込む行番号をnamesで指定する	usecols = names
データシリーズの欠損値をその中央値で補う	ds.fillna(ds.median())
リストとリストの散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
横棒グラフをティール色として描画する	plt.barh(データ列x, データ列y, color='teal')
等間隔の配列	np.arange(開始値, 終了値, 等差)
かけ算したい	X * Y
ファイルパスをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
文字列中にひとつもアルファベットがない	any(not c.isalpha() for c in 文字列)
タプルの各要素を関数に適用した結果で並べ直す	sorted(タプル, key=func)
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: n番目のカラムを行に設定する	index_col = n
リストと配列について散布図を描き、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列を部分文字列で二つに分ける	文字列.partition(部分文字列)
変数xが無限大に近づく時の極限値を求める	sympy.limit(数式, [|変数]x, oo)
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
リストとデータ列の散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを保存する	df.to_csv('file.csv')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
新しい部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
タイムスタンプデータの月	aDatetime.month
二つの列によってデータフレームをまとめた表	df.groupby(['列A', '列B'])
option: UTF8を使用する	encoding = 'utf-8'
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
データシリーズのNaNを直前の値に設定する	ds.fillna(method='ffill')
ライトコーラルにヒストグラムの色を変更する	plt.hist(データ列, color='lightcoral')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
プロットのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
コロンで区切ってxとyを出力する	print(x, y, sep=':')
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
データをJSON形式を用いて出力ストリームにダンプする	json.dump(データ, ファイル出力, ensure_ascii=False)
データフレームのカラムをにバイオリン図としてグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
option: オレンジレッドを使う	color = 'orangered'
osモジュールをインポートする	import sys<nl>import os
ファイルをバイナリモードとしてオープンして]fとする	f = open(filepath, mode='rb')
散布図をダークオーキッド色を使って描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ある列を万の位で丸める	df['列A'].round(-4)
まとめてデータフレームの列名を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
カウンタのユニオン	aCounter | aCounter2
option: 星マーカーを使う	marker = '*'
回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
重回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
ランダムに表から10行を抽出する	df.sample(10)
文字列が英数字か	文字列.isalnum()
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
ソートして辞書をJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
option: コーラルを用いる	color = 'coral'
線グラフの色をダークレッドに指定する	plt.plot(データ列x, データ列y, color='darkred')
空の部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ノットを書きたい	not 条件式
折れ線グラフに黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列は全て数値	文字列.isnumeric()
折れ線グラフを赤い点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
リストのn番目のの要素を求める	リスト[n]
文字列の末尾から改行を取り除く	文字列.rstrip('\n')
データシリーズの未入力値を後の値で埋める	ds.fillna(method='bfill')
辞書のキーとそのエントリを列挙する	辞書.items()
データフレームから型リストのデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
空の辞書がほしい	辞書 = {}
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
小数点数の平方根	math.sqrt(x)
データフレームの未入力値を最小値に指定する	df.fillna(df.min())
表データをある列でグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
データフレームのある列をリストにする	df['列A'].values.tolist()
ダークシアンにヒストグラムの色をセットする	plt.hist(データ列, color='darkcyan')
データフレームをまとめて整数に丸める	df.round()
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
エラーをキャッチしたい	try:<nl><tab># ここに処理を入れる<nl><tab>pass<nl>except Exception as e:<nl><tab>print(e)
ヒストグラムの線種を破線に変更する	plt.hist(データ列, linestyle='dashed')
JSON形式としてデータを出力ストリームに保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
実数のコサインの逆数	x = 0.33<nl>math.acos(x)
整数が整数2以上かどうか	整数 >= 整数2
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームのカラムを説明変数にする	説明変数 = df[['列名', '列名2']]
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
二進数文字列を整数に変換する	int(文字列, 2)
改行で区切ってxとyを表示する	print(x, y, sep='\n')
整数が2で割り切れるかどうか調べる	整数 % 2 == 0
下限指定をした配列の分散を計算する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームの選択したカラムの中に存在する文字列の合計をカウントする	df[['列A', '列B']].isin([value]).sum()
両端キューのn番目に要素を差し込む	両端キュー.insert(n, 要素)
散布図をダークシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
行列から重複を除いた配列を作る	np.unique(aArray)
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
オブジェクトはバイト列クラスか調べる	bytes = int<nl>isinstance(obj, bytes)
データフレームとデータシリーズを横方向に連結する	pd.concat([df, ds], axis=1)
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
縦棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
浮動小数点数の双曲線余弦を求める	math.cosh(x)
ヒストグラムの色を青紫に変更する	plt.hist(データ列, color='violet')
要素は辞書の値として含まれているか	element in 辞書.values()
棒グラフをオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orchid')
リスト中の要素は少なくともひとつ真	any(リスト)
整数の桁数	len(str(整数))
文字列の右端	文字列[-1]
横棒プロットを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームの欠損値をその中央値で埋める	df.fillna(df.median())
データフレームの欠損値を除き、みる	df.dropna()
xについて偏微分を行う	sympy.diff(数式, [|変数]x)
リストと数列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: 珊瑚色を使う	color = 'coral'
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
列の名前の一覧を見る	df.columns
option: 菱形マーカーを描画する	marker = 'D'
淡い茶色色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
リストと配列について散布図をプロットしてマーカーを▼に指定する	plt.plot(データ列x, データ列y, marker='v')
散布図に黒いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
改行しないで計算結果をプリントする	print(式, end='')
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データシリーズの曜日数を求める	ds.dt.dayofweek
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
ゴーストホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
文字列を走査し、パターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
データ列の推移を半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
フローラルホワイト色を使ってヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
異なる列をキーとしてデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
あるカラムのカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
等間隔でデータフレームの中の列をn個にビニングする	pd.cut(df[col], n)
データフレームの選択したカラムの値を正規表現でまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
辞書の値をひとつずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
データシリーズの分位数	ds.quantile(パーセント/100)
要素を両端キューから取り除く	両端キュー.remove(要素)
データフレームから重複する行を残さずドロップする	df.drop_duplicates(keep=False)
文字が別の文字列に含まれない	文字 not in 文字列
ヒストグラムを2つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
文字列が全てアスキー文字か調べる	文字列.isascii()
線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: スラッシュを分割記号で用いる	sep = '/'
BOM付きでファイルを開く]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
文字列の最後の文字を使う	文字列[-1]
イテラブルとリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームの列の名前を全て置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ゲインズボロ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
nとkの組合せ	math.comb(n, k)
上位集合もしくは等しいか調べる	セット >= セット2
x軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
データフレームを十の位で丸める	df.round(-1)
文字列の右側から改行を消す	文字列.rstrip('\n')
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: カーキ色を使う	color = 'khaki'
表データから指定したデータ型の列名一覧	df.select_dtypes(型).columns
データフレームの選択したカラムのNaNを最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
辞書から最後の値をポップする	辞書.popitem()
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
パパイヤウィップ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
リストの要素を	''.join(map(str, リスト))
option: グラフの色を白に設定する	color = 'white'
折れ線グラフの△印を赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
スピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
N回ループさせたい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
実行時の標準入力のソースがターミナルか調べる	os.isatty(sys.stdin.fileno())
nが無限に続く数列を得る	itertools.repeat(n)
xとyをスラッシュで区切ってプリントする	print(x, y, sep='/')
文字列を最後のカンマで分けたときの後半の文字列	文字列.rpartition(',')[-1]
多次元データをt-SNEで数値次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
4乗が求めたい	X ** 4
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
データフレームの一部の列の平均値	df[['列A', '列B']].mean()
リストの要素を文字列として、空白を使って一つにする	' '.join(map(str, リスト))
単位正方行列を作成する	np.identity(n)
データフレームを指定した列の値でグループ化し、要約統計量を算出する	df.groupby('列A').describe()
文字列のn番目をASCIIコードにする	ord(文字列[n])
データフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
折れ線グラフに四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
文字列がセットの要素でないか調べる	文字列 not in セット
スクリプトファイルと同じディレクトリのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
円グラフをきれいな円にする	plt.axis('equals')
数列のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
日付時刻データが木曜日	aDatetime.weekday() == 3
ふたつの整数の差を求める	整数 - 整数2
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
数列を両端キューに変換する	collections.deque(数列)
要素がタプルに含まれないか	要素 not in タプル
option: シートの名前を増やす	sheet_name = ['A', 'B']
配列とリストの散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
改行なしに変数を出力する	print(変数名, end='')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
コマンド引数を列挙する	sys.argv[1:]
指定したカラムのカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
数式の変数xを指定した数式で置き換える	数式.subs([|変数]x, 数式2)
option: ライトグレーを使う	color = 'lightgrey'
線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
文字列の順序をランダムにシャッフルする	''.join(random.sample(文字列, len(文字列)))
リストと配列について散布図を描画して、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
データフレームの選択したカラムの中に日付データと文字列がいくつ含まれるか数える	df[['列A', '列B']].isin([value, value2]).sum()
分子と分母から有理数を準備する	fractions.Fraction(分子, 分母)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
option: グラフの色を淡い茶色に設定する	color = 'tan'
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの指定した列の未入力値を平均で埋める	df['列A'].fillna(df['列A'].mean())
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
ヒストグラムの色を黄色に指定する	plt.hist(データ列, color='yellow')
option: ベクトルのデータ型を指定する	np.int8 = np.int<nl>dtype = np.int8
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
データ列の各データ値の出現回数	ds.value_counts()
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
青い実線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
余弦	math.cos(x)
セットが空集合か	len(セット) == 0
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
データフレームのあるカラムが何分か見る	df['列A'].dt.minute
option: フォントの色をダークマゼンタに設定する	color = 'darkmagenta'
浮動小数点数を十の位で丸める	round(x, -1)
勾配ブースティングを使って回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
option: パパイヤウィップ色を用いる	color = 'papayawhip'
リネンにヒストグラムの色を変更する	plt.hist(データ列, color='linen')
option: 紺碧を用いる	color = 'azure'
スレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
カウンタから辞書を引く	aCounter.subtract(aDict)
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
書き込み用にEUCでファイルパスを開く]	open(filepath, mode='w', encoding='euc_jp')
あるカラムの値がxに等しく、別の列の値がyに等しいデータを抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
option: ダークスレートブルー色を使用する	color = 'darkslateblue'
棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
パールバイオレットレッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
リストと列をペア化する	itertools.zip_longest(iterable, iterable2)
全要素を０で初期化した行列を作成する	np.zeros(行数, 列数)
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
n個に等間隔でデータ列をビン分割する	pd.cut(ds, n)
実数の天井	math.ceil(x)
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
JSON文字列を辞書にする	data = json.loads(文字列)
文字列から部分文字列を除去する	文字列.replace(部分文字列, '')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データ列とリストについての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
キューから文字列を取り除く	両端キュー.remove(文字列)
データシリーズの中に含まれる文字列との合計を調べる	ds.isin([value, value2]).sum()
グラフの用途をポスターに指定する	sns.set(context='poster')
日付時刻データは何月か知る	aDatetime.month
リストと数列の散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
横棒グラフをシーグリーン色として描画する	plt.barh(データ列x, データ列y, color='seagreen')
ベクトルの累積和を求める	np.cumsum(aArray)
option: 文字列をセパレータで使う	sep = s
option: 書き込みモードにセットする	mode = 'w'
クラス名は名前付きタプルか判定する	issubclass(C, tuple)
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
サーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
グラフの描画で濃く色を使用する	sns.set(pallete='deep')
新しいガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
処理中の例外情報	etype, evalue, traceback = sys.exc_info()
縦軸だけ目盛り線	plt.grid(axis='y')
縦棒グラフをターコイズ色として描画する	plt.bar(データ列x, データ列y, color='turquoise')
グラフの用途をポスターに設定する	sns.set(context='poster')
指定した文字列で文字列が終わるかどうか	文字列.endswith(部分文字列)
データフレームをソートして、下の方を取り出す	df.sort_values('キーとなる列').tail(n)
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='teal')
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
縦棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
データフレームからn行をランダムに選択する	df.sample(n)
option: ローングリーンを使用する	color = 'lawngreen'
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
2つの数値を順にプリントする	print(数値, 数値)
データフレームを関数の値でグループ化し、要約統計量を求める	df.groupby(関数).describe()
文字列をカンマで区切って、文字列リストに変換する	文字列.split(',')
数式を方程式として解く	sympy.solve(数式)
0からnまでのスライス	slice(n)
データフレームからあるデータ型の列名リスト	df.select_dtypes(型).columns
赤い実線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
整数がセットに含まれる	数 in セット
配列とイテラブルについての散布図に黒い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
オブジェクトは抽象クラスか	inspect.isabstract(オブジェクト)
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
マゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
二つの整数の商	整数 / 整数2
オブジェクトが関数かどうか調べる	inspect.isfunction(オブジェクト)
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
二つのセットが交わりを持たないか調べる	セット.isdisjoint(セット2)
データフレームからランダムに100行を取り出す	df.sample(100)
今日が木曜日	datetime.datetime.today().weekday() == 3
キーが辞書にない時、要素を追加する	辞書.setdefault(キー, element)
等しいと書きたい	X == Y
キーがマップにないとき要素を追加する	辞書.setdefault(キー, element)
ヒストグラムをフローラルホワイト色を使って描画する	plt.hist(データ列, color='floralwhite')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
データフレームの指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
多次元データをSVDで項次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
整数はリストのどれか	aList = [0, 1, 2]<nl>整数 in aList
黒い三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
一番右側の列を外したデータフレーム	df[df.columns[:-1]]
n階微分を求める	sympy.diff(数式, y, n)
数式の展開を行う	sympy.expand(数式)
散布図をオリベドラブ色として描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
引き算したい	X - Y
Pandasのバージョンを見る	print(pd.__version__)
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
数列のイミュータブルな集合	frozenset(数列)
option: グラフの色をダークスラテグレーに指定する	color = 'darkslategray'
リストから複数の要素をランダムに重複なく選ぶ	random.sample(リスト, k=n)
散布図をrgbの右三角マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
指定した列リストのみデータフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
散布図をrgbの▽マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ふたつのセットがdisjointか判定する	セット.isdisjoint(セット2)
文字列中の文字をn回だけ置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
グラフで利用可能な色の一覧	matplotlib.colors.cnames
赤いポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
リストとデータ列について散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
マップの項目名の一覧	list(辞書.keys())
二つの数値を表示する	print(数値, 数値)
タプルの先頭を除く	タプル[1:]
データフレームの選択したカラムを百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
配列の推移を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームの選択した列を十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
横棒グラフを描く	plt.barh(ラベル列, データ列)
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
実数の常用対数を算出する	math.log10(x)
ある列のカテゴリ毎の最小値	df.groupby('列A').min()
データフレームの選択した列のNaNを最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
インデックスによってデータフレームを昇順にソートする	df.sort_index(ascending=True)
アクア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームの選択した列の中に文字列とが存在するか	df[['列A', '列B']].isin([value, value2])
スレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームの指定した列の欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
データフレームを散布図として見る	sns.scatterplot(data=df, x='列名', y='列名')
xとyを表示する	print(x, y)
あるカラムはどの程度正規分布から尖っているか見る	df['列A'].skew()
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
文字列中に非大文字が含まれるか調べる	any(not c.isupper() for c in 文字列)
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ダークグレー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
カラーマップとしてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
文字列の接尾辞が	文字列.endswith(部分文字列)
セットの要素が別のセット2に含まれるか	セット.issubset(セット2)
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
散布図の上三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
最後の部分文字列で文字列を二分する	文字列.rpartition(部分文字列)
データフレームの末尾n行を選ぶ	df.tail(n)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの指定したカラムを丸めて整数型にする	df['列A'].round().astype(int)
データフレームのあるカラムの中にいくつ欠損値があるか求める	df['列A'].isna().sum()
文字列を末尾からコロンで分割する	文字列.rsplit(':')
紺碧にヒストグラムの色を変更する	plt.hist(データ列, color='azure')
option: フォントの色をグリーンに指定する	color = 'green'
より大きいと条件に書きたい	X > Y
行列の型	aArray.dtype()
リストと配列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
行列の列ごとの分散	np.var(aArray, axis=0)
コーンフラワーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
クラス分類を確率的勾配降下を用いて行う	model = sklearn.linear_model.SGDClassifier()
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフをライトゴールドロディイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
２つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
タプルの最初を捨てる	タプル[1:]
option: NaNを無視しない	nan_policy = 'propagate'
データフレームのNaNを最小値に指定する	df.fillna(df.min())
タプルを並べる	sorted(タプル)
コマンドライン	sys.argv
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
データフレームの一部のカラムの値を全部ValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
双方向キューの先頭に数列の各データを追加する	両端キュー.extendleft(数列)
区切り記号で文字列を後ろから区切る	文字列.rsplit(セパレータ)
第一引数のファイル名	sys.argv[1]
ヒストグラムの色をダークカーキに指定する	plt.hist(データ列, color='darkkhaki')
表データを指定した列の値によって分類して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
数式のyについてのn階微分を算出する	sympy.diff(数式, y, n)
ホワイトにヒストグラムの色をセットする	plt.hist(データ列, color='white')
ふたつの列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
option: パールバイオレットレッド色を使用する	color = 'palevioletred'
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
変数名がトレースバックか	inspect.istraceback(識別子)
現在の分数を使う	datetime.date.today().minute
データシリーズは何月か見る	ds.dt.month
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
縦棒グラフを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
符号付きで整数をバイト列に変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
ValueMapでまとめてデータフレームの値を置き換える	df.replace(ValueMap)
整数がnで割り切れるか調べる	整数 % n == 0
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
リストに要素を追加する	リスト.append(要素)
プロットのx座標のラベルをセットする	plt.xlabel('x軸ラベル')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
文字列の指定した位置より前に部分文字列が含まれないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
浮動小数点数の逆双曲線余弦を計算する	math.acosh(x)
データフレームの不偏標準偏差を求める	df.std()
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
カテゴリで色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
カラムの中にいくつ文字列が存在するか調べる	df['列A'].isin([value]).sum()
配列を変更不能なセットに変換する	frozenset(配列)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
リストの要素を昇順にソートする	sorted(リスト, reverse=True)
タイムスタンプデータからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
日付時刻データにn秒を加える	aDatetime + datetime.timedelta(seconds=n)
ヒストグラムをミディアムターコイズ色を用いて描画する	plt.hist(データ列, color='mediumturquoise')
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
文字列の最初の文字	文字列[0]
option: グラフの色をダークオーキッドに指定する	color = 'darkorchid'
プロットに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
バイト列からJSON形式のデータを読む	json.loads(バイト列.decode('unicode-escape'))
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
文字列をJSON文字列にする	json.dumps(文字列, ensure_ascii=False)
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
標準入力から1行だけ読み込む	sys.stdin.readline()
凡例をグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
16進文字列を整数に変換する	int(文字列, 16)
等しい量になるようにn個にデータ列をビン分割する	pd.qcut(ds, n)
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
option: 耐火レンガ色を使う	color = 'firebrick'
option: ディムグレー色を使う	color = 'dimgrey'
整数の三乗	整数 ** 3
散布図をホットピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='hotpink')
日付データをISO書式の文字列にする	aDate.isoformat()
ルートのチェーンマップ	collections.ChainMap()
折れ線グラフのマーカーを三角印にする	plt.plot(データ列x, データ列y, marker='^')
整数の4分の一を求める	整数 / 4
データシリーズを丸めて、整数にする	ds.round().astype(int)
リストを文字列として、タブで連結する	'\t'.join(map(str, リスト))
ある列の値がx以上y以下の行を選択する	df[(x <= df['列A']) & (df['列A'] <= y)]
時刻を使用する	import datetime
直前の値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(method='ffill')
辞書の項目名を要素にする	辞書[キー] = element
最大値と最小値としてデータを正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ふたつのリストのインターセクション	list(set(リスト).intersection(set(リスト2)))
データフレーム全体をインデックスによってソートする	df.sort_index()
ファイルパスをバイナリ書き込みできるようにオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
文字列の右側は	文字列.endswith(部分文字列)
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
セットから文字列を除去する	セット.remove(文字列)
option: 下三角マーカーを描画する	marker = 'v'
データフレームをグループ化しある列に対し最大値を算出する	df.groupby('列A')['列B'].max()
リストとリストについての散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
option: シルバーを使用する	color = 'silver'
プロットの補助目盛りを有効にする	plt.minorticks_on()
二つのカラムを組み合わせてグループ化し個数を算出する	df.groupby(['列A', '列B'], as_index=False).count()
2つの文字列がケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
文字列から部分文字列を探す	文字列.find(部分文字列)
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
二つのリストの差集合	list(set(リスト).difference(set(リスト2)))
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
データフレームのカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
浮動小数点数を二乗する	x ** 2
折れ線グラフに四角印を加える	plt.plot(データ列x, データ列y, marker='s')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
データフレームの指定した列を千の位で丸めて整数にする	df['列A'].round(-3).astype(int)
実行環境がウィンドウズ	sys.platform.startswith('win32')
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
散布図の左三角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: グラフの色をダークグレーに変更する	color = 'darkgray'
文字列を部分文字列を使って分割して列挙する	文字列.split(部分文字列)
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
オブジェクトはトレースバックか調べる	inspect.istraceback(オブジェクト)
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
オブジェクトは集合クラスか調べる	set = int<nl>isinstance(obj, set)
タプルの先頭	タプル[0]
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
折れ線グラフの印を上三角にする	plt.plot(データ列x, データ列y, marker='^')
丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o')
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
日付データからn日分、減らす	aDate - datetime.timedelta(days=n)
BOM付きでデータフレームを保存する	df.to_csv('file.csv', encoding='utf_8_sig')
日付時刻データは日付時刻データより前かどうか調べる	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
xについて微分する	sympy.diff(数式, [|変数]x)
文字列を最後のコロンで二つに分けて、後ろの方を見る	文字列.rpartition(':')[-1]
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
条件によって、処理を変えたい	if 条件式:<nl><tab>print('真のとき')  # 直して<nl>else:<nl><tab>print('そうでなければ')  # 直して
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
散布図にクロスマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
データフレームのn行目をドロップする	df.drop(n, axis=0, inplace=True)
option: グラフの色をラベンダーに設定する	color = 'lavender'
列の分散	df['列A'].var()
折れ線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
データシリーズをまとめてValueMapで置換する	ds.replace(ValueMap)
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
全シートを表計算ファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
ゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
リストを等量でビン数nとしてビン分割する	pd.qcut(aList, n)
整数の最大公約数	math.gcd(n, n2)
データフレームのあるカラムの日にちを使う	df['列A'].dt.day
縦棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='gray')
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
二次元リストをflattenする	sum(リスト)
ある列の文字列が正規表現文字列にマッチしないデータを選択する	df[~df['列A'].str.match(正規表現)]
指定した列のカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
箱ヒゲ図を横方向にする	plt.boxplot(データ列, vert=False)
折れ線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
散布図を茶色色として描画する	plt.scatter(データ列x, データ列y, color='brown')
データフレームを二つの列によってまとめたグループを見る	df.groupby(['列A', '列B'])
文字列の先頭はsubかどうか判定する	文字列.startswith(部分文字列)
方程式の解	sympy.solve(数式)
文字は平仮名	('ぁ' <= 文字 <= 'ん')
散布図の星印を青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
２つの変数の大きい方を知りたい	max(X, Y)
リストと数列についての散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
データフレームの選択したカラムの値が欠損値か確認する	df[['列A', '列B']].isna()
現在が月曜日か	datetime.datetime.today().weekday() == 0
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タイムスタンプデータが何日か知る	aDatetime.day
折れ線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
アルファベットを全部使う	string.ascii_letters
線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
引き算が書きたい	X - Y
データフレームからランダムに100行を抽出する	df.sample(100)
ヒストグラムの色をラベンダーにセットする	plt.hist(データ列, color='lavender')
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
データフレームの末尾5行を選択する	df.tail(5)
二つのリストから辞書	dict(zip(リスト, リスト2))
半透明の点線で数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列からサフィックスを取り除く	文字列.removeprefix(部分文字列)
整数が整数2以下か調べる	整数 <= 整数2
デックの最初に要素を追加する	両端キュー.appendleft(要素)
パターンをあらかじめコンパイルする	re.compile(pattern)
Xの二乗を求めたい	X ** 2
赤い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
マッピングのキーの一覧	list(辞書)
データフレームの一部のカラムの未入力値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
日付時刻データからn秒分、引く	aDatetime - datetime.timedelta(seconds=n)
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
整数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
文字列を最初の部分文字列で二つに分ける	文字列.partition(部分文字列)
最初のセパレータで文字列を二分して、前半を見る	文字列.partition(セパレータ)[0]
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
入力ストリームからnバイト、読む	f.read(n)
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
バイト列からJSON形式のデータを読み込む	json.loads(バイト列.decode('unicode-escape'))
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームの一部のカラムの未入力値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ヒストグラムの色をダークカーキにセットする	plt.hist(データ列, color='darkkhaki')
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
実数以下の最大の整数を計算する	math.floor(x)
データ列の偏りを対数変換する	np.log(データ列)
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
非英字が文字列中に含まれるかどうか判定する	any(not c.isalpha() for c in 文字列)
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
データシリーズの分	ds.dt.minute
キーが辞書上で定義済みか調べる	キー in 辞書
箱ひげ図でデータフレームの二つのカラムを並べて作図する	plt.boxplot([df['カラム'], df['カラム']])
コーンフラワーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
整数から整数を引く	整数 - 整数2
識別子はビルトイン関数	inspect.isbuiltin(識別子)
ビスク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
xを黒色で出力する	print(f'\033[30m{x}\033[0m')
日付時刻データが火曜日	aDatetime.weekday() == 1
TSVファイルファイル名がかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
データフレームの複数の列を削除する	df.drop(['列A', '列B'], axis=1, inplace=True)
マッピングの項目数	len(辞書)
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
yについて数式を積分する	sympy.integrate(数式, y)
オブジェクトは整数クラスか調べる	int = int<nl>isinstance(obj, int)
方程式として数式を解く	sympy.solve(数式)
空行をプリントする	print()
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
文字列を改行で分割し文字列リストにする	文字列.splitlines()
数値はセットのいずれでもないどうか	数 not in セット
文字コードtextとしてファイルパスを開く]	text = 'utf-8'<nl>open(filepath, encoding=text)
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
二つのオブジェクトが同一参照	obj is obj2
データフレームのあるカラムの時刻を使う	df['列A'].dt.hour
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図に黒いクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
リストをひとつの文字列にする	''.join(map(str, リスト))
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
JSONを使用する	import json
エクセルファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームから列を二つ選択する	df[['列A', '列B']]
文字列の中のASCII限定として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
セットが真部分集合かどうか調べる	セット < セット2
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
UNIX秒のデータ列からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
実数のn乗して数による余り	pow(x, n, y)
データフレームの一部の列の中に存在すると文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
option: マーカーの色をブラックにする	markerfacecolor = 'black'
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
文字列をコロンで二分し、前半を使う	文字列.partition(':')[0]
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図に丸印を用いる	plt.scatter(データ列x, データ列y, marker='o')
縦棒グラフをダークゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
空の計数器	collections.Counter()
列名を指定してデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
オブジェクトはリストクラスかどうか調べる	list = int<nl>isinstance(obj, list)
option: ドジャーブルー色を使用する	color = 'dodgerblue'
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
浮動小数点数が正か確認する	x > 0
整数が整数2より小さいか判定する	整数 < 整数2
ある列のカテゴリごとの平均値	df.groupby('列A').mean()
スーパーセットか	セット.issuperset(セット2)
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
赤い星マーカーをイテラブルと配列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
predicateFuncがTrueとなるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
option: フォントの色をゴールドに変更する	color = 'gold'
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ユニークな要素ごとの頻度を求める	np.unique(aArray, return_counts=True)
文字列に日本語が含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: ティールにグラフの色を設定する	color = 'teal'
あるカラムの不偏標準偏差	df['列A'].std()
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
option: 色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
菱形印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
半透明の実線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
文字列の開始位置以降に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置) == -1
データフレームの最初n行を取り出す	df.head(n)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
散布図の丸印を赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
データフレームをグループ化しそれぞれの最小値を計算する	df.groupby('列A').min()
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
縦棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
エクセルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
option: 黄緑にグラフの色を設定する	color = 'chartreuse'
option: 色をダークスラテグレーに変更する	color = 'darkslategray'
日付データは日付データよりあとかどうか	aDate > aDate2
数値でデータフレームの欠損値を埋める	df.fillna(x)
実数が正の数かどうか調べる	x > 0
ある列の値がxより大きく、yより小さい行を取り出す	df[(x < df['列A']) & (df['列A'] < y)]
自分自身をモジュールとして	sys.modules[__name__]
カーネル密度による分布図をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
半透明の点線を用いてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
リストをJSON形式の文字列にする	json.dumps(リスト, ensure_ascii=False)
コーンズシルク色としてヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
空のヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
ヒストグラムの色をドジャーブルーに変更する	plt.hist(データ列, color='dodgerblue')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
配列とリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
フォレストグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='forestgreen')
折れ線グラフの三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: フォントの色をスノーに変更する	color = 'snow'
ある列の値がx以上の行を抽出する	df[df['列A'] >= x]
文字列をインターンする	sys.intern(文字列)
両端キュー中の要素の数を数える	両端キュー.count(要素)
データ列間の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
表データをあるカラムによってソートし、、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
ダークオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
カラーコードを用いて折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの指定したカラムの要約統計量	df['列A'].describe()
整数の三分の一をがほしい	整数 / 3
折れ線グラフの丸印を青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ファイルを文字コードtextを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
入力から二つの整数値を取り出す	A, B = map(int, input().split())
クラス分類をランダム性を強化したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
配列と数列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
ファイルを書き込みできるように文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
横棒グラフを暗い赤色として描画する	plt.barh(データ列x, データ列y, color='darkred')
円グラフを真円にする	plt.axis('equals')
ポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.')
整数の8分の一	整数 / 8
文字列の中で複数行対応としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
回帰分析をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingRegressor()
耐火レンガ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ミディアムブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
辞書をJSONフォーマットにエンコードする	json.dumps(辞書, ensure_ascii=False)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
散布図をミスティローズ色として描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
文字列を部分文字列によって区切って、列挙する	文字列.split(部分文字列)
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
指定した列の最頻値	df['列A'].mode()
整数が一桁の正の数か調べる	0 <= 整数 <= 9
ミディアムスレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumslateblue')
データをL1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
グラフの全般的に色を濃くする	sns.set(pallete='deep')
文字列を双方向キューに積む	両端キュー.append(文字列)
二つの最大値	max(x, y)
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
タプルの要素だけ表示する	print(*タプル)
データシリーズの中の欠損値の合計を数える	ds.isna().sum()
option: 線を細くする	linewidth = 3.0
分割数nで列を等量でビン分割する	pd.qcut(ds, n)
タプルの要素を並べ変える	sorted(タプル)
option: ライムグリーンを使用する	color = 'limegreen'
option: 色の透明度を設定する	alpha = 0.5
option: グラフの色をホットピンクに設定する	color = 'hotpink'
要素は辞書の値として含まれているかどうか調べる	element in 辞書.values()
線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
option: ブルーバイオレットを使用する	color = 'blueviolet'
プロットを濃くする	sns.set(pallete='deep')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
option: 区切り記号をスラッシュにする	sep = '/'
データフレームの複数のカラムを並べて箱髭図で描画する	plt.boxplot([df['カラム'], df['カラム']])
Excelファイルファイルでデータフレームを保存する	df.to_excel('file.xlsx')
グラフの縦横比を同じする	plt.axis('equals')
cosの逆数	x = 0.33<nl>math.acos(x)
option: フォントの色を茶色に設定する	color = 'brown'
既存のファイルパスをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
カラムの相関係数を算出する	scipy.stats.pearsonr(df['列A'], df['列B'])
文字列中のタブ文字をn個の空白に置換する	文字列.expandtabs(tabsize=n)
折れ線グラフをダークグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkgreen')
リストの値を並べ変える	sorted(リスト)
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフのポイント印を赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
XからYを引いた値が求めたい	X - Y
グリッドを破線にする	plt.grid(linestyle='dashed')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
データシリーズの第一四分位数	ds.quantile(0.25)
ミッドナイトブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームから列を一つのみ選択する	df[['列A']]
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
xを紫色で表示できる文字列に変換する	f'\033[35m{x}\033[0m'
線グラフをライトゴールドロディイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
現在の年	datetime.datetime.today().year
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: ライトコーラル色を用いる	color = 'lightcoral'
option: グラフの色をプラムに設定する	color = 'plum'
ライトシアン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
二つの文字列を改行しないでプリントする	print(文字列, 文字列, end='')
文字列を最後のコロンで二分割して、最初の方を使う	文字列.rpartition(':')[0]
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの指定したカラムの中央値	df['列A'].median()
折れ線グラフのダイアモンドマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
ロードされたモジュールの一覧	sys.modules
変数がマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(数式, 変数, -oo)
タイムスタンプデータの日付	aDatetime.date()
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
ライトグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
オリーブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
option: フォントの色をデピンクに指定する	color = 'deeppink'
イテラブルを縦棒グラフにする	plt.bar(ラベル列, データ列)
線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
改行しないで２つの数値をプリントする	print(数値, 数値, end='')
配列を等量でn個にビニングする	pd.qcut(aArray, n)
データをJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False)
リストからひとつランダムに選ぶ	random.choice(リスト)
リストと配列について散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列の左端からタブを取り除く	文字列.lstrip('\t')
要素が両端キューの中に含まれてるか調べる	要素 in 両端キュー
要素をキューにプッシュする	両端キュー.append(要素)
option: フォントの色をオレンジに設定する	color = 'orange'
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
実数を実数で割った剰余	math.remainder(x, x2)
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
ダークスラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線グラフの星印の線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
小数点以下'3'桁までの文字列にする	':.3f'.format(x)
入力ストリームをJSONとして構文解析する	json.load(ファイル入力)
辞書の全値をクリアする	辞書.clear()
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
2つの文字列を辞書順で比較する	文字列 < 文字列2
タプル内の要素が少なくともひとつ真	any(タプル)
データフレームのある列をリストとして選択する	df['列A'].values.tolist()
指定したカラムの欠損値をxに変更する	df['列A'].fillna(x)
option: グリーンイエロー色を用いる	color = 'greenyellow'
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
キーが辞書に存在するか	キー in 辞書
option: 色をサーモンにセットする	color = 'salmon'
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
線グラフの色をネイビーにする	plt.plot(データ列x, データ列y, color='navy')
ある列のカテゴリ毎の個数を算出する	df.groupby('列A').count()
リストを文字列として、空白を用いてつなげる	' '.join(map(str, リスト))
実数のハイパボリック・サインの逆数を求める	math.asinh(x)
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
シーケンスを累加する	itertools.accumulate(iterable)
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
列の重複コンビネーションを求める	itertools.combinations_with_replacement(iterable, n)
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
二つの列を用いてデータフレームを降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
列を等間隔でn個に分割する	pd.cut(ds, n)
データフレームの末尾n行を抽出する	df.tail(n)
整数はリストのいづれかかテストする	aList = [0, 1, 2]<nl>整数 in aList
オブジェクトにプロパティがあるか調べる	hasattr(obj, プロパティ名)
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
配列をn個にビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
整数が配列のいづれかか調べる	aArray = [0, 1, 2]<nl>整数 in aArray
文字列を末尾から区切り文字で区切る	文字列.rsplit(セパレータ)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
教師データで分類モデルを学習する	model.fit(説明変数, 目的変数)
データフレームの選択したカラムのKurtosis	df[['列A', '列B']].kurt()
option: クリムゾンを用いる	color = 'crimson'
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
データフレームを複数の列を用いて昇順にソートし、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
n進文字列をバイト列にする	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
ベクトルのムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
データシリーズの欠損値を平均で補う	ds.fillna(ds.mean())
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ライトサーモン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
イテラブルの要素を双方向キューの先頭に追加する	両端キュー.extendleft(イテラブル)
パステル調に色をプロットの描画で使う	sns.set(pallete='pastel')
中央値でデータフレームの一部のカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
文字列をコロンで分割し、、文字列リストにする	文字列.split(':')
タプルが全て真か調べる	all(タプル)
シアンで表示できる文字列に変換する	f'\033[36m{x}\033[0m'
option: ダークターコイズを使う	color = 'darkturquoise'
整数から整数を減算する	整数 - 整数2
縦棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
ファイルパスの絶対ファイルパス	os.path.abspath(filepath)
XをYで割った商が計算したい	X // Y
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
赤い実線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームの選択したカラムのNaNを平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームのNaNを平均値に変更する	df.fillna(df.mean())
文字列中にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in 文字列)
今日が何日か知る	datetime.datetime.today().day
yについてのn階微分を計算する	sympy.diff(数式, y, n)
ある列の欠損値をその平均で置き換える	df['列A'].fillna(df['列A'].mean())
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
オレンジレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
文字列中にひとつも数字がないかどうか調べる	any(not c.isdigit() for c in 文字列)
表をソートして下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
インディアンレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
ミスティローズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
辞書にキーが存在する	キー not in 辞書
リストと配列について散布図を描き、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
整数がn回繰り返すイテラブルが欲しい	itertools.repeat(整数, n)
リストをダミー変数に変換する	pd.get_dummies(リスト)
区切り記号で文字列を末尾から区切る	文字列.rsplit(セパレータ)
option: グラフの色をサーモンに設定する	color = 'salmon'
カウンタの和集合演算する	aCounter | aCounter2
deqのn番目	両端キュー[n]
複数の列からグループ化し、標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
イテラブルのイミュータブルな集合を作成する	frozenset(イテラブル)
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
二つの計算結果を順に表示する	print(式, 式)
識別子がコード	inspect.iscode(識別子)
変数の値を１つ大きくしたい	X += 1
文字列を隔離する	sys.intern(文字列)
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
ファイルパスから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
双方向キューをデキューする	両端キュー.popleft()
辞書をJSON形式を使って指定したファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
文字列の両端から改行を取り除く	文字列.strip('\n')
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
TSVファイルファイル名がかどうか判定する	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
日付データが金曜日かどうか調べる	aDate.weekday() == 4
option: コーンズシルクを使用する	color = 'cornsilk'
最後の列を除いたデータフレーム	df[df.columns[:-1]]
両端キューのn番目に整数を挿入する	両端キュー.insert(n, 整数)
リストを小さい順にソートする	sorted(リスト, reverse=True)
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
リストと数列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの選択したカラムの中に文字列と文字列がいくつあるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
文字列を部分文字列で二分して後半を使う	文字列.partition(部分文字列)[-1]
N回、実行をループさせたい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
カラムのNaNをモードにセットする	df['列A'].fillna(df['列A'].mode().iloc[0])
xを緑色でプリントできる文字列に変換する	f'\033[32m{x}\033[0m'
文字列をコロンで二分割し、、後半を見る	文字列.partition(':')[-1]
データフレームをグループ化し、ある列の記述統計量を求める	df.groupby('列A').describe()['列B']
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
切片なしの回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
ライトシアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
文字列はセットのメンバーでないか確認する	文字列 not in セット
文字列を最初の部分文字列によって二分する	文字列.partition(部分文字列)
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
整数が整数2未満、またはn3以上か調べる	整数 < 整数2 or 整数 >= n3
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
文字列をコロンを使って二分する	文字列.partition(':')
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
折れ線グラフに星印を加える	plt.plot(データ列x, データ列y, marker='*')
option: 淡い茶色を使う	color = 'tan'
８ビット整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
区切り記号で文字列を右側から分割する	文字列.rsplit(セパレータ)
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
文字列を末尾からコロンで区切る	文字列.rsplit(':')
見やすいグラフを使用する準備をする	import seaborn as sns
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
データフレームを指定した列によって降順にソートする	df.sort_values(by='列A', ascending=False)
データフレームから型リストで指定したデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
データフレームの一部のカラムの値をValueMapで全て変更する	df[['列A', '列B']].replace(ValueMap)
両端キューの右に要素を付け加える	両端キュー.append(要素)
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
データフレームをグループ化しある列の統計量を算出する	df.groupby('列A').describe()['列B']
データフレームの指定した列を百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
文字列がリストのいずれかテストする	文字列 in リスト
折れ線グラフを赤い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
変数が無限大に近づく場合数式の極限値を求める	sympy.limit(数式, 変数, oo)
カウンタの最も頻出な要素	aCounter.most_common()[0]
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
option: グラフの線種を点線に設定する	linestyle = 'dotted'
整数の2分の一	整数 / 2
エクセルファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
ヒストグラムの色をベージュにする	plt.hist(データ列, color='beige')
ヒストグラムの色をパープルにセットする	plt.hist(データ列, color='purple')
文字列がセットのいずれか調べる	文字列 in セット
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
整数がnの倍数か確認する	整数 % n == 0
rgbの大バツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字コードに相当する文字を使う	chr(文字コード)
option: ダークオレンジ色を用いる	color = 'darkorange'
折れ線グラフの色をミスティローズにする	plt.plot(データ列x, データ列y, color='mistyrose')
折れ線グラフの色をデピンクにセットする	plt.plot(データ列x, データ列y, color='deeppink')
線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
タイムスタンプデータが何秒か知る	aDatetime.second
文字列をソートしてJSONフォーマットにエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='gray')
ファイルをバイナリモードとしてオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
ダークマゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
多次元データを特異値分解を用いて文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
option: ライトシアン色を用いる	color = 'lightcyan'
箱髭図に簡単な説明をつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
平方根	math.sqrt(x)
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームの指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
切り捨てながら変数の値を整数分の一にする	変数 //= 整数
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
データフレームの中の列を等しい量になるようにn個にビン分割する	pd.qcut(df[col], n)
yがマイナス無限大に近づくときの数式の極限値を計算する	sympy.limit(数式, y, -oo)
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
option: フォレストグリーン色を使う	color = 'forestgreen'
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
二つの文字列を辞書順で比較する	文字列 < 文字列2
option: ライトサーモンに色をセットする	color = 'lightsalmon'
赤いクロスマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
新しい単回帰モデルを準備する	model = sklearn.linear_model.LinearRegression()
エラーなく文字列の接尾辞から部分文字列を取り除く	文字列.removesuffix(部分文字列)
タプルの平均値を求める	sum(タプル)/len(タプル)
データフレームを関数の値によってグループ化する	df.groupby(関数)
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
レモンシフォンにヒストグラムの色をする	plt.hist(データ列, color='lemonchiffon')
データフレームの選択したカラムの欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
ハッシュ値を計算する	hash(x)
プロットの色を明るくする	sns.set(pallete='bright')
淡く色テーマをプロットの描画で用いる	sns.set(pallete='muted')
散布図にrgbの大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
条件を満たすときのみ、処理したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
丸マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
小数点数の小数部	math.modf(x)[0]
横棒グラフをコーラル色として描画する	plt.barh(データ列x, データ列y, color='coral')
カデットブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgreen')
カラムの最頻値	mode, count = scipy.stats.mode(df['列A'])
両端キューの長さを制限する	collections.deque(maxlen=最大長)
データフレームをグループ化しある列に対し最小値を求める	df.groupby('列A')['列B'].min()
ひとつも空白が文字列中に含まれないか調べる	any(not c.isspace() for c in 文字列)
文字列を空白で区切り、、文字列リストに変換する	文字列.split()
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
文字列を最初のカンマで二つに分けて後半を使う	文字列.partition(',')[-1]
配列からn要素、サンプリングしてリストにする	random.sample(配列, k=n)
整数を符号付きでバイト列にする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
データフレームの選択した列の中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
日付時刻データの日付を使う	aDatetime.date()
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
列の各要素に対して、predicateFuncの適用がTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームのカラムのモードを計算する	mode, count = scipy.stats.mode(df['列A'])
リストとリストについての散布図に黒い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームのカラムを小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
option: ３二ビット整数型を使う	np.int16 = np.int<nl>dtype = np.int16
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
配列とリストについての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
縦棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームのNaNを最大値に変更する	df.fillna(df.max())
新しいガウス過程分類器を用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
配列を2次元1列に変形する	aArray.reshape(-1, 1)
散布図に下三角印を加える	plt.scatter(データ列x, データ列y, marker='v')
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
メソッド名を得る	inspect.currentframe().f_code.co_name
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
option: 赤色を用いる	color = 'red'
数を百の位で丸める	round(x, -2)
文字列の指定した位置以降に部分文字列が含まれるか	文字列.find(部分文字列, 開始位置) != -1
マッピングのコピーを作成する	辞書.copy()
データフレームの指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
グラフの描画で暗くテーマを使う	sns.set(pallete='dark')
日付時刻データの時間	aDatetime.hour
変数がマイナス無限大に近づく時の数式の極限値を計算する	sympy.limit(数式, 変数, -oo)
散布図の▼印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: 出力先を標準出力に設定する	file = sys.stdout
そうでない場合も書きたい	if 条件式:<nl><tab>print('真のとき')  # 直して<nl>else:<nl><tab>print('そうでなければ')  # 直して
特異値分解を用いて多次元データを文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: カラムの名前をリストで設定する	names = 列名リスト
四分位数で配列をビン分割する	pd.qcut(aArray, 4)
赤いバツマーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
プラットフォームのコードポイントの最大値	sys.maxunicode
行列のユニークな要素とそのインデックスを求める	u, indices = np.unique(aArray, return_index=True)
散布図のポイント印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームをグループ化しそれぞれの標準偏差を求める	df.groupby('列A').std()
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
Xの四乗が欲しい	X ** 4
データフレームを並べて新しい行を振り直す	df.sort_values('キーとなる列').reset_index()
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
リストをビン数nとしてビン分割する	pd.cut(aList, n)
棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
ふたつのカラムからグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
データフレームの選択したカラムの分散を求める	df[['列A', '列B']].var()
整数の割り算の余り	整数 % 整数2
縦棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
文字列を右からカンマで区切る	文字列.rsplit(',')
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
キーが辞書上で未定義か調べる	キー not in 辞書
リストの要素をシャッフルする	random.shuffle(リスト)  # 破壊的操作
文字列を改行で区切り、文字列リストに変換する	文字列.splitlines()
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフの色をダークターコイズにセットする	plt.plot(データ列x, データ列y, color='darkturquoise')
リストとリストについて散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
配列からn要素サンプリングしてリスト化する	random.sample(配列, k=n)
リストと配列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
変数を出力する	print(変数名)
棒グラフをサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='salmon')
折れ線グラフの星マーカーの色を変える	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
行列の個数	aArray.size
タプルを昇順にソートする	sorted(タプル, reverse=False)
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: グラフの色をゴーストホワイトに指定する	color = 'ghostwhite'
タプルの値を昇順に並べる	sorted(タプル, reverse=False)
整数がセットのいずれかどうか	数 in セット
ダークスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
文字列をシンボルにする	sympy.Symbol(変数名)
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
データフレームの一部の列を整数に四捨五入する	df[['列A', '列B']].round()
折れ線グラフをダーク・スラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: グラフの色をプラムに指定する	color = 'plum'
文字列を最後のコロンで二つに分けて、前半を見る	文字列.rpartition(':')[0]
option: グラフの色をスノーに設定する	color = 'snow'
タプルをひとつ置きに取り出す	タプル[::2]
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
整数同士の論理積	整数 & 整数2
option: グラフの色をミディアムアクアマリンにセットする	color = 'mediumaquamarine'
未入力値がある行をドロップし、みる	df.dropna()
option: ミントクリームを使う	color = 'mintcream'
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
実部と虚部から複素数を新規生成する	complex(x, y)
タプルを逆順にする	タプル[::-1]
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
フォーマットを用いて列をタイムスタンプ型にする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
表計算ファイルから複数のシートを指定してデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームのカラムのスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
セットを共通要素のみに更新する	セット.intersection_update(セット2)
等差数列から整数乱数を求める	random.randrange(start, end, step)
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
散布図に赤い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
折れ線グラフを色付きの一点鎖線を使って描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
グリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームの指定したカラムの第一四分位数	df['列A'].quantile(0.25)
xを黄色化する	f'\033[33m{x}\033[0m'
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
プラムにヒストグラムの色をセットする	plt.hist(データ列, color='plum')
目盛線	plt.grid(color='#800080')
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
日付データの表データのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
option: グラフの色をスノーに変更する	color = 'snow'
データフレームの指定した列がどれだけ、分散しているか確認する	df['列A'].var()
差を計算したい	X - Y
option: グラフの色をシャルトリューズに変更する	color = 'chartreuse'
コーラル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
データフレームの指定したカラムの中に日付データと文字列があるか調べる	df['列A'].isin([value, value2])
テンプレートをarg文字列を引数としてフォーマットする	書式.format(*args)
黒い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
オブジェクトはリストクラス	list = int<nl>isinstance(obj, list)
文字列を空白で分割して列挙する	文字列.split()
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
データフレームを２つの列ごとにグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
長さの制限した双方向キューをイテラブルから作る	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームの指定したカラムは正規分布からどの程度歪んでいるか見る	df['列A'].kurt()
nとkのnCk	math.comb(n, k)
線グラフの色を小麦色に変更する	plt.plot(データ列x, データ列y, color='wheat')
プロットの描画で濃く色を使う	sns.set(pallete='deep')
スピアマンでデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
データフレームの指定したカラムの尖度	df['列A'].skew()
n番目のカラムを除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: パレットトルコイズ色を使う	color = 'paleturquoise'
option: ダークブルーを使う	color = 'darkblue'
赤い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ベクトルの計算をする	import numpy as np
折れ線グラフの△マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
散布図に上三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
リストの要素をソートする	sorted(リスト)
データフレームをグループ化し、ある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
ファイル名がJSONファイルか	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
データフレームの選択した列のKurtosis	df[['列A', '列B']].kurt()
外れ値を除いたデータフレームのカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: 色をライトスレイグレーに指定する	color = 'lightslategrey'
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
青い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
縦棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
棒グラフをアンティークホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームの指定したカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
辞書の項目をひとつずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
文字列から右端を取り除いた文字列	文字列.removesuffix(部分文字列)
多次元データをt-SNEとして文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
option: グラフの色をアクアに指定する	color = 'aqua'
ベクトルを平坦化する	aArray.flatten()
線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線グラフに右三角印を使用する	plt.plot(データ列x, データ列y, marker='>')
表データの最初を見る	df.head()
辞書の値の一覧	list(辞書.values())
両端キューが空である	len(両端キュー) == 0
カウンタの上位をリストとして得る	aCounter.most_common(k)
データフレームの一部の列を千の位で丸める	df[['列A', '列B']].round(-3)
データフレームの記述統計量	df.describe()
option: グラフの色を貝殻に設定する	color = 'seashell'
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
配列をランダムにシャッフルしてリストにする	random.sample(配列, len(配列))
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
縦棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
現在の日付時刻を使う	datetime.datetime.today()
両端キューを配列から作成する	collections.deque(配列)
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
線グラフの色をブルーバイオレットにする	plt.plot(データ列x, データ列y, color='blueviolet')
option: ミディアムオーキッド色を使用する	color = 'mediumorchid'
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
列のユニークな値	df[col].unique()
ヒストグラムをサドルブラウン色を使って描画する	plt.hist(データ列, color='saddlebrown')
数字を見る	string.digits
文字列の開始位置より後に部分文字列が含まれないか	文字列.find(部分文字列, 開始位置) == -1
目的変数をモデルの予測値と対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
整数がタプルのいづれかかどうか調べる	aTuple = [0, 1, 2]<nl>整数 in aTuple
整数の左シフトを算出する	整数 << n
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
縦棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
イテラブルをシャッフルしてリストにする	random.sample(イテラブル, len(イテラブル))
レモンシフォン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
シスル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
バイアスなしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームのあるカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
表データのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
横棒グラフをライムグリーン色として描画する	plt.barh(データ列x, データ列y, color='limegreen')
option: ダークマゼンタを使用する	color = 'darkmagenta'
暗くカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
シーケンスをカウントしてカウンタから引く	aCounter.subtract(iterable)
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
タプルの要素を小さい順にソートする	sorted(タプル, reverse=False)
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
配列とリストの散布図にrgbの三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
書き出すCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
データフレームの指定したカラムの未入力値をメディアンに設定する	df['列A'].fillna(df['列A'].median())
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
レベッカパープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
指定した列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
いつまでも整数が繰り返すイテラブル	itertools.repeat(整数)
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームの選択したカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
折れ線グラフをティール色を使って描画する	plt.plot(データ列x, データ列y, color='teal')
赤色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
データフレームから重複を認めてランダムに100行をサンプリングする	df.sample(100, replace=True)
リストの要素を展開してプリントする	print(*リスト)
文字列を最後の部分文字列で二分する	文字列.rpartition(部分文字列)
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
option: 追加用に指定する	mode = 'a'
リストとデータ列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 茶色に色を設定する	color = 'brown'
配列の変遷を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
数値を改行なしに出力する	print(数値, end='')
実数の逆双曲線正接を求める	math.atanh(x)
データフレームをグループ化して、ヒストグラムを用いてプロット化する	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図のバツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
数列とデータ列の散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
指定したカラムのカテゴリで集計し、分散を計算する	df.groupby('列A').var()
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
改行を求める	'\n'
正規分布に基づくパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: スプリンググリーン色を使う	color = 'springgreen'
線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
rgbの星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
セットの全要素が別のセット2に含まれるか調べる	セット.issubset(セット2)
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
オレンジにヒストグラムの色を指定する	plt.hist(データ列, color='orange')
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
データフレームの選択した列の尖度	df[['列A', '列B']].skew()
大なりと条件に書きたい	X > Y
n×n2の２次元リスト	[[0] * n for _ in range(n2)]
データシリーズの欠損値を中央値で置換する	ds.fillna(ds.median())
行列の行ごとの平均値を求める	np.mean(aArray, axis=1)
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
キーが辞書上で定義済みかどうか調べる	キー in 辞書
識別子はフレームか確認する	inspect.isframe(識別子)
アルファベットが文字列中に含まれる	any(c.isalpha() for c in 文字列)
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
改行で文字列を分割し、文字列リストに変換する	文字列.splitlines()
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
1行だけ列を外したデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
行列の行ごとの合計値	np.sum(aArray, axis=1)
まとめて正規表現patternでreplにデータフレームの値を置換する	df.replace(pattern, repl, regex=True)
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
あるカラムの文字列が部分文字列で終わらない行を取り出す	df[~ df['列A'].str.endswith(部分文字列)]
散布図の左三角印を赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ベクトルにはいくつ要素が存在するか調べる	aArray.size
option: パパイヤウィップにグラフの色をする	color = 'papayawhip'
リッジ回帰分析を行う	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
自然数の階乗	math.factorial(n)
黒い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
文字列の示すエンコーディングで追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding=s)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in 辞書.items()}
リストから複数の要素をランダムに抽出する	random.sample(リスト, k=n)
ライトスチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームをグループ化し、各標準偏差を求める	df.groupby('列A').std()
データフレームの末尾10行を抽出する	df.tail(10)
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
option: 改行コードを動作環境依存に変更する	newline = None
最初の区切り記号で文字列を二分し、、前半を使う	文字列.partition(セパレータ)[0]
イテラブルと数列についての散布図に黒いクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
ボックスチャートを用いてデータ列を可視化する	plt.boxplot(データ列)
青い三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
レモンシフォン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
実数の二進対数	math.log2(x)
改行で区切ってxとyを出力する	print(x, y, sep='\n')
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
変数名が非同期ジェネレータか	inspect.isasyncgen(識別子)
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ディムグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの一部のカラムの中央値	df[['列A', '列B']].median()
データフレームの未入力値を最頻値で補完する	df.fillna(df.mode().iloc[0])
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
ミントクリーム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
折れ線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
option: ミディアムスプリンググリーンにフォントの色を変更する	color = 'mediumspringgreen'
ヒストグラムの色を白にする	plt.hist(データ列, color='white')
リストのイミュータブルな集合を作る	frozenset(リスト)
option: グラフの色をピンクにする	color = 'pink'
追加できるようにファイルパスをオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
データフレームをグループ化し、ある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
折れ線グラフを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
文字がひらがなか調べる	('ぁ' <= 文字 <= 'ん')
文字列中の部分文字列を新しい文字列に置き換える	文字列.replace(部分文字列, 置換後の文字列)
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームのあるカラムの値がxに等しくない行を抽出する	df[df['列A'] != x]
タプルのそれぞれを関数でフィルタする	filter(func, iterable)
折れ線グラフをラベンダー色を用いて描画する	plt.plot(データ列x, データ列y, color='lavender')
ValueMapで全て指定した列の値を置換する	df['列A'].replace(ValueMap)
タプルの長さ	len(タプル)
option: 色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
データ列と配列の散布図に赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ダイアモンド印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
折れ線グラフに右三角印を使う	plt.plot(データ列x, データ列y, marker='>')
データフレームの指定した列の記述統計量	df['列A'].describe()
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
文字列を走査しパターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
プロットで使うフォントを日本語に設定する	sns.set(font='IPAexGothic')
散布図に赤いクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
データ列の移り変わりを折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
データフレームのある列をリストとして抽出する	df['列A'].values.tolist()
データフレームを表示するとき小数点以下をn桁に設定する	pd.set_option('precision', n)
1行だけ標準入力から読む	sys.stdin.readline()
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
シエナ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
新しいロバスト分類モデルを準備する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: 色をスレートブルーに設定する	color = 'slateblue'
赤い四角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
変数の値を整数分の一にする	変数 //= 整数
大きさnで数列とリストの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
区切り記号で文字列を二つに分けて、後半を使う	文字列.partition(セパレータ)[-1]
リストから一つランダムに選んでリストにする	random.choice(リスト)
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
等差数列から乱数を生成する	random.randrange(start, end, step)
option: シエナにフォントの色を設定する	color = 'sienna'
option: ライトグリーンを用いる	color = 'lightseagreen'
空白文字を使う	string.whitespace
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
青いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
格子をグラフから消す	plt.grid(False)
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
タプルのn番目の	タプル[n]
option: グラフを破線に設定する	linestyle = 'dashed'
option: 色をライトシアンに設定する	color = 'lightcyan'
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
現在のミリ秒	int(time.time() * 1000)
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
データフレームの選択した列がどの程度正規分布から尖っているか見る	df[['列A', '列B']].skew()
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
配列の累積積	np.cumprod(aArray)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
option: ティール色を使用する	color = 'teal'
実行時の標準入力のソースがターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
option: ダークグレー色を用いる	color = 'darkgrey'
option: バッファリングのサイズを指定する	buffering = 4096
データシリーズを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データシリーズの中のNaNの合計を求める	ds.isna().sum()
辞書をJSON形式の文字列にする	json.dumps(辞書, ensure_ascii=False)
リストの全ての値をクリアにする	リスト.clear()
縦棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
t分布型確率的近傍埋め込み法を行う	model = sklearn.manifold.TSNE(n_components=n)
option: フォントの色をライトサーモンに変更する	color = 'lightsalmon'
ファイルパスのディレクトリ名を使う	os.path.dirname(filepath)
目盛り線	plt.grid(alpha=0.5)
リストの要素を並べ変える	sorted(リスト)
散布図のポイント印の線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
辞書の項目名をひとつずつ処理する	for key in 辞書.keys():<nl><tab>print(辞書[key])  # FIXME
数式を簡略化する	sympy.sympify(数式)
両端キューは空でないかどうか	len(両端キュー) != 0
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
グリッド線	plt.grid(color='#800080')
数式のyについてのn階微分を求める	sympy.diff(数式, y, n)
赤い実線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
数列とリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
xを水色化する	f'\033[36m{x}\033[0m'
文字列中にひとつでも英数字が含まれるか	any(c.isalnum() for c in 文字列)
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
t-SNEで要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
閾値を用いてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
整数を整数で割ってその結果を切り上げる	(整数 + 整数2 - 1) // 整数2
プロットにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
青い実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
リストとイテラブルについての散布図に黒い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
イテラブルをカウンタにする	collections.Counter(iterable)
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
訓練データで単回帰モデルを学習する	model.fit(説明変数, 目的変数)
ガウス過程分類モデルを作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの一部のカラムが正規分布からどの程度尖っているか確認する	df[['列A', '列B']].skew()
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
二つの数値を順に出力する	print(数値, 数値)
リストをランダムにシャッフルしてリストにする	random.sample(リスト, len(リスト))
分類モデルの決定係数を計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
折れ線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
n回要素が繰り返す列	itertools.repeat(要素, n)
アルファベットの大文字を全部使う	string.ascii_uppercase
列と列の直積	itertools.product(iterable, iterable2)
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
リストn番目から値を除く	リスト.pop(n)
データフレームとしてエクセルを読み込む	pd.read_excel('file.xlsx')
イテラブルとリストについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
nからstep間隔でいつまでも数え上げる	itertools.count(start=n, step=step)
昇順にタプルをソートする	sorted(タプル, reverse=True)
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームの指定したカラムを丸める	df['列A'].round()
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
リストを文字列として、タブで結合する	'\t'.join(map(str, リスト))
シーケンスとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
リストとリストについての散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームの一部の列のモード	df[['列A', '列B']].mode()
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
実数が有限か調べる	math.isfinite(x)
データフレームの一部の列の文字列を未入力値にする	df[['列A', '列B']].replace(値, np.nan)
実数とyの斜辺を計算する	math.hypot(x, y)
option: ラベンダーブラッシュ色を使用する	color = 'lavenderblush'
識別子はジェネレータか調べる	inspect.isgenerator(識別子)
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
ピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームからあるデータ型の列名の一覧を使う	df.select_dtypes(型).columns
数値がセットに含まれないかどうか調べる	数 not in セット
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
nと整数が等しいか調べる	整数 == 整数2
配列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
option: 印を菱形に変更する	marker = 'D'
符号付きで整数をバイナリに変換する	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
列の不偏分散を計算する	df['列A'].var(ddof=1)
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
option: ライトブルー色を使う	color = 'lightblue'
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
n個に等量でデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
データフレームのNaNを最大値で補う	df.fillna(df.max())
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategray')
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
ライトグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
数列から重複を取り除く	set(数列)
配列とリストの散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
データフレームをある列によって並べ、、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
散布図をダークシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームの選択した列の中にある文字列と文字列の数を数える	df[['列A', '列B']].isin([value, value2]).sum()
整数乱数で要素を埋めた行列を作成する	np.random.randint(開始値, 終了値, (行数, 列数))
作画のフォントを日本語表示にセットする	sns.set(font='IPAexGothic')
ベクトルの行ごとの最大を調べる	np.max(aArray, axis=1)
ミスティローズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
文字列中のタブ文字を空白に置き換える	文字列.expandtabs(tabsize=n)
作画で用いる色を指定する	sns.set(pallete=パレット名)
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
標準エラーを使う	sys.stderr
ネイビー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
整数をバイト列にする	整数.to_bytes(length=バイト数, byteorder='big')
黒い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
偽陽性を抑えたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ある列の欠損値を直後の値で補完する	df['列A'].fillna(method='bfill')
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
option: 半透明にする	alpha = 0.5
大文字・小文字を無視して正規表現を事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
黒い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
option: フォレストグリーンにフォントの色を設定する	color = 'forestgreen'
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
データフレームの一部のカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
両端キューの末尾に文字列を追加する	両端キュー.append(文字列)
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
閾値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
リストの先頭のn要素を除く	リスト[n:]
整数が1、もしくは2か	整数 == 1 or 整数 == 2
回帰木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームの指定したカラムを10の位で丸める	df['列A'].round(-1)
散布図を▲マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='^')
紺色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
変数の値を切り捨てながら整数分の一にする	変数 //= 整数
データシリーズの空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
ヒストグラムを淡いピンク色色を使って描画する	plt.hist(データ列, color='lightpink')
赤い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
円グラフにラベルを設定する	plt.pie(データ列, startangle=90, labels=ラベル列)
スチールブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
データフレームのインデックスの名前をまとめて付け直す	df.rename(index={x: y})
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
四角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
標準出力がパイプか	not sys.stdout.isatty()
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: エラーを無視するように設定する	errors = 'ignore'
データフレームの指定した列は正規分布からどれだけ、尖っているか見る	df['列A'].skew()
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
x,y,zを順に表示する	print(x, y, z)
データフレームをグループ化し、それぞれの個数を計算する	df.groupby('列A').count()
データシリーズが何日か見る	ds.dt.day
散布図の▼印の色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
データフレームのあるカラムが何月か見る	df['列A'].dt.month
データシリーズのタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
折れ線グラフの色をフローラルホワイトに指定する	plt.plot(データ列x, データ列y, color='floralwhite')
文字列を最後の区切り記号で二つに分け、残りを見る	文字列.rpartition(セパレータ)[-1]
実数は有限か	math.isfinite(x)
部分集合	セット.issubset(セット2)
両端キューの中に整数があるかどうか調べる	整数 in 両端キュー
タプルの要素を昇順に並べる	sorted(タプル, reverse=False)
predicateFuncがTrueとならない列の要素	itertools.dropwhile(predicateFunc, iterable)
線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの一部のカラムの標準偏差など	df[['列A', '列B']].describe()
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
散布図の色をティールにする	plt.scatter(データ列x, データ列y, color='teal')
option: ラベンダーにグラフの色を指定する	color = 'lavender'
リストと配列リストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
変数xについて数式の積分を算出する	sympy.integrate(数式, [|変数]x)
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
option: ネイビー色を使用する	color = 'navy'
辞書をJSON形式を用いてファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
ライトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
イテラブルと数列についての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
整数が-9以上、9以下かどうか調べる	-9 <= 整数 <= 9
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: グラフの色をトマトに設定する	color = 'tomato'
散布図の△印の太さを指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフのバツマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
文字列の左側からタブを除く	文字列.lstrip('\t')
マップのエントリ数	len(辞書)
option: 読み込まないフッタをnにセットする	skipfooter = n
option: アクアマリンにグラフの色をする	color = 'aquamarine'
カウンタの正のカウントだけ残す	+aCounter
データフレームから重複を認めてランダムに5行をサンプリングする	df.sample(5, replace=True)
カテゴリ別で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
リストから標本抽出する	random.sample(リスト, 抽出したい個数)
option: グラフの色をインディゴに設定する	color = 'indigo'
データ列をフォーマットを使って日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
カウンタの正の数のみ残す	+aCounter
option: マゼンタにフォントの色を設定する	color = 'magenta'
折れ線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
散布図をライトコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
線グラフの色をベージュにする	plt.plot(データ列x, データ列y, color='beige')
データフレームの末尾10行を選択する	df.tail(10)
xを浮動小数点数にする	float(x)
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
ランダムに5行を重複を認めてデータフレームからサンプリングする	df.sample(5, replace=True)
指定したカラムの母標準偏差を求める	df['列A'].std(ddof=0)
デフォルトでプロットをいい感じに設定する	sns.set()
折れ線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
二つの列からグループ化し個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
単回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
リストが空かテストする	len(リスト) == 0
折れ線グラフの下三角印の色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームの一部のカラムを一万の位で丸める	df[['列A', '列B']].round(-4)
2つのベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(配列, 'norm')
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データをJSONにエンコードする	json.dumps(データ, ensure_ascii=False)
データ列の折れ線グラフを▽印として描画する	plt.plot(データ列x, データ列y, marker='v')
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
開始位置から終了位置までに部分文字列がいくつか含まれるか調べる	文字列.count(部分文字列, 開始位置, 終了位置)
データフレームのあるカラムをダミー変数にする	pd.get_dummies(df['列A'])
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
配列とリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
実数は有限か調べる	math.isfinite(x)
タイムスタンプデータは何時か知る	aDatetime.hour
データフレームの中に文字列と文字列がいくつあるか求める	df.isin([value, value2]).sum()
option: ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
配列とリストについての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
リストをJSON形式でファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
整数が負の数か調べる	整数 < 0
整数がn回続く列	itertools.repeat(整数, n)
多次元データを主成分分析で文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
散布図に赤い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
方程式として数式の変数の解を求める	sympy.solve(数式, y)
データシリーズの曜日が何日目か見る	ds.dt.dayofweek
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
option: グラフの色をシエナに指定する	color = 'sienna'
データフレームを二つの列によってソートする	df.sort_values(by=['列A', '列B'])
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
データシリーズの中にいくつ日付データが存在するか数える	ds.isin([value]).sum()
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
各グループ列ごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
リストとイテラブルについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データ列の各値の出現回数	ds.value_counts()
データフレームを複数の列で昇順に並べ直して、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
x軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
横棒グラフをゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='goldenrod')
ヒストグラムの色をレベッカパープルにセットする	plt.hist(データ列, color='rebeccapurple')
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
散らばりを可視化する	plt.scatter(データ列x, データ列y)
文字列が全て数字か	文字列.isdigit()
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
横棒グラフをペールグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='palegreen')
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームの一部のカラムのNaNを直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
ファイルパスを開いて]、読み込みストリームを見る	'r' = 'a'<nl>open(filepath, mode='r')
実数のn乗の実数剰余	pow(x, n, y)
n行をデータフレームからランダムに重複ありでサンプリングする	df.sample(n, replace=True)
option: ライトサーモン色を用いる	color = 'lightsalmon'
データ列の偏りを平方根変換する	np.sqrt(データ列)
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
日付データが日付データよりあと	aDate > aDate2
データフレームのカラムの最頻値を求める	mode, count = scipy.stats.mode(df['列A'])
データフレームの選択した列の欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
ファイルから1文字、読み込む	f.read(1)
データフレームの選択した列の欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データフレームの列間の相関行列を計算する	df.corr()
再帰エラーを防ぐ	sys.setrecursionlimit(1000000)
xを太文字で出力する	print(f'\033[1m{x}\033[0m')
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ライトスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightskyblue')
データフレームをある列のカテゴリを用いてグループ化してそれぞれのグループごとの件数を知る	df.groupby('列A').size()
データフレームをグループ化し、あるカラムに対し平均値を求める	df.groupby('列A')['列B'].mean()
リストを反転する	reversed(リスト)
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
アルファベットの大文字を全部求める	string.ascii_uppercase
赤い菱形マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
散布図に下三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
散布図をダークターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ある列の文字列が正規表現文字列にマッチしない行を抽出する	df[~df['列A'].str.match(正規表現)]
和を欲しい	X + Y
本日のタイムスタンプ	datetime.datetime.today()
データフレームの選択したカラムの欠損値を最頻値で置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
文字列が別のに存在するかどうか	文字列 not in 別の文字列
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
散布図をミスティローズ色を使って描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
セットから例外なく文字列を除去する	セット.discard(文字列)
データフレームの数値をまとめて四捨五入する	df.round()
データシリーズの欠損値を前の値で埋める	ds.fillna(method='ffill')
データフレームのカラムの各データ値の出現数を算出する	df[col].value_counts()
みっつの条件がいずれか成り立つ	条件 or 条件2 or 条件3
データフレームの指定したカラムの歪度	df['列A'].kurt()
文字列から部分文字列を全て除去する	文字列.replace(部分文字列, '')
ファイルをオープンして]、書き込みストリームを見る	'w' = 'a'<nl>open(filepath, mode='w')
最適な位置にデータラベルを表示する	plt.legend(loc='best')
折れ線グラフの大バツ印の大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
xでデータフレームの選択したカラムの未入力値を埋める	df[['列A', '列B']].fillna(x)
リストとリストの散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
最小値でデータフレームの指定したカラムの未入力値を置換する	df['列A'].fillna(df['列A'].min())
データフレームの列をヒストグラムにする	plt.hist(df[column])
option: グラフの色をパールバイオレットレッドに指定する	color = 'palevioletred'
option: ゴールデンロッドを使う	color = 'goldenrod'
グリッド線を青くする	plt.grid(color='b')
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ふたつのカラムからグループ化し分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
上限指定をしたデータフレームのカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
文字列の右側から空白を取り除く	文字列.rstrip()
整数が-9以上9以下かどうか	-9 <= 整数 <= 9
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの選択した列の不偏分散を算出する	df[['列A', '列B']].var(ddof=1)
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームのカラムのNaNを前の値に設定する	df['列A'].fillna(method='ffill')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
最大値・最小値を使って乱数を生成する	random.randint(最小値, 最大値)
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
NaNも加えてデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], dummy_na=True)
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
配列の行ごとの合計値	np.sum(aArray, axis=1)
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategrey')
識別子はジェネレータかどうか調べる	inspect.isgenerator(識別子)
データフレームの行を範囲指定して抽出する	df[start:end]
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームのあるカラムの日	df['列A'].dt.day
レモンシフォン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームの一部のカラムが正規分布からどの程度尖っているか調べる	df[['列A', '列B']].skew()
オブジェクトはジェネレータかどうか判定する	inspect.isgenerator(オブジェクト)
整数の8進表記	oct(整数)
option: 色をオリーブに設定する	color = 'olive'
オブジェクトはジェネレータ関数か調べる	inspect.isgeneratorfunction(オブジェクト)
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
カラムの種類を見る	df.info()
文字列をカンマで分割して、文字列リストに変換する	文字列.split(',')
複数のデータ列を箱髭図にする	plt.boxplot([データ列, データ列])
ヒストグラムの色をグレーにセットする	plt.hist(データ列, color='gray')
ライトブルーにヒストグラムの色をセットする	plt.hist(データ列, color='lightblue')
データシリーズはどの程度、分散しているか見る	ds.var()
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
データフレームのカラムを散布図で見る	sns.scatterplot(data=df, x='列名', y='列名')
青い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
option: フォントの色をライトシアンにする	color = 'lightcyan'
option: ライトブルーを使用する	color = 'lightblue'
エクセルファイルを読み込む	pd.read_excel('file.xlsx')
option: コーラルを使う	color = 'coral'
データフレームをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
整数の二乗を計算する	整数 ** 2
option: ベージュ色を用いる	color = 'beige'
option: セパレータを文字列にする	sep = s
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データシリーズの中にいくつ文字列があるか数える	ds.isin([value]).sum()
両端キューから最初の要素を取り除く	両端キュー.remove(要素)
十六進数文字列をバイト列にする	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
option: グリーンイエローを用いる	color = 'greenyellow'
xを黒色で表示できる文字列に変換する	f'\033[30m{x}\033[0m'
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
データシリーズの統計量	ds.describe()
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームをExcelファイルで書き出す	df.to_excel('file.xlsx')
棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームの複数の列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
散布図のポイントマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
リストの要素を文字列として、文字で連結する	文字.join(map(str, リスト))
散布図のポイント印を青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームの選択したカラムの第一四分位数を計算する	df[['列A', '列B']].quantile(0.25)
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
両端キューの先頭から要素を取り出す	両端キュー.popleft()
配列を等しい量になるようにn個にビン分割する	pd.qcut(aArray, n)
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムの色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列からタブを全て取り除く	文字列.replace('\t', '')
ロバストなクラス分類を行う	model = sklearn.linear_model.HuberClassifier()
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategrey')
データフレームがどの程度分散しているか確認する	df.var()
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームのカラムを散布図でグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
option: 右三角マーカーを使用する	marker = '>'
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
リストの長さだけ繰り返す	range(len(リスト))
データ列とリストについて散布図を描画して、文字列という補足用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
ある列の文字列が正規表現文字列にマッチしない行を選択する	df[~df['列A'].str.match(正規表現)]
データフレームを2つのカラムによって小さい順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=True)
数式をxについてn階微分する	sympy.diff(数式, [|変数]x, n)
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
predicateFuncが真となるタプルの要素	itertools.takewhile(predicateFunc, iterable)
分割数nでリストをビン分割する	pd.cut(aList, n)
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
ヒストグラムの色をターコイズにセットする	plt.hist(データ列, color='turquoise')
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: 決定木の深さを制限する	maxdepth = n
二つの整数の和	整数 + 整数2
PLSを使って回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
欠損値がある行を取り除く	df.dropna(inplace=True)
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
数式のn階微分を行う	sympy.diff(数式, [|変数]x, n)
書き込みできるようにファイルをオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
データフレームの列の名前一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
スピアマンの相関係数を算出する	scipy.stats.spearmanr(df['列A'], df['列B'])
option: 不偏分散を用いる	ddof = 1
わり算の切り捨てを書きたい	X // Y
option: グラフの色をクリムゾンにする	color = 'crimson'
クリムゾン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームを指定された列によって並べる	df.sort_values(by='列A')
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
文字列を最後の区切り文字で二分して、残りを使う	文字列.rpartition(セパレータ)[-1]
ヒストグラムの色をピーチパフに指定する	plt.hist(データ列, color='peachpuff')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフの丸マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データ列をリストを境界値としてビニングする	pd.cut(ds, aList)
ネイビー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: ライトコーラルを使う	color = 'lightcoral'
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
ライトコーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
数列をダミー変数に変換する	pd.get_dummies(数列)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
補助目盛を有効にする	plt.minorticks_on()
２つの浮動小数点数が十分に近いか	math.isclose(x, x2)
文字列を部分文字列を用いて区切り、、列挙する	文字列.split(部分文字列)
ヒストグラムをオリーブ色を用いて描画する	plt.hist(データ列, color='olive')
辞書からカウンタを生成する	collections.Counter(aDict)
option: グレーを用いる	color = 'grey'
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
ふたつの集合に共通する要素からなる集合を求める	セット.intersection(セット2)
折れ線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategray')
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
折れ線グラフをティール色を用いて描画する	plt.plot(データ列x, データ列y, color='teal')
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
二乗が書きたい	X ** 2
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
ガンマ関数の値を求める	math.gamma(x)
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
option: アクア色を用いる	color = 'aqua'
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
プロットの用途を画面に指定する	sns.set(context='notebook')
xを文字列に変換する	str(x)
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
八進文字列をバイト列に変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
文字列中の文字を別の文字へ置き換える	文字列.replace(部分文字列, 置換後の文字列)
ロバストな線形分類器を作成する	model = sklearn.linear_model.HuberClassifier()
グリーンイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの最初100行	df.head(100)
アルファベットからランダムにひとつ選ぶ	random.choice(string.ascii_uppercase)
カンマ区切りのファイルのn行目をインデックスとして読む	pd.read_csv('file.csv', index_col=n)
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
リストの各値を関数に適用した結果でソートする	sorted(リスト, key=func)
ヒストグラムをゴーストホワイト色として描画する	plt.hist(データ列, color='ghostwhite')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: プリントの終端に文字列を用いる	end = 文字列
主成分分析で文字列次元に削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ロバスト推定として回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
もしコマンド引数が指定したなら、処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
折れ線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
Xの累乗を求めたい	X ** Y
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
option: 論理値型を使用する	np.int32 = np.int<nl>dtype = np.int32
option: ライトスカイブルーを使う	color = 'lightskyblue'
文字列は文字列より辞書順で前かどうか調べる	文字列 < 文字列2
列のコンビネーション	itertools.combinations(iterable, n)
データフレームの一部の列の標本分散	df[['列A', '列B']].var(ddof=0)
ファイルとfilenameを結合する	os.path.join(filepath, filename)
整数のビット長を確認する	整数.bit_length()
リストをビン数nでビニングする	pd.cut(aList, n)
日付データの月数を見る	aDate.month
横棒グラフをミディアムパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
アルファベットの文字列	string.ascii_letters
3つの計算結果を順に表示する	print(式, 式, 式)
棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
ヒストグラムをパールバイオレットレッド色を用いて描画する	plt.hist(データ列, color='palevioletred')
変数の値を半分にしたい	X /= 2
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
グラフの描画でパステル調にカラーパレットを使用する	sns.set(pallete='pastel')
文字列を左寄せする	文字列.ljust(文字列幅)
オブジェクトがコードか	inspect.iscode(オブジェクト)
文字列を部分文字列で二分割して、前の方を求める	文字列.partition(部分文字列)[0]
縦棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
データシリーズの不偏標準偏差を求める	ds.std()
行列の最大	np.max(aArray)
option: グラフの色を茶色に変更する	color = 'brown'
option: 三角マーカーを加える	marker = '^'
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームの分散	df.var()
小数点数の逆双曲線余弦	math.acosh(x)
データフレームのn行まで抽出する	df[:n]
option: 四角印を加える	marker = 's'
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ヒストグラムの区間数を設定する	plt.hist(データ列, bins=区関数)
配列とリストについて散布図を描き、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図を赤いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
option: トマト色を用いる	color = 'tomato'
行列と同じ大きさの空の配列を作成する	np.empty_like(aArray)
文字列の左側から部分文字列を取り除く	文字列.lstrip(部分文字列)
散布図にrgbの星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
ダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D')
実数を切り上げる	math.ceil(x)
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
黄緑にヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
イテラブルから行列を初期化する	np.array(iterable)
折れ線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
外れ値に強い単回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
縦棒グラフをパレットトルコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
数列の要素を両端キューの末尾に追加する	両端キュー.extend(数列)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
２つの列を用いてデータフレームを並べる	df.sort_values(by=['列A', '列B'])
プロットにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
折れ線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
日付データが日曜日かテストする	aDate.weekday() == 6
オブジェクトの属性を消す	delattr(obj, プロパティ名)
縦棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
実数のタンジェント	math.tan(x)
リストを行列にする	np.array(aList)
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
折れ線グラフをバツ印として描画する	plt.plot(データ列x, データ列y, marker='x')
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: データ型を指定する	np.int16 = np.int<nl>dtype = np.int16
棒グラフをミディアムアクアマリン色を使って描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
配列の各要素を双方向キューの末尾に追加する	両端キュー.extend(配列)
数列の四分位を可視化する	plt.boxplot(データ列)
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
グラフをプロットする準備をする	import matplotlib.pyplot as plt
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
日付データからn秒分、引く	aDate - datetime.timedelta(seconds=n)
既存の行列を元にして全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
データフレームの中の欠損値の合計を数える	df.isna().sum()
ある列のカテゴリごとの最小値を計算する	df.groupby('列A').min()
青い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
セットにリストの要素を全て追加する	セット.update(リスト)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
黒い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
改行しないで計算結果を表示する	print(式, end='')
散布図にポイント印を加える	plt.scatter(データ列x, データ列y, marker='.')
教師データとしてモデルを学習する	model.fit(説明変数, 目的変数)
option: 色をオールドレースに指定する	color = 'oldlace'
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
散布図に△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データフレームの中に文字列と文字列があるかどうか判定する	df.isin([value, value2])
線グラフの色をダークバイオレットに指定する	plt.plot(データ列x, データ列y, color='darkviolet')
配列をリストから作る	np.array(aList)
カラムの値をreplに正規表現patternでまとめて変更する	df['列A'].replace(pattern, repl, regex=True)
黄色にする	f'\033[33m{x}\033[0m'
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
文字列を空白で区切って、文字列リストに変換する	文字列.split()
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
文字列の終了位置より前に部分文字列が存在しない	文字列.find(部分文字列, 0, 終了位置) == -1
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
option: マーカーの線幅を変える	markeredgewidth = 2.5
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
2つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
折れ線グラフをゲインズボロ色を使って描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームを列名を指定して内部結合する	pd.merge(df, df2, on='列A', how='inner')
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
xを浮動小数点数型に変換する	float(x)
アイボリー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームの一部の列を整数に丸める	df[['列A', '列B']].round()
辞書からカウンタを作る	collections.Counter(aDict)
日付時刻データからn日分、引く	aDatetime - datetime.timedelta(days=n)
イテラブルを累加した列	itertools.accumulate(iterable)
option: フォントの色をスプリンググリーンに変更する	color = 'springgreen'
文字列をバイト配列にする	bytearray(s)
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
option: ゲインズボロを使う	color = 'gainsboro'
折れ線グラフの三角印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
グラフの色を全般的に明るくする	sns.set(pallete='bright')
option: 改行を区切りで使用する	sep = '\n'
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
文字列の無限のイテラブルを得る	itertools.repeat(element)
横棒グラフをオールドレース色を用いて描画する	plt.barh(データ列x, データ列y, color='oldlace')
データシリーズの月を見る	ds.dt.month
散布図のダイアモンド印の色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
横棒グラフを淡いピンク色色を使って描画する	plt.barh(データ列x, データ列y, color='lightpink')
セットから整数を除く	セット.remove(数)
スクリプトのファイル名を知る	sys.argv[0]
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
sepを区切りとして文字列リストを結合する	sep.join(文字列リスト)
積み上げ棒プロットを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データシリーズの時刻	ds.dt.hour
option: バイアスを計算しない	fit_intercept = False
折れ線グラフの色を真紅に指定する	plt.plot(データ列x, データ列y, color='crimson')
カウンタ間で共通部分演算する	aCounter & aCounter2
実数を小数点数で割った剰余を求める	math.remainder(x, x2)
option: グラフの色をスラグレーに設定する	color = 'slategrey'
整数がセットのメンバーに含まれるか調べる	数 in セット
文字列中に非英数字が含まれるか	any(not c.isalnum() for c in 文字列)
スタックのn番目に整数を差し込む	両端キュー.insert(n, 整数)
平均線付き箱ヒゲ図を描く	plt.boxplot(データ列, meanline=True)
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: オリベドラブを使用する	color = 'olivedrab'
ラインを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
グラフをイイ感じに設定する	sns.set()
deqのstart〜endの要素を使う	collections.deque(itertools.islice(deq, start, end))
グラフを画面に指定する	sns.set(context='notebook')
UNIX秒のデータ列からタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフをミントクリーム色を用いて描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
タプルの要素を展開してプリントする	print(*タプル)
散布図の印を四角印にする	plt.scatter(データ列x, データ列y, marker='s')
その平均値でデータフレームの選択したカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
文字列が全て大文字か調べる	文字列.isupper()
散布図に赤いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムの色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
文字が指定した文字列に含まれないか確認する	文字 not in 文字列
データフレームのNaNを最大値に設定する	df.fillna(df.max())
配列とリストについて散布図をプロットしてマーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
option: 黄色色を使う	color = 'yellow'
辞書の全項目をクリアする	辞書.clear()
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
最大値としてデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
一点鎖線を用いてヒストグラムをプロットする	plt.hist(データ列, linestyle='dashbot')
文字列がリストのいずれか	文字列 in リスト
線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
いつまでも整数が繰り返すイテレータを使う	itertools.repeat(整数)
列をビン数nでビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
本日の年数	datetime.datetime.today().year
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
配列のスピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
標準出力のバッファをフラッシュする	sys.stdout.flush()
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
データシリーズが何曜日か見る	ds.dt.weekday_name
数列とリストについて散布図を描画して、その大きさをnにセットする	plt.scatter(データ列x, データ列y, s=n)
三つの条件が成り立つ	条件 and 条件2 and 条件3
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
文字列中にひとつでも非アルファベットがあるか	any(not c.isalpha() for c in 文字列)
黒い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
Pythonパスにディレクトリを追加する	sys.path.append(ディレクトリ名)
データ列間のMAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
文字列をコロンを用いて二分する	文字列.partition(':')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
配列から重複なく、n要素ランダムに選んでリストにする	random.sample(配列, k=n)
データフレームのある列のどの値が頻出か見る	df['列A'].mode()
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
データシリーズの欠損値を平均値で埋める	ds.fillna(ds.mean())
データフレームのある列をインデックスに設定する	df.set_index('列A')
配列の列ごとの平均値を求める	np.mean(aArray, axis=0)
外れ値を除いた配列の算術平均を使う	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームのカラムの種類を確認する	df.info()
三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
数列の長さを制限する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
データ列を横棒プロットにする	plt.barh(ラベル列, データ列)
整数が-9以上、9以下かどうか確認する	-9 <= 整数 <= 9
データフレームの一部のカラムの空文字を欠損値に変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
日付データが日曜日か確認する	aDate.weekday() == 6
データフレームの指定した列を万の位で丸める	df['列A'].round(-4)
辞書のキーをリストに変換する	list(辞書.keys())
ヒストグラムの色をベージュに変更する	plt.hist(データ列, color='beige')
数値がセットのいずれかどうか調べる	数 in セット
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
折れ線プロットをプロットして、RGBで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
二つのリストの積集合を求める	list(set(リスト).intersection(set(リスト2)))
バイトオーダを知る	sys.byteorder
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームの列を折れ線グラフとして図示する	plt.plot(df[column], df[column])
横棒グラフをミントクリーム色を用いて描画する	plt.barh(データ列x, データ列y, color='mintcream')
option: アイボリーを使用する	color = 'ivory'
散布図を黒い丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
データフレームから数値データを取り出す	df.select_dtypes('number')
数列のイミュータブルな集合を作る	frozenset(数列)
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
シーケンスと列の直積	itertools.product(iterable, iterable2)
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
イエローグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
2つの変数の値を順にプリントする	print(変数名, 変数名)
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
ファイルを読み込み用にオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
プロットにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
列名を指定してデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
option: ブラウンを使う	color = 'brown'
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
option: コロンを分割記号で使う	sep = ':'
16進数文字列をバイナリにする	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
閾値としてデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: ダークオレンジにグラフの色を設定する	color = 'darkorange'
データフレームのカラムの名前一覧である列をドロップする	df.drop(columns, axis=1, inplace=True)
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
分類モデルのリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
一時的に動作しないようにしたい	# コメント
ある列を千の位で丸めて、整数にする	df['列A'].round(-3).astype(int)
データシリーズの要約統計量を算出する	ds.describe()
部分的最小二乗法として回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームの指定したカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
xの小数点以下'5'桁までをプリントする	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
データフレームのモードを計算する	df.mode()
ミディアムオーキッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
整数がnの倍数	整数 % n == 0
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
文字列中にひとつもアルファベットがないかどうか確認する	any(not c.isalpha() for c in 文字列)
イテラブルとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
PLSで回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
バイナリ書き込みモードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='wb')
実数の三乗	x ** 3
ヒストグラムをパープル色を用いて描画する	plt.hist(データ列, color='purple')
文字列をJSON形式で出力に出力する	json.dump(文字列, ファイル出力, ensure_ascii=False)
整数を十六進数リテラルに変換する	hex(整数)
文字列が全てアルファベットかどうか調べる	文字列.isalpha()
現在が何年か知る	datetime.datetime.today().year
両端キューの中に要素が存在する	要素 in 両端キュー
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
本日の曜日を使う	datetime.datetime.today().weekday()
数列と数列について散布図を描いてマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
小数点数は有限か確認する	math.isfinite(x)
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
リストから重複なく、ランダムにn個選んでリストにする	random.sample(リスト, k=n)
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
双方向キューの左	両端キュー[0]
配列と数列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
JSONファイルを構文解析する	with open('file.json') as f:<nl><tab>data = json.load(f)
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
文字列を最後のカンマで二分し、残りを見る	文字列.rpartition(',')[-1]
等しい量になるようにリストをビン数nとして分割する	pd.qcut(aList, n)
リスト内の要素が全て真か調べる	all(リスト)
日付データにn日分加える	aDate + datetime.timedelta(days=n)
n回だけ文字列中の文字を置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
データフレームを表示するとき、ヘッダー行を右寄せにする	pd.set_option('colheader_justify', 'right')
スクリプトファイルと同じディレクトリのファイルパスのパスを見る	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
異なる列をキーにして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
option: 色をチョコレートに設定する	color = 'chocolate'
ホワイトスモーク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
散布図をライトスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
部分文字列がsubで始まるかどうか	文字列.startswith(部分文字列)
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
option: グラフの種類を破線に設定する	linestyle = 'dashed'
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
ユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
追加モードでファイルパスをオープンして]、fとする	f = open(filepath, mode='a')
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
year年month月day日を日付にする	datetime.date(year=year, month=month, day=day)
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
小数点数の余弦	math.cos(x)
整数同士のビット和	整数 | 整数2
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
折れ線グラフの三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
配列のケンドールの相関係数を計算する	scipy.stats.kendalltau(配列, 配列2)
柱状図でデータ列を作図する	plt.hist(データ列)
横に並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
平均線付きボックスチャートを描画する	plt.boxplot(データ列, meanline=True)
option: 整数型を用いる	np.int = np.int<nl>dtype = np.int
双方向キューの要素を右にローテーションする	両端キュー.rotate(1)
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
折れ線グラフの下三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図の左三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
二点間のユークリッド距離	math.dist(point, point2)
option: コロンを区切りで使う	sep = ':'
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(配列)
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
カーキ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
ある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
option: ライトスレイグレーを用いる	color = 'lightslategrey'
両端キュー中の要素を数える	両端キュー.count(要素)
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: 青緑にグラフの色をする	color = 'teal'
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
綺麗なグラフを用いる	import seaborn as sns
ダーク・スラテグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの行リスト	df.index
縦棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
改行しないで数値をプリントする	print(数値, end='')
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
表データのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
整数が3で割り切れるかどうか確認する	整数 % 3 == 0
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
「かつ」と書きたい	条件式 and 条件式2
型のサブクラスか確認する	issubclass(サブクラス, クラス)
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列をn回だけ置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
異なる列をキーにしてデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
文字列を左寄せにする	文字列.ljust(文字列幅)
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
データシリーズはどの程度、正規分布から尖っているか調べる	ds.skew()
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: 最初のカラムを行に設定する	index_col = 0
ある列のカテゴリで集計し、標準偏差を求める	df.groupby('列A').std()
データフレームの先頭10行	df.head(10)
データフレームにおいてどの値が最も出現するか見る	df.mode()
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
辞書にキーワード引数で更新する	辞書.update(**kwargs)
線形モデルの回帰変数	model.coef_
データフレームを表示するとき小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
実数をn乗する	x ** n
指定したカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
リストをビニングする	pd.cut(aList, aList)
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: フォレストグリーンにフォントの色を変更する	color = 'forestgreen'
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
列の文字列長を列として求める	ds.str.len()
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: グラフの色を耐火レンガに変更する	color = 'firebrick'
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームのカラムの文字列長を列として見る	df[col].str.len()
文字列をエンコーディングでバイト列にする	文字列.encode(encoding=encoding)
option: フォントの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
辞書からキーで指定された項目をポップする	辞書.pop(キー)
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
CSVファイルにデータフレームをインデックスを付けず保存する	df.to_csv('file.csv', index=None)
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategray')
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
下線付きでプリントできる文字列に変換する	f'\033[4m{x}\033[0m'
データシリーズをPandasの日付型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
上位集合か調べる	セット.issuperset(セット2)
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
option: ミディアムブルー色を用いる	color = 'mediumblue'
option: グラフの色をダークグレーに設定する	color = 'darkgray'
配列の平均値	np.mean(aArray)
表データのあるカラムの曜日数を使う	df['列A'].dt.dayofweek
データフレームをある列で大きい順に破壊的に並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
条件がみっつとも同時に成り立つ	条件 and 条件2 and 条件3
option: グラフの色をビスクにする	color = 'bisque'
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
プラム色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
option: カーキ色を使用する	color = 'khaki'
グラフに補足を加える	plt.legend(['凡例A', '凡例B'])
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
整数を八進数文字列に変換する	oct(整数)[2:]
リストから両端キューを作成する	collections.deque(リスト)
星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*')
既存のベクトルを元に全要素が0の配列	np.zeros_like(aArray)
本日が日曜日	datetime.datetime.today().weekday() == 6
プロットで使うフォントを指定する	sns.set(font=フォント名)
option: グラフの色をスラグレーにセットする	color = 'slategray'
option: 線種を破線に設定する	linestyle = 'dashed'
日付データが日付データよりあとか調べる	aDate > aDate2
線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
自然数の最大公約数	math.gcd(n, n2)
ランダムに5行をデータフレームから選択する	df.sample(5)
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームの選択したカラムの中にある文字列の数を数える	df[['列A', '列B']].isin([value]).sum()
2つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
部分文字列が文字列の開始位置以降に含まれるか調べる	文字列.find(部分文字列, 開始位置) != -1
ValueMapで一度にデータシリーズの値を置換する	ds.replace(ValueMap)
赤色でxをプリントする	print(f'\033[31m{x}\033[0m')
リストをn個にビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
あるカラムの値がxより多い行を抽出する	df[df['列A'] > x]
全要素が初期値の行列を初期化する	np.full((行数, 列数), 初期値, dtype=np.int)
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
データフレームの一部の列の第三四分位数	df[['列A', '列B']].quantile(0.75)
データフレームのカラムのユニークな値の個数	df[col].nunique()
双方向キュー中の文字列を数える	両端キュー.count(文字列)
タイムスタンプデータと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
小数点数の整数部を計算する	math.modf(x)[1]
ビン数nで配列を分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
Xの三乗が欲しい	X ** 3
データフレームの選択したカラムの記述統計量	df[['列A', '列B']].describe()
折れ線グラフの星印の色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
数列と配列の散布図を描画して、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
タイムスタンプデータの時刻	aDatetime.time()
文字列を最後のカンマで二分して、前半を使う	文字列.rpartition(',')[0]
大文字が文字列中に存在しないか	any(not c.isupper() for c in 文字列)
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
実数の逆正接	math.atan(x)
上限を指定して、両端キュー	collections.deque(maxlen=最大長)
配列の歪度	scipy.stats.skew(配列, bias=False)
データフレームのあるカラムは何月か知る	df['列A'].dt.month
要素がn回繰り返すイテラブル	itertools.repeat(要素, n)
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
要素が無限に続くイテラブルを見る	itertools.repeat(要素)
ファイルを追加用に開いて]、fとする	f = open(filepath, mode='a')
両端キューの大きさを求める	len(両端キュー)
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
折れ線グラフをコーンズシルク色を使って描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームをグループ化し、各平均値を算出する	df.groupby('列A').mean()
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
正規表現モジュールをインポートする	import re
日付データにn秒分、足す	aDate + datetime.timedelta(seconds=n)
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
辞書順で文字列が文字列より後か調べる	文字列 > 文字列2
option: マゼンタ色を使う	color = 'magenta'
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
両端キューの先頭に整数を追加する	両端キュー.appendleft(整数)
縦棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
配列とリストについての散布図に赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
日付データが何年か知る	aDate.year
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データフレームを２つの列の値によってグループ化し記述統計量を求める	df.groupby(['列A', '列B']).describe()
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
サドルブラウン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
データフレーム中のNaNをインプレイスで削除する	df.dropna(inplace=True)
ブラック色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
option: 右三角印を描画する	marker = '>'
データフレームの選択したカラムを丸めて整数型にする	df[['列A', '列B']].round().astype(int)
option: フォントの色をオレンジレッドに設定する	color = 'orangered'
データフレームの指定したカラムの中の未入力値の数を求める	df['列A'].isna().sum()
バイトオーダを用いる	sys.byteorder
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
数列とリストについての散布図に▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
インディアンレッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ヒストグラムをインディアンレッド色を用いて描画する	plt.hist(データ列, color='indianred')
要素がタプルに含まれないか調べる	要素 not in タプル
リストとリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
未初期化の行列を作成する	np.empty((行数, 列数), dtype=np.int)
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(数式, 変数, -oo)
正規分布で乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームのあるカラムを破壊的にドロップする	df.drop('列A', axis=1, inplace=True)
データフレームの指定したカラムの分位数	df['列A'].quantile(パーセント/100)
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
データフレームの中の列をビン数nを用いてビン分割する	pd.cut(df[col], n)
データシリーズの欠損値を最大値で埋める	ds.fillna(ds.max())
データフレームを表示するとき、折り返しを無効にセットする	pd.set_option('expand_frame_repr', False)
タプルの平均値	sum(タプル)/len(タプル)
文字列中にアスキー文字が含まれるかどうか調べる	any(c.isascii() for c in 文字列)
線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームのある列の第二四分位数	df['列A'].median()
両端キューの中に文字列は含まれてるか調べる	文字列 in 両端キュー
セットの全ての要素が別のセット2に含まれるか調べる	セット.issubset(セット2)
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
文字列を正規表現で区切る	re.split(pattern, s)
グラフの横軸を対数に変更する	plt.xscale('log')
キューの長さを制限する	collections.deque(maxlen=最大長)
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
データフレームの欠損値を最頻値に減らす	df.fillna(df.mode().iloc[0])
option: ライトスレイグレー色を使用する	color = 'lightslategrey'
縦棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
重複ありでデータフレームから10行をランダムにサンプリングする	df.sample(10, replace=True)
二つのオブジェクトは等しいか確認する	obj == obj2
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをシルバー色として描画する	plt.barh(データ列x, データ列y, color='silver')
ひとつでもアルファベットが文字列中に存在するか判定する	any(c.isalpha() for c in 文字列)
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
実行環境がWindowsか調べる	sys.platform.startswith('win32')
スケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
長さの制限した両端キューを配列から作る	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
マップのキーをリストに変換する	list(辞書.keys())
文字列リストをひとつの文字列にする	''.join(文字列)
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
セットの補集合を使う	セット.difference(セット2)
２つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
option: チョコレート色を使う	color = 'chocolate'
折れ線グラフをパールゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
最大最小からベクトル	np.linspace(最小値, 最大値, 要素数)
option: トマトを用いる	color = 'tomato'
オブジェクトが浮動小数点数型のインスタンスか	float = int<nl>isinstance(obj, float)
ある列の文字列に部分文字列がない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
ピーチパフ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
option: レモンシフォンを使う	color = 'lemonchiffon'
線グラフをマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
カンマで区切ってxとyをプリントする	print(x, y, sep=',')
データシリーズが正規分布からどの程度尖っているか見る	ds.skew()
整数LCM	math.lcm(n, n2)
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
グラフの名称を設定する	plt.title('グラフの名称')
文字エンコーディングを指定してTSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
タプルを引数として展開して出力する	print(*タプル)
リストとリストについての散布図にrgbの下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
いつまでもnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
文字列のn番目を見る	文字列[n]
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
空の部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
タイムスタンプデータが何月か知る	aDatetime.month
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
replにまとめてデータシリーズの値を正規表現patternで変更する	ds.replace(pattern, repl, regex=True)
列の各データが何回出現するか確認する	df[col].value_counts()
リストをnからナンバリングする	enumerate(リスト, start=n)
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
行列の行ごとの平均	np.mean(aArray, axis=1)
データフレームの50パーセンタイル	df.median()
赤い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
空の多重集合	collections.Counter()
散布図を黒い四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図をタン色を使って描画する	plt.scatter(データ列x, データ列y, color='tan')
option: マーカーを右三角に指定する	marker = '>'
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
要素がセットに含まれるか判定する	要素 in セット
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', 文字列)
等差数列をベクトルにする	np.arange(開始値, 終了値, 等差)
option: グラフの色をグリーンに変更する	color = 'green'
浮動小数点数の双曲線余弦	math.cosh(x)
option: グレーを使う	color = 'grey'
リストからn要素サンプリングする	random.sample(リスト, k=n)
整数が一桁の整数か調べる	-9 <= 整数 <= 9
折れ線グラフの四角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフを色付きの点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
いつまでもカウントアップする	itertools.count()
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
option: グラフの色をダークサーモンに指定する	color = 'darksalmon'
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
乱数の行列を作成する	np.random.random((行数, 列数))
データフレームの選択したカラムが正規分布からどれだけ尖っているか見る	df[['列A', '列B']].skew()
線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgrey')
文字列を最後の区切り記号で分割する	文字列.rpartition(セパレータ)
リストをビン数nでビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムをパレットトルコイズ色を使って描画する	plt.hist(データ列, color='paleturquoise')
プロットをポスター用に設定する	sns.set(context='poster')
ライム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
色付きの一点鎖線でリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
文字列のn番目を使う	文字列[n]
整数足す整数	整数 + 整数2
指定した列のカテゴリで集計し、各分散を計算する	df.groupby('列A').var()
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
option: モカシン色を使う	color = 'moccasin'
横棒グラフをダークグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフをオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orchid')
カウンタの各項目をカウントだけ列挙する	aCounter.elements()
計算結果の出力を改行しなくて行う	print(式, end='')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
イテラブルの要素をひとつの文字列にする	''.join(map(str, イテラブル))
option: ディムグレーを使う	color = 'dimgray'
データフレームを表示するとき表示できる列数の最大値をnにする	pd.set_option('display.max_columns', n)
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
データシリーズがどの程度、正規分布から歪んでいるか見る	ds.kurt()
出力ストリームを全部、読む	f.read()
オレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
option: エクセルファイルシートの名前を設定する	sheet_name = ['A', 'B']
option: 色をライトブルーに設定する	color = 'lightblue'
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
データフレームの選択したカラムを千の位で丸める	df[['列A', '列B']].round(-3)
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
条件を満たしたら、ループを中断したい	if 条件式:<nl><tab>break
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
ある列のカテゴリごとの合計を計算する	df.groupby('列A').sum()
データ列の変遷を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
散布図の左三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームをインデックスによって並べる	df.sort_index()
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
縦棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
ライトイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightyellow')
option: 印を右三角に指定する	marker = '>'
リストを文字列として、空白で結合する	' '.join(map(str, リスト))
フォーマットで列を日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
文字列の中でASCII限定として正規表現にマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
ダークターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
ファイルパスをBOM付きでオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
ランダムにデータフレームから100行を取り出す	df.sample(100)
スピアマンを用いてデータフレームの相関行列を求める	df.corr(method='spearman')
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
イテラブルをひとつの文字列にする	''.join(map(str, イテラブル))
データフレームをグループ化し、あるカラムに対し合計を計算する	df.groupby('列A')['列B'].sum()
条件を満たすときだけ、処理したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
option: 改行コードを動作環境依存に設定する	newline = None
データフレームをある列の値によってグループ化し要約統計量を求める	df.groupby('列A').describe()
イテラブルとデータ列についての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: 淡いピンク色を用いる	color = 'lightpink'
要素はタプルの要素かどうか調べる	要素 in タプル
折れ線グラフの色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
タイムスタンプデータが何曜日か知る	aDatetime.weekday()
線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
リストと数列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの選択したカラムを10の位で丸めて整数にする	df[['列A', '列B']].round(-1).astype(int)
配列とリストについての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
辞書をJSON形式でファイル出力に保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
辞書のキーの一覧	list(辞書.keys())
散布図の丸印の色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
横棒グラフを淡いピンク色色を用いて描画する	plt.barh(データ列x, データ列y, color='lightpink')
Pythonのバージョンを調べる	if sys.version_info >= (3, 4):<nl><tab>print(sys.version_info)
青い一点鎖線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
option: 暗い赤を使用する	color = 'darkred'
ある列のカテゴリ毎の最大値を求める	df.groupby('列A').max()
データフレームをCSVファイルに行を付けず出力する	df.to_csv('file.csv', index=None)
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
ダークサーモン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
オブジェクトはタプルクラス	tuple = int<nl>isinstance(obj, tuple)
オブジェクトが数値かどうか調べる	isinstance(obj, (int,float))
ピンク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
数列と配列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
全ての十六進数字	string.hexdigits
0からnの範囲を使う	range(n)
多次元データをSVDで要素次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ヒストグラムをラベンダーブラッシュ色として描画する	plt.hist(データ列, color='lavenderblush')
ヒストグラムをプロットする	plt.hist(データ列)
データシリーズの欠損値を最大値にする	ds.fillna(ds.max())
整数が一桁の数	-9 <= 整数 <= 9
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
option: 大きい順にする	ascending = False
カンマ区切りのファイルをn番目の列をインデックスにして読む	pd.read_csv('file.csv', index_col=n)
文字列中にひとつでも非数字があるか調べる	any(not c.isdigit() for c in 文字列)
option: ミディアムパープルを使う	color = 'mediumpurple'
折れ線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: サドルブラウンに色を設定する	color = 'saddlebrown'
ファイルを文字列の示すエンコーディングとしてオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
xの小数点以下'2'桁までをプリントする	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
タプルを引数として展開して出力する	print(*タプル, sep=',')
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
データ列を書式で日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
散布図のバツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
リストとデータ列について散布図を描画し、、マーカーを上三角に変更する	plt.plot(データ列x, データ列y, marker='^')
指定したカラムのNaNを最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
整数を十六進数文字列に変換する	hex(整数)[2:]
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
日付データにn日分、足す	aDate + datetime.timedelta(days=n)
多次元データを多次元尺度構成法で整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
双方向キューの先頭に数列の要素を追加する	両端キュー.extendleft(数列)
ミディアムブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
データシリーズを百の位で丸める	ds.round(-2)
整数の各桁の総和がほしい	sum(map(int, str(整数)))
ふたつのセットが共通の要素を持たない	セット.isdisjoint(セット2)
文字列が数字か調べる	文字列.isdigit()
アクア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
縦に二つのデータフレームを結合する	pd.concat([df, df2], axis=0)
折れ線グラフを真紅色を用いて描画する	plt.plot(データ列x, データ列y, color='crimson')
数列の変遷を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
イテラブルと数列の散布図をプロットし、、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
色付きの破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
浮動小数点数の３乗	x ** 3
回帰分析をバギングでする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
双方向キューの先頭にイテラブルの各値を追加する	両端キュー.extendleft(イテラブル)
データシリーズの中に含まれる文字列の個数を数える	ds.isin([value]).sum()
縦棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ヒストグラムの色をダークスラテグレーにする	plt.hist(データ列, color='darkslategray')
散布図を赤いクロスマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
マッピングのキーの一覧を得る	list(辞書.keys())
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
テンプレを辞書でフォーマットする	書式.format_map(辞書)
リストからn個、サンプリングする	random.sample(リスト, k=n)
小数点数の正接の逆数を求める	math.atan(x)
データフレームの選択したカラムのNaNをモードで補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
最大値・最小値の範囲として一様な疑似乱数を発生させる	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
折れ線グラフの色をライムグリーンにセットする	plt.plot(データ列x, データ列y, color='limegreen')
二つの表データを列名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
散布図をアクア色を使って描画する	plt.scatter(データ列x, データ列y, color='aqua')
option: ダークスラテグレーを用いる	color = 'darkslategray'
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
データフレームのあるカラムが何日か見る	df['列A'].dt.day
折れ線グラフのダイアモンド印の線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
指定したカラムの欠損値をその中央値で埋める	df['列A'].fillna(df['列A'].median())
文字列を積極的に小文字に変換する	文字列.casefold()
option: 色をライトスカイブルーに変更する	color = 'lightskyblue'
文字列をカンマで二分して、後ろの方を見る	文字列.partition(',')[-1]
ヒストグラムの色をライムに変更する	plt.hist(データ列, color='lime')
縦棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
項∈セット	要素 in セット
要素がリストに含まれないかどうか調べる	要素 not in リスト
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
option: フォントの色をピーチパフにセットする	color = 'peachpuff'
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
スタックをタプルにする	tuple(両端キュー)
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
option: 標準エラーを使う	file = sys.stderr
データフレームの選択したカラムのNaNをモードに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
整数が整数2より大きいか調べる	整数 > 整数2
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
整数のビット長を見る	整数.bit_length()
rgbの丸マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
等価と書きたい	X == Y
計算結果の出力を改行なしに行う	print(式, end='')
変数をスワップする	x, y = y, x
記号計算を使う	import sympy
整数の商	整数 / 整数2
空のチェーンマップ	collections.ChainMap()
1行から二つの浮動小数数を読む	A, B = map(float, input().split())
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
プロットの縦軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
データフレームを各カラム毎に集計して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
整数の4乗	整数 ** 4
縦棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
散布図を深紅色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
双方向キューのn番目に要素を挿入する	両端キュー.insert(n, 要素)
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
黄緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データシリーズの分散を計算する	ds.var()
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='turquoise')
配列の行ごとの平均値	np.mean(aArray, axis=1)
データフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データシリーズの未入力値を平均値で補完する	ds.fillna(ds.mean())
option: ダークオーキッド色を使用する	color = 'darkorchid'
データフレームからカテゴリデータのみ抽出する	df.select_dtypes('object')
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
リストとデータ列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
option: ダークレッド色を用いる	color = 'darkred'
option: ダークシアン色を使う	color = 'darkcyan'
option: ８ビット整数型を用いる	np.int8 = np.int<nl>dtype = np.int8
文字列中の全角数字を半角数字に変換する	文字列.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
option: ライトグリーン色を使う	color = 'lightgreen'
option: 線の種類を破線にセットする	linestyle = 'dashed'
2つの数値を順に表示する	print(数値, 数値)
データシリーズの欠損値を最頻値で置換する	ds.fillna(ds.mode().iloc[0])
Pythonのバージョン	sys.version
タプルの末尾のn要素を取り除く	タプル[:-n]
データフレームのカラムを散布図を用いて可視化する	sns.scatterplot(data=df, x='列名', y='列名')
辞書順で文字列が文字列より前	文字列 < 文字列2
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
データシリーズのNaNを平均値に指定する	ds.fillna(ds.mean())
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
配列の最小値	np.min(aArray)
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
option: スラッシュをセパレータで使う	sep = '/'
コーンズシルク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
インデントを指定してリストをJSON文字列にする	json.dumps(リスト, ensure_ascii=False, indent=n)
クラス分類をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
横棒グラフをピーチパフ色を使って描画する	plt.barh(データ列x, データ列y, color='peachpuff')
文字列を回数制限して置換する	文字列.replace(部分文字列, 置換後の文字列, n)
オブジェクトの型を使う	type(obj)
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
入力から2つの文字列値を読む	A, B = map(str, input().split())
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
option: 先頭の行をヘッダに設定する	header = 0
option: フォントの色をタンに設定する	color = 'tan'
文字列の終了位置以前に部分文字列が含まれる	文字列.find(部分文字列, 0, 終了位置) != -1
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
二つのタプルを連結する	タプル + タプル2
ファイル入力をJSONとして構文解析する	json.load(ファイル入力)
option: ブラックを使う	color = 'black'
サドルブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ふたつの列からグループ化し分散を計算する	df.groupby(['列A', '列B'], as_index=False).var()
データ列の折れ線グラフを左三角印として描画する	plt.plot(データ列x, データ列y, marker='<')
小麦色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
option: パールバイオレットレッドにフォントの色を設定する	color = 'palevioletred'
文字列を最後のカンマで二つに分けて、前半を使う	文字列.rpartition(',')[0]
option: 行列のデータ型を指定する	np.int8 = np.int<nl>dtype = np.int8
今日の月を見る	datetime.datetime.today().month
データフレームの指定したカラムを千の位で丸める	df['列A'].round(-3)
インデントを指定してデータをJSON文字列に変換する	json.dumps(データ, ensure_ascii=False, indent=n)
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
文字列中にひとつでも非空白が含まれるかどうか判定する	any(not c.isspace() for c in 文字列)
option: パパイヤウィップ色を使う	color = 'papayawhip'
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
文字列を最後の部分文字列で二分割して、残りを使う	文字列.rpartition(部分文字列)[-1]
ダークターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
数列とデータ列の散布図に黒い▽マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列を部分文字列で区切り、、文字列リストに変換する	文字列.split(部分文字列)
列名を指定して２つのデータフレームを外部結合する	pd.merge(df, df2, on='列A', how='outer')
データシリーズの中にと文字列がいくつあるか求める	ds.isin([value, value2]).sum()
グリッド線	plt.grid(linestyle='--')
ヒストグラムを貝殻色として描画する	plt.hist(データ列, color='seashell')
データフレームのカラムの幾何平均を使う	scipy.stats.gmean(df['列A'])
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
option: 色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
ヒストグラムの区間数を指定する	plt.hist(データ列, bins=区関数)
データフレームのあるカラムを四捨五入する	df['列A'].round()
線を青い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
リストの長さnの順列を計算する	itertools.permutations(iterable, n)
サーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
データフレームの列間の相関行列をまとめて求める	df.corr()
シーケンスの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
一点鎖線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
整数が整数2以下かどうか	整数 <= 整数2
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
スピアマン相関係数でデータフレームの相関行列を算出する	df.corr(method='spearman')
option: 耐火レンガにグラフの色を設定する	color = 'firebrick'
データフレームの指定したカラムがどの程度、分散しているか調べる	df['列A'].var()
ファイルパスをSJISでオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
両端キューの末尾に数列の各データを追加する	両端キュー.extend(数列)
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
ガウス過程を用いてクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
データフレームのカラムからユニークな要素を抽出しリスト化する	df[col].unique().tolist()
正規表現に複数行対応として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
Xの二乗を欲しい	X ** 2
option: パールゴールデンロッドを使う	color = 'palegoldenrod'
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
カウンタのそれぞれの文字列を回数だけリストとして得る	aCounter.elements()
辞書から最後に追加した項目をポップする	辞書.popitem()
要素を双方向キューのn番目に差し込む	両端キュー.insert(n, 要素)
あるカラムのカテゴリごとの平均値	df.groupby('列A').mean()
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
オリベドラブ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
ファイル名のセパレータ記号を使う	os.sep
指定された列の値で集計し、標準偏差を求める	df.groupby('列A').std()
整数の四分の一	整数 / 4
横棒グラフをアイボリー色を用いて描画する	plt.barh(データ列x, データ列y, color='ivory')
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
xを白色でプリントする	print(f'\033[37m{x}\033[0m')
指定した列はどれだけ分散しているか調べる	df['列A'].var()
リストをJSON形式でファイル出力に保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
散布図に大バツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='X')
散布図をチョコレート色を使って描画する	plt.scatter(データ列x, データ列y, color='chocolate')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
イテラブルの長さを制限する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
データシリーズがどれだけ分散しているか確認する	ds.var()
整数の五分の一を計算する	整数 / 5
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
option: フローラルホワイトを使う	color = 'floralwhite'
ヒストグラムの色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
青い▼印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
日付データをタプルにする	aDate.timetuple()
リストとリストの散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
表データを使用する	import pandas as pd
データシリーズの欠損値を第二四分位数に減らす	ds.fillna(ds.median())
xを黄色にする	f'\033[33m{x}\033[0m'
回帰分析を部分的最小二乗法でする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
最大値でデータシリーズの欠損値を置換する	ds.fillna(ds.max())
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
辞書に要素をキーとして加える	辞書[キー] = element
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
日付を表現した文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
折れ線グラフを紺色を用いて描画する	plt.plot(データ列x, データ列y, color='darkblue')
イテラブルをいつまでも繰り返す	itertools.cycle(iterable)
option: シアンにフォントの色を変更する	color = 'cyan'
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
双方向キューを配列から用意する	collections.deque(配列)
整数引く整数を求める	整数 - 整数2
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
ポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
option: ゴールド色を使う	color = 'gold'
文字列を文字のリストに変換する	list(文字列)
書式でカラムを日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
横棒グラフを描画して中央寄せする	plt.barh(ラベル列, データ列, align='center')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
実数を百の位で丸める	round(x, -2)
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ベクトルの累積積	np.cumprod(aArray)
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データシリーズの未入力値を50パーセンタイルに指定する	ds.fillna(ds.median())
表データのあるカラムのタイムゾーンを変更する	df['列A'].tz_convert('Asia/Tokyo')
整数がリストのどれかか調べる	aList = [0, 1, 2]<nl>整数 in aList
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
パープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
option: コーラル色を使う	color = 'coral'
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
グラフの横軸にラベルをつける	plt.xlabel('x軸ラベル')
option: 最初の列をインデックスに設定する	index_col = 0
option: 色をサンディーブラウンに設定する	color = 'sandybrown'
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
入力ストリームから1文字、読む	f.read(1)
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
テンプレを辞書で文字列整形する	書式.format_map(辞書)
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
二つのセットが交わりを持たない	セット.isdisjoint(セット2)
JSONフォーマットで文字列をファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
データフレームの未入力値を最小値に設定する	df.fillna(df.min())
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
折れ線グラフのバツ印を青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
配列から重複を除いた配列を作る	np.unique(aArray)
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
文字列の先頭からタブを取り除く	文字列.lstrip('\t')
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
現在のエポック秒	int(time.time())
既存のファイルを文字列の示すエンコーディングを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
散布図を黒いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
変数について微分を行う	sympy.diff(数式, 変数)
option: グラフの色をディムグレーにセットする	color = 'dimgray'
整数を双方向キューのn番目に挿入する	両端キュー.insert(n, 整数)
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
option: ポイントマーカーを加える	marker = '.'
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
リストを四分位数でビン分割する	pd.qcut(aList, 4)
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームのあるカラムの曜日数を使う	df['列A'].dt.dayofweek
整数のバイト長	(整数.bit_length() + 7) // 8
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
辞書の値の一覧	辞書.values()
option: セパレータを使わない	sep = ''
エクセルファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
カウンタの項目数	len(aCounter)
モジュールを列挙する	sys.modules
データフレームをある列で並べ直してNaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ダークバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
文字列を最後の部分文字列で分割して残りを使う	文字列.rpartition(部分文字列)[-1]
データフレームを２つの列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
主成分分析を用いて項次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
マゼンタ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategrey')
両端キューの中に文字列は含まれてるか	文字列 in 両端キュー
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
カウンタの全カウントを使う	aCounter.total()
線形回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
等量で分割数nとしてデータフレームの中のカラムをビン分割する	pd.qcut(df[col], n)
識別子が関数か判定する	inspect.isfunction(識別子)
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
文字列の右端から指定された文字を除く	文字列.rstrip(文字)
2つのオブジェクトは等しい	obj == obj2
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
散布図を赤い三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c='r')
標準出力がターミナルか判定する	sys.stdout.isatty()
データフレームのあるカラムの分を見る	df['列A'].dt.minute
ファイルを読み込みできるようにオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
CSVファイルのn行目を行として読み込む	pd.read_csv('file.csv', index_col=n)
グレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
最大値と最小値を用いてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図に星印を使用する	plt.scatter(データ列x, データ列y, marker='*')
データフレームのインデックスの一覧	df.index
タプルの要素を昇順にソートする	sorted(タプル, reverse=False)
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
オブジェクトは非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(オブジェクト)
行列の行を選択する	aArray[行番号]
多次元尺度構成法で多次元データを要素次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
整数がリストのどれかかどうか確認する	aList = [0, 1, 2]<nl>整数 in aList
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
散布図をrgbのダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
xが0に近づくときの数式の極限値を求める	sympy.limit(数式, [|変数]x, 0)
ブランチドアーモンド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
イテラブルから長さの制限した両端キューを用意する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
線グラフの色をパウダーブルーにセットする	plt.plot(データ列x, データ列y, color='powderblue')
整数のn分の1を求める	整数 / n
データフレームの選択したカラムの尖り	df[['列A', '列B']].skew()
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
seabornのデフォルトを適用する	sns.set()
option: 配列のデータ型を指定する	np.uint8 = np.int<nl>dtype = np.uint8
ふたつの辞書を結合する	辞書 | 辞書2
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
縦棒グラフを描画し、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
nまでの奇整数リスト	list(range(1, n, 2))
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
NaNも加えてデータフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
デピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームのカラム間の積立相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
棒グラフをティール色を用いて描画する	plt.bar(データ列x, データ列y, color='teal')
識別子が関数か調べる	inspect.isfunction(識別子)
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
option: ライトグリーン色を使う	color = 'lightseagreen'
タプルの個数	len(タプル)
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
ミディアムパープル色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
環境がMacOSか調べる	sys.platform.startswith('darwin')
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
配列のトリム分散を使う	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
整数を十六進数表現に変換する	hex(整数)
指定された列のカテゴリで集計し、最大値を求める	df.groupby('列A').max()
文字列の右端から余分な改行を取り除く	文字列.rstrip()
縦棒グラフをナバホホワイト色として描画する	plt.bar(データ列x, データ列y, color='navajowhite')
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
データフレームの中の列を等量でビン数nを用いて分割する	pd.qcut(df[col], n)
半透明の一点鎖線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
散布図の▽印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
numpyを入れる	import numpy as np
棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
行列式を計算する	np.linalg.det(aArray)
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
二つの列を組み合わせてグループ化し合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
ヒストグラムの色をブラウンに変更する	plt.hist(データ列, color='brown')
option: 文字列を改行の代わりに用いる	end = 文字列
データフレームの選択したカラムの分散	df[['列A', '列B']].var()
データフレームのあるカラムの欠損値を中央値に指定する	df['列A'].fillna(df['列A'].median())
カテゴリ列でグループ化して、データフレームをにバイオリン図を使って可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームをグループ化しある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
辞書をインデント幅を指定してJSONにエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
ファイルをSJISとして開く]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
２つのオブジェクトが同一参照か調べる	obj is obj2
option: ダークシアグリーン色を使う	color = 'darkseagreen'
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
２つの表データを縦方向につなぐ	pd.concat([df, df2], axis=0)
セットに整数を追加する	セット.add(数)
赤いグリッド線を引く	plt.grid(color='r')
折れ線グラフをシャルトリューズ色を用いて描画する	plt.plot(データ列x, データ列y, color='chartreuse')
変数が無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, 変数, oo)
辞書のキーを要素にする	辞書[キー] = element
データフレームの列をグループ化してヒストグラムとしてグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ライトスカイブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列を最後の区切り記号で二分して、残りを使う	文字列.rpartition(セパレータ)[-1]
データシリーズの曜日の名前	ds.dt.weekday_name
横棒グラフをグリーンイエロー色として描画する	plt.barh(データ列x, データ列y, color='greenyellow')
イテラブルとイテラブルの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームの指定したカラムの中に文字列と文字列がいくつ含まれるか数える	df['列A'].isin([value, value2]).sum()
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
option: グラフの色をナバホホワイトにセットする	color = 'navajowhite'
１０乗を書きたい	X ** 10
日付データの年数を見る	aDate.year
配列とイテラブルについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
セットからエラーなく文字列を除去する	セット.discard(文字列)
本日が何年か知る	datetime.datetime.today().year
リストをナンバリングしながらひとつずつ処理する	for i, value in enumerate(リスト):<nl><tab>print(i, value)  # value はリストの要素
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
両端キュー中の要素のインデックス	両端キュー.index(要素)
データシリーズの中に文字列と日付データが存在するか確認する	ds.isin([value, value2])
option: フォントの色をダークグレーに設定する	color = 'darkgray'
データフレームを列によってグループ分けし、、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
条件式ででないを書きたい	not 条件式
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
列を指定して重複を除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
指定された値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
option: 印の大きさを変更する	markersize = 2.0
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
辞書がほしい	辞書 = {}
配列と配列について散布図を描画し、、文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
ミッドナイトブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
二つの文字列は同じかどうか調べる	文字列 == 文字列2
折れ線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
配列と数列についての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色をデピンクに変更する	plt.hist(データ列, color='deeppink')
印字できる文字を全て使う	string.printable
分類モデルの予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
散布図を大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
繰り返しを中断したい	if 条件式:<nl><tab>break
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームを指定した列の値によってグループ化する	df.groupby('列A')
xを赤色にする	f'\033[31m{x}\033[0m'
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
データフレームの指定したカラムの欠損値を最小値で補完する	df['列A'].fillna(df['列A'].min())
棒グラフをミディアムターコイズ色として描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
差を求めたい	X - Y
整数が-9以上、9以下か	-9 <= 整数 <= 9
option: どの列も行にしない	index_col = None
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
データ列を2つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
カテゴリで色付けして、データフレームをに箱ひげ図で図示する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
棒グラフをパールバイオレットレッド色を使って描画する	plt.bar(データ列x, データ列y, color='palevioletred')
指定した列を百の位で丸める	df['列A'].round(-2)
option: 標準エラーに出力する	file = sys.stderr
等間隔で列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
散布図のダイアモンド印を黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
yについて偏微分を行う	sympy.diff(数式, y)
ヒストグラムの色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
カデットブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
文字列を空白で区切る	文字列.split()
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
条件を満たしたら、繰り返しを最初から実行し直したい	if 条件式:<nl><tab>continue
末尾から文字列をコロンで区切る	文字列.rsplit(':')
フィッシャーの線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
パープル色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
グラフ中のフォントを変更する	sns.set(font=フォント名)
空白が文字列中に含まれるか	any(c.isspace() for c in 文字列)
2重ループを書きたい	for x in range(X):<nl><tab>for y in range(Y):<nl><tab><tab>print((x, y))  # 直して
データフレームの中に文字列とがいくつあるか数える	df.isin([value, value2]).sum()
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
option: エンコーディングを文字コードtextに設定する	encoding = text
計算結果を出力する	print(式)
マップの項目名に対応した値	辞書.get(キー, 見つからない場合の値)
オブジェクトがフレーム	inspect.isframe(オブジェクト)
数値がセットに含まれる	数 in セット
Xの二乗が求めたい	X ** 2
データシリーズが何秒か調べる	ds.dt.second
カンマによって文字列を分割し、、列挙する	文字列.split(',')
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
双方向キューに整数をプッシュする	両端キュー.append(整数)
データフレームの指定したカラムの母標準偏差	df['列A'].std(ddof=0)
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの選択したカラムのNaNを最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
データ列をビン数nを用いてビニングする	pd.cut(ds, n)
データフレームの選択した列を万の位で四捨五入する	df[['列A', '列B']].round(-4)
option: フォントの色をパープルに指定する	color = 'purple'
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
主成分分析として多次元データを文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
xを青色で出力する	print(f'\033[34m{x}\033[0m')
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
既存のファイルを文字列の示す文字コードを使って追加できるように開く]	open(filepath, mode='a', encoding=s)
ラインを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列がセットに含まれない	文字列 not in セット
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
縦棒グラフを描画し、、棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データシリーズの欠損値を最小値で埋める	ds.fillna(ds.min())
日付データの年を使う	aDate.year
散布図の▽マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
リストと配列の散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: 追加モードを使用する	mode = 'a'
データフレームが何行重複するか調べる	df.duplicated().sum()
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
配列の各要素の最小公倍数	np.lcm(aArray, aArray2)
ひとつでも非大文字が文字列中に含まれるか調べる	any(not c.isupper() for c in 文字列)
デピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
データシリーズをタイムスタンプ型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
行列式	np.linalg.det(aArray)
データフレームの選択した列の値が欠損値かどうかテストする	df[['列A', '列B']].isna()
データフレームの選択した列の中にいくつ文字列があるか調べる	df[['列A', '列B']].isin([value]).sum()
二つの変数の大きい方を知りたい	max(X, Y)
大きい方を欲しい	max(X, Y)
ファイルパスのセパレータ記号	os.sep
タプルのn番目からn2番目までの部分を取り出す	タプル[n:n2]
列名を指定してデータフレームをジョインする	'<nl>pd.merge(df, df2, on='列A')
グラフのグリッドを暗くする	sns.set(style='darkgrid')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
option: 色をアイボリーに指定する	color = 'ivory'
横棒グラフを濃い青色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
ミディアムシアグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
オブジェクトはコルーチンか	inspect.iscoroutine(オブジェクト)
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
option: グラフの色をスプリンググリーンにセットする	color = 'springgreen'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
散布図の大バツマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
異なるカラムをキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
オレンジレッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
オブジェクトが浮動小数点数クラスのインスタンス	float = int<nl>isinstance(obj, float)
リストと配列の散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
スノー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
散布図の大バツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
整数が整数2以下またはn3以上か調べる	整数 <= 整数2 or 整数 >= n3
option: 読み込まないフッタをnに指定する	skipfooter = n
両端キューの先頭にリストの各要素を追加する	両端キュー.extendleft(リスト)
ヒストグラムの色をダークオレンジにする	plt.hist(データ列, color='darkorange')
データフレームの上n行	df.head(n)
option: フォントの色をアクアに設定する	color = 'aqua'
データシリーズは何時か調べる	ds.dt.hour
データフレームのあるカラムの歪度	df['列A'].kurt()
配列から重複を取り除く	set(配列)
追加できるようにファイルを開く]	'a' = 'a'<nl>open(filepath, mode='a')
ある列をドロップする	df.drop('列A', axis=1, inplace=True)
文字列中に英数字が含まれない	any(not c.isalnum() for c in 文字列)
多層パーセプトロンで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
双方向キュー中の整数の数をカウントする	両端キュー.count(整数)
リストの要素を昇順に並べる	sorted(リスト, reverse=False)
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データシリーズをValueMapでまとめて置き換える	ds.replace(ValueMap)
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
文字列が別のに存在するか調べる	文字列 not in 別の文字列
ヒストグラムの色をダークスレートブルーにする	plt.hist(データ列, color='darkslateblue')
整数の八進数文字列	oct(整数)[2:]
ベクトルのユニークな値を要素とする配列	np.unique(aArray)
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームを二つの列によってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
実数の逆双曲線正弦を求める	math.asinh(x)
リストを文字列として、カンマによってつなげる	','.join(map(str, リスト))
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
方程式の解を求める	sympy.solve(数式)
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
option: フォントの色をスノーに設定する	color = 'snow'
データシリーズの要約統計量	ds.describe()
データフレームの中のカラムをビニングする	pd.cut(df[col], aList)
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
リストを連結して一つの文字列にする	''.join(map(str, リスト))
ヒストグラムの色をフォレストグリーンにする	plt.hist(データ列, color='forestgreen')
ファイルパスからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ミディアムアクアマリン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
データフレームの指定したカラムが正規分布からどの程度歪んでいるか確認する	df['列A'].kurt()
データフレームをグループ化し、ある列の要約統計量を計算する	df.groupby('列A').describe()['列B']
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
ある列の文字列に部分文字列がないデータを取り出す	df[~df['列A'].str.contains(部分文字列)]
option: 出力先をファイルに指定する	file = sys.open('file.txt', 'w')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームを2つの列の値によってグループ分けする	df.groupby(['列A', '列B'])
既存の行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
deqのstart番目からend番目までの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
赤い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
全要素を0で初期化した行列を初期化する	np.zeros(要素数)
▽印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
option: スレートブルー色を使う	color = 'slateblue'
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
項はセットに含まれないか調べる	要素 not in セット
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
リストの総和を計算する	sum(リスト)
横棒グラフをライトコーラル色として描画する	plt.barh(データ列x, データ列y, color='lightcoral')
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
ヒストグラムの色をダーク・スラテグレーに変更する	plt.hist(データ列, color='darkslategrey')
ダークオーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
数式の微分を求める	sympy.diff(数式)
イテラブルとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
変数名を項目名として、辞書	dict(name='kogi', age=6)
オブジェクトは抽象クラスか判定する	inspect.isabstract(オブジェクト)
option: グラフの色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
要素はタプルに含まれない	要素 not in タプル
option: コーンフラワーブルーを使う	color = 'cornflowerblue'
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
ふたつの列を組み合わせてグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
辞書のキーをひとつずつ処理する	for key in 辞書.keys():<nl><tab>print(辞書[key])  # FIXME
数列と配列について散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: 追加用に変更する	mode = 'a'
文字列リストをsepを区切りとしてつなげる	sep.join(文字列リスト)
掛け算を書きたい	X * Y
option: マーカーをバツに変更する	marker = 'x'
リストと配列について散布図を描画してマーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
多次元データをt-SNEで要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
黒い丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
option: SJISを使用する	encoding = 'shift_jis'
数列とリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
あるカラムでデータフレームをソートする	df.sort_values(by='列A')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームのあるカラムが何日か調べる	df['列A'].dt.day
グループ化してデータフレームの散布図を縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
入力ストリームから1文字読む	f.read(1)
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームを複数の列によってソートし、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
リストとイテラブルについての散布図に赤いクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
カウンタの項目を列挙する	aCounter.keys()
識別子がスタックフレームかどうか調べる	inspect.isframe(識別子)
グラフの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
マゼンタ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
ロバスト分類モデルを準備する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフをパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='purple')
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
指定したカラムの中央値	df['列A'].median()
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
データフレームの選択したカラムのNaNを最頻値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームを表示するとき、n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
日付時刻データがタイムスタンプデータと同時	aDatetime == aDatetime2
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
データフレームの列名を列挙する	df.columns
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
アクアにヒストグラムの色を変更する	plt.hist(データ列, color='aqua')
論文にグラフの目的を設定する	sns.set(context='paper')
文字列をコロンで二分割する	文字列.partition(':')
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
データフレームの指定した列の名前一覧の列のみ抽出する	columns = ['列A', '列B']<nl>df[columns]
行列の次元数を見る	aArray.ndim
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのある列の75パーセンタイル	df['列A'].quantile(0.75)
タイムスタンプデータからn分減算する	aDatetime - datetime.timedelta(minutes=n)
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
折れ線グラフの大バツ印の線幅を指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
option: カーキにグラフの色を設定する	color = 'khaki'
グラフに被らない場所に凡例を表示する	plt.legend(loc='best')
マップにキーが存在しない場合、処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
パールバイオレットレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ミディアムアクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
辞書に項目名がない場合処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
データフレームのstart行目からend行目までを抽出する	df[start:end]
Xの八乗を求めたい	X ** 8
option: データ型として符号なし８ビット整数型を用いる	np.uint8 = np.int<nl>dtype = np.uint8
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
文字列を改行で区切り文字列リストに変換する	文字列.splitlines()
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
プログラムのファイルの名前を調べる	sys.argv[0]
日付データの月	aDate.month
ヒストグラムを青緑色を使って描画する	plt.hist(データ列, color='teal')
最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
カウンタからリストをカウントして減らす	aCounter.subtract(iterable)
実数の余弦の逆数	x = 0.33<nl>math.acos(x)
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
折れ線グラフを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームに重複があるか調べる	df.duplicated()
複数行対応として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのカラムの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
変数について数式を積分する	sympy.integrate(数式, 変数)
二進数文字列をバイト列にする	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
散布図に▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
カウンタの文字列をリストとして得る	aCounter.keys()
ヒストグラムの色を青にセットする	plt.hist(データ列, color='blue')
タプルの長さを知る	len(タプル)
数式を簡略にする	sympy.sympify(数式)
3つの文字列を順にプリントする	print(文字列, 文字列, 文字列)
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
文字列を最後の区切り文字で二分して、前半を使う	文字列.rpartition(セパレータ)[0]
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
両端キューの先頭にイテラブルの各要素を追加する	両端キュー.extendleft(イテラブル)
数式の部分分数化する	sympy.apart(数式)
紺碧色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
文字列中に非空白が存在するか調べる	any(not c.isspace() for c in 文字列)
option: 線の種類を実線に設定する	linestyle = 'solid'
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
識別子が非同期ジェネレータか調べる	inspect.isasyncgen(識別子)
ヒストグラムの線種を点線に設定する	plt.hist(データ列, linestyle='dotted')
辞書のキーの一覧を得る	list(辞書.keys())
リストの先頭	リスト[0]
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
文字列の両端から改行を除く	文字列.strip('\n')
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
ホワイトスモーク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ラベンダー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
５乗が書きたい	X ** 5
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
データフレームのある列の値がx以下の行を選択する	df[df['列A'] <= x]
赤い左三角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列中の部分文字列の登場を数える	文字列.count(部分文字列)
追加できるようにファイルパスをUTF8で開く]	open(filepath, mode='a', encoding='utf-8')
カウンタの和集合	aCounter | aCounter2
オブジェクトが論理値クラスか調べる	bool = int<nl>isinstance(obj, bool)
option: グラフの色をティールに指定する	color = 'teal'
データシリーズの月を求める	ds.dt.month
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
文字列を最後の区切り記号で分けたときの残りの文字列を取り出す	文字列.rpartition(セパレータ)[-1]
セットをリストにする	list(セット)
xを青色で表示できる文字列にする	f'\033[34m{x}\033[0m'
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
option: フォントの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
実数が正の数か調べる	x > 0
折れ線グラフの左三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
数列とリストについて散布図を描画して、マーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: 茶色を用いる	color = 'brown'
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
データフレームの指定した列の中の欠損値の合計を数える	df['列A'].isna().sum()
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
1からnまでの整数列を使う	list(range(1, n+1))
折れ線グラフの色をモカシンにセットする	plt.plot(データ列x, データ列y, color='moccasin')
割り算の余り	整数 % 整数2
マッピングの値の一覧	辞書.values()
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
タブを見る	'\t'
FIXME	np.linalg.eig(aArray)
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
折れ線グラフの下三角印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
プラムにヒストグラムの色を指定する	plt.hist(データ列, color='plum')
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
データフレームの相関行列をヒートマップとして可視化する	sns.heatmap(df.corr())
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
実数を切り下げる	math.floor(x)
整数の二乗を求める	整数 ** 2
8進数文字列をバイナリに変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
option: ライトゴールドロディイエローを用いる	color = 'lightgoldenrodyellow'
青紫色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
プラットホームがLinuxか確認する	sys.platform.startswith('linux')
グラフの簡単な説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
データフレームとデータシリーズを横に連結する	pd.concat([df, ds], axis=1)
行列の形状を変形する	aArray.reshape(行数, 列数)
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
実数を三乗する	x ** 3
双方向キュー	両端キュー = collections.deque()
文字列を最後のカンマで二分割する	文字列.rpartition(',')
option: グラフの色をブラックに指定する	color = 'black'
文字列はセットに含まれる	文字列 in セット
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: ドジャーブルーにグラフの色を指定する	color = 'dodgerblue'
指定したカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
２つの文字列は同じか調べる	文字列 == 文字列2
整数が1、もしくは2かどうか	整数 == 1 or 整数 == 2
データフレームのあるカラムのタイムゾーンを日本に指定する	df['列A'].tz_convert('Asia/Tokyo')
option: ペールグリーンにフォントの色をする	color = 'palegreen'
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データシリーズのNaNをその中央値で置き換える	ds.fillna(ds.median())
ベクトルの内積を求める	np.dot(aArray, aArray2)
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
両端キュー中の整数のインデックスを見る	両端キュー.index(整数)
バツマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
option: リネン色を使う	color = 'linen'
文字列は全て識別子	文字列.isidentifier()
両端キューをポップする	両端キュー.pop()
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
行列の列ごとの最大値を計算する	np.max(aArray, axis=0)
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの中にいくつ日付データが含まれるか数える	df.isin([value]).sum()
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームを2つの列によってソートし、、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
option: 色をダークシアンに設定する	color = 'darkcyan'
データフレームの指定した列の中央値	df['列A'].median()
ファイルを開いて]書き込みストリームを見る	'w' = 'a'<nl>open(filepath, mode='w')
データフレームの未入力値を平均値で埋める	df.fillna(df.mean())
作画で使用するフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
文字列を最後のコロンで二分して、前半を使う	文字列.rpartition(':')[0]
データフレームから重複したデータを残さずドロップする	df.drop_duplicates(keep=False)
リストとリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
option: ライトグレー色を使う	color = 'lightgrey'
option: 文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
option: プラム色を使う	color = 'plum'
データ列の散布図をプロットする	plt.scatter(データ列x, データ列y)
データフレームのn行以降選択する	df[n:]
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
マッピングのキーとその項目を列挙する	辞書.items()
データフレームをカテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: グレーにフォントの色を設定する	color = 'gray'
折れ線グラフに丸印を使用する	plt.plot(データ列x, データ列y, marker='o')
xとyを順にプリントする	print(x, y)
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
単位行列	np.eye(行数, 列数)
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
実線でヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
イテラブルの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
ヒストグラムをライトイエロー色を用いて描画する	plt.hist(データ列, color='lightyellow')
option: グラフの色を小麦色に変更する	color = 'wheat'
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
データフレームのカラムの幾何平均	scipy.stats.gmean(df['列A'])
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
文字列の大文字小文字を交換する	文字列.swapcase()
リストと配列について散布図を描画して、マーカーをバツにセットする	plt.plot(データ列x, データ列y, marker='x')
rgbのバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
変数の値をひとつ増やしたい	X += 1
両端キュー中の要素の位置	両端キュー.index(要素)
最大値でデータフレームの未入力値を埋める	df.fillna(df.max())
実数の正弦の逆数	math.asin(x)
セットにシーケンスを追加更新する	セット.update(リスト)
型のサブクラス	issubclass(サブクラス, クラス)
折れ線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
オールドレース色として散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
折れ線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
option: シャルトリューズ色を使う	color = 'chartreuse'
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
小数点数の指数部	math.frexp(x)[1]
整数が配列のいづれか	aArray = [0, 1, 2]<nl>整数 in aArray
線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
データ列のエポック秒を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
数式を浮動小数点数に変換する	float(数式)
ヒストグラムの色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
データフレームをグループ化し、それぞれの最小値を算出する	df.groupby('列A').min()
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームの上位25％	df.quantile(0.25)
サイコロと同じ乱数	random.randint(1, 6)
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
辞書の項目名に対応した値	辞書[キー]
リストとリストについての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
異なるカラムをキーとして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
option: 紺碧色を使う	color = 'azure'
文字列の終了位置以前に部分文字列が含まれない	文字列.find(部分文字列, 0, 終了位置) == -1
ファイルをバイナリモードでオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
option: フォントの色をロイヤルブルーに設定する	color = 'royalblue'
データフレームの指定した列の第一四分位数	df['列A'].quantile(0.25)
リストとイテラブルについて散布図を描画し、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
本日の月	datetime.datetime.today().month
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
表データをある列によって並べる	df.sort_values(by='列A')
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
ファイルパスの絶対パス	os.path.abspath(filepath)
プロットを画面に指定する	sns.set(context='notebook')
ヒストグラムをミディアムバイオレットレッド色を用いて描画する	plt.hist(データ列, color='mediumvioletred')
タイムスタンプデータの時間数	aDatetime.hour
クリムゾン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
あるカラムがどの程度分散しているか見る	df['列A'].var()
ライトグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgray')
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
正規化したヒストグラムを描く	plt.hist(データ列, density=True)
円プロットを時計回りにプロットする	plt.pie(データ列, startangle=90, counterclock=False)
文字列リストを連結して一つの文字列にする	''.join(文字列)
t-SNEで多次元データを項次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
XをYで割った商を求めたい	X // Y
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの選択したカラムのパーセンタイルを算出する	df[['列A', '列B']].quantile(パーセント/100)
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
UTF8で文字列をバイト列に変換する	文字列.encode(encoding='utf-8', errors='strict')
モデルの残差を求める	目的変数 - model.predict(説明変数)
データフレームの最初100行を見る	df.head(100)
x軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
リストに別のリストを加えて拡張する	リスト.extend(リスト2)
両端キュー中の文字列のインデックス	両端キュー.index(文字列)
文字列中に空白がある	any(c.isspace() for c in 文字列)
縦棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
３つの変数を順にプリントする	print(変数名, 変数名, 変数名)
option: アリスブルー色を使う	color = 'aliceblue'
データフレームのある列の中に文字列とがいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
リストを文字列として、指定した文字でつなげる	文字.join(map(str, リスト))
リストとリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームの下100行を抽出する	df.tail(100)
ヒストグラムの色をライトグリーンにする	plt.hist(データ列, color='lightgreen')
option: コロンをセパレータで使う	sep = ':'
散布図を赤い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
箱ひげ図を2つ並べてプロットする	plt.boxplot([データ列, データ列])
散布図にバツ印を用いる	plt.scatter(データ列x, データ列y, marker='x')
データフレームをJSONL形式のファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
二つの文字列が大文字小文字を無視して同じか	文字列.casefold() == 文字列2.casefold()
散布図をロージーブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
カテゴリ別でグループ化してにバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
フクシア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
xの小数点以下'1'桁まで表示する	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
三つの数値をプリントする	print(数値, 数値, 数値)
データフレームを十の位で丸めて、整数にする	df.round(-1).astype(int)
データフレームの一部のカラムの平均を求める	df[['列A', '列B']].mean()
文字列を最後のカンマで二分して残りを求める	文字列.rpartition(',')[-1]
横軸だけ目盛り線	plt.grid(axis='x')
分類結果のPPVを算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
数式のyを指定した数式で置き換える	数式.subs(y, 数式2)
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgrey')
バイトオーダを確認する	sys.byteorder
折れ線グラフのポイント印を黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
n個の整数列を作る	list(range(n))
文字列が空白文字からなるか調べる	文字列.isspace()
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
カラムの相関係数を見る	scipy.stats.pearsonr(df['列A'], df['列B'])
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
文字列中にひとつも小文字がないか調べる	any(not c.islower() for c in 文字列)
ヒストグラムと勾配ブースティングでクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
句読点文字を使う	string.punctuation
実数のn乗を算出する	x ** n
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
表データをあるカラムで昇順に並べ直す	df.sort_values(by='列A', ascending=True)
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
文字がひらがな	('ぁ' <= 文字 <= 'ん')
整数が5で割り切れるか	整数 % 5 == 0
多次元データを主成分分析として整数次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ファイルをSJISでオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
データフレームの選択した列の相関行列をスピアマン相関係数で求める	df[['列A', '列B']].corr(method='spearman')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
天井	math.ceil(x)
データフレームの欠損値をその50パーセンタイルで埋める	df.fillna(df.median())
リストと数列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
出力ストリームに文字列を書き込む	s = ''<nl>f.write(s)
実数の小数点以下を丸める	round(x)
データフレームの選択したカラムの欠損値を直前の値に指定する	df[['列A', '列B']].fillna(method='ffill')
ヒストグラムをライトサーモン色を用いて描画する	plt.hist(データ列, color='lightsalmon')
数式を数値に変換する	float(数式)
option: 小麦色色を使う	color = 'wheat'
データフレームの選択したカラムの未入力値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
行列の行ごとの最小値	np.min(aArray, axis=1)
四分位数ごとにデータフレームの中の列をビニングする	pd.qcut(df[col], 4)
５乗を求めたい	X ** 5
ひとつでも非アルファベットが文字列中に含まれるか調べる	any(not c.isalpha() for c in 文字列)
カラムの中の未入力値の個数を数える	df['列A'].isna().sum()
識別子がビルトインかどうか調べる	inspect.isbuiltin(識別子)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
外れ値を除いたデータフレームのカラムの算術平均を使う	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
データシリーズをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
赤い一点鎖線でリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
箱ヒゲ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
デックの長さを制限する	collections.deque(maxlen=最大長)
整数がセットのどれか	aSet = [0, 1, 2]<nl>整数 in aSet
格子線をプロットに入れる	plt.grid(True)
両端キューの最初に文字列を入れる	両端キュー.appendleft(文字列)
実数を万の位で丸める	round(x, -4)
ふたつの列からグループ化し個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
散布図のダイアモンドマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
option: ディープスカイブルー色を使う	color = 'deepskyblue'
マッピングを浅くコピーする	辞書.copy()
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
データフレームの選択した列の欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
数式の微分を計算する	sympy.diff(数式)
▽印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
ふたつの列としてグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
カウンタを多い順に列挙する	aCounter.most_common()
数列のイミュータブルな集合を準備する	frozenset(数列)
option: グレーにグラフの色を指定する	color = 'gray'
option: 線種を実線に設定する	linestyle = 'solid'
行列の差	aArray - aArray2
切片なしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
実数は無限大	math.isinf(x)
折れ線グラフを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ふたつのカラムを組み合わせてグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: 色をマゼンタに変更する	color = 'magenta'
数列のイミュータブルな集合を求める	frozenset(数列)
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
タイムスタンプのデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
データフレームの一部のカラムの未入力値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
縦棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
事前に正規表現をコンパイルする	re.compile(pattern)
配列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
数列から一つランダムに選んでリストにする	random.choice(数列)
option: フォントの色をスカイブルーに設定する	color = 'skyblue'
データフレームの選択した列の標準偏差を算出する	df[['列A', '列B']].std()
ヒストグラムを描画し、区間数をセットする	plt.hist(データ列, bins=区関数)
option: 改行コードをWindowsに変更する	newline = '\r\n'
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
文字列の無限列	itertools.repeat(文字列)
変数について数式の積分を求める	sympy.integrate(数式, 変数)
部分文字列が文字列の開始位置からと終了位置までの間に含まれない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
データフレームのあるカラムをリストとして抽出する	df['列A'].values.tolist()
オブジェクトは非同期ジェネレータ関数	inspect.isasyncgenfunction(オブジェクト)
データフレームから型リストデータ型の列を取り出す	df.select_dtypes(include=typeList)
整数が整数2よりも小さい	整数 < 整数2
データシリーズのNaNを最小値に変更する	ds.fillna(ds.min())
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
データフレームのある列のパーセンタイルを求める	df['列A'].quantile(パーセント/100)
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
折れ線グラフの三角印を青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ふたつのタプルを連結する	タプル + タプル2
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
散布図の三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データフレームの指定したカラムがどの程度分散しているか確認する	df['列A'].var()
カウンタの積集合	aCounter & aCounter2
リストの散布図をプロットする	plt.scatter(データ列x, データ列y)
散布図のクロスマーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームの中にいくつ日付データが存在するか求める	df.isin([value]).sum()
ヒストグラムの色をマルーンにセットする	plt.hist(データ列, color='maroon')
標準出力がパイプかどうか	not sys.stdout.isatty()
リストを中央値でビン分割する	pd.qcut(aList, 2)
ヒストグラムをネイビー色として描画する	plt.hist(データ列, color='navy')
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
イテラブルをイミュータブルなに変換する	frozenset(イテラブル)
データフレームを二つの列によって並べ直して、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
文字列が別のに含まれるかどうか	文字列 not in 別の文字列
文字列を正規表現で分割する	re.split(pattern, s)
リストから複数の要素をランダムに重複なく抽出する	random.sample(リスト, k=n)
パールゴールデンロッドにヒストグラムの色をセットする	plt.hist(データ列, color='palegoldenrod')
ヒストグラムを淡い茶色色で描画する	plt.hist(データ列, color='tan')
棒グラフをゲインズボロ色を用いて描画する	plt.bar(データ列x, データ列y, color='gainsboro')
棒グラフをブラック色として描画する	plt.bar(データ列x, データ列y, color='black')
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
データ列の比率を円プロットで可視化する	plt.pie(データ列, startangle=90)
オブジェクトは整数か調べる	int = int<nl>isinstance(obj, int)
オブジェクトがある型	isinstance(obj, クラス)
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
文字列の両端から指定した文字を取り除く	文字列.strip(文字)
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
文字列中にアスキー文字があるか調べる	any(c.isascii() for c in 文字列)
マゼンタでxを出力する	print(f'\033[35m{x}\033[0m')
タイムスタンプデータををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
表のインデックスをリセットする	df.reset_index()
year年month月day日hour時minute分のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
リストのヒストグラムを描画する	plt.hist(データ列)
データフレームの一部のカラムの中に日付データがあるかどうか調べる	df[['列A', '列B']].isin([value])
文字列をJSONフォーマットを用いてファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
データフレームから数値データのカラムを抽出する	df.select_dtypes('number')
option: 色をダークカーキに設定する	color = 'darkkhaki'
文字列中にひとつでも非英数字が含まれる	any(not c.isalnum() for c in 文字列)
最大長nのキューを新規生成する	collections.deque(maxlen=最大長)
数式をyについてn階微分する	sympy.diff(数式, y, n)
データフレームの選択したカラムを10000の位で丸める	df[['列A', '列B']].round(-4)
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
実数の指数部	math.frexp(x)[1]
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
条件を満たす場合だけ、実行したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
文字列を最後の部分文字列で二分割して、最初の方を使う	文字列.rpartition(部分文字列)[0]
データフレームをグループ化し、標準偏差を求める	df.groupby('列A').std()
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
散布図のダイアモンド印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
データフレームの選択したカラムの中の欠損値の個数を数える	df[['列A', '列B']].isna().sum()
文字列を最後の区切り記号で二分割する	文字列.rpartition(セパレータ)
option: レベッカパープルを使う	color = 'rebeccapurple'
グラフのx座標にラベルを付ける	plt.xlabel('x軸ラベル')
データフレームのインデックスがnの行を選択する	df.loc[n]
散布図をシエナ色として描画する	plt.scatter(データ列x, データ列y, color='sienna')
現在の秒数	datetime.date.today().second
現在を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
縦棒グラフを描画し、、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: 読み込み用に変更する	mode = 'r'
２つの条件に書きたい	条件式 and 条件式2
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
ヒストグラムの色をミディアムシアグリーンにセットする	plt.hist(データ列, color='mediumseagreen')
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
指定した列によってデータフレームをグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
マップから項目名で指定された項目をポップする	辞書.pop(キー)
データフレームをグループ化しあるカラムに対し標準偏差を計算する	df.groupby('列A')['列B'].std()
数列をセットにする	set(数列)
リストとリストについての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
実行時の標準出力の出力先がターミナルかどうか確認する	sys.stdout.isatty()
データシリーズが何日か調べる	ds.dt.day
部分文字列がsubで開始するかどうか調べる	文字列.startswith(部分文字列)
データシリーズの不偏分散	ds.var(ddof=1)
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
中央値でデータフレームのNaNを補う	df.fillna(df.median())
データフレームの指定した列の標準偏差	df['列A'].std()
整数が1、もしくは2	整数 == 1 or 整数 == 2
整数の十六進表現	hex(整数)
散布図の三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
マップに項目名が存在しないとき、処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
例外のメッセージを見る	etype, evalue, traceback = sys.exc_info()
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
エクセルからシートを指定してデータフレームをロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
日付データが何曜日か知る	aDate.weekday()
option: グラフの色を赤に設定する	color = 'red'
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
文字列をコロンで分割して、文字列リストにする	文字列.split(':')
カウンタの値を列挙する	aCounter.keys()
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
2を底とする対数	math.log2(x)
今日が火曜日	datetime.datetime.today().weekday() == 1
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
整数がn回繰り返すイテラブル	itertools.repeat(整数, n)
option: ビスク色を使う	color = 'bisque'
あるカラムの母標準偏差を計算する	df['列A'].std(ddof=0)
データフレームをあるカラム毎にグループ化し、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
日付時刻データとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
xが0に近づく場合の数式の極限値を求める	sympy.limit(数式, [|変数]x, 0)
データフレームの先頭100行を抽出する	df.head(100)
配列からn要素サンプリングしてリストにする	random.sample(配列, k=n)
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
指定したカラムの上位25パーセント	df['列A'].quantile(0.25)
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
配列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
コーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
日付データが月曜日かどうか調べる	aDate.weekday() == 0
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
原点から(小数点数,y)の距離	math.hypot(x, y)
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームからカラムを二つだけ選択する	df[['列A', '列B']]
データフレームの中のカラムを四分位数でビン分割する	pd.qcut(df[col], 4)
文字列を走査し正規表現にマッチするか調べる	re.search(pattern, s)
行列を元にして全要素が0のベクトルを初期化する	np.zeros_like(aArray)
実数の平方根	math.sqrt(x)
三乗が書きたい	X ** 3
配列のピアソンの積立相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データシリーズの欠損値をxで埋める	ds.fillna(x)
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
データフレームを複数の列を用いて小さい順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=True)
option: ブルーバイオレット色を使用する	color = 'blueviolet'
xとyをコロンで区切ってプリントする	print(x, y, sep=':')
イテラブルと列の直積	itertools.product(iterable, iterable2)
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
項をセットから取り除く	セット.remove(要素)
option: スノーにグラフの色を指定する	color = 'snow'
N回同じ処理を繰り返したい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
変数名が関数かどうか調べる	inspect.isfunction(識別子)
日付を用いる	import datetime
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
16進数文字列をバイト列に変換する	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
文字列が全て小文字か判定する	文字列.islower()
作画のx軸とy軸の比率を同じする	plt.axis('equals')
データフレームの指定したカラムの中に存在する日付データの合計を数える	df['列A'].isin([value]).sum()
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
selectorsでマスクされたリストの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームを2つの列によって並べ直す	df.sort_values(by=['列A', '列B'])
ファイルを文字列の示す文字コードで開く]	s = 'utf-8'<nl>open(filepath, encoding=s)
xを水色でプリントできる文字列にする	f'\033[36m{x}\033[0m'
インデックスによってデータフレームを小さい順にソートする	df.sort_index(ascending=True)
データシリーズが正規分布からどの程度、尖っているか調べる	ds.skew()
文字列の中でケースを無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
JSONフォーマットの入力ストリームを辞書に変換する	json.load(ファイル入力)
小数点数を小数点数で割った剰余	math.remainder(x, x2)
データフレームをグループ化し、ある列に対し標準偏差を算出する	df.groupby('列A')['列B'].std()
option: マーカーの色を指定する	markerfacecolor = '#800080'
データシリーズは何日か見る	ds.dt.day
イテラブルとリストについて散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの指定した列の中に文字列があるかどうか確認する	df['列A'].isin([value])
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
UNIXコマンドtextを実行する	"text = ""echo 'A'""<nl>os.system(text)"
データフレームの指定したデータ型のカラム名を列挙する	df.select_dtypes(型).columns
分類結果の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
カラーバーを設定する	plt.colorbar()
nの無限のイテラブルを得る	itertools.repeat(n)
タイムスタンプデータが木曜日かどうか調べる	aDatetime.weekday() == 3
スノー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
散布図のダイアモンドマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
データ列を用いる	import pandas as pd
線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
グラフで使える色の一覧を知る	matplotlib.colors.cnames
列名を指定してデータフレームを全ジョインする	pd.merge(df, df2, on='列A', how='outer')
折れ線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
Pythonパスの一覧を知る	sys.path
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
散布図をラベンダーブラッシュ色を使って描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
疑似乱数を計算する	random.random()
整数の和	整数 + 整数2
実数の小数部を計算する	math.modf(x)[0]
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
三つの変数を順に表示する	print(変数名, 変数名, 変数名)
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ある列の値がxに等しく、かつ別の列の値がyに等しいデータを取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
辞書のキーに対応した値を得る	辞書.get(キー, 見つからない場合の値)
整数の無限イテラブル	itertools.repeat(整数)
柱状グラフの範囲を指定する	plt.hist(データ列, range=(start, end))
配列の行	aArray[行番号]
コマンド引数で指定されたファイル名をひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
表データのカテゴリデータをダミー変数にする	pd.get_dummies(df)
n個にリストをビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
ファイルパスが存在するか	os.path.exists(filepath)
データフレームの選択した列が正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
option: ブルーバイオレットに色を変更する	color = 'blueviolet'
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
日付データからn時間を引く	aDate - datetime.timedelta(hours=n)
散布図の星マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ヒストグラムの線種を実線に設定する	plt.hist(データ列, linestyle='solid')
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
方程式として数式の変数の解を算出する	sympy.solve(数式, y)
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
ファイルに文字列を書く	s = ''<nl>f.write(s)
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの▽印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
紺碧色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
deqの右側を求める	両端キュー[-1]
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
文字列中にひとつでも非大文字があるか確認する	any(not c.isupper() for c in 文字列)
kを底とする小数点数の対数	math.log(x, k)
赤い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: インディアンレッド色を使用する	color = 'indianred'
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategrey'
赤い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームをある列を使って集約してそれぞれのグループ毎の件数を知る	df.groupby('列A').size()
データフレームの選択したカラムの中に文字列と文字列がいくつ含まれるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
空のスタック	両端キュー = collections.deque()
表データのあるカラムが何秒か見る	df['列A'].dt.second
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
配列とイテラブルについて散布図を描き、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
図のインチを指定する	plt.figure(figsize=(横幅, 高さ))
２つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
最小値を欲しい	min(X, Y)
数字を全部使う	string.digits
文字列を最後のカンマで分割したときの後半の文字列	文字列.rpartition(',')[-1]
書き込みできるようにUTF8でファイルパスをオープンする]	open(filepath, mode='w', encoding='utf-8')
線グラフを真紅色を使って描画する	plt.plot(データ列x, データ列y, color='crimson')
青い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
リストのイミュータブルな集合	frozenset(リスト)
双方向キューの先頭にリストの各要素を追加する	両端キュー.extendleft(リスト)
option: ホワイトスモーク色を使う	color = 'whitesmoke'
ヒストグラムの色をシーグリーンにする	plt.hist(データ列, color='seagreen')
両端キュー中の整数の出現数を数える	両端キュー.count(整数)
整数がリストのどれか	aList = [0, 1, 2]<nl>整数 in aList
冪乗を計算したい	X ** Y
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
データシリーズの値が欠損値かどうか調べる	ds.isna()
散布図をrgbの左三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ダークグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
散布図の三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
日付データが月曜日	aDate.weekday() == 0
1行から二つの文字列を読む	A, B = map(str, input().split())
ふたつのリストの積集合	list(set(リスト).intersection(set(リスト2)))
配列をビン数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
整数の八乗	整数 ** 8
二つのオブジェクトが等しいか確認する	obj == obj2
データフレームの先頭10行	df.head(10)
データフレームの指定したカラムの25パーセンタイル	df['列A'].quantile(0.25)
xとyを改行なしにプリントする	print(x, y, end='')
カラーバーを横向きにつける	plt.colorbar(orientation='horizontal')
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ライトグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
データフレームから指定した三列を取り出す	df[['列A', '列B', '列C']]
データフレームを表示するとき、表示する最大列数を変更する	pd.set_option('display.max_columns', n)
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
下位集合	セット.issubset(セット2)
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
辞書を浅く複製する	dict(辞書)
データフレームを欠損値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
データフレームから指定した２つの列だけ取り出す	df[['列A', '列B']]
折れ線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図のクロスマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
折れ線グラフを赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
アイボリー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
データシリーズが何分か調べる	ds.dt.minute
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
文字列が別の文字列に含まれるか調べる	文字列 in 別の文字列
折れ線グラフの丸マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームの選択したカラムの中に文字列がある	df[['列A', '列B']].isin([value])
文字列の先頭から空白を取り除く	文字列.lstrip()
クリムゾン色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
文字の文字コードを使う	ord(文字)
リストとリストについて散布図を描いて、三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
エクセルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
リストをビン数nで分割する	pd.cut(aList, n)
文字列の無限イテラブル	itertools.repeat(element)
縦棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフにクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
option: 標準エラーを使用する	file = sys.stderr
配列を更新不能な集合にする	frozenset(配列)
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
データフレームのカラムをグループ化して、ヒストグラムとして見る	sns.histplot(df, x='列名', hue='カテゴリ名')
配列をビン数nとしてビニングする	pd.cut(aArray, n)
散布図の印を三角印にする	plt.scatter(データ列x, データ列y, marker='^')
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
option: インディゴを使用する	color = 'indigo'
option: チョコレートを使う	color = 'chocolate'
カテゴリ列で色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ファイルからJSONをロードする	with open('file.json') as f:<nl><tab>data = json.load(f)
条件がふたつとも同時に成り立つ	条件 and 条件2
option: ピーチパフを用いる	color = 'peachpuff'
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
option: シーグリーンを使う	color = 'seagreen'
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
ゼロ埋めされた行列を初期化する	np.zeros(行数, 列数)
列のエポック秒をPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
両端キューに整数をエンキューする	両端キュー.append(整数)
最大最小値でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
実数の小数点を丸める	round(x)
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
文字列を最初のカンマで二分する	文字列.partition(',')
nxn2の二次元リストを作る	[[0] * n for _ in range(n2)]
カラムの名前の一覧を使う	df.columns
データフレームを関数の値でグループ化し、統計量を計算する	df.groupby(関数).describe()
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
グレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
オブジェクトはコードかどうか	inspect.iscode(オブジェクト)
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
二つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
複数の計算結果を順に表示する	print(式, 式, 式)
2進数文字列をバイナリにする	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
option: スカイブルー色を用いる	color = 'skyblue'
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
赤い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
表計算ファイルからCSVファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
二点間のユークリッド距離を計算する	math.dist(point, point2)
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームを関数の値によってグループ化し要約統計量を求める	df.groupby(関数).describe()
ひとつでも英数字が文字列中に存在するかどうか	any(c.isalnum() for c in 文字列)
配列が何のデータ型か調べる	aArray.dtype()
折れ線グラフをプラム色を用いて描画する	plt.plot(データ列x, データ列y, color='plum')
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
配列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
配列とリストについての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
表データのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
折れ線グラフをライトサーモン色として描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの右三角印を黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
三つの条件のうちいずれか成り立つ	条件 or 条件2 or 条件3
コロンで区切ってxとyをプリントする	print(x, y, sep=':')
データフレームの指定したカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
データフレームをある列によって降順にソートする	df.sort_values(by='列A', ascending=False)
日付データが水曜日	aDate.weekday() == 2
ひとつでも英字が文字列中にあるか確認する	any(c.isalpha() for c in 文字列)
文字列を空白で区切って、数列に変換する	list(map(int, 文字列.split()))
シアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
縦棒グラフをフローラルホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームのあるカラムの時	df['列A'].dt.hour
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
リストの要素を文字列として、空白によってつなげる	' '.join(map(str, リスト))
データフレームのあるカラムを千の位で丸める	df['列A'].round(-3)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
option: グラフの色をシスルに設定する	color = 'thistle'
文字列の開始位置以降がsubで始まるか調べる	文字列.startswith(部分文字列, 開始位置)
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
整数の五乗を求める	整数 ** 5
整数が一桁の数か	-9 <= 整数 <= 9
option: ポイントマーカーを描画する	marker = '.'
線グラフの色を珊瑚に変更する	plt.plot(データ列x, データ列y, color='coral')
ファイルをEUCでオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
散布図をピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='pink')
option: フォントの色をリネンに設定する	color = 'linen'
２つのデータフレームをくっつける	# concat<nl>pd.concat([df, df2])
ダークバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
リストと配列について散布図をプロットして、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
データフレームの一部のカラムを丸めて整数にする	df[['列A', '列B']].round().astype(int)
タプルが少なくとも一つ真	any(タプル)
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
オブジェクトの参照カウントを知る	sys.getrefcount(オブジェクト)
データフレームの指定したカラムを100の位で丸める	df['列A'].round(-2)
条件によって処理を変えたい	if 条件式:<nl><tab>print('真のとき')  # 直して<nl>else:<nl><tab>print('そうでなければ')  # 直して
データフレームの指定したカラムの欠損値を最大値にセットする	df['列A'].fillna(df['列A'].max())
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
ファイルを書き込みできるように文字列の示す文字コードとして開く]	open(filepath, mode='w', encoding=s)
option: オーキッド色を使用する	color = 'orchid'
データフレームの中である列に重複があれば、除く	df.drop_duplicates(subset='列A', inplace=True)
データフレームの最後n行を取り出す	df.tail(n)
ターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
ブースティングを用いて回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
ファイルから読み込みストリームを使う	open(filepath)
リストを境界値としてリストをビニングする	pd.cut(aList, aList)
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
２つのデータフレームをつなぐ	# concat<nl>pd.concat([df, df2])
オブジェクトをイテラブルにする	iter(obj)
行列の列ごとの平均値	np.mean(aArray, axis=0)
折れ線グラフをロージーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='rosybrown')
option: ディープスカイブルー色を使用する	color = 'deepskyblue'
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームを表示するときヘッダー行を左寄せにする	pd.set_option('colheader_justify', 'left')
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームの一部の列の欠損値をその最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
散布図の菱形印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列を末尾からカンマで区切る	文字列.rsplit(',')
ユークリッド距離を求める	math.dist(point, point2)
辞書にキーが存在するとき、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
データフレームの一部のカラムの母標準偏差を求める	df[['列A', '列B']].std(ddof=0)
リストとリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
文字列の先頭で正規表現に複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
作画のグリッドを白くする	sns.set(style='whitegrid')
整数かける整数を計算する	整数 * 整数2
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
整数を整数で割ってその結果を切り捨てる	整数 // 整数2
線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
option: パウダーブルー色を使う	color = 'powderblue'
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
データを最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
青い実線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ファイルを全部、読み込む	f.read()
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: フォントの色をコーンズシルクに指定する	color = 'cornsilk'
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
リストに要素を加える	リスト.append(要素)
散布図をゴーストホワイト色として描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
浮動小数点数の分数近似	q.limit_denominator(max_denominator=1000000)
列の代表値	df['列A'].describe()
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
オブジェクトがリストかタプルか確認する	isinstance(obj, (list)
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
セットがスーパーセットもしくは等しい	セット >= セット2
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
パーセプトロンで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
縦棒グラフをシーグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='seagreen')
タプルの平均を計算する	sum(タプル)/len(タプル)
イテラブルを回数して、カウンタを更新する	aCounter.update(iterable)
xの方程式として数式を解く	sympy.solve(数式, [|変数]x)
データフレームの一部の列の値をValueMapでまとめて変更する	df[['列A', '列B']].replace(ValueMap)
y軸の目盛を非表示にする	plt.yticks([])
グラフを画面用に指定する	sns.set(context='notebook')
異なるカラムをキーとして２つのデータフレームを全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
リストのn番目以降の部分を取り出す	リスト[n:]
シルバー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
外れ値を除いたカラムの分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームの末尾5行を取り出す	df.tail(5)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
日付データが土曜日かテストする	aDate.weekday() == 5
双方向キューの先頭を見る	両端キュー[0]
プラットホームがリナックス	sys.platform.startswith('linux')
折れ線グラフをティール色として描画する	plt.plot(データ列x, データ列y, color='teal')
同じと書きたい	X == Y
三項演算子が書きたい	X if 条件式 else Y
データフレームの指定した名前リストの列を抽出する	columns = ['列A', '列B']<nl>df[columns]
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
イテラブルの推移を点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
配列からn個サンプリングしてリストにする	random.sample(配列, k=n)
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
現在処理中のエラー情報	etype, evalue, traceback = sys.exc_info()
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームの末尾100行を選択する	df.tail(100)
ヒストグラムの色をアイボリーにする	plt.hist(データ列, color='ivory')
タンジェントを求める	math.tan(x)
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
原点から(浮動小数点数,y)の距離	math.hypot(x, y)
ヒストグラムの色をダークブルーに変更する	plt.hist(データ列, color='darkblue')
option: 出力先をファイルにする	file = sys.open('file.txt', 'w')
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
整数が整数かどうか判定する	x.is_integer()
データフレームを整列して、下位を取り出す	df.sort_values('キーとなる列').tail(n)
回帰分析をランダム性を追加したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
データフレームのstart行目からend行目までを選択する	df[start:end]
option: オリベドラブにフォントの色を設定する	color = 'olivedrab'
データフレームのあるデータ型の列名を列挙する	df.select_dtypes(型).columns
数値を改行しなくて出力する	print(数値, end='')
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(df['列A'])
縦棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
ピアソンでデータフレームの相関行列を求める	df.corr(method='pearson')
データフレームの先頭n行	df.head(n)
キーが辞書上で既に定義されているか調べる	キー in 辞書
データフレームの選択した列の相関行列をケンドール順位相関係数として求める	df[['列A', '列B']].corr(method='kendall')
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
青い破線を用いてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
要素の無限のイテラブルを見る	itertools.repeat(要素)
変数xについて偏微分する	sympy.diff(数式, [|変数]x)
データフレームの一部のカラムを百の位で四捨五入する	df[['列A', '列B']].round(-2)
縦棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(数式, 変数, oo)
数式を簡単化する	sympy.sympify(数式)
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
文字列を最後の区切り記号で二分する	文字列.rpartition(セパレータ)
条件を満たす間、処理をループさせたい	while 条件式:<nl><tab>print('繰り返し')  # 直して
データフレームの中に文字列とがある	df.isin([value, value2])
ヒストグラムを一点鎖線にする	plt.hist(データ列, linestyle='dashbot')
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
チョコレート色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
データフレームの選択したカラムを10の位で丸める	df[['列A', '列B']].round(-1)
リストのn番目のの要素	リスト[n]
表のn行目を抽出する	df.loc[n]
棒グラフをミディアムシアグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームを指定した列によってソートする	df.sort_values(by='列A')
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
データ列間の当てはまりの良さを求める	sklearn.metrics.r2_score(データ列, データ列2)
リネン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
文字列を走査し正規表現にケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をスカイブルーに指定する	plt.plot(データ列x, データ列y, color='skyblue')
リストのn番目の	リスト[n]
横棒グラフをオールドレース色を使って描画する	plt.barh(データ列x, データ列y, color='oldlace')
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ファイルパスが存在する	os.path.exists(filepath)
数列と数列について散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列の終了位置より前に部分文字列が含まれないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームの指定した列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
文字列を最後のコロンで分けた時の後半の文字列	文字列.rpartition(':')[-1]
ゼロ埋めした符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
option: オレンジ色を使う	color = 'orange'
散布図の星マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
キーが辞書に存在するか調べる	キー in 辞書
棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
終了位置まで部分文字列を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
実数が有限か判定する	math.isfinite(x)
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
文字列をコロンで分割して、文字列リストに変換する	文字列.split(':')
option: グラフの色をタンに設定する	color = 'tan'
ヒストグラムの色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
リストとリストの散布図を描いてマーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
文字列を空白によって分割する	文字列.split()
データフレームを関数毎にグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
棒グラフをシーグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='seagreen')
ヒストグラムの色を青緑にセットする	plt.hist(データ列, color='teal')
線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
データフレームの一部のカラムの欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
異なるカラムをキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
2つのデータフレームを列名を指定して内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
ヒストグラムを黄緑色を用いて描画する	plt.hist(データ列, color='chartreuse')
指定した列のカテゴリで集計し平均値を求める	df.groupby('列A').mean()
データフレームの複数のカラムをドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
xとyをタブで区切って表示する	print(x, y, sep='\t')
整数の五分の1	整数 / 5
濃いシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
オブジェクトは数値か確認する	isinstance(obj, (int,float))
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
整数を16進数表記に変換する	hex(整数)
新しいヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
要素がタプルに含まれないかどうか	要素 not in タプル
行列の次元を変形する	aArray.reshape(行数, 列数)
複数行対応としてパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームを10の位で丸める	df.round(-1)
イテラブルと配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
option: 深さを制限する	maxdepth = n
リストをJSON形式でファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
オリベドラブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
あるカラムを10の位で丸めて整数型にする	df['列A'].round(-1).astype(int)
半透明の一点鎖線で配列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
カウンタを高頻出方から列挙する	aCounter.most_common()
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
リストの要素を文字列として、ある文字列を用いて連結する	文字列.join(map(str, リスト))
2乗を書きたい	X ** 2
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
データフレームをグループ化し、それぞれの合計を求める	df.groupby('列A').sum()
ヒストグラムの色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
リストとリストについて散布図をプロットして、マーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
散布図にrgbの▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図をホワイト色で描画する	plt.scatter(データ列x, データ列y, color='white')
ヒストグラムの色をペールグリーンにセットする	plt.hist(データ列, color='palegreen')
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線グラフをパールバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palevioletred')
filepathにディレクトリを変更する	os.chdir(os.dirname(filepath))
日付データの日数	aDate.day
複数の列からグループ化し個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
青い線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
空白で文字列を二分する	文字列.partition()
線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
ロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
オブジェクトをユーザ向けの文字列に変換する	str(obj)
ファイルが存在する	os.path.exists(filepath)
半透明の実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの一部の列の値が欠損値かどうか	df[['列A', '列B']].isna()
指定したカラムの中に存在する日付データと文字列の数をカウントする	df['列A'].isin([value, value2]).sum()
赤い四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データシリーズのNaNを最小値で埋める	ds.fillna(ds.min())
組合せ	math.comb(n, k)
配列のモードを算出する	mode, count = scipy.stats.mode(配列)
実数の正弦	math.sin(x)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
カウンタを集合に変換する	set(aCounter)
文字列の左側がsub	文字列.startswith(部分文字列)
データフレームをソートして下位を取り出す	df.sort_values('キーとなる列').tail(n)
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
スピアマン順位相関係数としてデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='spearman')
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
キューの先頭の要素	両端キュー[0]
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
ゴールド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
ラインを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
option: グラフの色をブラックに設定する	color = 'black'
本日の日	datetime.datetime.today().day
option: フォントの色をライトサーモンに指定する	color = 'lightsalmon'
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
option: データ型として８ビット整数型を用いる	np.int8 = np.int<nl>dtype = np.int8
目的変数をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データ列の折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの選択したカラムの中にある日付データの数を数える	df[['列A', '列B']].isin([value]).sum()
リストをカンマ区切りで表示する	print(*リスト, sep=',')
行列の値を使う	aArray[行番号, 列番号]
縦軸の目盛を非表示にする	plt.yticks([])
表データをグループ化しある列に対し最小値を算出する	df.groupby('列A')['列B'].min()
データ列のユニークな値の個数を確認する	ds.nunique()
グリーンイエローにヒストグラムの色を指定する	plt.hist(データ列, color='greenyellow')
双方向キューの右に文字列を追加する	両端キュー.append(文字列)
option: ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
オブジェクトは辞書	dict = int<nl>isinstance(obj, dict)
数列から重複なく、n個ランダムに選んでリストにする	random.sample(数列, k=n)
CSVファイルを列名を指定せず読む	pd.read_csv('file.csv', header=None)
点線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dotted')
エラーなく文字列のサフィックスから部分文字列を除去する	文字列.removesuffix(部分文字列)
正則化付き単回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
数式を展開する	sympy.expand(数式)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
データシリーズのNaNを前の値で補う	ds.fillna(method='ffill')
シーケンスを配列に変換する	np.array(iterable)
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
行列の内積を求める	np.dot(aArray, aArray2)
文字列の左端から部分文字列を除く	文字列.lstrip(部分文字列)
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
option: グラフの色をタンに指定する	color = 'tan'
データフレームのどの値が頻出か調べる	df.mode()
option: サドルブラウン色を使う	color = 'saddlebrown'
指定したカラムの分散	df['列A'].var()
データフレームの指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
データシリーズを四捨五入して整数型にする	ds.round().astype(int)
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
ハッシュ値	hash(x)
データフレームの選択したカラムのモード	df[['列A', '列B']].mode()
データフレームの指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
数式の変数の解を方程式として求める	sympy.solve(数式, y)
マップに項目名が存在していない場合処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
option: シーグリーンにグラフの色を設定する	color = 'seagreen'
データフレームのあるカラムのSkewnessを求める	df['列A'].skew()
SJISでファイルをオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
列をビン分割する	pd.cut(ds, aList)
原点から(小数点数,y)の距離を計算する	math.hypot(x, y)
データシリーズの欠損値を中央値で埋める	ds.fillna(ds.median())
テンプレートを辞書でフォーマットする	書式.format_map(辞書)
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
文字列中に非大文字が含まれるかどうか調べる	any(not c.isupper() for c in 文字列)
文字列を最後のセパレータで二分する	文字列.rpartition(セパレータ)
データフレームをソートして、上位を取り出す	df.sort_values('キーとなる列').head(n)
nからn2までの整数列を得る	list(range(n, n2+1))
データフレームの指定したカラムを正規表現でまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
コメントを書きたい	# コメント
option: ボックスチャートを横向きにする	vert = False
散布図を黒い下三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
プラム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
予測データのコンフュージョン・マトリックスを計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ポイント印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
変数名がジェネレータ関数か調べる	inspect.isgeneratorfunction(識別子)
1文字分標準入力から読み込む	sys.stdin.read(1)
文字列が指定したに含まれるか確認する	文字列 not in 別の文字列
カウンタをリストで更新する	aCounter.update(iterable)
スクリプトのサブディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), ディレクトリ名))
文字列から末尾を取り除く	文字列.removesuffix(部分文字列)
ファイルパスをSJISとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
実行中のメソッド名を得る	inspect.currentframe().f_code.co_name
ミントクリーム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
xを青色でプリントする	print(f'\033[34m{x}\033[0m')
ヒストグラムをオリーブ色として描画する	plt.hist(データ列, color='olive')
データシリーズの未入力値を直後の値で埋める	ds.fillna(method='bfill')
option: 色を青にする	color = 'blue'
option: 説明変数を事前に正規化する	normalize = True
データシリーズのNaNを後の行の値に指定する	ds.fillna(method='bfill')
折れ線グラフの下三角印を黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
タプルの先頭のn要素を取り除く	タプル[n:]
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: ライトグレーを用いる	color = 'lightgray'
option: クリムゾン色を使う	color = 'crimson'
オブジェクトのハッシュ値を求める	hash(obj)
option: 線種を一点鎖線に設定する	linestyle = 'dashbot'
配列のKurtosis	scipy.stats.kurtosis(配列, bias=False)
option: マーカーを四角に設定する	marker = 's'
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
文字列を区切り記号で二分し、、後半を求める	文字列.partition(セパレータ)[-1]
整数の八進数文字列を使う	oct(整数)[2:]
データフレームの指定したカラムの欠損値を直後の値にする	df['列A'].fillna(method='bfill')
リストとしてデータフレームのある列を抽出する	df['列A'].values.tolist()
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
リストをJSON文字列にする	json.dumps(リスト, ensure_ascii=False)
棒グラフをライム色を使って描画する	plt.bar(データ列x, データ列y, color='lime')
文字列をISO書式を用いて日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
例外のメッセージ	etype, evalue, traceback = sys.exc_info()
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
赤い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
文字コードに対応する文字	chr(文字コード)
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
日付データの日数を求める	aDate.day
全てのシートを表計算から読む	pd.read_excel('file.xlsx', sheet_name=None)
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
option: 左三角マーカーを使う	marker = '<'
ある列を除く	df.drop('列A', axis=1, inplace=True)
キーがマップに存在するかどうか調べる	キー not in 辞書
タプルの要素を小さい順に並べ直す	sorted(タプル, reverse=True)
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
デックの中に要素が含まれてるか確認する	要素 in 両端キュー
日付データが火曜日か	aDate.weekday() == 1
ある列のカテゴリごとの合計	df.groupby('列A').sum()
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
整数の2進数文字列	bin(整数)[2:]
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
一時的に実行しないようにしたい	# コメント
カラムを全て日付データに変換する	pd.to_datetime(df['列A'])
散布図を描画する	plt.scatter(データ列x, データ列y)
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームから列名を複数指定して選択する	columns = ['列A', '列B']<nl>df[columns]
フローラルホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
グラフの描画で暗くパレットを使う	sns.set(pallete='dark')
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
文字列をSJISでバイト列にする	文字列.encode(encoding='sjis', errors='ignore')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
整数に変換する	int(x)
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
多次元データをMSDで数値次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームの欠損値を50パーセンタイルにする	df.fillna(df.median())
ヒストグラムをライトコーラル色として描画する	plt.hist(データ列, color='lightcoral')
計算機イプシロン	sys.float_info.epsilon
円周率	math.pi
option: 色をダーク・スラテグレーに設定する	color = 'darkslategrey'
FIXME:カテゴリーデータを出現頻度順にソートする	df['列A'].value_counts().sort_index().index
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
ひとつも英数字が文字列中にないか	any(not c.isalnum() for c in 文字列)
データフレームをソートし、、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
フォレストグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
オブジェクトをイテラブルに変換する	iter(obj)
小麦色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
赤い下三角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
option: シーグリーンにフォントの色を設定する	color = 'seagreen'
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='w')
文字列が別のに含まれるか調べる	文字列 not in 別の文字列
kを底とする浮動小数点数の対数	math.log(x, k)
データフレームのカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
日付データが火曜日か調べる	aDate.weekday() == 1
あるカラムの標準偏差を求める	df.groupby('列A').std()
辞書から項目名とバリューのペアを取り出しひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
配列と配列について散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
双方向キューを数列から作る	collections.deque(数列)
リストをnから順序付けする	enumerate(リスト, start=n)
option: 出力先を標準エラーに指定する	file = sys.stderr
箱ヒゲ図でデータフレームの二つのカラムを並べて図示する	plt.boxplot([df['カラム'], df['カラム']])
現在をタプルにする	datetime.datetime.today().timetuple()
データフレームのカラムのケンドールの順位相関係数を算出する	scipy.stats.kendalltau(df['列A'], df['列B'])
現在が日曜日か調べる	datetime.datetime.today().weekday() == 6
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
両端キューの要素を反転する	両端キュー.reverse()
マップを空にする	辞書.clear()
サポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
変数の値を減少させる	変数 -= 整数
データフレームの75パーセンタイル	df.quantile(0.75)
カテゴリ別でグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
セットから整数を取り除く	セット.remove(数)
多次元データを多次元尺度構成法を用いて文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ディレクトリをモジュールを検索するパスに追加する	sys.path.append(ディレクトリ名)
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
折れ線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
上位集合もしくは等しい	セット >= セット2
ある値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
黒い星マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
ブルーバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
整数が負の整数	整数 < 0
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
あるカラムの中に日付データと文字列が存在する	df['列A'].isin([value, value2])
配列の尖度を計算する	scipy.stats.kurtosis(配列, bias=False)
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
ヒストグラムの色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
データシリーズの欠損値を最小値で置き換える	ds.fillna(ds.min())
データフレームをTSVファイルを用いて保存する	df.to_csv('file.tsv', sep='\t')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
データフレームの選択した列を千の位で四捨五入して整数にする	df[['列A', '列B']].round(-3).astype(int)
データフレームのあるカラムをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
スプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
整数を2進文字列に変換する	bin(整数)[2:]
散布図のバツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: サーモン色を用いる	color = 'salmon'
範囲指定をした配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
ふたつのリストの差分	list(set(リスト).difference(set(リスト2)))
キーがマッピング上で定義済み	キー in 辞書
文字列中にひとつでも非小文字が存在するか調べる	any(not c.islower() for c in 文字列)
データシリーズを百の位で四捨五入する	ds.round(-2)
縦棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
エンコーディングで文字列をバイト列にする	文字列.encode(encoding=encoding)
ゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgray')
データフレームの未入力値を後の値で埋める	df.fillna(method='bfill')
小数点数の小数部を求める	math.modf(x)[0]
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データフレームから一つの列を選択する	df[['列A']]
数式のxを指定された数式で置き換える	数式.subs([|変数]x, 数式2)
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
ヒストグラムの色をゴーストホワイトにセットする	plt.hist(データ列, color='ghostwhite')
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
リストの要素を並べる	sorted(リスト)
データシリーズの中の欠損値の数を数える	ds.isna().sum()
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
文字列中の指定した文字の出現	文字列.count(文字)
文字列を最初のコロンによって二分する	文字列.partition(':')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
ロイヤルブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
プロットの縦横比を等しくする	plt.axis('equals')
ベクトルの要素ごとに加算する	aArray + aArray2
要素が全て1のベクトルを作成する	np.ones(要素数, dtype=np.int)
日付時刻データにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
グラフ中の(x,y)の場所に補足を表示する	plt.legend(loc=(x, y))
横棒グラフをパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='purple')
データシリーズの標本分散	ds.var(ddof=0)
option: ミディアムバイオレットレッド色を使用する	color = 'mediumvioletred'
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
リストを縦軸、配列を横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
配列と配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
横棒グラフを紺色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: ダークオーキッド色を使う	color = 'darkorchid'
本日が土曜日かどうか	datetime.datetime.today().weekday() == 5
タイムスタンプデータからn日分減らす	aDatetime - datetime.timedelta(days=n)
二進対数を求める	math.log2(x)
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
指定した列の欠損値をxに指定する	df['列A'].fillna(x)
浮動小数点数を百の位で四捨五入する	round(x, -2)
option: カーキにグラフの色を指定する	color = 'khaki'
多い方からカウンタを列挙する	aCounter.most_common()
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
スカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='skyblue')
ファイルからn文字、読み込む	f.read(n)
散布図をシアン色として描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
イテラブルに列を続けた列	itertools.chain(iterable, iterable2)
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
セットの濃度を求める	len(セット)
ヒストグラムを破線として描画する	plt.hist(データ列, linestyle='dashed')
データフレームから型リストデータ型の列を抽出する	df.select_dtypes(include=typeList)
トマト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
アイボリーにヒストグラムの色を変更する	plt.hist(データ列, color='ivory')
データフレームを書き出す	df.to_csv('file.csv')
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
1からNまでの配列を作成する	np.arange(1, N+1)
バイナリできるようにファイルパスを開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
バイナリ書き込み用にファイルパスをオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
タンにヒストグラムの色を設定する	plt.hist(データ列, color='tan')
ふたつの列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
option: ダークカーキを使う	color = 'darkkhaki'
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
データフレームのカラムの各データは何回出現するか調べる	df[col].value_counts()
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
Xの冪乗を求めたい	X ** Y
データ列の各値の出現回数を算出する	ds.value_counts()
現在の再帰の最大回数	sys.getrecursionlimit()
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
カラムの不偏標準偏差	df['列A'].std()
データフレームの選択したカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
ターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='turquoise')
淡い茶色色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
散布図を赤いダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
変数名をキーとして、マップ	dict(name='kogi', age=6)
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
option: NaNは例外を投げる	nan_policy = 'raise'
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
２つのデータフレームを横向きに合体させる	pd.concat([df, df2], axis=1)
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
分子n分母mの分数を準備する	fractions.Fraction(numerator=n, denominator=m)
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgray')
イテラブルからn個サンプリングしてリストにする	random.sample(イテラブル, k=n)
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
切り上げて整数に変換する	math.ceil(x)
複数の条件分岐が書きたい	if 条件式:<nl><tab>print('1')<nl>elif 条件式2:<nl><tab>print('2')<nl>else:<nl><tab>print('3')
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
タプルの中の一番大きい値	max(タプル)
実数はNaN	math.isnan(x)
ライトスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
スノーにヒストグラムの色を変更する	plt.hist(データ列, color='snow')
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
追加できるようにファイルをUTF8でオープンする]	open(filepath, mode='a', encoding='utf-8')
ヒストグラムの色をダークレッドにする	plt.hist(データ列, color='darkred')
入力ストリームをJSONとしてパースする	json.load(ファイル入力)
文字列中にひとつでも非英数字があるか	any(not c.isalnum() for c in 文字列)
整数をnだけ左シフトする	整数 << n
リストの要素が最初に見つかる位置を使う	リスト.index(要素)
棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームをある列で大きい順にソートする	df.sort_values(by='列A', ascending=False)
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: シャルトリューズを使う	color = 'chartreuse'
最初のを外したデータフレーム	df[df.columns[1:]]
標準出力がターミナル出力かどうか判定する	sys.stdout.isatty()
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
クラス分類をヒストグラムと勾配ブースティングを用いて行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
柱状グラフの区間を設定する	plt.hist(データ列, range=(start, end))
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategray'
オブジェクトはリストクラスか調べる	list = int<nl>isinstance(obj, list)
文字列中にひとつもアルファベットが含まれないかどうか調べる	any(not c.isalpha() for c in 文字列)
option: フォントの色をパウダーブルーに指定する	color = 'powderblue'
データフレームの選択したカラムの中の欠損値の個数をカウントする	df[['列A', '列B']].isna().sum()
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
データフレームのある列の値がx以下のデータを抽出する	df[df['列A'] <= x]
配列をイミュータブルなセットに変換する	frozenset(配列)
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
数値の符号を同じにする	math.copysign(x, x2)
文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
データフレームのカラムをグループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ディムグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
option: シーグリーン色を使用する	color = 'seagreen'
カラム名を指定してデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
タイムスタンプデータが金曜日	aDatetime.weekday() == 4
データフレームの選択した列の分位数を求める	df[['列A', '列B']].quantile(パーセント/100)
データフレームを２つの列の値によってグループ化する	df.groupby(['列A', '列B'])
ファイル名がCSVファイルかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
ディレクトリをPythonパスに追加する	sys.path.append(ディレクトリ名)
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
フォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
線グラフの色を青緑に変更する	plt.plot(データ列x, データ列y, color='turquoise')
文字列を最後の区切り文字で分けた場合の後半の文字列	文字列.rpartition(セパレータ)[-1]
双方向キューの最初に要素を追加する	両端キュー.appendleft(要素)
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
指定した列の値によってデータフレームを集計して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データフレームからランダムに5行を抽出する	df.sample(5)
列の欠損値を直後の値で置換する	df['列A'].fillna(method='bfill')
データシリーズの中にとがいくつあるか数える	ds.isin([value, value2]).sum()
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
縦棒グラフを黄緑色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの一部のカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
option: マーカーを星に変更する	marker = '*'
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
文字列からJSON形式のデータを読む	data = json.loads(文字列)
縦棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
option: ▲印を使用する	marker = '^'
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列の左端がsubかどうか	文字列.startswith(部分文字列)
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームの列を度数分布図として描く	plt.hist(df[column])
勾配ブースティング分類木を作成する	model = sklearn.ensemble.GradientBoostingClassifier()
コロンで区切ってxとyを表示する	print(x, y, sep=':')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
データシリーズのNaNを最頻値で置換する	ds.fillna(ds.mode().iloc[0])
0で全要素を初期化した配列	np.zeros(要素数)
整数がいつまでも続くイテラブル	itertools.repeat(整数)
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
逆双曲線余弦	math.acosh(x)
ファイル名がCSVファイルかどうか確認する	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
非数を使用する	math.nan
指定した列のみデータフレームの重複を見る	df.duplicated(subset='列A')
データフレームのある列の値がx以上の行を抽出する	df[df['列A'] >= x]
データフレームの中にある日付データと文字列の個数を調べる	df.isin([value, value2]).sum()
折れ線グラフの四角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの平均	df.mean()
線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
部分文字列が文字列の指定した位置以前にないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
印字を全部使う	string.printable
ブースティングとしてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
option: ライトグリーンを使う	color = 'lightgreen'
option: グラフの色をダークスレートブルーに指定する	color = 'darkslateblue'
プラットホームはWindowsか確認する	sys.platform.startswith('win32')
Xの累乗が求めたい	X ** Y
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
多次元データをMSDを用いて整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: フォントの色をダークグレーに変更する	color = 'darkgrey'
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データシリーズを10の位で四捨五入する	ds.round(-1)
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
双方向キューに要素をエンキューする	両端キュー.append(要素)
ファイルをバイナリできるように開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
正規分布にしたがって配列の値が発生する累積確率を算出する	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
横棒グラフをミスティローズ色を使って描画する	plt.barh(データ列x, データ列y, color='mistyrose')
条件に応じて処理を変えたい	if 条件式:<nl><tab>print('真のとき')  # 直して<nl>else:<nl><tab>print('そうでなければ')  # 直して
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
行列間の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
データシリーズの中の未入力値の数を数える	ds.isna().sum()
文字列を区切り記号で区切って、列挙する	文字列.split(セパレータ)
データフレームのメディアン	df.median()
要素がタプルに含まれない	要素 not in タプル
option: ファイルを出力先にする	file = sys.open('file.txt', 'w')
データフレームのインデックスがnの行を抽出する	df.loc[n]
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
双方向キューが空でないか調べる	len(両端キュー) != 0
オブジェクトの無限列を得る	itertools.repeat(element)
文字列の左端からタブを除く	文字列.lstrip('\t')
８乗を書きたい	X ** 8
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
1で全要素を初期化した配列	np.ones(要素数, dtype=np.int)
実数から浮動小数点数を減算する	x - y
データフレームの一部のカラムのNaNを平均で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
文字列の無限イテラブル	itertools.repeat(文字列)
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
今日が月曜日か調べる	datetime.datetime.today().weekday() == 0
横棒グラフをアリスブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='aliceblue')
折れ線グラフの色をペールグリーンにセットする	plt.plot(データ列x, データ列y, color='palegreen')
option: グラフの色をミディアムターコイズに指定する	color = 'mediumturquoise'
文字列を双方向キューの先頭に追加する	両端キュー.appendleft(文字列)
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
文字列から指定された文字を全て取り除く	文字列.replace(文字, '')
欠損値も加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
縦棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
文字列の中でパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s)
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
文字列が全て空白文字からなるか調べる	文字列.isspace()
整数の八分の1	整数 / 8
有理数の分母	q.denominator
タプルの中の最も小さい値	min(タプル)
黄色色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
本日の曜日を整数で見る	datetime.datetime.today().weekday()
空白文字を全部使う	string.whitespace
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
option: ライトスレイグレーを使用する	color = 'lightslategrey'
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
二つの整数最小公倍数	math.lcm(n, n2)
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
イテラブルを両端キューに変換する	collections.deque(イテラブル)
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームの列の各データは何回出現するか確認する	df[col].value_counts()
イエローグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
タプルの末尾を見る	タプル[-1]
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
option: グラフの色をオーキッドに設定する	color = 'orchid'
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
文字列の指定した位置以降に部分文字列があるか	文字列.find(部分文字列, 開始位置) != -1
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
半透明の実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
目盛線	plt.grid(linestyle='--')
option: グラフの色をラベンダーに変更する	color = 'lavender'
xの小数点以下'3'桁の文字列にする	':.3f'.format(x)
文字列の中でパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s)
リストをn回接続する	リスト * n
正規表現を複数行対応として事前にコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データ列とリストについて散布図を描いて、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
標準出力がターミナル出力か判定する	sys.stdout.isatty()
デフォルトのエンコーディングを求める	sys.getdefaultencoding()
整数が奇数かどうか調べる	整数 % 2 == 1
オブジェクトは非同期ジェネレータ関数かどうか調べる	inspect.isasyncgenfunction(オブジェクト)
両端キューをデキューする	両端キュー.popleft()
文字列中にひとつでも非空白が含まれるかどうか調べる	any(not c.isspace() for c in 文字列)
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームを二つのカラムによって小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
データフレームをグループ化し各個数を求める	df.groupby('列A').count()
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームを二つの列で大きい順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
ライトシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: フォントの色をダークターコイズにセットする	color = 'darkturquoise'
オブジェクトは関数か調べる	inspect.isfunction(オブジェクト)
deqのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
全ての空白文字	string.whitespace
データフレームの重複を見る	df.duplicated()
option: マーカーを丸に設定する	marker = 'o'
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
リストと配列について散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストからランダムに一つ選んでリストにする	random.choice(リスト)
ヒストグラムをライトコーラル色を用いて描画する	plt.hist(データ列, color='lightcoral')
散布図をダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D')
option: ドジャーブルーを用いる	color = 'dodgerblue'
ある列リストついて、データフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
辞書を別の辞書で更新する	辞書.update(辞書2)
文字列は全て十進数字かどうか調べる	文字列.isdecimal()
データフレームが正規分布からどれだけ、歪んでいるか見る	df.kurt()
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
ビン数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
バイアスなしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
マッピングで文字列を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
が名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
折れ線グラフを耐火レンガ色を使って描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: グラフの色を小麦色に指定する	color = 'wheat'
黒い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: グラフの色を暗い赤に設定する	color = 'darkred'
データフレームを関数の値によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データシリーズの歪度を求める	ds.kurt()
データフレームの列のユニークな値の個数を見る	df[col].nunique()
option: ブラック色を使う	color = 'black'
辞書から項目名とその項目を組として取り出す	辞書.items()
文字列の右側から改行を取り除く	文字列.rstrip('\n')
要素がセットのいずれでもないどうか	要素 not in セット
データフレームとしてJSONLファイルをロードする	pd.read_json(filename, orient='records', lines=True)
データフレームが重複しているかどうか	df.duplicated()
ディムグレーにヒストグラムの色を指定する	plt.hist(データ列, color='dimgrey')
小数点以下'1'桁までを表示する	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
タイムスタンプデータが何時か知る	aDatetime.hour
折れ線グラフの四角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
浮動小数点数を小数点以下で四捨五入する	round(x, n)
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
マップのコピー	dict(辞書)
イテラブルの各要素に対してpredicateFuncの適用がTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
全句読点文字	string.punctuation
option: グラフの色をホットピンクに指定する	color = 'hotpink'
２つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームのあるカラムの年	df['列A'].dt.year
線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
シアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
グラフの横軸に軸名を付ける	plt.xlabel('x軸ラベル')
データ列の折れ線グラフを三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
option: タン色を用いる	color = 'tan'
データフレームを百の位で四捨五入して、整数型にする	df.round(-2).astype(int)
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
nと整数が等しいか確認する	整数 == 整数2
ファイルを追加モードでオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
インディゴ色としてヒストグラムを描画する	plt.hist(データ列, color='indigo')
実数を二乗する	x ** 2
実数の双曲線余弦を求める	math.cosh(x)
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
要素がセットのメンバーでないか調べる	要素 not in セット
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
リストから配列を初期化する	np.array(aList)
等しい条件を書きたい	X == Y
実数の絶対値を計算する	math.fabs(x)
データフレームのカラムの標準誤差を計算する	scipy.stats.sem(df['列A'])
三変数の最大値	max(x, y, z)
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
リストを文字列としてタブで一つにする	'\t'.join(map(str, リスト))
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
option: 書き込みモードを使う	mode = 'w'
半透明の一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
リストを文字列として文字でつなげる	文字.join(map(str, リスト))
横棒グラフを貝殻色を用いて描画する	plt.barh(データ列x, データ列y, color='seashell')
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
整数の三分の1	整数 / 3
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
プロットをプレゼン用に指定する	sns.set(context='talk')
データフレームを二つの列を用いてソートして、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
option: マーカーの大きさを設定する	markersize = 2.0
整数の16進表記	hex(整数)
貝殻色でヒストグラムを描画する	plt.hist(データ列, color='seashell')
赤い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
２つの列によってデータフレームをグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
データフレームの列の不偏分散	df['列A'].var(ddof=1)
両端キューの先頭に文字列を付け加える	両端キュー.appendleft(文字列)
option: フォントの色をダークグリーンに設定する	color = 'darkgreen'
タプルを逆さにする	reversed(タプル)
カウンタを低頻出方からリストとして得る	aCounter.most_common()[::-1]
データフレームの一部のカラムを四捨五入して、整数型にする	df[['列A', '列B']].round().astype(int)
箱髭図を二つ並べて描画する	plt.boxplot([データ列, データ列])
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
リストを配列に変換する	np.array(aList)
線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
プラットホームがWindowsか	sys.platform.startswith('win32')
小なりイコールと書きたい	X <= Y
配列を転置する	aArray.T
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: バッファリングのサイズを設定する	buffering = 4096
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
折れ線グラフの色をオリベドラブにセットする	plt.plot(データ列x, データ列y, color='olivedrab')
ヒストグラムを淡い茶色色として描画する	plt.hist(データ列, color='tan')
option: レモンシフォン色を使う	color = 'lemonchiffon'
データフレームをグループ化し、あるカラムに対し合計を求める	df.groupby('列A')['列B'].sum()
文字列を全て小文字にする	文字列.lower()
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
カラム名を指定して二つのデータフレームをジョインする	'<nl>pd.merge(df, df2, on='列A')
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
イテラブルを集合にする	set(イテラブル)
リスト間のケンドールの相関係数を計算する	scipy.stats.kendalltau(数列, 数列2)
散布図の四角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームをある列のカテゴリでグループ化し、、各グループごとの件数を知る	df.groupby('列A').size()
データフレームの一部の列の相関行列	df[['列A', '列B']].corr()
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
ファイルのフォルダ名を見る	os.path.dirname(filepath)
ペルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームのカラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
セットが空でないか確認する	len(セット) != 0
データフレームの選択した列を10の位で四捨五入する	df[['列A', '列B']].round(-1)
ファイルからストリームを開き]fileとする	file = open(filepath)
両端キューの中に文字列が含まれてるか調べる	文字列 in 両端キュー
マップにキーが存在するかどうか調べる	キー not in 辞書
ラベンダー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
オブジェクトが属性を持つかどうか調べる	hasattr(obj, プロパティ名)
折れ線グラフの印を右三角にする	plt.plot(データ列x, データ列y, marker='>')
線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
直前の値でデータシリーズの欠損値を埋める	ds.fillna(method='ffill')
文字列から末尾を取り除く	文字列.removeprefix(部分文字列)
配列の標準誤差を計算する	scipy.stats.sem(配列)
双方向キューの末尾にイテラブルの各値を追加する	両端キュー.extend(イテラブル)
ビン数nでデータ列を分割する	pd.cut(ds, n)
条件を満たす限り、実行を繰り返したい	while 条件式:<nl><tab>print('繰り返し')  # 直して
折れ線グラフをダークバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図の丸マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
整数のそれぞれの桁の総和を求める	sum(map(int, str(整数)))
線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの中の列を分割数nとしてビニングする	pd.cut(df[col], n)
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
大文字・小文字を無視して事前に正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
イテラブルを多重集合に変換する	collections.Counter(iterable)
複数のデータフレームを横方向にくっつける	pd.concat([df, df2, df3], axis=1)
データフレームを2つの列によって並べ直してNaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
option: ライムグリーン色を用いる	color = 'limegreen'
データフレームの一部のカラムを千の位で丸める	df[['列A', '列B']].round(-3)
要素がタプルに含まれないかどうか確認する	要素 not in タプル
折れ線グラフのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
option: シアンを使う	color = 'cyan'
ヒストグラムのビン数をする	plt.hist(データ列, bins=区関数)
淡いピンク色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
リストを文字列として、指定した文字で連結する	文字.join(map(str, リスト))
淡い茶色色のヒストグラムを描画する	plt.hist(データ列, color='tan')
整数がセットのどれかかどうか	aSet = [0, 1, 2]<nl>整数 in aSet
セットから全ての要素を除く	セット.clear()
紺色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
列に列を続けたイテラブルを求める	itertools.chain(iterable, iterable2)
行列と同じ大きさの空配列を作る	np.empty_like(aArray)
オブジェクトはリストかどうか調べる	list = int<nl>isinstance(obj, list)
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
横棒グラフを淡い茶色色で描画する	plt.barh(データ列x, データ列y, color='tan')
ファイルからの入力ストリームを求める	open(filepath)
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='gray')
改行なしに二つの変数を表示する	print(変数名, 変数名, end='')
データフレームの一部のカラムのNaNを平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
オリベドラブ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
ミディアムバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ある列を破壊的に削除する	df.drop('列A', axis=1, inplace=True)
リッジ回帰とロッソ回帰の組み合わせた分析の準備をする	model = sklearn.linear_model.ElasticNet()
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームの平均値	df.mean()
エラーなくセットから整数を除去する	セット.discard(数)
リストと配列の散布図をプロットして、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
変数についてのn階偏微分を計算する	sympy.diff(数式, 変数, n)
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームの選択したカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
セットを別のセットとの差分のみに更新する	セット.difference_update(セット2)
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
ファイルを改行除外して一行ずつ読み込む	f.readline()
日付データをISO8601形式の文字列にする	aDate.isoformat()
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
指定された列のカテゴリで集計し各分散を算出する	df.groupby('列A').var()
データシリーズの未入力値をxに変更する	ds.fillna(x)
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
フォレストグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
辞書の項目を一つずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
無限にシーケンスを繰り返す	itertools.cycle(iterable)
折れ線グラフの色をライトスカイブルーにする	plt.plot(データ列x, データ列y, color='lightskyblue')
セットが空でないか	len(セット) != 0
等量でn個に配列をビン分割する	pd.qcut(aArray, n)
散布図のダイアモンド印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームをタブ区切りのファイルから読み込む	pd.read_csv('file.tsv', sep='\t')
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
散布図の▼マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
読み込みできるようにファイルをオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
文字列は数値	文字列.isnumeric()
nで乱数シードを固定する	random.seed(n)
整数が正の数か調べる	整数 > 0
複数のデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
二数の最大値	max(x, y)
リネン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
文字列を最後のコロンで二分して、残りを見る	文字列.rpartition(':')[-1]
配列間の各要素の最大公約数を求める	np.gcd(aArray, aArray2)
nが整数と等しいか	整数 == 整数2
ある列の値ごとの平均値を計算する	df.groupby('列A').mean()
タプルの各値を関数に適用した結果で並べ直す	sorted(タプル, key=func)
実数が負	x < 0
option: データ型として符号なし８ビット整数型を使用する	np.uint8 = np.int<nl>dtype = np.uint8
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
横棒グラフを描画する	plt.barh(ラベル列, データ列)
乱数を計算する	random.random()
黄色い線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
文字列中にひとつでも非アルファベットが含まれるか確認する	any(not c.isalpha() for c in 文字列)
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
option: グリーンイエローに色を変更する	color = 'greenyellow'
オールドレース色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
折れ線グラフのバツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
全要素を０で初期化した３2ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
文字列の先頭から余分な空白やタブを取り除く	文字列.lstrip()
数列とデータ列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
マップのキーの値	辞書[キー]
データフレームの全カラムを散布図として図示する	sns.pairplot(df)
ミスティローズ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
複数の計算結果を改行なしに表示する	print(式, 式, end='')
データフレームを各列毎にグループ化し、、文字列というグループの大きさを求める	df.groupby(column).size()[s]
ファイルをBOM付きでオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
整数乱数の配列	np.random.randint(開始値, 終了値, N)
折れ線グラフの色をアンティークホワイトにセットする	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
セットが空かどうか判定する	len(セット) == 0
キューの最初から要素を取り出す	両端キュー.popleft()
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
自然数個からk個取り出したときの並べ方の総数	math.perm(n, k)
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
ある列の値がx以上y未満のデータを抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
データフレームの指定した列においてどの値が頻出か見る	df['列A'].mode()
タプルの要素が最初に見つかる位置を求める	タプル.index(要素)
データフレームのカラムの平均の標準誤差を計算する	scipy.stats.sem(df['列A'])
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
文字列の先頭	文字列[0]
文字列の左側から空白を取り除く	文字列.lstrip('\t')
データフレームの重複していない行だけを取り出す	df[~ df.duplicated(keep=False)]
整数をバイナリに変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big')
option: アクア色を使用する	color = 'aqua'
rgbの四角マーカーを配列とデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 箱ひげ図を水平方向にする	vert = False
マッピングから項目名で指定された項目をポップする	辞書.pop(キー)
option: 標準エラーを出力先にする	file = sys.stderr
数式の数値を算出する	float(数式)
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
整数2がn以上かつn3以下かテストする	整数 <= 整数2 and 整数2 <= n3
折れ線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
option: シアンにグラフの色を変更する	color = 'cyan'
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
プロットを描画する	import matplotlib.pyplot as plt
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
表のインデックスを振り直す	df.reset_index()
カウンタを高頻度方から列挙する	aCounter.most_common()
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
日付データの日	aDate.day
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
数式のyをある数式で置き換える	数式.subs(y, 数式2)
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
棒グラフをコーンズシルク色を使って描画する	plt.bar(データ列x, データ列y, color='cornsilk')
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
散布図の印を丸にする	plt.scatter(データ列x, データ列y, marker='o')
２つの文字列は同じ	文字列 == 文字列2
数字を使う	string.digits
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームの選択した列の欠損値を平均に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ホットピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームの欠損値をドロップし、みる	df.dropna()
折れ線グラフのスタイルを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ディムグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
文字列を区切り記号によって二分する	文字列.partition(セパレータ)
箱ひげ図をプロットして、平均値を加える	plt.boxplot(データ列, showmeans=True)
実数のアークサイン	math.asin(x)
ライトコーラル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
グラフの描画で暗くパレットを使用する	sns.set(pallete='dark')
option: グラフの色をターコイズに設定する	color = 'turquoise'
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()
辞書に辞書2の項目を加えて、更新する	辞書.update(辞書2)
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
異なる列をキーにしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
切片なしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
青い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
文字列は全て識別子か	文字列.isidentifier()
n2行n列の２次元リストを作る	[[0] * n for _ in range(n2)]
option: フォントの色を耐火レンガにセットする	color = 'firebrick'
データフレームのあるカラムのメディアン	df['列A'].median()
淡い茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
タイムスタンプデータにn時間を加算する	aDatetime + datetime.timedelta(hours=n)
日付データをISO書式の文字列に変換する	aDate.isoformat()
行列の行ごとの最大値を求める	np.max(aArray, axis=1)
リストの折れ線グラフを描画し、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
整数の16進数表現	hex(整数)
配列の最頻値	mode, count = scipy.stats.mode(配列)
日付データからn日分減らす	aDate - datetime.timedelta(days=n)
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
８ビット整数型のゼロ埋めされたベクトルを作る	np.zeros(要素数, dtype=np.int8)
深紅色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
識別子がコードかどうか調べる	inspect.iscode(識別子)
散布図を赤色として描画する	plt.scatter(データ列x, データ列y, color='red')
option: グラフの色をチョコレートにセットする	color = 'chocolate'
ダークスレートブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
動作環境がMacOS	sys.platform.startswith('darwin')
変数xがマイナス無限大に近づくとき、極限値を求める	sympy.limit(数式, [|変数]x, -oo)
簡単な説明を表示する	plt.legend()
二つのセットがdisjointかどうか	セット.isdisjoint(セット2)
option: エンコーディングを文字コードtextに変更する	encoding = text
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
行列をリストから作成する	np.array(aList)
グラフの用途を論文に指定する	sns.set(context='paper')
全てのシートをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
データフレームのカラム間のピアソンの積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
option: ペルー色を使う	color = 'peru'
バリーウッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームがどの程度、正規分布から尖っているか見る	df.skew()
数列と配列の散布図を描画して、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
二乗を計算したい	X ** 2
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
文字列中にひとつも英数字が含まれない	any(not c.isalnum() for c in 文字列)
文字のユニコードを使う	ord(文字)
データフレームの選択した列の空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データシリーズの中にいくつ欠損値が含まれるか数える	ds.isna().sum()
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームを散布図で可視化して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図の印の太さを変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: グラフの色をダークグレーに指定する	color = 'darkgrey'
プロットの描画で暗くカラーパレットを使用する	sns.set(pallete='dark')
グラフの描画でパステル調に色テーマを用いる	sns.set(pallete='pastel')
わりを書きたい	X / Y
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
棒グラフをオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='orange')
整数の二分の一を求める	整数 / 2
あるカラムの値はNaNか	df['列A'].isna()
カウントプロットを描画する	sns.countplot(x='列名', data=df)
シアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
カウンタを辞書に変換する	dict(aCounter)
タプルの値を並べる	sorted(タプル)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
データシリーズの中にある文字列の合計を数える	ds.isin([value]).sum()
ライトシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
▼印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
option: ドジャーブルー色を使う	color = 'dodgerblue'
文字列からある文字を除去する	文字列.replace(文字, '')
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
行列の分散を求める	np.var(aArray)
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
データシリーズのNaNをxに変更する	ds.fillna(x)
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図を赤い三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
タブで区切ってxとyを表示する	print(x, y, sep='\t')
異なる列をキーとして２つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
リストから複数個ランダムに選んでリスト化する	random.choices(リスト, k=n)
リスト中の最初の要素を探す	リスト.index(要素)
n個にデータ列をビン分割する	pd.cut(ds, n)
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
行列の行ごとの最小値を求める	np.min(aArray, axis=1)
データフレームをCSVファイルで書き出す	df.to_csv('file.csv')
足し算したい	X + Y
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
赤い破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
タイムスタンプデータと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
配列と配列について散布図を描画して、▽マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
ケンドール順位相関係数でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
環境の名前を知る	sys.platform
部分文字列で文字列を区切り、、列挙する	文字列.split(部分文字列)
リストとリストについて散布図を描いて、ダイアモンドマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストをボックスチャートにする	plt.boxplot(データ列)
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームをグループ化してヒストグラムとして描く	sns.histplot(df, x='列名', hue='カテゴリ名')
指定した列の欠損値を最小値で補完する	df['列A'].fillna(df['列A'].min())
既存のベクトルを元にして全要素が1のベクトル	np.ones_like(aArray)
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
ランダムに10行をデータフレームから選択する	df.sample(10)
最初のカテゴリーを除き、データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
ふたつのリストのインターセクションを使う	list(set(リスト).intersection(set(リスト2)))
ライムグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
自然数個からk個取り出した時の並べ方の総数	math.perm(n, k)
データフレームの未入力値をモードに設定する	df.fillna(df.mode().iloc[0])
データ列を中央値でビン分割する	pd.qcut(ds, 2)
データフレームのカラム間の相関係数を求める	df.corr()
配列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ファイル入力からJSON形式のデータを読む	json.load(ファイル入力)
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
データ列と数列について散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: バイナリ書き込みモードを用いる	mode = 'wb'
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
ミディアムオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
上限長nの両端キューを作成する	collections.deque(maxlen=最大長)
option: モカシン色を使用する	color = 'moccasin'
プラットホームがリナックスか調べる	sys.platform.startswith('linux')
データシリーズを100の位で丸めて、整数型にする	ds.round(-2).astype(int)
データフレームの欠損値をその最頻値で埋める	df.fillna(df.mode().iloc[0])
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームのNaNをモードに設定する	df.fillna(df.mode().iloc[0])
要素はセットのいずれか調べる	要素 in セット
疑似乱数を得る	random.random()
CSVからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in 文字列)
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームをグループ化し、ある列に対し合計を計算する	df.groupby('列A')['列B'].sum()
プロットにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
リストと配列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図を濃いシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: インディゴ色を使う	color = 'indigo'
グリーンイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
モジュールを検索するパスを列挙する	sys.path
データシリーズの欠損値を平均値に指定する	ds.fillna(ds.mean())
両端キュー中の整数を数える	両端キュー.count(整数)
黒い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ライトブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightblue')
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgray')
配列を等間隔でn個に分割する	pd.cut(aArray, n)
option: 色を黄色に指定する	color = 'yellow'
リストを文字列として、'改行で連結する	'\n'.join(map(str, リスト))
option: 色をオレンジに設定する	color = 'orange'
option: 深紅を使う	color = 'crimson'
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
リストとリストについて散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
赤い一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
外れ値に強い線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
最頻値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
スピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
ある列の文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
プログラムの実行を正しく終了する	sys.exit(0)
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
折れ線グラフのダイアモンドマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
整数が5の倍数か	整数 % 5 == 0
データフレームの最後のカラム以外を説明変数にする	説明変数 = df[df.columns[:-1]]
２次元タプルをフラット化する	sum(タプル)
数列からn個、サンプリングしてリスト化する	random.sample(数列, k=n)
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
バギングを使ってクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
指定したカラムのカテゴリで集計し、それぞれの最小値を算出する	df.groupby('列A').min()
アイリスのデータセットをロードする	df = sns.load_dataset('iris')
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
option: スラッシュをセパレータで使用する	sep = '/'
整数が3で割り切れる	整数 % 3 == 0
JSON形式の文字列を構文解析する	data = json.loads(文字列)
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
分類モデルの再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
列を配列にする	np.array(iterable)
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
識別子がジェネレータ	inspect.isgenerator(識別子)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
xを白色でプリントできる文字列に変換する	f'\033[37m{x}\033[0m'
yについて数式のインテグラルを求める	sympy.integrate(数式, y)
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
四角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
エンコーディング	sys.getdefaultencoding()
日付時刻データが月曜日か確認する	aDatetime.weekday() == 0
データフレームの中の列を等間隔でn個にビンニングする	pd.cut(df[col], n)
黒いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
二つ並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
配列の偏差値を計算する	50 + 10 * scipy.stats.zscore(配列)
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
英字の小文字列	string.ascii_lowercase
リストとリストについて散布図をプロットし、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
ヒストグラムを黄緑色として描画する	plt.hist(データ列, color='chartreuse')
整数の右シフト	整数 >> n
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
option: 標準出力を使う	file = sys.stdout
小なりイコールと条件を書きたい	X <= Y
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
数列と配列の散布図を描いてマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
1からnまでの整数列を見る	list(range(1, n+1))
整数はリストのどれかか調べる	aList = [0, 1, 2]<nl>整数 in aList
偽陽性を避けたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
変数のの型が欲しい	type(X)
'A'列の値がxに等しい行を取り出す	df[df['列A'] == x]
棒グラフの色をrgbに指定する	plt.bar(ラベル列, データ列, color=rgb)
実数の2乗を算出する	x ** 2
数式を変数についてn階偏微分する	sympy.diff(数式, 変数, n)
単位行列を作成する	np.eye(行数, 列数)
横棒グラフをダークオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ラベンダー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
xを整数に変換する	int(x)
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ダークオリーブグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
データシリーズの平均値	ds.mean()
ある列で集計し、各標準偏差を計算する	df.groupby('列A').std()
アヤメのデータセットからデータフレームをロードする	df = sns.load_dataset('iris')
文字列がセットのメンバーに含まれないか調べる	文字列 not in セット
整数が整数2以上かどうか調べる	整数 >= 整数2
識別子がコルーチン	inspect.iscoroutine(識別子)
データシリーズのタイムゾーンを設定する	ds.tz_convert('Asia/Tokyo')
option: マーカーの色を淡い茶色にする	markerfacecolor = 'tan'
大文字・小文字を無視して文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームのひとつのカラムを説明変数にする	説明変数 = df[['列名']]
日付時刻データとタイムスタンプデータの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データフレームのカラムの平均の標準誤差	scipy.stats.sem(df['列A'])
実数のkを底とする対数	math.log(x, k)
ある列にリストの値が含まれるデータを取り出す	df[df['列A'].isin(リスト)]
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
シルバー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
未満と書きたい	X < Y
あるカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
セットの補集合	セット.difference(セット2)
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
要素が全て1の行列	np.ones(要素数, dtype=np.int)
スタックが空でない	len(両端キュー) != 0
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
現在処理中の例外情報	etype, evalue, traceback = sys.exc_info()
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
グラフを画面用に設定する	sns.set(context='notebook')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
いつまでも要素が続くイテラブルを求める	itertools.repeat(要素)
データフレームの最後10行を選択する	df.tail(10)
文字列中にひとつも小文字がないかどうか調べる	any(not c.islower() for c in 文字列)
ダークバイオレット色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームの第一四分位数	df.quantile(0.25)
option: グラフの色をフクシアに設定する	color = 'fuchsia'
データフレームの指定したカラムのNaNを中央値で置換する	df['列A'].fillna(df['列A'].median())
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
データを最大値と最小値として正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データシリーズが何分か見る	ds.dt.minute
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
セットから要素を全て消す	セット.clear()
配列とリストの散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフに青い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームをグループ化しそれぞれの合計を求める	df.groupby('列A').sum()
ライトグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
ファイルからディレクトリ名を求める	os.path.dirname(filepath)
数列から複数個ランダムに選んでリストにする	random.choices(数列, k=n)
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
option: ダイアモンドマーカーを使う	marker = 'D'
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
散布図の色を濃いシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
option: ミディアムスレートブルーを用いる	color = 'mediumslateblue'
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
文字列のある範囲に部分文字列が存在するか	文字列.find(部分文字列, 開始位置, 終了位置) != -1
折れ線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
クラス分類の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
縦棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
option: 下三角印を使う	marker = 'v'
折れ線グラフの上三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: ブラックにフォントの色を指定する	color = 'black'
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
横棒グラフを茶色色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
二つの条件が何れか成り立つ	条件 or 条件2
シアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
文字列を置換する	文字列.replace(部分文字列, 置換後の文字列)
線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
赤い点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データ列の数値時刻を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: タブをセパレータで使う	sep = '\t'
eの乗数を算出する	math.exp(x)
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図の四角印を赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: 色を黄色に設定する	color = 'yellow'
リストを等しい量になるように分割数nとして分割する	pd.qcut(aList, n)
表データの先頭10行を調べる	df.head(10)
黒い左三角マーカーを配列とデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c='k')
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
ロードされたモジュールを列挙する	sys.modules
ヒストグラムをコーンズシルク色を用いて描画する	plt.hist(データ列, color='cornsilk')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
整数2がn以上かつn3以下か判定する	整数 <= 整数2 and 整数2 <= n3
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
データフレームの一部のカラムの分散	df[['列A', '列B']].var()
変数の値を整数分の一にする	変数 /= 整数
文字列が文字列より辞書順で前か	文字列 < 文字列2
option: ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
整数が-9以上9以下	-9 <= 整数 <= 9
本日の年	datetime.datetime.today().year
ヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
リストと配列についての散布図に▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
数値の出力を改行せず行う	print(数値, end='')
表のある列をインデックスに設定する	df.set_index('列A')
ダークサーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフの右三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
クラス分類の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: ダークシアン色を用いる	color = 'darkcyan'
タイムスタンプデータのタイムゾーン	aDatetime.timetz()
マゼンタ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
option: フォントの色をスラグレーに設定する	color = 'slategrey'
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
カテゴリでグループ化して、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
subで文字列の開始位置以降が始まるか	文字列.startswith(部分文字列, 開始位置)
整数を右シフトする	整数 >> n
データフレームの欠損値を最頻値で補完する	df.fillna(df.mode().iloc[0])
ファイルが存在するか調べる	os.path.exists(filepath)
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
リストとデータ列の散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
パパイヤウィップ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
浮動小数点数の逆正接を求める	math.atan(x)
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
黒いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
x軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
英字の小文字を見る	string.ascii_lowercase
両端キューが空か調べる	len(両端キュー) == 0
縦棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
既存の行列をベースに全要素が1の配列	np.ones_like(aArray)
1で全要素を初期化したベクトル	np.ones(要素数, dtype=np.int)
option: バイオレット色を用いる	color = 'violet'
配列と配列の散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
線グラフを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームをグループ化し、最大値を計算する	df.groupby('列A').max()
文字列の変数名を数式にする	sympy.Symbol(変数名)
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
option: ダークグリーン色を使う	color = 'darkgreen'
実行時に標準出力がパイプかテストする	not sys.stdout.isatty()
整数を十六進数表記に変換する	hex(整数)
サンディーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
重複した行のみを取り出す	df[df.duplicated(keep=False)]
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
option: ヘッダを自動的な連番に設定する	header = None
整数に整数を加える	整数 + 整数2
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
データを最大最小値として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
JSONバイト列をパースする	json.loads(バイト列.decode('unicode-escape'))
行列にはいくつ要素があるか調べる	aArray.size
綺麗なグラフを使う準備をする	import seaborn as sns
変数が0に近づく場合の数式の極限値を求める	sympy.limit(数式, 変数, 0)
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
文字列が全て数値か調べる	文字列.isnumeric()
双方向キューをタプルに変換する	tuple(両端キュー)
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
リストを引数として展開してプリントする	print(*リスト)
ベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
散布図の△マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: グラフの色をマルーンに指定する	color = 'maroon'
代数計算を使う	import sympy
文字列を最後の部分文字列で分割したときの残りの文字列を求める	文字列.rpartition(部分文字列)[-1]
実数が正の数かテストする	x > 0
データフレームの選択したカラムの統計量	df[['列A', '列B']].describe()
要素ひとつのりストを得る	[要素]
散布図をシルバー色を用いて描画する	plt.scatter(データ列x, データ列y, color='silver')
xをアンダーライン付きで表示する	print(f'\033[4m{x}\033[0m')
列を等間隔でn個にビン分割する	pd.cut(ds, n)
回帰モデルを作る	model.fit(説明変数, 目的変数)
リストの先頭を捨てる	リスト[1:]
ヒストグラムをビスク色を用いて描画する	plt.hist(データ列, color='bisque')
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
データシリーズの未入力値を平均値に設定する	ds.fillna(ds.mean())
指定した列の値で集計し、平均値を求める	df.groupby('列A').mean()
ヒストグラムをアクア色を用いて描画する	plt.hist(データ列, color='aqua')
小文字を大文字に変換する	文字列.upper()
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
xを太文字にする	f'\033[1m{x}\033[0m'
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
option: グラフの色をホワイトスモークにする	color = 'whitesmoke'
散布図を耐火レンガ色を使って描画する	plt.scatter(データ列x, データ列y, color='firebrick')
リストとリストの散布図を描画して、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
空白区切りでリストの各要素を表示する	print(*リスト)
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
ファイル名がテキストファイル	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
浮動小数点数の床	math.floor(x)
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
折れ線グラフに三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
option: ターコイズ色を使う	color = 'turquoise'
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
あるカラムのKurtosis	df['列A'].kurt()
辞書から項目名とその値を組として取り出す	辞書.items()
標準出力の出力先がターミナル	sys.stdout.isatty()
折れ線グラフをライムグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='limegreen')
ファイルをオープンして]、読み込みストリームを使う	'r' = 'a'<nl>open(filepath, mode='r')
整数がタプルのどれかか	aTuple = [0, 1, 2]<nl>整数 in aTuple
日付時刻データが何分か知る	aDatetime.minute
ミディアムターコイズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
ファイル入力をJSONとしてパースする	json.load(ファイル入力)
入力から二つの浮動小数数を読み込む	A, B = map(float, input().split())
option: データ型として三２ビット整数型を用いる	np.int16 = np.int<nl>dtype = np.int16
option: 色をディムグレーに設定する	color = 'dimgray'
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
黒色化する	f'\033[30m{x}\033[0m'
要素がセットに含まれるか確認する	要素 in セット
整数を整数で割った余り	整数 % 整数2
option: フォントの色をレモンシフォンに設定する	color = 'lemonchiffon'
キーが辞書上でまだ定義されていない	キー not in 辞書
データフレームを100の位で四捨五入して、整数型にする	df.round(-2).astype(int)
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
n個に等間隔でリストをビン分割する	pd.cut(aList, n)
option: フォントの色をオレンジにする	color = 'orange'
グラフのy軸の名前をuntitledに設定する	plt.ylabel('y軸ラベル')
何回まで再帰ができるか知る	sys.getrecursionlimit()
セットから要素を除く	セット.remove(要素)
横棒グラフをブランチドアーモンド色を用いて描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
option: グレー色を使用する	color = 'gray'
データフレームは何行重複するか確認する	df.duplicated().sum()
ミディアムアクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
無限リスト	itertools.count()
最後から文字列をセパレータで区切る	文字列.rsplit(セパレータ)
option: フォントの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
option: ライトコーラルを用いる	color = 'lightcoral'
指定したカラムの値を正規表現patternで全部replに置換する	df['列A'].replace(pattern, repl, regex=True)
二つの列でグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
リストを文字列として、指定された文字を用いて連結する	文字.join(map(str, リスト))
散布図をパールバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: ライトスカイブルーにフォントの色を設定する	color = 'lightskyblue'
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
否定を書きたい	not 条件式
整数÷整数	整数 / 整数2
データフレームのあるカラムが正規分布からどの程度、歪んでいるか調べる	df['列A'].kurt()
折れ線グラフの丸マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
重複した行のみ	df[df.duplicated(keep=False)]
中央値でデータシリーズの欠損値を埋める	ds.fillna(ds.median())
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
リストとデータ列の散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
識別子はコルーチンかどうか	inspect.iscoroutine(識別子)
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
プラットホームがMacOSかどうか調べる	sys.platform.startswith('darwin')
整数の各桁の和	sum(map(int, str(整数)))
パーセプトロンを用いて回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
nが整数かどうか確認する	整数 == 整数2
オブジェクトはタプルか	tuple = int<nl>isinstance(obj, tuple)
オブジェクトの固有のIDを見る	id(obj)
ヒストグラムをミディアムバイオレットレッド色として描画する	plt.hist(データ列, color='mediumvioletred')
データフレームの一部のカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
カテゴリ列で色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
ダークオーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
整数が整数2未満またはn3以上かどうか調べる	整数 < 整数2 or 整数 >= n3
二つのカラムからグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの左三角印の太さを変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
ホワイトスモーク色としてヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
option: ローングリーン色を用いる	color = 'lawngreen'
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
アルファベットを全部見る	string.ascii_letters
option: スチールブルーにグラフの色を設定する	color = 'steelblue'
棒グラフをシャルトリューズ色を用いて描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: ベージュ色を使う	color = 'beige'
複数並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
等量でビン数nでデータ列を分割する	pd.qcut(ds, n)
ある列のカテゴリで集計し、標準偏差を計算する	df.groupby('列A').std()
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
nilに等しい値	None
折れ線グラフの色をライトスカイブルーに変更する	plt.plot(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
表データのあるカラムの時刻	df['列A'].dt.hour
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データ列をヒストグラムで可視化する	plt.hist(データ列)
整数が奇数か調べる	整数 % 2 == 1
リストとイテラブルについての散布図にrgbの▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列を等しい量になるように分割数nを用いてビニングする	pd.qcut(ds, n)
積を求めたい	X * Y
棒グラフをダークゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
データフレームの選択した列の平均値	df[['列A', '列B']].mean()
部分文字列で文字列を二分し、、前半を見る	文字列.partition(部分文字列)[0]
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
オブジェクトが非同期ジェネレータか	inspect.isasyncgen(オブジェクト)
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
データフレームからランダムに10行を取り出す	df.sample(10)
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
破線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
現在は何秒か知る	datetime.date.today().second
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
文字列中の部分文字列を置き換える	文字列.replace(部分文字列, 置換後の文字列)
データフレームから指定された列の名前一覧の列を選択する	columns = ['列A', '列B']<nl>df[columns]
option: ８ビット整数型を使う	np.int8 = np.int<nl>dtype = np.int8
データフレームのカテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
棒グラフをグリーンイエロー色を使って描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームをランダムサンプリングする	df.sample()
カラムの欠損値を最大値で補完する	df['列A'].fillna(df['列A'].max())
計算結果をプリントする	print(式)
全要素を０で初期化した符号なし８ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.uint8)
ケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
イテラブルとリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
条件を否定する	not 条件
双方向キューの末尾にイテラブルの要素を追加する	両端キュー.extend(イテラブル)
横棒グラフをマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='magenta')
リストと配列について散布図を描画し、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
実数の小数点以下を四捨五入する	round(x)
文字列を最後のカンマで二分して、残りを使う	文字列.rpartition(',')[-1]
ある列によってデータフレームを集約して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データフレームのカラムのピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
option: フォントの色をロイヤルブルーに変更する	color = 'royalblue'
option: グラフの色をディムグレーに設定する	color = 'dimgray'
表データの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
小文字列	string.ascii_lowercase
プログラムの実行をエラーとして終了する	sys.exit(1)
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
青い一点鎖線を用いてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
rgbの四角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
データシリーズの文字列を未入力値に変換する	ds.replace(値, np.nan)
リストのn番目の要素を削除する	del リスト[n]
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ハニーデューにヒストグラムの色を指定する	plt.hist(データ列, color='honeydew')
formatのパターンを用いて文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
十六進数文字列を整数にする	int(文字列, 16)
書き込みできるようにSJISでファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
セットを別のセットとのインターセクションだけに更新する	セット.intersection_update(セット2)
散布図の四角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
ひとつ飛ばしでタプルを得る	タプル[::2]
青い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
option: バリーウッド色を使う	color = 'burlywood'
ヘッダを付けずデータフレームを書き出す	df.to_csv('file.csv', header=None)
カラーバーを付ける	plt.colorbar()
データフレームのあるカラムを除いてみる	df.drop('列A', axis=1)
データフレームのパーセンタイルを計算する	df.quantile(パーセント/100)
リストと配列の散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列を最後の区切り記号で二分して残りを使う	文字列.rpartition(セパレータ)[-1]
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ふたつのリストを接続する	リスト + リスト2
日付データが日曜日か調べる	aDate.weekday() == 6
ファイルを書き込み用に開き]、fとする	f = open(filepath, mode='w')
ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
二つの整数の最大公約数を求める	math.gcd(n, n2)
空白で文字列を分割する	文字列.partition()
データフレームを整列して、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
多次元データを多次元尺度構成法として整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
整数の右シフトを求める	整数 >> n
xを白色にする	f'\033[37m{x}\033[0m'
割ったあまりを計算したい	X % Y
散布図のポイント印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
数式をxについて微分する	sympy.diff(数式, [|変数]x)
整数が1、もしくは2か調べる	整数 == 1 or 整数 == 2
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
目盛り線	plt.grid(linewidth=3.0)
新しいリッジ回帰モデルを作る	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
CSVファイルにインデックスを付けずデータフレームを保存する	df.to_csv('file.csv', index=None)
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をホワイトスモークに指定する	plt.hist(データ列, color='whitesmoke')
両端キューの先頭に文字列を追加する	両端キュー.appendleft(文字列)
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
コサイン	math.cos(x)
ふたつの集合の差集合を見る	セット.difference(セット2)
itertoolsモジュールをインポートする	import itertools
オブジェクトがクラス	inspect.isclass(オブジェクト)
線グラフの色をクリムゾンにセットする	plt.plot(データ列x, データ列y, color='crimson')
イテラブルから重複なくn個ランダムに選んでリストにする	random.sample(イテラブル, k=n)
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
棒グラフをロイヤルブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='royalblue')
リストとイテラブルについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
グラフの用途を画面に設定する	sns.set(context='notebook')
データフレームの重複した行だけを抽出する	df[df.duplicated(keep=False)]
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: ゲインズボロ色を使う	color = 'gainsboro'
option: マーカーをポイントに設定する	marker = '.'
横棒グラフをラベンダーブラッシュ色を使って描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
折れ線グラフの▽マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データ列の折れ線プロットを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: シャルトリューズに色を設定する	color = 'chartreuse'
箱ひげ図としてイテラブルを描画する	plt.boxplot(データ列)
リストをソートしてJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
リストを順序付けする	enumerate(リスト)
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
改行なしに文字列を表示する	print(文字列, end='')
行列の値	aArray[行番号, 列番号]
option: フォントの色をマルーンに設定する	color = 'maroon'
文字が別の文字列に含まれないか調べる	文字 not in 文字列
指定の列に重複があれば、消す	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
縦棒グラフをフクシア色を用いて描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームのある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
データフレームを表示するとき、ヘッダー行を左寄せにセットする	pd.set_option('colheader_justify', 'left')
整数の8乗	整数 ** 8
整数引く整数	整数 - 整数2
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
散布図のマーカーの大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
option: 右三角マーカーを使う	marker = '>'
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
数列からランダムにひとつ選んでリストにする	random.choice(数列)
クラス分類の偽陽性をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
破線にヒストグラムのスタイルを設定する	plt.hist(データ列, linestyle='dashed')
データラベルを追記する	plt.legend(['凡例A', '凡例B'])
コーンフラワーブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
バイナリ用にファイルパスをオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
ヒストグラムをコーラル色を用いて描画する	plt.hist(データ列, color='coral')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
カテゴリで色付けしてデータフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
キーで指定された値を辞書からポップする	辞書.pop(キー)
文字列の末尾からタブを取り除く	文字列.rstrip('\t')
コーンズシルク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
インデントを指定してリストをJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
赤い丸マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
option: パレットトルコイズ色を使用する	color = 'paleturquoise'
整数を8進リテラルに変換する	oct(整数)
数式の積分を求める	sympy.integrate(数式)
全要素を０で初期化した論理値型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
文字列が指定した文字列で終わるか調べる	文字列.endswith(部分文字列)
散布図に黒い▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
リストをnから番号付けする	enumerate(リスト, start=n)
要素がセットのいずれかどうか	要素 in セット
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフをオレンジ色を使って描画する	plt.plot(データ列x, データ列y, color='orange')
オブジェクトは辞書型のインスタンスか確認する	dict = int<nl>isinstance(obj, dict)
数列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
二つの数値を順にプリントする	print(数値, 数値)
ライトスチールブルーにヒストグラムの色をする	plt.hist(データ列, color='lightsteelblue')
散布図をライムグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='limegreen')
小数点以下3桁までデータフレームを保存する	df.to_csv('file.csv', float_format='%.3f')
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
データフレームの選択した列の欠損値をxにセットする	df[['列A', '列B']].fillna(x)
列名を指定して二つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
ポイントマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
整数を二進数文字列に変換する	bin(整数)[2:]
マップから項目名とバリューのペアを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
データフレームの標本分散を求める	df.var(ddof=0)
オブジェクトがトレースバックか調べる	inspect.istraceback(オブジェクト)
配列とリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: フォントの色をロージーブラウンに変更する	color = 'rosybrown'
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
折れ線グラフの色をダークオレンジにする	plt.plot(データ列x, データ列y, color='darkorange')
データフレームの選択したカラムの値を正規表現で一度にreplに置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
文字列をUTF8でバイト列にする	文字列.encode(encoding='utf-8', errors='strict')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
両端キューの左に文字列を入れる	両端キュー.appendleft(文字列)
文字コードtextでファイルパスをオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
ブラック色で線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
実数の仮数部	math.frexp(x)[0]
等価と条件を書きたい	X == Y
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
カウンタをマッピングから新規生成する	collections.Counter(aDict)
小なりと書きたい	X < Y
データシリーズの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
中央値でリストをビニングする	pd.qcut(aList, 2)
両端キューの末尾に配列の要素を追加する	両端キュー.extend(配列)
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
キューが空でないか調べる	len(両端キュー) != 0
データフレームの全列の相関を見る	sns.pairplot(df)
ある列の値毎の最小値を計算する	df.groupby('列A').min()
option: 色をダークマゼンタに変更する	color = 'darkmagenta'
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
整数の階乗を計算する	math.factorial(n)
option: 区切りを文字列にする	sep = s
折れ線グラフのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの第一四分位数を求める	df.quantile(0.25)
データフレームの指定したカラムを千の位で四捨五入する	df['列A'].round(-3)
option: 色をタンにセットする	color = 'tan'
xについて数式を積分する	sympy.integrate(数式, [|変数]x)
データフレームの中のカラムをリストを境界値として分割する	pd.cut(df[col], aList)
折れ線グラフをスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='slateblue')
ゼロ埋めされた行列	np.zeros(行数, 列数)
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
Xの2乗を求めたい	X ** 2
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
散布図に黒い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='k')
平均値でデータフレームの一部のカラムの欠損値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
実数の余弦を求める	math.cos(x)
データシリーズの欠損値をそのモードで埋める	ds.fillna(ds.mode().iloc[0])
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
散布図をプラム色を用いて描画する	plt.scatter(データ列x, データ列y, color='plum')
ライトゴールドロディイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightgoldenrodyellow')
カウンタのユニークな項目を列挙する	list(aCounter)
option: 小麦色を使用する	color = 'wheat'
option: 行列のデータ型を指定する	np.int = np.int<nl>dtype = np.int
データフレームからn行をランダムに抽出する	df.sample(n)
xのハッシュ値	hash(x)
クラス分類をパーセプトロンで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ある列にリストの値が含まれる行を取り出す	df[df['列A'].isin(リスト)]
option: 茶色を使う	color = 'brown'
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
実数を浮動小数点数で割る	x / y
散布図の▼マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列の左側から部分文字列を消す	文字列.lstrip(部分文字列)
グラフを描く準備をする	import matplotlib.pyplot as plt
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
後の値でデータフレームのNaNを埋める	df.fillna(method='bfill')
リストと数列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
整数乱数で要素を埋めた配列を初期化する	np.random.randint(開始値, 終了値, N)
円グラフの特定の要素を目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
データフレームのあるカラムの中に文字列がある	df['列A'].isin([value])
文字列リストをsepを区切りとして結合する	sep.join(文字列リスト)
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームをあるカラムをキーにして昇順にソートする	df.sort_values(by='列A', ascending=True)
option: マーカーの色を赤にする	markerfacecolor = 'red'
ダークグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
既存の配列をベースに全要素が初期値の配列を作成する	np.full_like(aArray, 初期値)
リストとリストの散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
ホットピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
実数を実数で除した余り	x % y
文字列をJSONフォーマットで出力ストリームに出力する	json.dump(文字列, ファイル出力, ensure_ascii=False)
データフレームを千の位で丸める	df.round(-3)
タイムスタンプデータからn分引く	aDatetime - datetime.timedelta(minutes=n)
replにまとめてデータシリーズの値を正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データシリーズの未入力値を直後の値で補完する	ds.fillna(method='bfill')
TSVファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ヒストグラムをブラック色を用いて描画する	plt.hist(データ列, color='black')
長さの制限された両端キューを配列から作る	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
現在が何時か知る	datetime.date.today().hour
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
赤い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
リストを文字列としてカンマによって連結する	','.join(map(str, リスト))
フォレストグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ビン数nでデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
変数がマイナス無限大に近づくとき、極限値を求める	sympy.limit(数式, 変数, -oo)
キーがマッピングにないとき、要素を追加する	辞書.setdefault(キー, element)
浮動小数点数を整数にする	int(x)
option: ダークブルー色を使う	color = 'darkblue'
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
横棒グラフをターコイズ色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
要素がリストの要素	要素 in リスト
日付データが日付データより前か調べる	aDate2 = aDatetime<nl>aDate < aDate2
ヒートマップでクラス分類の偽陰性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
浮動小数点数に浮動小数点数を乗算する	x * y
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
を整数だけ減少させる	変数 -= 整数
ヒストグラムの色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
データフレームのNaNを直後の値に設定する	df.fillna(method='bfill')
option: 配列のデータ型を指定する	np.int = np.int<nl>dtype = np.int
数式の変数の解を方程式として算出する	sympy.solve(数式, [|変数]x)
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
複数のの条件のうちいずれか成り立つ	条件 or 条件2 or 条件3
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
オブジェクトはトレースバックかどうか調べる	inspect.istraceback(オブジェクト)
NaNも加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
シーケンス自身の長さnの順列	itertools.permutations(iterable, n)
データフレームをグループ化し各平均値を求める	df.groupby('列A').mean()
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
option: ブルーバイオレットにグラフの色を設定する	color = 'blueviolet'
識別子は抽象クラス	inspect.isabstract(識別子)
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
縦棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
文字列をカンマで二分する	文字列.partition(',')
option: 小麦色色を使用する	color = 'wheat'
文字列の中でASCII限定として正規表現にマッチした文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
キュー中の整数の位置を使う	両端キュー.index(整数)
option: ベージュを用いる	color = 'beige'
データ列からユニークな値を抽出しリスト化する	ds.unique().tolist()
文字列を空白を用いて分割して、整数リストにする	list(map(int, 文字列.split()))
整数を16進表現に変換する	hex(整数)
ヒストグラムをイエローグリーン色を用いて描画する	plt.hist(データ列, color='yellowgreen')
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
データフレームの欠損値を後の行の値で埋める	df.fillna(method='bfill')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
文字列中にひとつでも非英数字がある	any(not c.isalnum() for c in 文字列)
半透明の実線としてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
配列の相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
データフレームを二つの列を用いて降順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
イテラブルを累積した列を得る	itertools.accumulate(iterable, operator.mul)
整数わる整数	整数 / 整数2
ひとつも数字が文字列中に含まれないか確認する	any(not c.isdigit() for c in 文字列)
あらかじめケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
グラフの使途を論文に設定する	sns.set(context='paper')
グラフの中の縦軸に軸ラベルをつける	plt.ylabel('y軸ラベル')
列を百の位で四捨五入して、整数型にする	df['列A'].round(-2).astype(int)
円プロットの特定の要素を目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
文字列を最後のコロンで分けたときの残りの文字列を使う	文字列.rpartition(':')[-1]
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれないか	文字列.find(部分文字列, 開始位置, 終了位置) == -1
ある列の値ごとの分散を算出する	df.groupby('列A').var()
データフレームをエクセルファイルファイルで保存する	df.to_excel('file.xlsx')
青い点線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームのパーセンタイル	df.quantile(パーセント/100)
青い一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
列のユニークな値	ds.unique()
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
文字列を最後の部分文字列で二分割する	文字列.rpartition(部分文字列)
option: ブール型を使う	np.int32 = np.int<nl>dtype = np.int32
整数がnの倍数かどうか調べる	整数 % n == 0
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
折れ線グラフのバツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
リストを文字列として、指定した文字列で連結する	文字列.join(map(str, リスト))
文字列の長さを使う	len(文字列)
option: 三２ビット整数型を使う	np.int16 = np.int<nl>dtype = np.int16
条件を満たしたら、繰り返しを抜けたい	if 条件式:<nl><tab>break
nから始まる無限数列が欲しい	itertools.count(start=n)
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
リストとリストについて散布図を描いてマーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
option: 欠損値を含めない	dropna = True
折れ線グラフをペルー色を使って描画する	plt.plot(データ列x, データ列y, color='peru')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
整数が整数2よりも大きいか調べる	整数 > 整数2
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
option: カンマを区切り記号で用いる	sep = ','
リストと配列の散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
リストの各要素を空白区切りで表示する	print(*リスト)
散布図をダークオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorange')
スレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
deqのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
散布図を三角マーカーを使い、描画する	plt.scatter(データ列x, データ列y, marker='^')
オブジェクトがジェネレータ関数かどうか調べる	inspect.isgeneratorfunction(オブジェクト)
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
日付データが日曜日	aDate.weekday() == 6
ヒストグラムを３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ガンマ関数の値	math.gamma(x)
算術計算ライブラリをインポートする	import math
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データ列をビン数nでビン分割する	pd.cut(ds, n)
ラベンダーブラッシュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームの中に存在すると文字列の数を求める	df.isin([value, value2]).sum()
文字列の左側の文字	文字列[0]
二つの列からグループ化し、平均値を算出する	df.groupby(['列A', '列B'], as_index=False).mean()
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
データシリーズが何月か見る	ds.dt.month
ミディアムシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
イテラブルを両端キューにする	collections.deque(イテラブル)
タプルの要素を小さい方から並べ変える	sorted(タプル, reverse=False)
文字列の先頭から部分文字列の位置を探す	文字列.find(部分文字列)
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームの選択したカラムの25パーセンタイル	df[['列A', '列B']].quantile(0.25)
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
変数名が非同期ジェネレータかどうか判定する	inspect.isasyncgen(識別子)
データフレームのある列の値がxより大きいデータを抽出する	df[df['列A'] > x]
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
プロットに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
オブジェクトがリストかタプル	isinstance(obj, (list)
二つの列からグループ化し、標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
データフレームをあるカラムでグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
横棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
XにYを掛けた値を欲しい	X * Y
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
句読点文字を全部使う	string.punctuation
イエローグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='yellowgreen')
option: ダークスラテグレー色を使う	color = 'darkslategray'
データフレームから100行、サンプリングする	df.sample(100)
散布図の大バツマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
空の辞書が欲しい	辞書 = {}
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
青紫色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
ランダムにデータフレームから重複ありで5行をサンプリングする	df.sample(5, replace=True)
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列を最後のコロンで二分して前半を使う	文字列.rpartition(':')[0]
カウンタから辞書を減らす	aCounter.subtract(aDict)
カテゴリで色分けしてデータフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
表示する列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ヒストグラムをライトブルー色として描画する	plt.hist(データ列, color='lightblue')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
カウンタのボトムをリストとして得る	aCounter.most_common()[:-n-1:-1]
インデックスを付けずデータフレームをCSVファイルに出力する	df.to_csv('file.csv', index=None)
改行せずに２つの文字列を出力する	print(文字列, 文字列, end='')
印字可能な文字列	ascii(x)
ビン数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
シスル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
文字列中の文字の出現	文字列.count(文字)
データフレームのあるカラムをPandasの日付型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
表データのあるカラムの月を使う	df['列A'].dt.month
一点鎖線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashbot')
辞書順で文字列が文字列より後か確認する	文字列 > 文字列2
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
文字は漢字か調べる	('\u4E00' <= 文字 <= '\u9FD0')
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
データフレームを複数の列によってソートする	df.sort_values(by=['列A', '列B'])
データ列を分割数nで分割する	pd.cut(ds, n)
三整数の最大公約数	math.gcd(n, n2, n3)
配列の最小	np.min(aArray)
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
イテラブルから重複なく、ランダムにn個選んでリストにする	random.sample(イテラブル, k=n)
リストとイテラブルの散布図を描画し、、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
割り算の切り捨てを書きたい	X // Y
変数名はコード	inspect.iscode(識別子)
リストが空でないか	len(リスト) != 0
データシリーズの不偏分散を求める	ds.var(ddof=1)
データシリーズの欠損値を直後の値で埋める	ds.fillna(method='bfill')
現在のローカルな日付	datetime.date.today()
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: ミントクリームにフォントの色を設定する	color = 'mintcream'
アンティークホワイト色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
seabornのデフォルト見栄えを適用する	sns.set()
データフレームの選択したカラムを十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
２つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
降順でデータフレームを行を用いてソートする	df.sort_index(ascending=False)
両端キュー中の文字列のインデックスを求める	両端キュー.index(文字列)
整数2がnより大きく、かつ、n3より小さいか調べる	整数 < 整数2 and 整数2 < n3
指定された列のカテゴリで集計し、それぞれの平均値を求める	df.groupby('列A').mean()
イテラブルからn個ランダムに選んでリストにする	random.choices(イテラブル, k=n)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
黒い上三角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
モデルの予測値と目的変数を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
主成分分析で文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
色付きの一点鎖線としてデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
今日の日付時刻を使う	datetime.datetime.today()
XをYで割った値を欲しい	X / Y
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
ライトスレイグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
商と余りを同時に計算する	divmod(x, y)
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
option: 色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
文字列がリストのいずれか調べる	文字列 in リスト
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
x座標だけ目盛り線	plt.grid(axis='x')
日付時刻データが土曜日かどうか判定する	aDatetime.weekday() == 5
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
option: シスルにフォントの色をセットする	color = 'thistle'
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
トマト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
指定したカラムを一万の位で丸める	df['列A'].round(-4)
データシリーズが正規分布からどの程度、歪んでいるか確認する	ds.kurt()
日付時刻データの月数	aDatetime.month
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
ファイルパスのセパレータ記号を見る	os.sep
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: アクア色を使う	color = 'aqua'
ベクトルの最小を使う	np.min(aArray)
多次元尺度構成法として多次元データを整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
配列の行ごとの合計を求める	np.sum(aArray, axis=1)
シエナ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
浮動小数点数の最小値	sys.float_info.min
散布図を丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムの色をオレンジにセットする	plt.hist(データ列, color='orange')
データフレームの指定した列の中に日付データが存在するか調べる	df['列A'].isin([value])
初期値で全要素を初期化した行列	np.full(要素数, 初期値, dtype=np.int)
データフレームの中に文字列と文字列がいくつあるか調べる	df.isin([value, value2]).sum()
マルーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
テーマを全般的に明るくする	sns.set(pallete='bright')
yが無限大に近づくときの数式の極限値を求める	sympy.limit(数式, y, oo)
線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
option: 色を茶色にする	color = 'brown'
データフレームからカテゴリデータのカラムのみ抽出する	df.select_dtypes('object')
エンコーディングを使う	sys.getdefaultencoding()
グラフの描画で淡くカラーパレットを用いる	sns.set(pallete='muted')
ヒストグラムの色をシエナに変更する	plt.hist(データ列, color='sienna')
データフレームの選択したカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
リストとリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
データ列の各データは何回出現するか確認する	ds.value_counts()
アイボリー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
option: ダークグレー色を使う	color = 'darkgray'
データフレームの中にいくつがあるかカウントする	df.isin([value]).sum()
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
実数を実数で割った剰余を求める	math.remainder(x, x2)
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
マップからエラーなくキーの値を参照する	辞書.get(キー, 見つからない場合の値)
option: グラフの色をダークマゼンタに指定する	color = 'darkmagenta'
プロットの補助目盛を有効にする	plt.minorticks_on()
option: ナバホホワイト色を用いる	color = 'navajowhite'
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの指定したカラムの未入力値を後の値に増やす	df['列A'].fillna(method='bfill')
文字列をキャピタライズする	文字列.capitalize()
データフレームをCSVファイルにインデックスを付けず保存する	df.to_csv('file.csv', index=None)
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
ゼロ埋めされた複素数型の配列を初期化する	np.zeros(要素数, dtype=bool)
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategray')
散布図をアイボリー色を用いて描画する	plt.scatter(データ列x, データ列y, color='ivory')
文字列を最初のカンマで二分して、前の方を使う	文字列.partition(',')[0]
実数の逆双曲線正弦を算出する	math.asinh(x)
xを改行なしにプリントする	print(x, end='')
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
シーケンスから配列を作る	np.array(iterable)
option: 区切り記号をカンマにする	sep = ','
赤いダイアモンドマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
配列の列ごとの最大値	np.max(aArray, axis=0)
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
10を底とする実数の対数を求める	math.log10(x)
線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
整数が一桁の数か調べる	0 <= 整数 <= 9
整数を二進表現にする	bin(整数)
リストとリストについて散布図を描画して、丸マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
黒いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
空の辞書を作成する	辞書 = {}
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
サドルブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
データフレームから型リストで指定したデータ型の列のみ選ぶ	df.select_dtypes(include=typeList)
縦棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
文字列から指定した文字を消す	文字列.replace(文字, '')
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
実数に浮動小数点数を加える	x + y
コロンで文字列を二分割して、残りを使う	文字列.partition(':')[-1]
システム時刻で乱数を初期化する	random.seed()
緑色でプリントできる文字列に変換する	f'\033[32m{x}\033[0m'
データフレームの選択したカラムの不偏標準偏差を求める	df[['列A', '列B']].std()
標準入力から1文字だけ読む	sys.stdin.read(1)
文字列をカンマを用いて二分する	文字列.partition(',')
両端キューの順番を右に輪番で回す	両端キュー.rotate(1)
deqの末尾	両端キュー[-1]
rgbの大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
条件に応じて、処理を変えたい	if 条件式:<nl><tab>print('真のとき')  # 直して<nl>else:<nl><tab>print('そうでなければ')  # 直して
平均値で指定したカラムの欠損値を置換する	df['列A'].fillna(df['列A'].mean())
実数が正か調べる	x > 0
折れ線グラフをライトスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
アンティークホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図をダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D')
EUCを使ってファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
表データのあるカラムの日を使う	df['列A'].dt.day
option: グラフの色をライトグレーに設定する	color = 'lightgray'
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
等しいと条件に書きたい	X == Y
散布図を黒い大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c='k')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
黒い四角マーカーをリストとイテラブルについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
option: ナバホホワイト色を使用する	color = 'navajowhite'
線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
折れ線グラフの右三角印の太さを指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
文字列中に小文字が含まれない	any(not c.islower() for c in 文字列)
3つの計算結果を順にプリントする	print(式, 式, 式)
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのカラムがどれだけ、分散しているか見る	df['列A'].var()
データフレームの数値を一度に整数に四捨五入する	df.round()
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームからランダムに重複ありで10行をサンプリングする	df.sample(10, replace=True)
文字列の無限列を見る	itertools.repeat(文字列)
シャルトリューズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
色付きの実線を用いてイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
グラフのy座標のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
オブジェクトはトレースバック	inspect.istraceback(オブジェクト)
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
棒グラフをブラウン色として描画する	plt.bar(データ列x, データ列y, color='brown')
rgbの▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
整数をセットから取り除く	セット.remove(数)
文字列中にひとつも数字が含まれないかどうか	any(not c.isdigit() for c in 文字列)
ASCII限定としてパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
数列とリストの散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームの中に日付データがあるかどうか	df.isin([value])
両端キューをクリアする	両端キュー.clear()
区切り記号で文字列を区切って、列挙する	文字列.split(セパレータ)
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
辞書からエラーなく項目名の値を見る	辞書.get(キー, 見つからない場合の値)
option: フォントの色をライトイエローに指定する	color = 'lightyellow'
データフレームの列の各データ値の出現数	df[col].value_counts()
データフレームの選択した列の中にいくつ欠損値が存在するか数える	df[['列A', '列B']].isna().sum()
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
データフレームの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
データフレームをグループ化し、ある列に対し最小値を求める	df.groupby('列A')['列B'].min()
16進数文字列をバイナリに変換する	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
ゼロ埋めされた行列を作る	np.zeros(行数, 列数)
option: スカイブルーを使う	color = 'skyblue'
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
二つの変数をプリントする	print(変数名, 変数名)
折れ線グラフの色をインディゴにセットする	plt.plot(データ列x, データ列y, color='indigo')
データシリーズの中のNaNの個数を数える	ds.isna().sum()
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
option: ダークバイオレットを使う	color = 'darkviolet'
ふたつの集合に共通する要素からなる集合を計算する	セット.intersection(セット2)
データフレームから10行をランダムに取り出す	df.sample(10)
空白文字を全て求める	string.whitespace
リストの要素を文字列として、ある文字を用いて結合する	文字.join(map(str, リスト))
列のエポック秒を日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
option: ダークサーモンを用いる	color = 'darksalmon'
文字列中にひとつでも大文字がある	any(c.isupper() for c in 文字列)
項はセットのメンバーでない	要素 not in セット
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
n進数文字列を整数にする	int(文字列, n)
ふたつの列からグループ化し、個数を算出する	df.groupby(['列A', '列B'], as_index=False).count()
データシリーズのNaNを最大値で補う	ds.fillna(ds.max())
カラムのSkewness	scipy.stats.skew(df['列A'], bias=False)
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
マップで文字列の数を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
データ列をカテゴリデータに変換する	ds.astype(object)
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: インディアンレッドを用いる	color = 'indianred'
文字列をセパレータで分割して文字列リストにする	文字列.split(セパレータ)
2進対数	math.log2(x)
文字列からJSONフォーマットのデータを読む	data = json.loads(文字列)
データフレームのカラムをカテゴリデータにする	df[col].astype(object)
xを白色でプリントできる文字列にする	f'\033[37m{x}\033[0m'
ヒストグラムを青くする	plt.hist(データ列, color='b')
option: 色をダークバイオレットに設定する	color = 'darkviolet'
option: スラグレーにグラフの色を設定する	color = 'slategray'
リストのn番目に要素を挿入する	リスト.insert(n, 要素)
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームをソートして、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
各カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
xを青色でプリントできる文字列に変換する	f'\033[34m{x}\033[0m'
散布図をペールグリーン色として描画する	plt.scatter(データ列x, データ列y, color='palegreen')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
プログラムの実行を正しく停止する	sys.exit(0)
改行なしに変数をプリントする	print(変数名, end='')
日付データが火曜日かどうか確認する	aDate.weekday() == 1
点線を用いてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
縦棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
xが真か調べる	bool(x)
ファイルからJSONを読む	with open('file.json') as f:<nl><tab>data = json.load(f)
ある列によってデータフレームを並べ直して、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
真紅色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームの列の標本標準偏差	df['列A'].std(ddof=1)
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
ライトブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightblue')
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
文字列が文字列より辞書順で後か調べる	文字列 > 文字列2
データシリーズの標準偏差を算出する	ds.std()
データフレームの第三四分位数	df.quantile(0.75)
オブジェクトが型かどうか調べる	isinstance(obj, クラス)
タプル中の要素が全て真か調べる	all(タプル)
データフレームの指定したカラムの中に日付データが存在する	df['列A'].isin([value])
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
カラーバーをつける	plt.colorbar()
クラスのサブ型か調べる	issubclass(サブクラス, クラス)
データフレームのカラムの下位25パーセント	df['列A'].quantile(0.75)
リストとデータ列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
Xの八乗が求めたい	X ** 8
データフレームの列を散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
コロンで文字列を分割して、列挙する	文字列.split(':')
グラフを論文に変更する	sns.set(context='paper')
文字列がアスキー文字か調べる	文字列.isascii()
コンフュージョン・マトリックスを算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
文字列を最後のコロンで二分して、残りを使う	文字列.rpartition(':')[-1]
データフレームをCSVファイルに小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
deqのstart番目からend番目までの要素	collections.deque(itertools.islice(deq, start, end))
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
改行せず複数の計算結果をプリントする	print(式, 式, end='')
直後の値でデータフレームの一部の列の未入力値を埋める	df[['列A', '列B']].fillna(method='bfill')
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
降順に破壊的にある列によってデータフレームをソートする	df.sort_values(by='列A', ascending=False, inplace=True)
option: グラフの種類を実線にセットする	linestyle = 'solid'
アクア色を用いてヒストグラムを描画する	plt.hist(データ列, color='aqua')
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームの行数と列数	df.shape
データフレームから一つの列だけ抽出する	df[['列A']]
文字列をカンマで後ろから区切る	文字列.rsplit(',')
散布図に菱形マーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
ダークカーキ色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
整数同士の論理和	整数 | 整数2
リストとデータ列の散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列をn回だけ置換する	文字列.replace(部分文字列, 置換後の文字列, n)
配列と配列の散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
変数xについて数式を積分する	sympy.integrate(数式, [|変数]x)
棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
横棒グラフをダークブルー色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
折れ線グラフをミディアムパープル色を使って描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームの一部の列の中に含まれるの合計を求める	df[['列A', '列B']].isin([value]).sum()
ふたつの列を組み合わせてグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
rgbの菱形マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
オブジェクトの参照カウントを使う	sys.getrefcount(オブジェクト)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: フォントの色をトマトに設定する	color = 'tomato'
データフレームをグループ化し、最大値を求める	df.groupby('列A').max()
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
n個の要素があるリストを得る	[要素] * n
表データのあるカラムが何分か見る	df['列A'].dt.minute
xでデータフレームのカラムのNaNを置き換える	df['列A'].fillna(x)
xのハッシュ値を算出する	hash(x)
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
時刻を用いる	import datetime
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
データフレームの指定した二つの列のみ抽出する	df[['列A', '列B']]
option: ライトグレー色を使う	color = 'lightgray'
整数がnの倍数でないか確認する	整数 % n != 0
散布図に▼印を使用する	plt.scatter(データ列x, データ列y, marker='v')
最大長nのキューを作る	collections.deque(maxlen=最大長)
正規表現で文字列を分ける	re.split(pattern, s)
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データ列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
rgbのポイントマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
データシリーズの月を使う	ds.dt.month
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
散布図を赤色を使って描画する	plt.scatter(データ列x, データ列y, color='red')
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームを並べ直して、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
数字が文字列中に含まれないか調べる	any(not c.isdigit() for c in 文字列)
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列を最後のコロンで二分割して、残りを使う	文字列.rpartition(':')[-1]
グラフをポスター用に設定する	sns.set(context='poster')
散布図の右三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
折れ線グラフの印をクロスにする	plt.plot(データ列x, データ列y, marker='x')
関数によってデータフレームをまとめたグループ	df.groupby(関数)
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
棒グラフをグリーンイエロー色として描画する	plt.bar(データ列x, データ列y, color='greenyellow')
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
改行なしに計算結果をプリントする	print(式, end='')
線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフをアンティークホワイト色を使って描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
整数をデックにエンキューする	両端キュー.append(整数)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
JSON形式のファイルを構文解析する	with open('file.json') as f:<nl><tab>data = json.load(f)
ヒストグラムのスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
配列と数列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
横棒プロットの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
グラフの用途をプレゼンに設定する	sns.set(context='talk')
n個に配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
列名の一覧を見る	df.columns
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
入力ストリームをクローズする	f.close()
データ列の各値の出現数	ds.value_counts()
文字列中に小文字が存在しないか調べる	any(not c.islower() for c in 文字列)
option: 読み込まない列番号をnamesで指定する	skiprows = names
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
自然数LCM	math.lcm(n, n2)
グラフを正方形にする	plt.axis('equals')
文字列を最後の区切り文字で二つに分ける	文字列.rpartition(セパレータ)
折れ線グラフをレモンシフォン色を使って描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データシリーズのKurtosis	ds.kurt()
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
整数が整数2以上	整数 >= 整数2
数列とリストについて散布図を描画して、文字列という補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
floatの最小値を求める	sys.float_info.min
リストとイテラブルの散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのあるカラムを配列に変換する	df['列A'].values
1行標準入力から読む	sys.stdin.readline()
線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
折れ線グラフのポイントマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
数列をイミュータブルなセットにする	frozenset(数列)
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
環境の名前を調べる	sys.platform
データフレームをグループ化しある列に対し標準偏差を算出する	df.groupby('列A')['列B'].std()
データ列の推移を赤い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字のユニコード	ord(文字)
ある列のカテゴリで集計し、個数を計算する	df.groupby('列A').count()
ファイル名がCSVファイル	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
グラフの背景色を暗くする	sns.set(style='darkgrid')
option: 改行コードを旧Macにする	newline = '\r'
日付時刻データが日付時刻データより後ろかどうか調べる	aDatetime > aDatetime2
データフレームを二つの列で降順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: 色をスカイブルーに指定する	color = 'skyblue'
文字列の中で複数行対応としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をダークオリーブグリーンにセットする	plt.plot(データ列x, データ列y, color='darkolivegreen')
1行だけ列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
未初期化のベクトル	np.empty(要素数, dtype=np.int)
ビスク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
option: グラフの色をスラグレーにする	color = 'slategrey'
タプル内の要素が少なくともひとつ真か調べる	any(タプル)
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームのカラムの記述統計量	df['列A'].describe()
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
クラス分類をSDGを用いて行う	model = sklearn.linear_model.SGDClassifier()
option: ペルー色を用いる	color = 'peru'
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
数列とリストについて散布図を描いて星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: ライトイエロー色を使う	color = 'lightyellow'
折れ線グラフの色をダークオーキッドに変更する	plt.plot(データ列x, データ列y, color='darkorchid')
タプルのn番目のを求める	タプル[n]
セットの全要素が別のセット2に含まれる	セット.issubset(セット2)
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
ファイルパスを読み込みモードとして開いて]、fとする	f = open(filepath, mode='r')
データシリーズの曜日が何日目か知る	ds.dt.dayofweek
三自然数のLCM	math.lcm(n, n2, n3)
n×n2の2次元リストを得る	[[0] * n for _ in range(n2)]
option: 色を赤に設定する	color = 'red'
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ファイルからストリームを読み込み、fileとする	file = open(filepath)
列を書式で日付データにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
グラフの描画で色差別なくカラーパレットを使用する	sns.set(pallete='colorblind')
標準入力の入力元がターミナルか調べる	os.isatty(sys.stdin.fileno())
エクセルファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
数値をセットから取り除く	セット.remove(数)
ある列の文字列が部分文字列で始まる行を抽出する	df[df['列A'].str.startswith(部分文字列)]
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
ある列の値毎の最大値	df.groupby('列A').max()
シャルトリューズ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
タプルをリバースする	reversed(タプル)
リストとリストについて散布図を描画し、、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
偽	False
一番左側のを外したデータフレーム	df[df.columns[1:]]
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフを色付きの破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列中の部分文字列をカウントする	文字列.count(部分文字列)
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
セットから文字列を除く	セット.remove(文字列)
両端キューの最後から要素を取り出す	両端キュー.pop()
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
ダークターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
新しい回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
２つのカウンタの共通する要素	aCounter & aCounter2
整数が整数2以下もしくは、n3以上	整数 <= 整数2 or 整数 >= n3
TSVファイルをデータフレームとして読み込む	pd.read_csv('file.tsv', sep='\t')
データフレームの重複していない行のみ	df[~ df.duplicated(keep=False)]
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームのあるデータ型のカラム名を列挙する	df.select_dtypes(型).columns
文字列をカンマで二分して、残りを使う	文字列.partition(',')[-1]
オブジェクトのハッシュ値	hash(obj)
xが0に近づくとき、数式の極限値を求める	sympy.limit(数式, [|変数]x, 0)
散布図をティール色で描画する	plt.scatter(データ列x, データ列y, color='teal')
データフレームの欠損値がある箇所に色を付ける	df.style.highlight_null()
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
データシリーズの中に文字列が含まれるか調べる	ds.isin([value])
文字列の最初から不要な空白やタブを取り除く	文字列.lstrip()
折れ線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
オブジェクトは抽象クラス	inspect.isabstract(オブジェクト)
白色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
非数値データを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
今日が木曜日かどうか判定する	datetime.datetime.today().weekday() == 3
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: グラフの色をマゼンタに変更する	color = 'magenta'
イテラブルとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
二つのデータフレームを異なるカラムをキーとして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
ミディアムオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
マップから最後に追加した項目をポップする	辞書.popitem()
標準入力の入力元がターミナル	os.isatty(sys.stdin.fileno())
マッピングの値を列挙する	辞書.values()
全印字可能な文字	string.printable
線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
マッピングからカウンタを新規生成する	collections.Counter(aDict)
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
印字可能な文字を全部見る	string.printable
option: タン色を使う	color = 'tan'
コマンド引数の一覧	sys.argv[1:]
nから始まる無限な数列	itertools.count(start=n)
ミディアムスプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
リストと数列について散布図を描画し、△マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ピーチパフ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
重複ありでランダムにデータフレームからn行をサンプリングする	df.sample(n, replace=True)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームの列の各データが何回出現するか確認する	df[col].value_counts()
データフレームの選択した列の相関行列	df[['列A', '列B']].corr()
双方向キューの末尾にイテラブルの各要素を追加する	両端キュー.extend(イテラブル)
タプルを階層化辞書に変換する	collections.ChainMap(aDict)
プロットの横軸にラベルを設定する	plt.xlabel('x軸ラベル')
データフレームの指定したカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
データフレームの指定した列を千の位で四捨五入する	df['列A'].round(-3)
文字列中の大文字を小文字に変換する	文字列.lower()
データフレームをグループ化し、各分散を求める	df.groupby('列A').var()
データフレームの選択したカラムの欠損値を直後の値に指定する	df[['列A', '列B']].fillna(method='bfill')
辞書順で文字列は文字列より後か	文字列 > 文字列2
データフレームを散布図で見て、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムをライムグリーン色を用いて描画する	plt.hist(データ列, color='limegreen')
両端キューをセットにする	set(両端キュー)
イテラブルから新しいカウンタを用意する	collections.Counter(iterable)
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
シーケンスを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
TSVファイルを読む	pd.read_csv('file.tsv', sep='\t')
ある列によってデータフレームを集計して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
文字列は文字列より辞書順で前か	文字列 < 文字列2
option: ミディアムスレートブルー色を使用する	color = 'mediumslateblue'
インディアンレッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
セットから例外なく要素を除去する	セット.discard(要素)
ヒストグラムをパールゴールデンロッド色として描画する	plt.hist(データ列, color='palegoldenrod')
キューに要素をエンキューする	両端キュー.append(要素)
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
Excelからデータフレームを読み込む	pd.read_excel('file.xlsx')
双方向キューの先頭にリストの要素を追加する	両端キュー.extendleft(リスト)
コーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
データフレームのあるカラムが何年か調べる	df['列A'].dt.year
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
option: 線種を点線に変更する	linestyle = 'dotted'
より大きいと書きたい	X > Y
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
行列の列ごとの合計値	np.sum(aArray, axis=0)
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
多項式回帰データフレームの散布図にを加える	sns.regplot(data=df, x='列名', y='列名', order=2)
要素はリストに含まれるかどうか調べる	要素 in リスト
赤い上三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
日付時刻データは何分か知る	aDatetime.minute
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
xを印字できる文字列にする	ascii(x)
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
条件または条件	条件 and 条件2 and 条件3
インデントを指定してリストをJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False, indent=n)
n個の数値イテラブルを使う	range(n)
option: インディアンレッドを使う	color = 'indianred'
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(文字列リスト)
データシリーズにおいてどの値が頻出か確認する	ds.mode()
スピアマンを用いてデータフレームの相関行列を計算する	df.corr(method='spearman')
リストを文字列として、指定した文字列でつなげる	文字列.join(map(str, リスト))
散布図のマーカーをポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
折れ線グラフの三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
イテラブルをセットに変換する	set(イテラブル)
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
クラス分類の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
スピアマン相関係数でデータフレームの相関行列を計算する	df.corr(method='spearman')
実数のハイパボリック・タンジェントの逆数を求める	math.atanh(x)
データ列を箱ヒゲ図を使って描画する	plt.boxplot(データ列)
option: グレーにグラフの色をする	color = 'gray'
浮動小数点数の三乗を求める	x ** 3
フィシャー流の尖度を求める	scipy.stats.kurtosis(配列, fisher=True, bias=False)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
文字列を右側からカンマで区切る	文字列.rsplit(',')
リストから重複なく、ランダムにn個選んでリスト化する	random.sample(リスト, k=n)
線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
外れ値を除いたデータフレームのカラムの分散を使う	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: ライトスカイブルーを用いる	color = 'lightskyblue'
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
要素がリストに含まれる	要素 in リスト
双方向キューからデキューする	両端キュー.popleft()
複数の列からグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
option: スレートブルーにグラフの色を設定する	color = 'slateblue'
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
EUCで追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='euc_jp')
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
双方向キューの右に文字列を付け加える	両端キュー.append(文字列)
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
データフレームをある列によってまとめた表	df.groupby('列A')
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
2つの列からグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
黒い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
バギングを用いて回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
最大値・最小値の範囲で一様な疑似乱数を生成する	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
オブジェクトはコードか調べる	inspect.iscode(オブジェクト)
整数が整数2より小さいか調べる	整数 < 整数2
カテゴリでグループ化して、データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
ローングリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
浮動小数点数で実数を除算して、小数点以下を切り捨てる	x // y
行列の標準偏差	np.std(aArray)
ヒストグラムをリネン色を用いて描画する	plt.hist(データ列, color='linen')
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
文字列の左側から改行を消す	文字列.lstrip('\n')
データフレームを並べる	df.sort_values('キーとなる列')
カラーコードで折れ線プロットの色を変更する	plt.plot(データ列x, データ列y, color='#800080')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ふたつの整数の差を計算する	整数 - 整数2
辞書に項目名がある場合処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
条件が二つとも成り立つ	条件 and 条件2
整数が整数2以上かテストする	整数 >= 整数2
ヒストグラムを破線に指定する	plt.hist(データ列, linestyle='dashed')
データフレームの一部のカラムの中に文字列と文字列があるかどうか調べる	df[['列A', '列B']].isin([value, value2])
データシリーズの第二四分位数を求める	ds.median()
浮動小数点数とyの斜辺	math.hypot(x, y)
線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
deqのstart〜endの要素を求める	collections.deque(itertools.islice(deq, start, end))
ロバスト推定を使って回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームのポイントプロットを描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームから指定した二つの列を抽出する	df[['列A', '列B']]
リストと配列について散布図を描いて左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
みっつの条件が同時に成り立つ	条件 and 条件2 and 条件3
配列とリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
文字列を最後のカンマで二分して、前半を見る	文字列.rpartition(',')[0]
option: グリーン色を用いる	color = 'green'
安全に文字列の接尾辞から部分文字列を取り除く	文字列.removesuffix(部分文字列)
識別子が抽象クラスか調べる	inspect.isabstract(識別子)
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
相関係数を用いてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
カウンタのユニークな文字列を列挙する	list(aCounter)
棒グラフをカデットブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
0から始まる無限イテラブル	itertools.count()
両端キューの先頭に配列の各要素を追加する	両端キュー.extendleft(配列)
本日が月曜日か	datetime.datetime.today().weekday() == 0
ヒストグラムの色を深紅に設定する	plt.hist(データ列, color='crimson')
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
文字列中の部分文字列を別の文字列に置換する	文字列.replace(部分文字列, 置換後の文字列)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
リストとリストの散布図をプロットして、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストから長さの制限した両端キューを作成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
データフレームの列を型にする	df[col] = df[col].astype(ty)
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
表データの中である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
散布図に右三角印を使用する	plt.scatter(データ列x, データ列y, marker='>')
平均値でデータフレームの欠損値を埋める	df.fillna(df.mean())
中央値でデータフレームの中の列を分割する	pd.qcut(df[col], 2)
要素がタプルの要素でないか調べる	要素 not in タプル
タイムスタンプデータの日数	aDatetime.day
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
option: フォントの色をゴールドに指定する	color = 'gold'
リストを境界値として列をビン分割する	pd.cut(ds, aList)
データフレームの指定したカラムの尖度を計算する	df['列A'].skew()
縦棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
半透明の破線でイテラブルの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
サーモン色でヒストグラムを描画する	plt.hist(データ列, color='salmon')
十六進数字を全部使う	string.hexdigits
ヒストグラムをミディアムスレートブルー色として描画する	plt.hist(データ列, color='mediumslateblue')
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの色をアイボリーにセットする	plt.plot(データ列x, データ列y, color='ivory')
option: グラフの色をダークオレンジに変更する	color = 'darkorange'
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
散布図をネイビー色を用いて描画する	plt.scatter(データ列x, データ列y, color='navy')
一時的に処理しないようにしたい	# コメント
option: 色をプラムに設定する	color = 'plum'
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
文字列を最後のセパレータで二分して、前半を使う	文字列.rpartition(セパレータ)[0]
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
データ列をヒストグラムにする	plt.hist(データ列)
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
標準出力がターミナル出力かどうか調べる	sys.stdout.isatty()
データフレームの欠損値をxで置換する	df.fillna(x)
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
XにYを掛けた値を求めたい	X * Y
浮動小数点数の逆双曲線正弦	math.asinh(x)
配列とイテラブルの散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
数式のxについてのn階微分を求める	sympy.diff(数式, [|変数]x, n)
option: インディアンレッドにグラフの色を指定する	color = 'indianred'
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
実数の逆双曲線正接	math.atanh(x)
option: フォントの色をシスルに設定する	color = 'thistle'
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
オブジェクトがタプルか調べる	tuple = int<nl>isinstance(obj, tuple)
あるカラムの値ごとの分散	df.groupby('列A').var()
新しい回帰木モデルを準備する	model = sklearn.tree.DecisionTreeRegressor()
散布図としてデータフレームの列を可視化する	sns.scatterplot(data=df, x='列名', y='列名')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
確率的勾配降下としてクラス分類をする	model = sklearn.linear_model.SGDClassifier()
既存のファイルを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
耐火レンガ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
option: コーンズシルクにグラフの色を指定する	color = 'cornsilk'
カウンタの項目のカウントを使う	aCounter[element]
線グラフをディープスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
nが整数かどうか調べる	整数 == 整数2
データフレームのあるカラムの統計量を見る	df['列A'].describe()
小数点以下'4'桁までを出力する	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
文字列中に非小文字が含まれるか調べる	any(not c.islower() for c in 文字列)
インデントを指定してリストをJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
データフレームをあるカラムによってグループ化し要約統計量を計算する	df.groupby('列A').describe()
ある列の値がxに等しい行を抽出する	df[df['列A'] == x]
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
文字列中の部分文字列の出現回数	文字列.count(部分文字列)
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
グラフの描画でパステル調に色使いを使用する	sns.set(pallete='pastel')
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
リストとリストについて散布図を描いて、大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
配列から長さの制限された両端キューを作成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'])
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
辞書のキーをリストにする	list(辞書.keys())
データフレームの一部のカラムの分位数を求める	df[['列A', '列B']].quantile(パーセント/100)
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームの指定したカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
マップのキーを要素に設定する	辞書[キー] = element
横棒グラフをロージーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='rosybrown')
グリッド線を黒くする	plt.grid(color='k')
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
グラフにデータラベルを追記する	plt.legend(['凡例A', '凡例B'])
オブジェクトがコルーチンかどうか確認する	inspect.iscoroutine(オブジェクト)
ヒストグラムをシャルトリューズ色を用いて描画する	plt.hist(データ列, color='chartreuse')
棒グラフをシルバー色を使って描画する	plt.bar(データ列x, データ列y, color='silver')
丸印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
deqのn番目の要素	両端キュー[n]
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
エポック秒の列からPandasの日付型にする	pd.to_datetime(df['列A'], unit='s', utc=True)
左三角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
パスのセパレータ記号を使う	os.sep
辞書の浅いコピーを用意する	辞書.copy()
柱状グラフを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
シーケンスと列を連結する	itertools.chain(iterable, iterable2)
標準出力を使う	sys.stdout
凡例の位置を(x,y)に変更する	plt.legend(loc=(x, y))
辞書を空にする	辞書.clear()
データシリーズの中にと文字列があるか	ds.isin([value, value2])
リストとリストについて散布図を描画し、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームをグループ化し、それぞれの最大値を求める	df.groupby('列A').max()
データフレームをある列を用いてソートする	df.sort_values(by='列A')
文字列が全てアスキー文字かどうか調べる	文字列.isascii()
カウンタをリストに変換する	list(aCounter)
ふたつのセットは共通の要素を持たないか確認する	セット.isdisjoint(セット2)
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
整数がセットのメンバーか調べる	数 in セット
タプルをn倍する	タプル * n
青色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームの指定した列のNaNをxにする	df['列A'].fillna(x)
アンサンブル学習として回帰分析をする	sklearn.ensemble.VotingRegressor()
データ列の変遷を色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: グラフの色をサンディーブラウンにする	color = 'sandybrown'
option: ライムグリーンにフォントの色を設定する	color = 'limegreen'
最初のコロンで文字列を二分して前の方を使う	文字列.partition(':')[0]
実数を切り下げて整数にする	math.floor(x)
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
ホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='white')
小数点数の逆正接を計算する	math.atan(x)
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
散布図をオールドレース色を使って描画する	plt.scatter(データ列x, データ列y, color='oldlace')
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
最初のカテゴリーを除き、データフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
全般的に色を濃くする	sns.set(pallete='deep')
データシリーズを丸める	ds.round()
option: 珊瑚にグラフの色を設定する	color = 'coral'
グレーにヒストグラムの色を指定する	plt.hist(データ列, color='grey')
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
散布図の印を青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
データフレームの名前リストであるカラムをドロップする	df.drop(columns, axis=1, inplace=True)
あるカラムによってデータフレームをまとめたグループ	df.groupby('列A')
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: ミディアムブルー色を使う	color = 'mediumblue'
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
カテゴリでグループ化してカーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
空のキューを準備する	両端キュー = collections.deque()
option: グラフの色を淡いピンク色に変更する	color = 'lightpink'
乱数で要素を埋めた行列	np.random.random((行数, 列数))
全要素を初期値で初期化した配列を作る	np.full(要素数, 初期値, dtype=np.int)
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
二つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
列を累加したイテラブルを求める	itertools.accumulate(iterable)
実数は非数	math.isnan(x)
データフレームの列をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
ピアソンの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
折れ線グラフの色をペルーにセットする	plt.plot(データ列x, データ列y, color='peru')
データシリーズを1000の位で丸める	ds.round(-3)
スクリプトファイルのパス	os.path.abspath(__file__)
破線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashed')
辞書に項目名が存在しない場合、処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
データシリーズの秒	ds.dt.second
option: ミディアムアクアマリンにグラフの色を指定する	color = 'mediumaquamarine'
ヒストグラムの線のスタイルを破線にセットする	plt.hist(データ列, linestyle='dashed')
文字列中にひとつでも大文字があるか調べる	any(c.isupper() for c in 文字列)
option: グラフの色を赤にセットする	color = 'red'
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
日付時刻データの日数を使う	aDatetime.day
CSVファイルからデータフレームを読む	pd.read_csv('file.csv', sep=',')
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
カラーコードを使って折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
option: シーグリーン色を用いる	color = 'seagreen'
データフレームの一部の列を十の位で丸める	df[['列A', '列B']].round(-1)
アルファベットからランダムに一文字選ぶ	random.choice(string.ascii_uppercase)
バイトオーダを調べる	sys.byteorder
横棒グラフをナバホホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='navajowhite')
両端キューの末尾に文字列を入れる	両端キュー.append(文字列)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
グラフの横軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
データフレームの要約統計量	df.describe()
日付データをn分前にする	aDate - datetime.timedelta(minutes=n)
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
最初のカンマで文字列を二分し、前の方を使う	文字列.partition(',')[0]
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
カウンタを高頻出方からリストとして得る	aCounter.most_common()
xが無限大に近づく時の数式の極限値を算出する	sympy.limit(数式, [|変数]x, oo)
ファイル名がJSONファイル	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
辞書に別の辞書2の項目を更新する	辞書.update(辞書2)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: スノーに色をセットする	color = 'snow'
ヒストグラムを淡い茶色色を用いて描画する	plt.hist(データ列, color='tan')
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
凡例を最適な場所に表示する	plt.legend(loc='best')
リストの値を昇順にソートする	sorted(リスト, reverse=False)
オブジェクトの属性の値を値に変更する	setattr(obj, プロパティ名, 値)
リストと配列についての散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
日付データが月曜日か調べる	aDate.weekday() == 0
ひとつでもアスキー文字が文字列中に含まれるかどうか確認する	any(c.isascii() for c in 文字列)
数を小数点以下第一位で四捨五入する	round(x, 1)
xの小数点以下'2'桁まで出力する	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
カラム名を指定してデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
グラフをポスター用に変更する	sns.set(context='poster')
割った余りを計算したい	X % Y
線グラフの色をオレンジに指定する	plt.plot(データ列x, データ列y, color='orange')
ペアリストpairsからカウンタを新規生成する	collections.Counter(dict(pairs))
ヒストグラムをチョコレート色を使って描画する	plt.hist(データ列, color='chocolate')
データフレームの指定したカラムの中にいくつ未入力値があるかカウントする	df['列A'].isna().sum()
空セットを使う	set()
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
文字列の末尾から範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
カウンタを多い順番にリストとして得る	aCounter.most_common()
データフレームのカラムの値は欠損値か調べる	df['列A'].isna()
リストとデータ列の散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ファイルパスをBOM付きとしてオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
option: サンディーブラウンを使う	color = 'sandybrown'
両端キューの末尾にイテラブルの値を追加する	両端キュー.extend(イテラブル)
option: グラフの種類を実線に指定する	linestyle = 'solid'
データフレームをグループごとに色付けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: 赤にフォントの色を設定する	color = 'red'
データシリーズを万の位で丸める	ds.round(-4)
レモンシフォン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
折れ線グラフを半透明の点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: グラフの色をグレーに設定する	color = 'gray'
タプル中の要素は全て真	all(タプル)
option: バッファのサイズを設定する	buffering = 4096
option: エクセルファイルシートの名前を指定する	sheet_name = ['A', 'B']
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの中に文字列と文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
文字列を文字コードでバイト列に変換する	文字列.encode(encoding=encoding)
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
平均値と標準偏差から疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
option: カラムの名前をリストでする	names = 列名リスト
データシリーズは何秒か知る	ds.dt.second
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データシリーズの値を正規表現patternで全部replに置き換える	ds.replace(pattern, repl, regex=True)
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
ダークゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
文字列をセットに追加する	セット.add(文字列)
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
文字列の末尾がかどうか確認する	文字列.endswith(部分文字列)
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
データフレームの選択したカラムの欠損値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームの中にある文字列の個数を調べる	df.isin([value]).sum()
option: 線幅を3.0ポイントに変更する	linewidth = 3.0
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
2つのセットは交わりを持たない	セット.isdisjoint(セット2)
ファイルをUTF8でオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
option: フォントの色をハニーデューに設定する	color = 'honeydew'
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
データ列の折れ線グラフを星印として描画する	plt.plot(データ列x, データ列y, marker='*')
区間から行列	np.linspace(最小値, 最大値, 要素数)
ある列ごとの合計	df.groupby('列A').sum()
配列とリストについての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
縦軸の目盛を対数に変更する	plt.yscale('log')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
折れ線グラフに▼マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
散布図に▲マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
Pythonパスの一覧を調べる	sys.path
ラインの線の種類を点線にセットする	plt.plot(データ列x, データ列y, linestyle='dotted')
NaNがある行をドロップし、みる	df.dropna()
カウンタ同士でインターセクション	aCounter & aCounter2
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
散布図の四角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
グラフの描画でパステル調にパレットを使用する	sns.set(pallete='pastel')
配列とイテラブルについての散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列を最後の区切り記号で二つに分けて、後ろの方を見る	文字列.rpartition(セパレータ)[-1]
辞書から最後の項目をポップする	辞書.popitem()
option: フォントの色をゲインズボロに指定する	color = 'gainsboro'
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
yがマイナス無限大に近づく時、数式の極限値を求める	sympy.limit(数式, y, -oo)
リストとリストについて散布図を描画し、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
線グラフの色をダークオリーブグリーンにする	plt.plot(データ列x, データ列y, color='darkolivegreen')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
n個の要素があるリストを作る	[要素] * n
キーが辞書に存在するか調べる	キー not in 辞書
データフレームの一部のカラムを一万の位で四捨五入する	df[['列A', '列B']].round(-4)
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
ローングリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
0からN未満までの配列を作成する	np.arange(N)
ダーク・スラテグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
文字列の先頭でパターンに複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
縦棒グラフをミディアムターコイズ色として描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームの中の欠損値の合計を調べる	df.isna().sum()
option: オリベドラブ色を使用する	color = 'olivedrab'
option: 書き込みモードにする	mode = 'w'
ふたつの集合の対称差集合を算出する	セット.symmetric_difference(セット2)
散布図をパパイヤウィップ色を用いて描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
カウンタの積集合を求める	aCounter & aCounter2
黒い左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
option: 読み込みモードを使用する	mode = 'r'
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
小数点以下3桁までデータフレームを書き出す	df.to_csv('file.csv', float_format='%.3f')
黒いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
縦棒グラフをスラグレー色を使って描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームの欠損値を最小値に増やす	df.fillna(df.min())
折れ線グラフの丸マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
指定したカラムの標本分散	df['列A'].var(ddof=0)
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームをある列のカテゴリとしてグループ化してグループ名で取り出す	df.groupby('列A').get_group(グループ名)
折れ線グラフの上三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
ヒストグラムをダークシアグリーン色を用いて描画する	plt.hist(データ列, color='darkseagreen')
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: ダークオレンジを使用する	color = 'darkorange'
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
option: スカイブルー色を使う	color = 'skyblue'
変数の値を１つ少なくしたい	X -= 1
整数と整数の論理和	整数 | 整数2
ヒストグラムの色をロイヤルブルーに指定する	plt.hist(データ列, color='royalblue')
データフレームのある列の値がxに等しくない行を取り出す	df[df['列A'] != x]
指定した列リストついて、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
モデルを説明変数と目的変数を使って学習する	model.fit(説明変数, 目的変数)
データシリーズの欠損値を数値で補う	ds.fillna(x)
文字列が全て英数字かどうか	文字列.isalnum()
タプルにイテラブルを続ける	itertools.chain(iterable, iterable2)
線グラフの色をゴーストホワイトにする	plt.plot(データ列x, データ列y, color='ghostwhite')
イテラブルから新しいカウンタを作る	collections.Counter(iterable)
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
パールバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
欠損値がある行をドロップしてみる	df.dropna()
線形モデルのバイアス	model.intercept_
プロットを画面用に設定する	sns.set(context='notebook')
文字列をカンマで二つに分けて、残りを使う	文字列.partition(',')[-1]
散布図を左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<')
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
浮動小数点数を万の位で丸める	round(x, -4)
セットが空	len(セット) == 0
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
数列とリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
横棒グラフをリネン色として描画する	plt.barh(データ列x, データ列y, color='linen')
パールバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
グラフからグリッド線を消す	plt.grid(False)
option: ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
部分文字列が文字列の指定した位置より後に含まれないか	文字列.find(部分文字列, 開始位置) == -1
凡例の位置を指定する	plt.legend(loc=(x, y))
条件にあったら、ループを中断したい	if 条件式:<nl><tab>break
実部と虚部から複素数	complex(x, y)
オブジェクトは集合型か確認する	set = int<nl>isinstance(obj, set)
イテラブルとリストの散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列から指定した文字を全て取り除く	文字列.replace(文字, '')
ある列のカテゴリごとの最大値を求める	df.groupby('列A').max()
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ゼロ埋めされた三２ビット整数型のベクトルを作る	np.zeros(要素数, dtype=np.int16)
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='grey')
イテラブルの各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
n回整数を繰り返すイテラブルを使う	itertools.repeat(整数, n)
データフレームの欠損値を除いてみる	df.dropna()
ベクトルの行ごとの最小	np.min(aArray, axis=1)
文字列中に空白が含まれないか確認する	any(not c.isspace() for c in 文字列)
データフレームの選択したカラムの中にいくつ未入力値があるか数える	df[['列A', '列B']].isna().sum()
を切り捨てながら整数分の一にする	変数 //= 整数
文字列が無限に繰り返す列が欲しい	itertools.repeat(文字列)
イテラブルからひとつランダムに選んでリストにする	random.choice(イテラブル)
耐火レンガ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームを複数の列によって昇順に並べる	df.sort_values(by=['列A', '列B'], ascending=True)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームの中に文字列と文字列が存在するか	df.isin([value, value2])
ダークレッドにヒストグラムの色をする	plt.hist(データ列, color='darkred')
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームの指定したカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
ランダムな整数のリストを見る	random.sample(range(100), 10)
option: グラフの色をモカシンに指定する	color = 'moccasin'
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
標準出力	sys.stdout
リストを文字列として、'改行を用いて結合する	'\n'.join(map(str, リスト))
CSVファイルファイル名がか調べる	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
グラフのy座標を対数目盛に変更する	plt.yscale('log')
赤い実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
formatパターンの文字列をタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
整数の無限イテレータ	itertools.repeat(整数)
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
改行せず変数をプリントする	print(変数名, end='')
サイコロ	random.randint(1, 6)
データフレームの選択した列の平均値を求める	df[['列A', '列B']].mean()
既存のファイルをSJISを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームの指定したカラムの分散	df['列A'].var()
リストから重複を除去する	sorted(set(リスト), key=リスト.index)
双方向キューから最初の文字列を取り除く	両端キュー.remove(文字列)
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームをある列によって昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
year年month月day日のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
rgbの▽マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
rgbの丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: タブをセパレータで用いる	sep = '\t'
データフレームを十の位で四捨五入して、整数型にする	df.round(-1).astype(int)
縦軸の目盛りを整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
リストと配列についての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームを昇順にある列で破壊的に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
二つのデータフレームを異なる列をキーにして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
横棒グラフをプロットして、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
クラス分類をスタッキングを用いて行う	sklearn.ensemble.StackingClassifier()
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
xをマゼンタで出力する	print(f'\033[35m{x}\033[0m')
線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ある列を用いて昇順に表をソートして更新する	df.sort_values(by='列A', ascending=True, inplace=True)
散布図に大バツ印を使用する	plt.scatter(データ列x, データ列y, marker='X')
指定した列のカテゴリで集計し、それぞれの最大値を求める	df.groupby('列A').max()
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
データフレームをグループ化し、各最大値を計算する	df.groupby('列A').max()
色付きの実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
パパイヤウィップにヒストグラムの色を設定する	plt.hist(データ列, color='papayawhip')
ヒストグラムを破線を用いて描画する	plt.hist(データ列, linestyle='dashed')
データフレームの列の文字列長を列として使う	df[col].str.len()
オブジェクトのフィールドの値を使う	getattr(obj, プロパティ名)
辞書を階層化辞書に変換する	collections.ChainMap(aDict)
長さの制限した両端キューをリストから作成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
指定した列のカテゴリで集計し、それぞれの個数を求める	df.groupby('列A').count()
新しいロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
JSON形式のバイト列を構文解析する	json.loads(バイト列.decode('unicode-escape'))
線グラフをライムグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームの複数のカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
線グラフを一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列がリストのいずれかどうか調べる	文字列 in リスト
カラムを標準化する	scipy.stats.zscore(df['列A'])
線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
要素はタプルの要素か調べる	要素 in タプル
セットから全ての要素を除去する	セット.clear()
最初のプログラムを書く	print('Hello World')
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
文字列が全て変数名	文字列.isidentifier()
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
シエナ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
option: タンにグラフの色を設定する	color = 'tan'
option: セパレータをタブにする	sep = '\t'
xのハッシュ値を求める	hash(x)
option: 文字コードをUTF8に変更する	encoding = 'utf-8'
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
文字列中にひとつでも小文字が含まれるか調べる	any(c.islower() for c in 文字列)
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
ふたつの整数の商	整数 / 整数2
yがマイナス無限大に近づくときの極限値を算出する	sympy.limit(数式, y, -oo)
オブジェクトは整数かどうか調べる	int = int<nl>isinstance(obj, int)
リストとリストについての散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
イテラブルを双方向キューに変換する	collections.deque(イテラブル)
２つ以上の条件分岐が書きたい	if 条件式:<nl><tab>print('1')<nl>elif 条件式2:<nl><tab>print('2')<nl>else:<nl><tab>print('3')
配列とデータ列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームを連結する	# concat<nl>pd.concat([df, df2])
部分文字列の位置を文字列中から探す	文字列.find(部分文字列)
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
コマンド引数を列挙する	sys.argv
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
二つの計算結果を順にプリントする	print(式, 式)
ダークグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
セットを別のセットとのインターセクションだけにする	セット.intersection_update(セット2)
option: ラベンダーブラッシュにグラフの色を設定する	color = 'lavenderblush'
option: バツ印を加える	marker = 'x'
option: プラム色を用いる	color = 'plum'
２つのデータフレームを横方向につなぐ	pd.concat([df, df2], axis=1)
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
ファイル名がCSVファイルか	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
yがマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(数式, y, -oo)
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列が識別子か調べる	文字列.isidentifier()
BOM付きとしてファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
折れ線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
散布図をミディアムスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
散布図の下三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
配列の合計値を計算する	np.sum(aArray)
オブジェクトがフィールドを持つかどうか確認する	hasattr(obj, プロパティ名)
文字列を文字のリストにする	list(文字列)
ファイルを読み込みモードでオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
データフレームを散布図で可視化してカテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
青紫色でヒストグラムを描画する	plt.hist(データ列, color='violet')
ライトシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
リストの相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
ある列を千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
整数がセットの要素でないかどうか判定する	数 not in セット
ゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフの大バツマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
イテラブルを累加する	itertools.accumulate(iterable)
線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
棒グラフを耐火レンガ色を使って描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームをソートして、上の方n件を取り出す	df.sort_values('キーとなる列').head(n)
データ列をフォーマットでPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
文字列を最後のカンマで二分割して残りを見る	文字列.rpartition(',')[-1]
３つのデータフレームを縦方向に一つにまとめる	pd.concat([df, df2, df3], axis=1)
ある列で集計し分散を計算する	df.groupby('列A').var()
例外なくセットから要素を取り除く	セット.discard(要素)
データフレームの中の未入力値の合計をカウントする	df.isna().sum()
方程式として数式の変数の解を計算する	sympy.solve(数式, [|変数]x)
ファイルを開き]、バイナリストリームを使う	'rb' = 'a'<nl>open(filepath, mode='rb')
綺麗なグラフを使用する準備をする	import seaborn as sns
折れ線グラフの色をラベンダーブラッシュにする	plt.plot(データ列x, データ列y, color='lavenderblush')
あらかじめ正規表現をコンパイルする	re.compile(pattern)
カラム名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
ヒートマップを用いて混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: 色をアクアに指定する	color = 'aqua'
データフレームの指定したカラムの未入力値を平均に設定する	df['列A'].fillna(df['列A'].mean())
データフレームのカラムの幾何平均を算出する	scipy.stats.gmean(df['列A'])
リストの末尾を除く	リスト[:-1]
1で全要素を初期化した行列を作成する	np.ones(要素数, dtype=np.int)
散布図をミディアムアクアマリン色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
tanの逆数	math.atan(x)
シャルトリューズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
コマンド引数のリスト	sys.argv
リストのn番目以降の要素を取り出す	リスト[n:]
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムをシーグリーン色を用いて描画する	plt.hist(データ列, color='seagreen')
変数を宣言したい	X = 0
茶色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
option: 黄色に色をセットする	color = 'yellow'
option: マゼンタ色を使用する	color = 'magenta'
日付データが木曜日かどうか調べる	aDate.weekday() == 3
option: グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
データフレームの中の列をビン数nを用いてビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムをペルー色を用いて描画する	plt.hist(データ列, color='peru')
JSON形式でデータを出力ストリームに出力する	json.dump(データ, ファイル出力, ensure_ascii=False)
カウンタのキーと出現回数を列挙する	aCounter.items()
棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
数式のn階微分を求める	sympy.diff(数式, y, n)
表の行を範囲指定して取り出す	df[start:end]
データフレームのカラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
数列から重複なく、n個ランダムに選んでリスト化する	random.sample(数列, k=n)
グラフに水平方向の破線をつける	plt.axhline(y=0, linestyle='dashed')
ヒートマップでデータフレームの相関行列を描画する	sns.heatmap(df.corr())
右三角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
option: グラフの色をアリスブルーにセットする	color = 'aliceblue'
option: 色のアルファを変更する	alpha = 0.5
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
実数の双曲線正接を求める	math.tanh(x)
データフレームのある列の文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
ある列のカテゴリごとの最大値	df.groupby('列A').max()
空文字	''
整数が整数2より大きいかどうか	整数 > 整数2
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
縦棒グラフをパウダーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフの四角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
データフレームのカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
部分文字列がsubで始まるか調べる	文字列.startswith(部分文字列)
浮動小数点数を３乗する	x ** 3
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
散布図をミントクリーム色を使って描画する	plt.scatter(データ列x, データ列y, color='mintcream')
横棒グラフをゴールド色として描画する	plt.barh(データ列x, データ列y, color='gold')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
データフレームをグループ化し、個数を求める	df.groupby('列A').count()
xでカラムのNaNを埋める	df['列A'].fillna(x)
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
option: グラフの色をダークマゼンタに変更する	color = 'darkmagenta'
アヤメのデータセットをロードする	df = sns.load_dataset('iris')
option: サーモンにグラフの色を設定する	color = 'salmon'
最小値でデータフレームの選択したカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
エラーを無視して文字列をバイト列にする	文字列.encode(errors='ignore')
データフレームの尖り	df.skew()
文字列の開始位置以降に部分文字列がないか	文字列.find(部分文字列, 開始位置) == -1
グラフの簡単な説明の位置を指定する	plt.legend(loc=(x, y))
データフレームの一部のカラムの値を正規表現でまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
指定した列の中にある日付データと文字列の合計を数える	df['列A'].isin([value, value2]).sum()
option: 白にフォントの色を設定する	color = 'white'
予測データのコンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
文字化けしないようにエクセルファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
文字列の末尾がか調べる	文字列.endswith(部分文字列)
整数の二分の一を計算する	整数 / 2
折れ線グラフの透明度を指定する	plt.plot(データ列x, データ列y, alpha=0.5)
整数が一桁の数か調べる	-9 <= 整数 <= 9
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
カラムのUNIX時間を日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
オブジェクトがバイト列型のインスタンス	bytes = int<nl>isinstance(obj, bytes)
散布図を赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='red')
option: フォントの色をオリベドラブにする	color = 'olivedrab'
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
リストと配列について散布図を描画して、バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
整数の8乗を求める	整数 ** 8
subで部分文字列が開始するか	文字列.startswith(部分文字列)
データフレームの中にがあるかテストする	df.isin([value])
option: 読み込みモードを使う	mode = 'r'
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
シアン化する	f'\033[36m{x}\033[0m'
option: ライトブルー色を用いる	color = 'lightblue'
縦棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
入力から2つの文字列を読む	A, B = map(str, input().split())
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
文字が別の文字列に含まれる	文字 in 文字列
リストとリストの散布図を描画し、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
関数でデータフレームをグループ化する	df.groupby(関数)
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
エクセルファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
カラムを万の位で四捨五入する	df['列A'].round(-4)
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
option: 改行をセパレータで用いる	sep = '\n'
変数の値を一つ減らしたい	X -= 1
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
文字が片仮名	# Tips<nl>('ァ' <= 文字 <= 'ン')
赤い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
x軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
リストの末尾から要素をポップする	リスト.pop()
文字列中にひとつもアスキー文字が含まれないかどうか	any(not c.isascii() for c in 文字列)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
ナバホホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
xを文字列にする	str(x)
イテラブルと数列について散布図を描画し、、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
整数の十六進数表現	hex(整数)
xが0に近づくときの極限値を計算する	sympy.limit(数式, [|変数]x, 0)
両端キューの末尾から要素を取り出す	両端キュー.pop()
文字列の最後の文字を見る	文字列[-1]
要素はセットに含まれる	要素 in セット
リストの要素を昇順に並べ変える	sorted(リスト, reverse=False)
赤い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
型のサブクラスか調べる	issubclass(サブクラス, クラス)
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
データフレームの一部のカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
欠損値が存在する行を取り除く	df.dropna(inplace=True)
２つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
option: オールドレース色を用いる	color = 'oldlace'
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
多次元データを主成分分析として文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
辞書にキーワード引数として更新する	辞書.update(**kwargs)
日付時刻データの曜日を使う	aDatetime.weekday()
option: 改行するの代わりに文字列を用いる	end = 文字列
実数の双曲線余弦の逆数を算出する	math.acosh(x)
データフレームをグループ化し、ある列に対し標準偏差を計算する	df.groupby('列A')['列B'].std()
モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
散布図に右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
いつまでも数え上げる	itertools.count()
エラーを無視して文字列をバイト列に変換する	文字列.encode(errors='ignore')
改行なしに二つの計算結果をプリントする	print(式, 式, end='')
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列を日付データにする	pd.to_datetime(日付を表現した文字列)
データフレームの一部の列の相関行列をで求める	df[['列A', '列B']].corr(method='kendall')
文字列がタイトルケースか判定する	文字列.istitle()
文字列を最後のカンマで二分する	文字列.rpartition(',')
文字列を最後のカンマで二分し、、前半を使う	文字列.rpartition(',')[0]
option: スラグレー色を使う	color = 'slategrey'
線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: シスルを使用する	color = 'thistle'
データフレームのインデックスの名前を一度に付け直す	df.rename(index={x: y})
指定した列の欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
セットからエラーなく整数を取り除く	セット.discard(数)
option: グラフの色をダークターコイズに指定する	color = 'darkturquoise'
データフレームの形状を見る	df.shape
セットから別のセットとの共通要素を全て取り除く	セット.symmetric_difference_update(セット2)
ファイルを書き込みモードで開く]	'w' = 'a'<nl>open(filepath, mode='w')
線グラフの色をディープスカイブルーにセットする	plt.plot(データ列x, データ列y, color='deepskyblue')
ふたつの集合の共通部分	セット.intersection(セット2)
表データの先頭10行	df.head(10)
データフレームをある列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
ホットピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
タプルが空	len(タプル) == 0
タプルの末尾	タプル[-1]
双方向キューの末尾に文字列を追加する	両端キュー.append(文字列)
数式のxに数値を代入する	数式.subs([|変数]x, 数値)
モカシンにヒストグラムの色を変更する	plt.hist(データ列, color='moccasin')
△印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
整数除算の切り上げ	(整数 + 整数2 - 1) // 整数2
列の値によってデータフレームを集約する	df.groupby('列A')
リストに別のリストを加えて広げる	リスト.extend(リスト2)
大文字・小文字を無視して文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
逆順のキュー	reversed(両端キュー)
イエローグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームの一部のカラムの最頻値	df[['列A', '列B']].mode()
数列をセットに変換する	set(数列)
入力ストリーム全体をリストに変換する	[s.strip() for s in f.readlines()]
option: ハニーデュー色を使う	color = 'honeydew'
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
option: アンティークホワイト色を使用する	color = 'antiquewhite'
折れ線グラフを描いて、色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
最大長を指定して、両端キューを作成する	collections.deque(maxlen=最大長)
option: オレンジレッド色を使う	color = 'orangered'
整数が3で割り切れるか調べる	整数 % 3 == 0
データフレームのある列の値がx以上のデータを選ぶ	df[df['列A'] >= x]
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
グラフの横軸を対数目盛に変更する	plt.xscale('log')
nと整数が同じ値かどうか	整数 == 整数2
クラス分類を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingClassifier()
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
オブジェクトがトレースバックかどうか	inspect.istraceback(オブジェクト)
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
ヒストグラムをサーモン色を使って描画する	plt.hist(データ列, color='salmon')
横棒グラフを黄緑色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
リストの値をクリアにする	リスト.clear()
項目名ワード引数で辞書に更新する	辞書.update(**kwargs)
折れ線グラフに▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
データフレームの一部のカラムを小数点以下n桁で丸める	n = 2<nl>df[['列A', '列B']].round(n)
文字列中に非小文字が含まれるかどうかテストする	any(not c.islower() for c in 文字列)
数式の平方根を計算する	sympy.sqrt(数式)
箱ひげ図で数列を可視化する	plt.boxplot(データ列)
右三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
折れ線グラフをデピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='deeppink')
データ列のユニークな値を見る	ds.unique()
文字列のn番目の文字	文字列[n]
データフレームをグループ化して、ヒストグラムで見る	sns.histplot(df, x='列名', hue='カテゴリ名')
オブジェクトが文字列か調べる	str = int<nl>isinstance(obj, str)
オブジェクトはリストかタプルかどうか調べる	isinstance(obj, (list)
タプルの中の最小値を求める	min(タプル)
デピンク色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
データ列の四分位を可視化する	plt.boxplot(データ列)
数列とリストについての散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
配列は何次元か調べる	aArray.ndim
文字列中に数字が含まれないか調べる	any(not c.isdigit() for c in 文字列)
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: ミントクリーム色を使用する	color = 'mintcream'
横方向に二つの表データを連結する	pd.concat([df, df2], axis=1)
線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: ダークゴールデンロッドにフォントの色を設定する	color = 'darkgoldenrod'
棒グラフをモカシン色として描画する	plt.bar(データ列x, データ列y, color='moccasin')
シスル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
３自然数のGCD	math.gcd(n, n2, n3)
文字列で区切ってxとyをプリントする	print(x, y, sep=s)
ヒストグラムをアクア色を使って描画する	plt.hist(データ列, color='aqua')
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
要素はタプルの要素か	要素 in タプル
xの小数点以下'1'桁の文字列にする	':.1f'.format(x)
文字列中に非数字があるかどうか調べる	any(not c.isdigit() for c in 文字列)
青緑色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
辞書をJSON形式としてファイル出力に保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
ヒストグラムの色をフォレストグリーンに指定する	plt.hist(データ列, color='forestgreen')
データフレームの一部のカラムの中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
折れ線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
グラフの短い説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
エンコーディングを確認する	sys.getdefaultencoding()
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフの右三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
リストが空か	len(リスト) == 0
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
option: バツマーカーを使用する	marker = 'x'
線グラフを紺碧色を用いて描画する	plt.plot(データ列x, データ列y, color='azure')
option: ▽マーカーを描画する	marker = 'v'
option: スチールブルー色を用いる	color = 'steelblue'
option: 色をロージーブラウンに設定する	color = 'rosybrown'
データフレームの指定されたカラムの名前一覧の列を選択する	columns = ['列A', '列B']<nl>df[columns]
二進数文字列をバイト列に変換する	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
nまでの奇整数列	list(range(1, n, 2))
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: 茶色色を使う	color = 'brown'
データシリーズの時を使う	ds.dt.hour
ふたつのカラムからグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
配列とリストの散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
あるカラムを用いてデータフレームをソートする	df.sort_values(by='列A')
リスト中の要素が少なくともひとつ真かどうか	any(リスト)
option: グラフの種類を点線に変更する	linestyle = 'dotted'
タプルの最初の要素	タプル[0]
オブジェクトがメソッドか確認する	inspect.ismethod(オブジェクト)
ヒストグラムをレベッカパープル色を使って描画する	plt.hist(データ列, color='rebeccapurple')
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
整数2がnより大きくかつ、n3未満か	整数 < 整数2 and 整数2 < n3
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
二つの変数を表示する	print(変数名, 変数名)
データフレームのカラムの不偏分散を算出する	df['列A'].var(ddof=1)
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
教師データで回帰モデルを学習する	model.fit(説明変数, 目的変数)
データフレームをグループ化しそれぞれの分散を求める	df.groupby('列A').var()
スタックの要素を左に輪番で回す	両端キュー.rotate(-1)
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
数式の変数に別の数式を代入する	数式.subs(変数, 数式2)
データフレームの行と列を入れ替える	df.T
日付データからn週間を減らす	aDate - datetime.timedelta(weeks=n)
左に双方向キューの要素をローテーションする	両端キュー.rotate(-1)
実数を切り上げて整数に変換する	math.ceil(x)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図をrgbの丸マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
floatの最大値	sys.float_info.max
ふたつの集合の対称差集合	セット.symmetric_difference(セット2)
散布図の星印を黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
カウンタのそれぞれの項目をカウントだけリストとして得る	aCounter.elements()
2つのオブジェクトが等しいか調べる	obj == obj2
option: ダークターコイズにフォントの色を指定する	color = 'darkturquoise'
正規表現を用いる	import re
データフレームをグループ化し、それぞれの最小値を計算する	df.groupby('列A').min()
要素がセットの要素に含まれないか確認する	要素 not in セット
ダークグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
現在は何時か知る	datetime.date.today().hour
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: バイナリモードを使う	mode = 'rb'
中央値でデータフレームの選択したカラムの未入力値を置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
最後のコロンで文字列を二分割して、前半を使う	文字列.rpartition(':')[0]
option: ピーチパフ色を使う	color = 'peachpuff'
option: フォントの色をターコイズに設定する	color = 'turquoise'
イテラブルとリストについて散布図を描き、マーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
ミディアムバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
要素の無限なイテレータ	itertools.repeat(要素)
データシリーズの欠損値を数値で埋める	ds.fillna(x)
白色化する	f'\033[37m{x}\033[0m'
二つのデータフレームを連結する	# concat<nl>pd.concat([df, df2])
データフレームの指定したカラムの標本分散	df['列A'].var(ddof=0)
双方向キューに整数をenqueueする	両端キュー.append(整数)
ヒストグラムを赤くする	plt.hist(データ列, color='r')
項がセットに含まれないか調べる	要素 not in セット
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
文字列が別のに存在するか確認する	文字列 not in 別の文字列
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
タイムスタンプデータが日付時刻データより前	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
option: コーンズシルクを使う	color = 'cornsilk'
要素はマップの値として含まれているか調べる	element in 辞書.values()
数列間のケンドールの相関係数	scipy.stats.kendalltau(数列, 数列2)
option: 区切りをスラッシュにする	sep = '/'
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
辞書のコピーを作る	dict(辞書)
xがマイナス無限大に近づく時、数式の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
整数をバイト列に変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big')
散布図を濃いシアン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
線グラフを淡い茶色色として描画する	plt.plot(データ列x, データ列y, color='tan')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
青紫色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
青いグリッド線を引く	plt.grid(color='b')
データフレームの分散を算出する	df.var()
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
xをマゼンタにする	f'\033[35m{x}\033[0m'
二次元タプルをflattenする	sum(タプル)
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ライトグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
文字列を最後の部分文字列によって二分する	文字列.rpartition(部分文字列)
文字列からISO書式を用いて日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線プロットでリストの推移を描画する	plt.plot(range(len(データ列)), データ列)
黒い下三角マーカーを配列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
Pandasの日付型のデータフレームのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
指定した文字列で文字列が終わる	文字列.endswith(部分文字列)
xを浮動小数点数に変換する	float(x)
option: ホワイトスモークにグラフの色を指定する	color = 'whitesmoke'
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
データフレームの指定したカラムを1000の位で丸める	df['列A'].round(-3)
指定した文字列で文字列が終了する	文字列.endswith(部分文字列)
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
option: ミントクリームにグラフの色を指定する	color = 'mintcream'
BOM付きで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
横棒グラフをオレンジ色を使って描画する	plt.barh(データ列x, データ列y, color='orange')
配列の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
実数以下の最大の整数	math.floor(x)
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
変数の値をスワップする	x, y = y, x
option: グラフの色をパープルに指定する	color = 'purple'
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
オブジェクトはバイト列型か調べる	bytes = int<nl>isinstance(obj, bytes)
option: ペールグリーン色を用いる	color = 'palegreen'
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
要素ひとつの組を作る	(要素,)
要素はセットに含まれない	要素 not in セット
データフレームの指定したカラムの未入力値を最頻値で補う	df['列A'].fillna(df['列A'].mode().iloc[0])
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームの全カラムを散布図としてグラフ化する	sns.pairplot(df)
option: 色をミディアムオーキッドに設定する	color = 'mediumorchid'
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
下三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
変数名がジェネレータ	inspect.isgenerator(識別子)
線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: 下三角印を描画する	marker = 'v'
列を等量でビン数nとしてビン分割する	pd.qcut(ds, n)
n回文字列が続くイテラブル	itertools.repeat(文字列, n)
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
option: 青紫色を使う	color = 'violet'
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
外れ値を除いた配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
カテゴリ列で色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
整数プラス整数	整数 + 整数2
option: パールゴールデンロッドにフォントの色を設定する	color = 'palegoldenrod'
データシリーズの欠損値を平均値に変更する	ds.fillna(ds.mean())
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
数を文字列に変換する	str(x)
辞書の項目名をリストにする	list(辞書.keys())
option: ブルーバイオレットにグラフの色を変更する	color = 'blueviolet'
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
xをシアンで表示する	print(f'\033[36m{x}\033[0m')
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
最小値でデータフレームの選択したカラムの欠損値を置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
文字列を一文字ずつ表示する	for c in 文字列:<nl><tab>print(c)
書き込みできるようにUTF8としてファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
ファイル全体を行単位で分割して読み込む	f.readlines()
文字列を空白で分割して、列挙する	文字列.split()
データシリーズの値が欠損値か調べる	ds.isna()
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
option: カラムの名前をリストで指定する	names = 列名リスト
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
リストをひとつ置きに取り出す	リスト[::2]
xについて数式を微分する	sympy.diff(数式, [|変数]x)
線グラフの色をスラグレーにする	plt.plot(データ列x, データ列y, color='slategrey')
横向きにデータフレームを結合する	pd.concat([df, df2], axis=1)
既存の配列を元に全要素が0の配列を初期化する	np.zeros_like(aArray)
文字列を最後の区切り記号で二分し、後半を使う	文字列.rpartition(セパレータ)[-1]
既存の行列を元に全要素が0の配列を初期化する	np.zeros_like(aArray)
二つの文字列は等しくないか	文字列 != 文字列2
最後の列を外したデータフレーム	df[df.columns[:-1]]
無限大を使う	math.inf
行列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
文字列を改行で分割し、文字列リストに変換する	文字列.splitlines()
データシリーズの平均など	ds.describe()
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
浮動小数点数の値が整数	x.is_integer()
option: グラフの色をミディアムブルーに変更する	color = 'mediumblue'
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
アクア色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
リストの末尾を使う	リスト[-1]
３数の最小値	min(x, y, z)
識別子はクラスか調べる	inspect.isclass(識別子)
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
実数を実数から減ずる	x - y
カラム名を指定してデータフレームをジョインする	'<nl>pd.merge(df, df2, on='列A')
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの指定した列の欠損値を第二四分位数で埋める	df['列A'].fillna(df['列A'].median())
浮動小数点数のn乗して実数による余り	pow(x, n, y)
option: マーカーを四角に変更する	marker = 's'
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
データフレームをある列によって降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
リストをn回、加える	リスト * n
option: 耐火レンガ色を用いる	color = 'firebrick'
線グラフの色をビスクにする	plt.plot(データ列x, データ列y, color='bisque')
カウンタを辞書で更新する	aCounter.update(aDict)
リストのn番目に要素を差し込む	リスト.insert(n, 要素)
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: グラフの線幅を設定する	linewidth = 3.0
整数を十六進文字列にする	hex(整数)[2:]
option: スラグレーを使う	color = 'slategrey'
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
既存のファイルを文字コードtextとして追加できるように開く]	open(filepath, mode='a', encoding=text)
データ列を２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
KNNとしてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
deqのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
文字列をJSON形式でファイル出力にダンプする	json.dump(文字列, ファイル出力, ensure_ascii=False)
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
わり算の切り捨てが書きたい	X // Y
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのインデックスをリセットする	df.reset_index()
option: 菱形マーカーを用いる	marker = 'D'
option: ダークオーキッド色を用いる	color = 'darkorchid'
黒い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
ループを中断したい	if 条件式:<nl><tab>break
データフレームのあるカラムのSkewness	df['列A'].skew()
数列から重複なく、n値ランダムに選んでリスト化する	random.sample(数列, k=n)
データフレームの行を条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
文字列がセットのメンバーでないか調べる	文字列 not in セット
色付きの一点鎖線としてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
分子と分母から分数を生成する	fractions.Fraction(分子, 分母)
カデットブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
配列のトリム分散を計算する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
option: フォントの色をフクシアに指定する	color = 'fuchsia'
predicateFuncを適用したとき真とならない列の要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
データフレームから10行ランダムサンプリングする	df.sample(10)
小文字を全て使う	string.ascii_lowercase
ある列の文字列が部分文字列で終わらない行を選ぶ	df[~ df['列A'].str.endswith(部分文字列)]
データフレームの指定したカラムの中に文字列と日付データが存在するか	df['列A'].isin([value, value2])
ダークゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
option: フォントの色をスレートブルーにセットする	color = 'slateblue'
5行をランダムにデータフレームから取り出す	df.sample(5)
縦軸だけグリッド線	plt.grid(axis='y')
小数点数の双曲線余弦の逆数	math.acosh(x)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームの一部のカラムを百の位で丸めて、整数にする	df[['列A', '列B']].round(-2).astype(int)
パレットトルコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
濃いシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データ列とリストについて散布図を描画して、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
クロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
指定したカラムで集計し、それぞれの平均値を求める	df.groupby('列A').mean()
小麦色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
線グラフを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
xをシンボル化する	x = sympy.Symbol('x')
グラフの色をパステル調にする	sns.set(pallete='pastel')
折れ線グラフの色を珊瑚にセットする	plt.plot(データ列x, データ列y, color='coral')
文字列中にASCII文字が含まれないかどうか調べる	any(not c.isascii() for c in 文字列)
アスキー文字が文字列中に含まれないかどうか調べる	any(not c.isascii() for c in 文字列)
データ列を縦棒プロットにする	plt.bar(ラベル列, データ列)
指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
データフレームの最初n行を見る	df.head(n)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
文字のアスキーコード	ord(文字)
データ列と数列について散布図を描いて、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
データフレームを昇順に複数の列によって並べる	df.sort_values(by=['列A', '列B'], ascending=True)
ミディアムバイオレットレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
赤い一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
空白区切りでタプルの各要素を表示する	print(*タプル)
カウンタの共通部分演算する	aCounter & aCounter2
データフレームをソートしてインデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
散布図のクロス印の大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
文字列からサフィックスを取り除く	文字列.removesuffix(部分文字列)
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームの中の未入力値の合計を調べる	df.isna().sum()
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
既存のベクトルを元に全要素が0の配列を作成する	np.zeros_like(aArray)
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ひとつでも非アルファベットが文字列中にあるか調べる	any(not c.isalpha() for c in 文字列)
ライムグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
最大最小から配列を作る	np.linspace(最小値, 最大値, 要素数)
文字列の左側から指定した文字を取り除く	文字列.lstrip(文字)
配列が正規分布に従うか調べる	scipy.stats.shapiro(配列)
option: アイボリー色を使う	color = 'ivory'
Xの５乗を求めたい	X ** 5
二つの列によってデータフレームを集約して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
ファイルを追加できるようにSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
黒い星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
横棒グラフを淡いピンク色色として描画する	plt.barh(データ列x, データ列y, color='lightpink')
文字列の示すエンコーディングでファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
データフレームから列を一つだけ選択する	df[['列A']]
縦棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
JSONフォーマットのバイト列を構文解析する	json.loads(バイト列.decode('unicode-escape'))
オブジェクトがビルトイン関数	inspect.isbuiltin(オブジェクト)
散布図に三角印を使う	plt.scatter(データ列x, データ列y, marker='^')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
整数が正の数か	整数 > 0
xを紫色にする	f'\033[35m{x}\033[0m'
最後のカンマで文字列を二分し、前半を求める	文字列.rpartition(',')[0]
rgbの大バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
散布図をペルー色を使って描画する	plt.scatter(データ列x, データ列y, color='peru')
イテラブルとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
π	math.pi
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
辞書にマップ2の項目を更新する	辞書.update(辞書2)
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームの選択したカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
横棒グラフをローングリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
yが無限大に近づく時、極限値を算出する	sympy.limit(数式, y, oo)
整数2がnより大きく、かつn3未満か調べる	整数 < 整数2 and 整数2 < n3
改行せず2つの文字列をプリントする	print(文字列, 文字列, end='')
配列とリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
リストの要素数	len(リスト)
点間のユークリッド距離	math.dist(point, point2)
乗算したい	X * Y
双方向キュー中の文字列の数をカウントする	両端キュー.count(文字列)
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
数式を微分する	sympy.diff(数式)
データフレームから指定した三つの列のみ抽出する	df[['列A', '列B', '列C']]
行列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
option: 符号なし８ビット整数型を用いる	np.uint8 = np.int<nl>dtype = np.uint8
predicateFuncがTrueとなるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
標準出力がターミナル出力か	sys.stdout.isatty()
ミディアムバイオレットレッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ロードしたモジュールの一覧	sys.modules
文字列をJSON形式の文字列にする	json.dumps(文字列, ensure_ascii=False)
線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
両端キューに文字列を積む	両端キュー.append(文字列)
指定したカラムの値が欠損値かどうか確認する	df['列A'].isna()
散布図をライトサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
タプル内の要素が少なくともひとつ真かどうか調べる	any(タプル)
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
列のユニークな要素	ds.unique()
データフレームの選択したカラムのNaNを最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データ列の推移を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図に黒い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
ダークターコイズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
プロットにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
黒い▲マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフの色を白にする	plt.plot(データ列x, データ列y, color='white')
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
表を配列に変換する	df.values
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
日付時刻データは日付時刻データより後ろか調べる	aDatetime > aDatetime2
フォレストグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
シーケンスをいつまでも繰り返す	itertools.cycle(iterable)
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列x, データ列y, color='firebrick')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
replにデータシリーズの値を正規表現patternで一度に置き換える	ds.replace(pattern, repl, regex=True)
データフレームの指定したカラムを十の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
文字列は全て識別子かどうか調べる	文字列.isidentifier()
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
リストを文字列として空白によって結合する	' '.join(map(str, リスト))
全てのシートをExcelから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
紫色でプリントできる文字列にする	f'\033[35m{x}\033[0m'
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
データフレームをグループ化してヒストグラムで描く	sns.histplot(df, x='列名', hue='カテゴリ名')
線グラフの色をダークターコイズにセットする	plt.plot(データ列x, データ列y, color='darkturquoise')
yが無限大に近づくときの極限値を計算する	sympy.limit(数式, y, oo)
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
Excelファイルファイルでデータフレームを出力する	df.to_excel('file.xlsx')
option: グラフの色をハニーデューにする	color = 'honeydew'
option: オールドレースを使う	color = 'oldlace'
タプルの最後からn番目以前の要素を抽出する	タプル[:-n]
nの無限の数列	itertools.repeat(n)
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
二つの列の値によってデータフレームをグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
変数xがマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
部分文字列が文字列の終了位置より前にないか	文字列.find(部分文字列, 0, 終了位置) == -1
散布図をモカシン色を用いて描画する	plt.scatter(データ列x, データ列y, color='moccasin')
両端キューの末尾にリストの各値を追加する	両端キュー.extend(リスト)
ひとつも数字が文字列中に存在しないかどうか調べる	any(not c.isdigit() for c in 文字列)
データフレームの一部のカラムの欠損値をメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
順序を保持しながらリストから重複を取り除く	sorted(set(リスト), key=リスト.index)
option: 文字列を区切りで使う	sep = s
option: 改行コードをUNIXに設定する	newline = '\n'
xを整数にする	int(x)
option: セパレータをスラッシュにする	sep = '/'
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
データフレームのカラムのモードを求める	mode, count = scipy.stats.mode(df['列A'])
0から始まるn個の整数列を作る	list(range(n))
識別子はビルトインか調べる	inspect.isbuiltin(識別子)
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
リストとリストの散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
横軸の目盛を対数に変更する	plt.xscale('log')
rgbの四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
３変数の最小値	min(x, y, z)
カラムの平均の標準誤差	scipy.stats.sem(df['列A'])
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
rgbの星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを列の値でグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データ列とデータ列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
JSON形式でデータをファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
文字列がリストのいずれか確認する	文字列 in リスト
option: グラフの色を青に設定する	color = 'blue'
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
option: 昇順にする	ascending = True
日付時刻データとタイムスタンプデータの時間差を計算する	aDatetime - aDatetime2
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
CSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
データフレームの選択した列のNaNを直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
option: 標準出力を出力にする	file = sys.stdout
折れ線グラフの色をダークブルーにする	plt.plot(データ列x, データ列y, color='darkblue')
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームの指定したカラムを百の位で四捨五入して、整数にする	df['列A'].round(-2).astype(int)
n乗が書きたい	X ** n
文字列は文字列より辞書順で前か調べる	文字列 < 文字列2
半透明の破線としてイテラブルの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
本日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
ベクトルの値	aArray[行番号, 列番号]
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
データフレームの一部のカラムを整数に四捨五入する	df[['列A', '列B']].round()
円グラフでデータ列のパーセントを可視化する	plt.pie(データ列, startangle=90)
配列から重複なくn個ランダムに選んでリストにする	random.sample(配列, k=n)
整数の二進表記	bin(整数)
データフレームをValueMapでまとめて置換する	df.replace(ValueMap)
アルファベットが文字列中に存在するか調べる	any(c.isalpha() for c in 文字列)
条件を満たしたら、ループを終了したい	if 条件式:<nl><tab>break
行列の要素ごとに加算する	aArray + aArray2
表データの欠損値がある箇所を色付けする	df.style.highlight_null()
リストをy軸、配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
カウンタをマッピングから生成する	collections.Counter(aDict)
線グラフをライトシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcyan')
文字が別の文字列にないかどうかテストする	文字 not in 文字列
オブジェクトがトレースバック	inspect.istraceback(オブジェクト)
ふたつの整数の積を算出する	整数 * 整数2
タプルをnから番号付けする	enumerate(タプル, start=n)
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
散布図をペルー色として描画する	plt.scatter(データ列x, データ列y, color='peru')
折れ線グラフの色をプラムにセットする	plt.plot(データ列x, データ列y, color='plum')
整数の16進文字列	hex(整数)[2:]
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
リストとリストについて散布図を描いて、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
指定したカラムを千の位で四捨五入して整数型にする	df['列A'].round(-3).astype(int)
整数掛ける整数を求める	整数 * 整数2
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
数列から長さの制限した両端キューを作る	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
散布図の左三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
実数の符号をコピーにする	math.copysign(x, x2)
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
柱状グラフを描画し、合計を1にする	plt.hist(データ列, density=True)
データフレームをある列の値によって集約する	df.groupby('列A')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
作画の背景色を暗くする	sns.set(style='darkgrid')
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
文字が片仮名か	# Tips<nl>('ァ' <= 文字 <= 'ン')
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
タイタニック号のデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
タプルの末尾のn要素を除く	タプル[:-n]
イテラブルから重複なく、n要素ランダムに選んでリスト化する	random.sample(イテラブル, k=n)
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
縦棒グラフをスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='skyblue')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
デクリメンタル演算子を書きたい	X -= 1
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームを指定した列によって大きい順に並べる	df.sort_values(by='列A', ascending=False)
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
乱数の行列	np.random.random((行数, 列数))
散布図をゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームの複数の列を消す	df.drop(['列A', '列B'], axis=1, inplace=True)
タプルを階層化する	collections.ChainMap(aDict)
アスキー文字が文字列中に含まれる	any(c.isascii() for c in 文字列)
データフレームの行列を入れ替える	df.T
option: 色をフローラルホワイトに変更する	color = 'floralwhite'
カンマで文字列を分割して、文字列リストにする	文字列.split(',')
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
文字列を最後のコロンで二分して、前半を求める	文字列.rpartition(':')[0]
代数計算モジュールを用いる	import sympy
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
オブジェクトが属性を持つか調べる	hasattr(obj, プロパティ名)
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: 表示を半透明にする	alpha = 0.5
等しい量になるようにビン数nとしてデータフレームの中のカラムを分割する	pd.qcut(df[col], n)
option: インデックスを連番に設定する	index_col = None
新しい単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
行列の要素ごとの積	np.multiply(aArray, aArray2)
プロットにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
表を転置する	df.T
ライトグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
配列を等量でビン数nでビニングする	pd.qcut(aArray, n)
option: 列名をリストで設定する	names = 列名リスト
x軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データシリーズの中にと文字列がいくつあるか調べる	ds.isin([value, value2]).sum()
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
非小文字が文字列中に含まれる	any(not c.islower() for c in 文字列)
折れ線グラフのマーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
表データのインデックスをリセットする	df.reset_index()
ファイルを一行ずつ読み込む	f.readline()
カテゴリ別で色付けして、データフレームをにバイオリン図で図示する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
option: 文字コードをBOM付きに変更する	encoding = 'utf_8_sig'
データシリーズの平均値を算出する	ds.mean()
データフレーム中の欠損値をドロップしてみる	df.dropna()
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
xについて数式の偏微分を行う	sympy.diff(数式, [|変数]x)
整数が正の整数かどうか調べる	整数 > 0
回帰モデルをクロスバリデーションする	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
データフレームの選択したカラムの欠損値を中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
グラフの描画で明るくパレットを使う	sns.set(pallete='bright')
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームの列を名前変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
両端キューの末尾にリストの要素を追加する	両端キュー.extend(リスト)
データフレームの統計量	df.describe()
散布図のバツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの一部のカラムの第二四分位数	df[['列A', '列B']].median()
線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: 箱ひげ図に平均を加える	showmeans = False
ニューラルネットでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームの一部の列のNaNを直後の値に指定する	df[['列A', '列B']].fillna(method='bfill')
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
散布図の色をバイオレットにする	plt.scatter(データ列x, データ列y, color='violet')
リネン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
データ列をインポートする	import pandas as pd
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
データフレームの指定したカラムの不偏標準偏差	df['列A'].std()
配列をフラットにする	aArray.flatten()
リストとリストの散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフの四角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ヒストグラムの色をパレットトルコイズにする	plt.hist(データ列, color='paleturquoise')
ヒストグラムを紺色を使って描画する	plt.hist(データ列, color='darkblue')
2つのオブジェクトが等しい	obj == obj2
ファイルパスをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
散布図をrgbの四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
ファイルパスを文字コードtextを用いてオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
タプルを並べ直す	sorted(タプル)
右三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
文字列を小文字にする	文字列.casefold()
option: マーカーをポイントに変える	marker = '.'
1からnまでの整数列	list(range(1, n+1))
ヒストグラムをモカシン色を使って描画する	plt.hist(データ列, color='moccasin')
ランダムに重複ありでデータフレームから100行をサンプリングする	df.sample(100, replace=True)
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
整数2がnより大きく、かつn3未満	整数 < 整数2 and 整数2 < n3
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
リストと配列について散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
変数xが0に近づくとき数式の極限値を求める	sympy.limit(数式, [|変数]x, 0)
実数の正接の逆数を算出する	math.atan(x)
option: 分割記号を使わない	sep = ''
データフレームを散布図で描画してカテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
線グラフの色をアイボリーにセットする	plt.plot(データ列x, データ列y, color='ivory')
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
棒グラフをダークバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='darkviolet')
追加できるように既存のファイルパスをBOM付きでオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
指定した列のカテゴリで集計し合計を算出する	df.groupby('列A').sum()
文字列が文字列より辞書順で後か判定する	文字列 > 文字列2
浮動小数点数が整数か調べる	x.is_integer()
タプルが少なくともひとつ真	any(タプル)
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームを列名を指定してジョインする	'<nl>pd.merge(df, df2, on='列A')
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: グラフの色を黄色に指定する	color = 'yellow'
部分文字列を範囲を指定して後方から探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
線グラフを赤い実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
rgbのポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ロバストな線形モデルを作る	model = sklearn.linear_model.HuberRegressor()
散布図のマーカーを▼にする	plt.scatter(データ列x, データ列y, marker='v')
特異値分解で多次元データを整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
パスの区切り記号を見る	os.sep
二つの浮動小数点数が十分に近いか	math.isclose(x, x2)
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
リストを等量でビン数nを使って分割する	pd.qcut(aList, n)
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
新しい回帰木モデルを作成する	model = sklearn.tree.DecisionTreeRegressor()
データフレームを丸める	df.round()
カウンタの文字列をひとつ増やす	aCounter[element] += 1
データフレームの一部の列が正規分布からどの程度、歪んでいるか調べる	df[['列A', '列B']].kurt()
option: マーカーを右三角に変更する	marker = '>'
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: パパイヤウィップに色を設定する	color = 'papayawhip'
非大文字が文字列中に存在するかどうか	any(not c.isupper() for c in 文字列)
データフレームの数値を一度に小数点以下n桁で四捨五入する	df.round(n)
ミディアムオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
option: アンティークホワイトを使用する	color = 'antiquewhite'
yについて数式の微分を求める	sympy.diff(数式, y)
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフの色を茶色に指定する	plt.plot(データ列x, データ列y, color='brown')
文字列中にひとつでも数字が含まれる	any(c.isdigit() for c in 文字列)
散布図をラベンダー色を使って描画する	plt.scatter(データ列x, データ列y, color='lavender')
配列とリストについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
を半分にする	変数 //= 2
データフレームのあるカラムのNaNを最頻値に指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列x, データ列y, color='midnightblue')
オブジェクトはトレースバックか確認する	inspect.istraceback(オブジェクト)
option: マゼンタを使う	color = 'magenta'
文字列の開始位置から先に部分文字列が含まれないか調べる	文字列.find(部分文字列, 開始位置) == -1
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
ディープスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの最初5行	df.head(5)
データフレームの選択したカラムの尖度	df[['列A', '列B']].skew()
プラム色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
option: ゴールドを用いる	color = 'gold'
改行なしにxとyをプリントする	print(x, y, end='')
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
数列と配列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
減算したい	X - Y
リストの全値を取り除く	リスト.clear()
縦棒プロットを描画して左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームから重複を破壊的にドロップする	df.drop_duplicates(inplace=True)
データフレームの先頭5行を見る	df.head(5)
データフレームを関数によってまとめたグループ	df.groupby(関数)
option: ホワイト色を使う	color = 'white'
線グラフの色を黄緑にする	plt.plot(データ列x, データ列y, color='chartreuse')
文字列が英数字	文字列.isalnum()
タプルの値を並べ変える	sorted(タプル)
セットが空集合	len(セット) == 0
option: ライトゴールドロディイエローを使用する	color = 'lightgoldenrodyellow'
キューの要素をインプレースに逆に並べ直す	両端キュー.reverse()
データフレームの最初10行を見る	df.head(10)
option: ブルーバイオレットにグラフの色を指定する	color = 'blueviolet'
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
オブジェクトがあるクラスかどうか調べる	isinstance(obj, クラス)
データシリーズのNaNをxで埋める	ds.fillna(x)
プログラムのファイルの名前を確認する	sys.argv[0]
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
ヒストグラムをグリーンイエロー色として描画する	plt.hist(データ列, color='greenyellow')
棒グラフをオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='orange')
データフレームにおいてどの値が頻出か調べる	df.mode()
ある列の欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームを使用する	import pandas as pd
タプルの最初	タプル[0]
空列	[]
ロバストな線形モデルを用意する	model = sklearn.linear_model.HuberRegressor()
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
option: ライムにフォントの色を変更する	color = 'lime'
散布図を黒い下三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='v', c='k')
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
バイト列からJSONをロードする	json.loads(バイト列.decode('unicode-escape'))
シーケンスでカウンタを更新する	aCounter.update(iterable)
予測値とデータの離れ具合をグラフ化する	sns.residplot(x='列名', y='列名', data=df)
入力から二つの文字列を読む	A, B = map(str, input().split())
リストの値のみプリントする	print(*リスト)
ヒストグラムを茶色色を用いて描画する	plt.hist(データ列, color='brown')
タイムスタンプデータの時間数を使う	aDatetime.hour
文字列を正規表現で分ける	re.split(pattern, s)
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストを文字列として、カンマで一つにする	','.join(map(str, リスト))
複数の数値を順にプリントする	print(数値, 数値, 数値)
リストの移り変わりを青い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: ミディアムオーキッドに色を変更する	color = 'mediumorchid'
ファイルパスをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
散布図に赤いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='r')
ダークオレンジにヒストグラムの色を指定する	plt.hist(データ列, color='darkorange')
辞書のキーの一覧	list(辞書)
表データのあるカラムの日	df['列A'].dt.day
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
ある列の値がxより小さい行を取り出す	df[df['列A'] < x]
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
イテラブルのコンビネーション	itertools.combinations(iterable, n)
データフレームとして複数のシートを指定してエクセルファイルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
散布図を星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*')
文字列を小文字にする	文字列.lower()
データフレームの欠損値をxにセットする	df.fillna(x)
xとyを改行で区切って表示する	print(x, y, sep='\n')
指定されたカラムをキーにしてデータフレームをソートし、、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
識別子はメソッドかどうかテストする	inspect.ismethod(識別子)
文字列でフォーマットしてタイムスタンプデータを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
エクセルファイルから複数のシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
option: 暗い赤色を使用する	color = 'darkred'
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
イテラブルの全順列	itertools.permutations(iterable)
データフレームの指定したカラムのNaNを直前の値で埋める	df['列A'].fillna(method='ffill')
８進数字を全部求める	string.octdigits
エクセルからデータフレームを読み込む	pd.read_excel('file.xlsx')
option: オリーブにグラフの色を設定する	color = 'olive'
グラフを描画する準備をする	import matplotlib.pyplot as plt
分類モデルの残差を計算する	目的変数 - model.predict(説明変数)
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
折れ線グラフの色をロイヤルブルーにセットする	plt.plot(データ列x, データ列y, color='royalblue')
文字列中に指定した文字がいくつあるか調べる	文字列.count(文字)
データ列の推移を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ビン数nでデータフレームの中の列を分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
青い破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
n個にデータフレームの中の列をビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
配列の次元数	aArray.ndim
折れ線グラフの上三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ジェネレータベースのコルーチンと通常のジェネレータを区別する	inspect.isawaitable(オブジェクト)
文字列の左端から空白を取り除く	文字列.lstrip('\t')
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
データシリーズの中にいくつ文字列があるかカウントする	ds.isin([value]).sum()
分類結果の真陽性を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
両端キューの先頭を使う	両端キュー[0]
option: 黄色色を用いる	color = 'yellow'
データ列の変遷を色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
グラフの縦横を変更する	plt.figure(figsize=(横幅, 高さ))
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
ある列ごとの標準偏差を求める	df.groupby('列A').std()
タブ文字を使う	'\t'
指定したカラムを1000の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
表データの末尾100行を抽出する	df.tail(100)
列を10の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
データフレームの指定したカラムの平均などをまとめて確認する	df['列A'].describe()
バイナリモードを使ってファイルパスをオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
整数がnの倍数でないかどうかテストする	整数 % n != 0
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
ある列の値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
プロットで使うx座標のラベルを変更する	plt.xlabel('x軸ラベル')
イテラブルを集合に変換する	set(イテラブル)
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
文字列が文字列より辞書順で前か調べる	文字列 < 文字列2
数列から重複なく、ランダムにn個選んでリストにする	random.sample(数列, k=n)
ボックスチャートを横に並べて描く	plt.boxplot([データ列, データ列])
ライムグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
折れ線グラフの▽印を赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
全十六進数字	string.hexdigits
淡いピンク色にヒストグラムの色を変更する	plt.hist(データ列, color='lightpink')
ミディアムバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
オーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
データ列の変遷を半透明の実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
キューの要素をインプレースに反転する	両端キュー.reverse()
xを下線付きでプリントする	print(f'\033[4m{x}\033[0m')
両端キューから最初の整数を取り除く	両端キュー.remove(整数)
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
決まった回数のループを書きたい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
特異値分解として文字列次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データ列を２つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
数列を変更不能なセットにする	frozenset(数列)
データフレームを表示するときカラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
重複ありでランダムにn行をデータフレームからサンプリングする	df.sample(n, replace=True)
標準エラー	sys.stderr
Pythonパスの一覧	sys.path
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
小数点数の双曲線余弦の逆数を計算する	math.acosh(x)
データフレームのあるカラムにおいてどの値が頻出か確認する	df['列A'].mode()
データフレームを表示するとき、表示可能な最大行数をnにする	pd.set_option('display.max_rows', n)
整数がセットのメンバーに含まれない	数 not in セット
リスト間の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
データフレームの選択したカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
レベッカパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ダークサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームの指定したカラムのNaNをxに設定する	df['列A'].fillna(x)
最後のコロンで文字列を二分して、前半を使う	文字列.rpartition(':')[0]
スラッシュで区切ってxとyを出力する	print(x, y, sep='/')
yが無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, y, oo)
ゴーストホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
文字列の左端からタブを除去する	文字列.lstrip('\t')
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: グレー色を用いる	color = 'grey'
データフレームを各列毎にグループ化して文字列というグループの個数を計算する	df.groupby(column).size()[s]
複数の列でデータフレームを破壊的に大きい順にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
浮動小数点数の仮数	math.frexp(x)[0]
モカシン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
ある列のカテゴリの平均値	df.groupby('列A').mean()
辞書をJSON文字列にする	json.dumps(辞書, ensure_ascii=False)
文字列から改行を全て取り除く	文字列.replace('\n', '')
整数2がn以上、かつn3以下	整数 <= 整数2 and 整数2 <= n3
列の一意な要素を見る	ds.unique()
文字列全体が正規表現にマッチするか調べる	re.fullmatch(pattern, s)
データ列と数列について散布図を描き、、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
青い一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
整数がセットのどれかか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
タプルをナンバリングする	enumerate(タプル)
数値でデータフレームのカラムの欠損値を埋める	df['列A'].fillna(x)
データシリーズのNaNを後の行の値で補う	ds.fillna(method='bfill')
文字列の中の正規表現によるマッチを使う	re.findall(pattern, s)
配列の型を求める	aArray.dtype()
2つのデータフレームを横方向にマージする	pd.merge(df, df2)
実数の２乗	x ** 2
文字列の無限の列	itertools.repeat(文字列)
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
整数2がn以上かつn3以下か調べる	整数 <= 整数2 and 整数2 <= n3
カテゴリ別で色付けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフの色をピンクに変更する	plt.plot(データ列x, データ列y, color='pink')
ビスク色でヒストグラムを描画する	plt.hist(データ列, color='bisque')
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
数列とリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
数の三乗を求める	x ** 3
データフレームの中にいくつ欠損値が含まれるか調べる	df.isna().sum()
文字列の最初から部分文字列の位置を探す	文字列.find(部分文字列)
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
丸マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列中に部分文字列がいくつか含まれるかカウントする	文字列.count(部分文字列)
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
文字列を区切り記号で二分し、、残りを使う	文字列.partition(セパレータ)[-1]
option: フローラルホワイト色を用いる	color = 'floralwhite'
サインの逆数	math.asin(x)
文字列を文字リストに変換する	list(文字列)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
欠損値も加えてデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], dummy_na=True)
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
Pandasのバージョンを出力する	print(pd.__version__)
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
オブジェクトがn回繰り返すイテラブル	itertools.repeat(element, n)
入力から二つの文字を読み込む	A, B = map(str, input().split())
option: 改行コードをUNIXに変更する	newline = '\n'
ヒストグラムを耐火レンガ色を使って描画する	plt.hist(データ列, color='firebrick')
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
小数点数の天井を求める	math.ceil(x)
日付データが何日か知る	aDate.day
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
カウンタの最も頻出な項目を求める	aCounter.most_common()[0]
リストとリストの散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
浮動小数点数の小数点以下を丸める	round(x)
option: 紺碧を使用する	color = 'azure'
辞書の浅いコピーを作成する	辞書.copy()
キューの末尾に要素を付け加える	両端キュー.append(要素)
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
数列の要素を	''.join(map(str, 数列))
サンディーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
option: ロージーブラウンを使う	color = 'rosybrown'
文字列の中のASCII限定としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
文字列が指定した文字列に含まれるかどうか確認する	文字列 in 別の文字列
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
実数の仮数部を求める	math.frexp(x)[0]
option: 色をミスティローズに設定する	color = 'mistyrose'
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in 文字列)
二乗を求めたい	X ** 2
関数の値でデータフレームをグループ化し、要約統計量を求める	df.groupby(関数).describe()
ファイルが存在するかどうか確認する	os.path.exists(filepath)
回帰分析をMLPで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
識別子がジェネレータ関数かどうか調べる	inspect.isgeneratorfunction(識別子)
option: グラフの色をレモンシフォンにする	color = 'lemonchiffon'
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームの選択したカラムの基本統計量	df[['列A', '列B']].describe()
データシリーズの空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
列をいつまでも繰り返す	itertools.cycle(iterable)
エクセルファイルからデータフレームを読む	pd.read_excel('file.xlsx')
ファイルがあるか	os.path.exists(filepath)
option: 色をダークオレンジに変更する	color = 'darkorange'
Pythonパスにスクリプトのサブディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), ディレクトリ名))
配列は何のデータ型か調べる	aArray.dtype()
オレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
多次元データを主成分分析で要素次元に削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
指定したカラムの中にある日付データとの合計を数える	df['列A'].isin([value, value2]).sum()
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
データフレームをソートして行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
データシリーズの標準偏差	ds.std()
データシリーズを千の位で丸める	ds.round(-3)
データフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
スチールブルーにヒストグラムの色をセットする	plt.hist(データ列, color='steelblue')
predicateFuncが真になるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
リストを文字列としてタブで結合する	'\t'.join(map(str, リスト))
option: サンディーブラウンにグラフの色を設定する	color = 'sandybrown'
クラス分類の予測精度を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
２つのデータフレームをジョインする	pd.merge(df, df2)
縦に2つのデータフレームを連結する	pd.concat([df, df2], axis=0)
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
データフレームを二つの列でソートする	df.sort_values(by=['列A', '列B'])
option: ミディアムパープルにフォントの色を変更する	color = 'mediumpurple'
option: 標準出力を出力先にする	file = sys.stdout
配列のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
データフレームの選択した列の相関行列をスピアマンで求める	df[['列A', '列B']].corr(method='spearman')
文字列の先頭でパターンに複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
文字が指定した文字列にないか	文字 not in 文字列
option: グラフの色をブラックにする	color = 'black'
横棒グラフをラベンダー色として描画する	plt.barh(データ列x, データ列y, color='lavender')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
データフレームの指定したカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
オブジェクトはタプルクラスか調べる	tuple = int<nl>isinstance(obj, tuple)
データフレームのカラムが正規分布かどうか仮説検定する	scipy.stats.shapiro(df['列A'])
変数名は非同期ジェネレータ関数か	inspect.isasyncgenfunction(識別子)
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
柱状グラフを描画する	plt.hist(データ列)
実数を実数で割った余り	x % y
ナバホホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='navajowhite')
データシリーズの75パーセンタイル	ds.quantile(0.75)
主成分分析を使って要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
折れ線グラフのマーカーを丸印にする	plt.plot(データ列x, データ列y, marker='o')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
リストのn番目のの値	リスト[n]
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
指定されたカラムのカテゴリで集計し、個数を求める	df.groupby('列A').count()
改行で文字列を分割し、文字列リストにする	文字列.splitlines()
貝殻色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
日付時刻データを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
セットから任意の要素を取り出す	セット.pop()
option: サドルブラウン色を使用する	color = 'saddlebrown'
変数の値を更新したい	X = 0
スクリプトファイルと同じフォルダのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
option: ライトスレイグレーにグラフの色をセットする	color = 'lightslategrey'
文字列をゼロ埋めする	文字列.zfill(文字列幅)
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
変数について数式のインテグラルを行う	sympy.integrate(数式, 変数)
xが0に近づくときの数式の極限値を算出する	sympy.limit(数式, [|変数]x, 0)
縦棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームをある列のカテゴリでグループ化して、それぞれのグループの件数を知る	df.groupby('列A').size()
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
オブジェクトがジェネレータか調べる	inspect.isgenerator(オブジェクト)
データフレームをカンマ区切り形式にBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
２つの浮動小数点数は十分に近いかどうか調べる	math.isclose(x, x2)
実数に実数を掛ける	x * y
二進数文字列を整数にする	int(文字列, 2)
折れ線グラフのアルファを設定する	plt.plot(データ列x, データ列y, alpha=0.5)
最大値・最小値として整数乱数を生成する	random.randint(最小値, 最大値)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
横棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームをエクセルファイルファイルで書き出す	df.to_excel('file.xlsx')
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
データフレームのカラムの歪度を求める	scipy.stats.skew(df['列A'], bias=False)
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ネイビー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: フォントの色をシエナに変更する	color = 'sienna'
ロージーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='rosybrown')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
xがマイナス無限大に近づく際、極限値を求める	sympy.limit(数式, [|変数]x, -oo)
散布図を大バツマーカーを用いる描画する	plt.scatter(データ列x, データ列y, marker='X')
空白で文字列を末尾から区切る	文字列.rsplit()
コロンで文字列を二分し、、後ろの方を求める	文字列.partition(':')[-1]
文字列がリストのいずれでもないか調べる	文字列 not in リスト
主成分分析で要素次元に削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
リストをタプルにする	tuple(リスト)
整数がセットに含まれるか調べる	数 in セット
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
多次元データをt-SNEで整数次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
タイムスタンプデータにn秒を足す	aDatetime + datetime.timedelta(seconds=n)
データ列の各データが何回出現するか確認する	ds.value_counts()
データシリーズが何分か知る	ds.dt.minute
線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
アヤメのデータセットをデータフレームとしてロードする	df = sns.load_dataset('iris')
配列と配列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
上限指定をした配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
option: 色をミディアムバイオレットレッドにする	color = 'mediumvioletred'
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
option: ロージーブラウン色を使用する	color = 'rosybrown'
数式をxの方程式として解く	sympy.solve(数式, [|変数]x)
折れ線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
繰り返しを最初から実行し直したい	if 条件式:<nl><tab>continue
文字列のn番目をASCIIコードに変換する	ord(文字列[n])
文字列中の部分文字列の出現を範囲を指定してカウントする	文字列.count(部分文字列, 開始位置, 終了位置)
option: ダークカーキ色を使う	color = 'darkkhaki'
キーが辞書上で定義されているか調べる	キー in 辞書
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
文字列の後ろを求める	文字列[-1]
データフレームは何行重複するか見る	df.duplicated().sum()
データシリーズの中に含まれる文字列の合計を数える	ds.isin([value]).sum()
指定した列だけ、データフレームの重複を見る	df.duplicated(subset='列A')
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
改行しないで文字列を出力する	print(文字列, end='')
ファイルを読み込みできるように開く]	'r' = 'a'<nl>open(filepath, mode='r')
データフレームをあるカラムの値ごとにグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
文字列の左側から改行を除去する	文字列.lstrip('\n')
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
文字列を最後の区切り記号で分けたときの後半の文字列を見る	文字列.rpartition(セパレータ)[-1]
折れ線グラフを半透明の点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データシリーズの欠損値を直後の値に設定する	ds.fillna(method='bfill')
ファイルパスを書き込み用に文字列の示す文字コードで開く]	open(filepath, mode='w', encoding=s)
説明変数と目的変数を用いてモデルを学習する	model.fit(説明変数, 目的変数)
ファイルをオープンして]、読み込みストリームを求める	'r' = 'a'<nl>open(filepath, mode='r')
データフレームの先頭n行	df.head(n)
サドルブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='saddlebrown')
横棒グラフをシスル色を使って描画する	plt.barh(データ列x, データ列y, color='thistle')
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データを平均と分散を用いて標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
xの小数点以下'1'桁までを出力する	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
リスト中の要素が最初に見つかるインデックスを使う	リスト.index(要素)
データフレームの名前リストで指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
option: グラフの色をグリーンに設定する	color = 'green'
データフレームを表示するとき表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
整数の3乗	整数 ** 3
option: ダークオーキッドを用いる	color = 'darkorchid'
二つのリストの積集合	list(set(リスト).intersection(set(リスト2)))
データフレームの選択したカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
赤い左三角マーカーをリストと数列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
xを下線付きでプリントできる文字列にする	f'\033[4m{x}\033[0m'
option: ティール色を使う	color = 'teal'
折れ線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: マーカーの大きさを変える	markersize = 2.0
ファイルを書き込みできるようにSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
文字列中にひとつもアルファベットが含まれない	any(not c.isalpha() for c in 文字列)
リストの要素を文字列として、指定した文字で連結する	文字.join(map(str, リスト))
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
二つのオブジェクトが同一参照か調べる	obj is obj2
option: グラフを点線に指定する	linestyle = 'dotted'
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
大文字と小文字を交換する	文字列.swapcase()
回帰分析をスタッキングでする	sklearn.ensemble.StackingRegressor()
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
データフレームの選択した列の文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
色付きの実線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
リストをJSONフォーマットでファイル出力に保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
変数を表示する	print(変数名)
データシリーズを100の位で丸める	ds.round(-2)
プラム色としてヒストグラムを描画する	plt.hist(データ列, color='plum')
グラフにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
グラフに格子を入れる	plt.grid(True)
データフレームのn行目以降抽出する	df[n:]
辞書の値に要素が含まれていないか調べる	element not in 辞書.values()
色名をからコードにする	matplotlib.colors.cnames[色名]
option: グラフの色をアイボリーに設定する	color = 'ivory'
カテゴリで色分けしてデータフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムをカデットブルー色を使って描画する	plt.hist(データ列, color='cadetblue')
ファイルを追加モードを使って開いて]、fとする	f = open(filepath, mode='a')
アルファベットを全て見る	string.ascii_letters
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
データフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
option: フォントの色をライトイエローに設定する	color = 'lightyellow'
散布図をディープスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
リストとリストの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ファイルを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
option: 色をシスルに設定する	color = 'thistle'
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
部分文字列が文字列の指定した範囲位置の間に存在する	文字列.find(部分文字列, 開始位置, 終了位置) != -1
散布図を左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<')
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
整数のn乗	整数 ** n
標準入力から1行受け取る	input()
折れ線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
スクリプト名	sys.argv[0]
ゼロ埋めされた８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
リストを文字列として、空白によって結合する	' '.join(map(str, リスト))
８進数字を使う	string.octdigits
データフレームの選択したカラムにおいてどの値が頻出か確認する	df[['列A', '列B']].mode()
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
ある列を十の位で四捨五入する	df['列A'].round(-1)
ある列の標準偏差を求める	df.groupby('列A').std()
散布図の上三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
新しいサポートベクトル分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
表データのあるカラムの曜日は何日目か見る	df['列A'].dt.dayofweek
10を底とする実数の対数	math.log10(x)
文字列をインデントを指定してJSON文字列に変換する	json.dumps(文字列, ensure_ascii=False, indent=n)
スピアマン順位相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
折れ線グラフの色を濃い青に変更する	plt.plot(データ列x, データ列y, color='darkblue')
棒グラフをビスク色を用いて描画する	plt.bar(データ列x, データ列y, color='bisque')
y座標の目盛りの表示値を変更する	plt.yticks(目盛りの値リスト)
データフレームの選択したカラムの75パーセンタイル	df[['列A', '列B']].quantile(0.75)
データフレーム中の未入力値をドロップする	df.dropna(inplace=True)
文字列中の部分文字列の登場回数を数える	文字列.count(部分文字列)
データフレームをある列の値ごとにグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
オブジェクトはリストかタプルか確認する	isinstance(obj, (list)
データフレームの中に日付データがあるかどうか調べる	df.isin([value])
線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
指定したカラムを千の位で丸める	df['列A'].round(-3)
数式を変数についてn階微分する	sympy.diff(数式, 変数, n)
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr()
データフレームの選択したカラムの中に文字列と文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
データ列の変遷を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
スチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='steelblue')
横棒プロットの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
データフレームのあるカラムは何分か見る	df['列A'].dt.minute
option: デピンクにグラフの色を変更する	color = 'deeppink'
二つのデータフレームを列名を指定して結合する	'<nl>pd.merge(df, df2, on='列A')
等しい量になるようにデータ列をn個に分割する	pd.qcut(ds, n)
データシリーズは正規分布からどの程度、尖っているか見る	ds.skew()
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
セットのコピーを準備する	セット.copy()
データ列の推移を折れ線グラフを用いて可視化する	plt.plot(range(len(データ列)), データ列)
データフレームの指定したカラムのモード	df['列A'].mode()
度数分布図のビン数を設定する	plt.hist(データ列, bins=区関数)
散布図を貝殻色を使って描画する	plt.scatter(データ列x, データ列y, color='seashell')
ヒストグラムをブランチドアーモンド色を用いて描画する	plt.hist(データ列, color='blanchedalmond')
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
option: 読み込み用に設定する	mode = 'r'
option: スプリンググリーンを使う	color = 'springgreen'
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
配列間のピアソンの相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
文字列を空白で分割して数列に変換する	list(map(int, 文字列.split()))
データフレームから指定した2つの列だけ取り出す	df[['列A', '列B']]
スタックからポップする	両端キュー.pop()
データフレームをNaNを含めてある列でグループ化する	df.groupby('列A', dropna=False)
ある列の値毎の合計	df.groupby('列A').sum()
option: フォントの色を紺碧にセットする	color = 'azure'
データ列とリストの散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
カウンタ間で∪演算する	aCounter | aCounter2
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
四角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
option: 色をバリーウッドにセットする	color = 'burlywood'
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
変数名が抽象クラスか調べる	inspect.isabstract(識別子)
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
イテラブルを更新不能なセットに変換する	frozenset(イテラブル)
文字列はタイトルケースかどうか	文字列.istitle()
表データから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
ベクトルの最小を求める	np.min(aArray)
カウンタをイテラブルから作る	collections.Counter(iterable)
文字列が指定した文字列で終了するかどうか	文字列.endswith(部分文字列)
欠損値がある行をドロップする	df.dropna(inplace=True)
リストと配列について散布図を描いてその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
カラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
データフレームをソートして、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
項目名がマップ上でまだ定義されていないかどうか確認する	キー not in 辞書
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
ヒストグラムをペールグリーン色を用いて描画する	plt.hist(データ列, color='palegreen')
ゴールデンロッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
オブジェクトのプロパティの値を値に変更する	setattr(obj, プロパティ名, 値)
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
ファイルを追加用にオープンして]、fとする	f = open(filepath, mode='a')
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
rgbの丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
整数が1、もしくは2、もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
t-SNEを使って多次元データを整数次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データシリーズの欠損値を前の値で補う	ds.fillna(method='ffill')
一点鎖線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
既存のファイルを追加できるように文字コードtextを使ってオープンする]	open(filepath, mode='a', encoding=text)
カンマを用いて文字列を二分する	文字列.partition(',')
変数xが無限大に近づく場合の数式の極限値を計算する	sympy.limit(数式, [|変数]x, oo)
タプルの各要素を空白区切りで出力する	print(*タプル)
ふたつの集合の交わり	セット.intersection(セット2)
データフレームの指定したカラムを1000の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
ゼロ埋めされた三二ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
option: どの列もインデックスにしない	index_col = None
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
アイボリー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
グレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
辞書の全をクリアする	辞書.clear()
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
空のガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
下線付きでxを表示する	print(f'\033[4m{x}\033[0m')
データシリーズの欠損値を最大値で補う	ds.fillna(ds.max())
option: フォントの色をライトコーラルに指定する	color = 'lightcoral'
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
散布図を小麦色色を用いて描画する	plt.scatter(データ列x, データ列y, color='wheat')
文字列に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
横棒グラフを描画して、バーの縦幅をセットする	plt.barh(ラベル列, データ列, width=0.5)
整数同士の論理積を	整数 & 整数2
文字列に日本語が含まれるかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームの選択したカラムの統計量	df[['列A', '列B']].describe()
option: ダークスラテグレーにグラフの色をセットする	color = 'darkslategray'
三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
カウンタをゼロにする	aCounter.clear()
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
棒グラフをスカイブルー色を使って描画する	plt.bar(データ列x, データ列y, color='skyblue')
文字列は全て数値かどうか	文字列.isnumeric()
折れ線グラフをコーンフラワーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームからn行ランダムサンプリングする	df.sample(n)
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
文字列の右側から指定した文字を取り除く	文字列.rstrip(文字)
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列のサフィックスはか確認する	文字列.endswith(部分文字列)
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
散布図をコーンズシルク色を使って描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
折れ線グラフの色をライトシアンにセットする	plt.plot(データ列x, データ列y, color='lightcyan')
数列を両端キューにする	collections.deque(数列)
option: ホワイトスモークにグラフの色をセットする	color = 'whitesmoke'
option: グラフの色をライトグリーンに指定する	color = 'lightgreen'
文字列は全て印字できるかどうかテストする	文字列.isprintable()
ストリームを一行ずつ読み込む	f.readline()
ファイルを解放する	f.close()
半透明の点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
データフレームの選択したカラムの最頻値	df[['列A', '列B']].mode()
数式のxを指定した数式で置き換える	数式.subs([|変数]x, 数式2)
データフレームの二つのカラムを並べて箱ひげ図として可視化する	plt.boxplot([df['カラム'], df['カラム']])
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
文字列を最後のコロンで二分する	文字列.rpartition(':')
現在が木曜日	datetime.datetime.today().weekday() == 3
データフレームの列のユニークな値の個数	df[col].nunique()
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
リストの要素が最初に見つかるインデックスを使う	リスト.index(要素)
データフレームを表示するとき折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
文字列の末尾から文字を取り除く	文字列.rstrip(文字)
散布図に黒いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
作画のカラーパレットを指定する	sns.set(pallete=パレット名)
セットが空でないか調べる	len(セット) != 0
パターンに文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
option: ライトグレー色を用いる	color = 'lightgray'
データフレームの選択した列の中にいくつ欠損値があるか調べる	df[['列A', '列B']].isna().sum()
オブジェクトが文字列クラスかどうか調べる	str = int<nl>isinstance(obj, str)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
マルーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
散布図をダイアモンド印で描画する	plt.scatter(データ列x, データ列y, marker='D')
文字列リストを連結してひとつの文字列にする	''.join(文字列)
データ列のパーセンタイルを図示する	plt.boxplot(データ列)
双方向キューをリストから作る	collections.deque(リスト)
論文にグラフの用途を設定する	sns.set(context='paper')
データフレームの列の種類を見る	df.info()
ある列の値がx以上、y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
タプルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
アルファベットの小文字を全部使う	string.ascii_lowercase
丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
データフレームの選択した列の最頻値	df[['列A', '列B']].mode()
データフレームの一部のカラムの中にいくつ欠損値があるかカウントする	df[['列A', '列B']].isna().sum()
option: 出力先をファイルに設定する	file = sys.open('file.txt', 'w')
データフレームの選択したカラムの欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
データフレームをある列を用いて並べる	df.sort_values(by='列A')
データシリーズの標本標準偏差を算出する	ds.std(ddof=1)
ヒストグラムを横に並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
再帰の上限を増やす	sys.setrecursionlimit(1000000)
option: 事前に説明変数を正規化する	normalize = True
データフレームのカラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
x軸だけ目盛り線	plt.grid(axis='x')
スチールブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームをある列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
散布図の丸印を黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
yが0に近づくとき、数式の極限値を求める	sympy.limit(数式, y, 0)
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
変数について数式の積分を行う	sympy.integrate(数式, 変数)
二つの集合の積集合	セット.intersection(セット2)
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
縦棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
ミスティローズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
文字列リストを結合する	''.join(文字列)
option: ダークカーキを用いる	color = 'darkkhaki'
ヒストグラムの色をアクアマリンにセットする	plt.hist(データ列, color='aquamarine')
リストからベクトルを作る	np.array(aList)
Pandasのバージョンをプリントする	print(pd.__version__)
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
データフレームを2つのカラムを用いて降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームの列を折れ線グラフで図示する	plt.plot(df[column], df[column])
n個の集まりからk個選ぶ方法を求める	math.comb(n, k)
数列とリストについて散布図を描画してマーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
横軸の目盛りを対数に変更する	plt.xscale('log')
黒い△マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
縦棒グラフをティール色として描画する	plt.bar(データ列x, データ列y, color='teal')
文字列をインデント幅を指定してJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
オブジェクトに属性があるか調べる	hasattr(obj, プロパティ名)
各グループごとに色分けしてデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
グラフの見栄えを良くする	import seaborn as sns
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
両端キューに整数をenqueueする	両端キュー.append(整数)
文字列∈セット	文字列 in セット
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフのクロスマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
フローラルホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
タイムスタンプデータが日付時刻データより後ろか	aDatetime > aDatetime2
year年day月のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
新しいロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
option: マーカーの色を深紅にする	markerfacecolor = 'crimson'
ヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
双方向キューに文字列をスタックする	両端キュー.append(文字列)
文字列の先頭の文字	文字列[0]
データフレームの中の列をn個に分割する	pd.cut(df[col], n)
散布図の▲印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
リストの末尾に別のリストを追加して拡張する	リスト.extend(リスト2)
実行時の標準出力がターミナルかどうか	sys.stdout.isatty()
自然数個からk個取り出したときの順列の総数を計算する	math.perm(n, k)
散布図に赤いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
双方向キューの大きさ	len(両端キュー)
文字列の末尾から空白を取り除く	文字列.rstrip('\t')
option: ミディアムシアグリーンにフォントの色を設定する	color = 'mediumseagreen'
に箱ひげ図としてデータフレームを見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
option: イエローグリーンを使う	color = 'yellowgreen'
アンティークホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
option: ハニーデューを使用する	color = 'honeydew'
散布図をダークターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
文字列の開始位置から終了位置まで部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
散布図の印の色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
実数は非数か確認する	math.isnan(x)
横棒グラフをライトスレイグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
オブジェクトは文字列クラスか調べる	str = int<nl>isinstance(obj, str)
改行なしに数値の出力を行う	print(数値, end='')
条件を満たす間、実行をループさせたい	while 条件式:<nl><tab>print('繰り返し')  # 直して
option: 色を小麦色にする	color = 'wheat'
配列の偏差値を算出する	50 + 10 * scipy.stats.zscore(配列)
多次元データを特異値分解を用いて要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
実数の二乗	x ** 2
配列の全要素の値を変更する	aArray[:, :] = 指定の値
データフレームの列名一覧で指定されたカラムをドロップする	df.drop(columns, axis=1, inplace=True)
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームのNaNをドロップしてみる	df.dropna()
折れ線グラフの上三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
折れ線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
ヒストグラムの色をペルーにセットする	plt.hist(データ列, color='peru')
Xの2乗が欲しい	X ** 2
指定した列を百の位で四捨五入する	df['列A'].round(-2)
データフレームを表示するとき、表示可能な行数を変更する	pd.set_option('display.max_rows', n)
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
ある列の文字列が正規表現にマッチするデータを選択する	df[df['列A'].str.match(正規表現)]
ライムにヒストグラムの色をセットする	plt.hist(データ列, color='lime')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
データフレームの指定したカラムの中に文字列があるか調べる	df['列A'].isin([value])
イテラブルとリストの散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
ダークゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
文字列中にひとつも英数字が含まれないかどうか調べる	any(not c.isalnum() for c in 文字列)
データフレームの一部のカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
小さい順にデータフレームを破壊的に二つの列によってソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
テンプレートをarg文字列を引数として文字列整形する	書式.format(*args)
三つの計算結果を順に表示する	print(式, 式, 式)
整数が一桁の整数かどうか確認する	0 <= 整数 <= 9
タプルの値を昇順に並べる	sorted(タプル, reverse=True)
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームの欠損値をxに設定する	df.fillna(x)
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列の無限なイテレータ	itertools.repeat(文字列)
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
nから始まる無限数列を得る	itertools.count(start=n)
八進数字を全部見る	string.octdigits
カウンタを多い順番に列挙する	aCounter.most_common()
xがマイナス無限大に近づくときの数式の極限値を計算する	sympy.limit(数式, [|変数]x, -oo)
イテラブルとリストの直積を求める	itertools.product(iterable, iterable2)
両端キューを作る	両端キュー = collections.deque()
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
棒グラフをコーンフラワーブルー色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
カンマで文字列を二分する	文字列.partition(',')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
データフレームの指定した列が正規分布からどの程度、歪んでいるか調べる	df['列A'].kurt()
文字列全体がパターンに複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
ヒストグラムを赤色を使って描画する	plt.hist(データ列, color='red')
辞書のキーを列挙する	辞書.keys()
文字列を最後の部分文字列で分けたときの残りの文字列	文字列.rpartition(部分文字列)[-1]
あるカラムを削除し、みる	df.drop('列A', axis=1)
縦棒グラフをダークシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
プロットを論文用に設定する	sns.set(context='paper')
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
セットが真部分集合	セット < セット2
データフレームを複数の列で並べる	df.sort_values(by=['列A', '列B'])
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
ネイビー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: シーグリーン色を使う	color = 'seagreen'
option: 色をパウダーブルーに設定する	color = 'powderblue'
散布図のポイントマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
K最近傍法としてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
リストの全要素をクリアにする	リスト.clear()
スラグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
シーケンスをカウンタに変換する	collections.Counter(iterable)
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
配列のn次モーメントを求める	scipy.stats.moment(配列, moment=n)
双方向キューの要素数を算出する	len(両端キュー)
半透明の実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
配列の偏差値を使う	50 + 10 * scipy.stats.zscore(配列)
パターンをコンパイルする	re.compile(pattern)
散布図を大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
ドジャーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='dodgerblue')
セットの全ての要素が別のセット2に含まれるかどうか調べる	セット.issubset(セット2)
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
を累乗に増やす	変数 **= 整数
範囲を指定して部分文字列を文字列の末尾から探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
option: 出力先を標準出力に変更する	file = sys.stdout
珊瑚色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
配列とリストの散布図を描画し、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの選択したカラムが正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
疑似乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
文字がカタカナか調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
列名を指定して二つのデータフレームを全ジョインする	pd.merge(df, df2, on='列A', how='outer')
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
yについて数式のインテグラルを行う	sympy.integrate(数式, y)
option: ダークバイオレットにグラフの色を指定する	color = 'darkviolet'
日付データをn秒前にする	aDate - datetime.timedelta(seconds=n)
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
option: 先頭の列をインデックスに設定する	index_col = 0
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
黒い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
ひとつでも非ASCII文字が文字列中に含まれるか調べる	any(not c.isascii() for c in 文字列)
ある列の文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
オリベドラブ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
y座標だけグリッド線	plt.grid(axis='y')
カラムを小数点以下n桁で四捨五入する	n = 2<nl>df['列A'].round(n)
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
縦棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームの値がNaNか	df.isna()
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
要素をn回続くイテラブルが欲しい	itertools.repeat(要素, n)
option: フォントの色をスラグレーに変更する	color = 'slategrey'
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
文字列を最後のコロンによって二分する	文字列.rpartition(':')
タプルを昇順に並べ変える	sorted(タプル, reverse=True)
未初期化の配列	np.empty(要素数, dtype=np.int)
黒い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
入力から二つの整数を読む	A, B = map(int, input().split())
xの小数点以下'2'桁までを出力する	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
二つの計算結果をプリントする	print(式, 式)
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
青紫色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
文字列を最初のコロンで二分割して残りを使う	文字列.partition(':')[-1]
マゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
ある列の文字列が部分文字列で終わるデータを抽出する	df[df['列A'].str.endswith(部分文字列)]
文字列をUTF8でバイト列に変換する	文字列.encode(encoding='utf-8', errors='strict')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
ふたつの集合のいずれか一方だけの集合を求める	セット.symmetric_difference(セット2)
散布図にクロスマーカーを使用する	plt.scatter(データ列x, データ列y, marker='x')
線形回帰モデルを訓練する	model.fit(説明変数, 目的変数)
黒い▽マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
データフレームの指定したカラムの標本分散を求める	df['列A'].var(ddof=0)
rgbの星マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図に赤い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データ列の変化を破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
ゼロ埋めされた整数型の配列を初期化する	np.zeros(要素数, dtype=np.int)
オブジェクトがコードかどうか調べる	inspect.iscode(オブジェクト)
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
散布図に青い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
あるカラムのカテゴリ毎の平均値	df.groupby('列A').mean()
折れ線グラフの下三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
新しい文字列で文字列中のパターンを置き換える	re.sub(pattern, newsub, s)
線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
タプルの最初を取り除く	タプル[1:]
ひとつでも空白が文字列中に含まれるか	any(c.isspace() for c in 文字列)
列のエポック秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
データフレームのある列の値がxに等しい行を取り出す	df[df['列A'] == x]
空のセット	set()
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
新しいガウス過程分類モデルを準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
データフレームの尖度を算出する	df.skew()
ヒストグラムをミディアムスレートブルー色を使って描画する	plt.hist(データ列, color='mediumslateblue')
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
空白	' '
カラーコードで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
空行を表示する	print()
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
散布図に青い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
リストとイテラブルについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgrey')
横軸の目盛りに文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データフレームのカラムの各値が何回出現するか見る	df[col].value_counts()
ダークゴールデンロッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをミッドナイトブルー色として描画する	plt.hist(データ列, color='midnightblue')
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
データフレームの一部のカラムの欠損値を最頻値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
リストと配列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
数式の簡略化を行う	sympy.sympify(数式)
ポイントマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
データフレームからランダムに一行を選択する	df.sample()
改行せず文字列の出力を行う	print(文字列, end='')
整数を左シフトする	整数 << n
option: グラフの色をマゼンタに指定する	color = 'magenta'
線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
option: スレートブルーにフォントの色を指定する	color = 'slateblue'
L1ノルムを用いてデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
商を計算したい	X // Y
option: 左三角印を用いる	marker = '<'
オブジェクトが非同期ジェネレータかどうか	inspect.isasyncgen(オブジェクト)
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
データフレームの不偏分散	df.var(ddof=1)
正規表現に文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
配列をビン数nでビンニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
リストの各要素を関数に適用した結果でソートする	sorted(リスト, key=func)
行列の分散	np.var(aArray)
散布図の星マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
エクセルからデータフレームとして複数のシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
セットにイテラブルを追加する	セット.update(リスト)
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
本日は何月か知る	datetime.datetime.today().month
変数の値を減らす	変数 -= 整数
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: 珊瑚色を用いる	color = 'coral'
横軸に軸名を設定する	plt.xlabel('x軸ラベル')
データフレームの下5行を抽出する	df.tail(5)
非数	math.nan
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
破線として線を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ロージーブラウン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
文字列を最後のコロンで分けたときの後半の文字列	文字列.rpartition(':')[-1]
JSON文字列を辞書に変換する	data = json.loads(文字列)
データフレームの平均を計算する	df.mean()
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
文字列を部分文字列によって二分する	文字列.partition(部分文字列)
リストからn個ランダムに選んでリスト化する	random.choices(リスト, k=n)
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
カウンタのユニオンを求める	aCounter | aCounter2
option: グラフの色をチョコレートに指定する	color = 'chocolate'
黒い下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
セットをイミュータブルに変換する	frozenset(セット)
折れ線グラフに下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームの相関行列をヒートマップで可視化する	sns.heatmap(df.corr())
マップを浅く複製する	dict(辞書)
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
分割数nで配列をビンニングする	pd.cut(aArray, n)
両端キューの要素を輪番で回す	両端キュー.rotate(1)
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
３二ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
折れ線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
配列のスカラー倍	aArray * n
マッピングの項目名の値	辞書[キー]
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
option: グラフの色をグレーに指定する	color = 'grey'
データフレームの全列の散らばりを可視化する	sns.pairplot(df)
xを論理値に変換する	bool(x)
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
ヒストグラムの色をベージュにセットする	plt.hist(データ列, color='beige')
リストと配列について散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
オブジェクトがスタックフレームか確認する	inspect.isframe(オブジェクト)
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
データフレームの列を各カテゴリに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
配列とリストの散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームとデータシリーズを横向きに連結する	pd.concat([df, ds], axis=1)
整数が一桁の数	0 <= 整数 <= 9
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
deqの右	両端キュー[-1]
シーグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
横棒グラフをプラム色を用いて描画する	plt.barh(データ列x, データ列y, color='plum')
二つの数値をプリントする	print(数値, 数値)
データフレームをあるカラムでグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
セットが空集合か調べる	len(セット) == 0
データ列を全てPandasの日付型に変換する	pd.to_datetime(ds)
辞書上でキーが未定義か調べる	キー not in 辞書
▽印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
option: 線の種類を破線に設定する	linestyle = 'dashed'
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
データフレームをある列によってまとめた表を使う	df.groupby('列A')
3つの計算結果を順に出力する	print(式, 式, 式)
option: n番目のカラムをインデックスに増やす	index_col = n
アクア色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
辞書に要素を項目名として加える	辞書[キー] = element
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
ファイルをバイナリ書き込みモードでオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
データフレームの選択した列の中にいくつがあるか求める	df[['列A', '列B']].isin([value]).sum()
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
データシリーズの中にいくつ日付データが含まれるか数える	ds.isin([value]).sum()
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
赤色でヒストグラムを描画する	plt.hist(データ列, color='red')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(配列, 'norm')
オブジェクトは数値	isinstance(obj, (int,float))
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
直前の値でデータフレームの欠損値を補完する	df.fillna(method='ffill')
折れ線グラフの色をミディアムパープルに指定する	plt.plot(データ列x, データ列y, color='mediumpurple')
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
データフレームのある列の値がxより多い行を抽出する	df[df['列A'] > x]
赤いダイアモンドマーカーをリストとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
整数が非負数でないかどうか判定する	整数 >= 0
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
改行なしにxをプリントする	print(x, end='')
ある列のカテゴリごとの分散	df.groupby('列A').var()
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
両端キューに文字列をエンキューする	両端キュー.append(文字列)
日付データの年数	aDate.year
ディムグレーにヒストグラムの色を指定する	plt.hist(データ列, color='dimgray')
ASCII限定としてパターンで文字列を分ける	re.split(pattern, s, flags=re.ASCI)
XからYを引いた値を求めたい	X - Y
折れ線グラフの三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: グラフの色をライムに指定する	color = 'lime'
整数が整数2以下	整数 <= 整数2
線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
タブ区切りのファイルをロードする	pd.read_csv('file.tsv', sep='\t')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
データフレームのカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
データ列の推移を赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図の下三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
小麦色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
双方向キュー中の要素を数える	両端キュー.count(要素)
黒いダイアモンドマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのあるカラムの最頻値	df['列A'].mode()
option: ダークレッド色を使う	color = 'darkred'
両端キューに要素をエンキューする	両端キュー.append(要素)
折れ線グラフのバツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
オブジェクトは浮動小数点数型か	float = int<nl>isinstance(obj, float)
プロットの背景色を白くする	sns.set(style='whitegrid')
文字列を最後の部分文字列で二分し、、残りを使う	文字列.rpartition(部分文字列)[-1]
プロットを描画する準備をする	import matplotlib.pyplot as plt
n回の数値イテラブルを求める	range(n)
ドジャーブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
折れ線グラフをネイビー色を用いて描画する	plt.plot(データ列x, データ列y, color='navy')
エクセルファイルからシートを指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
整数×整数	整数 * 整数2
sin	math.sin(x)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
リストをy座標、リストをx軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームを10の位で四捨五入して整数にする	df.round(-1).astype(int)
リストとリストの散布図にデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
ふたつの列を組み合わせてグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
リストとリストについて散布図を描画し、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
数列をダミー変数にする	pd.get_dummies(数列)
プロットに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
配列とリストについて散布図を描画して、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
ダークスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
オレンジレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
グラフ中のフォントを設定する	sns.set(font=フォント名)
フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
オブジェクトのプロパティの値を指定する	setattr(obj, プロパティ名, 値)
折れ線グラフの△マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
リストのn番目の値を消す	del リスト[n]
行列の行ごとの平均値	np.mean(aArray, axis=1)
option: フクシアに色を指定する	color = 'fuchsia'
データシリーズの文字列をNaNにする	ds.replace(値, np.nan)
指定された列のカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
赤い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列中にひとつでも非数字が存在するかどうか調べる	any(not c.isdigit() for c in 文字列)
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
セットを変更不能に変換する	frozenset(セット)
option: フォントの色をフローラルホワイトに指定する	color = 'floralwhite'
グラフのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
異なる列をキーとして二つのデータフレームを全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
グラフの色テーマを全般的に色差別なくする	sns.set(pallete='colorblind')
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
データフレームから型リストデータ型の列を選択する	df.select_dtypes(include=typeList)
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
JSONフォーマットでリストを出力ストリームに保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
整数を百の位で丸める	round(x, -2)
折れ線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
配列の列ごとの平均値	np.mean(aArray, axis=0)
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
xとyを改行で区切ってプリントする	print(x, y, sep='\n')
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: BOM付きを用いる	encoding = 'utf_8_sig'
データフレームの指定したカラムのNaNを最頻値に指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
ミディアムオーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='mediumorchid')
数列の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
日付時刻データの分を使う	aDatetime.minute
ファイルをバイナリできるようにオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
データフレームの列の種類	df.info()
ヒストグラムの色をライトスチールブルーに変更する	plt.hist(データ列, color='lightsteelblue')
変数名がメソッドか調べる	inspect.ismethod(識別子)
オブジェクトがタプルクラス	tuple = int<nl>isinstance(obj, tuple)
日付時刻データが火曜日か	aDatetime.weekday() == 1
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in 文字列)
データフレームをある列でグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
指定した列のカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
データフレームのあるカラムの分を求める	df['列A'].dt.minute
複素数を計算する	complex(x, y)
ミントクリーム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームの一部の列の中に文字列と文字列が存在する	df[['列A', '列B']].isin([value, value2])
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
option: アクアにグラフの色を変更する	color = 'aqua'
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: ミディアムパープル色を使用する	color = 'mediumpurple'
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
現在の秒数を求める	datetime.date.today().second
データフレームがどれだけ正規分布から尖っているか見る	df.skew()
ある列の値がx以上、y未満のデータを取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
整数個のものからk個取り出した時の並べ方	math.perm(n, k)
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
整数が5の倍数	整数 % 5 == 0
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
淡くパレットをグラフの描画で使う	sns.set(pallete='muted')
ひとつ飛ばしでリストを取り出す	リスト[::2]
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームの選択したカラムがどの程度、分散しているか調べる	df[['列A', '列B']].var()
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
ヒストグラムの色をロージーブラウンに変更する	plt.hist(データ列, color='rosybrown')
データフレームのインデックスリスト	df.index
０で全要素を初期化した行列	np.zeros(行数, 列数)
option: デピンク色を用いる	color = 'deeppink'
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
シルバー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
二つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
ファイルを開いて]、バイナリ書き込みストリームを見る	'wb' = 'a'<nl>open(filepath, mode='wb')
ある列で集計し、分散を求める	df.groupby('列A').var()
カウンタを列で更新する	aCounter.update(iterable)
外れ値を除いたカラムの算術平均を算出する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
xを変数にする	x = sympy.Symbol('x')
折れ線グラフを左三角印として描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームの選択したカラムの未入力値を最大値で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
改行なしに変数の出力を行う	print(変数名, end='')
色付きの一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
双方向キューの先頭に配列の各値を追加する	両端キュー.extendleft(配列)
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
リストを文字列として'改行によって連結する	'\n'.join(map(str, リスト))
十六進数文字列をバイト列に変換する	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
疑似乱数を生成する	random.random()
主成分分析として要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
リストからひとつランダムに選んでリストにする	random.choice(リスト)
整数が一桁の数かどうか調べる	0 <= 整数 <= 9
多次元データを多次元尺度構成法として数値次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームのカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
リストとリストについて散布図を描いて、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
seabornのデフォルト見た目を適用する	sns.set()
option: 分割記号を文字列にする	sep = s
日付時刻データが何月か知る	aDatetime.month
赤い▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
option: ブラックにグラフの色を設定する	color = 'black'
カデットブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
文字列を部分文字列で二分し、、残りを使う	文字列.partition(部分文字列)[-1]
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
最大値・最小値の範囲として一様な疑似乱数を生成する	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
オブジェクトは集合か	set = int<nl>isinstance(obj, set)
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
option: ペールグリーン色を使う	color = 'palegreen'
リストの折れ線プロットを描画し、、カラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
二つ並べて数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: シエナを使う	color = 'sienna'
データフレームのあるカラムをタイムスタンプに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
行列のユニークな要素	np.unique(aArray)
棒グラフをやわらかい青色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
オブジェクトが辞書か	dict = int<nl>isinstance(obj, dict)
ひとつでも英数字が文字列中に含まれるかテストする	any(c.isalnum() for c in 文字列)
文字列のケースを交換する	文字列.swapcase()
文字列を最後のコロンで二分して、最初の方を使う	文字列.rpartition(':')[0]
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
ネイビーにヒストグラムの色をする	plt.hist(データ列, color='navy')
データフレームの選択したカラムの不偏分散を算出する	df[['列A', '列B']].var(ddof=1)
あるカラムのカテゴリの最小値	df.groupby('列A').min()
配列の分散	np.var(aArray)
実数以上の最小の整数を求める	math.ceil(x)
ファイルパスをバイナリ書き込みモードで開いて]、fとする	f = open(filepath, mode='wb')
リストを関数でフィルタする	filter(func, iterable)
辞書をインデントを指定してJSONフォーマットにエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
ベクトルのユニークな値を要素とするベクトル	np.unique(aArray)
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
初期値で全要素を初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
整数の4分の1	整数 / 4
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
実数が正の数	x > 0
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
黒い四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームの列名をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
文字列を区切り記号で二つに分けて後半を使う	文字列.partition(セパレータ)[-1]
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
ある列のみデータフレームの重複を見る	df.duplicated(subset='列A')
年月日と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
追加できるようにEUCを用いて既存のファイルパスを開く]	open(filepath, mode='a', encoding='euc_jp')
入力ストリーム全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
小数点数が無限大か調べる	math.isinf(x)
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
SJISでデータフレームをCSVファイルに保存する	df.to_csv('file.csv', encoding='shift_jis')
部分文字列で文字列を区切って、列挙する	文字列.split(部分文字列)
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
ブラック色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
破壊的にデータフレームを降順に二つの列を用いて並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
オブジェクトの属性の値を見る	getattr(obj, プロパティ名)
ヒストグラムをミスティローズ色を用いて描画する	plt.hist(データ列, color='mistyrose')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
ファイルの絶対ファイルパス	os.path.abspath(filepath)
文字列中にひとつでもASCII文字が含まれるか調べる	any(c.isascii() for c in 文字列)
ライトサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
真紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
正規分布にしたがってランダムに配列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
サブ型か調べる	issubclass(サブクラス, クラス)
５乗を書きたい	X ** 5
ファイルをBOM付きで開く]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
データフレームをグループ化し各分散を求める	df.groupby('列A').var()
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのカラム名をリストで置き換える	df.columns = columns
整数を双方向キューの末尾に追加する	両端キュー.append(整数)
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
既存のベクトルをベースにして全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
変数が無限大に近づくときの数式の極限値を計算する	sympy.limit(数式, 変数, oo)
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データフレームの一部の列の空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
配列から両端キューを作る	collections.deque(配列)
option: オリベドラブに色を設定する	color = 'olivedrab'
ファイルをオープンして]バイナリストリームを見る	'rb' = 'a'<nl>open(filepath, mode='rb')
日付データのデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
日付時刻データが月曜日かどうか確認する	aDatetime.weekday() == 0
ライトスレイグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
option: 色をラベンダーに設定する	color = 'lavender'
日付時刻データが何秒か知る	aDatetime.second
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
データフレームの選択した列が正規分布からどれだけ、尖っているか確認する	df[['列A', '列B']].skew()
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
クラス分類のアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
回帰分析をアンサンブル学習で行う	sklearn.ensemble.VotingRegressor()
整数が1、もしくは2、もしくは3に等しい	整数 == 1 or 整数 == 2 or 整数 == 3
０で全要素を初期化した行列を初期化する	np.zeros(行数, 列数)
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
ヒストグラムをペルー色として描画する	plt.hist(データ列, color='peru')
データフレームのNaNを前の値に設定する	df.fillna(method='ffill')
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
本日のローカルな日付を使う	datetime.date.today()
リストの最後を取り除く	リスト[:-1]
option: モカシン色を用いる	color = 'moccasin'
ある列の文字列が部分文字列で終わらない行を取り出す	df[~ df['列A'].str.endswith(部分文字列)]
折れ線グラフに▲印を加える	plt.plot(データ列x, データ列y, marker='^')
散布図の大バツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データシリーズの不偏標準偏差	ds.std()
ふたつの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
数列から両端キューを作る	collections.deque(数列)
改行しないで２つの計算結果を出力する	print(式, 式, end='')
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
因子分析を行う	model = sklearn.decomposition.PCA(n_components=n)
sepを区切りとして文字列リストをつなげる	sep.join(文字列リスト)
文字列中にひとつもアルファベットが含まれないか調べる	any(not c.isalpha() for c in 文字列)
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
ティール色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
rgbの三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色を濃いシアンにセットする	color = 'darkcyan'
データ列の推移を赤い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 分割記号をカンマにする	sep = ','
書式文字列を引数としてarg文字列をフォーマットする	書式.format(*args)
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
列に列を続ける	itertools.chain(iterable, iterable2)
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
表データ中の欠損値を削除してみる	df.dropna()
折れ線グラフの四角印の色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
マッピングを階層化する	collections.ChainMap(aDict)
配列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
データフレームのカラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
ある列の値によってデータフレームをまとめた表	df.groupby('列A')
データフレームの標本標準偏差を求める	df.std(ddof=1)
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
文字列中にひとつも空白がないか確認する	any(not c.isspace() for c in 文字列)
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
説明変数と目的変数で回帰モデルを学習する	model.fit(説明変数, 目的変数)
リストを等しい量になるように分割数nとしてビン分割する	pd.qcut(aList, n)
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
日付時刻データがタイムスタンプデータより前か	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
イテラブルのイミュータブルな集合	frozenset(イテラブル)
黒い大バツマーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ダイアモンド印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
指定したカラムのモードを求める	df['列A'].mode()
option: グラフの線の種類を実線に指定する	linestyle = 'solid'
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
配列をビン数nでビニングし、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームが正規分布からどの程度歪んでいるか確認する	df.kurt()
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
区切り記号で文字列を区切り、列挙する	文字列.split(セパレータ)
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
散布図に▼マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
文字列を最後のコロンで分割したときの残りの文字列	文字列.rpartition(':')[-1]
辞書から項目名で指定したエントリをポップする	辞書.pop(キー)
ループを抜けたい	if 条件式:<nl><tab>break
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
ファイルを追加モードを用いてオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
配列とリストの散布図を描画し、マーカーを三角に指定する	plt.plot(データ列x, データ列y, marker='^')
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームとしてTSVファイルを読む	pd.read_csv('file.tsv', sep='\t')
まとめてValueMapでデータフレームの指定したカラムの値を置き換える	df['列A'].replace(ValueMap)
文字列を部分文字列で分割して文字列リストに変換する	文字列.split(部分文字列)
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
折れ線グラフの右三角印を青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの一部の列の文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
ヒストグラムの色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
新しい文字列でパターンにマッチした文字列を置換する	re.sub(pattern, newsub, s)
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
キューから最初の整数を取り除く	両端キュー.remove(整数)
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: トマト色を使う	color = 'tomato'
rangeの無限バージョン	itertools.count(start=n, step=step)
データフレームを丸めて、整数型にする	df.round().astype(int)
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
ある列の文字列に部分文字列が含まれるデータを抽出する	df[df['列A'].str.contains(部分文字列)]
オブジェクトのクラスを調べる	type(obj)
オリーブ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
文字列を最後の部分文字列で分けた時の後半の文字列を使う	文字列.rpartition(部分文字列)[-1]
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームのある列を配列として取り出す	df['列A'].values
新しいヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
本日をタプルにする	datetime.datetime.today().timetuple()
折れ線グラフの色を貝殻にセットする	plt.plot(データ列x, データ列y, color='seashell')
データシリーズがどの程度分散しているか見る	ds.var()
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
折れ線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
全要素を０で初期化した行列	np.zeros(行数, 列数)
右に両端キューの要素をローテーションする	両端キュー.rotate(1)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフの色をライトゴールドロディイエローにする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
ライトゴールドロディイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームから重複を残さず重複を取り除く	df.drop_duplicates(keep=False)
バギングで回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
リストから重複を取り除く	set(リスト)
カテゴリで色分けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
散布図をやわらかい青色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
プログラムの実行を適切に終える	sys.exit(0)
文字列はセットに含まれないか調べる	文字列 not in セット
option: ドジャーブルーを使う	color = 'dodgerblue'
文字列をカンマで二分し、、前の方を見る	文字列.partition(',')[0]
イエローグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
識別子がスタックフレームか調べる	inspect.isframe(識別子)
ふたつのリストの差集合	list(set(リスト).difference(set(リスト2)))
散布図をクロスマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をライトスカイブルーにセットする	color = 'lightskyblue'
ライトグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
縦棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ケースを無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
xを白色で表示する	print(f'\033[37m{x}\033[0m')
option: 文字列を分割記号で使う	sep = s
大文字と小文字を入れ替える	文字列.swapcase()
ランダムにn行をデータフレームから抽出する	df.sample(n)
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
文字列を部分文字列を使って分割して、列挙する	文字列.split(部分文字列)
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
空のロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームの選択した列を10の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
三つの表データを縦に結合する	pd.concat([df, df2, df3], axis=0)
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
本日が何月か知る	datetime.datetime.today().month
変数名がトレースバックかどうか	inspect.istraceback(識別子)
最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
整数のバイト長を確認する	(整数.bit_length() + 7) // 8
折れ線グラフの星マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
散布図に赤い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
数式のインテグラルを行う	sympy.integrate(数式)
option: グラフの色をライムグリーンに変更する	color = 'limegreen'
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in 文字列)
文字列を右から区切り文字で区切る	文字列.rsplit(セパレータ)
グラフの色を色差別なくする	sns.set(pallete='colorblind')
データ列を２つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
文字列をASCIIコードのリストに変換する	[ord(ch) for ch in 文字列]
option: グラフの色をカーキに設定する	color = 'khaki'
データ列の折れ線グラフをバツ印として描画する	plt.plot(データ列x, データ列y, marker='x')
タプルをnからナンバリングする	enumerate(タプル, start=n)
折れ線グラフを色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
表の指定されたデータ型のカラム名を列挙する	df.select_dtypes(型).columns
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
リストをインデントを指定してJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
整数が負の数	整数 < 0
二つの文字列は同じかどうか判定する	文字列 == 文字列2
ふたつの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
モデルの寄与率を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームの列名一覧で指定した列を除く	df.drop(columns, axis=1, inplace=True)
縦棒グラフをコーンフラワーブルー色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
散布図を赤い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
データフレームを散布図として描画する	sns.scatterplot(data=df, x='列名', y='列名')
２変数の最小の値を計算する	min(x, y)
タプルが空でないか調べる	len(タプル) != 0
オブジェクトのバイトサイズ	sys.getsizeof(オブジェクト)
文字列の終了位置より前に部分文字列が含まれないか判定する	文字列.find(部分文字列, 0, 終了位置) == -1
二つの整数の最大公約数	math.gcd(n, n2)
複数の列を用いてデータフレームをソートする	df.sort_values(by=['列A', '列B'])
散布図に大バツ印を使う	plt.scatter(データ列x, データ列y, marker='X')
パレットを暗くする	sns.set(pallete='dark')
データフレームのある列を千の位で丸める	df['列A'].round(-3)
データフレームをグループ化し、それぞれの最小値を求める	df.groupby('列A').min()
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
option: 三角マーカーを用いる	marker = '^'
セットの全ての要素が別のセット2に含まれるか確認する	セット.issubset(セット2)
整数2がn以上、かつ、n3以下か	整数 <= 整数2 and 整数2 <= n3
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
スタックのn番目に要素を挿入する	両端キュー.insert(n, 要素)
実数はNaNか調べる	math.isnan(x)
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
星マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームをソートして、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
逆双曲線正弦を求める	math.asinh(x)
棒グラフを黄色色を用いて描画する	plt.bar(データ列x, データ列y, color='yellow')
スカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='skyblue')
偽陰性を避けたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームのあるカラムが何時か知る	df['列A'].dt.hour
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
折れ線グラフの菱形マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
文字列の中の複数行対応として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
ランダムにデータフレームから取り出す	df.sample()
option: グラフの色を深紅に設定する	color = 'crimson'
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
三変数の最も大きい値	max(x, y, z)
ヒストグラムでデータフレームのカラムを描く	plt.hist(df[column])
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ある列の中に含まれる文字列と文字列の合計をカウントする	df['列A'].isin([value, value2]).sum()
表データをある列ごとにグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフの左三角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
折れ線グラフの三角印の線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
文字列をn回繰り返すイテラブルが欲しい	itertools.repeat(文字列, n)
100行を表データからランダムに選ぶ	df.sample(100)
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
イテラブルを出現回数してカウンタを更新する	aCounter.update(iterable)
余弦の逆数	x = 0.33<nl>math.acos(x)
線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
データ列を折れ線グラフとして可視化する	plt.plot(データ列x, データ列y)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
散布図の▽マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
シルバー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
連立方程式の解を求める	sympy.solve([数式, 数式2])
空の回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
イテラブルとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
マゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
三つの変数を順にプリントする	print(変数名, 変数名, 変数名)
オブジェクトは非同期ジェネレータかどうか調べる	inspect.isasyncgen(オブジェクト)
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの列の欠損値をモードに設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
option: バイナリ書き込みモードを使う	mode = 'wb'
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
カウンタをマッピングで更新する	aCounter.update(aDict)
回帰分析をパーセプトロンでする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
データフレームの選択したカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
ベクトルのスカラー倍を求める	aArray * n
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
ファイルをオープンして]バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
リストと配列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
画面用にグラフを設定する	sns.set(context='notebook')
インディアンレッドにヒストグラムの色を変更する	plt.hist(データ列, color='indianred')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
データ列の散らばりを描画する	plt.scatter(データ列x, データ列y)
横棒グラフを黄緑色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
リストとデータ列の散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
あるカラムのカテゴリの合計	df.groupby('列A').sum()
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
カラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームをBOMを付けて出力する	df.to_csv('file.csv', encoding='utf_8_sig')
散布図の色を濃い青にする	plt.scatter(データ列x, データ列y, color='darkblue')
option: グラフの色をトマトに変更する	color = 'tomato'
インデックスによってデータフレームをソートする	df.sort_index()
パパイヤウィップ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
データフレームのn番目の行を取り出す	df.loc[n]
8進数文字列を整数にする	int(文字列, 8)
文字列中にひとつでも英字が含まれる	any(c.isalpha() for c in 文字列)
option: オーキッドを用いる	color = 'orchid'
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
整数がnで割り切れるかどうか調べる	整数 % n == 0
option: ゴールデンロッドにグラフの色を指定する	color = 'goldenrod'
データフレームの指定したカラムを四捨五入する	df['列A'].round()
タプルの要素を空白区切りで出力する	print(*タプル)
option: カデットブルーにグラフの色を設定する	color = 'cadetblue'
文字列をケースを無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
日付データが日付データより先かどうか	aDate2 = aDatetime<nl>aDate < aDate2
option: 色をチョコレートに指定する	color = 'chocolate'
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
ベクトルの平均値を計算する	np.mean(aArray)
横棒グラフをオリーブ色を使って描画する	plt.barh(データ列x, データ列y, color='olive')
option: マーカーをクロスに設定する	marker = 'x'
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
散布図をダークオリーブグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームのカラムのスピアマンの相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
Xのn乗が求めたい	X ** n
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームがどの程度正規分布から歪んでいるか確認する	df.kurt()
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
option: グラフの色をシスルに変更する	color = 'thistle'
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
クラスが名前付きタプルか調べる	issubclass(C, tuple)
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
数列とリストについての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
リストと配列の散布図をプロットして、マーカーを▲にセットする	plt.plot(データ列x, データ列y, marker='^')
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
バイアスなしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
option: 茶色にグラフの色を変更する	color = 'brown'
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
リストの変化を赤い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの中にあるの合計を数える	df.isin([value]).sum()
ミディアムシアグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームの中にがある	df.isin([value])
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
複素数	complex(x, y)
要素がセットに含まれるかどうか調べる	要素 in セット
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームから重複した行を残さず削除する	df.drop_duplicates(keep=False)
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='grey')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
配列の列ごとの標準偏差	np.std(aArray, axis=0)
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
整数が1、もしくは2、もしくは3に等しいか確認する	整数 == 1 or 整数 == 2 or 整数 == 3
タイムスタンプデータをタプルにする	aDatetime.timetuple()
指定したカラムにおいてどの値が頻出か確認する	df['列A'].mode()
辞書の項目数	len(辞書)
rgbのダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
数列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
コマンドラインの一覧	sys.argv[1:]
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
文字列がある文字列で終わるか確認する	文字列.endswith(部分文字列)
指定した列のカテゴリで集計し、それぞれの合計を算出する	df.groupby('列A').sum()
試しに何か動かす	print('Hello World')
変数をプリントする	print(変数名)
箱髭図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
グラフの目的を論文にする	sns.set(context='paper')
カウンタの正の数だけ残す	+aCounter
要素が辞書の値に含まれていないか調べる	element not in 辞書.values()
データ列の推移を赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
以上と書きたい	X >= Y
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ファイルパスを読み込みできるように開く]	'r' = 'a'<nl>open(filepath, mode='r')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
整数が1、もしくは2か調べる	整数 == 1 or 整数 == 2
rgbの三角マーカーを数列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列中にひとつも空白が含まれないか確認する	any(not c.isspace() for c in 文字列)
第一引数で指定されたファイルの名前	sys.argv[1]
折れ線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
option: ピンク色を用いる	color = 'pink'
リストが空かどうか調べる	len(リスト) == 0
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
乱数の行列を作る	np.random.random((行数, 列数))
今日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
散布図のマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
イテラブルのヒストグラムを描画する	plt.hist(データ列)
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
チップのデータセットからデータフレームを読み込む	df = sns.load_dataset('tips')
option: 濃いシアン色を使う	color = 'darkcyan'
散布図にrgbの▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
ヒストグラムをブラウン色で描画する	plt.hist(データ列, color='brown')
データフレームの欠損値を平均に指定する	df.fillna(df.mean())
option: ゴーストホワイトにグラフの色を設定する	color = 'ghostwhite'
配列の値が正規分布にしたがって発生する累積確率を使う	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
整数のビット長	整数.bit_length()
option: フォントの色をクリムゾンに設定する	color = 'crimson'
option: フォントの色をダークカーキに設定する	color = 'darkkhaki'
文字列が指定した文字列に含まれるか確認する	文字列 in 別の文字列
折れ線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
長さの制限された両端キューをリストから生成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
ファイルパスをバイナリできるように開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
リストの要素を関数に適用した結果でソートする	sorted(リスト, key=func)
配列と配列についての散布図にrgbのクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
赤い一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
インデントを指定して文字列をJSON文字列に変換する	json.dumps(文字列, ensure_ascii=False, indent=n)
プログラムのファイル名を知る	sys.argv[0]
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
長さの制限された双方向キューを数列から作る	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
折れ線グラフの色をダークシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
option: エンコーディングをSJISに変更する	encoding = 'shift_jis'
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
棒グラフをリネン色を用いて描画する	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムをオリベドラブ色を用いて描画する	plt.hist(データ列, color='olivedrab')
線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームをソートし、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
文字列はセットに含まれるか調べる	文字列 in セット
部分文字列を文字列の末尾から探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
option: オリベドラブにフォントの色を変更する	color = 'olivedrab'
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
日付データの日数を使う	aDate.day
辞書内の値をリストとして	list(辞書.values())
折れ線グラフの星印を青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
多次元データを特異値分解で文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
year年day月を日付時刻にする	datetime.datetime(year=year, month=month, day=1)
散布図の▽印を赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
乱数シードをnで固定する	random.seed(n)
データフレームの指定したカラムの不偏標準偏差を計算する	df['列A'].std()
データフレームのあるカラムの曜日の名前	df['列A'].dt.weekday_name
文字列をセパレータで区切って、文字列リストに変換する	文字列.split(セパレータ)
データシリーズの中にいくつ欠損値が存在するかカウントする	ds.isna().sum()
リストを空白区切りで出力する	print(*リスト)
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
辞書をネスト化する	collections.ChainMap(aDict)
両端キューをリストにする	list(両端キュー)
識別子が抽象クラス	inspect.isabstract(識別子)
線グラフの色をダークスレートブルーに指定する	plt.plot(データ列x, データ列y, color='darkslateblue')
２つのデータフレームを連結する	# concat<nl>pd.concat([df, df2])
大バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
データフレームの中にいくつ日付データがあるかカウントする	df.isin([value]).sum()
文字列を最初のコロンで二分して、残りを使う	文字列.partition(':')[-1]
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
文字列をJSON形式としてファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
折れ線グラフにダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
書き込み用にEUCでファイルパスをオープンする]	open(filepath, mode='w', encoding='euc_jp')
部分文字列を文字列の最後から探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
横棒グラフを紺碧色を用いて描画する	plt.barh(データ列x, データ列y, color='azure')
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
リストを文字列として、空白で一つにする	' '.join(map(str, リスト))
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
配列を2次元1行に変形する	aArray.reshape(1, -1)
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
実数以上の最小の整数を計算する	math.ceil(x)
白色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
文字列の末尾	文字列[-1]
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
グラフの補足の位置を指定する	plt.legend(loc=(x, y))
分類モデルの適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
データシリーズの欠損値をその最小値で埋める	ds.fillna(ds.min())
ヒストグラムの色をグリーンにする	plt.hist(データ列, color='green')
option: ライトスレイグレー色を使用する	color = 'lightslategray'
データフレームの指定したカラムの中の欠損値の個数を数える	df['列A'].isna().sum()
ISO書式の文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
散布図をプロットする	plt.scatter(データ列x, データ列y)
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
数式の変数を別の数式で置き換える	数式.subs(変数, 数式2)
文字列をカンマによって二分する	文字列.partition(',')
辞書をJSON形式としてファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
ファイルからのストリームを求める	open(filepath)
百分率付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
行列の転置行列を求める	aArray.T
option: スラグレーにグラフの色を設定する	color = 'slategrey'
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: グラフの色をグリーンに指定する	color = 'green'
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
カウンタのキー数を使う	len(aCounter)
要素がリストに含まれない	要素 not in リスト
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
データフレームを列で集約して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
イテラブルから配列を作る	np.array(iterable)
数列をヒストグラムにする	plt.hist(データ列)
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
黒い丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
縦棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームの選択した列の中にある日付データと文字列の個数をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
浮動小数点数に実数を足す	x + y
データフレームの一部の列の欠損値を後の行の値に設定する	df[['列A', '列B']].fillna(method='bfill')
表データをある列の値でグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
データフレームの指定したカラムの値が欠損値か調べる	df['列A'].isna()
TSVを読み込む	pd.read_csv('file.tsv', sep='\t')
option: 四角マーカーを用いる	marker = 's'
折れ線グラフに下三角印を加える	plt.plot(データ列x, データ列y, marker='v')
option: サンディーブラウン色を用いる	color = 'sandybrown'
棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
散布図をグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='green')
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
黄色いグリッド線を引く	plt.grid(color='y')
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
カウンタの最頻出な要素	aCounter.most_common()[0]
数列をイミュータブルなに変換する	frozenset(数列)
散布図をrgbの丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
3つの文字列を順に表示する	print(文字列, 文字列, 文字列)
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データ列の平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: アリスブルーを使う	color = 'aliceblue'
xとyをカンマで区切ってプリントする	print(x, y, sep=',')
２つの列の値によってデータフレームをグループ化し統計量を計算する	df.groupby(['列A', '列B']).describe()
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
リストと配列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
0で全要素を初期化した行列	np.zeros(要素数)
セットの更新不能版	frozenset(セット)
データフレームの指定した３列を抽出する	df[['列A', '列B', '列C']]
3自然数の最小公倍数	math.lcm(n, n2, n3)
横棒グラフを濃いシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データシリーズの値をまとめてreplに正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
折れ線グラフのダイアモンド印の大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
二つの整数の積	整数 * 整数2
ダークオレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
文字列の指定した位置より後に部分文字列が存在するか調べる	文字列.find(部分文字列, 開始位置) != -1
セットをリストに変換する	list(セット)
散布図のバツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
option: ピンク色を使う	color = 'pink'
整数∈セット	数 in セット
n階微分を算出する	sympy.diff(数式, y, n)
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
XにYを足した値を求めたい	X + Y
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
文字列を最後のセパレータで二分割して残りを使う	文字列.rpartition(セパレータ)[-1]
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ベクトルのユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
パープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
データシリーズを千の位で丸めて、整数にする	ds.round(-3).astype(int)
折れ線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
データフレームを表示するとき、ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
折れ線グラフの▲印の色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
データフレームの選択した列の分散を求める	df[['列A', '列B']].var()
データシリーズを百の位で丸めて、整数型にする	ds.round(-2).astype(int)
要素がセットに含まれないかどうか	要素 not in セット
ヒストグラムをイエローグリーン色を使って描画する	plt.hist(データ列, color='yellowgreen')
データフレームを２つの列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
リストをビン数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列が全てASCII文字かどうか調べる	文字列.isascii()
指定した列の第一四分位数	df['列A'].quantile(0.25)
グラフにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
正規表現を使う	import re
データシリーズにおいてどの値が最も出現するか調べる	ds.mode()
グラフのパレットを全般的に濃くする	sns.set(pallete='deep')
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
明るくカラーパレットをグラフの描画で用いる	sns.set(pallete='bright')
option: 無視するフッタをnにセットする	skipfooter = n
文字列の両端から文字を除く	文字列.strip(文字)
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
オブジェクトがメソッドか調べる	inspect.ismethod(オブジェクト)
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
option: グラフの色をコーンズシルクに変更する	color = 'cornsilk'
文字列がリストのいずれでもないかどうか確認する	文字列 not in リスト
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ユーザが整数を入力する	int(input())
文字列中の指定した文字をカウントする	文字列.count(文字)
散布図をライトスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
xについて偏微分する	sympy.diff(数式, [|変数]x)
2つのデータフレームを合体する	# concat<nl>pd.concat([df, df2])
option: イエローグリーン色を使用する	color = 'yellowgreen'
配列の形状	aArray.shape
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
日付データからn週間分、減らす	aDate - datetime.timedelta(weeks=n)
ある列の値がxに等しく、かつ別の列の値がyに等しいデータを抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
データシリーズの尖度	ds.skew()
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
option: グラフの色を青紫に設定する	color = 'violet'
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
文字列中にひとつも空白がないか調べる	any(not c.isspace() for c in 文字列)
文字列を最後からカンマで区切る	文字列.rsplit(',')
散布図に▲マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
option: カンマをセパレータで使う	sep = ','
カデットブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
x軸の目盛を対数に変更する	plt.xscale('log')
散布図にバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
環境がWindows	sys.platform.startswith('win32')
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列の中の複数行対応としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
縦棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフにバツ印を加える	plt.plot(データ列x, データ列y, marker='x')
条件でまたはを書きたい	条件式 or 条件式2
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
データフレームから１つの列のみ抽出する	df[['列A']]
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
前の行の値でデータフレームの指定したカラムの未入力値を補う	df['列A'].fillna(method='ffill')
整数が-9以上9以下か調べる	-9 <= 整数 <= 9
NaNを含めてデータフレームをある列の値でグループ化する	df.groupby('列A', dropna=False)
表計算ファイルファイルからカンマ区切りのファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
コーンフラワーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
条件を満たす場合だけ動作したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
option: ドジャーブルーにグラフの色をセットする	color = 'dodgerblue'
双方向キューの先頭から要素を取り出す	両端キュー.popleft()
グラフの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
折れ線グラフの三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
イテラブルと配列についての散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データシリーズがどれだけ、分散しているか見る	ds.var()
要素をキューに積む	両端キュー.append(要素)
option: フォレストグリーンにグラフの色を設定する	color = 'forestgreen'
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
最大値と最小値でデータを正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
原点から点までの距離	math.hypot(x, y)
2つの数値を改行せず出力する	print(数値, 数値, end='')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
ひとつ置きにリストを取り出す	リスト[::2]
option: 改行コードをWindowsに設定する	newline = '\r\n'
折れ線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
整数乱数の行列を作成する	np.random.randint(開始値, 終了値, (行数, 列数))
n個の整数リストを作る	list(range(n))
双方向キューの中に整数が含まれてるかどうか	整数 in 両端キュー
パレットトルコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフを紺色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
全要素を０で初期化した８ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int8)
yが0に近づく場合の数式の極限値を求める	sympy.limit(数式, y, 0)
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
t分布型確率的近傍埋め込み法を使って多次元データを整数次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームのある列の第一四分位数	df['列A'].quantile(0.25)
文字列を回数制限して置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
例外処理したい	try:<nl><tab># ここに処理を入れる<nl><tab>pass<nl>except Exception as e:<nl><tab>print(e)
変数名が非同期ジェネレータ関数かどうか調べる	inspect.isasyncgenfunction(識別子)
option: やわらかい青を使う	color = 'cornflowerblue'
データフレームから10行サンプリングする	df.sample(10)
データフレームを丸めて整数型にする	df.round().astype(int)
折れ線グラフの線の種類を点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列を部分文字列で二分割し、、残りを使う	文字列.partition(部分文字列)[-1]
ある列のカテゴリの平均値を求める	df.groupby('列A').mean()
データフレームの選択したカラムの欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
指定した列の不偏標準偏差	df['列A'].std()
データフレームの選択したカラムの歪度	df[['列A', '列B']].kurt()
ある列のカテゴリごとの平均値を計算する	df.groupby('列A').mean()
折れ線グラフの色をダークシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
小数点数の双曲線正弦を求める	math.sinh(x)
文字列の大きさ	len(文字列)
option: 青に色を設定する	color = 'blue'
3数の最も小さい値	min(x, y, z)
データフレームからカテゴリデータの列名リスト	df.select_dtypes('object').columns
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
nからstep間隔で無限に数え上げる	itertools.count(start=n, step=step)
配列間のスピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
year年month月day日hour時minute分second秒を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
三乗を書きたい	X ** 3
十六進文字列を整数に変換する	int(文字列, 16)
JSON形式の文字列をデータに変換する	data = json.loads(文字列)
散布図をシエナ色を用いて描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームの重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
n番目の列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
n個に配列をビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームをBOM付きで書き出す	df.to_csv('file.csv', encoding='utf_8_sig')
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ダークブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
箱髭図でリストを描画する	plt.boxplot(データ列)
黄色でxをプリントする	print(f'\033[33m{x}\033[0m')
黒い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
リストとリストの散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
赤い点線で配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
項をセットに追加する	セット.add(要素)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列は文字列より辞書順で後	文字列 > 文字列2
識別子がジェネレータ関数	inspect.isgeneratorfunction(識別子)
データフレームのあるカラムをリストに変換する	df['列A'].values.tolist()
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
イテラブルをヒストグラムにする	plt.hist(データ列)
指定した列のカテゴリで集計しそれぞれの最大値を求める	df.groupby('列A').max()
ラジアンの角度	math.degrees(x)
行列と同じ大きさの空の行列を作成する	np.empty_like(aArray)
マッピングのキーに対応した値	辞書.get(キー, 見つからない場合の値)
整数を整数で割って小数点以下を切り捨てる	整数 // 整数2
option: ベージュにグラフの色を設定する	color = 'beige'
複数のの条件が何か成り立つ	条件 or 条件2 or 条件3
ヒストグラムを点線を用いてプロットする	plt.hist(データ列, linestyle='dotted')
option: ハニーデューを使う	color = 'honeydew'
文字列をエンコーディングを用いてバイト列にする	文字列.encode(encoding=encoding)
option: グラフの色をシルバーに変更する	color = 'silver'
表データから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
ファイルのファイルサイズ	os.path.get_size(filepath)
option: データ型を指定する	bool = np.int<nl>dtype = bool
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
データフレームを横向きに連結する	pd.concat([df, df2], axis=1)
データフレームの列の一覧	df.info()
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
線グラフのラインスタイルを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
タプルの要素が最初に見つかるインデックス	タプル.index(要素)
文字列中に部分文字列がいくつか含まれるか数える	文字列.count(部分文字列)
アヤメのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
リストの移り変わりを折れ線グラフで図示する	plt.plot(range(len(データ列)), データ列)
データフレームを小数点以下n桁で丸める	n = 2<nl>df.round(n)
データフレームの先頭10行を調べる	df.head(10)
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
辞書のエントリの一覧	辞書.values()
指定した列のどの値が頻出か見る	df['列A'].mode()
ヒストグラムをパープル色を使って描画する	plt.hist(データ列, color='purple')
option: 大バツマーカーを描画する	marker = 'X'
データフレームの値を一度に正規表現patternでreplに置き換える	df.replace(pattern, repl, regex=True)
黄色化する	f'\033[33m{x}\033[0m'
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
２変数の最小値	min(x, y)
リストの折れ線プロットを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: グラフの色をクリムゾンに指定する	color = 'crimson'
実数を小数点数で割った剰余	math.remainder(x, x2)
カラーバーを横向きで設定する	plt.colorbar(orientation='horizontal')
部分分数に数式を展開する	sympy.apart(数式)
日付時刻データが日付時刻データより前か確認する	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
列名を指定して二つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
線グラフの色をダークレッドにする	plt.plot(データ列x, データ列y, color='darkred')
数列を変更不能なセットに変換する	frozenset(数列)
散布図をミッドナイトブルー色として描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
濃い青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
文字列の中のケースを無視してパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
表データのある列を配列として抽出する	df['列A'].values
浮動小数点数に実数を加算する	x + y
カウンタの最頻出の項目	aCounter.most_common()[0]
データシリーズを10の位で丸めて整数にする	ds.round(-1).astype(int)
文字列の接尾辞がか	文字列.endswith(部分文字列)
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームから重複を残さず重複を削除する	df.drop_duplicates(keep=False)
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームの選択した列の中に日付データが存在する	df[['列A', '列B']].isin([value])
ナバホホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
データフレームをある列のカテゴリでグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
赤い実線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
データフレームからカテゴリデータの列名一覧を見る	df.select_dtypes('object').columns
xを赤色でプリントする	print(f'\033[31m{x}\033[0m')
ラインを半透明の一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームの列を折れ線グラフとして可視化する	plt.plot(df[column], df[column])
指定の列に重複があればドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
配列の歪度を求める	scipy.stats.skew(配列, bias=False)
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
option: アクアマリンを用いる	color = 'aquamarine'
データフレームの重複した行のみを取り出す	df[df.duplicated(keep=False)]
最初のコマンド引数	sys.argv[1]
表データのあるカラムの分を見る	df['列A'].dt.minute
折れ線グラフの星印の大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
表データを用いる	import numpy as np<nl>import pandas as pd
整数を八進表現に変換する	oct(整数)
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの選択したカラムのNaNを直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
オブジェクトは浮動小数点数クラスか調べる	float = int<nl>isinstance(obj, float)
2つのデータフレームを連結する	# concat<nl>pd.concat([df, df2])
線グラフをブルーバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='blueviolet')
黒い大バツマーカーをイテラブルとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
自然対数	math.log(x)
データフレームの先頭	df.head()
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
option: オリベドラブ色を使う	color = 'olivedrab'
青い実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフに△マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
整数が整数2よりも大きい	整数 > 整数2
リストに別のリストを追加して拡張する	リスト.extend(リスト2)
計算結果を改行せず表示する	print(式, end='')
２つの列の値によってデータフレームをまとめたグループ	df.groupby(['列A', '列B'])
フォーマットで列をタイムスタンプにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
文字列の両端から指定された文字を除去する	文字列.strip(文字)
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
データシリーズの欠損値を平均値に設定する	ds.fillna(ds.mean())
変数名がコルーチン	inspect.iscoroutine(識別子)
赤い四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
指定したカラムのモードを計算する	df['列A'].mode()
線形モデルの切片	model.intercept_
デックに整数を積む	両端キュー.append(整数)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
黒い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
実数の符号を同じにする	math.copysign(x, x2)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
option: スラグレーに色を設定する	color = 'slategray'
箱ひげ図でデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームの指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
クラス分類の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
イテラブルの各要素を両端キューの先頭に追加する	両端キュー.extendleft(イテラブル)
配列の合計値	np.sum(aArray)
yについて数式の積分を計算する	sympy.integrate(数式, y)
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームを2つの列をキーにして昇順にソートして更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
数から実数を引く	x - y
グラフのx軸を対数に変更する	plt.xscale('log')
原点から(実数,y)の距離を求める	math.hypot(x, y)
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
オブジェクトがスタックフレームか調べる	inspect.isframe(オブジェクト)
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
スラグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
度数分布図を二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
線グラフの色をリネンにする	plt.plot(データ列x, データ列y, color='linen')
データフレームを表示するとき、小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
データフレームを表示するとき、小数点以下の表示精度をセットする	pd.set_option('precision', n)
データシリーズの平均値を求める	ds.mean()
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
文字列をカンマで区切って、文字列リストにする	文字列.split(',')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
Xの冪乗が求めたい	X ** Y
データフレームを2つの列の値で分類して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
オブジェクトはリストかタプルかどうか	isinstance(obj, (list)
タプルの各要素を空白区切りで表示する	print(*タプル)
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
辞書をJSON形式でファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
データフレームのヒストグラムを横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名')
データシリーズの中に文字列と文字列が含まれるか調べる	ds.isin([value, value2])
文字列を部分文字列で分割し、、列挙する	文字列.split(部分文字列)
指定したカラムの未入力値をその最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
数列から複数個ランダムに選んでリスト化する	random.choices(数列, k=n)
整数を二進表記に変換する	bin(整数)
データフレームのある列のどの値が最も出現するか見る	df['列A'].mode()
最大値でデータフレームのカラムのNaNを補う	df['列A'].fillna(df['列A'].max())
リストが空	len(リスト) == 0
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
正規分布による累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
複数のの条件がいずれか成り立つ	条件 or 条件2 or 条件3
数式の微分を算出する	sympy.diff(数式)
サポートベクター分類モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
プラットホームがマック	sys.platform.startswith('darwin')
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
印字を全て使う	string.printable
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
option: ゴールデンロッド色を使用する	color = 'goldenrod'
オブジェクトのバイト長を調べる	sys.getsizeof(オブジェクト)
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームを複数の列を用いて小さい順に並べ直して、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
バイナリモードとしてファイルパスを開いて]fとする	f = open(filepath, mode='rb')
最大長nの両端キューを作る	collections.deque(maxlen=最大長)
リストとリストの散布図を描き、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
横棒グラフをスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='steelblue')
option: 色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
データフレームの選択したカラムを100の位で丸めて整数にする	df[['列A', '列B']].round(-2).astype(int)
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
xの小数点以下'4'桁までを表示する	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
xとyをタブで区切ってプリントする	print(x, y, sep='\t')
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
二つのデータ列の散布図として残差を描く	sns.residplot(x=データ列, y=データ列)
シエナ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
オブジェクトがジェネレータ	inspect.isgenerator(オブジェクト)
タプルの最初を除く	タプル[1:]
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
S-W検定を行う	scipy.stats.shapiro(配列)
ネイピア数	math.e
目盛り線	plt.grid(color='#800080')
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
ダイアモンド印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
option: レベッカパープルにフォントの色を設定する	color = 'rebeccapurple'
太字化する	f'\033[1m{x}\033[0m'
リストのケンドールの相関係数を算出する	scipy.stats.kendalltau(数列, 数列2)
縦棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
最大長を指定して、両端キューを作る	collections.deque(maxlen=最大長)
表データをサンプリングする	df.sample()
円プロットにラベルを設定する	plt.pie(データ列, startangle=90, labels=ラベル列)
整数∉セット	数 not in セット
option: パレットトルコイズを用いる	color = 'paleturquoise'
配列と配列についての散布図にクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
今日が金曜日	datetime.datetime.today().weekday() == 4
分割数nで列をビンニングする	pd.cut(ds, n)
文字列をユニコード列に変換する	[ord(ch) for ch in 文字列]
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
数列とリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
多次元データをt-SNEとして要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
rgbの丸マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
xを紫色でプリントする	print(f'\033[35m{x}\033[0m')
指定した列の尖度	df['列A'].skew()
オブジェクトが集合型か調べる	set = int<nl>isinstance(obj, set)
1０乗を書きたい	X ** 10
マップのキーを列挙する	list(辞書)
option: グラフの色をロイヤルブルーに変更する	color = 'royalblue'
を小さくする	変数 -= 整数
部分文字列の位置を文字列の先頭から探す	文字列.find(部分文字列)
最後からカンマで文字列を区切る	文字列.rsplit(',')
リストとイテラブルについて散布図を描画して大バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: フォントの色をオリーブに設定する	color = 'olive'
ロードしたモジュールの一覧を知る	sys.modules
深紅にヒストグラムの色を指定する	plt.hist(データ列, color='crimson')
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
2つのリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームのある列を配列にする	df['列A'].values
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
書き込みモードでファイルを開き]、fとする	f = open(filepath, mode='w')
表をインポートする	import numpy as np<nl>import pandas as pd
リストと配列についての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
論文用にプロットを指定する	sns.set(context='paper')
小数点以下'2'桁までをプリントする	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
初期値で全要素を初期化した配列を作る	np.full(要素数, 初期値, dtype=np.int)
白にヒストグラムの色を設定する	plt.hist(データ列, color='white')
オブジェクトがクラスのインスタンスかどうか調べる	isinstance(obj, クラス)
両端キューの末尾にリストの各要素を追加する	両端キュー.extend(リスト)
正規分布の累積分布関数の逆関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
両端キューのn番目に文字列を挿入する	両端キュー.insert(n, 文字列)
コロンで文字列を区切り、、列挙する	文字列.split(':')
日付時刻データが水曜日	aDatetime.weekday() == 2
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
SJISでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
識別子がジェネレータか調べる	inspect.isgenerator(識別子)
option: シアン色を使用する	color = 'cyan'
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
現在が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
文字は平仮名かどうか確認する	('ぁ' <= 文字 <= 'ん')
データフレームからランダムに10行を抽出する	df.sample(10)
部分集合か調べる	セット.issubset(セット2)
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
実数の常用対数	math.log10(x)
実数の絶対値	math.fabs(x)
現在をタプルに変換する	datetime.datetime.today().timetuple()
データ列の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
変数名は非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(識別子)
ファイルを開いて]追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
データフレームのあるカラムが何日か知る	df['列A'].dt.day
線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームの中に文字列と文字列がいくつ存在するかカウントする	df.isin([value, value2]).sum()
イエローグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
リストとデータ列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
タプルを順序付けする	enumerate(タプル)
option: 印の色を変更する	markerfacecolor = '#800080'
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
ふたつの列からグループ化し、最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
ピーチパフ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムを実線でプロットする	plt.hist(データ列, linestyle='solid')
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
xを緑色にする	f'\033[32m{x}\033[0m'
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
散布図に黒いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='k')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
データフレームの指定した列の欠損値をその最小値で埋める	df['列A'].fillna(df['列A'].min())
ヒストグラムをリネン色を使って描画する	plt.hist(データ列, color='linen')
等差数列から整数乱数を計算する	random.randrange(start, end, step)
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
リストを配列にする	np.array(aList)
option: シアンにグラフの色を設定する	color = 'cyan'
0からN未満までの配列	np.arange(N)
線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategray')
シーケンスを周期的に繰り返す	itertools.cycle(iterable)
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
両端キューから整数を取り除く	両端キュー.remove(整数)
散布図のダイアモンド印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームを並べ、新しい行を加える	df.sort_values('キーとなる列').reset_index()
インデントを指定してデータをJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
タプルの末尾からn番目以前の要素を取り出す	タプル[:-n]
上限から下限までの区間でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
文字列が全てアスキー文字か	文字列.isascii()
折れ線グラフを白色として描画する	plt.plot(データ列x, データ列y, color='white')
配列をビン数nでビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
オリベドラブ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
文字列をISO書式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
日付データは日付データより前	aDate2 = aDatetime<nl>aDate < aDate2
データシリーズの未入力値をメディアンで埋める	ds.fillna(ds.median())
'A'列の値がxに等しい行を抽出する	df[df['列A'] == x]
タプルが空でない	len(タプル) != 0
配列のトリム平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
折れ線グラフの色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
データフレームをグループ化し、ある列に対し分散を計算する	df.groupby('列A')['列B'].var()
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
数列のピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
データフレームのある列の値がx以下のデータを取り出す	df[df['列A'] <= x]
文字列から末尾を取り除いた文字列	文字列.removeprefix(部分文字列)
xについて微分を求める	sympy.diff(数式, [|変数]x)
でデータフレームの相関行列を算出する	df.corr(method='kendall')
option: ダークオレンジ色を使う	color = 'darkorange'
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
option: スラグレーを使う	color = 'slategray'
日付時刻データにn時間を加算する	aDatetime + datetime.timedelta(hours=n)
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
折れ線グラフの大バツ印を青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
Excelファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
初期値で全要素を初期化した配列を作成する	np.full(要素数, 初期値, dtype=np.int)
サポートベクトル分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
デピンク色を用いてヒストグラムを描画する	plt.hist(データ列, color='deeppink')
カタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
オレンジ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
予測値とデータの離れ具合をプロット化する	sns.residplot(x='列名', y='列名', data=df)
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
year年month月の日付	datetime.date(year=year, month=month, day=1)
ブラック色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
データフレームの選択したカラムの中にいくつ文字列が存在するか数える	df[['列A', '列B']].isin([value]).sum()
option: どの行もヘッダにしない	header = None
データシリーズのパーセンタイル	ds.quantile(パーセント/100)
データ列の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
シスル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
ヒストグラムをオールドレース色を使って描画する	plt.hist(データ列, color='oldlace')
データフレームのカラム間の相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
セットに要素を追加する	セット.add(要素)
新しいロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
データシリーズを日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
実数を十の位で丸める	round(x, -1)
データフレームの未入力値をxにする	df.fillna(x)
データフレームの選択したカラムを小数点以下n桁で四捨五入する	n = 2<nl>df[['列A', '列B']].round(n)
ヒストグラムでカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ある列ごとの最大値を算出する	df.groupby('列A').max()
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
辞書のキーを列挙する	list(辞書)
option: 出力先を標準エラーに設定する	file = sys.stderr
変数の値を半分にする	変数 //= 2
ヒストグラムを深紅色で描画する	plt.hist(データ列, color='crimson')
アンダーライン付きでプリントできる文字列に変換する	f'\033[4m{x}\033[0m'
リストからランダム複数個に選んでリスト化する	random.choices(リスト, k=n)
セットをイミュータブルにする	frozenset(セット)
ファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
散布図をダークオレンジ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データ列を等しい量になるようにn個にビニングする	pd.qcut(ds, n)
データフレームの選択した列の未入力値を最小値にする	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
横棒グラフをダークゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
データフレームのカラムのNaNをxで埋める	df['列A'].fillna(x)
全要素を初期値で初期化した行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
データフレームの選択したカラムの欠損値をその最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
あるカラムの中にと日付データがあるか調べる	df['列A'].isin([value, value2])
option: フォントの色をマゼンタに変更する	color = 'magenta'
グラフの描画で淡くパレットを使う	sns.set(pallete='muted')
データフレームのあるカラムの秒	df['列A'].dt.second
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
ファイルパスを書き込みできるようにオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
option: ダークサーモンにフォントの色を変更する	color = 'darksalmon'
option: フォントの色をライトグリーンに設定する	color = 'lightseagreen'
文字列の右側から部分文字列を取り除く	文字列.rstrip(部分文字列)
文字列の開始位置番目と終了位置番目の間に部分文字列がないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
あるカラムの値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
折れ線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
コーンズシルク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
最後の区切り文字で文字列を二分し、前半を使う	文字列.rpartition(セパレータ)[0]
データ列の推移を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: フォントの色をインディゴに設定する	color = 'indigo'
データフレームの最初のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
インデント幅を指定して辞書をJSON文字列に変換する	json.dumps(辞書, ensure_ascii=False, indent=n)
配列を箱ひげ図で描画する	plt.boxplot(データ列)
折れ線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: SJISを使う	encoding = 'shift_jis'
bとn2から成るペア	(n, n2)
二つのセットが共通の要素を持たないかどうか調べる	セット.isdisjoint(セット2)
ランダムにn行を重複ありでデータフレームからサンプリングする	df.sample(n, replace=True)
データフレームのカラムの偏差値を計算する	50 + 10 * scipy.stats.zscore(df['列A'])
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
option: 色をアクアマリンに指定する	color = 'aquamarine'
データフレームの尖りを計算する	df.skew()
リストを文字列として文字を用いて連結する	文字.join(map(str, リスト))
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
xを整数にする	int(x)
縦棒グラフをミディアムオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
option: ブラックに色を設定する	color = 'black'
option: フォレストグリーンを使用する	color = 'forestgreen'
折れ線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
UTF8としてファイルパスをオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
リストを縦軸、リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
等しくない場合を書きたい	X != Y
文字列をコロンで区切り、文字列リストにする	文字列.split(':')
文字列がキーワードか	keyword.iskeyword(文字列)
文字列の先頭で正規表現にケースを無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
最大値でデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
データフレームのある列の値がxより大きい行を抽出する	df[df['列A'] > x]
数列とリストについて散布図を描いて、四角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストの合計	sum(リスト)
option: スラグレーを用いる	color = 'slategray'
実測値をモデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
数を三乗する	x ** 3
リストをインデントを指定してJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
リネン色を使ってヒストグラムを描画する	plt.hist(データ列, color='linen')
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
配列とイテラブルの散布図に赤い菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
平均線付き箱髭図を描く	plt.boxplot(データ列, meanline=True)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
改行なしに複数の変数の値をプリントする	print(変数名, 変数名, end='')
文字列を出力する	print(文字列)
オブジェクトが浮動小数点数型かどうか調べる	float = int<nl>isinstance(obj, float)
散布図に黒い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
乗算が書きたい	X * Y
計算結果の出力を改行しないで行う	print(式, end='')
小数点以下'5'桁までを出力する	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
データフレームを全部小数点以下n桁で丸める	df.round(n)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
折れ線グラフをオリベドラブ色を使って描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: グラフの色を茶色に指定する	color = 'brown'
データフレームから重複ありでランダムに10行をサンプリングする	df.sample(10, replace=True)
option: ナバホホワイトに色を設定する	color = 'navajowhite'
データ列とリストの散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
SVDで多次元データを項次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データをJSON形式を使ってファイル出力にダンプする	json.dump(データ, ファイル出力, ensure_ascii=False)
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
オブジェクトはスタックフレーム	inspect.isframe(オブジェクト)
リストの中の最小値	min(リスト)
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
まとめてデータフレームの選択したカラムの値をValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
xでデータシリーズの未入力値を埋める	ds.fillna(x)
データフレームの値が欠損値か調べる	df.isna()
両端キュー中の文字列の数を数える	両端キュー.count(文字列)
を整数分の1にする	変数 //= 整数
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
行列の最大を求める	np.max(aArray)
縦棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフをラベンダーブラッシュ色を用いて描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
もしコマンド引数が与えられたなら、処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
マルーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
単位正方行列を作る	np.identity(n)
データフレームの列のNaNを最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
option: 三角マーカーを描画する	marker = '^'
ファイルを文字コードtextを用いてオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
リストとデータ列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
ダークシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ダークグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
実数が無限大かどうか調べる	math.isinf(x)
option: ダークシアグリーンに色を変更する	color = 'darkseagreen'
追加できるようにBOM付きでファイルを開く]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームの指定した列が正規分布からどれだけ、歪んでいるか見る	df['列A'].kurt()
文字列の先頭でパターンにマッチするか確認する	re.match(pattern, s)
option: ミッドナイトブルー色を使う	color = 'midnightblue'
JSON形式の文字列を読み込む	data = json.loads(文字列)
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
xが無限大に近づくとき、数式の極限値を計算する	sympy.limit(数式, [|変数]x, oo)
option: シアン色を用いる	color = 'cyan'
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
JSON形式で辞書をあるファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
長さの制限された双方向キューを数列から生成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフの色をタンに変更する	plt.plot(データ列x, データ列y, color='tan')
棒グラフをダークグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgreen')
折れ線グラフの色を淡い茶色に変更する	plt.plot(データ列x, データ列y, color='tan')
棒グラフをダークサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='darksalmon')
配列とデータ列の散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図の▼マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの印を星にする	plt.plot(データ列x, データ列y, marker='*')
ゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
イテラブルを折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
シャルトリューズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
二つの文字列が等しくないか	文字列 != 文字列2
リストの要素の位置をエラーなく使う	リスト.index(要素) if 要素 in リスト else -1
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
nが無限に続くイテラブル	itertools.repeat(n)
数列のスピアマンの相関係数を算出する	scipy.stats.spearmanr(数列, 数列2)
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
最後の部分文字列で文字列を二つに分ける	文字列.rpartition(部分文字列)
タプルの最初のn要素を取り除く	タプル[n:]
表から列を一つ選択する	df[['列A']]
浮動小数点数に実数を加える	x + y
白いグリッド線を引く	plt.grid(color='w')
日付データが木曜日か調べる	aDate.weekday() == 3
整数の十六進数リテラルを見る	hex(整数)
option: コーンズシルクに色を設定する	color = 'cornsilk'
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
散布図の三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
タプルが少なくともひとつ真かどうか確認する	any(タプル)
線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
整数が2で割り切れないか確認する	整数 % 2 == 1
データフレームのstart行目からend行目まで抽出する	df[start:end]
year年month月day日hour時minute分second秒を日付時刻にする	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
行列の形状	aArray.shape
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
option: 色をトマトに設定する	color = 'tomato'
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
辞書の値を一つずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
最小値を計算したい	min(X, Y)
データフレームを二つの列によって昇順に整列して、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
黒いダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
nからn2までの整数リストを作る	list(range(n, n2+1))
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
yについて偏微分する	sympy.diff(数式, y)
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategray')
データフレームの指定した列のNaNをxで埋める	df['列A'].fillna(x)
濃い青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
わり算を切り捨てたい	X // Y
リストを引数として展開して出力する	print(*リスト)
ヒストグラムの色をブランチドアーモンドにセットする	plt.hist(データ列, color='blanchedalmond')
コーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームの指定したカラムを百の位で丸める	df['列A'].round(-2)
整数の5分の1	整数 / 5
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
線グラフをスプリンググリーン色を使って描画する	plt.plot(データ列x, データ列y, color='springgreen')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
実数の逆双曲線正接を算出する	math.atanh(x)
カウンタを少ない順番にリストとして得る	aCounter.most_common()[::-1]
整数が整数2以上か調べる	整数 >= 整数2
データフレームの先頭n行を抽出する	df.head(n)
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
縦棒グラフをハニーデュー色を使って描画する	plt.bar(データ列x, データ列y, color='honeydew')
赤い△マーカーをリストとイテラブルの散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
指定した列で集計し各平均値を算出する	df.groupby('列A').mean()
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
イテラブルと配列についての散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
クリムゾン色としてヒストグラムを描画する	plt.hist(データ列, color='crimson')
グラフの描画で明るく色テーマを使う	sns.set(pallete='bright')
データフレームの指定したカラムの欠損値を最小値にセットする	df['列A'].fillna(df['列A'].min())
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
辞書を浅く複製する	辞書.copy()
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: 色をインディアンレッドに設定する	color = 'indianred'
yについて数式の微分を行う	sympy.diff(数式, y)
option: 印を左三角に変更する	marker = '<'
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
option: グラフを実線に設定する	linestyle = 'solid'
改行で文字列を分割する	文字列.splitlines()
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
nまでのスライス	slice(n)
option: クロスマーカーを加える	marker = 'x'
インデックスによって昇順にデータフレーム全体を並べる	df.sort_index(ascending=True)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
サーモン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
多次元尺度構成法を用いて項次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ある列の値がxより小さい行を抽出する	df[df['列A'] < x]
文字列のプレフィックスはsubか調べる	文字列.startswith(部分文字列)
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データシリーズは何分か知る	ds.dt.minute
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ライム色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
モカシン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
文字は平仮名かどうか	('ぁ' <= 文字 <= 'ん')
EUCで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
条件にあったら繰り返しを最初から実行し直したい	if 条件式:<nl><tab>continue
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
文字列を空白で最後から区切る	文字列.rsplit()
セットからエラーなく数値を除く	セット.discard(数)
青いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv('file.csv', float_format='%.3f')
イテラブルの各値を両端キューの先頭に追加する	両端キュー.extendleft(イテラブル)
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データ列の移り変わりを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの値が未入力値かどうか確認する	df.isna()
半透明の一点鎖線で配列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームのある列をインデックスにする	df.set_index('列A')
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
option: グラフの色を赤に指定する	color = 'red'
環境のバイトオーダを調べる	sys.byteorder
xの出力を改行なしに行う	print(x, end='')
列のユニークな値の個数	df[col].nunique()
バイナリ書き込みできるようにファイルパスをオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
折れ線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
エラーを捉えたい	try:<nl><tab># ここに処理を入れる<nl><tab>pass<nl>except Exception as e:<nl><tab>print(e)
文字列を置き換える	文字列.replace(部分文字列, 置換後の文字列)
文字列が全て大文字かどうか調べる	文字列.isupper()
大きさnで配列と配列についての散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
散布図にバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
散布図にrgbのクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
整数をn回繰り返すイテラブル	itertools.repeat(整数, n)
ヒストグラムの色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
データフレームの選択したカラムの中に文字列があるか調べる	df[['列A', '列B']].isin([value])
データフレームをある列を用いて昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
青い破線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
option: ヘッダを自動的な連番に増やす	header = None
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
データフレームのカラムが正規分布に従うか調べる	scipy.stats.shapiro(df['列A'])
データフレームから列を3つ選択する	df[['列A', '列B', '列C']]
コロンで文字列を二つに分けて前半を使う	文字列.partition(':')[0]
要素∉セット	要素 not in セット
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
y座標を対数目盛に変更する	plt.yscale('log')
散布図でデータフレームを描画し、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
データシリーズの時	ds.dt.hour
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
option: ロージーブラウン色を用いる	color = 'rosybrown'
変数の値を整数分の１にする	変数 /= 整数
データフレームの指定したカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
ビン数nでデータ列を等量でビンニングする	pd.qcut(ds, n)
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
要素がリストの要素か	要素 in リスト
配列と数列について散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
変数について数式をn階偏微分する	sympy.diff(数式, 変数, n)
整数の五乗	整数 ** 5
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
淡い茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
文字列がセットのいずれ	文字列 in セット
option: ローングリーン色を使う	color = 'lawngreen'
散布図にダイアモンドマーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
散布図をゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームのあるカラムの分	df['列A'].dt.minute
計算結果を表示する	print(式)
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
データフレームの選択した列の未入力値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
コロンで文字列を二分し、、後半を使う	文字列.partition(':')[-1]
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
オブジェクトはリストクラスか	list = int<nl>isinstance(obj, list)
凡例をプロット中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
両端キューから最初の要素を削除する	両端キュー.remove(要素)
セットを別のセットとの共通要素だけに更新する	セット.intersection_update(セット2)
小数点数がNaNか調べる	math.isnan(x)
棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
散布図に星印を加える	plt.scatter(データ列x, データ列y, marker='*')
２つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
文字列中にひとつでも非英数字があるかテストする	any(not c.isalnum() for c in 文字列)
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='grey')
option: タンにフォントの色をセットする	color = 'tan'
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
日付時刻データの曜日を整数で使う	aDatetime.weekday()
ミスティローズ色としてヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
option: ビスクを使う	color = 'bisque'
option: グラフの色をコーンフラワーブルーに変更する	color = 'cornflowerblue'
データフレームのある列の名前一覧の列だけ取り出す	columns = ['列A', '列B']<nl>df[columns]
イコールと条件を書きたい	X == Y
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
文字列を区切り記号で二分して、前半を使う	文字列.partition(セパレータ)[0]
改行せず数値を表示する	print(数値, end='')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
二つのカウンタの共通する要素を求める	aCounter & aCounter2
折れ線グラフの四角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
リストとリストの散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図を赤いバツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフの色をロージーブラウンに変更する	plt.plot(データ列x, データ列y, color='rosybrown')
割り算を切り捨てたい	X // Y
横棒グラフをロイヤルブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='royalblue')
折れ線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
分類モデルの正解率を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
パレットをパステル調にする	sns.set(pallete='pastel')
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
イエローグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームの選択した列の相関行列をピアソンとして求める	df[['列A', '列B']].corr(method='pearson')
データフレームをある列の値を用いてグループ化し、、各グループの件数を知る	df.groupby('列A').size()
TSVファイルを使ってデータフレームを保存する	df.to_csv('file.tsv', sep='\t')
正規分布を判定する	scipy.stats.shapiro(配列)
辞書として文字列をカウントする	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
リストを順に出力する	print(*リスト)
文字が別の文字列にない	文字 not in 文字列
option: マーカーの色をダークブルーにする	markerfacecolor = 'darkblue'
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
赤い大バツマーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
rgbの菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
データフレームの全列を散布図として描画する	sns.pairplot(df)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
プロットの色を全般的に淡くする	sns.set(pallete='muted')
未定値	None
カウンタからタプルを減らす	aCounter.subtract(aDict)
平均値でデータシリーズの欠損値を置換する	ds.fillna(ds.mean())
列名を指定して二つのデータフレームを結合する	'<nl>pd.merge(df, df2, on='列A')
データフレームのあるカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
ペールグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
リストのスピアマンの順位相関係数を見る	scipy.stats.spearmanr(数列, 数列2)
タプルの中の最小値を算出する	min(タプル)
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
整数の五分の一を求める	整数 / 5
ふたつの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
option: グラフの色をフォレストグリーンにする	color = 'forestgreen'
二つの集合の∪を使う	セット.union(セット2)
小数点数の双曲線正接	math.tanh(x)
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
カウンタの項目を増やす	aCounter[element] += 1
ラインを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データ列を箱ひげ図としてプロットする	plt.boxplot(データ列)
データフレームの列の各データ値の出現回数	df[col].value_counts()
0から始まる無限な数列を得る	itertools.count()
option: ハニーデューにグラフの色を変更する	color = 'honeydew'
文字列中の正規表現を新しい文字列で置換する	re.sub(pattern, newsub, s)
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
実線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: マーカーを星に変える	marker = '*'
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームから同じ内容のデータをドロップする	df.drop_duplicates(inplace=True)
文字列のケースを変換する	文字列.casefold()
データフレームをグループ化しあるカラムに対し平均値を計算する	df.groupby('列A')['列B'].mean()
ビン数nで配列を分割する	pd.cut(aArray, n)
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをミディアムシアグリーン色を用いて描画する	plt.hist(データ列, color='mediumseagreen')
option: 改行の代わりに文字列を用いる	end = 文字列
フォーマットを用いてカラムをタイムスタンプ型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームから重複ありでランダムに5行をサンプリングする	df.sample(5, replace=True)
平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
本日のタイムスタンプを求める	datetime.datetime.today()
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
イテラブルからランダム複数個に選んでリスト化する	random.choices(イテラブル, k=n)
データフレームをグループ化し、各合計を求める	df.groupby('列A').sum()
ダークグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
指定した列の中に日付データと文字列がいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
Pandasのバージョンを表示する	print(pd.__version__)
識別子は抽象クラスか確認する	inspect.isabstract(識別子)
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
整数のモジュロ	整数 % 整数2
リストをJSONフォーマットで出力に出力する	json.dump(リスト, ファイル出力, ensure_ascii=False)
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
セットが真下位集合	セット < セット2
カウンタの全数	aCounter.total()
条件を満たす間、処理を繰り返したい	while 条件式:<nl><tab>print('繰り返し')  # 直して
文字列を最後の区切り文字で分けたときの後半の文字列	文字列.rpartition(セパレータ)[-1]
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
タプルが全て真	all(タプル)
カウンタをセットに変換する	set(aCounter)
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
リストをn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフの色をフクシアにする	plt.plot(データ列x, データ列y, color='fuchsia')
option: ライトサーモン色を使う	color = 'lightsalmon'
文字列の終了位置より前に部分文字列が存在しないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
ヒストグラムの色をペルーに変更する	plt.hist(データ列, color='peru')
xとyを順に出力する	print(x, y)
整数の5乗を	整数 ** 5
option: タンにフォントの色を変更する	color = 'tan'
オブジェクトが数値かどうか	isinstance(obj, (int,float))
標準出力	sys.stdout
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
データフレームを関数ごとにグループ分けし、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
文字列をトリムする	文字列.strip()
左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<')
改行なしで1行だけ標準入力から読み込む	sys.stdin.readline().rstrip()
数式のn階微分を求める	sympy.diff(数式, 変数, n)
option: フォントの色をローングリーンに設定する	color = 'lawngreen'
シアンでプリントできる文字列に変換する	f'\033[36m{x}\033[0m'
タプルのn番目以降の要素を取り出す	タプル[n:]
データフレームを表示するときヘッダー行を右寄せにセットする	pd.set_option('colheader_justify', 'right')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データフレームの指定したカラムの値を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
実数のハイパボリック・サインの逆数	math.asinh(x)
option: エクセルファイルシート名を設定する	sheet_name = ['A', 'B']
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
文字列を最後の部分文字列を用いて二分する	文字列.rpartition(部分文字列)
データフレームを降順にある列によって並べる	df.sort_values(by='列A', ascending=False)
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
リストとイテラブルについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
今日の日付時刻	datetime.datetime.today()
データシリーズのNaNをメディアンに変更する	ds.fillna(ds.median())
赤い下三角マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフに左三角印を使う	plt.plot(データ列x, データ列y, marker='<')
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
重回帰モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
オブジェクトにプロパティが存在するかどうかテストする	hasattr(obj, プロパティ名)
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームの指定した列の値を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
パープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
配列の標準誤差を求める	scipy.stats.sem(配列)
数式の変数を指定された数式で置き換える	数式.subs(変数, 数式2)
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームから列を一つ選択する	df[['列A']]
データフレームをある列のカテゴリでグループ化して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
データシリーズのタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
スクリプトファイルの絶対パスを求める	os.path.abspath(__file__)
数列のピアソンの相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
散布図をライトシアン色として描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
少ない順番にカウンタをリストとして得る	aCounter.most_common()[::-1]
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームの選択した列のSkewness	df[['列A', '列B']].skew()
小なりと条件に書きたい	X < Y
三変数の最小値を求める	min(x, y, z)
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
CSVファイルをロードする	pd.read_csv('file.csv', sep=',')
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
全印字	string.printable
option: バツマーカーを加える	marker = 'x'
最大値でデータフレームのNaNを埋める	df.fillna(df.max())
乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフの色をミディアムバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='mediumvioletred')
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
ヒストグラムをアリスブルー色として描画する	plt.hist(データ列, color='aliceblue')
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
本日は何曜日か知る	datetime.datetime.today().weekday()
ゼロ埋めされた整数型のベクトル	np.zeros(要素数, dtype=np.int)
既存のファイルを文字コードtextを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
綺麗なグラフを描画する準備をする	import seaborn as sns
リストとリストの散布図にrgbの菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
JSON形式の文字列をオブジェクトにする	data = json.loads(文字列)
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
散布図をrgbの左三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
散布図の菱形マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
外れ値に強い線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
アリスブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
整数の各桁の和がほしい	sum(map(int, str(整数)))
ライトグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='lightseagreen')
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
シーケンスとリストをペアリングする	itertools.zip_longest(iterable, iterable2)
TSVファイルをデータフレームとしてロードする	pd.read_csv('file.tsv', sep='\t')
貝殻色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
option: フォントの色をディープスカイブルーに指定する	color = 'deepskyblue'
リスト内の要素が少なくともひとつ真か調べる	any(リスト)
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
タイムスタンプデータを浮動小数点数に変換する	aDatetime.timestamp()
option: ディムグレーを使う	color = 'dimgrey'
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
データフレームの一部の列を小数点以下n桁で丸める	n = 2<nl>df[['列A', '列B']].round(n)
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームのあるカラムの年度	df['列A'].dt.year
0からnの範囲	range(n)
option: イエローグリーン色を使う	color = 'yellowgreen'
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
暗い赤色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: ファイルを使う	file = sys.open('file.txt', 'w')
条件を満たす場合だけ、処理したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
データフレームの未入力値を除いてみる	df.dropna()
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
プログラムのファイルの名前を知る	sys.argv[0]
折れ線グラフに三角印を加える	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
データ列とリストの散布図を描画し、、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフのダイアモンド印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
赤いバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
昇順にタプルをソートする	sorted(タプル, reverse=False)
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
データシリーズは何日か知る	ds.dt.day
タイムスタンプデータをn分前にする	aDatetime - datetime.timedelta(minutes=n)
タプルと列のデカルト積	itertools.product(iterable, iterable2)
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
option: ファイルを使用する	file = sys.open('file.txt', 'w')
浮動小数点数の双曲線正接	math.tanh(x)
オブジェクトは数値か調べる	isinstance(obj, (int,float))
整数が整数2より大きいか	整数 > 整数2
バイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
コーンズシルク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
その最頻値でデータシリーズの欠損値を置換する	ds.fillna(ds.mode().iloc[0])
有理数の分子	q.numerator
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
オールドレース色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
整数がセットのいずれか調べる	数 in セット
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
文字列を部分文字列で二分割して、前半を使う	文字列.partition(部分文字列)[0]
二つの条件がいずれか成り立つ	条件 or 条件2
デックに文字列をプッシュする	両端キュー.append(文字列)
現在が何曜日か知る	datetime.datetime.today().weekday()
実数が非数かどうか	math.isnan(x)
日付データと日付データの時間差は何分か知る	(aDate - aDate2).total_seconds()//60
文字列はセットのメンバーでない	文字列 not in セット
両端キューを用いる	import collections
option: グラフの色をネイビーに設定する	color = 'navy'
空の辞書を作る	辞書 = {}
ヒストグラムの色を茶色にする	plt.hist(データ列, color='brown')
ファイルパスをバイナリ書き込みモードを用いてオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
option: フォントの色をインディアンレッドに指定する	color = 'indianred'
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: 暗い赤色を使う	color = 'darkred'
文字列を最初の区切り文字によって二分する	文字列.partition(セパレータ)
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
ベクトルのデータ型	aArray.dtype()
配列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
実数に整数を加える	x + y
整数が2で割り切れるか調べる	整数 % 2 == 0
ある列の要約統計量	df['列A'].describe()
セットを別のセットとの共通要素だけにする	セット.intersection_update(セット2)
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
ミディアムスプリンググリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
カテゴリで色分けして、データフレームの全カラムの相関を見る	sns.pairplot(df, hue='カテゴリ列')
データフレームの選択したカラムの中に文字列が存在するかどうか調べる	df[['列A', '列B']].isin([value])
データフレームの一部のカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
カテゴリ別で色分けしてデータフレームの全列の散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='grey')
L1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ヒストグラムの色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
自然数最小公倍数	math.lcm(n, n2)
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
スピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
三つの数値を出力する	print(数値, 数値, 数値)
条件を満たすときのみ、実行したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
辞書の項目名と値を入れ替える	{v: k for k, v in 辞書.items()}
日付時刻データは何日か知る	aDatetime.day
option: カラムの名前を自動的な連番に設定する	header = None
多次元データを主成分分析で項次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームの指定したカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
セットの浅いコピーを新規生成する	セット.copy()
変数名は非同期ジェネレータか	inspect.isasyncgen(識別子)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
データシリーズの欠損値を前の行の値にセットする	ds.fillna(method='ffill')
option: ロイヤルブルー色を使う	color = 'royalblue'
線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
データフレームの一部の列の相関行列をスピアマン相関係数で求める	df[['列A', '列B']].corr(method='spearman')
データフレームのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
データフレームを散布図で見て、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
option: ゴーストホワイトにフォントの色を設定する	color = 'ghostwhite'
特異値分解を用いて項次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
option: グラフの色をアイボリーに指定する	color = 'ivory'
二進対数	math.log2(x)
折れ線グラフの印を菱形印にする	plt.plot(データ列x, データ列y, marker='D')
データシリーズのNaNをモードに指定する	ds.fillna(ds.mode().iloc[0])
データフレームのある列の値がxに等しい行を抽出する	df[df['列A'] == x]
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
オールドレースにヒストグラムの色を指定する	plt.hist(データ列, color='oldlace')
横棒グラフをライム色として描画する	plt.barh(データ列x, データ列y, color='lime')
データフレームの指定したカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
インデックスとしてカンマ区切りのファイルのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
書式文字列を辞書でフォーマットする	書式.format_map(辞書)
黒い菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの一部の列の未入力値をxに設定する	df[['列A', '列B']].fillna(x)
option: ミントクリーム色を使う	color = 'mintcream'
リストの要素を昇順にソートする	sorted(リスト, reverse=False)
縦棒グラフを描画して、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
整数の八進表記を見る	oct(整数)
ライトイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
数値の出力を改行せずに行う	print(数値, end='')
配列を平坦にする	aArray.flatten()
辞書をソートしてJSONフォーマットにエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
多次元データを特異値分解で要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
双方向キューから要素を取り除く	両端キュー.remove(要素)
文字列を両端キューにenqueueする	両端キュー.append(文字列)
最初のカテゴリーを無視してデータフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
青い一点鎖線を用いてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
３乗が求めたい	X ** 3
ガウス過程を使ってクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムをフローラルホワイト色として描画する	plt.hist(データ列, color='floralwhite')
日付時刻データが日曜日	aDatetime.weekday() == 6
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
数の三乗を計算する	x ** 3
セットの要素数	len(セット)
配列の標準偏差を求める	np.std(aArray)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
整数を整数で割ったmod	整数 % 整数2
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
文字列の終了位置より前に部分文字列が含まれる	文字列.find(部分文字列, 0, 終了位置) != -1
折れ線グラフの色をシスルにセットする	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
リストを連結する	リスト + リスト2
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
データフレームを百の位で四捨五入して整数にする	df.round(-2).astype(int)
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
二つの計算結果を順に出力する	print(式, 式)
指定された列のカテゴリで集計し、標準偏差を算出する	df.groupby('列A').std()
データフレームのカラムのモード	mode, count = scipy.stats.mode(df['列A'])
ボックスチャートとしてデータ列を可視化する	plt.boxplot(データ列)
データ列の折れ線グラフを菱形印として描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームを表示するとき小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
ファイルからファイル名を使う	os.path.basename(filepath)
データフレームの欠損値が含まれる箇所を色つけする	df.style.highlight_null()
多次元データを特異値分解として文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
円プロットを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
データフレームの先頭n行を取り出す	df.head(n)
文字列の開始位置以降に部分文字列が含まれるか調べる	文字列.find(部分文字列, 開始位置) != -1
グラフの題名を設定する	plt.title('グラフの名称')
現在が何秒か知る	datetime.date.today().second
深紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
option: フォントの色をスカイブルーに指定する	color = 'skyblue'
データフレームのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
データシリーズのNaNを中央値に設定する	ds.fillna(ds.median())
指定したカラムを丸める	df['列A'].round()
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgray')
ダークオレンジ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
一方に含まれ、他方に含まれない集合	セット.difference(セット2)
イテラブルから長さの制限された双方向キューを作る	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
最大長を指定して、両端キュー	collections.deque(maxlen=最大長)
横棒グラフを描いて、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
半透明の一点鎖線として配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
リストをJSON形式で出力ストリームに保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
ベクトルの行ごとの平均値を求める	np.mean(aArray, axis=1)
正規分布に従うか調べる	scipy.stats.shapiro(df['列A'])
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
ベクトルにはいくつ要素が含まれるか調べる	aArray.size
指定した列リストついて、データフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
セパレータで文字列を分割して、文字列リストに変換する	文字列.split(セパレータ)
ペールグリーン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
整数のn分の一を求める	整数 / n
文字列中にひとつでも大文字が含まれるかどうか調べる	any(c.isupper() for c in 文字列)
逆正接	math.atan(x)
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
ふたつの列を組み合わせてグループ化し分散を計算する	df.groupby(['列A', '列B'], as_index=False).var()
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
散布図をダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D')
疑似乱数を求める	random.random()
subで部分文字列が始まるか調べる	文字列.startswith(部分文字列)
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
列を出現回数して、カウンタを更新する	aCounter.update(iterable)
リストが空でないかどうか調べる	len(リスト) != 0
整数の二進リテラル	bin(整数)
option: グラフの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
リストから複数個、ランダムに抽出する	random.choices(リスト, k=n)
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームの指定したカラムのNaNを最大値で埋める	df['列A'].fillna(df['列A'].max())
データフレームの選択した列を10の位で丸めて、整数にする	df[['列A', '列B']].round(-1).astype(int)
option: フォレストグリーンを使う	color = 'forestgreen'
タプルの先頭を取り除く	タプル[1:]
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
辞書を複製する	辞書.copy()
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
配列の長さを制限する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
無限にイテラブルを繰り返す	itertools.cycle(iterable)
カラーパレットをパステル調にする	sns.set(pallete='pastel')
option: フォントの色をオリベドラブに設定する	color = 'olivedrab'
淡いピンク色にヒストグラムの色をセットする	plt.hist(データ列, color='lightpink')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
散布図を紺碧色を用いて描画する	plt.scatter(データ列x, データ列y, color='azure')
ヒストグラムの色をブランチドアーモンドに指定する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームを２つの列をキーにして小さい順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
折れ線グラフを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームを十の位で四捨五入する	df.round(-1)
ヒストグラムをダークブルー色を用いて描画する	plt.hist(データ列, color='darkblue')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
ある列の文字列が部分文字列で始まる行を取り出す	df[df['列A'].str.startswith(部分文字列)]
文字列は印字できるか判定する	文字列.isprintable()
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
逆順の両端キューを見る	reversed(両端キュー)
赤い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データ列の出現頻度を可視化する	plt.hist(データ列)
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
正規分布の累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームのカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
option: ビスクにフォントの色を設定する	color = 'bisque'
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
option: グラフの色を青紫に指定する	color = 'violet'
セットの全要素が別のセット2に含まれるか	セット.issubset(セット2)
グラフの色を濃くする	sns.set(pallete='deep')
データフレームのn行まで選ぶ	df[:n]
タプルをリストに変換する	list(タプル)
列に列を続けた列	itertools.chain(iterable, iterable2)
順序を保持しながらリストから重複を除く	sorted(set(リスト), key=リスト.index)
option: バイアスを算出しない	fit_intercept = False
リストをイミュータブルなセットに変換する	frozenset(リスト)
等差数列を行列に変換する	np.arange(開始値, 終了値, 等差)
option: 左三角マーカーを加える	marker = '<'
部分文字列がsubで始まる	文字列.startswith(部分文字列)
三自然数のLCMを求める	math.lcm(n, n2, n3)
折れ線グラフの大バツマーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
赤い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
平均付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
データ列とリストについて散布図をプロットしてその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: シルバーを用いる	color = 'silver'
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
タプルの要素をソートする	sorted(タプル)
データフレームの上10行	df.head(10)
棒グラフをオリベドラブ色を使って描画する	plt.bar(データ列x, データ列y, color='olivedrab')
変数の値を２倍にしたい	X *= 2
データフレームの指定した列のパーセンタイル	df['列A'].quantile(パーセント/100)
行としてCSVのn行目をロードする	pd.read_csv('file.csv', index_col=n)
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
配列とリストの散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図のマーカーの大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
xを黒色にする	f'\033[30m{x}\033[0m'
カラムのUNIX時間をPandasの日付型にする	pd.to_datetime(df['列A'], unit='s', utc=True)
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
option: フォントの色をライトスカイブルーに指定する	color = 'lightskyblue'
辞書をJSON形式でファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
option: ▽マーカーを加える	marker = 'v'
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
リストと配列について散布図を描画してマーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
実数が整数かどうか調べる	x.is_integer()
表データのあるカラムのタイムゾーンを日本に変更する	df['列A'].tz_convert('Asia/Tokyo')
文字列を末尾から空白で区切る	文字列.rsplit()
文字列がセットのメンバーでないかどうか調べる	文字列 not in セット
データフレームの指定された列の名前一覧の列を取り出す	columns = ['列A', '列B']<nl>df[columns]
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
シーケンスの全順列	itertools.permutations(iterable)
データフレームに重複があるか確認する	df.duplicated()
無限にオブジェクトが繰り返すイテラブル	itertools.repeat(element)
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームを表示するときカラムの最大幅をnに減らす	pd.set_option('max_colwidth', n)
オブジェクトはメソッドかどうか調べる	inspect.ismethod(オブジェクト)
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
整数の十六進数文字列	hex(整数)[2:]
黄色でプリントできる文字列に変換する	f'\033[33m{x}\033[0m'
空のタプル	()
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
文字列はタイトルケースか調べる	文字列.istitle()
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのn行より前を取り出す	df[:n]
青紫色として散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームは正規分布からどの程度尖っているか見る	df.skew()
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
y軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
最後の区切り記号によって文字列を二分する	文字列.rpartition(セパレータ)
チョコレート色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
リストを文字列として文字で連結する	文字.join(map(str, リスト))
ダークバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
棒グラフをネイビー色を用いて描画する	plt.bar(データ列x, データ列y, color='navy')
散布図の三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
改行だけプリントする	print()
ある列の文字列に部分文字列がない行を選択する	df[~df['列A'].str.contains(部分文字列)]
カテゴリ別で色付けして、データフレームをにバイオリン図として見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのある列を削除してみる	df.drop('列A', axis=1)
日付時刻データをタプルにする	aDatetime.timetuple()
空のリストを作る	[]
マッピングのキーを列挙する	辞書.keys()
複数のデータフレームを縦方向に合体する	pd.concat([df, df2, df3], axis=0)
文字列がn回繰り返すイテレータ	itertools.repeat(文字列, n)
折れ線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
アリスブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
文字列中に英数字が含まれる	any(c.isalnum() for c in 文字列)
両端キューは空でないか調べる	len(両端キュー) != 0
リストから重複なく、n個ランダムに選ぶ	random.sample(リスト, k=n)
商と余りを同時に計算する	divmod(x, y)
クロス印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
関数のカテゴリによってデータフレームを集計する	df.groupby(関数)
ヒストグラムの色を珊瑚に指定する	plt.hist(データ列, color='coral')
整数を2進数文字列にする	bin(整数)[2:]
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
度数分布図を二つ並べてプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフをダークカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
クラス分類の適合率を算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
配列とデータ列について散布図を描いて、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムをホワイトスモーク色を使って描画する	plt.hist(データ列, color='whitesmoke')
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
グラフを全般的にパステル調にする	sns.set(pallete='pastel')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
データフレームのある列の値がxより少ない行を抽出する	df[df['列A'] < x]
横棒グラフをプロットする	plt.barh(ラベル列, データ列)
散布図の丸印の色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
配列のケンドールの相関係数を見る	scipy.stats.kendalltau(配列, 配列2)
折れ線グラフの星マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
ヒストグラムの色をアクアに変更する	plt.hist(データ列, color='aqua')
JSONフォーマットで文字列をファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
長さの制限された両端キューをイテラブルから新規生成する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
識別子がトレースバックか	inspect.istraceback(識別子)
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
インデント幅を指定してリストをJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False, indent=n)
グラフを全般的に淡くする	sns.set(pallete='muted')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
プロットの描画で明るく色を使う	sns.set(pallete='bright')
option: マーカーをポイントに変更する	marker = '.'
散布図に赤い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='r')
回帰モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
データシリーズのSkewness	ds.skew()
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
暗い赤色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
option: グラフの色をオリベドラブに指定する	color = 'olivedrab'
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
option: 紺碧にグラフの色を指定する	color = 'azure'
option: パパイヤウィップにグラフの色を設定する	color = 'papayawhip'
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフをライトゴールドロディイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
改行せずにxとyをプリントする	print(x, y, end='')
指定した列ついて、データフレームの重複を見る	df.duplicated(subset='列A')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
識別子がトレースバック	inspect.istraceback(識別子)
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
データフレームをグループ化しある列に対し合計を求める	df.groupby('列A')['列B'].sum()
rgbの丸マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図を青色として描画する	plt.scatter(データ列x, データ列y, color='blue')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
データフレームから重複を破壊的に削除する	df.drop_duplicates(inplace=True)
option: 文字列を分割記号で用いる	sep = s
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれないか	文字列.find(部分文字列, 開始位置, 終了位置) == -1
折れ線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
棒グラフをフクシア色を用いて描画する	plt.bar(データ列x, データ列y, color='fuchsia')
正則化付き重回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
ヒストグラムの色をライムグリーンにセットする	plt.hist(データ列, color='limegreen')
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
イテラブルの長さnの順列を得る	itertools.permutations(iterable, n)
散布図をドジャーブルー色として描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
バリーウッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
option: マーカーの色を白にする	markerfacecolor = 'white'
文字列を最後のセパレータで分割した時の残りの文字列	文字列.rpartition(セパレータ)[-1]
ジェネレータベースのコルーチンと通常のジェネレータを区別する	inspect.isawaitable(識別子)
折れ線グラフの大バツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
100行をデータフレームからランダムに選択する	df.sample(100)
option: グラフの色をライトサーモンに指定する	color = 'lightsalmon'
データフレームの選択したカラムがどれだけ分散しているか確認する	df[['列A', '列B']].var()
散布図の▽マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
赤い実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: フォントの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
配列とリストの散布図を描き、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
オブジェクトのプロパティの値を値に指定する	setattr(obj, プロパティ名, 値)
計数器を用意する	collections.Counter()
イテラブルを関数でフィルタする	map(func, iterable)
データフレームを表示するとき、表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
xをマゼンタでプリントする	print(f'\033[35m{x}\033[0m')
ランダムな整数のリスト	random.sample(range(100), 10)
要素が辞書の値として含まれているか調べる	element in 辞書.values()
データフレームをグループ化し、ある列の要約統計量を求める	df.groupby('列A').describe()['列B']
整数が集合のいづれかか確認する	aSet = [0, 1, 2]<nl>整数 in aSet
折れ線グラフの色をバイオレットに指定する	plt.plot(データ列x, データ列y, color='violet')
文字列の無限な列がほしい	itertools.repeat(文字列)
棒グラフをライトコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
かつと書きたい	条件式 and 条件式2
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列の左側から指定された文字を除く	文字列.lstrip(文字)
yについて数式の偏微分を算出する	sympy.diff(数式, y)
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
データフレームのNaNを平均に増やす	df.fillna(df.mean())
データフレームの標本分散	df.var(ddof=0)
0から始まる無限数列	itertools.count()
レベッカパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: ライム色を使う	color = 'lime'
option: ネイビーにグラフの色を設定する	color = 'navy'
カラーパレットを濃くする	sns.set(pallete='deep')
折れ線グラフの色をゴーストホワイトにする	plt.plot(データ列x, データ列y, color='ghostwhite')
データシリーズの月	ds.dt.month
二つの文字列は等しくない	文字列 != 文字列2
データフレームを二つの列で降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
セットから例外なく要素を除く	セット.discard(要素)
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
小麦色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
option: コーンズシルクを用いる	color = 'cornsilk'
整数がnの倍数でないか調べる	整数 % n != 0
データフレームのあるカラムは何分か調べる	df['列A'].dt.minute
option: 先頭の行をヘッダに増やす	header = 0
赤い右三角マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ダークグレーに色を設定する	color = 'darkgrey'
option: ロージーブラウン色を使う	color = 'rosybrown'
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
整数を2進数文字列に変換する	bin(整数)[2:]
辞書のコピーを用意する	dict(辞書)
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
長さの制限された両端キューを数列から作る	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
データフレームの統計量を全て見る	df.describe()
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
データ列の変化を色付きの一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームのあるカラムが何時か調べる	df['列A'].dt.hour
option: セパレータをコロンにする	sep = ':'
整数が整数2以下、または、n3以上か調べる	整数 <= 整数2 or 整数 >= n3
改行を見る	'\n'
イテラブルを双方向キューにする	collections.deque(イテラブル)
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
データフレームを百の位で丸める	df.round(-2)
ヘッダを指定せずCSVを読み込む	pd.read_csv('file.csv', header=None)
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ある列のカテゴリ毎の平均値	df.groupby('列A').mean()
option: 貝殻にフォントの色を設定する	color = 'seashell'
本日が月曜日かどうか確認する	datetime.datetime.today().weekday() == 0
縦棒プロットをプロットして棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフをライトスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
最初のを除いたデータフレームを使う	df[df.columns[1:]]
２つの浮動小数点数は十分に近いか調べる	math.isclose(x, x2)
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: ピーチパフを使う	color = 'peachpuff'
ブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームから型を抽出する	df.select_dtypes(ty)
プロットのデータラベルの位置を(x,y)に変更する	plt.legend(loc=(x, y))
セットを別のセットとの差分だけにする	セット.difference_update(セット2)
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
option: モカシンを使う	color = 'moccasin'
データシリーズの欠損値を直前の値で埋める	ds.fillna(method='ffill')
赤い破線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: フォントの色をシルバーに設定する	color = 'silver'
プログラムのファイルの名前	sys.argv[0]
円グラフでデータ列の比率を可視化する	plt.pie(データ列, startangle=90)
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
option: 星印を使用する	marker = '*'
散布図を▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
ファイルパスからファイル名を見る	os.path.basename(filepath)
n階偏微分を計算する	sympy.diff(数式, 変数, n)
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: グレー色を用いる	color = 'gray'
ミスティローズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
赤い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
部分文字列が文字列の終了位置以前にないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
SDGでクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in 文字列)
option: ボックスチャートに平均を加える	showmeans = False
範囲指定をした配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
空白で文字列を区切る	文字列.split()
赤い▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
JSON形式の文字列をパースする	data = json.loads(文字列)
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
リストを引数として展開して表示する	print(*リスト, sep=',')
リストの平均を計算する	sum(リスト)/len(リスト)
文字列がタイトルケースか調べる	文字列.istitle()
option: ダーク・スラテグレー色を使用する	color = 'darkslategrey'
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
折れ線グラフの色をダークスレートブルーに指定する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図をダイアモンドマーカーで描画する	plt.scatter(データ列x, データ列y, marker='D')
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
数式の変数の解を方程式として求める	sympy.solve(数式, 変数)
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
リストとリストの散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
表データのあるカラムの曜日が何日目か知る	df['列A'].dt.dayofweek
最大行数をnに変更する	pd.set_option('display.max_rows', n)
option: スレートブルーを用いる	color = 'slateblue'
縦棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
リストからn要素サンプリングしてリストにする	random.sample(リスト, k=n)
文字列の中の複数行対応としてパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
四分位数ごとにデータ列をビン分割する	pd.qcut(ds, 4)
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
タイムスタンプデータが日付時刻データより先か判定する	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
KNNを用いてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
指定したカラムの値を正規表現patternでまとめて置き換える	df['列A'].replace(pattern, repl, regex=True)
deqのstart番目からend番目の部分要素を使う	collections.deque(itertools.islice(deq, start, end))
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
整数が5の倍数か確認する	整数 % 5 == 0
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
option: グラフの色をオリベドラブに変更する	color = 'olivedrab'
表をグループ化し、ある列の記述統計量を算出する	df.groupby('列A').describe()['列B']
整数が1、もしくは2もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
option: マーカーをダイアモンドに変更する	marker = 'D'
末尾から空白で文字列を分割する	文字列.rsplit()
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
データシリーズの未入力値を直後の値に設定する	ds.fillna(method='bfill')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
整数が非負数でないか調べる	整数 >= 0
列の文字列長を列として見る	ds.str.len()
カウンタを少ない方からリストとして得る	aCounter.most_common()[::-1]
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
データをJSON形式の文字列に変換する	json.dumps(データ, ensure_ascii=False)
実数で浮動小数点数を割る	x / y
散布図をホットピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='hotpink')
縦方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
非数を用いる	math.nan
データフレームを列名を指定して内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
データシリーズの値を正規表現で一度にreplに置換する	ds.replace(pattern, repl, regex=True)
option: グラフの色をプラムに変更する	color = 'plum'
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ヒストグラムと勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
多次元データを多次元尺度構成法として文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
現在の日	datetime.datetime.today().day
文字列が大文字かテストする	文字列.isupper()
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
サブセットか調べる	セット.issubset(セット2)
データフレームのインデックス名をまとめて付け直す	df.rename(index={x: y})
ホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
リストと配列についての散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
xとyを改行なしに出力する	print(x, y, end='')
変数がマイナス無限大に近づくとき、極限値を計算する	sympy.limit(数式, 変数, -oo)
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
ダークスラテグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
n個にリストを等量でビン分割する	pd.qcut(aList, n)
ブール型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int32)
リストをJSONにエンコードする	json.dumps(リスト, ensure_ascii=False)
xを太字でプリントできる文字列に変換する	f'\033[1m{x}\033[0m'
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: 色をフォレストグリーンに設定する	color = 'forestgreen'
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
EUCとしてファイルをオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
整数が3の倍数かどうか調べる	整数 % 3 == 0
年月日と時間からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
リストとリストの散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
最大値でデータフレームの欠損値を置換する	df.fillna(df.max())
カウンタのそれぞれの項目をそのカウントだけ列挙する	aCounter.elements()
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ヒストグラムの色をトマトにセットする	plt.hist(データ列, color='tomato')
文字列は全て十進数字	文字列.isdecimal()
整数を整数で割った剰余	整数 % 整数2
二つの文字列をプリントする	print(文字列, 文字列)
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
option: ヘッダを自動的な連番に指定する	header = None
ソートしてデータをJSONフォーマットにエンコードする	json.dumps(データ, ensure_ascii=False, sort_keys=True)
色テーマをパステル調にする	sns.set(pallete='pastel')
データ列のノルムをそろえる	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図を赤いダイアモンドマーカーとして描く	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
データフレームの指定したカラムの第一四分位数を求める	df['列A'].quantile(0.25)
データフレームをグループ化しある列に対し最大値を求める	df.groupby('列A')['列B'].max()
option: グラフの色をダークグレーに指定する	color = 'darkgray'
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
データフレームを関数によってグループ分けし、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
数式の変数に数値を代入する	数式.subs(変数, 数値)
整数が一桁の整数	0 <= 整数 <= 9
option: ブルーバイオレットを使う	color = 'blueviolet'
指定した列の値によってデータフレームをグループ化し、基本統計量を求める	df.groupby('列A').describe()
文字列中にひとつでも数字がある	any(c.isdigit() for c in 文字列)
文字列の左側から文字を除く	文字列.lstrip(文字)
データシリーズの未入力値を直前の値で埋める	ds.fillna(method='ffill')
文字列中にひとつでも非小文字が含まれるか確認する	any(not c.islower() for c in 文字列)
日本語が文字列に使われている	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
スタッキングを用いて回帰分析を行う	sklearn.ensemble.StackingRegressor()
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
xを緑色で表示する	print(f'\033[32m{x}\033[0m')
辞書順で文字列は文字列より後か調べる	文字列 > 文字列2
グラフの中に枠なしのデータラベルを表示する	plt.legend(frameon=False)
タプルの要素が最初に見つかる場所	タプル.index(要素)
データフレームから指定されたデータ型のカラム名の一覧	df.select_dtypes(型).columns
要素がセットのメンバーか調べる	要素 in セット
ケンドールの相関係数を計算する	scipy.stats.kendalltau(配列, 配列2)
識別子がモジュールか	inspect.ismodule(識別子)
option: 破壊的に操作する	inplace = True
長さの制限した両端キューを配列から用意する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
中央値でデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
ファイルパスをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
部分文字列で文字列を末尾から区切る	文字列.rsplit(部分文字列)
行列の形を計算する	aArray.shape
JSON形式の入力ストリームを辞書に変換する	json.load(ファイル入力)
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームをグループ化しそれぞれの最大値を算出する	df.groupby('列A').max()
イテラブルとリストの散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストを連結してひとつの文字列にする	''.join(map(str, リスト))
配列とリストについての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
データフレームの末尾を見る	df.tail()
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
縦棒グラフを白色を用いて描画する	plt.bar(データ列x, データ列y, color='white')
マップからキーで指定された項目を取り除く	辞書.pop(キー)
黒い▲マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームをグループ化し、それぞれの分散を求める	df.groupby('列A').var()
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
全ての８進数字	string.octdigits
ヒストグラムをミディアムパープル色を用いて描画する	plt.hist(データ列, color='mediumpurple')
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
カラーマップを用いてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
JSONバイト列を構文解析する	json.loads(バイト列.decode('unicode-escape'))
option: やわらかい青にフォントの色を設定する	color = 'cornflowerblue'
横棒グラフをパパイヤウィップ色を用いて描画する	plt.barh(データ列x, データ列y, color='papayawhip')
辞書のコピーを作成する	dict(辞書)
入力ストリーム全体を行分割して読み込む	f.readlines()
両端キューの先頭にリストの要素を追加する	両端キュー.extendleft(リスト)
指定したカラムの値で集計し、個数を求める	df.groupby('列A').count()
3自然数の最大公約数	math.gcd(n, n2, n3)
黒い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: 読み込みモードに指定する	mode = 'r'
文字列を最後の区切り文字で分けた時の後半の文字列を取り出す	文字列.rpartition(セパレータ)[-1]
option: グラフの色をシルバーに指定する	color = 'silver'
整数が5の倍数かどうか	整数 % 5 == 0
ゼロ埋めされたブール型の行列	np.zeros(要素数, dtype=np.int32)
リストとリストについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
識別子は関数か調べる	inspect.isfunction(識別子)
二つの変数の小さい方が欲しい	min(X, Y)
リストの末尾に別のリストを加える	リスト.extend(リスト2)
ヒストグラムをゴールデンロッド色として描画する	plt.hist(データ列, color='goldenrod')
折れ線グラフの色をライムグリーンにする	plt.plot(データ列x, データ列y, color='limegreen')
ミディアムターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='mediumturquoise')
黒い四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
２つの整数の排他的論理和を求める	整数 ^ 整数2
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
半透明の一点鎖線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
プログラムを異常停止する	sys.exit(1)
データフレームのあるカラムの値がx以下の行を抽出する	df[df['列A'] <= x]
指定した列のカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
ヒストグラムをシルバー色を用いて描画する	plt.hist(データ列, color='silver')
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
青色にする	f'\033[34m{x}\033[0m'
リストの最後を除く	リスト[:-1]
データフレームの中に存在する文字列の合計を数える	df.isin([value]).sum()
文字列が全て空白文字か	文字列.isspace()
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
整数を整数に変換する	int(x)
プロットにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
データフレームのあるカラムのモード	df['列A'].mode()
データフレームの一部のカラムの値を正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの選択したカラムの中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
option: バイナリモードに変更する	mode = 'rb'
データフレームの選択した列の不偏分散を計算する	df[['列A', '列B']].var(ddof=1)
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
辞書をコピーする	辞書.copy()
データフレームのある列の平均値	df['列A'].mean()
識別子が非同期ジェネレータ	inspect.isasyncgen(識別子)
指定したカラムの母標準偏差	df['列A'].std(ddof=0)
散布図でデータフレームの全カラムをプロットする	sns.pairplot(df)
文字列のn番目をユニコードに変換する	ord(文字列[n])
ひとつでも数字が文字列中に含まれるかどうか調べる	any(c.isdigit() for c in 文字列)
データフレームの末尾100行を抽出する	df.tail(100)
整数を両端キューのn番目に挿入する	両端キュー.insert(n, 整数)
rgbの右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データシリーズの未入力値をxに設定する	ds.fillna(x)
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
イテラブルを二つ並べて箱ヒゲ図にする	plt.boxplot([データ列, データ列])
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
赤い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
整数の十六進文字列	hex(整数)[2:]
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
多次元データをt-SNEで文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームをある列をキーにして大きい順に破壊的に並べる	df.sort_values(by='列A', ascending=False, inplace=True)
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームから型を取り出す	df.select_dtypes(ty)
オブジェクトのバイトサイズを調べる	sys.getsizeof(オブジェクト)
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
データフレームのカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
JSON形式を用いてリストを出力ストリームに出力する	json.dump(リスト, ファイル出力, ensure_ascii=False)
試しに何か動かしてみる	print('Hello World')
グラフの縦横比を等しくする	plt.axis('equals')
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
OSの名前	sys.platform
変数の値を増加させる	変数 += 整数
無限に数え上げる	itertools.count()
イテラブルと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
データシリーズをタイムスタンプ型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
表データのあるカラムが何分か調べる	df['列A'].dt.minute
横棒グラフをコーンズシルク色として描画する	plt.barh(データ列x, データ列y, color='cornsilk')
kを底とする実数の対数	math.log(x, k)
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
十六進数字を全部見る	string.hexdigits
option: フォントの色をリネンに変更する	color = 'linen'
実数を小数点以下で丸める	round(x, n)
線グラフを小麦色色を使って描画する	plt.plot(データ列x, データ列y, color='wheat')
option: ダークバイオレット色を使う	color = 'darkviolet'
option: グラフの色をペールグリーンにする	color = 'palegreen'
データフレームをグループ化して、ヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
NaNも加えてデータフレームのあるカラムをダミー変数にする	pd.get_dummies(df['列A'], dummy_na=True)
文字列中の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
縦棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームの選択したカラムはどの程度、分散しているか見る	df[['列A', '列B']].var()
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
散布図をrgbの△マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列とリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
ライムグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
2数の最大値	max(x, y)
rgbの右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横軸を対数に変更する	plt.xscale('log')
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
全要素を０で初期化した３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
セットから別のセットとの共通要素を全て除く	セット.symmetric_difference_update(セット2)
タプルの要素が最初に見つかる位置	タプル.index(要素)
option: グラフの色をダーク・スラテグレーに変更する	color = 'darkslategrey'
データフレームのカラムを散布図で描画する	sns.scatterplot(data=df, x='列名', y='列名')
乱数生成系列をnで初期化する	random.seed(n)
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
赤い右三角マーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
リストとリストについて散布図を描画して、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
散布図に黒い菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
文字列の先頭から部分文字列を探す	文字列.find(部分文字列)
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: 茶色色を用いる	color = 'brown'
線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
xとyを文字列で区切って出力する	print(x, y, sep=s)
文字列中の文字を新しい文字へ置換する	文字列.replace(部分文字列, 置換後の文字列)
リストとイテラブルについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
折れ線グラフの色をミディアムスレートブルーにする	plt.plot(データ列x, データ列y, color='mediumslateblue')
オブジェクトがジェネレータ関数か調べる	inspect.isgeneratorfunction(オブジェクト)
折れ線グラフのポイントマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
実数を千の位で丸める	round(x, -3)
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
色付きの点線で数列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
xをシアンでプリントする	print(f'\033[36m{x}\033[0m')
文字列はセットのメンバー	文字列 in セット
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
グラフを論文用に設定する	sns.set(context='paper')
リストのスピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
リストをナンバリングする	enumerate(リスト)
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
浮動小数点数の最大値	sys.float_info.max
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列の両端から改行を除去する	文字列.strip('\n')
改行しないで2つの変数の値をプリントする	print(変数名, 変数名, end='')
データ列の折れ線グラフをプロットし、、カラーコードとして色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの指定したカラムを10の位で四捨五入して、整数型にする	df['列A'].round(-1).astype(int)
ある列の値がxより大きい行を抽出する	df[df['列A'] > x]
パパイヤウィップ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
散布図をrgbの上三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
項はセットのメンバーか	要素 in セット
文字列を部分文字列で二分する	文字列.partition(部分文字列)
option: グラフの種類を破線にする	linestyle = 'dashed'
オブジェクトが非同期ジェネレータ関数かどうか調べる	inspect.isasyncgenfunction(オブジェクト)
option: 淡いピンク色にグラフの色を変更する	color = 'lightpink'
option: フォントの色をスノーに指定する	color = 'snow'
option: 色を青紫に設定する	color = 'violet'
ファイルを追加できるように開く]	'a' = 'a'<nl>open(filepath, mode='a')
散布図にrgbの星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c=rgb)
入力から二つの整数値を読む	A, B = map(int, input().split())
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
タプルのn番目からn2番目の部分を抽出する	タプル[n:n2]
表計算ファイルのシートを読む	pd.read_excel('file.xlsx', sheet_name=シート名)
文字列の接頭辞がsubか調べる	文字列.startswith(部分文字列)
文字列を最後のコロンで分割して、残りを使う	文字列.rpartition(':')[-1]
辞書に別の辞書2の値を更新する	辞書.update(辞書2)
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
文字列をコロンで分割して文字列リストに変換する	文字列.split(':')
タプル内の要素が少なくとも一つ真か	any(タプル)
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
シアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
二つの集合の交わりを計算する	セット.intersection(セット2)
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
円プロットのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
整数が5の倍数かどうか判定する	整数 % 5 == 0
リストの先頭を取り除く	リスト[1:]
option: フォントの色をインディゴに指定する	color = 'indigo'
データフレームを表示するときデータフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
リストを引数として展開して表示する	print(*リスト)
散布図のバツマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
option: スプリンググリーンを使用する	color = 'springgreen'
タイムスタンプデータのタイムゾーンを使う	aDatetime.timetz()
リストとイテラブルの散布図を描画し、文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
データフレームの最初n行	df.head(n)
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategrey')
キューの長さ	len(両端キュー)
日付時刻データが日付時刻データと同時か確認する	aDatetime == aDatetime2
双方向キューの最初に文字列を追加する	両端キュー.appendleft(文字列)
要素一つのタプル	(要素,)
数列を連結してひとつの文字列にする	''.join(map(str, 数列))
グラフを淡くする	sns.set(pallete='muted')
散布図をrgbのダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
識別子がメソッドかどうか調べる	inspect.ismethod(識別子)
文字列をn回繰り返すイテラブルを得る	itertools.repeat(element, n)
変数の値をひとつ多くしたい	X += 1
小数点以下3桁までデータフレームをCSV形式に保存する	df.to_csv('file.csv', float_format='%.3f')
折れ線グラフをスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='skyblue')
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
縦棒グラフを濃い青色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
デピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
タプルの要素を小さい順にソートする	sorted(タプル, reverse=True)
横棒グラフをビスク色を使って描画する	plt.barh(データ列x, データ列y, color='bisque')
データフレームをグループ化し標準偏差を求める	df.groupby('列A').std()
データフレームのカラムの相乗平均を求める	scipy.stats.gmean(df['列A'])
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
タプルをひとつ置きに得る	タプル[::2]
option: 紺碧色を用いる	color = 'azure'
データフレームのあるカラムが何年か見る	df['列A'].dt.year
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
データシリーズの文字列を未入力値にする	ds.replace(値, np.nan)
ライトゴールドロディイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図をバリーウッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='burlywood')
折れ線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
行列の各要素の最小公倍数	np.lcm(aArray, aArray2)
リストとリストについて散布図を描画し、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
二つのカウンタの共通する要素	aCounter & aCounter2
カウンタをリセットする	aCounter.clear()
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
書き込み用に文字列の示すエンコーディングを用いてファイルをオープンする]	open(filepath, mode='w', encoding=s)
数列間の相関係数を使う	scipy.stats.pearsonr(数列, 数列2)
上限nの両端キューを準備する	collections.deque(maxlen=最大長)
最大値・最小値の範囲で一様な乱数を生成する	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
タイムスタンプデータの曜日を整数で見る	aDatetime.weekday()
折れ線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
数列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
線グラフの色をティールに変更する	plt.plot(データ列x, データ列y, color='teal')
クラス分類のPPVを計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
昇順に二つの列で破壊的にデータフレームを並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
縦棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
リストの要素を文字列として、カンマで連結する	','.join(map(str, リスト))
2つの列によって大きい順にデータフレームを並べる	df.sort_values(by=['列A', '列B'], ascending=False)
実数の正弦の逆数を求める	math.asin(x)
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
マッピングからエラーなくキーの値を参照する	辞書.get(キー, 見つからない場合の値)
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
中央値でデータフレームの欠損値を埋める	df.fillna(df.median())
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
option: 複数行に対応する	flag = re.MULTILINE
ヒストグラムの色をグリーンにセットする	plt.hist(データ列, color='green')
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
2つの列を組み合わせてグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
Excelファイルから複数のシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
昇順にインデックスによってデータフレームをソートする	df.sort_index(ascending=True)
イテラブルから長さの制限された両端キューを新規生成する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
deqから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
横棒グラフをグレー色を使って描画する	plt.barh(データ列x, データ列y, color='gray')
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
逆行列を求める	np.linalg.inv(aArray)
データフレームの指定したカラムを整数に丸める	df['列A'].round()
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
option: グラフの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
分類モデルの感度を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategray')
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
option: グラフの色をディムグレーにセットする	color = 'dimgrey'
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
option: フクシアを用いる	color = 'fuchsia'
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
最後のコロンで文字列を二分割し、前半を使う	文字列.rpartition(':')[0]
折れ線グラフの星マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
縦棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
日付データの日数を見る	aDate.day
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
ベクトルと同じ大きさの空の行列を作成する	np.empty_like(aArray)
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
option: マーカーを星に設定する	marker = '*'
数式の数値を求める	float(数式)
整数の二進数表現を見る	bin(整数)
棒グラフをアクアマリン色を使って描画する	plt.bar(データ列x, データ列y, color='aquamarine')
一０乗を求めたい	X ** 10
option: ファイルを出力にする	file = sys.open('file.txt', 'w')
散布図の▲マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
タプル内の要素が全て真か	all(タプル)
濃いシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
option: パープル色を使う	color = 'purple'
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
横棒グラフの色をダークレッドにする	plt.barh(データ列x, データ列y, color='darkred')
ベクトルの内積	np.dot(aArray, aArray2)
イテラブルから1個ランダムに選んでリストにする	random.choice(イテラブル)
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
線を半透明の破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: ライトグリーン色を用いる	color = 'lightseagreen'
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
表データのあるカラムの年を使う	df['列A'].dt.year
箱ひげ図をプロットして、平均線を追加する	plt.boxplot(データ列, meanline=True)
option: どのカラムもインデックスに設定しない	index_col = None
データフレームを表示するとき、小数点以下の表示精度をn桁に減らす	pd.set_option('precision', n)
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
条件式で「または」を書きたい	条件式 or 条件式2
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
データフレームの未入力値を直前の値にセットする	df.fillna(method='ffill')
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームのあるカラムは何日か知る	df['列A'].dt.day
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
データフレームの選択したカラムのどの値が頻出か見る	df[['列A', '列B']].mode()
グラフの描画で淡く色を使う	sns.set(pallete='muted')
散布図を黒い▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列の一意な値の個数	ds.nunique()
横棒グラフを青紫色を使って描画する	plt.barh(データ列x, データ列y, color='violet')
nの無限数列を得る	itertools.repeat(n)
クラス分類をアンサンブル学習として行う	sklearn.ensemble.VotingClassifier()
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
グラフの色を指定する	sns.set(pallete=パレット名)
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ある列の値がxに等しく、かつ別の列の値がyに等しい行を選択する	df[(df['列A'] == x) & (df['列B'] == y)]
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
リストとリストについての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
実数の仮数	math.frexp(x)[0]
折れ線グラフをダークゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データ列のユニークな値	ds.unique()
データフレームの一部のカラムを10000の位で四捨五入する	df[['列A', '列B']].round(-4)
辞書のキーを要素に設定する	辞書[キー] = element
ヒストグラムをオリベドラブ色として描画する	plt.hist(データ列, color='olivedrab')
箱ひげ図を描いて、平均線を追加する	plt.boxplot(データ列, meanline=True)
パールゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: フォントの色をゴーストホワイトにする	color = 'ghostwhite'
文字列を最後のコロンで分割した時の後半の文字列	文字列.rpartition(':')[-1]
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
タイムスタンプデータの時間	aDatetime.time()
環境はWindows	sys.platform.startswith('win32')
二つの列をキーにして降順にデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=False)
グラフの中の縦軸にキャプションをつける	plt.ylabel('y軸ラベル')
オブジェクトがコルーチンか調べる	inspect.iscoroutine(オブジェクト)
ダークオーキッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
データフレームの欠損値を直前の値に変更する	df.fillna(method='ffill')
データフレームをダミー変数に変換する	pd.get_dummies(df)
option: 色をオールドレースに変更する	color = 'oldlace'
線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
入力ストリームを全て読み込む	f.read()
黒色でxを出力する	print(f'\033[30m{x}\033[0m')
option: フォントの色をダークオーキッドに指定する	color = 'darkorchid'
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
散布図の▲マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
円プロットをきれいな円にする	plt.axis('equals')
半透明の一点鎖線としてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
無限に列を繰り返す	itertools.cycle(iterable)
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
2つのデータフレームを横方向に一つにまとめる	pd.concat([df, df2], axis=1)
真部分集合か調べる	セット < セット2
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
option: ダークオレンジを使う	color = 'darkorange'
部分文字列を文字列の後ろから探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
スピアマン相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
双方向キューのn番目に文字列を挿入する	両端キュー.insert(n, 文字列)
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ヒストグラムをライトグレー色を使って描画する	plt.hist(データ列, color='lightgray')
小数点数のハイパボリック・サインの逆数	math.asinh(x)
分類木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
データフレームのカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
文字列を空白で二つに分ける	文字列.partition()
平均でデータフレームの選択したカラムのNaNを置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
列を累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
データフレームを複数の列によって小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
リストから両端キューを生成する	collections.deque(リスト)
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
データシリーズが何時か見る	ds.dt.hour
整数の二進数文字列	bin(整数)[2:]
文字列を最後の部分文字列で二つに分けて、残りを使う	文字列.rpartition(部分文字列)[-1]
グラフのデザインを良くする	import seaborn as sns
option: レモンシフォンにグラフの色を変更する	color = 'lemonchiffon'
データフレームの一部のカラムを100の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-2).astype(int)
標準入力から1行分改行なしで読み込む	sys.stdin.readline().rstrip()
線グラフを深紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
行列の行列積を求める	np.matmul(aArray, aArray2)
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
option: 印をポイントに変更する	marker = '.'
データシリーズの中にいくつ文字列が存在するか求める	ds.isin([value]).sum()
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
浮動小数点数の2乗	x ** 2
データをインデントを指定してJSON形式にエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
リストの先頭のn要素を取り除く	リスト[n:]
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
配列の累積積を求める	np.cumprod(aArray)
正規表現に複数行対応として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データ列を指定した値を用いてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
UTF8で既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
全要素を0で初期化した配列を作る	np.zeros(要素数)
option: ライトシアン色を使う	color = 'lightcyan'
整数は集合のいづれかか	aSet = [0, 1, 2]<nl>整数 in aSet
リストが全て真か	all(リスト)
二つの列でグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
ある列の文字列が部分文字列で始まらないデータを取り出す	df[~ df['列A'].str.startswith(部分文字列)]
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
タイムスタンプをインポートする	import time
ある列の欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
rgbの左三角マーカーを数列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームをある列によって降順に並べる	df.sort_values(by='列A', ascending=False)
xを文字列に変換してファイルに書き込む	x = 0<nl>f.write(str(x))
両端キューが空	len(両端キュー) == 0
有理数モジュールを使う	import fractions
パールゴールデンロッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色を真紅に変更する	plt.hist(データ列, color='crimson')
ゼロ埋めした配列を作る	np.zeros(要素数)
option: グラフの色をペルーに設定する	color = 'peru'
option: グラフの色をビスクに設定する	color = 'bisque'
タイムスタンプデータが月曜日	aDatetime.weekday() == 0
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
実数に実数を加える	x + y
整数がセットに含まれないか調べる	数 not in セット
コンビネーション	math.comb(n, k)
データフレームの中にある文字列と文字列の数をカウントする	df.isin([value, value2]).sum()
書き込みモードでファイルをオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
整数を符号なしでバイト列に変換する	整数.to_bytes(length=バイト数, byteorder='big')
縦棒プロットを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
データ列を等量でビン数nで分割する	pd.qcut(ds, n)
棒グラフをライトグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightgrey')
異なる列をキーとしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
オブジェクトは文字列型かどうか調べる	str = int<nl>isinstance(obj, str)
クロスマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='turquoise')
実数の複素数を算出する	complex(x)
散布図を星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
ピーチパフ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
文字列が指定した文字列に含まれる	文字列 in 別の文字列
リストとイテラブルについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
アルファベットの大文字列	string.ascii_uppercase
データフレームをグループ化し、各最小値を求める	df.groupby('列A').min()
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
文字列に指定された文字がいくつあるか調べる	文字列.count(文字)
ミスティローズ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
プラットフォームの整数の最大値を確認する	sys.maxsize
イエローグリーン色でヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフに右三角印を加える	plt.plot(データ列x, データ列y, marker='>')
小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
代数計算モジュールを使用する	import sympy
文字列から指定した文字を全て除く	文字列.replace(文字, '')
大なりと書きたい	X > Y
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='gray')
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
ダークグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
特異値分解で整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
単位正方行列を初期化する	np.identity(n)
折れ線グラフの印を左三角にする	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
散布図を黒い大バツマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
CSVファイルをデータフレームとして読む	pd.read_csv('file.csv', sep=',')
線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データシリーズは何年か知る	ds.dt.year
日付時刻データの時間	aDatetime.time()
数値を改行なしにプリントする	print(数値, end='')
要素がリストの要素か調べる	要素 in リスト
リストを境界値としてデータフレームの中の列を分割する	pd.cut(df[col], aList)
現在のタイムスタンプ	int(time.time())
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
文字列を最後のセパレータで分けた時の残りの文字列を見る	文字列.rpartition(セパレータ)[-1]
データフレームの指定したカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
option: マーカーを左三角に変更する	marker = '<'
再帰の最大回数	sys.getrecursionlimit()
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
グラフの簡単な説明を表示する	plt.legend()
ケンドール順位相関係数でデータフレームの相関行列を算出する	df.corr(method='kendall')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
要素はリストの要素か調べる	要素 in リスト
散布図の上三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
mathを使う	import math
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
n個に等間隔で配列を分割する	pd.cut(aArray, n)
八進数文字列をバイト列に変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
マップ内の値をリストとして	list(辞書.values())
データフレームのある列の不偏標準偏差	df['列A'].std()
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
折れ線グラフの色をダークバイオレットに指定する	plt.plot(データ列x, データ列y, color='darkviolet')
指定したカラムの欠損値を直後の値で置き換える	df['列A'].fillna(method='bfill')
データフレームの中の欠損値の数を数える	df.isna().sum()
option: グレー色を使う	color = 'gray'
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
チョコレート色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
漢字が文字列にあるか調べる	re.search('[\u4E00-\u9FD0]', 文字列)
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
数式のyを別の数式で置き換える	数式.subs(y, 数式2)
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
散布図をrgbの下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
半透明の一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームの指定したカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
文字列が全て大文字	文字列.isupper()
折れ線グラフをダークグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='darkgreen')
option: オリベドラブ色を用いる	color = 'olivedrab'
リストを変更不能なセットにする	frozenset(リスト)
今日の年数を使う	datetime.datetime.today().year
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
整数が整数2以下かテストする	整数 <= 整数2
変数がマイナス無限大に近づく場合、数式の極限値を算出する	sympy.limit(数式, 変数, -oo)
横方向に2つのデータフレームをつなぐ	pd.concat([df, df2], axis=1)
option: 色をミディアムパープルに設定する	color = 'mediumpurple'
ヒストグラムの線の種類を一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: グラフの色をフローラルホワイトにセットする	color = 'floralwhite'
タイムスタンプデータは日付時刻データより前か	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
スカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
実行時の標準出力先がターミナル	sys.stdout.isatty()
本日のタイムスタンプを計算する	datetime.datetime.now()
日付時刻データが何年か知る	aDatetime.year
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないかどうか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
predicateFuncが真となる列の要素	itertools.dropwhile(predicateFunc, iterable)
数列とイテラブルについて散布図を描画して、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
option: ダークサーモン色を使う	color = 'darksalmon'
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
整数の無限イテレータを求める	itertools.repeat(整数)
重複を認めてランダムにデータフレームから10行をサンプリングする	df.sample(10, replace=True)
何回まで再帰ができるか、	sys.getrecursionlimit()
縦棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
数列とリストの散布図を描き、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
テンプレをarg文字列を引数としてフォーマットする	書式.format(*args)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
スプリンググリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
option: グラフの色を小麦色に設定する	color = 'wheat'
散布図の色をホワイトにする	plt.scatter(データ列x, データ列y, color='white')
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
ファイルをオープンする]	open(filepath)
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
3乗を書きたい	X ** 3
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
二つのデータフレームを列名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
デピンク色として線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフの色をイエローグリーンにする	plt.plot(データ列x, データ列y, color='yellowgreen')
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
小数点数の逆双曲線正接	math.atanh(x)
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
option: グラフの色をオレンジレッドにする	color = 'orangered'
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
カラムのSkewnessを求める	scipy.stats.skew(df['列A'], bias=False)
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
リストを集合に変換する	set(リスト)
行列の合計値	np.sum(aArray)
文字が漢字か調べる	('\u4E00' <= 文字 <= '\u9FD0')
データ列の散布図を描く	plt.scatter(データ列x, データ列y)
データフレームの指定したカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
スラグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: 文字コードを文字列の示す文字コードに設定する	encoding = s
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
デピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
モジュールとして自分自身をを使う	sys.modules[__name__]
まとめてValueMapでデータシリーズの値を置き換える	ds.replace(ValueMap)
option: 読み込まないフッタをnに設定する	skipfooter = n
縦棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
リストの各要素を空白区切りで出力する	print(*リスト)
グラフを表示する	plt.show()
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
行列の列ごとの最大値を求める	np.max(aArray, axis=0)
K-S検定を行う	scipy.stats.kstest(配列, 'norm')
option: グラフの色をやわらかい青に指定する	color = 'cornflowerblue'
ひとつでも数字が文字列中に含まれる	any(c.isdigit() for c in 文字列)
下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
マゼンタで表示できる文字列にする	f'\033[35m{x}\033[0m'
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
セットを差分のみに更新する	セット.difference_update(セット2)
データフレームの中の列をビン数nを用いてビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの色を紺にする	plt.hist(データ列, color='darkblue')
横棒グラフを描いて、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ブラック色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
日付時刻データの時刻	aDatetime.time()
整数が1もしくは2か調べる	整数 == 1 or 整数 == 2
nまでの偶整数リスト	list(range(2, n, 2))
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ValueMapでまとめて指定したカラムを置き換える	df['列A'].replace(ValueMap)
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
やわらかい青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
数式の平方根を求める	sympy.sqrt(数式)
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
option: 色をバリーウッドに設定する	color = 'burlywood'
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
リストを等量でn個にビン分割する	pd.qcut(aList, n)
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
数値をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
option: 印を大バツに変更する	marker = 'X'
数列とデータ列についての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
リストをビンニングする	pd.cut(aList, aList)
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図をターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='turquoise')
配列をn個に等間隔でビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
要素をセットから除去する	セット.remove(要素)
浮動小数点数の最大値を求める	sys.float_info.max
全般的に色をパステル調にする	sns.set(pallete='pastel')
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
文字列が全て数字	文字列.isdigit()
色付きの実線を使ってデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
リストをインデント幅を指定してJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
リストの推移を青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
等しい場合を書きたい	X == Y
ふたつの集合のいずれか一方だけの集合	セット.symmetric_difference(セット2)
コーパスのバージョン	version = 'wcce2022-0.1'
文字コードtextを用いて書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding=text)
整数同士のビット積を求める	整数 & 整数2
デフォルトでプロットをいい感じにする	sns.set()
データフレームをJSONLファイルからロードする	pd.read_json(filename, orient='records', lines=True)
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
タイムスタンプデータは何日か知る	aDatetime.day
実行環境の名前を調べる	sys.platform
現在の再帰の上限を調べる	sys.getrecursionlimit()
全ての印字可能な文字	string.printable
カラム名を指定して二つのデータフレームを右結合する	pd.merge(df, df2, on='列A', how='right')
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
文字列の末尾の文字	文字列[-1]
2つの文字列は等しくないか調べる	文字列 != 文字列2
配列から双方向キューを生成する	collections.deque(配列)
グラフをスライドに指定する	sns.set(context='talk')
以下と条件を書きたい	X <= Y
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
空のロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
カウンタから最も頻出な要素の件数	aCounter.most_common()[1]
データフレームをBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
selectorsでマスクした列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
option: 色をダークスラテグレーに設定する	color = 'darkslategray'
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
柱状グラフとしてリストを可視化する	plt.hist(データ列)
既存の配列をベースに全要素が1の配列	np.ones_like(aArray)
複数のリストをボックスチャートにする	plt.boxplot([データ列, データ列])
データシリーズを千の位で丸めて整数にする	ds.round(-3).astype(int)
赤い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームの値をValueMapで一度に置き換える	df.replace(ValueMap)
指定したカラムのカテゴリで集計し、各個数を計算する	df.groupby('列A').count()
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
ヒストグラムの色をミッドナイトブルーにする	plt.hist(データ列, color='midnightblue')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
空行を出力する	print()
シルバー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
散布図をダークレッド色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
ファイルを追加できるようにオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
二つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
エラーのメッセージ	etype, evalue, traceback = sys.exc_info()
要素がセットに含まれるか調べる	要素 in セット
変数のの種類が知りたい	type(X)
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightgreen')
プロットをポスターに設定する	sns.set(context='poster')
ゴールデンロッドにヒストグラムの色をセットする	plt.hist(データ列, color='goldenrod')
option: グラフの色をトマトにセットする	color = 'tomato'
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
タイムスタンプデータと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
文字列中にひとつでもアスキー文字が含まれるかどうか調べる	any(c.isascii() for c in 文字列)
XからYを引いた値を計算したい	X - Y
整数がセットに含まれないか	数 not in セット
ラベンダーブラッシュにヒストグラムの色を指定する	plt.hist(データ列, color='lavenderblush')
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
整数を八進数文字列にする	oct(整数)[2:]
文字は片仮名か確認する	# Tips<nl>('ァ' <= 文字 <= 'ン')
文字列を空白で二分割する	文字列.partition()
データフレーム全体をインデックスによって降順でソートする	df.sort_index(ascending=False)
マップの浅いコピーを用意する	辞書.copy()
散布図のマーカーを△にする	plt.scatter(データ列x, データ列y, marker='^')
ファイルパスを開いて]読み込みストリームを使う	'r' = 'a'<nl>open(filepath, mode='r')
nからn2までの整数列	list(range(n, n2+1))
数式処理を使用する	import sympy
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
多次元データを主成分分析で要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
option: 青緑にグラフの色を設定する	color = 'teal'
実数に実数を足す	x + y
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
カラムのKurtosis	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームの一部の列が正規分布からどの程度歪んでいるか確認する	df[['列A', '列B']].kurt()
rgbのバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: BOM付きを使用する	encoding = 'utf_8_sig'
数式の変数xについてのn階微分を計算する	sympy.diff(数式, [|変数]x, n)
プロットをスライド用に変更する	sns.set(context='talk')
複数のデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
改行なしに二つの数値をプリントする	print(数値, 数値, end='')
整数がセットのいずれか	数 in セット
option: バッファリングを無効にする	buffering = 0
データフレームの選択したカラムを丸める	df[['列A', '列B']].round()
線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
要素を双方向キューの右側から取り出す	両端キュー.pop()
オブジェクトの無限のイテラブル	itertools.repeat(element)
ヒストグラムの色をライトゴールドロディイエローにする	plt.hist(データ列, color='lightgoldenrodyellow')
イテラブルのイミュータブルな集合を作る	frozenset(イテラブル)
散布図に黒い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストを逆順にする	リスト[::-1]
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
数列と配列の散布図を描画し、、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
本日の月数	datetime.datetime.today().month
インデントを指定してデータをJSON文字列にする	json.dumps(データ, ensure_ascii=False, indent=n)
ファイルを文字列の示すエンコーディングで書き込みできるように開く]	open(filepath, mode='w', encoding=s)
イテラブルと数列についての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
配列の偏差値を求める	50 + 10 * scipy.stats.zscore(配列)
x座標の目盛を非表示にする	plt.xticks([])
文字列がパターンにマッチさせる	re.match(pattern, s)
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
option: ディムグレー色を用いる	color = 'dimgrey'
データフレームの指定したカラムの歪み	df['列A'].kurt()
option: ゲインズボロ色を使用する	color = 'gainsboro'
オブジェクトが文字列クラスか	str = int<nl>isinstance(obj, str)
青い点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
セットに文字列を追加する	セット.add(文字列)
正規分布で乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
RANSACでクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
両端キューの末尾に整数をつけ加える	両端キュー.append(整数)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
ブースティングでクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
文字列のケースをする	文字列.casefold()
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
ミディアムシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
文字列がリストにない	文字列 not in リスト
データフレームを2つの列をキーにして整列し、、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
n個の要素があるリスト	[要素] * n
黄色色としてヒストグラムを描画する	plt.hist(データ列, color='yellow')
ふたつのリストを連結する	リスト + リスト2
ベクトルの全要素を指定の値にする	aArray[:, :] = 指定の値
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
日付データが何月か知る	aDate.month
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: グラフの色をピンクに指定する	color = 'pink'
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
option: スキップする列番号をnamesで指定する	skiprows = names
色付きの一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
リストとリストの散布図を描画して、▼マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列の変遷を折れ線プロットとして可視化する	plt.plot(range(len(データ列)), データ列)
非数値データ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
リストをJSONフォーマットの文字列に変換する	json.dumps(リスト, ensure_ascii=False)
リストとリストについての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
列のNaNを直前の値で埋める	df['列A'].fillna(method='ffill')
データフレームのカーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
両端キューに要素を積む	両端キュー.append(要素)
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
マップに辞書2の項目を更新する	辞書.update(辞書2)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
データ列を箱髭図で描画する	plt.boxplot(データ列)
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
行列を一次元にする	aArray.flatten()
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
タン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
角度のラジアン	math.radians(degree)
白色を用いてヒストグラムを描画する	plt.hist(データ列, color='white')
暗い赤色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
モデルを作る	model.fit(説明変数, 目的変数)
option: 色をコーンフラワーブルーに指定する	color = 'cornflowerblue'
自然数個からk個取り出した場合の順列の総数	math.perm(n, k)
データフレームのあるカラムを10000の位で四捨五入する	df['列A'].round(-4)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
データフレームのあるカラムをドロップする	df.drop('列A', axis=1, inplace=True)
option: グラフの色をシエナに変更する	color = 'sienna'
リストの最初	リスト[0]
カウンタの最も頻出な項目	aCounter.most_common()[0]
水色でプリントできる文字列に変換する	f'\033[36m{x}\033[0m'
二つのセットが交わりを持たないかテストする	セット.isdisjoint(セット2)
データフレームのあるカラムの曜日は何日目か知る	df['列A'].dt.dayofweek
折れ線グラフの印を四角印にする	plt.plot(データ列x, データ列y, marker='s')
文字列中に空白が含まれないか調べる	any(not c.isspace() for c in 文字列)
option: 書き込みモードに設定する	mode = 'w'
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
option: フォントの色をダークオレンジに設定する	color = 'darkorange'
線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームの中である列に重複があれば、削除する	df.drop_duplicates(subset='列A', inplace=True)
クラスが名前付きタプルかどうか	issubclass(C, tuple)
リストとリストの散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
配列をビン数nを用いてビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図を紺色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームのカラムのピアソンの積立相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
行列積	np.matmul(aArray, aArray2)
棒グラフをパールバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palevioletred')
折れ線グラフを実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
文字列がセットに含まれる	文字列 in セット
線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームのデータ型の一覧	df.dtypes
青い点線を用いて配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
配列とイテラブルの散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(df['列A'], 'norm')
option: フォントの色をライトコーラルに設定する	color = 'lightcoral'
実数の値が整数か調べる	x.is_integer()
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
長さの制限された双方向キューをイテラブルから準備する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
多次元データを主成分分析として整数次元に削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
カウンタを高頻出な方からリストとして得る	aCounter.most_common()
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図に黒い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
実数が整数	x.is_integer()
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
折れ線グラフの上三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
分割数nでデータフレームの中のカラムを分割する	pd.cut(df[col], n)
データフレームを一万の位で丸める	df.round(-4)
option: 貝殻色を使う	color = 'seashell'
リストと配列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
浮動小数点数を実数で割る	x / y
横棒グラフをダークスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームの一部のカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
リストとデータ列について散布図を描画して、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
配列の正規分布を判定する	scipy.stats.shapiro(配列)
トマト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
文字列が全てアルファベット	文字列.isalpha()
リストとイテラブルについて散布図を描いて、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
散布図の印を星印にする	plt.scatter(データ列x, データ列y, marker='*')
リストをビン数nとしてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
option: グラフの色をクリムゾンに変更する	color = 'crimson'
配列を箱ひげ図で描く	plt.boxplot(データ列)
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
データ列をフォーマットとしてdatetime64型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ベクトルのユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
折れ線グラフのポイントマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
色付きの点線を用いてデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: フォントの色をパパイヤウィップに設定する	color = 'papayawhip'
ある列の文字列に部分文字列が含まれる行を取り出す	df[df['列A'].str.contains(部分文字列)]
データフレームの中のカラムをビン数nを用いてビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
マップの浅いコピーを作る	辞書.copy()
データフレームの指定したカラムの中に文字列とがいくつあるか数える	df['列A'].isin([value, value2]).sum()
棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列の末尾からタブを消す	文字列.rstrip('\t')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
データフレームのカラムの中にある文字列の合計を求める	df['列A'].isin([value]).sum()
yについて微分を行う	sympy.diff(数式, y)
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームのNaNを直前の値で埋める	df.fillna(method='ffill')
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
文字列が全て大文字か確認する	文字列.isupper()
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
文字列リストを連結する	''.join(文字列)
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
黒い▼マーカーをイテラブルとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
predicateFuncを適用したとき真とならないリストの部分	itertools.dropwhile(predicateFunc, iterable)
黒い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
rgbのバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: カンマをセパレータで使用する	sep = ','
JSONフォーマットの文字列をパースする	data = json.loads(文字列)
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
棒グラフをミディアムパープル色を使って描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
行列を2次元1行に変形する	aArray.reshape(1, -1)
散布図の星マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
折れ線グラフの色をスカイブルーにする	plt.plot(データ列x, データ列y, color='skyblue')
リストとリストについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの選択したカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
配列とリストの散布図を描画し、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
昇順にデータフレームを指定した列によって整列する	df.sort_values(by='列A', ascending=True)
option: ダークグレーを使用する	color = 'darkgray'
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
グラフを色差別なくする	sns.set(pallete='colorblind')
カウンタをリストにする	list(aCounter)
データフレームの列の中に含まれる文字列と文字列の合計をカウントする	df['列A'].isin([value, value2]).sum()
表データのあるカラムが何時か見る	df['列A'].dt.hour
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
データフレームのあるカラムが何曜日か知る	df['列A'].dt.weekday_name
折り返しを無効に指定する	pd.set_option('expand_frame_repr', False)
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームの指定した列のNaNを第二四分位数で補う	df['列A'].fillna(df['列A'].median())
日付時刻データからn時間分、引く	aDatetime - datetime.timedelta(hours=n)
数式のインテグラルを計算する	sympy.integrate(数式)
タプルをミュータブルにする	list(タプル)
sepを区切りにして文字列リストを一つの文字列にする	sep.join(文字列リスト)
option: NaNも含める	dropna = True
線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフに青い△印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
縦棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
要素がリストに含まれないか調べる	要素 not in リスト
カテゴリ列で色分けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
リストを縦軸配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
部分文字列が文字列の終了位置以前に含まれるかテストする	文字列.find(部分文字列, 0, 終了位置) != -1
ファイルからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
数列からひとつランダムに選んでリストにする	random.choice(数列)
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
改行のみプリントする	print()
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
アスキー文字が文字列中にあるかどうか調べる	any(c.isascii() for c in 文字列)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
文字列中にひとつでも非空白があるか調べる	any(not c.isspace() for c in 文字列)
データフレームのカラムの歪度	scipy.stats.skew(df['列A'], bias=False)
ファイルパスから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
ファイルをBOM付きを用いてオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
スノー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
マッピングの項目名に対応した値	辞書.get(キー, 見つからない場合の値)
データフレームの中の列をn個にビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのあるカラムは何日か調べる	df['列A'].dt.day
ブール型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
新しいロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
イテラブルから重複なく、n個ランダムに選んでリストにする	random.sample(イテラブル, k=n)
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
配列の最頻値を求める	mode, count = scipy.stats.mode(配列)
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
大量のデータが正規分布かどうか調べる	scipy.stats.kstest(df['列A'], 'norm')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
オブジェクトが抽象クラス	inspect.isabstract(オブジェクト)
タイムスタンプデータが金曜日か	aDatetime.weekday() == 4
データフレームのカラムを百の位で四捨五入する	df['列A'].round(-2)
nからn2までの整数列を使う	list(range(n, n2+1))
散布図を黒いバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='k')
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
データフレームとデータシリーズを横方向に合体させる	pd.concat([df, ds], axis=1)
option: ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
文字列の無限のイテラブル	itertools.repeat(element)
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
変数の値をひとつ減少させたい	X -= 1
エクセルファイルファイルからCSVファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
イテラブルの長さnの順列を求める	itertools.permutations(iterable, n)
表データのあるカラムの年	df['列A'].dt.year
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
データフレームのある列の値がx以下の行を抽出する	df[df['列A'] <= x]
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
データ列の推移を青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: フローラルホワイトにグラフの色を変更する	color = 'floralwhite'
本日の日付	datetime.date.today()
半透明の実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
xを水色でプリントする	print(f'\033[36m{x}\033[0m')
ファイルからの入力ストリームを使う	open(filepath)
セットの補集合を算出する	セット.difference(セット2)
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
option: 標準エラーを出力にする	file = sys.stderr
0からnまでの整数列	list(range(n+1))
行列の行列積	np.matmul(aArray, aArray2)
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
赤い実線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列の左側はsub	文字列.startswith(部分文字列)
JSONフォーマットの文字列を構文解析する	data = json.loads(文字列)
入力から二つの少数値を読む	A, B = map(float, input().split())
データフレームの一部の列の相関行列をケンドール相関係数で求める	df[['列A', '列B']].corr(method='kendall')
青色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
表計算をデータフレームとして読む	pd.read_excel('file.xlsx')
黄緑色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
右から空白で文字列を区切る	文字列.rsplit()
整数が1もしくは2、もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
配列の和	aArray + aArray2
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
ヒストグラムの色をオレンジレッドに変更する	plt.hist(データ列, color='orangered')
ヒストグラムを一点鎖線を使って描く	plt.hist(データ列, linestyle='dashbot')
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
標準出力のバッファを即時表示する	sys.stdout.flush()
符号なしで整数をバイト列に変換する	整数.to_bytes(length=バイト数, byteorder='big')
データフレームの指定したカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
スピアマンの相関係数を計算する	scipy.stats.spearmanr(df['列A'], df['列B'])
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームを万の位で丸める	df.round(-4)
画面にプロットの使途を設定する	sns.set(context='notebook')
整数同士のビット積	整数 & 整数2
有理数を使う	import fractions
グラフのデザインを綺麗にする	import seaborn as sns
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
コメントが書きたい	# コメント
文字が指定された文字列に含まれないかどうか	文字 not in 文字列
データフレームの中の列を等量でn個にビニングする	pd.qcut(df[col], n)
整数がセットに含まれるかどうか確認する	数 in セット
クロス印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの指定したカラムの下位25％	df['列A'].quantile(0.75)
データシリーズのNaNを最頻値で埋める	ds.fillna(ds.mode().iloc[0])
整数がnで割り切れるかどうか判定する	整数 % n == 0
option: ダイアモンドマーカーを描画する	marker = 'D'
カウンタを少ない方から列挙する	aCounter.most_common()[::-1]
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
ポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.')
option: グラフの色をスレートブルーに指定する	color = 'slateblue'
セットの濃度	len(セット)
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームの指定したカラムのNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
データフレームのヒストグラム付き散布図をプロットする	sns.jointplot(x='列名', y='列名', data=df)
項がセットのメンバーに含まれないかテストする	要素 not in セット
整数が偶数か	整数 % 2 == 0
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
縦棒グラフをビスク色を用いて描画する	plt.bar(データ列x, データ列y, color='bisque')
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
オブジェクトがジェネレータか確認する	inspect.isgenerator(オブジェクト)
y軸の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
option: 紺色を使う	color = 'darkblue'
データフレームを出力する	df.to_csv('file.csv')
例外の種類を見る	etype, evalue, traceback = sys.exc_info()
クロスマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの標本標準偏差	df.std(ddof=1)
ネイビー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
デックを空にする	両端キュー.clear()
ヒストグラムをライトブルー色を用いて描画する	plt.hist(データ列, color='lightblue')
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
入力ストリーム全体をリストとして読み込む	f.readlines()
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
要素がリストに含まれるか調べる	要素 in リスト
折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
option: カーキにグラフの色をする	color = 'khaki'
グリッド線	plt.grid(alpha=0.5)
整数2がn以上、かつn3以下かどうか調べる	整数 <= 整数2 and 整数2 <= n3
文字列がリストのいずれ	文字列 in リスト
ビン数nとしてデータフレームの中の列をビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
上限指定をしたデータフレームのカラムの算術平均を算出する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
あるカラムの母標準偏差を求める	df['列A'].std(ddof=0)
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
識別子がモジュールか調べる	inspect.ismodule(識別子)
ベクトル間のユークリッド距離	math.dist(point, point2)
折れ線グラフの印を三角印にする	plt.plot(データ列x, データ列y, marker='^')
要素が全て初期値の行列を作る	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
n回文字列が続くイテレータが欲しい	itertools.repeat(文字列, n)
文字列から部分文字列を全て取り除く	文字列.replace(部分文字列, '')
文字列中に英数字が存在しないか	any(not c.isalnum() for c in 文字列)
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
プラットホームのバイトオーダを求める	sys.byteorder
整数の右シフトを計算する	整数 >> n
数式の変数の解を方程式として求める	sympy.solve(数式, [|変数]x)
整数ー整数	整数 - 整数2
読み込みモードでファイルをオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
ゴールデンロッドにヒストグラムの色を変更する	plt.hist(データ列, color='goldenrod')
リストとリストについて散布図を描画し、マーカーを上三角に指定する	plt.plot(データ列x, データ列y, marker='^')
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームを関数の値によってまとめた表	df.groupby(関数)
３2ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
オブジェクトのポインタ	id(obj)
散布図に左三角印を用いる	plt.scatter(データ列x, データ列y, marker='<')
リストをランダムにシャッフルする	random.shuffle(リスト)  # 破壊的操作
両端キューの左に要素を追加する	両端キュー.appendleft(要素)
option: 淡いピンク色色を使う	color = 'lightpink'
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
縦棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
２次元リストをフラット化する	sum(リスト)
ケンドール順位相関係数を用いて表データの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='kendall')
データフレームのカラムの調和平均	scipy.stats.hmean(df['列A'])
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
辞書を用いて文字列を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
縦棒グラフを描く	plt.bar(ラベル列, データ列)
今日が日曜日かどうか判定する	datetime.datetime.today().weekday() == 6
ヒストグラムをパレットトルコイズ色を用いて描画する	plt.hist(データ列, color='paleturquoise')
xを赤色化する	f'\033[31m{x}\033[0m'
識別子が抽象クラスかどうか調べる	inspect.isabstract(識別子)
縦棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
カラムの中に文字列とがいくつあるか求める	df['列A'].isin([value, value2]).sum()
データ列をカテゴリデータにする	ds.astype(object)
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
両端キューの末尾にイテラブルの各要素を追加する	両端キュー.extend(イテラブル)
predicateFuncがTrueになるタプルの要素を得る	itertools.takewhile(predicateFunc, iterable)
xを水色にする	f'\033[36m{x}\033[0m'
クラス分類をアンサンブル学習で行う	sklearn.ensemble.VotingClassifier()
カテゴリ別で色分けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
縦棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームをグループ化し、各個数を計算する	df.groupby('列A').count()
商のみ求めたい	X // Y
識別子がジェネレータかどうか調べる	inspect.isgenerator(識別子)
データ列を度数分布図で可視化する	plt.hist(データ列)
ダークゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームから5行、サンプリングする	df.sample(5)
線グラフを貝殻色を使って描画する	plt.plot(データ列x, データ列y, color='seashell')
上限から下限の範囲でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
PLSで回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: データ型を指定する	np.int = np.int<nl>dtype = np.int
文字列リストを一つにする	''.join(文字列)
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
option: クロスマーカーを描画する	marker = 'x'
変数の値を切り捨てながら半分にする	変数 //= 2
option: 文字コードをUTF8にセットする	encoding = 'utf-8'
リストのn番目からn2番目	リスト[n:n2]
データフレームのカラムをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
クラス分類の偽陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
分類モデルの予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームの列間の相関係数をまとめて算出する	df.corr()
option: グラフの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
指定したカラムのカテゴリで集計し、それぞれの個数を計算する	df.groupby('列A').count()
赤い△マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
option: 色をブランチドアーモンドに指定する	color = 'blanchedalmond'
カテゴリで色付けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
赤い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
オブジェクトがリストかタプルかどうか調べる	isinstance(obj, (list)
データフレームのあるカラムの不偏標準偏差を求める	df['列A'].std()
カラーバーをプロットする	plt.colorbar()
濃いシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
折れ線グラフに補足を付ける	plt.plot(データ列x, データ列y, label='ラベル')
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの丸マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
両端キュー	両端キュー = collections.deque()
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
黒い菱形マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
要素はセットの要素でないか調べる	要素 not in セット
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
パターンをASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
日付時刻データが日付時刻データより後ろか	aDatetime > aDatetime2
実数の2進対数	math.log2(x)
多次元データを主成分分析を使って要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
グラフの色を濃くする	sns.set(pallete='deep')
option: フォントの色をペルーに変更する	color = 'peru'
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgrey')
タイムスタンプデータとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
現在が何分か知る	datetime.date.today().minute
文字列から接尾辞を取り除く	文字列.removesuffix(部分文字列)
大量のデータが正規分布に従うかどうか調べる	scipy.stats.kstest(配列, 'norm')
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
散布図の下三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
フォーマットとしてカラムをPandasの日付型にする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
コーンズシルク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
折れ線グラフを赤い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
整数と整数の論理和を計算する	整数 | 整数2
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
散布図を黒いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='k')
リストと配列の散布図をプロットして、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列をエラーを無視してバイト列にする	文字列.encode(errors='ignore')
N未満までの行列を作る	np.arange(N)
エポック秒のカラムから日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
散布図をスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='skyblue')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
実数を文字列に変換する	str(x)
黒い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
空白文字	' '
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データシリーズを一万の位で丸める	ds.round(-4)
option: 下三角マーカーを加える	marker = 'v'
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
データフレームをインデックスをキーにして昇順に並べる	df.sort_index(ascending=True)
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
追加できるようにBOM付きでファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
データフレームをグループ化しある列の統計量を求める	df.groupby('列A').describe()['列B']
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
option: サーモン色を使う	color = 'salmon'
アクア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: ライムグリーンにグラフの色を変更する	color = 'limegreen'
文字列を最後の区切り文字で二分割する	文字列.rpartition(セパレータ)
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
文字列が別の文字列に含まれる	文字列 in 別の文字列
行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ファイルをオープンして]、バイナリストリームを使う	'rb' = 'a'<nl>open(filepath, mode='rb')
クラス分類をスタッキングでする	sklearn.ensemble.StackingClassifier()
ライトグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
オブジェクトのプロパティの値を見る	getattr(obj, プロパティ名)
エクセルからすべてのシートを読む	pd.read_excel('file.xlsx', sheet_name=None)
サドルブラウン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
option: ライトイエローを用いる	color = 'lightyellow'
辞書のキーの一覧を見る	list(辞書)
要素が無限に続くイテレータ	itertools.repeat(要素)
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
option: マルーン色を使う	color = 'maroon'
赤い▽マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
外れ値を除いたデータフレームのカラムの算術平均を見る	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
データシリーズの曜日を使う	ds.dt.weekday_name
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
天井を求める	math.ceil(x)
配列の幾何平均を求める	scipy.stats.gmean(配列)
イテラブルを計数器に変換する	collections.Counter(iterable)
マッピングを浅く複製する	dict(辞書)
option: ベクトルのデータ型を指定する	np.int32 = np.int<nl>dtype = np.int32
あるカラムの中の欠損値の数を求める	df['列A'].isna().sum()
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームをある列によって破壊的に小さい順にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
ユニークな値を要素とする配列	np.unique(aArray)
データフレームから一つの列を抽出する	df[['列A']]
データ列を三つ並べて柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
データフレームの選択したカラムを百の位で丸める	df[['列A', '列B']].round(-2)
多次元データを多次元尺度構成法で文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
nは整数か	整数 == 整数2
option: ダークスレートブルー色を使う	color = 'darkslateblue'
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
リストの各要素に対してpredicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
横棒グラフをパレットトルコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームの不偏分散を計算する	df.var(ddof=1)
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
リストの全要素を除く	リスト.clear()
データフレームの中にいくつ日付データが含まれるか求める	df.isin([value]).sum()
タプルの合計値	sum(タプル)
option: 行列のデータ型を指定する	np.uint8 = np.int<nl>dtype = np.uint8
option: スノー色を使う	color = 'snow'
時間を使う	import time
重複していない行	df[~ df.duplicated(keep=False)]
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
青い一点鎖線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフの色をタンに指定する	plt.plot(データ列x, データ列y, color='tan')
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
ヒストグラムをパレットトルコイズ色として描画する	plt.hist(データ列, color='paleturquoise')
option: フォントの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
配列から双方向キューを作る	collections.deque(配列)
データシリーズを丸めて、整数型にする	ds.round().astype(int)
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
ファイルをEUCで開く]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
データフレームの中に含まれる文字列と文字列の個数を数える	df.isin([value, value2]).sum()
ISO書式の文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
数列をランダムにシャッフルしてリスト化する	random.sample(数列, len(数列))
option: ゴールド色を用いる	color = 'gold'
辞書からキーとその値をペアとして取り出す	辞書.items()
option: ダークグリーンを使用する	color = 'darkgreen'
クリムゾン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
クロス印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
棒グラフをブランチドアーモンド色を用いて描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームの選択したカラムを千の位で丸めて整数型にする	df[['列A', '列B']].round(-3).astype(int)
エラーなくセットから整数を除く	セット.discard(数)
データフレームの中にある日付データの合計を数える	df.isin([value]).sum()
標準出力を使う	sys.stdout
線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
両端キューに文字列をenqueueする	両端キュー.append(文字列)
データフレームの選択したカラムを100の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-2).astype(int)
散布図の右三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
セットから項を取り除く	セット.remove(要素)
ある列の文字列が部分文字列で始まるデータを抽出する	df[df['列A'].str.startswith(部分文字列)]
未入力値がある行をインプレイスでドロップする	df.dropna(inplace=True)
文字列から文字を取り除く	文字列.replace(文字, '')
要素はリストの要素	要素 in リスト
option: ダークカーキ色を用いる	color = 'darkkhaki'
リストの末尾からn番目以前の部分を取り出す	リスト[:-n]
三乗が求めたい	X ** 3
あるカラムの代表値	df['列A'].describe()
キーがマップに存在していないとき要素を追加する	辞書.setdefault(キー, element)
変数の値を一つ増やしたい	X += 1
グラフをスライド用に変更する	sns.set(context='talk')
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
option: ネイビー色を用いる	color = 'navy'
上限指定をしたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
文字列の最初を見る	文字列[0]
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
n個の数値イテラブルを求める	range(n)
折れ線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
要素がセットのいずれか調べる	要素 in セット
小数点数の余弦の逆数	x = 0.33<nl>math.acos(x)
辞書にキーが存在していない場合、処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
option: フォントの色をゴールドに設定する	color = 'gold'
実数のルート	math.sqrt(x)
ある列の中にと文字列が含まれるかどうか調べる	df['列A'].isin([value, value2])
一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
リストを折れ線グラフとして作図する	plt.plot(データ列x, データ列y)
複数の計算結果を順にプリントする	print(式, 式, 式)
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
データフレームからランダムに100行を選択する	df.sample(100)
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
改行しないで変数の値をプリントする	print(変数名, end='')
option: 色をミディアムターコイズに設定する	color = 'mediumturquoise'
折れ線グラフに下三角印を使用する	plt.plot(データ列x, データ列y, marker='v')
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
option: フクシア色を使う	color = 'fuchsia'
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
データフレームのカラムが正規分布からどの程度歪んでいるか見る	df['列A'].kurt()
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
文字列をプリントする	print(文字列)
下三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
配列の相乗平均を計算する	scipy.stats.gmean(配列)
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データシリーズの値が欠損値	ds.isna()
option: レモンシフォン色を使用する	color = 'lemonchiffon'
指定した列リストのみ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
改行なしに変数を表示する	print(変数名, end='')
option: ダークシアグリーン色を用いる	color = 'darkseagreen'
配列とリストについての散布図に赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
あるカラムの中に文字列が含まれるか	df['列A'].isin([value])
文字列を最後のカンマで分割したときの後半の文字列を取り出す	文字列.rpartition(',')[-1]
option: スラグレーにフォントの色を指定する	color = 'slategrey'
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
リストから複数個ランダムに選ぶ	random.choices(リスト, k=n)
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
タイムスタンプデータにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
標準入力から1行だけ読む	sys.stdin.readline()
数を実数で整数除算する	x // y
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
ベクトルの分散	np.var(aArray)
データフレームの指定した列の中の欠損値の数を求める	df['列A'].isna().sum()
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
スライドにグラフの目的を設定する	sns.set(context='talk')
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
パターンで文字列を分割する	re.split(pattern, s)
option: バッファリングのサイズを変更する	buffering = 4096
ある列で小さい順にデータフレームを破壊的に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
タプルをナンバリングしながら、一つずつ処理する	for i, value in enumerate(タプル):<nl><tab>print(i, value)  # value はタプルの要素
オブジェクトは論理値クラスか	bool = int<nl>isinstance(obj, bool)
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
両端キューの中に要素がある	要素 in 両端キュー
データフレームの指定したカラムの記述統計量	df['列A'].describe()
折れ線グラフに青い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ダークレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの欠損値をxに指定する	df.fillna(x)
表データのあるカラムが何時か調べる	df['列A'].dt.hour
二つの浮動小数点数が近似値	math.isclose(x, x2)
配列間のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
実数の指数部を求める	math.frexp(x)[1]
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
オブジェクトのオブジェクト識別子	id(obj)
文字列を区切り文字で二分して、前半を求める	文字列.partition(セパレータ)[0]
横棒グラフをグリーンイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='greenyellow')
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
度数分布図としてデータフレームの列をプロットする	plt.hist(df[column])
x座標の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
色付きの破線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
JSONフォーマットとして文字列をファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
option: ライトゴールドロディイエローにグラフの色をセットする	color = 'lightgoldenrodyellow'
文字列を最後のコロンで二分割し、、前半を見る	文字列.rpartition(':')[0]
辞書上でキーがまだ定義されていない	キー not in 辞書
データフレームは正規分布からどの程度尖っているか調べる	df.skew()
要素ひとつのりスト	[要素]
オブジェクトのプロパティを消す	delattr(obj, プロパティ名)
半透明の破線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
replに一度にデータシリーズを正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
非数字が文字列中に含まれる	any(not c.isdigit() for c in 文字列)
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
データシリーズの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
グリッド線を赤くする	plt.grid(color='r')
データフレームを調べる	df.head()
折れ線グラフの色を青に変更する	plt.plot(データ列x, データ列y, color='blue')
入力から二つの文字列値を取り出す	A, B = map(str, input().split())
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
リストの各要素を両端キューの末尾に追加する	両端キュー.extend(リスト)
キーが辞書に存在しないとき、要素を追加する	辞書.setdefault(キー, element)
カテゴリで色分けしてデータフレームの全列の相関を描画する	sns.pairplot(df, hue='カテゴリ列')
ビン数nでデータ列を等量でビン分割する	pd.qcut(ds, n)
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
ダークシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
カウンタの最頻出の項目を算出する	aCounter.most_common()[0]
文字列の後半から部分文字列を探す	文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
縦棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
文字列中にひとつでも大文字が存在する	any(c.isupper() for c in 文字列)
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
ビン数nとしてデータフレームの中の列を分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列の無限な列を使う	itertools.repeat(文字列)
折れ線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
色付きの点線を使って数列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
整数の16進文字列を求める	hex(整数)[2:]
縦棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
辞書にキーが存在しないならば処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
リストとリストについての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
を増加させる	変数 += 整数
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
列をタイムスタンプ型に変換する	pd.to_datetime(df['列A'])
カウンタのキーとカウントを列挙する	aCounter.items()
配列から両端キューを作成する	collections.deque(配列)
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームを整列して、新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
数列とリストについて散布図をプロットして大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
小数点以下'5'桁までをプリントする	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
データフレームの選択した列の値を正規表現でまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
整数が整数2以下または、n3以上か調べる	整数 <= 整数2 or 整数 >= n3
ゼロ埋めされた論理値型の配列を作る	np.zeros(要素数, dtype=np.int32)
リストとリストの散布図を描画し、、マーカーを上三角に指定する	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフを茶色色を用いて描画する	plt.bar(データ列x, データ列y, color='brown')
線グラフの色をダークゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='darkgoldenrod')
掛け算したい	X * Y
リストから双方向キューを新規生成する	collections.deque(リスト)
整数が非負数でないか	整数 >= 0
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
グラフの背景色を暗くする	sns.set(style='darkgrid')
線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
左に両端キューの順序を回転させる	両端キュー.rotate(-1)
option: マーカーを▼に変える	marker = 'v'
データフレームの指定した列の文字列をNaNに変換する	df['列A'].replace(値, np.nan)
option: 文字コードtextを使う	encoding = text
リストの中の最小値を求める	min(リスト)
データフレームのある列の第三四分位数	df['列A'].quantile(0.75)
CSV形式でデータフレームを保存する	df.to_csv('file.tsv', sep='\t')
折れ線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データシリーズにおいてどの値が頻出か見る	ds.mode()
オブジェクトは論理値クラスか調べる	bool = int<nl>isinstance(obj, bool)
タプルの末尾を除く	タプル[:-1]
option: グラフの色を黄色に変更する	color = 'yellow'
二つの変数を順にプリントする	print(変数名, 変数名)
文字列を最初のセパレータで二分して、残りを使う	文字列.partition(セパレータ)[-1]
option: ゲインズボロを使用する	color = 'gainsboro'
ファイルの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
複数のデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
既存のファイルをUTF8を使って追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
小さい順にタプルの要素をソートする	sorted(タプル, reverse=False)
データフレームの中にがあるか調べる	df.isin([value])
文字列を全て小文字に変換する	文字列.lower()
整数がnの倍数でないか	整数 % n != 0
要素ひとつのタプル	(要素,)
3二ビット整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
option: グリーンイエローを使う	color = 'greenyellow'
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
予測結果のアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
文字列中の部分文字列の登場	文字列.count(部分文字列)
データフレームをカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
option: 文字コードをBOM付きに指定する	encoding = 'utf_8_sig'
実数のアークサインを求める	math.asin(x)
横棒グラフをスノー色を使って描画する	plt.barh(データ列x, データ列y, color='snow')
現在の分	datetime.date.today().minute
日付データの月数	aDate.month
option: フォントの色をコーンズシルクに設定する	color = 'cornsilk'
要素がセットのいずれか	要素 in セット
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
マッピングから項目名で指定された値を取り除く	辞書.pop(キー)
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
書き込みモードとしてファイルを開いて]fとする	f = open(filepath, mode='w')
散布図を大バツ印を用いる描画する	plt.scatter(データ列x, データ列y, marker='X')
数式をyについて微分する	sympy.diff(数式, y)
option: フォントの色をダークシアグリーンに設定する	color = 'darkseagreen'
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: グラフの色をチョコレートに設定する	color = 'chocolate'
データフレームを並べ直して、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
線グラフをペルー色を用いて描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームの選択したカラムの欠損値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
折れ線グラフの上三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
タイムスタンプデータが水曜日かどうか	aDatetime.weekday() == 2
option: 無視するフッタをnに設定する	skipfooter = n
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
濃いシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
ファイルパスをEUCとして書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
実数のn乗して実数による余り	pow(x, n, y)
棒グラフを濃い青色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
列の各データ値の出現数を求める	df[col].value_counts()
option: 青緑を使う	color = 'turquoise'
ファイルを追加モードで開く]	'a' = 'a'<nl>open(filepath, mode='a')
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
空白区切りでタプルをプリントする	print(*タプル)
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
紫色で表示できる文字列にする	f'\033[35m{x}\033[0m'
option: 値を置き換える	inplace = True
xの小数点以下'1'桁まで出力する	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
黒いポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c='k')
実数が有限かどうか調べる	math.isfinite(x)
散布図を▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをダークターコイズ色として描画する	plt.hist(データ列, color='darkturquoise')
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
文字は平仮名か調べる	('ぁ' <= 文字 <= 'ん')
ホットピンクにヒストグラムの色を変更する	plt.hist(データ列, color='hotpink')
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
yについて数式をn階偏微分する	sympy.diff(数式, y, n)
ダークシアグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='darkseagreen')
青色でヒストグラムを描画する	plt.hist(データ列, color='blue')
散布図のポイント印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
赤い一点鎖線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図の菱形マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
文字列の先頭で正規表現にケースを無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの重複した行をマスクする	df.duplicated()
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
option: ダークシアンを使う	color = 'darkcyan'
ケースを無視してパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: 色をディムグレーに指定する	color = 'dimgray'
実数の双曲線正弦	math.sinh(x)
日付時刻データが日曜日か	aDatetime.weekday() == 6
データフレームから型の列を抽出する	df.select_dtypes(ty)
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
タプルのn番目のの要素	タプル[n]
文字列をパターンで分割する	re.split(pattern, s)
整数が1もしくは2、もしくは3に等しいか判定する	整数 == 1 or 整数 == 2 or 整数 == 3
長さの制限された双方向キューをリストから作る	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
ファイルが存在しないか調べる	not os.path.exists(filepath)
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
折れ線グラフをブランチドアーモンド色を使って描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
数式の数値	float(数式)
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
option: ダークオーキッドにフォントの色を指定する	color = 'darkorchid'
option: 下三角マーカーを使う	marker = 'v'
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データシリーズは何月か調べる	ds.dt.month
ガウス過程回帰モデルを作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
K最近傍法を用いて回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
option: ターコイズ色を使用する	color = 'turquoise'
関数毎にデータフレームをグループ分けし、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
文字列を区切り記号で区切り、、文字列リストにする	文字列.split(セパレータ)
順序を保持しながらリストの重複を取り除く	sorted(set(リスト), key=リスト.index)
option: フォントの色を黄緑に設定する	color = 'chartreuse'
データフレームの先頭5行を確認する	df.head(5)
データフレームのあるカラムの日にちを求める	df['列A'].dt.day
データフレームの選択したカラムの中にある文字列と日付データの数を数える	df[['列A', '列B']].isin([value, value2]).sum()
表データのあるカラムは何秒か見る	df['列A'].dt.second
xを赤色で表示できる文字列に変換する	f'\033[31m{x}\033[0m'
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
あるカラムの不偏分散	df['列A'].var(ddof=1)
ヒストグラムを濃いシアン色として描画する	plt.hist(データ列, color='darkcyan')
決まった回数の繰り返しを書きたい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
ミントクリーム色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
バイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの選択した列の第三四分位数	df[['列A', '列B']].quantile(0.75)
option: フォントの色をダークオーキッドに設定する	color = 'darkorchid'
整数が整数2未満、またはn3以上か	整数 < 整数2 or 整数 >= n3
タブを使う	'\t'
セットをコピーする	セット.copy()
要素がセットのメンバーに含まれるかどうか調べる	要素 in セット
エクセルファイルをデータフレームとしてロードする	pd.read_excel('file.xlsx')
要素を両端キューの末尾から取り出す	両端キュー.pop()
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームの指定したカラムの値を正規表現patternで一度にreplに変更する	df['列A'].replace(pattern, repl, regex=True)
データフレームのある列の値がxより小さいデータを選択する	df[df['列A'] < x]
データフレームの選択した列の標本分散	df[['列A', '列B']].var(ddof=0)
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
文字列の中でケースを無視してパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームのNaNをxで補完する	df.fillna(x)
ヒストグラムの色をサーモンに指定する	plt.hist(データ列, color='salmon')
部分文字列が文字列の指定した範囲に含まれるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
ベクトルの累積和	np.cumsum(aArray)
ふたつの整数の商を算出する	整数 / 整数2
現在の分数を見る	datetime.date.today().minute
整数を複素数にする	complex(x)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
無限に文字列が繰り返すイテラブル	itertools.repeat(element)
2つの変数をプリントする	print(変数名, 変数名)
option: グラフの色をゴールドに設定する	color = 'gold'
リストの要素を逆順にする	リスト[::-1]
文字列の中のケースを無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
CSVファイルのn行目をインデックスとして読む	pd.read_csv('file.csv', index_col=n)
箱髭図をプロットして、平均を加える	plt.boxplot(データ列, showmeans=True)
xを黒色でプリントできる文字列に変換する	f'\033[30m{x}\033[0m'
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
データ列の散らばりを図示する	plt.scatter(データ列x, データ列y)
数列とリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
横棒グラフをミディアムアクアマリン色を使って描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
タプルが空か調べる	len(タプル) == 0
リストを文字列として、'改行によって連結する	'\n'.join(map(str, リスト))
データフレームはどれだけ、分散しているか確認する	df.var()
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
が名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
色付きの点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
複数のデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=1)
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
データシリーズの中に文字列とがいくつあるか求める	ds.isin([value, value2]).sum()
データフレームの選択したカラムの中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
カテゴリ列で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
空のロバスト分類器を用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
グリッド線を白くする	plt.grid(color='w')
データフレームの選択した列の不偏標準偏差	df[['列A', '列B']].std()
リストを複製する	リスト.copy()
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
プラットホームはリナックスか	sys.platform.startswith('linux')
データフレームの指定したカラムを百の位で四捨五入する	df['列A'].round(-2)
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ふたつの集合の対称差を計算する	セット.symmetric_difference(セット2)
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
日付データのデータフレームのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
２つのデータフレームを異なる列をキーとして全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームのカラムを目的変数にする	目的変数 = df['列名']
option: スプリンググリーン色を使用する	color = 'springgreen'
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
プロットをポスター用にセットする	sns.set(context='poster')
文字列を走査し、パターンにASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
整数をバイト列にする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big')
行列は何次元か調べる	aArray.ndim
ダーク・スラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
文字列中に英数字がないかどうか判定する	any(not c.isalnum() for c in 文字列)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
ヒストグラムの色をプラムに指定する	plt.hist(データ列, color='plum')
オリベドラブ色としてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
散布図に赤い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(df['列A'], 'norm')
ファイルパスを文字列の示すエンコーディングでオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
CSVファイルを読み込む	pd.read_csv('file.csv', sep=',')
横軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
タイムスタンプデータがタイムスタンプデータと同時か確認する	aDatetime == aDatetime2
セットが空でない	len(セット) != 0
データラベルを表示する	plt.legend()
option: 色をスラグレーに設定する	color = 'slategray'
日付データのデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームの指定したカラムの中にいくつ文字列が存在するか数える	df['列A'].isin([value]).sum()
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
縦棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
リストのn番目からn2番目までの部分	リスト[n:n2]
option: 印の色を変える	markerfacecolor = '#800080'
昇順にデータフレームを２つの列でソートする	df.sort_values(by=['列A', '列B'], ascending=True)
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
オーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
データフレームから同じ内容の行をドロップする	df.drop_duplicates(inplace=True)
option: フォントの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
変数の値を整数だけ減らす	変数 -= 整数
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
option: ダーク・スラテグレー色を用いる	color = 'darkslategrey'
キュー中の文字列のインデックス	両端キュー.index(文字列)
データフレームを２つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
線形回帰モデルの回帰変数	model.coef_
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
両端キューの大きさ	len(両端キュー)
カウンタを低頻度な方から列挙する	aCounter.most_common()[::-1]
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
バリーウッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
カラムを日付データに変換する	pd.to_datetime(df['列A'])
データフレームからカラムを三つ選択する	df[['列A', '列B', '列C']]
グラフの用途を論文に設定する	sns.set(context='paper')
option: サドルブラウンを使う	color = 'saddlebrown'
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
文字が別の文字列に含まれるか調べる	文字 in 文字列
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
リストをn個に分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムのビンの数を指定する	plt.hist(データ列, bins=区関数)
ダークグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
文字列でフォーマットして本日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
nまでの偶整数列を得る	list(range(2, n, 2))
分子と分母から分数を準備する	fractions.Fraction(分子, 分母)
グラフから格子線を消す	plt.grid(False)
デックに要素をプッシュする	両端キュー.append(要素)
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
０で全要素を初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
表からカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
最後の部分文字列で文字列を二分割する	文字列.rpartition(部分文字列)
オブジェクトが非同期ジェネレータ関数	inspect.isasyncgenfunction(オブジェクト)
タブ	'\t'
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
リスト中の要素が全て真	all(リスト)
ヒストグラムの色をラベンダーブラッシュにする	plt.hist(データ列, color='lavenderblush')
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
整数がセットの要素でないか	数 not in セット
線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
ある列の文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
列の中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
データフレームがどの程度、分散しているか見る	df.var()
文字列がタイトルケースかどうか	文字列.istitle()
アイリスのデータセットからデータフレームをロードする	df = sns.load_dataset('iris')
データ列の平均２乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: チョコレート色を用いる	color = 'chocolate'
三自然数の最小公倍数を算出する	math.lcm(n, n2, n3)
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
option: エラーがあるとき例外を発生させるように変更する	errors = 'strict'
日付時刻データが日付時刻データより先か調べる	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
文字列が空白からなるか調べる	文字列.isspace()
表データのある列をインデックスにする	df.set_index('列A')
データ列とリストについて散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
二つの文字列は同じかどうか確認する	文字列 == 文字列2
データフレームの母標準偏差を求める	df.std(ddof=0)
ファイルを文字列の示すエンコーディングとして書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
リストをビン分割する	pd.cut(aList, aList)
option: UTF8を使う	encoding = 'utf-8'
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
横棒グラフをダークオリーブグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: ブランチドアーモンドを使用する	color = 'blanchedalmond'
文字列を全て大文字に変換する	文字列.upper()
リストから一つランダムに選ぶ	random.choice(リスト)
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
数列と数列についての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
改行なしに複数の文字列を表示する	print(文字列, 文字列, end='')
ファイルがあるかどうか調べる	os.path.exists(filepath)
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
実数の2乗を求める	x ** 2
リストを箱髭図にする	plt.boxplot(データ列)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
長さの制限された双方向キューをリストから作成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
プロットの色を全般的に暗くする	sns.set(pallete='dark')
要素が辞書の値に含まれていない	element not in 辞書.values()
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
二ベクトル間のユークリッド距離	math.dist(point, point2)
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
散布図に右三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='>')
横棒グラフをインディゴ色として描画する	plt.barh(データ列x, データ列y, color='indigo')
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
決定木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
辞書の浅いコピーを生成する	辞書.copy()
シエナ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
リストの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
コマンド引数を一覧として求める	sys.argv[1:]
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
文字列がリストに含まれないか調べる	文字列 not in リスト
黒い左三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: 改行しない	end = ''
データシリーズの最頻値	ds.mode()
データ列をリストを境界値としてビンニングする	pd.cut(ds, aList)
カテゴリ別でグループ化してデータフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
横棒グラフをピーチパフ色を用いて描画する	plt.barh(データ列x, データ列y, color='peachpuff')
リストのn番目を消す	del リスト[n]
ファイルから入力ストリームを使う	open(filepath)
データフレームの指定したカラムのKurtosisを求める	df['列A'].kurt()
シーグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図に△マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
リストから行列を作成する	np.array(aList)
ファイルパスの区切り記号	os.sep
ケンドール相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
データフレームの選択したカラムの平均値	df[['列A', '列B']].mean()
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームのKurtosis	df.kurt()
エクセルファイルからデータフレームをロードする	pd.read_excel('file.xlsx')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: スラグレーを使用する	color = 'slategray'
リストからn個、ランダムに選ぶ	random.choices(リスト, k=n)
部分文字列を文字列のプレフィックスから取り除く	文字列.removeprefix(部分文字列)
小麦色色としてヒストグラムを描画する	plt.hist(データ列, color='wheat')
カラム名を指定して二つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
グラフのy座標を対数に変更する	plt.yscale('log')
データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
カウンタ同士で和集合	aCounter | aCounter2
option: フォントの色をスラグレーに設定する	color = 'slategray'
ディムグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
文字列中の指定された文字をカウントする	文字列.count(文字)
オブジェクトが非同期ジェネレータか判定する	inspect.isasyncgen(オブジェクト)
実数のアークコサインを求める	x = 0.33<nl>math.acos(x)
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
rgbの左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
既存の行列を元にして全要素が0の行列	np.zeros_like(aArray)
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
文字列から接尾辞を取り除く	文字列.removeprefix(部分文字列)
オブジェクトは整数クラスかどうか確認する	int = int<nl>isinstance(obj, int)
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
ファイルパスをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
文字列中にひとつでも大文字が含まれる	any(c.isupper() for c in 文字列)
文字列がアルファベットかどうか確認する	文字列.isalpha()
折れ線グラフの▽マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
ファイルを書き込み用に文字列の示すエンコーディングで開く]	open(filepath, mode='w', encoding=s)
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
加算したい	X + Y
グラフのタイトルを設定する	plt.title('グラフの名称')
日付データの日を使う	aDate.day
一度にreplにデータシリーズの値を正規表現patternで変更する	ds.replace(pattern, repl, regex=True)
ドジャーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
真	True
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
グローバル変数の一覧を使う	globals()
ゴーストホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
列名をリストで置き換える	df.columns = columns
横軸の目盛を表示しない	plt.xticks([])
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
多次元データを主成分分析を用いて文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
辞書の項目名の一覧	list(辞書.keys())
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ユニークな各要素の出現回数	np.unique(aArray, return_counts=True)
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
データフレームの選択した列の中にいくつ日付データが存在するかカウントする	df[['列A', '列B']].isin([value]).sum()
ヒストグラムの色を赤にセットする	plt.hist(データ列, color='red')
列の名前一覧を見る	df.columns
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
データシリーズのNaNを最大値に減らす	ds.fillna(ds.max())
冪乗を求めたい	X ** Y
直前の値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(method='ffill')
折れ線グラフの三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
文字列の大文字と小文字を入れ替える	文字列.swapcase()
データフレームのn行以降取り出す	df[n:]
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
列によってデータフレームをグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
棒グラフをスノー色を用いて描画する	plt.bar(データ列x, データ列y, color='snow')
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
nから始まる無限なリスト	itertools.count(start=n)
option: マーカーの太さを指定する	markeredgewidth = 2.5
単回帰分析を行う	model = sklearn.linear_model.LinearRegression()
データシリーズの標準偏差など	ds.describe()
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
実線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
タプルの先頭の値	タプル[0]
行列は何のデータ型か調べる	aArray.dtype()
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
10を底とする対数	math.log10(x)
文字列からJSON形式のデータをロードする	data = json.loads(文字列)
データフレームをグループ化し、あるカラムに対し最大値を計算する	df.groupby('列A')['列B'].max()
指定したカラムの不偏分散	df['列A'].var(ddof=1)
３つのデータフレームを縦方向に一つにまとめる	pd.concat([df, df2, df3], axis=0)
option: エラーがあるとき例外を発生させるように設定する	errors = 'strict'
乱数で要素を埋めた行列	np.random.random(N)
データシリーズの欠損値を最頻値にする	ds.fillna(ds.mode().iloc[0])
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列から長さの制限された両端キューを作る	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
オブジェクトは非同期ジェネレータ	inspect.isasyncgen(オブジェクト)
ヒストグラムの色をブルーバイオレットに指定する	plt.hist(データ列, color='blueviolet')
option: 色をシエナに設定する	color = 'sienna'
文字列中にひとつでも小文字が含まれるかどうか判定する	any(c.islower() for c in 文字列)
データシリーズの中に存在する日付データと文字列の合計を求める	ds.isin([value, value2]).sum()
オブジェクトのバイト長	sys.getsizeof(オブジェクト)
ふたつの辞書を合体する	辞書 | 辞書2
カテゴリデータを連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ファイルをバイナリ書き込みモードを用いて開く]	'wb' = 'a'<nl>open(filepath, mode='wb')
エポック秒の列からタイムスタンプに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
配列と数列について散布図を描いて、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
配列の列ごとの合計値	np.sum(aArray, axis=0)
コマンドの第一引数	sys.argv[1]
あるカラムに重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
option: データ型として複素数型を用いる	bool = np.int<nl>dtype = bool
マップのキーに対応した値を得る	辞書[キー]
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
文字列がいつまでも繰り返す列を求める	itertools.repeat(文字列)
データフレームの選択したカラムの欠損値を最大値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データフレームの指定したカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
折れ線グラフの色をライトグレーにする	plt.plot(データ列x, データ列y, color='lightgray')
データフレームを未入力値を含めてある列でグループ化する	df.groupby('列A', dropna=False)
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
分子n、分母mの有理数を用意する	fractions.Fraction(numerator=n, denominator=m)
x軸とy軸の比率を等しくする	plt.axis('equals')
option: ダークスレートブルーにグラフの色を指定する	color = 'darkslateblue'
データフレームのカラムの尖度を見る	scipy.stats.kurtosis(df['列A'], bias=False)
要素が全て1の配列を初期化する	np.ones(要素数, dtype=np.int)
散布図の▲マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
整数を二進数表現に変換する	bin(整数)
文字列の両端から空白を取り除く	文字列.strip()
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
RGBで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
あるカラムが正規分布からどれだけ、歪んでいるか確認する	df['列A'].kurt()
データ列の相関を可視化する	plt.scatter(データ列x, データ列y)
データフレームをある列によってソートする	df.sort_values(by='列A')
option: データ型を指定する	np.int8 = np.int<nl>dtype = np.int8
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
ヒストグラムを赤色を用いて描画する	plt.hist(データ列, color='red')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
数列からn個ランダムに選んでリストにする	random.choices(数列, k=n)
浮動小数点数のn乗を計算する	x ** n
ファイルを書き込み用にEUCで開く]	open(filepath, mode='w', encoding='euc_jp')
リストを縦軸、リストを横軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
配列とデータ列の散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
変数名をキーとしてマッピング	dict(name='kogi', age=6)
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
リストからn個、ランダムに抽出する	random.choices(リスト, k=n)
棒グラフをオールドレース色を用いて描画する	plt.bar(データ列x, データ列y, color='oldlace')
データフレームのあるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの歪度	df.kurt()
散布図を赤い▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
識別子はクラスか	inspect.isclass(識別子)
データシリーズの中に文字列と文字列があるか調べる	ds.isin([value, value2])
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームのn行より後ろ選択する	df[n:]
加算を書きたい	X + Y
リストの値を昇順にソートする	sorted(リスト, reverse=True)
その中央値でデータフレームのあるカラムのNaNを埋める	df['列A'].fillna(df['列A'].median())
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
データシリーズの標準偏差を計算する	ds.std()
文字列を最後から部分文字列で区切る	文字列.rsplit(部分文字列)
黒い左三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
イテラブルにシーケンスを続けたイテラブルを得る	itertools.chain(iterable, iterable2)
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
リスト内の要素は少なくともひとつ真かどうか調べる	any(リスト)
ひとつでも英字が文字列中に存在するか調べる	any(c.isalpha() for c in 文字列)
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
EUCでファイルをオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
直後の値でデータフレームの欠損値を補う	df.fillna(method='bfill')
データフレームの不偏標準偏差	df.std()
既存のファイルを文字コードtextを使って追加できるように開く]	open(filepath, mode='a', encoding=text)
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
option: コロンを区切り記号で使う	sep = ':'
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ドジャーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
数式の因数分解を行う	sympy.factor(数式)
散布図を赤い四角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='s', c='r')
n回要素を続くイテラブル	itertools.repeat(要素, n)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
日付時刻データの日付	aDatetime.date()
リストとリストについて散布図を描画して、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
散布図をピーチパフ色を使って描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
Xの累乗を計算したい	X ** Y
文字列をJSONフォーマットとしてファイル出力に出力する	json.dump(文字列, ファイル出力, ensure_ascii=False)
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
グラフの全般的にカラーパレットを淡くする	sns.set(pallete='muted')
横棒グラフをミディアムオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
最大最小を用いてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
文字列を末尾から部分文字列で区切る	文字列.rsplit(部分文字列)
option: バイナリモードを使用する	mode = 'rb'
option: マルーンにグラフの色を設定する	color = 'maroon'
ファイルパスを開いて]書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
整数の四分の一を求める	整数 / 4
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
データシリーズの分を見る	ds.dt.minute
SJISでファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
option: 耐火レンガを使う	color = 'firebrick'
散布図にポイント印を使用する	plt.scatter(データ列x, データ列y, marker='.')
データフレームを各列毎に集約して、文字列というグループの個数を求める	df.groupby(column).size()[s]
指定した列のカテゴリで集計し、各平均値を求める	df.groupby('列A').mean()
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
option: 丸マーカーを使う	marker = 'o'
ある列の文字列が部分文字列で終わらないデータを取り出す	df[~ df['列A'].str.endswith(部分文字列)]
整数の十六進リテラルを使う	hex(整数)
横棒グラフをライトグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgray')
空白で文字列を分割し、数列にする	list(map(int, 文字列.split()))
行列の累積和	np.cumsum(aArray)
カテゴリ列で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データ列の文字列長を列として使う	ds.str.len()
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
散布図を赤いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='r')
分類モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
符号なし８ビット整数型の０で全要素を初期化した行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
散布図の右三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
もしくはと書きたい	条件式 or 条件式2
関数の値で表データをまとめた表	df.groupby(関数)
xについて数式のインテグラルを行う	sympy.integrate(数式, [|変数]x)
縦棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
暗い赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
データフレームのモードを求める	df.mode()
データ列を日付データに変換する	pd.to_datetime(ds)
部分文字列で文字列を分割して、文字列リストにする	文字列.split(部分文字列)
シルバー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
文字列からJSONフォーマットのデータをロードする	data = json.loads(文字列)
option: グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
一点鎖線に折れ線グラフの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
t-SNEで文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ケンドール相関係数でデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='kendall')
紺色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
列自身の長さnの順列を得る	itertools.permutations(iterable, n)
オブジェクトの固有のID	id(obj)
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
Xの２乗が求めたい	X ** 2
折れ線グラフの丸印の大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
日付データと日付データの時間差	aDate - aDate2
ふたつのマッピングをマージする	辞書 | 辞書2
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='grey')
option: マーカーの大きさを変更する	markersize = 2.0
割合付きの円プロットを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
線グラフの色をゲインズボロにセットする	plt.plot(データ列x, データ列y, color='gainsboro')
リストのコンビネーション	itertools.combinations(iterable, n)
辞書をインデントを指定してJSON文字列に変換する	json.dumps(辞書, ensure_ascii=False, indent=n)
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
リストと配列の散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
整数はセットのメンバーでないか	数 not in セット
辞書をJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False)
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
条件を満たす間、実行を繰り返したい	while 条件式:<nl><tab>print('繰り返し')  # 直して
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
整数の2分の1	整数 / 2
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
クラス分類の正確さを計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: 文字コードtextを用いる	encoding = text
最大値・最小値で乱数を算出する	random.randint(最小値, 最大値)
リストを折れ線グラフとして可視化する	plt.plot(データ列x, データ列y)
棒グラフを白色を用いて描画する	plt.bar(データ列x, データ列y, color='white')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
ゼロ埋めされた配列	np.zeros(要素数)
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ゴールド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
データフレームをCSVファイルにヘッダを付けず保存する	df.to_csv('file.csv', header=None)
option: 色を白に設定する	color = 'white'
グラフのデザインをデフォルトでイイ感じに指定する	sns.set()
ヒストグラムを点線として描く	plt.hist(データ列, linestyle='dotted')
データシリーズの年を使う	ds.dt.year
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
セットをタプルに変換する	tuple(セット)
データフレームのカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
2次元リストを転置する	[list(x) for x in list(zip(*aList))]
データフレームを関数によって集約してグループ名を列挙する	[name for name, _ in df.groupby(関数)]
両端キューの中に整数がある	整数 in 両端キュー
列を無限に繰り返す	itertools.cycle(iterable)
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
今日が金曜日か調べる	datetime.datetime.today().weekday() == 4
option: グラフの色を青緑に指定する	color = 'turquoise'
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
ロージーブラウン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
2つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
データフレームは何行重複するか調べる	df.duplicated().sum()
デック中の整数の位置	両端キュー.index(整数)
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
分数を用いる	import fractions
数列とリストについて散布図を描画し、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図をライトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
四分位数ごとにデータ列を分割する	pd.qcut(ds, 4)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
浮動小数点数を文字列にする	str(x)
文字列の末尾から部分文字列を取り除く	文字列.removesuffix(部分文字列)
日付データは日付データと同時	aDate == aDate2
文字が指定した文字列に含まれるか	文字 in 文字列
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
データフレームの一部のカラムを百の位で丸める	df[['列A', '列B']].round(-2)
文字列を部分文字列で二分して、前半を見る	文字列.partition(部分文字列)[0]
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフの色をブランチドアーモンドにする	plt.plot(データ列x, データ列y, color='blanchedalmond')
数列とリストについての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
リストの全値をクリアにする	リスト.clear()
データフレームをグループ化し、平均値を計算する	df.groupby('列A').mean()
option: 符号なし８ビット整数型を使う	np.uint8 = np.int<nl>dtype = np.uint8
配列から重複なく、n個ランダムに選んでリストにする	random.sample(配列, k=n)
日付時刻データの日	aDatetime.day
イテラブルを変更不能なに変換する	frozenset(イテラブル)
数式の変数xについてのn階微分を行う	sympy.diff(数式, [|変数]x, n)
文字列を文字コードエスケープでバイト列にする	文字列.encode(encoding='unicode_escape')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
棒グラフをバリーウッド色を用いて描画する	plt.bar(データ列x, データ列y, color='burlywood')
変数の値をひとつ少なくしたい	X -= 1
yが0に近づく時の数式の極限値を算出する	sympy.limit(数式, y, 0)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
未初期化の行列を作る	np.empty((行数, 列数), dtype=np.int)
データフレームの最初5行	df.head(5)
本日の曜日を整数で使う	datetime.datetime.today().weekday()
複素数型のゼロ埋めされた行列を作成する	np.zeros(要素数, dtype=bool)
整数が組のいづれかか確認する	aTuple = [0, 1, 2]<nl>整数 in aTuple
データフレームの指定したカラムを小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
subで文字列の開始位置以降が開始するか調べる	文字列.startswith(部分文字列, 開始位置)
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
プラム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
最大行数を変更する	pd.set_option('display.max_rows', n)
option: どの行もヘッダに設定しない	header = None
プロットの背景色を暗くする	sns.set(style='darkgrid')
画面にグラフの用途を指定する	sns.set(context='notebook')
データフレームを二つの列の値によってグループ化する	df.groupby(['列A', '列B'])
今日は何日か知る	datetime.datetime.today().day
配列から複数個ランダムに選んでリストにする	random.choices(配列, k=n)
カテゴリでグループ化して、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ふたつの列からグループ化し、平均値を計算する	df.groupby(['列A', '列B'], as_index=False).mean()
nと整数が等しいか	整数 == 整数2
イテラブルとリストについての散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
スピアマンの順位相関係数を算出する	scipy.stats.spearmanr(配列, 配列2)
データフレームの指定したカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
データフレームから数値データのみ抽出する	df.select_dtypes('number')
縦棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフのポイント印の太さを設定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
多次元データをt分布型確率的近傍埋め込み法で要素次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
option: 整数型を使う	np.int = np.int<nl>dtype = np.int
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
文字列が全て英数字か調べる	文字列.isalnum()
データ列の推移を色付きの実線を使って描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
x軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
オブジェクトが非同期ジェネレータ	inspect.isasyncgen(オブジェクト)
横棒プロットを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
一番左のを除いたデータフレーム	df[df.columns[1:]]
書き込み用にファイルをBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
散布図のクロスマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
オブジェクトからプロパティを消す	delattr(obj, プロパティ名)
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
タプルの要素数を調べる	len(タプル)
n回だけ文字列を置換する	文字列.replace(部分文字列, 置換後の文字列, n)
xを青色にする	f'\033[34m{x}\033[0m'
３整数の最大公約数	math.gcd(n, n2, n3)
文字列をコロンで二分して、前半を求める	文字列.partition(':')[0]
ヒストグラムをシアン色を使って描画する	plt.hist(データ列, color='cyan')
y軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
両端キューから最初の文字列を取り除く	両端キュー.remove(文字列)
データフレームの中の列を等量でビン数nを用いてビン分割する	pd.qcut(df[col], n)
二変数の最大値	max(x, y)
データフレームを関数の値でグループ化し統計量を計算する	df.groupby(関数).describe()
最初の文字列を双方向キューから取り除く	両端キュー.remove(文字列)
option: ロイヤルブルー色を使用する	color = 'royalblue'
日付を使う	import datetime
アクアマリン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
あらかじめパターンをコンパイルする	re.compile(pattern)
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
FIXME:カテゴリーデータを出現頻度順に並べる	df['列A'].value_counts().sort_index().index
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
青い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ベクトルのユニークな要素を求める	np.unique(aArray)
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
option: ライトサーモンに色をする	color = 'lightsalmon'
データフレームのあるカラムは何時か見る	df['列A'].dt.hour
下三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
option: バリーウッドを用いる	color = 'burlywood'
線グラフの色をダークレッドにセットする	plt.plot(データ列x, データ列y, color='darkred')
データシリーズが何曜日か調べる	ds.dt.weekday_name
シーケンスから多重集合を作成する	collections.Counter(iterable)
データフレームの一部のカラムの中に文字列と文字列が存在するかどうか調べる	df[['列A', '列B']].isin([value, value2])
線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
数列とリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列の順序をシャッフルする	''.join(random.sample(文字列, len(文字列)))
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
プラットホームがLinux	sys.platform.startswith('linux')
あるカラムごとの分散	df.groupby('列A').var()
あるカラムの文字列に部分文字列が存在するデータを選択する	df[df['列A'].str.contains(部分文字列)]
option: 色をミディアムブルーにセットする	color = 'mediumblue'
データフレームのあるカラムの中にいくつ欠損値が含まれるかカウントする	df['列A'].isna().sum()
n進数文字列を整数に変換する	int(文字列, n)
繰り返しを抜けたい	if 条件式:<nl><tab>break
日付時刻データにn週間分足す	aDatetime + datetime.timedelta(weeks=n)
option: ダークオリーブグリーンを使う	color = 'darkolivegreen'
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: フォントの色をミディアムターコイズに設定する	color = 'mediumturquoise'
線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
option: NaNは無視する	dropna = True
文字列リストをつなげるひとつの文字列にする	''.join(文字列)
クラス分類をニューラルネットでする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
option: マーカーを大バツに変える	marker = 'X'
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
rgbの三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
グラフをスライドに設定する	sns.set(context='talk')
少ない方からカウンタを列挙する	aCounter.most_common()[::-1]
データシリーズのNaNを平均値で補う	ds.fillna(ds.mean())
変数名はトレースバックか調べる	inspect.istraceback(識別子)
文字列が別の文字列にある	文字列 in 別の文字列
2つの数値をプリントする	print(数値, 数値)
グラフの色を全般的に暗くする	sns.set(pallete='dark')
x,yの複素数	complex(x, y)
文字列の先頭でケースを無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
表データのあるカラムの秒を使う	df['列A'].dt.second
折れ線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
アイボリー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: ロイヤルブルーを使う	color = 'royalblue'
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
実数の整数部	math.modf(x)[1]
整数が整数2より大きい	整数 > 整数2
JSONフォーマットの文字列を読む	data = json.loads(文字列)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
点線にヒストグラムを変更する	plt.hist(データ列, linestyle='dotted')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームの選択した列の欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
エクセルファイルからシートの名前を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
イテラブルと数列について散布図を描いてマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
formatのパターンとして文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: 四角マーカーを使う	marker = 's'
データフレームの上100行	df.head(100)
xとyの商と余りを同時に計算する	divmod(x, y)
データフレームを指定されたカラムによって集約して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
リストをナンバリングしながら、ひとつずつ処理する	for i, value in enumerate(リスト):<nl><tab>print(i, value)  # value はリストの要素
データフレームの選択したカラムの欠損値を前の行の値で補う	df[['列A', '列B']].fillna(method='ffill')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ファイルからJSON形式のデータを読む	with open('file.json') as f:<nl><tab>data = json.load(f)
追加できるようにファイルをオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームの不偏標準偏差を計算する	df.std()
xを緑色で出力する	print(f'\033[32m{x}\033[0m')
散布図に黒い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データフレームに重複があるか見る	df.duplicated()
折れ線グラフをマルーン色を用いて描画する	plt.plot(データ列x, データ列y, color='maroon')
逆順の両端キュー	reversed(両端キュー)
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
データフレームを二つの列の値によってグループ化し記述統計量を求める	df.groupby(['列A', '列B']).describe()
整数の無限なイテラブル	itertools.repeat(整数)
表計算ファイルファイルからカンマ区切りのファイルを文字化けしないように読む	pd.read_csv('file.csv', encoding='shift_jis')
耐火レンガ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームの内容を確認する	df.head()
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
データフレームの列の名前をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
実線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
ブルーバイオレットにヒストグラムの色を変更する	plt.hist(データ列, color='blueviolet')
三変数の最大値を求める	max(x, y, z)
option: オリーブを使用する	color = 'olive'
ファイル名がテキストファイルか調べる	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
配列の変遷を赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: イエローグリーンにフォントの色を設定する	color = 'yellowgreen'
データフレームの選択したカラムの中にとがある	df[['列A', '列B']].isin([value, value2])
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
ライトシアン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームの数値をまとめて丸める	df.round()
ハローワールドをプリントする	print('Hello World')
４乗が書きたい	X ** 4
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
データフレームの２つのカラムを並べて箱髭図として可視化する	plt.boxplot([df['カラム'], df['カラム']])
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
要素がいつまでも繰り返す列	itertools.repeat(要素)
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
半透明の一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
デクリメンタルを書きたい	X -= 1
文字列をエンコーディングによってバイト列にする	文字列.encode(encoding=encoding)
小麦色色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
データシリーズの歪度	ds.kurt()
文字列が全て空白からなるか確認する	文字列.isspace()
データフレームの選択した列の相関行列をケンドール順位相関係数を用いて求める	df[['列A', '列B']].corr(method='kendall')
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
項目名が辞書に存在しないとき、要素を追加する	辞書.setdefault(キー, element)
折れ線グラフの色をブラウンに指定する	plt.plot(データ列x, データ列y, color='brown')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
データフレームの欠損値を削除し、みる	df.dropna()
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
ファイルパスをバイナリ書き込み用にオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
両端キューの先頭にリストの各値を追加する	両端キュー.extendleft(リスト)
無限大	math.inf
データフレームの第二四分位数	df.median()
両端キューの右に要素を追加する	両端キュー.append(要素)
nからn2までのstepごとによるスライス	slice(n, n2, step)
データフレームのカラム間の相関行列を一度に求める	df.corr()
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
option: ミディアムアクアマリンに色を設定する	color = 'mediumaquamarine'
option: 丸印を用いる	marker = 'o'
線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
辞書をコピーする	dict(辞書)
カテゴリ別で色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
データフレームの指定した列の下位25％	df['列A'].quantile(0.75)
折れ線グラフに赤い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
スピアマンの相関係数を算出する	scipy.stats.spearmanr(配列, 配列2)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
本日の年数を使う	datetime.datetime.today().year
数列と数列についての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
日付データが日曜日かどうか調べる	aDate.weekday() == 6
predicateFuncがTrueとなる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
数列とリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
辞書にマップ2の値を追加する	辞書.update(辞書2)
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
ファイルパスからバイナリ書き込みストリームを開いて]fとする	f = open(filepath, mode='wb')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
カウンタを配列を出現回数して、更新する	aCounter.update(iterable)
現在が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
ヒートマップとしてクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
日付時刻データの秒	aDatetime.second
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
データフレームの欠損値を中央値にセットする	df.fillna(df.median())
差を欲しい	X - Y
データフレームのあるカラムの月を使う	df['列A'].dt.month
rgbの大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色をダーク・スラテグレーにする	plt.hist(データ列, color='darkslategrey')
ファイルを文字コードtextで書き込みできるように開く]	open(filepath, mode='w', encoding=text)
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
整数の四乗	整数 ** 4
option: 欠損値も含める	dropna = True
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
配列のトリム平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
単位正方行列	np.identity(n)
紺碧色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
データシリーズの値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
オレンジレッド色でヒストグラムを描画する	plt.hist(データ列, color='orangered')
ミディアムアクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: 追加モードを用いる	mode = 'a'
最大値が欲しい	max(X, Y)
option: エラーがあるとき、例外を発生させるように変更する	errors = 'strict'
データフレームのある列をドロップする	df.drop('列A', axis=1, inplace=True)
option: 文字コードをEUCに変更する	encoding = 'euc_jp'
ファイルにxを文字列にして書き込む	x = 0<nl>f.write(str(x))
あるカラムに重複があれば、取り除く	df.drop_duplicates(subset='列A', inplace=True)
自然数の順列の総数を求める	math.perm(n)
数が負の数か調べる	x < 0
実数を複素数にする	complex(x)
折れ線グラフの▼マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
XをYで割った商を計算したい	X // Y
ブラックにヒストグラムの色をセットする	plt.hist(データ列, color='black')
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
タイムスタンプデータは何月か知る	aDatetime.month
パールバイオレットレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
紺にヒストグラムの色を指定する	plt.hist(データ列, color='darkblue')
option: ライトグリーン色を用いる	color = 'lightgreen'
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列を部分文字列で分割して、列挙する	文字列.split(部分文字列)
に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データを最大値として正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
配列の尖度を使う	scipy.stats.kurtosis(配列, bias=False)
日付時刻データをISO8601形式の文字列に変換する	aDatetime.isoformat()
データフレームのn行目をインプレイスで除く	df.drop(n, axis=0, inplace=True)
変数の値を整数だけ減少させる	変数 -= 整数
インデックスにしてCSVファイルのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
リストとリストについて散布図をプロットして、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
両端キューの要素をインプレースに反転する	両端キュー.reverse()
オブジェクトが関数	inspect.isfunction(オブジェクト)
データ列とリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
行列の列ごとの平均を計算する	np.mean(aArray, axis=0)
リストを文字列として、タブによって連結する	'\t'.join(map(str, リスト))
データフレームがどれだけ、正規分布から尖っているか調べる	df.skew()
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
データフレームのあるカラムのNaNを平均に設定する	df['列A'].fillna(df['列A'].mean())
要素はセットのいずれでもないどうか	要素 not in セット
データフレームを表示するとき列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
サポートベクターマシンを用いて回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
カラムのスピアマンの相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
option: ホットピンクを使う	color = 'hotpink'
文字列中にひとつもASCII文字がない	any(not c.isascii() for c in 文字列)
n個の集まりからk個重複なく選ぶ方法を算出する	math.comb(n, k)
データフレームを万の位で四捨五入する	df.round(-4)
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
今日が何曜日か知る	datetime.datetime.today().weekday()
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
ヒストグラムの色をバイオレットにセットする	plt.hist(データ列, color='violet')
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
散布図のバツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
実数のn乗	pow(x, n)
日付データからn週間分減らす	aDate - datetime.timedelta(weeks=n)
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
日付データと日付データの時間差は何秒か知る	(aDate - aDate2).total_seconds()
線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
整数はリストのどれかか	aList = [0, 1, 2]<nl>整数 in aList
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
ヒストグラムと勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
セットからエラーなく要素を取り除く	セット.discard(要素)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
日付時刻データをエポック秒にする	aDatetime.timestamp()
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
本日の日付時刻	datetime.datetime.today()
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
実行を正しく終了する	sys.exit(0)
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
無限に文字列が続くイテラブルが欲しい	itertools.repeat(文字列)
データフレームの選択したカラムのNaNを直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
識別子がジェネレータかどうか確認する	inspect.isgenerator(識別子)
数列のスピアマンの順位相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
リストの変化を赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムの色をミディアムシアグリーンに変更する	plt.hist(データ列, color='mediumseagreen')
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
option: グラフの色をコーラルに設定する	color = 'coral'
データフレームの選択したカラムのNaNを直前の値に指定する	df[['列A', '列B']].fillna(method='ffill')
ある列の値がx以上y以下のデータを取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
配列のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データシリーズの欠損値を最大値に設定する	ds.fillna(ds.max())
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
リストの末尾のn要素を捨てる	リスト[:-n]
データフレームを横向きに一つにする	pd.concat([df, df2], axis=1)
リストの出現頻度を可視化する	plt.hist(データ列)
option: 文字コードを文字コードtextに設定する	encoding = text
タイムスタンプデータにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
縦棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
option: マーカーを大バツに変更する	marker = 'X'
ヒストグラムを描画する	plt.hist(データ列)
option: 菱形印を描画する	marker = 'D'
リストをリストを境界値としてビニングする	pd.cut(aList, aList)
配列の列ごとの平均	np.mean(aArray, axis=0)
シスル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
赤い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
二次元タプルをフラット化する	sum(タプル)
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
表データからn行、ランダムサンプリングする	df.sample(n)
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
文字列をバイト列に変換する	文字列.encode(encoding='utf-8', errors='strict')
配列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
option: グラフの色をライムに設定する	color = 'lime'
option: 色をネイビーに設定する	color = 'navy'
コーンズシルク色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
2つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
文字列を代数計算の変数にする	sympy.Symbol(変数名)
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
浮動小数点数の絶対値を求める	math.fabs(x)
紺色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データシリーズの記述統計量	ds.describe()
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
改行なしに2つの文字列をプリントする	print(文字列, 文字列, end='')
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
ダークゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: オールドレース色を使う	color = 'oldlace'
xを白色で表示できる文字列に変換する	f'\033[37m{x}\033[0m'
xについて数式の積分を求める	sympy.integrate(数式, [|変数]x)
実数とyの斜辺	math.hypot(x, y)
ファイルパスからベースファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データ列のエポック秒をdatetime64型にする	pd.to_datetime(ds, unit='s', utc=True)
文字列はセットのいずれか調べる	文字列 in セット
回帰分析を確率的勾配降下を用いてする	model = sklearn.linear_model.SGDRegressor()
データフレームをに箱ひげ図を用いてプロットする	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: ライトサーモン色を使用する	color = 'lightsalmon'
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームの指定したカラムの中に存在する文字列の合計を数える	df['列A'].isin([value]).sum()
データフレームのあるカラムの時を求める	df['列A'].dt.hour
指定された列によってデータフレームを並べ、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
ハローワールドとプリントする	print('Hello World')
データフレームから重複を残さず重複をドロップする	df.drop_duplicates(keep=False)
散布図の▲マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
全ての句読点文字	string.punctuation
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
本日が日曜日か確認する	datetime.datetime.today().weekday() == 6
変数の値を直したい	X = 0
option: 出力の終端に文字列を用いる	end = 文字列
折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
データシリーズの中に文字列と文字列があるか確認する	ds.isin([value, value2])
option: ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
わり算の切り上げが書きたい	(X + Y - 1) // Y
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
オブジェクトにプロパティがあるか	hasattr(obj, プロパティ名)
データフレームを表示するとき、表示可能な列数を変更する	pd.set_option('display.max_columns', n)
セパレータで文字列を二つに分ける	文字列.partition(セパレータ)
データフレームにおいてどの値が頻出か見る	df.mode()
グラフを使用する	import matplotlib.pyplot as plt
2次元リストの転置行列	[list(x) for x in list(zip(*aList))]
データフレームを配列に変換する	df.values
文字列を部分文字列で二分して、残りを使う	文字列.partition(部分文字列)[-1]
データフレームを関数によってグループ分けして、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
データ列とリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
セットを変更不能なセットに変換する	frozenset(セット)
空白区切りでタプルの要素を表示する	print(*タプル)
黒い右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの選択したカラムの上位25パーセント	df[['列A', '列B']].quantile(0.25)
データフレームの選択したカラムの尖度を算出する	df[['列A', '列B']].skew()
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
インディゴ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: 書き込み用に指定する	mode = 'w'
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
データフレームの未入力値を最小値で埋める	df.fillna(df.min())
行列の列ごとの分散を求める	np.var(aArray, axis=0)
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
ダークサーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
両端キューの末尾に配列の各要素を追加する	両端キュー.extend(配列)
文字列が全て英字	文字列.isalpha()
option: バリーウッドを使う	color = 'burlywood'
折れ線グラフの左三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
折れ線グラフの下三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
文字列を空白で二分する	文字列.partition()
浮動小数点数を実数で割って、切り捨てる	x // y
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データ列を対数する	np.log(データ列)
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
整数が整数2以下、またはn3以上か調べる	整数 <= 整数2 or 整数 >= n3
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
散布図に黒い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
貝殻色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
４乗を書きたい	X ** 4
マッピングが欲しい	辞書 = {}
データフレームのあるカラムの値がNaNかどうか	df['列A'].isna()
option: コーンズシルク色を使う	color = 'cornsilk'
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列])
補足を表示する	plt.legend()
2つの計算結果を順に出力する	print(式, 式)
option: フォントの色をラベンダーに変更する	color = 'lavender'
文字列を最後の部分文字列で二分し、前半を使う	文字列.rpartition(部分文字列)[0]
文字列を最後からコロンで分割する	文字列.rsplit(':')
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
文字列の両端から不要な空白を取り除く	文字列.strip()
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
ヒストグラムをゲインズボロ色を用いて描画する	plt.hist(データ列, color='gainsboro')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
日付時刻データと日付時刻データの時間差を計算する	aDatetime - aDatetime2
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームの選択したカラムの欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
列の各データが何回出現するか見る	df[col].value_counts()
有理数を用いる	import fractions
リスト内の要素が少なくとも一つ真	any(リスト)
セットからエラーなく項を取り除く	セット.discard(要素)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
行列のムーア・ペンローズの擬似逆行列を見る	np.linalg.pinv(aArray)
散布図を大バツマーカーを使い、描画する	plt.scatter(データ列x, データ列y, marker='X')
整数が非負数でないか確認する	整数 >= 0
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
整数が一桁の数	-9 <= 整数 <= 9
ヒストグラムを実線に変更する	plt.hist(データ列, linestyle='solid')
線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
散布図をrgbの△マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの選択したカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
n回文字列が繰り返す列	itertools.repeat(element, n)
文字列をカンマによって区切って、列挙する	文字列.split(',')
配列を分割数nで分割する	pd.cut(aArray, n)
option: シスル色を使う	color = 'thistle'
option: ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
ピアソンを用いてデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
文字列は全て十進数字か	文字列.isdecimal()
JSONフォーマットでリストを出力ストリームにダンプする	json.dump(リスト, ファイル出力, ensure_ascii=False)
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
安全に部分文字列を文字列の接頭辞から取り除く	文字列.removeprefix(部分文字列)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
指定の列に重複があれば、削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
散布図の▲印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
既存のファイルを追加できるようにUTF8を使ってオープンする]	open(filepath, mode='a', encoding='utf-8')
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
線グラフをベージュ色を用いて描画する	plt.plot(データ列x, データ列y, color='beige')
ファイルを一行ずつ読む	f.readline()
散布図の大バツ印の色を指定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
文字列をJSON形式でファイル出力に保存する	json.dump(文字列, ファイル出力, ensure_ascii=False)
整数がnの倍数かどうか確認する	整数 % n == 0
マップからキーとバリューを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
ある列のカテゴリの最大値	df.groupby('列A').max()
option: マーカーの色をホワイトにする	markerfacecolor = 'white'
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
リストから行列を作る	np.array(aList)
データシリーズが正規分布からどれだけ尖っているか調べる	ds.skew()
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
変数について微分する	sympy.diff(数式, 変数)
折れ線グラフの色をピーチパフにする	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの指定したカラムの中に文字列と文字列があるか調べる	df['列A'].isin([value, value2])
ヒートマップとしてクラス分類の予測精度を調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データフレームの列名をリストで置き換える	df.columns = columns
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
option: グラフの色を青紫に変更する	color = 'violet'
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
リストから複数個ランダムに選んでリストにする	random.choices(リスト, k=n)
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
TSVファイルから文字コードを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
辞書の浅いコピーを作る	辞書.copy()
数列からn個サンプリングしてリストにする	random.sample(数列, k=n)
英字の小文字を全部使う	string.ascii_lowercase
データフレームの一部のカラムの記述統計量をまとめて見る	df[['列A', '列B']].describe()
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
日付時刻データが日付時刻データより前か	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
リストとリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ライトグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
要素はマッピングの値として含まれている	element in 辞書.values()
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
カラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
ロバストな重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
nの無限数列	itertools.repeat(n)
文字列が空白文字からなる	文字列.isspace()
散布図の色をダークレッドにする	plt.scatter(データ列x, データ列y, color='darkred')
両端キューをタプルに変換する	tuple(両端キュー)
option: マーカーの色を青にする	markerfacecolor = 'blue'
データをL2ノルムを用いて正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: グラフの色をライトコーラルに指定する	color = 'lightcoral'
折れ線グラフの色をダークグリーンにセットする	plt.plot(データ列x, データ列y, color='darkgreen')
数列の要素を両端キューの先頭に追加する	両端キュー.extendleft(数列)
データフレームをCSV形式で出力する	df.to_csv('file.csv')
文字列は全て数値か調べる	文字列.isnumeric()
折れ線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
初めてのプログラムを書く	print('Hello World')
散布図を三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^')
プラットフォームの符号付き整数の最大値	sys.maxsize
文字列を最後の部分文字列で二分して、残りを使う	文字列.rpartition(部分文字列)[-1]
両端キュー中の要素のインデックスを求める	両端キュー.index(要素)
線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
割り算の余りの計算を書きたい	X % Y
オブジェクトがフレームか調べる	inspect.isframe(オブジェクト)
エポック秒の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>')
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
縦棒プロットをプロットして、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
y軸にラベルを設定する	plt.ylabel('y軸ラベル')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
option: パープルを用いる	color = 'purple'
データフレームの中の列を分割数nでビニングし、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: カラムの名前を連番に変更する	header = None
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
文字列が両端キューの中に存在する	文字列 in 両端キュー
文字列がスタックの中に含まれてるかテストする	文字列 in 両端キュー
シスル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
配列を連結して一つの文字列にする	''.join(map(str, 配列))
データ列を箱ヒゲ図にする	plt.boxplot(データ列)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームの選択した列のNaNを平均に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
エポック秒から日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
option: パールゴールデンロッドを使用する	color = 'palegoldenrod'
タイムスタンプデータの秒数	aDatetime.second
標準入力を使う	sys.stdin
項がセットのいずれでもないどうか	要素 not in セット
データシリーズの欠損値を直前の値に設定する	ds.fillna(method='ffill')
データをインデントを指定してJSONフォーマットにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
二つのリストの差を使う	list(set(リスト).difference(set(リスト2)))
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
両端キューの中に要素は存在するか	要素 in 両端キュー
書き込みモードとしてファイルパスを開いて]、fとする	f = open(filepath, mode='w')
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データシリーズを十の位で丸めて、整数にする	ds.round(-1).astype(int)
散布図の四角印の色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字コードの最大値を知る	sys.maxunicode
データフレームを関数の値でまとめたグループ	df.groupby(関数)
option: フォントの色をシエナにする	color = 'sienna'
データフレームから100行、ランダムサンプリングする	df.sample(100)
折れ線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
散布図をコーラル色を使って描画する	plt.scatter(データ列x, データ列y, color='coral')
セットからエラーなく文字列を取り除く	セット.discard(文字列)
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
整数が奇数かどうか判定する	整数 % 2 == 1
ヒストグラムの色をブラックに変更する	plt.hist(データ列, color='black')
リストと配列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
タン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
列からベクトルを作る	np.array(iterable)
データフレームから指定したカラムの名前一覧の列を抽出する	columns = ['列A', '列B']<nl>df[columns]
リストの中の最も大きい値を求める	max(リスト)
option: グラフの色をサーモンにする	color = 'salmon'
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
2つの変数の小さい方を欲しい	min(X, Y)
リッジ回帰モデルを作る	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
整数を双方向キューにエンキューする	両端キュー.append(整数)
識別子がメソッドか調べる	inspect.ismethod(識別子)
整数を双方向キューにenqueueする	両端キュー.append(整数)
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームを散布図でグラフ化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
option: マーカーの色をライムにする	markerfacecolor = 'lime'
option: クロスマーカーを使う	marker = 'x'
黒いダイアモンドマーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
スノー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
リストとデータ列の散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
option: 色をラベンダーブラッシュに設定する	color = 'lavenderblush'
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
日付データからn時間分減らす	aDate - datetime.timedelta(hours=n)
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームの選択したカラムの欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
正規分布に基づく累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
オリーブ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
出力ストリーム全体を行分割して読み込む	f.readlines()
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
等間隔のベクトル	np.arange(開始値, 終了値, 等差)
整数が1、もしくは2、もしくは3に等しいか	整数 == 1 or 整数 == 2 or 整数 == 3
本日が金曜日か	datetime.datetime.today().weekday() == 4
正規分布を使って乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
▽印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
実行時の標準入力の入力元がターミナルかどうか	os.isatty(sys.stdin.fileno())
半透明の点線で配列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
タプルをnから順序付けする	enumerate(タプル, start=n)
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
数列から双方向キューを生成する	collections.deque(数列)
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
線を色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
条件を満たす限り、ループさせたい	while 条件式:<nl><tab>print('繰り返し')  # 直して
option: チョコレート色を使用する	color = 'chocolate'
変数が0に近づく際の数式の極限値を求める	sympy.limit(数式, 変数, 0)
データシリーズのNaNをxに設定する	ds.fillna(x)
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
ダークシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
フローラルホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ある列の文字列が部分文字列で始まる行を選択する	df[df['列A'].str.startswith(部分文字列)]
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムをインディゴ色を用いて描画する	plt.hist(データ列, color='indigo')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
日付データにn時間を足す	aDate + datetime.timedelta(hours=n)
指定したカラムの中の未入力値の合計を数える	df['列A'].isna().sum()
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
option: ライトスレイグレー色を使う	color = 'lightslategray'
線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データシリーズは何分か見る	ds.dt.minute
文字がある文字列にあるか調べる	文字 in 文字列
辞書に辞書2のエントリを追加する	辞書.update(辞書2)
最大長nの双方向キューを作る	collections.deque(maxlen=最大長)
格子線をグラフから消す	plt.grid(False)
ヒストグラムの色をパープルに変更する	plt.hist(データ列, color='purple')
ダークカーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データ列と配列の散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフをダークターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
シアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
ファイル名がJSONファイルか調べる	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
マップのキーとその値を列挙する	辞書.items()
辞書の値として要素は含まれている	element in 辞書.values()
データフレームをCSVファイルを用いて保存する	df.to_csv('file.csv')
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
ファイルを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
Xの５乗を計算したい	X ** 5
リストと数列についての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
イテラブルのイミュータブルな集合を見る	frozenset(イテラブル)
縦棒グラフをディープスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
多次元データを多次元尺度構成法を用いて要素次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
珊瑚色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームの中の列をn個にビニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
辞書のキーに対応した値	辞書.get(キー, 見つからない場合の値)
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ダークサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
y座標の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
option: グラフの種類を一点鎖線に変更する	linestyle = 'dashbot'
イテラブルをランダムにシャッフルしてリストにする	random.sample(イテラブル, len(イテラブル))
実数のアークコサイン	x = 0.33<nl>math.acos(x)
等しくない条件を書きたい	X != Y
色付きの点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
数値をプリントする	print(数値)
変数名は関数か調べる	inspect.isfunction(識別子)
データフレームの列名一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
リストからランダムに一つ選ぶ	random.choice(リスト)
セットを別のセットとの差分だけに更新する	セット.difference_update(セット2)
データシリーズの平均値を計算する	ds.mean()
タイムスタンプデータが月曜日か	aDatetime.weekday() == 0
データフレームのあるカラムを小数点以下n桁で丸める	n = 2<nl>df['列A'].round(n)
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
散布図をrgbの三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列の開始位置番目と終了位置番目の間に部分文字列がない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
rgbの▲マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ライトシアンにヒストグラムの色を変更する	plt.hist(データ列, color='lightcyan')
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
ファイルをEUCとしてオープンする]	'euc_jp' = 'utf-8'<nl>open(filepath, encoding='euc_jp')
折れ線グラフにダイアモンド印を用いる	plt.plot(データ列x, データ列y, marker='D')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
サドルブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
青い破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
numpyを使う	import numpy as np
selectorsでマスクされた配列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
データフレームの選択したカラムの値を一度に正規表現patternで置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの指定したカラムのNaNを中央値で埋める	df['列A'].fillna(df['列A'].median())
浮動小数点数を数で割る	x / y
データフレームの一部のカラムの中にとがいくつ存在するか数える	df[['列A', '列B']].isin([value, value2]).sum()
カラーバーを横向きでプロットする	plt.colorbar(orientation='horizontal')
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
整数を整数で割る	整数 / 整数2
文字は漢字かどうか調べる	('\u4E00' <= 文字 <= '\u9FD0')
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
浮動小数点数を小数点第一位で四捨五入する	round(x, 1)
データフレームのある列をドロップし、みる	df.drop('列A', axis=1)
カラムの空文字を欠損値に変換しドロップする	df['列A'].replace('', np.nan).dropna()
印字できる文字列にする	ascii(x)
方程式として数式のパラメータの解を計算する	sympy.solve(数式, 変数)
列にシーケンスを続ける	itertools.chain(iterable, iterable2)
option: ピーチパフにフォントの色を指定する	color = 'peachpuff'
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
option: クリムゾンを使う	color = 'crimson'
日付時刻データが月曜日か	aDatetime.weekday() == 0
散布図を青緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='teal')
x軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
色付きの実線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ゼロ埋めされた行列を作成する	np.zeros(要素数)
ラインを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
最初のコロンで文字列を二分割し、、前半を求める	文字列.partition(':')[0]
グラフから格子を表示しない	plt.grid(False)
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
一点鎖線として配列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
両端キューは空	len(両端キュー) == 0
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
リストとリストについての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ドジャーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
辞書からエラーなくキーの値	辞書.get(キー, 見つからない場合の値)
ファイルパスからストリームを開き]、fileとする	file = open(filepath)
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
ケンドール順位相関係数としてデータフレームの相関行列を計算する	df.corr(method='kendall')
縦棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
自然数の順列の総数を計算する	math.perm(n)
縦軸の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
データフレームの重複を調べる	df.duplicated()
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
識別子がクラス	inspect.isclass(識別子)
データフレームのあるカラムの標本分散	df['列A'].var(ddof=0)
ファイルパスの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
データフレームを二つの列を用いて昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
大量のデータが正規分布か調べる	scipy.stats.kstest(df['列A'], 'norm')
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
数式の変数xに数値を代入する	数式.subs([|変数]x, 数値)
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
Xの十乗が求めたい	X ** 10
配列のユニークな要素	np.unique(aArray)
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
ミディアムブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ライトシアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ダークスレートブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
option: フォントの色をダークシアンに指定する	color = 'darkcyan'
グラフの縦軸の名称をuntitledに設定する	plt.ylabel('y軸ラベル')
option: アンティークホワイトにフォントの色を設定する	color = 'antiquewhite'
折れ線グラフを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフの色をダークレッドに変更する	plt.plot(データ列x, データ列y, color='darkred')
option: ペルーにグラフの色を設定する	color = 'peru'
辞書のキーの値	辞書[キー]
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームの一部のカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
散布図のポイント印の太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
折れ線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
option: 色をグレーに設定する	color = 'gray'
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
折れ線グラフの四角印の色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: 色をロイヤルブルーに指定する	color = 'royalblue'
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列をJSONにエンコードする	json.dumps(文字列, ensure_ascii=False)
グラフの用途を論文に変更する	sns.set(context='paper')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
パパイヤウィップ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
ユーザから入力される	input()
option: ミントクリームに色を変更する	color = 'mintcream'
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
ファイルからJSON形式のデータをロードする	with open('file.json') as f:<nl><tab>data = json.load(f)
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームのNaNがある箇所に色を付ける	df.style.highlight_null()
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
Excelファイルから全てのシートを読む	pd.read_excel('file.xlsx', sheet_name=None)
重複ありでn行をデータフレームからランダムにサンプリングする	df.sample(n, replace=True)
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
文字列を最後の区切り記号で二分して後半を使う	文字列.rpartition(セパレータ)[-1]
nから始まる無限列	itertools.count(start=n)
ベクトルの合計値	np.sum(aArray)
ヒストグラムの色をパールゴールデンロッドにセットする	plt.hist(データ列, color='palegoldenrod')
リストの要素を文字列として、カンマを用いてつなげる	','.join(map(str, リスト))
データフレームの未入力値を最頻値に指定する	df.fillna(df.mode().iloc[0])
ヒストグラムをミスティローズ色を使って描画する	plt.hist(データ列, color='mistyrose')
わり算を切り上げたい	(X + Y - 1) // Y
データフレームの選択したカラムの欠損値を前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
配列とイテラブルの散布図を描いて文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字列中にひとつでも英数字が含まれる	any(c.isalnum() for c in 文字列)
変数名がクラス	inspect.isclass(識別子)
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
option: ラベンダーを使う	color = 'lavender'
x座標の表示範囲を変更する	plt.xlim(最小値, 最大値)
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
タプルの各要素を関数に適用した結果でソートする	sorted(タプル, key=func)
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
データフレームの最後100行を選択する	df.tail(100)
subで文字列の開始位置以降が開始する	文字列.startswith(部分文字列, 開始位置)
オブジェクトが関数かどうか	inspect.isfunction(オブジェクト)
リストの要素を小さい方からソートする	sorted(リスト, reverse=False)
文字がひらがなかどうか調べる	('ぁ' <= 文字 <= 'ん')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ヒストグラムを暗い赤色を使って描画する	plt.hist(データ列, color='darkred')
リストは全て真	all(リスト)
CSVファイルをn番目のカラムを行にして読み込む	pd.read_csv('file.csv', index_col=n)
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームの先頭5行	df.head(5)
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
データフレームの指定した列の歪度を計算する	df['列A'].kurt()
ライトスチールブルーにヒストグラムの色を変更する	plt.hist(データ列, color='lightsteelblue')
耐火レンガにヒストグラムの色を指定する	plt.hist(データ列, color='firebrick')
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
線グラフを青緑色を使って描画する	plt.plot(データ列x, データ列y, color='teal')
四角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
カウンタの上位を列挙する	aCounter.most_common(k)
xの小数点以下'4'桁までをプリントする	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
散布図を黒いクロスマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
XをYで割った値が求めたい	X / Y
横棒グラフを黄緑色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
散布図をホワイト色として描画する	plt.scatter(データ列x, データ列y, color='white')
オリベドラブ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: フォントの色をチョコレートに指定する	color = 'chocolate'
データシリーズの中に文字列と日付データが存在するか調べる	ds.isin([value, value2])
ピーチパフ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
配列からn個ランダムに選んでリストにする	random.choices(配列, k=n)
カンマで文字列を区切り、、列挙する	文字列.split(',')
文字列は文字列より辞書順で前	文字列 < 文字列2
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
エラーのトレースバック	etype, evalue, traceback = sys.exc_info()
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
option: 青緑にグラフの色を設定する	color = 'turquoise'
線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
option: マーカーの線幅を変更する	markeredgewidth = 2.5
分子割る分母	fractions.Fraction(分子, 分母)
ヒストグラムをグリーン色を使って描画する	plt.hist(データ列, color='green')
ファイル名がTSVファイルか調べる	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
真紅色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ナバホホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
サンディーブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
ハニーデュー色としてヒストグラムを描画する	plt.hist(データ列, color='honeydew')
事前にケースを無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
option: ライム色を用いる	color = 'lime'
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのカラムのトリム分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
文字列の指定した範囲位置の間に部分文字列が含まれるか	文字列.find(部分文字列, 開始位置, 終了位置) != -1
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームの列を柱状図を用いて描画する	plt.hist(df[column])
option: 書き込み用に設定する	mode = 'w'
リストと配列について散布図をプロットして、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ライトシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
赤いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
日付データが土曜日か	aDate.weekday() == 5
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
リストとイテラブルの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
整数が整数2未満またはn3以上か	整数 < 整数2 or 整数 >= n3
リストの中の一番大きい値	max(リスト)
ライトサーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームの指定したカラムの中に含まれる文字列の合計を数える	df['列A'].isin([value]).sum()
option: サーモンにグラフの色を変更する	color = 'salmon'
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='turquoise')
文字列がセットの要素かどうか調べる	文字列 in セット
ファイルのファイル名を見る	os.path.basename(filepath)
ファイルパスを読み込み用にオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
プロットの色を明るくする	sns.set(pallete='bright')
タイムスタンプデータと日付時刻データの時間差	aDatetime - aDatetime2
より小さいと条件を書きたい	X < Y
文字列を区切り記号で二分して、残りを使う	文字列.partition(セパレータ)[-1]
リストとデータ列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
識別子がコードか調べる	inspect.iscode(識別子)
配列の内積	np.dot(aArray, aArray2)
ある列の文字列に部分文字列が含まれない行を選択する	df[~df['列A'].str.contains(部分文字列)]
条件を満たす限り、処理をループさせたい	while 条件式:<nl><tab>print('繰り返し')  # 直して
新しいサポートベクトル分類器を準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列中に部分文字列がいくつか含まれるか調べる	文字列.count(部分文字列)
オブジェクトのクラス	type(obj)
オブジェクトはタプルクラスか確認する	tuple = int<nl>isinstance(obj, tuple)
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
三乗を計算したい	X ** 3
option: フォントの色をオレンジに指定する	color = 'orange'
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
タプル内の要素が全て真か調べる	all(タプル)
グラフの色テーマを濃くする	sns.set(pallete='deep')
辞書を使ってカウンタを更新する	aCounter.update(aDict)
ひとつも大文字が文字列中にない	any(not c.isupper() for c in 文字列)
t分布型確率的近傍埋め込み法で多次元データを整数次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
文字は片仮名か調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
折れ線グラフのポイント印の色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
タイムスタンプデータをISO形式の文字列にする	aDatetime.isoformat()
折れ線グラフの星マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
データフレームを100の位で四捨五入して整数型にする	df.round(-2).astype(int)
指定したカラムの未入力値を第二四分位数に設定する	df['列A'].fillna(df['列A'].median())
option: トマトにグラフの色を設定する	color = 'tomato'
option: オリベドラブを使う	color = 'olivedrab'
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
文字列の中でケースを無視してパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
option: 淡い茶色を用いる	color = 'tan'
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
データ列の折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
書式文字列をarg文字列を引数として文字列整形する	書式.format(*args)
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
冪乗が書きたい	X ** Y
データフレームの選択した列の欠損値をその平均値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
日付時刻データの分数	aDatetime.minute
現在実行中の例外情報	etype, evalue, traceback = sys.exc_info()
N回処理を繰り返したい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
データフレームの一部のカラムの標本分散を算出する	df[['列A', '列B']].var(ddof=0)
線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
縦棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
指定した列のカテゴリで集計し、合計を計算する	df.groupby('列A').sum()
辞書をカウンタに変換する	collections.Counter(aDict)
文字列が全て小文字か確認する	文字列.islower()
データフレームの一部のカラムがどの程度、分散しているか見る	df[['列A', '列B']].var()
ポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
リストとリストの散布図を描画し、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データシリーズの欠損値を最小値に設定する	ds.fillna(ds.min())
線グラフの色をシスルに指定する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
イテラブルと数列について散布図をプロットし、、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
数式を部分分数に展開する	sympy.apart(数式)
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: EUCを用いる	encoding = 'euc_jp'
線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
配列のスピアマンの順位相関係数	scipy.stats.spearmanr(配列, 配列2)
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの列の名前をまとめて文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データラベルを加える	plt.legend(['凡例A', '凡例B'])
データシリーズの中に文字列があるかどうか調べる	ds.isin([value])
option: マーカーを△に設定する	marker = '^'
横棒グラフを耐火レンガ色を用いて描画する	plt.barh(データ列x, データ列y, color='firebrick')
option: 青紫を使う	color = 'violet'
表データのあるカラムの分	df['列A'].dt.minute
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
option: 三二ビット整数型を使う	np.int16 = np.int<nl>dtype = np.int16
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
回帰木分析を行う	model = sklearn.tree.DecisionTreeRegressor()
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ファイルパスをオープンして]、バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
option: グラフの色をオレンジレッドに変更する	color = 'orangered'
カウンタからシーケンスをカウントして引く	aCounter.subtract(iterable)
文字列はセットに含まれないかどうか	文字列 not in セット
部分文字列を文字列の接尾辞から取り除く	文字列.removesuffix(部分文字列)
複数の列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
縦方向に三つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=0)
option: オレンジにグラフの色を設定する	color = 'orange'
option: データ型としてブール型を使う	np.int32 = np.int<nl>dtype = np.int32
リストを	''.join(map(str, リスト))
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
データフレームの指定した列の中にいくつ欠損値があるか数える	df['列A'].isna().sum()
データフレームの全カラムの散らばりを描画する	sns.pairplot(df)
rgbの▲マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
最初の区切り記号で文字列を二分して、前半を求める	文字列.partition(セパレータ)[0]
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
双方向キューの末尾にリストの各要素を追加する	両端キュー.extend(リスト)
スピアマン順位相関係数としてデータフレームの相関行列を計算する	df.corr(method='spearman')
両端キューの先頭に要素を入れる	両端キュー.appendleft(要素)
グレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
文字列がリストにないか調べる	文字列 not in リスト
xを青色で表示する	print(f'\033[34m{x}\033[0m')
線グラフの線種を点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
イテラブルとシーケンスの直積	itertools.product(iterable, iterable2)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
文字列を右寄せする	文字列.rjust(文字列幅)
ある列の文字列が正規表現にマッチする行を抽出する	df[df['列A'].str.match(正規表現)]
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
xの出力を改行せず行う	print(x, end='')
データフレームの平均値を算出する	df.mean()
ヒストグラムを紺色として描画する	plt.hist(データ列, color='darkblue')
表データのあるカラムをdatetime64型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
整数同士の排他的論理和	整数 ^ 整数2
SJISでデータフレームを保存する	df.to_csv('file.csv', encoding='shift_jis')
option: 色をダークオーキッドに指定する	color = 'darkorchid'
データ列と数列の散布図を描いてマーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
既存のファイルを文字列の示す文字コードで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
二つの数値を出力する	print(数値, 数値)
改行なしに数値をプリントする	print(数値, end='')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ファイルパスを開く]	open(filepath)
散布図を赤い丸マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図をゴールド色を用いて描画する	plt.scatter(データ列x, データ列y, color='gold')
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの選択したカラムの中の欠損値の数を数える	df[['列A', '列B']].isna().sum()
データフレームの指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
文字列中の小文字を大文字にする	文字列.upper()
データフレームから指定された三つのカラムを抽出する	df[['列A', '列B', '列C']]
より小さいと書きたい	X < Y
二変数の最小値	min(x, y)
自然数最小公倍数を計算する	math.lcm(n, n2)
option: コロンを区切りで用いる	sep = ':'
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
文字列の右端から改行を取り除く	文字列.rstrip('\n')
文字列の大文字と小文字を逆にする	文字列.swapcase()
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
浮動小数点数で整数を整数除算する	x // y
タプルをカンマ区切りで表示する	print(*タプル, sep=',')
option: 色をミディアムブルーに変更する	color = 'mediumblue'
整数が配列のどれかか調べる	aArray = [0, 1, 2]<nl>整数 in aArray
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
ヒストグラムの描画し、、正規化する	plt.hist(データ列, density=True)
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
数列から重複なくn個ランダムに選んでリストにする	random.sample(数列, k=n)
option: オレンジレッドに色をする	color = 'orangered'
文字列の末尾から部分文字列を除く	文字列.rstrip(部分文字列)
４乗が求めたい	X ** 4
散布図をポイント印を用いる描画する	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
データフレームから指定した三つの列を抽出する	df[['列A', '列B', '列C']]
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
整数がセットのいずれでもないどうか	数 not in セット
識別子が関数	inspect.isfunction(識別子)
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
実数で実数を	x // y
option: アクアマリン色を使用する	color = 'aquamarine'
データフレームのカラムを散布図で描画してカテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
option: グラフの色をダークゴールデンロッドにする	color = 'darkgoldenrod'
数列から長さの制限された双方向キューを作成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
辞書をJSONフォーマットとして出力ストリームにダンプする	json.dump(辞書, ファイル出力, ensure_ascii=False)
角度のラジアンを求める	math.radians(degree)
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
数式を変数の方程式として解く	sympy.solve(数式, 変数)
散布図の印の大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
データフレームをインポートする	import pandas as pd
数式のyについてのn階微分を行う	sympy.diff(数式, y, n)
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフでデータフレームのカラムを作図する	plt.plot(df[column], df[column])
option: 欠損値は無視する	dropna = True
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
文字列の開始位置からと終了位置までの間に部分文字列がないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
折れ線グラフの印を下三角印にする	plt.plot(データ列x, データ列y, marker='v')
option: セパレータを改行にする	sep = '\n'
数列を円グラフにする	plt.pie(データ列, startangle=90)
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
プロットの中に枠なしの凡例を入れる	plt.legend(frameon=False)
ローングリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
データフレームの指定したカラムの欠損値を前の行の値に指定する	df['列A'].fillna(method='ffill')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの印を大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
日付時刻データをタプルに変換する	aDatetime.timetuple()
二つのデータフレームを列名を指定して右ジョインする	pd.merge(df, df2, on='列A', how='right')
リストを等量で分割数nでビン分割する	pd.qcut(aList, n)
辞書にキーが存在しないとき、処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
deqのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
列の種類	df.info()
リストをビン数nとして分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
リストを等量でn個に分割する	pd.qcut(aList, n)
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
折れ線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
変数の値の出力を改行しなくて行う	print(変数名, end='')
year年month月day日の日付をオブジェクト化する	datetime.date(year=year, month=month, day=day)
ふたつのセットが互いに素か調べる	セット.isdisjoint(セット2)
最初のカテゴリーを除外してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
option: グラフの線の種類を破線に設定する	linestyle = 'dashed'
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
ピーチパフ色としてヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
横棒グラフを小麦色色を使って描画する	plt.barh(データ列x, データ列y, color='wheat')
option: 真紅色を使う	color = 'crimson'
配列を分割数nでビン分割する	pd.cut(aArray, n)
リストを両端キューに変換する	collections.deque(リスト)
option: カラム名をリストで設定する	names = 列名リスト
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
option: バツマーカーを用いる	marker = 'x'
クラス分類のPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
整数を整数で割った余りを求める	整数 % 整数2
文字列がセットのいずれかどうか調べる	文字列 in セット
option: 行を自動的な連番にする	index_col = None
モカシン色としてヒストグラムを描画する	plt.hist(データ列, color='moccasin')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: クリムゾンにフォントの色を設定する	color = 'crimson'
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
要素が辞書の値に含まれていないかどうか	element not in 辞書.values()
方程式として数式の変数の解を求める	sympy.solve(数式, 変数)
日付時刻データにn週間を足す	aDatetime + datetime.timedelta(weeks=n)
サドルブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
グラフに鉛直方向の点線をつける	plt.axvline(x=0, linestyle='dotted')
ベージュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
文字列を最後のカンマで二分し、、後ろの方を見る	文字列.rpartition(',')[-1]
クラス分類のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
２つの列によってデータフレームを集計する	df.groupby(['列A', '列B'])
rgbの四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ベクトルの列ごとの合計	np.sum(aArray, axis=0)
再帰の上限を確認する	sys.getrecursionlimit()
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
option: 淡いピンク色色を用いる	color = 'lightpink'
整数が一桁の数かどうか	-9 <= 整数 <= 9
リストと数列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
ピアソンでデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
リストを番号付けする	enumerate(リスト)
option: 配列のデータ型を指定する	np.int8 = np.int<nl>dtype = np.int8
文字列を代数計算の変数に変換する	sympy.Symbol(変数名)
散布図を丸マーカーを用いる描画する	plt.scatter(データ列x, データ列y, marker='o')
回帰分析を行う	model = sklearn.linear_model.LinearRegression()
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
切片なしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
日付データをタプルに変換する	aDate.timetuple()
データフレームの指定したカラムを丸めて、整数にする	df['列A'].round().astype(int)
option: グラフの色をオリーブに設定する	color = 'olive'
正規分布で疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
日付データのデータフレームのあるカラムを表データのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
文字列中の小文字を大文字に変換する	文字列.upper()
文字列が双方向キューの中に含まれてる	文字列 in 両端キュー
option: シャルトリューズ色を用いる	color = 'chartreuse'
数式を変数xについてn階微分する	sympy.diff(数式, [|変数]x, n)
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
データフレームから型のカラムだけ取り出す	df.select_dtypes(ty)
ソートして文字列をJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
データフレームの列名リストで指定された列を除く	df.drop(columns, axis=1, inplace=True)
データフレームの50パーセンタイルを求める	df.median()
三乗が欲しい	X ** 3
n回整数が繰り返すイテラブルを求める	itertools.repeat(整数, n)
正規分布によるパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ヒストグラムを描いて、ビン数を変更する	plt.hist(データ列, bins=区関数)
黒色でプリントできる文字列に変換する	f'\033[30m{x}\033[0m'
枠なしの凡例を付ける	plt.legend(frameon=False)
現在の時間	datetime.date.today().hour
モデルの精度を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ヒストグラムをスレートブルー色を用いて描画する	plt.hist(データ列, color='slateblue')
文字列を文字リストにする	list(文字列)
ヒストグラムを破線でプロットする	plt.hist(データ列, linestyle='dashed')
オーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
右三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
カウンタ同士で積集合	aCounter & aCounter2
データシリーズのタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
赤いバツマーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
黒い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
辞書で文字列を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
データフレームの選択したカラムの母標準偏差を算出する	df[['列A', '列B']].std(ddof=0)
入力から二つの整数を読み込む	A, B = map(int, input().split())
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
オブジェクトの属性を削除する	delattr(obj, プロパティ名)
ファイルパスをオープンして]書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
表計算からシート名を指定して読む	pd.read_excel('file.xlsx', sheet_name=シート名)
モカシン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
変数の値を増加させたい	X += 1
ピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ヒストグラムを3つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: グラフの色を青緑に指定する	color = 'teal'
行列の列	aArray[:, 列番号]
文字列の接尾辞がか判定する	文字列.endswith(部分文字列)
実数の双曲線余弦の逆数を計算する	math.acosh(x)
ロバストな線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データシリーズを四捨五入して、整数型にする	ds.round().astype(int)
プロットの縦軸を対数に変更する	plt.yscale('log')
赤い破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームの一部の列の第一四分位数を求める	df[['列A', '列B']].quantile(0.25)
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
スプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
黒い左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
双方向キューの先頭に文字列を入れる	両端キュー.appendleft(文字列)
配列をn個にビン分割する	pd.cut(aArray, n)
散布図の▲印を赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
指定した列のみ、データフレームの重複を見る	df.duplicated(subset='列A')
NaNのある行をドロップする	df.dropna(inplace=True)
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
タイタニック号のデータセットからデータフレームをロードする	df = sns.load_dataset('titanic')
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
整数の八進文字列を求める	oct(整数)[2:]
グラフから目盛線を消す	plt.grid(False)
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
部分分数として数式を展開する	sympy.apart(数式)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
データフレームのある列のNaNを最大値に指定する	df['列A'].fillna(df['列A'].max())
折れ線グラフの色をカーキにする	plt.plot(データ列x, データ列y, color='khaki')
データフレームの列を折れ線プロットを用いて作図する	plt.plot(df[column], df[column])
日付時刻データが金曜日か確認する	aDatetime.weekday() == 4
CSVをn番目のカラムを行として読み込む	pd.read_csv('file.csv', index_col=n)
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
ロバストな重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
行列の次元の数	aArray.ndim
線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ブルーバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームを整列して新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
データシリーズの第三四分位数	ds.quantile(0.75)
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
データシリーズがどれだけ、正規分布から歪んでいるか見る	ds.kurt()
nから始まる無限数列	itertools.count(start=n)
実数の逆双曲線余弦	math.acosh(x)
整数の2乗を求める	整数 ** 2
データシリーズの中に存在するの合計をカウントする	ds.isin([value]).sum()
データ列の各データ値の出現数を求める	ds.value_counts()
xがマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(数式, [|変数]x, -oo)
option: 左三角マーカーを描画する	marker = '<'
空の組	()
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
日付データが水曜日か調べる	aDate.weekday() == 2
データ列を箱ひげ図を用いてプロットする	plt.boxplot(データ列)
コーパスのバージョンを知る	version = 'wcce2022-0.1'
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
イテラブルから重複を取り除く	set(イテラブル)
散布図をクロスマーカーで描画する	plt.scatter(データ列x, データ列y, marker='x')
二つの文字列を改行なしに表示する	print(文字列, 文字列, end='')
カデットブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
折れ線グラフに▲マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
二つの整数の和を求める	整数 + 整数2
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: インデックスを自動的な連番に設定する	index_col = None
要素がタプルの要素か調べる	要素 in タプル
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームのふたつの列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
option: フォントの色をホワイトにセットする	color = 'white'
ライトスチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をティールに指定する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
色付きの破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
目盛り線	plt.grid(linestyle='--')
カラムの幾何平均を計算する	scipy.stats.gmean(df['列A'])
折れ線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
行によってデータフレームをソートする	df.sort_index()
折れ線グラフの色をシャルトリューズに変更する	plt.plot(データ列x, データ列y, color='chartreuse')
リストをインデント幅を指定してJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False, indent=n)
文字列が大文字	文字列.isupper()
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
文字列の最後	文字列[-1]
プログラムの実行を即座に終える	sys.exit()
リストとリストの散布図をプロットしてマーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
文字列に指定した文字がいくつあるか調べる	文字列.count(文字)
横棒グラフを描いてラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
グラフで使える色名の一覧を使う	matplotlib.colors.cnames
オブジェクトはリストクラスのインスタンスか	list = int<nl>isinstance(obj, list)
グラフをプレゼンてション用に変更する	sns.set(context='talk')
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データフレームの指定したカラムの最頻値	df['列A'].mode()
option: 暗い赤色を用いる	color = 'darkred'
折れ線グラフをロイヤルブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='royalblue')
アルファベットの小文字列	string.ascii_lowercase
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
縦棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
末尾から文字列をカンマで区切る	文字列.rsplit(',')
ファイルパスを読み込みできるようにオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
クラス分類のF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
リストから重複なく、n個ランダムに抽出する	random.sample(リスト, k=n)
デックの先頭に要素を追加する	両端キュー.appendleft(要素)
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
option: バツ印を描画する	marker = 'x'
リストをセットにする	set(リスト)
等量でビン数nで配列を分割する	pd.qcut(aArray, n)
モードでデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
散布図の上三角印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
日付データが土曜日	aDate.weekday() == 5
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
青い実線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
部分文字列が文字列の開始位置からと終了位置までの間に含まれないか調べる	文字列.find(部分文字列, 開始位置, 終了位置) == -1
イテラブルをダミー変数に変換する	pd.get_dummies(イテラブル)
グラフの描画で淡く色テーマを用いる	sns.set(pallete='muted')
異なる列をキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
エクセルファイルのシートをデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=シート名)
データシリーズの欠損値を中央値に指定する	ds.fillna(ds.median())
縦棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームの選択したカラムの中にいくつ日付データが存在するか求める	df[['列A', '列B']].isin([value]).sum()
ドジャーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
クラス分類の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
行列の行	aArray[行番号]
x座標にラベルを付ける	plt.xlabel('x軸ラベル')
棒グラフをハニーデュー色を使って描画する	plt.bar(データ列x, データ列y, color='honeydew')
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
文字列の中のASCII限定としてパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
option: グラフの色を茶色に設定する	color = 'brown'
データフレームのn行目を抽出する	df.loc[n]
文字列をJSON形式でファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレームの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
２つの変数を順にプリントする	print(変数名, 変数名)
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
xの小数点以下'2'桁までを表示する	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
カンマ区切りのファイルをカラム名を指定せず読む	pd.read_csv('file.csv', header=None)
タイタニック号のデータセットをデータフレームとしてロードする	df = sns.load_dataset('titanic')
文字列中にひとつも空白がない	any(not c.isspace() for c in 文字列)
文字列をソートしてJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
日付データをn日前にする	aDate - datetime.timedelta(days=n)
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
リストを双方向キューに変換する	collections.deque(リスト)
複数横に並べてデータ列を度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
実数のk進対数	math.log(x, k)
複数の列からグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
追加できるようにファイルをSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームからランダムにn行を抽出する	df.sample(n)
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
全要素を1で初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
データフレームから同じ行をドロップする	df.drop_duplicates(inplace=True)
マップにキーが存在しているとき処理する	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
疑似乱数を正規分布で算出する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
特異値分解で整数次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
多次元データを多次元尺度構成法として整数次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
棒グラフをミスティローズ色を使って描画する	plt.bar(データ列x, データ列y, color='mistyrose')
リストを逆順にする	reversed(リスト)
0から始まるn個の整数列	list(range(n))
xを下線付きでプリントできる文字列に変換する	f'\033[4m{x}\033[0m'
横棒グラフをスプリンググリーン色を使って描画する	plt.barh(データ列x, データ列y, color='springgreen')
整数の割り算の余りを計算する	整数 % 整数2
ラインを青い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
指定した列を千の位で四捨五入して、整数型にする	df['列A'].round(-3).astype(int)
配列が正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
データフレームから一つの列のみ抽出する	df[['列A']]
ピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
タプルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
分類モデルのF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
リストの中の最大値	max(リスト)
辞書のキーに対応した値	辞書[キー]
度数分布図の描画して正規化する	plt.hist(データ列, density=True)
データ列の各値の出現数を求める	ds.value_counts()
文字をユニコードにする	ord(文字)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
タプルが空でないかどうか調べる	len(タプル) != 0
ミディアムスプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームの選択したカラムの欠損値を直前の値で補う	df[['列A', '列B']].fillna(method='ffill')
折れ線グラフの色をフローラルホワイトにする	plt.plot(データ列x, データ列y, color='floralwhite')
散布図のポイント印を黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
データフレームのあるカラムの中にある文字列の合計を求める	df['列A'].isin([value]).sum()
双方向キューをセットにする	set(両端キュー)
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
option: フォントの色をシアンに設定する	color = 'cyan'
実数のn乗	x ** n
チップのデータセットからデータフレームをロードする	df = sns.load_dataset('tips')
rgbの右三角マーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
要素がセットに含まれるかどうか	要素 in セット
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
タプルを引数として展開してプリントする	print(*タプル, sep=',')
データフレームの選択した列の中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
破線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ユニークな値を要素とする配列を使う	np.unique(aArray)
横棒グラフをオリベドラブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olivedrab')
カウンタを辞書を用いて更新する	aCounter.update(aDict)
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
指定した列の中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
データ列を使う	import pandas as pd
折れ線グラフの左三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
year年の日付	datetime.date(year=year, month=1, day=1)
ミスティローズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
指定した列で集計しそれぞれの最小値を計算する	df.groupby('列A').min()
日付時刻データが水曜日か判定する	aDatetime.weekday() == 2
マゼンタ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
yについて微分する	sympy.diff(数式, y)
浮動小数点数を実数で除算して、切り捨てる	x // y
空セット	set()
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
マップの値の一覧を見る	list(辞書.values())
横軸を対数目盛に変更する	plt.xscale('log')
パウダーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
ゲインズボロ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
option: グラフの色を赤に変更する	color = 'red'
両端キューの先頭に整数をつけ加える	両端キュー.appendleft(整数)
全要素を初期値で初期化したベクトルを初期化する	np.full(要素数, 初期値, dtype=np.int)
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
x座標の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
グラフのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
文字列を文字コードのリストに変換する	[ord(ch) for ch in 文字列]
オブジェクトはジェネレータか	inspect.isgenerator(オブジェクト)
線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
実数の天井を求める	math.ceil(x)
数列と配列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
ディムグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
option: n番目のカラムをインデックスに変更する	index_col = n
インデントを指定して文字列をJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
xを整数に変換する	int(x)
データフレームの一部の列の欠損値を中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
カラムの名前を指定せずCSVファイルを読み込む	pd.read_csv('file.csv', header=None)
タプルを連結する	タプル + タプル2
ナバホホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
ヒストグラムの色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
option: 最初のカラムをインデックスに設定する	index_col = 0
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
変数について数式の偏微分を行う	sympy.diff(数式, 変数)
リストに別のリストを追加する	リスト.extend(リスト2)
日付データをISO形式の文字列に変換する	aDate.isoformat()
option: 貝殻を用いる	color = 'seashell'
データフレームをCSVファイルにBOMを付けて出力する	df.to_csv('file.csv', encoding='utf_8_sig')
エラーなくセットから整数を取り除く	セット.discard(数)
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
option: フォントの色をペルーに指定する	color = 'peru'
Pandasの日付型のデータシリーズをインデックスにする	df.index = pd.DatetimeIndex(ds)
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
xを緑色でプリントする	print(f'\033[32m{x}\033[0m')
折れ線グラフの左三角印の色を設定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
タプルの順序をシャッフルする	tuple(random.sample(タプル, len(タプル)))
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
option: 紺碧色を使用する	color = 'azure'
整数が1もしくは2、もしくは3に等しいかテストする	整数 == 1 or 整数 == 2 or 整数 == 3
データシリーズの中のNaNの数を調べる	ds.isna().sum()
折れ線グラフの色をスノーにする	plt.plot(データ列x, データ列y, color='snow')
yが0に近づくときの数式の極限値を求める	sympy.limit(数式, y, 0)
実数を百の位で四捨五入する	round(x, -2)
文字列を最後のカンマで分割して、前半を見る	文字列.rpartition(',')[0]
線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
入力を整数として受け取る	int(input())
データフレームの選択した列を千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
整数の八進表記	oct(整数)
プロットのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
上限長を指定して、両端キューを生成する	collections.deque(maxlen=最大長)
option: フォントの色をシャルトリューズにセットする	color = 'chartreuse'
カテゴリデータをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データフレームのある列をNaNも加えてワンホット・ベクトルにする	pd.get_dummies(df['列A'], dummy_na=True)
データフレームの指定したカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
データフレームの指定した列名一覧の列のみ選択する	columns = ['列A', '列B']<nl>df[columns]
整数が一桁かどうか調べる	-9 <= 整数 <= 9
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
文字列の両端から部分文字列を取り除く	文字列.strip(部分文字列)
日付時刻データの分を見る	aDatetime.minute
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
要素はタプルに含まれるか	要素 in タプル
データフレームの列間の相関係数をまとめて求める	df.corr()
データフレームを整列して、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
データフレームを10の位で四捨五入する	df.round(-1)
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
オブジェクトのイテレータ	iter(obj)
その平均値であるカラムのNaNを埋める	df['列A'].fillna(df['列A'].mean())
データフレームの指定した列の第三四分位数	df['列A'].quantile(0.75)
ヒストグラムを使ってデータ列を可視化する	plt.hist(データ列)
ベクトルをフラットにする	aArray.flatten()
浮動小数点数が負の数	x < 0
リストとリストについての散布図に文字列というデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
変数xについて数式の偏微分を行う	sympy.diff(数式, [|変数]x)
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
タプルの値を昇順に並べ直す	sorted(タプル, reverse=True)
データフレームを表示するとき、折り返しをオフにする	pd.set_option('expand_frame_repr', False)
ひとつでも小文字が文字列中に含まれるかどうか	any(c.islower() for c in 文字列)
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をスチールブルーにセットする	plt.plot(データ列x, データ列y, color='steelblue')
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
データ列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
モジュールを検索するパス	sys.path
リストn番目から要素を取り除く	リスト.pop(n)
全要素を0で初期化した配列	np.zeros(要素数)
条件を否定したい	not 条件式
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
表データの下5行を取り出す	df.tail(5)
折れ線グラフをフォレストグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='forestgreen')
XをYで割った結果を求めたい	X / Y
文字列の中で正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s)
データフレームのNaNを平均値に指定する	df.fillna(df.mean())
数式を簡単にする	sympy.sympify(数式)
整数の二進文字列	bin(整数)[2:]
データフレームのある列を配列に変換する	df['列A'].values
実行時の標準入力の入力元がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
スカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='skyblue')
外れ値を除いたデータフレームのカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
オブジェクトがメソッドか	inspect.ismethod(オブジェクト)
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
ファイルパスをフォルダ名とファイル名に分割する	os.path.split(filepath)
数列とリストの散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列の終了位置より前に部分文字列が含まれるか調べる	文字列.find(部分文字列, 0, 終了位置) != -1
文字列を記号に変換する	sympy.Symbol(変数名)
表データのあるカラムは何秒か知る	df['列A'].dt.second
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
ヒストグラムのビン数をセットする	plt.hist(データ列, bins=区関数)
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
データ列とリストの散布図を描画して、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
辞書に項目名ワード引数で更新する	辞書.update(**kwargs)
リストと数列の散布図をプロットして、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
赤いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図を赤い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
最小値でデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
空白を用いて文字列を区切って、整数のリストに変換する	list(map(int, 文字列.split()))
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
折れ線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
文字列を最後の部分文字列で二分して、前半を使う	文字列.rpartition(部分文字列)[0]
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
データ列のUNIX時間をタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
カラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
option: フォントの色をアクアマリンにセットする	color = 'aquamarine'
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームを関数の値ごとにグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データフレームを四捨五入する	df.round()
二つのリストを連結する	リスト + リスト2
文字列の終了位置より前に部分文字列が存在しないかどうか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
整数の差	整数 - 整数2
データフレームの最初10行	df.head(10)
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
リストを両端キューにする	collections.deque(リスト)
キュー	両端キュー = collections.deque()
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
配列と数列について散布図を描画して、▽マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
文字列を右から区切り記号で区切る	文字列.rsplit(セパレータ)
空の辞書を用意する	辞書 = {}
列を等量でn個にビン分割する	pd.qcut(ds, n)
データフレームの指定したカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
2点間のユークリッド距離	math.dist(point, point2)
無限に文字列が繰り返すイテラブルを使う	itertools.repeat(文字列)
クラス分類をロバスト推定でする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
リストとリストについての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
青い点線でリストの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
赤い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
リストの推移を実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを表示するとき、表示可能な行数をnに設定する	pd.set_option('display.max_rows', n)
ボックスチャートを描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
文字列がリストのいずれでもない	文字列 not in リスト
データフレームのヒストグラムを縦横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
既存の配列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
指定した列の値で集計し、それぞれの最大値を求める	df.groupby('列A').max()
nと整数が等しいかどうか調べる	整数 == 整数2
データフレームの相関行列を可視化する	sns.heatmap(df.corr())
文字列を最後のセパレータで二つに分けて前半を使う	文字列.rpartition(セパレータ)[0]
カラムを十の位で四捨五入して整数にする	df['列A'].round(-1).astype(int)
option: ペルーを使う	color = 'peru'
前もってASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
n回要素が繰り返す列を使う	itertools.repeat(要素, n)
変数の値をひとつ小さくしたい	X -= 1
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ファイルをバイナリ書き込みできるようにオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
エポック秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
ベクトルの演算をする	import numpy as np
ヒストグラムの色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
option: ライムグリーン色を使う	color = 'limegreen'
真紅色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
数を２乗する	x ** 2
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
シルバー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
データフレームから列を３つのみ選択する	df[['列A', '列B', '列C']]
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列の両端から指定された文字を消す	文字列.strip(文字)
リストとリストについて散布図を描画して下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
辞書のエントリの一覧	list(辞書.values())
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
タプルの最後からn番目以前の部分を取り出す	タプル[:-n]
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
パパイヤウィップ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
条件かつ条件	条件 and 条件2
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
カンマ区切りのファイルを列名なしで読む	pd.read_csv('file.csv', header=None)
ゼロ埋めした符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
リストを昇順にソートする	sorted(リスト, reverse=True)
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
現在の日付時刻を求める	datetime.datetime.now()
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
インディアンレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: ８ビット整数型を使用する	np.int8 = np.int<nl>dtype = np.int8
リストと配列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
指定した列のカテゴリで集計し最大値を求める	df.groupby('列A').max()
割合付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
円グラフを正確な円にする	plt.axis('equals')
カウンタを使う	import collections
天井数	math.ceil(x)
何回まで再帰ができるかを調べる	sys.getrecursionlimit()
表データのあるカラムの年度	df['列A'].dt.year
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
実数の２乗を求める	x ** 2
相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
横棒グラフをアリスブルー色として描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームの中に文字列と日付データがあるか確認する	df.isin([value, value2])
データフレームの選択したカラムの値は欠損値かどうか確認する	df[['列A', '列B']].isna()
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
特異値分解で多次元データを文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
折れ線グラフの左三角印の太さを設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
クラス分類をガウス過程でする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ランダムフォレストでクラス分類をする	model = sklearn.ensemble.RandomForestClassifier()
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
句点文字を使う	string.punctuation
両端キューの最大長を使う	両端キュー.maxlen
タプルの末尾からn番目以前の要素を得る	タプル[:-n]
option: グラフの色をダークレッドに設定する	color = 'darkred'
セット＼セット2	セット.difference(セット2)
コロンで文字列を二分して、前半を使う	文字列.partition(':')[0]
数式のxを別の数式で置き換える	数式.subs([|変数]x, 数式2)
セットから全ての要素を取り除く	セット.clear()
文字列をJSONフォーマットの文字列に変換する	json.dumps(文字列, ensure_ascii=False)
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
タプルの先頭の要素	タプル[0]
xについて数式を偏微分する	sympy.diff(数式, [|変数]x)
option: ライトグレーにグラフの色を設定する	color = 'lightgrey'
列の最頻値	df['列A'].mode()
nullに等しい値	None
辞書内の値をリストとして得る	list(辞書.values())
オブジェクトにフィールドがある	hasattr(obj, プロパティ名)
データフレームの選択したカラムの要約統計量	df[['列A', '列B']].describe()
option: 色のアルファ値を変更する	alpha = 0.5
折れ線グラフに赤い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
空文字列を使う	''
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
赤いダイアモンドマーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
カテゴリ別で色付けして、データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ゴールド色としてヒストグラムを描画する	plt.hist(データ列, color='gold')
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
三数の最大値	max(x, y, z)
指定した列のカテゴリで集計し、各平均値を算出する	df.groupby('列A').mean()
データシリーズの中にある文字列の合計を調べる	ds.isin([value]).sum()
空の辞書	辞書 = {}
レベッカパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列をエンコーディングでバイト列に変換する	文字列.encode(encoding=encoding)
線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
ある列によって昇順にデータフレームを並べ直す	df.sort_values(by='列A', ascending=True)
最初の文字列を両端キューから取り除く	両端キュー.remove(文字列)
オールドレース色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
出現頻度を可視化する	plt.hist(データ列)
データフレームの選択したカラムの中にいくつ欠損値が存在するか求める	df[['列A', '列B']].isna().sum()
イテラブルをカウンタに変換する	collections.Counter(iterable)
既存の配列をベースに全要素が0の行列	np.zeros_like(aArray)
多次元データを多次元尺度構成法で項次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
非大文字が文字列中に存在するか調べる	any(not c.isupper() for c in 文字列)
リストの値を逆順にする	リスト[::-1]
折れ線グラフのクロスマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
データフレームの選択した列のNaNを中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
サンディーブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
散布図の大バツ印の太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームの列の名前一覧で指定した列を削除する	df.drop(columns, axis=1, inplace=True)
タプルのn番目からn2番目まで	タプル[n:n2]
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
option: フォレストグリーン色を用いる	color = 'forestgreen'
散布図に丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
option: グラフの色をバリーウッドにセットする	color = 'burlywood'
option: ロイヤルブルー色を用いる	color = 'royalblue'
回帰分析をガウス過程でする	model = sklearn.gaussian_process.GaussianProcessRegressor()
実数のハイパボリック・コサイン	math.cosh(x)
データフレームをある列によって昇順にソートする	df.sort_values(by='列A', ascending=True)
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
Xのn乗を求めたい	X ** n
option: 線を太くする	linewidth = 3.0
小さい方からリストをソートする	sorted(リスト, reverse=False)
文字列をパディングする	文字列.zfill(文字列幅)
文字列を区切り記号で分割して列挙する	文字列.split(セパレータ)
タプルが全て真か	all(タプル)
グラフの中に枠なしの凡例を付ける	plt.legend(frameon=False)
2を底とする実数の対数	math.log2(x)
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームのあるカラムの値がxに等しい行を抽出する	df[df['列A'] == x]
option: ライトイエローに色を変更する	color = 'lightyellow'
option: マーカーを▲に変更する	marker = '^'
折れ線グラフの四角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: ローングリーンを使う	color = 'lawngreen'
配列の要素ごとに加算する	aArray + aArray2
横棒グラフをトマト色を用いて描画する	plt.barh(データ列x, データ列y, color='tomato')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データシリーズの欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
ヒストグラムをハニーデュー色として描画する	plt.hist(データ列, color='honeydew')
データフレームの列のユニークな値	df[col].unique()
大きさnでデータ列とリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
データ列の一意な値を見る	ds.unique()
マッピングをチェーンマップにする	collections.ChainMap(aDict)
データフレームの重複を確認する	df.duplicated()
を整数で割った余りにする	変数 %= 整数
文字列がセットに含まれるか調べる	文字列 in セット
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
year年をタイムスタンプにする	datetime.datetime(year=year, month=1, day=1)
配列とイテラブルについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
行列の全要素の値を変更する	aArray[:, :] = 指定の値
項はセットのいずれか	要素 in セット
エクセルファイルのシートをデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
year年month月day日をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day)
シャルトリューズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データシリーズの値が欠損値か	ds.isna()
複数のシートをエクセルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
指定した列を千の位で四捨五入して、整数にする	df['列A'].round(-3).astype(int)
クリムゾン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームの未入力値を平均値で置換する	df.fillna(df.mean())
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
グラフの縦軸を対数目盛に変更する	plt.yscale('log')
option: ターコイズを使う	color = 'turquoise'
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
淡いピンク色にヒストグラムの色を指定する	plt.hist(データ列, color='lightpink')
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
シアンでプリントできる文字列にする	f'\033[36m{x}\033[0m'
データシリーズを整数に丸める	ds.round()
リストと配列の散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
option: 丸マーカーを用いる	marker = 'o'
コーンフラワーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
二つのデータフレームを横方向に合体させる	pd.concat([df, df2], axis=1)
リストとリストの散布図を描画し、、菱形マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
箱ひげ図を描いて、平均線を加える	plt.boxplot(データ列, meanline=True)
要素が全て1の行列を作成する	np.ones(要素数, dtype=np.int)
タプルが空か判定する	len(タプル) == 0
リストから複数個、ランダムに選ぶ	random.choices(リスト, k=n)
リストをJSONフォーマットでファイル出力にダンプする	json.dump(リスト, ファイル出力, ensure_ascii=False)
青いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
小数点数のハイパボリック・タンジェントの逆数	math.atanh(x)
色付きの一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
整数を二進数表記に変換する	bin(整数)
ベクトルと同じ大きさの空行列を作る	np.empty_like(aArray)
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
文字列は全て印字できるか確認する	文字列.isprintable()
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
文字列の指定した位置より前に部分文字列が含まれるか	文字列.find(部分文字列, 0, 終了位置) != -1
データフレームを整数に丸める	df.round()
option: ライムを用いる	color = 'lime'
コマンドラインフラグの状態	sys.flags
色付きの破線として折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
散布図をミディアムパープル色として描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
イテラブルとリストの散布図を描いて、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
辞書のキーに対応した値を得る	辞書[キー]
option: グラフの色を紺に設定する	color = 'darkblue'
タプルの中の最大値	max(タプル)
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
オブジェクトはビルトインか	inspect.isbuiltin(オブジェクト)
ライトスカイブルーにヒストグラムの色をセットする	plt.hist(データ列, color='lightskyblue')
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
整数の八乗を求める	整数 ** 8
プロットの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
文字列中にひとつでもアスキー文字が含まれるか	any(c.isascii() for c in 文字列)
クラスは名前付きタプルか調べる	issubclass(C, tuple)
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
xを太字化する	f'\033[1m{x}\033[0m'
データフレームのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
y座標の目盛を表示しない	plt.yticks([])
Excelファイルからデータフレームを読む	pd.read_excel('file.xlsx')
ファイルからファイル名を見る	os.path.basename(filepath)
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
シーケンスのそれぞれを関数でフィルタする	map(func, iterable)
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
散布図の四角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームを転置する	df.T
データフレームのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
グリッドを実線にする	plt.grid(linestyle='solid')
option: ゴールデンロッドを使用する	color = 'goldenrod'
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
JSON文字列をオブジェクトにする	data = json.loads(文字列)
整数が1、もしくは2、もしくは3に等しいかテストする	整数 == 1 or 整数 == 2 or 整数 == 3
option: グラフの色を紺に指定する	color = 'darkblue'
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームの一部のカラムを十の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
オブジェクトがクラスかどうか調べる	inspect.isclass(オブジェクト)
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
option: 色を貝殻にする	color = 'seashell'
折れ線グラフの色をシエナに指定する	plt.plot(データ列x, データ列y, color='sienna')
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
半透明の点線としてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームのNaNを前の値で置換する	df.fillna(method='ffill')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
リストからn個、サンプリングしてリストにする	random.sample(リスト, k=n)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
両端キューの中に要素が含まれてる	要素 in 両端キュー
リストと配列の散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: 改行コードを動作環境依存にセットする	newline = None
2つのタプルを階層的につなぐ	collections.ChainMap(aDict, aDict2)
常用対数	math.log10(x)
縦棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
折れ線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
句点文字を全て求める	string.punctuation
日付時刻データにn週間を加える	aDatetime + datetime.timedelta(weeks=n)
散布図をサンディーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
データシリーズが何年か見る	ds.dt.year
折れ線グラフの菱形マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの選択したカラムを整数に丸める	df[['列A', '列B']].round()
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
リストとリストの散布図を描いてその大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
XからYを引いた結果が求めたい	X - Y
整数2がnより大きく、かつ、n3より小さいかどうか判定する	整数 < 整数2 and 整数2 < n3
option: ミディアムシアグリーンを用いる	color = 'mediumseagreen'
双方向キューの先頭にリストの各値を追加する	両端キュー.extendleft(リスト)
表データのあるカラムの秒	df['列A'].dt.second
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: オーキッド色を使う	color = 'orchid'
データフレームの選択したカラムの中に含まれる文字列と日付データの合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
日付時刻データが何時か知る	aDatetime.hour
option: 左三角印を描画する	marker = '<'
横棒グラフをレモンシフォン色として描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
散布図をローングリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
イテラブルからカウンタを作る	collections.Counter(iterable)
option: 色をスノーに設定する	color = 'snow'
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
文字列を最後の区切り記号で分割したときの後半の文字列を取り出す	文字列.rpartition(セパレータ)[-1]
データフレームの列の各データ値の出現数を計算する	df[col].value_counts()
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
オブジェクトがビルトインか調べる	inspect.isbuiltin(オブジェクト)
ひとつでも非大文字が文字列中に含まれる	any(not c.isupper() for c in 文字列)
option: グラフの色をオールドレースに設定する	color = 'oldlace'
あるカラムの文字列が正規表現文字列にマッチしないデータを抽出する	df[~df['列A'].str.match(正規表現)]
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
最後の部分文字列によって文字列を二分する	文字列.rpartition(部分文字列)
縦棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
リストと配列の散布図をプロットして、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの指定したカラムを十の位で四捨五入して、整数型にする	df['列A'].round(-1).astype(int)
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
折れ線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategray')
本日をISO書式の文字列にする	datetime.datetime.today().isoformat()
を整数分の一にする	変数 /= 整数
文字列を最初のコロンで二分割して、前の方を使う	文字列.partition(':')[0]
リストを組に変換する	tuple(リスト)
option: 四角マーカーを描画する	marker = 's'
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
折れ線グラフを半透明の実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
ファイルを追加モードを用いてオープンして]、fとする	f = open(filepath, mode='a')
表データのあるカラムが何日か見る	df['列A'].dt.day
データフレームをインデックスによって並べ直す	df.sort_index()
既存のベクトルを元に全要素が1の行列を作成する	np.ones_like(aArray)
数列からn個、サンプリングしてリストにする	random.sample(数列, k=n)
セットの浅いコピー	セット.copy()
データフレームの複数の列を取り除き、みる	df.drop(['列A', '列B'], axis=1)
ダーク・スラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
両端キューの左から要素を取り出す	両端キュー.popleft()
option: 欠損値も無視しない	dropna = True
option: ラベンダー色を用いる	color = 'lavender'
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
正規表現patternでデータフレームをまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
文字列の指定した位置以前に部分文字列があるか調べる	文字列.find(部分文字列, 0, 終了位置) != -1
両端キューが空か	len(両端キュー) == 0
データシリーズを10の位で丸めて、整数型にする	ds.round(-1).astype(int)
カンマ区切りのファイルからデータフレームを読む	pd.read_csv('file.csv', sep=',')
表のn行目をドロップしてみる	df.drop(n, axis=0)
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームのカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
option: タブを分割記号で使う	sep = '\t'
データシリーズの欠損値を直前の値にする	ds.fillna(method='ffill')
オブジェクトは関数か調べる	callable(obj)
線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
アクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
空白を求める	' '
リストとリストの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: ダークシアグリーンを使う	color = 'darkseagreen'
表データをインポートする	import pandas as pd
データフレームは正規分布からどれだけ、歪んでいるか見る	df.kurt()
データフレームの末尾	df.tail()
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
ミディアムターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='mediumturquoise')
二つの整数の差	整数 - 整数2
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
データフレームをCSVファイルにBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
rgbの右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列中にひとつも英数字が含まれないかどうか	any(not c.isalnum() for c in 文字列)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
実数の整数部を求める	math.modf(x)[1]
変数名が関数か調べる	inspect.isfunction(識別子)
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
整数を十六進表現にする	hex(整数)
本日が土曜日か	datetime.datetime.today().weekday() == 5
本日は何日か知る	datetime.datetime.today().day
横棒グラフをフォレストグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: ゴーストホワイトを用いる	color = 'ghostwhite'
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
ラインを青い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: 区切りをタブにする	sep = '\t'
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
xを黄色でプリントする	print(f'\033[33m{x}\033[0m')
イテラブルを更新不能な集合にする	frozenset(イテラブル)
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
両端キューを空にする	両端キュー.clear()
option: グレーを使う	color = 'gray'
データフレームを複数のカラムによって小さい順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
縦棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
整数が整数2よりも小さいか確認する	整数 < 整数2
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
折れ線グラフの色をコーラルに変更する	plt.plot(データ列x, データ列y, color='coral')
両端キューの先頭に数列の各要素を追加する	両端キュー.extendleft(数列)
リストの最初の要素を探す	リスト.index(要素)
データフレームを百の位で丸めて整数型にする	df.round(-2).astype(int)
数列をランダムにシャッフルしてリストにする	random.sample(数列, len(数列))
折れ線グラフの丸印の太さを変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
リストを文字列として指定した文字列でつなげる	文字列.join(map(str, リスト))
識別子がモジュール	inspect.ismodule(識別子)
データフレームをグループ化し、各個数を求める	df.groupby('列A').count()
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
リストとリストの散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
整数に整数を加算する	整数 + 整数2
タプルを引数として展開して表示する	print(*タプル, sep=',')
線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
文字列の最後から部分文字列を探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
棒グラフを白色として描画する	plt.bar(データ列x, データ列y, color='white')
ある列のカテゴリごとの標準偏差	df.groupby('列A').std()
option: クロスマーカーを用いる	marker = 'x'
文字列中にひとつも小文字が含まれないかどうか調べる	any(not c.islower() for c in 文字列)
日付時刻データは日付時刻データより前か調べる	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
リストとリストの散布図に上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
ダークスレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
下線付きでxをプリントする	print(f'\033[4m{x}\033[0m')
データフレームの選択したカラムの中に文字列と文字列がいくつ存在するか数える	df[['列A', '列B']].isin([value, value2]).sum()
整数が3の倍数か	整数 % 3 == 0
nからn2の範囲を使う	range(n, n2)
ヒストグラムをプロットし、ビン数を設定する	plt.hist(データ列, bins=区関数)
既存のファイルを追加できるようにEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ふたつの整数の和を算出する	整数 + 整数2
文字列の指定した区間位置の間に部分文字列が含まれるか確認する	文字列.find(部分文字列, 開始位置, 終了位置) != -1
option: フォントの色をフォレストグリーンに設定する	color = 'forestgreen'
双方向キューが空か確認する	len(両端キュー) == 0
小数点数の天井	math.ceil(x)
ピアソンを使ってデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='pearson')
シスル色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの列の各データ値の出現数を算出する	df[col].value_counts()
折れ線グラフの菱形印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
シーグリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='seagreen')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
文字列中の正規表現を新しい文字列を使って置き換える	re.sub(pattern, newsub, s)
option: グラフの色をアクアに設定する	color = 'aqua'
リストのn番目を削除する	del リスト[n]
文字列をインデントを指定してJSON形式にエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
列をn個にビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
整数は何桁か	len(str(整数))
データフレームの一部の列の下位25パーセント	df[['列A', '列B']].quantile(0.75)
スラグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
タプルの合計値を求める	sum(タプル)
列をカテゴリデータにする	ds.astype(object)
ダークカーキ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
線グラフの色をデピンクに変更する	plt.plot(データ列x, データ列y, color='deeppink')
データシリーズの中に含まれる日付データと日付データの合計をカウントする	ds.isin([value, value2]).sum()
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
両端キュー中の整数の数を数える	両端キュー.count(整数)
option: 上三角マーカーを用いる	marker = '^'
option: トマトにフォントの色を設定する	color = 'tomato'
option: パレットトルコイズを使う	color = 'paleturquoise'
線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームのカラムのNaNをその平均値で埋める	df['列A'].fillna(df['列A'].mean())
線グラフをインディアンレッド色として描画する	plt.plot(データ列x, データ列y, color='indianred')
両端キューの大きさを計算する	len(両端キュー)
数式のパラメータの解を方程式として算出する	sympy.solve(数式, [|変数]x)
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームの選択したカラムの標準偏差	df[['列A', '列B']].std()
要素がn回続く列	itertools.repeat(要素, n)
実線として配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
predicateFuncが真とならないシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
option: 区切り記号を文字列にする	sep = s
辞書にキーが存在しているいるか	キー not in 辞書
文字列が指定した文字列にある	文字列 in 別の文字列
ライトグレー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ランダムな整数のリストが欲しい	random.sample(range(100), 10)
配列を	''.join(map(str, 配列))
条件を満たしたらループを中断したい	if 条件式:<nl><tab>break
切り捨てながらを整数分の一にする	変数 //= 整数
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
文字列を最後の区切り記号で二分割し、、残りを使う	文字列.rpartition(セパレータ)[-1]
決定木をグラフにする	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
タプルの末尾の要素を使う	タプル[-1]
サポートベクトル分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
横棒グラフをレベッカパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
変数名はコードか	inspect.iscode(識別子)
空のリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームのカラムを標準化する	scipy.stats.zscore(df['列A'])
数式のyに数値を代入する	数式.subs(y, 数値)
貝殻色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
折れ線グラフをビスク色を用いて描画する	plt.plot(データ列x, データ列y, color='bisque')
xの小数点以下'2'桁までプリントする	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
変数xについて数式のインテグラルを行う	sympy.integrate(数式, [|変数]x)
データフレームの尖りを求める	df.skew()
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
変数xが無限大に近づく場合、数式の極限値を求める	sympy.limit(数式, [|変数]x, oo)
太文字で表示できる文字列に変換する	f'\033[1m{x}\033[0m'
整数が無限に繰り返すイテラブルが欲しい	itertools.repeat(整数)
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
数列をひとつの文字列にする	''.join(map(str, 数列))
データフレームを関数によってまとめたグループを求める	df.groupby(関数)
データフレームの選択したカラムのNaNを最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ホットピンクにヒストグラムの色をセットする	plt.hist(データ列, color='hotpink')
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
ユーザから入力される	int(input())
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームのあるカラムをインデックスに指定する	df.set_index('列A')
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
列名を指定して二つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
折れ線グラフの色をスラグレーにする	plt.plot(データ列x, データ列y, color='slategray')
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームの列を選んで重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
ヒストグラムの色をアリスブルーにセットする	plt.hist(データ列, color='aliceblue')
イテラブルのパーセンタイルを作図する	plt.boxplot(データ列)
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
列を計数器にする	collections.Counter(iterable)
浮動小数点数を浮動小数点数で割った余り	x % y
n個にデータフレームの中のカラムをビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
実数で浮動小数点数を除する	x / y
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
データフレームのあるカラムの秒を使う	df['列A'].dt.second
option: フクシア色を使用する	color = 'fuchsia'
折れ線グラフを色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ベクトルの列	aArray[:, 列番号]
option: ボックスチャートを水平方向にする	vert = False
データフレームを複数の列によって降順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
縦棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
星マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
ファイルパスをオープンして]、追加ストリームを求める	'a' = 'a'<nl>open(filepath, mode='a')
データフレームの選択したカラムはどの程度正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
配列の調和平均を求める	scipy.stats.hmean(配列)
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
両端キューの要素を右にローテーションする	両端キュー.rotate(1)
nは整数と等しいか	整数 == 整数2
小数点数の余弦の逆数を求める	x = 0.33<nl>math.acos(x)
線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
ヒストグラムをタン色を用いて描画する	plt.hist(データ列, color='tan')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
データフレームの選択したカラムの中にあるとの合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
散布図をrgbの丸マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
ヒストグラムの色をスプリンググリーンにセットする	plt.hist(データ列, color='springgreen')
散布図の大バツ印の大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データをL1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
書き込みモードでファイルを開く]	'w' = 'a'<nl>open(filepath, mode='w')
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ファイルを文字コードtextでオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
option: ライトシアンに色を設定する	color = 'lightcyan'
リストとリストについて散布図をプロットしてマーカーを▽に指定する	plt.plot(データ列x, データ列y, marker='v')
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
線のラインスタイルを一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
rgbの星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c=rgb)
半透明の点線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの選択したカラムの中に含まれる日付データの合計を調べる	df[['列A', '列B']].isin([value]).sum()
グラフに使用する横軸にラベルを設定する	plt.xlabel('x軸ラベル')
リストとリストの散布図を描画し、、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストのパーセントを円グラフで可視化する	plt.pie(データ列, startangle=90)
データフレームを破壊的に降順に2つの列によって並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ガベージコレクションの参照カウントを知る	sys.getrefcount(オブジェクト)
折れ線グラフの印をポイント印にする	plt.plot(データ列x, データ列y, marker='.')
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
表を指定した列によってまとめたグループ	df.groupby('列A')
セットから全要素を取り除く	セット.clear()
モデルをあてはめる	model.fit(説明変数, 目的変数)
折れ線グラフの印を▽にする	plt.plot(データ列x, データ列y, marker='v')
直前の値で指定したカラムの欠損値を埋める	df['列A'].fillna(method='ffill')
リストと数列の散布図を描き、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
２つのカウンタのいずれかに含まれる要素を計算する	aCounter | aCounter2
エクセルファイルでデータフレームを保存する	df.to_excel('file.xlsx')
データシリーズの中に日付データとがいくつあるか調べる	ds.isin([value, value2]).sum()
グラフで使うフォントを指定する	sns.set(font=フォント名)
データフレームの値はNaN	df.isna()
ヒストグラムを三つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列をPandasの日付型にする	pd.to_datetime(日付を表現した文字列)
グローバル変数の一覧	globals()
行列計算をする	import numpy as np
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
あるカラムの文字列に部分文字列が含まれないデータを抽出する	df[~df['列A'].str.contains(部分文字列)]
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
Pythonのバージョンを確認する	if sys.version_info >= (3, 4):<nl><tab>print(sys.version_info)
線形回帰モデルのバイアス	model.intercept_
option: ホットピンクを用いる	color = 'hotpink'
option: ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムを描いて、区間数を設定する	plt.hist(データ列, bins=区関数)
線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
整数が1もしくは2もしくは3に等しいか	整数 == 1 or 整数 == 2 or 整数 == 3
指定した列のカテゴリで集計し、各合計を求める	df.groupby('列A').sum()
文字列が文字列より辞書順で前	文字列 < 文字列2
option: ダーク・スラテグレーを用いる	color = 'darkslategrey'
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightseagreen')
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
双方向キューの要素を左に輪番で回す	両端キュー.rotate(-1)
文字列が全て空白文字からなるか確認する	文字列.isspace()
リストが少なくともひとつ真	any(リスト)
主成分分析として多次元データを文字列次元に削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
文字列が数字かどうか	文字列.isdigit()
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
option: セパレータをカンマにする	sep = ','
後方から部分文字列を範囲を指定して探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
二重ループを書きたい	for x in range(X):<nl><tab>for y in range(Y):<nl><tab><tab>print((x, y))  # 直して
空のマップ	辞書 = {}
小数点数を切り下げる	math.floor(x)
文字列中の文字を新しい文字へ置き換える	文字列.replace(部分文字列, 置換後の文字列)
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データシリーズの日	ds.dt.day
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
タプルをn回、連結する	タプル * n
後方から範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
赤い実線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
折れ線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ファイルの拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
配列とリストの散布図に▲マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
辞書順で二つの文字列を比較する	文字列 < 文字列2
区切り文字で文字列を二分する	文字列.partition(セパレータ)
２つの浮動小数点数が十分に近い	math.isclose(x, x2)
本日が土曜日か確認する	datetime.datetime.today().weekday() == 5
濃くカラーパレットをグラフの描画で使う	sns.set(pallete='deep')
赤い一点鎖線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムの色をローングリーンにする	plt.hist(データ列, color='lawngreen')
濃いシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームの一部のカラムの中の未入力値の合計を求める	df[['列A', '列B']].isna().sum()
配列とリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データシリーズの中の欠損値の個数を数える	ds.isna().sum()
シルバー色としてヒストグラムを描画する	plt.hist(データ列, color='silver')
行列の行ごとの平均を求める	np.mean(aArray, axis=1)
文字列をコロンで二分し、、後半を使う	文字列.partition(':')[-1]
ファイルパスをオープンして]バイナリストリームを使う	'rb' = 'a'<nl>open(filepath, mode='rb')
文字列の中の複数行対応としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
データシリーズを1000の位で四捨五入する	ds.round(-3)
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
アンサンブル学習でクラス分類をする	sklearn.ensemble.VotingClassifier()
データフレームの選択した列を四捨五入する	df[['列A', '列B']].round()
16進数文字列を整数に変換する	int(文字列, 16)
リストとリストの散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
両端キューが空でないか調べる	len(両端キュー) != 0
破線でリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームをTSVファイルで書き出す	df.to_csv('file.tsv', sep='\t')
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
ファイルを読み込みモードを用いてオープンして]fとする	f = open(filepath, mode='r')
変数名がコード	inspect.iscode(識別子)
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図をブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
option: レベッカパープル色を使う	color = 'rebeccapurple'
データフレームを2つの列によってまとめた表	df.groupby(['列A', '列B'])
折れ線グラフを半透明の破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ダークマゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
配列とイテラブルについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
キーが辞書上で定義済み	キー in 辞書
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
２つのリストから辞書を用意する	dict(zip(リスト, リスト2))
データフレームを散布図でグラフ化してカテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
折れ線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
bとn2から成るペアを作る	(n, n2)
ふたつのカラムからグループ化し最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
オブジェクトはビルトインかテストする	inspect.isbuiltin(オブジェクト)
option: 出力先を標準エラーに変更する	file = sys.stderr
オブジェクトは関数	callable(obj)
線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
折れ線グラフの▲マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
要素の無限列が欲しい	itertools.repeat(要素)
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
折れ線グラフをダークサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='darksalmon')
イテラブルから長さの制限された両端キューを作る	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
option: オールドレース色を使用する	color = 'oldlace'
八進数文字列を整数に変換する	int(文字列, 8)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
ヒストグラムの色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
プラットホームの名前	sys.platform
データフレームをグループ化し、ある列に対し個数を算出する	df.groupby('列A')['列B'].count()
配列間の相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
二つのオブジェクトが同一参照かどうか確認する	obj is obj2
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
リストから1個ランダムに選んでリストにする	random.choice(リスト)
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
文字列中にひとつでも数字が存在するかどうか調べる	any(c.isdigit() for c in 文字列)
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
三つの文字列を順にプリントする	print(文字列, 文字列, 文字列)
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
部分文字列が文字列の開始位置より後に含まれないか調べる	文字列.find(部分文字列, 開始位置) == -1
タプルの末尾からn番目以前の部分を抽出する	タプル[:-n]
リストを逆さにする	reversed(リスト)
ヒストグラムをオレンジ色を使って描画する	plt.hist(データ列, color='orange')
改行なしに計算結果を出力する	print(式, end='')
文字列の左側から余分な空白を取り除く	文字列.lstrip()
実数を十六進文字列にする	x.hex()
リストを文字列として、カンマを用いて連結する	','.join(map(str, リスト))
option: サンディーブラウンを用いる	color = 'sandybrown'
要素をスタックのn番目に挿入する	両端キュー.insert(n, 要素)
実数を小数点以下第一位で四捨五入する	round(x, 1)
option: ラベンダー色を使う	color = 'lavender'
関数の値によってデータフレームをグループ化する	df.groupby(関数)
xを浮動小数点数に変換する	float(x)
データフレームの列の空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
データシリーズにおいてどの値が最も出現するか見る	ds.mode()
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
印字できる文字を見る	string.printable
三２ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
リストをインデントを指定してJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
deqの末尾の要素を見る	両端キュー[-1]
文字列がセットに含まれるかどうか調べる	文字列 in セット
２つの整数の排他的論理和	整数 ^ 整数2
数列とリストについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
空の線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
整数を8進数文字列にする	oct(整数)[2:]
データフレームの中のカラムを等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
データフレームからカテゴリデータを選ぶ	df.select_dtypes('object')
文字列の接頭辞はsubか調べる	文字列.startswith(部分文字列)
折れ線グラフをブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
コマンド引数で与えられたファイルを一つずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
2進数文字列を整数に変換する	int(文字列, 2)
データフレームの指定したカラムの記述統計量を一度に見る	df['列A'].describe()
辞書の項目の一覧	list(辞書.values())
折れ線グラフの色をローングリーンにセットする	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームの指定したカラムの平均値	df['列A'].mean()
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
デックをdequeue	両端キュー.popleft()
黒い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列の接尾辞から部分文字列を取り除く	文字列.removesuffix(部分文字列)
数式の変数についてのn階微分を行う	sympy.diff(数式, 変数, n)
識別子がクラスかどうか調べる	inspect.isclass(識別子)
タイムスタンプデータとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームの選択した列の空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
option: フォントの色をサドルブラウンに指定する	color = 'saddlebrown'
文字列が無限に繰り返すイテラブルがほしい	itertools.repeat(文字列)
整数が-9以上、9以下か調べる	-9 <= 整数 <= 9
列を選んで重複を除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データフレームの値が欠損値かどうか調べる	df.isna()
option: 星マーカーを描画する	marker = '*'
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
整数の5分の一	整数 / 5
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
変数の値を出力する	print(変数名)
指定したカラムの値を正規表現patternで全部置換する	df['列A'].replace(pattern, repl, regex=True)
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフをコーンズシルク色を用いて描画する	plt.plot(データ列x, データ列y, color='cornsilk')
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
横棒グラフをドジャーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
データフレームの選択したカラムの代表値	df[['列A', '列B']].describe()
グラフの短い説明の位置を(x,y)にする	plt.legend(loc=(x, y))
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
配列とイテラブルについての散布図にrgbの四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
タプル中の要素が少なくともひとつ真か調べる	any(タプル)
ファイルの絶対パス	os.path.abspath(filepath)
整数乱数で要素を埋めた行列を初期化する	np.random.randint(開始値, 終了値, N)
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
n回要素が繰り返すイテレータ	itertools.repeat(要素, n)
option: ダークバイオレット色を使用する	color = 'darkviolet'
ヒストグラムを実線を使って描く	plt.hist(データ列, linestyle='solid')
折れ線グラフを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
配列のユニークな各要素の頻度を見る	np.unique(aArray, return_counts=True)
実数の小数部を求める	math.modf(x)[0]
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
グラフのフォントを日本語に変更する	sns.set(font='IPAexGothic')
データ列をボックスチャートにする	plt.boxplot(データ列)
二つの条件を書きたい	条件式 and 条件式2
散布図をミディアムバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
分数の分母	q.denominator
標準出力を求める	sys.stdout
リストと配列の散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
データフレームをカラムの名前を付けずCSVファイルに出力する	df.to_csv('file.csv', header=None)
要素がリストの要素でない	要素 not in リスト
実数がNaNか調べる	math.isnan(x)
ある列の値がxより少ない行を抽出する	df[df['列A'] < x]
xの小数点以下'1'桁までをプリントする	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
ラインを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: 色をライトサーモンに変更する	color = 'lightsalmon'
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
中央値で配列をビン分割する	pd.qcut(aArray, 2)
データ列とリストについて散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
セットに列を追加する	セット.update(リスト)
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
タプルの末尾を捨てる	タプル[:-1]
シャルトリューズにヒストグラムの色を指定する	plt.hist(データ列, color='chartreuse')
識別子がコルーチンか調べる	inspect.iscoroutine(識別子)
実数以上の最小の整数	math.ceil(x)
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
二つの文字列がケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
黄緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
縦棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
文字列中にひとつもアスキー文字が存在しないかどうか	any(not c.isascii() for c in 文字列)
マッピングの項目名と値を入れ替える	{v: k for k, v in 辞書.items()}
文字列はPythonのキーワード	keyword.iskeyword(文字列)
データフレームの行列をひっくり返す	df.T
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
枠なしのデータラベルを入れる	plt.legend(frameon=False)
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
データフレームの選択したカラムを万の位で丸める	df[['列A', '列B']].round(-4)
データフレームのカラムのn次モーメントを算出する	scipy.stats.moment(df['列A'], moment=n)
横棒グラフをネイビー色を用いて描画する	plt.barh(データ列x, データ列y, color='navy')
option: ホワイトスモーク色を使用する	color = 'whitesmoke'
リストとリストの散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
以下と書きたい	X <= Y
出力ストリームからn文字、読み込む	f.read(n)
option: ゴールドにフォントの色を設定する	color = 'gold'
日付時刻データは日付時刻データより後ろか	aDatetime > aDatetime2
既存のファイルパスを追加できるようにSJISで開く]	open(filepath, mode='a', encoding='shift_jis')
バイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
データフレームのstart行目からend行目まで選択する	df[start:end]
option: 文字列の示すエンコーディングを使用する	encoding = s
辞書の値を列挙する	辞書.values()
セットが空かどうか	len(セット) == 0
散布図に左三角印を加える	plt.scatter(データ列x, データ列y, marker='<')
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
スタッキングで回帰分析をする	sklearn.ensemble.StackingRegressor()
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
両端キュー中の整数のインデックス	両端キュー.index(整数)
実行中の関数名	inspect.currentframe().f_code.co_name
文字列からひとつずつ文字を列挙する	list(文字列)
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
オリーブにヒストグラムの色を変更する	plt.hist(データ列, color='olive')
セットが空か調べる	len(セット) == 0
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
最初のカテゴリーを無視し、データフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
データフレームの行を範囲指定して選択する	df[start:end]
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
縦に複数のデータフレームを一つにまとめる	pd.concat([df, df2, df3], axis=1)
要素ひとつのタプルを作る	(要素,)
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
円プロットの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
predicateFuncを適用したとき真とならないシーケンスの部分	itertools.dropwhile(predicateFunc, iterable)
1行だけ改行を取り除いて標準入力から読む	sys.stdin.readline().rstrip()
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
変数を定義する	x = n
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
変数名がメソッド	inspect.ismethod(識別子)
タプルの要素数	len(タプル)
ファイルを読み込みモードを用いてオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
実線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの列を度数分布図として描画する	plt.hist(df[column])
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
nが整数	整数 == 整数2
option: ミディアムパープル色を使う	color = 'mediumpurple'
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
線グラフをダークレッド色として描画する	plt.plot(データ列x, データ列y, color='darkred')
シスル色を用いてヒストグラムを描画する	plt.hist(データ列, color='thistle')
実数を実数で割って、切り捨てる	x // y
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ダークターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
赤い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
クロスマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
リストをタプルに変換する	tuple(リスト)
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
散布図の上三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをミディアムスレートブルー色を用いて描画する	plt.hist(データ列, color='mediumslateblue')
カウンタの項目をひとつ増やす	aCounter[element] += 1
option: グラフの色をダークブルーに設定する	color = 'darkblue'
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
文字列の両端から文字を消す	文字列.strip(文字)
折れ線グラフの色をダークオーキッドに指定する	plt.plot(データ列x, データ列y, color='darkorchid')
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
レベッカパープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
リストをJSONフォーマットの文字列にする	json.dumps(リスト, ensure_ascii=False)
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
0からN未満までの配列を作る	np.arange(N)
リストの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
タプルをn回接続する	タプル * n
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
変数が無限大に近づく時の極限値を求める	sympy.limit(数式, 変数, oo)
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
オレンジレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
日付時刻データが土曜日か	aDatetime.weekday() == 5
データフレームのあるカラムの未入力値を後の行の値に設定する	df['列A'].fillna(method='bfill')
option: フォントの色をモカシンに変更する	color = 'moccasin'
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームから型リストであるデータ型の列を抽出する	df.select_dtypes(include=typeList)
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
条件を満たしたら、ループをもう一度実行し直したい	if 条件式:<nl><tab>continue
線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightgreen')
散布図の菱形印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームの選択したカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
散布図のバツ印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
formatのパターンで文字列からタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
リストと配列について散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
列を累積する	itertools.accumulate(iterable, operator.mul)
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
グラフの用途をスライドに設定する	sns.set(context='talk')
現在の日付時刻	datetime.datetime.today()
カウンタのktopを列挙する	aCounter.most_common(k)
データフレームの選択した列のNaNを50パーセンタイルに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: フォントの色をモカシンに設定する	color = 'moccasin'
数列とリストについての散布図にrgbの上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームをTSVファイルで出力する	df.to_csv('file.tsv', sep='\t')
option: ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
データフレームの指定したカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
データシリーズの中に文字列が含まれる	ds.isin([value])
実数は有限	math.isfinite(x)
xを表示する	print(x)
option: データ型として８ビット整数型を使用する	np.int8 = np.int<nl>dtype = np.int8
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
option: グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
オブジェクトがn回繰り返す列	itertools.repeat(element, n)
8進数文字列を整数に変換する	int(文字列, 8)
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategray')
option: マーカーを下三角に変更する	marker = 'v'
セットが上位集合かテストする	セット.issuperset(セット2)
データフレームを表示するときデータフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
散布図をベージュ色として描画する	plt.scatter(データ列x, データ列y, color='beige')
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
両端キュー中の整数の数をカウントする	両端キュー.count(整数)
横軸だけ目盛線	plt.grid(axis='x')
option: インディゴに色を変更する	color = 'indigo'
浮動小数点数を千の位で丸める	round(x, -3)
整数が負の数かどうか判定する	整数 < 0
二つのセットは交わりを持たないかどうか	セット.isdisjoint(セット2)
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
CSVファイルを読む	pd.read_csv('file.csv', sep=',')
リストと配列について散布図をプロットして、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カンマ区切り形式にデータフレームをカラムの名前を付けず書き出す	df.to_csv('file.csv', header=None)
散布図をスラグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='slategray')
前もってASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
スレートブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームの指定した列の中に文字列と文字列があるか調べる	df['列A'].isin([value, value2])
整数同士のXOR	整数 ^ 整数2
二つの表データを縦方向に一つにする	pd.concat([df, df2], axis=0)
折れ線グラフを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
リストを展開してプリントする	print(*リスト)
ダークバイオレット色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
既存のファイルを追加できるようにSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
n個にデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列を最後のコロンによって二分割する	文字列.rpartition(':')
JSONフォーマットの入力を辞書にする	json.load(ファイル入力)
色を色差別なくする	sns.set(pallete='colorblind')
両端キューは空か調べる	len(両端キュー) == 0
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
option: オレンジを使う	color = 'orange'
文字列中にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in 文字列)
ミディアムバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
折れ線グラフに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
データシリーズの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
線を青い点線を使って描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ヒストグラムをドジャーブルー色を使って描画する	plt.hist(データ列, color='dodgerblue')
双方向キューをセットに変換する	set(両端キュー)
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
option: ▼マーカーを描画する	marker = 'v'
辞書の全項目を空にする	辞書.clear()
標準エラーを使う	sys.stderr
文字列中にひとつでも非数字が存在する	any(not c.isdigit() for c in 文字列)
散布図の左三角印の色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列内に日本語が使われているかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
全要素を０で初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
カテゴリでグループ化して、データフレームをに箱ひげ図でプロットする	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
x,y,zをプリントする	print(x, y, z)
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの中に存在する文字列の数を数える	df.isin([value]).sum()
オブジェクトがジェネレータかどうか調べる	inspect.isgenerator(オブジェクト)
散布図をrgbの大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
二つのオブジェクトが同じ参照か調べる	obj is obj2
折れ線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
リストの要素を文字列として、空白で一つにする	' '.join(map(str, リスト))
データフレームの列を度数分布図にする	plt.hist(df[column])
ライトコーラル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
黒い下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの最初10行を抽出する	df.head(10)
改行しないで二つの変数の値をプリントする	print(変数名, 変数名, end='')
ゴールデンロッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: ホットピンクにグラフの色を変更する	color = 'hotpink'
散布図をアンティークホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
何か試しに動かす	print('Hello World')
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
option: グラフの色をダークシアグリーンに指定する	color = 'darkseagreen'
ミディアムバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ヒストグラムの色をシスルに指定する	plt.hist(データ列, color='thistle')
カラムのKurtosisを求める	scipy.stats.kurtosis(df['列A'], bias=False)
棒グラフの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
データシリーズの空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
文字列を右トリムする	文字列.rstrip()
赤色で表示できる文字列に変換する	f'\033[31m{x}\033[0m'
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
縦棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームの選択したカラムの欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
二つ以上の条件分岐が書きたい	if 条件式:<nl><tab>print('1')<nl>elif 条件式2:<nl><tab>print('2')<nl>else:<nl><tab>print('3')
文字列の先頭から改行を取り除く	文字列.lstrip('\n')
既存の行列を元にして全要素が1の配列	np.ones_like(aArray)
ダークマゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
横棒プロットを描いて棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データシリーズの欠損値を平均値に増やす	ds.fillna(ds.mean())
option: グラフの色をフクシアに指定する	color = 'fuchsia'
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
横棒グラフをミディアムオーキッド色として描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データ列の各データ値の出現数	ds.value_counts()
横棒グラフをホットピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームの選択したカラムの欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
縦棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
散布図をゲインズボロ色として描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームをグループ化し、それぞれの標準偏差を計算する	df.groupby('列A').std()
ベクトル演算を行う	import numpy as np
option: オーキッド色を用いる	color = 'orchid'
折れ線グラフの四角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
セットを別のセットとの共通要素のみにする	セット.intersection_update(セット2)
上限のある両端キュー	collections.deque(maxlen=最大長)
option: グラフの色をレベッカパープルにする	color = 'rebeccapurple'
リストと数列について散布図をプロットし、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
破壊的に二つの列によって小さい順にデータフレームを並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
整数はセットのどれか	aSet = [0, 1, 2]<nl>整数 in aSet
ヒストグラムを一点鎖線を用いて描画する	plt.hist(データ列, linestyle='dashbot')
JSON文字列をロードする	data = json.loads(文字列)
文字列をユニコードエスケープでバイト列に変換する	文字列.encode(encoding='unicode_escape')
データ列のユニークな値の個数を見る	ds.nunique()
データフレームの重複する行のみ	df[df.duplicated(keep=False)]
日付時刻データからn日分、減らす	aDatetime - datetime.timedelta(days=n)
グラフの縦横を指定する	plt.figure(figsize=(横幅, 高さ))
リストをJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False)
表データのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
改行なしに順にxとyを表示する	print(x, y, end='')
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
あるカラムの中にある文字列の数を求める	df['列A'].isin([value]).sum()
データシリーズの中にいくつ日付データがあるか数える	ds.isin([value]).sum()
データフレームのカラムの分散	df['列A'].var()
配列をセットに変換する	set(配列)
表を関数にグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
数列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームのある列を配列として抽出する	df['列A'].values
文字列を部分文字列を使って区切って、列挙する	文字列.split(部分文字列)
option: ライムグリーンにグラフの色を設定する	color = 'limegreen'
最大値でデータシリーズのNaNを埋める	ds.fillna(ds.max())
散布図をライム色を使って描画する	plt.scatter(データ列x, データ列y, color='lime')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームの内である列に重複があれば、取り除く	df.drop_duplicates(subset='列A', inplace=True)
セットから数値を取り除く	セット.remove(数)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
xとyをコロンで区切って表示する	print(x, y, sep=':')
ダークシアグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
折れ線グラフの丸マーカーの色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
疑似乱数を算出する	random.random()
データフレームのあるカラムの中にいくつがあるか数える	df['列A'].isin([value]).sum()
スクリプトファイルの絶対パス	os.path.abspath(__file__)
浮動小数点数のコサインの逆数	x = 0.33<nl>math.acos(x)
リストの平均値を求める	sum(リスト)/len(リスト)
太文字でプリントできる文字列に変換する	f'\033[1m{x}\033[0m'
オレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
第一引数で指定したファイル名	sys.argv[1]
散布図の▲マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
文字列を最後の部分文字列で分けた場合の後半の文字列を取り出す	文字列.rpartition(部分文字列)[-1]
表の列名をリストで置き換える	df.columns = columns
ヒストグラムの色をビスクにセットする	plt.hist(データ列, color='bisque')
日付データは何日か知る	aDate.day
データフレームの選択したカラムの欠損値を直前の値に変更する	df[['列A', '列B']].fillna(method='ffill')
データフレームを表示するとき表示できる最大列数を変更する	pd.set_option('display.max_columns', n)
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
折れ線グラフを濃いシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
最小値でデータフレームのNaNを埋める	df.fillna(df.min())
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
パウダーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
option: ダークスラテグレーを使用する	color = 'darkslategray'
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
三自然数の最小公倍数	math.lcm(n, n2, n3)
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
グラフをスライド用に設定する	sns.set(context='talk')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
降順に指定した列によってデータフレームを破壊的に並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
スプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
option: ライトシアンを用いる	color = 'lightcyan'
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
直後の値でデータフレームの選択したカラムのNaNを埋める	df[['列A', '列B']].fillna(method='bfill')
文字列中に空白が含まれるかどうか調べる	any(c.isspace() for c in 文字列)
折れ線グラフをダークスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ミスティローズにヒストグラムの色を指定する	plt.hist(データ列, color='mistyrose')
散布図の▽印の太さを変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームのある列の不偏分散	df['列A'].var(ddof=1)
本日が土曜日	datetime.datetime.today().weekday() == 5
S-W検定を行う	scipy.stats.shapiro(df['列A'])
実数のハイパボリック・サイン	math.sinh(x)
プロット中のフォントを設定する	sns.set(font=フォント名)
データフレームの一部のカラムのパーセンタイルを求める	df[['列A', '列B']].quantile(パーセント/100)
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームの累積分布を描く	sns.ecdfplot(x='列名', data=df)
二つの変数の値を順にプリントする	print(変数名, 変数名)
箱ひげ図としてデータ列を可視化する	plt.boxplot(データ列)
浮動小数点数を実数で割った余り	x % y
rgbの▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
プラットホームがLinuxか	sys.platform.startswith('linux')
データフレームの指定した列の中にいくつ日付データがあるか数える	df['列A'].isin([value]).sum()
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
タプルの要素が最初に見つかるインデックスを使う	タプル.index(要素)
データシリーズを整数に四捨五入する	ds.round()
データフレームのデータを条件で消す	df[(df['列A'] == x) & (df['列B'] == y)]
要素はリストに含まれる	要素 in リスト
横棒グラフをライトスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
数列から両端キューを生成する	collections.deque(数列)
グラフの描画を見やすくする	import seaborn as sns
二数の最小値	min(x, y)
プラットホームのバイトオーダを使う	sys.byteorder
横棒グラフをスノー色を用いて描画する	plt.barh(データ列x, データ列y, color='snow')
option: グラフの色をグリーンイエローにセットする	color = 'greenyellow'
データフレームのあるカラムを配列にする	df['列A'].values
青いヒストグラムを描画する	plt.hist(データ列, color='b')
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データフレームの記述統計量を算出する	df.describe()
オブジェクトが型か調べる	isinstance(obj, クラス)
rgbの▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
リストのすべての要素を捨てる	リスト.clear()
折れ線グラフの四角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
yが無限大に近づくときの数式の極限値を計算する	sympy.limit(数式, y, oo)
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
グラフの色を全般的に暗くする	sns.set(pallete='dark')
ヒストグラムの色をアンティークホワイトにする	plt.hist(データ列, color='antiquewhite')
データフレームの一部の列の標本標準偏差	df[['列A', '列B']].std(ddof=1)
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
配列の次元を変形する	aArray.reshape(行数, 列数)
データフレームを十の位で丸めて整数型にする	df.round(-1).astype(int)
実行時に標準出力がパイプかどうか	not sys.stdout.isatty()
SVDで整数次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
文字列がセットの要素かテストする	文字列 in セット
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
データシリーズの中に文字列とがいくつ含まれるかカウントする	ds.isin([value, value2]).sum()
リストと配列について散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
スタックの最初に要素を追加する	両端キュー.appendleft(要素)
プロットのx軸とy軸の比率を等しくする	plt.axis('equals')
eの小数点数乗	math.exp(x)
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
リストとリストの散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
タプルを反転する	reversed(タプル)
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
リストとリストについて散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
整数をバイト列に変換する	整数.to_bytes(length=バイト数, byteorder='big')
ラジアンの角度を求める	math.degrees(x)
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
文字列の先頭からある文字を取り除く	文字列.lstrip(文字)
データフレームをグループ化し、ある列に対し最大値を算出する	df.groupby('列A')['列B'].max()
タイタニック号のデータセットをロードする	df = sns.load_dataset('titanic')
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
散布図を四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
カウンタ同士でユニオン	aCounter | aCounter2
記号計算モジュールを使う	import sympy
データシリーズの尖り	ds.skew()
データフレームをあるカラムによって昇順にソートする	df.sort_values(by='列A', ascending=True)
option: 色をダークバイオレットにセットする	color = 'darkviolet'
xとyの商と余りを同時に求める	divmod(x, y)
線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
option: ゴーストホワイトを使用する	color = 'ghostwhite'
円グラフで数列の割合を可視化する	plt.pie(データ列, startangle=90)
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
散布図のダイアモンド印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームの選択した列の欠損値をxに指定する	df[['列A', '列B']].fillna(x)
イエローグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ベクトルの合計値を求める	np.sum(aArray)
赤い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ライトスレイグレーを使う	color = 'lightslategrey'
ビン数nでデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
データフレームの未入力値を最頻値で埋める	df.fillna(df.mode().iloc[0])
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
実数を小数点以下第一位で丸める	round(x, 1)
ラベンダーブラッシュ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
カテゴリで色分けして、データフレームをに箱ひげ図を使って可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストから重複なく、n個ランダムに選んでリストにする	random.sample(リスト, k=n)
option: バツ印を使用する	marker = 'x'
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
option: 改行をセパレータで使う	sep = '\n'
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ふたつのカラムを組み合わせてグループ化し、最大値を計算する	df.groupby(['列A', '列B'], as_index=False).max()
文字の文字コード	ord(文字)
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
要素はリストの要素でないか調べる	要素 not in リスト
データフレームの一部のカラムの統計量	df[['列A', '列B']].describe()
横棒プロットをプロットして、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データフレームを二つの列によってグループ化する	df.groupby(['列A', '列B'])
散布図をグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='gray')
指定したカラムのKurtosisを算出する	df['列A'].kurt()
散布図をゴーストホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの一部の列が正規分布からどの程度、尖っているか調べる	df[['列A', '列B']].skew()
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
インデントを指定して辞書をJSON文字列に変換する	json.dumps(辞書, ensure_ascii=False, indent=n)
option: ペルー色を使用する	color = 'peru'
100行をランダムに重複ありでデータフレームからサンプリングする	df.sample(100, replace=True)
コマンドの第一引数を知る	sys.argv[1]
半透明の破線としてデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
データシリーズが正規分布からどの程度、尖っているか確認する	ds.skew()
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
リストをJSONフォーマットとしてファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
option: オールドレースにフォントの色を設定する	color = 'oldlace'
xを論理値にする	bool(x)
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
実数を複素数に変換する	complex(x)
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
線形回帰モデルを作る	model.fit(説明変数, 目的変数)
ライムグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
リストを展開して表示する	print(*リスト)
predicateFuncがtrueとなる列の部分	itertools.dropwhile(predicateFunc, iterable)
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
整数を両端キューのn番目に追加する	両端キュー.insert(n, 整数)
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データシリーズの中にある文字列と文字列の個数を数える	ds.isin([value, value2]).sum()
データフレームの指定したカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
散布図の丸印を青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
シアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='cyan')
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
option: 色をカーキに設定する	color = 'khaki'
XをYで割った結果を計算したい	X / Y
列の重複組み合わせを求める	itertools.combinations_with_replacement(iterable, n)
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
データフレームをExcelファイルファイルで保存する	df.to_excel('file.xlsx')
カウンタ間でユニオン	aCounter | aCounter2
配列からひとつランダムに選んでリストにする	random.choice(配列)
整数の三乗を求める	整数 ** 3
スレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
データフレームのn行以降選ぶ	df[n:]
縦向きにデータフレームを合体させる	pd.concat([df, df2], axis=0)
小数点数のk進対数	math.log(x, k)
データフレームのある列の中央値を求める	df['列A'].median()
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
NaNも加えてデータフレームのあるカラムをワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], dummy_na=True)
データフレームの選択した列の中央値	df[['列A', '列B']].median()
ヒストグラムを描く	plt.hist(データ列)
配列と配列について散布図を描画し、大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
クラス分類をアンサンブル学習を用いて行う	sklearn.ensemble.VotingClassifier()
列をビン数nとしてビンニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
標準出力がターミナル出力か調べる	sys.stdout.isatty()
二つのデータフレームを縦に結合する	pd.concat([df, df2], axis=0)
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightseagreen')
二つの文字列をケースを無視して比較する	文字列.casefold() < 文字列2.casefold()
カウンタをイテラブルとして更新する	aCounter.update(iterable)
データフレームからカテゴリデータのみ取り出す	df.select_dtypes('object')
日付時刻データがタイムスタンプデータより後ろか調べる	aDatetime > aDatetime2
中央値で列をビン分割する	pd.qcut(ds, 2)
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
最後の部分文字列によって文字列を二つに分ける	文字列.rpartition(部分文字列)
文字列を最後から部分文字列で分割する	文字列.rsplit(部分文字列)
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: パープルにフォントの色を設定する	color = 'purple'
xが無限大に近づく際、数式の極限値を求める	sympy.limit(数式, [|変数]x, oo)
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームをある列によって昇順に並べて、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
横棒グラフをダークブルー色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
識別子がジェネレータ関数か調べる	inspect.isgeneratorfunction(識別子)
実数のn乗して浮動小数点数による余り	pow(x, n, y)
箱髭図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
ASCII限定として正規表現をあらかじめコンパイルする	re.compile(pattern, flag=re.ASCI)
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
リスト内の要素が全て真	all(リスト)
データフレームの最頻値	df.mode()
要素がセットに含まれない	要素 not in セット
改行で区切ってxとyをプリントする	print(x, y, sep='\n')
n個にデータフレームの中の列を等間隔でビンニングする	pd.cut(df[col], n)
グラフで使える色名の一覧	matplotlib.colors.cnames
2次元リストをフラット化する	sum(リスト)
エポック秒のカラムからdatetime64型にする	pd.to_datetime(df['列A'], unit='s', utc=True)
文字列中から部分文字列を探す	文字列.find(部分文字列)
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
文字列を最後からセパレータで区切る	文字列.rsplit(セパレータ)
シードをnで固定する	random.seed(n)
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
破線にヒストグラムを指定する	plt.hist(データ列, linestyle='dashed')
文字列から文字を全て消す	文字列.replace(文字, '')
カテゴリで色分けしてデータフレームをにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
外れ値を除いたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
コーンフラワーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
折れ線グラフにポイント印を用いる	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフをレモンシフォン色を用いて描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
色付きの破線を用いてイテラブルの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ヒストグラムの色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
タプルの長さを見る	len(タプル)
星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
データフレームの一部のカラムの中の欠損値の合計をカウントする	df[['列A', '列B']].isna().sum()
データフレームはどの程度、分散しているか見る	df.var()
リストをソートしてJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
表データのあるカラムをdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
ピアソンでデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
プログラムを強制的に止める	sys.exit()
日付時刻データが何日か知る	aDatetime.day
識別子がビルトイン	inspect.isbuiltin(識別子)
イテラブルとリストの散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ミディアムターコイズを使用する	color = 'mediumturquoise'
グリッドの線スタイルを点線に変更する	plt.grid(linestyle='dotted')
データフレームをCSVから読む	pd.read_csv('file.csv', sep=',')
散布図を赤い右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
横棒グラフを濃いシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ファイルを開き]、追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
データフレームのふたつの列を除いてみる	df.drop(['列A', '列B'], axis=1)
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
データフレームの複数の列を削除してみる	df.drop(['列A', '列B'], axis=1)
データシリーズを百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
ラベンダーブラッシュ色を使ってヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
option: 色を半透明にする	alpha = 0.5
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
複数の変数の値を改行しないで表示する	print(変数名, 変数名, end='')
データシリーズを表データの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
散布図の印を上三角にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームの文字列を未入力値に変換する	df.replace(値, np.nan)
option: ライトグリーン色を使用する	color = 'lightseagreen'
グラフの色を淡くする	sns.set(pallete='muted')
データフレームのカラムのトリム分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
複数のデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=0)
整数が5で割り切れるか調べる	整数 % 5 == 0
三つの最大値	max(x, y, z)
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
option: 色をディムグレーに設定する	color = 'dimgrey'
ファイルパスの拡張子付きのファイル名	os.path.basename(filepath)
データフレームを二つの列によってまとめたグループ	df.groupby(['列A', '列B'])
数列を3つ並べて柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
マッピングを計数器に変換する	collections.Counter(aDict)
ある列にリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
option: 色をミントクリームに変更する	color = 'mintcream'
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
データフレームの指定したカラムはどの程度、分散しているか見る	df['列A'].var()
データ列の各データが何回出現するか見る	ds.value_counts()
タイタニックのデータセットをロードする	df = sns.load_dataset('titanic')
タプルの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
両端キューの長さ	len(両端キュー)
整数に整数を掛ける	整数 * 整数2
NaNを含めてデータフレームをあるカラムの値でグループ分けする	df.groupby('列A', dropna=False)
データフレームを丸めて、整数にする	df.round().astype(int)
リストと配列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: 改行コードを旧Macに変更する	newline = '\r'
正規分布で乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
nまでの偶整数列	list(range(2, n, 2))
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
実数から実数を引く	x - y
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
二次元リストをフラット化する	sum(リスト)
option: バツマーカーを描画する	marker = 'x'
辞書にキーがあるか	キー in 辞書
ワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
カウンタからゼロカウントを削除する	+aCounter
小数点数とyのノルム	math.hypot(x, y)
リストの末尾	リスト[-1]
データフレームの末尾n行を取り出す	df.tail(n)
データフレームの一部の列の分散	df[['列A', '列B']].var()
ファイルパスが存在しないか調べる	not os.path.exists(filepath)
割り算の切り捨てが書きたい	X // Y
フクシア色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
文字列の先頭から部分文字列を除去する	文字列.lstrip(部分文字列)
option: イエローグリーンを使用する	color = 'yellowgreen'
ヒストグラムをパウダーブルー色を用いて描画する	plt.hist(データ列, color='powderblue')
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
リストからランダムにひとつ選ぶ	random.choice(リスト)
配列の折れ線プロットを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
リストとリストの散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
決定木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: 改行なし	end = ''
ファイルパスのファイル名	os.path.basename(filepath)
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
option: 文字列の示すエンコーディングを用いる	encoding = s
文字列を末尾から区切り記号で区切る	文字列.rsplit(セパレータ)
文字列をISO書式で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
nが整数と等しいか調べる	整数 == 整数2
データフレームを２つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
文字列中にひとつも数字が含まれないか調べる	any(not c.isdigit() for c in 文字列)
文字列を全て大文字にする	文字列.upper()
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
列をタイムスタンプ型にする	pd.to_datetime(df['列A'])
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
文字列をエラーを無視してバイト列に変換する	文字列.encode(errors='ignore')
数式を数値計算する	float(数式)
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
列の値でデータフレームをグループ分けする	df.groupby('列A')
データフレームをある列のカテゴリとして集約して、各グループ毎の件数を知る	df.groupby('列A').size()
option: 線の種類を実線にする	linestyle = 'solid'
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
文字列が両端キューの中に含まれてる	文字列 in 両端キュー
折れ線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
数式のxについてのn階微分を算出する	sympy.diff(数式, [|変数]x, n)
等しい量になるようにリストをビン数nとしてビン分割する	pd.qcut(aList, n)
データフレームのカラムのKurtosisを算出する	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームを四捨五入して、整数型にする	df.round().astype(int)
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
整数の二分の一	整数 / 2
配列の行ごとの合計値を計算する	np.sum(aArray, axis=1)
文字列中にひとつも小文字が含まれないか調べる	any(not c.islower() for c in 文字列)
タイムスタンプデータとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
文字列をコロンで区切り、、列挙する	文字列.split(':')
列の中に日付データと文字列が存在するか	df['列A'].isin([value, value2])
上限nの両端キューを作成する	collections.deque(maxlen=最大長)
改行しなくて文字列をプリントする	print(文字列, end='')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
３つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
xの小数点以下'3'桁までプリントする	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
縦棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
deqから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
option: 書き込みモードを使用する	mode = 'w'
モカシン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
カレント作業ディレクトリ	os.getcwd()
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
複数の変数を順にプリントする	print(変数名, 変数名, 変数名)
数式を積分する	sympy.integrate(数式)
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(配列, 'norm')
option: インディアンレッド色を使う	color = 'indianred'
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
等しい量になるように分割数nで配列を分割する	pd.qcut(aArray, n)
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
黒い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
オブジェクトの無限列	itertools.repeat(element)

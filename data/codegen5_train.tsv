ピアソンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
ヒストグラムの色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
列によって破壊的にデータフレームを降順にソートする	df.sort_values(by=column, ascending=False, inplace=True)
リストとリストについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
オブジェクトがあるクラスのインスタンスか	isinstance(obj, クラス)
横棒グラフの色をティールにする	plt.barh(データ列x, データ列y, color='teal')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
日付データの日数	aDate.day
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの未入力値がある行をドロップする	df.dropna()
option: ダークバイオレットにグラフの色を指定する	color = 'darkviolet'
マップに要素をキーとして加える	aDict[key] = element
リストをnから番号付けする	enumerate(aList, start=n)
黒い丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
最大値・最小値の範囲で一様な疑似乱数を発生させる	random.uniform(最小値, 最大値)
散布図をミディアムオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
変数を黒色化する	f'\033[30m{value}\033[0m'
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
イテラブルから新しいカウンタを作る	collections.Counter(iterable)
データフレームの値が欠損値か調べる	df.isna()
option: ダークグレー色を使う	color = 'darkgray'
線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
カラーバーを横向きで設定する	plt.colorbar(orientation='horizontal')
散布図の菱形マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
列の全順列	itertools.permutations(iterable)
ヒストグラムを実線に変更する	plt.hist(データ列, linestyle='solid')
四分位数ごとに配列を分割する	pd.qcut(aArray, 4)
option: 文字コードを文字コードtextに設定する	encoding = text
折れ線グラフに凡例をつける	plt.plot(データ列x, データ列y, label='ラベル')
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
ミディアムシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
option: スキップするフッタをnに設定する	skipfooter = n
カラムを丸める	ds.round()
マッピングのキーの値を参照する	aDict[key]
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='teal')
折れ線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
データフレームの列の各値が何回出現するか調べる	df[col].value_counts()
イテラブルとリストについて散布図を描画してマーカーを菱形に変更する	plt.plot(データ列x, データ列y, marker='D')
ファイルをUTF8で開く]	open(filepath, encoding='utf-8')
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
縦棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
イテラブルの集合を使う	set(iterable)
文字列の終了位置より前に部分文字列が含まれないか	s.find(sub, 0, end) == -1
項目名が辞書にあるか調べる	key not in aDict
データフレームの列と列を消す	df.drop([column, column2], axis=1)
０で全要素を初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
サンディーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='sandybrown')
文字列がタプルに含まれないか	element not in aTuple
横棒グラフをシャルトリューズ色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ゼロ埋めされた配列	np.zeros(要素数)
ダークスラテグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
部分文字列で文字列を分けたときの後半の文字列	s.partition(sub)[-1]
option: グラフの種類を実線に設定する	linestyle = 'solid'
データフレームから型の列を抽出する	df.select_dtypes(ty)
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
文字列をパディングする	s.zfill(文字列幅)
句点文字を全部見る	string.punctuation
ヒストグラムの色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
双方向キューは空でないか	len(deq) != 0
nがn2で割り切れない	n % n2 != 0
縦棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
多次元データをt分布型確率的近傍埋め込み法で淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
NaNも加えてデータフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column], dummy_na=True)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
ヒストグラムをアリスブルー色として描画する	plt.hist(データ列, color='aliceblue')
nとn2のXORを求める	n ^ n2
柱状グラフを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
ロードしたモジュールの一覧を確認する	sys.modules
散布図のポイント印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
データフレームのカラムをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームの要約統計量を求める	df.describe()
RANSACで回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
黒い四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
列からひとつランダムに選ぶ	random.choice(iterable)
茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフの色をピンクに変更する	plt.plot(データ列x, データ列y, color='pink')
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
横棒グラフを青緑色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
データ列が何日か調べる	ds.dt.day
縦棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフをデピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='deeppink')
実数の小数部を求める	math.modf(x)[0]
棒グラフをディープスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
２つの文字列をスラッシュで区切って表示する	print(value, value2, sep='/')
線グラフをチョコレート色を用いて描画する	plt.plot(データ列x, データ列y, color='chocolate')
オールドレース色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
無限大	math.inf
ファイルを開いて]、バイナリストリームを使う	open(filepath, mode='rb')
マッピングをカウンタにする	collections.Counter(aDict)
option: コーンズシルクに色を設定する	color = 'cornsilk'
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
複数の列を用いてで破壊的に表データをソートする	df.sort_values(by=column, inplace=True)
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
値を改行なしにプリントする	print(value, end='')
追加できるように文字列の示す文字コードとしてファイルをオープンする]	open(filepath, mode='a', encoding=s)
rgbの右三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの列の値が欠損値かどうか調べる	df[col].isna()
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフの透明度を指定する	plt.plot(データ列x, データ列y, alpha=0.5)
リストと配列の散布図に△マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
小数点数が有限か	math.isfinite(x)
option: アクアマリンを用いる	color = 'aquamarine'
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
option: 印を大バツに変更する	marker = 'X'
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
変数を赤色化する	f'\033[31m{value}\033[0m'
日付を用いる	import datetime
データフレームの列の値がリストに含まれる行を抽出する	df[df[column].isin(aList)]
配列をビン数nでビンニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
現在の秒数	datetime.date.today().second
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
option: マルーンにグラフの色を変更する	color = 'maroon'
タイムスタンプデータが木曜日かどうか	aDatetime.weekday() == 3
option: 珊瑚色を用いる	color = 'coral'
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
データフレームの中の列を分割する	pd.cut(df[col], aList)
option: ライトシアンを使う	color = 'lightcyan'
二つのデータフレームをジョインする	pd.merge(df, df2)
ValueMapでまとめてデータフレームのリストカラムの値を置き換える	df[aList].replace(ValueMap)
黒い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
行列の行ごとの最大値	np.max(aArray, axis=1)
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
option: フォントの色を貝殻に設定する	color = 'seashell'
ミディアムオーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
predicateFuncが真になるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
データフレームのリストカラムが正規分布からどれだけ、尖っているか見る	df[aList].skew()
範囲からベクトル	np.linspace(最小値, 最大値, 要素数)
データフレームのリスト列の記述統計量を求める	df[aList].describe()
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
オールドレース色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
option: ダークグレー色を用いる	color = 'darkgrey'
列を文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データフレームの列がxでないデータを消す	df[df[column] == x]
多次元データをt-SNEを使って淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
２つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
回帰木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
組の各値を関数に適用した結果で並べる	sorted(aTuple, key=func)
折れ線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をゴールデンロッドにする	color = 'goldenrod'
バリーウッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
nがn2の倍数でないかテストする	n % n2 != 0
タイムスタンプデータが日付時刻データより後ろか確認する	aDatetime > aDatetime2
データフレームを列によって分類して、グループの最小値を計算する	df.groupby(column).min()
option: プラム色を使う	color = 'plum'
データフレームを表示するとき、小数点以下の表示精度を変更する	pd.set_option('precision', n)
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
値が集合のメンバーに含まれないか調べる	element not in aSet
xが真	bool(x)
数式を変数についてn階微分する	sympy.diff(e, z, n)
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
rgbの菱形マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
シーケンスから計数器を新規生成する	collections.Counter(iterable)
実行環境がLinuxかどうか	sys.platform.startswith('linux')
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
グリッド線を青くする	plt.grid(color='b')
散布図をホワイト色として描画する	plt.scatter(データ列x, データ列y, color='white')
option: オーキッドを使う	color = 'orchid'
option: 右三角印を使う	marker = '>'
option: 印を△に変更する	marker = '^'
ダークオリーブグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
ヒストグラムの色をホワイトに変更する	plt.hist(データ列, color='white')
パレットトルコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ダークスレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslateblue')
カラムの中にと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
欠損値も加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
option: 四角印を描画する	marker = 's'
データフレームの列の文字列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
リストを白色にする	f'\033[37m{value}\033[0m'
漢字が文字列に含まれるか	re.search('[\u4E00-\u9FD0]', s)
散布図をディープスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
リストをボックスチャートで作図する	plt.boxplot(データ列)
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
スタックをタプルに変換する	tuple(deq)
option: 色の透明度を指定する	alpha = 0.5
両端キューの中に数値が含まれてる	element in deq
リストを青色化する	f'\033[34m{value}\033[0m'
日付時刻データの曜日を整数で使う	aDatetime.weekday()
三変数の最小値	min(x, y, z)
折れ線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
数値を赤色で出力する	print(f'\033[31m{value}\033[0m')
青い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
nを切り捨てながらn2分の一にする	n //= n2
option: グレー色を使用する	color = 'grey'
変数名を項目名として、マップ	dict(name=element)
データフレームの列の文字列長を列として見る	df[col].str.len()
片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
要素がセットに含まれるか調べる	element in aSet
二つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
リスト中の要素が全て真か調べる	all(aList)
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームを破壊的に２つの列によってで並べる	df.sort_values(by=['A', 'B'], inplace=True)
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
新しい回帰木モデルを作成する	model = sklearn.tree.DecisionTreeRegressor()
option: スチールブルーにグラフの色を変更する	color = 'steelblue'
nがタプルのどれかか調べる	n in aTuple
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
データ列のタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
データフレームを関数によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
オブジェクトが辞書か調べる	isinstance(obj, dict)
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
option: オレンジを使用する	color = 'orange'
データフレームのリスト列が正規分布からどの程度、尖っているか見る	df[aList].skew()
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
データフレームから型リストで指定したデータ型の列のみ選ぶ	df.select_dtypes(include=typeList)
方程式の解を計算する	sympy.solve(e)
文字列を新しい文字列を使って置換する	s.replace(sub, newsub)
グラフを描く	import matplotlib.pyplot as plt
ベクトルのスカラー倍	aArray * n
データフレームから指定された２つの列を抽出する	df[[column, column2]]
線グラフの色をミスティローズにする	plt.plot(データ列x, データ列y, color='mistyrose')
option: マーカーを三角に指定する	marker = '^'
データフレームのカラムのNaNを最大値に設定する	df[col].fillna(df[col].max())
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
散布図のポイントマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
赤い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
分子n分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
折れ線グラフに青いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
縦棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
折れ線グラフを半透明の一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフをミディアムバイオレットレッド色を使って描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
散布図の丸印を赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
耐火レンガ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
オブジェクトの参照カウントを確める	sys.getrefcount(obj)
既存の配列をベースに全要素が初期値のベクトル	np.full_like(aArray, 初期値)
縦棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
文字列がキーワード	keyword.iskeyword(s)
option: フォレストグリーンにグラフの色を設定する	color = 'forestgreen'
データフレームのリストカラムの値は欠損値か調べる	df[aList].isna()
データ列の中に存在する日付データと日付データの合計を数える	ds.isin([value, value2]).sum()
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
PandasでUNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
数式のパラメータについてのn階微分を計算する	sympy.diff(e, z, n)
コマンドの第２引数	sys.argv[1]
データフレームを列の値毎にグループ化して、個数を計算する	df.groupby(column).count()
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
グリッドを破線にする	plt.grid(linestyle='dashed')
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
rgbの四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ゼロ埋めされた三2ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.int16)
列によってデータフレームをソートして行を振り直す	df.sort_values(columns).reset_index(drop=True)
エクセルファイルをファイルから読む	pd.read_excel(filename)
nとn2のXOR	n ^ n2
ポスターにプロットをする	sns.set(context='poster')
option: グラフの色をライトグリーンにセットする	color = 'lightgreen'
棒グラフを真紅色として描画する	plt.bar(データ列x, データ列y, color='crimson')
グラフを論文用に設定する	sns.set(context='paper')
散布図に赤いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
双方向キューをタプルに変換する	tuple(deq)
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
オブジェクトをイテラブルにする	iter(obj)
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
二つの列の値によってデータフレームをグループ化し、基本統計量を求める	df.groupby(['A', 'B']).describe()
ライム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
option: 色をレモンシフォンに変更する	color = 'lemonchiffon'
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
縦棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
横棒グラフをミディアムシアグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
正規化されたヒストグラムをプロットする	plt.hist(データ列, density=True)
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
ミディアムオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
昇順にデータフレームを'A'列を用いて並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: グラフの色をオリーブに設定する	color = 'olive'
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
新しいガウス過程分類モデルを作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
紺碧色としてヒストグラムを描画する	plt.hist(データ列, color='azure')
データフレームのカラムの欠損値を後の値に設定する	df[col].fillna(method='bfill')
option: 複素数型を使う	dtype = bool
組をカンマ区切りで表示する	print(*aTuple, sep=',')
青い一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列の右側から改行を除去する	s.rstrip('\n')
option: 色をイエローグリーンに指定する	color = 'yellowgreen'
データフレームを列によって並べ直して、下位n件を取り出す	df.sort_values(columns).tail(n)
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
文字列リストを結合し、一つの文字列にする	''.join(aStringList)
ヒストグラムの色をオールドレースにする	plt.hist(データ列, color='oldlace')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームを複数の列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
列の標本標準偏差を求める	ds.std()
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
グラフの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
option: 読み込まない列番号をnamesで指定する	skiprows = names
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
三つの文字列を順に表示する	print(value, value2, value3)
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
データフレームを破壊的に小さい順に'A'列によって並べる	df.sort_values(by='A', ascending=True, inplace=True)
カーキにヒストグラムの色を変更する	plt.hist(データ列, color='khaki')
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
文字列の右側からタブを除く	s.rstrip('\t')
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
データフレームの列がxの行を抽出する	df[df[column] == x]
モカシン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームを列によってまとめたグループ	df.groupby(column)
カテゴリ別で色付けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列を走査し、正規表現にマッチするか調べる	re.search(pattern, s)
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
配列とリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
リストを等しい量になるようにビン数nでビン分割する	pd.qcut(aList, n)
数列の変遷を点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
読み込みモードとしてファイルパスをオープンする]	open(filepath, mode='r')
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
浮動小数点数を浮動小数点数で割る	x / y
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
部分文字列が文字列の開始位置より後に含まれないかどうか調べる	s.find(sub, start) == -1
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの各次元の大きさを調べる	df.shape
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
データフレームを'A'列と'B'列によってで大きい順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
ピーチパフ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
CSVを読む	pd.read_csv(filename, sep=',')
nをn2だけ右シフトする	n >> n2
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームのカラムを柱状図で描画する	plt.hist(df[column])
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
文字列をセパレータによって分割する	s.split(sub)
分子と分母から分数を用意する	fractions.Fraction(分子, 分母)
データフレームの列の中にいくつ文字列が含まれるか数える	df[col].isin([value]).sum()
赤い上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
連立方程式の解を求める	sympy.solve([e, e2])
文字列内にひとつでも数字が含まれるか	any(c.isdigit() for c in s)
ダークブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
棒グラフを淡いピンク色色を用いて描画する	plt.bar(データ列x, データ列y, color='lightpink')
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
オブジェクトが組に含まれない	element not in aTuple
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ヒストグラムをライトゴールドロディイエロー色を使って描画する	plt.hist(データ列, color='lightgoldenrodyellow')
線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ロバストな重回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
縦棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: ダークグレーを用いる	color = 'darkgray'
データフレームのリストカラムは正規分布からどの程度歪んでいるか見る	df[aList].kurt()
サドルブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='saddlebrown')
option: 印の大きさを設定する	markersize = 2.0
カラムの欠損値を直前の値で埋める	ds.fillna(method='ffill')
option: グラフの色を青に設定する	color = 'blue'
二つの文字列を辞書順で比較する	s < s2
リストとリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
二つの列の値によって表をグループ化し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
ダークグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
文字を文字コードにする	ord(ch)
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
エラーなく辞書からキーの値を参照する	aDict.get(key, None)
UTF8で追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
データフレームのカラムを度数分布図にする	plt.hist(df[column])
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
列の欠損値をメディアンに設定する	ds.fillna(ds.median())
辞書からキーの値	aDict.get(key)
コマンドフラグの状態	sys.flags
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
JSONファイルファイル名がか調べる	filename.endswith('.json')
線グラフの色をダーク・スラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategrey')
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
セットをリストにする	list(aSet)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
データフレームを散布図として可視化する	sns.scatterplot(data=df, x='列名', y='列名')
横棒グラフを貝殻色として描画する	plt.barh(データ列x, データ列y, color='seashell')
組が全て真か確認する	all(aTuple)
文字列を最後の部分文字列で二分する	s.rpartition(sub)
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
配列とリストについての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
両端キューから最初の要素を取り除く	deq.remove(element)
シアン色としてヒストグラムを描画する	plt.hist(データ列, color='cyan')
珊瑚色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
データ列の中にいくつ未入力値が含まれるか数える	ds.isna().sum()
n進数の文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
文字列全体をケースを無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
option: ライトスレイグレーを用いる	color = 'lightslategrey'
双方向キューの先頭に列の各要素を入れる	deq.extendleft(iterable)
よりランダムなランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
縦棒グラフを描画し、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
組中の最初のオブジェクトを探す	aTuple.index(element)
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
nの無限の数列	itertools.repeat(n)
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームのカラムの値がNaNかどうか調べる	df[col].isna()
データフレームの列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
方程式の解	sympy.solve(e)
空のタプルを作る	()
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
文字列を改行で分割し文字列リストに変換する	s.splitlines()
双方向キューが空かどうか	len(deq) == 0
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
グレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
Pandasで、データフレームのカラムをdatetime64型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
入力から２つの整数値を取り出す	A, B = map(int, input().split())
シスル色としてヒストグラムを描画する	plt.hist(データ列, color='thistle')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
option: ディムグレー色を用いる	color = 'dimgray'
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
nを否定する	not n
データフレームから列を三つだけ選択する	df[[column, column2, column3]]
散布図に上三角印を用いる	plt.scatter(データ列x, データ列y, marker='^')
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
縦棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
ロバストな線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
option: フォントの色をミディアムブルーに設定する	color = 'mediumblue'
パラメータについて数値を微分する	sympy.diff(e, z)
イテラブルとタプルをチェインする	itertools.chain(iterable, iterable2)
データ列の時	ds.dt.hour
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
option: ダークサーモンを使う	color = 'darksalmon'
凡例を加える	plt.legend(['凡例A', '凡例B'])
データフレームの名前リストで指定された列を削除する	df.drop(columns, axis=1)
文字列の末尾から改行を除去する	s.rstrip('\n')
文字列が全て空白文字からなるか	s.isspace()
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
折れ線グラフの線種を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
実数のハイパボリック・サインの逆数	math.asinh(x)
コマンドラインフラグの状態を知る	sys.flags
行列のデータ型	aArray.dtype()
ミディアムシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
データフレームをグループ化し、それぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
データ列の折れ線グラフを描画して色をRGBとして設定する	plt.plot(データ列x, データ列y, color='#800080')
箱髭図を２つ並べて描画する	plt.boxplot([データ列, データ列])
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
数値の数値を算出する	float(e)
カウンタの正のカウントだけ残す	+aCounter
集合のイミュータブル版	frozenset(aSet)
散布図をチョコレート色を使って描画する	plt.scatter(データ列x, データ列y, color='chocolate')
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
チョコレートにヒストグラムの色を指定する	plt.hist(データ列, color='chocolate')
タイムスタンプデータが土曜日か	aDatetime.weekday() == 5
イテラブルのイミュータブルな集合	frozenset(iterable)
チョコレート色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
実行を即座に終了する	sys.exit()
十六進数字を全て求める	string.hexdigits
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
デックの先頭を使う	deq[0]
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
オブジェクトに属性が存在するかどうか調べる	hasattr(obj, プロパティ名)
標準出力を即時表示する	sys.stdout.flush()
漢字が文字列中に含まれる	re.search('[\u4E00-\u9FD0]', s)
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
ミディアムスプリンググリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
本日は何年か知る	datetime.datetime.today().year
データフレームから先頭の列を除く	df[df.columns[1:]]
縦棒グラフを茶色色を用いて描画する	plt.bar(データ列x, データ列y, color='brown')
文字列の接頭辞が部分文字列かどうか	s.startswith(sub)
多次元尺度構成法を用いて多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
折れ線グラフのダイアモンド印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
組をn倍する	aTuple * n
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
赤い一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
nを切り捨てながらn2分の１にする	n //= n2
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
バリーウッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
n個分両端キューの要素を右に回転させる	deq.rotate(n)
ヒストグラムをライムグリーン色を使って描画する	plt.hist(データ列, color='limegreen')
列のコンビネーション	itertools.combinations(iterable, n)
文字列からformatのパターンとしてタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列をn回続くイテラブル	itertools.repeat(element, n)
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
日付時刻データにn分を加える	aDatetime + datetime.timedelta(minutes=n)
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
列を千の位で四捨五入する	ds.round(-3)
本日が何日か知る	datetime.datetime.today().day
長さnのリストを作る	[0] * n
タプルを複製する	dict(aDict)
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
散布図に黒い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
ユーザから入力される	input()
データフレームのリスト列を百の位で四捨五入して、整数にする	df[aList].round(-2).astype(int)
行列の行ごとの平均値を求める	np.mean(aArray, axis=1)
ベクトルのスカラー倍を求める	aArray * n
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列の左側だけ大文字化する	s.capitalize()
暗くテーマをプロットの描画で使う	sns.set(pallete='dark')
縦棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
スノー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
JSON形式の文字列を読み込む	json.loads(jsonString)
リストを逆順にする	aList[::-1]
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
日付時刻データをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
option: フォントの色をパパイヤウィップに設定する	color = 'papayawhip'
文字列のケースを入れ替える	s.swapcase()
データフレームの指定されたデータ型のカラム名を列挙する	df.select_dtypes(型).columns
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
折れ線グラフのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
リストと数列の散布図を描いて、バツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
xでデータフレームのカラムの欠損値を埋める	df[col].fillna(x)
タプルの値を逆順にする	aTuple[::-1]
コーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
破線を使ってイテラブルの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
Pandasで、タイムスタンプ型のデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
浮動小数点数のハイパボリック・サインの逆数を算出する	math.asinh(x)
整数nを十六進表現に変換する	hex(n)
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
部分文字列が文字列の開始位置以降に含まれる	s.find(sub, start) != -1
線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
option: 色をダークスレートブルーにする	color = 'darkslateblue'
ホットピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: サーモン色を使う	color = 'salmon'
データフレームから重複を消す	df.drop_duplicates()
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
日付データが土曜日かどうかテストする	aDate.weekday() == 5
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
option: アンティークホワイトにグラフの色を設定する	color = 'antiquewhite'
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
数式の部分分数化する	sympy.apart(e)
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
集合の全要素が別の集合に含まれるか	aSet.issubset(aSet2)
大文字と小文字を交換する	s.swapcase()
ベクトルを元にして全要素が0の配列	np.zeros_like(aArray)
折れ線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategray')
青い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
二つの文字列をコロンで区切って表示する	print(value, value2, sep=':')
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
xが真か調べる	bool(x)
option: 先頭の行をカラムの名前に設定する	header = 0
散布図に赤いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='r')
rgbのポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
実数の自然対数	math.log(x)
option: ベージュを用いる	color = 'beige'
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
文字列を大文字に変換する	s.upper()
xを浮動小数点数に変換する	float(x)
折れ線グラフのバツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
データフレームのデータを条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
グラフのグリッドを白くする	sns.set(style='whitegrid')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
リストの末尾からn番目以前の要素を得る	aList[:-n]
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
space	' '
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
ヒストグラムを小麦色色として描画する	plt.hist(データ列, color='wheat')
折れ線グラフの色をバイオレットに指定する	plt.plot(データ列x, データ列y, color='violet')
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
option: フォントの色をダークサーモンに設定する	color = 'darksalmon'
option: ミディアムバイオレットレッドを用いる	color = 'mediumvioletred'
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
実数を浮動小数点数で	x // y
散布図の▲マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
黒い丸マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
列の各要素に対して、predicateFuncの適用が真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
散布図をライトスレイグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
リストの個数	len(aList)
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
今日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
数列とリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
浮動小数点数の双曲線正弦	math.sinh(x)
パールゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
ダークカーキ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
リストと配列について散布図をプロットし、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
option: フォントの色をピーチパフに設定する	color = 'peachpuff'
日付データは日付データと同時か調べる	aDate == aDate2
option: フォントの色をディムグレーに指定する	color = 'dimgrey'
nの二進文字列を使う	bin(n)[2:]
ファイルの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
SVDで多次元データを淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
イエローグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
文字列は全て印字できるか	s.isprintable()
文字列が全てASCII文字	s.isascii()
空のガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データ列の値がNaNかどうか調べる	ds.isna()
mathをインポートする	import math
'A'列によって小さい順にデータフレームをソートする	df.sort_values(by='A', ascending=True)
配列とリストについて散布図を描き、、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
横軸に軸ラベルをつける	plt.xlabel('x軸ラベル')
紺にヒストグラムの色を指定する	plt.hist(データ列, color='darkblue')
文字列は平仮名か	('ぁ' <= ch <= 'ん')
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
3変数の最も大きい値	max(x, y, z)
option: 色をダークグレーに指定する	color = 'darkgray'
折れ線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
文字列の右側から空白を取り除く	s.rstrip(' ')
色付きの点線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームのそれぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
データフレームを2つの列を用いて小さい順にソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
nにn2をかけた値をnに代入する	n *= n2
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
折れ線グラフの丸マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
グラフの中の縦軸に軸名を付ける	plt.ylabel('y軸ラベル')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
ホールドアウトを用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
マッピングの項目名一覧を得る	list(aDict)
配列の内積を求める	np.dot(aArray, aArray2)
黒いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
辞書に別のマップの項目を更新する	aDict.update(aDict2)
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
データフレームを配列にする	df.values
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
折れ線グラフの色を小麦色に変更する	plt.plot(データ列x, データ列y, color='wheat')
イテラブルとリストについての散布図に黒いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
双方向キュー中の数値のインデックス	deq.index(element)
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
双方向キューをポップする	deq.pop()
濃いシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
オブジェクトはバイト列クラスか	isinstance(obj, bytes)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
縦棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
文字列の接頭辞は部分文字列か	s.startswith(sub)
浮動小数点数を文字列に変換する	str(x)
回帰分析をPLSを使ってする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
散布図に赤い△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
数値の変数についてのn階微分を行う	sympy.diff(e, z, n)
二進文字列を整数にする	int(s, 2)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
データフレームを列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
２つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
オブジェクトは論理値クラスのインスタンス	isinstance(obj, bool)
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
データ列の欠損値を直前の値で置換する	ds.fillna(method='ffill')
ライトグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
要素がセットのメンバーかテストする	element in aSet
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: グラフの色をペルーに設定する	color = 'peru'
option: パウダーブルーを用いる	color = 'powderblue'
半透明の破線を用いてリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
配列から重複を除いた配列を初期化する	np.unique(aArray)
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
浮動小数点数を実数で除する	x / y
option: グラフの種類を点線にセットする	linestyle = 'dotted'
多次元データを多次元尺度構成法で濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
カウンタからゼロ回数を取り除く	+aCounter
rgbの三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
ベクトルの演算をする	import numpy as np
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
複数の列によってデータフレームをまとめたグループ	df.groupby(columns)
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
データフレームの欠損値を50パーセンタイルで埋める	df.fillna(df.median())
列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
option: 線の種類を破線に指定する	linestyle = 'dashed'
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
アイボリーにヒストグラムの色を指定する	plt.hist(データ列, color='ivory')
文字列がn回続く列	itertools.repeat(element, n)
n引くn2を計算する	n - n2
文字列の最初から空白を取り除く	s.lstrip(' ')
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
整数nの二進表現	bin(n)
文字列をセンタリングにする	s.center(文字列幅)
数列の割合を円グラフで可視化する	plt.pie(データ列, startangle=90)
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
タプルのn番目以降の部分を得る	aTuple[n:]
折れ線グラフをゲインズボロ色を使って描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームのカラムの未入力値を平均値に設定する	df[col].fillna(df[col].mean())
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
サインの逆数	math.asin(x)
項目名がマッピング上で定義されているかどうか	key in aDict
リストの値を小さい順にソートする	sorted(aList, reverse=True)
縦棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
変数について数値のインテグラルを求める	sympy.integrate(e, z)
変数について数値を積分する	sympy.integrate(e, z)
データフレームのリスト列を千の位で丸めて整数型にする	df[aList].round(-3).astype(int)
option: パパイヤウィップを使う	color = 'papayawhip'
データ列の折れ線プロットを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
タプル中の要素が少なくともひとつ真か調べる	any(aTuple)
文字列の右端は部分文字列	s.endswith(sub)
縦棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データフレームの上n行	df.head(n)
option: マーカーの色をバイオレットにする	markerfacecolor = 'violet'
ゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
リストとリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
綺麗なグラフを使う	import seaborn as sns
ビン数nでリストを分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
散布図の右三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データ列とイテラブルの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのカラムの未入力値をxで埋める	df[col].fillna(x)
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
集合を空集合にする	aSet.clear()
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
配列のデータ型	aArray.dtype()
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
箱ひげ図を描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
option: 色を暗い赤に設定する	color = 'darkred'
二つのカウンタの共通する要素	aCounter & aCounter2
リストを赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
nが無限に続くリスト	itertools.repeat(n)
option: グラフの色をピンクに設定する	color = 'pink'
空の組	()
本日をタプルに変換する	datetime.datetime.today().timetuple()
データフレームをグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフの色をサンディーブラウンにセットする	plt.plot(データ列x, データ列y, color='sandybrown')
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
ヒストグラムを一点鎖線を使って描画する	plt.hist(データ列, linestyle='dashbot')
リストとイテラブルについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
シーケンスから配列を作る	np.array(iterable)
データフレームを各列毎にグループ化し、、列の標準偏差を求める	df.groupby(column)[column2].std()
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
小数点数が有限	math.isfinite(x)
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
両端キューの先頭を求める	deq[0]
option: 茶色を使用する	color = 'brown'
SVDで多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データ列の中にいくつ未入力値があるか数える	ds.isna().sum()
カウンタから最頻出の文字列の件数	aCounter.most_common()[1]
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
option: ドジャーブルーにグラフの色を指定する	color = 'dodgerblue'
散布図にrgbのバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムを柱状図にする	plt.hist(df[column])
既存の行列を元に全要素が1のベクトル	np.ones_like(aArray)
option: 深紅に色を変更する	color = 'crimson'
線グラフの色をスカイブルーにする	plt.plot(データ列x, データ列y, color='skyblue')
小数点数の逆正弦	math.asin(x)
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
データフレームのヒストグラム付き散布図をプロットする	sns.jointplot(x='列名', y='列名', data=df)
横棒グラフをライトスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームのリストカラムの欠損値をxで補う	df[aList].fillna(x)
２つの値をカンマで区切ってプリントする	print(value, value2, sep=',')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームのリストカラムの中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
option: オリーブを用いる	color = 'olive'
△印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
option: フォントの色をダークスレートブルーに指定する	color = 'darkslateblue'
実数を切り下げる	math.floor(x)
データフレームのカラムは何分か調べる	df[col].dt.minute
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
カウンタ同士でユニオン	aCounter | aCounter2
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
最大行数をnに設定する	pd.set_option('display.max_rows', n)
option: コーラルにフォントの色を指定する	color = 'coral'
回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データフレームを複数の列を用いて昇順に破壊的に整列する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列を削除して、更新する	df.drop(column, axis=1, inplace=True)
グラフで使うフォントを指定する	sns.set(font=フォント名)
option: ライトグレー色を使う	color = 'lightgray'
タプルを昇順にソートする	sorted(aTuple, reverse=False)
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
option: グリーンイエローを用いる	color = 'greenyellow'
スクリプトの名前を知る	sys.argv[0]
日付時刻データの秒を使う	aDatetime.second
浮動小数点数を万の位で丸める	round(x, -4)
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
３つのデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=0)
空の勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
文字列の中の複数行対応としてパターンによるすべてのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
辞書の値として要素は含まれているか調べる	element in aDict.values()
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの色をローングリーンにする	plt.hist(データ列, color='lawngreen')
散布図をローングリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
黒い下三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列の先頭でパターンに大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
option: ダークターコイズにフォントの色を設定する	color = 'darkturquoise'
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
オーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
数列とイテラブルについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図をミディアムバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
文字列の左側からタブを消す	s.lstrip('\t')
十六進文字列をバイナリにする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
データ列とリストの散布図を描き、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
浮動小数点数を切り上げて整数に変換する	math.ceil(x)
ミディアムオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumorchid')
両端キューの先頭	deq[0]
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのカラムの中央値を求める	df[col].median()
カウンタから最も頻出のキーの件数	aCounter.most_common()[1]
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームの全カラムの相関を見る	sns.pairplot(df)
列毎にデータフレームをグループ化して、それぞれのグループ毎の最大値を求める	df.groupby(column).max()
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
散布図に左三角印を使う	plt.scatter(データ列x, データ列y, marker='<')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
文字列の右側から改行を取り除く	s.rstrip()
option: パレットトルコイズを使用する	color = 'paleturquoise'
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
棒グラフをライトシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: グラフの色を白に変更する	color = 'white'
今日をISO8601形式の文字列にする	datetime.datetime.today().isoformat()
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
データフレームの列の値がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
黄色にヒストグラムの色をする	plt.hist(データ列, color='yellow')
行列の標準偏差	np.std(aArray)
棒グラフを白色を用いて描画する	plt.bar(データ列x, データ列y, color='white')
ライトイエロー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
文字列の末尾	s[-1]
赤い一点鎖線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
数列とリストについての散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームを表示するとき、最大列数を増やす	pd.set_option('display.max_columns', n)
スカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データ列は何月か見る	ds.dt.month
データフレームを小数点以下n桁で四捨五入する	df.round(n)
グラフを描画する準備をする	import matplotlib.pyplot as plt
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
現在処理中の例外を情報を知る	sys.exc_info()
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
文字列の先頭	s[0]
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
ヒストグラムの色をダークゴールデンロッドに指定する	plt.hist(データ列, color='darkgoldenrod')
Pandasでフォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
横方向に２つのデータフレームをマージする	pd.merge(df, df2)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
option: 茶色色を使う	color = 'brown'
浮動小数点数を小数点で丸める	round(x, n)
UTF8としてファイルパスを追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
日付データが日付データより後ろか確認する	aDate > aDate2
データフレームのリストカラムのpercentパーセンタイル	df[aList].quantile(percent/100)
集合に要素を追加する	aSet.add(element)
グラフの描画で色差別なく色テーマを使う	sns.set(pallete='colorblind')
散布図を用いてデータフレームのカラムを図示する	sns.scatterplot(data=df, x='列名', y='列名')
データフレームのリストカラムの50パーセンタイル	df[aList].median()
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
入力から二つの文字列値を読む	A, B = map(str, input().split())
カテゴリに並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
ダークシアグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategray')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
データフレームのカラム名を指定された列名リストに置き換える	df.columns = columns
数値の積分を求める	sympy.integrate(e)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
option: オリーブ色を用いる	color = 'olive'
散布図をオリーブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olive')
文字列が全て英数字かどうか調べる	s.isalnum()
option: ビスク色を使う	color = 'bisque'
option: フォントの色をダークグレーに設定する	color = 'darkgrey'
回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='gray')
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
option: ダークスラテグレー色を使う	color = 'darkslategray'
文字列中の全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
ファイルをバイナリモードで開いて]fとする	f = open(filepath, mode='rb')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
関数の値によって表データをグループ化し、、列挙する	[(name, group) for name, group in df.groupby(関数)]
散布図に△マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフをフクシア色を使って描画する	plt.plot(データ列x, データ列y, color='fuchsia')
各列毎にデータフレームを集計して、列の最小値を求める	df.groupby(column)[column2].min()
option: ディープスカイブルー色を使う	color = 'deepskyblue'
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
日付データが日付データより先か調べる	aDate < aDate2
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
左三角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
辞書をカウンタに変換する	collections.Counter(aDict)
タプル内の要素は全て真	all(aTuple)
辞書をコピーする	dict(aDict)
複素数型のゼロ埋めされた行列	np.zeros(要素数, dtype=bool)
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
option: サンディーブラウン色を使用する	color = 'sandybrown'
'A'列の値によってデータフレームを集約する	df.groupby('A')
ヒストグラムをビスク色を用いて描画する	plt.hist(データ列, color='bisque')
ふたつのリストのインターセクションを求める	list(set(aList) & set(aList2))
散布図をマルーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='maroon')
文字列を空白を使って区切って、数列に変換する	map(int, s.split())
2つの浮動小数点数はほぼ等しいかどうか調べる	math.isclose(x, x2)
書式を辞書でフォーマットする	formatText.format_map(aDict)
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
黄緑色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
データフレームのカラムを各グループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのカラムを説明変数にする	説明変数 = df[['列名', '列名2']]
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ダークオレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
option: 書き込みモードを用いる	mode = 'w'
折れ線グラフの三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
オブジェクトのハッシュ値	hash(obj)
オブジェクトは整数クラスか調べる	isinstance(obj, int)
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
データ列の欠損値を最頻値に増やす	ds.fillna(ds.mode().iloc[0])
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
実数の逆正弦	math.asin(x)
線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
option: ダークオーキッド色を使う	color = 'darkorchid'
真紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
nを八進文字列にする	oct(n)[2:]
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
各列毎にデータフレームをグループ化して列の最大値を計算する	df.groupby(column)[column2].max()
赤い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
リストと数列について散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
プログラムを強制的に停止する	sys.exit()
線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
オレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
本日が金曜日か	datetime.datetime.today().weekday() == 4
option: ドジャーブルーに色をする	color = 'dodgerblue'
データフレームのリストカラムの欠損値を最小値にセットする	df[aList].fillna(df[aList].min())
ファイルパスを文字コードtextでオープンする]	open(filepath, encoding=text)
データ列の未入力値をモードで置換する	ds.fillna(ds.mode().iloc[0])
リストとイテラブルリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: ミディアムブルー色を使う	color = 'mediumblue'
イテラブルとイテラブルの散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データフレームを列で小さい順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
散布図に赤い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
現在の時間	datetime.date.today().hour
二つのベクトルを横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
option: n番目のカラムをインデックスにする	index_col = n
'A'列でデータフレームをソートする	df.sort_values(by='A')
パスのセパレータ記号を確認する	os.sep
option: ▲マーカーを描画する	marker = '^'
実数とyの斜辺	math.hypot(x, y)
▲印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
散布図をパウダーブルー色として描画する	plt.scatter(データ列x, データ列y, color='powderblue')
表データを列によって並べて、新しいインデックスを加える	df.sort_values(columns).reset_index()
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームを列によって集約して、最大値を求める	df.groupby(column).max()
最大長を指定して、両端キュー	collections.deque(maxlen=n)
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
タプルを展開して表示する	print(*aTuple)
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
ミディアムシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームのカラムの空文字を未入力値に変換しドロップする	df[col].replace('', np.nan).dropna()
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
MSDとして淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: オーキッド色を用いる	color = 'orchid'
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
カウンタ同士で∪	aCounter | aCounter2
文字列の左側から空白を取り除く	s.lstrip(' ')
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
組の値を関数に適用した結果でソートする	sorted(aTuple, key=func)
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
グラフの用途をポスターに設定する	sns.set(context='poster')
配列間の相関係数と有意確率を算出する	scipy.stats.pearsonr(データ列, データ列2)
データフレームの中のカラムと列に重複があれば削除する	df.drop_duplicates(subset=column)
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
行列の演算をする	import numpy as np
グラフにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
要素が全て初期値の行列を作成する	np.full(要素数, 初期値, dtype=np.int)
スピアマン順位相関係数でデータフレームの相関行列	df.corr(method='spearman')
平均値付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
縦棒グラフをディムグレー色を使って描画する	plt.bar(データ列x, データ列y, color='dimgrey')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
タプルをカウンタに変換する	collections.Counter(aDict)
横棒グラフをティール色で描画する	plt.barh(データ列x, データ列y, color='teal')
文字列を置き換える	s.replace(sub, newsub)
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
折れ線グラフの△マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
一度に正規表現patternでデータフレームのカラムの値を置き換える	df[col].replace(pattern, repl, regex=True)
文字列の開始位置番目からと終了位置までの間に部分文字列がないか調べる	s.find(sub, start, end) == -1
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
サーモンにヒストグラムの色を変更する	plt.hist(データ列, color='salmon')
カラムの中に日付データとがいくつあるか数える	ds.isin([value, value2]).sum()
全要素を０で初期化した複素数型の行列を作成する	np.zeros(行数, 列数, dtype=bool)
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
x座標の目盛りを表示しない	plt.xticks([])
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
列をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
小数点数の小数部	math.modf(x)[0]
データ列の相関係数と有意確率を見る	scipy.stats.pearsonr(データ列, データ列2)
ファイルパスを追加モードでオープンする]	open(filepath, mode='a')
option: 線を太くする	linewidth = 3.0
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
両端キューの先頭にリストの各要素を追加する	deq.extendleft(iterable)
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
実数の仮数	math.frexp(x)[0]
両端キューのn番目に要素を挿入する	deq.insert(n, element)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
上位集合	aSet.issuperset(aSet2)
ヒストグラムの線の種類を破線にセットする	plt.hist(データ列, linestyle='dashed')
表を列によって集約して、平均値を求める	df.groupby(column).mean()
折れ線グラフの大バツマーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
列でデータフレームを並べ直して、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
値をキューの先頭から取り除く	deq.popleft()
リストが全て真	all(aList)
データフレーム全体を行で並べる	df.sort_index()
データフレームの列のpercentパーセンタイル	df[col].quantile(percent/100)
安全に文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
ヒストグラムの色をダークマゼンタに指定する	plt.hist(データ列, color='darkmagenta')
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
半透明の一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ロバストな重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
カウンタを集合にする	set(aCounter)
既存のベクトルを元に全要素が1の行列	np.ones_like(aArray)
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
ケンドールでデータフレームの相関行列を求める	df.corr(method='kendall')
データ列の月	ds.dt.month
折れ線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
nを16進数文字列に変換する	hex(n)[2:]
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
縦棒グラフをグリーンイエロー色として描画する	plt.bar(データ列x, データ列y, color='greenyellow')
option: マーカーを右三角に変更する	marker = '>'
アルファベットの小文字列	string.ascii_lowercase
rgbの星マーカーをデータ列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
集合が空でないか	len(aSet) != 0
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
列の中に文字列と文字列が存在するか	ds.isin([value, value2])
日付時刻データのタイムゾーン	aDatetime.timetz()
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: サドルブラウンを使う	color = 'saddlebrown'
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームを散布図でプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
赤いグリッド線を引く	plt.grid(color='r')
二つのデータフレームを縦につなぐ	pd.concat([df, df2], axis=0)
散布図のダイアモンドマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
最大値・最小値の範囲として一様な乱数を算出する	random.uniform(最小値, 最大値)
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
ふたつの関係が真スーパーセットか調べる	aSet > aSet2
行列と同じ大きさの空配列を初期化する	np.empty_like(aArray)
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
データフレームをインデックスで昇順に整列する	df.sort_index(ascending=True)
文字列からISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: 青にグラフの色を設定する	color = 'blue'
折れ線グラフのバツ印を赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
option: ミディアムオーキッドにフォントの色を指定する	color = 'mediumorchid'
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
折れ線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
リストとデータ列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムの色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
データ列の曜日が何日目か確認する	ds.dt.dayofweek
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
配列とリストについての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
散布図をビスク色を使って描画する	plt.scatter(データ列x, データ列y, color='bisque')
データフレームの列の文字列長を列として使う	df[col].str.len()
データフレームのインデックスの名前を一度に、nameからname2に付け直す	df.rename(index={name: name2})
画面にグラフの用途を指定する	sns.set(context='notebook')
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
文字列を最初の部分文字列で二分し、最初の文字列を使う	s.partition(sub)[0]
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
option: 改行をセパレータで用いる	sep = '\n'
横棒グラフをカーキ色を使って描画する	plt.barh(データ列x, データ列y, color='khaki')
第一コマンド引数	sys.argv[1]
にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
実数の符号を同じにする	math.copysign(x, x2)
縦棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
データフレームのリスト列の欠損値をxに設定する	df[aList].fillna(x)
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
オブジェクトは辞書クラスかどうか	isinstance(obj, dict)
データ列の一意な要素	ds.unique()
データフレームを表示するとき、小数点以下の表示精度をセットする	pd.set_option('precision', n)
文字列の右端から余分な改行を取り除く	s.rstrip()
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
データフレームの列の中の欠損値の数をカウントする	df[col].isna().sum()
nが-9以上9以下かどうか調べる	-9 <= n <= 9
option: ライトブルー色を使う	color = 'lightblue'
タイムスタンプデータにn日を加える	aDatetime + datetime.timedelta(days=n)
組の要素をソートする	sorted(aTuple)
日付データにn週間分、足す	aDate + datetime.timedelta(weeks=n)
浮動小数点数の逆双曲線正弦を求める	math.asinh(x)
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
折れ線グラフを実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
プロットの色を淡くする	sns.set(pallete='muted')
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
rgbに横棒グラフの色を指定する	plt.barh(ラベル列, データ列, color=rgb)
棒グラフをダークシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
まとめて正規表現patternでreplにデータフレームのカラムの値を変更する	df[col].replace(pattern, repl, regex=True)
リストとリストについての散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
オブジェクトがリストクラスかどうか調べる	isinstance(obj, list)
折れ線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームの中の欠損値がある行を削除する	df.dropna()
星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*')
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
データフレームの列の欠損値を直前の値で埋める	df[col].fillna(method='ffill')
横軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
オブジェクトは集合型か調べる	isinstance(obj, set)
折れ線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
リストとリストの散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの中の欠損値の個数を数える	df.isna().sum()
キューが空でないか調べる	len(deq) != 0
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
データフレームのカテゴリデータをベクトルにする	pd.get_dummies(df)
星マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
現在が金曜日かどうか	datetime.datetime.today().weekday() == 4
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
数値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
実数を３乗する	x ** 3
データフレームから重複を残さず削除する	df.drop_duplicates(keep=False)
option: ライトイエローにグラフの色を指定する	color = 'lightyellow'
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
列を配列として選択する	df[column].values
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの列と列の相関行列ピアソン相関係数として	df[[column, column2]].corr(method='pearson')
option: カーキ色を使用する	color = 'khaki'
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
オレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
三自然数のGCDを算出する	math.gcd(n, n2, n3)
入力ストリームからn文字、読み込む	f.read(n)
nがn2より大きいか調べる	n > n2
文字列中に非小文字がある	any(not c.islower() for c in s)
データフレームの中に文字列があるか調べる	df.isin([value])
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
本日のローカルな日付時刻	datetime.datetime.today()
データフレームからカテゴリデータだけ抽出する	df.select_dtypes('object')
データフレームの値が欠損値か	df.isna()
二つの値を文字列で区切ってプリントする	print(value, value2, sep=s)
タプルの文字列が最初に見つかる位置	aTuple.index(element)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
リストの合計値	sum(aList)
列によってデータフレームを分類してグループごとの最大値を求める	df.groupby(column).max()
データ列と数列についての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
折れ線グラフの三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
データフレームのリスト列のpercentパーセンタイル	df[aList].quantile(percent/100)
要素が全て1の行列	np.ones(要素数, dtype=np.int)
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
現在が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
逆行列を算出する	np.linalg.inv(aArray)
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
rgbの左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
クラス分類をパーセプトロンとして行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ベクトルの累積和を見る	np.cumsum(aArray)
データフレームの列を10の位で四捨五入して整数型にする	df[col].round(-1).astype(int)
nがn2と等しいか判定する	n == n2
'A'列でデータフレームを降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
破壊的に大きい順に複数の列によってデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カテゴリ別でグループ化してデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
浮動小数点数の絶対値	math.fabs(x)
nの無限な数列を得る	itertools.repeat(n)
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
option: グラフの色をホットピンクにする	color = 'hotpink'
入力ストリームを一行ずつ読み込む	f.readline()
ブラック色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
破壊的に昇順にデータフレームを'A'列によって並べる	df.sort_values(by='A', ascending=True, inplace=True)
option: ライトサーモンに色を設定する	color = 'lightsalmon'
データフレームのカラムを1000の位で丸める	df[col].round(-3)
縦棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
整数nを8進表現にする	oct(n)
２つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
ファイルが存在しないか調べる	not os.path.exists(filepath)
黒い▽マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのリストカラムの中に存在すると文字列の合計を数える	df[aList].isin([value, value2]).sum()
縦棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフに黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: フォントの色をミントクリームに指定する	color = 'mintcream'
現在の秒	datetime.date.today().second
文字列を最後の部分文字列で二つに区切って、残りの文字列を求める	s.rpartition(sub)[-1]
データ列を度数分布図で描画する	plt.hist(データ列)
リストと配列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームの列が文字列で終わる行を選ぶ	df[df[column].str.endswith(s)]
データ列の欠損値を平均にする	ds.fillna(ds.mean())
大バツマーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームを2つの列の値によってグループ化し記述統計量を計算する	df.groupby(['A', 'B']).describe()
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
y軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
要素が全て1のベクトルを初期化する	np.ones(要素数, dtype=np.int)
ファイルをオープンする]	open(filepath)
文字列の中でASCII限定としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
主成分分析で多次元データを濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
文字列を部分文字列で分割する	s.split(sub)
横棒グラフをマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='magenta')
インディアンレッドにヒストグラムの色をする	plt.hist(データ列, color='indianred')
リストの中の最小値	min(aList)
縦棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
線グラフの色をフクシアにする	plt.plot(データ列x, データ列y, color='fuchsia')
文字列で区切って二つの文字列をプリントする	print(value, value2, sep=s)
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
半透明の点線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
リストとデータ列について散布図を描画し、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
文字列がn回繰り返す列	itertools.repeat(element, n)
文字列内にひとつでも大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
表の列の名前を列から文字列に変更する	df.rename(columns={column: name})
option: ピンクにグラフの色を設定する	color = 'pink'
文字列を複数行対応としてパターンで区切る	re.split(pattern, s, flags=re.MULTILINE)
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
rgbのバツマーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
変数を赤色にする	f'\033[31m{value}\033[0m'
リストを中央値でビン分割する	pd.qcut(aList, 2)
配列とリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: カラムの名前をnamesにセットする	header = names
折れ線グラフのポイント印を赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
イテラブルのコンビネーションを求める	itertools.combinations(iterable, n)
バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの▽マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
色付きの点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
カウンタの和集合演算する	aCounter | aCounter2
横棒グラフをミディアムシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
追加できるようにファイルをオープンする]	open(filepath, mode='a')
ファイルパスからフォルダ名を求める	os.path.dirname(filepath)
ヒストグラムをインディアンレッド色を用いて描画する	plt.hist(データ列, color='indianred')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
カラムの中にある文字列の合計をカウントする	ds.isin([value]).sum()
option: グラフの色をオレンジに設定する	color = 'orange'
辞書の項目を列挙する	aDict.values()
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
文字列がリストの要素でないか	element not in aList
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
文字列の開始位置からと終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
縦棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
データフレームを二つの列によって昇順に整列し、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データ列の推移を一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リスト中の文字列が最初に見つかるインデックスを求める	aList.index(element)
再帰が何回までできるかを知る	sys.getrecursionlimit()
縦棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームの欠損値を後の行の値に減らす	df.fillna(method='bfill')
データフレームの列の一覧	df.info()
ファイルをUTF8を使ってオープンする]	open(filepath, encoding='utf-8')
表データを各列毎に集計して、列の分散を計算する	df.groupby(column)[column2].var()
option: 改行コードをWindowsに設定する	newline = '\r\n'
インデックスによって昇順にデータフレーム全体を並べる	df.sort_index(ascending=True)
組中の最初の文字列を探す	aTuple.index(element)
散布図の大バツ印の大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
タイムスタンプデータとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
option: バツマーカーを使う	marker = 'x'
1からnまでの整数列を使う	list(range(1, n+1))
列'A'と列'B'をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
スカイブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
等しい量になるように配列をn個にビン分割する	pd.qcut(aArray, n)
option: グラフの色をローングリーンに変更する	color = 'lawngreen'
n個に等量でデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
リストのn番目の	aList[n]
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
縦棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
option: ベクトルのデータ型を指定する	dtype = np.int32
第２引数で指定されたファイルの名前	sys.argv[1]
データフレームの信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
空の勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.GradientBoostingClassifier()
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームをインデックスを用いて降順で整列する	df.sort_index(ascending=False)
線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
グラフの背景色を白くする	sns.set(style='whitegrid')
今日が月曜日	datetime.datetime.today().weekday() == 0
データフレームを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: パープルを使う	color = 'purple'
プロットの縦軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
列の各値は何回出現するか確認する	df[col].value_counts()
文字列を部分文字列で二つに区切って、後半の文字列を使う	s.partition(sub)[-1]
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
タイムスタンプデータにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
ヒストグラムを青緑色を用いて描画する	plt.hist(データ列, color='turquoise')
グリーンイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
横棒プロットをプロットしてバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データフレームの列の平均	df[col].mean()
タブ区切りのファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
リストを文字列に変換して結合する	''.join(map(str, iterable))
切り捨てながらnを半分にする	n //= 2
線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
rgbのクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をネイビーに変更する	color = 'navy'
日付時刻データが土曜日か	aDatetime.weekday() == 5
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
文字列を最初の部分文字列で二分し最初の文字列を使う	s.partition(sub)[0]
プラットホームの名前	sys.platform
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
グラフをスライド用に変更する	sns.set(context='talk')
配列の最大値を計算する	np.max(aArray)
切り捨てながらnをn2分の１にする	n //= n2
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
今日の年数を使う	datetime.datetime.today().year
option: 文字列の示すエンコーディングを使用する	encoding = s
データフレームの列の中の欠損値の合計をカウントする	df[col].isna().sum()
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
データフレームを関数の値によって集約して列挙する	[(name, group) for name, group in df.groupby(関数)]
プロットの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
データを四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図のダイアモンド印の色を指定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: グラフの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
黄緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームのリスト列のNaNを直後の値に指定する	df[aList].fillna(method='bfill')
ダークスレートブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
文字列の末尾を求める	s[-1]
ヒストグラムをスカイブルー色を用いて描画する	plt.hist(データ列, color='skyblue')
0から始まる無限の数列	itertools.count()
タプルの中の最小値を求める	min(aTuple)
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
データフレームを正規表現patternで一度にreplに置換する	df.replace(pattern, repl, regex=True)
Pandasで、フォーマットfmtでデータ列をdatetime64型に変換する	pd.to_datetime(ds, format=fmt)
JSON文字列を辞書に変換する	json.loads(jsonString)
ヒストグラムベースの勾配ブースティング分類木を準備する	model = sklearn.ensemble.HistGradientBoostingClassifier()
ベクトルの各要素の積	np.multiply(aArray, aArray2)
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
オリベドラブ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
ふたつの集合が共通の要素を持たないか確認する	aSet.isdisjoint(aSet2)
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
ValueMapでデータフレームのリストカラムの値をまとめて置き換える	df[aList].replace(ValueMap)
n×n2	n * n2
リストから文字列と等しい最初の要素を除く	aList.remove(element)
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
タプルの先頭のn要素を除く	aTuple[n:]
赤い▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームを列によってグループ分けし、、それぞれのグループ毎の分散を計算する	df.groupby(column).var()
キューの末尾にイテラブルの要素を追加する	deq.extend(iterable)
配列をn個にビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
空のガウス過程回帰モデルを作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
ファイルパスをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
線を青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
折れ線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
データ列の未入力値を平均に変更する	ds.fillna(ds.mean())
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
Pandasで、データフレームのcollをフォーマットfmtで日付データに変換する	pd.to_datetime(df[col], format=fmt)
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
黒いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフの色を黄色にする	plt.plot(データ列x, データ列y, color='yellow')
option: グラフの色をダークレッドに設定する	color = 'darkred'
日付データが何曜日か知る	aDate.weekday()
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
表データを各列と列の組み合わせ毎に集計して平均値を求める	df.groupby([column, column2], as_index=False).mean()
辞書からカウンタを作る	collections.Counter(aDict)
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
学習データのバージョン	version = 'wcce2022-0.1'
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
ベクトルの計算をする	import numpy as np
データフレームの列からユニークな値を抽出しリスト化する	df[col].unique().tolist()
文字列中にひとつでも非小文字が含まれるか	any(not c.islower() for c in s)
option: 赤色を用いる	color = 'red'
Pandasで、データ列のUNIX秒からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームのカラムを1000の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
データフレームを列を用いてで破壊的にソートする	df.sort_values(by=column, inplace=True)
配列の形状を求める	aArray.shape
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
日付時刻データの年	aDatetime.year
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームのリストで指定されたカラムの相関行列スピアマンを使って	df[aList].corr(method='spearman')
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
データフレームを各列毎に集約し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
折れ線グラフに四角印を加える	plt.plot(データ列x, データ列y, marker='s')
データ列は何時か調べる	ds.dt.hour
リストを境界値としてリストを分割する	pd.cut(aList, aList)
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
スライドにグラフを指定する	sns.set(context='talk')
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: 文字列の示すエンコーディングを用いる	encoding = s
横棒プロットを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
文字列が文字列より辞書順で後	s > s2
浮動小数点数の最小値	sys.float_info.min
散布図の三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ファイルのファイル名	os.path.basename(filepath)
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
ファイルがないか調べる	not os.path.exists(filepath)
option: ターコイズ色を使う	color = 'turquoise'
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
列のユニークな値の個数	df[col].nunique()
コマンド引数の一覧を得る	sys.argv[1:]
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
option: ゴールドにグラフの色を設定する	color = 'gold'
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
セットから別のセットとの共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
nが負の整数かどうか調べる	n < 0
ファイルをバイナリ書き込みモードを用いて開いて]fとする	f = open(filepath, mode='wb')
タプルを多重集合に変換する	collections.Counter(aDict)
Pandasで、フォーマットでデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
プラム色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
空列を作る	[]
補足を加える	plt.legend(['凡例A', '凡例B'])
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
数列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
カラムのNaNを平均に設定する	ds.fillna(ds.mean())
データ列の中に日付データが含まれるか	ds.isin([value])
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
等差数列から整数乱数を計算する	random.randrange(start, end, step)
整数nを八進数リテラルにする	oct(n)
データフレームのリストカラムの欠損値を前の行の値に設定する	df[aList].fillna(method='ffill')
オブジェクトの参照カウント	sys.getrefcount(obj)
配列の列ごとの最大値	np.max(aArray, axis=0)
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
自然数LCM	math.lcm(n, n2)
散布図の印の太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
プログラムを異常終了する	sys.exit(1)
散布図をラベンダー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavender')
option: 色をゲインズボロに設定する	color = 'gainsboro'
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
列を千の位で丸める	ds.round(-3)
破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
表データを関数の値ごとにグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
数式の変数を数式で置き換える	e.subs(z, e2)
縦棒グラフをロイヤルブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='royalblue')
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
表を各列毎に集約し、、列の合計を求める	df.groupby(column)[column2].sum()
データフレームを'A'列の値によってグループ化する	df.groupby('A')
クラス分類をバギングを用いて行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
実数がNaNか調べる	math.isnan(x)
データフレームを二つの列で昇順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
イテラブルと配列について散布図を描画して、バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
JSONLファイルにヘッダを付けずにデータフレームを保存する	df.to_csv(filename, header=None)
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
モデルの残差を計算する	目的変数 - model.predict(説明変数)
双方向キューの大きさ	len(deq)
ファイルパスを書き込みモードとしてオープンする]	open(filepath, mode='w')
グラフの描画で淡く色を用いる	sns.set(pallete='muted')
ロイヤルブルー色でヒストグラムを描画する	plt.hist(データ列, color='royalblue')
サブクラスか調べる	issubclass(サブクラス, クラス)
文字列を白色で表示できる文字列にする	f'\033[37m{value}\033[0m'
データ列の欠損値をxで埋める	ds.fillna(x)
ティール色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
モカシン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームのカラムが何秒か見る	df[col].dt.second
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームの中に文字列が存在するか調べる	df.isin([value])
ライトグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
シーケンスとイテラブルをチェインする	itertools.chain(iterable, iterable2)
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を計算する	df.groupby([column, column2], as_index=False).count()
折れ線グラフに簡単な説明をつける	plt.plot(データ列x, データ列y, label='ラベル')
option: 紺碧色を使う	color = 'azure'
リストと配列について散布図を描画して、マーカーを▽に変更する	plt.plot(データ列x, データ列y, marker='v')
option: ホットピンク色を使う	color = 'hotpink'
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
ヒストグラムをダークゴールデンロッド色として描画する	plt.hist(データ列, color='darkgoldenrod')
nの各桁の和	sum(map(int, str(n)))
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
ハローワールドと出力する	print('Hello World')
文字列内に大文字があるかどうか調べる	any(c.isupper() for c in s)
整数の二乗	x ** 2
option: ダークサーモンを用いる	color = 'darksalmon'
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
各列毎にデータフレームをグループ分けし、、列の最大値を計算する	df.groupby(column)[column2].max()
データフレームのNaNを最小値に設定する	df.fillna(df.min())
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
アンサンブル学習でクラス分類をする	sklearn.ensemble.VotingClassifier()
折れ線グラフの右三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
option: グラフの線幅を設定する	linewidth = 3.0
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
ヒストグラムを濃いシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
n個のオブジェクトがあるリストを作る	[element] * n
作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
乱数で要素を埋めた行列	np.random.random((行数, 列数))
ファイルパスが存在するか調べる	os.path.exists(filepath)
全数字	string.digits
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
両端キューの最初を見る	deq[0]
option: マーカーを左三角に指定する	marker = '<'
データフレームのリスト列の中に文字列と文字列が含まれるか調べる	df[aList].isin([value, value2])
データフレームのリスト列の欠損値を第二四分位数に設定する	df[aList].fillna(df[aList].median())
データフレームのカラムを1000の位で四捨五入して整数型にする	df[col].round(-3).astype(int)
小数点数の指数を求める	math.frexp(x)[1]
三自然数の最大公約数を算出する	math.gcd(n, n2, n3)
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
option: グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
数式の展開を行う	sympy.expand(e)
ヒストグラムを濃いシアン色として描画する	plt.hist(データ列, color='darkcyan')
全要素を0で初期化した配列	np.zeros(要素数)
文字列が全てASCII文字か判定する	s.isascii()
列を文字列に変換してカンマで連結する	','.join(map(str, iterable))
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
線グラフの色をレベッカパープルにセットする	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームを列名リストによって降順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
option: 淡いピンク色色を使う	color = 'lightpink'
データフレームの列の名前の一覧を求める	df.columns
データラベルをグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
ユーザから入力される	int(input())
option: 区切りをコロンにする	sep = ':'
データフレームを列名リストの値によって分類して列挙する	[(name, group) for name, group in df.groupby(columns)]
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフをブルーバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='blueviolet')
要素をキューにプッシュする	deq.append(element)
option: グラフの色をインディゴに設定する	color = 'indigo'
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
オブジェクトがリストの要素でないかどうか調べる	element not in aList
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
実数を整数にする	int(x)
ファイルをEUCで書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
データフレームのリストカラムのNaNを最頻値で補う	df[aList].fillna(df[aList].mode().iloc[0])
文字のASCIIコードを見る	ord(ch)
文字列の先頭から空白やタブを取り除く	s.lstrip()
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
データフレームのリストカラムがどれだけ、分散しているか調べる	df[aList].var()
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
乱数の行列	np.random.random((行数, 列数))
散布図をディープスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ヒストグラムをペルー色として描画する	plt.hist(データ列, color='peru')
文字列を全て小文字に変換する	s.casefold()
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
散布図を右三角印を用いる描画する	plt.scatter(データ列x, データ列y, marker='>')
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
文字列が小文字か判定する	s.islower()
フクシア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ゲインズボロ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
数式の数値を求める	float(e)
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
散布図をシエナ色として描画する	plt.scatter(データ列x, データ列y, color='sienna')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
既存のベクトルをベースにして全要素が0の配列	np.zeros_like(aArray)
列の中にいくつ文字列が存在するか求める	ds.isin([value]).sum()
option: ホットピンク色を用いる	color = 'hotpink'
線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの色をバリーウッドにする	plt.plot(データ列x, データ列y, color='burlywood')
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
Pandasで、文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
ヒートマップとして混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: グラフの色をベージュに設定する	color = 'beige'
シスル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
オブジェクトは数値か調べる	isinstance(obj, (int,float))
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
データ列を整数に四捨五入する	ds.round()
option: タブを区切り記号で使う	sep = '\t'
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
算術計算ライブラリをインポートする	import math
ライトスレイグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
リストと配列についての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
紺色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
ファイルパスをバイナリモードで開く]	open(filepath, mode='rb')
ルートの階層化辞書	collections.ChainMap()
xが1、もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
ブランチドアーモンドにヒストグラムの色を指定する	plt.hist(データ列, color='blanchedalmond')
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
option: ナバホホワイトに色を設定する	color = 'navajowhite'
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
ダーク・スラテグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
教師データとしてモデルを学習する	model.fit(説明変数, 目的変数)
横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
印字できる文字を全部求める	string.printable
文字列を走査し、正規表現にケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
８進数字を使う	string.octdigits
縦棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
ゼロ埋めされた複素数型の行列を作る	np.zeros(要素数, dtype=bool)
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
真	True
折れ線グラフをタン色を使って描画する	plt.plot(データ列x, データ列y, color='tan')
option: 青を使用する	color = 'blue'
option: シアンを使う	color = 'cyan'
option: 青にフォントの色を設定する	color = 'blue'
文字コードtextを用いてファイルをオープンする]	open(filepath, encoding=text)
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
棒グラフの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
文字列がカタカナかどうか	('ァ' <= ch <= 'ン')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
青い実線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
辞書をカウンタにする	collections.Counter(aDict)
データ列の分布を可視化する	plt.scatter(データ列x, データ列y)
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
x軸の目盛を対数に変更する	plt.xscale('log')
ダークスラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
簡単な説明を表示する	plt.legend()
文字列はリストの要素でないか	element not in aList
線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
赤いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
エポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
データフレームの中の列をビン数nでビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの列と列の相関行列ケンドールとして	df[[column, column2]].corr(method='kendall')
日付データが木曜日か	aDate.weekday() == 3
データを平均と分散を使って標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
散布図を赤い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
nからn2の範囲を使う	range(n, n2)
半透明の一点鎖線として配列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
集合の変更不能版	frozenset(aSet)
毎回異なるように乱数を初期化する	random.seed()
option: グラフの色をスノーに変更する	color = 'snow'
折れ線グラフをリネン色を使って描画する	plt.plot(データ列x, データ列y, color='linen')
文字列を日付データに変換する	pd.to_datetime(s)
横棒グラフを珊瑚色で描画する	plt.barh(データ列x, データ列y, color='coral')
option: グラフの色を小麦色に設定する	color = 'wheat'
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
文字列の中の大文字・小文字を無視してパターンによるマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
横棒グラフを貝殻色を用いて描画する	plt.barh(データ列x, データ列y, color='seashell')
文字列は数値か調べる	s.isnumeric()
データフレームをグループ化し列に対し平均値を求める	df.groupby(column)[column2].mean()
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図の下三角印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: グラフの色をデピンクに設定する	color = 'deeppink'
ファイルが存在しないか判定する	not os.path.exists(filepath)
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームを十の位で丸める	df.round(-1)
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列がリストに含まれない	element not in aList
横棒グラフをイエローグリーン色として描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
データフレームの列を行に指定する	df.set_index(column)
外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
コーパスのバージョンを知る	version = 'wcce2022-0.1'
option: アイボリーにグラフの色を指定する	color = 'ivory'
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
フクシア色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データ列の推移を半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
やわらかい青色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
昨日の日付を見る	datetime.date.today() - datetime.timedelta(days=1)
数値を変数についてn階微分する	sympy.diff(e, z, n)
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
Pandasで、データフレームのcollのエポック秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
数列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
データフレームの列の値がxより小さい行を抽出する	df[df[column] < x]
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
キーがマッピングに存在しないとき要素を追加する	aDict.setdefault(key, element)
要素をキューのn番目に挿入する	deq.insert(n, element)
リストとリストについての散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
ライトグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightgrey')
データフレームを各列毎に集計して、文字列という名前のグループを見る	df.groupby(column).get_group(s)
データフレームの中に含まれる文字列との数を数える	df.isin([value, value2]).sum()
カラムの各データ値の出現数	df[col].value_counts()
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図の大バツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
predicateFuncがtrueとなる列の要素	itertools.takewhile(predicateFunc, iterable)
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
集合をイミュータブルなセットに変換する	frozenset(aSet)
データフレームのリストカラムの欠損値を最頻値にセットする	df[aList].fillna(df[aList].mode().iloc[0])
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
数をn乗する	x ** n
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
最小値でデータフレームの列の欠損値を補う	df[col].fillna(df[col].min())
配列と数列の散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
新しいリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
赤い四角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
文字列中から正規表現にケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームのリスト列のどの値が最も現れるか見る	df[aList].mode()
実数のハイパボリック・コサインの逆数を求める	math.acosh(x)
option: オレンジレッドを使う	color = 'orangered'
option: カデットブルー色を使う	color = 'cadetblue'
散布図を菱形印を使って描画する	plt.scatter(データ列x, データ列y, marker='D')
文字列中に部分文字列が含まれるか調べる	sub in s
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
縦棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
option: ８ビット整数型を使う	dtype = np.int8
カウンタの全数	aCounter.total()
ファイル名がTSVファイルかどうか	filename.endswith('.tsv')
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
配列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
ヒストグラムを青くする	plt.hist(データ列, color='b')
折れ線グラフの星印を青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ダイアモンドマーカーを使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
JSON文字列を辞書にする	json.loads(jsonString)
カウンタ同士で積集合	aCounter & aCounter2
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
データ列の折れ線プロットをプロットして、色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
無限大を使用する	math.inf
文字列中に部分文字列がいくつか含まれるか数える	s.count(sub)
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
折れ線グラフを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの大バツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
クラスのサブ型か	issubclass(サブクラス, クラス)
option: 先頭カラムをインデックスに設定する	index_col = 0
イテラブルとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ダークオリーブグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
列名を指定された列の名前一覧に置き換える	df.columns = columns
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
まとめて正規表現patternでデータフレームのカラムの値をreplに変更する	df[col].replace(pattern, repl, regex=True)
散布図の色を濃い青にする	plt.scatter(データ列x, データ列y, color='darkblue')
配列とデータ列について散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
要素は集合に含まれないか	element not in aSet
範囲を指定して乱数を求める	random.randint(最小値, 最大値)
文字列を文字コードによってバイト列に変換する	s.encode(encoding=encoding)
ファイルからファイル名を取り出す	os.path.basename(filepath)
文字列が全て数字かどうか調べる	s.isdigit()
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
ファイルを文字列の示すエンコーディングを用いて書き込み用に開く]	open(filepath, mode='w', encoding=s)
文字列リストをひとつの文字列にする	''.join(aStringList)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
スクリプトファイルと同じフォルダのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^')
ピアソン相関係数でデータフレームのリストで指定された列の相関行列を求める	df[aList].corr(method='pearson')
集合が空か調べる	len(aSet) == 0
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
ターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図を四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
集合からエラーなく要素を除く	aSet.discard(element)
散布図をrgbの下三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図の左三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームを複数の列をキーにして並べる	df.sort_values(by=column)
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
非大文字が文字列中に含まれるか調べる	any(not c.isupper() for c in s)
出力ストリーム全体をリストにする	[s.strip() for s in f.readlines()]
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
線を青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
列から複数個、ランダムに選ぶ	random.choices(iterable, k=n)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
折れ線グラフに菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
赤い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データ列のメディアン	ds.median()
プロットの描画で淡く色テーマを使う	sns.set(pallete='muted')
棒グラフをミスティローズ色を使って描画する	plt.bar(データ列x, データ列y, color='mistyrose')
predicateFuncが真となるシーケンスの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
散布図を赤色として描画する	plt.scatter(データ列x, データ列y, color='red')
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
文字列が組に含まれないかどうか	element not in aTuple
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
四角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
両端キューに値をプッシュする	deq.append(element)
分類結果の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
表データの列をインデックスに設定する	df.set_index(column)
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームを各列と列の組み合わせ毎にグループ分けし、、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
散布図の右三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
オブジェクトがある型のインスタンス	isinstance(obj, クラス)
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
青色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームのリスト列の中にある日付データの合計をカウントする	df[aList].isin([value]).sum()
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
option: マゼンタを使用する	color = 'magenta'
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームのカラムの値が欠損値か調べる	df[col].isna()
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
データフレームで、列の重複を調べる	df.duplicated(subset=column)
青い実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
リストとリストについて散布図を描画し、、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
データフレームの中の欠損値が存在する行を取り除く	df.dropna()
option: 色をミディアムブルーに指定する	color = 'mediumblue'
JSONLファイルにデータフレームを書き込む	df.to_csv(filename)
折れ線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
nとn2が等しい	n == n2
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
option: コロンを分割記号で用いる	sep = ':'
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
横棒グラフを描画して、棒の幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
配列の全要素の値を変更する	aArray[:, :] = 指定の値
ヒストグラムをパールバイオレットレッド色を使って描画する	plt.hist(データ列, color='palevioletred')
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
option: ライトグレーにグラフの色を指定する	color = 'lightgrey'
リネン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
option: フォントの色をブルーバイオレットに指定する	color = 'blueviolet'
文字列はひらがなか調べる	('ぁ' <= ch <= 'ん')
重複していない行だけを取り出す	df[not df.duplicated(keep=False)]
折れ線グラフに四角印を使う	plt.plot(データ列x, データ列y, marker='s')
データフレームの中に文字列が含まれるか	df.isin([value])
リストをn個にビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
配列とリストの散布図を描いて丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
日付時刻データをタプルにする	aDatetime.timetuple()
浮動小数点数の三乗	x ** 3
option: 欠損値は無視する	dropna = True
原点から(実数,y)の距離	math.hypot(x, y)
平均付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
プラットホーム名	sys.platform
ファイルパスをEUCを用いてオープンする]	open(filepath, encoding='euc_jp')
現在のモジュール	sys.modules[__name__]
リストの組み合わせ	itertools.combinations(iterable, n)
未初期化の行列を作成する	np.empty((行数, 列数), dtype=np.int)
グラフで使える色の一覧	matplotlib.colors.cnames
３つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
カラムを百の位で丸める	ds.round(-2)
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
データフレームの相関行列ピアソンでを求める	df.corr(method='pearson')
黒い△マーカーを数列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
平均線付き箱ヒゲ図を描く	plt.boxplot(データ列, meanline=True)
ポイントマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='.')
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
タイムスタンプデータは何時か知る	aDatetime.hour
折れ線グラフを色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図のポイント印の色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
文字列の終了位置以前に部分文字列が含まれない	s.find(sub, 0, end) == -1
ミディアムスレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームのカラムを十の位で丸める	df[col].round(-1)
散布図を赤い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
文字コードtextでファイルを開く]	open(filepath, encoding=text)
データフレームの二つのカラムを並べてボックスチャートで可視化する	plt.boxplot([df['カラム'], df['カラム']])
散布図に黒い菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
kを底とする対数	math.log(x, k)
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
オブジェクトがタプルに含まれない	element not in aTuple
非数値データ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
乱数で要素を埋めた行列を作る	np.random.random(N)
rangeの無限版	itertools.count(start=n, step=step)
1行分標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームのリストカラムはどれだけ、分散しているか見る	df[aList].var()
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームをタブ区切りのファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームのグループごとの最大値	df.groupby(column).max()
リストとリストの散布図を描画し、、クロスマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのリストカラムの欠損値を最大値に指定する	df[aList].fillna(df[aList].max())
日付データにn日分、足す	aDate + datetime.timedelta(days=n)
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
タプル内の要素が少なくとも一つ真か調べる	any(aTuple)
入力から二つの文字列を読む	A, B = map(str, input().split())
行列の列ごとの分散	np.var(aArray, axis=0)
要素一つのりストを得る	[element]
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
データフレームの欠損値をモードに設定する	df.fillna(df.mode().iloc[0])
ポイント印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームを表示するとき表示可能な列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
両端キューの末尾から要素を取り除く	deq.pop()
オリベドラブ色としてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
カラーパレットを全般的に明るくする	sns.set(pallete='bright')
ベクトルの次元数を求める	aArray.ndim
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムをネイビー色を用いて描画する	plt.hist(データ列, color='navy')
シードをnで初期化する	random.seed(n)
xの小数点以下'2'桁までを出力する	print(':.2f'.format(x))
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
白いグリッド線を引く	plt.grid(color='w')
ホワイトスモーク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
カウンタのユニークな要素を列挙する	list(aCounter)
option: フォントの色を青緑に設定する	color = 'teal'
nをn2で割った余り	n % n2
分類結果のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームの第一四分位数を計算する	df.quantile(0.25)
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
ファイルを絶対パスにする	os.path.abspath(filepath)
既存の配列をベースに全要素が0の行列	np.zeros_like(aArray)
柱状グラフを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ヒストグラムを紺色として描画する	plt.hist(データ列, color='darkblue')
リストの先頭を捨てる	aList[1:]
option: グラフの色をスラグレーに変更する	color = 'slategray'
option: グラフの種類を破線に変更する	linestyle = 'dashed'
シスル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
折れ線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
Pandasでデータフレームのcollの数値時刻からdatetime64型にする	pd.to_datetime(df[col], unit='s', utc=True)
ファイルパスをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
書式を引数としてargsを文字列整形する	formatText.format(*args)
インディゴ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
昇順にタプルの要素をソートする	sorted(aTuple, reverse=False)
辞書に要素をキーとして加える	aDict[key] = element
データフレームの列の未入力値を直前の値で補う	df[col].fillna(method='ffill')
rgbの四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
パウダーブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
option: フォントの色をアクアに変更する	color = 'aqua'
２つのリストを順にプリントする	print(value, value2)
文字列からISO書式を使って日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
タプルの長さ	len(aTuple)
青い破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
リストと配列の散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフを青い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
1行だけ標準入力から改行なしで読み込む	sys.stdin.readline().rstrip()
1からNまでの行列を作成する	np.arange(1, N+1)
文字列の先頭だけ大文字化する	s.capitalize()
ヒストグラムの色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
列の中に日付データと文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
データフレームのリスト列を1000の位で丸めて整数にする	df[aList].round(-3).astype(int)
タイムスタンプデータの時刻	aDatetime.time()
折れ線グラフのマーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
データフレームから指定された４列を選ぶ	df[[column, column2, column3, column4]]
option: 色をアクアに設定する	color = 'aqua'
option: グラフの色をブラックに指定する	color = 'black'
データフレームから型だけ抽出する	df.select_dtypes(ty)
集合から要素を除去する	aSet.remove(element)
データフレームの最初n行	df.head(n)
数値を双方向キューの末尾に入れる	deq.append(element)
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
データフレームを列によってによって大きい順に並べる	df.sort_values(by=column, ascending=False)
データ列の中にと日付データがいくつあるかカウントする	ds.isin([value, value2]).sum()
黒い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
列をキーにして２つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
データフレームを関数の値によってグループ分けし、列挙する	[(name, group) for name, group in df.groupby(関数)]
タプルの平均値	sum(aTuple)/len(aTuple)
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
グレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
ファイルパスを開き]バイナリストリームを使う	open(filepath, mode='rb')
縦棒プロットをプロットし、、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
データフレームのグループごとの平均値	df.groupby(column).mean()
option: オリーブにグラフの色を指定する	color = 'olive'
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
インデント幅nで、タプルをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
プロットの中の縦軸に説明をつける	plt.ylabel('y軸ラベル')
option: フォントの色をゴールドに変更する	color = 'gold'
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームのヒストグラムを縦横に並べて、見る	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
option: マルーンを使用する	color = 'maroon'
option: 三二ビット整数型を使う	dtype = np.int16
２つのカウンタのいずれかに含まれる要素を求める	aCounter | aCounter2
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
ファイル名がテキストファイルか確認する	filename.endswith('.txt')
列を配列にする	np.array(iterable)
縦棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
横棒グラフをライトコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcoral')
大バツ印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
項目名がマップ上で定義済みか調べる	key in aDict
データ列の中央値	ds.median()
option: フォントの色をダークサーモンに変更する	color = 'darksalmon'
ファイルパスをSJISを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
値をキューの先頭から取り出す	deq.popleft()
スピアマン相関係数としてデータフレームの相関行列	df.corr(method='spearman')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
xの小数点以下'4'桁の文字列に変換する	':.4f'.format(x)
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
プラム色としてヒストグラムを描画する	plt.hist(データ列, color='plum')
セパレータによって文字列を区切る	s.split(sub)
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
データフレームを100の位で丸める	df.round(-2)
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
二つのリストのインターセクション	list(set(aList) & set(aList2))
線の線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
辞書のキーの値	aDict[key]
散布図の四角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
リストとデータ列についての散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
ロージーブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
日付時刻データの分	aDatetime.minute
リネン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
黒い四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図をサンディーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
データフレームの欠損値を最小値で置換する	df.fillna(df.min())
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
option: 上三角マーカーを描画する	marker = '^'
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: ミントクリーム色を使う	color = 'mintcream'
データ列のパーセンタイルを図示する	plt.boxplot(データ列)
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
中央値で配列をビン分割する	pd.qcut(aArray, 2)
行列の最小を算出する	np.min(aArray)
カテゴリ列でグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
配列を等しい量になるようにn個にビン分割する	pd.qcut(aArray, n)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
sepを区切りとして文字列リストを結合する	sep.join(aStringList)
二つのオブジェクトは等しい	obj == obj2
データ列の欠損値を平均で補う	ds.fillna(ds.mean())
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
アンサンブル学習としてクラス分類をする	sklearn.ensemble.VotingClassifier()
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
データフレームの列のNaNをxに設定する	df[col].fillna(x)
CSVファイルタブ区切りのファイルをn番目のカラムをインデックスにして読む	pd.read_csv(filename, index_col=n)
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: グラフの色をグレーに設定する	color = 'grey'
タイムスタンプデータは日付時刻データより前か	aDatetime < aDatetime2
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
マップのキーとその項目を列挙する	aDict.items()
カデットブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
説明変数と目的変数を用いて回帰モデルを学習する	model.fit(説明変数, 目的変数)
分類モデルのF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームのカラムの欠損値をxに指定する	df[col].fillna(x)
option: グラフの色を貝殻に設定する	color = 'seashell'
マップのキーと値を入れ替える	{v: k for k, v in aDict.items()}
オブジェクトはタプルクラス	isinstance(obj, tuple)
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
縦棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
改行なしに２つの文字列をプリントする	print(value, value2, end='')
option: オールドレース色を使用する	color = 'oldlace'
赤い大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
入力から二つの文字列を取り出す	A, B = map(str, input().split())
折れ線グラフに赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
新しいロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
アイボリー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
データ列が何分か確認する	ds.dt.minute
整数型のゼロ埋めした行列	np.zeros(要素数, dtype=np.int)
データフレームの未入力値を直前の値で埋める	df.fillna(method='ffill')
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
データフレームの列はどの程度、分散しているか見る	df[col].var()
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
データフレームの列がx以上かつx2未満の行を選ぶ	df[(x <= df[column]) & (df[column] < x2)]
ファイルを一行ずつ読む	f.readline()
線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
二つの値を順にプリントする	print(value, value2)
データ列の曜日の名前	ds.dt.weekday_name
ファイルを閉じる	f.close()
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
データフレームの列を最初のカテゴリーを除いてダミー変数にする	pd.get_dummies(df[column], drop_first=True)
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
データフレームを各列とカラムの組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
xが一桁の正の数か調べる	0 <= x <= 9
日付データの月数を使う	aDate.month
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
部分文字列を使って文字列を二つに分ける	s.partition(sub)
イテラブルの各要素に対してpredicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
ベクトルをベースに全要素が1のベクトル	np.ones_like(aArray)
ASCII限定として正規表現で文字列を分ける	re.split(pattern, s, flags=re.ASCI)
option: プラムを用いる	color = 'plum'
辞書のキーとその値を列挙する	aDict.items()
未初期化の行列	np.empty(要素数, dtype=np.int)
３つの実行結果を順に出力する	print(value, value2, value3)
データフレームを列名リストによって昇順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
実数が無限大か	math.isinf(x)
データ列の未入力値を平均に設定する	ds.fillna(ds.mean())
日付データは日付データより後ろ	aDate > aDate2
option: フォントの色を茶色に設定する	color = 'brown'
文字列の接頭辞は部分文字列かどうか調べる	s.startswith(sub)
データフレームの列を100の位で丸める	df[col].round(-2)
グラフの描画を綺麗にする	import seaborn as sns
多次元データを多次元尺度構成法でパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
イテラブルでカウンタを更新する	aCounter.update(iterable)
データフレームのn行目を削除する	df.drop(n, axis=0)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
変数について数式の積分を求める	sympy.integrate(e, z)
表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
option: モカシンにフォントの色を設定する	color = 'moccasin'
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
折れ線グラフをダーク・スラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
辞書のキーを列挙する	aDict.keys()
データフレームのn行より後ろを抽出する	df[n:]
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームのリストカラムの中に文字列と文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
データ列の散布図を描く	plt.scatter(データ列x, データ列y)
スカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
行列の各要素に加算する	aArray + aArray2
カウンタの全カウント	aCounter.total()
散布図の左三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームのカラムの名前リストを求める	df.columns
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
リストとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
グラフを使う準備をする	import matplotlib.pyplot as plt
option: 白にフォントの色を設定する	color = 'white'
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
ピーチパフ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
現在実行中の例外を情報	sys.exc_info()
option: グラフの色をアイボリーに設定する	color = 'ivory'
option: 暗い赤を用いる	color = 'darkred'
データフレームを'A'列と'B'列で並べる	df.sort_values(by=['A', 'B'])
バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x')
rgbの大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
バリーウッドにヒストグラムの色をする	plt.hist(データ列, color='burlywood')
リストの要素数だけ繰り返す	range(len(aList))
データフレームのカラムを整数に四捨五入する	df[col].round()
双方向キューのstart番目からend番目の部分値を求める	collections.deque(itertools.islice(deq, start, end))
ふたつの関係が上位集合か	aSet.issuperset(aSet2)
文字列のサフィックスから部分文字列を取り除く	s.removesuffix(sub)
正弦の逆数	math.asin(x)
確率的勾配降下を用いてクラス分類をする	model = sklearn.linear_model.SGDClassifier()
黒いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データ列の中にいくつ日付データが存在するか数える	ds.isin([value]).sum()
option: 白色を用いる	color = 'white'
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
ヒストグラムの色をシアンにセットする	plt.hist(データ列, color='cyan')
nが5で割り切れるか調べる	n % 5 == 0
ファイルを追加できるように開く]	open(filepath, mode='a')
回帰分析をランダム性を追加したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
option: フォントの色をフクシアに設定する	color = 'fuchsia'
浮動小数点数に浮動小数点数をかける	x * y
空のマッピング	{}
赤い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
ファイルから1文字読み込む	f.read(1)
option: データ型として符号なし８ビット整数型を使用する	dtype = np.uint8
濃い青色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
option: バイナリモードに設定する	mode = 'rb'
nがn2の倍数でない	n % n2 != 0
ドジャーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
赤い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
グリッド線	plt.grid(linestyle='--')
スプリンググリーンにヒストグラムの色をセットする	plt.hist(データ列, color='springgreen')
セットの要素数	len(aSet)
配列を関数でフィルタする	map(func, iterable)
カラムの標準偏差	ds.std()
折れ線グラフの色をRGBを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
部分文字列を文字列の接頭辞から除く	s.removeprefix(sub)
線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
列にシーケンスを続ける	itertools.chain(iterable, iterable2)
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
リストを二つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
option: グラフの色を貝殻に変更する	color = 'seashell'
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
日付時刻データが何曜日か知る	aDatetime.weekday()
JSONファイルのfをデータにする	json.load(fin)
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームのカラムの中に文字列とがあるか調べる	df[col].isin([value, value2])
現在の分数	datetime.date.today().minute
数列と配列について散布図をプロットして丸マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
xを印字できる文字列にする	ascii(x)
option: ペルーを使う	color = 'peru'
ベクトルの累積和を計算する	np.cumsum(aArray)
リストと配列の散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
２つの値をスラッシュで区切ってプリントする	print(value, value2, sep='/')
コーンズシルク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
option: EUCを使用する	encoding = 'euc_jp'
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
整数nの8進文字列	oct(n)[2:]
データフレームの列の中に存在する文字列と文字列の個数を数える	df[col].isin([value, value2]).sum()
データ列の中に文字列と日付データが含まれるか調べる	ds.isin([value, value2])
文字列全体がパターンに複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフをダークバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='darkviolet')
n個にデータフレームの中の列を分割する	pd.cut(df[col], n)
グリーン色としてヒストグラムを描画する	plt.hist(データ列, color='green')
文字列を部分文字列によって二つに分ける	s.partition(sub)
論理値型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列は全て数値か	s.isnumeric()
option: データ型として符号なし８ビット整数型を使う	dtype = np.uint8
バイトオーダを知る	sys.byteorder
データフレームをグループ化し、列に対し個数を算出する	df.groupby(column)[column2].count()
nが2で割り切れないか調べる	n % 2 == 1
配列の推移を実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='gray')
ダイアモンド印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
nの二乗	n ** 2
データフレームから型リストデータ型の列を抽出する	df.select_dtypes(include=typeList)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
散布図にバツマーカーを使用する	plt.scatter(データ列x, データ列y, marker='x')
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
折れ線グラフの下三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
リストが空	len(aList) == 0
横棒グラフをティール色として描画する	plt.barh(データ列x, データ列y, color='teal')
option: グラフの色をダークブルーに変更する	color = 'darkblue'
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
シーケンスを変更不能な集合にする	frozenset(iterable)
散布図を赤い三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c='r')
破線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
リストを文字列リストに変換して、部分文字列を使って連結する	sub.join(map(str, iterable))
データフレームを千の位で四捨五入して整数型にする	df.round(-3).astype(int)
折れ線グラフの色をトマトにセットする	plt.plot(データ列x, データ列y, color='tomato')
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
nがn2より大きいか	n > n2
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
双方向キューの上限	deq.maxlen
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
プロットで使うフォントを指定する	sns.set(font=フォント名)
配列とリストの散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
最大長nの両端キューをシーケンスから作成する	collections.deque(iterable, maxlen=n)
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームを列をキーにしてソートする	df.sort_values(by=column)
分子と分母から分数を作成する	fractions.Fraction(分子, 分母)
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
散布図をペールグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegreen')
散布図をrgbの大バツマーカーとして描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: フォントの色をミディアムブルーにする	color = 'mediumblue'
データフレームの列のNaNを50パーセンタイルで埋める	df[col].fillna(df[col].median())
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
耐火レンガ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: ビスクにグラフの色をセットする	color = 'bisque'
回帰木モデルを作成する	model = sklearn.tree.DecisionTreeRegressor()
ミディアムブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumblue')
データフレームを列ごとに集約してグループの個数を計算する	df.groupby(column).count()
２つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームを'A'列の値によってまとめたグループを使う	df.groupby('A')
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
分割数nでデータフレームの中の列をビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列が数字	s.isdigit()
データフレームのリスト列の中にいくつ文字列が含まれるか求める	df[aList].isin([value]).sum()
kを底とする小数点数の対数	math.log(x, k)
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
マッピングの値の一覧を得る	aDict.values()
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
ヒストグラムをパールゴールデンロッド色として描画する	plt.hist(データ列, color='palegoldenrod')
横棒グラフをオレンジレッド色として描画する	plt.barh(データ列x, データ列y, color='orangered')
安全に文字列の接頭辞から部分文字列を消す	s.removeprefix(sub)
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
グレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ファイルが存在するかどうか	os.path.exists(filepath)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームとしてTSVファイルを読み込む	pd.read_csv(filename, sep='\t')
文字列が平仮名	('ぁ' <= ch <= 'ん')
データ列をn個に分割する	pd.cut(ds, n)
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
nxn2の２次元リスト	[[0] * n for _ in range(n2)]
散布図の上三角印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データ列の中の欠損値の合計をカウントする	ds.isna().sum()
option: サドルブラウン色を用いる	color = 'saddlebrown'
NULLに等しい値	None
列をキーにしてデータフレームを並べる	df.sort_values(by=column)
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームのリスト列の欠損値を直後の値に変更する	df[aList].fillna(method='bfill')
10を底とする小数点数の対数を求める	math.log10(x)
双方向キューから指定した範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
データ列のNaNを前の行の値で埋める	ds.fillna(method='ffill')
データフレームのリストカラムのNaNを直前の値で補う	df[aList].fillna(method='ffill')
option: ライトコーラルを用いる	color = 'lightcoral'
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
データ列と配列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: グリーンイエロー色を用いる	color = 'greenyellow'
表データの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
回帰分析をRANSACで行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: 色を耐火レンガに設定する	color = 'firebrick'
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
クリムゾンにヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
nを十六進文字列にする	hex(n)[2:]
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データ列の一意な値の個数	ds.nunique()
xが一桁の正の整数	0 <= x <= 9
半透明の一点鎖線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データ列が何年か見る	ds.dt.year
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
散布図を黒いダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='k')
リストの長さを見る	len(aList)
データフレームのNaNを後の値で置換する	df.fillna(method='bfill')
データフレームの列を四捨五入する	df[col].round()
ふたつの関係が部分集合か調べる	aSet.issubset(aSet2)
折れ線グラフの▼印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
データ列が正規分布か仮説検定する	scipy.stats.shapiro(データ列)
整数型の０で全要素を初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int)
耐火レンガ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
空の両端キューを作る	collections.deque()
データフレームを'A'列によって小さい順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
平均線付き箱髭図を描く	plt.boxplot(データ列, meanline=True)
文字列としてイテラブルを連結する	''.join(map(str, iterable))
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
リストとイテラブルについて散布図を描画して、四角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
縦棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
整数nをn2分の１にする	n //= n2
ヒストグラムをベージュ色を用いて描画する	plt.hist(データ列, color='beige')
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
各列毎にデータフレームをグループ化して、列の標準偏差を計算する	df.groupby(column)[column2].std()
横棒プロットの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
option: グラフの色をカデットブルーに変更する	color = 'cadetblue'
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
リストをn個にビンニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
実数のkを底とする対数を求める	math.log(x, k)
リストと配列の散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
リストのヒストグラムを描く	plt.hist(データ列)
整数nを8進表記に変換する	oct(n)
青い▼マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームの列を千の位で丸めて、整数型にする	df[col].round(-3).astype(int)
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
紺色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
平均値でデータ列の欠損値を埋める	ds.fillna(ds.mean())
散布図のダイアモンドマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
文字をASCIIコードに変換する	ord(ch)
option: グラフの色を紺碧に設定する	color = 'azure'
データ列は何年か調べる	ds.dt.year
実数とyの斜辺を計算する	math.hypot(x, y)
ゼロ埋めしたベクトル	np.zeros(要素数)
データフレームのリスト列の欠損値を最頻値で置換する	df[aList].fillna(df[aList].mode().iloc[0])
列の欠損値を平均値にする	ds.fillna(ds.mean())
文字列を置換する	s.replace(sub, newsub)
数に実数を加える	x + y
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
リストの出現頻度を作図する	plt.hist(データ列)
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
データフレームの未入力値を最頻値に設定する	df.fillna(df.mode().iloc[0])
縦棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
ヒストグラムの色をシルバーにセットする	plt.hist(データ列, color='silver')
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのリスト列の欠損値を最頻値に変更する	df[aList].fillna(df[aList].mode().iloc[0])
文字列を文字コードでバイト列に変換する	s.encode(encoding=encoding)
黒いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
option: ローングリーン色を使用する	color = 'lawngreen'
フォーマットを使って文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
配列の列ごとの合計を調べる	np.sum(aArray, axis=0)
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
配列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
部分文字列を文字列中から探す	s.find(sub)
実部と虚部から複素数	complex(x, y)
year年month月day日hour時のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
散布図の星マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
グリッド線をプロットから消す	plt.grid(False)
折れ線グラフに▲印を使用する	plt.plot(データ列x, データ列y, marker='^')
マッピングのキーとその値をペアとして取り出す	aDict.items()
双方向キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
スノー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
正規表現を使う	import re
SVDでパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームのリスト列を100の位で丸める	df[aList].round(-2)
配列の列ごとの平均値	np.mean(aArray, axis=0)
箱ひげ図をプロットして、平均線を加える	plt.boxplot(データ列, meanline=True)
折れ線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
部分文字列が文字列の開始位置と終了位置の間に含まれるか調べる	s.find(sub, start, end) != -1
データフレームのリスト列の欠損値をメディアンで埋める	df[aList].fillna(df[aList].median())
アークコサイン	math.acos(x)
一点鎖線にヒストグラムの線の種類を変更する	plt.hist(データ列, linestyle='dashbot')
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームを二つの列で昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列がタイトルケースかどうか	s.istitle()
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
空のセットを使う	set()
文字列内に英字が含まれるかどうか	any(c.isalpha() for c in s)
データフレームから型リストのデータ型のカラムのみ除外する	df.select_dtypes(exclude=typeList)
option: 色をグリーンイエローに変更する	color = 'greenyellow'
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
option: グラフの色をダークゴールデンロッドにセットする	color = 'darkgoldenrod'
タプルの最後からn番目以前の部分を取り出す	aTuple[:-n]
ラベンダー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
ヒストグラムの色を淡いピンク色にセットする	plt.hist(データ列, color='lightpink')
折れ線グラフの色をダークスレートブルーに指定する	plt.plot(データ列x, データ列y, color='darkslateblue')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
文字列の中のASCII限定として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
データフレームの先頭n行	df.head(n)
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
数値を太字で表示できる文字列にする	f'\033[1m{value}\033[0m'
黄色で文字列をプリントする	print(f'\033[33m{value}\033[0m')
リストとデータ列の散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
データフレームをJSONLファイルにTSVファイルとして保存する	df.to_csv(filename, sep='\t')
プログラムの実行を適切に終了する	sys.exit(0)
キーが辞書に存在するか調べる	key in aDict
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
option: グラフの色をマゼンタに設定する	color = 'magenta'
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームの欠損値を最大値に増やす	df.fillna(df.max())
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームのリスト列の欠損値を中央値に指定する	df[aList].fillna(df[aList].median())
nをn2だけ増加させる	n += n2
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
列の平均値	ds.mean()
Pandasで、UNIX時間のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
nをn2倍にする	n *= n2
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
データ列のユニークな値	ds.unique()
横棒グラフをスノー色を使って描画する	plt.barh(データ列x, データ列y, color='snow')
非数値データ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
双方向キューから最初の数値を取り除く	deq.remove(element)
文字列が全てアスキー文字	s.isascii()
パープル色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
文字列の開始位置以降が部分文字列で始まる	s.startswith(sub, start)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
データフレームのカラムの中にある文字列の合計をカウントする	df[col].isin([value]).sum()
option: グラフの色をゴーストホワイトに指定する	color = 'ghostwhite'
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
散布図をローングリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
タイムスタンプデータの年数	aDatetime.year
option: データ型として論理値型を使用する	dtype = np.int32
データフレームを列の値でグループ化して、グループの件数を知る	df.groupby(column).size()
文字列を黒色で出力する	print(f'\033[30m{value}\033[0m')
折れ線グラフを色付きの点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
文字列から部分文字列を全て除去する	s.replace(sub, '')
折れ線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
ヒストグラムをサドルブラウン色を用いて描画する	plt.hist(データ列, color='saddlebrown')
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
値は集合に含まれないかどうか確認する	element not in aSet
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
ライトゴールドロディイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
書き込み用にファイルをオープンして]、fとする	f = open(filepath, mode='w')
データフレームを各列と列の組み合わせ毎に集約して、個数を算出する	df.groupby([column, column2], as_index=False).count()
辞書にキーがあるかどうか調べる	key not in aDict
折れ線グラフの右三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ふたつの集合のユニオン	aSet.union(aSet2)
option: グリーン色を使用する	color = 'green'
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
ヒストグラムをマゼンタ色を用いて描画する	plt.hist(データ列, color='magenta')
日付データにn秒分足す	aDate + datetime.timedelta(seconds=n)
tanの逆数	math.atan(x)
変数を太字化する	f'\033[1m{value}\033[0m'
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームの列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
データフレームを複数の列の値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(columns)]
文字列の開始位置番目と終了位置番目の間に部分文字列がないか調べる	s.find(sub, start, end) == -1
option: 紺碧を用いる	color = 'azure'
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
浮動小数点数を実数に加える	x + y
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
rgbの大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
グリーンイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
nをn2で結果の切り上げを求める	(n + n2 - 1) // n2
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
デックの値をインプレースに反転する	deq.reverse()
浮動小数点数から浮動小数点数を引く	x - y
散布図をミディアムスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
黒い右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
ヒストグラムの描画し、正規化する	plt.hist(データ列, density=True)
列を文字列に変換して連結する	''.join(map(str, iterable))
赤い実線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
黒い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
ライム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
列の値でデータフレームを集約する	df.groupby(column)
マッピングの項目名を要素に設定する	aDict[key] = element
散布図の▽マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
縦軸の目盛を表示しない	plt.yticks([])
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
データフレームで、列に重複があるか調べる	df.duplicated(subset=column)
n×n2を算出する	n * n2
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
配列とリストについて散布図を描いてマーカーをダイアモンドに指定する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: グラフの色をディムグレーに変更する	color = 'dimgrey'
option: マーカーをポイントに変更する	marker = '.'
option: フォントの色をパールバイオレットレッドに変更する	color = 'palevioletred'
散布図を赤い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフをミディアムシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
日付時刻データが水曜日かどうか	aDatetime.weekday() == 2
データフレームの重複した行数のマスク	df.duplicated()
ふたつの関係が真上位集合	aSet > aSet2
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: フクシア色を使う	color = 'fuchsia'
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
配列の列ごとの最小値を求める	np.min(aArray, axis=0)
データフレームのリストカラムの中にある文字列との合計を数える	df[aList].isin([value, value2]).sum()
option: グラフの色をターコイズにセットする	color = 'turquoise'
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
列によってデータフレームをグループ化して、最小値を計算する	df.groupby(column).min()
n2がn以上、かつn3以下か調べる	n <= n2 and n2 <= n3
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
日付データが水曜日か調べる	aDate.weekday() == 2
折れ線グラフの色をロージーブラウンに変更する	plt.plot(データ列x, データ列y, color='rosybrown')
Pandasで、データ列をフォーマットfmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
２つのデータフレームを列をキーにして外部結合する	pd.merge(df, df2, on=column, how='outer')
キーが辞書にあるかどうか	key in aDict
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
実行環境のエンコーディング	sys.getdefaultencoding()
小数点数の逆正接を求める	math.atan(x)
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
データフレームのn行目をドロップして入れ替える	df.drop(n, axis=0, inplace=True)
ヒストグラムの色を暗い赤にする	plt.hist(データ列, color='darkred')
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
破線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
x座標の目盛を非表示にする	plt.xticks([])
列名リストの値でデータフレームをグループ化する	df.groupby(columns)
逆正接を計算する	math.atan(x)
浮動小数点数が正か確認する	x > 0
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
折れ線グラフを青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ヒストグラムをネイビー色を使って描画する	plt.hist(データ列, color='navy')
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
option: 丸マーカーを使う	marker = 'o'
日付時刻データが水曜日	aDatetime.weekday() == 2
折れ線グラフをレベッカパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ファイルパスをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
nがn2より小さい	n < n2
箱ヒゲ図をプロットし、平均値を加える	plt.boxplot(データ列, showmeans=True)
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
変数がマイナス無限大に近づく時の数式の極限値を計算する	sympy.limit(e, z, -oo)
配列にはいくつ要素があるか調べる	aArray.size
部分集合か調べる	aSet.issubset(aSet2)
変数が0に近づく時の数値の極限値を求める	sympy.limit(e, z, 0)
実数を複素数に変換する	complex(x)
下三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v')
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['A'].value_counts().sort_index().index
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
nとn2の和	n + n2
0からN未満までの配列を作る	np.arange(N)
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
行列の行ごとの最大値を求める	np.max(aArray, axis=1)
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
両端キューの中に値が含まれてるか調べる	element in deq
データフレームの列のNaNをxで埋める	df[col].fillna(x)
option: マーカーの色を変更する	markerfacecolor = '#800080'
nが-9以上9以下	-9 <= n <= 9
nxn2の二次元リストを得る	[[0] * n for _ in range(n2)]
option: ▲マーカーを使う	marker = '^'
上位集合もしくは等しいか	aSet > aSet2
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
横棒グラフをシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='cyan')
色付きの一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
カウンタの項目の回数	aCounter[element]
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
配列から重複を除いたベクトルを作る	np.unique(aArray)
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
option: n番目のカラムを行に減らす	index_col = n
データフレームのリストカラムの中に日付データがあるか	df[aList].isin([value])
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
配列をビン数nでビン分割する	pd.cut(aArray, n)
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ダークターコイズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
クリムゾン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ベクトル計算をする	import numpy as np
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
数を千の位で丸める	round(x, -3)
実行環境はマックか	sys.platform.startswith('darwin')
折れ線グラフをスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='springgreen')
線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
オブジェクトはタプルクラスか	isinstance(obj, tuple)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
配列の最小	np.min(aArray)
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
整数nを八進数文字列にする	oct(n)[2:]
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
折れ線グラフをダークゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
カラムを1000の位で四捨五入する	ds.round(-3)
円プロットのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
文字列のケースを整える	s.casefold()
nの八進表記を使う	oct(n)
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ヒストグラムの色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
nが正の数か調べる	n > 0
両端キューの要素を左にn個分輪番で回す	deq.rotate(-n)
データフレームのカラムのNaNをメディアンで埋める	df[col].fillna(df[col].median())
入力ストリーム全体を行単位で分割して読み込む	f.readlines()
イエローグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
イテラブルの集合	set(iterable)
整数個からk個取り出した場合の順列の総数	math.perm(n, k)
リスト中のオブジェクトが最初に見つかる位置	aList.index(element)
ヒストグラムの色をマゼンタにする	plt.hist(データ列, color='magenta')
option: グラフの色をナバホホワイトに変更する	color = 'navajowhite'
パレットトルコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
データフレームのカラムの未入力値を直前の値に設定する	df[col].fillna(method='ffill')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
リストとリストについて散布図を描画し、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
表データを使用する	import pandas as pd
３自然数の最大公約数を求める	math.gcd(n, n2, n3)
文字列の左端が部分文字列か調べる	s.startswith(sub)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
ライトスチールブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
リストを青色で表示する	print(f'\033[34m{value}\033[0m')
散布図に星印を加える	plt.scatter(データ列x, データ列y, marker='*')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
散布図を黒い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
デックの中に要素が含まれてるか調べる	element in deq
列とイテラブルの直積を求める	itertools.product(iterable, iterable2)
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
option: グラフの色をラベンダーに設定する	color = 'lavender'
主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
option: フォントの色をバイオレットに設定する	color = 'violet'
配列のスカラー倍	aArray * n
実数が負かどうか調べる	x < 0
数の三乗	x ** 3
末尾の列をデータフレームから消す	df[df.columns[:-1]]
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
日付データが日付データよりあとかどうか調べる	aDate > aDate2
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
配列の転置行列を調べる	aArray.T
散布図に三角印を使う	plt.scatter(データ列x, データ列y, marker='^')
データフレームを列によってソートする	df.sort_values(by=column)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
列を配列に変換する	np.array(iterable)
エラーなくリストのオブジェクトの位置を見る	aList.index(element) if element in aList else -1
n回オブジェクトを繰り返す列	itertools.repeat(element, n)
データフレームの分散	df.var()
Pandasで、フォーマットで文字列をdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
文字列内にアルファベットが含まれるかどうか調べる	any(c.isalpha() for c in s)
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
リストとリストについての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
カテゴリ列でグループ化して、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
オブジェクトのハッシュ値を求める	hash(obj)
新しい文字列で文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
縦棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
散布図のダイアモンド印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
オブジェクトはリスト	isinstance(obj, list)
折れ線グラフでデータフレームの列を図示する	plt.plot(df[column], df[column])
全印字	string.printable
データフレームのリスト列の中に存在する日付データの個数を数える	df[aList].isin([value]).sum()
折れ線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
ファイルを追加モードとしてオープンする]	open(filepath, mode='a')
データフレームの列の名前を変更する	df.rename(columns={column: name})
option: レモンシフォン色を用いる	color = 'lemonchiffon'
ファイルをオープンして]バイナリ書き込みストリームを見る	open(filepath, mode='wb')
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
ベクトルにはいくつ要素があるか調べる	aArray.size
線グラフを赤い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: 区切り記号をタブにする	sep = '\t'
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
シーケンスとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
データフレームを複数の列を用いて昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
特異値分解で淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
predicateFuncを適用したときTrueとなるシーケンスの部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
タブ	'\t'
文字列を文字リストにする	list(s)
option: ベクトルのデータ型を指定する	dtype = np.int16
option: 色をコーンズシルクに設定する	color = 'cornsilk'
色付きの点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
シスル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
ヒストグラムの色を濃い青に指定する	plt.hist(データ列, color='darkblue')
option: 線の幅を3.0ポイントに指定する	linewidth = 3.0
option: ヘッダをnamesに減らす	header = names
nとn2のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
シスル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データ列の第一四分位数	ds.quantile(0.25)
線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
x軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
データ列の変化を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: ライムを使用する	color = 'lime'
ファイルパスをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
リストの比率を円プロットで可視化する	plt.pie(データ列, startangle=90)
データ列とリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
y座標に名称を付ける	plt.ylabel('y軸ラベル')
散布図をマゼンタ色を使って描画する	plt.scatter(データ列x, データ列y, color='magenta')
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
日付時刻データの秒数を使う	aDatetime.second
黒い▽マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
真⊂	aSet < aSet2
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: クリムゾンにグラフの色を設定する	color = 'crimson'
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
散布図の菱形印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ゴーストホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
既存のファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
ミディアムブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データ列が正規分布からどの程度尖っているか調べる	ds.skew()
青い一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
計数器を辞書から生成する	collections.Counter(aDict)
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
データフレームのカラムの欠損値を直後の値で置換する	df[col].fillna(method='bfill')
折れ線グラフの星印の大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
文字列がタプルに含まれないか調べる	element not in aTuple
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
ふたつの集合の対称差を使う	aSet.symmetric_difference(aSet2)
二つの集合が互いに素	aSet.isdisjoint(aSet2)
棒グラフをナバホホワイト色として描画する	plt.bar(データ列x, データ列y, color='navajowhite')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2])
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
散布図を真紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
クラス分類の予測精度をヒートマップを用いて見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
角度のラジアンを求める	math.radians(degree)
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
option: 黄緑にフォントの色を変更する	color = 'chartreuse'
データフレーム全体をインデックスによって昇順にソートする	df.sort_index(ascending=True)
実数の双曲線正接	math.tanh(x)
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
折れ線グラフの菱形印の線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
散布図をrgbの三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
データフレームの列の欠損値を後の行の値に設定する	df[col].fillna(method='bfill')
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
標準入力から1行受け取る	input()
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
ミディアムスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
変数名をキーとして、辞書	dict(name=element)
option: フォントの色を貝殻にセットする	color = 'seashell'
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
全要素が1の行列を作成する	np.ones(行数, 列数, dtype=np.int)
文字列の両端から空白を消す	s.strip()
数値の展開を行う	sympy.expand(e)
配列とイテラブルについての散布図にrgbの菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
点線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムを淡い茶色色で描画する	plt.hist(データ列, color='tan')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
option: フォントの色をやわらかい青に設定する	color = 'cornflowerblue'
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
横棒グラフをオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='orchid')
折れ線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレームの列と列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[[column, column2]].corr())
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
文字列内にひとつでも小文字が含まれる	any(c.islower() for c in s)
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
文字列を最後の部分文字列で二分し後半の文字列を使う	s.rpartition(sub)[-1]
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
L2ノルムを用いて正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データ列の値を正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
第二引数で指定されたファイルの名前	sys.argv[1]
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
配列をy座標、リストをx軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
ファイルをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
option: ライトグレー色を用いる	color = 'lightgray'
option: フォントの色をダークシアグリーンにセットする	color = 'darkseagreen'
データフレームの各列間の相関係数を求める	df.corr()
イエローグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
列によってデータフレームをまとめたグループを見る	df.groupby(column)
データフレームのn行目を取り除いて、入れ替える	df.drop(n, axis=0, inplace=True)
二つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
リストと数列についての散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ランダムにデータフレームからn行を抽出する	df.sample(n)
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
タブ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: グラフの色をライトブルーに変更する	color = 'lightblue'
option: グラフの色をダークグリーンに指定する	color = 'darkgreen'
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
オリベドラブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームのn行目を破壊的にドロップする	df.drop(n, axis=0, inplace=True)
データフレームを列によってグループ化する	df.groupby(column)
行列の列ごとの合計	np.sum(aArray, axis=0)
折れ線グラフの色をダークオリーブグリーンにセットする	plt.plot(データ列x, データ列y, color='darkolivegreen')
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
文字列中から部分文字列を見つける	s.find(sub)
列の各データが何回出現するか調べる	ds.value_counts()
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの列の中に文字列と文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
ピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
クラス分類のPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
日付時刻データがタイムスタンプデータより前か確認する	aDatetime < aDatetime2
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 線の幅を変更する	linewidth = 3.0
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
二つのデータフレームを横方向に一つにする	pd.merge(df, df2)
option: プラムを使用する	color = 'plum'
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
nがn2で割り切れないか確認する	n % n2 != 0
データフレームのカラムが正規分布からどの程度、尖っているか確認する	df[col].skew()
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
タプルの最後を取り除く	aTuple[:-1]
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
データフレームのカラムがどの程度分散しているか見る	df[col].var()
タプルの長さを見る	len(aTuple)
タイムスタンプデータのタイムゾーンを使う	aDatetime.timetz()
option: 菱形印を加える	marker = 'D'
パターンで文字列を分ける	re.split(pattern, s)
プロットの見栄えをデフォルトでいい感じに変更する	sns.set()
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: 色をライトグレーに変更する	color = 'lightgray'
リストとイテラブルについて散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
両端キューを空にする	deq.clear()
option: 未入力値は無視する	dropna = True
黒い三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ファイルパスをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
option: グラフの色をマゼンタにする	color = 'magenta'
データフレームの列の文字列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
プロットで用いるx軸にラベルを付ける	plt.xlabel('x軸ラベル')
上三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
主成分分析として多次元データを淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ファイルが存在するかどうか調べる	os.path.exists(filepath)
option: ライトシアン色を使う	color = 'lightcyan'
イエローグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
列名のリストをデータ型でフィルタする	df.select_dtypes(型).columns
スプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='springgreen')
option: ダイアモンドマーカーを使う	marker = 'D'
棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームを列によってグループ化して最大値を求める	df.groupby(column).max()
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
珊瑚色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
折れ線グラフに四角印を用いる	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
マゼンタ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
ヒストグラムをオリーブ色を用いて描画する	plt.hist(データ列, color='olive')
タプルの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
行列を変形する	aArray.reshape(行数, 列数)
ヒストグラムをパレットトルコイズ色を用いて描画する	plt.hist(データ列, color='paleturquoise')
カラムは正規分布からどれだけ、歪んでいるか見る	ds.kurt()
フォーマットとして文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
option: 星印を用いる	marker = '*'
線を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
箱ひげ図でデータ列を作図する	plt.boxplot(データ列)
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームの先頭	df.head()
文字列の開始位置からと終了位置までの間に部分文字列がないか調べる	s.find(sub, start, end) == -1
nが5で割り切れるかどうか調べる	n % 5 == 0
データフレームの列のどの値が頻出か見る	df[col].mode()
リストとリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
プラム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
文字列をアンダーライン付きにする	f'\033[4m{value}\033[0m'
行列の列を選択する	aArray[:, 列番号]
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
要素は集合の要素	element in aSet
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
文字列を部分文字列によって区切る	s.split(sub)
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフを一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
横棒グラフをミディアムブルー色を使って描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームのカラムをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
ファイルからnという名前のシートを読む	pd.read_excel(filename, sheet_name=n)
複素数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=bool)
棒グラフをホワイト色として描画する	plt.bar(データ列x, データ列y, color='white')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ローングリーンにヒストグラムの色をセットする	plt.hist(データ列, color='lawngreen')
横棒グラフをライトイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightyellow')
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
回帰分析をサポートベクターマシンとして行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
値がセットのメンバー	element in aSet
上位集合か調べる	aSet.issuperset(aSet2)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ファイルに文字列を書き込む	f.write(s)
カテゴリでグループ化して、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: namesを列名に設定する	names = names
ピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
実数のn乗を求める	x ** n
リストとイテラブルについて散布図を描いて、三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
プロットの縦軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
本日が何月か知る	datetime.datetime.today().month
新しいリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
グラフをプレゼン用に設定する	sns.set(context='talk')
文字列中からパターンにASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
箱髭図を横向きにする	plt.boxplot(データ列, vert=False)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
データ列が何曜日か調べる	ds.dt.weekday_name
両端キューが空か調べる	len(deq) == 0
に箱ひげ図としてデータフレームを描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データ列の分	ds.dt.minute
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
カテゴリデータをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
モードでデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
二つの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
option: バツマーカーを使用する	marker = 'x'
等間隔でデータフレームの中の列をn個に分割する	pd.cut(df[col], n)
現在の時間数を使う	datetime.date.today().hour
option: データ型として三二ビット整数型を使う	dtype = np.int16
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームを列によってソートし、、行を振り直す	df.sort_values(columns).reset_index(drop=True)
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ペアリストpairsからカウンタを用意する	collections.Counter(dict(pairs))
文字列を全て大文字にする	s.upper()
データフレームを百の位で丸める	df.round(-2)
小数点数を切り下げて整数に変換する	math.floor(x)
リストと配列について散布図を描画してマーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
部分文字列が文字列の開始位置より後に含まれない	s.find(sub, start) == -1
option: フォントの色をクリムゾンに変更する	color = 'crimson'
折れ線グラフの色をゴーストホワイトにする	plt.plot(データ列x, データ列y, color='ghostwhite')
1で全要素を初期化した行列	np.ones(要素数, dtype=np.int)
option: 改行コードを動作環境依存に変更する	newline = None
データフレームのリスト列の欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
カラムのどの値が頻出か調べる	ds.mode()
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
カウンタを多い順番に列挙する	aCounter.most_common()
追加できるように既存のファイルを文字列の示すエンコーディングで開く]	open(filepath, mode='a', encoding=s)
ヒストグラムをフローラルホワイト色を用いて描画する	plt.hist(データ列, color='floralwhite')
数の複素数を求める	complex(x)
カテゴリ別で色分けして、データフレームの全カラムの相関を図示する	sns.pairplot(df, hue='カテゴリ列')
正規表現にケースを無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
replに正規表現patternでデータ列を一度に変更する	ds.replace(pattern, repl, regex=True)
データフレームの中の列を中央値でビンニングする	pd.qcut(df[col], 2)
option: 色を黄色に指定する	color = 'yellow'
散布図をダークスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
文字列の両端から空白を除く	s.strip()
option: グラフの色をアリスブルーに指定する	color = 'aliceblue'
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
option: ゴールデンロッド色を用いる	color = 'goldenrod'
双方向キューの右	deq[-1]
ファイルパスを開き]、バイナリストリームを使う	open(filepath, mode='rb')
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
option: グリーンを使う	color = 'green'
イテラブルとリストについての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
日付データが日付データより前か調べる	aDate < aDate2
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
両端キューの末尾からデータを取り出す	deq.pop()
カラムを10の位で丸めて、整数にする	ds.round(-1).astype(int)
列の各データ値の出現数	ds.value_counts()
マップのキーの一覧	aDict.keys()
文字列は片仮名	('ァ' <= ch <= 'ン')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
縦棒グラフをコーンフラワーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
表データで列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
option: スカイブルー色を用いる	color = 'skyblue'
option: データ型としてブール型を使う	dtype = np.int32
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
列ごとにデータフレームをグループ化して標準偏差を求める	df.groupby(column).std()
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
列のユニークな値	ds.unique()
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列中に部分文字列がいくつか存在するか調べる	s.count(sub)
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
文字列はカタカナかどうか調べる	('ァ' <= ch <= 'ン')
ヒストグラムの色をレモンシフォンにセットする	plt.hist(データ列, color='lemonchiffon')
項目名がタプル上で未定義かどうか調べる	key not in aDict
データフレームの値がNaNか調べる	df.isna()
文字列中に部分文字列が含まれるか	sub in s
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: マーカーを▲に変更する	marker = '^'
散布図のマーカーを上三角にする	plt.scatter(データ列x, データ列y, marker='^')
option: フォントの色をラベンダーに変更する	color = 'lavender'
データ列を縦棒プロットにする	plt.bar(ラベル列, データ列)
データフレームとデータフレームの列を横方向につなぐ	pd.concat([df, ds], axis=1)
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
赤い点線としてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
データフレームの指定された４列を抽出する	df[[column, column2, column3, column4]]
データフレームの列の名前を一度に文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
棒グラフをモカシン色を用いて描画する	plt.bar(データ列x, データ列y, color='moccasin')
横棒グラフをインディゴ色として描画する	plt.barh(データ列x, データ列y, color='indigo')
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
多次元尺度構成法として淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
データフレームのリスト列を整数に丸める	df[aList].round()
マッピングの項目数	len(aDict)
option: データ型として８ビット整数型を使う	dtype = np.int8
グラフの用途をポスターに指定する	sns.set(context='poster')
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
option: ライムグリーンにグラフの色を設定する	color = 'limegreen'
データをスケーリングする	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
カーネル密度分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームのリストカラムの中にとがいくつあるかカウントする	df[aList].isin([value, value2]).sum()
グラフの用途を論文に設定する	sns.set(context='paper')
シーケンスにシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
ヒストグラムをミディアムスレートブルー色として描画する	plt.hist(データ列, color='mediumslateblue')
グリーンにヒストグラムの色を変更する	plt.hist(データ列, color='green')
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
ディープスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='deepskyblue')
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
データ列は何分か調べる	ds.dt.minute
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
ふたつの集合のいずれか一方だけの集合を使う	aSet.symmetric_difference(aSet2)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
ケンドール相関係数としてデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='kendall')
option: ミディアムパープルを用いる	color = 'mediumpurple'
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
本日の曜日を整数で使う	datetime.datetime.today().weekday()
ロイヤルブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
文字列中に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
オブジェクトがリストの要素か確認する	element in aList
データフレームの中央値を計算する	df.median()
データフレームのリスト列の歪度	df[aList].kurt()
option: n番目の列をインデックスにセットする	index_col = n
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフの大バツマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
文字列を空白で区切って、文字列リストに変換する	s.split()
セットを組にする	tuple(aSet)
xでカラムの欠損値を埋める	ds.fillna(x)
数値を太文字にする	f'\033[1m{value}\033[0m'
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
データフレームのカラムはどの程度、分散しているか見る	df[col].var()
option: ポイント印を用いる	marker = '.'
ヒストグラムの色を真紅にする	plt.hist(データ列, color='crimson')
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
空のチェーンマップを作る	collections.ChainMap()
非数	math.nan
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
タプルのn番目からn2番目の部分	aTuple[n:n2]
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
option: 青色を使う	color = 'blue'
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
二つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
暗く色をグラフの描画で用いる	sns.set(pallete='dark')
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
横棒グラフをフローラルホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='floralwhite')
線グラフをアクア色を使って描画する	plt.plot(データ列x, データ列y, color='aqua')
リストと配列についてリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
数列とデータ列の散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
nの無限な数列	itertools.repeat(n)
二つのデータフレームを縦方向に一つにする	pd.concat([df, df2])
リストをビン数nで等しい量になるようにビン分割する	pd.qcut(aList, n)
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
リストとデータ列について散布図を描き、、文字列という簡単な説明用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
データ列を２つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
新しい回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
数式の微分を算出する	sympy.diff(e)
データ列を箱ひげ図でプロットする	plt.boxplot(データ列)
空の両端キューを新規生成する	collections.deque()
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
三整数の最大公約数	math.gcd(n, n2, n3)
配列は何次元か調べる	aArray.ndim
データフレームの列の母標準偏差	df[col].std(ddof=0)
データフレームから重複を削除する	df.drop_duplicates()
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
nをn2分の１にする	n /= n2
2を底とする実数の対数を求める	math.log2(x)
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ストリームからn文字、読み込む	f.read(n)
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
線グラフの色をダークグレーにセットする	plt.plot(データ列x, データ列y, color='darkgray')
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
折れ線グラフの菱形印の線幅を設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
カウンタのキーとカウントをリストとして得る	aCounter.items()
折れ線グラフの色をプラムに指定する	plt.plot(データ列x, データ列y, color='plum')
option: 線種を破線にする	linestyle = 'dashed'
nがn2で割り切れるか調べる	n % n2 == 0
option: グラフの色をライトサーモンに変更する	color = 'lightsalmon'
線を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
タイムスタンプデータが日付時刻データより先かどうか調べる	aDatetime < aDatetime2
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
データフレームの行名を、nameからname2に付け直す	df.rename(index={name: name2})
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
データフレームから指定された二つの列を取り出す	df[[column, column2]]
赤いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
部分文字列か調べる	sub in s
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>')
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
2つ並べて箱髭図を描画する	plt.boxplot([データ列, データ列])
option: ピーチパフ色を使用する	color = 'peachpuff'
リストと配列の散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
列のユニークな値の個数を確認する	ds.nunique()
散布図の四角印の色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
浮動小数点数の２乗を求める	x ** 2
横棒グラフをダークグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgrey')
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線プロットのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのインデックスの名前の一覧	df.index
データ列と配列についての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: 色を耐火レンガに指定する	color = 'firebrick'
タイムスタンプデータが日付時刻データと同時	aDatetime == aDatetime2
データ列の推移を青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
配列が何のデータ型か調べる	aArray.dtype()
縦棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
n番目のシートをエクセルファイルファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
データフレームを二つの列を用いて昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
読み込みモードでファイルパスをオープンして]fとする	f = open(filepath, mode='r')
リストと配列の散布図を描画して、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
リストの要素を小さい順にソートする	sorted(aList, reverse=False)
option: 大バツマーカーを描画する	marker = 'X'
フクシア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
スラッシュで区切って二つの数値をプリントする	print(value, value2, sep='/')
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームの列の文字列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
スチールブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
ミディアムブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
平均値でデータ列の欠損値を補う	ds.fillna(ds.mean())
ファイルパスを追加モードで開く]	open(filepath, mode='a')
線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
文字列の最後を使う	s[-1]
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='grey')
今日の日数	datetime.datetime.today().day
行列のユニークな値を要素とする配列	np.unique(aArray)
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
サブセット	aSet.issubset(aSet2)
複数の列によってデータフレームをソートして更新する	df.sort_values(by=column, inplace=True)
データフレームとデータフレームの列を一つにする	pd.concat([df, ds], axis=1)
変数名を項目名として辞書	dict(name=element)
キューを作る	collections.deque()
エラーを出力する	sys.stderr
10を底とする実数の対数	math.log10(x)
ベクトルの列ごとの最小値を計算する	np.min(aArray, axis=0)
Pandasのバージョンを出力する	print(pd.__version__)
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームのリスト列の中に文字列と文字列があるか確認する	df[aList].isin([value, value2])
両端キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
アンダーライン付きで文字列を表示する	print(f'\033[4m{value}\033[0m')
散布図の大バツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
散布図を貝殻色を用いて描画する	plt.scatter(データ列x, データ列y, color='seashell')
データフレームのn行目をインプレイスで消す	df.drop(n, axis=0, inplace=True)
ファイルをEUCを用いて追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
bとn2から成るペア	(n, n2)
実数のn乗	pow(x, n)
データフレームのリストカラムの欠損値を平均値で置換する	df[aList].fillna(df[aList].mean())
散布図の▼印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームのそれぞれのグループの合計	df.groupby(column).sum()
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
ふたつの集合が互いに素か判定する	aSet.isdisjoint(aSet2)
データフレームから重複した行を残さず、消す	df.drop_duplicates(keep=False)
最大値・最小値として整数乱数を発生させる	random.randint(最小値, 最大値)
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
キュー中の要素の数をカウントする	deq.count(element)
ファイルパスをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
全要素が初期値の行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
縦棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
データフレームを線形回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
集合を空にする	aSet.clear()
行列の累積積	np.cumprod(aArray)
ダイアモンドマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの色をピーチパフにセットする	plt.plot(データ列x, データ列y, color='peachpuff')
プロットの中のy軸にラベルをつける	plt.ylabel('y軸ラベル')
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
散布図の▽マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
option: グラフの色をダークマゼンタに指定する	color = 'darkmagenta'
文字列の開始位置から終了位置の範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
日付時刻データは日付時刻データと同時かどうか	aDatetime == aDatetime2
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
折れ線グラフを赤い一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
数列とリストの散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
２つの行列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームのヒストグラムを縦横に並べて描く	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
変数がマイナス無限大に近づくとき、数式の極限値を計算する	sympy.limit(e, z, -oo)
データフレームのカラムが何分か確認する	df[col].dt.minute
二次元タプルをflattenする	sum(aTuple)
CSVファイルTSVファイルをn番目の列を行にして読み込む	pd.read_csv(filename, index_col=n)
データフレームを'A'列の値でグループ化する	df.groupby('A')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
散布図に四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
データフレームとしてファイルを読む	pd.read_excel(filename)
option: ミスティローズ色を使用する	color = 'mistyrose'
線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
リストの最後のn要素を捨てる	aList[:-n]
ダークグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
option: グラフの色をシアンに指定する	color = 'cyan'
データフレームをTSVから読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
部分文字列で文字列の開始位置以降が始まるか調べる	s.startswith(sub, start)
データフレームの全カラムの相関を図示する	sns.pairplot(df)
見やすいグラフを描画する準備をする	import seaborn as sns
ヒストグラムをアリスブルー色を用いて描画する	plt.hist(データ列, color='aliceblue')
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
赤い点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: ライトシアンにグラフの色を指定する	color = 'lightcyan'
点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
オブジェクトがリストの要素でない	element not in aList
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
option: エンコーディングをSJISにセットする	encoding = 'shift_jis'
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
タプルの組み合わせ	itertools.combinations(iterable, n)
タプルを引数として展開して出力する	print(*aTuple, sep=',')
option: 複数行に対応する	flag = re.MULTILINE
タプルを順に表示する	print(*aTuple)
スタック中の値のインデックス	deq.index(element)
列名を列挙する	df.columns
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
二つのデータフレームを横に合体させる	pd.concat([df, df2], axis=1)
データフレームのリスト列の中に文字列とがいくつあるか数える	df[aList].isin([value, value2]).sum()
データフレームの列の値がxの行を抽出する	df[df[column] == x]
サンディーブラウン色を使ってヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
日付時刻データにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
option: ライトイエロー色を使う	color = 'lightyellow'
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
osモジュールをインポートする	import os
実数の小数点以下を四捨五入する	round(x)
ミディアムアクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
折れ線グラフの印を星印にする	plt.plot(データ列x, データ列y, marker='*')
データフレームの分散を計算する	df.var()
option: ライトグレーに色を設定する	color = 'lightgray'
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
リストを青色でプリントする	print(f'\033[34m{value}\033[0m')
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
散布図の印を青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
色付きの一点鎖線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
シーケンスの各要素を関数でフィルタする	map(func, iterable)
棒グラフをオリベドラブ色を使って描画する	plt.bar(データ列x, データ列y, color='olivedrab')
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
日付データの曜日を使う	aDate.weekday()
option: ラベンダーブラッシュ色を使用する	color = 'lavenderblush'
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームを各列と列の組み合わせ毎にグループ分けして最小値を計算する	df.groupby([column, column2], as_index=False).min()
rgbの菱形マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
多次元データを多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
パラメータについて数値の微分を行う	sympy.diff(e, z)
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
折れ線グラフをピンク色を使って描画する	plt.plot(データ列x, データ列y, color='pink')
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
nとn2の差	n - n2
実数を二乗する	x ** 2
実行結果を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
八進文字列をbytesizeバイトのバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
整数を千の位で四捨五入する	round(x, -3)
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームの列の中に日付データと文字列がいくつあるか求める	df[col].isin([value, value2]).sum()
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
データ列の月を使う	ds.dt.month
散布図をブランチドアーモンド色として描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
散布図に三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
文字列を太字で出力する	print(f'\033[1m{value}\033[0m')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ミスティローズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
文字列中に部分文字列が存在しないかどうか調べる	sub not in s
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
逆正接を求める	math.atan(x)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
双方向キューの先頭から要素を取り除く	deq.popleft()
ニューラルネットとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
文字列を特殊文字も含め小文字に変換する	s.casefold()
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
データフレームを小数点以下n桁で丸める	df.round(n)
option: グラフの色をオーキッドに設定する	color = 'orchid'
表データを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
行列のムーア・ペンローズの擬似逆行列を算出する	np.linalg.pinv(aArray)
option: パールゴールデンロッドにグラフの色を指定する	color = 'palegoldenrod'
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
散布図の印を丸印にする	plt.scatter(データ列x, データ列y, marker='o')
二つの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
散布図を赤いクロスマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: ミディアムパープル色を用いる	color = 'mediumpurple'
Pandasで、エポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
散布図をターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データ列の中に日付データと文字列が含まれるか確認する	ds.isin([value, value2])
線グラフをフォレストグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ヒストグラムの色をアリスブルーにセットする	plt.hist(データ列, color='aliceblue')
ライトスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
option: 色をフクシアに設定する	color = 'fuchsia'
カラムの欠損値を最小値で埋める	ds.fillna(ds.min())
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
リストの末尾のn要素を取り除く	aList[:-n]
マッピングからキーの値をエラーなく得る	aDict.get(key, None)
データ列の未入力値を平均値で補う	ds.fillna(ds.mean())
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
エクセルファイルファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
xの小数点以下'3'桁までを表示する	print(':.3f'.format(x))
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データフレームを'A'列で整列して、更新する	df.sort_values(by='A', inplace=True)
最小値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].min())
データフレームのn行目以降抽出する	df[n:]
事前に正規表現をコンパイルする	re.compile(pattern)
xが一桁の整数か	-9 <= x <= 9
文字列が全てアスキー文字か調べる	s.isascii()
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフを色付きの破線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
MSEを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: フォントの色をローングリーンに設定する	color = 'lawngreen'
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
nの十六進数表現	hex(n)
option: マーカーをダイアモンドに設定する	marker = 'D'
ゼロ埋めした整数型の配列を作成する	np.zeros(要素数, dtype=np.int)
イエローグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
散布図をレモンシフォン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
グラフ中のフォントを設定する	sns.set(font=フォント名)
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
縦棒グラフを黄色色を用いて描画する	plt.bar(データ列x, データ列y, color='yellow')
散布図の三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
アンサンブル学習としてクラス分類を行う	sklearn.ensemble.VotingClassifier()
文字列がタプルの要素	element in aTuple
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
データ列の数値時刻からタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列の欠損値を直前の値で補う	ds.fillna(method='ffill')
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
バイナリ書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='wb')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
データフレームの列の名前の一覧を使う	df.columns
新しい勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ポスターにグラフの用途を変更する	sns.set(context='poster')
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
両端キューの最初にイテラブルの各要素を追加する	deq.extendleft(iterable)
option: グラフの色をスノーに設定する	color = 'snow'
option: グリーンにグラフの色を設定する	color = 'green'
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
明るくカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
折れ線グラフを青色を用いて描画する	plt.plot(データ列x, データ列y, color='blue')
グラフの凡例の場所を指定する	plt.legend(loc=(x, y))
タブ文字	'\t'
列を小数点以下n桁で丸める	ds.round(n)
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
データフレームのカラムの値をまとめてValueMapで置き換える	df[col].replace(ValueMap)
タプルの末尾のn要素を除く	aTuple[:-n]
ペルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
option: ダークサーモンに色を指定する	color = 'darksalmon'
カラムの50パーセンタイルを求める	ds.median()
ハニーデュー色としてヒストグラムを描画する	plt.hist(データ列, color='honeydew')
データフレームを二つの列によって昇順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
散布図をオールドレース色として描画する	plt.scatter(データ列x, データ列y, color='oldlace')
偽陽性を抑えたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図をスプリンググリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='springgreen')
列の各データ値の出現回数	ds.value_counts()
グラフの描画で濃くカラーパレットを使用する	sns.set(pallete='deep')
データフレームをから読む	pd.read_excel(filename)
スピアマン順位相関係数を用いてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='spearman')
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
黄色で文字列を出力する	print(f'\033[33m{value}\033[0m')
option: 貝殻色を用いる	color = 'seashell'
option: タブをセパレータで使う	sep = '\t'
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
データフレームのリスト列をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
変数の値を入れ替える	x, y = y, x
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームを列によって集約して、それぞれのグループの標準偏差を求める	df.groupby(column).std()
天井	math.ceil(x)
ヒストグラムの上限下限を設定する	plt.hist(データ列, range=(start, end))
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
実数を実数で割った余り	x % y
黒い丸マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
データフレームのカラムが正規分布からどれだけ、歪んでいるか調べる	df[col].kurt()
Pandasで、書式fmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
データフレームのグループ毎の合計	df.groupby(column).sum()
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
組が全て真か調べる	all(aTuple)
ビン数を設定して度数分布図を描画する	plt.hist(データ列, bins=区関数)
文字列を空白で分割して、文字列リストに変換する	s.split()
リネン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
データ列を閾値を用いてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
▼マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
リストをビン数nとして分割する	pd.cut(aList, n)
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
ゴールド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
折れ線グラフのラベルをする	plt.plot(データ列x, データ列y, label='ラベル')
option: スラグレーを使う	color = 'slategrey'
作画の背景色を暗くする	sns.set(style='darkgrid')
ファイルから読み込みストリームを開き]、fとする	f = open(filepath, mode='r')
線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
option: カデットブルーにグラフの色を指定する	color = 'cadetblue'
グラフに鉛直方向の破線をつける	plt.axvline(x=0, linestyle='dashed')
ガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
実数を切り下げて整数に変換する	math.floor(x)
データフレームのリストカラムの欠損値を中央値に指定する	df[aList].fillna(df[aList].median())
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
破線に折れ線グラフのラインスタイルをする	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 印を四角に変更する	marker = 's'
ミディアムバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
書き込み用にファイルを文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
SVDの準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
データフレームの中の列をn個にビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
アルファベットを求める	string.ascii_letters
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
大バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
部分文字列で文字列が終わる	s.endswith(sub)
イテラブルとリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
赤い大バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
文字列中の大文字を小文字に変換する	s.lower()
縦棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
黒い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストとリストの散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図のクロスマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
日付データは日付データより先か調べる	aDate < aDate2
オリーブ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
アンティークホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ライトグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
タイムスタンプデータからn日を減算する	aDatetime - datetime.timedelta(days=n)
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
rgbの丸マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列の左側から部分文字列を除去する	s.lstrip(sub)
カラムが正規分布からどの程度、尖っているか確認する	ds.skew()
rgbの▼マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
SJISでデータフレームをJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
データ列の欠損値をメディアンで埋める	ds.fillna(ds.median())
文字のASCIIコード	ord(ch)
赤いポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
正規表現に文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
三つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
データ列の標本標準偏差を求める	ds.std()
散布図の大バツ印を黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
リストをn個に等間隔でビン分割する	pd.cut(aList, n)
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
行列の列ごとの合計値	np.sum(aArray, axis=0)
実数の正弦	math.sin(x)
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
代数計算を使う	import sympy
折れ線グラフに左三角印を加える	plt.plot(データ列x, データ列y, marker='<')
リストの中の最大値	max(aList)
プロットにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
データ列の文字列長を列として見る	ds.str.len()
ダークレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
option: ダークシアン色を用いる	color = 'darkcyan'
SJISで文字列をバイト列にする	s.encode(encoding='sjis', errors='ignore')
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
ロードされたモジュールの一覧	sys.modules
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
option: モカシン色を使用する	color = 'moccasin'
回帰分析をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: グラフの色をライトイエローに変更する	color = 'lightyellow'
縦軸の目盛りを整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
外れ値に強い線形分類器を用意する	model = sklearn.linear_model.HuberClassifier()
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
行列の列ごとの合計値を調べる	np.sum(aArray, axis=0)
線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
横棒グラフをハニーデュー色を用いて描画する	plt.barh(データ列x, データ列y, color='honeydew')
データ列の要約統計量を求める	ds.describe()
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
本日は何曜日か知る	datetime.datetime.today().weekday()
stringをインポートする	import string
リストとリストの散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
リストと数列についての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
nかつn2	n and n2
文字列内にアスキー文字があるか確認する	any(c.isascii() for c in s)
データフレームの列の各データが何回出現するか調べる	df[col].value_counts()
文字列の出力を改行しなくて行う	print(value, end='')
小数点数のハイパボリック・サインの逆数を求める	math.asinh(x)
実数のk進対数	math.log(x, k)
二つのカウンタの共通する値を算出する	aCounter & aCounter2
シーケンスとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
整数nの八進文字列を使う	oct(n)[2:]
データフレームのリストカラムのNaNを前の行の値に設定する	df[aList].fillna(method='ffill')
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列をフォーマットで日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
符号なし８ビット整数型のゼロ埋めされた行列を作る	np.zeros(要素数, dtype=np.uint8)
文字列の接尾辞は部分文字列か	s.endswith(sub)
折れ線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
別の文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
option: ブラックにグラフの色を指定する	color = 'black'
折れ線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームの列がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int)
青い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
データフレームのインデックスリストを見る	df.index
ふたつの集合のインターセクション	aSet.intersection(aSet2)
折れ線グラフをミディアムスプリンググリーン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
横棒グラフをライトスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
Pandasで、書式fmtとして文字列をdatetime64型に変換する	pd.to_datetime(s, format=fmt)
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
昇順にインデックスでデータフレームを整列する	df.sort_index(ascending=True)
文字列中にひとつでも非大文字が含まれるかテストする	any(not c.isupper() for c in s)
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
y軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
JSONLファイルにデータフレームを小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
第2コマンド引数を知る	sys.argv[1]
文字列中にひとつでも非英数字がある	any(not c.isalnum() for c in s)
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
カラムの下位25%	ds.quantile(0.75)
データフレームを２つの列を用いて並べ直して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ゼロ埋めされた８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
データフレームとしてJSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
option: グラフの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
リストの要素を関数に適用した結果で並べ変える	sorted(aList, key=func)
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
黒い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
パレットトルコイズ色を使ってヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
ふたつの集合は共通の要素を持たないか	aSet.isdisjoint(aSet2)
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
ラインを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフをビスク色を用いて描画する	plt.plot(データ列x, データ列y, color='bisque')
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
データフレームから重複した行を削除して、更新する	df.drop_duplicates(inplace=True)
青い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
セットの変更不能版	frozenset(aSet)
行列は何次元か調べる	aArray.ndim
イテラブルを変更不能な集合に変換する	frozenset(iterable)
組のn番目のの値	aTuple[n]
デックの末尾に数値を追加する	deq.append(element)
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
データ列の推移を破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: ゴーストホワイトにフォントの色を設定する	color = 'ghostwhite'
折れ線グラフのバツマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
predicateFuncが真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
データを最大値として正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
データフレームのカラムをグループ化して、ヒストグラムでプロット化する	sns.histplot(df, x='列名', hue='カテゴリ名')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
アスキー文字が文字列内に含まれるか	any(c.isascii() for c in s)
ターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
option: データ型として複素数型を使う	dtype = bool
配列とリストについて散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
文字列の最後	s[-1]
オブジェクトのポインタ	id(obj)
全ての印字	string.printable
option: ディムグレー色を使用する	color = 'dimgrey'
オブジェクトを文字列に変換する	str(obj)
option: サドルブラウンにフォントの色を設定する	color = 'saddlebrown'
ホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
散布図に上三角印を加える	plt.scatter(データ列x, データ列y, marker='^')
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
xを浮動小数点数に変換する	float(x)
option: オリベドラブを使う	color = 'olivedrab'
黒いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
要素は集合のメンバーに含まれるか調べる	element in aSet
プログラムの実行を正しく終了する	sys.exit(0)
ファイルパスからベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
option: 三角マーカーを加える	marker = '^'
スチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
上限から下限までの範囲でヒストグラムをプロットする	plt.hist(データ列, range=(start, end))
option: 右三角マーカーを描画する	marker = '>'
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
xの小数点以下'4'桁までを表示する	print(':.4f'.format(x))
option: グラフの色をロイヤルブルーにする	color = 'royalblue'
データ列の四分位を作図する	plt.boxplot(データ列)
データフレームのリスト列を1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
折れ線グラフの下三角印の太さを設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
カテゴリで色分けして、データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
行列の内積	np.dot(aArray, aArray2)
散布図を丸印を用いる描画する	plt.scatter(データ列x, データ列y, marker='o')
option: ラベンダーブラッシュにグラフの色を設定する	color = 'lavenderblush'
昇順に組の値をソートする	sorted(aTuple, reverse=True)
イテラブルのイミュータブルなセット	frozenset(iterable)
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
option: 文字コードtextを使用する	encoding = text
スタックから最初の数値を削除する	deq.remove(element)
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームの欠損値をxに設定する	df.fillna(x)
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
ロバスト推定として回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
リストの最後からn番目以前の部分を取り出す	aList[:-n]
タプルの先頭の要素を使う	aTuple[0]
凡例の位置を指定する	plt.legend(loc=(x, y))
折れ線グラフをライトグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
ライトシアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
グリーンイエローにヒストグラムの色をする	plt.hist(データ列, color='greenyellow')
赤い一点鎖線として数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
n2がnより大きく、かつ、n3より小さいかどうか確認する	n < n2 and n2 < n3
マッピングのキーの値	aDict[key]
option: アクア色を使う	color = 'aqua'
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
プロットを画面用に指定する	sns.set(context='notebook')
option: 青緑を使う	color = 'teal'
二つの文字列を改行で区切って出力する	print(value, value2, sep='\n')
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ひとつ置きにタプルを取り出す	aTuple[::2]
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
組を反転する	reversed(aTuple)
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
散布図に▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
タプルを引数として展開して出力する	print(*aTuple)
Pandasで文字列をフォーマットfmtでタイムスタンプ型に変換する	pd.to_datetime(s, format=fmt)
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
日付時刻データは何分か知る	aDatetime.minute
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか確認する	df[aList].kurt()
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
双方向キューの最大長を見る	deq.maxlen
最後の部分文字列によって文字列を二分する	s.rpartition(sub)
相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
データフレームを列名リストを用いて昇順に並べる	df.sort_values(by=column, ascending=True)
option: グラフの色をバリーウッドに指定する	color = 'burlywood'
折れ線グラフをライトシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ニューラルネットでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
option: アクアを使う	color = 'aqua'
リストとリストの散布図を描画し、、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: ダークオレンジにグラフの色を設定する	color = 'darkorange'
青い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
カテゴリ別で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
option: フローラルホワイト色を使う	color = 'floralwhite'
表データを'A'列によってによって大きい順に並べる	df.sort_values(by='A', ascending=False)
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
横棒プロットを描画して、バーの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
実数のコサインの逆数	math.acos(x)
UTF8で追加できるようにファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
半透明の破線を用いて線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
nが2で割り切れるかどうかテストする	n % 2 == 0
リストとデータ列の散布図に黒い▲マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
option: 左三角印を用いる	marker = '<'
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
option: 左三角マーカーを用いる	marker = '<'
Pandasで、文字列のUNIX秒からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
文字列はタイトルケースか調べる	s.istitle()
集合から全ての要素を消す	aSet.clear()
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
折れ線グラフの菱形マーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
現在をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データ列を2つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
ダーク・スラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ミディアムブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
ライトイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
多次元データを特異値分解を用いてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームのカラムを100の位で丸める	df[col].round(-2)
データフレームの中にいくつNaNがあるか数える	df.isna().sum()
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
タプルをひとつ置きに抽出する	aTuple[::2]
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
青い線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
プロットのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
リストとリストについての散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列をファイルに書き込む	f.write(s)
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
0から始まる無限リスト	itertools.count()
データフレームのカーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
要素を両端キューにエンキューする	deq.appendleft(element)
プロットのフォントを日本語に設定する	sns.set(font='IPAexGothic')
ダークシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
正弦の逆数を計算する	math.asin(x)
配列と配列の散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列の中に文字列と文字列がある	ds.isin([value, value2])
ミディアムターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
英字の大文字を使う	string.ascii_uppercase
ファイルを開いて]、追加ストリームを見る	open(filepath, mode='a')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
モカシン色を使ってヒストグラムを描画する	plt.hist(データ列, color='moccasin')
モデルの正確さを算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
グラフの縦軸を対数に変更する	plt.yscale('log')
横軸の目盛りを対数に変更する	plt.xscale('log')
両端キューの長さを求める	len(deq)
未定値	None
グラフからグリッド線を消す	plt.grid(False)
青い破線を用いてリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
英文字から一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
ファイルからフォルダ名取り出す	os.path.dirname(filepath)
カラムをキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
線形モデルの係数を使う	model.coef_
option: シート名をnamesに設定する	sheet_name = names
マッピングの項目名とその値を列挙する	aDict.items()
折れ線グラフの下三角印を赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ヒストグラムを白色を用いて描画する	plt.hist(データ列, color='white')
文字列を部分文字列で分割する	s.partition(sub)
データフレームのリストカラムのNaNを直前の値に設定する	df[aList].fillna(method='ffill')
イテラブルの要素をセットに追加する	aSet.update(iterable)
分類木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
データフレームがどの程度、分散しているか確認する	df.var()
正規化したヒストグラムを描く	plt.hist(データ列, density=True)
部分文字列が部分文字列で開始する	s.startswith(sub)
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
ホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
データフレームの母標準偏差	df.std(ddof=0)
散布図をシャルトリューズ色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
文字列中に部分文字列がいくつかあるかカウントする	s.count(sub)
8進数文字列を整数にする	int(s, 8)
option: 色をグレーに設定する	color = 'grey'
プロットをスライド用に設定する	sns.set(context='talk')
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
タプルの末尾	aTuple[-1]
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
データフレームのカラムが何分か見る	df[col].dt.minute
色付きの一点鎖線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
上三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ふたつの関係が下位集合	aSet.issubset(aSet2)
縦棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
シアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
リストの末尾	aList[-1]
棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
プラム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
複数のシートをエクセルデータファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
キューが空か確認する	len(deq) == 0
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
文字列の中のケースを無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの最初n行	df.head(n)
散布図に青い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
CSVTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームから指定された２つの列を選択する	df[[column, column2]]
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
折れ線グラフの色をオレンジレッドにする	plt.plot(データ列x, データ列y, color='orangered')
項目名が辞書に存在するか	key in aDict
データフレームのカラムを1000の位で四捨五入する	df[col].round(-3)
option: 色をパパイヤウィップにセットする	color = 'papayawhip'
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データ列の折れ線グラフを菱形印で描画する	plt.plot(データ列x, データ列y, marker='D')
n個の整数列を作る	list(range(n))
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムをミディアムパープル色を使って描画する	plt.hist(データ列, color='mediumpurple')
新しいサポートベクター回帰モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのカラムの曜日が何日目か確認する	df[col].dt.dayofweek
本日の年を使う	datetime.datetime.today().year
データフレームを各列とカラムの組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
折れ線グラフを黄緑色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
項目名がマッピング上で定義済み	key in aDict
y座標の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
ひとつでも非空白が文字列中に含まれる	any(not c.isspace() for c in s)
スーパーセット	aSet.issuperset(aSet2)
Pythonのバージョン	sys.version
カウンタを生成する	collections.Counter()
二つの変数を順にプリントする	print(value, value2)
棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
要素ひとつのりスト	[element]
リストをビン数nとしてビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ファイルをバイナリモードで開く]	open(filepath, mode='rb')
多項式回帰データフレームの散布図にを加える	sns.regplot(data=df, x='列名', y='列名', order=2)
ヒストグラムの色をパールバイオレットレッドにセットする	plt.hist(データ列, color='palevioletred')
nの無限数列を得る	itertools.repeat(n)
日付データが火曜日か確認する	aDate.weekday() == 1
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
配列とデータ列の散布図を描いてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
行列の行ごとの合計値を求める	np.sum(aArray, axis=1)
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームの列名一覧で指定された列を消す	df.drop(columns, axis=1)
パレットトルコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームの列の欠損値を第二四分位数に設定する	df[col].fillna(df[col].median())
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
文字列を小文字にする	s.lower()
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
全てのシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=None)
option: タン色を使用する	color = 'tan'
横棒グラフをサドルブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
散布図の四角印を青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
eの実数乗を求める	math.exp(x)
ヒストグラムの色をナバホホワイトにセットする	plt.hist(データ列, color='navajowhite')
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
データフレームのカラムは何月か見る	df[col].dt.month
キーがタプル上で定義済みか調べる	key in aDict
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
ベージュ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
日付時刻データが日曜日か確認する	aDatetime.weekday() == 6
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
option: 先頭のカラムを行に設定する	index_col = 0
集合が空集合かどうか調べる	len(aSet) == 0
リストとリストについて散布図を描き、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
リストのn番目の値を消す	del aList[n]
折れ線グラフを半透明の破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
グラフをプレゼンに設定する	sns.set(context='talk')
option: グラフの色をダークスラテグレーに変更する	color = 'darkslategray'
縦棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
配列とイテラブルの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
集合から値を取り除く	aSet.remove(element)
横棒グラフをクリムゾン色を用いて描画する	plt.barh(データ列x, データ列y, color='crimson')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
整数nを八進文字列に変換する	oct(n)[2:]
折れ線グラフの菱形マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームを二つの列でによって降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
文字列の中の複数行対応としてパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
データフレームのカラムの中に文字列が存在するか調べる	df[col].isin([value])
UTF8としてファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
配列の次元を変形する	aArray.reshape(行数, 列数)
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームの母標準偏差を求める	df.std(ddof=0)
データフレームのカラムの欠損値を最小値で置き換える	df[col].fillna(df[col].min())
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
データ列の推移を実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムを貝殻色を用いて描画する	plt.hist(データ列, color='seashell')
折れ線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
書式をargsを引数として文字列整形する	formatText.format(*args)
option: バリーウッド色を使う	color = 'burlywood'
追加モードでファイルをオープンする]	open(filepath, mode='a')
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
各カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
option: エンコーディングを文字コードtextに設定する	encoding = text
option: グラフの色をライトブルーにする	color = 'lightblue'
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
リストと数列について散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
コロンで文字列を分割して列挙する	s.split(':')
データフレームの正規分布に対する左右対称性	df.kurt()
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
オブジェクトは集合クラスかどうか調べる	isinstance(obj, set)
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
文字列の無限のイテラブルを得る	itertools.repeat(element)
正規化された柱状グラフを描画する	plt.hist(データ列, density=True)
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームを二つの列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
散布図をクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
文字列を黒色で表示する	print(f'\033[30m{value}\033[0m')
セットに列を追加する	aSet.update(iterable)
リストの末尾から値を抽出する	aList.pop()
列でデータフレームを集約し、各グループごとの最小値を算出する	df.groupby(column).min()
カンマで区切って2つの変数をプリントする	print(value, value2, sep=',')
文字列の右側から空白を除く	s.rstrip()
真部分集合	aSet < aSet2
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
実行結果をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
赤い点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ヒストグラムをシルバー色として描画する	plt.hist(データ列, color='silver')
プロットをいい感じに設定する	sns.set()
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
散布図を黒い大バツマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: グラフの色をアンティークホワイトにする	color = 'antiquewhite'
n個に等量で配列を分割する	pd.qcut(aArray, n)
縦棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
組の先頭を求める	aTuple[0]
シードを初期化する	random.seed()
データフレームから重複したデータを削除する	df.drop_duplicates()
配列の列ごとの最小値	np.min(aArray, axis=0)
オブジェクトをイテラブルに変換する	iter(obj)
こんにちは世界をプリントする	print('Hello World')
折れ線グラフの上三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
浮動小数点数が負か	x < 0
ゼロ埋めした８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
行列の全要素の値を変更する	aArray[:, :] = 指定の値
データ列を等量で分割数nでビニングする	pd.qcut(ds, n)
数式を簡単にする	sympy.sympify(e)
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
リストとリストについて散布図を描画し、マーカーを▼に変更する	plt.plot(データ列x, データ列y, marker='v')
データフレームのリストカラムのNaNを直前の値で埋める	df[aList].fillna(method='ffill')
リストの文字列の位置をエラーなく求める	aList.index(element) if element in aList else -1
散布図に大バツ印を使う	plt.scatter(データ列x, データ列y, marker='X')
データフレームを複数の列によってで大きい順に並べ直す	df.sort_values(by=column, ascending=False)
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
リストを白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
データフレームのカラムの秒	df[col].dt.second
実数の絶対値	math.fabs(x)
nの十六進表現を見る	hex(n)
クラス分類の予測精度をヒートマップを用いて確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
列'A'と列'B'をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
イテラブルを計数器に変換する	collections.Counter(iterable)
リストをカンマ区切りで出力する	print(*aList, sep=',')
正規分布の累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ヒストグラムの線種を破線に設定する	plt.hist(データ列, linestyle='dashed')
データフレームから最後の列を除く	df[df.columns[:-1]]
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
変数が0に近づくときの数値の極限値を計算する	sympy.limit(e, z, 0)
セットの全ての要素が別の集合に含まれるかどうか	aSet.issubset(aSet2)
データフレームのn行より前を取り出す	df[:n]
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
多次元尺度構成法を使って多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
列をキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
グラフを全般的に明るくする	sns.set(pallete='bright')
option: グラフの色をダークオーキッドにする	color = 'darkorchid'
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
nにn2を加える	n + n2
リストの先頭の値	aList[0]
オリーブ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
現在のタイムスタンプ	int(time.time())
縦棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
ベクトルの形状を計算する	aArray.shape
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームのインデックスの名前リスト	df.index
折れ線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
データフレームの中にいくつ欠損値があるか求める	df.isna().sum()
ヒストグラムと勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t')
切片なしの単回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: 暗い赤色を使う	color = 'darkred'
文字列中にひとつでも非大文字があるか調べる	any(not c.isupper() for c in s)
散布図をスラグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='slategray')
アークタンジェント	math.atan(x)
データフレームのリスト列の空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
折れ線グラフの色をフォレストグリーンに変更する	plt.plot(データ列x, データ列y, color='forestgreen')
データ列の折れ線プロットを描き、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
Pythonパスの一覧を調べる	sys.path
データ列と配列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
2数の最大値	max(x, y)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
リストを配列にする	np.array(aList)
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
option: 丸マーカーを描画する	marker = 'o'
option: 決定木の深さを制限する	maxdepth = n
大量のデータ列が正規分布か仮説検定する	scipy.stats.kstest(データ列, 'norm')
データ列の文字列をNaNにする	ds.replace(s, np.nan)
OSのエンコーディング	sys.getdefaultencoding()
ファイルのフォルダ名を使う	os.path.dirname(filepath)
入力から二つの自然数を読む	A, B = map(int, input().split())
リストが空でないか調べる	len(aList) != 0
option: グラフの色をダークグレーに設定する	color = 'darkgray'
n割るn2の切り上げ	(n + n2 - 1) // n2
option: バッファリングのサイズをセットする	buffering = 4096
横棒グラフをコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='coral')
option: オールドレース色を使う	color = 'oldlace'
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
option: マーカーをクロスに変更する	marker = 'x'
散布図の右三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データ列のNaNを後の値で埋める	ds.fillna(method='bfill')
データフレームのリスト列の未入力値を直後の値で置換する	df[aList].fillna(method='bfill')
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
数列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
折れ線グラフをパールゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データ列の中に文字列と文字列がいくつあるか求める	ds.isin([value, value2]).sum()
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
異なる列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
散布図のポイント印の色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データ列の中にいくつNaNが存在するかカウントする	ds.isna().sum()
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
カテゴリで色分けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
リストの末尾を取り除く	aList[:-1]
組を逆順にする	reversed(aTuple)
データフレームのn行目以降を取り出す	df[n:]
グラフをプレゼン用にセットする	sns.set(context='talk')
線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームのリスト列の欠損値をxに変更する	df[aList].fillna(x)
要素は辞書の値として含まれているか調べる	element in aDict.values()
作画のグリッドを暗くする	sns.set(style='darkgrid')
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
イテラブルを横棒グラフにする	plt.barh(ラベル列, データ列)
option: ダークスラテグレーにグラフの色を設定する	color = 'darkslategray'
文字列を部分文字列を用いて区切る	s.split(sub)
スプリンググリーンにヒストグラムの色を変更する	plt.hist(データ列, color='springgreen')
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
データフレームのカラムの未入力値を直前の値に指定する	df[col].fillna(method='ffill')
文字列を両端キューの先頭に追加する	deq.appendleft(element)
エクセルファイルファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
列にイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
option: グラフの色をフローラルホワイトに変更する	color = 'floralwhite'
文字列内にASCII文字が含まれる	any(c.isascii() for c in s)
リストを青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
データフレームのカラムのタイムゾーンを日本にセットする	df[col].tz_convert('Asia/Tokyo')
二点間のユークリッド距離	math.dist(point, point2)
option: グラフの色をスカイブルーに指定する	color = 'skyblue'
ダークレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームを複数の列を用いて昇順に整列して更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
option: クロスマーカーを使う	marker = 'x'
文字列の終了位置より前に部分文字列がある	s.find(sub, 0, end) != -1
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
option: 色をディムグレーに設定する	color = 'dimgrey'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
列の一意な要素数	df[col].nunique()
option: グラフの色をゲインズボロに変更する	color = 'gainsboro'
ピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
ミディアムターコイズ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
シアン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
棒グラフをゲインズボロ色を使って描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
リストを境界値としてデータフレームの中のカラムをビンニングする	pd.cut(df[col], aList)
今日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
散布図の三角印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
アルファベットを全部使う	string.ascii_letters
option: 色をスカイブルーに設定する	color = 'skyblue'
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
文字列の末尾は部分文字列	s.endswith(sub)
nがn2以下か調べる	n <= n2
デックの要素をインプレースに逆に並べ直す	deq.reverse()
ミディアムパープル色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
1行から２つの自然数値を読む	A, B = map(int, input().split())
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
現在が土曜日	datetime.datetime.today().weekday() == 5
要素がタプルの値として含まれている	element in aDict.values()
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
二点間のユークリッド距離を計算する	math.dist(point, point2)
数に整数をかける	x * y
データフレームのリストカラムの中にいくつNaNがあるか数える	df[aList].isna().sum()
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
文字列の文字数を求める	len(s)
空の辞書	{}
データフレームの列をグループ化して、ヒストグラムとしてプロットする	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
rgbのバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストと配列についての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
ファイルが存在する	os.path.exists(filepath)
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
カウンタを高頻出な方からリストとして得る	aCounter.most_common()
ピアソンとしてデータフレームの相関行列を求める	df.corr(method='pearson')
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
レモンシフォン色としてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
データフレームのカラムの各データ値の出現数	df[col].value_counts()
データフレームの未入力値を後の行の値で埋める	df.fillna(method='bfill')
ダークサーモン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
辞書のキーとその値をペアとして取り出す	aDict.items()
スピアマン相関係数を使ってデータフレームのリスト列の相関行列を算出する	df[aList].corr(method='spearman')
JSONLファイルにデータフレームを行を付けずに書き込む	df.to_csv(filename, index=None)
データフレームからランダムにn行を抽出する	df.sample(n)
行列の行	aArray[行番号]
データ列が何時か見る	ds.dt.hour
変数が0に近づく際の数式の極限値を求める	sympy.limit(e, z, 0)
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
nが3の倍数か	n % 3 == 0
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
xの印字可能な文字列	ascii(x)
列をキーにして2つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
本日の月数	datetime.datetime.today().month
赤い四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
option: プラムを使う	color = 'plum'
データフレームの中のカラムをリストを境界値として分割する	pd.cut(df[col], aList)
データフレームのリストカラムの中にある日付データの合計を数える	df[aList].isin([value]).sum()
日付時刻データが月曜日	aDatetime.weekday() == 0
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
要素がタプルの値に含まれていないかどうか調べる	element not in aDict.values()
データフレームの欠損値を第二四分位数に設定する	df.fillna(df.median())
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
JSONLファイルにデータフレームをエクセルファイルファイルで保存する	df.to_excel(filename)
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
整数nの16進文字列	hex(n)[2:]
データフレームの列の欠損値を後の値に指定する	df[col].fillna(method='bfill')
option: ミスティローズにグラフの色をする	color = 'mistyrose'
データフレームを各列毎にグループ化して、カラムの標準偏差を計算する	df.groupby(column)[column2].std()
リストとリストについての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
文字列を右から部分文字列で区切る	s.rsplit(sub)
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
回帰分析を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingRegressor()
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
線グラフの色をレベッカパープルにする	plt.plot(データ列x, データ列y, color='rebeccapurple')
四分位数ごとに列をビン分割する	pd.qcut(ds, 4)
option: 文字列を区切り記号で使う	sep = s
円グラフを正円にする	plt.axis('equals')
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
最大値でデータフレームのNaNを埋める	df.fillna(df.max())
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: ロイヤルブルー色を使う	color = 'royalblue'
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームから重複した行を消す	df.drop_duplicates()
n個にデータフレームの中の列をビン分割する	pd.cut(df[col], n)
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
文字列を走査し正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
データフレームのリストカラムを小数点以下n桁で四捨五入する	df[aList].round(n)
データフレームの中で列と列に重複があるか見る	df.duplicated(subset=[column, column2])
option: シルバー色を使用する	color = 'silver'
正則化付き単回帰分析を行う	model = sklearn.linear_model.ElasticNet()
文字列を右寄せにする	s.rjust(文字列幅)
回帰モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
ボックスチャートを用いて配列を描画する	plt.boxplot(データ列)
折れ線グラフを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: ブルーバイオレット色を用いる	color = 'blueviolet'
回帰分析を部分的最小二乗法を用いて行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
整数nを十六進数文字列に変換する	hex(n)[2:]
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
文字列を最後の部分文字列で分けた場合の後半の文字列	s.rpartition(sub)[-1]
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
リストの全値をクリアにする	aList.clear()
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
データフレームのリスト列の未入力値を最小値で埋める	df[aList].fillna(df[aList].min())
整数を小数点で丸める	round(x, n)
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
赤い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
option: グラフの色を淡いピンク色に変更する	color = 'lightpink'
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
配列と配列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
縦棒グラフを描き、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームから型リストデータ型のカラムのみ抽出する	df.select_dtypes(include=typeList)
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データ列を２つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームを列で整列して上位n件を取り出す	df.sort_values(columns).head(n)
異なる列をキーにして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図を黒い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ピーチパフ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
文字列内に小文字がある	any(c.islower() for c in s)
配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
RANSACを用いてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
サドルブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: 改行コードを動作環境依存に設定する	newline = None
option: ライトスレイグレーにフォントの色を変更する	color = 'lightslategrey'
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データ列が何分か見る	ds.dt.minute
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
青紫色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
rgbのダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの指定された列	df[column]
option: グラフの色をグリーンにセットする	color = 'green'
２つのデータフレームを列をキーにして左ジョインする	pd.merge(df, df2, on=column, how='left')
predicateFuncが真とならないリストの要素を得る	itertools.dropwhile(predicateFunc, iterable)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
列'A'と列'B'をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
数を小数点第一位で丸める	round(x, 1)
折れ線グラフの色をオレンジに指定する	plt.plot(データ列x, データ列y, color='orange')
分子n、分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
option: グラフの色をフォレストグリーンに指定する	color = 'forestgreen'
数式のパラメータの解を方程式として求める	sympy.solve(e, z)
データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
nのn2乗	n ** n2
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
ベクトルを一次元化する	aArray.flatten()
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
エクセルファイル形式でデータフレームをJSONLファイルに保存する	df.to_excel(filename)
ディムグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
グラフのパレットを濃くする	sns.set(pallete='deep')
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームの列の各データ値の出現数	df[col].value_counts()
nの十六進数文字列	hex(n)[2:]
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームを'A'列によってグループ化し、要約統計量を求める	df.groupby('A').describe()
既存の配列をベースに全要素が1の配列	np.ones_like(aArray)
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
マップのキーを列挙する	aDict.keys()
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
縦棒グラフを描画してラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
リストとリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームから最後の列を消す	df[df.columns[:-1]]
線グラフの色を茶色にセットする	plt.plot(データ列x, データ列y, color='brown')
縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームを列名リストでまとめたグループ	df.groupby(columns)
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
辞書順で２つの文字列を比較する	s < s2
度数分布図を描画し、、ビン数を設定する	plt.hist(データ列, bins=区関数)
辞書を消去する	aDict.clear()
データフレームのリスト列を四捨五入する	df[aList].round()
折れ線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
データフレームから一番左のカラムを除く	df[df.columns[1:]]
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
スピアマンを用いてデータフレームの相関行列	df.corr(method='spearman')
部分文字列が文字列中に存在しないかどうか	sub not in s
四角マーカーを使用してデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
プロットに使用するx座標の名称を設定する	plt.xlabel('x軸ラベル')
文字列の終了位置以前に部分文字列が含まれないか	s.find(sub, 0, end) == -1
3自然数の最小公倍数	math.lcm(n, n2, n3)
データフレームを'A'列と'B'列の値によって集約する	df.groupby(['A', 'B'])
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
nがリストのひとつか調べる	n in aList
データフレームからカラムを４つ選択する	df[[column, column2, column3, column4]]
逆順の両端キュー	reversed(deq)
集合をイミュータブルな集合に変換する	frozenset(aSet)
option: リネンを使う	color = 'linen'
数に整数を加える	x + y
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
縦方向に二つのデータフレームをくっつける	pd.concat([df, df2], axis=0)
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
データフレームのリストカラムの標準偏差を算出する	df[aList].std()
カウンタをクリアする	aCounter.clear()
2つのデータフレームを横方向に一つにする	pd.merge(df, df2)
バギングでクラス分類をする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
二つの集合がセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
データフレームを関数の値によってグループ化し記述統計量を求める	df.groupby(関数).describe()
文字列内にひとつでも大文字が含まれるかどうか確認する	any(c.isupper() for c in s)
特異値分解で多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
日付時刻データが何秒か知る	aDatetime.second
スレートブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
縦棒グラフをサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='salmon')
線グラフをマルーン色を用いて描画する	plt.plot(データ列x, データ列y, color='maroon')
データフレームの値を正規表現patternでまとめてreplに変更する	df.replace(pattern, repl, regex=True)
データ列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
文字列リストを一つの文字列にする	''.join(map(str, iterable))
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
データフレームを'A'列によってソートして、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
行列の次元数を求める	aArray.ndim
分割数nで配列をビン分割する	pd.cut(aArray, n)
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列をエンコーディングによってバイト列に変換する	s.encode(encoding=encoding)
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
自然数個からk個取り出した場合の並べ方の総数	math.perm(n, k)
行列のユニークな要素	np.unique(aArray)
プロットのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
組のn番目以降の要素を取り出す	aTuple[n:]
データフレームを各列毎に集約し、、文字列というグループの個数を算出する	df.groupby(column).size()[s]
文字列が全てASCII文字かどうか調べる	s.isascii()
ヒストグラムの色をスノーに指定する	plt.hist(データ列, color='snow')
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
ヒストグラムをライトイエロー色を使って描画する	plt.hist(データ列, color='lightyellow')
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
実数の正接の逆数	math.atan(x)
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
オブジェクトは整数型か調べる	isinstance(obj, int)
データフレームの名前リストで指定したカラムを消す	df.drop(columns, axis=1)
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
ファイルを開く]	open(filepath)
散布図にrgbの△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストのすべての値を消す	aList.clear()
乱数の行列を作る	np.random.random((行数, 列数))
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
折れ線グラフをティール色を用いて描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフの色をダークオーキッドに指定する	plt.plot(データ列x, データ列y, color='darkorchid')
リストと配列の散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
Pandasで、書式fmtでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format=fmt)
リストの中の最も大きい値	max(aList)
最適な場所にデータラベルを表示する	plt.legend(loc='best')
貝殻にヒストグラムの色を変更する	plt.hist(データ列, color='seashell')
データフレームの列の平均値	df[col].mean()
データフレームのリスト列の欠損値を平均値で補う	df[aList].fillna(df[aList].mean())
グリーンイエロー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフの色をネイビーにセットする	plt.plot(データ列x, データ列y, color='navy')
option: 左三角マーカーを使う	marker = '<'
ディープスカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
文字列全体が正規表現にケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
日付時刻データにn日分、加える	aDatetime + datetime.timedelta(days=n)
ファイルの絶対パスを使う	os.path.abspath(filepath)
実数がNaNか	math.isnan(x)
散布図の右三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
option: ホットピンクにグラフの色をセットする	color = 'hotpink'
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ふたつの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
option: 紺色を用いる	color = 'darkblue'
数列とリストについて散布図を描画して、菱形マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
データフレームの内で、列と列の重複を見る	df.duplicated(subset=[column, column2])
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
option: グレー色を用いる	color = 'gray'
数列とリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
2つのカウンタのいずれかに含まれるデータを求める	aCounter | aCounter2
組を逆順にする	aTuple[::-1]
ダークカーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
1からnまでの整数列を作る	list(range(1, n+1))
空の双方向キュー	collections.deque()
データフレームのカラムの中の未入力値の合計を数える	df[col].isna().sum()
ライムグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='limegreen')
既存の行列を元に全要素が1の配列	np.ones_like(aArray)
列のユニークな要素数	df[col].nunique()
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
アイボリー色としてヒストグラムを描画する	plt.hist(データ列, color='ivory')
ライトグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
棒グラフの横幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
数列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
行列の転置行列を調べる	aArray.T
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ライトグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
カウンタから最も頻出の要素の件数	aCounter.most_common()[1]
データフレームの指定された列を配列にする	df[column].values
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
プロットに被らない場所に凡例を表示する	plt.legend(loc='best')
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
青い一点鎖線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
長さnのリスト	[0] * n
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ヒストグラムの色をチョコレートにセットする	plt.hist(データ列, color='chocolate')
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='grey')
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
タプルのキーを要素に設定する	aDict[key] = element
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
option: ピーチパフ色を使う	color = 'peachpuff'
ドジャーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
option: インディゴを用いる	color = 'indigo'
option: ダークグレーを用いる	color = 'darkgrey'
データフレームをにバイオリン図として図示する	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの未入力値がある行を落とす	df.dropna()
カテゴリ列で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: インディアンレッドを使用する	color = 'indianred'
丸印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
値を水色にする	f'\033[36m{value}\033[0m'
折れ線グラフの星マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
nが-9以上9以下か	-9 <= n <= 9
option: グラフの色を黄色に設定する	color = 'yellow'
積み上げ棒プロットを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
Pandasで書式としてデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
option: ライトスカイブルーにフォントの色を変更する	color = 'lightskyblue'
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
文字列中に部分文字列が存在しない	sub not in s
実数を実数で除算して小数点以下を切り捨てる	x // y
文字列が全て印字できる	s.isprintable()
nがn2で割り切れるか	n % n2 == 0
グラフにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
フォーマットで文字列をdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
文字列の先頭でパターンにASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
リストの最初のn要素を取り除く	aList[n:]
八進数字を全部使う	string.octdigits
データ列の中にいくつ欠損値が含まれるか数える	ds.isna().sum()
オレンジにヒストグラムの色を変更する	plt.hist(データ列, color='orange')
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
データフレームから指定された三列を選ぶ	df[[column, column2, column3]]
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
ValueMapでまとめてデータフレームの列を置き換える	df[col].replace(ValueMap)
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
二進数文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategray')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
異なる列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データ列を３つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
黒い四角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
パラメータが0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
配列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
option: バッファを使わない	buffering = 0
文字のユニコード	ord(ch)
列ごとにデータフレームをグループ化して、合計を計算する	df.groupby(column).sum()
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
実数を万の位で四捨五入する	round(x, -4)
整数nのバイト長を見る	(n.bit_length() + 7) // 8
小数点以下3桁までJSONLファイルにデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
ふたつの集合は共通の要素を持たない	aSet.isdisjoint(aSet2)
リストを配列に変換する	np.array(aList)
データフレームをJSONLファイルにCSVとして保存する	df.to_csv(filename)
折れ線グラフの色をサドルブラウンにセットする	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームを列によってによって大きい順にソートする	df.sort_values(by=column, ascending=False)
二つの集合の差集合を計算する	aSet.difference(aSet2)
配列と数列について散布図を描いて、マーカーを四角にセットする	plt.plot(データ列x, データ列y, marker='s')
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
赤い左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
ヒストグラムの色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
数列とリストの散布図にバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをダークシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
整数乱数の配列	np.random.randint(開始値, 終了値, N)
option: ナバホホワイトを使用する	color = 'navajowhite'
リストとリストについて散布図を描画し、左三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
マップから最後の項目をポップする	aDict.popitem()
2次元リストを転置する	[list(x) for x in list(zip(*aList))]
Pandasで文字列のエポック秒からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
グラフのデザインを綺麗にする	import seaborn as sns
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データフレームを列によって並べて、更新する	df.sort_values(by=column, inplace=True)
多次元データを主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
自然数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
マッピングをカウンタに変換する	collections.Counter(aDict)
二つの浮動小数点数が十分に近いかどうか	math.isclose(x, x2)
標準入力から1行分改行なしで読み込む	sys.stdin.readline().rstrip()
複数のデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
option: フォントの色をスプリンググリーンに指定する	color = 'springgreen'
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
スノー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
青い点線を用いて数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
二つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: グラフの色をダークカーキに指定する	color = 'darkkhaki'
列の値ごとにデータフレームをグループ化し、、各グループごとの分散を求める	df.groupby(column).var()
列の中にある文字列の数を数える	ds.isin([value]).sum()
nからn2の範囲で	range(n, n2)
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
度数分布図を上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
option: ライトグリーン色を用いる	color = 'lightseagreen'
データフレームを表示するとき小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
クラス分類を確率的勾配降下として行う	model = sklearn.linear_model.SGDClassifier()
配列と配列の散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームのリスト列の未入力値を平均値に設定する	df[aList].fillna(df[aList].mean())
データ列をビン数nでビン分割する	pd.cut(ds, n)
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ダークマゼンタ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
プロットに使うフォントを指定する	sns.set(font=フォント名)
データ列の分散を求める	ds.var()
ふたつの関係が上位集合もしくは等しい	aSet > aSet2
パールゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
nが一桁の数かどうか調べる	0 <= n <= 9
文字列内にひとつでも大文字が含まれるかどうか	any(c.isupper() for c in s)
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
縦棒グラフをプロットし、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='turquoise')
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
パパイヤウィップ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
回帰分析をアンサンブル学習としてする	sklearn.ensemble.VotingRegressor()
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
option: NaNを先頭にする	na_position = 'first'
最大長nのキューを用意する	collections.deque(maxlen=n)
主成分分析で多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データ列の未入力値を直後の値に変更する	ds.fillna(method='bfill')
option: 下三角印を使う	marker = 'v'
浮動小数点数を小数点以下で四捨五入する	round(x, n)
保存するカンマ区切りのファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
平均でデータフレームのNaNを置き換える	df.fillna(df.mean())
日付時刻データの時刻を使う	aDatetime.time()
nまでの偶整数列	list(range(2, n, 2))
データフレームの第二四分位数	df.median()
option: シアンにグラフの色を設定する	color = 'cyan'
ゼロ埋めされた符号なし８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.uint8)
シーケンスとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
n2行n列の二次元リストを作る	[[0] * n for _ in range(n2)]
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
データフレームの各カテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
イテラブルとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
EUCを用いてファイルを開く]	open(filepath, encoding='euc_jp')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
数式処理モジュールを使う	import sympy
本日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
カラムのNaNを直後の値に変更する	ds.fillna(method='bfill')
折れ線グラフの線の種類を一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
数式の微分を求める	sympy.diff(e)
データフレームを列の値で集約して、それぞれのグループの合計を求める	df.groupby(column).sum()
ファイルをバイナリできるように開く]	open(filepath, mode='rb')
データフレームのリスト列の分散	df[aList].var()
文字列を最後から部分文字列で分割する	s.rsplit(sub)
nまでの偶整数列を作る	list(range(2, n, 2))
線グラフをミディアムターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
rgbの星マーカーを数列とデータ列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
組の総和を計算する	sum(aTuple)
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
配列を累積する	itertools.accumulate(iterable, operator.mul)
データ列を日付データに変換する	pd.to_datetime(ds)
データフレームのカラムが何日か確認する	df[col].dt.day
折れ線グラフのバツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
日付データが何日か知る	aDate.day
タプル中の文字列が最初に見つかる位置	aTuple.index(element)
データフレームの中の欠損値が存在する行をドロップする	df.dropna()
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
ダークシアグリーンにヒストグラムの色をする	plt.hist(データ列, color='darkseagreen')
プラットホームはリナックスか調べる	sys.platform.startswith('linux')
2つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
option: グラフの色をスラグレーに設定する	color = 'slategray'
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
日付データからn週間分、減らす	aDate - datetime.timedelta(weeks=n)
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
折れ線グラフを用いてデータ列の変遷を作図する	plt.plot(range(len(データ列)), データ列)
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
ロージーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
列と列の重複を削除する	df.drop_duplicates(subset=column)
三変数の最も小さい値	min(x, y, z)
nとn2の値を足してnとする	n += n2
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: マーカーを左三角に変更する	marker = '<'
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
nが2で割り切れるかどうか	n % 2 == 0
ファイルパスの拡張子を求める	os.path.splitext(filepath)[1].lstrip('.')
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
色差別なくカラーパレットをプロットの描画で用いる	sns.set(pallete='colorblind')
整数nを二進表現に変換する	bin(n)
ファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
データフレームの欠損値が存在する行を削除する	df.dropna()
データ列の年	ds.dt.year
実数の双曲線余弦	math.cosh(x)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
文字列をカンマによって区切って、列挙する	s.split(',')
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: モカシン色を用いる	color = 'moccasin'
散布図を▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
パウダーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
棒グラフを青緑色を使って描画する	plt.bar(データ列x, データ列y, color='teal')
ダークターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ファイルからn文字、読み込む	f.read(n)
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
タイムスタンプデータが何年か知る	aDatetime.year
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの列の値がxより大きい行を抽出する	df[df[column] > x]
時計回りに円グラフをプロットする	plt.pie(データ列, startangle=90, counterclock=False)
option: グラフの色をインディゴにする	color = 'indigo'
データフレームのリストカラムはどの程度、分散しているか見る	df[aList].var()
黄緑色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ひとつでも非英字が文字列中にあるか	any(not c.isalpha() for c in s)
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
分類モデルのPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
option: オーキッドにフォントの色を変更する	color = 'orchid'
カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
折れ線グラフにポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
option: ライトグリーン色を使用する	color = 'lightseagreen'
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
散布図をインディアンレッド色として描画する	plt.scatter(データ列x, データ列y, color='indianred')
nが2で割り切れないかどうか確認する	n % 2 == 1
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
線形回帰モデルの係数を見る	model.coef_
配列の最小値	np.min(aArray)
破壊的に昇順に列によってデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
nが-9以上、9以下	-9 <= n <= 9
データ列の値は未入力値	ds.isna()
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
配列をビン数nとして分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
赤色を使ってヒストグラムを描画する	plt.hist(データ列, color='red')
ゼロ埋めしたブール型の配列	np.zeros(要素数, dtype=np.int32)
散布図の印を△印にする	plt.scatter(データ列x, データ列y, marker='^')
JSON文字列をロードする	json.loads(jsonString)
リストから重複を取り除く	sorted(set(aList), key=aList.index)
データフレームの列の欠損値を直後の値で置換する	df[col].fillna(method='bfill')
リストとリストを結合する	aList + aList2
散布図をダークバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
nが5の倍数かどうか確認する	n % 5 == 0
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
文字列がタイトル大文字小文字か確認する	s.istitle()
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
数を文字列に変換する	str(x)
３数の最小値	min(x, y, z)
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
縦棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
マッピングのキーを列挙する	aDict.keys()
データフレームのリストカラムの中にいくつ欠損値が存在するか数える	df[aList].isna().sum()
データフレームの列がx未満の行を抽出する	df[df[column] < x]
色付きの実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
タプルのn番目以降の要素を取り出す	aTuple[n:]
数値の変数にnを代入する	e.subs(z, n)
データフレームの行の名前を一度に、nameからname2に付け直す	df.rename(index={name: name2})
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
列でデータフレームをグループ化する	df.groupby(column)
MAEを計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
２変数の最も小さい値	min(x, y)
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
2つの列の値ごとにデータフレームをグループ化し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
ダークスラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をホワイトスモークにセットする	plt.hist(データ列, color='whitesmoke')
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
行列の逆行列を求める	np.linalg.inv(aArray)
データフレームを列で分類し、、それぞれのグループごとの件数を知る	df.groupby(column).size()
配列をビン数nで分割する	pd.cut(aArray, n)
option: 区切りを文字列にする	sep = s
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
折れ線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
タプルのn番目からn2番目までを取り出す	aTuple[n:n2]
小数点数の双曲線正接の逆数を求める	math.atanh(x)
リストのn番目からn2番目	aList[n:n2]
nが3で割り切れるかどうか調べる	n % 3 == 0
option: 線の種類を実線に設定する	linestyle = 'solid'
空白文字を全部求める	string.whitespace
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列x, データ列y, color='lightcoral')
線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
線グラフの色をスノーにする	plt.plot(データ列x, データ列y, color='snow')
ゴーストホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
範囲から配列	np.linspace(最小値, 最大値, 要素数)
オブジェクトのメモリビューを見る	memoryview(obj)
文字列を空白で区切り、、数列に変換する	map(int, s.split())
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームを複数の列の値によって集計して、列挙する	[(name, group) for name, group in df.groupby(columns)]
二つの列でデータフレームをまとめたグループを見る	df.groupby(['A', 'B'])
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
箱ひげ図でデータ列を描画する	plt.boxplot(データ列)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
多次元データを特異値分解を使って淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ふたつの集合のいずれか一方だけの集合を見る	aSet.symmetric_difference(aSet2)
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
option: ▽印を使う	marker = 'v'
データフレームのカラムの中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
変数を青色で出力する	print(f'\033[34m{value}\033[0m')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
ダーク・スラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームの未入力値を最小値に設定する	df.fillna(df.min())
ホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
文字列を全て小文字に変換する	s.lower()
ゲインズボロにヒストグラムの色をセットする	plt.hist(データ列, color='gainsboro')
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
全要素を０で初期化した整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int)
option: ポイントマーカーを用いる	marker = '.'
option: 読み込みモードに指定する	mode = 'r'
データフレームのカラムのNaNを最小値に設定する	df[col].fillna(df[col].min())
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
option: 色を淡いピンク色に設定する	color = 'lightpink'
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
青い一点鎖線を用いて線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データ列のモード	ds.mode()
option: データ型を指定する	dtype = np.uint8
箱ひげ図を描いて、平均値を追加する	plt.boxplot(データ列, showmeans=True)
rgbの菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
全ての空白文字	string.whitespace
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
データフレームのNaNを前の行の値で埋める	df.fillna(method='ffill')
配列とリストについて散布図を描き、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームのリストカラムを10の位で四捨五入して、整数にする	df[aList].round(-1).astype(int)
列を文字列リストに変換して、'改行を用いて一つにする	'\n'.join(map(str, iterable))
両端キューのn番目の要素	deq[n]
option: パウダーブルーにフォントの色を変更する	color = 'powderblue'
小数点数のアークタンジェント	math.atan(x)
データフレームの列の欠損値を最小値で埋める	df[col].fillna(df[col].min())
イテラブルを無限に繰り返す	itertools.cycle(iterable)
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
ヒストグラムの色をダークグリーンにする	plt.hist(データ列, color='darkgreen')
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
最頻値でデータフレームのリストカラムの未入力値を補う	df[aList].fillna(df[aList].mode().iloc[0])
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
日付データにn秒分加える	aDate + datetime.timedelta(seconds=n)
n2がnより大きく、かつn3未満か調べる	n < n2 and n2 < n3
データフレームのリストカラムの欠損値をメディアンで補う	df[aList].fillna(df[aList].median())
option: 文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
要素が集合に含まれる	element in aSet
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
カラムのNaNを中央値に設定する	ds.fillna(ds.median())
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
淡いピンク色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
折れ線グラフの左三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
赤い▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームのカラムをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
ライトコーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
データフレームを２つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか見る	df[aList].kurt()
nがn2より大きい	n > n2
タプルの末尾を捨てる	aTuple[:-1]
表データから型の列を抽出する	df.select_dtypes(ty)
option: 文字コードをSJISに変更する	encoding = 'shift_jis'
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
数値を白色でプリントする	print(f'\033[37m{value}\033[0m')
option: ダークオリーブグリーンを使う	color = 'darkolivegreen'
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
スタックの最初にシーケンスの各要素を追加する	deq.extendleft(iterable)
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
イテラブルからサンプリングする	random.sample(iterable)
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
データフレームのリスト列の欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
タプルを順序付けする	enumerate(aTuple)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
現在の作業ディレクトリ	os.getcwd()
option: 改行しないようにする	end = ''
ヒストグラムの色を黄色に指定する	plt.hist(データ列, color='yellow')
散布図のクロスマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
現在が何日か知る	datetime.datetime.today().day
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
インディゴ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
両端キュー中の数値の出現数をカウントする	deq.count(element)
組中の要素が少なくとも一つ真かどうかテストする	any(aTuple)
リストと配列についての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をオーキッドに指定する	plt.hist(データ列, color='orchid')
グリーンイエローにヒストグラムの色を設定する	plt.hist(データ列, color='greenyellow')
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
コーンズシルク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
実行結果を太文字でプリントする	print(f'\033[1m{value}\033[0m')
ピーチパフにヒストグラムの色を指定する	plt.hist(データ列, color='peachpuff')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
option: 色をライトスカイブルーに指定する	color = 'lightskyblue'
マッピングの項目名に対応した値を得る	aDict.get(key)
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
プロットに鉛直方向の破線をつける	plt.axvline(x=0, linestyle='dashed')
データフレームのリスト列の母標準偏差	df[aList].std(ddof=0)
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
二つの最も大きい値を求める	max(x, y)
'A'列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby('A').describe()
ライトサーモン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
逆正弦	math.asin(x)
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
文字列中に非空白が含まれるか調べる	any(not c.isspace() for c in s)
本日の日付	datetime.date.today()
データ列の値が欠損値かテストする	ds.isna()
列によってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
散布図をダークレッド色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームを列によってによって破壊的に並べる	df.sort_values(by=column, inplace=True)
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
option: フクシア色を用いる	color = 'fuchsia'
MLPで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
2つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
option: トマト色を使う	color = 'tomato'
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
シーケンスから重複なくn要素ランダムに選ぶ	random.sample(iterable, k=n)
二つのデータフレームを列をキーにしてジョインする	pd.merge(df, df2, on=column)
グラフに使うフォントを指定する	sns.set(font=フォント名)
二つの文字列は同じか調べる	s == s2
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
データ列の各値の出現数	ds.value_counts()
配列を転置する	aArray.T
浮動小数点数のハイパボリック・サイン	math.sinh(x)
文字列の中のケースを無視して正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
スタックの先頭	deq[0]
横棒グラフをライトスレイグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームのカラムの要約統計量を計算する	df[col].describe()
option: 色をオリベドラブに設定する	color = 'olivedrab'
option: 最初の行をヘッダに指定する	header = 0
x軸とy軸の比率を等しくする	plt.axis('equals')
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
リストをイミュータブルにする	tuple(aList)
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
赤い丸マーカーをイテラブルとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
表データを使う	import pandas as pd
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
実数がNaN	math.isnan(x)
偽陽性を避けたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
RGBで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムをシエナ色を使って描画する	plt.hist(データ列, color='sienna')
二ベクトル間のユークリッド距離	math.dist(point, point2)
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
一点鎖線としてヒストグラムを描く	plt.hist(データ列, linestyle='dashbot')
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
クラス分類の真陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームの列のNaNを最大値にする	df[col].fillna(df[col].max())
日付時刻データからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
横棒グラフをダークターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
折れ線グラフの左三角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ファイルにxを文字列に変換して書き込む	f.write(str(x))
option: アリスブルーを使用する	color = 'aliceblue'
データフレームの列の値がx以上の行を抽出する	df[df[column] >= x]
データフレームを列で集約して、最小値を計算する	df.groupby(column).min()
データフレームを降順で行によってソートする	df.sort_index(ascending=False)
文字列を区切りで区切って、列挙する	s.split(sep)
ふたつのリストの積集合を求める	list(set(aList) & set(aList2))
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
横棒グラフをライムグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='limegreen')
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
CSVファイルタブ区切りのファイルをn番目のカラムを行にして読む	pd.read_csv(filename, index_col=n)
ヒストグラムをゲインズボロ色を用いて描画する	plt.hist(データ列, color='gainsboro')
option: ライトコーラルを使う	color = 'lightcoral'
コーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
x軸の目盛りを対数に変更する	plt.xscale('log')
現在が金曜日か	datetime.datetime.today().weekday() == 4
オブジェクトがプロパティを持つかどうか判定する	hasattr(obj, プロパティ名)
イテラブルを2つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ファイルパスからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
縦棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
折れ線グラフの色を黄緑に設定する	plt.plot(データ列x, データ列y, color='chartreuse')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの中に日付データと文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
スクリプトファイルと同じディレクトリのファイルのパスを見る	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
range関数の無限バージョン	itertools.count(start=n, step=step)
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
option: 半透明にする	alpha = 0.5
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
本日の曜日を見る	datetime.datetime.today().weekday()
nの二進表現	bin(n)
データフレームの各グループごとの分散を求める	df.groupby(column).var()
実数を整数に変換する	int(x)
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
リストをリバースする	reversed(aList)
Pandasのバージョンを表示する	print(pd.__version__)
ロバストな回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
大文字・小文字を無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームのインデックスを振り直す	df.reset_index()
カウントプロットを描く	sns.countplot(x='列名', data=df)
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
nilに等しい値	None
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームの列をインデックスに設定する	df.set_index(column)
バイオレット色として線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
JSONLファイルにデータフレームをタブ区切りを用いて書き込む	df.to_csv(filename, sep='\t')
インプレイスで表データの列を削除する	df.drop(column, axis=1, inplace=True)
本日の日数	datetime.datetime.today().day
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
実数の複素数	complex(x)
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
アルファベットの大文字を使う	string.ascii_uppercase
タプルを階層化する	collections.ChainMap(aDict)
分類モデルの正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
右三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
切片なしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
エクセルファイルファイルをデータフレームとして読む	pd.read_excel(filename)
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
正規分布に従うかどうか調べる	scipy.stats.shapiro(データ列)
option: コーンフラワーブルーにフォントの色を指定する	color = 'cornflowerblue'
ヒストグラムの区間を変更する	plt.hist(データ列, range=(start, end))
日付データが土曜日か	aDate.weekday() == 5
S-W検定を行う	scipy.stats.shapiro(データ列)
データ列を使う	import pandas as pd
ライトスカイブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
データフレームのNaNを平均に設定する	df.fillna(df.mean())
円プロットを正円にする	plt.axis('equals')
option: グラフの色を赤に指定する	color = 'red'
集合を変更不能なセットにする	frozenset(aSet)
カウンタを低頻出方からリストとして得る	aCounter.most_common()[::-1]
表データを列ごとにグループ分けして、それぞれのグループ毎の標準偏差を計算する	df.groupby(column).std()
アクアマリン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
既存の行列を元に全要素が0の配列	np.zeros_like(aArray)
折れ線グラフの線のスタイルを実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
行列の各要素の最大公約数	np.gcd(aArray, aArray2)
option: フォントの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
データフレームの中の未入力値の合計を数える	df.isna().sum()
数列の折れ線グラフを描いてラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの列の値がxより大きい行を選ぶ	df[df[column] > x]
ひとつでも非ASCII文字が文字列中に含まれるかどうか調べる	any(not c.isascii() for c in s)
散布図の△印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列を青色化する	f'\033[34m{value}\033[0m'
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
モジュールを検索するパスにを追加する	sys.path.append(dir)
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
リストとリストについての散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データ列の欠損値を後の行の値に設定する	ds.fillna(method='bfill')
リストが空でないか確認する	len(aList) != 0
option: 貝殻色を使う	color = 'seashell'
計算機イプシロンを求める	sys.float_info.epsilon
縦棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
日付をインポートする	import datetime
データフレームの値は欠損値か調べる	df.isna()
文字列の中で正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s)
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
タプルをn回、加える	aTuple * n
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
クラス名が名前付きタプル	issubclass(C, tuple)
初期値で全要素を初期化した行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
option: ライトスレイグレーを使用する	color = 'lightslategrey'
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
numpyを用いる	import numpy as np
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
黒い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列がリストの要素か調べる	element in aList
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
データ列が何年か確認する	ds.dt.year
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
ドジャーブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
'A'列によってデータフレームをまとめたグループ	df.groupby('A')
ヒストグラムの色をイエローグリーンに指定する	plt.hist(データ列, color='yellowgreen')
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
option: ダークオーキッドを用いる	color = 'darkorchid'
SJISとして書き込み用にファイルパスをオープンする]	open(filepath, mode='w', encoding='shift_jis')
カウンタを辞書で更新する	aCounter.update(aDict)
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データ列は何分か確認する	ds.dt.minute
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
タイムスタンプデータと日付時刻データの時間差	aDatetime - aDatetime2
ファイルパスから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
タイムスタンプデータからn秒を減らす	aDatetime - datetime.timedelta(seconds=n)
日付時刻データはタイムスタンプデータより遅いか	aDatetime > aDatetime2
データフレームのリストカラムの歪度	df[aList].kurt()
線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列がカタカナ	('ァ' <= ch <= 'ン')
nを切り捨てながらn2分の1にする	n //= n2
青い点線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
コマンドの第二引数を調べる	sys.argv[1]
データフレームをグループ化してヒストグラムとしてプロット化する	sns.histplot(df, x='列名', hue='カテゴリ名')
option: 上三角マーカーを加える	marker = '^'
option: 書き込みモードに指定する	mode = 'w'
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図の左三角印の色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
データフレームの列名を指定した列の名前一覧に置き換える	df.columns = columns
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
文字列中から部分文字列を探す	s.find(sub)
文字列を最初の部分文字列で分けたときの最初の文字列を使う	s.partition(sub)[0]
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='grey')
option: ダークオレンジを用いる	color = 'darkorange'
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
文字を文字コードに変換する	ord(ch)
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
option: パープル色を用いる	color = 'purple'
表を列を用いてソートして、下位を取り出す	df.sort_values(columns).tail(n)
マッピングから最後のエントリをポップする	aDict.popitem()
option: ライトスレイグレー色を用いる	color = 'lightslategray'
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
数値をシアンにする	f'\033[36m{value}\033[0m'
標準出力がパイプ	not sys.stdout.isatty()
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームのカラム概要を調べる	df.info()
日付データが日曜日かどうか調べる	aDate.weekday() == 6
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
リストの先頭を取り除く	aList[1:]
文字列の右側から空白を消す	s.rstrip()
最大値と最小値でデータを揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: ライトグリーン色を使う	color = 'lightgreen'
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
ネイビー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
ふたつのリストの共通りストを求める	list(set(aList) & set(aList2))
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
散布図をゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの列の歪度	df[col].kurt()
列によってで降順にデータフレームを並べる	df.sort_values(by=column, ascending=False)
散布図の大バツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: 色をミディアムブルーに設定する	color = 'mediumblue'
線グラフの色をライトスカイブルーにセットする	plt.plot(データ列x, データ列y, color='lightskyblue')
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
データフレームを２つの列によってソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームのカラムの分を求める	df[col].dt.minute
十六進文字列を整数にする	int(s, 16)
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
2つの変数を文字列で区切ってプリントする	print(value, value2, sep=s)
変数を改行しないで出力する	print(value, end='')
折れ線グラフを色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
ヒストグラムをパパイヤウィップ色を使って描画する	plt.hist(データ列, color='papayawhip')
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
クラス分類をバギングを用いてする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
横棒グラフを赤色として描画する	plt.barh(データ列x, データ列y, color='red')
文字列がアスキー文字か	s.isascii()
filepathにワーキングディレクトリを設定する	os.chdir(os.dirname(filepath))
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
データフレームの列の第二四分位数を算出する	df[col].median()
棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
切り捨てながらnをn2分の一にする	n //= n2
データフレームから重複した行をドロップする	df.drop_duplicates()
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
表データのn行目を削除する	df.drop(n, axis=0)
散布図の左三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
プロットの色を暗くする	sns.set(pallete='dark')
黄色いグリッド線を引く	plt.grid(color='y')
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
両端キューは空でないか確認する	len(deq) != 0
第二四分位数でカラムのNaNを置換する	ds.fillna(ds.median())
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
リストとイテラブルの散布図を描画し、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
ピアソンを用いてデータフレームの相関行列を計算する	df.corr(method='pearson')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
文字列の末尾が部分文字列か調べる	s.endswith(sub)
t-SNEの準備をする	model = sklearn.manifold.TSNE(n_components=n)
折れ線グラフのクロス印を黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図に赤い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: ライム色を使う	color = 'lime'
２つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
option: ダークスラテグレーを用いる	color = 'darkslategray'
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
列のNaNを最大値で補う	ds.fillna(ds.max())
リストとリストについて散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ラインを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
縦棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームのカラムの一意な要素数	df[col].nunique()
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
ダークオリーブグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
マルーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
コレクションを使用する	import collections
数値の部分分数化を行う	sympy.apart(e)
option: グラフの色をリネンに設定する	color = 'linen'
データフレームを列の値によってまとめたグループを見る	df.groupby(column)
書式をマッピングで文字列整形する	formatText.format_map(aDict)
クラス分類の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
縦棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームのリストカラムを整数に丸める	df[aList].round()
JSONLファイルにデータフレームを書き込む	df.to_csv(filename, sep='\t')
半透明の一点鎖線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
option: フォントの色をダークオーキッドに設定する	color = 'darkorchid'
option: ダークターコイズ色を用いる	color = 'darkturquoise'
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
本日のタイムスタンプ	datetime.datetime.now()
option: グラフの色をターコイズに設定する	color = 'turquoise'
データフレームを列の値でグループ化し要約統計量を計算する	df.groupby(column).describe()
一点鎖線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
インデント幅nで辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのカラムの月	df[col].dt.month
R2を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
実数が有限か調べる	math.isfinite(x)
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの中にいくつNaNがあるかカウントする	df.isna().sum()
データフレームのリストカラムの要約統計量	df[aList].describe()
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
1行から2つの実数を読む	A, B = map(float, input().split())
整数nの二進文字列	bin(n)[2:]
カウンタをリストにする	list(aCounter)
option: グラフの色をシルバーにする	color = 'silver'
全要素を初期値で初期化した行列	np.full(要素数, 初期値, dtype=np.int)
辞書から多重集合を作成する	collections.Counter(aDict)
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
イテラブルとデータ列の散布図を描いてマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: 色をペールグリーンに設定する	color = 'palegreen'
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
xの小数点以下'4'桁までを出力する	print(':.4f'.format(x))
文字列にイテラブルを変換して、カンマで連結する	','.join(map(str, iterable))
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
散布図の▼印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
クラス分類をランダムフォレストでする	model = sklearn.ensemble.RandomForestClassifier()
平均でデータフレームのNaNを埋める	df.fillna(df.mean())
ヒストグラムをシルバー色を用いて描画する	plt.hist(データ列, color='silver')
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
データフレームをカンマ区切りのファイルから読み込む	pd.read_csv(filename, sep=',')
option: ライトブルー色を用いる	color = 'lightblue'
データフレームを'A'列の値によって集計し、列挙する	[(name, group) for name, group in df.groupby('A')]
要素ひとつの組	(element,)
整数で浮動小数点数を整数除算する	x // y
８ビット整数型のゼロ埋めしたベクトル	np.zeros(要素数, dtype=np.int8)
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
ローングリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
表の列を削除する	df.drop(column, axis=1)
ファイルを追加モードを用いてオープンして]fとする	f = open(filepath, mode='a')
タプルをリストに変換する	list(aTuple)
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
データフレームから指定された名前リストの列を選択する	df[columns]
文字列内に漢字があるか確認する	re.search('[\u4E00-\u9FD0]', s)
predicateFuncが真となる列の部分	itertools.takewhile(predicateFunc, iterable)
浮動小数点数の二乗を求める	x ** 2
リストのn番目を削除する	del aList[n]
リストの合計を算出する	sum(aList)
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: 文字列の示すエンコーディングを使う	encoding = s
縦棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
日付時刻データにn週間分加える	aDatetime + datetime.timedelta(weeks=n)
新しいロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
折れ線グラフの▽印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: 色をリネンに設定する	color = 'linen'
ハニーデュー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
リストの全ての値をクリアにする	aList.clear()
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
option: コーラル色を使う	color = 'coral'
散布図のバツ印の太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
回帰分析をアンサンブル学習で行う	sklearn.ensemble.VotingRegressor()
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームをエクセルファイル形式でJSONLファイルに書き込む	df.to_excel(filename)
option: ベクトルのデータ型を指定する	dtype = bool
データフレームを'A'列の値によってまとめたグループを見る	df.groupby('A')
リストにリストを追加する	aList.extend(aList2)
ダークオリーブグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
リストを引数として展開して表示する	print(*aList, sep=',')
データフレームの値が欠損値かどうか	df.isna()
データフレームの先頭n行を抽出する	df.head(n)
暗い赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの重複していない行のみ	df[not df.duplicated(keep=False)]
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
正規表現でreplにまとめてデータフレームのリスト列を置き換える	df[aList].replace(pattern, repl, regex=True)
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフに▲マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
クラス分類の偽陽性をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
rgbの菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図にクロスマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
散布図にダイアモンド印を用いる	plt.scatter(データ列x, データ列y, marker='D')
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
異なるカラムをキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ライトブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightblue')
日付時刻データの月数を使う	aDatetime.month
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
線グラフを半透明の点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
タプルをnから番号付けする	enumerate(aTuple, start=n)
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
折れ線グラフを色付きの破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
n個に配列を等量でビン分割する	pd.qcut(aArray, n)
option: サドルブラウンに色を変更する	color = 'saddlebrown'
時間をインポートする	import time
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
書式をマッピングでフォーマットする	formatText.format_map(aDict)
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ゼロ埋めされた複素数型の行列	np.zeros(要素数, dtype=bool)
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列が全て小文字	s.islower()
辞書を複製する	aDict.copy()
option: 文字列をセパレータで使う	sep = s
インデックスでデータフレーム全体を昇順に並べる	df.sort_index(ascending=True)
アクア色でヒストグラムを描画する	plt.hist(データ列, color='aqua')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
折れ線グラフの左三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: 昇順にする	ascending = True
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
連番の行列の自動作成する	np.arange(開始値, 終了値, 等差)
option: ネイビーにグラフの色を設定する	color = 'navy'
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgray')
データフレームの行の名前一覧	df.index
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
折れ線グラフの△印の線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
'A'列でによってデータフレームを降順にソートする	df.sort_values(by='A', ascending=False)
リストが空かどうか調べる	len(aList) == 0
折れ線グラフの色をベージュにする	plt.plot(データ列x, データ列y, color='beige')
option: 丸印を加える	marker = 'o'
二次元リストをフラット化する	sum(aList)
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフの右三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
配列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列が全て英数字かテストする	s.isalnum()
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
空白文字を全て求める	string.whitespace
線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
ファイルとfilenameを結合する	os.path.join(filepath, filename)
データフレームのカラムの文字列長を列として使う	df[col].str.len()
オーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
配列を中央値でビン分割する	pd.qcut(aArray, 2)
昇順にデータフレームを'A'列によって並べ、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
日付時刻データの曜日を使う	aDatetime.weekday()
nとn2の商を求める	n / n2
データフレームを列名リストをキーにして整列する	df.sort_values(by=column)
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
'A'列と'B'列の値によってデータフレームをグループ化する	df.groupby(['A', 'B'])
データフレームのメディアン	df.median()
ミスティローズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
レモンシフォン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
パープルにヒストグラムの色をする	plt.hist(データ列, color='purple')
散布図の大バツマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
破壊的に複数の列によって大きい順にデータフレームを並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの最後n行を取り出す	df.tail(n)
カラーバーを水平で設定する	plt.colorbar(orientation='horizontal')
折れ線グラフをタン色を用いて描画する	plt.plot(データ列x, データ列y, color='tan')
淡くカラーパレットをグラフの描画で使用する	sns.set(pallete='muted')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
カウンタ同士で和集合演算する	aCounter | aCounter2
インデント幅nで辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
カラムを10の位で四捨五入する	ds.round(-1)
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
数値の微分を計算する	sympy.diff(e)
折れ線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
折れ線グラフに凡例を設定する	plt.plot(データ列x, データ列y, label='ラベル')
データフレームを列の値によって分類して、それぞれのグループごとの個数を算出する	df.groupby(column).count()
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
配列を円グラフにする	plt.pie(データ列, startangle=90)
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
データ列とリストの散布図をプロットしてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
全要素を初期値で初期化したベクトルを作成する	np.full(要素数, 初期値, dtype=np.int)
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
実数を小数点以下第一位で丸める	round(x, 1)
ダークターコイズにヒストグラムの色をセットする	plt.hist(データ列, color='darkturquoise')
option: オールドレース色を用いる	color = 'oldlace'
データフレームの列をヒストグラムで描く	plt.hist(df[column])
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: 印を星に設定する	marker = '*'
文字列はタプルに含まれるかどうか確認する	element in aTuple
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
整数nはリストのどれか	n in aList
ポイント印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
option: セパレータを使わない	sep = ''
データフレームの中の列を等しい量になるようにn個に分割する	pd.qcut(df[col], n)
現在の日付を使う	datetime.date.today()
option: 箱ひげ図を横方向にする	vert = False
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
縦棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
ラインを一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを1000の位で四捨五入する	df.round(-3)
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフに下三角印を用いる	plt.plot(データ列x, データ列y, marker='v')
option: グラフの色をダークマゼンタにセットする	color = 'darkmagenta'
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
部分文字列が文字列の開始位置と終了位置の間に含まれる	s.find(sub, start, end) != -1
option: クロスマーカーを描画する	marker = 'x'
黒いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
プロットの使途を画面に設定する	sns.set(context='notebook')
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ダークオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
option: 色をゴールドに指定する	color = 'gold'
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
重複した行のみ	df[df.duplicated(keep=False)]
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
nが1、もしくは2か調べる	n == 1 or n == 2
オプションで、標準エラーを出力にする	file = sys.stderr
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
ダークサーモン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
折れ線プロットの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ヒストグラムの色を青紫にセットする	plt.hist(データ列, color='violet')
プロットの横軸にキャプションを付ける	plt.xlabel('x軸ラベル')
option: ピンク色を用いる	color = 'pink'
タプルを引数として展開してプリントする	print(*aTuple)
散布図をタン色を用いて描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームを二つの列でソートしてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
淡い茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
文字列全体を正規表現に複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
やわらかい青にヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
値を緑色で表示する	print(f'\033[32m{value}\033[0m')
横棒グラフを黄緑色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
破壊的に列によってによってデータフレームをソートする	df.sort_values(by=column, inplace=True)
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
横軸だけ目盛線	plt.grid(axis='x')
値を両端キューのn番目に挿入する	deq.insert(n, element)
表データのインデックスをリセットする	df.reset_index()
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
整数nの十六進リテラル	hex(n)
横棒グラフをシーグリーン色として描画する	plt.barh(データ列x, データ列y, color='seagreen')
大きさnでデータ列と数列についての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
リストとリストの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
日付データを文字列を用いてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
カラムの未入力値をメディアンで補う	ds.fillna(ds.median())
option: 配列のデータ型を指定する	dtype = np.int
既存のファイルをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
数列とリストについて散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
集合＼セット	aSet.difference(aSet2)
エラーなく集合から値を除去する	aSet.discard(element)
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
黒いバツマーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
折れ線グラフを白色として描画する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
カウンタの最頻出の要素	aCounter.most_common()[0]
外れ値に強い線形分類モデルを準備する	model = sklearn.linear_model.HuberClassifier()
チョコレート色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
標準入力を得る	sys.stdin
線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
オブジェクトがプロパティを持つか確認する	hasattr(obj, プロパティ名)
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
インデント付きでマッピングを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
青緑色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
ビン数nでデータフレームの中のカラムをビン分割する	pd.cut(df[col], n)
データフレームのカラムで文字列が含まれない行を選択する	df[not df[column].str.contains(s)]
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
オブジェクトがリストに含まれるかテストする	element in aList
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
データフレームのリストカラムのNaNをxに設定する	df[aList].fillna(x)
ポイントマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
データ列を箱ひげ図を使って描画する	plt.boxplot(データ列)
マルーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='maroon')
option: クリムゾン色を使う	color = 'crimson'
option: マーカーの色をティールにする	markerfacecolor = 'teal'
実数のn乗して浮動小数点数による余りを計算する	pow(x, n, y)
ダークグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkgrey')
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: 分割記号を改行にする	sep = '\n'
データフレームのカラムのタイムゾーンを文字列にセットする	df[col].tz_convert(s)
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
文字列の先頭は部分文字列か調べる	s.startswith(sub)
データフレームから指定された三列を抽出する	df[[column, column2, column3]]
集合を更新不能に変換する	frozenset(aSet)
下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
option: ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
option: グラフの色をインディゴに変更する	color = 'indigo'
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームの第一四分位数	df.quantile(0.25)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
データ列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
マッピングに辞書のエントリを追加する	aDict.update(aDict2)
散布図の菱形印の色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ミディアムシアグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumseagreen')
データフレームを列の値によってグループ化し、、分散を求める	df.groupby(column).var()
文字列は全て印字できるか調べる	s.isprintable()
データフレームを列をキーにして整列する	df.sort_values(by=column)
option: 紺にグラフの色を設定する	color = 'darkblue'
データフレームを列の値によってまとめた表	df.groupby(column)
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
縦棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
リストの最後	aList[-1]
ピアソン相関係数としてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='pearson')
ダークカーキ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
predicateFuncを適用したとき真とならない列の部分	itertools.dropwhile(predicateFunc, iterable)
配列とリストについての散布図に▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
グラフの描画で色差別なく色を使う	sns.set(pallete='colorblind')
配列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
現在は何曜日か知る	datetime.datetime.today().weekday()
option: アクアマリン色を使う	color = 'aquamarine'
ディレクトリ	os.getcwd()
データフレームの歪度を計算する	df.kurt()
データフレームを'A'列によって昇順に破壊的に整列する	df.sort_values(by='A', ascending=True, inplace=True)
文字列をバイト列にする	bytes(s)
ヒストグラムをペールグリーン色を使って描画する	plt.hist(データ列, color='palegreen')
option: 色をライトシアンに指定する	color = 'lightcyan'
破壊的に二つの列によって降順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
option: グラフの色をライトグリーンにセットする	color = 'lightseagreen'
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
目盛り線	plt.grid(linestyle='--')
点線にヒストグラムの線種をセットする	plt.hist(データ列, linestyle='dotted')
option: 最初の行をヘッダに変更する	header = 0
アルファベットを見る	string.ascii_letters
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
nを切り捨てながら半分にする	n //= 2
ライトコーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
データフレームから指定されたデータ型の列名リスト	df.select_dtypes(型).columns
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
データ列をビン分割する	pd.cut(ds, aList)
オブジェクトが整数クラスのインスタンス	isinstance(obj, int)
整数nがセットのいづれかかどうか	n in aSet
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
option: 色をライトスチールブルーに設定する	color = 'lightsteelblue'
option: グラフの色をマルーンに設定する	color = 'maroon'
からデータフレームを読み込む	pd.read_excel(filename)
データフレームから1行だけ列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
2つの浮動小数点数はほぼ等しい	math.isclose(x, x2)
n番目のシートをファイルのデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
リッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
二つの文字列は等しくないか	s != s2
エクセルファイルファイルからnとn2のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
ラベンダー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
折れ線グラフをシルバー色として描画する	plt.plot(データ列x, データ列y, color='silver')
ビン数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
散布図のクロスマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: エンコーディングをEUCにセットする	encoding = 'euc_jp'
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
アンティークホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
オブジェクトがタプルの要素でない	element not in aTuple
綺麗なグラフを描画する準備をする	import seaborn as sns
データフレームの中の列と列に重複があればドロップする	df.drop_duplicates(subset=column)
配列のユニークな要素を求める	np.unique(aArray)
集合をイミュータブルなセットにする	frozenset(aSet)
線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
データを平均と分散を用いて標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列を最後の部分文字列で二分し、後半の文字列を見る	s.rpartition(sub)[-1]
実数の双曲線正接の逆数	math.atanh(x)
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
データ列を丸めて、整数型にする	ds.round().astype(int)
要素が全て初期値の配列を作成する	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
データフレームから型の列だけ抽出する	df.select_dtypes(ty)
タプルのn番目からn2番目まで	aTuple[n:n2]
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
半透明の実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: 黄色にグラフの色を設定する	color = 'yellow'
ヒストグラムをゴーストホワイト色として描画する	plt.hist(データ列, color='ghostwhite')
リストを四分位数で分割する	pd.qcut(aList, 4)
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
データフレームのカラムは何日か見る	df[col].dt.day
文字列中のパターンを新しい文字列として置き換える	re.sub(pattern, newsub, s)
タイムスタンプデータが日曜日か確認する	aDatetime.weekday() == 6
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームを2つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
符号付きで整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
リストと配列の散布図にデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
集合が空集合でないか判定する	len(aSet) != 0
日付データからn秒を引く	aDate - datetime.timedelta(seconds=n)
データフレームを複数の列の値によってまとめた表を使う	df.groupby(columns)
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
両端キューをシーケンスから用意する	collections.deque(iterable)
分類モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
アクア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフの▲マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
折れ線グラフの四角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
日付時刻データにn日分足す	aDatetime + datetime.timedelta(days=n)
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
スプリンググリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
option: 三2ビット整数型を用いる	dtype = np.int16
n割るn2を切り上げる	(n + n2 - 1) // n2
縦棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
option: ベージュ色を用いる	color = 'beige'
散布図に黒い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの色を紺碧にセットする	plt.plot(データ列x, データ列y, color='azure')
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
数式を変数について微分する	sympy.diff(e, z)
データ列の中にいくつ日付データがあるか数える	ds.isin([value]).sum()
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
小数点数とyの斜辺	math.hypot(x, y)
文字列をゼロ埋めする	s.zfill(文字列幅)
ゼロ埋めした整数型の配列	np.zeros(要素数, dtype=np.int)
サポートベクター回帰モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
オプションで、標準出力を使う	file = sys.stdout
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
空のスタック	collections.deque()
マッピングのキーとそのエントリをペアとして取り出す	aDict.items()
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: シスルを用いる	color = 'thistle'
option: マーカーを星に変える	marker = '*'
データフレームの列の欠損値を中央値で置き換える	df[col].fillna(df[col].median())
文字列中からパターンに大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
実数のn乗の数剰余	pow(x, n, y)
データフレームの中の欠損値の数を数える	df.isna().sum()
円グラフを用いてデータ列の比率を図示する	plt.pie(データ列, startangle=90)
横軸の目盛を表示しない	plt.xticks([])
nが5の倍数か確認する	n % 5 == 0
オブジェクトがクラスかどうか調べる	isinstance(obj, クラス)
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
option: フォントの色をタンにセットする	color = 'tan'
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
日付データが何月か知る	aDate.month
バリーウッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームがどの程度、分散しているか見る	df.var()
数式を簡単化する	sympy.sympify(e)
option: 印の色を変更する	markerfacecolor = '#800080'
折れ線グラフをブラック色を用いて描画する	plt.plot(データ列x, データ列y, color='black')
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームは正規分布からどれだけ、尖っているか見る	df.skew()
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
'A'列によってデータフレームを分類する	df.groupby('A')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
散布図をフォレストグリーン色として描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
option: ダーク・スラテグレー色を使用する	color = 'darkslategrey'
浮動小数点数を文字列にする	str(x)
今日の月数	datetime.datetime.today().month
日付時刻データをISO8601書式の文字列にする	aDatetime.isoformat()
文字列を青色にする	f'\033[34m{value}\033[0m'
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
書き込み用にEUCとしてファイルパスをオープンする]	open(filepath, mode='w', encoding='euc_jp')
データフレームを列でソートして、行を振り直す	df.sort_values(columns).reset_index(drop=True)
xが一桁の正の数かどうか調べる	0 <= x <= 9
文字列が全て十進数字か確認する	s.isdecimal()
option: グラフの色をシスルに変更する	color = 'thistle'
option: ヘッダをnamesに変更する	header = names
オブジェクトが浮動小数点数か	isinstance(obj, float)
データフレームの列を十の位で四捨五入する	df[col].round(-1)
文字列の開始位置からと終了位置の範囲に部分文字列がある	s.find(sub, start, end) != -1
散布図に赤い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
ファイルをUTF8として開く]	open(filepath, encoding='utf-8')
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
二数の最小値を求める	min(x, y)
itertoolsモジュールをインポートする	import itertools
縦棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
データ列とリストの散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データ列がどの程度、分散しているか調べる	ds.var()
表データをインポートする	import pandas as pd
nで乱数生成系列を初期化する	random.seed(n)
データフレームのカラムの正規分布に対する左右対称性を算出する	df[col].kurt()
ヒストグラムをオリーブ色を使って描画する	plt.hist(データ列, color='olive')
浮動小数点数のn乗の実数剰余	pow(x, n, y)
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ミディアムブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
option: 色をピーチパフに変更する	color = 'peachpuff'
文字列が漢字かどうか確認する	('\u4E00' <= ch <= '\u9FD0')
線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightseagreen')
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
nとn2のビット積を求める	n & n2
数を浮動小数点数で割る	x / y
option: 小麦色を使用する	color = 'wheat'
option: サンディーブラウンを用いる	color = 'sandybrown'
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
縦棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
散布図の▽マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
データフレームのリスト列の中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
ヒストグラムの色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
データフレームが正規分布からどれだけ、尖っているか調べる	df.skew()
リストとリストについての散布図に赤いクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ミッドナイトブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: 読み込み用に設定する	mode = 'r'
エクセルデータからデータフレームを読む	pd.read_excel(filename)
リストと配列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
マッピングのコピー	dict(aDict)
データフレームがどの程度、分散しているか調べる	df.var()
OSがWindowsかどうか	sys.platform.startswith('win32')
option: フォントの色をミディアムターコイズに変更する	color = 'mediumturquoise'
要素が辞書の値として含まれているか調べる	element in aDict.values()
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームのどの値が頻出か調べる	df.mode()
折れ線プロットを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図の丸印を赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
縦棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
縦棒グラフをプロットしてバーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
要素が集合に含まれないか調べる	element not in aSet
イテラブルとリストの散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
リストの値のみ表示する	print(*aList)
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
ヒストグラムの線の種類を一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
散布図をライトグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
日付データからn週間を減らす	aDate - datetime.timedelta(weeks=n)
集合にイテラブルを追加更新する	aSet.update(iterable)
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
商と余りを同時に求める	divmod(x, y)
変数をアンダーライン付きで表示する	print(f'\033[4m{value}\033[0m')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
散布図をパールゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
グラフに補足を追記する	plt.legend(['凡例A', '凡例B'])
表データのn行目を抽出する	df.loc[n]
データフレームを'A'列と'B'列によって並べて、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
option: 符号なし８ビット整数型を使用する	dtype = np.uint8
折れ線グラフに星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
リストから文字列を取り除く	aList.remove(element)
nがn2の倍数か確認する	n % n2 == 0
option: ネイビー色を使用する	color = 'navy'
二つのオブジェクトは等しいか	obj == obj2
2を底とする実数の対数	math.log2(x)
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
データフレームの相関行列スピアマン相関係数で	df.corr(method='spearman')
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームの列の空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
散布図に赤い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
黒いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
ファイルパスを読み込みモードとしてオープンする]	open(filepath, mode='r')
折れ線グラフの色をライトイエローにする	plt.plot(データ列x, データ列y, color='lightyellow')
小さい順にデータフレームを行によって並べる	df.sort_index(ascending=True)
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
文字列を改行で分割する	s.splitlines()
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
データフレームのカラムのタイムゾーンを東京に変更する	df[col].tz_convert('Asia/Tokyo')
option: ライトイエロー色を用いる	color = 'lightyellow'
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: チョコレートにグラフの色を設定する	color = 'chocolate'
文字列の中で複数行対応として正規表現にマッチした文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
折れ線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: フォントの色をダークグレーに設定する	color = 'darkgray'
グラフの色を淡くする	sns.set(pallete='muted')
文字列が文字列リストのいづれかどうか調べる	s in aStringList
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
折れ線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図を濃いシアン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
書き込み用にファイルをEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
線形モデルの切片を求める	model.intercept_
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
列を文字列リストに変換して、空白を使って連結する	' '.join(map(str, iterable))
折れ線グラフの色をやわらかい青に指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームのデータ型一覧	df.dtypes
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
正規分布に基づく確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
文字列内に小文字が含まれるかどうか確認する	any(c.islower() for c in s)
option: スチールブルーを使う	color = 'steelblue'
実数の常用対数を求める	math.log10(x)
データフレームのカラムの空文字をNaNに変換しドロップする	df[col].replace('', np.nan).dropna()
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
空文字	''
配列とリストの散布図を描いて、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
二進対数を算出する	math.log2(x)
ゼロ埋めされた複素数型のベクトル	np.zeros(要素数, dtype=bool)
散布図をアクア色を用いて描画する	plt.scatter(データ列x, データ列y, color='aqua')
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
カテゴリ列で色分けしてカーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
列を配列として取り出す	df[column].values
要素∈集合	element in aSet
データフレームのインデックスの一覧を求める	df.index
横棒グラフをスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='steelblue')
日付時刻データとタイムスタンプデータの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
データフレームを複数の列でグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
option: レベッカパープルを使う	color = 'rebeccapurple'
整数が正の数か調べる	x > 0
データフレームを列によって分類して、最大値を求める	df.groupby(column).max()
オブジェクトが辞書クラス	isinstance(obj, dict)
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
直後の値でデータ列の欠損値を補う	ds.fillna(method='bfill')
データ列の欠損値をxにする	ds.fillna(x)
option: 三角印を使う	marker = '^'
カラムのNaNをxで補う	ds.fillna(x)
シーケンスを集合に変換する	set(iterable)
組の各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
データフレームのリストカラムの未入力値を最小値に設定する	df[aList].fillna(df[aList].min())
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
度数分布図の区間を設定する	plt.hist(データ列, range=(start, end))
線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
option: ホワイトスモークを用いる	color = 'whitesmoke'
データフレームを100の位で四捨五入して整数にする	df.round(-2).astype(int)
オブジェクトはタプルクラスかどうか	isinstance(obj, tuple)
データフレームのリスト列の相関行列をヒートマップとして描画する	sns.heatmap(df[aList].corr())
散布図の印を三角にする	plt.scatter(データ列x, データ列y, marker='^')
組のn番目以降の要素を得る	aTuple[n:]
線形回帰モデルのバイアス	model.intercept_
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
折れ線グラフの丸印の線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
nをn2だけ減少させる	n -= n2
文字列が文字列リストにあるか調べる	s in aStringList
ランダムにn行をデータフレームから取り出す	df.sample(n)
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
グラフの色を指定する	sns.set(pallete=パレット名)
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
実数の三乗	x ** 3
option: ポイントマーカーを使う	marker = '.'
ベクトル間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
最初のコマンド引数を確認する	sys.argv[1]
散布図のバツ印を黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
カウンタ間で積集合	aCounter & aCounter2
データフレームを列を用いてソートして、上位n件を取り出す	df.sort_values(columns).head(n)
option: 紺を使う	color = 'darkblue'
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
エクセルデータファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データ列と数列についての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
第二引数で指定されたファイル名	sys.argv[1]
データ列の文字列長を列として使う	ds.str.len()
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
青色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
赤いポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
option: ゲインズボロにフォントの色を指定する	color = 'gainsboro'
データフレームの列の欠損値をxに設定する	df[col].fillna(x)
グラフのy軸を対数に変更する	plt.yscale('log')
リストを等間隔でn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
文字列がタプルに含まれる	element in aTuple
線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
黒い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列がひらがな	('ぁ' <= ch <= 'ん')
マップの値の一覧を得る	aDict.values()
散布図に赤い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='r')
データ列とデータ列の散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
文字列の最後から部分文字列を除去する	s.rstrip(sub)
線形回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
option: アクアマリンを使用する	color = 'aquamarine'
データフレームのそれぞれのグループ毎の最大値	df.groupby(column).max()
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
文字列をカンマを使って分割して列挙する	s.split(',')
未初期化の行列を初期化する	np.empty((行数, 列数), dtype=np.int)
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
大文字・小文字を無視して文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
ファイルをオープンして]、追加ストリームを求める	open(filepath, mode='a')
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
option: ディープスカイブルーを使う	color = 'deepskyblue'
自然数最小公倍数を求める	math.lcm(n, n2)
xが1もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
eの乗数を計算する	math.exp(x)
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
セットをイミュータブルなセットにする	frozenset(aSet)
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
nの三乗	n ** 3
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの色をイエローグリーンにセットする	plt.plot(データ列x, データ列y, color='yellowgreen')
両端キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
プロットの色を全般的に明るくする	sns.set(pallete='bright')
散布図に赤い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの正規分布に対する左右対称性を算出する	df.kurt()
変数をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
ヒストグラムの色を赤にする	plt.hist(データ列, color='red')
データフレームから指定された列の名前一覧の列を取り出す	df[columns]
列でデータフレームを集約し、、列の要約統計量を算出する	df.groupby(column).describe()[column2]
出現頻度を描画する	plt.hist(データ列)
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
現在の曜日を整数で使う	datetime.datetime.today().weekday()
データフレームの列のユニークな値	df[col].unique()
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: パウダーブルーを使用する	color = 'powderblue'
列を累加した列を得る	itertools.accumulate(iterable)
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
昇順に2つのカラムによってデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=True)
コマンドtextを実行する	os.system(text)
オブジェクトはタプル型のインスタンス	isinstance(obj, tuple)
データフレームのカラムの未入力値を最頻値に指定する	df[col].fillna(df[col].mode().iloc[0])
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームの列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
数式のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
ダークシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
データフレームを複数の列をキーにしてソートする	df.sort_values(by=column)
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
eの小数点数乗	math.exp(x)
作画のx軸とy軸の比率を等しくする	plt.axis('equals')
折れ線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
列をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
データ列をリストを境界値として分割する	pd.cut(ds, aList)
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
カウンタのそれぞれの項目をカウントだけ列挙する	aCounter.elements()
ヒストグラムをオールドレース色を用いて描画する	plt.hist(データ列, color='oldlace')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームのリストカラムの欠損値をメディアンに設定する	df[aList].fillna(df[aList].median())
nがn2以上か	n >= n2
散布図のバツ印の色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームのカラムの欠損値を中央値に変更する	df[col].fillna(df[col].median())
カラーバーをつける	plt.colorbar()
option: 暗い赤色を使用する	color = 'darkred'
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: カンマをセパレータで使う	sep = ','
最大値・最小値の範囲で一様な疑似乱数	random.uniform(最小値, 最大値)
文字列の開始位置と終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
列名リストをデータ型でフィルタする	df.select_dtypes(型).columns
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
カウンタのキーをひとつ増やす	aCounter[element] += 1
文字列を左トリムする	s.lstrip()
データフレームのカラムが何秒か調べる	df[col].dt.second
折れ線グラフをプロットして色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ファイルが存在しないか	not os.path.exists(filepath)
データフレームを列名リストを用いてによって破壊的に並べる	df.sort_values(by=column, inplace=True)
タイムスタンプデータが月曜日	aDatetime.weekday() == 0
ヒストグラムをハニーデュー色を使って描画する	plt.hist(データ列, color='honeydew')
標準出力のバッファをフラッシュする	sys.stdout.flush()
正規表現を事前にケースを無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
正則化付き重回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
ネイビー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
データフレームのカラムは正規分布からどれだけ、歪んでいるか見る	df[col].kurt()
折れ線グラフのポイント印を赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
青緑色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
オブジェクトはバイト列クラスかどうか確認する	isinstance(obj, bytes)
横棒グラフの色を濃いシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
プロットを明るくする	sns.set(pallete='bright')
nがn2以下か	n <= n2
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列内にひとつでもASCII文字が含まれるかどうか調べる	any(c.isascii() for c in s)
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図でデータフレームを可視化して、カテゴリごとに色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームを列で昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
実数を万の位で丸める	round(x, -4)
配列と配列の散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データ列をタイムスタンプ型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
数列の推移を破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: グラフの色をライトイエローにセットする	color = 'lightyellow'
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
赤い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームのリスト列の相関行列ケンドールでを求める	df[aList].corr(method='kendall')
部分文字列で文字列が終わるか調べる	s.endswith(sub)
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
数値を黒色で出力する	print(f'\033[30m{value}\033[0m')
イテラブルの要素を集合に追加する	aSet.update(iterable)
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
ISO8601の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
インデント幅nで、マッピングをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのリスト列の欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
二つのデータフレームを列'A'と列'B'をキーにして内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
ゴーストホワイト色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
リストと数列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
二つの文字列をカンマで区切って表示する	print(value, value2, sep=',')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
option: スキップするフッタをnに減らす	skipfooter = n
リストとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームの中に文字列と文字列がいくつ存在するかカウントする	df.isin([value, value2]).sum()
入力ストリームからnバイト、読む	f.read(n)
rgbの大バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの列と列の相関行列スピアマンとして	df[[column, column2]].corr(method='spearman')
文字列リストを連結し、ひとつの文字列にする	''.join(map(str, iterable))
パターンによって文字列を置き換える	re.sub(pattern, newsub, s)
数列とリストについての散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのカラムのタイムゾーンを文字列に指定する	df[col].tz_convert(s)
データフレームの中に文字列と日付データがある	df.isin([value, value2])
データフレームから重複するデータを残さず削除する	df.drop_duplicates(keep=False)
ライトイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
ファイルにxを文字列に変換して書く	f.write(str(x))
三つ並べて数列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: グラフの色を黄緑に変更する	color = 'chartreuse'
円プロットを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
散布図をプラム色を用いて描画する	plt.scatter(データ列x, データ列y, color='plum')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
正規分布として疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
データ列を分割数nでビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
二変数の最小の値	min(x, y)
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
回帰分析をブースティングを用いて行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
行列が何のデータ型か調べる	aArray.dtype()
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
列によってデータフレームをソートしてインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
列を累積したイテラブルを求める	itertools.accumulate(iterable, operator.mul)
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: フォントの色をダークグレーにする	color = 'darkgrey'
option: レモンシフォンにフォントの色を設定する	color = 'lemonchiffon'
文字列で区切って二つの文字列を出力する	print(value, value2, sep=s)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
n掛けるn2	n * n2
実数のn乗して実数による余りを求める	pow(x, n, y)
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
表データのリストで指定したカラムの相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
グリッド線をグラフから表示しない	plt.grid(False)
フォレストグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='forestgreen')
新しいヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
集合から別のセットを全て除去する	aSet.difference_update(aSet2)
ミディアムパープル色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: 左三角マーカーを描画する	marker = '<'
カウンタの文字列のカウント	aCounter[element]
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
データフレームを各列毎にグループ分けして、列の個数を求める	df.groupby(column)[column2].count()
タプル中の要素が全て真か調べる	all(aTuple)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
nプラスn2を計算する	n + n2
dateStringを日付データに変換する	pd.to_datetime(dateString)
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
t-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
半透明の破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ファイルパスを追加できるように文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
平均と標準偏差から乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
option: ダークオレンジ色を使う	color = 'darkorange'
データフレームを各列と列の組み合わせ毎にグループ化して、個数を算出する	df.groupby([column, column2], as_index=False).count()
３数の最大値	max(x, y, z)
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を算出する	df.groupby([column, column2], as_index=False).count()
横棒グラフを淡いピンク色色として描画する	plt.barh(データ列x, データ列y, color='lightpink')
二つの値を改行で区切って表示する	print(value, value2, sep='\n')
青い点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
2つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
データフレームを各列と列の組み合わせ毎に集約して、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
データ列とデータ列の散布図を描き、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ラベンダーブラッシュ色としてヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
year年month月day日hour時を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームのリストカラムの中にある文字列の合計をカウントする	df[aList].isin([value]).sum()
option: エンコーディングを文字コードtextに変更する	encoding = text
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
十六進数字を全部求める	string.hexdigits
option: スレートブルーにグラフの色を設定する	color = 'slateblue'
文字列を全て大文字に変換する	s.upper()
フォレストグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='forestgreen')
整数個からk個取り出した時の順列の総数	math.perm(n, k)
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
option: フォントの色をパウダーブルーに設定する	color = 'powderblue'
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: ブラウンを使う	color = 'brown'
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
破壊的に'A'列によってを用いてデータフレームを整列する	df.sort_values(by='A', inplace=True)
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
二つの変数をそれぞれ定義する	x, y = i, j
日付データをISO書式の文字列に変換する	aDate.isoformat()
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
option: シエナ色を用いる	color = 'sienna'
データフレームを表示するとき、データフレームをn列まで表示できるようにする	pd.set_option('display.max_columns', n)
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
標準入力から1文字読む	sys.stdin.read(1)
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategrey')
option: ダークグリーン色を用いる	color = 'darkgreen'
option: 右三角マーカーを使う	marker = '>'
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
配列の形状	aArray.shape
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
浮動小数点数を実数で割る	x / y
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
リストを等しい量になるようにn個にビニングする	pd.qcut(aList, n)
option: グラフの色をライトグリーンに変更する	color = 'lightseagreen'
option: 読み込みモードを使用する	mode = 'r'
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
行列を元にして全要素が0のベクトル	np.zeros_like(aArray)
ファイルをバイナリモードとして開き]fとする	f = open(filepath, mode='rb')
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
表データを複数の列で小さい順に整列して更新する	df.sort_values(by=column, ascending=True, inplace=True)
紺碧色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
三つの数値を表示する	print(value, value2, value3)
文字列の中のパターンによるすべてのマッチを使う	re.findall(pattern, s)
変数がマイナス無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, -oo)
ふたつの辞書を結合する	aDict | aDict2
データ列の移り変わりを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
空白文字を使う	' '
カウンタの各項目を、その回数だけ列挙する	aCounter.elements()
両端キューの中に要素が含まれてるか調べる	element in deq
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
ファイルからバイナリストリームを開いて]fとする	f = open(filepath, mode='rb')
双方向キューのn番目	deq[n]
データフレームを'A'列と'B'列でソートする	df.sort_values(by=['A', 'B'])
リストからオブジェクトを除く	aList.remove(element)
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
折れ線グラフを一点鎖線にセットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
option: オレンジにフォントの色を設定する	color = 'orange'
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
データフレームで、列と列の重複を消す	df.drop_duplicates(subset=column)
折れ線グラフの色をフォレストグリーンにセットする	plt.plot(データ列x, データ列y, color='forestgreen')
文字列の両端から部分文字列を取り除く	s.strip(sub)
数で実数を割って、小数点以下を切り捨てる	x // y
option: 読み込むシート名をnamesにセットする	sheet_name = names
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
マップの全エントリをクリアする	aDict.clear()
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
標準出力	sys.stdout
ヒストグラムの線の種類を点線に変更する	plt.hist(データ列, linestyle='dotted')
文字列をシンボル化して変数にする	z = sympy.Symbol(s)
集合の補集合	aSet.difference(aSet2)
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
リネン色でヒストグラムを描画する	plt.hist(データ列, color='linen')
データフレームを散布図で可視化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
正則化付き回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
イテラブルを文字列リストに変換して、タブによって連結する	'\t'.join(map(str, iterable))
日付データの日数を見る	aDate.day
文字列が全て大文字か確認する	s.isupper()
データフレームを列によってソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: 色をライトグレーに設定する	color = 'lightgray'
要素がセットに含まれるかどうか	element in aSet
ファイルパスを開く]	open(filepath)
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
文字列が小文字	s.islower()
正規表現に文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
凡例をグラフに被らない位置に表示する	plt.legend(loc='best')
散布図を星マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='*')
リストを青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
文字列の後ろから空白を除く	s.rstrip(' ')
タプルとタプルを接続する	aTuple + aTuple2
nが奇数かどうか	n % 2 == 1
タプルに項目名があるいるか調べる	key not in aDict
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ヒストグラムを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
線形モデルの回帰変数	model.coef_
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
耐火レンガ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
散布図を黒いバツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列にシーケンスを変換して部分文字列で結合する	sub.join(map(str, iterable))
グリッドを実線にする	plt.grid(linestyle='solid')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
ホワイト色のヒストグラムを描画する	plt.hist(データ列, color='white')
行列のユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
モデルの残差を求める	目的変数 - model.predict(説明変数)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgrey')
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
値を太字にする	f'\033[1m{value}\033[0m'
データフレームの中の列をビン数nとしてビン分割する	pd.cut(df[col], n)
ヒストグラムの色をミディアムシアグリーンにセットする	plt.hist(データ列, color='mediumseagreen')
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
option: カラムの名前をnamesに設定する	header = names
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
オプションで、標準出力を出力にする	file = sys.stdout
等量でn個に配列をビニングする	pd.qcut(aArray, n)
データフレームのn行目を破壊的に取り除く	df.drop(n, axis=0, inplace=True)
nが2で割り切れないかどうか	n % 2 == 1
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームのリスト列のNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
フローラルホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='floralwhite')
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
文字列中の部分文字列の出現をカウントする	s.count(sub)
CSVファイルファイル名がかどうか調べる	filename.endswith('.csv')
データフレームから重複した行を残さず、ドロップする	df.drop_duplicates(keep=False)
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
ミディアムスレートブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
タイムスタンプデータが何分か知る	aDatetime.minute
option: ダークマゼンタ色を使う	color = 'darkmagenta'
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
実数の正弦を計算する	math.sin(x)
option: アリスブルーを使う	color = 'aliceblue'
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
option: グラフの色をカーキに設定する	color = 'khaki'
二つのデータフレームをカラムをキーとして結合する	pd.merge(df, df2, on=column)
リストとしてデータフレームの指定された列を抽出する	df[column].values.tolist()
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
option: サーモンを使う	color = 'salmon'
散布図を右三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='>')
option: 色をコーンフラワーブルーにセットする	color = 'cornflowerblue'
option: 改行をセパレータで使う	sep = '\n'
ロバスト回帰モデルを作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
双方向キューが空か調べる	len(deq) == 0
前もってパターンを大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
散布図の▽マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
オブジェクトのクラス	type(obj)
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
空の両端キュー	collections.deque()
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
散布図を淡いピンク色色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightpink')
要素が辞書の値に含まれていないか	element not in aDict.values()
棒グラフをフォレストグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
組の先頭を捨てる	aTuple[1:]
option: 色をライトグリーンに設定する	color = 'lightseagreen'
リストをランダムにシャッフルする	random.shuffle(aList)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームから型リストデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
データフレームを'A'列によって並べ直し、、更新する	df.sort_values(by='A', inplace=True)
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
クラス分類をヒストグラムと勾配ブースティングとしてする	model = sklearn.ensemble.HistGradientBoostingClassifier()
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
文字列タブ区切りのファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
データフレームのそれぞれのグループごとの平均値を計算する	df.groupby(column).mean()
データフレームの内の未入力値を削除する	df.dropna()
最小値でデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].min())
ミディアムパープルにヒストグラムの色を指定する	plt.hist(データ列, color='mediumpurple')
イテラブルとリストについて散布図を描き、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
データフレームの行と列を入れ替える	df.T
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
２つのリストから辞書	dict(zip(aList, aList2))
列の一意な要素数	ds.nunique()
主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
今日の日	datetime.datetime.today().day
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
option: マーカーを下三角に変える	marker = 'v'
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
データフレームのn行より前を抽出する	df[:n]
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
横棒グラフをダークバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームを列で昇順に整列する	df.sort_values(by=column, ascending=True)
データフレームの列の中に文字列と文字列が含まれるか調べる	df[col].isin([value, value2])
散布図の印を四角印にする	plt.scatter(データ列x, データ列y, marker='s')
数列の推移を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムを実線を使って描画する	plt.hist(データ列, linestyle='solid')
アルファベットの小文字を全部使う	string.ascii_lowercase
文字列を最後の部分文字列で分けた時の後半の文字列	s.rpartition(sub)[-1]
集合から要素を全て取り除く	aSet.clear()
ファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
棒グラフをターコイズ色として描画する	plt.bar(データ列x, データ列y, color='turquoise')
空のヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: フォントの色をオリベドラブに指定する	color = 'olivedrab'
縦棒グラフを紺碧色を用いて描画する	plt.bar(データ列x, データ列y, color='azure')
option: ディムグレーにフォントの色を設定する	color = 'dimgray'
散布図の大バツマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
nの十六進表現	hex(n)
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
計算機イプシロンを計算する	sys.float_info.epsilon
散布図のバツマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
大文字を小文字に変換する	s.lower()
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
ヒストグラムをライトグレー色を用いて描画する	plt.hist(データ列, color='lightgray')
グラフ中の(x,y)の位置にデータラベルを表示する	plt.legend(loc=(x, y))
散布図に赤い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
配列と数列の散布図を描いて、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
データフレームのカラムの中にある文字列の個数をカウントする	df[col].isin([value]).sum()
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: アリスブルーに色を設定する	color = 'aliceblue'
ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
いつまでもオブジェクトが繰り返すイテラブルを得る	itertools.repeat(element)
やわらかい青色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
スタッキングを用いてクラス分類を行う	sklearn.ensemble.StackingClassifier()
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データ列のタイムゾーンを文字列に指定する	ds.tz_convert(s)
二つの列によってデータフレームをグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
文字列タブ区切りのファイルからn番目のカラムを行としてCSVファイルを読む	pd.read_csv(filename, index_col=n)
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
カラムの欠損値を直後の値に設定する	ds.fillna(method='bfill')
文字列がPythonのキーワードかどうか調べる	keyword.iskeyword(s)
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
作画で使うフォントを指定する	sns.set(font=フォント名)
文字列の右端から部分文字列を消す	s.rstrip(sub)
回帰分析をロバスト推定として行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
正規表現をあらかじめASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
リストの末尾にリストを追加して拡張する	aList.extend(aList2)
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: コーンフラワーブルーを使う	color = 'cornflowerblue'
カテゴリ列で色付けして、にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
データフレームのカラムの歪度	df[col].kurt()
ヒストグラムの色をパレットトルコイズにする	plt.hist(データ列, color='paleturquoise')
ヒストグラムを三つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
列を累加する	itertools.accumulate(iterable)
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
双方向キューのstart番目からend番目までの部分値	collections.deque(itertools.islice(deq, start, end))
option: グラフの色をホワイトに設定する	color = 'white'
データフレームのリストで指定された列の相関行列スピアマン相関係数で	df[aList].corr(method='spearman')
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
スクリプトの名前を調べる	sys.argv[0]
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
タプルからn個、サンプリングする	random.sample(iterable, k=n)
ダークグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
三２ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
データフレームをグループ化し列に対し合計を計算する	df.groupby(column)[column2].sum()
option: フォントの色をターコイズに設定する	color = 'turquoise'
プロットの補助目盛を有効にする	plt.minorticks_on()
データフレームをタブ区切りでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
option: ナバホホワイトを用いる	color = 'navajowhite'
データフレームを複数の列によって並べる	df.sort_values(by=column)
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
赤い右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームのひとつの列を説明変数にする	説明変数 = df[['列名']]
リストの先頭	aList[0]
配列をイテラブルから作成する	np.array(iterable)
データフレームを散布図で可視化して、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: ダーク・スラテグレーにフォントの色をする	color = 'darkslategrey'
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
折れ線グラフのバツマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
タプルを浅くコピーする	dict(aDict)
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
下三角印を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
逆双曲線正弦を計算する	math.asinh(x)
ファイルから複数のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
改行で区切って2つの文字列をプリントする	print(value, value2, sep='\n')
散布図を四角印を使って描画する	plt.scatter(データ列x, データ列y, marker='s')
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
option: フォントの色をパープルに設定する	color = 'purple'
文字列の中の複数行対応としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
データフレームのcollのエポック秒から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
黒い四角マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフを紺色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
クラス分類の正確さを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
2つの行列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
ベクトルの累積和	np.cumsum(aArray)
タプルを文字列に変換して部分文字列で一つにする	sub.join(map(str, iterable))
ホワイト色でヒストグラムを描画する	plt.hist(データ列, color='white')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
キューが空でないか確認する	len(deq) != 0
プロット中のフォントを設定する	sns.set(font=フォント名)
タプルからキーの値をエラーなく得る	aDict.get(key, None)
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
コーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームのNaNを平均に指定する	df.fillna(df.mean())
縦棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategray')
マッピングの値の一覧	aDict.values()
今日が日曜日か調べる	datetime.datetime.today().weekday() == 6
データフレームのカラムのユニークな要素	df[col].unique()
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
Pandasで、データ列のエポック秒からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームのリスト列を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
正規表現にASCII限定として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
ヒストグラムを上限から下限までの区間でプロットする	plt.hist(データ列, range=(start, end))
青い実線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
黒い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフを描画して色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
辞書に辞書の項目を加えて、更新する	aDict.update(aDict2)
日付データの年数を求める	aDate.year
配列とデータ列についての散布図に黒い▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
日付データをタプルに変換する	aDate.timetuple()
一度にValueMapでデータフレームのリストカラムを変更する	df[aList].replace(ValueMap)
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
ヒストグラムをカデットブルー色を用いて描画する	plt.hist(データ列, color='cadetblue')
リストの推移を一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
二つの集合の積集合	aSet.intersection(aSet2)
文字列の中で大文字・小文字を無視してパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
リストと配列についての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
横棒グラフを淡いピンク色色を用いて描画する	plt.barh(データ列x, データ列y, color='lightpink')
nを八進表現にする	oct(n)
データ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
ライム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
コマンドの第二引数を確認する	sys.argv[1]
変数がマイナス無限大に近づくときの数式の極限値を算出する	sympy.limit(e, z, -oo)
タイムスタンプデータが水曜日か調べる	aDatetime.weekday() == 2
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
option: レベッカパープル色を使う	color = 'rebeccapurple'
ふたつの集合のインターセクションのみに更新する	aSet.intersection_update(aSet2)
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
データフレームの要約統計量	df.describe()
円プロットを時計回りにプロットする	plt.pie(データ列, startangle=90, counterclock=False)
散布図をラベンダー色として描画する	plt.scatter(データ列x, データ列y, color='lavender')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
タプル内の要素が全て真か調べる	all(aTuple)
データフレームを２つの列によってによって破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
option: マゼンタ色を用いる	color = 'magenta'
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色をオリベドラブに変更する	plt.plot(データ列x, データ列y, color='olivedrab')
集合から任意の要素を除く	aSet.pop()
option: ダークバイオレットを使う	color = 'darkviolet'
タプルに辞書の値を追加する	aDict.update(aDict2)
データフレームの中で何行、重複するか確認する	df.duplicated().sum()
ヒストグラムをミディアムオーキッド色として描画する	plt.hist(データ列, color='mediumorchid')
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ファイルの入力ストリームを使う	open(filepath)
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
ダークシアグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
データフレームの列の文字列が文字列で終わらないデータを選ぶ	df[not df[column].str.endswith(s)]
横棒プロットをプロットし、、下寄せする	plt.barh(ラベル列, データ列, align='edge')
線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
option: ペールグリーンを用いる	color = 'palegreen'
データ列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
表データを各列毎にグループ化し、、列の個数を算出する	df.groupby(column)[column2].count()
データ列とイテラブルの散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのn行目を消す	df.drop(n, axis=0)
値をセットから除く	aSet.remove(element)
リストの変遷を赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームのリスト列の欠損値を50パーセンタイルで埋める	df[aList].fillna(df[aList].median())
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
多次元データをSVDでパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームの中の未入力値がある行を消す	df.dropna()
xが1、もしくは2かどうか確認する	x == 1 or x == 2
数値を部分分数に展開する	sympy.apart(e)
浮動小数点数の符号を同じにする	math.copysign(x, x2)
データフレームを列名リストで並べ直す	df.sort_values(by=column)
オブジェクトは辞書クラス	isinstance(obj, dict)
K-S検定を行う	scipy.stats.kstest(データ列, 'norm')
配列を分割数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
重複をデータフレームから破壊的に削除する	df.drop_duplicates(inplace=True)
option: ASCII文字に限定する	flag = re.ASCII
全ての印字可能な文字	string.printable
リストをnから順序付けする	enumerate(aList, start=n)
option: 値を置き換える	inplace = True
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
文字列でフォーマットして日付時刻データを文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
日付データが日曜日	aDate.weekday() == 6
整数nが組のどれかか	n in aTuple
リストとリストについての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
カウンタを高頻出方からリストとして得る	aCounter.most_common()
ファイルを文字コードtextで書き込み用に開く]	open(filepath, mode='w', encoding=text)
データフレームの指定された二列だけ取り出す	df[[column, column2]]
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
n個の文字列があるリスト	[element] * n
ヒストグラムを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
ダークサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgrey')
整数nを二進数文字列にする	bin(n)[2:]
各列毎にデータフレームを集約して列の個数を算出する	df.groupby(column)[column2].count()
要素を双方向キューにenqueueする	deq.appendleft(element)
option: 色をスチールブルーにセットする	color = 'steelblue'
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフを暗い赤色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
複数の列の値でデータフレームをグループ化する	df.groupby(columns)
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategrey')
空白を使う	' '
緑色で変数をプリントする	print(f'\033[32m{value}\033[0m')
option: 印の大きさを変更する	markersize = 2.0
折れ線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
実数の逆余弦	math.acos(x)
ロバストな単回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
バギングを使ってクラス分類をする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
option: アリスブルー色を使用する	color = 'aliceblue'
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
option: 色をモカシンに設定する	color = 'moccasin'
データ列の母標準偏差	ds.std(ddof=0)
黄色い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
横棒グラフの縦幅をセットする	plt.barh(ラベル列, データ列, width=0.5)
データフレームから型リストデータ型のカラムを抽出する	df.select_dtypes(include=typeList)
文字列がタプルに含まれない	element not in aTuple
タイムスタンプデータの時間	aDatetime.hour
ヒストグラムをライトサーモン色を用いて描画する	plt.hist(データ列, color='lightsalmon')
ディムグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
第二コマンド引数	sys.argv[1]
データフレームを関数の値でグループ化する	df.groupby(関数)
データ列とイテラブルについて散布図を描画して、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
配列とリストについて散布図を描画し、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: フォントの色をリネンに設定する	color = 'linen'
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
グラフの背景色を暗くする	sns.set(style='darkgrid')
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
リストとイテラブルについての散布図に▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
カウンタからゼロ出現回数を取り除く	+aCounter
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
nのバイト長	(n.bit_length() + 7) // 8
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
重回帰モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
日付時刻データが火曜日かどうか	aDatetime.weekday() == 1
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームを'A'列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
option: 印を丸に指定する	marker = 'o'
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
nとn2の論理積を計算する	n & n2
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: パープルを用いる	color = 'purple'
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
散布図に三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
カラムをキーとして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
上位集合もしくは等しい	aSet > aSet2
データフレームのカラムを10の位で四捨五入する	df[col].round(-1)
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
辞書にマッピングの項目を加えて、更新する	aDict.update(aDict2)
散布図をベージュ色として描画する	plt.scatter(データ列x, データ列y, color='beige')
option: ディムグレーを使う	color = 'dimgrey'
データフレームから重複する行を落とす	df.drop_duplicates()
データフレームのカラムは何日か確認する	df[col].dt.day
折れ線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
二つの文字列は等しいかどうか調べる	s == s2
リストとリストについて散布図を描画してマーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
option: ライトスレイグレーにフォントの色をセットする	color = 'lightslategrey'
データフレームの中で列と列の重複を落とす	df.drop_duplicates(subset=column)
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
t-SNEで多次元データを濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
関数の値によってデータフレームをグループ化する	df.groupby(関数)
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームをグループ化し、列に対し個数を求める	df.groupby(column)[column2].count()
カウンタのKトップをリストとして得る	aCounter.most_common(k)
列とイテラブルのデカルト積	itertools.product(iterable, iterable2)
有理数の分子	q.numerator
データフレームのカラムの中に文字列と文字列がある	df[col].isin([value, value2])
辞書の全項目を空にする	aDict.clear()
行列のムーア・ペンローズの擬似逆行列を計算する	np.linalg.pinv(aArray)
文字列中に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
データフレームを各列毎にグループ化して列の標準偏差を算出する	df.groupby(column)[column2].std()
折れ線グラフの色をライトブルーにする	plt.plot(データ列x, データ列y, color='lightblue')
縦棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データ列のタイムゾーンを文字列に変更する	ds.tz_convert(s)
データフレームのカラムが何分か調べる	df[col].dt.minute
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
オールドレース色で線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
赤い点線を用いてイテラブルの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
大きさnでリストとリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
組中の要素が少なくともひとつ真か調べる	any(aTuple)
リスト中の要素は全て真か調べる	all(aList)
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
赤い実線を使ってデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: ライトブルーにグラフの色を設定する	color = 'lightblue'
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
散布図を黒い△マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
グリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
散布図を濃い青色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
分割数nでリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
文字列リストを一つにする	''.join(aStringList)
ブール型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
色を淡くする	sns.set(pallete='muted')
最大長nの両端キューを作成する	collections.deque(maxlen=n)
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
横棒グラフを黄緑色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
option: 読み込まないフッタをnに設定する	skipfooter = n
nがセットのひとつか調べる	n in aSet
ヒストグラムの色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
余弦	math.cos(x)
散布図の星マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
option: フォントの色をアリスブルーに設定する	color = 'aliceblue'
nが一桁の整数か判定する	0 <= n <= 9
ダークマゼンタにヒストグラムの色を指定する	plt.hist(データ列, color='darkmagenta')
オブジェクトが整数クラス	isinstance(obj, int)
浮動小数点数のn乗して浮動小数点数による余りを計算する	pow(x, n, y)
リストから配列を作成する	np.array(aList)
option: カデットブルー色を用いる	color = 'cadetblue'
折れ線グラフの▽印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: フォントの色をディムグレーに設定する	color = 'dimgray'
ゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
タプルをnから順序付けする	enumerate(aTuple, start=n)
rgbの四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
本日が金曜日か確認する	datetime.datetime.today().weekday() == 4
正規表現モジュールをインポートする	import re
代数計算ライブラリを使う	import sympy
二つのカウンタのいずれかに含まれる値	aCounter | aCounter2
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
リストとリストについての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフに青い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
リストをナンバリングする	enumerate(aList)
線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
列のそれぞれを関数でフィルタする	filter(func, iterable)
データフレームを使用する	import pandas as pd
ファイルを書き込みできるように開く]	open(filepath, mode='w')
パープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
リストとリストの散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: マーカーを右三角に設定する	marker = '>'
箱ヒゲ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
データフレームをグループ化し、各列に対し合計を計算する	df.groupby(column)[column2].sum()
option: フォントの色をラベンダーに設定する	color = 'lavender'
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
小麦色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
最大値として正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
列'A'と列'B'をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
マッピングの項目名を列挙する	aDict.keys()
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
option: アクアにフォントの色を変更する	color = 'aqua'
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
整数nの十六進表現	hex(n)
カテゴリ列で色分けしてデータフレームをにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
カテゴリ列でグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
option: ペルーに色を指定する	color = 'peru'
表データをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
xを整数に変換する	int(x)
タプルの浅いコピーを作る	aDict.copy()
シーケンスをダミー変数に変換する	pd.get_dummies(iterable)
データフレームからカテゴリデータのカラム名を列挙する	df.select_dtypes('object').columns
文字列が組に含まれないか調べる	element not in aTuple
データフレームを列の値によってまとめたグループ	df.groupby(column)
データフレームのカラムの最頻値	df[col].mode()
データフレームのそれぞれのグループごとの最小値を求める	df.groupby(column).min()
データフレームの列を百の位で丸めて、整数型にする	df[col].round(-2).astype(int)
データフレームを列名リストで小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
スカイブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
ファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
横棒グラフをパパイヤウィップ色を用いて描画する	plt.barh(データ列x, データ列y, color='papayawhip')
データフレームの重複していない行を抽出する	df[not df.duplicated(keep=False)]
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
オブジェクトは辞書クラスか	isinstance(obj, dict)
カウンタからゼロ出現回数を削除する	+aCounter
リストの合計値を計算する	sum(aList)
赤い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='r')
グラフをいい感じに設定する	sns.set()
棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
データフレームの欠損値を平均値に変更する	df.fillna(df.mean())
リストの文字列が最初に見つかるインデックス	aList.index(element)
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
部分文字列を文字列の先頭から安全に取り除く	s.removeprefix(sub)
nとkのnCk	math.comb(n, k)
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
ファイル全体をリストとして読む	f.readlines()
文字列の末尾から空白を取り除く	s.rstrip()
両端キューの要素をインプレースに逆に並べ直す	deq.reverse()
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
option: パパイヤウィップにフォントの色を設定する	color = 'papayawhip'
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
二つの文字列を改行で区切って表示する	print(value, value2, sep='\n')
プラットホームがMacOSか判定する	sys.platform.startswith('darwin')
実行結果を表示する	print(value)
横棒グラフをライトサーモン色として描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
option: ダークバイオレット色を使う	color = 'darkviolet'
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
タプルをリストにする	list(aTuple)
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
SJISとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
文字列を最初の部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
自然対数	math.log(x)
データフレームのカラムの月を使う	df[col].dt.month
配列の列を選択する	aArray[:, 列番号]
黒い丸マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
数値を部分分数として展開する	sympy.apart(e)
option: グラフの色をダークカーキに変更する	color = 'darkkhaki'
黒い菱形マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
グレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
正規分布による累積分布関数の逆関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームのカラムを1000の位で丸めて整数にする	df[col].round(-3).astype(int)
データフレームを'A'列と'B'列によって大きい順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
集合から任意の要素を取り出す	aSet.pop()
SJISでTSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
データ列を四捨五入して、整数型にする	ds.round().astype(int)
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
数式の微分を計算する	sympy.diff(e)
データフレームを複数の列で昇順にソートする	df.sort_values(by=column, ascending=True)
２つのデータフレームを列をキーとして内部結合する	pd.merge(df, df2, on=column, how='inner')
横棒グラフをパウダーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='powderblue')
変数が無限大に近づく場合の数値の極限値を求める	sympy.limit(e, z, oo)
option: グラフの色をダークマゼンタに変更する	color = 'darkmagenta'
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
文字列をエンコーディングを用いてバイト列に変換する	s.encode(encoding=encoding)
y軸の目盛を対数に変更する	plt.yscale('log')
配列の各要素の最大公約数	np.gcd(aArray, aArray2)
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
option: ライトグレーにグラフの色を設定する	color = 'lightgrey'
配列を分割数nでビニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームを関数でグループ化する	df.groupby(関数)
回帰分析を部分的最小二乗法でする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
二つのオブジェクトは等しいか調べる	obj == obj2
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
option: 色をゴールデンロッドに指定する	color = 'goldenrod'
表データのヒートマップをグラフ化する	sns.heatmap(df.corr())
平均値付き箱髭図を描画する	plt.boxplot(データ列, showmeans=True)
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
両端キューをリストに変換する	list(deq)
標準エラーを使用する	sys.stderr
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
option: ダークオーキッドにフォントの色を指定する	color = 'darkorchid'
データフレームの第三四分位数	df.quantile(0.75)
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
浮動小数点数を３乗する	x ** 3
折れ線グラフのダイアモンド印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
小数点数のk進対数	math.log(x, k)
ファイルを全て読み込む	f.read()
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
データフレームの中にあると文字列の数を数える	df.isin([value, value2]).sum()
option: ネイビーにグラフの色を変更する	color = 'navy'
データ列を1000の位で四捨五入する	ds.round(-3)
データフレームを列でソートして、更新する	df.sort_values(by=column, inplace=True)
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
回帰分析をK最近傍法を用いてする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
グラフのx軸を対数に変更する	plt.xscale('log')
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
ライムグリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
２つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
オブジェクトはバイト列クラスかどうか調べる	isinstance(obj, bytes)
真上位集合か調べる	aSet > aSet2
t-SNEで淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
ミディアムアクアマリン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームのリスト列の欠損値をメディアンにする	df[aList].fillna(df[aList].median())
黄色い線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
ブラック色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
オブジェクトがリストの要素か調べる	element in aList
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
カウンタの文字列数を使う	len(aCounter)
文字列を二分する	s.partition(sep)
▼マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの▽マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
実線に折れ線グラフを変更する	plt.plot(データ列x, データ列y, linestyle='solid')
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
二つのリストを改行せずにプリントする	print(value, value2, end='')
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
ミディアムアクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumaquamarine')
option: 色をフローラルホワイトに設定する	color = 'floralwhite'
文字列の中のASCII限定として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
2つの変数をそれぞれ定義する	x, y = i, j
浮動小数点数の２乗	x ** 2
option: ターコイズを使う	color = 'turquoise'
ダイアモンド印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
1からNまでの配列を作る	np.arange(1, N+1)
データフレームを複数の列によってグループ化する	df.groupby(columns)
nが偶数か調べる	n % 2 == 0
折れ線グラフに左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームのリスト列の欠損値をモードに指定する	df[aList].fillna(df[aList].mode().iloc[0])
xの絶対値を計算する	abs(x)
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
マゼンタ色を用いてヒストグラムを描画する	plt.hist(データ列, color='magenta')
タプルの要素を並べ直す	sorted(aTuple)
データ列の母標準偏差を求める	ds.std(ddof=0)
八進数字を全部見る	string.octdigits
縦棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
折れ線グラフのポイントマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
今日の日付	datetime.date.today()
nが1、もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ヒストグラムの色をバイオレットにする	plt.hist(データ列, color='violet')
横棒プロットを描き、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
リストにオブジェクトを追加する	aList.append(element)
データ列を箱ひげ図として描画する	plt.boxplot(データ列)
option: 改行の代わりに文字列を用いる	end = s
option: ディープスカイブルーにフォントの色を設定する	color = 'deepskyblue'
xを浮動小数点数型に変換する	float(x)
両端キューの末尾から値を取り除く	deq.pop()
option: カーキ色を使う	color = 'khaki'
外れ値に強い線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
列をイミュータブルなセットに変換する	frozenset(iterable)
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
option: マーカーを三角に変更する	marker = '^'
二つの整数の最大公約数	math.gcd(n, n2)
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
option: 読み込みモードを用いる	mode = 'r'
ヒストグラムをスレートブルー色を使って描画する	plt.hist(データ列, color='slateblue')
黒い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
日付データと日付データの時間差	aDate - aDate2
タプルのキーの一覧	aDict.keys()
ヒストグラムをライム色を用いて描画する	plt.hist(データ列, color='lime')
option: グラフの色をライムに変更する	color = 'lime'
青い点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
データフレームを列を用いて並べ、、下の方n件を取り出す	df.sort_values(columns).tail(n)
最頻値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
文字列が部分文字列で終わるか調べる	s.endswith(sub)
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategray'
データフレームを表示するとき、小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
散布図を珊瑚色を用いて描画する	plt.scatter(データ列x, データ列y, color='coral')
日付時刻データにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
本日の日付時刻	datetime.datetime.now()
最大長nの両端キューを作る	collections.deque(maxlen=n)
空白文字	' '
青い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
プラットフォームのコードポイントの最大値	sys.maxunicode
データフレームの列の要約統計量	df[col].describe()
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームのカラムの欠損値を平均値にする	df[col].fillna(df[col].mean())
半透明の破線として配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
整数nを八進数リテラルに変換する	oct(n)
折れ線グラフの色をライムグリーンにセットする	plt.plot(データ列x, データ列y, color='limegreen')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
ファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
散布図に左三角印を用いる	plt.scatter(データ列x, データ列y, marker='<')
棒グラフをアクアマリン色を使って描画する	plt.bar(データ列x, データ列y, color='aquamarine')
カテゴリ別に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
二つのリストの積集合	list(set(aList) & set(aList2))
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
リストから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
折れ線グラフの色をロージーブラウンにセットする	plt.plot(データ列x, データ列y, color='rosybrown')
双方向キューの末尾	deq[-1]
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
ダークゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
乱数で要素を埋めた行列を作成する	np.random.random((行数, 列数))
散布図のポイントマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
既にロードされたモジュールのリスト	sys.modules
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: グラフの色をアイボリーに指定する	color = 'ivory'
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
オプションで出力先を標準エラーに設定する	file = sys.stderr
コーンフラワーブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
タイムスタンプデータの分数	aDatetime.minute
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
TSVファイルをヘッダを指定せず読む	pd.read_csv(filename, header=None)
線グラフを暗い赤色を使って描画する	plt.plot(データ列x, データ列y, color='darkred')
２つの数値を改行で区切ってプリントする	print(value, value2, sep='\n')
クリムゾン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
ライムグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
青い点線を使ってリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ミディアムバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
ライトゴールドロディイエローにヒストグラムの色をセットする	plt.hist(データ列, color='lightgoldenrodyellow')
リストのn番目のの要素	aList[n]
コーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
グリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのリストカラムのモード	df[aList].mode()
ミディアムスプリンググリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
オブジェクトが浮動小数点数か確認する	isinstance(obj, float)
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
nが負の数	n < 0
タイムスタンプデータが月曜日か調べる	aDatetime.weekday() == 0
リストとリストについての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
パールゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
タプル中の文字列が最初に見つかるインデックスを探す	aTuple.index(element)
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
データフレームのカラムの中央値	df[col].median()
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
表データから列を2つだけ選択する	df[[column, column2]]
データ列を十の位で丸める	ds.round(-1)
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームから指定された3つの列を選択する	df[[column, column2, column3]]
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
文字列を空白で区切り、文字列リストにする	s.split()
リストとリストの散布図を描画し、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
２変数の最も大きい値を求める	max(x, y)
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
データフレームを'A'列と'B'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
オブジェクトは論理値型か調べる	isinstance(obj, bool)
ファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
散布図を黒いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ミディアムバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
L1ノルムを使って正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
正規分布のパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データフレームのリストカラムの中の未入力値の数を求める	df[aList].isna().sum()
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
文字列中にひとつでも非数字がある	any(not c.isdigit() for c in s)
サイコロと同じ乱数	random.randint(1, 6)
リストの先頭の要素	aList[0]
カウンタを高頻出な方から列挙する	aCounter.most_common()
散布図を赤いポイントマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列をセパレータによって分割して、列挙する	s.split(sep)
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
色を全般的に明るくする	sns.set(pallete='bright')
日付時刻データの曜日を整数で求める	aDatetime.weekday()
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
nがn2かどうか調べる	n == n2
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
シーケンスに列を続けた列	itertools.chain(iterable, iterable2)
データフレームを列名リストの値でまとめたグループを見る	df.groupby(columns)
棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
整数を整数に変換する	int(x)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
別の文字列で文字列を置き換える	s.replace(sub, newsub)
実数の3乗を計算する	x ** 3
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
列に列を続ける	itertools.chain(iterable, iterable2)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
カウンタの項目のカウント	aCounter[element]
リストと数列の散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ベクトルが何次元か調べる	aArray.ndim
日本語をグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
n進数文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
BOM付きでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
nがn2か	n == n2
option: デピンクにフォントの色を設定する	color = 'deeppink'
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
文字列を最後の部分文字列で二つに区切って前半の文字列を使う	s.rpartition(sub)[0]
ロバスト分類器を用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データフレームのリストカラムを千の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
数列を円プロットにする	plt.pie(データ列, startangle=90)
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
要素がマップの値に含まれていないか確認する	element not in aDict.values()
タプルのn番目のの要素	aTuple[n]
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
行列の行ごとの最大値を見る	np.max(aArray, axis=1)
キューの末尾にシーケンスの各データを付け加える	deq.extend(iterable)
option: 先頭列を行に指定する	index_col = 0
option: グラフの色をアイボリーに変更する	color = 'ivory'
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
棒グラフをグリーンイエロー色として描画する	plt.bar(データ列x, データ列y, color='greenyellow')
変数を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームの列名を列挙する	df.columns
option: プラム色を使用する	color = 'plum'
データフレームの値を一度にValueMapで置換する	df.replace(ValueMap)
ダークスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
散布図をダークサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
折れ線グラフの三角印を青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをペルー色を用いて描画する	plt.hist(データ列, color='peru')
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
配列をn個にビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図を黄緑色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
折れ線グラフの四角印の太さを変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
実数のn乗の実数剰余を求める	pow(x, n, y)
散布図をライトコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
ファイルがないかどうか調べる	not os.path.exists(filepath)
部分文字列で文字列を二分する	s.partition(sub)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
文字列ひとつのりストを得る	[element]
UNIX時間のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: ネイビーを用いる	color = 'navy'
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
文字列が空白か	s.isspace()
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
数列とリストの散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
イテラブルの推移を実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
リストとリストについて散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategrey')
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
データフレームをJSONL形式のファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
縦棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
目盛り線	plt.grid(alpha=0.5)
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
折れ線グラフの色をオーキッドにセットする	plt.plot(データ列x, データ列y, color='orchid')
option: ホットピンク色を使用する	color = 'hotpink'
ファイルを追加モードで開いて]、fとする	f = open(filepath, mode='a')
破壊的に列によってデータフレームを降順にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データ列のどの値が頻出か見る	ds.mode()
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
改行なしに数値をプリントする	print(value, end='')
option: グレーを使用する	color = 'grey'
タイムスタンプデータが火曜日か調べる	aDatetime.weekday() == 1
スタックは空でない	len(deq) != 0
二つのオブジェクトが同じ参照かどうか確認する	obj is obj2
シーケンスを文字列に変換して連結する	''.join(map(str, iterable))
option: アクアを用いる	color = 'aqua'
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
xを整数にする	int(x)
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
xの小数点以下'3'桁までを出力する	print(':.3f'.format(x))
乱数シードをnで初期化する	random.seed(n)
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
日付データが火曜日かどうか確認する	aDate.weekday() == 1
下三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
整数nの十六進数文字列	hex(n)[2:]
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
青い実線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
折れ線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
実数のハイパボリック・サイン	math.sinh(x)
nーn2	n - n2
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
ヒストグラムを紺色を使って描画する	plt.hist(データ列, color='darkblue')
黒い下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
option: 星マーカーを使用する	marker = '*'
環境がWindowsか調べる	sys.platform.startswith('win32')
横棒グラフをダークサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='darksalmon')
棒グラフをドジャーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
SJISでファイルをオープンする]	open(filepath, encoding='shift_jis')
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
パールゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: 書き込み用に設定する	mode = 'w'
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
あらかじめ複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
２つの列を用いてによって降順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
散布図の上三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
文字列中にひとつでも非数字が含まれるか確認する	any(not c.isdigit() for c in s)
折れ線グラフを青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列の右側から余分な空白を取り除く	s.rstrip()
散布図をフローラルホワイト色として描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
データ列を平方根変換する	np.sqrt(データ列)
データフレームをグループ化し、各列に対し平均値を算出する	df.groupby(column)[column2].mean()
ピアソン積率相関係数を使ってデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
option: 色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
option: 色をペルーに変更する	color = 'peru'
オブジェクトにプロパティが存在するか	hasattr(obj, プロパティ名)
option: マーカーを下三角に設定する	marker = 'v'
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
折れ線グラフをダークシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ファイルからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
イテラブルからn個、ランダムに選ぶ	random.choices(iterable, k=n)
散布図を丸マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームを列によってソートして更新する	df.sort_values(by=column, inplace=True)
柱状図を上限から下限までの範囲で描く	plt.hist(データ列, range=(start, end))
option: シスルにグラフの色を設定する	color = 'thistle'
option: どのカラムも行に設定しない	index_col = None
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
xの小数点以下'2'桁の文字列にする	':.2f'.format(x)
列自身を2回あわせた直積	itertools.product(iterable, repeat=2)
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
Pandasで、エポック秒のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
nがn2で割り切れるかどうか	n % n2 == 0
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
黒色で変数を出力する	print(f'\033[30m{value}\033[0m')
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgray')
空のリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフの色をゲインズボロにする	plt.plot(データ列x, データ列y, color='gainsboro')
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
列の第一四分位数を計算する	ds.quantile(0.25)
ライトコーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
切片なしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフを半透明の破線を使って描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: グラフの色をパウダーブルーにする	color = 'powderblue'
マッピングから最後に追加した値をポップする	aDict.popitem()
パターンに大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
組のn番目からn2番目の部分	aTuple[n:n2]
データフレームの列の文字列を欠損値にする	df[col].replace(s, np.nan)
aListn番目から要素をポップする	aList.pop(n)
ファイルを追加用にオープンして]、fとする	f = open(filepath, mode='a')
nをn2だけ大きくする	n += n2
文字列の後ろから範囲を指定して部分文字列を探す	s.find(sub, start, end)
オブジェクトのフィールドの値を値に設定する	setattr(obj, プロパティ名, 値)
タプルの先頭の要素を見る	aTuple[0]
イテラブルに列を続ける	itertools.chain(iterable, iterable2)
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
文字列を区切りで区切って、文字列リストに変換する	s.split(sep)
折れ線グラフの下三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
option: どの列もインデックスに設定しない	index_col = None
文字列のn番目	s[n]
ヒストグラムをライトスチールブルー色を用いて描画する	plt.hist(データ列, color='lightsteelblue')
データフレームのリストカラムの値が欠損値	df[aList].isna()
青い一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データ列の推移を青い一点鎖線を使って描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
実数を百の位で丸める	round(x, -2)
イテラブルとリストをペアリングする	itertools.zip_longest(iterable, iterable2)
折れ線グラフを点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ライトグレー色を使用する	color = 'lightgrey'
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
オーキッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
0からN未満までのベクトル	np.arange(N)
配列をn個に等間隔でビニングする	pd.cut(aArray, n)
データフレームの指定された列をリストとして取り出す	df[column].values.tolist()
標準入力から1行分改行なしで読む	sys.stdin.readline().rstrip()
データフレームの中で列と列の重複を見る	df.duplicated(subset=[column, column2])
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
ダークカーキ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
パターンにASCII限定として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
小数点数以下の最大の整数	math.floor(x)
３つのデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
上限から下限までの範囲でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
文字列の変数名を数式に変換する	sympy.Symbol(s)
データフレームのリストカラムを千の位で四捨五入する	df[aList].round(-3)
データフレームの指定された４つの列だけ抽出する	df[[column, column2, column3, column4]]
データフレームのリストカラムの最頻値を算出する	df[aList].mode()
文字列でフォーマットして今日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
データフレームのリスト列の尖度を算出する	df[aList].skew()
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
option: 小麦色色を使う	color = 'wheat'
システム時刻で乱数を初期化する	random.seed()
実数のハイパボリック・コサインの逆数	math.acosh(x)
option: ライトスレイグレー色を使う	color = 'lightslategrey'
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
'A'列でデータフレームをまとめた表	df.groupby('A')
データフレームを列によってグループ分けして、グループごとの合計を計算する	df.groupby(column).sum()
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
日付データからn秒を減らす	aDate - datetime.timedelta(seconds=n)
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
棒グラフをブラック色を使って描画する	plt.bar(データ列x, データ列y, color='black')
線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
リストのn番目に文字列を挿入する	aList.insert(n, element)
昇順にデータフレームを列名リストでソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
縦軸の目盛の値を変更する	plt.yticks(目盛りの値リスト)
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
濃く色をグラフの描画で使う	sns.set(pallete='deep')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データ列をカテゴリデータにする	ds.astype(object)
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
option: ミディアムパープルに色を指定する	color = 'mediumpurple'
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
文字列の右側から部分文字列を除去する	s.rstrip(sub)
文字列が部分文字列で終わるかどうか調べる	s.endswith(sub)
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
ベクトルの行ごとの標準偏差	np.std(aArray, axis=1)
空白文字を使う	string.whitespace
散布図に菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
散布図でデータフレームをグラフ化し、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
回帰分析を部分的最小二乗法として行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
nがn2以下、または、n3以上	n <= n2 or n >= n3
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
何回まで再帰ができるかを	sys.getrecursionlimit()
本日が木曜日か	datetime.datetime.today().weekday() == 3
データフレームの相関行列ピアソン積率相関係数で	df.corr(method='pearson')
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
時間を用いる	import time
selectorsでマスクされたタプルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
空のロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
データフレームのリストで指定された列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
暗い赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
カウンタのktopをリストとして得る	aCounter.most_common(k)
データフレームを各列と列の組み合わせ毎に分類して合計を求める	df.groupby([column, column2], as_index=False).sum()
茶色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
カラムの尖度	ds.skew()
ファイルが存在しない	not os.path.exists(filepath)
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
第2コマンド引数を調べる	sys.argv[1]
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
列から集合	set(iterable)
1行から二つの整数を読み込む	A, B = map(int, input().split())
数値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
文字列が文字列より辞書順で前	s < s2
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
組内の要素は全て真	all(aTuple)
折れ線グラフの菱形マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフの色をアクアマリンにセットする	plt.plot(データ列x, データ列y, color='aquamarine')
ひとつ飛ばしでタプルを抽出する	aTuple[::2]
データフレームの列のNaNを直前の値にする	df[col].fillna(method='ffill')
文字列の中でパターンにマッチした文字列をリストに変換する	re.findall(pattern, s)
カラムの上位25%	ds.quantile(0.25)
集合から別のセットとの共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
カンマ区切りのファイルを読み込む	pd.read_csv(filename, sep=',')
ケンドール順位相関係数を使ってデータフレームの列と列の相関行列を算出する	df[[column, column2]].corr(method='kendall')
バイナリモードを用いてファイルをオープンして]fとする	f = open(filepath, mode='rb')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
ガウス過程分類器を用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
組をナンバリングする	enumerate(aTuple)
オブジェクトがバイト列クラスか	isinstance(obj, bytes)
option: 色を赤に設定する	color = 'red'
データフレームのリストカラムの未入力値を中央値に指定する	df[aList].fillna(df[aList].median())
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
散布図にクロス印を加える	plt.scatter(データ列x, データ列y, marker='x')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
データフレームの列をヒストグラムにする	plt.hist(df[column])
折れ線グラフの印を下三角印にする	plt.plot(データ列x, データ列y, marker='v')
データフレームを各列毎にグループ化して文字列というグループを使う	df.groupby(column).get_group(s)
変数を白色で表示する	print(f'\033[37m{value}\033[0m')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
数列と数列について散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
実数の複素数を計算する	complex(x)
線グラフを赤い一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
'A'列によってデータフレームをソートしてNaNを先頭にする	df.sort_values(by='A', na_position='first')
集合の全要素が別のセットに含まれるかどうか	aSet.issubset(aSet2)
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
散布図のマーカーを右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
データフレームの中の未入力値の合計を求める	df.isna().sum()
クラス分類のリコールを計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
青い破線としてイテラブルの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
データフレームで列に重複があるか見る	df.duplicated(subset=column)
ヒストグラムをドジャーブルー色を用いて描画する	plt.hist(データ列, color='dodgerblue')
グラフの色を明るくする	sns.set(pallete='bright')
データフレームのカラムのどの値が頻出か見る	df[col].mode()
黒い△マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
スレートブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
文字列の先頭の空白を除く	s.lstrip()
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
option: ライトスチールブルーを用いる	color = 'lightsteelblue'
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
横棒グラフをピーチパフ色を用いて描画する	plt.barh(データ列x, データ列y, color='peachpuff')
リストとリストについて散布図を描画して大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
year年の日付をオブジェクト化する	datetime.date(year=year, month=1, day=1)
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
入力から二つの浮動小数数を読み込む	A, B = map(float, input().split())
散布図の菱形マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
データフレームのインデックスがnの行を取り出す	df.loc[n]
Pandasで、データ列をPandasの日付型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
日付時刻データの時刻	aDatetime.time()
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
option: インディアンレッドにフォントの色を設定する	color = 'indianred'
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
黒い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データフレームからカラムを一つ選択する	df[[column]]
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
データフレームを２つの列を用いて昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
辞書をコピーする	aDict.copy()
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
option: グラフの色をダークバイオレットにする	color = 'darkviolet'
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
データフレームの最初	df.head()
表データから列を３つだけ選択する	df[[column, column2, column3]]
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームの列の文字列が正規表現文字列にマッチするデータを選択する	df[df[column].str.match(s)]
スプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='springgreen')
プロット中のフォントを指定する	sns.set(font=フォント名)
二次元タプルをフラット化する	sum(aTuple)
二つの集合の和集合	aSet.union(aSet2)
データフレームのリストカラムのNaNを最大値に設定する	df[aList].fillna(df[aList].max())
実線を使って数列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
ダークシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkseagreen')
最初の部分文字列で文字列を二分し、最初の文字列を使う	s.partition(sub)[0]
棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
一方に含まれ他方に含まれない集合を計算する	aSet.difference(aSet2)
ベクトルの列	aArray[:, 列番号]
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
プラットフォームの符号付き整数の最大値	sys.maxsize
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
ヒストグラムの色をディムグレーにセットする	plt.hist(データ列, color='dimgrey')
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフをスノー色を使って描画する	plt.plot(データ列x, データ列y, color='snow')
option: フォントの色をライトグリーンに設定する	color = 'lightseagreen'
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
JSONLファイルにエクセルファイル形式を用いてデータフレームを書き込む	df.to_excel(filename)
ベクトルは何次元か調べる	aArray.ndim
破線にヒストグラムの線のスタイルを設定する	plt.hist(データ列, linestyle='dashed')
色付きの点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームの列をカテゴリデータにする	df[col].astype(object)
option: グラフの色をゲインズボロに指定する	color = 'gainsboro'
option: データ型として３二ビット整数型を使用する	dtype = np.int16
線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
横棒グラフをスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='steelblue')
二変数の最も小さい値	min(x, y)
散布図の四角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
コマンドラインフラグの状態を調べる	sys.flags
Pandasで、データ列をフォーマットを用いて日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームを百の位で四捨五入する	df.round(-2)
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
Pandasで、UNIX秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
出力ストリームに文字列を書く	f.write(s)
小数点数を切り上げる	math.ceil(x)
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
一番左側の列をデータフレームから除く	df[df.columns[1:]]
データ列のヒストグラムを描画する	plt.hist(データ列)
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
option: ゲインズボロを使う	color = 'gainsboro'
辞書上で項目名が未定義	key not in aDict
データ列の値をValueMapで置き換える	ds.replace(ValueMap)
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
ビスク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームが重複しているかどうか調べる	df.duplicated()
数列とリストについて散布図をプロットして、左三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
オブジェクトのイテレータ	iter(obj)
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
日付時刻データが金曜日か	aDatetime.weekday() == 4
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
マッピングをJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
文字列を部分文字列で二分し最初の文字列を見る	s.partition(sub)[0]
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
文字列の最初の文字	s[0]
option: 色を青に設定する	color = 'blue'
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
三整数のGCD	math.gcd(n, n2, n3)
データ列がどれだけ分散しているか調べる	ds.var()
リストとイテラブルについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
双方向キューをリストに変換する	list(deq)
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
実数を切り上げる	math.ceil(x)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
文字列をコロンによって区切って、列挙する	s.split(':')
オプションで、出力先を標準出力に設定する	file = sys.stdout
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
タプルからキーの値	aDict.get(key)
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
集合の濃度	len(aSet)
ファイルパスの区切り記号	os.sep
折れ線グラフを一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
パープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
データフレームを2つの列で並べ直してNaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
option: 先頭のカラムをインデックスに設定する	index_col = 0
浮動小数点数が正の数か確認する	x > 0
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
データフレームのどの値が最も現れるか見る	df.mode()
文字列を最後の部分文字列で分割したときの前半の文字列	s.rpartition(sub)[0]
ピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
year年month月の日付をオブジェクト化する	datetime.date(year=year, month=month, day=1)
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームのリスト列の基本統計量	df[aList].describe()
行列の行列式を計算する	np.linalg.det(aArray)
小数点数の仮数	math.frexp(x)[0]
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
組の先頭のn要素を取り除く	aTuple[n:]
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ベクトルの行ごとの最小値	np.min(aArray, axis=1)
列の値で表データをグループ化して各グループごとの件数を知る	df.groupby(column).size()
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
セットをイミュータブルに変換する	frozenset(aSet)
空文字を使う	''
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
折れ線グラフを青紫色を用いて描画する	plt.plot(データ列x, データ列y, color='violet')
棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
データフレームの指定した列を取り出す	df[column]
データフレームのリストカラムの中にいくつ日付データがあるかカウントする	df[aList].isin([value]).sum()
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
データフレームのn行目より前抽出する	df[:n]
折れ線グラフの菱形印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データ列を千の位で丸めて整数型にする	ds.round(-3).astype(int)
丸マーカーを用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
シーケンスを集合にする	set(iterable)
変数が0に近づく際、数式の極限値を求める	sympy.limit(e, z, 0)
黒いダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフを破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのカラムの空文字を欠損値に変換しドロップする	df[col].replace('', np.nan).dropna()
nが正の数か確認する	n > 0
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
データフレームのデータ型の一覧	df.dtypes
折れ線グラフの丸印の大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
グラフに格子を描画する	plt.grid(True)
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームを配列に変換する	df.values
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
パレットトルコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
未初期化の配列	np.empty(要素数, dtype=np.int)
option: アスキー文字に限定する	flag = re.ASCII
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データ列の未入力値を直後の値で埋める	ds.fillna(method='bfill')
白色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
データフレームから重複する行をドロップして、更新する	df.drop_duplicates(inplace=True)
データ列の中にいくつ欠損値が存在するか数える	ds.isna().sum()
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
オブジェクトは文字列型のインスタンスかどうか調べる	isinstance(obj, str)
option: グリーンイエローにグラフの色を設定する	color = 'greenyellow'
イテラブルのコンビネーション	itertools.combinations(iterable, n)
折れ線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
大きさnでリストとリストについての散布図を描く	plt.scatter(データ列x, データ列y, s=n)
線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: グラフの線種を実線に指定する	linestyle = 'solid'
全要素が初期値の行列を初期化する	np.full((行数, 列数), 初期値, dtype=np.int)
日付データの年数を見る	aDate.year
ミディアムオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: バイナリ書き込みモードを用いる	mode = 'wb'
ヒストグラムの色をネイビーに変更する	plt.hist(データ列, color='navy')
ミディアムバイオレットレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
小数点数の双曲線正弦を求める	math.sinh(x)
n2分のn	n / n2
リストから重複を除去する	sorted(set(aList), key=aList.index)
グラフを見やすくする	import seaborn as sns
棒グラフをミディアムパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
２点間のユークリッド距離	math.dist(point, point2)
データフレームのシェイプ	df.shape
データフレームの行の名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
option: グラフの色をチョコレートに設定する	color = 'chocolate'
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
option: 三角マーカーを描画する	marker = '^'
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
オブジェクトはバイト列クラス	isinstance(obj, bytes)
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームを複数の列の値にグループ分けして、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームのカラムの中に日付データと文字列がいくつあるかカウントする	df[col].isin([value, value2]).sum()
y軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
非数字が文字列中にあるかテストする	any(not c.isdigit() for c in s)
再帰の最大回数を増やす	sys.setrecursionlimit(1000000)
散布図に右三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='>')
文字列を最後から空白で区切る	s.rsplit()
モデルを学習する	model.fit(説明変数, 目的変数)
データ列のユニークな要素を見る	ds.unique()
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームを列で小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームを二つの列によって小さい順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームのヒストグラムを縦横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
マッピングのエントリ数	len(aDict)
棒グラフを貝殻色を使って描画する	plt.bar(データ列x, データ列y, color='seashell')
文字列の末尾から空白を取り除く	s.rstrip(' ')
横軸の目盛りを非表示にする	plt.xticks([])
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
何回まで再帰ができるか、	sys.getrecursionlimit()
データフレームを10の位で四捨五入して整数型にする	df.round(-1).astype(int)
タイムスタンプデータが月曜日か	aDatetime.weekday() == 0
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
折れ線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームのカラムの欠損値を最頻値で置き換える	df[col].fillna(df[col].mode().iloc[0])
nが3で割り切れるか	n % 3 == 0
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームを列の値によってグループ化し要約統計量を求める	df.groupby(column).describe()
データフレームのそれぞれのグループごとの最大値を求める	df.groupby(column).max()
両端キューは空か調べる	len(deq) == 0
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
文字列を最初の部分文字列で分けたときの残りの文字列を求める	s.partition(sub)[-1]
データフレームから型リストで指定されたデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
JSONLファイルにBOM付きでデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
三数の最大値を求める	max(x, y, z)
option: シアンにフォントの色をする	color = 'cyan'
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
option: オレンジ色を使用する	color = 'orange'
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
'A'列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby('A').describe()
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
データフレームから列を３つだけ選択する	df[[column, column2, column3]]
リストの変化を青い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: NaNを含めない	dropna = True
文字列がタプルの要素でないか調べる	element not in aTuple
データフレームのカラムの欠損値をxで補う	df[col].fillna(x)
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
option: ライトサーモン色を使う	color = 'lightsalmon'
グリーンイエローにヒストグラムの色をセットする	plt.hist(データ列, color='greenyellow')
option: インディアンレッドを使う	color = 'indianred'
データフレームをグループ化し、それぞれの列に対し最小値を算出する	df.groupby(column)[column2].min()
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データフレームを列によって並べて、下の方n件を取り出す	df.sort_values(columns).tail(n)
正規表現で一度にデータフレームのリスト列をreplに置換する	df[aList].replace(pattern, repl, regex=True)
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
２つの文字列が等しくない	s != s2
最頻値でデータフレームのリストカラムのNaNを置換する	df[aList].fillna(df[aList].mode().iloc[0])
option: 文字列の示す文字コードを用いる	encoding = s
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
中央値でリストをビン分割する	pd.qcut(aList, 2)
セットの濃度	len(aSet)
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
データフレームが正規分布からどの程度、歪んでいるか確認する	df.kurt()
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
エクセルファイルファイルから全シートを読み込む	pd.read_excel(filename, sheet_name=None)
日本語をプロット中で表示できるようにする	sns.set(font='IPAexGothic')
データフレームを各列と列の組み合わせ毎に分類し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
option: EUCを使う	encoding = 'euc_jp'
データフレームの記述統計量	df.describe()
データフレームをインポートする	import pandas as pd
マップのキーを要素に設定する	aDict[key] = element
整数nの2進リテラル	bin(n)
数列とデータ列の散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
パラメータについて数式の積分を行う	sympy.integrate(e, z)
第一コマンド引数を調べる	sys.argv[1]
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
リストを白色で表示できる文字列にする	f'\033[37m{value}\033[0m'
配列の要素ごとの積	np.multiply(aArray, aArray2)
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
散布図をrgbの四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
Pandasで、データ列をタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
JSONファイルのfをデータに変換する	json.load(fin)
セットから任意の要素を取り除く	aSet.pop()
両端キューの右の要素	deq[-1]
xが一桁の正の整数か	0 <= x <= 9
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
散布図の四角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
黒い星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
標準出力をフラッシュする	sys.stdout.flush()
行列の最大値	np.max(aArray)
option: グラフの色をモカシンに変更する	color = 'moccasin'
データフレームから型型を抽出する	df.select_dtypes(ty)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
空の辞書を準備する	{}
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
行列の内積を求める	np.dot(aArray, aArray2)
数が負	x < 0
現在が月曜日	datetime.datetime.today().weekday() == 0
折れ線グラフにクロスマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
1行から二つの文字列を読む	A, B = map(str, input().split())
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
option: フォントの色を真紅に設定する	color = 'crimson'
ヒストグラムの色をミッドナイトブルーにセットする	plt.hist(データ列, color='midnightblue')
文字列の開始位置より後に部分文字列がある	s.find(sub, start) != -1
option: ライトスレイグレーに色を変更する	color = 'lightslategray'
散布図をライトグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: グリーン色を使う	color = 'green'
タイムスタンプデータが木曜日かどうか調べる	aDatetime.weekday() == 3
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
改行で区切って２つの文字列をプリントする	print(value, value2, sep='\n')
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: 破壊的に操作する	inplace = True
実数のハイパボリック・タンジェント	math.tanh(x)
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: フォントの色を暗い赤に設定する	color = 'darkred'
文字列の示すエンコーディングとしてファイルをオープンする]	open(filepath, encoding=s)
格子をプロットから消す	plt.grid(False)
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
多次元データをSVDを用いて濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
列によってデータフレームをグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
ヒストグラムをブラウン色で描画する	plt.hist(データ列, color='brown')
ファイルパスをバイナリ書き込みモードとして開く]	open(filepath, mode='wb')
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
チョコレート色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
棒グラフをサドルブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
現在が土曜日か	datetime.datetime.today().weekday() == 5
ファイルパスを文字列の示すエンコーディングで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
データフレームのリストで指定された列の相関行列	df[aList].corr()
ヒストグラムの色をダークゴールデンロッドにする	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgray')
散布図を黒い菱形マーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
option: ダークゴールデンロッドに色をする	color = 'darkgoldenrod'
棒グラフをライトスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームを列によって昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
線グラフをグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='green')
行列の和を求める	aArray + aArray2
オーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
マップにキーワード引数で加えて、更新する	aDict.update(**kwargs)
データフレームの中に文字列と文字列が存在するかどうか調べる	df.isin([value, value2])
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないかどうか調べる	s.find(sub, start, end) == -1
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
縦棒グラフを描く	plt.bar(ラベル列, データ列)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームを複数の列によってソートし、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データ列の欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
列を文字列に変換して、タブを使って連結する	'\t'.join(map(str, iterable))
改行を取り除いて1行だけ標準入力から読む	sys.stdin.readline().rstrip()
nとn2の和を求める	n + n2
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
option: ダークサーモンにグラフの色をセットする	color = 'darksalmon'
文字列は十進数字か調べる	s.isdecimal()
ヒストグラムの線の種類を実線に指定する	plt.hist(データ列, linestyle='solid')
nullに等しい値	None
option: ラベンダーにグラフの色を設定する	color = 'lavender'
列を正規表現でまとめて置換する	ds.replace(pattern, repl, regex=True)
データフレームのカラム名を指定された名前リストに置き換える	df.columns = columns
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
リストの要素を空にする	aList.clear()
ひとつでも小文字が文字列内に含まれる	any(c.islower() for c in s)
データフレームのリスト列は正規分布からどの程度、尖っているか見る	df[aList].skew()
最大値でデータ列のNaNを補う	ds.fillna(ds.max())
三二ビット整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
文字列の開始位置と終了位置の間に部分文字列が存在するかどうか調べる	s.find(sub, start, end) != -1
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
プロットに鉛直方向の点線をつける	plt.axvline(x=0, linestyle='dotted')
グラフの描画で暗く色を用いる	sns.set(pallete='dark')
集合から要素を取り除く	aSet.remove(element)
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
データ列のパーセンタイルを可視化する	plt.boxplot(データ列)
集合が空集合でないか	len(aSet) != 0
折れ線グラフの四角印の線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
キーがタプルに存在しないとき、要素を追加する	aDict.setdefault(key, element)
タプルの最初の文字列を探す	aTuple.index(element)
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
外れ値に強い単回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
トマト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームを'A'列を用いて小さい順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
ヒストグラムをやわらかい青色を使って描画する	plt.hist(データ列, color='cornflowerblue')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
キーが辞書に存在するかどうか調べる	key in aDict
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
各列毎にデータフレームをグループ化して列の最大値を求める	df.groupby(column)[column2].max()
option: グラフの色をフォレストグリーンに変更する	color = 'forestgreen'
棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ローングリーン色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
二つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
赤い一点鎖線を用いてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
option: ラインを細くする	linewidth = 3.0
赤い四角マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
回帰モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
nとkのコンビネーション	math.comb(n, k)
ファイルを書き込み用にBOM付きとしてオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
イテラブルと配列についての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
円プロットを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
option: 色をカーキに設定する	color = 'khaki'
縦棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
文字列の終了位置以前に部分文字列がある	s.find(sub, 0, end) != -1
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
日付データが木曜日かどうか調べる	aDate.weekday() == 3
文字列の末尾からタブを取り除く	s.rstrip('\t')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームの未入力値を平均値にセットする	df.fillna(df.mean())
カウンタの項目数を使う	len(aCounter)
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
nが1、もしくは2、もしくは3に等しいか	n == 1 or n == 2 or n == 3
日付データは日付データより先	aDate < aDate2
リストを緑色にする	f'\033[32m{value}\033[0m'
RANSACを使ってクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
貝殻色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
option: リネンを用いる	color = 'linen'
option: フォントの色をパパイヤウィップにセットする	color = 'papayawhip'
行列の行ごとの平均	np.mean(aArray, axis=1)
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
縦棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
カテゴリで色分けして、データフレームのカーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: 色のアルファを設定する	alpha = 0.5
データフレームを表示するとき最大列数を変更する	pd.set_option('display.max_columns', n)
実数の２乗	x ** 2
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
データフレームを各列毎に集約し、、文字列というグループの個数を計算する	df.groupby(column).size()[s]
書き込みできるようにファイルパスをSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
配列とリストの散布図を描画してマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
線グラフの色をシャルトリューズに変更する	plt.plot(データ列x, データ列y, color='chartreuse')
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームの中の列をビンニングする	pd.cut(df[col], aList)
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
パスのセパレータ記号を見る	os.sep
リストとリストについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
表を小さい順に複数の列を用いてソートし、更新する	df.sort_values(by=column, ascending=True, inplace=True)
イテラブルとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
グラフを描く準備をする	import matplotlib.pyplot as plt
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
要素を双方向キューの先頭から取り除く	deq.popleft()
データフレームの列を消す	df.drop(column, axis=1)
nが正の整数か調べる	n > 0
データフレームのカラムの中の欠損値の数を数える	df[col].isna().sum()
フォーマットfmtとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
書き込みモードでファイルを開く]	open(filepath, mode='w')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
option: ライトグリーンを使う	color = 'lightgreen'
グラフで使う題名を設定する	plt.title('グラフの名称')
シーケンスにイテラブルを続ける	itertools.chain(iterable, iterable2)
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
option: マーカーの色を白にする	markerfacecolor = 'white'
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
option: グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
縦棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
グラフのデータラベルの場所を指定する	plt.legend(loc=(x, y))
連立方程式を解く	sympy.solve([e, e2])
データフレームを表示するとき列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ヒートマップとしてデータフレームの相関行列を描画する	sns.heatmap(df.corr())
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
二つの最小の値を計算する	min(x, y)
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームのカラムのメディアン	df[col].median()
TSVを読み込む	pd.read_csv(filename, sep='\t')
複素数を求める	complex(x, y)
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
データフレームのデータを条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
option: ペールグリーンを使う	color = 'palegreen'
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
n個にデータフレームの中の列を等量で分割する	pd.qcut(df[col], n)
黒いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
下位集合	aSet.issubset(aSet2)
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
キューの要素をn個分回転させる	deq.rotate(n)
option: マーカーをダイアモンドに変更する	marker = 'D'
実数の逆正接	math.atan(x)
データフレームを'A'列を用いて並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
数式の部分分数化を行う	sympy.apart(e)
ナバホホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
リストに列を続ける	itertools.chain(iterable, iterable2)
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
データ列の推移を赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
nの各桁の総和	sum(map(int, str(n)))
TSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線グラフに▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
アクア色としてヒストグラムを描画する	plt.hist(データ列, color='aqua')
nがn2と等しいか調べる	n == n2
option: コーンズシルクを使う	color = 'cornsilk'
ラベンダー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
y軸を対数に変更する	plt.yscale('log')
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
割合付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
数列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
黒いバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列中に部分文字列が含まれないか判定する	sub not in s
スラグレーにヒストグラムの色をする	plt.hist(データ列, color='slategray')
横軸を対数に変更する	plt.xscale('log')
ランダムに表から選択する	df.sample()
マッピングの項目数を参照する	len(aDict)
２次元リストをフラット化する	sum(aList)
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
データフレームのリストカラムの標本標準偏差	df[aList].std()
散布図をバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='violet')
要素がセットのメンバーに含まれるか調べる	element in aSet
片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
option: ゲインズボロ色を使う	color = 'gainsboro'
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
データフレームを'A'列と'B'列によって大きい順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
横棒グラフを白色として描画する	plt.barh(データ列x, データ列y, color='white')
タブで区切って二つの値を表示する	print(value, value2, sep='\t')
文字列の中でパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s)
データ列を日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: アクアマリン色を用いる	color = 'aquamarine'
数値の平方根を算出する	sympy.sqrt(e)
多次元データを主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
横軸の目盛を対数に変更する	plt.xscale('log')
option: マーカーの色を変える	markerfacecolor = '#800080'
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
データフレームの中に日付データとがいくつ含まれるかカウントする	df.isin([value, value2]).sum()
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
黄緑にヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
符号付きで整数nを長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
青い一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
データフレームの列がxより大きくx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
変数を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
ヒストグラムの線種を実線に設定する	plt.hist(データ列, linestyle='solid')
データフレームの複数の列を並べてボックスチャートを用いて図示する	plt.boxplot([df['カラム'], df['カラム']])
ビン数nでリストをビン分割する	pd.cut(aList, n)
オブジェクトが無限に繰り返す列	itertools.repeat(element)
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
現在の月数を使う	datetime.datetime.today().month
データフレームの列がリストに含まれるデータを取り出す	df[df[column].isin(aList)]
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
簡単な説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
二進文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
乱数を正規分布として発生させる	random.normalvariate(mu=0.5, sigma=0.2)
option: マゼンタにグラフの色をセットする	color = 'magenta'
小数点数の角度	math.degrees(x)
実数が無限大か調べる	math.isinf(x)
プログラムの実行を強制的に終了する	sys.exit()
リストを四分位数ごとにビニングする	pd.qcut(aList, 4)
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
辞書を階層化する	collections.ChainMap(aDict)
散布図の大バツマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
TSVを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: 濃い青を使う	color = 'darkblue'
左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<')
アリスブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
浮動小数点数を百の位で四捨五入する	round(x, -2)
option: ゴールデンロッドを用いる	color = 'goldenrod'
値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
列の母標準偏差	ds.std(ddof=0)
option: ダークターコイズ色を使う	color = 'darkturquoise'
アルファベットの文字列	string.ascii_letters
ラインを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: マーカーを丸に変更する	marker = 'o'
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
文字列を最後の部分文字列で分割した場合の最初の文字列を取り出す	s.rpartition(sub)[0]
双方向キューの最初に数値を追加する	deq.appendleft(element)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
nでシードを固定する	random.seed(n)
組の末尾の要素	aTuple[-1]
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
nをn2で割った余りをnに代入する	n %= n2
折れ線グラフの星マーカーの色を変える	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: 線の種類を点線に指定する	linestyle = 'dotted'
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
空のマップ	{}
全要素を1で初期化した行列を作る	np.ones(要素数, dtype=np.int)
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
集合から全要素を除去する	aSet.clear()
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
n番目のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=n)
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
option: カデットブルーを使用する	color = 'cadetblue'
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
データ列の値はNaN	ds.isna()
データフレームから重複した行を落とす	df.drop_duplicates()
数式を浮動小数点数に変換する	float(e)
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
リストと配列についての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: マーカーの大きさを変える	markersize = 2.0
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
文字列を水色でプリントする	print(f'\033[36m{value}\033[0m')
nを二進数表現に変換する	bin(n)
文字列を最後の部分文字列で分けたときの残りの文字列	s.rpartition(sub)[-1]
本日のローカルなタイムスタンプ	datetime.datetime.today()
散布図をミディアムターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
等量で配列をn個にビン分割する	pd.qcut(aArray, n)
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
option: ディムグレー色を使う	color = 'dimgrey'
２つの実行結果を文字列で区切ってプリントする	print(value, value2, sep=s)
option: 印をクロスに変更する	marker = 'x'
折れ線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
データフレームの値は欠損値	df.isna()
ファイルを文字コードtextとして書き込みできるように開く]	open(filepath, mode='w', encoding=text)
option: 改行コードを旧Macに設定する	newline = '\r'
散布図の右三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
一方に含まれ、他方に含まれない集合を見る	aSet.difference(aSet2)
非数値データ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
横棒グラフをサンディーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='sandybrown')
数値を紫色化する	f'\033[35m{value}\033[0m'
数列とリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
ネイビー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
option: 文字コードtextを用いる	encoding = text
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
暗い赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
論文用にプロットを指定する	sns.set(context='paper')
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
散布図のバツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: ゴールデンロッド色を使う	color = 'goldenrod'
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
文字列の両端から部分文字列を除去する	s.strip(sub)
データフレームを二つの列によって分類して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
数列とリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: パパイヤウィップ色を使う	color = 'papayawhip'
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
ふたつのリストの共通りストを計算する	list(set(aList) & set(aList2))
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
スピアマン相関係数としてデータフレームのリストで指定された列の相関行列	df[aList].corr(method='spearman')
折れ線グラフの色をコーンフラワーブルーに指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームの列の中にいくつ欠損値が含まれるか数える	df[col].isna().sum()
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
縦棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
双曲線正弦の逆数	math.asinh(x)
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
データフレームの最後の列以外を説明変数にする	説明変数 = df[df.columns[:-1]]
データフレームの中にいくつ未入力値があるか数える	df.isna().sum()
option: エラーがあるとき、例外を発生させるように変更する	errors = 'strict'
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
n個にリストを等しい量になるようにビン分割する	pd.qcut(aList, n)
散布図の菱形印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
コーンフラワーブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
双方向キューの上限制限された長さを見る	deq.maxlen
リストとリストについての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
線を破線に変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
数式を方程式として解く	sympy.solve(e)
線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
データ列の中にいくつ日付データが含まれるか数える	ds.isin([value]).sum()
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
タプルを展開してプリントする	print(*aTuple)
日付データからn日分、減らす	aDate - datetime.timedelta(days=n)
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
日付データが日曜日か調べる	aDate.weekday() == 6
データフレームを表示するとき小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データフレームのカラムの中に含まれると文字列の個数をカウントする	df[col].isin([value, value2]).sum()
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
データフレームのカラムの中にある文字列と文字列の合計をカウントする	df[col].isin([value, value2]).sum()
データフレームの列名を指定された列名リストに置き換える	df.columns = columns
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
要素はセットに含まれるか	element in aSet
折れ線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
データフレームのリストカラムの第二四分位数	df[aList].median()
新しいヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データ列の離れ具合をプロット化する	sns.residplot(x=データ列, y=データ列)
カラムを整数に丸める	ds.round()
データフレームを'A'列でまとめたグループ	df.groupby('A')
タプルを累加する	itertools.accumulate(iterable)
変数がマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, -oo)
データフレームを列によって並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: フォントの色をタンに設定する	color = 'tan'
ホットピンクにヒストグラムの色を変更する	plt.hist(データ列, color='hotpink')
線グラフの色をダークレッドに指定する	plt.plot(データ列x, データ列y, color='darkred')
データフレームの各グループ毎の個数を計算する	df.groupby(column).count()
データフレームを列によってグループ化して、グループの個数を算出する	df.groupby(column).count()
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
プロットを論文に指定する	sns.set(context='paper')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
ライトスチールブルーにヒストグラムの色を変更する	plt.hist(データ列, color='lightsteelblue')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
リストとリストについて散布図を描き、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの列の値が欠損値	df[col].isna()
散布図をオールドレース色を使って描画する	plt.scatter(データ列x, データ列y, color='oldlace')
列をビン数nを用いて分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
ミントクリーム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームの行を条件で取り除くには	df[(df[column] == x) & (df[column2] == x2)]
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームを関数によってグループ化する	df.groupby(関数)
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
タイムスタンプデータは何年か知る	aDatetime.year
折れ線グラフの大バツマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームのリスト列の正規分布に対する上下広がり	df[aList].skew()
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
タブを見る	'\t'
option: スチールブルーにグラフの色を設定する	color = 'steelblue'
option: フォントの色をダークスラテグレーに指定する	color = 'darkslategray'
カウンタの項目一覧を使う	aCounter.keys()
分割数nで列をビニングする	pd.cut(ds, n)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
菱形印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームのカラムの未入力値を中央値で補う	df[col].fillna(df[col].median())
サーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
数のn乗	x ** n
option: ライトシアンにフォントの色を設定する	color = 'lightcyan'
入力ストリームをクローズする	f.close()
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
縦棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
縦棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
クラス分類をよりランダムなランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
折れ線グラフの丸マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
リスト中の要素は全て真	all(aList)
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
クロスマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
赤いポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列の最初から部分文字列を取り除く	s.lstrip(sub)
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
数式の簡単化を行う	sympy.sympify(e)
折れ線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
耐火レンガ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
option: フォントの色をトマトに設定する	color = 'tomato'
option: シエナ色を使う	color = 'sienna'
option: 暗い赤を使用する	color = 'darkred'
カラムの分散	ds.var()
カウンタをタプルとして更新する	aCounter.update(iterable)
ライトスレイグレーにヒストグラムの色をセットする	plt.hist(データ列, color='lightslategrey')
ロージーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
本日が何年か知る	datetime.datetime.today().year
散布図の下三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
option: 追加モードに設定する	mode = 'a'
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
データフレームのリストカラムを10の位で丸めて、整数にする	df[aList].round(-1).astype(int)
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
option: フォントの色をフォレストグリーンに設定する	color = 'forestgreen'
散布図のポイント印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: ライトスレイグレーを使う	color = 'lightslategrey'
組をリストに変換する	list(aTuple)
データ列の空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
既存のベクトルをベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
option: ヘッダをnamesに増やす	header = names
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
散布図をバツ印で描画する	plt.scatter(データ列x, データ列y, marker='x')
実数を小数点以下で丸める	round(x, n)
ラインを赤い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
リストを等量で分割数nとして分割する	pd.qcut(aList, n)
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
整数nは配列のいづれかか調べる	n in aArray
縦棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
日付データは何年か知る	aDate.year
データ列とリストの散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
データフレームを表示するとき最大行数をnにする	pd.set_option('display.max_rows', n)
列を累積した列	itertools.accumulate(iterable, operator.mul)
新しいリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
option: マルーン色を用いる	color = 'maroon'
option: グラフの色をミディアムオーキッドにする	color = 'mediumorchid'
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
データ列とイテラブルについて散布図をプロットしてマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
データフレームのリストカラムの平均値	df[aList].mean()
イエローグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
TSVファイルを用いてJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
黒い大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
整数nの8進数表現を使う	oct(n)
散布図にクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
浮動小数点数を複素数に変換する	complex(x)
タプル内の要素が少なくとも一つ真	any(aTuple)
タイムスタンプデータにn日を加算する	aDatetime + datetime.timedelta(days=n)
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列x, データ列y, color='rosybrown')
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
option: チョコレートにフォントの色を設定する	color = 'chocolate'
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
タイムスタンプデータを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフの色をライトスチールブルーにセットする	plt.plot(データ列x, データ列y, color='lightsteelblue')
カウンタを作る	collections.Counter()
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
ベージュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
回帰分析をアンサンブル学習として行う	sklearn.ensemble.VotingRegressor()
データ列と数列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
ヒストグラムの色を深紅に指定する	plt.hist(データ列, color='crimson')
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
ミディアムシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
実数のn乗の整数剰余	pow(x, n, y)
散布図に黒いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
改行しなくて文字列をプリントする	print(value, end='')
要素∉セット	element not in aSet
箱ヒゲ図を描画して、平均値を追加する	plt.boxplot(データ列, showmeans=True)
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
保存するカンマ区切りのファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: 色をピーチパフに指定する	color = 'peachpuff'
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
辞書をネスト化する	collections.ChainMap(aDict)
文字列を最後の部分文字列で分割した時の前半の文字列	s.rpartition(sub)[0]
今日をタプルにする	datetime.datetime.today().timetuple()
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
組を順に表示する	print(*aTuple)
数の3乗	x ** 3
二進文字列をバイナリにする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: グラフの色をダークグレーに変更する	color = 'darkgray'
n個にデータ列を分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: フォントの色をブラックに設定する	color = 'black'
前もって複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
日付時刻データが月曜日かテストする	aDatetime.weekday() == 0
ビン数nでデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
xでデータフレームの未入力値を置き換える	df.fillna(x)
スチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
option: オリーブ色を使う	color = 'olive'
回帰分析をバギングとして行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームのリストで指定された列の相関行列をヒートマップを用いてグラフ化する	sns.heatmap(df[aList].corr())
データフレームから最初の列を消す	df[df.columns[1:]]
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
カウンタの項目を一つ増やす	aCounter[element] += 1
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
関数の値によってデータフレームをグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(関数)]
部分文字列を文字列の最初から見つける	s.find(sub)
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
データフレームの列の文字列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
横棒グラフを青緑色を使って描画する	plt.barh(データ列x, データ列y, color='turquoise')
タプルのセットを作る	set(iterable)
実数の余弦の逆数	math.acos(x)
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
集合から値を除去する	aSet.remove(element)
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
折れ線グラフに左三角印を使う	plt.plot(データ列x, データ列y, marker='<')
option: 色をダークシアンにセットする	color = 'darkcyan'
ファイルパスを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
rgbのダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
リストとデータ列について散布図を描いて、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
赤い四角マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
option: 分類木の深さを制限する	maxdepth = n
全ての八進数字	string.octdigits
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
ファイル名がCSVファイルか	filename.endswith('.csv')
折れ線グラフを真紅色として描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームから型の列だけ取り出す	df.select_dtypes(ty)
本日は何月か知る	datetime.datetime.today().month
三数の最小値を求める	min(x, y, z)
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
散布図のポイント印を黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: namesを列の名前に設定する	names = names
イテラブルと配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
データフレームのリストカラムを四捨五入する	df[aList].round()
イテラブルから両端キューを作る	collections.deque(iterable)
マルーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
疑似乱数を求める	random.random()
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
日付データからn日を減らす	aDate - datetime.timedelta(days=n)
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームのリストカラムの欠損値を後の行の値で埋める	df[aList].fillna(method='bfill')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
ファイルを追加モードとして開く]	open(filepath, mode='a')
回帰モデルを作る	model.fit(説明変数, 目的変数)
データ列の中の未入力値の個数をカウントする	ds.isna().sum()
リストを円グラフにする	plt.pie(データ列, startangle=90)
二つの集合は集合と交わりを持たないかどうか確認する	aSet.isdisjoint(aSet2)
パールバイオレットレッドにヒストグラムの色を変更する	plt.hist(データ列, color='palevioletred')
ユニコードに対応する文字を使う	chr(unicode)
データフレームのNaNを平均値で埋める	df.fillna(df.mean())
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
要素ひとつのりストを作る	[element]
自然数最小公倍数	math.lcm(n, n2)
２つのデータフレームを横方向に一つにする	pd.merge(df, df2)
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
option: クリムゾン色を用いる	color = 'crimson'
作画のグリッドを白くする	sns.set(style='whitegrid')
集合を更新不能にする	frozenset(aSet)
option: アクアマリンにグラフの色を指定する	color = 'aquamarine'
日付データの曜日を整数で使う	aDate.weekday()
option: フォントの色をオレンジレッドに設定する	color = 'orangered'
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
リストにリストを追加し、広げる	aList.extend(aList2)
数列を縦棒グラフにする	plt.bar(ラベル列, データ列)
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を算出する	df.groupby(column).std()
円プロットの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
小数点数の床	math.floor(x)
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
散布図のバツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
エクセルファイルファイルからを読む	pd.read_excel(filename)
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
データフレームのリスト列のNaNを最小値で埋める	df[aList].fillna(df[aList].min())
カラムの第一四分位数を算出する	ds.quantile(0.25)
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
２つのデータフレームを異なる列をキーにして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
インプレースに両端キューの要素を反転する	deq.reverse()
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
現在の日数	datetime.datetime.today().day
黒い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
表データのカテゴリデータをダミー変数にする	pd.get_dummies(df)
データフレームのリスト列の未入力値を最大値に設定する	df[aList].fillna(df[aList].max())
データフレームのカラムの曜日の名前を使う	df[col].dt.weekday_name
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
rgbの下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの列の第一四分位数	df[col].quantile(0.25)
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
自然対数の底	math.e
オブジェクトが名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
option: ダークスラテグレー色を用いる	color = 'darkslategray'
タプルのn番目からn2番目までの部分を取り出す	aTuple[n:n2]
データフレームの中に日付データと文字列があるかどうか	df.isin([value, value2])
スノーにヒストグラムの色を指定する	plt.hist(データ列, color='snow')
文字列が英字か調べる	s.isalpha()
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
option: 文字列を改行するの代わりに用いる	end = s
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
数値を双方向キューのn番目に挿入する	deq.insert(n, element)
0からnまでの整数列を得る	list(range(n+1))
黄色色として線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
プロットのデザインをデフォルトでいい感じに指定する	sns.set()
８進数字を全て見る	string.octdigits
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
データフレームが重複しているか調べる	df.duplicated()
UNIXコマンドtextを実行する	os.system(text)
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
行列演算をする	import numpy as np
マッピングを複製する	aDict.copy()
option: 大文字・小文字を無視する	flag = re.IGNORECASE
文字列が漢字か	('\u4E00' <= ch <= '\u9FD0')
フォレストグリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームの指定された列を取り出す	df[column]
行列の列ごとの最大	np.max(aArray, axis=0)
文字列をコロンで区切って、列挙する	s.split(':')
浮動小数点数の最小値を計算する	sys.float_info.min
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
リストにリストを追加して拡張する	aList.extend(aList2)
▼マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
度数分布図のプロットして、正規化する	plt.hist(データ列, density=True)
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
ゼロ埋めされた配列を作る	np.zeros(要素数)
スレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
小数点数の自然対数を求める	math.log(x)
配列と配列について散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
リストに文字列を追加する	aList.append(element)
日付時刻データの分数	aDatetime.minute
option: ライトグレー色を使う	color = 'lightgrey'
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
行列と同じ大きさの空の行列を作る	np.empty_like(aArray)
option: ハニーデューにグラフの色を設定する	color = 'honeydew'
データフレームの相関行列	df.corr()
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
整数nの十六進文字列を使う	hex(n)[2:]
数値のインテグラルを行う	sympy.integrate(e)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
データフレームの列の種類	df.info()
Pythonインタプリタの実行ファイルの絶対パスを確認する	sys.executable
option: ダークゴールデンロッドを用いる	color = 'darkgoldenrod'
縦棒グラフをホワイト色で描画する	plt.bar(データ列x, データ列y, color='white')
option: フォントの色をディムグレーにセットする	color = 'dimgray'
option: ▼マーカーを加える	marker = 'v'
黒い四角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
オレンジレッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
ロバストな線形分類器を新規作成する	model = sklearn.linear_model.HuberClassifier()
散布図の下三角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
両端キューの末尾に要素を追加する	deq.append(element)
option: 小麦色にグラフの色を設定する	color = 'wheat'
ファイルを文字列の示すエンコーディングとして書き込み用に開く]	open(filepath, mode='w', encoding=s)
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
option: レモンシフォンを使う	color = 'lemonchiffon'
縦棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
リストをボックスチャートにする	plt.boxplot(データ列)
option: エンコーディングをEUCに指定する	encoding = 'euc_jp'
文字列の末尾の文字	s[-1]
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
棒グラフをイエローグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
両端キューの末尾	deq[-1]
option: フォントの色をライトスレイグレーにする	color = 'lightslategrey'
日付時刻データが日付時刻データと同時か	aDatetime == aDatetime2
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
データフレームを二つの列を用いてを用いて破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
実行結果の出力を改行なしに行う	print(value, end='')
文字列を空白で分割する	s.split()
縦棒グラフをミディアムシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データフレームを関数の値によってグループ化し要約統計量を求める	df.groupby(関数).describe()
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
option: ダークブルー色を使う	color = 'darkblue'
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
ヒストグラムの色をライトグレーにする	plt.hist(データ列, color='lightgray')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
配列と数列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: 耐火レンガ色を使用する	color = 'firebrick'
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
日付データが火曜日かどうか調べる	aDate.weekday() == 1
文字列が全てアスキー文字かどうか	s.isascii()
データフレームのインデックス名をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
文字列の出力を改行なしに行う	print(value, end='')
ヒストグラムをアクアマリン色を用いて描画する	plt.hist(データ列, color='aquamarine')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
折れ線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
八進文字列を整数に変換する	int(s, 8)
JSONフォーマットの文字列をロードする	json.loads(jsonString)
ペールグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
散布図の下三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
二つのデータフレームを列'A'と列'B'をキーにして外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
三自然数の最大公約数を求める	math.gcd(n, n2, n3)
ラベンダー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
グラフの見た目をデフォルトでイイ感じに指定する	sns.set()
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
二つの文字列が同じでない	s != s2
キューの先頭に要素を入れる	deq.appendleft(element)
データフレームから重複する行をドロップして更新する	df.drop_duplicates(inplace=True)
データフレームのNaNを最大値で埋める	df.fillna(df.max())
線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
表を列の値でグループ分けして、それぞれのグループの個数を求める	df.groupby(column).count()
option: グラフの色をオリーブにセットする	color = 'olive'
最大値を用いて正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
散布図の▲マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
スレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='slateblue')
データフレームの各次元のサイズを調べる	df.shape
データフレームを二つの列によって昇順に並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
実数が無限大かどうか	math.isinf(x)
スピアマン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
文字列がタプルの要素でないか	element not in aTuple
カーネル密度による分布図を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
n足すn2を求める	n + n2
カウンタのユニオンを計算する	aCounter | aCounter2
破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
赤い大バツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
データフレームから型リストで指定されたデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
データフレームのカラムの中の欠損値の合計をカウントする	df[col].isna().sum()
データフレームを'A'列によってソートして更新する	df.sort_values(by='A', inplace=True)
nがセットのどれかか調べる	n in aSet
列のユニークな値の個数を見る	ds.nunique()
平均値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].mean())
色付きの破線を用いてリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列をコロンで分割して、列挙する	s.split(':')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
列から両端キューを作る	collections.deque(iterable)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
タイムスタンプデータを浮動小数点数にする	aDatetime.timestamp()
空白で文字列を区切る	s.split()
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
横棒プロットを描く	plt.barh(ラベル列, データ列)
双方向キューからポップする	deq.pop()
option: ベージュ色を使う	color = 'beige'
option: グラフの色をライトグレーに設定する	color = 'lightgray'
線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームの中の未入力値をドロップする	df.dropna()
option: コーンズシルクを用いる	color = 'cornsilk'
本日が月曜日	datetime.datetime.today().weekday() == 0
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
option: フォントの色を暗い赤に変更する	color = 'darkred'
データフレームから列を二つのみ選択する	df[[column, column2]]
本日の日付時刻を使う	datetime.datetime.today()
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
数列の分布を可視化する	plt.scatter(データ列x, データ列y)
n個分キューの要素を輪番で回す	deq.rotate(n)
option: ネイビーにフォントの色を設定する	color = 'navy'
数式を部分分数に展開する	sympy.apart(e)
文字列を部分文字列で二分し後半の文字列を求める	s.partition(sub)[-1]
option: フローラルホワイトを使う	color = 'floralwhite'
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
実線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: ミディアムターコイズを使用する	color = 'mediumturquoise'
xを整数に変換する	int(x)
半透明の点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
縦軸の目盛を対数に変更する	plt.yscale('log')
'A'列の値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby('A').describe()
イテラブルとイテラブルのデカルト積	itertools.product(iterable, iterable2)
オプションで標準エラーを出力にする	file = sys.stderr
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
２次元タプルをフラット化する	sum(aTuple)
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
リストの長さ	len(aList)
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
ディレクトリをfilepathにする	os.chdir(os.dirname(filepath))
散布図をアンティークホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: バイナリ書き込みモードを使う	mode = 'wb'
rgbの丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームの列の値がx未満の行を選択する	df[df[column] < x]
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
折れ線グラフのバツマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
集合をタプルに変換する	tuple(aSet)
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
データフレームのカウントプロットを描く	sns.countplot(x='列名', data=df)
option: ライトシアンを使用する	color = 'lightcyan'
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
配列の和	aArray + aArray2
線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
L1ノルムを用いて正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームのカラムを散布図を用いて可視化する	sns.scatterplot(data=df, x='列名', y='列名')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
ダークシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
数が正の数か	x > 0
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データフレームのカラムのNaNを前の行の値で補う	df[col].fillna(method='ffill')
青いヒストグラムを描画する	plt.hist(データ列, color='b')
整数nの2進数表現	bin(n)
option: 下三角マーカーを使う	marker = 'v'
行列の要素ごとの積	np.multiply(aArray, aArray2)
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
半透明の実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
ファイルにxを文字列にして書く	f.write(str(x))
データフレームを昇順に'A'列でソートする	df.sort_values(by='A', ascending=True)
カウンタを辞書にする	dict(aCounter)
イテラブルからカウンタを作成する	collections.Counter(iterable)
option: グラフの色をミントクリームにセットする	color = 'mintcream'
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
赤い▽マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: ベージュを使用する	color = 'beige'
文字列が全てアルファベットかどうか調べる	s.isalpha()
データフレームの列が文字列で始まらないデータを選ぶ	df[not df[column].str.startswith(s)]
文字列を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
カラムの値をValueMapで一度に置き換える	ds.replace(ValueMap)
データフレームの列を破壊的に消す	df.drop(column, axis=1, inplace=True)
オブジェクトのプロパティを値にセットする	setattr(obj, プロパティ名, 値)
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
カウンタの要素一覧を求める	aCounter.keys()
黒い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
第二引数で指定したファイルの名前	sys.argv[1]
option: ダークスレートブルーにグラフの色をする	color = 'darkslateblue'
エポック秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
折れ線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
ブルーバイオレット色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
処理中の例外を情報を知る	sys.exc_info()
データフレームの値が欠損値かどうか調べる	df.isna()
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームを丸めて、整数型にする	df.round().astype(int)
データフレームをカンマ区切りのファイルから読み込む	pd.read_csv(filename, sep=',')
year年をタイムスタンプにする	datetime.datetime(year=year, month=1, day=1)
現在は何日か知る	datetime.datetime.today().day
データフレームを2つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列中にひとつでも非大文字があるか	any(not c.isupper() for c in s)
データフレームを列でソートして、上位n件を取り出す	df.sort_values(columns).head(n)
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
データフレームを小さい順に２つの列によって並べる	df.sort_values(by=['A', 'B'], ascending=True)
ゴーストホワイト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームの列が正規分布からどの程度尖っているか見る	df[col].skew()
文字列をバイト列に変換する	bytes(s)
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
データフレームを丸める	df.round()
真上位集合かどうか調べる	aSet > aSet2
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
赤い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
集合の浅いコピー	aSet.copy()
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
nはn2かどうか確認する	n == n2
option: グラフの色をパウダーブルーにセットする	color = 'powderblue'
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
縦棒グラフを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
折れ線グラフの色をアイボリーに変更する	plt.plot(データ列x, データ列y, color='ivory')
列とイテラブルをつなぐ	itertools.chain(iterable, iterable2)
オブジェクトが数値	isinstance(obj, (int,float))
黒色で文字列をプリントする	print(f'\033[30m{value}\033[0m')
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
オプションで、ファイルを使用する	file = sys.open(filename, 'w')
変数について数式を微分する	sympy.diff(e, z)
option: ローングリーン色を用いる	color = 'lawngreen'
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
リストをn個に等しい量になるようにビン分割する	pd.qcut(aList, n)
散布図の△マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの未入力値を中央値に設定する	df.fillna(df.median())
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
データフレームの列の値がx以下の行を選択する	df[df[column] <= x]
データフレームのリストカラムの中にと日付データがいくつあるかカウントする	df[aList].isin([value, value2]).sum()
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
コマンドライン引数	sys.argv
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
ビン数nを使ってデータ列を等しい量になるようにビン分割する	pd.qcut(ds, n)
データフレームを各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
数式をパラメータについて微分する	sympy.diff(e, z)
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
Pandasでフォーマットとしてデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
縦棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
KNNでクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
見やすいグラフを使う準備をする	import seaborn as sns
小数点数のtanを計算する	math.tan(x)
オブジェクトはタプルの要素かどうか調べる	element in aTuple
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
ヒストグラムをパパイヤウィップ色として描画する	plt.hist(データ列, color='papayawhip')
xを文字列にする	str(x)
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
辞書の値の一覧	aDict.values()
グラフをポスター用に変更する	sns.set(context='poster')
辞書に項目名が存在しないとき、要素を追加する	aDict.setdefault(key, element)
ファイルパスの拡張子付きのファイル名を求める	os.path.basename(filepath)
リストをシアンでプリントする	print(f'\033[36m{value}\033[0m')
列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
空のリストを作る	[]
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
グラフの描画で明るくカラーパレットを使用する	sns.set(pallete='bright')
モカシン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: グラフの色をサンディーブラウンにセットする	color = 'sandybrown'
部分文字列が文字列中にあるかテストする	sub in s
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
文字列の長さを求める	len(s)
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
リストとリストを接続する	aList + aList2
option: カーキを使用する	color = 'khaki'
縦棒グラフを描画して左寄せする	plt.bar(ラベル列, データ列, align='edge')
option: 追加モードを使う	mode = 'a'
カラムの未入力値を前の行の値に設定する	ds.fillna(method='ffill')
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
アルファベットを全部見る	string.ascii_letters
再帰エラーを防ぐ	sys.setrecursionlimit(1000000)
２つの列でデータフレームを並べる	df.sort_values(by=['A', 'B'])
タイムスタンプデータにn秒を加える	aDatetime + datetime.timedelta(seconds=n)
option: フォントの色をグレーに指定する	color = 'grey'
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
回帰木分析を行う	model = sklearn.tree.DecisionTreeRegressor()
リストと配列についての散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームを列名リストによってグループ化し、要約統計量を求める	df.groupby(columns).describe()
文字列を最後の部分文字列で分割した場合の後半の文字列	s.rpartition(sub)[-1]
option: セパレータを改行にする	sep = '\n'
データ列の折れ線グラフを星印として描画する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの左三角印の色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームのカラムの歪度を求める	df[col].kurt()
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
折れ線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
オプションで出力先を標準出力に設定する	file = sys.stdout
option: グラフの色をフローラルホワイトにセットする	color = 'floralwhite'
組とタプルを結合する	aTuple + aTuple2
ファイルをオープンして]、読み込みストリームを求める	open(filepath, mode='r')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
文字列の開始位置から終了位置の範囲で部分文字列の出現回数	s.count(sub, start, end)
option: 色をマゼンタに設定する	color = 'magenta'
ダークマゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
文字列中に非数字が含まれるか調べる	any(not c.isdigit() for c in s)
列が正規分布からどの程度、尖っているか見る	ds.skew()
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
標準入力から1行だけ読む	sys.stdin.readline()
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
文字列を最後の部分文字列で二分し最初の文字列を使う	s.rpartition(sub)[0]
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか調べる	df[aList].kurt()
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
モデル教師データでを学習する	model.fit(説明変数, 目的変数)
数値を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームを列によって並べ直して、新しい行を加える	df.sort_values(columns).reset_index()
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
浮動小数点数を２乗する	x ** 2
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
箱ひげ図にラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
分数を用いる	import fractions
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
要素を集合から取り除く	aSet.remove(element)
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
辞書の全をクリアする	aDict.clear()
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をシアンにする	plt.hist(データ列, color='cyan')
双方向キューの大きさを求める	len(deq)
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
nにn2を足して代入する	n += n2
配列とリストについて散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データ列の推移を半透明の破線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームのリストカラムを10の位で丸めて整数型にする	df[aList].round(-1).astype(int)
option: グラフの色を濃い青に設定する	color = 'darkblue'
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
今日の年数	datetime.datetime.today().year
カウンタのユニークなキーを列挙する	list(aCounter)
シスル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
印字できる文字を全て求める	string.printable
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
マップの全値を空にする	aDict.clear()
xが一桁の数かどうか	-9 <= x <= 9
シアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
option: データ型を指定する	dtype = bool
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
多次元尺度構成法として濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
データ列を折れ線プロットで描画する	plt.plot(データ列x, データ列y)
一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図を右三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='>')
全要素を初期値で初期化したベクトルを作る	np.full(要素数, 初期値, dtype=np.int)
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
カデットブルー色でヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
浮動小数点数のn乗の数剰余を求める	pow(x, n, y)
日付時刻データの時間数	aDatetime.hour
リストと配列について散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
カテゴリ別で色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
カウンタをシーケンスで更新する	aCounter.update(iterable)
文字列に漢字が含まれるか	re.search('[\u4E00-\u9FD0]', s)
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ベクトルの差	aArray - aArray2
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
データフレームの中の欠損値を削除する	df.dropna()
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
数式の簡略化を行う	sympy.sympify(e)
データフレームの列の名前一覧で指定したカラムを削除する	df.drop(columns, axis=1)
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
nからn2までの整数列を作る	list(range(n, n2+1))
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
変数を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
折れ線グラフの星マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
辞書の浅いコピーを作る	aDict.copy()
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
サドルブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
option: フォントの色をライトスレイグレーに変更する	color = 'lightslategrey'
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
黒いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
数値を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
列によってで破壊的にデータフレームをソートする	df.sort_values(by=column, inplace=True)
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
日付時刻データがタイムスタンプデータより前かテストする	aDatetime < aDatetime2
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データを四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
nがn2よりも大きいか	n > n2
データフレームから数値データのカラムのみ選択する	df.select_dtypes('number')
データフレームのカラムは何曜日か見る	df[col].dt.weekday_name
逆正弦を求める	math.asin(x)
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
文字列モジュールをインポートする	import string
印字を全部見る	string.printable
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームのカラムの中に文字列と日付データがいくつあるか数える	df[col].isin([value, value2]).sum()
シーケンスを文字列リストに変換して、タブによって連結する	'\t'.join(map(str, iterable))
option: 菱形印を使う	marker = 'D'
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
半透明の実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
棒グラフを耐火レンガ色を使って描画する	plt.bar(データ列x, データ列y, color='firebrick')
option: 色をダークグレーに指定する	color = 'darkgrey'
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: グラフの色をオリーブに変更する	color = 'olive'
散布図をライトシアン色として描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: マゼンタ色を使う	color = 'magenta'
変数名をキーとして辞書を作る	dict(name=element)
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
option: スキップするフッタをnに変更する	skipfooter = n
列を文字列に変換してタブでつなげる	'\t'.join(map(str, iterable))
option: グリーン色を用いる	color = 'green'
option: 未入力値を先頭に来るようにする	na_position = 'first'
データフレームから列を３つ選択する	df[[column, column2, column3]]
散布図をサドルブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
option: インディアンレッド色を用いる	color = 'indianred'
両端キューの末尾にシーケンスの各要素を順に追加する	deq.extend(iterable)
nにn2を掛ける	n * n2
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
バイアスなしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
２つの文字列を順にプリントする	print(value, value2)
散布図の△マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
配列を文字列として連結する	''.join(map(str, iterable))
数値を黒色化する	f'\033[30m{value}\033[0m'
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データフレームの列の中に文字列と文字列がいくつあるか求める	df[col].isin([value, value2]).sum()
配列の型を求める	aArray.dtype()
option: 色をライトスカイブルーに設定する	color = 'lightskyblue'
折れ線グラフをシーグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='seagreen')
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
小数点数のk進対数を求める	math.log(x, k)
10を底とする浮動小数点数の対数	math.log10(x)
文字列を赤色化する	f'\033[31m{value}\033[0m'
プロットの見栄えをいい感じに設定する	sns.set()
大文字を全て使う	string.ascii_uppercase
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
組の最後からn番目以前の部分を取り出す	aTuple[:-n]
nがn2以上か調べる	n >= n2
カテゴリで色分けして、に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
棒プロットの幅をする	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データ列の中に含まれる文字列の合計を数える	ds.isin([value]).sum()
赤いポイントマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
ガウス過程として回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
option: グラフの色をオールドレースに変更する	color = 'oldlace'
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
カウンタ同士でユニオン演算する	aCounter | aCounter2
option: 色をミッドナイトブルーに設定する	color = 'midnightblue'
JSONLファイルに小数点以下3桁までデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
二つの列によって昇順にデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
未初期化の行列を作る	np.empty((行数, 列数), dtype=np.int)
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
実部と虚部から複素数を作る	complex(x, y)
スタックから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
anemptystring	''
現在の再帰の最大回数を知る	sys.getrecursionlimit()
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
インディゴ色としてヒストグラムを描画する	plt.hist(データ列, color='indigo')
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
散布図の印をダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
option: パウダーブルー色を使う	color = 'powderblue'
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ベクトルから重複を除いた行列を作る	np.unique(aArray)
n個の集まりからk個選ぶ方法を算出する	math.comb(n, k)
イテラブルからn個サンプリングする	random.sample(iterable, k=n)
散布図に赤い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
MAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
文字列内にひとつでも空白がある	any(c.isspace() for c in s)
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
カラムがどれだけ、分散しているか確認する	ds.var()
見やすいグラフを使う	import seaborn as sns
nとn2の積	n * n2
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
データフレームの第一四分位数を求める	df.quantile(0.25)
リストの末尾から要素をポップする	aList.pop()
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
破壊的にデータフレームを'A'列によってによってソートする	df.sort_values(by='A', inplace=True)
折れ線グラフの三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の下三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの列の文字列を未入力値に変換する	df[col].replace(s, np.nan)
KNNでクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データフレームのn行まで取り出す	df[:n]
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: シャルトリューズを使用する	color = 'chartreuse'
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
散布図のダイアモンドマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
option: ベージュ色を使用する	color = 'beige'
ヒストグラムをゲインズボロ色を使って描画する	plt.hist(データ列, color='gainsboro')
疑似乱数を正規分布で得る	random.normalvariate(mu=0.5, sigma=0.2)
グラフのデザインを良くする	import seaborn as sns
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データ列間のRMSEを計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
整数nがリストのどれかか	n in aList
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
グラフを明るくする	sns.set(pallete='bright')
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
イテラブルと列の直積	itertools.product(iterable, iterable2)
文字列の中でケースを無視して正規表現にマッチした文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームを'A'列でソートし、更新する	df.sort_values(by='A', inplace=True)
アイボリー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
プロットをPNGファイルとして保存する	plt.savefig('foo.png')
小数点数のコサインの逆数	math.acos(x)
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームの中に含まれると文字列の合計を数える	df.isin([value, value2]).sum()
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
２つの浮動小数点数が十分に近い	math.isclose(x, x2)
データフレームのカラムはどれだけ、分散しているか見る	df[col].var()
アヤメのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
データフレームのインデックスの名前を一度に、nameからname2に変更する	df.rename(index={name: name2})
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
プロットの描画でパステル調にカラーテーマを用いる	sns.set(pallete='pastel')
文字列TSVからCSVをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
辞書からカウンタを作成する	collections.Counter(aDict)
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
実数の平方根を計算する	math.sqrt(x)
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
実数を文字列に変換する	str(x)
ヒストグラムをミディアムブルー色を使って描画する	plt.hist(データ列, color='mediumblue')
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
データフレームを複数の列によって昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
双方向キューに要素を積む	deq.append(element)
回帰分析をRANSACとしてする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
既存のファイルを文字列の示す文字コードで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
配列とリストの散布図を描いて、マーカーをダイアモンドに指定する	plt.plot(データ列x, データ列y, marker='D')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
両端キューの右側にイテラブルの各要素を入れる	deq.extend(iterable)
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
option: コーラルを使用する	color = 'coral'
オリベドラブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: 色をカデットブルーに設定する	color = 'cadetblue'
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
ファイルパスからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
文字列の開始位置からと終了位置までの間に部分文字列がないかどうか	s.find(sub, start, end) == -1
折れ線グラフの色をデピンクにする	plt.plot(データ列x, データ列y, color='deeppink')
辞書から項目名で指定されたエントリをポップする	aDict.pop(key)
両端キューは空でないかテストする	len(deq) != 0
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
配列を横棒グラフにする	plt.barh(ラベル列, データ列)
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
値∈集合	element in aSet
nまでの奇整数リスト	list(range(1, n, 2))
双方向キューから最初の要素を取り出す	deq.remove(element)
option: フォントの色をオレンジに指定する	color = 'orange'
回帰分析をスタッキングを使ってする	sklearn.ensemble.StackingRegressor()
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
モカシン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
配列と数列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
既存のファイルパスを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
文字列中の片仮名をひらがなにする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
列を文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
nが1もしくは2、もしくは3に等しいかどうか判定する	n == 1 or n == 2 or n == 3
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
折れ線グラフのクロス印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
フクシアにヒストグラムの色を指定する	plt.hist(データ列, color='fuchsia')
ダークバイオレット色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
表データの列の名前を変更する	df.rename(columns={column: name})
nの桁数を求める	len(str(n))
データフレームの列のNaNを平均で置換する	df[col].fillna(df[col].mean())
ダークスラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
表のそれぞれのグループごとの分散を算出する	df.groupby(column).var()
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
数列と配列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
option: ライトグリーン色を用いる	color = 'lightgreen'
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
トマト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
option: 四角マーカーを描画する	marker = 's'
半透明の一点鎖線として折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
暗い赤色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
データフレームのカラムの中に日付データがあるか調べる	df[col].isin([value])
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ヒストグラムの色をパープルに変更する	plt.hist(データ列, color='purple')
散布図の色をバイオレットにする	plt.scatter(データ列x, データ列y, color='violet')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
黒い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
スピアマン相関係数としてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='spearman')
配列の値	aArray[行番号, 列番号]
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームから指定された2列を抽出する	df[[column, column2]]
複数のデータフレームを縦方向につなぐ	pd.concat([df, df2, df3], axis=0)
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
辞書から項目名の値をエラーなく見る	aDict.get(key, None)
カラムとしてデータフレームを集計して、各グループ毎の件数を知る	df.groupby(column).size()
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
両端キューからポップする	deq.pop()
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
nが正の数かどうか調べる	n > 0
珊瑚色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
赤い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ブースティングでクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
破壊的に重複をデータフレームから削除する	df.drop_duplicates(inplace=True)
データフレームを列ごとにグループ分けして、最小値を求める	df.groupby(column).min()
線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
四角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
実数のコサインの逆数を計算する	math.acos(x)
小数点数の常用対数	math.log10(x)
文字コードtextで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
パパイヤウィップ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ヒストグラムをグリーンイエロー色を用いて描画する	plt.hist(データ列, color='greenyellow')
散布図の▼マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ヒストグラムの色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
横棒グラフをダークカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
辞書のコピーを準備する	aDict.copy()
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームのn行以降抽出する	df[n:]
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
nが2で割り切れる	n % 2 == 0
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
マルーン色としてヒストグラムを描画する	plt.hist(データ列, color='maroon')
ポイントマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
データ列の各データが何回出現するか見る	ds.value_counts()
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カーキ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
実数を実数で割った剰余を計算する	math.remainder(x, x2)
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
option: フォントの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
3自然数の最大公約数	math.gcd(n, n2, n3)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
ヒストグラムの色を黄色にする	plt.hist(データ列, color='yellow')
オブジェクトがリストに含まれるか調べる	element in aList
整数が負かどうか	x < 0
クラス分類の偽陰性をヒートマップを使って見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
後の行の値でデータフレームの列のNaNを置換する	df[col].fillna(method='bfill')
カウンタをイテラブルで更新する	aCounter.update(iterable)
コマンド引数の一覧を	sys.argv[1:]
コードポイントの最大値	sys.maxunicode
文字列の右端から改行を取り除く	s.rstrip('\n')
イテラブルとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
スピアマンで表データの列と列の相関行列を算出する	df[[column, column2]].corr(method='spearman')
データフレームのリスト列の相関行列ケンドール相関係数を使って	df[aList].corr(method='kendall')
整数nの十六進文字列	hex(n)[2:]
データフレームのデータ型の一覧を使う	df.dtypes
y軸の目盛りを対数に変更する	plt.yscale('log')
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
リストから配列を初期化する	np.array(aList)
イテラブルを文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
データフレームを各列と列の組み合わせ毎にグループ分けして平均値を計算する	df.groupby([column, column2], as_index=False).mean()
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
ファイルに文字列を書く	f.write(s)
オブジェクトはタプルクラスのインスタンスか	isinstance(obj, tuple)
データフレームのリストカラムのpercent分位数を算出する	df[aList].quantile(percent/100)
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
option: ライトグレーにフォントの色を設定する	color = 'lightgray'
列をキーにして二つの表データを右ジョインする	pd.merge(df, df2, on=column, how='right')
データフレームのリストで指定された列のヒートマップを描画する	sns.heatmap(df[aList].corr())
ピアソンでデータフレームの相関行列	df.corr(method='pearson')
リストを複製する	aList.copy()
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
最初の文字列をキューから削除する	deq.remove(element)
データフレームのカラムを十の位で四捨五入する	df[col].round(-1)
列のコンビネーションを求める	itertools.combinations(iterable, n)
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
option: 大バツマーカーを使う	marker = 'X'
オブジェクトはバイト列クラスのインスタンスかどうか調べる	isinstance(obj, bytes)
データ列の75パーセンタイル	ds.quantile(0.75)
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
predicateFuncを適用したときTrueになる列の要素	itertools.dropwhile(predicateFunc, iterable)
リスト内の要素は少なくとも一つ真かどうか	any(aList)
何回まで再帰ができるかを知る	sys.getrecursionlimit()
ラベンダーブラッシュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
option: グラフの色をミントクリームに設定する	color = 'mintcream'
プラットホームがWindowsか	sys.platform.startswith('win32')
最大値・最小値として整数乱数を計算する	random.randint(最小値, 最大値)
ヒストグラムを複数並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
オプションで、出力先を標準出力に変更する	file = sys.stdout
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
データフレームのリストカラムのどの値が頻出か調べる	df[aList].mode()
線グラフをグレー色を使って描画する	plt.plot(データ列x, データ列y, color='grey')
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
浮動小数点数をn乗する	x ** n
書き込み用にBOM付きを用いてファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
現在の月数	datetime.datetime.today().month
イテラブルの全順列を得る	itertools.permutations(iterable)
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ヒストグラムの色をダークレッドに変更する	plt.hist(データ列, color='darkred')
線グラフをスチールブルー色を使って描画する	plt.plot(データ列x, データ列y, color='steelblue')
イテラブルの集合を用意する	set(iterable)
n個の集まりからk個重複なく選ぶ方法を算出する	math.comb(n, k)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
改行せずに文字列を表示する	print(value, end='')
0からnまでのスライス	slice(n)
降順に破壊的に'A'列でデータフレームを並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
option: n番目のカラムをインデックスに変更する	index_col = n
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
グラフを描画する	import matplotlib.pyplot as plt
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
ペールグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
option: バイオレットを使用する	color = 'violet'
predicateFuncが真とならない列の部分	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
xが-9以上、9以下	-9 <= x <= 9
データフレームの中にと日付データが含まれるか確認する	df.isin([value, value2])
線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図をパープル色を使って描画する	plt.scatter(データ列x, データ列y, color='purple')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
データフレームのカラムは何分か見る	df[col].dt.minute
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
青緑色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
２つの変数をそれぞれ定義する	x, y = i, j
折れ線グラフのポイント印の色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
タブ区切りのファイルからCSVをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をコーンフラワーブルーにセットする	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
option: グラフの色をサドルブラウンに変更する	color = 'saddlebrown'
ケンドール相関係数を使ってデータフレームのカラムと列の相関行列を求める	df[[column, column2]].corr(method='kendall')
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
データフレームのカラムを正規表現patternでまとめて置き換える	df[col].replace(pattern, repl, regex=True)
データフレームを列を用いてによって降順にソートする	df.sort_values(by=column, ascending=False)
横棒グラフをライトサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
xの小数点以下'2'桁まで出力する	print(':.2f'.format(x))
既存のベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームの列と列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
データフレームの列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
option: 色をダークグリーンに設定する	color = 'darkgreen'
折れ線グラフのクロスマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: ナバホホワイト色を使う	color = 'navajowhite'
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データ列のpercent分位数を求める	ds.quantile(percent/100)
カウンタのktopを列挙する	aCounter.most_common(k)
色付きの実線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
文字列の右側からタブを取り除く	s.rstrip('\t')
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
散布図を赤い星マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフをコーンフラワーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
インディアンレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
度数分布図を２つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
横棒グラフをスプリンググリーン色を使って描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームのカラムは何年か見る	df[col].dt.year
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームをNaNを含めて列の値で集約する	df.groupby(column, dropna=False)
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
Pandasで、文字列の数値時刻からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームのリストカラムの尖度	df[aList].skew()
線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
コマンドの第一引数	sys.argv[1]
ビスク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
有理数を使う	import fractions
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
range関数の無限版	itertools.count(start=n, step=step)
option: レモンシフォンに色を指定する	color = 'lemonchiffon'
ファイルパスをBOM付きで書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
文字列をカンマで区切って、列挙する	s.split(',')
線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームの二つの列を並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
rgbのポイントマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
2つの文字列を辞書順で比較する	s < s2
折れ線グラフの色をパールゴールデンロッドにする	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: スチールブルー色を使う	color = 'steelblue'
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
二つのデータフレームを列をキーとして内部ジョインする	pd.merge(df, df2, on=column, how='inner')
nが1もしくは2か調べる	n == 1 or n == 2
文字列を紫色でプリントできる文字列にする	f'\033[35m{value}\033[0m'
文字列の右端から空白を除去する	s.rstrip()
要素がセットに含まれないか調べる	element not in aSet
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
折れ線グラフの色をダークブルーに変更する	plt.plot(データ列x, データ列y, color='darkblue')
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
本日が木曜日	datetime.datetime.today().weekday() == 3
レベッカパープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列のサフィックスから部分文字列を除く	s.removesuffix(sub)
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
アクア色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgrey')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
文字列は片仮名か調べる	('ァ' <= ch <= 'ン')
カテゴリで色付けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列中の部分文字列を別の文字列に回数を制限して置換する	s.replace(sub, newsub, n)
散布図の丸印の色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームを100の位で丸めて整数型にする	df.round(-2).astype(int)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
データ列の折れ線グラフを描画し、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
小数点数の二進対数	math.log2(x)
Pandasで、エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
データフレームを表示するとき小数点以下をn桁に変更する	pd.set_option('precision', n)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
文字列を空白によって区切る	s.split()
二つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
文字列を最後の部分文字列で分けた時の残りの文字列を使う	s.rpartition(sub)[-1]
キーが辞書上で定義済みか調べる	key in aDict
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
散布図をrgbの▲マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
列からユニークな値を抽出しリスト化する	ds.unique().tolist()
折れ線グラフの色をダークスレートブルーにセットする	plt.plot(データ列x, データ列y, color='darkslateblue')
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
散布図の上三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線グラフの大バツ印を黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
nが一桁の整数か	0 <= n <= 9
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
散布図をシスル色を用いて描画する	plt.scatter(データ列x, データ列y, color='thistle')
数値を太字化する	f'\033[1m{value}\033[0m'
ヘッダー行を左寄せにセットする	pd.set_option('colheader_justify', 'left')
赤い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ファイルを読み込みモードとしてオープンする]	open(filepath, mode='r')
データフレームのリストカラムの中に日付データと文字列が含まれる	df[aList].isin([value, value2])
日付時刻データの日付を見る	aDatetime.date()
横棒グラフを真紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
浮動小数点数を浮動小数点数から減算する	x - y
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
平均値でデータフレームのリスト列のNaNを埋める	df[aList].fillna(df[aList].mean())
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
データ列をPandasの日付型に変換する	pd.to_datetime(ds)
option: n番目のカラムをインデックスに設定する	index_col = n
t-SNEとしてパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
小数点数の双曲線余弦	math.cosh(x)
option: 黄色を使用する	color = 'yellow'
日付データが水曜日か	aDate.weekday() == 2
option: グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
イテラブルとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
アクアマリン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
option: BOM付きを用いる	encoding = 'utf_8_sig'
nが5の倍数か調べる	n % 5 == 0
nがn2以下または、n3以上かどうか	n <= n2 or n >= n3
nとn2のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
データフレームのカラムの中にいくつNaNがあるか数える	df[col].isna().sum()
option: 小麦色色を用いる	color = 'wheat'
文字列が全て数字かどうか	s.isdigit()
散布図の下三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
option: マーカーを上三角に変更する	marker = '^'
散布図を星マーカーで描画する	plt.scatter(データ列x, データ列y, marker='*')
option: フォントの色をライトグリーンに変更する	color = 'lightgreen'
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
option: マーカーを下三角に変更する	marker = 'v'
折れ線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: ダークグレー色を用いる	color = 'darkgray'
グラフに使用する横軸のラベルをセットする	plt.xlabel('x軸ラベル')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
実数の床数を計算する	math.floor(x)
文字列TSVファイルからCSVファイルをn番目の列をインデックスとして読む	pd.read_csv(filename, index_col=n)
ファイルからのストリームを使う	open(filepath)
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データ列がどの程度、分散しているか見る	ds.var()
スクリプトファイルのフォルダパス	os.path.dirname(os.path.abspath(__file__))
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
nの桁数	len(str(n))
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
イテラブルをカウンタにする	collections.Counter(iterable)
折れ線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
ふたつの集合が集合と交わりを持たない	aSet.isdisjoint(aSet2)
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
文字列がリストに含まれないか	element not in aList
データフレームをCSVファイルでJSONLファイルに書き込む	df.to_csv(filename)
option: リネン色を使用する	color = 'linen'
散布図に赤い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの中にある文字列との合計をカウントする	df.isin([value, value2]).sum()
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
数列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
配列とイテラブルについて散布図を描画し、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
行列の行ごとの最小値	np.min(aArray, axis=1)
option: 色を茶色に設定する	color = 'brown'
データフレームをグループ化し、列に対し分散を求める	df.groupby(column)[column2].var()
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
実数を実数で割る	x / y
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
両端キューのstart〜endの値を使う	collections.deque(itertools.islice(deq, start, end))
青い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
グラフの背景色を暗くする	sns.set(style='darkgrid')
データフレームから数値データのカラムを抽出する	df.select_dtypes('number')
サンディーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
リストのn番目の要素を削除する	del aList[n]
ファイルパスをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
ゼロ埋めした符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
データフレームを100の位で四捨五入して整数型にする	df.round(-2).astype(int)
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
グラフの描画で濃く色テーマを使う	sns.set(pallete='deep')
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
実数の自然対数を算出する	math.log(x)
データ列の年を使う	ds.dt.year
単位正方行列を作る	np.identity(n)
データフレームを複数の列で並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームのカラムの中に文字列と文字列が存在するか調べる	df[col].isin([value, value2])
青いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのカテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
双方向キューの最初から要素を取り出す	deq.popleft()
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
rgbの四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ビン数nでデータフレームの中のカラムをビンニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列を部分文字列で分割し、文字列リストに変換する	s.split(sub)
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
n行をランダムにデータフレームから抽出する	df.sample(n)
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
改行	'\n'
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
折れ線グラフの色をライトグレーにする	plt.plot(データ列x, データ列y, color='lightgrey')
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
リストを累積する	itertools.accumulate(iterable, operator.mul)
列の全順列を求める	itertools.permutations(iterable)
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
numpyを使用する	import numpy as np
Pandasのバージョンを確認する	print(pd.__version__)
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
カラーパレットを暗くする	sns.set(pallete='dark')
変数を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ファイルパスを書き込み用にEUCとしてオープンする]	open(filepath, mode='w', encoding='euc_jp')
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
プロットに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
小数点数のアークサイン	math.asin(x)
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームを散布図で見て、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
配列とリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
二つのリストからマップ	dict(zip(aList, aList2))
データフレームを複数の列の値によってグループ化し、基本統計量を求める	df.groupby(columns).describe()
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
辞書順で文字列は文字列より後かどうか調べる	s > s2
ロイヤルブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
option: 読み込みモードに設定する	mode = 'r'
データフレームを各列毎にグループ化して列の平均値を算出する	df.groupby(column)[column2].mean()
浮動小数点数の分数近似	q.limit_denominator(max_denominator=1000000)
縦棒グラフをホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='white')
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
セットの補集合を算出する	aSet.difference(aSet2)
組のn番目以降の要素を抽出する	aTuple[n:]
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
データ列の日	ds.dt.day
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
xが1、もしくは2	x == 1 or x == 2
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
イテラブルの各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームのリストカラムのNaNを最大値で埋める	df[aList].fillna(df[aList].max())
トマトにヒストグラムの色を変更する	plt.hist(データ列, color='tomato')
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
文字列が全て印字できるかどうか調べる	s.isprintable()
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
データフレームをカラムで集約して、列の要約統計量を計算する	df.groupby(column).describe()[column2]
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
散布図のクロスマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
列の値によってデータフレームをグループ化する	df.groupby(column)
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
縦棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
低頻出な方からカウンタを列挙する	aCounter.most_common()[::-1]
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
データフレームの列の値がx以下のデータを取り出す	df[df[column] <= x]
最初のカテゴリーを除外し、データフレームのカラムをベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
ダークオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
xが1、もしくは2、もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
集合が空集合	len(aSet) == 0
線グラフをバリーウッド色を用いて描画する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームの中の列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの左三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
データフレームのデータ型リスト	df.dtypes
データ列をインポートする	import pandas as pd
ディムグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データフレームの数値を一度に整数に四捨五入する	df.round()
整数の複素数	complex(x)
ラインを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
データフレームのn行より前取り出す	df[:n]
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームのカラムが何月か見る	df[col].dt.month
データフレームのリストカラムの中に文字列と文字列が存在するかどうか調べる	df[aList].isin([value, value2])
折れ線グラフをダークグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkgreen')
等間隔でn個にリストをビン分割する	pd.cut(aList, n)
ヒストグラムの色を紺にする	plt.hist(データ列, color='darkblue')
データフレームの重複する行数のマスク	df.duplicated()
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームを列名リストで並べる	df.sort_values(by=column)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
二つのオブジェクトは同一かどうか	obj is obj2
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
折れ線グラフのスタイルを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
グラフのパレットを全般的に濃くする	sns.set(pallete='deep')
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
predicateFuncが真となる列の部分を得る	itertools.takewhile(predicateFunc, iterable)
データフレームのカラムの中にいくつ文字列があるかカウントする	df[col].isin([value]).sum()
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
ヒストグラムの色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
変数について数値の積分を行う	sympy.integrate(e, z)
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
カラムの最頻値	ds.mode()
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
オブジェクトはリストかタプルかどうか	isinstance(obj, (list)
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
辞書上で項目名が定義済みかどうか調べる	key in aDict
ひとつでも非英数字が文字列中にある	any(not c.isalnum() for c in s)
箱髭図をプロットし、、平均線を追加する	plt.boxplot(データ列, meanline=True)
データフレームの列の各データ値の出現回数を求める	df[col].value_counts()
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
回帰分析をニューラルネットでする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
プロットの見た目をデフォルトでイイ感じにセットする	sns.set()
グリッド線を黒くする	plt.grid(color='k')
黒い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
表を列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
両端キューの順序を左にn個分回転させる	deq.rotate(-n)
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
閾値としてデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
デピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ふたつの集合が共通の要素を持たないか	aSet.isdisjoint(aSet2)
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
ValueMapでまとめてデータフレームの値を置き換える	df.replace(ValueMap)
リストの要素を小さい順に並べ直す	sorted(aList, reverse=True)
辞書から項目名の値をエラーなく参照する	aDict.get(key, None)
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームのカラムの中にある文字列と日付データの合計を数える	df[col].isin([value, value2]).sum()
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
データフレームを表示するとき、表示する最大行数をnに設定する	pd.set_option('display.max_rows', n)
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図に青い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
２つの列によってデータフレームをソートする	df.sort_values(by=['A', 'B'])
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
予測結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
パールゴールデンロッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
option: スラッシュを区切りで使う	sep = '/'
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
ロバストな線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
ミディアムスプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
２つの文字列が同じ	s == s2
二変数の最も大きい値	max(x, y)
縦棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
データフレームを各カラムと列の組み合わせ毎にグループ化して個数を算出する	df.groupby([column, column2], as_index=False).count()
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
option: ミディアムブルーにフォントの色を設定する	color = 'mediumblue'
折れ線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
部分文字列が文字列の開始位置以降に存在する	s.find(sub, start) != -1
データフレームのカラムの尖度を求める	df[col].skew()
データフレームの各グループの最大値	df.groupby(column).max()
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
データフレームの内で、列の重複を確認する	df.duplicated(subset=column)
タプルのキーの値	aDict[key]
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
データフレームのリストカラムのNaNを最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
リストをy軸、イテラブルをx座標として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
実行時の標準出力の出力先がターミナルか	sys.stdout.isatty()
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
標準出力がパイプか	not sys.stdout.isatty()
文字コードtextを用いて追加できるようにファイルパスを開く]	open(filepath, mode='a', encoding=text)
黄色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
リストとデータ列についての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
数列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
黒い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='k')
複数のデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
全ての８進数字	string.octdigits
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
折れ線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
option: スプリンググリーンにグラフの色を変更する	color = 'springgreen'
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームのリスト列を丸めて、整数型にする	df[aList].round().astype(int)
タプルの末尾を取り除く	aTuple[:-1]
PLSとして回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
折れ線グラフの色をデピンクに変更する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
エクセルファイルファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
カテゴリでグループ化してデータフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
散布図を黄緑色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
グラフの目的をポスターに変更する	sns.set(context='poster')
ヒストグラムのラインスタイルを点線に変更する	plt.hist(データ列, linestyle='dotted')
無限に数え上げるする	itertools.count()
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
データフレームに重複があるか見る	df.duplicated()
折れ線グラフの色を真紅に変更する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='palevioletred')
小数点数の双曲線正接	math.tanh(x)
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
ミディアムオーキッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
折れ線グラフの色をダーク・スラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategrey')
配列を等間隔でn個に分割する	pd.cut(aArray, n)
折れ線グラフでデータ列の変化を可視化する	plt.plot(range(len(データ列)), データ列)
日付データは何日か知る	aDate.day
nがn2で割り切れる	n % n2 == 0
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをインディゴ色を使って描画する	plt.barh(データ列x, データ列y, color='indigo')
数を十六進文字列にする	x.hex()
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
既存のファイルパスを文字列の示すエンコーディングを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
切片なしの回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
配列とリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフをラベンダー色を使って描画する	plt.barh(データ列x, データ列y, color='lavender')
数列と数列について散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するかカウントする	s.count(sub, start, end)
配列とリストについて散布図を描画し、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
散布図をプロットする	plt.scatter(データ列x, データ列y)
等量でn個にデータ列を分割する	pd.qcut(ds, n)
横棒グラフを描画して中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: EUCを用いる	encoding = 'euc_jp'
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
折れ線グラフのマーカーを▼にする	plt.plot(データ列x, データ列y, marker='v')
辞書からキーの値を得る	aDict.get(key)
データフレームを列でソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームを表示するとき、表示できる列数を変更する	pd.set_option('display.max_columns', n)
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
rgbの▽マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列を小数点以下n桁で四捨五入する	ds.round(n)
option: 色の透明度を変更する	alpha = 0.5
マッピングをコピーする	aDict.copy()
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
文字列を部分文字列で分けた時の前半の文字列	s.partition(sub)[0]
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
xでデータ列の欠損値を埋める	ds.fillna(x)
データフレームのカラムの中にと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
データフレームを表示するとき小数点以下の表示精度を指定する	pd.set_option('precision', n)
データ列を等量でビン数nを用いてビン分割する	pd.qcut(ds, n)
両端キューをタプルにする	tuple(deq)
データフレームのリストカラムの欠損値を直後の値にセットする	df[aList].fillna(method='bfill')
option: 欠損値を先頭に来るようにする	na_position = 'first'
option: フォントの色をライムに設定する	color = 'lime'
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
空のリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
option: グラフの色をライトサーモンに指定する	color = 'lightsalmon'
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
現在が火曜日	datetime.datetime.today().weekday() == 1
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
nが2で割り切れるかテストする	n % 2 == 0
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
配列をリストを境界値として分割する	pd.cut(aArray, aList)
値をマゼンタ化する	f'\033[35m{value}\033[0m'
option: 箱ひげ図に平均を加える	showmeans = False
最初のコマンド引数	sys.argv[1]
降順に列で表データを破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
横棒グラフをダークグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkgray')
Pandasでデータ列のUNIX秒からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
空白文字を全部見る	string.whitespace
タプルをn回加える	aTuple * n
リストの要素を小さい方から並べ直す	sorted(aList, reverse=False)
option: 色をレベッカパープルに設定する	color = 'rebeccapurple'
散布図に赤いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
Pandasで、フォーマットを用いて文字列を日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
nまでの奇整数列を作る	list(range(1, n, 2))
辞書からキーで指定された項目をポップする	aDict.pop(key)
表から指定された列名リストの列を抽出する	df[columns]
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
小数点数がNaNかどうか	math.isnan(x)
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
データフレームの全カラムを散布図として可視化する	sns.pairplot(df)
有理数の分母	q.denominator
データフレームのリスト列の値をValueMapでまとめて置換する	df[aList].replace(ValueMap)
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
nまたはn2	n or n2
貝殻色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図のダイアモンド印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
文字列中の小文字を大文字に変換する	s.upper()
ファイル名がJSONファイルか	filename.endswith('.json')
実部と虚部から複素数を作成する	complex(x, y)
データフレームを列で集約し、、合計を算出する	df.groupby(column).sum()
option: フォントの色をスラグレーに指定する	color = 'slategrey'
ゼロ埋めされた符号なし８ビット整数型のベクトル	np.zeros(要素数, dtype=np.uint8)
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
二つの集合の和集合を使う	aSet.union(aSet2)
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
option: 左三角マーカーを使用する	marker = '<'
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ブランチドアーモンド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
グラフの描画で淡くカラーパレットを使用する	sns.set(pallete='muted')
オブジェクトが辞書クラスか調べる	isinstance(obj, dict)
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
'A'列と'B'列ででデータフレームを大きい順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
nが何桁か	len(str(n))
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
xをブール値に変換する	bool(x)
３変数の最小値を求める	min(x, y, z)
エクセルデータからデータフレームを読み込む	pd.read_excel(filename)
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
文字列をパターンで区切る	re.split(pattern, s)
無限にカウントアップする	itertools.count()
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
ヒストグラムをライトスレイグレー色を使って描画する	plt.hist(データ列, color='lightslategrey')
option: ミディアムパープル色を使用する	color = 'mediumpurple'
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
ダークマゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: ミディアムオーキッドを使う	color = 'mediumorchid'
データフレームの値をValueMapで置き換える	df.replace(ValueMap)
データフレームのリストカラムの歪度を求める	df[aList].kurt()
三二ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int16)
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
カラムのNaNを最頻値で埋める	ds.fillna(ds.mode().iloc[0])
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
タプルをミュータブルにする	list(aTuple)
ヒストグラムを実線で描く	plt.hist(データ列, linestyle='solid')
縦棒プロットを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
0から始まる無限な数列を求める	itertools.count()
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
option: グラフの色を淡い茶色に設定する	color = 'tan'
0で全要素を初期化した配列	np.zeros(要素数)
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
データフレームを列の値で欠損値を含めてグループ分けする	df.groupby(column, dropna=False)
ふたつの関係が真部分集合	aSet < aSet2
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
データ列のユニークな要素数	ds.nunique()
現在のミリ秒	int(time.time() * 1000)
データフレームを列によってソートしてNaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
ヒストグラムの色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
英字の大文字列	string.ascii_uppercase
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
イテラブルの要素を全てセットに追加する	aSet.update(iterable)
スチールブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='steelblue')
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列の開始位置から終了位置の間で部分文字列の出現回数	s.count(sub, start, end)
折れ線グラフの色を淡いピンク色に指定する	plt.plot(データ列x, データ列y, color='lightpink')
option: サーモン色を使用する	color = 'salmon'
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームを列で昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: 耐火レンガを使用する	color = 'firebrick'
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
ペールグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightseagreen')
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
データ列を分割数nとして分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
プロット描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
改行なしに二つの文字列を出力する	print(value, value2, end='')
n個にリストを分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの中の列を分割数nを用いてビン分割する	pd.cut(df[col], n)
predicateFuncが真とならないリストの要素	itertools.dropwhile(predicateFunc, iterable)
タプルが全て真か	all(aTuple)
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームのリスト列の標本標準偏差	df[aList].std()
データフレームのカラムの未入力値を最大値に設定する	df[col].fillna(df[col].max())
正規分布の累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
リストの総和	sum(aList)
ヒストグラムの色をライトゴールドロディイエローにセットする	plt.hist(データ列, color='lightgoldenrodyellow')
グラフにグリッド線を入れる	plt.grid(True)
option: フォントの色をドジャーブルーにセットする	color = 'dodgerblue'
option: スカイブルーを使う	color = 'skyblue'
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
折れ線グラフの色をスノーにセットする	plt.plot(データ列x, データ列y, color='snow')
データ列とリストについて散布図を描画し、、マーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
n個の整数リスト	list(range(n))
データフレームを複数の列でまとめたグループ	df.groupby(columns)
実数のn乗の実数剰余	pow(x, n, y)
散布図をダイアモンド印で描画する	plt.scatter(データ列x, データ列y, marker='D')
棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
横棒グラフをディムグレー色を使って描画する	plt.barh(データ列x, データ列y, color='dimgray')
dateStringをdatetime64型に変換する	pd.to_datetime(dateString)
リストとリストについての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
読み込みできるようにファイルをオープンする]	open(filepath, mode='r')
散布図をrgbの右三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのカラムの中に文字列と日付データがいくつ存在するか数える	df[col].isin([value, value2]).sum()
辞書の値を列挙する	aDict.values()
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフの色をスプリンググリーンにする	plt.plot(データ列x, データ列y, color='springgreen')
ファイルをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
論文用にプロットを設定する	sns.set(context='paper')
データフレームを'A'列と'B'列によって並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ファイル全体をリストとして読み込む	f.readlines()
列の未入力値を中央値で補う	ds.fillna(ds.median())
新しいロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
ディムグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
オブジェクトの固有のID	id(obj)
列の各要素に対して、predicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
数列とリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
縦棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: アイボリー色を使用する	color = 'ivory'
表の重複する行数のマスクを見る	df.duplicated()
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
バギングを用いて回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
カレント作業ディレクトリ	os.getcwd()
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
実数以下の最大の整数	math.floor(x)
オブジェクトは文字列	isinstance(obj, str)
二つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
option: ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
データフレームをカテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
２次元リストの転置行列を算出する	[list(x) for x in list(zip(*aList))]
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
プラットフォームの文字コードの最大値	sys.maxunicode
option: グラフの種類を点線に変更する	linestyle = 'dotted'
データフレームの行がnの行を取り出す	df.loc[n]
データフレームのグループ毎の標準偏差	df.groupby(column).std()
文字列の終了位置より前に部分文字列がないか調べる	s.find(sub, 0, end) == -1
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
レモンシフォン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
nの三乗を計算する	n ** 3
イテラブルとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
二つのデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
option: グラフの色をライトスカイブルーにセットする	color = 'lightskyblue'
オブジェクトは論理値クラスかどうか確認する	isinstance(obj, bool)
表データの列がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
散布図を三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^')
JSONファイルの入力ストリームを読み込んで、dataとする	data = json.load(fin)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
自分自身をモジュールとして	sys.modules[__name__]
実数の常用対数	math.log10(x)
リストとデータ列について散布図を描画して、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
オプションで出力先を標準出力に指定する	file = sys.stdout
リスト中のオブジェクトが最初に見つかるインデックスを探す	aList.index(element)
棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
データフレームの重複した行だけ	df[df.duplicated(keep=False)]
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
折れ線グラフのマーカーを▽にする	plt.plot(データ列x, データ列y, marker='v')
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
イテラブルとリストについての散布図にバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
グラフに格子線を表示する	plt.grid(True)
行列の演算を行う	import numpy as np
option: 黄色色を用いる	color = 'yellow'
列とタプルの直積	itertools.product(iterable, iterable2)
ランダムに表から抽出する	df.sample()
オブジェクト一つの組	(element,)
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームの列の未入力値を平均値で補う	df[col].fillna(df[col].mean())
耐火レンガ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
貝殻にヒストグラムの色をセットする	plt.hist(データ列, color='seashell')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
辞書順で文字列は文字列より後かどうかテストする	s > s2
折れ線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
データフレームの列の正規分布に対する左右対称性を求める	df[col].kurt()
キューをリストに変換する	list(deq)
散布図のポイントマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
線グラフの色をホットピンクにセットする	plt.plot(データ列x, データ列y, color='hotpink')
文字列が数字か確認する	s.isdigit()
折れ線グラフの下三角印を黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
オブジェクトがタプルに含まれないか調べる	element not in aTuple
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
列'A'と列'B'をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
縦棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
option: 黄色を使う	color = 'yellow'
ライトブルーにヒストグラムの色をする	plt.hist(データ列, color='lightblue')
option: ポイント印を使う	marker = '.'
昇順にデータフレームを'A'列でソートする	df.sort_values(by='A', ascending=True)
双方向キューの長さを制限する	collections.deque(maxlen=n)
自然数の階乗	math.factorial(n)
option: 印をダイアモンドに変更する	marker = 'D'
クラスが名前付きタプル	issubclass(C, tuple)
シーケンスを文字列として連結する	''.join(map(str, iterable))
グラフで使用する名前を設定する	plt.title('グラフの名称')
文字列を中央寄せする	s.center(文字列幅)
イテラブルを多重集合に変換する	collections.Counter(iterable)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
配列と配列の散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: エクセルファイルのシートの名前をnamesに設定する	sheet_name = names
データフレームを各列毎にグループ化して文字列というグループを見る	df.groupby(column).get_group(s)
データフレームを列の値でNaNを含めてグループ化する	df.groupby(column, dropna=False)
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データフレームのカラムの分	df[col].dt.minute
nが奇数	n % 2 == 1
散布図をモカシン色を使って描画する	plt.scatter(データ列x, データ列y, color='moccasin')
整数nは組のいづれかかどうか調べる	n in aTuple
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
スチールブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
整数nを八進表現に変換する	oct(n)
リストと配列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
新しい線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
カテゴリ別で色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフでデータ列の変遷を可視化する	plt.plot(range(len(データ列)), データ列)
UNIX時間の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
青い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
複数のデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
シーケンスの各要素に対して、predicateFuncがtrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
データフレームを各列毎に集約して文字列という名前のグループを使う	df.groupby(column).get_group(s)
データフレームのリストカラムの欠損値を50パーセンタイルで埋める	df[aList].fillna(df[aList].median())
折れ線グラフをシエナ色を用いて描画する	plt.plot(データ列x, データ列y, color='sienna')
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
ケンドールで表の相関行列を計算する	df.corr(method='kendall')
option: バイナリモードにセットする	mode = 'rb'
option: グラフの色をゴールドに設定する	color = 'gold'
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
横に２つのデータフレームを連結する	pd.concat([df, df2], axis=1)
折れ線グラフを実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid')
option: ゲインズボロ色を用いる	color = 'gainsboro'
option: 菱形マーカーを描画する	marker = 'D'
折れ線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
データフレームの未入力値が含まれる部分に	df.style.highlight_null()
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
線グラフの色をゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='goldenrod')
主成分分析として多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
変数について数式の積分を計算する	sympy.integrate(e, z)
日付データが木曜日か調べる	aDate.weekday() == 3
タプル内の要素が全て真	all(aTuple)
option: 先頭の行をヘッダに指定する	header = 0
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
赤色で文字列を出力する	print(f'\033[31m{value}\033[0m')
データフレームの列の中にある日付データの合計を数える	df[col].isin([value]).sum()
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
に箱ひげ図でデータフレームを描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
組をリストにする	list(aTuple)
データフレームで何行、重複するか確認する	df.duplicated().sum()
横棒グラフをカデットブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cadetblue')
棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
折れ線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategray')
実行結果をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
空の多重集合を準備する	collections.Counter()
option: ミディアムシアグリーンを用いる	color = 'mediumseagreen'
y軸の目盛りを表示しない	plt.yticks([])
データフレームの各次元の大きさを見る	df.shape
ISO書式の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
日付時刻データの日	aDatetime.day
黒い菱形マーカーを配列とデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの線のスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
nからn2の値を引いてnに代入する	n -= n2
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
日付データの年数を使う	aDate.year
リストをn回、連結する	aList * n
文字列を表示する	print(value)
八進数文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
スカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='skyblue')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
実数を切り上げて整数にする	math.ceil(x)
aListn番目から値をポップする	aList.pop(n)
nをn2で割ったモジュロ	n % n2
データフレームを'A'列を用いてで破壊的にソートする	df.sort_values(by='A', inplace=True)
日付時刻データの日付を使う	aDatetime.date()
イテラブルを関数でフィルタする	map(func, iterable)
ライトイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームの欠損値をメディアンで置換する	df.fillna(df.median())
ファイルから1文字、読み込む	f.read(1)
文字列中に非英字が含まれるかどうか確認する	any(not c.isalpha() for c in s)
データフレームのカラムの未入力値を前の行の値に変更する	df[col].fillna(method='ffill')
データフレームを100の位で四捨五入して、整数型にする	df.round(-2).astype(int)
散布図に黒い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
箱ひげ図を横に並べて描く	plt.boxplot([データ列, データ列])
データフレームとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
最大値・最小値の範囲で一様な疑似乱数を得る	random.uniform(最小値, 最大値)
option: フォントの色をダークゴールデンロッドに指定する	color = 'darkgoldenrod'
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームのリストカラムの値をValueMapでまとめて置換する	df[aList].replace(ValueMap)
黒い三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
リストを二つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
データ列をn個に等間隔で分割する	pd.cut(ds, n)
折れ線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
ブラック色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
オブジェクトの型	type(obj)
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
カラーバーを描画する	plt.colorbar()
データ列を二つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
option: パープル色を使う	color = 'purple'
縦棒グラフをオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='orange')
実数のn乗	x ** n
データフレームの中の欠損値の合計を数える	df.isna().sum()
ヒストグラムの色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
option: フォントの色をカーキに変更する	color = 'khaki'
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
オブジェクトは文字列クラス	isinstance(obj, str)
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
文字列が全て英字か調べる	s.isalpha()
２つの文字列は等しくないか調べる	s != s2
数値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
線グラフの色をライトシアンにセットする	plt.plot(データ列x, データ列y, color='lightcyan')
グラフの描画で濃くパレットを使う	sns.set(pallete='deep')
縦棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
横棒グラフをプロットしてバーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
xが真かどうか調べる	bool(x)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
ブルーバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^')
option: 色をアリスブルーに設定する	color = 'aliceblue'
リストとリストについての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームの中にいくつ文字列が含まれるか求める	df.isin([value]).sum()
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
データフレームの列がxである行を抽出する	df[df[column] == x]
option: グラフの色をスチールブルーに変更する	color = 'steelblue'
カラムの母標準偏差	ds.std(ddof=0)
option: グラフの色を赤に設定する	color = 'red'
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ライムグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
部分文字列が文字列の開始位置と終了位置の間に含まれるかどうか調べる	s.find(sub, start, end) != -1
プラットホームがLinux	sys.platform.startswith('linux')
列でデータフレームをソートして更新する	df.sort_values(by=column, inplace=True)
グラフを論文用に指定する	sns.set(context='paper')
ヒストグラムを描き、、ビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
横棒グラフをマルーン色を使って描画する	plt.barh(データ列x, データ列y, color='maroon')
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
変数を定義する	x = n
列とカラムの重複をドロップする	df.drop_duplicates(subset=column)
プラム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
散布図に黒いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
ゼロ埋めされた3二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
データフレームから一番右の列を除く	df[df.columns[:-1]]
データフレームから指定した２つの列を取り出す	df[[column, column2]]
option: ミッドナイトブルー色を使う	color = 'midnightblue'
2変数の最大値を求める	max(x, y)
データフレームのリスト列の値を正規表現patternで一度にreplに置き換える	df[aList].replace(pattern, repl, regex=True)
双方向キューの要素を左にn個分ローテンションする	deq.rotate(-n)
データフレームの列がx、かつ列がx2であるデータを選ぶ	df[(df[column] == x) & (df[column2] == x2)]
option: 右三角印を加える	marker = '>'
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
文字列を黄色化する	f'\033[33m{value}\033[0m'
2次元タプルをフラット化する	sum(aTuple)
データフレームから一番右側の列を除く	df[df.columns[:-1]]
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
x軸だけグリッド線	plt.grid(axis='x')
実数を浮動小数点数に足す	x + y
列から両端キューを作成する	collections.deque(iterable)
散布図をペルー色として描画する	plt.scatter(データ列x, データ列y, color='peru')
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
カテゴリデータを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
複数行対応として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図の色を濃いシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームを'A'列で昇順に破壊的に整列する	df.sort_values(by='A', ascending=True, inplace=True)
正規分布にしたがってデータ列の値が発生する確率を使う	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
散布図をレベッカパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
option: スノー色を使う	color = 'snow'
整数にする	int(x)
日付データの年を使う	aDate.year
option: グラフの種類を実線に指定する	linestyle = 'solid'
列の値でデータフレームをグループ化し、、それぞれのグループの件数を知る	df.groupby(column).size()
リストと配列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
二つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
マッピングを階層化する	collections.ChainMap(aDict)
行列のユニークな要素とそのインデックスを算出する	u, indices = np.unique(aArray, return_index=True)
黒いクロスマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
リストとリストについて散布図を描画してマーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
リストと配列について散布図を描画し、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
文字列を文字コード列にする	[ord(ch) for ch in s]
全要素を０で初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
日本語をプロット中で使えるようにする	sns.set(font='IPAexGothic')
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
半透明の点線としてデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
option: ミディアムスレートブルーを用いる	color = 'mediumslateblue'
データ列とリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 赤色を使用する	color = 'red'
列をキーにして２つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
中央値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].median())
赤い点線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフの線種を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列の最後の文字	s[-1]
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
実行結果を緑色にする	f'\033[32m{value}\033[0m'
データフレームのリスト列の文字列をNaNにする	df[aList].replace(s, np.nan)
option: グラフを実線に設定する	linestyle = 'solid'
異なる列をキーとして二つの表を左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
パープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
バイオリン図をプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
option: ゴールデンロッドを使用する	color = 'goldenrod'
データフレームのリスト列の中にある文字列の合計をカウントする	df[aList].isin([value]).sum()
ケンドール相関係数を用いてデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
数列の推移を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
nがn2未満、またはn3以上	n < n2 or n >= n3
綺麗なグラフを描画する	import seaborn as sns
ヒストグラムを２つ並べてプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
モードでデータフレームの欠損値を補う	df.fillna(df.mode().iloc[0])
右三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
文字列をコロンで分割して文字列リストに変換する	s.split(':')
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
データ列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
データフレームを'A'列でソートする	df.sort_values(by='A')
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームを各列と列の組み合わせ毎にグループ化して合計を計算する	df.groupby([column, column2], as_index=False).sum()
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
最大値でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].max())
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
最大長を指定して両端キュー	collections.deque(maxlen=n)
十六進数文字列を整数に変換する	int(s, 16)
ヒストグラムの色をアクアマリンにセットする	plt.hist(データ列, color='aquamarine')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
二つのオブジェクトが同一	obj is obj2
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
データフレームを列を用いて整列し、、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
多次元尺度構成法の準備をする	model = sklearn.manifold.MSD(n_components=n)
option: フォントの色をパパイヤウィップに指定する	color = 'papayawhip'
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
オレンジレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
ディムグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
三つの数値をプリントする	print(value, value2, value3)
日付時刻データが日曜日	aDatetime.weekday() == 6
データフレームの正規分布に対する上下広がりを求める	df.skew()
リストとリストについて散布図を描き、、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
データフレームのカラムのNaNをxで埋める	df[col].fillna(x)
文字列全体がパターンにマッチするか確認する	re.fullmatch(pattern, s)
パーセント付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
n個に等量でデータ列をビニングする	pd.qcut(ds, n)
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
横棒グラフをライム色として描画する	plt.barh(データ列x, データ列y, color='lime')
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
数を十の位で四捨五入する	round(x, -1)
rgbのポイントマーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ダークオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
リストのn番目以降の部分を得る	aList[n:]
データフレームから散布図を作り回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
黒い下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
スタックの先頭から要素を取り除く	deq.popleft()
option: ベクトルのデータ型を指定する	dtype = np.int8
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
タイムスタンプデータの月	aDatetime.month
ヒストグラムの色をパパイヤウィップに指定する	plt.hist(データ列, color='papayawhip')
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
データ列の曜日は何日目か確認する	ds.dt.dayofweek
オブジェクトはタプルに含まれない	element not in aTuple
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームを千の位で四捨五入する	df.round(-3)
黒い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
文字列が全て英字	s.isalpha()
option: グラフの色を紺にする	color = 'darkblue'
ヒストグラムを点線として描画する	plt.hist(データ列, linestyle='dotted')
πを使う	math.pi
小数点数のハイパボリック・コサインの逆数	math.acosh(x)
ファイルパスを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
データフレームから列を3つだけ選択する	df[[column, column2, column3]]
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ダークオーキッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
データフレームを各列毎にグループ化して、列の最小値を計算する	df.groupby(column)[column2].min()
セットから別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
上限長nの両端キューを作成する	collections.deque(maxlen=n)
パウダーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
リストと配列の散布図を描画してマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ベクトルの累積積	np.cumprod(aArray)
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
オブジェクトはリストクラスのインスタンス	isinstance(obj, list)
リストを等量で分割数nでビニングする	pd.qcut(aList, n)
データフレームの欠損値を最頻値で補う	df.fillna(df.mode().iloc[0])
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
配列と数列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
二つの列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby(['A', 'B']).describe()
フローラルホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
リストとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
円グラフにラベルを設定する	plt.pie(データ列, startangle=90, labels=ラベル列)
データフレームのそれぞれのグループごとの最大値を計算する	df.groupby(column).max()
ヒストグラムを紺碧色を使って描画する	plt.hist(データ列, color='azure')
データフレームからカテゴリデータの列名一覧を見る	df.select_dtypes('object').columns
文字列をケースを無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
ハローワールドとプリントする	print('Hello World')
option: サンディーブラウン色を使う	color = 'sandybrown'
ファイルパスを文字列の示すエンコーディングを使って開く]	open(filepath, encoding=s)
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
実数を浮動小数点数で割った余り	x % y
行列の累積積を使う	np.cumprod(aArray)
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
配列を2次元1列に変形する	aArray.reshape(-1, 1)
文字列内にひとつでも大文字があるか調べる	any(c.isupper() for c in s)
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
データフレームのそれぞれのグループ毎の個数	df.groupby(column).count()
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
リストの最後から要素を取り出す	aList.pop()
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
スプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
今日の日付時刻を求める	datetime.datetime.now()
アクア色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
ファイルからnとn2のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
データフレームのリストカラムを整数に四捨五入する	df[aList].round()
グラフの補助目盛を有効にする	plt.minorticks_on()
データフレームはどの程度分散しているか確認する	df.var()
ピアソンを使ってデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='pearson')
オブジェクトを文字列にする	str(obj)
縦棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
入力から２つの文字値を読み込む	A, B = map(str, input().split())
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgrey')
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
黄緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
リストが空でないかどうか	len(aList) != 0
図の縦横を変更する	plt.figure(figsize=(横幅, 高さ))
文字列は漢字か	('\u4E00' <= ch <= '\u9FD0')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
実行結果を白色でプリントする	print(f'\033[37m{value}\033[0m')
option: グラフの色をスプリンググリーンに指定する	color = 'springgreen'
イテラブルと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームで、列の重複を見る	df.duplicated(subset=column)
option: ミディアムアクアマリンに色を変更する	color = 'mediumaquamarine'
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
空白で文字列を分割して、文字列リストにする	s.split()
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データフレームの列のユニークな要素数	df[col].nunique()
データフレームのリスト列の欠損値を第二四分位数で埋める	df[aList].fillna(df[aList].median())
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
文字列を太文字で出力する	print(f'\033[1m{value}\033[0m')
クラス分類のF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データ列を1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
インデント付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフの色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
ボックスチャートでデータフレームの複数の列を並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
散布図の上三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
option: エラーを無視するように設定する	errors = 'ignore'
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
ヒートマップでデータフレームの列と列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
文字列を走査し、パターンにASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
横棒グラフをスカイブルー色を使って描画する	plt.barh(データ列x, データ列y, color='skyblue')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームから列を2つのみ選択する	df[[column, column2]]
集合に列の要素を全て追加する	aSet.update(iterable)
横棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
オブジェクトのプロパティの値を求める	getattr(obj, プロパティ名)
表データを各カラム毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
数値のインテグラルを求める	sympy.integrate(e)
線グラフをロイヤルブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='royalblue')
散布図に黒い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
データフレームのリストカラムの分散を算出する	df[aList].var()
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
option: グラフの色をダークグレーにセットする	color = 'darkgrey'
ダークゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
n個の集まりからk個選ぶ方法を求める	math.comb(n, k)
データフレームを列によってグループ分けし、それぞれのグループごとの分散を求める	df.groupby(column).var()
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ローングリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
実数を三乗する	x ** 3
データフレームをCSVファイルとしてJSONLファイルに書き込む	df.to_csv(filename)
三変数の最小値を求める	min(x, y, z)
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
正規表現patternでデータフレームのリスト列の値をreplに置き換える	df[aList].replace(pattern, repl, regex=True)
データフレームのリストカラムの欠損値を直前の値で補う	df[aList].fillna(method='ffill')
集合のすべての要素が別のセットに含まれるかどうか確認する	aSet.issubset(aSet2)
分類木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
リストと配列についての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
データ列の欠損値を後の行の値で置換する	ds.fillna(method='bfill')
改行せず２つの文字列をプリントする	print(value, value2, end='')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームの列が正規表現文字列にマッチしない行を取り出す	df[not df[column].str.match(s)]
部分文字列を文字列の末尾から見つける	s.rfind(sub)
浮動小数点数の最大値を計算する	sys.float_info.max
option: ゴールデンロッドにフォントの色を指定する	color = 'goldenrod'
データ列をカテゴリデータに変換する	ds.astype(object)
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
浮動小数点数の余弦の逆数	math.acos(x)
折れ線グラフを紺碧色を用いて描画する	plt.plot(データ列x, データ列y, color='azure')
カウンタからシーケンスをカウントして引く	aCounter.subtract(iterable)
双方向キューの末尾から値を取り出す	deq.pop()
数値を積分する	sympy.integrate(e)
縦棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
文字列を小文字に変換する	s.casefold()
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をミディアムターコイズにセットする	plt.hist(データ列, color='mediumturquoise')
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
正則化付き重回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
整数型のゼロ埋めした行列を作る	np.zeros(要素数, dtype=np.int)
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
データフレームの重複した行数を数える	df.duplicated().sum()
縦棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
両端キューの中に値は含まれてるか	element in deq
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
option: フローラルホワイト色を用いる	color = 'floralwhite'
文字列ひとつの組を作る	(element,)
リストとリストについて散布図を描画してその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフに赤いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
グラフのパレットを濃くする	sns.set(pallete='deep')
散布図を紺碧色を用いて描画する	plt.scatter(データ列x, データ列y, color='azure')
表データから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームの指定された列を配列として抽出する	df[column].values
リストと配列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
タイムスタンプデータはタイムスタンプデータよりあとか	aDatetime > aDatetime2
一点鎖線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを各列毎にグループ分けし、、文字列というグループを使う	df.groupby(column).get_group(s)
ヒストグラムを黄色色として描画する	plt.hist(データ列, color='yellow')
目盛線	plt.grid(alpha=0.5)
データフレームのインデックスの名前をまとめてnameからname2に変更する	df.rename(index={name: name2})
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
２つ並べてデータ列を柱状図にする	plt.hist([データ列, データ列], color=['b', 'r'])
散布図に黒い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
数値のパラメータにnを代入する	e.subs(z, n)
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
縦棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
オブジェクトは数値かどうか	isinstance(obj, (int,float))
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
ファイルのファイル名を使う	os.path.basename(filepath)
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
option: フォントの色をゴールデンロッドに設定する	color = 'goldenrod'
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
要素一つの組	(element,)
nわるn2	n / n2
半透明の一点鎖線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
グラフの色を全般的に濃くする	sns.set(pallete='deep')
プロットの色テーマを濃くする	sns.set(pallete='deep')
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
破壊的に大きい順に複数の列でデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
タプルから項目名の値	aDict.get(key)
nullに等しい識別子	None
平均線付き箱ヒゲ図を描画する	plt.boxplot(データ列, meanline=True)
データフレームから列を２つ選択する	df[[column, column2]]
データフレームの列がxでないデータをフィルタする	df[df[column] == x]
文字列を走査しパターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
データフレームの中の列を分割数nとしてビンニングする	pd.cut(df[col], n)
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
配列を四分位数ごとにビニングする	pd.qcut(aArray, 4)
データフレームの列名を指定された名前リストに置き換える	df.columns = columns
箱髭図を描いて、平均を加える	plt.boxplot(データ列, showmeans=True)
追加できるように既存のファイルをSJISとしてオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームの中に文字列と文字列がいくつあるかカウントする	df.isin([value, value2]).sum()
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
データフレームの列を度数分布図で描く	plt.hist(df[column])
数式の変数に数式を代入する	e.subs(z, e2)
全要素を0で初期化した配列を初期化する	np.zeros(要素数)
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
両端キュー中の数値の出現数を数える	deq.count(element)
二つのマッピングをネストする	collections.ChainMap(aDict, aDict2)
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
八進数字を全部求める	string.octdigits
option: ペールグリーン色を使う	color = 'palegreen'
option: 耐火レンガにグラフの色を設定する	color = 'firebrick'
散布図の▲マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
option: 色をスノーに設定する	color = 'snow'
濃いシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
昇順にデータフレームを二つの列によって整列して、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
データ列の相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの列の欠損値を最小値に指定する	df[col].fillna(df[col].min())
グラフで使うフォントを日本語に指定する	sns.set(font='IPAexGothic')
リストの中の最大値を求める	max(aList)
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
全要素を1で初期化した配列を作る	np.ones(要素数, dtype=np.int)
整数nを二進文字列に変換する	bin(n)[2:]
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
日付データの曜日を見る	aDate.weekday()
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
option: 貝殻を使う	color = 'seashell'
配列とリストの散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
サーモン色を用いてヒストグラムを描画する	plt.hist(データ列, color='salmon')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
オブジェクトがある型かテストする	isinstance(obj, クラス)
変数を白色にする	f'\033[37m{value}\033[0m'
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
カラムの値が欠損値か	ds.isna()
淡いピンク色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
イテラブルの全順列	itertools.permutations(iterable)
nが負の数か調べる	n < 0
グリーンイエロー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データ列の推移を赤い実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列を太文字でプリントする	print(f'\033[1m{value}\033[0m')
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
縦棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
縦棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
プロットのy軸のキャプションをuntitledに設定する	plt.ylabel('y軸ラベル')
折れ線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategrey')
データ列の欠損値をxで補う	ds.fillna(x)
タプルの平均	sum(aTuple)/len(aTuple)
画面用にプロットを設定する	sns.set(context='notebook')
項目名がマッピングに存在しないとき、要素を追加する	aDict.setdefault(key, element)
セットの浅いコピーを作る	aSet.copy()
デピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
黒いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
nがn2未満もしくはn3以上か調べる	n < n2 or n >= n3
リストとイテラブルについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
データフレームのカラムの名前一覧で指定されたカラムを削除する	df.drop(columns, axis=1)
配列の各要素の最小公倍数を求める	np.lcm(aArray, aArray2)
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
カラムを用いてデータフレームをグループ化して、それぞれのグループ毎の件数を知る	df.groupby(column).size()
最後の部分文字列で文字列を二分する	s.rpartition(sub)
整数nがタプルのいづれかか	n in aTuple
option: フォントの色をオールドレースに変更する	color = 'oldlace'
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
数値の部分分数化する	sympy.apart(e)
グラフの描画で色差別なくパレットを使う	sns.set(pallete='colorblind')
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
否定する	not n
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
データフレームの欠損値が含まれる部分に色をつける	df.style.highlight_null()
リストとリストの散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
option: トマト色を使用する	color = 'tomato'
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
グラフの色を濃くする	sns.set(pallete='deep')
option: ミディアムパープル色を使う	color = 'mediumpurple'
バリーウッドにヒストグラムの色を指定する	plt.hist(データ列, color='burlywood')
数式の数値	float(e)
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
ひとつでもアルファベットが文字列内に含まれるかどうか調べる	any(c.isalpha() for c in s)
配列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
既存の行列を元にして全要素が初期値のベクトル	np.full_like(aArray, 初期値)
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
文字列を文字コード列に変換する	[ord(ch) for ch in s]
sin	math.sin(x)
option: オーキッド色を使う	color = 'orchid'
双方向キューの要素を反転する	deq.reverse()
Pandasでエポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
デフォルト見た目を適用する	sns.set()
データフレームのリスト列の欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
option: ダークシアグリーンにフォントの色を設定する	color = 'darkseagreen'
ケースを無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームをJSONLファイルに行を付けずに書き込む	df.to_csv(filename, index=None)
線グラフの色をレモンシフォンにセットする	plt.plot(データ列x, データ列y, color='lemonchiffon')
線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
文字列をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
option: スレートブルーを用いる	color = 'slateblue'
線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
８進数字を全部使う	string.octdigits
rgbの右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: 赤を使用する	color = 'red'
JSONLファイルにデータフレームを小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
nとn2の値を足してnに代入する	n += n2
データフレームを十の位で四捨五入して、整数にする	df.round(-1).astype(int)
行列の累積積を求める	np.cumprod(aArray)
グラフを画面用にする	sns.set(context='notebook')
行列積	np.matmul(aArray, aArray2)
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
行列の累積和を求める	np.cumsum(aArray)
option: 分割記号をスラッシュにする	sep = '/'
無限数列を求める	itertools.count()
ライトシアン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームの列の中に日付データがある	df[col].isin([value])
データフレームの列を行に設定する	df.set_index(column)
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
データフレームの列の未入力値を最小値に設定する	df[col].fillna(df[col].min())
縦棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
PandasでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col])
アンティークホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='antiquewhite')
option: フォントの色をゴールドに設定する	color = 'gold'
option: スプリンググリーン色を使う	color = 'springgreen'
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
文字列の変数名を数式にする	sympy.Symbol(s)
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
タプルのn番目以降の部分を取り出す	aTuple[n:]
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
option: フォントの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
データフレームを列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
ふたつの集合の共通部分を求める	aSet.intersection(aSet2)
データフレームをグループ化し各列に対し標準偏差を求める	df.groupby(column)[column2].std()
データフレームを複数の列の値でグループ化し、要約統計量を求める	df.groupby(columns).describe()
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データフレームの中の欠損値を落とす	df.dropna()
ヒストグラムの色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
リストをn倍する	aList * n
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
説明変数と目的変数で重回帰モデルを学習する	model.fit(説明変数, 目的変数)
データフレームのカラムのNaNをxに指定する	df[col].fillna(x)
option: ライトスレイグレーを使用する	color = 'lightslategray'
option: 色をグリーンに変更する	color = 'green'
option: 色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
カテゴリで色付けしてデータフレームをに箱ひげ図でプロット化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを破壊的に降順に二つの列によってソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
タプルの中の最大値	max(aTuple)
文字列を赤色で表示する	print(f'\033[31m{value}\033[0m')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
ダークシアン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
線グラフを点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
要素を両端キューの最初から取り除く	deq.popleft()
セットを空にする	aSet.clear()
プロットにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
n個に配列をビニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
オレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームのリスト列の中央値	df[aList].median()
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
ラインを点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
ケンドールでデータフレームのリストカラムの相関行列	df[aList].corr(method='kendall')
リストの出現頻度を可視化する	plt.hist(データ列)
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
チョコレート色を使ってヒストグラムを描画する	plt.hist(データ列, color='chocolate')
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
タプルから項目名の値か、もしくは要素を参照する	aDict.get(key, element)
浮動小数点数の双曲線正接の逆数を計算する	math.atanh(x)
タプルの項目名を要素に設定する	aDict[key] = element
データフレームのカラムの欠損値を50パーセンタイルに指定する	df[col].fillna(df[col].median())
option: 欠損値も無視しない	dropna = True
データフレームのNaNを最大値で補う	df.fillna(df.max())
データフレームを関数の値によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
実数の値が整数か調べる	x.is_integer()
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategrey')
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
折れ線グラフの色をライトシアンにセットする	plt.plot(データ列x, データ列y, color='lightcyan')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
ヒストグラムの色をハニーデューにする	plt.hist(データ列, color='honeydew')
ヒストグラムをシエナ色として描画する	plt.hist(データ列, color='sienna')
データフレームを列によってグループ化し、要約統計量を求める	df.groupby(column).describe()
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
データフレームのリストカラムを百の位で四捨五入する	df[aList].round(-2)
環境はWindows	sys.platform.startswith('win32')
辞書の値として要素が含まれている	element in aDict.values()
表データを列でによって降順にソートする	df.sort_values(by=column, ascending=False)
selectorsでマスクされたリストの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
散布図をrgbの左三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
配列の合計	np.sum(aArray)
データフレームの中の列をn個にビニングする	pd.cut(df[col], n)
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのそれぞれのグループの個数を求める	df.groupby(column).count()
空のカウンタを作る	collections.Counter()
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
グラフの中の縦軸に説明を付ける	plt.ylabel('y軸ラベル')
データフレームのリスト列のNaNを直後の値に設定する	df[aList].fillna(method='bfill')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
データ列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
表データの各グループごとの最小値	df.groupby(column).min()
option: 平均を追記する	showmeans = False
データ列のNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列を赤色にする	f'\033[31m{value}\033[0m'
濃いシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームから1行だけカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
カラムのNaNを50パーセンタイルに指定する	ds.fillna(ds.median())
散布図のクロスマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
リストと配列についての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
大文字を小文字にする	s.lower()
表示可能な最大行数を減らす	pd.set_option('display.max_rows', n)
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
n行をデータフレームから重複を認めてランダムにサンプリングする	df.sample(n, replace=True)
二つの集合が互いに素か確認する	aSet.isdisjoint(aSet2)
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
データ列を使用する	import pandas as pd
リストとイテラブルについて散布図を描画して、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
Pandasで文字列をフォーマットfmtで日付データに変換する	pd.to_datetime(s, format=fmt)
折れ線グラフを描いて、カラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
マッピングのキーを要素に設定する	aDict[key] = element
変数を赤色で表示する	print(f'\033[31m{value}\033[0m')
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
配列と数列についての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
日付時刻データがタイムスタンプデータより前か調べる	aDatetime < aDatetime2
データフレームのリスト列のpercent分位数を求める	df[aList].quantile(percent/100)
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
実数の双曲線余弦の逆数を求める	math.acosh(x)
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
カテゴリで色分けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
折れ線グラフをアリスブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='aliceblue')
クラスが名前付きタプルかどうか調べる	issubclass(C, tuple)
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
リストからオブジェクトを捨てる	aList.remove(element)
列'A'と列'B'をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
ナバホホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
ミディアムスプリンググリーンにヒストグラムの色をする	plt.hist(データ列, color='mediumspringgreen')
深紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
辞書をJSON形式で出力ストリームに保存する	json.dump(aDict, fout, ensure_ascii=False)
三整数の最小公倍数を計算する	math.lcm(n, n2, n3)
文字列リストにリストを変換して、タブによって一つにする	'\t'.join(map(str, iterable))
データフレームの欠損値を最大値で置換する	df.fillna(df.max())
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategrey')
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
option: フクシアにグラフの色を設定する	color = 'fuchsia'
ファイルを全部、読み込む	f.read()
折れ線グラフを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: コーラルにグラフの色を設定する	color = 'coral'
黒い上三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
カラーバーを描く	plt.colorbar()
データフレームのリストカラムの中に文字列があるかどうか調べる	df[aList].isin([value])
データフレームのリスト列の中のNaNの個数を数える	df[aList].isna().sum()
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
散布図のバツマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
プロットにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
リストと配列についての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図にrgbの三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
カテゴリ別でグループ化して、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
最大最小から配列を作成する	np.linspace(最小値, 最大値, 要素数)
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
option: ライトグレーを使う	color = 'lightgrey'
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームのグループごとの分散	df.groupby(column).var()
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
折れ線グラフのクロスマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
型のサブ型	issubclass(サブクラス, クラス)
小数点以下3桁までJSONLファイルにデータフレームを書き込む	df.to_csv(filename, float_format='%.3f')
マップ上でキーが未定義か調べる	key not in aDict
option: グレー色を使う	color = 'grey'
分類結果の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
文字列中に部分文字列が含まれないか調べる	sub not in s
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
オブジェクトの型を使う	type(obj)
タイムスタンプを使う	import time
n2分のnを計算する	n / n2
折れ線グラフをアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='aquamarine')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームのカラムが正規分布からどの程度尖っているか見る	df[col].skew()
スチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='steelblue')
横に並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームを２つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
色テーマを全般的に明るくする	sns.set(pallete='bright')
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
空のロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
xが一桁の数	-9 <= x <= 9
タン色を用いてヒストグラムを描画する	plt.hist(データ列, color='tan')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
エンコーディング	sys.getdefaultencoding()
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
第一引数で指定されたファイルの名前	sys.argv[1]
複数の列によって昇順にデータフレームを並べる	df.sort_values(by=column, ascending=True)
組の合計を求める	sum(aTuple)
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
シエナ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgray')
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
データフレームの中のカラムを等量でn個に分割する	pd.qcut(df[col], n)
option: オリーブに色を設定する	color = 'olive'
ロバスト回帰モデルを新規作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
第一引数で指定されたファイル名	sys.argv[1]
nがn2よりも大きいかどうか調べる	n > n2
データフレームを表示するとき最大行数を変更する	pd.set_option('display.max_rows', n)
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
Pandasのバージョンをプリントする	print(pd.__version__)
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
カウンタをシーケンスとして更新する	aCounter.update(iterable)
自然数のGCD	math.gcd(n, n2)
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
範囲を指定して整数乱数を得る	random.randint(最小値, 最大値)
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データフレームからインプレイスで重複を削除する	df.drop_duplicates(inplace=True)
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
散布図のポイント印を青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
option: グリーンイエローにグラフの色をセットする	color = 'greenyellow'
リストとリストの散布図を描いて、マーカーを星にセットする	plt.plot(データ列x, データ列y, marker='*')
リストを黄色にする	f'\033[33m{value}\033[0m'
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
散布図のクロス印を赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
数式を因数分解する	sympy.factor(e)
year年month月day日をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day)
リストを更新不能なセットにする	frozenset(iterable)
散布図のダイアモンド印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
縦棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームから数値データの列だけ抽出する	df.select_dtypes('number')
option: グラフの色をハニーデューに設定する	color = 'honeydew'
データフレームを関数の値でグループ分けする	df.groupby(関数)
変数について数値の積分を算出する	sympy.integrate(e, z)
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
データフレームの内の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
ひとつでも非アスキー文字が文字列中に含まれるか	any(not c.isascii() for c in s)
データフレームのNaNを直後の値に設定する	df.fillna(method='bfill')
データフレームの上n行を取り出す	df.head(n)
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
イテラブルから配列を作成する	np.array(iterable)
option: 書き込みモードを使用する	mode = 'w'
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
項目名がマッピングに存在する	key in aDict
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
リストとリストを連結する	aList + aList2
option: フォントの色をシルバーに指定する	color = 'silver'
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
ヒストグラムを赤くする	plt.hist(データ列, color='r')
数値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
データフレームのカラムの尖度	df[col].skew()
散布図に赤い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムの色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
半透明の実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームのリストカラムの欠損値をxにする	df[aList].fillna(x)
データフレームのカラムを100の位で四捨五入する	df[col].round(-2)
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
ミディアムパープル色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
データフレームの中のカラムを分割する	pd.cut(df[col], aList)
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
散布図をインディゴ色を用いて描画する	plt.scatter(データ列x, データ列y, color='indigo')
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
整数nがリストのひとつか調べる	n in aList
データフレームの列を消して、更新する	df.drop(column, axis=1, inplace=True)
データフレームのリスト列の平均値	df[aList].mean()
文字列の中のケースを無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
配列の要素ごとに加算する	aArray + aArray2
option: フォントの色をアクアに設定する	color = 'aqua'
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
棒グラフを暗い赤色を使って描画する	plt.bar(データ列x, データ列y, color='darkred')
デピンク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
折れ線グラフを色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
プロットで使う横軸の説明を変更する	plt.xlabel('x軸ラベル')
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
文字のユニコードを求める	ord(ch)
両端キューのstart〜endの部分値を使う	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
部分文字列が文字列の終了位置より前に含まれないかどうか	s.find(sub, 0, end) == -1
三変数の最大値	max(x, y, z)
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
データフレームは正規分布からどの程度、歪んでいるか調べる	df.kurt()
全要素を初期値で初期化した行列を初期化する	np.full((行数, 列数), 初期値, dtype=np.int)
リストとリストについての散布図に赤い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
グラフを全般的に暗くする	sns.set(pallete='dark')
多次元データを多次元尺度構成法としてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データ列のNaNを最大値に指定する	ds.fillna(ds.max())
折れ線グラフの菱形マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: グラフの色をミントクリームに変更する	color = 'mintcream'
リスト内の要素が少なくとも一つ真	any(aList)
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
ナバホホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
高頻出な方からカウンタを列挙する	aCounter.most_common()
2つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
リストとリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データ列の推移を色付きの破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
日付時刻データからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
実数のタンジェント	math.tan(x)
スカイブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
データフレームの内のNaNを落とす	df.dropna()
データフレームを列の値によってグループ化し、要約統計量を算出する	df.groupby(column).describe()
多次元データをt-SNEとして淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
線形回帰モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームは正規分布からどの程度歪んでいるか見る	df.kurt()
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
日付時刻データからn秒を減らす	aDatetime - datetime.timedelta(seconds=n)
マップに別の辞書の項目を更新する	aDict.update(aDict2)
データフレームを２つの列によってソートする	df.sort_values(by=['A', 'B'])
データフレームの列がxより少ない行を抽出する	df[df[column] < x]
データフレームの中で、列の重複を調べる	df.duplicated(subset=column)
option: インディゴを使用する	color = 'indigo'
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
データフレームを列によって昇順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
タプルを小さい順にソートする	sorted(aTuple, reverse=True)
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
シャルトリューズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
スクリプトファイルのフォルダパスを求める	os.path.dirname(os.path.abspath(__file__))
ライトスチールブルーにヒストグラムの色をセットする	plt.hist(データ列, color='lightsteelblue')
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
折れ線グラフをマルーン色として描画する	plt.plot(データ列x, データ列y, color='maroon')
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
ファイルパスからストリームを開いて]、fileとする	file = open(filepath)
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
小数点数の双曲線正弦	math.sinh(x)
連続したベクトルの自動作成する	np.arange(開始値, 終了値, 等差)
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
ランタイムの再帰の上限	sys.getrecursionlimit()
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
データフレームのカラムのモードを求める	df[col].mode()
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムをオリベドラブ色を用いて描画する	plt.hist(データ列, color='olivedrab')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
表示可能な列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
赤い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
標準入力から入力される	input()
最適な位置に凡例を表示する	plt.legend(loc='best')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
フォレストグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データ列の数値時刻から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
タイムスタンプデータと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ヒストグラムを耐火レンガ色として描画する	plt.hist(データ列, color='firebrick')
nの2乗	n ** 2
エクセルデータでJSONLファイルにデータフレームを保存する	df.to_excel(filename)
ダークスラテグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
ファイルを追加用にオープンする]	open(filepath, mode='a')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
最大長nの両端キューを準備する	collections.deque(maxlen=n)
データフレームを表示するときカラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
シルバー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
実数が負か調べる	x < 0
ヒストグラムの色をミディアムパープルにする	plt.hist(データ列, color='mediumpurple')
option: グラフの色をホットピンクに設定する	color = 'hotpink'
データフレームからランダムに一行を抽出する	df.sample()
データフレームのリストカラムの中にある文字列の個数をカウントする	df[aList].isin([value]).sum()
線グラフをディープスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
数式のパラメータを数値で置き換える	e.subs(z, e2)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
option: スラッシュをセパレータで用いる	sep = '/'
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
タンジェントの逆数を求める	math.atan(x)
正接の逆数	math.atan(x)
2を底とする浮動小数点数の対数	math.log2(x)
画像ファイルとしてプロットを保存する	plt.savefig('foo.png')
データフレームを欠損値を含めて列の値で集約する	df.groupby(column, dropna=False)
データ列の正規分布に対する左右対称性	ds.kurt()
空の集合	set()
n2がnより大きく、かつ、n3より小さいか調べる	n < n2 and n2 < n3
列'A'と列'B'をキーとして二つの表を左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
リストの要素をソートする	sorted(aList)
印字可能な文字を全て使う	string.printable
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ダークゴールデンロッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
英字の小文字を使う	string.ascii_lowercase
カウンタの正のカウントのみ残す	+aCounter
データフレームをインデックスによって降順で整列する	df.sort_index(ascending=False)
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
縦棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
option: 耐火レンガ色を使う	color = 'firebrick'
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの色をミディアムバイオレットレッドにする	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームの中のNaNを削除する	df.dropna()
エンコーディングを確認する	sys.getdefaultencoding()
文字列リストを連結して一つの文字列にする	''.join(aStringList)
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
整数nが集合のどれかか調べる	n in aSet
option: スラグレーに色を指定する	color = 'slategray'
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
データフレームの数値を小数点以下n桁で四捨五入する	df.round(n)
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
データ列の平均値	ds.mean()
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのカラムの母標準偏差を求める	df[col].std(ddof=0)
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: セパレータを文字列にする	sep = s
実数を実数で整数除算する	x // y
現在処理中の例外を情報	sys.exc_info()
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
実行結果を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
ケンドール相関係数でデータフレームの列とカラムの相関行列	df[[column, column2]].corr(method='kendall')
n回文字列が繰り返すイテラブル	itertools.repeat(element, n)
n割るn2	n / n2
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
option: データ型として整数型を用いる	dtype = np.int
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
空のタプルを得る	()
横棒グラフをイエローグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
データフレームを2つの列によって並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: インディアンレッドにグラフの色を変更する	color = 'indianred'
散布図を赤い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
混同行列をヒートマップを用いて確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
行列の行列積	np.matmul(aArray, aArray2)
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
散布図を青紫色として描画する	plt.scatter(データ列x, データ列y, color='violet')
数列を二つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
シエナ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
数値を緑色で出力する	print(f'\033[32m{value}\033[0m')
データフレームを列でによって破壊的に並べ直す	df.sort_values(by=column, inplace=True)
option: ダークカーキ色を使用する	color = 'darkkhaki'
やわらかい青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ファイルを文字列の示すエンコーディングを用いてオープンする]	open(filepath, encoding=s)
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
option: オレンジを使う	color = 'orange'
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
現在の分	datetime.date.today().minute
文字列が全て空白文字か調べる	s.isspace()
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
タプルの値に要素が含まれていない	element not in aDict.values()
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
両端キューをdequeue	deq.popleft()
回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
数値の数値	float(e)
option: 色をフォレストグリーンに設定する	color = 'forestgreen'
ヒストグラムのラインスタイルを実線に指定する	plt.hist(データ列, linestyle='solid')
パパイヤウィップ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
やわらかい青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
ヒストグラムをグリーンイエロー色として描画する	plt.hist(データ列, color='greenyellow')
カウンタ同士で∪演算する	aCounter | aCounter2
リストは全て真	all(aList)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
配列とリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
散布図のダイアモンドマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームをグループ化し各列に対し合計を求める	df.groupby(column)[column2].sum()
二つの文字列は同じかどうか調べる	s == s2
nを八進文字列に変換する	oct(n)[2:]
線グラフをライトゴールドロディイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
リストをひとつ置きに取り出す	aList[::2]
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
試しに何か動かす	print('Hello World')
リストと数列についての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームの列の75パーセンタイル	df[col].quantile(0.75)
option: 三角印を描画する	marker = '^'
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
タプルの先頭を取り除く	aTuple[1:]
イテラブルを配列にする	np.array(iterable)
文字列を部分文字列で二分し、後半の文字列を見る	s.partition(sub)[-1]
タプルとタプルを加える	aTuple + aTuple2
作業ディレクトリを使う	os.getcwd()
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
青い実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
リストとリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
柱状グラフのビン数を指定する	plt.hist(データ列, bins=区関数)
option: ピンク色を使う	color = 'pink'
リストとリストの散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図に黒い▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: グラフの色をライトコーラルにセットする	color = 'lightcoral'
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
入力から２つの整数値を読む	A, B = map(int, input().split())
グラフで使用するフォントを指定する	sns.set(font=フォント名)
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
Pandasでデータフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
キーが辞書に存在するか調べる	key not in aDict
データフレームを各列毎にグループ分けし、、列の合計を求める	df.groupby(column)[column2].sum()
option: ミディアムオーキッドに色を指定する	color = 'mediumorchid'
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
黒い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
オブジェクトのバイト長	sys.getsizeof(obj)
クラスのサブクラスか確認する	issubclass(サブクラス, クラス)
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
散布図の大バツ印を赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
option: ダークスレートブルーを使用する	color = 'darkslateblue'
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
プロットのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
option: 切片を計算しない	fit_intercept = False
文字列の接尾辞は部分文字列か判定する	s.endswith(sub)
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
option: グラフの種類を破線に設定する	linestyle = 'dashed'
線グラフを点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
折れ線グラフの▼印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの列が正規分布からどれだけ、尖っているか確認する	df[col].skew()
リストと配列の散布図をプロットして、右三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
実数を小数点以下で四捨五入する	round(x, n)
データフレームを'A'列の値によってグループ分けし、、列挙する	[(name, group) for name, group in df.groupby('A')]
option: データ型として整数型を使う	dtype = np.int
option: BOM付きを使う	encoding = 'utf_8_sig'
ローングリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヘッダー行を右寄せにする	pd.set_option('colheader_justify', 'right')
year年month月day日を日付にする	datetime.date(year=year, month=month, day=day)
カウンタを辞書に変換する	dict(aCounter)
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
赤色で線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
rgbのクロスマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
グラフの見栄えを良くする	import seaborn as sns
集合の補集合を算出する	aSet.difference(aSet2)
標準入力から1行読み取る	input()
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
option: グリーンイエロー色を使う	color = 'greenyellow'
リストを累積した列	itertools.accumulate(iterable, operator.mul)
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
双方向キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
実数のn乗して浮動小数点数による余り	pow(x, n, y)
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
部分文字列で文字列を分けた場合の最初の文字列	s.partition(sub)[0]
二変数の最大値	max(x, y)
リストの最初	aList[0]
色付きの破線を使って数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
'A'列によって昇順にデータフレームを並べ直す	df.sort_values(by='A', ascending=True)
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
データフレームをグループ化し、それぞれの列に対し標準偏差を算出する	df.groupby(column)[column2].std()
決定木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
データ列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのカラムを千の位で四捨五入して、整数にする	df[col].round(-3).astype(int)
option: 改行コードをWindowsに指定する	newline = '\r\n'
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
データフレームの未入力値を中央値で補う	df.fillna(df.median())
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
ミディアムターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
データフレームを転置する	df.T
リストとデータ列について散布図を描画して星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを千の位で丸めて、整数にする	df.round(-3).astype(int)
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
分子割る分母	fractions.Fraction(分子, 分母)
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
常用対数	math.log10(x)
option: 欠損値を先頭にする	na_position = 'first'
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
複数のリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
散布図をペールグリーン色として描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ファイルを開き]、読み込みストリームを使う	open(filepath, mode='r')
オプションで標準出力に出力する	file = sys.stdout
数値の微分を算出する	sympy.diff(e)
散布図をゴールド色を用いて描画する	plt.scatter(データ列x, データ列y, color='gold')
プラットホームがMacOS	sys.platform.startswith('darwin')
折れ線グラフの菱形印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの数値を四捨五入する	df.round()
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
双方向キューに値をプッシュする	deq.append(element)
２つの数値をタブで区切って表示する	print(value, value2, sep='\t')
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
データフレームの列の中の欠損値の合計を数える	df[col].isna().sum()
折れ線グラフの色をリネンにする	plt.plot(データ列x, データ列y, color='linen')
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
文字列の無限のイテラブル	itertools.repeat(element)
option: マーカーの色をライムにする	markerfacecolor = 'lime'
小数点数の双曲線余弦を求める	math.cosh(x)
データフレームの列を四捨五入して、整数にする	df[col].round().astype(int)
nまでの奇整数列	list(range(1, n, 2))
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
数で実数を除算して、切り捨てる	x // y
option: レモンシフォン色を使う	color = 'lemonchiffon'
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
オリーブにヒストグラムの色を変更する	plt.hist(データ列, color='olive')
オブジェクトは論理値クラスのインスタンスか	isinstance(obj, bool)
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
option: グラフの色をコーラルに設定する	color = 'coral'
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
現在が火曜日かどうか	datetime.datetime.today().weekday() == 1
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ライトコーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
二つのデータフレームを縦向きに一つにする	pd.concat([df, df2], axis=0)
行列と同じ大きさの空のベクトルを作る	np.empty_like(aArray)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
インデックスを付けずにJSONLファイルにデータフレームを保存する	df.to_csv(filename, index=None)
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
データフレームのn行以降選ぶ	df[n:]
値の出力を改行なしに行う	print(value, end='')
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
nが偶数か	n % 2 == 0
回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
nをn2乗に増やす	n **= n2
カウンタの最も頻出な項目	aCounter.most_common()[0]
データ列のNaNを最大値で埋める	ds.fillna(ds.max())
nが配列のいづれかか調べる	n in aArray
文字列中にひとつでも非ASCII文字があるか調べる	any(not c.isascii() for c in s)
xでデータフレームのリスト列の欠損値を補う	df[aList].fillna(x)
nがn2以下またはn3以上	n <= n2 or n >= n3
変数について数式を積分する	sympy.integrate(e, z)
データフレームを各列毎にグループ化し、文字列というグループの個数を算出する	df.groupby(column).size()[s]
型のサブクラスかどうか	issubclass(サブクラス, クラス)
データフレームを２つの列によって並べ直してNaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
日付時刻データの年を求める	aDatetime.year
データフレームをグループ化しそれぞれの列に対し個数を計算する	df.groupby(column)[column2].count()
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームを表示するとき、表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
クラス分類をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
option: アクア色を使用する	color = 'aqua'
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
8進数文字列を整数に変換する	int(s, 8)
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightgreen')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
Pandasで、データ列を日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
イテラブルを更新不能な集合にする	frozenset(iterable)
小さい方から組の要素を並べ直す	sorted(aTuple, reverse=True)
JSONLファイルにカラムの名前を付けずにデータフレームを書き込む	df.to_csv(filename, header=None)
サポートベクター分類器を新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
正則化付き線形回帰モデルを作成する	model = sklearn.linear_model.ElasticNet()
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
option: ライムにフォントの色をする	color = 'lime'
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
option: デピンク色を使う	color = 'deeppink'
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
両端キューに数値をenqueueする	deq.appendleft(element)
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
year年の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
データフレームの複数のカラムを並べて箱ひげ図として可視化する	plt.boxplot([df['カラム'], df['カラム']])
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ファイルパスを追加用に開き]fとする	f = open(filepath, mode='a')
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データフレームを昇順に列によってソートする	df.sort_values(by=column, ascending=True)
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
オールドレース色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
標準入力から1文字だけ読み込む	sys.stdin.read(1)
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
データフレームの列の文字列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
スタック中の数値のインデックス	deq.index(element)
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを列によってソートし、、下位n件を取り出す	df.sort_values(columns).tail(n)
辞書のキーの値を参照する	aDict[key]
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
リストの先頭のn要素を除く	aList[n:]
文字列の左側から空白を消す	s.lstrip(' ')
青紫色でヒストグラムを描画する	plt.hist(データ列, color='violet')
実数の双曲線余弦を求める	math.cosh(x)
nがn2と等しい	n == n2
散布図のバツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
データ列を整数に丸める	ds.round()
表データの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
タプルとタプルを連結する	aTuple + aTuple2
散布図の左三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームのカラムは何分か確認する	df[col].dt.minute
数列とリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
データ列とリストの散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: NaNを先頭に来るようにする	na_position = 'first'
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームの列一覧を見る	df.info()
三つの最小値	min(x, y, z)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
目盛線	plt.grid(color='#800080')
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
MSDとして多次元データを濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
散布図を赤い星マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
リストのn番目の値を削除する	del aList[n]
全般的に色を濃くする	sns.set(pallete='deep')
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
ダークゴールデンロッドにヒストグラムの色を変更する	plt.hist(データ列, color='darkgoldenrod')
タイムスタンプデータの日数	aDatetime.day
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
空のリスト	[]
リストとリストの散布図をプロットして、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
正規表現を用いる	import re
データフレームのリストカラムの中にいくつ欠損値が含まれるか数える	df[aList].isna().sum()
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線プロットでデータフレームの列を可視化する	plt.plot(df[column], df[column])
option: デピンク色を使用する	color = 'deeppink'
数列とリストについて散布図を描画して右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
パターンを大文字・小文字を無視して事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
eの乗数	math.exp(x)
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
列を累加した列	itertools.accumulate(iterable)
option: 色をライトスレイグレーに設定する	color = 'lightslategrey'
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
列'A'と列'B'をキーにして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
縦棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
リストと配列について散布図を描画してマーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
option: やわらかい青を使用する	color = 'cornflowerblue'
seabornのデフォルトスタイルを適用する	sns.set()
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
浮動小数点数の値が整数かどうか	x.is_integer()
回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
双方向キューのn番目に文字列を挿入する	deq.insert(n, element)
option: インディゴ色を用いる	color = 'indigo'
追加できるように既存のファイルをBOM付きで開く]	open(filepath, mode='a', encoding='utf_8_sig')
日付データにn分を加える	aDate + datetime.timedelta(minutes=n)
文字列が全て英字か	s.isalpha()
option: シーグリーン色を使う	color = 'seagreen'
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
イテラブルと列をつなぐ	itertools.chain(iterable, iterable2)
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
option: フォントの色をパウダーブルーに変更する	color = 'powderblue'
グラフの中のy座標にラベルを付ける	plt.ylabel('y軸ラベル')
タプルから最後の値をポップする	aDict.popitem()
部分文字列を文字列の開始位置から探す	s.find(sub, start)
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
アクア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
タプルを引数として展開して表示する	print(*aTuple)
２次元タプルをflattenする	sum(aTuple)
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
表データからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
option: マーカーをポイントに設定する	marker = '.'
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategray')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
日付データと日付データの時間差を求める	aDate - aDate2
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
行列積を計算する	np.matmul(aArray, aArray2)
カウンタからゼロカウントを取り出す	+aCounter
option: 色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
データフレームの欠損値を削除する	df.dropna()
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
散布図に▲マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムをアイボリー色を用いて描画する	plt.hist(データ列, color='ivory')
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
データ列の第二四分位数を計算する	ds.median()
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
option: フォントの色をイエローグリーンに設定する	color = 'yellowgreen'
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
データフレームを列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
文字列がリストの要素でないかどうか調べる	element not in aList
散布図の四角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームを'A'列でによって降順に並べる	df.sort_values(by='A', ascending=False)
棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
横棒グラフをプロットし、、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
文字列を部分文字列で分割したときの残りの文字列	s.partition(sub)[-1]
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
ライトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
ベクトルの行	aArray[行番号]
option: マーカーを大バツに変更する	marker = 'X'
逆双曲線余弦を求める	math.acosh(x)
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
散布図の印をポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
option: ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
直後の値でデータフレームのカラムの欠損値を補う	df[col].fillna(method='bfill')
option: パープルにグラフの色をセットする	color = 'purple'
リストを下線付き化する	f'\033[4m{value}\033[0m'
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
折れ線グラフの▽印の大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
折れ線グラフに下三角印を使用する	plt.plot(データ列x, データ列y, marker='v')
双曲線余弦の逆数を求める	math.acosh(x)
データ列が何月か確認する	ds.dt.month
大文字列	string.ascii_uppercase
散布図をアンティークホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
nとn2が等しいかどうか調べる	n == n2
カウンタを辞書として更新する	aCounter.update(aDict)
縦棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
リストとリストについての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
文字列のn番目の文字を使う	s[n]
タプルの値として要素が含まれているか調べる	element in aDict.values()
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
データフレームを複数の列でで降順にソートする	df.sort_values(by=column, ascending=False)
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
ヒストグラムの色をゴールドに指定する	plt.hist(データ列, color='gold')
option: マーカーを菱形に変える	marker = 'D'
全要素を0で初期化した配列を作成する	np.zeros(要素数)
黒い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
線形回帰モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
スチールブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
要素が集合に含まれるかどうか	element in aSet
キューが空	len(deq) == 0
二つのデータ列を箱ヒゲ図にする	plt.boxplot([データ列, データ列])
配列の行ごとの合計値	np.sum(aArray, axis=1)
option: データ型を指定する	dtype = np.int32
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
オブジェクトをイテレータに変換する	iter(obj)
グラフの使途を論文に設定する	sns.set(context='paper')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
2つのリストからマッピングを新規生成する	dict(zip(aList, aList2))
データ列を横棒プロットにする	plt.barh(ラベル列, データ列)
日付データが日付データより前	aDate < aDate2
実数を千の位で丸める	round(x, -3)
カウンタからリストをカウントして引く	aCounter.subtract(iterable)
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: ラベンダー色を用いる	color = 'lavender'
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
数値の平方根を求める	sympy.sqrt(e)
白色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
標準出力の出力先がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
二つのオブジェクトが等しいか確認する	obj == obj2
新しいガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
折れ線グラフの星印の色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
縦棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
小数点数の逆双曲線正接を求める	math.atanh(x)
改行文字を使う	'\n'
タプルのキーを列挙する	aDict.keys()
グラフのy座標を対数に変更する	plt.yscale('log')
JSONLファイルにTSVファイルを用いてデータフレームを保存する	df.to_csv(filename, sep='\t')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付データにn時間を加える	aDate + datetime.timedelta(hours=n)
カテゴリでグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
データ列を小数点以下n桁で丸める	ds.round(n)
option: グラフの色をシスルに設定する	color = 'thistle'
option: 色をダークバイオレットに設定する	color = 'darkviolet'
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
縦棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
配列とリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
組のn番目の	aTuple[n]
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
折れ線グラフのダイアモンドマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
配列とリストの散布図を描画して、左三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームのカラムの曜日数を使う	df[col].dt.dayofweek
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるかどうか	s.find(sub, start, end) != -1
ヒストグラムの色をディープスカイブルーに指定する	plt.hist(データ列, color='deepskyblue')
プロットで使うテーマを指定する	sns.set(pallete=パレット名)
カラムの分散を求める	ds.var()
データフレームのカラムのNaNを直前の値で埋める	df[col].fillna(method='ffill')
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを各列と列の組み合わせ毎に集約して、分散を求める	df.groupby([column, column2], as_index=False).var()
ティール色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
横棒グラフをシルバー色として描画する	plt.barh(データ列x, データ列y, color='silver')
JSONフォーマットの文字列を辞書に変換する	json.loads(jsonString)
リストの末尾から値をポップする	aList.pop()
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
縦棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
データフレームを表示するとき、n列までデータフレームを表示するようにする	pd.set_option('display.max_columns', n)
n個にデータ列を等量でビン分割する	pd.qcut(ds, n)
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
第一引数のファイルの名前	sys.argv[1]
ゼロ埋めされたブール型の行列	np.zeros(要素数, dtype=np.int32)
データフレームのカラムのNaNをxで補う	df[col].fillna(x)
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
データフレームのリスト列の相関行列	df[aList].corr()
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
option: ポイントマーカーを描画する	marker = '.'
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームで、列と列の重複をドロップする	df.drop_duplicates(subset=column)
散布図をネイビー色を用いて描画する	plt.scatter(データ列x, データ列y, color='navy')
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
あてはまりの良さを求める	sklearn.metrics.r2_score(データ列, データ列2)
スタックの最後に値を追加する	deq.append(element)
最初のカテゴリーを除外し、データフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
xが-9以上、9以下かどうか判定する	-9 <= x <= 9
rgbのダイアモンドマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームから指定した４列のみ取り出す	df[[column, column2, column3, column4]]
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*')
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
リストの最後のn要素を取り除く	aList[:-n]
Pandasで、フォーマットfmtでデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
オブジェクトが無限に繰り返すイテラブル	itertools.repeat(element)
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
リストとリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
線形回帰モデルの係数	model.coef_
nが負の整数	n < 0
nがn2未満、もしくはn3以上か調べる	n < n2 or n >= n3
option: 色をゲインズボロに変更する	color = 'gainsboro'
タイムスタンプデータが何秒か知る	aDatetime.second
外れ値に強い単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
ベクトルを平坦にする	aArray.flatten()
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
オレンジレッドにヒストグラムの色を変更する	plt.hist(データ列, color='orangered')
オブジェクトは集合クラスのインスタンスか調べる	isinstance(obj, set)
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
Pandasで文字列の数値時刻から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
データフレームから指定された４つの列のみ選択する	df[[column, column2, column3, column4]]
半透明の実線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
フォレストグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
棒グラフをコーンフラワーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列をコロンで区切って文字列リストに変換する	s.split(':')
文字列をセパレータで区切って、列挙する	s.split(sep)
カンマで文字列を分割して、文字列リストに変換する	s.split(',')
二つの文字列をコロンで区切って出力する	print(value, value2, sep=':')
option: イエローグリーン色を使用する	color = 'yellowgreen'
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
棒グラフをミディアムシアグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
配列の最大値	np.max(aArray)
半透明の破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
nがリストのいづれか	n in aList
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
柱状グラフとしてデータ列を可視化する	plt.hist(データ列)
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
ダークサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
タプルをインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: フォントの色をカーキに設定する	color = 'khaki'
option: サンディーブラウンを使う	color = 'sandybrown'
文字列の文字数	len(s)
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
文字列中に非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
文字列はタプルの要素でないか調べる	element not in aTuple
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
ゴーストホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
タプルの値を関数に適用した結果でソートする	sorted(aTuple, key=func)
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
ダークレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームの行の一覧を使う	df.index
本日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
文字列はタプルの要素でないか確認する	element not in aTuple
パープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
ヒストグラムの色を青にセットする	plt.hist(データ列, color='blue')
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
オプションでファイルを出力にする	file = sys.open(filename, 'w')
折れ線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ディムグレーにヒストグラムの色を変更する	plt.hist(データ列, color='dimgrey')
データフレームのカラムは何曜日か調べる	df[col].dt.weekday_name
ファイルを全部読み込む	f.read()
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームから重複を残さず、取り除く	df.drop_duplicates(keep=False)
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: 淡いピンク色を使用する	color = 'lightpink'
option: 紺碧にグラフの色を設定する	color = 'azure'
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ポスターにプロットの使途を変更する	sns.set(context='poster')
辞書の項目名一覧を参照する	list(aDict)
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
スクリプトのファイルの名前	sys.argv[0]
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
option: プラムにグラフの色を設定する	color = 'plum'
データ列を100の位で丸める	ds.round(-2)
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
行列の転置行列	aArray.T
横棒グラフをオリベドラブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: フォントの色をサーモンに設定する	color = 'salmon'
option: 色をライトスレイグレーに設定する	color = 'lightslategray'
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
等量でリストをビン数nを用いてビン分割する	pd.qcut(aList, n)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
浮動小数点数を十六進表記の文字列にする	x.hex()
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
リストを文字列リストに変換して、カンマを使って連結する	','.join(map(str, iterable))
折れ線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
折れ線グラフの色をデピンクに指定する	plt.plot(データ列x, データ列y, color='deeppink')
データ列のRMSEを算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
データフレームを2つのカラムによってグループ化し記述統計量を計算する	df.groupby(['A', 'B']).describe()
nが2で割り切れないか確認する	n % 2 == 1
option: フォントの色をホワイトに変更する	color = 'white'
オブジェクトは整数か	isinstance(obj, int)
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
列を文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
いつまでも数え上げるする	itertools.count()
option: 改行を区切り記号で使用する	sep = '\n'
単位行列	np.eye(行数, 列数)
データフレームを二つの列の値でまとめたグループ	df.groupby(['A', 'B'])
option: 赤にグラフの色を設定する	color = 'red'
実線で線を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
文字列を空白を用いて区切って、整数リストに変換する	map(int, s.split())
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, N)
折れ線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
データフレームのカラムの値が欠損値かどうか	df[col].isna()
折れ線グラフの色をカラーコードとして指定する	plt.plot(データ列x, データ列y, color='#800080')
データ列を書式fmtでdatetime64型に変換する	pd.to_datetime(ds, format=fmt)
リストの末尾のn要素を除く	aList[:-n]
ファイル名がTSVファイルか確認する	filename.endswith('.tsv')
空のカウンタ	collections.Counter()
リストの平均値を算出する	sum(aList)/len(aList)
コマンド引数を一覧として得る	sys.argv[1:]
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
データフレームの行を範囲指定して抽出する	df[start:end]
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
option: 区切りをカンマにする	sep = ','
カラムの第三四分位数	ds.quantile(0.75)
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
タイムスタンプデータの日付	aDatetime.date()
option: 色をロイヤルブルーに設定する	color = 'royalblue'
nを二進リテラルに変換する	bin(n)
データフレームのカラムの中にいくつ欠損値があるかカウントする	df[col].isna().sum()
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
データフレームのカラムの値は欠損値かどうか調べる	df[col].isna()
文字列中のタブ文字をn個の空白に置換する	s.expandtabs(tabsize=n)
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
散布図を左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<')
色付きの実線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: 区切りを使わない	sep = ''
ファイルを解放する	f.close()
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
文字列のケースを交換する	s.swapcase()
nが一桁の数	-9 <= n <= 9
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
赤い下三角マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
現在が金曜日	datetime.datetime.today().weekday() == 4
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
グリッドを点線にする	plt.grid(linestyle='dotted')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
カデットブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームのカラムの標準偏差を算出する	df[col].std()
option: セパレータをカンマにする	sep = ','
三自然数の最大公約数	math.gcd(n, n2, n3)
実数の小数部	math.modf(x)[0]
黄色で数値をプリントする	print(f'\033[33m{value}\033[0m')
2つの辞書をネストする	collections.ChainMap(aDict, aDict2)
データフレームのリスト列のどの値が頻出か確認する	df[aList].mode()
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列をシンボルにする	sympy.Symbol(s)
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
自然数の順列の総数を求める	math.perm(n)
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
文字列を最後から部分文字列で区切る	s.rsplit(sub)
データフレームを列で集約し、、列の要約統計量を求める	df.groupby(column).describe()[column2]
リストと配列についての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
環境のエンディアンを知る	sys.byteorder
ゴールド色を使ってヒストグラムを描画する	plt.hist(データ列, color='gold')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
データフレームのn行目を削除して、インプレイスする	df.drop(n, axis=0, inplace=True)
配列を分割数nで分割する	pd.cut(aArray, n)
データフレームの列を100の位で四捨五入する	df[col].round(-2)
文字列をスタックのn番目に挿入する	deq.insert(n, element)
リストとリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
数列とリストの散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ダークカーキにヒストグラムの色を変更する	plt.hist(データ列, color='darkkhaki')
横棒グラフの縦幅を変更する	plt.barh(ラベル列, データ列, width=0.5)
データフレームのリスト列を千の位で四捨五入して、整数にする	df[aList].round(-3).astype(int)
nを二進文字列にする	bin(n)[2:]
option: 印を四角に変える	marker = 's'
option: 箱ひげ図を横向きにする	vert = False
タイムスタンプデータが金曜日	aDatetime.weekday() == 4
プロットの背景色を暗くする	sns.set(style='darkgrid')
散布図の左三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
折れ線グラフの三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
グラフの縦横比を等しくする	plt.axis('equals')
ミディアムアクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
3つ並べて配列を柱状グラフにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
実数を実数で除算する	x / y
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフの四角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
数式を簡略にする	sympy.sympify(e)
SJISでTSVを読む	pd.read_csv(filename, encoding='shift_jis')
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
文字列をシンボルにして変数にする	z = sympy.Symbol(s)
xが1、もしくは2、もしくは3に等しいか確認する	x == 1 or x == 2 or x == 3
データフレームを列名リストの値でグループ化し、基本統計量を求める	df.groupby(columns).describe()
折れ線グラフの色をシャルトリューズに変更する	plt.plot(データ列x, データ列y, color='chartreuse')
実数を２乗する	x ** 2
目盛り線	plt.grid(alpha=0.5)
ライトグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
重複した行をインプレイスでデータフレームから削除する	df.drop_duplicates(inplace=True)
option: フォントの色をデピンクに設定する	color = 'deeppink'
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフに星印を用いる	plt.plot(データ列x, データ列y, marker='*')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
線グラフの線の種類を点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
実数の床数	math.floor(x)
棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgrey')
option: グラフの色を紺に設定する	color = 'darkblue'
データフレームを使う	import pandas as pd
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
nで乱数シードを固定する	random.seed(n)
プロットの用途を論文に設定する	sns.set(context='paper')
整数nがタプルのどれかか調べる	n in aTuple
カラムの欠損値を最大値で置換する	ds.fillna(ds.max())
データフレームのそれぞれのグループ毎の分散	df.groupby(column).var()
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: グラフの色をダークグレーにする	color = 'darkgrey'
グラフのカラーテーマを指定する	sns.set(pallete=パレット名)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
データフレームの列がどの程度分散しているか見る	df[col].var()
配列とイテラブルについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
数列とリストの散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
円グラフを円にする	plt.axis('equals')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
浮動小数点数の最大値	sys.float_info.max
行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
配列と数列の散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
リストの四分位を可視化する	plt.boxplot(データ列)
棒グラフを黄緑色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データ列の中にある日付データと文字列の合計を数える	ds.isin([value, value2]).sum()
最大長nの両端キューをシーケンスから生成する	collections.deque(iterable, maxlen=n)
大文字を見る	string.ascii_uppercase
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ファイルをバイナリ用にオープンする]	open(filepath, mode='rb')
option: ダークブルーを使用する	color = 'darkblue'
nをn2で割った値の切り上げ	(n + n2 - 1) // n2
カデットブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームのカラムの25パーセンタイルを計算する	df[col].quantile(0.25)
集合に値を追加する	aSet.add(element)
データフレームのリスト列の欠損値を平均に設定する	df[aList].fillna(df[aList].mean())
データフレームのカラムの中のNaNの合計を数える	df[col].isna().sum()
縦棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
データフレームの列の値がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
横棒グラフをダークバイオレット色として描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームのカラムの日にちを見る	df[col].dt.day
タプルのキーに対応した値	aDict.get(key)
乱数で要素を埋めたベクトル	np.random.random(N)
双方向キューに要素をプッシュする	deq.append(element)
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
日付時刻データからn秒分減らす	aDatetime - datetime.timedelta(seconds=n)
データフレームを'A'列によってソートし、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
折れ線グラフの左三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームをエクセルデータファイルでJSONLファイルに保存する	df.to_excel(filename)
xでデータフレームの欠損値を埋める	df.fillna(x)
列と列の重複をドロップする	df.drop_duplicates(subset=[column, column2])
イテラブルをベクトルにする	np.array(iterable)
重複していない行だけ	df[not df.duplicated(keep=False)]
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
Pandasで、文字列を書式fmtでタイムスタンプに変換する	pd.to_datetime(s, format=fmt)
等差数列を行列に変換する	np.arange(開始値, 終了値, 等差)
配列を縦棒グラフにする	plt.bar(ラベル列, データ列)
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
重回帰分析を行う	model = sklearn.linear_model.LinearRegression()
右に双方向キューの要素をn個分輪番で回す	deq.rotate(n)
実数を数で割った余り	x % y
文字列リストにイテラブルを変換して'改行で連結する	'\n'.join(map(str, iterable))
辞書の項目名一覧	list(aDict)
列の空文字をドロップする	ds.replace('', np.nan).dropna()
日付データが日付データよりあと	aDate > aDate2
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
名前付きタプルを辞書にする	aNamedTupleObject._asdict()
データフレームを'A'列と'B'列の値によって集約し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
実数の双曲線正弦を算出する	math.sinh(x)
option: グラフの色をピンクに変更する	color = 'pink'
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームをエクセルデータファイルでJSONLファイルに書き込む	df.to_excel(filename)
データフレームのカラムの中に存在する日付データの数を数える	df[col].isin([value]).sum()
オブジェクトは集合か	isinstance(obj, set)
option: ホワイト色を用いる	color = 'white'
1行から2つの少数値を読む	A, B = map(float, input().split())
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
シャルトリューズにヒストグラムの色を変更する	plt.hist(データ列, color='chartreuse')
キューをdequeue	deq.popleft()
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
作画の背景色を暗くする	sns.set(style='darkgrid')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
プロットの縦軸を対数に変更する	plt.yscale('log')
文字列の大文字と小文字を逆にする	s.swapcase()
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームが正規分布からどの程度、尖っているか調べる	df.skew()
オブジェクトは浮動小数点数クラスかテストする	isinstance(obj, float)
既存のベクトルを元に全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
ペルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフの色をライムグリーンにする	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
二点間のユークリッド距離を求める	math.dist(point, point2)
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データ列の値を正規表現patternでreplにまとめて置き換える	ds.replace(pattern, repl, regex=True)
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
標準出力を使用する	sys.stdout
リストを白色で表示する	print(f'\033[37m{value}\033[0m')
文字列の終了位置より前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
プログラムをここで終了する	sys.exit()
リストの合計	sum(aList)
文字列を区切りで区切って列挙する	s.split(sep)
配列とリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
nをn2で割った結果の切り上げを求める	(n + n2 - 1) // n2
タプルの最初を除く	aTuple[1:]
二つのデータフレームを列をキーにして内部結合する	pd.merge(df, df2, on=column, how='inner')
横棒グラフをダークレッド色で描画する	plt.barh(データ列x, データ列y, color='darkred')
アクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='aquamarine')
折れ線グラフのマーカーを▽印にする	plt.plot(データ列x, データ列y, marker='v')
棒グラフをミッドナイトブルー色を使って描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
データ列の偏りを対数変換する	np.log(データ列)
マッピングの値として要素は含まれているか調べる	element in aDict.values()
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
日付データからn秒分減算する	aDate - datetime.timedelta(seconds=n)
オプションで標準出力を使用する	file = sys.stdout
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
データ列の値が欠損値か調べる	ds.isna()
横棒グラフをゲインズボロ色を用いて描画する	plt.barh(データ列x, データ列y, color='gainsboro')
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
ダークターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: パールゴールデンロッドを使う	color = 'palegoldenrod'
組の末尾を見る	aTuple[-1]
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
文字列を空白で最後から分割する	s.rsplit()
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
プロットの中に枠なしの凡例を入れる	plt.legend(frameon=False)
リストを緑色でプリントする	print(f'\033[32m{value}\033[0m')
Pandasのバージョンを調べる	print(pd.__version__)
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
折れ線グラフの左三角印を青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
2つのベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
小数点数の余弦	math.cos(x)
rgbの右三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: エンコーディングを文字コードtextに指定する	encoding = text
赤いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
グラフの用途を画面に設定する	sns.set(context='notebook')
データ列は何秒か見る	ds.dt.second
option: 印をポイントに指定する	marker = '.'
データフレームを各列と列の組み合わせ毎にグループ化し、標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
データフレームを関数の値によってまとめた表	df.groupby(関数)
青い一点鎖線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データ列の日を見る	ds.dt.day
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データ列を閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
カウンタ間で積集合演算する	aCounter & aCounter2
option: 色をベージュに設定する	color = 'beige'
option: ダークグリーンに色を設定する	color = 'darkgreen'
文字列を左寄せにする	s.ljust(文字列幅)
折れ線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
集合の補集合を使う	aSet.difference(aSet2)
データ列と配列の散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
option: やわらかい青を使う	color = 'cornflowerblue'
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightgreen')
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
option: アリスブルーを用いる	color = 'aliceblue'
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: サドルブラウンを用いる	color = 'saddlebrown'
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
データフレームを関数の値によってグループ化し基本統計量を算出する	df.groupby(関数).describe()
今日は何曜日か知る	datetime.datetime.today().weekday()
option: 色をオレンジレッドに変更する	color = 'orangered'
折れ線グラフの丸印の線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
散布図の菱形マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
項目名がマッピングに存在していないとき、要素を追加する	aDict.setdefault(key, element)
最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
行列の行列積を求める	np.matmul(aArray, aArray2)
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
列'A'と列'B'をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
リストと配列についての散布図に黒いクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
数値を方程式として解く	sympy.solve(e)
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
リストを分割数nとしてビン分割する	pd.cut(aList, n)
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
要素が集合に含まれるか	element in aSet
カラムのNaNを直前の値で置換する	ds.fillna(method='ffill')
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
データフレームを関数の値によってグループ化する	df.groupby(関数)
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
option: フォントの色をピーチパフに指定する	color = 'peachpuff'
等差数列から乱数を求める	random.randrange(start, end, step)
nとn2が等しいかどうかテストする	n == n2
青紫色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
ベクトルの最小値	np.min(aArray)
ファイルパスからフォルダ名を使う	os.path.dirname(filepath)
標準入力から1行分読む	sys.stdin.readline()
リストとリストの散布図に赤い△マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
πを使用する	math.pi
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
折れ線グラフを色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
散布図をrgbの丸マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
全ての数字	string.digits
データ列の分を求める	ds.dt.minute
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
マゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
option: 印を左三角に変更する	marker = '<'
データフレームから列を二つ選択する	df[[column, column2]]
option: 印を大バツに変える	marker = 'X'
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
データ列の四分位を可視化する	plt.boxplot(データ列)
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
ヒストグラムの色をライトサーモンにする	plt.hist(データ列, color='lightsalmon')
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
縦棒グラフをピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='pink')
散布図に黒い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
列の長さを制限する	collections.deque(iterable, maxlen=n)
option: ダークカーキにグラフの色を指定する	color = 'darkkhaki'
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
オブジェクトは数値か	isinstance(obj, (int,float))
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
折れ線グラフの線種を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
配列と数列について散布図をプロットして、マーカーをポイントにセットする	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
文字列を空白を用いて区切る	s.split()
1文字だけ標準入力から読む	sys.stdin.read(1)
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
データ列の各データ値の出現数	ds.value_counts()
部分文字列が部分文字列で始まるかどうか調べる	s.startswith(sub)
コギーくんを使いたい	import kogi
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
nにn2をかけた値をnにする	n *= n2
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの印を右三角印にする	plt.plot(データ列x, データ列y, marker='>')
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
Pandasで、文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
赤い破線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
整数の順列の総数	math.perm(n)
赤い点線を用いて数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: グラフの色をダーク・スラテグレーに指定する	color = 'darkslategrey'
浮動小数点数の複素数	complex(x)
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データ列の文字列を未入力値にする	ds.replace(s, np.nan)
データフレームのカラムのNaNを平均値で置換する	df[col].fillna(df[col].mean())
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
文字列がタプルに含まれるか調べる	element in aTuple
数を2乗する	x ** 2
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
ライトイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
インプレイスでデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
配列とリストについての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
データフレームの中のNaNの合計を求める	df.isna().sum()
本日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
日付データの月数を見る	aDate.month
スプリンググリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='springgreen')
折れ線グラフをゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='goldenrod')
乱数で要素を埋めた行列	np.random.random(N)
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
データ列間の寄与率を求める	sklearn.metrics.r2_score(データ列, データ列2)
珊瑚色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
重複していない行のみを取り出す	df[not df.duplicated(keep=False)]
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
列によって昇順にデータフレームをソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
全要素を０で初期化した８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
カラムの中に存在するの合計を数える	ds.isin([value]).sum()
異なるカラムをキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
オブジェクトの参照カウントを知る	sys.getrefcount(obj)
データフレームのリスト列の欠損値をメディアンに設定する	df[aList].fillna(df[aList].median())
イテラブルから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
横棒グラフを紺碧色を使って描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームの中で、カラムの重複を見る	df.duplicated(subset=column)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
グラフの縦横をセットする	plt.figure(figsize=(横幅, 高さ))
バイトオーダを求める	sys.byteorder
キーがタプルに存在していないとき、要素を追加する	aDict.setdefault(key, element)
データフレームのリスト列の欠損値を最大値で置換する	df[aList].fillna(df[aList].max())
色付きの破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームのカラムが何日か見る	df[col].dt.day
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
イテラブルをカウンタに変換する	collections.Counter(iterable)
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
データフレームの列がx以上のデータを抽出する	df[df[column] >= x]
大量のデータ列が正規分布に従うかどうか仮説検定する	scipy.stats.kstest(データ列, 'norm')
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図に赤い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
本日の年数	datetime.datetime.today().year
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
縦棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
option: 暗い赤に色を設定する	color = 'darkred'
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
出力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
文字列中の部分文字列をカウントする	s.count(sub)
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
正規分布として乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
文字列が数字か	s.isdigit()
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
ヒストグラムの色をホワイトスモークに指定する	plt.hist(データ列, color='whitesmoke')
二つの実行結果をタブで区切って表示する	print(value, value2, sep='\t')
相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
option: グラフの色をホットピンクに指定する	color = 'hotpink'
option: データ型として整数型を使用する	dtype = np.int
項目名がマッピング上でまだ定義されていないかどうか	key not in aDict
折れ線グラフの▲マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
配列とリストについて散布図をプロットし、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
シーケンスをイミュータブルな集合にする	frozenset(iterable)
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームの末尾を調べる	df.tail()
整数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
プロットの用途を画面にする	sns.set(context='notebook')
カーキにヒストグラムの色をする	plt.hist(データ列, color='khaki')
縦軸の目盛りを対数に変更する	plt.yscale('log')
option: ティール色を使う	color = 'teal'
配列とリストの散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
ライトグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
日付時刻データは日付時刻データと同時か調べる	aDatetime == aDatetime2
散布図の印の大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
文字列の末尾から部分文字列を取り除く	s.removesuffix(sub)
線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
実数のn乗して実数による余り	pow(x, n, y)
等間隔の行列を作成する＼	np.arange(開始値, 終了値, 等差)
代数計算を用いる	import sympy
グラフで利用可能な色の一覧を知る	matplotlib.colors.cnames
マップを浅くコピーする	dict(aDict)
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
赤い破線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
タプルを逆順にする	aTuple[::-1]
実数の床	math.floor(x)
エクセルデータファイルからnという名前のシートを読み込む	pd.read_excel(filename, sheet_name=n)
横棒グラフをリネン色として描画する	plt.barh(データ列x, データ列y, color='linen')
散布図の星印の太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
パレットトルコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
option: アクアにグラフの色をセットする	color = 'aqua'
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
第二四分位数でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].median())
ライトスレイグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
文字列を改行によって区切る	s.splitlines()
タイムスタンプデータが何曜日か知る	aDatetime.weekday()
昇順にリストをソートする	sorted(aList, reverse=True)
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
整数nをバイナリにする	n.to_bytes(length=bytesize, byteorder='big')
変数をプリントする	print(value)
点線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
緑色で実行結果を出力する	print(f'\033[32m{value}\033[0m')
データフレームを散布図で可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ユーザの入力を整数として受け取る	int(input())
棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
カラーパレットを濃くする	sns.set(pallete='deep')
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
双方向キューの値をn個分ローテンションする	deq.rotate(n)
ヒストグラムをマルーン色を使って描画する	plt.hist(データ列, color='maroon')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
マッピングを多重集合に変換する	collections.Counter(aDict)
縦棒グラフの色を深紅にする	plt.bar(データ列x, データ列y, color='crimson')
Pandasで、データ列を日付データにする	pd.to_datetime(ds)
カラムをキーとして二つの表データを内部結合する	pd.merge(df, df2, on=column, how='inner')
日付データが土曜日かどうか調べる	aDate.weekday() == 5
縦棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
数値をシアンでプリントする	print(f'\033[36m{value}\033[0m')
ヒストグラムをチョコレート色として描画する	plt.hist(データ列, color='chocolate')
文字列は識別子名	s.isidentifier()
ファイルパスからバイナリ書き込みストリームを開き]、fとする	f = open(filepath, mode='wb')
カウンタの∪演算する	aCounter | aCounter2
データフレームのカラムの日にち	df[col].dt.day
option: 色をチョコレートに設定する	color = 'chocolate'
グラフの目的を画面に変更する	sns.set(context='notebook')
リストから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
ファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
データフレームのリスト列の欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
ブースティングとしてクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
2数の最小の値	min(x, y)
option: ダークグリーンにグラフの色を指定する	color = 'darkgreen'
タプルの要素をソートする	sorted(aTuple)
option: フォントの色をスプリンググリーンに設定する	color = 'springgreen'
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
３つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
文字列の開始位置番目と終了位置番目の間に部分文字列がない	s.find(sub, start, end) == -1
データフレームを列によって並べ直して、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
実行結果をマゼンタにする	f'\033[35m{value}\033[0m'
nが奇数かどうか調べる	n % 2 == 1
リストと数列について散布図を描いて、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
フクシアにヒストグラムの色をセットする	plt.hist(データ列, color='fuchsia')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列を空白で区切り、、整数リストに変換する	map(int, s.split())
配列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
ファイルパスを追加モードで開き]fとする	f = open(filepath, mode='a')
option: グラフの色をライトブルーに設定する	color = 'lightblue'
タプルの末尾からn番目以前の部分を抽出する	aTuple[:-n]
option: タンにグラフの色を指定する	color = 'tan'
折れ線グラフのアルファを変更する	plt.plot(データ列x, データ列y, alpha=0.5)
線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
セットが空	len(aSet) == 0
x軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
整数nはリストのどれかかどうか	n in aList
Pandasで、タイムスタンプのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
ライトグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
赤い点線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
縦棒グラフをパパイヤウィップ色を使って描画する	plt.bar(データ列x, データ列y, color='papayawhip')
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
逆順のスタック	reversed(deq)
集合を変更不能なセットに変換する	frozenset(aSet)
実行時に標準出力がパイプ	not sys.stdout.isatty()
分割数nとして等しい量になるように配列をビン分割する	pd.qcut(aArray, n)
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
プロットの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
文字列の先頭を使う	s[0]
データフレームのリストカラムの中に存在する日付データと日付データの合計を数える	df[aList].isin([value, value2]).sum()
データ列を使う	import pandas as pd
配列と配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
時計回りに円グラフを描く	plt.pie(データ列, startangle=90, counterclock=False)
破線を用いてヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
ヒストグラムをロイヤルブルー色として描画する	plt.hist(データ列, color='royalblue')
サイコロと同じ乱数を得る	random.randint(1, 6)
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームの列の文字列が文字列で終わる行を選択する	df[df[column].str.endswith(s)]
双方向キューの末尾にイテラブルの各要素をつけ加える	deq.extend(iterable)
整数nのバイト長	(n.bit_length() + 7) // 8
行列の標準偏差を求める	np.std(aArray)
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgray')
後の行の値でデータ列の欠損値を置換する	ds.fillna(method='bfill')
データフレームのカラム名の一覧	df.columns
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームを'A'列と'B'列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
三つ並べて数列を柱状グラフにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
横棒グラフをミディアムターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
rgbの▲マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ダークカーキにヒストグラムの色を指定する	plt.hist(データ列, color='darkkhaki')
リストの推移を青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームのリストカラムは正規分布からどの程度、尖っているか見る	df[aList].skew()
option: ライトサーモンにグラフの色を変更する	color = 'lightsalmon'
折れ線グラフのクロスマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフをコーンズシルク色を用いて描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームを文字化けしないようにJSONLファイルに保存する	df.to_csv(filename, encoding='utf_8_sig')
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
両端キューが空でないか調べる	len(deq) != 0
ディムグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
キューの最初から要素を取り出す	deq.popleft()
文字列の開始位置以降が部分文字列で始まるかどうかテストする	s.startswith(sub, start)
辞書に辞書の項目を更新する	aDict.update(aDict2)
青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
散布図をダークグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: グラフの色をオールドレースに設定する	color = 'oldlace'
option: グラフの色をリネンに指定する	color = 'linen'
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図のダイアモンド印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
列をキーにして2つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
カウンタのユニークな項目を列挙する	list(aCounter)
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
散布図に赤い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
改行なしに二つの値を表示する	print(value, value2, end='')
'A'列によって降順にデータフレームを破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
ゼロ埋めした配列を作る	np.zeros(要素数)
色名をからコードに変換する	matplotlib.colors.cnames[色名]
双方向キューが空でない	len(deq) != 0
グラフをプロットする準備をする	import matplotlib.pyplot as plt
パーセプトロンを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
散布図を星マーカーを使って描く	plt.plot(データ列x, データ列y, marker='*')
現在の日付	datetime.date.today()
折れ線グラフをブラック色を使って描画する	plt.plot(データ列x, データ列y, color='black')
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムをサンディーブラウン色を用いて描画する	plt.hist(データ列, color='sandybrown')
両端キューの要素をインプレースに反転する	deq.reverse()
リストとリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ネイピア数	math.e
ポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.')
データフレームの欠損値がある部分に色を付ける	df.style.highlight_null()
リストと配列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの線の種類を破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
カラムの中に日付データがあるか	ds.isin([value])
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
t分布型確率的近傍埋め込み法としてパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
列の長さnの順列	itertools.permutations(iterable, n)
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
nの各桁の和を計算する	sum(map(int, str(n)))
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
データフレームの未入力値を第二四分位数に変更する	df.fillna(df.median())
データフレームからカテゴリデータの列を選択する	df.select_dtypes('object')
ファイルを文字列の示すエンコーディングとしてオープンする]	open(filepath, encoding=s)
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
二つのオブジェクトが等しいか	obj == obj2
option: リネン色を使う	color = 'linen'
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: グラフの色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
赤いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
作画で使用するフォントを指定する	sns.set(font=フォント名)
データ列のNaNを直後の値で置換する	ds.fillna(method='bfill')
リストとリストについて散布図を描画し、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
柱状図を描画し、合計を1にする	plt.hist(データ列, density=True)
日付データが何年か知る	aDate.year
度数分布図のビン数を設定する	plt.hist(データ列, bins=区関数)
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
配列の行ごとの平均値を使う	np.mean(aArray, axis=1)
Pandasでフォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームを列によって並べ直し、、上位を取り出す	df.sort_values(columns).head(n)
リスト中の要素が少なくともひとつ真	any(aList)
nが1、もしくは2か	n == 1 or n == 2
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
option: ローングリーンを使う	color = 'lawngreen'
下線付きで実行結果を出力する	print(f'\033[4m{value}\033[0m')
データフレームのstart行目からend行目まで抽出する	df[start:end]
折れ線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
データ列の中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
別の文字列を用いて文字列を置き換える	s.replace(sub, newsub)
データフレームから列を１つだけ選択する	df[[column]]
文字列中に非大文字がある	any(not c.isupper() for c in s)
データフレームの中にある文字列と日付データの合計を数える	df.isin([value, value2]).sum()
カウンタの項目を増やす	aCounter[element] += 1
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
ISO書式の文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
リストとリストについて散布図を描画して左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
グレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
赤い実線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
Pandasでタイムスタンプ型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
数に整数を乗算する	x * y
イテラブルと列の直積を得る	itertools.product(iterable, iterable2)
option: 書き込みモードを使う	mode = 'w'
データ列の偏りを平方根変換する	np.sqrt(データ列)
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
タイムスタンプデータの時刻を見る	aDatetime.hour
散布図に菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
標準入力から改行を取り除いて1行だけ読む	sys.stdin.readline().rstrip()
データフレームのカラムを散布図で描画し、、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o')
整数nはリストのどれかか調べる	n in aList
option: シャルトリューズ色を使用する	color = 'chartreuse'
ファイルから1文字、読む	f.read(1)
タブ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
横棒グラフをコーンズシルク色として描画する	plt.barh(データ列x, データ列y, color='cornsilk')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
散布図の色を深紅にする	plt.scatter(データ列x, データ列y, color='crimson')
散布図を黒い大バツマーカーとして描く	plt.plot(データ列x, データ列y, marker='X', c='k')
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
本日の日付時刻を計算する	datetime.datetime.now()
折れ線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
辞書のキー一覧	list(aDict)
リストとリストについて散布図を描いて、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
rgbのポイントマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ロージーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ライム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
ミディアムスプリンググリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
テンプレートを引数としてargsをフォーマットする	formatText.format(*args)
option: フォントの色をグレーに設定する	color = 'grey'
線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
変数について数値の微分を行う	sympy.diff(e, z)
最初のカテゴリーを無視してデータフレームの列をダミー変数にする	pd.get_dummies(df[column], drop_first=True)
データ列と配列について散布図をプロットして、三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
データフレームを列の値ごとにグループ化してそれぞれのグループごとの合計を計算する	df.groupby(column).sum()
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
option: グラフの色を茶色に設定する	color = 'brown'
データフレームからn行ランダムサンプリングする	df.sample(n)
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
ロードされたモジュールを列挙する	sys.modules
セットの浅いコピー	aSet.copy()
SDGを用いて回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
全要素を0で初期化した行列	np.zeros(要素数)
データフレームを列名リストの値によってまとめたグループ	df.groupby(columns)
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
列の値でデータフレームをグループ化し、、グループごとの平均値を求める	df.groupby(column).mean()
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
散布図をライトスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
カウンタのそれぞれの要素を、そのカウントだけ列挙する	aCounter.elements()
ファイルがある	os.path.exists(filepath)
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
option: グラフの色をグリーンに指定する	color = 'green'
ダークターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
数式の変数の解を方程式として求める	sympy.solve(e, z)
折れ線グラフの右三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
option: 平均を加える	showmeans = False
データフレームの列の中にいくつ欠損値があるか数える	df[col].isna().sum()
イテラブルから重複を取り除く	set(iterable)
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
グリッド線	plt.grid(linewidth=3.0)
改行で文字列を分割し、文字列リストに変換する	s.splitlines()
option: フォントの色をブランチドアーモンドに変更する	color = 'blanchedalmond'
データフレームの列と列の相関行列ピアソン積率相関係数で	df[[column, column2]].corr(method='pearson')
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgrey')
線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
回帰分析を行う	model = sklearn.linear_model.LinearRegression()
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
オブジェクトのプロパティの値を値にする	setattr(obj, プロパティ名, 値)
データフレームの指定された列をリストにする	df[column].values.tolist()
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
ロージーブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームのカラムの分散	df[col].var()
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
多次元尺度構成法として多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
青色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
２つの変数を同じ値にする	x = y = n
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
整数nのビット長を調べる	n.bit_length()
リストをnからナンバリングする	enumerate(aList, start=n)
タイムスタンプデータが日付時刻データより先か	aDatetime < aDatetime2
表データの中で列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
折れ線グラフのポイントマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
option: グラフの色をネイビーに設定する	color = 'navy'
option: どの行もヘッダにしない	header = None
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, markersize=2.0)
予測データのコンフュージョン・マトリックスを計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: タブを分割記号で使う	sep = '\t'
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
ゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
option: ゴールド色を使う	color = 'gold'
option: グラフの色を紺碧にセットする	color = 'azure'
データフレームのリストカラムの相関行列	df[aList].corr()
一点鎖線でイテラブルの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
２つの文字列をタブで区切って表示する	print(value, value2, sep='\t')
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムを真紅色として描画する	plt.hist(データ列, color='crimson')
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
nを十六進数リテラルにする	hex(n)
▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^')
データ列の最頻値	ds.mode()
データフレームの列と列に重複があれば、ドロップする	df.drop_duplicates(subset=[column, column2])
表示できる最大列数を変更する	pd.set_option('display.max_columns', n)
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ライトスカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
option: 大バツ印を使用する	marker = 'X'
リストを境界値として配列をビニングする	pd.cut(aArray, aList)
データフレームのカラムが文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
折れ線グラフの▼マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
option: ラインを太くする	linewidth = 3.0
散布図をダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
大きい順に列によってによってデータフレームをソートする	df.sort_values(by=column, ascending=False)
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データ列間の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
option: データ型として符号なし８ビット整数型を用いる	dtype = np.uint8
option: 決定木の最大深さを指定する	maxdepth = n
option: 白を使う	color = 'white'
ヒストグラムの色をアイボリーに指定する	plt.hist(データ列, color='ivory')
リストから配列を作る	np.array(iterable)
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
半透明の実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
入力から２つの文字列を読む	A, B = map(str, input().split())
散布図のポイント印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
文字列を積極的に小文字に変換する	s.casefold()
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
横棒グラフをアクア色を用いて描画する	plt.barh(データ列x, データ列y, color='aqua')
option: 紺碧色を使用する	color = 'azure'
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
二つの列を用いてを用いてデータフレームを破壊的に並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
option: ダークターコイズを使う	color = 'darkturquoise'
横棒グラフを描画してラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームを各列と列の組み合わせ毎にグループ化し、、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
棒グラフをダークサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフに▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
データフレームの欠損値を最大値にセットする	df.fillna(df.max())
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
nからn2までの整数列	list(range(n, n2+1))
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
オリーブにヒストグラムの色をする	plt.hist(データ列, color='olive')
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
データフレームのカラムが何曜日か確認する	df[col].dt.weekday_name
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
option: ダークグリーンを使用する	color = 'darkgreen'
集合をリストにする	list(aSet)
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
カテゴリ別で色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
全要素を０で初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
スプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームの平均	df.mean()
リストをリストを境界値としてビンニングする	pd.cut(aList, aList)
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームが重複しているか確認する	df.duplicated()
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
配列と配列について散布図を描画して、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
タイムスタンプデータが水曜日	aDatetime.weekday() == 2
小数点数のタンジェントの逆数	math.atan(x)
箱ひげ図を描画して、平均を追加する	plt.boxplot(データ列, showmeans=True)
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
横棒グラフをピーチパフ色を使って描画する	plt.barh(データ列x, データ列y, color='peachpuff')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームのリストカラムのどの値が最も現れるか確認する	df[aList].mode()
散布図を黒い下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
文字列の先頭でパターンにケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
データ列の未入力値を直前の値にする	ds.fillna(method='ffill')
横軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
本日が土曜日	datetime.datetime.today().weekday() == 5
ゼロ埋めされた行列を作る	np.zeros(行数, 列数)
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
データ列の折れ線グラフを描画し、カラーコードを用いて色を設定する	plt.plot(データ列x, データ列y, color='#800080')
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
Pandasでフォーマットfmtでデータフレームのcollを日付データにする	pd.to_datetime(df[col], format=fmt)
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
option: バッファリングのサイズを設定する	buffering = 4096
option: ライトスカイブルーを用いる	color = 'lightskyblue'
データフレームを1000の位で丸めて整数型にする	df.round(-3).astype(int)
データフレームの欠損値を中央値に指定する	df.fillna(df.median())
縦棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
文字列中からパターンに複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
二つのリストから辞書	dict(zip(aList, aList2))
データ列の推移を折れ線グラフで描画する	plt.plot(range(len(データ列)), データ列)
配列と数列について散布図を描画して、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
データフレームの欠損値を最頻値に減らす	df.fillna(df.mode().iloc[0])
predicateFuncが真になる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
末尾から部分文字列で文字列を区切る	s.rsplit(sub)
今日が金曜日か確認する	datetime.datetime.today().weekday() == 4
多次元データを主成分分析として濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
論文用にグラフを設定する	sns.set(context='paper')
折れ線グラフのマーカーを四角印にする	plt.plot(データ列x, データ列y, marker='s')
データフレームの列のpercent分位数を計算する	df[col].quantile(percent/100)
ミスティローズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームを各列とカラムの組み合わせ毎にグループ化して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
ヒストグラムの色をダークスラテグレーにセットする	plt.hist(データ列, color='darkslategray')
文字列の開始位置からと終了位置番目までの範囲に部分文字列が含まれないか	s.find(sub, start, end) == -1
文字列の右端から部分文字列を取り除く	s.removesuffix(sub)
文字列の左端から空白を除く	s.lstrip()
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
スピアマンの相関係数を使う	scipy.stats.spearmanr(データ列, データ列2)
両端キューの大きさ	len(deq)
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
数列と数列についての散布図に▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
n2がnより大きく、かつ、n3未満か確認する	n < n2 and n2 < n3
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
異なる列をキーにして二つの表データを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ヒストグラムをイエローグリーン色を用いて描画する	plt.hist(データ列, color='yellowgreen')
イテラブルの全順列を求める	itertools.permutations(iterable)
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
ホワイトスモーク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームの標準偏差	df.std()
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
実行環境がMacOS	sys.platform.startswith('darwin')
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
xの小数点以下'5'桁までを表示する	print(':.5f'.format(x))
option: ボックスチャートを水平方向にする	vert = False
折れ線グラフの丸印の大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
配列とリストについて散布図を描き、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
データフレームから重複をインプレイスで削除する	df.drop_duplicates(inplace=True)
データフレームの列の各データ値の出現回数を算出する	df[col].value_counts()
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
紺碧色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
Pandasで、データ列をタイムスタンプにする	pd.to_datetime(ds)
オールドレース色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
'A'列によってデータフレームをグループ化し要約統計量を算出する	df.groupby('A').describe()
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
文字列中の正規表現を新しい文字列として置換する	re.sub(pattern, newsub, s)
△マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
文字列が正規表現にマッチさせる	re.match(pattern, s)
多次元データを特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
イテラブルを累加した列	itertools.accumulate(iterable)
黒い下三角マーカーをイテラブルと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
タイムスタンプデータにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
配列の行ごとの平均を求める	np.mean(aArray, axis=1)
タプルの各要素を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
横棒グラフをブラウン色として描画する	plt.barh(データ列x, データ列y, color='brown')
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
rgbの▲マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データフレームをTSV形式でJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
xが-9以上、9以下か調べる	-9 <= x <= 9
要素∉集合	element not in aSet
option: オリベドラブ色を使う	color = 'olivedrab'
グローバル変数の一覧	globals()
タプルから項目名の値をエラーなく参照する	aDict.get(key, None)
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
リストを累加したイテラブル	itertools.accumulate(iterable)
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ダークオリーブグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: 改行コードをWindowsにセットする	newline = '\r\n'
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
カテゴリでグループ化して、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
タイムスタンプデータからn分減らす	aDatetime - datetime.timedelta(minutes=n)
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
列を文字列リストに変換して、'改行によって一つにする	'\n'.join(map(str, iterable))
あらかじめ正規表現をコンパイルする	re.compile(pattern)
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
散布図にバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
nからn2までの整数列を見る	list(range(n, n2+1))
横棒グラフをオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='orange')
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
散布図の▼マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
グラフの色を暗くする	sns.set(pallete='dark')
予測値とデータの離れ具合を図示する	sns.residplot(x='列名', y='列名', data=df)
日付データからn時間分、引く	aDate - datetime.timedelta(hours=n)
二つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
クラス分類をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの欠損値を最小値に増やす	df.fillna(df.min())
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
赤色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
改行なしに２つの実行結果をプリントする	print(value, value2, end='')
線グラフの色を耐火レンガにセットする	plt.plot(データ列x, データ列y, color='firebrick')
option: 文字列を分割記号で使う	sep = s
折れ線グラフのポイントマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
プログラムの実行を異常停止する	sys.exit(1)
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: 大バツマーカーを加える	marker = 'X'
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
最初の列をデータフレームから除く	df[df.columns[1:]]
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
文字列をコロンを用いて区切って、列挙する	s.split(':')
カテゴリで色分けしてに箱ひげ図としてデータフレームをプロットする	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフを暗い赤色として描画する	plt.plot(データ列x, データ列y, color='darkred')
リストとリストの散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
目盛り線	plt.grid(linewidth=3.0)
小数点数の逆双曲線正接	math.atanh(x)
行列の行ごとの最大	np.max(aArray, axis=1)
データフレームのリストで指定された列の相関行列を求める	df[aList].corr()
option: ダークスレートブルー色を使用する	color = 'darkslateblue'
option: インディアンレッド色を使う	color = 'indianred'
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
標準エラーを使う	sys.stderr
両端キューの先頭に要素を追加する	deq.appendleft(element)
実行結果を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
データフレームの25パーセンタイル	df.quantile(0.25)
リストの平均値	sum(aList)/len(aList)
データフレームのカラム名を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
分類モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
計算機イプシロンを算出する	sys.float_info.epsilon
option: どの列も行にしない	index_col = None
線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
両端キュー中の値の数を数える	deq.count(element)
列名リストによってデータフレームを並べ、、更新する	df.sort_values(by=column, inplace=True)
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
数を文字列にする	str(x)
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
辞書順で文字列が文字列より後か調べる	s > s2
nからn2を引く	n - n2
行列の列	aArray[:, 列番号]
データ列の中に文字列があるか調べる	ds.isin([value])
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgray')
折れ線グラフの右三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: ▽マーカーを描画する	marker = 'v'
赤い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図をフォレストグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
最後から空白で文字列を分割する	s.rsplit()
文字列がパターンにマッチさせる	re.match(pattern, s)
ヒストグラムをデピンク色を用いて描画する	plt.hist(データ列, color='deeppink')
真上位集合	aSet > aSet2
year年month月day日hour時minute分をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
nがn2未満、またはn3以上かどうか調べる	n < n2 or n >= n3
year年month月の日付	datetime.date(year=year, month=month, day=1)
データフレームの指定した列をリストとして抽出する	df[column].values.tolist()
リストをリストを境界値としてビニングする	pd.cut(aList, aList)
線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
棒グラフをラベンダーブラッシュ色を用いて描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
配列をリストを境界値としてビンニングする	pd.cut(aArray, aList)
実数の逆双曲線正接を求める	math.atanh(x)
option: ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
ファイルパスのファイル名	os.path.basename(filepath)
y軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
折れ線グラフの星マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
イエローグリーン色でヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
折れ線グラフに青い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
トマト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
UTF8として書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
Pandasで、データ列をフォーマットとしてタイムスタンプに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
双方向キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
データフレームの各グループごとの最小値	df.groupby(column).min()
散布図をダーク・スラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
実数を実数で割って小数点以下を切り捨てる	x // y
折れ線グラフの左三角印を黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
行列を転置する	aArray.T
データフレームの欠損値を最頻値に指定する	df.fillna(df.mode().iloc[0])
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: ライトコーラル色を使う	color = 'lightcoral'
option: タン色を使う	color = 'tan'
実数の指数	math.frexp(x)[1]
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
クラス分類を確率的勾配降下で行う	model = sklearn.linear_model.SGDClassifier()
カウンタの積集合	aCounter & aCounter2
リストをソートする	sorted(aList)
option: 色をバリーウッドに変更する	color = 'burlywood'
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
配列と配列の散布図にrgbの菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストとリストについて散布図を描画し、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タプルの要素を小さい方から並べ変える	sorted(aTuple, reverse=False)
データフレームをJSONLファイルに書き込む	df.to_csv(filename)
枠なしのデータラベルをグラフの中に入れる	plt.legend(frameon=False)
グラフの見栄えを綺麗にする	import seaborn as sns
データフレームのカラムの時	df[col].dt.hour
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
配列の行列積	np.matmul(aArray, aArray2)
横棒グラフをティール色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
散布図をピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='pink')
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
option: ミスティローズ色を使う	color = 'mistyrose'
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
インデント付きでタプルを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: バイナリ書き込みモードに設定する	mode = 'wb'
グラフのパレットをパステル調にする	sns.set(pallete='pastel')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
マゼンタ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
上限nの双方向キューを配列から作る	collections.deque(iterable, maxlen=n)
配列の列ごとの平均	np.mean(aArray, axis=0)
現在をタプルにする	datetime.datetime.today().timetuple()
option: ダークレッドにグラフの色を設定する	color = 'darkred'
データ列とリストについて散布図を描画し、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームのカラムを丸める	df[col].round()
Pythonパスの一覧	sys.path
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
文字列が無限に繰り返す列を得る	itertools.repeat(element)
散布図を星印を用いる描画する	plt.scatter(データ列x, データ列y, marker='*')
配列を平坦にする	aArray.flatten()
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
データフレームを100の位で丸めて整数にする	df.round(-2).astype(int)
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
option: スレートブルー色を用いる	color = 'slateblue'
グリッド線を黄色くする	plt.grid(color='y')
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
文字列を最初の部分文字列で分割したときの後半の文字列	s.partition(sub)[-1]
文字列は全て識別子名か調べる	s.isidentifier()
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
縦棒グラフを描いてラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
グラフの描画で色差別なくパレットを用いる	sns.set(pallete='colorblind')
リストと配列の散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
データフレームの散布図をグループ化して横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
赤い点線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ケンドールでデータフレームの相関行列	df.corr(method='kendall')
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
リストと数列についての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
データフレームを列で昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
三自然数のLCM	math.lcm(n, n2, n3)
インディアンレッドにヒストグラムの色を指定する	plt.hist(データ列, color='indianred')
線グラフをミディアムブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumblue')
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームのリストカラムの中に日付データと文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
縦棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
データ列が何秒か見る	ds.dt.second
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
数列と配列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
縦棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
ふたつの関係が上位集合もしくは等しいか	aSet > aSet2
分類モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
アルファベットの大文字列	string.ascii_uppercase
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
データフレームの平均値を計算する	df.mean()
二つのデータフレームを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
部分文字列かどうか調べる	sub in s
十六進数文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
辞書を浅くコピーする	dict(aDict)
文字列を最後の部分文字列で二つに区切って、後半の文字列を使う	s.rpartition(sub)[-1]
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
文字列に日本語がある	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
線形モデルの切片	model.intercept_
集合が空でないか調べる	len(aSet) != 0
データ列の未入力値を平均値に指定する	ds.fillna(ds.mean())
高頻度方からカウンタをリストとして得る	aCounter.most_common()
データ列が何日か見る	ds.dt.day
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: ３二ビット整数型を使う	dtype = np.int16
グローバル変数の一覧を求める	globals()
整数nをn2分の一にする	n //= n2
線グラフの色をグレーにする	plt.plot(データ列x, データ列y, color='grey')
データフレームから指定された２列を抽出する	df[[column, column2]]
ヒストグラムの色をピーチパフにセットする	plt.hist(データ列, color='peachpuff')
棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: グラフの種類を実線にセットする	linestyle = 'solid'
データフレームを各列毎にグループ化して、文字列というグループを見る	df.groupby(column).get_group(s)
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
組をリバースする	reversed(aTuple)
データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
文字列の右側が部分文字列か調べる	s.endswith(sub)
データフレームから型リストで指定したデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
折れ線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
オブジェクトのプロパティを消す	delattr(obj, プロパティ名)
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを複数の列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
文字列を区切りで区切って、列挙する	s.split(sub)
バギングとしてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
文字列の先頭から部分文字列を取り除く	s.removeprefix(sub)
逆順の両端キューを見る	reversed(deq)
日付時刻データと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
文字列の示す文字コードを用いてファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
option: 追加モードに指定する	mode = 'a'
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
option: グラフの色を小麦色に指定する	color = 'wheat'
ミッドナイトブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
dateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
文字列をプリントする	print(value)
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='gray')
リストの最後から値をポップする	aList.pop()
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
ダークゴールデンロッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
option: ドジャーブルー色を用いる	color = 'dodgerblue'
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
プログラムのファイルの名前	sys.argv[0]
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
ダークサーモン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
折れ線グラフの星印の大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームのモード	df.mode()
綺麗なグラフを使う準備をする	import seaborn as sns
option: 色をスラグレーにセットする	color = 'slategrey'
最後の部分文字列で文字列を分けた場合の先頭の文字列を使う	s.rpartition(sub)[0]
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
option: アンティークホワイトを使用する	color = 'antiquewhite'
リストからオブジェクトを取り除く	aList.remove(element)
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: 深紅を使用する	color = 'crimson'
辞書をインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ライトスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
文字列のケースを変換する	s.casefold()
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
xを文字列に変換する	str(x)
オブジェクトがプロパティを持つかどうか	hasattr(obj, プロパティ名)
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
2進数文字列を整数に変換する	int(s, 2)
データフレームのリストカラムのNaNを中央値に設定する	df[aList].fillna(df[aList].median())
行列の平均値を計算する	np.mean(aArray)
リスト内の要素は少なくともひとつ真か調べる	any(aList)
データフレームから列を一つのみ選択する	df[[column]]
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
ふたつの集合の和集合	aSet.union(aSet2)
option: 丸印を描画する	marker = 'o'
データフレームの列の未入力値を後の値にセットする	df[col].fillna(method='bfill')
リストとリストについて散布図を描画して、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
十六進文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
サドルブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ダークターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: コロンをセパレータで使う	sep = ':'
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
縦棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
nがn2よりも小さいか確認する	n < n2
option: どの行もカラムの名前にしない	header = None
二つのオブジェクトが等しいか調べる	obj == obj2
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
数値を太字でプリントする	print(f'\033[1m{value}\033[0m')
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
option: 色をサドルブラウンに設定する	color = 'saddlebrown'
棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームのcollの数値時刻から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
縦棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
散布図に赤い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームの未入力値を前の値に変更する	df.fillna(method='ffill')
整数nの八進数表現	oct(n)
プロットの用途をポスターに指定する	sns.set(context='poster')
書き込みモードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='w')
データフレームのそれぞれのグループ毎の最小値を求める	df.groupby(column).min()
折れ線グラフの色をモカシンにする	plt.plot(データ列x, データ列y, color='moccasin')
option: 耐火レンガを使う	color = 'firebrick'
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
文字列を空白で区切って、列挙する	s.split()
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
目的変数をモデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
辞書をインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: 配列のデータ型を指定する	dtype = np.uint8
実線にヒストグラムの線種を設定する	plt.hist(データ列, linestyle='solid')
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
実数をn乗する	x ** n
タプルをひとつ置きに取り出す	aTuple[::2]
option: チョコレート色を使う	color = 'chocolate'
グリッド線	plt.grid(linewidth=3.0)
リストを二つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
option: 黄色色を使う	color = 'yellow'
折れ線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ファイルを文字コードtextを用いてオープンする]	open(filepath, encoding=text)
リストのn番目からn2番目までの部分	aList[n:n2]
ヒストグラムをダークグリーン色を用いて描画する	plt.hist(データ列, color='darkgreen')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
無限にイテラブルを繰り返す	itertools.cycle(iterable)
SJISでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
ヒストグラムをスプリンググリーン色を使って描画する	plt.hist(データ列, color='springgreen')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
黒い菱形マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームを'A'列によってで大きい順にソートする	df.sort_values(by='A', ascending=False)
option: グラフの色をミディアムオーキッドにセットする	color = 'mediumorchid'
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
行列の要素数を求める	aArray.size
option: シーグリーンにグラフの色を指定する	color = 'seagreen'
ヒストグラムをダークスレートブルー色を用いて描画する	plt.hist(データ列, color='darkslateblue')
タプルの値を並べ変える	sorted(aTuple)
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
カウンタの項目数	len(aCounter)
データ列の欠損値を最小値で補う	ds.fillna(ds.min())
option: グラフの色を暗い赤に変更する	color = 'darkred'
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
データフレームの列の空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
データ列の散らばりを図示する	plt.scatter(データ列x, データ列y)
折れ線グラフの色をダークオレンジにセットする	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフを青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
二進数の文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
パターンをASCII限定としてあらかじめコンパイルする	re.compile(pattern, flag=re.ASCI)
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
横棒プロットをプロットする	plt.barh(ラベル列, データ列)
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
オブジェクトの属性の値を値に変更する	setattr(obj, プロパティ名, 値)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
折れ線グラフの上三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
セットの濃度を求める	len(aSet)
紺色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
方程式として数値のパラメータの解を算出する	sympy.solve(e, z)
重複した行だけを選択する	df[df.duplicated(keep=False)]
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
ピーチパフ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
ファイルをUTF8を使って書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
'A'列の値によってデータフレームをまとめたグループ	df.groupby('A')
アルファベットの小文字を全て使う	string.ascii_lowercase
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
文字列をトリムする	s.strip()
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
selectorsでマスクした列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
折れ線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
データ列の中に日付データとがいくつあるか数える	ds.isin([value, value2]).sum()
ヒストグラムの色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
縦棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
赤い実線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
リストを黄色でプリントする	print(f'\033[33m{value}\033[0m')
列の一意な値	df[col].unique()
データフレームのカラムの標本標準偏差を算出する	df[col].std()
日付時刻データとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データフレームのリスト列の相関行列ケンドールを使って	df[aList].corr(method='kendall')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
NaNも加えて表データの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
option: 白色を使用する	color = 'white'
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
リストの要素を昇順に並べる	sorted(aList, reverse=False)
タプル上で項目名が定義されているかどうか調べる	key in aDict
option: フォントの色をライトグリーンに指定する	color = 'lightgreen'
グラフの縦軸のラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
プロットのパレットを全般的に淡くする	sns.set(pallete='muted')
リストと配列についての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
ビスク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
option: スチールブルーを用いる	color = 'steelblue'
データフレームのカラムが何年か見る	df[col].dt.year
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ヒストグラムの色をプラムに変更する	plt.hist(データ列, color='plum')
変数を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
文字列中の平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
配列の最大値を求める	np.max(aArray)
ミントクリーム色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
行でデータフレーム全体をソートする	df.sort_index()
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
集合をリストに変換する	list(aSet)
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
option: フォントの色をスレートブルーに指定する	color = 'slateblue'
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
rgbのバツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
配列を中央値で分割する	pd.qcut(aArray, 2)
ゼロ埋めされた行列	np.zeros(行数, 列数)
データフレームのカラムが何曜日か調べる	df[col].dt.weekday_name
文字列リストに列を変換して、空白で結合する	' '.join(map(str, iterable))
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームのリストカラムの分散	df[aList].var()
データフレームを'A'列によってグループ分けする	df.groupby('A')
option: ダークシアンにグラフの色を設定する	color = 'darkcyan'
データフレームの中にあると日付データの数を求める	df.isin([value, value2]).sum()
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
データフレームを'A'列によって昇順に整列し、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
カウンタから最頻出なキーの件数	aCounter.most_common()[1]
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
y軸だけグリッド線	plt.grid(axis='y')
option: 小麦色にグラフの色を変更する	color = 'wheat'
標準入力を使う	sys.stdin
列の欠損値を最大値に指定する	ds.fillna(ds.max())
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
変数を入れ替える	x, y = y, x
現在のエポック秒	int(time.time())
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
'A'列によって昇順にデータフレームを並べ直して更新する	df.sort_values(by='A', ascending=True, inplace=True)
Pandasでエポック秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
列のユニークな値の個数を見る	df[col].nunique()
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
２つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
文字列はPythonのキーワード	keyword.iskeyword(s)
データフレームのカラムの中のNaNの合計をカウントする	df[col].isna().sum()
空のリッジ回帰モデルを準備する	model = sklearn.linear_model.Ridge(alpha=正則化項)
文字列中に日本語が含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
nがn2か調べる	n == n2
折れ線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
ダークグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
２つのデータフレームを横方向に合体させる	pd.concat([df, df2], axis=1)
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
ひとつでも非アルファベットが文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
配列をy座標、イテラブルを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
部分文字列が文字列の終了位置以前に含まれる	s.find(sub, 0, end) != -1
散布図に星マーカーを加える	plt.scatter(データ列x, データ列y, marker='*')
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
表データから列を２つ選択する	df[[column, column2]]
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
データフレームを列を用いて小さい順に並べ直し、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: 色をライトスレイグレーにセットする	color = 'lightslategrey'
空白文字を全て使う	string.whitespace
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
リストの全要素を取り除く	aList.clear()
ナバホホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
表データのリストで指定した列の各列間の相関係数	df[aList].corr()
Pythonパスにを追加する	sys.path.append(dir)
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
縦棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
数式を数値に変換する	float(e)
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
カウンタからゼロカウントを取り除く	+aCounter
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
書き込むCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
集合の浅いコピーを作る	aSet.copy()
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
データフレームのカラムの値を正規表現patternで一度に置き換える	df[col].replace(pattern, repl, regex=True)
データフレームのリストカラムの値がNaNか調べる	df[aList].isna()
TSVファイルファイル名がかどうか調べる	filename.endswith('.tsv')
データフレームを正規表現で一度に置き換える	df.replace(pattern, repl, regex=True)
折れ線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 無視する列番号をnamesで指定する	skiprows = names
データフレームのカラムの平均値を算出する	df[col].mean()
nが3の倍数かどうか	n % 3 == 0
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
余弦を求める	math.cos(x)
青い△印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
英字の小文字列	string.ascii_lowercase
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データ列の散布図をプロットする	plt.scatter(データ列x, データ列y)
データフレームを関数でまとめたグループ	df.groupby(関数)
option: カンマを区切りで使用する	sep = ','
データフレームの中に文字列と文字列がある	df.isin([value, value2])
組のn番目以降の部分を取り出す	aTuple[n:]
ヒストグラムを白くする	plt.hist(データ列, color='w')
カウンタの項目数を求める	len(aCounter)
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
リストを変更不能なセットに変換する	frozenset(iterable)
プロットの使途を論文に変更する	sns.set(context='paper')
スタックの先頭に列の各値を入れる	deq.extendleft(iterable)
ヒストグラムをオーキッド色を用いて描画する	plt.hist(データ列, color='orchid')
データフレームからカテゴリデータの列名の一覧	df.select_dtypes('object').columns
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
データフレームを'A'列の値によってまとめたグループ	df.groupby('A')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
データ列の未入力値を最小値に増やす	ds.fillna(ds.min())
辞書のキーを要素に設定する	aDict[key] = element
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームのカラムの曜日は何日目か見る	df[col].dt.dayofweek
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームから列名を複数指定して選択する	df[columns]
散布図にrgbの▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
３つの文字列を順にプリントする	print(value, value2, value3)
表に重複があるか確認する	df.duplicated()
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
option: 印を上三角に変更する	marker = '^'
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
実数の正接	math.tan(x)
ヒストグラムの色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
正則化付き線形モデルを作成する	model = sklearn.linear_model.ElasticNet()
データフレームの欠損値を平均にセットする	df.fillna(df.mean())
Pandasで、UNIX秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ライトサーモン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
ピアソンの相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
整数nを二進数表現にする	bin(n)
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
データフレームのリスト列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[aList].corr())
折れ線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
行列の列ごとの最大値	np.max(aArray, axis=0)
option: マーカーを大バツに指定する	marker = 'X'
縦軸だけグリッド線	plt.grid(axis='y')
option: 色をブランチドアーモンドに指定する	color = 'blanchedalmond'
小麦色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
散布図をゲインズボロ色として描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
option: グラフの色を青緑に設定する	color = 'teal'
option: オーキッドにグラフの色を設定する	color = 'orchid'
パラメータが無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, oo)
データフレームの列を削除して、インプレイスする	df.drop(column, axis=1, inplace=True)
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
リッジ回帰分析を行う	model = sklearn.linear_model.Ridge(alpha=正則化項)
実数がNaNかどうか	math.isnan(x)
三二ビット整数型のゼロ埋めしたベクトル	np.zeros(要素数, dtype=np.int16)
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
縦棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgrey')
文字列はタプルに含まれる	element in aTuple
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
両端キューのn番目に文字列を挿入する	deq.insert(n, element)
数式処理を使う	import sympy
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
行列式	np.linalg.det(aArray)
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ファイルパスをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
縦棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
整数nを八進表現にする	oct(n)
データ列とリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
重複した行のみを選ぶ	df[df.duplicated(keep=False)]
中央値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].median())
キューの最後にタプルの要素を順に追加する	deq.extend(iterable)
散布図にrgbの菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: 先頭の行をヘッダに設定する	header = 0
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
SJISでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームの中の列をn個に分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームを各列毎にグループ化して、カラムの最大値を計算する	df.groupby(column)[column2].max()
データフレームから数値データの列のみ選択する	df.select_dtypes('number')
文字列は全て十進数字か調べる	s.isdecimal()
データフレームの重複を調べる	df.duplicated()
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
データフレームを各列毎にグループ分けして列の平均値を求める	df.groupby(column)[column2].mean()
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
配列の推移を青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
部分文字列かどうか	sub in s
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
折れ線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
JSONファイルのファイルを辞書にする	json.load(fin)
option: マルーンを使う	color = 'maroon'
データ列の曜日の名前を使う	ds.dt.weekday_name
option: ホワイト色を使う	color = 'white'
option: ▽マーカーを加える	marker = 'v'
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
中央値でデータフレームの中の列を分割する	pd.qcut(df[col], 2)
データフレームの列の欠損値を最小値に設定する	df[col].fillna(df[col].min())
ライトスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
日付時刻データの時間を使う	aDatetime.time()
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
グリッド線をプロットに加える	plt.grid(True)
逆行列を見る	np.linalg.inv(aArray)
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームのリストカラムを丸めて、整数にする	df[aList].round().astype(int)
折れ線グラフの色をラベンダーブラッシュにセットする	plt.plot(データ列x, データ列y, color='lavenderblush')
タイムスタンプデータをエポック秒にする	aDatetime.timestamp()
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームのインデックスの一覧	df.index
文字列は全て印字できるかどうか調べる	s.isprintable()
データフレームの列で文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
折れ線グラフにバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
option: 色をカデットブルーに変更する	color = 'cadetblue'
option: ディープスカイブルーを使用する	color = 'deepskyblue'
nとn2が同じ値か判定する	n == n2
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
最後に追加したエントリを辞書からポップする	aDict.popitem()
データフレームのインデックス一覧	df.index
等しい量になるようにリストを分割数nとしてビン分割する	pd.qcut(aList, n)
列でデータフレームをグループ化し、、それぞれのグループ毎の件数を知る	df.groupby(column).size()
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
option: 色をゲインズボロにセットする	color = 'gainsboro'
文字列がリストに含まれないかどうか調べる	element not in aList
nからn2までのひとつ飛ばしの整数列を得る	list(range(n, n2+1, 2))
option: アクアマリンを使う	color = 'aquamarine'
ランダムにデータフレームから抽出する	df.sample()
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
nがn2以上かどうか調べる	n >= n2
option: フォントの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
option: 小麦色を用いる	color = 'wheat'
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
文字列の中でASCII限定としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
２つの実行結果をカンマで区切って出力する	print(value, value2, sep=',')
カウンタの項目を列挙する	aCounter.keys()
線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
文字列は平仮名か判定する	('ぁ' <= ch <= 'ん')
星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*')
year年month月を日付にする	datetime.date(year=year, month=month, day=1)
'A'列でデータフレームを並べ、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
option: フォントの色をライトグレーに設定する	color = 'lightgray'
タプルが少なくともひとつ真か	any(aTuple)
option: データ型として論理値型を用いる	dtype = np.int32
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
配列と配列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
各カラム毎にデータフレームをグループ化し、、列の合計を求める	df.groupby(column)[column2].sum()
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
実数の逆双曲線正弦	math.asinh(x)
クリムゾン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
データフレームのリストカラムの中に文字列と文字列があるかどうか調べる	df[aList].isin([value, value2])
タプルの末尾の値	aTuple[-1]
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
option: スレートブルーを使う	color = 'slateblue'
ヒストグラムベースの勾配ブースティング回帰木を作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
predicateFuncを適用したとき真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
リストとリストの散布図を描き、、マーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
データフレームをグループ化しそれぞれの列に対し分散を算出する	df.groupby(column)[column2].var()
今日の日付時刻	datetime.datetime.today()
rgbの大バツマーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
PandasでdateStringをタイムスタンプ型にする	pd.to_datetime(dateString)
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
最大長nの両端キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
組の長さ	len(aTuple)
データフレームを各列毎にグループ化して文字列というグループの個数を計算する	df.groupby(column).size()[s]
グラフの題名を設定する	plt.title('グラフの名称')
option: フォントの色をグレーに設定する	color = 'gray'
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームのカラムを型にする	df[col] = df[col].astype(ty)
2つのデータフレームをジョインする	pd.merge(df, df2)
2つの文字列を順に表示する	print(value, value2)
保存するCSVファイルの小数点以下の桁数を変更する	df.to_csv(filename, float_format='%.3f')
二つの列でデータフレームをグループ化する	df.groupby(['A', 'B'])
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
リストと配列の散布図に菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
配列を四分位数でビンニングする	pd.qcut(aArray, 4)
横棒グラフを描画し、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
配列をビン数nでビニングし、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
option: ミントクリームを用いる	color = 'mintcream'
初期値で全要素を初期化した配列を初期化する	np.full(要素数, 初期値, dtype=np.int)
データフレームから数値データのカラムを取り出す	df.select_dtypes('number')
データフレームのリストカラムのメディアン	df[aList].median()
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
標準出力の出力先がターミナル	sys.stdout.isatty()
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
日付データの曜日を整数で求める	aDate.weekday()
標準出力がパイプか調べる	not sys.stdout.isatty()
ケンドールの順位相関係数を使う	scipy.stats.kendalltau(データ列, データ列2)
文字列中に非空白が含まれるか	any(not c.isspace() for c in s)
データフレームのヒストグラムを横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名')
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
option: アリスブルー色を使う	color = 'aliceblue'
双方向キューのデータを左にn個分ローテンションする	deq.rotate(-n)
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
コマンドライン引数を列挙する	sys.argv
リストを集合に変換する	set(iterable)
文字コードtextを用いて既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームを複数の列によってソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
日付時刻データの月数	aDatetime.month
整数nをn2分の1にする	n //= n2
ファイルからn文字、読む	f.read(n)
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
ラベンダー色としてヒストグラムを描画する	plt.hist(データ列, color='lavender')
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
ファイルをオープンして]バイナリストリームを求める	open(filepath, mode='rb')
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
option: パールゴールデンロッドにフォントの色を設定する	color = 'palegoldenrod'
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
読み込みモードを使ってファイルパスをオープンして]fとする	f = open(filepath, mode='r')
JSONフォーマットのバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
データ列の中に文字列と日付データがいくつあるか求める	ds.isin([value, value2]).sum()
横棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
辞書の値も複製する	{k: copy.copy(v) for k, v in aDict.items()}
option: 改行をセパレータで使用する	sep = '\n'
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
ファイルのディレクトリ名	os.path.dirname(filepath)
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
双方向キューを空にする	deq.clear()
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
カウンタの文字列を列挙する	aCounter.keys()
組の末尾	aTuple[-1]
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
option: ミディアムバイオレットレッドにグラフの色を指定する	color = 'mediumvioletred'
散布図のマーカーの大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
浮動小数点数から浮動小数点数を減算する	x - y
オプションで、標準エラーに出力する	file = sys.stderr
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
文字列が全て大文字か調べる	s.isupper()
ラベンダーブラッシュ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームとデータフレームの列を横向きにくっつける	pd.concat([df, ds], axis=1)
option: パレットトルコイズを使う	color = 'paleturquoise'
ファイルパスが存在しないかどうか調べる	not os.path.exists(filepath)
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
ミディアムアクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
文字列は全て数値	s.isnumeric()
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
線グラフの色をインディアンレッドに変更する	plt.plot(データ列x, データ列y, color='indianred')
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
フォレストグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: 追加モードを使用する	mode = 'a'
'A'列によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームを列名リストでで破壊的に並べ直す	df.sort_values(by=column, inplace=True)
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
配列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
名前からカラーマップを見る	"plt.get_cmap(""カラーマップ名"")"
データフレームを列で降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
データフレームの指定された名前リストの列を選択する	df[columns]
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
散布図の菱形印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
コーンズシルクにヒストグラムの色を変更する	plt.hist(データ列, color='cornsilk')
文字列を別の文字列で置換する	s.replace(sub, newsub)
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
option: 大バツ印を加える	marker = 'X'
縦棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
データフレームを２つの列を用いてソートする	df.sort_values(by=['A', 'B'])
データフレームのカラムを十の位で四捨五入して、整数型にする	df[col].round(-1).astype(int)
文字列から部分文字列を取り除く	s.replace(sub, '')
option: フォントの色をシャルトリューズにする	color = 'chartreuse'
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
横棒グラフをチョコレート色を用いて描画する	plt.barh(データ列x, データ列y, color='chocolate')
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
数式を数値計算する	float(e)
横棒グラフをミディアムスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームの列の名前リストを求める	df.columns
ひとつでも小文字が文字列内にある	any(c.islower() for c in s)
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
タプルの合計値を求める	sum(aTuple)
範囲から配列を初期化する	np.linspace(最小値, 最大値, 要素数)
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
プロットにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
デピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
イエローグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームをTSV形式のファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
日付データは日付データより前か調べる	aDate < aDate2
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
黒い▼マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
整数nがリストのどれかか調べる	n in aList
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
インプレイスでデータフレームから重複する行をドロップする	df.drop_duplicates(inplace=True)
イテラブルの長さnの順列	itertools.permutations(iterable, n)
カラーパレットを全般的に淡くする	sns.set(pallete='muted')
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
option: 最初のカラムをインデックスに減らす	index_col = 0
option: グラフの色をインディアンレッドに変更する	color = 'indianred'
グラフの用途をスライドに変更する	sns.set(context='talk')
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
n2がn以上かつ、n3以下	n <= n2 and n2 <= n3
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
option: ラベンダーを使用する	color = 'lavender'
小数点数の逆双曲線正弦	math.asinh(x)
現在の再帰の最大回数	sys.getrecursionlimit()
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
全要素を０で初期化した行列	np.zeros(行数, 列数)
キューのn番目	deq[n]
option: 星マーカーを加える	marker = '*'
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームとしてエクセルファイルファイルを読み込む	pd.read_excel(filename)
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
赤い三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
配列と数列の散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
表を各列毎に集約して、列の平均値を計算する	df.groupby(column)[column2].mean()
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
散布図のマーカーを上三角印にする	plt.scatter(データ列x, データ列y, marker='^')
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
タプルにキーが存在するか調べる	key not in aDict
実数から実数を減ずる	x - y
折れ線グラフの色を珊瑚に変更する	plt.plot(データ列x, データ列y, color='coral')
ペルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
本日の日	datetime.datetime.today().day
文字列の左側からタブを取り除く	s.lstrip('\t')
option: 改行を区切りで使う	sep = '\n'
リストとリストについて散布図を描画し、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
ベクトルの形状	aArray.shape
マゼンタ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
リストと数列の散布図に黒い▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
JSON形式の文字列をデータに変換する	json.loads(jsonString)
実数の2進対数	math.log2(x)
実数を小数点で丸める	round(x, n)
データフレームの列の中に文字列と文字列が存在するかどうか調べる	df[col].isin([value, value2])
ラベンダーブラッシュにヒストグラムの色を指定する	plt.hist(データ列, color='lavenderblush')
option: ライトイエローを使う	color = 'lightyellow'
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
データ列を使用する	import pandas as pd
option: グラフの色を耐火レンガに指定する	color = 'firebrick'
データフレームを関数の値で集計する	df.groupby(関数)
option: ディムグレー色を使う	color = 'dimgray'
文字化けしないようにTSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
nかけるn2を求める	n * n2
データから名前付きタプルをインスタンス化する	C._make(パラメータ)
数式の積分を算出する	sympy.integrate(e)
タプルとタプルを結合する	aTuple + aTuple2
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
横棒グラフをグリーンイエロー色として描画する	plt.barh(データ列x, データ列y, color='greenyellow')
縦棒グラフをカデットブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
option: ライムグリーンに色をする	color = 'limegreen'
事前に複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ミディアムバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームの平均値	df.mean()
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
パラメータについて数式を微分する	sympy.diff(e, z)
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
データフレームの列の上位25%を求める	df[col].quantile(0.25)
横棒グラフをミディアムパープル色を使って描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
散布図の菱形印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
タイムスタンプデータの日数を見る	aDatetime.day
ヒストグラムをネイビー色として描画する	plt.hist(データ列, color='navy')
ヒストグラムの色をオレンジにセットする	plt.hist(データ列, color='orange')
データフレームから重複したデータを落とす	df.drop_duplicates()
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
横棒グラフをディープスカイブルー色を使って描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
最大値・最小値の範囲で一様な疑似乱数を求める	random.uniform(最小値, 最大値)
両端キューの最大長	deq.maxlen
散布図の印を菱形にする	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
nがn2より大きいかどうか	n > n2
散布図の三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列をシアンにする	f'\033[36m{value}\033[0m'
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
現在の秒数を見る	datetime.date.today().second
オブジェクトは集合クラスかどうか判定する	isinstance(obj, set)
リストを昇順にソートする	sorted(aList, reverse=False)
option: ターコイズ色を用いる	color = 'turquoise'
ファイルから入力ストリームを使う	open(filepath)
データフレームのカラムが正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
散布図の大バツ印の太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
グラフの用途をスライドに設定する	sns.set(context='talk')
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームの未入力値を直後の値にセットする	df.fillna(method='bfill')
句読点文字を全部見る	string.punctuation
グラフに鉛直方向の実線をつける	plt.axvline(x=0, linestyle='solid')
横軸だけグリッド線	plt.grid(axis='x')
散布図のマーカーの線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
Pandasで、UNIX秒のデータ列からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
散布図に下三角印を使用する	plt.scatter(データ列x, データ列y, marker='v')
ビスク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
option: バリーウッドにフォントの色を設定する	color = 'burlywood'
ヒストグラムを実線を使って描く	plt.hist(データ列, linestyle='solid')
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
横棒グラフをモカシン色を用いて描画する	plt.barh(データ列x, データ列y, color='moccasin')
横棒グラフをミッドナイトブルー色を使って描画する	plt.barh(データ列x, データ列y, color='midnightblue')
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図の印の大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
ポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.')
ブルーバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
n個分双方向キューの要素をローテンションする	deq.rotate(n)
文字列を末尾から空白で区切る	s.rsplit()
グラフの凡例の場所を(x,y)に指定する	plt.legend(loc=(x, y))
リストのオブジェクトが最初に見つかるインデックスを探す	aList.index(element)
行列の合計値	np.sum(aArray)
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: グラフの色を濃いシアンに設定する	color = 'darkcyan'
紫色で変数をプリントする	print(f'\033[35m{value}\033[0m')
グリッドの線種を実線に変更する	plt.grid(linestyle='solid')
データフレームの列のユニークな値の個数	df[col].nunique()
イテラブルと数列の散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
option: グラフの色をシャルトリューズに変更する	color = 'chartreuse'
option: コロンをセパレータで用いる	sep = ':'
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int)
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
浮動小数点数の3乗	x ** 3
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
フォレストグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
青いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
2つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
辞書をJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
マッピングの値に要素が含まれていないかどうか調べる	element not in aDict.values()
option: 読み込みモードを使う	mode = 'r'
入力から２つの実数を読み込む	A, B = map(float, input().split())
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームの中の列を等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
数値の簡略化を行う	sympy.sympify(e)
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
シスル色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
データフレームの中のカラムを等しい量になるようにn個に分割する	pd.qcut(df[col], n)
実数の整数部を計算する	math.modf(x)[1]
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
方程式として数式の変数の解を求める	sympy.solve(e, z)
部分文字列が文字列の終了位置より前に含まれないか調べる	s.find(sub, 0, end) == -1
が名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
バツ印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図のダイアモンド印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
乱数シードを初期化する	random.seed()
データフレームの列を折れ線グラフとして可視化する	plt.plot(df[column], df[column])
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: データ型として複素数型を使用する	dtype = bool
データフレームのカラムの中にある日付データと文字列の数を数える	df[col].isin([value, value2]).sum()
データフレームの列の各データが何回出現するか確認する	df[col].value_counts()
データフレームのカラムは何日か調べる	df[col].dt.day
枠なしの凡例を描画する	plt.legend(frameon=False)
option: 青紫を使う	color = 'violet'
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ひとつでも英数字が文字列内にあるか確認する	any(c.isalnum() for c in s)
データフレームのグループ毎の分散	df.groupby(column).var()
リストをボックスチャートで描画する	plt.boxplot(データ列)
x軸の目盛を非表示にする	plt.xticks([])
折れ線グラフでデータ列の推移を図示する	plt.plot(range(len(データ列)), データ列)
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
データフレームを列ごとにグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
ミディアムスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
両端キューの左に要素をつけ加える	deq.appendleft(element)
標準入力	sys.stdin
option: ディムグレーを用いる	color = 'dimgrey'
散布図の三角印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをアクア色を用いて描画する	plt.hist(データ列, color='aqua')
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフの四角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
ファイルパスから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
縦棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
日付時刻データの年数を使う	aDatetime.year
混同行列をヒートマップを使って確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
正方単位行列	np.identity(n)
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データ列とリストについて散布図をプロットして、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
パウダーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='powderblue')
二つのデータフレームを横向きにマージする	pd.merge(df, df2)
日付時刻データの分数を求める	aDatetime.minute
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
ファイルを書き込みモードで開く]	open(filepath, mode='w')
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
1からNまでのベクトル	np.arange(1, N+1)
折れ線グラフの線種を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: 説明変数を事前に正規化する	normalize = True
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
高頻出方からカウンタを列挙する	aCounter.most_common()
sepを区切りにして文字列リストを一つの文字列にする	sep.join(aStringList)
カウンタの項目一覧を求める	aCounter.keys()
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
プログラムの実行を異常終了する	sys.exit(1)
折れ線グラフにクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
データ列がどれだけ、分散しているか見る	ds.var()
降順にデータフレームを'A'列によってでソートする	df.sort_values(by='A', ascending=False)
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
ホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
アルファベットの小文字を使う	string.ascii_lowercase
縦棒グラフをレモンシフォン色を用いて描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
縦棒グラフをブランチドアーモンド色を用いて描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
数列とリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
リストの文字列が最初に見つかる場所	aList.index(element)
行列の行ごとの最大を求める	np.max(aArray, axis=1)
縦棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
文字列が全て大文字	s.isupper()
折れ線グラフに青い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
日付データと日付データの時間差は何秒か知る	(aDate - aDate2).total_seconds()
要素をセットから取り除く	aSet.remove(element)
オブジェクトから属性を削除する	delattr(obj, プロパティ名)
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
折れ線グラフの色をダークゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
列によってデータフレームを整列し、、上位n件を取り出す	df.sort_values(columns).head(n)
色付きの点線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ふたつの集合の差集合を求める	aSet.difference(aSet2)
スタックが空でないか調べる	len(deq) != 0
リストとリストの散布図に△マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
小数点数の2進対数	math.log2(x)
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
UNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
部分文字列を文字列の開始位置から終了位置まで探す	s.find(sub, start, end)
option: 印を大バツに設定する	marker = 'X'
書き込み用にファイルパスを文字列の示すエンコーディングで開く]	open(filepath, mode='w', encoding=s)
ロバストな線形分類モデルを準備する	model = sklearn.linear_model.HuberClassifier()
浮動小数点数を切り下げて整数に変換する	math.floor(x)
実数の逆正接を求める	math.atan(x)
折れ線グラフのアルファを設定する	plt.plot(データ列x, データ列y, alpha=0.5)
リストと数列について散布図を描画してマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
百分率付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
タプルをnからナンバリングする	enumerate(aTuple, start=n)
option: フォントの色をパールバイオレットレッドに設定する	color = 'palevioletred'
凡例を表示する	plt.legend()
現在のタイムスタンプ	datetime.datetime.now()
nが2で割り切れない	n % 2 == 1
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
option: トマトにグラフの色を設定する	color = 'tomato'
黄緑色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
文字列を中央寄せにする	s.center(文字列幅)
折れ線グラフのクロス印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
配列の列ごとの平均値を計算する	np.mean(aArray, axis=0)
マッピングのキーの一覧	aDict.keys()
最後の項目をマッピングからポップする	aDict.popitem()
データフレームを各カラムと列の組み合わせ毎に分類して最大値を求める	df.groupby([column, column2], as_index=False).max()
一点鎖線に線の線種を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストとリストの散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
データフレームのカラムが何月か確認する	df[col].dt.month
半透明の実線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームの中の列をn個に等間隔でビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
数式のパラメータにnを代入する	e.subs(z, n)
折れ線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームの未入力値をメディアンに変更する	df.fillna(df.median())
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
文字列がタイトルケース	s.istitle()
n個に等量で配列をビン分割する	pd.qcut(aArray, n)
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
散布図の▽印の大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
グラフに凡例を追記する	plt.legend(['凡例A', '凡例B'])
部分文字列が文字列の開始位置からと終了位置番目までの間にないかどうか調べる	s.find(sub, start, end) == -1
辞書から項目名で指定した項目を取り出す	aDict.pop(key)
線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図にrgbの▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
列の記述統計量	ds.describe()
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: スプリンググリーンを使用する	color = 'springgreen'
棒グラフをゴールデンロッド色を使って描画する	plt.bar(データ列x, データ列y, color='goldenrod')
シエナ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
棒グラフを白色として描画する	plt.bar(データ列x, データ列y, color='white')
配列とデータ列についての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
タプル中の文字列が最初に見つかるインデックス	aTuple.index(element)
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
破壊的にデータフレームを二つの列でによって並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
日付時刻データの分を使う	aDatetime.minute
データフレームをJSONLファイルにTSVファイルで保存する	df.to_csv(filename, sep='\t')
横棒グラフをシャルトリューズ色を使って描画する	plt.barh(データ列x, データ列y, color='chartreuse')
度数分布図の範囲を設定する	plt.hist(データ列, range=(start, end))
散布図の丸印の大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームの中にある文字列の数を求める	df.isin([value]).sum()
option: SJISを使う	encoding = 'shift_jis'
カラムのNaNを平均値に設定する	ds.fillna(ds.mean())
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
エクセルデータファイルからn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
ASCII限定として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
方程式として数式を解く	sympy.solve(e)
オブジェクトの属性の値をする	setattr(obj, プロパティ名, 値)
option: スラグレー色を使う	color = 'slategrey'
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
option: 色をパレットトルコイズに変更する	color = 'paleturquoise'
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: イエローグリーン色を使う	color = 'yellowgreen'
ヒストグラムを用いてデータ列を可視化する	plt.hist(データ列)
ガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図に左三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='<')
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
データフレームのリストカラムの中にある日付データと文字列の合計を数える	df[aList].isin([value, value2]).sum()
折れ線グラフの大バツ印を青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
ヒストグラムを淡いピンク色色として描画する	plt.hist(データ列, color='lightpink')
プロットの見た目をデフォルトでイイ感じに設定する	sns.set()
辞書にキーワード引数で更新する	aDict.update(**kwargs)
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
option: 線の種類を点線に設定する	linestyle = 'dotted'
ケンドールの順位相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
アルファベットの小文字を全部求める	string.ascii_lowercase
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
nの八進文字列	oct(n)[2:]
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
英字を全部使う	string.ascii_letters
Pandasで、フォーマットfmtとしてデータ列を日付データにする	pd.to_datetime(ds, format=fmt)
青い破線で数列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
nが2で割り切れないか	n % 2 == 1
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームを列で集計して、各グループごとの件数を知る	df.groupby(column).size()
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
文字列を別の文字列で全て置換する	s.replace(sub, newsub)
太文字で変数をプリントする	print(f'\033[1m{value}\033[0m')
レモンシフォンにヒストグラムの色をセットする	plt.hist(データ列, color='lemonchiffon')
グラフを用いる	import matplotlib.pyplot as plt
クラス分類をRANSACで行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの中にいくつ文字列が含まれるか数える	df.isin([value]).sum()
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
正規分布による累積分布関数の逆関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データラベルの位置を指定する	plt.legend(loc=(x, y))
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
二つの文字列は等しくないか調べる	s != s2
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
辞書にキーワード引数として追加する	aDict.update(**kwargs)
Pandasで、フォーマットとしてデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format='%Y-%m-%d')
実数以上の最小の整数を求める	math.ceil(x)
キューのn番目の要素	deq[n]
文字列をISO8601で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
タイムスタンプデータの秒数	aDatetime.second
折れ線グラフの左三角印の線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データ列を丸めて整数型にする	ds.round().astype(int)
リストとリストの散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
TSVファイルからSJISでCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
本日の日を使う	datetime.datetime.today().day
二つの変数を同じ値にする	x = y = n
option: 色をミントクリームに設定する	color = 'mintcream'
浮動小数点数の小数部	math.modf(x)[0]
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
タン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームのカラムの要約統計量	df[col].describe()
二つのオブジェクトは同じ参照か調べる	obj is obj2
mathを使う	import math
サンディーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
組とタプルを連結する	aTuple + aTuple2
折れ線グラフに菱形マーカーを加える	plt.plot(データ列x, データ列y, marker='D')
nかけるn2を計算する	n * n2
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームのリストカラムのNaNを直後の値に変更する	df[aList].fillna(method='bfill')
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
リストの値のみプリントする	print(*aList)
ファイルをデータフレームとして読み込む	pd.read_excel(filename)
棒グラフをライトグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
配列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
ダークゴールデンロッドにヒストグラムの色をセットする	plt.hist(データ列, color='darkgoldenrod')
入力から二つの浮動小数数を取り出す	A, B = map(float, input().split())
赤い▲マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
ファイルが存在するかどうか確認する	os.path.exists(filepath)
ヒストグラムをダークマゼンタ色を用いて描画する	plt.hist(データ列, color='darkmagenta')
句読点文字を全部使う	string.punctuation
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
データフレームを表示するとき、折り返しをオフに減らす	pd.set_option('expand_frame_repr', False)
降順に複数の列を用いて破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
線グラフの色をアイボリーに変更する	plt.plot(データ列x, データ列y, color='ivory')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
option: 色をライトシアンに変更する	color = 'lightcyan'
データフレームを複数の列を用いてによって降順にソートする	df.sort_values(by=column, ascending=False)
散布図の印の色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
第二コマンド引数を知る	sys.argv[1]
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
データフレームの列のモードを求める	df[col].mode()
配列のユニークな要素	np.unique(aArray)
色を濃くする	sns.set(pallete='deep')
リストの変化を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
散布図をミスティローズ色として描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
データフレームのリスト列の第二四分位数を計算する	df[aList].median()
データフレームとデータ列を横方向に合体させる	pd.concat([df, ds], axis=1)
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
2つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
二つのデータフレームを異なるカラムをキーにして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データ列の各値が何回出現するか確認する	ds.value_counts()
棒グラフをダークグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgreen')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
ミディアムスレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
部分的最小二乗法として回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
マッピングの値の一覧を参照する	aDict.values()
ファイルを読み込み用に開き]fとする	f = open(filepath, mode='r')
線グラフの色をローングリーンにセットする	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ファイルパスからの入力ストリームを見る	open(filepath)
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ファイルパスをUTF8で書き込みできるように開く]	open(filepath, mode='w', encoding='utf-8')
データフレームの列名一覧で指定された列を取り除く	df.drop(columns, axis=1)
データフレームを列でグループ化し、、それぞれのグループの件数を知る	df.groupby(column).size()
セパレータで文字列を分割して列挙する	s.split(sep)
option: ドジャーブルーにグラフの色をする	color = 'dodgerblue'
追加できるようにBOM付きを用いて既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: ライトグリーン色を使用する	color = 'lightgreen'
オブジェクトが集合クラスか	isinstance(obj, set)
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムの色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
ファイルを追加用に開いて]、fとする	f = open(filepath, mode='a')
option: コーンフラワーブルーにフォントの色を設定する	color = 'cornflowerblue'
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
n2がn以上、かつn3以下か確認する	n <= n2 and n2 <= n3
カデットブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ラインを半透明の一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフをダークカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
本日が木曜日か確認する	datetime.datetime.today().weekday() == 3
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
データフレームを1000の位で丸める	df.round(-3)
カンマで文字列を分割して文字列リストに変換する	s.split(',')
文字列全体がパターンにマッチするか調べる	re.fullmatch(pattern, s)
小さい順にリストの値を並べる	sorted(aList, reverse=True)
赤い星マーカーをイテラブルとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
実行を正しく終える	sys.exit(0)
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
nを16進文字列に変換する	hex(n)[2:]
カウントプロットを描画する	sns.countplot(x='列名', data=df)
データフレームの未入力値を後の値にセットする	df.fillna(method='bfill')
折れ線グラフの色をライトシアンにする	plt.plot(データ列x, データ列y, color='lightcyan')
値をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
option: ラインスタイルを実線に設定する	linestyle = 'solid'
配列をリストを境界値としてビニングする	pd.cut(aArray, aList)
折れ線グラフの三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームのリストカラムのNaNを中央値に増やす	df[aList].fillna(df[aList].median())
リストをマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
リストと数列についての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
今日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
データフレームをJSONLファイルにBOMを付けて保存する	df.to_csv(filename, encoding='utf_8_sig')
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
nの二乗を計算する	n ** 2
横棒グラフをホワイト色として描画する	plt.barh(データ列x, データ列y, color='white')
線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
淡いピンク色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
ヒストグラムをダークレッド色として描画する	plt.hist(データ列, color='darkred')
二つの文字列は同じ	s == s2
点線で配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
商と余りを同時に計算する	divmod(x, y)
option: ライトブルー色を使用する	color = 'lightblue'
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームを見る	df.head()
ピアソン相関係数としてデータフレームの相関行列	df.corr(method='pearson')
実数を実数で	x // y
横棒グラフを茶色色として描画する	plt.barh(データ列x, データ列y, color='brown')
棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
数列とデータ列についてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: ダークオーキッドを使う	color = 'darkorchid'
黒い大バツマーカーを配列と配列の散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='k')
リスト内の要素が全て真か調べる	all(aList)
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
回帰モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームの最後を見る	df.tail()
文字列を全て小文字にする	s.casefold()
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
変数を下線付きにする	f'\033[4m{value}\033[0m'
データフレームのn行目をドロップする	df.drop(n, axis=0)
浮動小数点数の小数点以下を丸める	round(x)
線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
文字列を右から空白で区切る	s.rsplit()
棒グラフをミディアムバイオレットレッド色を使って描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
縦棒グラフをプロットして、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームから列を2つだけ選択する	df[[column, column2]]
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
オプションで標準エラーを用いる	file = sys.stderr
文字列を式として評価する	eval(s)
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
マッピングに項目名が存在する	key in aDict
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームを各列と列の組み合わせ毎に分類して、分散を求める	df.groupby([column, column2], as_index=False).var()
主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
option: ヘッダをnamesに指定する	header = names
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
データフレームの列の値がxより多くx2より少ないデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
確率的勾配降下として回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
カウンタの最頻出なキー	aCounter.most_common()[0]
実数の正弦の逆数	math.asin(x)
ヒートマップでデータフレームのリストで指定された列の相関行列をグラフ化する	sns.heatmap(df[aList].corr())
現在のUNIX時間	int(time.time())
データフレームを'A'列の値でまとめたグループを見る	df.groupby('A')
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
青い一点鎖線として数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
インディアンレッド色を使ってヒストグラムを描画する	plt.hist(データ列, color='indianred')
文字列を全て小文字にする	s.lower()
データフレームのリストカラムは正規分布からどの程度尖っているか見る	df[aList].skew()
データ列の曜日の名前を見る	ds.dt.weekday_name
rgbの△マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームをサンプリングする	df.sample()
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
予測データのコンフュージョン・マトリックスを算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
タプルに別の辞書の値を更新する	aDict.update(aDict2)
option: 貝殻色を使用する	color = 'seashell'
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
赤色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
折れ線グラフに菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
乱数平均と標準偏差からを計算する	random.normalvariate(mu=0.5, sigma=0.2)
文字列を改行で分割し、文字列リストにする	s.splitlines()
散布図をスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slateblue')
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
データフレームを列を用いてソートする	df.sort_values(by=column)
双方向キューの最初に要素を追加する	deq.appendleft(element)
配列をn個に等間隔でビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
数式を積分する	sympy.integrate(e)
配列とイテラブルの散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
二つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
リストの最初の要素	aList[0]
データ列のNaNを中央値に設定する	ds.fillna(ds.median())
ゼロ埋めした三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
散布図に黒い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
CSVTSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
整数nを2進文字列にする	bin(n)[2:]
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
黒い右三角マーカーをリストとデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データ列を千の位で丸めて、整数型にする	ds.round(-3).astype(int)
折れ線グラフの左三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
数式を展開する	sympy.expand(e)
リストとイテラブルの散布図を描いて、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
散布図に青い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームのカラムの中に日付データと文字列があるかどうか調べる	df[col].isin([value, value2])
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
赤いバツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
モデルの残差を算出する	目的変数 - model.predict(説明変数)
データフレームのリストカラムの標本標準偏差を求める	df[aList].std()
データフレームのカラムの正規分布に対する左右対称性	df[col].kurt()
黒い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
日付データは何月か知る	aDate.month
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
カウンタから辞書を引く	aCounter.subtract(aDict)
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
predicateFuncが真となるタプルの要素	itertools.takewhile(predicateFunc, iterable)
タプルからサンプリングする	random.sample(iterable)
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
珊瑚色でヒストグラムを描画する	plt.hist(データ列, color='coral')
日付データが土曜日か調べる	aDate.weekday() == 5
回帰モデルの残差を計算する	目的変数 - model.predict(説明変数)
線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームを関数によってまとめたグループ	df.groupby(関数)
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ヒストグラムをレモンシフォン色を用いて描画する	plt.hist(データ列, color='lemonchiffon')
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
ヒストグラムの色をダーク・スラテグレーに変更する	plt.hist(データ列, color='darkslategrey')
集合を変更不能に変換する	frozenset(aSet)
下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
データフレームからカテゴリデータのカラムだけ抽出する	df.select_dtypes('object')
リストと数列について散布図を描画してダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: インディゴ色を使う	color = 'indigo'
列の値を正規表現patternでまとめて置換する	ds.replace(pattern, repl, regex=True)
列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
文字列を二分割する	s.partition(sep)
リストの値を空にする	aList.clear()
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
option: シルバー色を使う	color = 'silver'
データフレームを'A'列によってまとめたグループ	df.groupby('A')
option: グラフの色を白にする	color = 'white'
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
表示する最大行数を増やす	pd.set_option('display.max_rows', n)
閾値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
リストと配列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
列を四分位数ごとにビニングする	pd.qcut(ds, 4)
データフレームのリスト列の値を正規表現patternでまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
リストの平均値を計算する	sum(aList)/len(aList)
リストの最後を捨てる	aList[:-1]
棒グラフを黄色色を用いて描画する	plt.bar(データ列x, データ列y, color='yellow')
nからいつまでもカウントアップする	itertools.count(start=n)
プロットの簡単な説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
ミッドナイトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='midnightblue')
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
データ列の値が正規分布にしたがって発生する累積確率を計算する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
配列の変遷を折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
組の値を逆順にする	aTuple[::-1]
既存のファイルパスをBOM付きで追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
文字列がアスキー文字かどうか調べる	s.isascii()
配列と数列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: グラフの色をホワイトにする	color = 'white'
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
データフレームを欠損値を含めて列の値でグループ分けする	df.groupby(column, dropna=False)
組の個数	len(aTuple)
リストが少なくともひとつ真か調べる	any(aList)
文字列を左寄せする	s.ljust(文字列幅)
教師データを使ってモデルを学習する	model.fit(説明変数, 目的変数)
現在は何時か知る	datetime.date.today().hour
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
レベッカパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategray')
散布図のマーカーの色を指定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
エクセルデータファイルからnという名前のシートを読む	pd.read_excel(filename, sheet_name=n)
数を複素数に変換する	complex(x)
整数nを半分にする	n //= 2
範囲指定して表データの行を取り出す	df[start:end]
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームを各列毎にグループ化し、、列の分散を計算する	df.groupby(column)[column2].var()
データを最大最小値としてスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データ列を1000の位で丸める	ds.round(-3)
TSVファイルをカラムの名前なしで読む	pd.read_csv(filename, header=None)
ヒストグラムの色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
ハニーデュー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
データフレームのリストカラムの値はNaN	df[aList].isna()
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
タイムスタンプを用いる	import time
文字列をセパレータで区切って列挙する	s.split(sep)
クラス分類をランダム性を強化したランダムフォレストでする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
環境はMacOSかどうか	sys.platform.startswith('darwin')
データフレームを列でソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
両端キューの値をインプレースに逆順にする	deq.reverse()
リストを文字列リストに変換して、部分文字列で結合する	sub.join(map(str, iterable))
文字列内に英数字があるかどうか判定する	any(c.isalnum() for c in s)
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
表示可能な最大行数をnにセットする	pd.set_option('display.max_rows', n)
正規表現に複数行対応として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
イテラブルを集合にする	set(iterable)
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
バリーウッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
リストとイテラブルについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データ列の未入力値を最小値で埋める	ds.fillna(ds.min())
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
option: ダークスラテグレー色を使用する	color = 'darkslategray'
辞書から項目名で指定された値を取り出す	aDict.pop(key)
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
option: 色をゴールドに設定する	color = 'gold'
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
数に実数を乗算する	x * y
ピアソンとしてデータフレームのリストで指定された列の相関行列	df[aList].corr(method='pearson')
option: ターコイズにグラフの色を指定する	color = 'turquoise'
線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
イテラブルを双方向キューにする	collections.deque(iterable)
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
ファイルを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
ライトグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
線を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
折れ線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
ふたつの集合がセットと互いに素	aSet.isdisjoint(aSet2)
ヒストグラムの色をライムグリーンにする	plt.hist(データ列, color='limegreen')
列はどの程度、分散しているか見る	ds.var()
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
データフレームの列を10の位で丸めて整数にする	df[col].round(-1).astype(int)
イテラブルとリストの散布図にrgbの▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
データ列をヒストグラムで作図する	plt.hist(データ列)
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
データフレームを複数の列によってグループ化し要約統計量を求める	df.groupby(columns).describe()
ダークオレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
リストを組にする	tuple(aList)
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
実数の二乗	x ** 2
カテゴリで色分けしてデータフレームの全カラムの散布図をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
正規分布にしたがってデータ列の値が発生する確率を計算する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
シーグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
折れ線グラフの色をライトサーモンに変更する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: ライトコーラル色を用いる	color = 'lightcoral'
タプルをJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False)
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
ふたつのリストの積集合	list(set(aList) & set(aList2))
option: ハニーデューを使う	color = 'honeydew'
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
option: ダークグリーンを用いる	color = 'darkgreen'
線グラフの色をパールゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
データフレームを関数によってグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(関数)]
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームのカラムの曜日	df[col].dt.weekday_name
option: スラグレーにグラフの色を設定する	color = 'slategrey'
プロットの色を淡くする	sns.set(pallete='muted')
小文字を大文字に変換する	s.upper()
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
データフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
option: セパレータをスラッシュにする	sep = '/'
データフレームから重複を残さず消す	df.drop_duplicates(keep=False)
複数の列でデータフレームを昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: 四角マーカーを使う	marker = 's'
日付時刻データが何日か知る	aDatetime.day
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
option: スラッシュを区切りで使用する	sep = '/'
option: フォントの色をコーラルにセットする	color = 'coral'
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
option: 線の幅を設定する	linewidth = 3.0
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
nをn2だけ小さくする	n -= n2
データ列のタイムゾーンを日本にセットする	ds.tz_convert('Asia/Tokyo')
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
option: 印をバツに変える	marker = 'x'
コマンドの第二引数	sys.argv[1]
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
散布図をインディアンレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='indianred')
本日が土曜日かどうか	datetime.datetime.today().weekday() == 5
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
デフォルトを適用する	sns.set()
文字列の右端から空白を除く	s.rstrip()
バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
両端キューの右から値を取り出す	deq.pop()
ターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='turquoise')
グラフのパレットを淡くする	sns.set(pallete='muted')
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
重複していない行だけを選択する	df[not df.duplicated(keep=False)]
option: レベッカパープル色を用いる	color = 'rebeccapurple'
カデットブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
散布図を耐火レンガ色を用いて描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
タプルの先頭の要素	aTuple[0]
option: 印を丸に変える	marker = 'o'
オブジェクトをデバッグ向けの文字列にする	repr(obj)
文字列はリストの要素でない	element not in aList
カウンタから最も頻出な項目の件数を求める	aCounter.most_common()[1]
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
整数nの2進文字列	bin(n)[2:]
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
プロットの大きさを変更する	plt.figure(figsize=(横幅, 高さ))
横棒グラフをライトスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
タイムスタンプデータが何日か知る	aDatetime.day
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
プログラムの実行を異常終える	sys.exit(1)
option: 行列のデータ型を指定する	dtype = np.uint8
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
集合にイテラブルの要素を追加する	aSet.update(iterable)
ベクトルの最大値	np.max(aArray)
ダーク・スラテグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
要素を双方向キューの右側に付け加える	deq.append(element)
列を双方向キューに変換する	collections.deque(iterable)
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
TSVを読む	pd.read_csv(filename, sep='\t')
入力ストリーム全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
ValueMapでデータフレームのカラムの値を一度に置換する	df[col].replace(ValueMap)
データフレームのNaNを直前の値で埋める	df.fillna(method='ffill')
配列の要素数	aArray.size
タプルの末尾を除く	aTuple[:-1]
オブジェクトはタプル	isinstance(obj, tuple)
オブジェクトが論理値クラスのインスタンスかテストする	isinstance(obj, bool)
配列の要素数を使う	aArray.size
データ列の要約統計量	ds.describe()
ベクトルの各要素に加算する	aArray + aArray2
option: 分割記号を文字列にする	sep = s
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
赤い左三角マーカーをイテラブルと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: フォントの色をハニーデューに設定する	color = 'honeydew'
データ列を中央値でビニングする	pd.qcut(ds, 2)
データ列とリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
整数の最大公約数	math.gcd(n, n2)
オブジェクトは文字列かどうか調べる	isinstance(obj, str)
ゼロ埋めされた三二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
ラインを赤い実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 色をダーク・スラテグレーにセットする	color = 'darkslategrey'
2つの列でデータフレームを破壊的に小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
nがn2よりも大きい	n > n2
データフレームを各列毎にグループ化し、、列の個数を計算する	df.groupby(column)[column2].count()
データフレームの各グループ毎の合計	df.groupby(column).sum()
データフレームを'A'列の値毎に集約して列挙する	[(name, group) for name, group in df.groupby('A')]
組を逆さにする	reversed(aTuple)
データフレームを'A'列によって小さい順に破壊的に並べる	df.sort_values(by='A', ascending=True, inplace=True)
棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
オブジェクトのポインタを見る	id(obj)
2つの実行結果をコロンで区切って出力する	print(value, value2, sep=':')
グラフのx軸の名称を指定する	plt.xlabel('x軸ラベル')
実数に実数を掛ける	x * y
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
リストとリストについて散布図を描画し、、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
線グラフをダークシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームのリストカラムの平均を求める	df[aList].mean()
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
散布図のバツマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
オーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='orchid')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームのリストカラムの記述統計量	df[aList].describe()
グラフの補助目盛りを有効にする	plt.minorticks_on()
パラメータについて数式を積分する	sympy.integrate(e, z)
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
オリーブ色としてヒストグラムを描画する	plt.hist(データ列, color='olive')
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
データフレームのどの値が頻出か見る	df.mode()
折れ線グラフをターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図を淡い茶色色として描画する	plt.scatter(データ列x, データ列y, color='tan')
1行分標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
ファイルからの読み込みストリームを使う	open(filepath)
データフレームのcollを日付データにする	pd.to_datetime(df[col])
オブジェクトが浮動小数点数か調べる	isinstance(obj, float)
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グラフ中のフォントを変更する	sns.set(font=フォント名)
棒グラフをやわらかい青色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: フォントの色をミディアムオーキッドに設定する	color = 'mediumorchid'
全ての十六進数字	string.hexdigits
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
nがn2で割り切れないか調べる	n % n2 != 0
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
カラムの中に文字列とがある	ds.isin([value, value2])
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
文字列は文字列より辞書順で後かどうか確認する	s > s2
データフレームを表示するとき表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
プロットの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
パターンにマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
文字列を代数計算の変数に変換する	sympy.Symbol(s)
空の部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームのリスト列を十の位で丸める	df[aList].round(-1)
option: 色の透明度を設定する	alpha = 0.5
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
文字列は識別子名か調べる	s.isidentifier()
表データの列と列をドロップする	df.drop([column, column2], axis=1)
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データ列の欠損値をxに指定する	ds.fillna(x)
デックの最大長	deq.maxlen
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
配列をビン数nでビンニングする	pd.cut(aArray, n)
イテラブルと列をzipする	itertools.zip_longest(iterable, iterable2)
データフレームの列が文字列で始まる行を選択する	df[df[column].str.startswith(s)]
リストとイテラブルについての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
配列と数列についての散布図に赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
本日をタプルにする	datetime.datetime.today().timetuple()
タプルのn番目のを使う	aTuple[n]
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
上限長を指定して、双方向キュー	collections.deque(maxlen=n)
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームのカラムの年	df[col].dt.year
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
OSがLinuxか調べる	sys.platform.startswith('linux')
実数の小数点を丸める	round(x)
データ列の欠損値を50パーセンタイルで補う	ds.fillna(ds.median())
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
グラフの縦軸の軸名をuntitledに変更する	plt.ylabel('y軸ラベル')
集合から全ての要素を除く	aSet.clear()
配列とリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
クロス印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
Pandasで、データ列をフォーマットで日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
２つのデータフレームを横方向にくっつける	pd.concat([df, df2], axis=1)
棒グラフをライトゴールドロディイエロー色を使って描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
散布図にバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
option: ペルーにグラフの色をセットする	color = 'peru'
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
ファイルを書き込み用に文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
列によってで降順にデータフレームを整列する	df.sort_values(by=column, ascending=False)
データ列をn個にビン分割する	pd.cut(ds, n)
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
横棒グラフをマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='magenta')
実数の双曲線正弦の逆数	math.asinh(x)
折れ線グラフの線の種類を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのリストカラムの中央値を求める	df[aList].median()
標準入力を用いる	sys.stdin
ヒストグラムを一点鎖線として描く	plt.hist(データ列, linestyle='dashbot')
新しい文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
グラフのx軸とy軸の比率を同じする	plt.axis('equals')
UTF8で文字列をバイト列にする	s.encode(encoding='utf-8', errors='strict')
デフォルトのエンコーディング	sys.getdefaultencoding()
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームから指定した列を抽出する	df[[column]]
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
データ列の平均値を求める	ds.mean()
箱ひげ図を描画して、平均値を追加する	plt.boxplot(データ列, showmeans=True)
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データ列は正規分布からどの程度尖っているか調べる	ds.skew()
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
ファイルをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
グラフを論文用に変更する	sns.set(context='paper')
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
データフレームのヒストグラムを横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名')
棒グラフをコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='coral')
棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
全８進数字	string.octdigits
点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
カテゴリ別で色付けしてデータフレームの全カラムの相関を見る	sns.pairplot(df, hue='カテゴリ列')
文字列がタイトル大文字小文字か調べる	s.istitle()
最大値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].max())
日付時刻データにn時間分、足す	aDatetime + datetime.timedelta(hours=n)
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
データフレームの指定された列を配列に変換する	df[column].values
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
散布図を上三角印を用いる描画する	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフをシーグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='seagreen')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図に黒い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームを各列と列の組み合わせ毎に集計して合計を求める	df.groupby([column, column2], as_index=False).sum()
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
オブジェクトが関数か確認する	callable(obj)
データフレームのリストカラムの中に存在する文字列の個数を数える	df[aList].isin([value]).sum()
データ列を等量で分割数nでビン分割する	pd.qcut(ds, n)
nが3の倍数	n % 3 == 0
データをL1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
真紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
縦棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
option: グレー色を使う	color = 'gray'
ファイルをオープンして]追加ストリームを求める	open(filepath, mode='a')
データフレームの中に文字列と日付データがいくつ存在するか数える	df.isin([value, value2]).sum()
四分位数でデータ列をビン分割する	pd.qcut(ds, 4)
デフォルトスタイルを適用する	sns.set()
リストと配列について散布図を描いて三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームから重複を残さずドロップする	df.drop_duplicates(keep=False)
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
符号なし８ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
まとめて正規表現patternでデータフレームを置き換える	df.replace(pattern, repl, regex=True)
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
真部分集合か調べる	aSet < aSet2
カラーバーを横向きでプロットする	plt.colorbar(orientation='horizontal')
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
疑似乱数を生成する	random.random()
文字列を走査し正規表現に複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
横棒グラフをミディアムスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
イテラブルと配列についての散布図に▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
データフレームを表示するときヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
浮動小数点数が正の数	x > 0
プロットを濃くする	sns.set(pallete='deep')
変数をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
浮動小数点数の正弦の逆数	math.asin(x)
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: ベージュにグラフの色をセットする	color = 'beige'
ヒストグラムの色を黄緑に変更する	plt.hist(データ列, color='chartreuse')
ミディアムアクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
xが1、もしくは2もしくは3に等しいかどうか	x == 1 or x == 2 or x == 3
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
空白文字を見る	' '
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
option: チョコレートを使う	color = 'chocolate'
グラフを使う	import matplotlib.pyplot as plt
ゴーストホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='ghostwhite')
異なるカラムをキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
数式のパラメータに数式を代入する	e.subs(z, e2)
ヒストグラムと勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
option: セパレータをコロンにする	sep = ':'
データフレームが正規分布からどの程度尖っているか見る	df.skew()
リストに文字列を加える	aList.append(element)
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフのポイント印の太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
浮動小数点数を実数で	x // y
nがn2未満、またはn3以上かテストする	n < n2 or n >= n3
データフレームのリストカラムの欠損値を後の行の値で補う	df[aList].fillna(method='bfill')
option: ダークスレートブルーにグラフの色を変更する	color = 'darkslateblue'
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
キーが辞書上でまだ定義されていないか調べる	key not in aDict
横棒グラフをアンティークホワイト色として描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
Pandasで、タイムスタンプ型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
ヒストグラムの色をゴールデンロッドにセットする	plt.hist(データ列, color='goldenrod')
ダークオーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
リストと配列について散布図を描画して、上三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
組をnからナンバリングする	enumerate(aTuple, start=n)
浮動小数点数の自然対数	math.log(x)
線グラフをマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='magenta')
データフレームのリストカラムの未入力値を平均に設定する	df[aList].fillna(df[aList].mean())
トマト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
グラフに格子線を付ける	plt.grid(True)
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: オールドレースにグラフの色を設定する	color = 'oldlace'
Pandasで、データ列のUNIX時間からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
乱数を求める	random.random()
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
n個に等間隔でデータ列をビン分割する	pd.cut(ds, n)
タプル内の要素が全て真か確認する	all(aTuple)
タプルの最初	aTuple[0]
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの印を四角印にする	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
option: カーキにグラフの色をする	color = 'khaki'
option: フォントの色を紺碧に設定する	color = 'azure'
データフレームを表示するとき折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
データフレームのグループごとの最大値を求める	df.groupby(column).max()
option: ダークマゼンタ色を使用する	color = 'darkmagenta'
リストとデータ列についての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
文字列のプレフィックスから部分文字列を取り除く	s.removeprefix(sub)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
option: クリムゾン色を使用する	color = 'crimson'
option: ロージーブラウン色を使用する	color = 'rosybrown'
日付時刻データが日付時刻データより先か調べる	aDatetime < aDatetime2
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
正規表現を大文字・小文字を無視してあらかじめコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
サイコロと同じ乱数を生成する	random.randint(1, 6)
マッピングから項目名で指定された値を取り出す	aDict.pop(key)
データ列の出現頻度を可視化する	plt.hist(データ列)
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
データ列を円プロットにする	plt.pie(データ列, startangle=90)
読み込みモードとしてファイルパスを開き]、fとする	f = open(filepath, mode='r')
データフレームを十の位で丸めて整数にする	df.round(-1).astype(int)
文字列を代数計算の変数にする	sympy.Symbol(s)
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
ドジャーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
文字列の大文字と小文字を入れ替える	s.swapcase()
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
カンマで区切って２つの実行結果をプリントする	print(value, value2, sep=',')
要素はマップの値として含まれている	element in aDict.values()
option: ダーク・スラテグレー色を用いる	color = 'darkslategrey'
データフレームから末尾の列を除く	df[df.columns[:-1]]
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
日付データが日曜日か	aDate.weekday() == 6
データフレームの全カラムを散布図として見る	sns.pairplot(df)
option: マーカーを丸に設定する	marker = 'o'
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
ヒストグラムをダークサーモン色を使って描画する	plt.hist(データ列, color='darksalmon')
option: オールドレースを使う	color = 'oldlace'
等しい量になるようにリストをn個にビン分割する	pd.qcut(aList, n)
データフレームから型リストで指定されたデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
黒い左三角マーカーをリストとイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
マッピングから項目名で指定された項目をポップする	aDict.pop(key)
option: 色をピンクに設定する	color = 'pink'
実数を実数に掛ける	x * y
折れ線グラフの四角印を青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームのリストカラムを10の位で四捨五入して、整数型にする	df[aList].round(-1).astype(int)
イテラブルから集合	set(iterable)
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
横棒グラフをフォレストグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: グラフの色をプラムに設定する	color = 'plum'
データフレームのカラムの名前を列挙する	df.columns
nをn2分の一にする	n /= n2
ファイルからファイル名を使う	os.path.basename(filepath)
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
グラフの色を全般的に暗くする	sns.set(pallete='dark')
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
データフレームからn行サンプリングする	df.sample(n)
データフレームのカラムの中に文字列と文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
データフレームをインデックスによってソートする	df.sort_index()
スラグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
データフレームの値を正規表現patternで一度にreplに置き換える	df.replace(pattern, repl, regex=True)
数値を黄色化する	f'\033[33m{value}\033[0m'
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
xの小数点以下'5'桁まで表示する	print(':.5f'.format(x))
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
option: ライトゴールドロディイエローに色を設定する	color = 'lightgoldenrodyellow'
線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列の開始位置と終了位置の間に部分文字列が存在するかどうか確認する	s.find(sub, start, end) != -1
option: 下三角マーカーを描画する	marker = 'v'
データフレームのカラムが何時か見る	df[col].dt.hour
小数点数の小数部を求める	math.modf(x)[0]
縦棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームからランダムに抽出する	df.sample()
両端キューに要素をエンキューする	deq.appendleft(element)
青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
モデルを説明変数と目的変数として学習する	model.fit(説明変数, 目的変数)
データフレームを'A'列を用いて小さい順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
option: フォントの色をダーク・スラテグレーに指定する	color = 'darkslategrey'
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
オブジェクトが名前付きタプルのインスタンスか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
両端キューの最後に要素を追加する	deq.append(element)
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
コマンド引数を列挙する	sys.argv[1:]
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
nが一桁の数か調べる	-9 <= n <= 9
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
データフレームを各列毎にグループ化し、、列の最小値を算出する	df.groupby(column)[column2].min()
横棒グラフの色を淡い茶色にする	plt.barh(データ列x, データ列y, color='tan')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
列によってデータフレームを集約して、各グループごとの平均値を計算する	df.groupby(column).mean()
option: ライトスチールブルー色を使用する	color = 'lightsteelblue'
縦棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
option: グラフの色を赤に変更する	color = 'red'
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
▽印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
ヒストグラムの色を紺碧にする	plt.hist(データ列, color='azure')
日付時刻データを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
option: コーンズシルクを使用する	color = 'cornsilk'
パラメータについて数値を積分する	sympy.integrate(e, z)
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームを列によって並べ直して、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
辞書を並べ直してJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
列をリストを境界値として分割する	pd.cut(ds, aList)
文字列TSVファイルからn番目のカラムを行としてCSVを読み込む	pd.read_csv(filename, index_col=n)
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
データ列の未入力値をxに設定する	ds.fillna(x)
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームの中の列を等量でビン数nで分割する	pd.qcut(df[col], n)
回帰分析をブースティングとして行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
option: 色をスレートブルーに設定する	color = 'slateblue'
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
二次元リストをflattenする	sum(aList)
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
前もって複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
データフレームを'A'列を用いてで破壊的に並べる	df.sort_values(by='A', inplace=True)
データフレームを列名リストを用いてで降順に並べ直す	df.sort_values(by=column, ascending=False)
option: グラフの色をディープスカイブルーに指定する	color = 'deepskyblue'
数を十六進文字列に変換する	x.hex()
データフレームの列の文字列をNaNに変換する	df[col].replace(s, np.nan)
データフレームの指定したカラムの名前一覧の列を抽出する	df[columns]
CSVタブ区切りのファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
リストと配列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームを'A'列を用いてソートして、更新する	df.sort_values(by='A', inplace=True)
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
実線を使って数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
リストの末尾からn番目以前の部分を抽出する	aList[:-n]
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
オブジェクトのバイト長を知る	sys.getsizeof(obj)
正則化付き線形回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
現在が何分か知る	datetime.date.today().minute
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
ダークシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
時間を使う	import time
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
昇順に組の要素を並べ変える	sorted(aTuple, reverse=True)
文字列を白色にする	f'\033[37m{value}\033[0m'
データフレームの指定された列を取り出す	df[[column]]
nわるn2を算出する	n / n2
文字列を黒色にする	f'\033[30m{value}\033[0m'
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
クラス分類の真陽性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
縦棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
日付データからn時間分減らす	aDate - datetime.timedelta(hours=n)
nがn2で割り切れないかどうか調べる	n % n2 != 0
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
最初のカテゴリーを除き、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
縦方向に二つのデータフレームをくっつける	pd.concat([df, df2])
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
option: 印をポイントに変更する	marker = '.'
折れ線グラフを菱形印で描画する	plt.plot(データ列x, データ列y, marker='D')
現在処理中の例外を情報を確認する	sys.exc_info()
折れ線グラフをミスティローズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
ゲインズボロにヒストグラムの色を変更する	plt.hist(データ列, color='gainsboro')
データフレームの列がxより多くx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
実行結果を下線付き化する	f'\033[4m{value}\033[0m'
option: 青紫にグラフの色を設定する	color = 'violet'
データフレーム全体を行によって並べ直す	df.sort_index()
折れ線グラフのクロスマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
線グラフのラインスタイルを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの指定された列を抽出する	df[column]
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
データ列の値は欠損値か調べる	ds.isna()
ふたつの集合の∩	aSet.intersection(aSet2)
バギングを用いて回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
ファイルを一行ずつ読み込む	f.readline()
縦棒グラフの色を真紅にする	plt.bar(データ列x, データ列y, color='crimson')
ブースティングを使って回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
日付データをISO形式の文字列にする	aDate.isoformat()
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
データフレームの列の中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
カラムの記述統計量を求める	ds.describe()
タプルをn回、連結する	aTuple * n
オレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
nをn2で割った結果の切り上げを計算する	(n + n2 - 1) // n2
赤い実線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
小数点数の天井を求める	math.ceil(x)
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
コロンで区切って二つの実行結果をプリントする	print(value, value2, sep=':')
二つの表を列をキーとして左ジョインする	pd.merge(df, df2, on=column, how='left')
折れ線グラフの色をグリーンイエローにする	plt.plot(データ列x, データ列y, color='greenyellow')
日付時刻データが土曜日かどうか確認する	aDatetime.weekday() == 5
セットの全ての要素が別の集合に含まれるか	aSet.issubset(aSet2)
複数の列を用いて昇順に破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
散布図のマーカーの太さを設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: 菱形印を描画する	marker = 'D'
折れ線グラフの色をサーモンにする	plt.plot(データ列x, データ列y, color='salmon')
リストのn番目以降の要素を抽出する	aList[n:]
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
イテラブルのイミュータブルなセットを用意する	frozenset(iterable)
バイアスなしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
縦棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
データフレームのシェイプを見る	df.shape
リストとして列を抽出する	df[column].values.tolist()
ミディアムオーキッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
双方向キュー中の値のインデックス	deq.index(element)
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
列の各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
配列をビン分割する	pd.cut(aArray, aList)
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームの列の種類を見る	df.info()
ベクトルの要素ごとのアダマール積	np.multiply(aArray, aArray2)
折れ線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
オブジェクトがリストかタプルか	isinstance(obj, (list)
無限にnからstep間隔で数え上げるする	itertools.count(start=n, step=step)
折れ線グラフの色をチョコレートにセットする	plt.plot(データ列x, データ列y, color='chocolate')
２つの実行結果を文字列で区切って表示する	print(value, value2, sep=s)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
リストの先頭のn要素を取り除く	aList[n:]
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
n個の集まりからk個選ぶ方法	math.comb(n, k)
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
既存のファイルをUTF8として追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
ゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: ヘッダを連番にする	header = None
コーンフラワーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
値はセットに含まれる	element in aSet
モカシンにヒストグラムの色を変更する	plt.hist(データ列, color='moccasin')
散布図をティール色を用いて描画する	plt.scatter(データ列x, データ列y, color='teal')
option: カラムの名前を自動的な連番に変更する	header = None
文字列の先頭から空白を取り除く	s.lstrip()
ブール型のゼロ埋めされた配列を初期化する	np.zeros(要素数, dtype=np.int32)
カテゴリで色分けしてデータフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
カウンタを列を出現回数して更新する	aCounter.update(iterable)
縦棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
nから無限に数え上げるする	itertools.count(start=n)
タプルの項目名一覧	list(aDict)
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: ブランチドアーモンドを使用する	color = 'blanchedalmond'
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
エンディアンを知る	sys.byteorder
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
暗い赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
表データの列の値がxの行を抽出する	df[df[column] == x]
最大値でデータ列の欠損値を埋める	ds.fillna(ds.max())
データ列をビン数nでビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフの色を深紅にする	plt.barh(データ列x, データ列y, color='crimson')
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
キーが辞書に存在する	key not in aDict
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
option: 星マーカーを描画する	marker = '*'
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
珊瑚色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
横棒グラフをミディアムオーキッド色として描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
グラフの色調を淡くする	sns.set(pallete='muted')
'A'列の値によってデータフレームをグループ化し、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームを関数毎にグループ分けして、列挙する	[(name, group) for name, group in df.groupby(関数)]
変数を太字にする	f'\033[1m{value}\033[0m'
散布図に▽マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
セットからエラーなく要素を取り除く	aSet.discard(element)
リネン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
パパイヤウィップ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データを四分位点としてスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
プロットから目盛線を消す	plt.grid(False)
数式を微分する	sympy.diff(e)
ふたつのリストの共通りスト	list(set(aList) & set(aList2))
データフレームのカラムが何秒か確認する	df[col].dt.second
文字列がタプルの要素か調べる	element in aTuple
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
ペールグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
多重集合を辞書から作成する	collections.Counter(aDict)
空の計数器を生成する	collections.Counter()
データフレームとデータフレームの列を横向きに連結する	pd.concat([df, ds], axis=1)
option: マゼンタ色を使用する	color = 'magenta'
Pandasで、データフレームのカラムをPandasの日付型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
nを符号付きでバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
'A'列と'B'列の値によってデータフレームをグループ分けする	df.groupby(['A', 'B'])
option: 色をオレンジに設定する	color = 'orange'
日付時刻データの曜日を求める	aDatetime.weekday()
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
データ列間のR2を求める	sklearn.metrics.r2_score(データ列, データ列2)
リストを黒色でプリントする	print(f'\033[30m{value}\033[0m')
プロットの色を色差別なくする	sns.set(pallete='colorblind')
FIXME	np.linalg.eig(aArray)
下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
option: マーカーの大きさを変更する	markersize = 2.0
option: インデックスを連番に変更する	index_col = None
カラムの中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
折れ線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
数を整数に変換する	int(x)
折れ線グラフの四角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
数列とリストの散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図をマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='magenta')
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームを表示するときヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
nの無限イテラブル	itertools.repeat(n)
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
列によってデータフレームを並べて、新しいインデックスを加える	df.sort_values(columns).reset_index()
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
データフレームの累積分布を描く	sns.ecdfplot(x='列名', data=df)
クラス分類の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
データフレームのカラムのタイムゾーンを東京にセットする	df[col].tz_convert('Asia/Tokyo')
ヒストグラムのビンを設定する	plt.hist(データ列, bins=区関数)
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
縦棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
option: 色をミッドナイトブルーにする	color = 'midnightblue'
データ列の欠損値をモードに指定する	ds.fillna(ds.mode().iloc[0])
ヒストグラムをサーモン色として描画する	plt.hist(データ列, color='salmon')
現在の秒を見る	datetime.date.today().second
白色で文字列を表示する	print(f'\033[37m{value}\033[0m')
プログラムを異常停止する	sys.exit(1)
n個分左に両端キューの要素をローテンションする	deq.rotate(-n)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
バリーウッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
パーセプトロンとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
データ列の折れ線プロットを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
リストの全ての要素をクリアにする	aList.clear()
主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームを列の値によってグループ化して、それぞれのグループ毎の分散を求める	df.groupby(column).var()
nからn2までのスライス	slice(n, n2)
非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in s)
線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
整数nの8進表記を使う	oct(n)
文字列を部分文字列で分割した場合の後半の文字列を使う	s.partition(sub)[-1]
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
フローラルホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='floralwhite')
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
数のn乗して整数による余り	pow(x, n, y)
箱ひげ図を用いてデータ列を可視化する	plt.boxplot(データ列)
option: ディムグレーを使う	color = 'dimgray'
データ列の歪度を求める	ds.kurt()
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
赤い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
nを半分にする	n /= 2
タイムスタンプデータが日付時刻データよりあと	aDatetime > aDatetime2
一点鎖線として配列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
上三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ラベンダーブラッシュ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ダークオレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='darkorange')
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
文字列をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
アリスブルーにヒストグラムの色を指定する	plt.hist(データ列, color='aliceblue')
一方に含まれ、他方に含まれない集合を計算する	aSet.difference(aSet2)
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
配列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
最初の列をデータフレームから消す	df[df.columns[1:]]
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: ダークサーモンにフォントの色を変更する	color = 'darksalmon'
集合が空か	len(aSet) == 0
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
'A'列によって昇順にデータフレームをソートする	df.sort_values(by='A', ascending=True)
セットからエラーなく要素を除去する	aSet.discard(element)
双方向キューの要素数	len(deq)
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
リストの末尾のn要素を捨てる	aList[:-n]
データラベルを表示する	plt.legend()
option: グラフの色をダークシアグリーンにする	color = 'darkseagreen'
正則化付き回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
２つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
データフレームを列で並べて、上位n件を取り出す	df.sort_values(columns).head(n)
ペールグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
カウンタをリセットする	aCounter.clear()
ビスクにヒストグラムの色を指定する	plt.hist(データ列, color='bisque')
リストとリストについての散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
入力ストリームを全部、読み込む	f.read()
散布図の三角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
option: ライトブルーを用いる	color = 'lightblue'
文字列ひとつのタプル	(element,)
列を文字列リストに変換して'改行で一つにする	'\n'.join(map(str, iterable))
配列とリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
折れ線グラフを青緑色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
データ列を百の位で丸めて整数型にする	ds.round(-2).astype(int)
option: グラフの色をオールドレースに指定する	color = 'oldlace'
option: ドジャーブルーを使う	color = 'dodgerblue'
角度のラジアンを計算する	math.radians(degree)
線グラフをコーンズシルク色を用いて描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームの末尾n行を抽出する	df.tail(n)
線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
リストのn番目以降の部分を取り出す	aList[n:]
データフレームを各列と列の組み合わせ毎に集約して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
マップのキーの一覧を得る	aDict.keys()
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれないか確認する	s.find(sub, start, end) == -1
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgray')
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: カーキを用いる	color = 'khaki'
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: マーカーの色を青にする	markerfacecolor = 'blue'
ダークグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
日付時刻データをタプルに変換する	aDatetime.timetuple()
タイムスタンプデータが日付時刻データより後ろ	aDatetime > aDatetime2
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
数列とリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ダークバイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ヒストグラムをライトコーラル色として描画する	plt.hist(データ列, color='lightcoral')
二つのデータフレームを横向きにくっつける	pd.concat([df, df2], axis=1)
nからn2を引いてnに代入する	n -= n2
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
シーケンスを文字列リストに変換して、カンマによって連結する	','.join(map(str, iterable))
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
option: オレンジレッド色を使う	color = 'orangered'
散布図をミッドナイトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: ドジャーブルーに色を設定する	color = 'dodgerblue'
文字列の最初から空白やタブを取り除く	s.lstrip()
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
nをn2で割った剰余を算出する	n % n2
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
散布図を赤い右三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
リストを境界値として配列を分割する	pd.cut(aArray, aList)
整数乱数で要素を埋めたベクトル	np.random.randint(開始値, 終了値, N)
データフレームをタブ区切りのファイルから読む	pd.read_csv(filename, sep='\t')
データフレームを列ごとにグループ化して、平均値を計算する	df.groupby(column).mean()
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
列によってで降順にデータフレームをソートする	df.sort_values(by=column, ascending=False)
データフレームのカラムの50パーセンタイル	df[col].median()
ミントクリーム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
リストと数列の散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
オブジェクトの種類	type(obj)
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
kを底とする実数の対数	math.log(x, k)
縦棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームを'A'列の値によって集計し、、列挙する	[(name, group) for name, group in df.groupby('A')]
プロットを画面に指定する	sns.set(context='notebook')
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
rgbの左三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
option: ダークオリーブグリーンに色をする	color = 'darkolivegreen'
リストの末尾を使う	aList[-1]
文字列がタプルに含まれるかどうか調べる	element in aTuple
predicateFuncが真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムをダークオリーブグリーン色として描画する	plt.hist(データ列, color='darkolivegreen')
辞書のキーに対応した値	aDict.get(key)
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
n回だけ文字列を置き換える	s.replace(sub, newsub, n)
リストと配列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのn行目を落とす	df.drop(n, axis=0)
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
縦棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
上位集合もしくは等しいか調べる	aSet > aSet2
option: ラベンダー色を使う	color = 'lavender'
'A'列と'B'列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
浮動小数点数が無限大か調べる	math.isinf(x)
赤いダイアモンドマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データ列のユニークな要素	ds.unique()
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
データフレームの列を目的変数にする	目的変数 = df['列名']
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
ポイントマーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
データフレームのリスト列の中にいくつ欠損値が含まれるか数える	df[aList].isna().sum()
日付時刻データをエポック秒にする	aDatetime.timestamp()
データフレームを各列毎に集約して、文字列というグループを使う	df.groupby(column).get_group(s)
黒い大バツマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: ビスクにグラフの色を指定する	color = 'bisque'
タブで区切って二つの数値をプリントする	print(value, value2, sep='\t')
データフレーム全体をインデックスによって降順でソートする	df.sort_index(ascending=False)
リストとデータ列について散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
リストとリストについて散布図を描いて、菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
マッピングに要素をキーとして加える	aDict[key] = element
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームの列の値がxより大きい行を取り出す	df[df[column] > x]
文字列の開始位置番目からと終了位置までの間に部分文字列が存在しないか調べる	s.find(sub, start, end) == -1
option: ブラック色を用いる	color = 'black'
赤いポイントマーカーをイテラブルと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ヒストグラムの色をスチールブルーに指定する	plt.hist(データ列, color='steelblue')
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
Pandasで、文字列をPandasの日付型に変換する	pd.to_datetime(s)
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
折れ線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
濃い青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: フォントの色をパープルに指定する	color = 'purple'
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
両端キュー中の数値をカウントする	deq.count(element)
折れ線プロットに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
配列とリストについて散布図をプロットし、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
リストとデータ列について散布図を描画し、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
データフレームをグループ化し各列に対し個数を計算する	df.groupby(column)[column2].count()
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
xを浮動小数点数にする	float(x)
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
データフレームを'A'列で降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
文字列の先頭が部分文字列か調べる	s.startswith(sub)
ブランチドアーモンド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
列の各データは何回出現するか見る	ds.value_counts()
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
折れ線グラフの四角印の色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgrey')
既存の配列を元に全要素が1のベクトル	np.ones_like(aArray)
赤い▼マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
nのビット長を見る	n.bit_length()
option: 色をダーク・スラテグレーに設定する	color = 'darkslategrey'
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
データフレームの最後のカラム以外を説明変数にする	説明変数 = df[df.columns[:-1]]
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
シーケンスからひとつランダムに選ぶ	random.choice(iterable)
タイムスタンプデータをISO書式の文字列に変換する	aDatetime.isoformat()
文字列内にひとつでも英数字があるかどうか	any(c.isalnum() for c in s)
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
1行だけ改行なしで標準入力から読む	sys.stdin.readline().rstrip()
nがn2以下	n <= n2
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
数値を数値計算する	float(e)
新しい勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
変数が無限大に近づくとき、数式の極限値を計算する	sympy.limit(e, z, oo)
散布図の▽マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのリストカラムの欠損値を第二四分位数で埋める	df[aList].fillna(df[aList].median())
n進文字列を整数にする	int(s, n)
整数nの二進表記	bin(n)
数列とリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
nでシードを初期化する	random.seed(n)
スプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
配列とリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
日付データが金曜日か調べる	aDate.weekday() == 4
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームの各グループごとの平均値	df.groupby(column).mean()
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフの▽マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D')
リストと数列についてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
option: ブルーバイオレットにグラフの色を指定する	color = 'blueviolet'
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームの75パーセンタイル	df.quantile(0.75)
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
y座標の目盛を対数に変更する	plt.yscale('log')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
環境名	sys.platform
疑似乱数を正規分布で求める	random.normalvariate(mu=0.5, sigma=0.2)
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
折れ線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフの△印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
整数nがタプルのひとつかどうか	n in aTuple
下三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
nがn2以下、または、n3以上かどうか調べる	n <= n2 or n >= n3
データフレームを表示するとき、表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
ヒストグラムをバリーウッド色を用いて描画する	plt.hist(データ列, color='burlywood')
データフレームのリストカラムのNaNを最大値で補う	df[aList].fillna(df[aList].max())
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
データフレームのリスト列を四捨五入して、整数型にする	df[aList].round().astype(int)
棒グラフをブランチドアーモンド色を用いて描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
散布図の▲マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
日付時刻データが何年か知る	aDatetime.year
シエナ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
オレンジ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
n進文字列を整数に変換する	int(s, n)
辞書に辞書の値を更新する	aDict.update(aDict2)
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
キーが辞書上で未定義か調べる	key not in aDict
option: パパイヤウィップ色を使用する	color = 'papayawhip'
折れ線グラフの左三角印を赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ドジャーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
行列積を求める	np.matmul(aArray, aArray2)
配列の次元数	aArray.ndim
３自然数の最小公倍数を計算する	math.lcm(n, n2, n3)
option: マーカーを左三角に設定する	marker = '<'
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
辞書の項目名とその値を列挙する	aDict.items()
レベッカパープル色としてヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightgreen')
ストリームからn文字、読む	f.read(n)
データフレームの各グループの最小値を計算する	df.groupby(column).min()
データ列の平均を求める	ds.mean()
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
日付時刻データが金曜日	aDatetime.weekday() == 4
双方向キューの最初を見る	deq[0]
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
インディゴ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
タプルの要素を逆順にする	aTuple[::-1]
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
データ列の未入力値をxで埋める	ds.fillna(x)
標準入力から1文字だけ読む	sys.stdin.read(1)
最大長を指定して、両端キューを作る	collections.deque(maxlen=n)
ダークスラテグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
空文字を求める	''
縦棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
データフレームを'A'列と'B'列の値によってグループ化する	df.groupby(['A', 'B'])
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
コンビネーション	math.comb(n, k)
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
最大値・最小値の範囲として一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
option: 行列のデータ型を指定する	dtype = np.int8
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
ヒストグラムを3つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
表のそれぞれのグループの標準偏差	df.groupby(column).std()
行列の和	aArray + aArray2
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
ライトスカイブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームの列を整数に四捨五入する	df[col].round()
Pandasで、エポック秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ホワイトスモーク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
タイムスタンプデータをISO8601形式の文字列に変換する	aDatetime.isoformat()
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ひとつでも空白が文字列内に含まれるか調べる	any(c.isspace() for c in s)
データ列の日にち	ds.dt.day
ふたつの集合に共通する要素からなる集合を算出する	aSet.intersection(aSet2)
ファイルからの入力ストリームを使う	open(filepath)
xの小数点以下'3'桁まで出力する	print(':.3f'.format(x))
グラフで使える色名の一覧を求める	matplotlib.colors.cnames
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
リストとイテラブルについて散布図を描画し、、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
整数nが配列のいづれかか確認する	n in aArray
折れ線グラフに下三角印を使う	plt.plot(データ列x, データ列y, marker='v')
データフレームのn行目をドロップして更新する	df.drop(n, axis=0, inplace=True)
TSVファイルをヘッダなしで読み込む	pd.read_csv(filename, header=None)
多次元データをt分布型確率的近傍埋め込み法でパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
'A'列と'B'列でデータフレームをまとめたグループ	df.groupby(['A', 'B'])
データフレームの列の中に含まれる文字列の個数をカウントする	df[col].isin([value]).sum()
現在が何月か知る	datetime.datetime.today().month
文字列の左端から空白を除く	s.lstrip(' ')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
データフレームから破壊的に重複した行を消す	df.drop_duplicates(inplace=True)
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
横棒グラフを描き、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
青色を使ってヒストグラムを描画する	plt.hist(データ列, color='blue')
option: バツ印を使う	marker = 'x'
配列の内積を計算する	np.dot(aArray, aArray2)
データフレームの列の名前を付け直す	df.rename(columns={column: name})
データ列と数列の散布図を描画してマーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
nが偶数	n % 2 == 0
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームのグループごとの個数	df.groupby(column).count()
線形回帰データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
縦棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームを'A'列の値によって集約する	df.groupby('A')
縦棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
データ列の値をValueMapでまとめて変更する	ds.replace(ValueMap)
数列とリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: 真紅色を使う	color = 'crimson'
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
文字列内にひとつでも英数字が含まれるか確認する	any(c.isalnum() for c in s)
書き込みモードでファイルパスをオープンする]	open(filepath, mode='w')
データフレームのカラムのタイムゾーンを日本にする	df[col].tz_convert('Asia/Tokyo')
実行結果を水色でプリントする	print(f'\033[36m{value}\033[0m')
オプションでファイルを使う	file = sys.open(filename, 'w')
option: グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
データ列の曜日数を使う	ds.dt.dayofweek
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
リストを黒色化する	f'\033[30m{value}\033[0m'
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
オブジェクトはバイト列	isinstance(obj, bytes)
非数値データをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データフレームのリストカラムの上位25%を計算する	df[aList].quantile(0.25)
ヒストグラムの線の種類を一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
縦棒グラフをホットピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='hotpink')
文字列中の小文字を大文字にする	s.upper()
散布図に赤い▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
option: ビスクにグラフの色を設定する	color = 'bisque'
分類結果の真陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
リスト内の要素が少なくともひとつ真か判定する	any(aList)
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
option: グラフの色をオレンジにセットする	color = 'orange'
ブラック色で線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
option: フォントの色をスラグレーに設定する	color = 'slategrey'
option: マーカーの色をブラックにする	markerfacecolor = 'black'
線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームの列の中に日付データと文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
折れ線グラフをミディアムスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
線形回帰データフレームのグループ化した散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
配列の行を選択する	aArray[行番号]
配列の差	aArray - aArray2
predicateFuncがtrueとなるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
配列の分散	np.var(aArray)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
リストのn番目のを求める	aList[n]
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データ列の中にいくつが存在するか求める	ds.isin([value]).sum()
データフレームのカラムの中の未入力値の合計を求める	df[col].isna().sum()
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
ピアソンの相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
小数点数が有限か調べる	math.isfinite(x)
データフレームのカラムの値を正規表現patternでまとめてreplに置換する	df[col].replace(pattern, repl, regex=True)
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
グラフを表示する	plt.show()
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
棒グラフの色を変更する	plt.bar(ラベル列, データ列, color=rgb)
データラベルをプロットに被らない位置に表示する	plt.legend(loc='best')
データフレームのカラムの値を正規表現patternでまとめて置き換える	df[col].replace(pattern, repl, regex=True)
クラス分類の予測精度をヒートマップを用いて調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
データフレームを破壊的に複数の列によってによってソートする	df.sort_values(by=column, inplace=True)
カテゴリで色分けしてデータフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
ミディアムスプリンググリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: 読み込むシート名をnamesに指定する	sheet_name = names
マッピングからキーの値を見る	aDict.get(key)
データフレームの列の文字列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
棒グラフをサンディーブラウン色を使って描画する	plt.bar(データ列x, データ列y, color='sandybrown')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
リストと配列について散布図をプロットして、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
実数が正か	x > 0
集合の全ての要素が別の集合に含まれるか	aSet.issubset(aSet2)
線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
オブジェクトがタプルに含まれるか確認する	element in aTuple
リストと数列について散布図を描画し、、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: マーカーの線幅を変える	markeredgewidth = 2.5
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
ファイルパスを開き]、読み込みストリームを使う	open(filepath, mode='r')
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
イテラブルと配列の散布図を描画して、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ケンドール順位相関係数を使ってデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
データフレームはどの程度分散しているか調べる	df.var()
マッピングのコピーを作る	aDict.copy()
パープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
辞書からキーの値をエラーなく見る	aDict.get(key, None)
折れ線グラフをフローラルホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='floralwhite')
タプル内の要素は少なくともひとつ真	any(aTuple)
データフレームの列のユニークな要素を見る	df[col].unique()
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームから指定された3つの列を抽出する	df[[column, column2, column3]]
散布図の左三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
自然数個のものからk個取り出した場合の並べ方	math.perm(n, k)
円周率	math.pi
データフレームのカラムの曜日数	df[col].dt.dayofweek
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
option: グラフの色を白に指定する	color = 'white'
データフレームの平均と信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データ列が何月か見る	ds.dt.month
折れ線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
本日の年数を使う	datetime.datetime.today().year
option: マーカーを星に変更する	marker = '*'
最頻値でカラムのNaNを埋める	ds.fillna(ds.mode().iloc[0])
淡いピンク色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
文字列の最初だけ大文字化する	s.capitalize()
散布図をナバホホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
option: △マーカーを描画する	marker = '^'
8進数文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
文字の文字コード	ord(ch)
配列の行ごとの分散	np.var(aArray, axis=1)
'A'列を用いてによってデータフレームを大きい順に並べる	df.sort_values(by='A', ascending=False)
ファイルを改行なしで一行ずつ読む	f.readline()
option: ダークマゼンタを使用する	color = 'darkmagenta'
ラインを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
リストを引数として展開して表示する	print(*aList)
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
青い破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
正規分布にしたがってデータ列の値が発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
ダークシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
データ列を丸める	ds.round()
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
nから無限にカウントアップする	itertools.count(start=n)
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
データフレームのリストカラムが正規分布からどの程度、歪んでいるか確認する	df[aList].kurt()
option: ダークバイオレット色を用いる	color = 'darkviolet'
option: ペルー色を使う	color = 'peru'
パパイヤウィップ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
配列をビン数nを用いてビン分割する	pd.cut(aArray, n)
option: グラフの色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
option: ハニーデュー色を用いる	color = 'honeydew'
配列から重複を除いた配列を作る	np.unique(aArray)
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
色付きの点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
プロットのパレットを色差別なくする	sns.set(pallete='colorblind')
ヒストグラムの色をベージュに指定する	plt.hist(データ列, color='beige')
縦棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
八進文字列を整数にする	int(s, 8)
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
データフレームの中に文字列が含まれるか調べる	df.isin([value])
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
option: 丸マーカーを加える	marker = 'o'
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
エクセルファイルファイルからnという名前のシートを読む	pd.read_excel(filename, sheet_name=n)
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ヒストグラムをダークカーキ色を用いて描画する	plt.hist(データ列, color='darkkhaki')
確率的勾配降下で回帰分析をする	model = sklearn.linear_model.SGDRegressor()
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
ベクトルの最大値を求める	np.max(aArray)
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
MeanSquaredErrorを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図をrgbの丸マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: BOM付きを使用する	encoding = 'utf_8_sig'
日付データの年数	aDate.year
nプラスn2を算出する	n + n2
データフレームの行がnの行を抽出する	df.loc[n]
折れ線グラフの右三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
predicateFuncがTrueとなるイテラブルの要素を求める	itertools.takewhile(predicateFunc, iterable)
マップの項目名の値を見る	aDict[key]
Pandasでデータフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
折れ線グラフの色を深紅に指定する	plt.plot(データ列x, データ列y, color='crimson')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: パールバイオレットレッドにグラフの色を指定する	color = 'palevioletred'
option: 色をダークマゼンタに設定する	color = 'darkmagenta'
データフレームのpercentパーセンタイルを求める	df.quantile(percent/100)
実行環境の名前を知る	sys.platform
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
最後の部分文字列で文字列を分割する	s.rpartition(sub)
データ列の推移を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
真上位集合か	aSet > aSet2
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
既存のファイルをSJISを使って追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
モデルの当てはまりの良さを算出する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
列リスト	df.info()
カラムの値は未入力値か調べる	ds.isna()
カウンタをリストに変換する	list(aCounter)
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
n進数文字列を整数にする	int(s, n)
縦棒グラフをブラック色として描画する	plt.bar(データ列x, データ列y, color='black')
option: スレートブルー色を使う	color = 'slateblue'
整数nの二進数表現	bin(n)
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
標準出力を使う	sys.stdout
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームを小さい順に列によってソートする	df.sort_values(by=column, ascending=True)
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
グレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
色付きの点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
縦棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
データフレームの重複していない行を取り出す	df[not df.duplicated(keep=False)]
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
データフレームを列によってグループ化し、記述統計量を求める	df.groupby(column).describe()
ヒストグラムの色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
全空白文字	string.whitespace
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
文字列TSVからn番目の列をインデックスにしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
カラムを小数点以下n桁で四捨五入する	ds.round(n)
nが一桁の整数か調べる	0 <= n <= 9
双方向キューが空でないかどうか調べる	len(deq) != 0
カウンタのインターセクション演算する	aCounter & aCounter2
グループ化してデータフレームの散布図を縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
rgbの右三角マーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのリスト列の欠損値を最大値にセットする	df[aList].fillna(df[aList].max())
文字列の両端から部分文字列を除く	s.strip(sub)
ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
配列と数列についての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
データフレームを破壊的に降順に'A'列によって並べる	df.sort_values(by='A', ascending=False, inplace=True)
nのn2乗を求める	n ** n2
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
nがn2の倍数でないか調べる	n % n2 != 0
データフレームを列名リストの値でグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
折れ線グラフを赤い実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ヒストグラムの色をアクアに変更する	plt.hist(データ列, color='aqua')
マッピングに要素を項目名として加える	aDict[key] = element
棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
２つのカウンタのいずれかに含まれるデータを求める	aCounter | aCounter2
配列を分割する	pd.cut(aArray, aList)
ふたつのマッピングを合体する	aDict | aDict2
ユーザが整数を入力する	int(input())
全要素が初期値の行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
行列をフラットにする	aArray.flatten()
10を底とする対数	math.log10(x)
option: シルバーを使う	color = 'silver'
データフレームから列を一つだけ選択する	df[[column]]
黒いダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
実数が有限か	math.isfinite(x)
PandasでUNIX秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: 紺色を使う	color = 'darkblue'
縦棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
文字列を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
option: 色を茶色に変更する	color = 'brown'
双方向キューに数値をエンキューする	deq.appendleft(element)
日付データが火曜日	aDate.weekday() == 1
option: グラフの色をダークオリーブグリーンにセットする	color = 'darkolivegreen'
折れ線グラフの色をロイヤルブルーにする	plt.plot(データ列x, データ列y, color='royalblue')
多次元データを特異値分解としてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: フォントの色をサーモンに指定する	color = 'salmon'
散布図のマーカーを△にする	plt.scatter(データ列x, データ列y, marker='^')
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
パレットトルコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
実数を十の位で四捨五入する	round(x, -1)
符号なし８ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.uint8)
option: 色をスラグレーに設定する	color = 'slategray'
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
表データを破壊的に列によってで並べる	df.sort_values(by=column, inplace=True)
データフレームをJSONLファイルに書き込む	df.to_excel(filename)
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
赤い一点鎖線としてデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
n割るn2を求める	n / n2
二つの集合の差集合	aSet.difference(aSet2)
フクシア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
イテラブルを文字列に変換して、'改行を用いて結合する	'\n'.join(map(str, iterable))
ベクトルの要素ごとの積を求める	np.multiply(aArray, aArray2)
文字列を黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
浮動小数点数の最小値を求める	sys.float_info.min
リストの重複を取り除く	sorted(set(aList), key=aList.index)
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
有理数モジュールを使う	import fractions
線グラフの色を淡いピンク色にセットする	plt.plot(データ列x, データ列y, color='lightpink')
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムの色をパープルにセットする	plt.hist(データ列, color='purple')
xが1もしくは2か調べる	x == 1 or x == 2
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
横棒グラフをダークブルー色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
△マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ゲインズボロにヒストグラムの色を指定する	plt.hist(データ列, color='gainsboro')
ヒストグラムの色をライトイエローにセットする	plt.hist(データ列, color='lightyellow')
数列を箱ひげ図にする	plt.boxplot(データ列)
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
データフレームの数値をまとめて丸める	df.round()
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
表データを各列毎にグループ分けして、列の最大値を求める	df.groupby(column)[column2].max()
リストとリストについての散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
グラフのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
リストが空でないかどうか調べる	len(aList) != 0
option: 淡いピンク色色を使用する	color = 'lightpink'
option: シアン色を用いる	color = 'cyan'
データ列とリストについて散布図を描画して、マーカーを菱形にセットする	plt.plot(データ列x, データ列y, marker='D')
文字列中の部分文字列を文字列に全て置換する	s.replace(sub, newsub)
ハニーデュー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
最初のカテゴリーを除外してデータフレームの列をダミー変数にする	pd.get_dummies(df[column], drop_first=True)
配列と配列についての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムの色をグリーンに変更する	plt.hist(データ列, color='green')
データフレームをグループ化しそれぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
カウンタのそれぞれの項目をその出現回数だけ列挙する	aCounter.elements()
配列と数列について散布図をプロットして、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームの複数のカラムを並べて箱ヒゲ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
データフレームのリスト列の欠損値をxで埋める	df[aList].fillna(x)
フクシア色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
プロットの色をパステル調にする	sns.set(pallete='pastel')
色付きの破線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
nの無限数列	itertools.repeat(n)
二進文字列をbytesizeバイトのバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ダークオレンジ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
rgbの大バツマーカーを数列と数列の散布図に描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ふたつの集合がセットと互いに素か	aSet.isdisjoint(aSet2)
ネイビー色としてヒストグラムを描画する	plt.hist(データ列, color='navy')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
切片なしの線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
列をビン分割する	pd.cut(ds, aList)
option: ミディアムスレートブルーにグラフの色を変更する	color = 'mediumslateblue'
ヒストグラムを描画する	plt.hist(データ列)
option: 紺碧を使う	color = 'azure'
シーケンスと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームを丸めて整数にする	df.round().astype(int)
option: フォントの色をスカイブルーに設定する	color = 'skyblue'
ベクトルの演算を行う	import numpy as np
ダークマゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
線グラフをレベッカパープル色を使って描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
ダークグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
タイムスタンプデータにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
option: インディアンレッドにグラフの色をする	color = 'indianred'
黒い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
文字列の開始位置番目と終了位置番目の間に部分文字列がないか判定する	s.find(sub, start, end) == -1
データフレームの列名一覧を使う	df.columns
リストとイテラブルの散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
四分位数でデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
タイムスタンプデータをISO8601書式の文字列に変換する	aDatetime.isoformat()
データフレームを散布図でプロット化し、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
配列とリストについて散布図を描画し、文字列という補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
文字列に列を変換して、部分文字列で結合する	sub.join(map(str, iterable))
本日の日付時刻を求める	datetime.datetime.today()
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
MSDとして多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
option: コーラル色を用いる	color = 'coral'
バイアスなしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
セットに要素を追加する	aSet.add(element)
option: ラベンダーを使う	color = 'lavender'
ダークシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
日付時刻データの年数	aDatetime.year
ヒストグラムの色をダークスレートブルーにセットする	plt.hist(データ列, color='darkslateblue')
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=column)
データフレームのカラムの中にいくつNaNが存在するかカウントする	df[col].isna().sum()
列でデータフレームをグループ化し、記述統計量を求める	df.groupby(column).describe()
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
線グラフを点線にする	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: セパレータをタブにする	sep = '\t'
最大値でデータフレームのリストカラムの未入力値を補う	df[aList].fillna(df[aList].max())
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
回数を制限して文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub, n)
option: フォントの色をライトスチールブルーに指定する	color = 'lightsteelblue'
文字列がリストに含まれるか調べる	element in aList
行列から重複を除いた配列を作る	np.unique(aArray)
ゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
ファイルパスをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
散布図をライトスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ファイル名がTSVファイルかどうか調べる	filename.endswith('.tsv')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
黒い三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
リストをビン数nでビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
ヒストグラムの色をサーモンに変更する	plt.hist(データ列, color='salmon')
等差数列から乱数を発生させる	random.randrange(start, end, step)
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
FIXME:カテゴリーデータを出現頻度順に並べる	df['A'].value_counts().sort_index().index
正弦	math.sin(x)
偽	False
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
option: カンマを区切り記号で用いる	sep = ','
option: フォントの色をミディアムブルーに変更する	color = 'mediumblue'
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ファイルパスを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
データフレームはどの程度、分散しているか調べる	df.var()
実数の複素数を求める	complex(x)
option: バイオレット色を使う	color = 'violet'
データ列は何秒か確認する	ds.dt.second
データフレームを各列毎にグループ化し、列の平均値を求める	df.groupby(column)[column2].mean()
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
リストの末尾にリストを展開する	aList.extend(aList2)
option: カラムの名前を連番に指定する	header = None
TSVファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
xでデータフレームの未入力値を埋める	df.fillna(x)
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
文字列の右端から部分文字列を除く	s.rstrip(sub)
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
組の各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
昇順にデータフレームを複数の列によって整列する	df.sort_values(by=column, ascending=True)
データフレームの重複した行を数える	df.duplicated().sum()
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
option: 青紫色を用いる	color = 'violet'
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
キューの末尾に要素を入れる	deq.append(element)
ヒストグラムを白色を使って描画する	plt.hist(データ列, color='white')
オブジェクトが無限に続くイテラブルを求める	itertools.repeat(element)
折れ線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
タプルの要素を小さい方から並べる	sorted(aTuple, reverse=False)
小数点数以上の最小の整数	math.ceil(x)
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
組をn回連結する	aTuple * n
データ列を中央値でビンニングする	pd.qcut(ds, 2)
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
リストのオブジェクトが最初に見つかるインデックスを使う	aList.index(element)
現在は何分か知る	datetime.date.today().minute
データフレームのリスト列の欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
散布図の四角印を赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
日付データの月数	aDate.month
一点鎖線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
year年month月day日のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
散布図に三角印を加える	plt.scatter(データ列x, データ列y, marker='^')
変数について数式の微分を求める	sympy.diff(e, z)
標準入力から1行改行なしで読む	sys.stdin.readline().rstrip()
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
クリムゾン色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
option: スラッシュをセパレータで使う	sep = '/'
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
データフレームから列を一つ選択する	df[[column]]
散布図に黒い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: グラフの色をマルーンに指定する	color = 'maroon'
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
option: 青緑色を用いる	color = 'teal'
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
エクセルファイルファイルから全てのシートを読む	pd.read_excel(filename, sheet_name=None)
ヒストグラムの色をブラウンに変更する	plt.hist(データ列, color='brown')
文字列の中のパターンによるすべてのマッチを見る	re.findall(pattern, s)
線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: ダークスラテグレーを使う	color = 'darkslategray'
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ふたつのマップを結合する	aDict | aDict2
データフレームを関数によってまとめた表	df.groupby(関数)
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgray')
列の文字列を欠損値にする	ds.replace(s, np.nan)
ドジャーブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
書式をargsを引数としてフォーマットする	formatText.format(*args)
赤い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
散布図にrgbの左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
プロットを描く準備をする	import matplotlib.pyplot as plt
パウダーブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
nの十六進文字列	hex(n)[2:]
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
２つのリストからマップを作る	dict(zip(aList, aList2))
データフレームを複数の列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
両端キューの末尾を見る	deq[-1]
option: リネンにフォントの色を指定する	color = 'linen'
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
オブジェクトがプロパティを持つかどうか調べる	hasattr(obj, プロパティ名)
散布図をペルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='peru')
配列の行ごとの最小値	np.min(aArray, axis=1)
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
文字列の左側から部分文字列を探す	s.find(sub)
散布図をオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='orange')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ライム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
ブースティングとしてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
option: ダークカーキを使う	color = 'darkkhaki'
新しい線形モデルを用意する	model = sklearn.linear_model.LinearRegression()
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
nとn2の積を計算する	n * n2
標準出力を	sys.stdout
シーグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='seagreen')
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
ファイルから1バイト、読み込む	f.read(1)
ファイルからベースファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
辞書順で文字列が文字列より後かどうか確認する	s > s2
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
文字列の中のASCII限定として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
縦棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
option: ミディアムブルーを使う	color = 'mediumblue'
リストの文字列が最初に見つかる場所を使う	aList.index(element)
n個分キューの値を左にローテンションする	deq.rotate(-n)
四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
全句読点文字	string.punctuation
整数nがセットのどれかか調べる	n in aSet
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
小さい順に破壊的にデータフレームを列によってソートする	df.sort_values(by=column, ascending=True, inplace=True)
オールドレース色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
文字列の右端から改行を除く	s.rstrip('\n')
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
円グラフの特定の要素を目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
数値をアンダーライン付き化する	f'\033[4m{value}\033[0m'
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
数列の変遷を折れ線グラフとして可視化する	plt.plot(range(len(データ列)), データ列)
双方向キューの要素を右にn個分ローテンションする	deq.rotate(n)
タプルをカンマ区切りで表示する	print(*aTuple, sep=',')
小数点数の自然対数	math.log(x)
散布図をロイヤルブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='royalblue')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
ライトサーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
カテゴリデータを連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ディムグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームから型リストのデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
色付きの一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームを'A'列で昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
リストとイテラブルの散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
マッピングをコピーする	dict(aDict)
文字列の大文字小文字を入れ替える	s.swapcase()
プラム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
データフレームのカラムは何秒か調べる	df[col].dt.second
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
日付時刻データが木曜日かどうか確認する	aDatetime.weekday() == 3
データフレームを未入力値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
データフレームのリスト列の中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
データフレームの全カラムの相関をグラフ化する	sns.pairplot(df)
JSON文字列をデータに変換する	json.loads(jsonString)
配列とリストについて散布図をプロットし、、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームのリストカラムの中に日付データと日付データが含まれるか調べる	df[aList].isin([value, value2])
折れ線グラフを青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
入力から二つの整数を読む	A, B = map(int, input().split())
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
折れ線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
横棒グラフをプラム色を用いて描画する	plt.barh(データ列x, データ列y, color='plum')
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
イテラブルとリストの散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
青い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
データフレームを列の値によってグループ化して、グループの分散を求める	df.groupby(column).var()
option: シャルトリューズにフォントの色を指定する	color = 'chartreuse'
グラフのx座標に説明を付ける	plt.xlabel('x軸ラベル')
option: フォントの色をミディアムスレートブルーにセットする	color = 'mediumslateblue'
数値の符号をコピーにする	math.copysign(x, x2)
データ列の欠損値を後の行の値にする	ds.fillna(method='bfill')
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
データフレームの列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
部分集合かどうか	aSet.issubset(aSet2)
双方向キューのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
xのハッシュ値を計算する	hash(x)
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
茶色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
文字列がリストの要素でない	element not in aList
黒い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
トマト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
縦棒グラフをフォレストグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='forestgreen')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
今日が何月か知る	datetime.datetime.today().month
データフレームから重複したデータを残さず、削除する	df.drop_duplicates(keep=False)
option: マーカーを▲に設定する	marker = '^'
偽陰性を抑えたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
折れ線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
シャルトリューズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
書き込みできるようにファイルを開く]	open(filepath, mode='w')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
イテラブルとリストについて散布図を描いて、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
本日が何曜日か知る	datetime.datetime.today().weekday()
タプルを配列に変換する	np.array(iterable)
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
option: シルバー色を用いる	color = 'silver'
変数の値をスワップする	x, y = y, x
タプルの最初を取り除く	aTuple[1:]
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
グラフのテーマを淡くする	sns.set(pallete='muted')
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
nが-9以上、9以下か	-9 <= n <= 9
option: ダークサーモンに色を設定する	color = 'darksalmon'
実数の逆双曲線正接	math.atanh(x)
データフレームを各列毎にグループ分けして、列の最大値を求める	df.groupby(column)[column2].max()
線グラフの色を赤にセットする	plt.plot(データ列x, データ列y, color='red')
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
マッピングをJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
データフレームを'A'列と'B'列によって小さい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームのリストカラムの中央値	df[aList].median()
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
マップの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
データフレームを各列毎に集約して、カラムの合計を求める	df.groupby(column)[column2].sum()
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
option: ターコイズにフォントの色を設定する	color = 'turquoise'
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
リストと数列について散布図をプロットし、、マーカーをクロスに変更する	plt.plot(データ列x, データ列y, marker='x')
文字列は文字列より辞書順で後か調べる	s > s2
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
全ての句読点文字	string.punctuation
小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
ヒストグラムの色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
ヒストグラムを紺碧色として描画する	plt.hist(データ列, color='azure')
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
散布図を右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
回帰分析をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: ディムグレーにフォントの色をする	color = 'dimgrey'
JSON形式の文字列を辞書にする	json.loads(jsonString)
双方向キューの先頭から要素を取り出す	deq.popleft()
データフレームのカラムがxより大きくx2より少ない行を選ぶ	df[(x < df[column]) & (df[column] < x2)]
option: 整数型を用いる	dtype = np.int
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ライトスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
2つのデータフレームを横向きにマージする	pd.merge(df, df2)
option: ポイント印を描画する	marker = '.'
データフレームの数値を一度に四捨五入する	df.round()
折れ線グラフの菱形印の太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームをグループ化し、列に対し分散を計算する	df.groupby(column)[column2].var()
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
線グラフをライトサーモン色として描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
組の最後からn番目以前の部分を得る	aTuple[:-n]
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: グラフの色をアクアにセットする	color = 'aqua'
リストのイミュータブルな集合を準備する	frozenset(iterable)
列によってデータフレームをソートし、、下位n件を取り出す	df.sort_values(columns).tail(n)
nがn2より小さいか	n < n2
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
option: 白色を使う	color = 'white'
今日の曜日を整数で使う	datetime.datetime.today().weekday()
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
データ列の尖度	ds.skew()
データフレームの最後	df.tail()
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
縦棒グラフをダークグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgreen')
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
nからn2の範囲	range(n, n2)
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
オブジェクトをユーザ向けの文字列に変換する	str(obj)
'A'列でデータフレームを破壊的に小さい順にソートする	df.sort_values(by='A', ascending=True, inplace=True)
プロットの色を明るくする	sns.set(pallete='bright')
円グラフとしてデータ列の割合を図示する	plt.pie(データ列, startangle=90)
option: 貝殻にグラフの色を変更する	color = 'seashell'
option: コーンズシルク色を使用する	color = 'cornsilk'
サドルブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
折れ線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
ミディアムブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
数式を簡略化する	sympy.sympify(e)
nが5の倍数	n % 5 == 0
エクセルデータファイルを読み込む	pd.read_excel(filename)
正規分布として乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
文字列の長さ	len(s)
option: エンコーディングをUTF8に変更する	encoding = 'utf-8'
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
ファイルパスをオープンして]読み込みストリームを見る	open(filepath, mode='r')
文字列を正規表現で分割する	re.split(pattern, s)
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
列を等間隔でn個にビン分割する	pd.cut(ds, n)
データフレームをインポートする	import pandas as pd
実数の整数部	math.modf(x)[1]
行列の最小を使う	np.min(aArray)
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
データフレームのカラムの年を使う	df[col].dt.year
データフレームの未入力値をxで埋める	df.fillna(x)
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
▼マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
区間数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
データ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
散布図のマーカーを▽印にする	plt.scatter(データ列x, データ列y, marker='v')
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
データフレームの中に文字列と文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
列'A'と列'B'をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
集合のすべての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
option: 配列のデータ型を指定する	dtype = np.int16
n個の要素があるリスト	[element] * n
デピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: 深さを制限する	maxdepth = n
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図に黒いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
スクリプトファイルのパス	os.path.abspath(__file__)
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
プロットのx軸を対数目盛に変更する	plt.xscale('log')
ミスティローズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
表データを破壊的に複数の列を用いて小さい順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
リストと配列の散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
配列をビン数nでビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
option: 色をオレンジレッドに指定する	color = 'orangered'
縦棒グラフをピーチパフ色を用いて描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフの色をミディアムパープルに指定する	plt.plot(データ列x, データ列y, color='mediumpurple')
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
データフレームを列で集計して、列の要約統計量を求める	df.groupby(column).describe()[column2]
入力から2つの文字列を読む	A, B = map(str, input().split())
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
アヤメのデータセットをロードする	sns.load_dataset('iris')
ファイルのファイルサイズ	os.path.get_size(filepath)
配列の列	aArray[:, 列番号]
カラーバーを水平でつける	plt.colorbar(orientation='horizontal')
プロットのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
散布図を左三角印を使って描画する	plt.scatter(データ列x, データ列y, marker='<')
option: ミスティローズにグラフの色を設定する	color = 'mistyrose'
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
散布図でデータフレームを見、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ペルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
空の勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
Pandasで、フォーマットでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データ列の中にある文字列と文字列の合計を求める	ds.isin([value, value2]).sum()
青い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
中央値でデータフレームの欠損値を補う	df.fillna(df.median())
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
データフレームの列を千の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
スプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
パウダーブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
データ列の曜日数	ds.dt.dayofweek
部分文字列が文字列の開始位置以降に含まれないか確認する	s.find(sub, start) == -1
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ゴールド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
リストが空か調べる	len(aList) == 0
カラーバーをプロットする	plt.colorbar()
option: ライトブルーを使用する	color = 'lightblue'
ヒストグラムの色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
プロットをイイ感じに変更する	sns.set()
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
ロバストな重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
option: 色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
データフレームをカテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
JSONフォーマットのfをデータにする	json.load(fin)
棒プロットの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
縦棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
ファイルをSJISを使って開く]	open(filepath, encoding='shift_jis')
リストとイテラブルについて散布図を描画して、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
配列の行ごとの平均値	np.mean(aArray, axis=1)
項目名ワード引数でマッピングに更新する	aDict.update(**kwargs)
列にイテラブルを続けた列	itertools.chain(iterable, iterable2)
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
データフレームを列名リストの値ごとに集計し、列挙する	[(name, group) for name, group in df.groupby(columns)]
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
option: 文字コードを文字コードtextに指定する	encoding = text
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
文字列の右側からタブを消す	s.rstrip('\t')
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
乱数で要素を埋めた配列	np.random.random(N)
リストとリストについての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 大バツ印を用いる	marker = 'X'
アクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ミディアムシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
option: 読み込まないフッタをnにする	skipfooter = n
各列毎にデータフレームをグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
列を出現回数してカウンタを更新する	aCounter.update(iterable)
文字列がPythonのキーワードか調べる	keyword.iskeyword(s)
タイムスタンプデータが土曜日かどうか調べる	aDatetime.weekday() == 5
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
タプルの中の最小値	min(aTuple)
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
option: フォントの色をアイボリーに設定する	color = 'ivory'
配列とリストについての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
グラフのパレットを明るくする	sns.set(pallete='bright')
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
文字列を紫色にする	f'\033[35m{value}\033[0m'
データフレームの最頻値を求める	df.mode()
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
横棒グラフをターコイズ色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
リストと数列についての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
柱状図としてリストを可視化する	plt.hist(データ列)
プロットのx軸とy軸の比率を等しくする	plt.axis('equals')
文字列内にアルファベットが含まれる	any(c.isalpha() for c in s)
0からN未満までの配列	np.arange(N)
option: マーカーの色をホワイトにする	markerfacecolor = 'white'
カラムの欠損値を最大値に設定する	ds.fillna(ds.max())
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
縦棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームをグループ列ごとに色付けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
辞書から項目名の値を参照する	aDict.get(key)
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
xとyの商と余りを同時に算出する	divmod(x, y)
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
縦棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
ファイルパスからフォルダ名取り出す	os.path.dirname(filepath)
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームの中の列を等間隔でn個にビンニングする	pd.cut(df[col], n)
文字列の接尾辞から部分文字列を除く	s.removesuffix(sub)
横棒プロットを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
プロットからグリッド線を消す	plt.grid(False)
クラス分類をブースティングでする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データフレームを'A'列で整列する	df.sort_values(by='A')
グラフのフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
日付データにn日を足す	aDate + datetime.timedelta(days=n)
ダーク・スラテグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
セットをタプルに変換する	tuple(aSet)
列名リストによってデータフレームを整列し、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームのリストカラムを100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
データフレームをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
プロットの名称を設定する	plt.title('グラフの名称')
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
改行する	print()
文字列をユニコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
二つの文字列を順にプリントする	print(value, value2)
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
日付時刻データは何年か知る	aDatetime.year
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームのカラムの空文字を未入力値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
文字列の中のケースを無視してパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
イテラブルから重複なくn個選ぶ	random.sample(iterable, k=n)
変数について数値の積分を求める	sympy.integrate(e, z)
インデックスによって昇順にデータフレーム全体をソートする	df.sort_index(ascending=True)
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
ヒストグラムの色をミディアムスレートブルーに指定する	plt.hist(データ列, color='mediumslateblue')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
データフレームを列の値毎にグループ化して各グループごとの個数を求める	df.groupby(column).count()
散布図をスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='skyblue')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
配列は何のデータ型か調べる	aArray.dtype()
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
カウンタの交わり演算する	aCounter & aCounter2
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
散布図を耐火レンガ色を使って描画する	plt.scatter(データ列x, データ列y, color='firebrick')
配列を平坦化する	aArray.flatten()
最小値でデータフレームのNaNを埋める	df.fillna(df.min())
折れ線グラフの色を暗い赤に指定する	plt.plot(データ列x, データ列y, color='darkred')
キューの要素を左にn個分ローテンションする	deq.rotate(-n)
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
配列の列ごとの合計値	np.sum(aArray, axis=0)
option: SJISを使用する	encoding = 'shift_jis'
データフレームの列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
リストを文字列リストに変換してカンマによって連結する	','.join(map(str, iterable))
n回文字列が続くイテラブルを得る	itertools.repeat(element, n)
オブジェクトは整数	isinstance(obj, int)
データ列のpercent分位数	ds.quantile(percent/100)
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
カウンタを高頻出方から列挙する	aCounter.most_common()
option: シエナにフォントの色を設定する	color = 'sienna'
フォーマットを用いてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
JSON形式の文字列をデータにする	json.loads(b.decode('unicode-escape'))
行列の列ごとの標準偏差を計算する	np.std(aArray, axis=0)
option: グレーにグラフの色を指定する	color = 'gray'
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを表示するときデータフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
option: マゼンタを使う	color = 'magenta'
データフレームから指定された列を抽出する	df[[column]]
散布図をホワイトスモーク色として描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
赤い右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をライトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: オリーブ色を使用する	color = 'olive'
option: バイオレット色を用いる	color = 'violet'
既存の行列を元に全要素が0の行列を初期化する	np.zeros_like(aArray)
ダークマゼンタ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
暗い赤色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
バリーウッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
本日の年	datetime.datetime.today().year
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
折れ線グラフの△マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
日付時刻データからn分減算する	aDatetime - datetime.timedelta(minutes=n)
表示できる行数を変更する	pd.set_option('display.max_rows', n)
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームの中でカラムに重複があるか調べる	df.duplicated(subset=column)
データフレームの列を1000の位で丸めて整数型にする	df[col].round(-3).astype(int)
実行をエラーとして終了する	sys.exit(1)
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
２つの変数を順に表示する	print(value, value2)
散布図に黒い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図を黒い星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
エンコーディングで文字列をバイト列に変換する	s.encode(encoding=encoding)
散布図に青いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
カテゴリ別で色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列をセパレータを用いて分割して、列挙する	s.split(sep)
データフレームを列にグループ分けして、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
グラフの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
昇順に破壊的に列によってデータフレームを並べる	df.sort_values(by=column, ascending=True, inplace=True)
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
データフレームをJSONLファイルに保存する	df.to_excel(filename)
文字列を区切りで区切って文字列リストに変換する	s.split(sep)
散布図をダークバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: バッファのサイズを設定する	buffering = 4096
配列の合計値を求める	np.sum(aArray)
線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
数値を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
行列の次元を変形する	aArray.reshape(行数, 列数)
実線を用いて折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
散布図を黒い左三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='<', c='k')
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを列によってグループ化して、合計を算出する	df.groupby(column).sum()
辞書の値に要素は含まれていない	element not in aDict.values()
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
折れ線グラフの左三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
整数nが配列の一つである	n in aArray
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: 色をライトグレーに設定する	color = 'lightgrey'
文字列を別の文字列によって置き換える	s.replace(sub, newsub)
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
n個にリストを分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
データ列を横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
列毎にデータフレームをグループ分けして、それぞれのグループごとの合計を求める	df.groupby(column).sum()
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
option: グラフの色をディムグレーに設定する	color = 'dimgray'
データフレームから最初の列を除く	df[df.columns[1:]]
option: ダークスレートブルーを用いる	color = 'darkslateblue'
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
文字列をコロンで区切り、、列挙する	s.split(':')
ビン数nとして配列をビン分割する	pd.cut(aArray, n)
スカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
辞書の項目名に対応した値	aDict.get(key)
文字列は全て数値か調べる	s.isnumeric()
リストの長さだけ繰り返す	range(len(aList))
データフレームを各列毎にグループ化して、列の合計を算出する	df.groupby(column)[column2].sum()
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図の星マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
折れ線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
最大長を指定して双方向キュー	collections.deque(maxlen=n)
ミディアムバイオレットレッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
ASCII限定として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
オブジェクトが関数か	callable(obj)
オプションで出力先を標準出力にセットする	file = sys.stdout
折れ線グラフの下三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
JSONファイルのファイル入力を辞書にする	json.load(fin)
線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
実数を複素数にする	complex(x)
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
日付データが日付データと同時か調べる	aDate == aDate2
ファイルを改行除外して一行ずつ読み込む	f.readline()
バイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
タプルの最後のn要素を取り除く	aTuple[:-n]
option: ダークカーキ色を用いる	color = 'darkkhaki'
option: ブルーバイオレットにグラフの色を設定する	color = 'blueviolet'
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
二つのデータフレームをカラムをキーにして右結合する	pd.merge(df, df2, on=column, how='right')
ベクトルの合計値	np.sum(aArray)
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
カウンタの正の数のみ残す	+aCounter
ふたつの関係が真サブセットか	aSet < aSet2
散布図をクリムゾン色を用いて描画する	plt.scatter(データ列x, データ列y, color='crimson')
イテラブルの重複組み合せ	itertools.combinations_with_replacement(iterable, n)
リストの四分位を作図する	plt.boxplot(データ列)
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
辞書のコピー	dict(aDict)
option: フォントの色を濃いシアンに設定する	color = 'darkcyan'
環境のバイトオーダを知る	sys.byteorder
データフレームの行を範囲指定して選択する	df[start:end]
折れ線グラフをダーク・スラテグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
双方向キューから数値を取り出す	deq.remove(element)
ティール色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データ列を用いる	import pandas as pd
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列x, データ列y, color='midnightblue')
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
option: ダークグリーン色を使用する	color = 'darkgreen'
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
コードポイントの最大値を調べる	sys.maxunicode
英字の小文字を全て使う	string.ascii_lowercase
文字列を部分文字列で二つに区切って、前半の文字列を使う	s.partition(sub)[0]
データフレームとデータフレームのカラムを横方向につなぐ	pd.concat([df, ds], axis=1)
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
数式の平方根を算出する	sympy.sqrt(e)
タプル内の要素は少なくとも一つ真かどうか調べる	any(aTuple)
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
ルート	math.sqrt(x)
再帰の上限を上げる	sys.setrecursionlimit(1000000)
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
セットをイミュータブルにする	frozenset(aSet)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
折れ線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
option: 区切りを改行にする	sep = '\n'
文字列は印字できるか	s.isprintable()
カウントプロットをプロットする	sns.countplot(x='列名', data=df)
データフレームを列で昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: シスル色を使う	color = 'thistle'
ライトスレイグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
左三角マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
文字列を文字リストに変換する	list(s)
カウンタ同士で和集合	aCounter | aCounter2
要素ひとつのタプル	(element,)
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
折れ線グラフをフォレストグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='forestgreen')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
イテラブルを文字列に変換して、部分文字列を用いて結合する	sub.join(map(str, iterable))
行列間の各要素の最大公約数を求める	np.gcd(aArray, aArray2)
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
ダークグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
多次元データをt分布型確率的近傍埋め込み法として淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
rgbの右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
パレットトルコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
オーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
option: グラフの色をライトブルーに指定する	color = 'lightblue'
リストを縦軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
フローラルホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
変数について数式の積分を算出する	sympy.integrate(e, z)
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
文字列を空白で区切る	s.split()
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightgreen')
イテラブルからカウンタを作る	collections.Counter(iterable)
nとn2の差を求める	n - n2
配列とデータ列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
option: ナバホホワイト色を用いる	color = 'navajowhite'
データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
変数を青色にする	f'\033[34m{value}\033[0m'
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
折れ線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
左三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
リストをビン分割する	pd.cut(aList, aList)
空白で文字列を右から区切る	s.rsplit()
連番の配列の作成する	np.arange(開始値, 終了値, 等差)
JSONを使う	import json
ゴールド色としてヒストグラムを描画する	plt.hist(データ列, color='gold')
辞書のキーの一覧を得る	aDict.keys()
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
２つの文字列は同じでない	s != s2
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
空のマッピングを生成する	{}
デピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
データ列が何曜日か見る	ds.dt.weekday_name
平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
ピアソン相関係数で表データのリスト列の相関行列	df[aList].corr(method='pearson')
ファイルパスを書き込み用に文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
ミスティローズ色としてヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
列を十の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
辞書をJSONフォーマットのインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
日付時刻データからn日分、減らす	aDatetime - datetime.timedelta(days=n)
リストの推移を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
点線を用いて配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
組の平均値を求める	sum(aTuple)/len(aTuple)
配列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgray')
リストをカンマ区切りで表示する	print(*aList, sep=',')
0からnの範囲で	range(n)
デピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
リストの末尾に文字列を加える	aList.append(element)
列を周期的に繰り返す	itertools.cycle(iterable)
option: ライムにグラフの色を設定する	color = 'lime'
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
表データの先頭	df.head()
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
ドジャーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
'A'列の値によってデータフレームを集計し、、列挙する	[(name, group) for name, group in df.groupby('A')]
option: 回帰木の最大深さを設定する	maxdepth = n
リッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
文字列が組の要素でない	element not in aTuple
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
２つの実行結果を改行で区切って出力する	print(value, value2, sep='\n')
データフレームのpercent分位数を求める	df.quantile(percent/100)
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームを列の値で集約する	df.groupby(column)
文字列が文字列リストのいづれか調べる	s in aStringList
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
データフレームのリストカラムの正規分布に対する左右対称性	df[aList].kurt()
グリッド線	plt.grid(alpha=0.5)
折れ線グラフの▽マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
シエナ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
nがn2の倍数か調べる	n % n2 == 0
横棒グラフをライトイエロー色を使って描画する	plt.barh(データ列x, データ列y, color='lightyellow')
縦棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
カラムの要約統計量	ds.describe()
Pandasで、データ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ファイルを文字列の示す文字コードを用いて書き込み用に開く]	open(filepath, mode='w', encoding=s)
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
散布図をダークゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
文字列はタプルの要素か調べる	element in aTuple
実数の床を求める	math.floor(x)
データフレームから指定したデータ型の列名一覧を使う	df.select_dtypes(型).columns
要素は集合に含まれるか判定する	element in aSet
ヒストグラムを横に並べてプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームを'A'列と'B'列を用いて昇順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
マッピングのキーとその値を列挙する	aDict.items()
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
標準エラーを	sys.stderr
配列とリストについての散布図にrgbの四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
オブジェクトのオブジェクト識別子	id(obj)
JSONLファイルにTSVファイルでデータフレームを保存する	df.to_csv(filename, sep='\t')
データフレームのどの値が最も現れるか確認する	df.mode()
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
青い▲印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategray')
option: マーカーをバツに変更する	marker = 'x'
nが奇数か調べる	n % 2 == 1
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
代数計算モジュールを使う	import sympy
数字を全部使う	string.digits
カラムでデータフレームをグループ化し、、標準偏差を求める	df.groupby(column).std()
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
縦方向に二つの表データを合体させる	pd.concat([df, df2])
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームのリスト列が正規分布からどれだけ、尖っているか見る	df[aList].skew()
1からnまでの整数リスト	list(range(1, n+1))
横棒グラフをミディアムスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
折れ線グラフの上三角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
小数点数を切り下げる	math.floor(x)
線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
要素が集合のメンバーでないか調べる	element not in aSet
横棒グラフをアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームのカラムが正規分布からどの程度歪んでいるか見る	df[col].kurt()
オブジェクトは関数か調べる	callable(obj)
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
データフレームを各列毎にグループ化し、列の標準偏差を計算する	df.groupby(column)[column2].std()
散布図を左三角マーカーを使用し、描画する	plt.scatter(データ列x, データ列y, marker='<')
マップのコピー	dict(aDict)
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
全要素を1で初期化した行列を作成する	np.ones(要素数, dtype=np.int)
棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
文字列は漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: 色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
option: フォントの色をアンティークホワイトに変更する	color = 'antiquewhite'
option: 色をダークオーキッドに変更する	color = 'darkorchid'
実数は有限か調べる	math.isfinite(x)
ファイルパスを文字列の示す文字コードで追加できるように開く]	open(filepath, mode='a', encoding=s)
option: ヘッダを自動的な連番に設定する	header = None
散布図をミディアムパープル色として描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
文字列がアスキー文字か調べる	s.isascii()
スノー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
ヒストグラムをディープスカイブルー色を用いて描画する	plt.hist(データ列, color='deepskyblue')
乱数シードをnで固定する	random.seed(n)
データフレームから重複する行を残さず、削除する	df.drop_duplicates(keep=False)
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームのカラムを百の位で丸めて、整数型にする	df[col].round(-2).astype(int)
プロットにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
predicateFuncを適用したとき真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
データフレームに重複があるか調べる	df.duplicated()
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
双方向キューの先頭	deq[0]
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
両端キューの先頭から要素を取り除く	deq.popleft()
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: のシートの名前をnamesに設定する	sheet_name = names
データフレームを丸めて、整数にする	df.round().astype(int)
option: バリーウッドに色を設定する	color = 'burlywood'
破壊的にデータフレームを列を用いてによってソートする	df.sort_values(by=column, inplace=True)
predicateFuncがTrueとなるイテラブルの部分を取り出す	itertools.takewhile(predicateFunc, iterable)
ファイルパスをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
日付データが日付データと同時	aDate == aDate2
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
シアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
グラフを色差別なくする	sns.set(pallete='colorblind')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
リストをカウンタに変換する	collections.Counter(iterable)
ダークスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ベクトルから重複を除いた行列を作成する	np.unique(aArray)
データ列の推移を赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
option: 色の透明度をセットする	alpha = 0.5
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
データフレームを列で並べ、下位n件を取り出す	df.sort_values(columns).tail(n)
文字列の大きさ	len(s)
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='turquoise')
option: フォントの色をライムに変更する	color = 'lime'
折れ線グラフを赤色を使って描画する	plt.plot(データ列x, データ列y, color='red')
十六進数字を全部使う	string.hexdigits
アリスブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
ライムグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
日付データが日付データより早いか調べる	aDate < aDate2
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
中央値でデータフレームのリスト列の未入力値を埋める	df[aList].fillna(df[aList].median())
データフレームをインデックスによって降順で並べる	df.sort_index(ascending=False)
縦棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
option: ベクトルのデータ型を指定する	dtype = np.uint8
折れ線グラフをパレットトルコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
列を百の位で四捨五入する	ds.round(-2)
空白文字を全部使う	string.whitespace
マッピングをソートしてJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
組を引数として展開して表示する	print(*aTuple, sep=',')
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
データフレームをグループ化して、ヒストグラムとして見る	sns.histplot(df, x='列名', hue='カテゴリ名')
二つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
option: ミントクリームに色を設定する	color = 'mintcream'
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
横棒グラフをミスティローズ色を使って描画する	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームのインデックスの名前をまとめて、nameからname2に変更する	df.rename(index={name: name2})
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
タブ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
1からNまでの行列を初期化する	np.arange(1, N+1)
日付を使う	import datetime
option: 印をバツに指定する	marker = 'x'
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
option: グラフの色をライトグリーンに指定する	color = 'lightgreen'
ライムグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
日付時刻データの日付	aDatetime.date()
文字列を最後の部分文字列で二つに分ける	s.rpartition(sub)
option: グラフの色をロイヤルブルーに変更する	color = 'royalblue'
黒いグリッド線を引く	plt.grid(color='k')
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
数で実数を割って、切り捨てる	x // y
折れ線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
ペールグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
year年のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
option: 青を用いる	color = 'blue'
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
データフレームの全カラムの散らばりをグラフ化する	sns.pairplot(df)
タプルからキーで指定された項目をポップする	aDict.pop(key)
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
乱数生成系列をnで固定する	random.seed(n)
乱数の配列	np.random.random(N)
折れ線グラフの丸印の色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: インディゴ色を使用する	color = 'indigo'
ガンマ関数の値	math.gamma(x)
データフレームから破壊的に重複するデータを落とす	df.drop_duplicates(inplace=True)
option: マーカーの色を赤にする	markerfacecolor = 'red'
列の欠損値を後の行の値に設定する	ds.fillna(method='bfill')
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
option: グラフの色をシエナに設定する	color = 'sienna'
散布図をブラウン色で描画する	plt.scatter(データ列x, データ列y, color='brown')
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ダークシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ケンドール順位相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='kendall')
option: UTF8を使う	encoding = 'utf-8'
文字列の中の複数行対応として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
縦棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
データ列の欠損値を最大値で置換する	ds.fillna(ds.max())
ふたつの集合の対称差集合を求める	aSet.symmetric_difference(aSet2)
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
縦棒プロットを描画し、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
多次元データを主成分分析を用いてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
文字列が全て十進数字	s.isdecimal()
データフレームの列の文字列で文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データを最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
半透明の実線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ホワイトスモーク色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
シーケンスとシーケンスを連結する	itertools.chain(iterable, iterable2)
option: グラフの色をグレーに変更する	color = 'gray'
option: フォントの色をイエローグリーンに変更する	color = 'yellowgreen'
ゼロ埋めされた行列を作成する	np.zeros(行数, 列数)
'A'列でで降順にデータフレームをソートする	df.sort_values(by='A', ascending=False)
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
二つのオブジェクトが同一参照か調べる	obj is obj2
線グラフの色をホワイトにセットする	plt.plot(データ列x, データ列y, color='white')
データフレームとデータフレームの列を横方向にくっつける	pd.concat([df, ds], axis=1)
半透明の点線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ふたつの集合は互いに素	aSet.isdisjoint(aSet2)
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをダークゴールデンロッド色を用いて描画する	plt.hist(データ列, color='darkgoldenrod')
列の名前のリスト	df.columns
線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ヒストグラムを一点鎖線で描く	plt.hist(データ列, linestyle='dashbot')
破線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
カウンタを低頻出な方からリストとして得る	aCounter.most_common()[::-1]
変数をシアンでプリントする	print(f'\033[36m{value}\033[0m')
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
n個の数値イテラブルを使う	range(n)
数値をシアン化する	f'\033[36m{value}\033[0m'
option: グラフの色をグレーに指定する	color = 'grey'
リストのn番目の要素を消す	del aList[n]
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
直前の値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(method='ffill')
シエナ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
散布図に黒いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームの列に重複があればマスクする	df.duplicated(subset=column)
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
値を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
箱ひげ図を２つ並べてプロットする	plt.boxplot([データ列, データ列])
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
最大値でデータフレームのリストカラムの欠損値を置き換える	df[aList].fillna(df[aList].max())
リストとリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
タプルからカウンタを用意する	collections.Counter(aDict)
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
プロットの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
クラスは名前付きタプルか調べる	issubclass(C, tuple)
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
TSVをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
データ列を度数分布図で可視化する	plt.hist(データ列)
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームのカラムの日を使う	df[col].dt.day
散布図のクロスマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
日付時刻データにn週間を加える	aDatetime + datetime.timedelta(weeks=n)
ライトシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: ダークオレンジ色を使用する	color = 'darkorange'
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
カウンタの値のカウント	aCounter[element]
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフをダークブルー色を使って描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: バツマーカーを用いる	marker = 'x'
折れ線グラフの三角印を赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
円グラフを真円にする	plt.axis('equals')
ダークバイオレット色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
ゼロ埋めした符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
散布図をライトサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
データフレームの列を四捨五入して整数型にする	df[col].round().astype(int)
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図に黒い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
パパイヤウィップにヒストグラムの色をする	plt.hist(データ列, color='papayawhip')
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
option: シーグリーンを使う	color = 'seagreen'
option: カーキ色を用いる	color = 'khaki'
オブジェクトにフィールドが存在する	hasattr(obj, プロパティ名)
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
整数nのビット長	n.bit_length()
文字列中にひとつでも非ASCII文字が含まれる	any(not c.isascii() for c in s)
データフレームの重複を確認する	df.duplicated()
折れ線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
最頻値でデータフレームの列の未入力値を埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームから列を２つだけ選択する	df[[column, column2]]
回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
等間隔の配列を初期化する＼	np.arange(開始値, 終了値, 等差)
二つのカウンタのいずれかに含まれるデータ	aCounter | aCounter2
option: 上三角マーカーを使う	marker = '^'
option: マゼンタにグラフの色を変更する	color = 'magenta'
nがn2よりも大きいか調べる	n > n2
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をドジャーブルーに変更する	plt.hist(データ列, color='dodgerblue')
丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o')
データフレームを列によって集約してグループの合計を求める	df.groupby(column).sum()
文字列が文字列より辞書順で後か調べる	s > s2
散布図に大バツマーカーを使用する	plt.scatter(データ列x, データ列y, marker='X')
線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
option: ピーチパフにグラフの色を変更する	color = 'peachpuff'
列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
カラムの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図を描画する	plt.scatter(データ列x, データ列y)
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
変数について数式の微分を行う	sympy.diff(e, z)
データフレームを列名リストによってソートする	df.sort_values(by=column)
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
変数が0に近づく際の数式の極限値を計算する	sympy.limit(e, z, 0)
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: ミスティローズを使う	color = 'mistyrose'
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
データ列が正規分布に従うか調べる	scipy.stats.shapiro(データ列)
データフレームの中央値	df.median()
データ列と数列について散布図をプロットし、、▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
Pythonパスのリストを知る	sys.path
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームのカラムの欠損値をメディアンで埋める	df[col].fillna(df[col].median())
ヒストグラムの色をイエローグリーンにする	plt.hist(データ列, color='yellowgreen')
ヒストグラムの色をインディゴにセットする	plt.hist(データ列, color='indigo')
リストが少なくともひとつ真	any(aList)
ヒストグラムをターコイズ色を用いて描画する	plt.hist(データ列, color='turquoise')
シーケンスのイミュータブルな集合を使う	frozenset(iterable)
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
バイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
黒い左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
リストとイテラブルについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
二つの文字列を順に表示する	print(value, value2)
複数の列によって破壊的にデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
現在が何秒か知る	datetime.date.today().second
データフレームで列とカラムの重複を削除する	df.drop_duplicates(subset=column)
エクセルデータファイルからを読み込む	pd.read_excel(filename)
option: 色をライムグリーンに設定する	color = 'limegreen'
追加モードとしてファイルをオープンする]	open(filepath, mode='a')
データフレームを散布図で見、、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームの列がxでない行をフィルタする	df[df[column] == x]
縦棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
x座標の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
要素が集合に含まれるか調べる	element in aSet
クラス分類をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
凡例をグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
Pandasで、フォーマットとしてデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
最小値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].min())
データフレームを昇順に二つの列でソートする	df.sort_values(by=['A', 'B'], ascending=True)
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの列を1000の位で四捨五入して整数型にする	df[col].round(-3).astype(int)
二つの文字列を文字列で区切って出力する	print(value, value2, sep=s)
データフレームの中に文字列が存在する	df.isin([value])
option: フォントの色をオリーブに設定する	color = 'olive'
データフレームのリストカラムの中の欠損値の合計をカウントする	df[aList].isna().sum()
青い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
列と列のデカルト積	itertools.product(iterable, iterable2)
文字列をカンマによって区切り、列挙する	s.split(',')
リスト中の最初の文字列を探す	aList.index(element)
rgbに棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
カラムの第二四分位数を求める	ds.median()
カウンタ同士で積集合演算する	aCounter & aCounter2
プロットを使う準備をする	import matplotlib.pyplot as plt
データ列の文字列長を列として求める	ds.str.len()
リストとデータ列についての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフを濃い青色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームのリストカラムの欠損値を前の行の値で埋める	df[aList].fillna(method='ffill')
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
数を小数点以下で四捨五入する	round(x, n)
オブジェクトがタプルクラスのインスタンスか調べる	isinstance(obj, tuple)
列の欠損値を最小値に設定する	ds.fillna(ds.min())
nがn2と等しいかどうか調べる	n == n2
カラムのどの値が頻出か見る	ds.mode()
数値を簡略化する	sympy.sympify(e)
赤い上三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ヒストグラムをハニーデュー色として描画する	plt.hist(データ列, color='honeydew')
棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
折れ線グラフをアリスブルー色を使って描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: グラフの色を茶色に変更する	color = 'brown'
カテゴリで色分けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
Pandasでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
option: ゴーストホワイトにフォントの色を指定する	color = 'ghostwhite'
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
実数が負の数	x < 0
日付時刻データにn秒を加える	aDatetime + datetime.timedelta(seconds=n)
データフレームの列とカラムの相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
ダーク・スラテグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
散布図をシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='cyan')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
縦棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
インディゴ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
方程式として数式のパラメータの解を求める	sympy.solve(e, z)
実数を2乗する	x ** 2
ヒストグラムをサドルブラウン色を使って描画する	plt.hist(データ列, color='saddlebrown')
スピアマンを用いてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
nはn2	n == n2
ダイアモンド印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
Pandasで、データフレームのカラムを日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: ブランチドアーモンドを用いる	color = 'blanchedalmond'
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
横棒グラフの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームの列を散布図で見て、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
新しい線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
option: ダークグレーにグラフの色を設定する	color = 'darkgrey'
option: グレーを使う	color = 'gray'
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データ列を箱髭図にする	plt.boxplot(データ列)
データフレームの列の名前を列挙する	df.columns
イテラブルをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
等しい量になるようにビン数nでデータ列をビニングする	pd.qcut(ds, n)
プログラムの実行を異常止める	sys.exit(1)
二変数の最小値	min(x, y)
環境がウィンドウズか調べる	sys.platform.startswith('win32')
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
要素を双方向キューにエンキューする	deq.appendleft(element)
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
列の組み合わせ	itertools.combinations(iterable, n)
データフレームの列の文字列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
文字列はリストに含まれるか	element in aList
rgbの下三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
L2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
文字列は全て識別子名かどうか調べる	s.isidentifier()
ラジアンの角度	math.degrees(x)
縦棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
最小値でデータフレームのカラムの欠損値を置換する	df[col].fillna(df[col].min())
部分文字列で文字列を区切って、文字列リストにする	s.split(sub)
後の行の値でデータフレームのリストカラムのNaNを補う	df[aList].fillna(method='bfill')
ファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
正規表現にASCII限定として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
列名リストによってによってデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
文字列が数値か	s.isnumeric()
折れ線グラフを赤い破線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
横棒グラフを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
option: フォントの色をアリスブルーに変更する	color = 'aliceblue'
データフレームを列によって並べる	df.sort_values(by=column)
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
ベクトル演算をする	import numpy as np
コーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
nがリストのどれかかどうか確認する	n in aList
タン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
縦軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
ロバストな線形分類器を準備する	model = sklearn.linear_model.HuberClassifier()
コーンフラワーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
nとn2が等しいか調べる	n == n2
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
有理数をインポートする	import fractions
データ列の折れ線グラフを大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
nとn2の論理和を求める	n | n2
両端キューから最初の要素を取り出す	deq.remove(element)
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: ゲインズボロにフォントの色を設定する	color = 'gainsboro'
option: ▽印を描画する	marker = 'v'
グリッド線	plt.grid(alpha=0.5)
棒グラフをダークサーモン色として描画する	plt.bar(データ列x, データ列y, color='darksalmon')
option: グラフの色をオリベドラブに変更する	color = 'olivedrab'
一方に含まれ、他方に含まれない集合を使う	aSet.difference(aSet2)
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
文字列の後ろから部分文字列を見つける	s.rfind(sub)
横棒グラフをダークシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkcyan')
パールゴールデンロッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの線の種類を点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データ列の中に文字列と日付データがあるかテストする	ds.isin([value, value2])
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
アクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
昇順にデータフレームを複数の列でソートする	df.sort_values(by=column, ascending=True)
折れ線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
option: 淡いピンク色色を用いる	color = 'lightpink'
中央値で列をビン分割する	pd.qcut(ds, 2)
箱髭図を横方向にする	plt.boxplot(データ列, vert=False)
option: フォントの色をコーンズシルクに設定する	color = 'cornsilk'
option: フォントの色をライトグレーに変更する	color = 'lightgrey'
Pythonパスにディレクトリを追加する	sys.path.append(dir)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
現在は何秒か知る	datetime.date.today().second
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
散布図に黒いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
浮動小数点数の双曲線余弦	math.cosh(x)
リストとリストについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
xが一桁の数か調べる	-9 <= x <= 9
リストを下線付きにする	f'\033[4m{value}\033[0m'
主成分分析で多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
現在が何時か知る	datetime.date.today().hour
データフレームの列が文字列が含まれるデータを取り出す	df[df[column].str.contains(s)]
option: 菱形マーカーを加える	marker = 'D'
データフレームを'A'列と'B'列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データ列の分散	ds.var()
ローングリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
散布図をブランチドアーモンド色を用いて描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
文字列はタイトルケースかどうか	s.istitle()
シーケンスと列をつなぐ	itertools.chain(iterable, iterable2)
データフレームを列で並べ直し、、更新する	df.sort_values(by=column, inplace=True)
ファイルの絶対パス	os.path.abspath(filepath)
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
グリッド線を白くする	plt.grid(color='w')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
リスト内の要素が全て真か確認する	all(aList)
サポートベクターマシンを用いてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
nの各桁の総和を算出する	sum(map(int, str(n)))
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
データフレームのカラムの未入力値を最小値で補う	df[col].fillna(df[col].min())
表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
枠なしの凡例を入れる	plt.legend(frameon=False)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
ゴーストホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
Pandasで日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
線形回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
辞書をJSONフォーマットのインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
折れ線グラフをグレー色を使って描画する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
配列とリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
データフレームを各列と列の組み合わせ毎にグループ化して、合計を算出する	df.groupby([column, column2], as_index=False).sum()
散布図の丸印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: ライトグレーを使用する	color = 'lightgrey'
seabornのデフォルトを適用する	sns.set()
文字列がリストに含まれないか調べる	element not in aList
データフレームの列の欠損値を平均に設定する	df[col].fillna(df[col].mean())
新しいガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
線グラフを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図のバツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
方程式として数値を解く	sympy.solve(e)
青い一点鎖線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
青紫色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームの全列の相関を図示する	sns.pairplot(df)
rgbの丸マーカーを配列と数列の散布図に描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: バイナリモードを使う	mode = 'rb'
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
偽陽性を避けたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
無限にnからカウントアップする	itertools.count(start=n)
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
nにn2をかけた値をnとする	n *= n2
データフレームのリストカラムがどの程度、分散しているか確認する	df[aList].var()
Pandasで、UNIX秒の文字列からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図の印を丸にする	plt.scatter(データ列x, データ列y, marker='o')
データフレームのリストカラムの欠損値を直前の値に変更する	df[aList].fillna(method='ffill')
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
回帰モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
option: 印を右三角に設定する	marker = '>'
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
option: スプリンググリーン色を用いる	color = 'springgreen'
実数の二進対数	math.log2(x)
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
原点から(浮動小数点数,y)の距離を求める	math.hypot(x, y)
データフレームのpercent分位数	df.quantile(percent/100)
option: グラフの色を青紫に設定する	color = 'violet'
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
ヒストグラムの色をアイボリーにする	plt.hist(データ列, color='ivory')
プロットの縦横比を同じする	plt.axis('equals')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
データフレームを十の位で丸めて整数型にする	df.round(-1).astype(int)
タプルの合計値を計算する	sum(aTuple)
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
スタックに値をプッシュする	deq.append(element)
整数nが配列のひとつかどうか	n in aArray
データフレームのNaNがある箇所を	df.style.highlight_null()
option: グラフの色をブラックに設定する	color = 'black'
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
箱ヒゲ図をプロットして、平均線を加える	plt.boxplot(データ列, meanline=True)
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
赤い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
数列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
ユニークな要素ごとの出現回数	np.unique(aArray, return_counts=True)
線グラフを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
n列までデータフレームを表示するようにする	pd.set_option('display.max_columns', n)
データ列の尖度を算出する	ds.skew()
横棒グラフをダークシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームを列で整列して、行を振り直す	df.sort_values(columns).reset_index(drop=True)
リストとリストの散布図を描画してマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
実数から実数を引く	x - y
option: グラフの色をライトコーラルに変更する	color = 'lightcoral'
数式の変数にnを代入する	e.subs(z, n)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
データフレームの欠損値をメディアンで埋める	df.fillna(df.median())
データ列の中の欠損値の合計を数える	ds.isna().sum()
リストをビン数nとしてビン分割する	pd.cut(aList, n)
option: ダークレッドを用いる	color = 'darkred'
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
二つの数値をカンマで区切って表示する	print(value, value2, sep=',')
データフレームのインデックスをリセットする	df.reset_index()
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
ゼロ埋めされた符号なし８ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.uint8)
散布図に菱形マーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
等量でn個に配列をビン分割する	pd.qcut(aArray, n)
データフレームを各列と列の組み合わせ毎にグループ化して、分散を算出する	df.groupby([column, column2], as_index=False).var()
ガンマ関数	math.gamma(x)
カーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
ペールグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
アルファベットの大文字を全部使う	string.ascii_uppercase
n個にリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ヒートマップでデータフレームの列と列の相関行列をグラフ化する	sns.heatmap(df[[column, column2]].corr())
option: グラフの色をビスクに設定する	color = 'bisque'
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: グラフの色をダークオーキッドに変更する	color = 'darkorchid'
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
ラインを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
組の中の最大値	max(aTuple)
option: ダイアモンドマーカーを用いる	marker = 'D'
二つの文字列が等しいかどうか	s == s2
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
最大値を使って正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームのリストカラムの欠損値をモードで埋める	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
二つのデータフレームを異なる列をキーとして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ティール色を用いてヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
配列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列の両端から空白を取り除く	s.strip()
タン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
赤い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
リストをビン数nでビン分割する	pd.cut(aList, n)
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
option: 線種を一点鎖線に設定する	linestyle = 'dashbot'
t-SNEを使って多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
コマンドの第2引数を調べる	sys.argv[1]
リストの各値を関数に適用した結果でソートする	sorted(aList, key=func)
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ヒストグラムをパールバイオレットレッド色として描画する	plt.hist(データ列, color='palevioletred')
nをn2で割る	n / n2
単回帰分析を行う	model = sklearn.linear_model.LinearRegression()
二つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
キューをポップする	deq.pop()
数を十六進表記の文字列にする	x.hex()
JSON形式のfをデータにする	json.load(fin)
文字列中に非数字が含まれるか	any(not c.isdigit() for c in s)
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
データ列を等量でビン数nを使って分割する	pd.qcut(ds, n)
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
三自然数のGCDを求める	math.gcd(n, n2, n3)
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
option: 切片を算出しない	fit_intercept = False
文字列はキーワードかどうかテストする	keyword.iskeyword(s)
データフレームの列の中にと文字列が存在するか	df[col].isin([value, value2])
列の平均を求める	ds.mean()
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
二つのデータフレームを結合する	pd.merge(df, df2)
データフレームのリストカラムのNaNを直後の値で補う	df[aList].fillna(method='bfill')
リストの末尾の値	aList[-1]
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
option: ラインスタイルを点線に設定する	linestyle = 'dotted'
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
現在をタプルに変換する	datetime.datetime.today().timetuple()
データフレームの内で、列と列の重複を削除する	df.drop_duplicates(subset=column)
y座標の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
ヒートマップで混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列を部分文字列で二分する	s.partition(sub)
行列の行ごとの標準偏差	np.std(aArray, axis=1)
改行なしにリストを表示する	print(value, end='')
データ列の中にいくつNaNが存在するか数える	ds.isna().sum()
UTF8を用いてファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
タプルと列をzipする	itertools.zip_longest(iterable, iterable2)
データフレームのカラムのタイムゾーンを東京に設定する	df[col].tz_convert('Asia/Tokyo')
二つのカウンタの共通する要素を計算する	aCounter & aCounter2
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
ブルーバイオレット色を用いてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
オプションで標準出力を出力先にする	file = sys.stdout
折れ線グラフの▼マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
左三角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
ローングリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
リストの最初の文字列を探す	aList.index(element)
いつまでも文字列が繰り返すイテラブル	itertools.repeat(element)
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
option: 色をホワイトスモークに設定する	color = 'whitesmoke'
左三角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
タイムスタンプデータが水曜日かどうか	aDatetime.weekday() == 2
実数を切り上げて整数に変換する	math.ceil(x)
データフレームを破壊的に二つの列によってによって整列する	df.sort_values(by=['A', 'B'], inplace=True)
実数の正接を求める	math.tan(x)
ヒストグラムの色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
折れ線グラフを一点鎖線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームを行によって並べ直す	df.sort_index()
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
文字列の左側から部分文字列を消す	s.lstrip(sub)
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
散布図のポイントマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
カウンタ同士で共通部分演算する	aCounter & aCounter2
イテラブルを文字列に変換してつなげる	''.join(map(str, iterable))
折れ線グラフに赤いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームを表示するとき折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
日付データは日付データより前	aDate < aDate2
列の空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
配列と数列の散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
リストが空か確認する	len(aList) == 0
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの色をパウダーブルーにセットする	plt.hist(データ列, color='powderblue')
データフレームを'A'列を用いて降順に破壊的に並べる	df.sort_values(by='A', ascending=False, inplace=True)
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
文字列TSVからカンマ区切りのファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
データフレームの数値をまとめて小数点以下n桁で四捨五入する	df.round(n)
２つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
カウンタの共通部分	aCounter & aCounter2
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
リストとリストの散布図を描画して、大バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
散布図をrgbのポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのカラムの未入力値を前の行の値に設定する	df[col].fillna(method='ffill')
グラフの凡例を表示する	plt.legend()
列の空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
データフレームの末尾	df.tail()
配列と配列について散布図を描いて、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: グラフの色を青緑に変更する	color = 'teal'
文字列の無限な列	itertools.repeat(element)
実数が整数か調べる	x.is_integer()
文字列の先頭から部分文字列を探す	s.find(sub)
0からnの範囲	range(n)
バイトオーダを使う	sys.byteorder
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
実数のn乗して数による余り	pow(x, n, y)
実数の2乗	x ** 2
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
文字列を緑色にする	f'\033[32m{value}\033[0m'
整数nが配列のどれかか	n in aArray
数値を展開する	sympy.expand(e)
折れ線グラフの左三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
縦棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
行列の行ごとの最小値を見る	np.min(aArray, axis=1)
文字列の長さを使う	len(s)
option: ブール型を使う	dtype = np.int32
リストと配列について散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
データ列の値はNaNかどうか調べる	ds.isna()
トマト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフの色をダーク・スラテグレーにする	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフの星マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データフレームの歪度	df.kurt()
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
散布図のポイントマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列を太字にする	f'\033[1m{value}\033[0m'
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフの色をダークシアンにセットする	plt.plot(データ列x, データ列y, color='darkcyan')
疑似乱数を得る	random.random()
日付時刻データの曜日を整数で見る	aDatetime.weekday()
データフレームのカラムは何月か確認する	df[col].dt.month
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
イテラブルとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
キューが空か調べる	len(deq) == 0
ラインを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
文字列を最後の部分文字列で二つに区切って、最初の文字列を見る	s.rpartition(sub)[0]
スレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
グラフの中の縦軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
双方向キューの右側にシーケンスの各要素を入れる	deq.extend(iterable)
文字列はタプルに含まれるか調べる	element in aTuple
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
配列とリストについて散布図を描いて、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
昇順にタプルの要素を並べ変える	sorted(aTuple, reverse=False)
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
option: 色をコーラルに設定する	color = 'coral'
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
リストとリストについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームの中にいくつNaNが存在するか数える	df.isna().sum()
option: 未入力値も無視しない	dropna = True
nが一桁の数か調べる	0 <= n <= 9
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
実数に実数を加える	x + y
文字列を部分文字列で二分し、残りの文字列を使う	s.partition(sub)[-1]
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
データフレームのリストカラムの中にある文字列と日付データの合計をカウントする	df[aList].isin([value, value2]).sum()
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
文字列を大文字・小文字を無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
書き込み用にファイルをオープンする]	open(filepath, mode='w')
二つのオブジェクトは同一か調べる	obj is obj2
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
棒グラフを青紫色を用いて描画する	plt.bar(データ列x, データ列y, color='violet')
配列の内積	np.dot(aArray, aArray2)
データフレームから重複した行を削除して、入れ替える	df.drop_duplicates(inplace=True)
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
リストの中の一番小さい値を計算する	min(aList)
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
ヒストグラムと勾配ブースティングとしてクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの全列の相関をグラフ化する	sns.pairplot(df)
option: ダークグレーを使う	color = 'darkgray'
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
Pythonインタプリタの実行ファイルの絶対パスを調べる	sys.executable
配列を累加する	itertools.accumulate(iterable)
リストをヒストグラムとして可視化する	plt.hist(データ列)
ヒストグラムの色をスカイブルーにする	plt.hist(データ列, color='skyblue')
主成分分析として濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
配列の行ごとの合計	np.sum(aArray, axis=1)
nは組のどれかか調べる	n in aTuple
列をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
列と列の直積	itertools.product(iterable, iterable2)
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
タプルをナンバリングする	enumerate(aTuple)
横棒グラフを濃いシアン色を使って描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームのリストカラムのヒートマップを描画する	sns.heatmap(df[aList].corr())
黄緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
線グラフの色をダークカーキにする	plt.plot(データ列x, データ列y, color='darkkhaki')
テキストファイルファイル名が	filename.endswith('.txt')
ドジャーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
文字列を黄色にする	f'\033[33m{value}\033[0m'
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
列の要約統計量	ds.describe()
カラムの尖度を算出する	ds.skew()
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
散布図をミッドナイトブルー色として描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
茶色色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
グローバル変数の一覧を使う	globals()
今日をタプルに変換する	datetime.datetime.today().timetuple()
折り返しを無効に変更する	pd.set_option('expand_frame_repr', False)
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
リストを2回あわせた直積を得る	itertools.product(iterable, repeat=2)
０で全要素を初期化した論理値型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
2変数の最大値	max(x, y)
nではない	not n
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
二つのカウンタの共通する要素を求める	aCounter & aCounter2
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
n個の整数列	list(range(n))
算術計算ライブラリを使う	import math
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
option: パウダーブルー色を用いる	color = 'powderblue'
OSの名前	sys.platform
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
読み込みモードでファイルを開いて]、fとする	f = open(filepath, mode='r')
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
二つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
棒グラフをダークカーキ色を使って描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: 紺碧にフォントの色を指定する	color = 'azure'
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
イテラブルの組み合せを得る	itertools.combinations(iterable, n)
リストとリストについての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
aListn番目から要素を除く	aList.pop(n)
リストをビン数nを用いてビン分割する	pd.cut(aList, n)
データフレームのn行まで抽出する	df[:n]
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
直前の値でデータフレームの列の欠損値を埋める	df[col].fillna(method='ffill')
辞書のキーを列挙する	list(aDict)
ベクトルの行ごとの平均値を求める	np.mean(aArray, axis=1)
空の辞書を生成する	{}
配列の累積積	np.cumprod(aArray)
組のn番目のを使う	aTuple[n]
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームのカラムをまとめてValueMapで置き換える	df[col].replace(ValueMap)
データフレームを複数の列でソートする	df.sort_values(by=column)
カラムのNaNを最大値で埋める	ds.fillna(ds.max())
原点から点までの距離	math.hypot(x, y)
nがn2よりも小さいか	n < n2
ピアソン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
日付データが水曜日かどうか調べる	aDate.weekday() == 2
インディゴにヒストグラムの色を変更する	plt.hist(データ列, color='indigo')
option: スチールブルー色を使用する	color = 'steelblue'
リストとデータ列の散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームを列名リストの値によってグループ化し記述統計量を求める	df.groupby(columns).describe()
スピアマン順位相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
ファイルをBOM付きとして書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームの中の列を四分位数ごとにビンニングする	pd.qcut(df[col], 4)
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
各カラム毎にデータフレームをグループ分けして、列の合計を求める	df.groupby(column)[column2].sum()
線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
グラフを綺麗にする	import seaborn as sns
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
データフレームの欠損値を平均値にセットする	df.fillna(df.mean())
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
データフレームのカラムの値は欠損値か調べる	df[col].isna()
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
棒グラフをリネン色を用いて描画する	plt.bar(データ列x, データ列y, color='linen')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データ列の曜日	ds.dt.weekday_name
データフレームのカラムの記述統計量を算出する	df[col].describe()
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
項目名がマップ上で定義されている	key in aDict
文字列のケースを逆にする	s.swapcase()
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: ミスティローズを使用する	color = 'mistyrose'
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
option: 印を左三角に変える	marker = '<'
散布図をダークターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
カーキ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
リストの値を並べる	sorted(aList)
回帰分析を確率的勾配降下でする	model = sklearn.linear_model.SGDRegressor()
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
散布図の丸マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームの行の一覧	df.index
辞書に項目名がない時、要素を追加する	aDict.setdefault(key, element)
ヒストグラムの色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
option: グラフの色を青紫に変更する	color = 'violet'
散布図の丸印の色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: 色をパープルに指定する	color = 'purple'
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
小数点数の余弦を計算する	math.cos(x)
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
ピーチパフ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
異なるカラムをキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
タイムスタンプデータが水曜日か	aDatetime.weekday() == 2
確率的勾配降下を用いて回帰分析をする	model = sklearn.linear_model.SGDRegressor()
JSONファイルファイル名が	filename.endswith('.json')
集合からエラーなく値を取り除く	aSet.discard(element)
option: ディムグレー色を使用する	color = 'dimgray'
文字列を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
データフレームの中のカラムをビン数nとしてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
バツマーカーを使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
データフレームのリストカラムを丸める	df[aList].round()
折れ線グラフの色をバリーウッドにセットする	plt.plot(データ列x, データ列y, color='burlywood')
外れ値に強い単クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
ダークオレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
スクリプトファイルの絶対パス	os.path.abspath(__file__)
データ列の各データが何回出現するか調べる	ds.value_counts()
option: スラグレーを使う	color = 'slategray'
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
辞書の項目名とその値をペアとして取り出す	aDict.items()
option: 色をピーチパフに設定する	color = 'peachpuff'
データ列を四捨五入する	ds.round()
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t')
見やすいグラフを描画する	import seaborn as sns
配列を等量で分割数nでビン分割する	pd.qcut(aArray, n)
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ミディアムスプリンググリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
option: グラフの色をアンティークホワイトに変更する	color = 'antiquewhite'
option: 色を半透明にする	alpha = 0.5
option: アイボリー色を使う	color = 'ivory'
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
xの小数点以下'2'桁まで表示する	print(':.2f'.format(x))
主成分分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
散布図をrgbのポイントマーカーでプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
表を列名リストによってで降順に整列する	df.sort_values(by=column, ascending=False)
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
option: ▽マーカーを使う	marker = 'v'
二つの列によってによってデータフレームを降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
空行をプリントする	print()
option: 色をダークグレーに変更する	color = 'darkgrey'
option: ８ビット整数型を用いる	dtype = np.int8
ヒストグラムをビスク色として描画する	plt.hist(データ列, color='bisque')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
option: クリムゾンを用いる	color = 'crimson'
▲印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームの列は正規分布からどれだけ尖っているか調べる	df[col].skew()
データフレームから指定された列のみ選択する	df[[column]]
ターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
双方向キュー中の要素のインデックス	deq.index(element)
散布図に赤いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
縦棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
リストを緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
グラフをポスター用にする	sns.set(context='poster')
データフレームのリスト列の中にある日付データと文字列の個数をカウントする	df[aList].isin([value, value2]).sum()
回帰分析をランダム性を追加したランダムフォレストでする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
ポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.')
文字列をn回続く列	itertools.repeat(element, n)
オプションで、標準エラーを使う	file = sys.stderr
データフレームの列がxより大きい行を取り出す	df[df[column] > x]
句読点文字を使う	string.punctuation
多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
rgbに横棒プロットの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
カテゴリ列でグループ化して、データフレームの全列の相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
カラムの第二四分位数	ds.median()
辞書のエントリ数	len(aDict)
本日の曜日を整数で見る	datetime.datetime.today().weekday()
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
option: ダークオリーブグリーンに色を設定する	color = 'darkolivegreen'
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
リストの各要素を関数に適用した結果で並べ変える	sorted(aList, key=func)
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
ヒストグラムをスノー色を使って描画する	plt.hist(データ列, color='snow')
オブジェクトが関数か調べる	callable(obj)
データフレームの列と列の相関行列スピアマン相関係数として	df[[column, column2]].corr(method='spearman')
分類結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
空行を表示する	print()
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
ファイルパスのセパレータ記号を使う	os.sep
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
散布図をグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
横軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
小数点数以上の最小の整数を計算する	math.ceil(x)
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
コーパスのバージョン	version = 'wcce2022-0.1'
辞書のキーを要素にする	aDict[key] = element
回帰分析をKNNで行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
option: ライトゴールドロディイエローを使用する	color = 'lightgoldenrodyellow'
実数を文字列にする	str(x)
集合から別の集合を除く	aSet.difference_update(aSet2)
文字列が両端キューの中に含まれてるか判定する	element in deq
数式の平方根を求める	sympy.sqrt(e)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
文字列中にひとつでも非アスキー文字があるかどうか確認する	any(not c.isascii() for c in s)
黒い△印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの重複を見る	df.duplicated()
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
横棒グラフの幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
nのバイト長を確認する	(n.bit_length() + 7) // 8
カーキ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
option: 色をペルーに設定する	color = 'peru'
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
二つの数値をタブで区切って表示する	print(value, value2, sep='\t')
option: 濃い青色を使う	color = 'darkblue'
文字列の中のASCII限定としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
データフレームを確認する	df.head()
縦棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
シーケンスからセット	set(iterable)
数値を微分する	sympy.diff(e)
散布図のダイアモンド印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームのリスト列を10の位で丸めて整数型にする	df[aList].round(-1).astype(int)
データフレームの未入力値を最大値に指定する	df.fillna(df.max())
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
値は両端キューの中に含まれてるか調べる	element in deq
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
プロットのy軸を対数目盛に変更する	plt.yscale('log')
オプションで、出力先をファイルに変更する	file = sys.open(filename, 'w')
JSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
２つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
文字列を白色で出力する	print(f'\033[37m{value}\033[0m')
ベクトルの形状を変形する	aArray.reshape(行数, 列数)
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ヒストグラムの色をダークターコイズにセットする	plt.hist(データ列, color='darkturquoise')
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
文字コードに対応する文字を使う	chr(unicode)
データ列の秒	ds.dt.second
リストの推移を半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
逆双曲線余弦を計算する	math.acosh(x)
回帰直線データフレームのカテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
決定木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
散布図の右三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
パターンを事前にコンパイルする	re.compile(pattern)
小数点数が無限大か	math.isinf(x)
option: namesを列の名前に指定する	names = names
option: 線の種類を破線に変更する	linestyle = 'dashed'
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
データフレームのカラムのどの値が最も現れるか見る	df[col].mode()
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
散布図をダークマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
データフレームの下n行を選択する	df.tail(n)
散布図をミディアムオーキッド色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
イテラブルから配列を作る	np.array(iterable)
スノー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
等差数列から整数乱数を得る	random.randrange(start, end, step)
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
データフレームを四捨五入して、整数にする	df.round().astype(int)
折れ線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
カウンタの項目一覧	aCounter.keys()
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
縦棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
折れ線グラフの色をティールに変更する	plt.plot(データ列x, データ列y, color='teal')
色付きの実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: 色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
縦棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
カウンタから辞書を減らす	aCounter.subtract(aDict)
option: サドルブラウン色を使う	color = 'saddlebrown'
option: フォレストグリーン色を使用する	color = 'forestgreen'
データフレームのカラムの欠損値を第二四分位数で補う	df[col].fillna(df[col].median())
散布図を赤い丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
配列の列ごとの合計	np.sum(aArray, axis=0)
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
正規分布のパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
eの浮動小数点数乗	math.exp(x)
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
グラフの横軸に説明を付ける	plt.xlabel('x軸ラベル')
横棒グラフを描画し、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
配列とイテラブルについての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
データ列の折れ線グラフを▽マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v')
ダークグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
nからn2を引いてnとする	n -= n2
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
文字列を走査しパターンに複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
本日のローカルな日付	datetime.date.today()
データフレームのカラムのモード	df[col].mode()
option: グラフの色をパールバイオレットレッドに変更する	color = 'palevioletred'
データフレームのリストカラムの中にいくつ未入力値があるかカウントする	df[aList].isna().sum()
ヒストグラムの色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
nにn2をかける	n * n2
ダークオレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
印字できる文字を使う	string.printable
レモンシフォンにヒストグラムの色を指定する	plt.hist(データ列, color='lemonchiffon')
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
リストとデータ列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: フォントの色をダークシアグリーンに設定する	color = 'darkseagreen'
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
プラム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
横軸の目盛を非表示にする	plt.xticks([])
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
スピアマン相関係数でデータフレームの相関行列を算出する	df.corr(method='spearman')
フォレストグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
グラフの用途を画面にする	sns.set(context='notebook')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームのリストカラムの中に含まれる日付データと文字列の合計をカウントする	df[aList].isin([value, value2]).sum()
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
ピアソン積率相関係数としてデータフレームの相関行列を求める	df.corr(method='pearson')
赤い左三角マーカーを配列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
リストと配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
リストの最後にリストを追加し、広げる	aList.extend(aList2)
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの中に文字列と文字列があるかどうか調べる	df.isin([value, value2])
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
実数を小数点第一位で丸める	round(x, 1)
折れ線グラフを赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
赤い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームのインデックスがnの行を抽出する	df.loc[n]
データフレームのカラムが正規分布からどれだけ尖っているか見る	df[col].skew()
データ列の上位25%	ds.quantile(0.25)
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームのカラムの名前一覧で指定された列をドロップする	df.drop(columns, axis=1)
リストを中央値で分割する	pd.qcut(aList, 2)
箱ひげ図を横に並べてプロットする	plt.boxplot([データ列, データ列])
xでデータフレームの未入力値を置換する	df.fillna(x)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
option: 青紫にグラフの色を指定する	color = 'violet'
印字可能な文字を全部使う	string.printable
データフレームから重複を取り除く	df.drop_duplicates()
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
長さが一致しないときのzip	itertools.zip_longest(iterable, iterable2)
スプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
バギングを用いてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
データフレームのリストカラムの未入力値をxに設定する	df[aList].fillna(x)
option: ライトスチールブルーを使う	color = 'lightsteelblue'
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
タプルの要素数	len(aTuple)
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
チョコレート色として散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
option: グラフの色をモカシンに設定する	color = 'moccasin'
等量でデータフレームの中のカラムをn個に分割する	pd.qcut(df[col], n)
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
データ列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
マッピングの項目名の値を得る	aDict[key]
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
二つの集合のユニオン	aSet.union(aSet2)
リストの最後にリストを追加する	aList.extend(aList2)
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: 青緑色を使う	color = 'teal'
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
散布図をアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
option: スラグレー色を使用する	color = 'slategrey'
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
散布図をミディアムアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
nとn2が等しいか判定する	n == n2
文字列中の部分文字列を新しい文字列に全部置き換える	s.replace(sub, newsub)
データフレームを'A'列と'B'列によってまとめたグループを使う	df.groupby(['A', 'B'])
データフレームの指定された列をリストとして選択する	df[column].values.tolist()
ランタイムの再帰の最大回数を知る	sys.getrecursionlimit()
整数nが配列のいづれか	n in aArray
トマト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
タプルの合計を求める	sum(aTuple)
折れ線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
グラフの色テーマを指定する	sns.set(pallete=パレット名)
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
option: タンを使用する	color = 'tan'
ベクトルの分散を求める	np.var(aArray)
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
タイムスタンプデータの日付を見る	aDatetime.date()
ヒストグラムの色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
option: ゲインズボロに色を設定する	color = 'gainsboro'
データフレームを関数の値によってグループ化し基本統計量を求める	df.groupby(関数).describe()
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
rgbの四角マーカーをイテラブルとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
文字列の無限なイテラブル	itertools.repeat(element)
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
データを四分位点としてスケーリングする	sklearn.preprocessing.RobustScaler().fit_transform(データ)
色付きの一点鎖線で数列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
２次元リストの転置行列	[list(x) for x in list(zip(*aList))]
最初のプログラムを書く	print('Hello World')
nが1、もしくは2かどうか	n == 1 or n == 2
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
ケースを無視してパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
option: 読み込むシート名をnamesに設定する	sheet_name = names
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: ヘッダをnamesに設定する	header = names
両端キューの先頭に値を追加する	deq.appendleft(element)
カラムを10の位で丸めて、整数型にする	ds.round(-1).astype(int)
ペルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
オーキッド色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
横棒グラフをダークグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgreen')
要素が集合のメンバーか調べる	element in aSet
データフレームからカテゴリデータのみ選ぶ	df.select_dtypes('object')
列から両端キューを用意する	collections.deque(iterable)
タプルの合計値	sum(aTuple)
ヒストグラムの色をペルーに変更する	plt.hist(データ列, color='peru')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
データフレームの列がx以上の行を取り出す	df[df[column] >= x]
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
エクセルデータファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
各列毎にデータフレームをグループ分けして、列の合計を求める	df.groupby(column)[column2].sum()
オブジェクトは辞書クラスのインスタンス	isinstance(obj, dict)
データフレームのカラムを千の位で丸めて整数にする	df[col].round(-3).astype(int)
線グラフの色をミントクリームにセットする	plt.plot(データ列x, データ列y, color='mintcream')
ファイルパスをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
文字列からISO書式としてタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: グラフの色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
両端キューの大きさを求める	len(deq)
散布図に△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
numpyを入れる	import numpy as np
データ列とリストの散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
アリスブルーにヒストグラムの色を設定する	plt.hist(データ列, color='aliceblue')
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
折れ線グラフを下三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの中の列と列に重複があれば消す	df.drop_duplicates(subset=column)
散布図でデータフレームを可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: グラフの色をミディアムスレートブルーに指定する	color = 'mediumslateblue'
変数について数値を微分する	sympy.diff(e, z)
リストと数列の散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
配列を2次元1行に変形する	aArray.reshape(1, -1)
真紅色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
オーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
ヒストグラムの色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
n個に等量で列をビニングする	pd.qcut(ds, n)
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
文字コードを文字に変換する	chr(unicode)
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
表データの列の文字列が文字列で始まらない行を選択する	df[not df[column].str.startswith(s)]
0からnまでの整数列を作る	list(range(n+1))
option: オールドレースを使用する	color = 'oldlace'
モデルのバージョン	version = 'wcce2022-0.1'
赤い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
タプルの末尾のn要素を取り除く	aTuple[:-n]
日付と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
シエナにヒストグラムの色を変更する	plt.hist(データ列, color='sienna')
文字列をASCIIコード列に変換する	[ord(ch) for ch in s]
ファイルからストリームを開き]、fileとする	file = open(filepath)
パールバイオレットレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
文字列の両端から不要な空白を取り除く	s.strip()
カラーバーを付ける	plt.colorbar()
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
オプションでファイルを用いる	file = sys.open(filename, 'w')
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
ライトゴールドロディイエロー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
要素∈セット	element in aSet
option: 行列のデータ型を指定する	dtype = bool
option: シャルトリューズ色を使う	color = 'chartreuse'
データを最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフの▲マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームのリストで指定された列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[aList].corr())
option: 色をダークレッドに設定する	color = 'darkred'
データフレームの重複した行をマスクする	df.duplicated()
青い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
散布図をダークスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
配列をn個に等量でビン分割する	pd.qcut(aArray, n)
ルートのチェーンマップ	collections.ChainMap()
▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
アクア色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
日付データが水曜日	aDate.weekday() == 2
文字列内にひとつでもアルファベットが含まれるか	any(c.isalpha() for c in s)
列を10の位で丸める	ds.round(-1)
実数のsin	math.sin(x)
ヒストグラムを破線を用いて描画する	plt.hist(データ列, linestyle='dashed')
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図のマーカーを黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
辞書を並べ直してJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
列によってデータフレームをグループ化して、それぞれのグループ毎の最小値を求める	df.groupby(column).min()
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
option: ペルー色を用いる	color = 'peru'
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
赤い下三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
データフレームのカラムを10の位で四捨五入して整数にする	df[col].round(-1).astype(int)
作画で使用するフォントを日本語に指定する	sns.set(font='IPAexGothic')
データフレームを列で小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: フォントの色をハニーデューに指定する	color = 'honeydew'
オブジェクトは浮動小数点数クラス	isinstance(obj, float)
列'A'と列'B'をキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
一点鎖線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashbot')
折れ線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
配列とリストの散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
カラーバーを水平で描く	plt.colorbar(orientation='horizontal')
アンサンブル学習を使ってクラス分類をする	sklearn.ensemble.VotingClassifier()
'A'列でデータフレームをソートして更新する	df.sort_values(by='A', inplace=True)
動作環境の名前	sys.platform
option: 文字列の示す文字コードを使う	encoding = s
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
ブルーバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
色付きの点線として数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
デックのstart番目からend番目までの部分値	collections.deque(itertools.islice(deq, start, end))
表をグループ化し、各列に対し最大値を求める	df.groupby(column)[column2].max()
option: ピンクにグラフの色をする	color = 'pink'
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
option: サーモン色を用いる	color = 'salmon'
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategrey')
option: ビスクに色を変更する	color = 'bisque'
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
ヒストグラムをダークオレンジ色を用いて描画する	plt.hist(データ列, color='darkorange')
列を等量でn個にビン分割する	pd.qcut(ds, n)
データフレームのリスト列の欠損値を直後の値にする	df[aList].fillna(method='bfill')
データフレームの最頻値	df.mode()
option: フォントの色をマルーンに設定する	color = 'maroon'
集合にシーケンスを追加更新する	aSet.update(iterable)
文字列の開始位置から先に部分文字列が含まれないか調べる	s.find(sub, start) == -1
option: 左三角印を加える	marker = '<'
文字列をシンボルに変換する	sympy.Symbol(s)
あらかじめパターンをコンパイルする	re.compile(pattern)
サイコロを振る	random.randint(1, 6)
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
nーn2を求める	n - n2
グラフのグリッドを暗くする	sns.set(style='darkgrid')
ふたつの集合の差集合	aSet.difference(aSet2)
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
辞書のエントリを列挙する	aDict.values()
表データを各列毎にグループ化し、、列の平均値を算出する	df.groupby(column)[column2].mean()
option: ダークマゼンタを使う	color = 'darkmagenta'
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
データフレームのリストカラムの記述統計量を計算する	df[aList].describe()
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
ファイルを書き込み用に開く]	open(filepath, mode='w')
option: アンティークホワイト色を使う	color = 'antiquewhite'
option: 星印を描画する	marker = '*'
ヒストグラムの色をスプリンググリーンにセットする	plt.hist(データ列, color='springgreen')
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
非数値データを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
データフレームのカラムの欠損値を直前の値に増やす	df[col].fillna(method='ffill')
配列の平均値	np.mean(aArray)
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
文字列を部分文字列で二分し、最初の文字列を使う	s.partition(sub)[0]
ファイルパスをオープンする]	open(filepath)
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
ファイルからストリームをオープンして]fileとする	file = open(filepath)
nからn2の値を引いてnにする	n -= n2
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
ヒストグラムの色をサンディーブラウンにする	plt.hist(データ列, color='sandybrown')
option: 色をライトブルーに設定する	color = 'lightblue'
option: ホワイトスモーク色を使う	color = 'whitesmoke'
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを各列毎にグループ分けして、列の平均値を求める	df.groupby(column)[column2].mean()
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
列からn個、サンプリングする	random.sample(iterable, k=n)
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
プログラムのファイルの名前を調べる	sys.argv[0]
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
縦棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
eの実数乗	math.exp(x)
珊瑚にヒストグラムの色を設定する	plt.hist(データ列, color='coral')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
リストとイテラブルについて散布図を描画し、、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
実数の平方根	math.sqrt(x)
predicateFuncを適用したとき真となる列の部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフの印を左三角印にする	plt.plot(データ列x, データ列y, marker='<')
option: ケースを無視する	flag = re.IGNORECASE
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
折れ線グラフの右三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
リストと配列についての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
プロットのデータラベルの位置を(x,y)に設定する	plt.legend(loc=(x, y))
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
配列の値を変更する	aArray[行番号, 列番号] = 指定の値
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのカラムのNaNを平均値にセットする	df[col].fillna(df[col].mean())
ひとつでも空白が文字列内に含まれるか確認する	any(c.isspace() for c in s)
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
説明変数と目的変数を使ってモデルを学習する	model.fit(説明変数, 目的変数)
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
部分文字列が文字列中にない	sub not in s
文字列が全て十進数字か調べる	s.isdecimal()
文字列の大文字小文字を整える	s.casefold()
確率的勾配降下でクラス分類をする	model = sklearn.linear_model.SGDClassifier()
データフレームを整数に丸める	df.round()
ヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
下線付きで値を表示する	print(f'\033[4m{value}\033[0m')
ふたつの辞書をマージする	aDict | aDict2
文字列の無限イテラブル	itertools.repeat(element)
レモンシフォン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: フォントの色をプラムに設定する	color = 'plum'
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
グラフ中の(x,y)の位置に補足を表示する	plt.legend(loc=(x, y))
文字列がタプルの要素かどうか調べる	element in aTuple
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
2つの変数を文字列で区切って表示する	print(value, value2, sep=s)
リストの変遷を赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列が全て空白文字からなるか調べる	s.isspace()
オプションで、標準出力を使用する	file = sys.stdout
文字列の中で大文字・小文字を無視してパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
十六進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
配列とリストについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
データフレームを表示するとき、列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームのリストカラムの中の欠損値の数をカウントする	df[aList].isna().sum()
列'A'と列'B'をキーとして２つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
rgbの左三角マーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
柱状グラフを描き、、区間数を設定する	plt.hist(データ列, bins=区関数)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
カウンタの全数を見る	aCounter.total()
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
文字列を最後の部分文字列で二分し、残りの文字列を使う	s.rpartition(sub)[-1]
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
文字列が文字列より辞書順で後かどうか調べる	s > s2
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
ビン数nでデータフレームの中の列を等量でビン分割する	pd.qcut(df[col], n)
三自然数の最小公倍数を計算する	math.lcm(n, n2, n3)
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: 淡い茶色にグラフの色を設定する	color = 'tan'
青緑にヒストグラムの色をセットする	plt.hist(データ列, color='teal')
実数を十の位で丸める	round(x, -1)
データフレームを列によってグループ化して、グループごとの合計を算出する	df.groupby(column).sum()
ファイルパスのディレクトリ名	os.path.dirname(filepath)
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
列をダミー変数に変換する	pd.get_dummies(iterable)
データフレームの列を型にする	df[col] = df[col].astype(ty)
フォレストグリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
本日が月曜日か確認する	datetime.datetime.today().weekday() == 0
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームをグループ化して、ヒストグラムを用いて描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
グラフの描画でパステル調に色を用いる	sns.set(pallete='pastel')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ベクトルが何のデータ型か調べる	aArray.dtype()
折れ線グラフの色をインディアンレッドにする	plt.plot(データ列x, データ列y, color='indianred')
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
列をキーとして2つの表データを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列中にひとつでも非英数字が含まれるか	any(not c.isalnum() for c in s)
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームの指定された列をリストに変換する	df[column].values.tolist()
option: スノーにグラフの色を指定する	color = 'snow'
日付時刻データの月	aDatetime.month
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
色付きの実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームを列によって小さい順にソートする	df.sort_values(by=column, ascending=True)
浮動小数点数を三乗する	x ** 3
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
データフレームのリストカラムの欠損値を最小値で置き換える	df[aList].fillna(df[aList].min())
マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
キーがマッピングにある	key not in aDict
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
アンティークホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
トマト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
菱形マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D')
青い点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
コマンドの第一引数を知る	sys.argv[1]
ヒストグラムの色をスノーにセットする	plt.hist(データ列, color='snow')
論文にグラフの用途を変更する	sns.set(context='paper')
数列とリストについて散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
縦棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ライトサーモン色としてヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
データフレームの列と列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
空の辞書を作る	{}
ストリームを一行ずつ読み込む	f.readline()
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
文字列内にひとつでもアルファベットが含まれる	any(c.isalpha() for c in s)
入力から二つの実数を取り出す	A, B = map(float, input().split())
option: マーカーの太さを指定する	markeredgewidth = 2.5
書き込みできるようにファイルパスを開く]	open(filepath, mode='w')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
プラットホームはWindowsか調べる	sys.platform.startswith('win32')
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
複数のデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
行列の個数	aArray.size
列と列の重複を落とす	df.drop_duplicates(subset=column)
nがn2か判定する	n == n2
グラフのデータラベルの場所を(x,y)に設定する	plt.legend(loc=(x, y))
左三角印を用いるデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
データ列と配列リストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
スピアマンの順位相関係数を計算する	scipy.stats.spearmanr(データ列, データ列2)
バイナリ書き込みモードとしてファイルをオープンして]fとする	f = open(filepath, mode='wb')
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
色名をからコードにする	matplotlib.colors.cnames[色名]
データフレームのカラムの各値の出現数	df[col].value_counts()
変数を白色でプリントする	print(f'\033[37m{value}\033[0m')
option: ダークシアグリーン色を使う	color = 'darkseagreen'
データ列の折れ線グラフを三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: コーンズシルクにグラフの色を変更する	color = 'cornsilk'
部分文字列を文字列の左端から探す	s.find(sub)
行列は何のデータ型か調べる	aArray.dtype()
データフレームのリストカラムの中にいくつ未入力値があるか求める	df[aList].isna().sum()
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
オブジェクトはあるクラスのインスタンスか調べる	isinstance(obj, クラス)
書き込み用に文字列の示すエンコーディングでファイルパスをオープンする]	open(filepath, mode='w', encoding=s)
浮動小数点数とyの斜辺	math.hypot(x, y)
十六進数字を見る	string.hexdigits
option: パールバイオレットレッドを使う	color = 'palevioletred'
配列とリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
散布図を赤い左三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列の末尾から部分文字列を消す	s.rstrip(sub)
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
区間から配列	np.linspace(最小値, 最大値, 要素数)
プロット中で日本語を使えるようにする	sns.set(font='IPAexGothic')
ハニーデュー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
ラインを青い点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
rgbのポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
'A'列と'B'列によってデータフレームを並べる	df.sort_values(by=['A', 'B'])
現在の時間数	datetime.date.today().hour
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データ列の寄与率を求める	sklearn.metrics.r2_score(データ列, データ列2)
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
データフレームを列で分類し、、列の要約統計量を算出する	df.groupby(column).describe()[column2]
柱状グラフをプロットし、、ビン数を変更する	plt.hist(データ列, bins=区関数)
Pandasで、数値時刻のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
コマンドの第二引数を知る	sys.argv[1]
すべてのシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=None)
組の最後の要素	aTuple[-1]
折れ線グラフを赤い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
カラムのどの値が頻出か確認する	ds.mode()
文字列の両端から不要な空白を除く	s.strip()
コマンド引数をリストとして	sys.argv[1:]
Pandasでフォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームの列の欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
集合からエラーなく要素を取り除く	aSet.discard(element)
option: フォントの色をイエローグリーンに指定する	color = 'yellowgreen'
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
平方根を計算する	math.sqrt(x)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
データをL2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図をシエナ色を用いて描画する	plt.scatter(データ列x, データ列y, color='sienna')
データ列の欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategray')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームのリストカラムの空文字をNaNに変換し、ドロップする	df[aList].replace('', np.nan).dropna()
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
標準エラーを得る	sys.stderr
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
リストから行列を作る	np.array(aList)
ダークグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
カラムは正規分布からどれだけ尖っているか見る	ds.skew()
データフレームの列で文字列が含まれない行を選択する	df[not df[column].str.contains(s)]
データフレームの列がxのデータを取り出す	df[df[column] == x]
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
行列の逆行列	np.linalg.inv(aArray)
ミディアムパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
オブジェクトは集合クラスのインスタンスかどうか	isinstance(obj, set)
３変数の最大値を計算する	max(x, y, z)
option: グラフの色をレモンシフォンに変更する	color = 'lemonchiffon'
ロイヤルブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
option: フォントの色をオレンジに設定する	color = 'orange'
オブジェクトのメモリビュー	memoryview(obj)
文字列ひとつのりスト	[element]
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
折れ線グラフを描いてカラーコードで色をする	plt.plot(データ列x, データ列y, color='#800080')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
折れ線グラフのポイントマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データフレームのリストカラムの未入力値を平均値で埋める	df[aList].fillna(df[aList].mean())
三二ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
option: アイボリーを使う	color = 'ivory'
データフレームのリスト列を丸める	df[aList].round()
全要素を０で初期化した符号なし８ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.uint8)
数が正	x > 0
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
整数nの八進文字列	oct(n)[2:]
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
分類結果の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
オブジェクトはリストか調べる	isinstance(obj, list)
赤い左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームのカラムを10の位で丸めて整数型にする	df[col].round(-1).astype(int)
既存のファイルを文字列の示すエンコーディングを使って追加できるように開く]	open(filepath, mode='a', encoding=s)
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
実行環境の名前	sys.platform
縦棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
折れ線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列中の文字を列挙する	list(s)
散布図のポイント印の太さを変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームのカラムの中にとがあるかどうか	df[col].isin([value, value2])
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
x座標の表示範囲を変更する	plt.xlim(最小値, 最大値)
破線を用いてリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの列がx以上のデータを取り出す	df[df[column] >= x]
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
xとyの商と余りを同時に求める	divmod(x, y)
線グラフを色付きの破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データフレームを列によって並べ直し、新しいインデックスを加える	df.sort_values(columns).reset_index()
ロードされたモジュールのリスト	sys.modules
入力から二つの文字列値を読み込む	A, B = map(str, input().split())
option: ダーク・スラテグレーを使用する	color = 'darkslategrey'
データ列の値が正規分布にしたがって発生する確率を使う	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
連続した行列の作成する	np.arange(開始値, 終了値, 等差)
データフレームのカラムのNaNを後の行の値に指定する	df[col].fillna(method='bfill')
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
小数点以下の表示精度を設定する	pd.set_option('precision', n)
散布図をライトサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
ヒストグラムをダークスレートブルー色として描画する	plt.hist(データ列, color='darkslateblue')
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
エクセルデータファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
n番目の列をデータフレームから消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
文字列のUNIX秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
option: 線の種類を破線に設定する	linestyle = 'dashed'
2つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
カテゴリで色分けして、データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ValueMapでデータフレームのカラムの値を置き換える	df[col].replace(ValueMap)
option: 下三角マーカーを加える	marker = 'v'
クラス分類を勾配ブースティングとして行う	model = sklearn.ensemble.GradientBoostingClassifier()
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
predicateFuncが真となる列の部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
option: マーカーを星に設定する	marker = '*'
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
アルファベットが文字列内に含まれるかテストする	any(c.isalpha() for c in s)
折れ線グラフの三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
散布図に黒い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列内に数字が含まれるか調べる	any(c.isdigit() for c in s)
異なる列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームを複数の列でソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
option: ライトグリーンを使用する	color = 'lightseagreen'
データフレームから数値データの列を抽出する	df.select_dtypes('number')
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
縦棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t')
変数を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
UTF8を用いてファイルをオープンする]	open(filepath, encoding='utf-8')
ファイルパスを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
黒いバツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
option: グラフの色をアクアに設定する	color = 'aqua'
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
コーラルにヒストグラムの色をセットする	plt.hist(データ列, color='coral')
キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
option: バイナリ書き込み用に指定する	mode = 'wb'
データ列間のR2を算出する	sklearn.metrics.r2_score(データ列, データ列2)
実数の小数点以下を丸める	round(x)
L2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
本日の月	datetime.datetime.today().month
データフレームからカテゴリデータの列名リストを見る	df.select_dtypes('object').columns
列の値でデータフレームをグループ化し、、それぞれのグループの合計を算出する	df.groupby(column).sum()
ファイルからストリームを読み込み、fileとする	file = open(filepath)
option: グラフの線の種類を一点鎖線にセットする	linestyle = 'dashbot'
option: フォントの色をダークオレンジに設定する	color = 'darkorange'
nが2で割り切れないかどうか調べる	n % 2 == 1
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
カウンタの正の数だけ残す	+aCounter
option: ▲印を描画する	marker = '^'
折れ線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
スピアマン相関係数としてデータフレームのリストカラムの相関行列	df[aList].corr(method='spearman')
option: エラーを無視する	errors = 'ignore'
ヒストグラムを破線でプロットする	plt.hist(データ列, linestyle='dashed')
イテラブルをセットに変換する	set(iterable)
折れ線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
記号計算を使う	import sympy
データフレームのカラムのpercent分位数を算出する	df[col].quantile(percent/100)
データフレームの列の記述統計量	df[col].describe()
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
散布図の▽マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
数列とリストについての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
option: ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
十六進文字列を整数に変換する	int(s, 16)
リストとリストの散布図にrgbの▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列を平方根する	np.sqrt(データ列)
散布図のダイアモンドマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgrey')
option: 改行なし	end = ''
集合から全ての要素を取り除く	aSet.clear()
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
平均値と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフの四角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
双方向キュー中の要素の出現数を数える	deq.count(element)
リストにリストを加える	aList.extend(aList2)
ひとつでも小文字が文字列内にあるか調べる	any(c.islower() for c in s)
マップから最後に追加した項目をポップする	aDict.popitem()
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
ヒストグラムの色をローングリーンにセットする	plt.hist(データ列, color='lawngreen')
1行から2つの自然数を読み込む	A, B = map(int, input().split())
ペルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
データフレームのリスト列の欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
部分文字列が文字列中に含まれるかどうか	sub in s
折れ線グラフに三角印を使う	plt.plot(データ列x, データ列y, marker='^')
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
昇順にリストの要素をソートする	sorted(aList, reverse=True)
双方向キューの順序をn個分右にローテンションする	deq.rotate(n)
ヒストグラムの色をダークレッドに設定する	plt.hist(データ列, color='darkred')
リストから配列を作る	np.array(aList)
SJISを用いて追加できるように既存のファイルを開く]	open(filepath, mode='a', encoding='shift_jis')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームを２つの列を用いてソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
散布図の△マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
破壊的に降順にデータフレームを'A'列と'B'列によって並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
2つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
集合から任意の要素を取り除く	aSet.pop()
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
8進数文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
散布図の印を下三角にする	plt.scatter(データ列x, データ列y, marker='v')
ハニーデューにヒストグラムの色をする	plt.hist(データ列, color='honeydew')
横棒グラフをレモンシフォン色を用いて描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図をカデットブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
複数のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
数値を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
白色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
シーケンスを累加する	itertools.accumulate(iterable)
散布図に右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
データフレームのカラムの中に文字列が含まれるか調べる	df[col].isin([value])
クリムゾン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
自然数の最大公約数	math.gcd(n, n2)
データフレームのリストカラムの要約統計量を求める	df[aList].describe()
データフレームのそれぞれのグループの合計を求める	df.groupby(column).sum()
データ列の中に文字列と文字列があるかどうか調べる	ds.isin([value, value2])
データフレームの未入力値を直後の値に設定する	df.fillna(method='bfill')
散布図をチョコレート色を用いて描画する	plt.scatter(データ列x, データ列y, color='chocolate')
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
option: 色をゴーストホワイトに指定する	color = 'ghostwhite'
文字列を最後の部分文字列で分けたときの左端の文字列を見る	s.rpartition(sub)[0]
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
コロンで文字列を区切り、列挙する	s.split(':')
スラグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
横棒グラフをラベンダー色として描画する	plt.barh(データ列x, データ列y, color='lavender')
データフレームの列の欠損値を直前の値に設定する	df[col].fillna(method='ffill')
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
スノー色としてヒストグラムを描画する	plt.hist(データ列, color='snow')
option: マゼンタにグラフの色を指定する	color = 'magenta'
行を用いてデータフレームをソートする	df.sort_index()
数式の数値を算出する	float(e)
EUCを使って追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='euc_jp')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ファイルから1文字読む	f.read(1)
ベストな位置に凡例を表示する	plt.legend(loc='best')
ヒストグラムをダークバイオレット色を使って描画する	plt.hist(データ列, color='darkviolet')
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームの尖度	df.skew()
スピアマン順位相関係数としてデータフレームの相関行列	df.corr(method='spearman')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
折れ線グラフの菱形印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
データフレームのグループ毎の平均値	df.groupby(column).mean()
xの小数点以下'4'桁まで表示する	print(':.4f'.format(x))
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのNaNをxで補う	df.fillna(x)
変数をスワップする	x, y = y, x
モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
小数点数の双曲線正接の逆数	math.atanh(x)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
データフレームを使用する	import pandas as pd
データフレームのカラムは正規分布からどの程度歪んでいるか確認する	df[col].kurt()
コマンド引数の一覧	sys.argv[1:]
折れ線グラフの印を△印にする	plt.plot(データ列x, データ列y, marker='^')
複数行対応として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
nからn2までの整数リストを作る	list(range(n, n2+1))
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
文字列がリストの要素でないか調べる	element not in aList
範囲を指定して整数乱数を発生させる	random.randint(最小値, 最大値)
３つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
データフレームの列の欠損値を最頻値に変更する	df[col].fillna(df[col].mode().iloc[0])
列を集合に変換する	set(iterable)
ライム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
文字列の開始位置から終了位置の間で部分文字列をカウントする	s.count(sub, start, end)
貝殻色でヒストグラムを描画する	plt.hist(データ列, color='seashell')
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
数字を全て使う	string.digits
BOM付きでファイルをオープンする]	open(filepath, encoding='utf_8_sig')
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームのカラムの欠損値を最頻値で置換する	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフを淡いピンク色色を使って描画する	plt.plot(データ列x, データ列y, color='lightpink')
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
nの八進数表記	oct(n)
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
option: フォントの色をグリーンに設定する	color = 'green'
文字列を走査し、正規表現に複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
nがn2より小さいか調べる	n < n2
ファイルパスをEUCで開く]	open(filepath, encoding='euc_jp')
option: ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
標準出力を得る	sys.stdout
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
CSVファイルタブ区切りのファイルをn番目の列をインデックスにして読み込む	pd.read_csv(filename, index_col=n)
棒グラフをティール色として描画する	plt.bar(データ列x, データ列y, color='teal')
シャルトリューズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフの左三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
縦棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
文字コードに対応する文字	chr(unicode)
データフレームから型リストデータ型の列を取り出す	df.select_dtypes(include=typeList)
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
セパレータで文字列を区切って列挙する	s.split(sep)
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
クラス分類をヒストグラムと勾配ブースティングを用いてする	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの列の未入力値をxにセットする	df[col].fillna(x)
データフレームの下n行を抽出する	df.tail(n)
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
option: 無視するフッタをnにセットする	skipfooter = n
データフレームを列によって並べ直して、新しいインデックスを加える	df.sort_values(columns).reset_index()
グリッドの線スタイルを点線に変更する	plt.grid(linestyle='dotted')
option: 最初の列をインデックスに変更する	index_col = 0
散布図のポイントマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
リストとデータ列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
線形モデルの回帰変数を見る	model.coef_
option: ビスク色を用いる	color = 'bisque'
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: ダークシアン色を使用する	color = 'darkcyan'
列のそれぞれを関数でフィルタする	map(func, iterable)
目盛線	plt.grid(linewidth=3.0)
データフレームのカラムの未入力値を最小値に設定する	df[col].fillna(df[col].min())
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
データフレームを列で集計して列の要約統計量を求める	df.groupby(column).describe()[column2]
ファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
タイムスタンプデータにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
option: 青色を使用する	color = 'blue'
アンティークホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列に漢字が含まれるか確認する	re.search('[\u4E00-\u9FD0]', s)
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
KNNで回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
nが1、もしくは2もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='grey')
option: 色をターコイズに変更する	color = 'turquoise'
小さい順に列でデータフレームを並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
aListn番目から値を取り出す	aList.pop(n)
カラムの中にある文字列の個数を求める	ds.isin([value]).sum()
n個にデータフレームの中のカラムを等間隔で分割する	pd.cut(df[col], n)
実数を実数で割った剰余	math.remainder(x, x2)
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
実数の余弦	math.cos(x)
折れ線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
リストの要素を入れ替える	aList[i], aList[j] = aList[j], aList[i]
赤いバツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
環境の名前を知る	sys.platform
データフレームをJSONLファイルに保存する	df.to_csv(filename)
整数nが配列のどれかか調べる	n in aArray
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
半透明の点線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: ライトグレー色を用いる	color = 'lightgrey'
option: 赤にフォントの色をセットする	color = 'red'
破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列はタプルの要素かどうか調べる	element in aTuple
数式の因数分解を行う	sympy.factor(e)
データフレームを列によって並べて、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
option: ブルーバイオレットにフォントの色を設定する	color = 'blueviolet'
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
タブ区切りでJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
nがn2	n == n2
グリッド線	plt.grid(color='#800080')
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
実数は無限大か調べる	math.isinf(x)
n個の数値イテラブルを見る	range(n)
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: マーカーを四角に変更する	marker = 's'
option: グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームのカラムを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
グリーンイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
横棒グラフをブランチドアーモンド色を使って描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
配列とリストの散布図を描き、、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
日付時刻データがタイムスタンプデータと同時かどうか調べる	aDatetime == aDatetime2
要素が全て1の配列	np.ones(要素数, dtype=np.int)
データ列の各値の出現回数	ds.value_counts()
表の上n行を抽出する	df.head(n)
ファイルパスを書き込みできるようにUTF8としてオープンする]	open(filepath, mode='w', encoding='utf-8')
配列とデータ列についての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
散布図の▽印を黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
単位正方行列	np.identity(n)
option: 色をパウダーブルーにセットする	color = 'powderblue'
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
option: グラフの色をホットピンクに変更する	color = 'hotpink'
文字列を部分文字列で分割して、文字列リストに変換する	s.split(sub)
タプルの総和	sum(aTuple)
半透明の一点鎖線で数列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
ファイルから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
閾値を用いてデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図の左三角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列を最後の部分文字列で分けたときの後半の文字列を使う	s.rpartition(sub)[-1]
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
リストとリストについて散布図を描画してマーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
表データを転置する	df.T
Pandasでフォーマットfmtでデータ列をタイムスタンプにする	pd.to_datetime(ds, format=fmt)
カウンタの全カウントを使う	aCounter.total()
リストと配列の散布図を描画して、大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列を下線付きにする	f'\033[4m{value}\033[0m'
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
ラインを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフの丸印の太さを変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
双方向キューの末尾を使う	deq[-1]
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
棒グラフをホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='white')
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列を空白で区切って、数列に変換する	map(int, s.split())
データフレームの中の列を中央値でビニングする	pd.qcut(df[col], 2)
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
カテゴリ列で色分けして、データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
日付時刻データは何曜日か知る	aDatetime.weekday()
双方向キューの先頭の要素	deq[0]
データ列とリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフに左三角印を使用する	plt.plot(データ列x, データ列y, marker='<')
データフレームを複数の列の値でグループ化し要約統計量を算出する	df.groupby(columns).describe()
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
option: 色をビスクに指定する	color = 'bisque'
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
option: ライトグレー色を使用する	color = 'lightgray'
文字列の中のASCII限定としてパターンによる全マッチを求める	re.findall(pattern, s, flags=re.ASCI)
棒グラフをピーチパフ色を用いて描画する	plt.bar(データ列x, データ列y, color='peachpuff')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームをCSVでJSONLファイルに保存する	df.to_csv(filename)
日付時刻データの時刻	aDatetime.hour
データフレームの列の中にいくつ文字列があるかカウントする	df[col].isin([value]).sum()
データフレームをグループ化し、列に対し最小値を求める	df.groupby(column)[column2].min()
折れ線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフの右三角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
分類モデルの真陽性率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
自然数個のものからk個取り出した場合の並べ方の総数	math.perm(n, k)
新しい部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: ホワイトスモークに色をする	color = 'whitesmoke'
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
日付時刻データが木曜日	aDatetime.weekday() == 3
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
青にヒストグラムの色を指定する	plt.hist(データ列, color='blue')
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの未入力値を平均値に設定する	df.fillna(df.mean())
タプルを逆順にする	reversed(aTuple)
グラフをスライド用に設定する	sns.set(context='talk')
リストをビン数nでビンニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列の開始位置以降に部分文字列が含まれる	s.find(sub, start) != -1
文字列をキャピタライズする	s.capitalize()
データフレームのカラムと列の相関行列をヒートマップとして描画する	sns.heatmap(df[[column, column2]].corr())
文字列中に部分文字列が含まれない	sub not in s
集合＼集合	aSet.difference(aSet2)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
各列毎にデータフレームをグループ化して列の分散を求める	df.groupby(column)[column2].var()
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
縦軸の目盛りを表示しない	plt.yticks([])
関数の値毎にデータフレームをグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(関数)]
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
データフレームの重複していない行だけを取り出す	df[not df.duplicated(keep=False)]
文字列を最初の部分文字列で二つに区切って前半の文字列を使う	s.partition(sub)[0]
データフレームのカラムからユニークな要素を抽出しリスト化する	df[col].unique().tolist()
文字列が文字列より辞書順で前かどうか調べる	s < s2
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
option: 色を紺に変更する	color = 'darkblue'
option: 深紅色を用いる	color = 'crimson'
リストの重複を除く	sorted(set(aList), key=aList.index)
貝殻色としてヒストグラムを描画する	plt.hist(データ列, color='seashell')
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
Pandasのバージョンを見る	print(pd.__version__)
option: フォントの色をリネンに指定する	color = 'linen'
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
データフレームから列を三つ選択する	df[[column, column2, column3]]
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
空のガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
データ列のパーセンタイルを描画する	plt.boxplot(データ列)
ひとつでも非英字が文字列中に含まれる	any(not c.isalpha() for c in s)
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
散布図の丸マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフの丸印の太さを設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
折れ線グラフを青い一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データ列のノルムをそろえる	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ヒストグラムをホワイトスモーク色を使って描画する	plt.hist(データ列, color='whitesmoke')
実数のアークタンジェント	math.atan(x)
関数の値によってデータフレームをまとめたグループ	df.groupby(関数)
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データ列の中に日付データが存在するか	ds.isin([value])
ダークバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
多次元データをSVDで濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
グラフの中の縦軸にラベルをつける	plt.ylabel('y軸ラベル')
２つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
1からnまでの整数列	list(range(1, n+1))
モカシン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフの色をレモンシフォンにセットする	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームのカラムの名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
スタックの中に値が含まれてるか調べる	element in deq
JSONフォーマットの文字列を辞書にする	json.loads(jsonString)
辞書から最後に追加した項目をポップする	aDict.popitem()
option: 改行コードをWindowsに変更する	newline = '\r\n'
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームを'A'列でによって破壊的に並べ直す	df.sort_values(by='A', inplace=True)
セットから任意の要素を取り出す	aSet.pop()
文字列内にひとつでもアルファベットが含まれるかどうか確認する	any(c.isalpha() for c in s)
日付データの日	aDate.day
option: グラフの線種を一点鎖線に指定する	linestyle = 'dashbot'
折れ線プロットとしてデータ列を作図する	plt.plot(データ列x, データ列y)
複素数型の全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数, dtype=bool)
ファイルパスのファイル名を使う	os.path.basename(filepath)
ビスク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
ミディアムオーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
棒グラフを黄緑色を用いて描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
散布図の丸印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームのカラムの欠損値を直前の値にする	df[col].fillna(method='ffill')
縦棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
関数の値によってデータフレームをグループ化し基本統計量を算出する	df.groupby(関数).describe()
データフレームの列の欠損値をメディアンに設定する	df[col].fillna(df[col].median())
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
タイムスタンプデータからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
option: グラフの色をクリムゾンに設定する	color = 'crimson'
横棒グラフを青色を用いて描画する	plt.barh(データ列x, データ列y, color='blue')
キーがマッピングに存在しない場合要素を追加する	aDict.setdefault(key, element)
ユニークな値を要素とする配列	np.unique(aArray)
▽マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
小麦色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
option: タブをセパレータで使用する	sep = '\t'
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームのリストカラムの欠損値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
両端キュー中の要素の位置	deq.index(element)
ポスターにプロットの目的を設定する	sns.set(context='poster')
文字列をインターンする	sys.intern(s)
数式の平方根を計算する	sympy.sqrt(e)
実数の指数部を求める	math.frexp(x)[1]
文字列でフォーマットしてタイムスタンプデータを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
Pandasで、書式fmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
ライトイエロー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
キーワード引数を用いてマッピングに更新する	aDict.update(**kwargs)
いつまでもカウントアップする	itertools.count()
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
データフレームを関数でグループ化し、記述統計量を計算する	df.groupby(関数).describe()
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
option: ライトグレーを使う	color = 'lightgray'
option: 色をダークグレーに変更する	color = 'darkgray'
モードでデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
実行環境がMacOSか調べる	sys.platform.startswith('darwin')
データフレームの列と列の相関行列	df[[column, column2]].corr()
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
option: バイアスを算出しない	fit_intercept = False
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
縦棒プロットをプロットしてラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
option: フォントの色をライムにセットする	color = 'lime'
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
実数に実数をかける	x * y
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
データフレームの末尾を見る	df.tail()
文字列が全て数字か調べる	s.isdigit()
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
スクリプト名を知る	sys.argv[0]
文字列を部分文字列で分割した時の後半の文字列	s.partition(sub)[-1]
データ列とデータ列の散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: イエローグリーンを使う	color = 'yellowgreen'
二つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
リストを中央値でビニングする	pd.qcut(aList, 2)
データフレームのカラムの欠損値を最小値にセットする	df[col].fillna(df[col].min())
データフレームの全カラムを散布図でグラフ化する	sns.pairplot(df)
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
散布図に青い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ヒストグラムの色をフクシアにする	plt.hist(データ列, color='fuchsia')
数列と配列について散布図をプロットして、マーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
ラインを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
データ列を箱ひげ図にする	plt.boxplot(データ列)
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
データフレームを'A'列をキーにしてソートする	df.sort_values(by='A')
ダーク・スラテグレーにヒストグラムの色をセットする	plt.hist(データ列, color='darkslategrey')
option: シャルトリューズを使う	color = 'chartreuse'
現在の再帰の上限	sys.getrecursionlimit()
タプルの最後のn要素を捨てる	aTuple[:-n]
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
JSONLファイルにデータフレームを保存する	df.to_excel(filename)
シアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
グラフの描画で明るく色を使う	sns.set(pallete='bright')
L2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
option: ローングリーン色を使う	color = 'lawngreen'
列の組み合わせを得る	itertools.combinations(iterable, n)
縦軸の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
ビン数nでデータ列をビンニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
ファイルからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
値が集合のメンバー	element in aSet
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
横棒グラフの色を黄緑にする	plt.barh(データ列x, データ列y, color='chartreuse')
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
折れ線グラフをシャルトリューズ色を使って描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: namesをカラムの名前に変更する	names = names
ミスティローズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データ列の中にとがあるか調べる	ds.isin([value, value2])
天井を求める	math.ceil(x)
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
predicateFuncが真となる列の要素	itertools.takewhile(predicateFunc, iterable)
データフレームを10の位で四捨五入する	df.round(-1)
二つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
今日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
ファイルが存在するか調べる	os.path.exists(filepath)
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
文字列の右側から改行を取り除く	s.rstrip('\n')
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
ロバストな線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
リストを縦軸配列を横軸として大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
辞書のキーに対応した値を得る	aDict.get(key)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
パーセプトロンを使ってクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
数を実数で割って、切り捨てる	x // y
二つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
option: 茶色を使う	color = 'brown'
データフレームのカラムを百の位で丸める	df[col].round(-2)
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
辞書のキーの一覧	aDict.keys()
eの乗数を求める	math.exp(x)
最大長のある双方向キューを作る	collections.deque(maxlen=n)
空の組を得る	()
列を配列として選ぶ	df[column].values
option: 菱形印を用いる	marker = 'D'
データフレームのカラムの中にある日付データと文字列の合計を数える	df[col].isin([value, value2]).sum()
データフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column])
option: 決定木の最大深さをする	maxdepth = n
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgray')
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
option: ダークバイオレットにグラフの色を設定する	color = 'darkviolet'
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
ファイルを読み込みモードとして開く]	open(filepath, mode='r')
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
主成分分析として多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
横棒グラフを描画して、バーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
本日の日付時刻	datetime.datetime.today()
両端キューが空	len(deq) == 0
折れ線グラフの▽印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
文字列内に空白が含まれるか調べる	any(c.isspace() for c in s)
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームのリスト列の値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
グラフで用いる横軸に名前を付ける	plt.xlabel('x軸ラベル')
option: 色をアイボリーに設定する	color = 'ivory'
文字列の開始位置より後に部分文字列が含まれない	s.find(sub, start) == -1
リストとリストの散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのカラムを十の位で丸めて、整数型にする	df[col].round(-1).astype(int)
文字列の開始位置からと終了位置の間に部分文字列が存在するか調べる	s.find(sub, start, end) != -1
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
カウンタの全数を使う	aCounter.total()
列からベクトルを作る	np.array(iterable)
線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
ふたつの関係が下位集合か調べる	aSet.issubset(aSet2)
ヒストグラムの線の種類を一点鎖線にセットする	plt.hist(データ列, linestyle='dashbot')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
列と列を連結する	itertools.chain(iterable, iterable2)
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
nとn2の値を足してnにする	n += n2
データ列の値がNaNか調べる	ds.isna()
線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
箱ひげ図を描画し、平均値を追加する	plt.boxplot(データ列, showmeans=True)
マッピングの値を列挙する	aDict.values()
２つのデータフレームを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ポスターにグラフを設定する	sns.set(context='poster')
赤い実線を用いてデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
カラムのNaNをxで埋める	ds.fillna(x)
'A'列と'B'列によってによってデータフレームを破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
リストの変化を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームの最初のカラム以外を説明変数にする	説明変数 = df[df.columns[1:]]
スタッキングとしてクラス分類を行う	sklearn.ensemble.StackingClassifier()
データ列間の平均２乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
データフレームを各列毎にグループ化して列の分散を求める	df.groupby(column)[column2].var()
データ列は何年か確認する	ds.dt.year
データフレームを関数の値によってまとめたグループを見る	df.groupby(関数)
option: 色をアクアマリンに設定する	color = 'aquamarine'
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
ホットピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
xが1、もしくは2か調べる	x == 1 or x == 2
折れ線グラフのダイアモンドマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
二つの列を用いてデータフレームをソートする	df.sort_values(by=['A', 'B'])
データフレームを'A'列と'B'列毎に集約して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームのNaNを最小値で埋める	df.fillna(df.min())
xが真かどうか	bool(x)
クラスのサブクラスかテストする	issubclass(サブクラス, クラス)
半透明の一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ファイルを文字列の示す文字コードとしてオープンする]	open(filepath, encoding=s)
棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
データ列の推移を破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
文字列の先頭の文字	s[0]
今日が木曜日	datetime.datetime.today().weekday() == 3
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
リストと数列について散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
配列の標準偏差	np.std(aArray)
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
option: コーラルに色を設定する	color = 'coral'
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
シルバー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
標準出力のバッファを強制表示する	sys.stdout.flush()
カウンタの要素一覧を見る	aCounter.keys()
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
リストとリストについて散布図を描画してバツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列は数値か判定する	s.isnumeric()
日付時刻データは日付時刻データより前か調べる	aDatetime < aDatetime2
列をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
空集合を使う	set()
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
データフレームを'A'列と'B'列によってで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
縦棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
データフレームのカラムをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
文字列に列を変換して、カンマで連結する	','.join(map(str, iterable))
各列毎にデータフレームをグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
タプルの項目名の値を参照する	aDict[key]
実数が無限大	math.isinf(x)
折れ線グラフの印を左三角にする	plt.plot(データ列x, データ列y, marker='<')
文字列の右側から空白を取り除く	s.rstrip()
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
データフレームを列によって昇順に並べる	df.sort_values(by=column, ascending=True)
空白で文字列を分割し、、文字列リストに変換する	s.split()
ひとつでも非数字が文字列中に含まれるかどうか判定する	any(not c.isdigit() for c in s)
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
デックの左に文字列を入れる	deq.appendleft(element)
n進数文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
イテラブルと数列リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
xが一桁の数かどうか調べる	-9 <= x <= 9
縦棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
列を累積する	itertools.accumulate(iterable, operator.mul)
赤い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
小麦色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
option: プラムにグラフの色を変更する	color = 'plum'
日付データが日付データより後ろか調べる	aDate > aDate2
MSDの準備をする	model = sklearn.manifold.MSD(n_components=n)
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
コーンズシルク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
棒グラフをアリスブルー色を使って描画する	plt.bar(データ列x, データ列y, color='aliceblue')
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図に赤いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
数値の簡単化を行う	sympy.sympify(e)
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
配列とリストについての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
データフレームを十の位で四捨五入して、整数型にする	df.round(-1).astype(int)
八進文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
列を多重集合にする	collections.Counter(iterable)
option: 色をライトコーラルにセットする	color = 'lightcoral'
列の文字列長を列として使う	ds.str.len()
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
数列と配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームのリストカラムのどの値が最も現れるか見る	df[aList].mode()
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
マップから項目名の値か、もしくは要素を得る	aDict.get(key, element)
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
option: オールドレースにフォントの色をする	color = 'oldlace'
パールバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
濃いシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
文字コードに対応する文字を見る	chr(unicode)
リストを2回あわせた直積	itertools.product(iterable, repeat=2)
データフレームのカラムの欠損値を最大値で置換する	df[col].fillna(df[col].max())
option: 線種を破線に設定する	linestyle = 'dashed'
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
文字列が小文字かどうか調べる	s.islower()
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
青いグリッド線を引く	plt.grid(color='b')
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データ列の移り変わりを青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
文字列が全て小文字か調べる	s.islower()
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
部分文字列が部分文字列で開始するか	s.startswith(sub)
データフレームをJSONLファイルに行を付けずに保存する	df.to_csv(filename, index=None)
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
マッピングのキーの一覧を得る	aDict.keys()
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
ファイル全体を行分割して読み込む	f.readlines()
変数がマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, -oo)
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
直後の値でデータフレームの列の欠損値を埋める	df[col].fillna(method='bfill')
イテラブルとデータ列についての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
ライトゴールドロディイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
実線を用いて線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
数値の微分を求める	sympy.diff(e)
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
rgbの菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
改行で文字列を区切る	s.splitlines()
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
リストをコピーする	aList.copy()
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームのリスト列の要約統計量	df[aList].describe()
散布図をブルーバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
文字列の開始位置先に部分文字列が含まれるか	s.find(sub, start) != -1
散布図を黒い下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='k')
データ列の標本標準偏差	ds.std()
最大長nの双方向キューを作る	collections.deque(maxlen=n)
分類結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
n2がnより大きく、かつ、n3より小さい	n < n2 and n2 < n3
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
nが2で割り切れるか調べる	n % 2 == 0
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
タイムスタンプデータのタイムゾーン	aDatetime.timetz()
現在の時刻	datetime.date.today().hour
配列とリストについての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
実数の逆双曲線余弦	math.acosh(x)
リストのn番目以降の要素を得る	aList[n:]
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
rgbの星マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストとリストについて散布図を描いて、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カウンタから最頻出な項目の件数を求める	aCounter.most_common()[1]
option: 読み込む行番号をnamesで指定する	usecols = names
マッピングの値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
2進数の文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフを珊瑚色を使って描画する	plt.plot(データ列x, データ列y, color='coral')
行列の行列式	np.linalg.det(aArray)
行列にはいくつ要素が存在するか調べる	aArray.size
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightseagreen')
散布図の下三角印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームのリストカラムを10の位で丸めて整数にする	df[aList].round(-1).astype(int)
ヒストグラムの色をコーラルにセットする	plt.hist(データ列, color='coral')
option: コロンを区切り記号で使う	sep = ':'
折れ線グラフの色をカラーコードとしてセットする	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
配列の形状を計算する	aArray.shape
散布図の下三角印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
option: ロージーブラウン色を使う	color = 'rosybrown'
組の値を昇順にソートする	sorted(aTuple, reverse=True)
option: マーカーをバツに変える	marker = 'x'
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
文字列の左側から空白を除去する	s.lstrip(' ')
ミディアムオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ヒストグラムを白色として描画する	plt.hist(データ列, color='white')
欠損値も加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
散布図をライム色を使って描画する	plt.scatter(データ列x, データ列y, color='lime')
折れ線グラフに凡例を付ける	plt.plot(データ列x, データ列y, label='ラベル')
列をベクトルに変換する	np.array(iterable)
データフレームのリストカラムの値が欠損値かどうか調べる	df[aList].isna()
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
黒い右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
縦棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
ヒストグラムをラベンダーブラッシュ色として描画する	plt.hist(データ列, color='lavenderblush')
線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
リストと配列について散布図を描いて、マーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムを描画して、半透明化にする	plt.hist(データ列x, alpha=0.5)
折れ線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
折れ線グラフに赤い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
リストをタプルに変換する	tuple(aList)
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
JSON文字列を読み込む	json.loads(jsonString)
箱ひげ図としてデータ列を可視化する	plt.boxplot(データ列)
データ列の欠損値をxに設定する	ds.fillna(x)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームのカラムが何年か調べる	df[col].dt.year
濃いシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
配列の形状を変形する	aArray.reshape(行数, 列数)
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
データ列のNaNを直前の値に指定する	ds.fillna(method='ffill')
カウンタ同士で共通部分	aCounter & aCounter2
文字列でフォーマットして現在を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
要素をセットに追加する	aSet.add(element)
データフレームの行列を入れ替える	df.T
TSVファイルをカラムの名前を指定せず読む	pd.read_csv(filename, header=None)
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
オプションで、標準出力を用いる	file = sys.stdout
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
バイナリ書き込みできるようにファイルをオープンする]	open(filepath, mode='wb')
データフレームを各列と列の組み合わせ毎に集計し、、個数を求める	df.groupby([column, column2], as_index=False).count()
キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
ヒストグラムをブランチドアーモンド色を用いて描画する	plt.hist(データ列, color='blanchedalmond')
バギングで回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
nの8進数文字列	oct(n)[2:]
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
今日の日付を求める	datetime.date.today()
両端キューをデキューする	deq.popleft()
データフレームの列の中にある文字列と文字列の合計をカウントする	df[col].isin([value, value2]).sum()
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
option: UTF8を使用する	encoding = 'utf-8'
データフレームの中の列をビン数nで分割する	pd.cut(df[col], n)
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
にバイオリン図でデータフレームを図示する	sns.violinplot(x='カテゴリ列', y='列', data=df)
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
オレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
option: ブランチドアーモンドにグラフの色を設定する	color = 'blanchedalmond'
クラス分類を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingClassifier()
棒グラフをパールバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palevioletred')
文字列を正規表現で区切る	re.split(pattern, s)
文字列の開始位置以降が部分文字列で開始するか調べる	s.startswith(sub, start)
符号付きで整数nを長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
クラス分類の正解率を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
実数はNaNか調べる	math.isnan(x)
データフレームのカラムと列のヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
散布図に黒い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='k')
ガンマ関数を使用する	math.gamma(x)
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
option: グリーンイエロー色を使用する	color = 'greenyellow'
リストとリストの散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
データ列のヒストグラムをプロットする	plt.hist(データ列)
キューをタプルに変換する	tuple(deq)
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
文字列が文字列リストのいづれか確認する	s in aStringList
ユニークな値を要素とする行列	np.unique(aArray)
ヒストグラムをグリーン色を用いて描画する	plt.hist(データ列, color='green')
データフレームをグループ化し、各列に対し個数を算出する	df.groupby(column)[column2].count()
散布図をrgbの下三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をターコイズに指定する	plt.plot(データ列x, データ列y, color='turquoise')
リスト内の要素が少なくともひとつ真	any(aList)
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
黄緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームのカラムの25パーセンタイル	df[col].quantile(0.25)
option: グラフの色をパープルに設定する	color = 'purple'
線グラフを半透明の一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ファイルをBOM付きを用いて開く]	open(filepath, encoding='utf_8_sig')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
文字列を区切りで分割して文字列リストにする	s.split(sep)
option: フォントの色を小麦色に設定する	color = 'wheat'
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
タプルの先頭のn要素を取り除く	aTuple[n:]
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
配列とリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
numpyを使う	import numpy as np
散布図の▽マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
部分文字列が文字列の開始位置より後に含まれないか調べる	s.find(sub, start) == -1
ファイルを開いて]、読み込みストリームを使う	open(filepath, mode='r')
文字列をケースを無視してパターンで分ける	re.split(pattern, s, flags=re.IGNORECASE)
文字列からformatのパターンでタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
乱数の行列を初期化する	np.random.random((行数, 列数))
名前付きタプルを用いる	import collections
両端キューのn番目	deq[n]
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
option: バッファリングを無効にする	buffering = 0
データフレームのリストカラムをValueMapでまとめて変更する	df[aList].replace(ValueMap)
自然数の階乗を求める	math.factorial(n)
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: 読む行番号をnamesで指定する	usecols = names
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
シーグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: バイナリ書き込み用に変更する	mode = 'wb'
線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
nにn2を加算する	n + n2
データフレームから指定した４つの列のみ抽出する	df[[column, column2, column3, column4]]
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
折れ線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
nとn2の商	n / n2
スピアマン順位相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
リストとイテラブルについて散布図を描画して、マーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
Pandasで日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
部分文字列を文字列の接尾辞からエラーなく除く	s.removesuffix(sub)
折れ線グラフをライトスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
降順に'A'列によってでデータフレームをソートする	df.sort_values(by='A', ascending=False)
縦棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ラベンダーブラッシュ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
双曲線正弦の逆数を算出する	math.asinh(x)
折れ線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
y軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
nがn2以下かどうか調べる	n <= n2
下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
表の内容を見る	df.head()
option: 色をライムに指定する	color = 'lime'
線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
ダークカーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
リストとリストについて散布図を描画して、菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
分数の分母	q.denominator
nが3で割り切れるか調べる	n % 3 == 0
データフレームの2つのカラムを並べて箱ひげ図を用いて作図する	plt.boxplot([df['カラム'], df['カラム']])
option: ピーチパフ色を用いる	color = 'peachpuff'
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: スキップする列番号をnamesで指定する	skiprows = names
箱ひげ図をプロットして、平均を加える	plt.boxplot(データ列, showmeans=True)
散布図に黒い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフの▼マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散らばりを作図する	plt.scatter(データ列x, データ列y)
データフレームを複数の列の値によってグループ化し要約統計量を計算する	df.groupby(columns).describe()
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
方程式の解を求める	sympy.solve(e)
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
データフレームを'A'列と'B'列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
データ列と配列について散布図を描画してマーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をロージーブラウンにセットする	plt.hist(データ列, color='rosybrown')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームのカラムのどの値が最も現れるか調べる	df[col].mode()
異なる列をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: namesをカラムの名前に設定する	names = names
データ列の空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
ゼロ埋めされた複素数型のベクトルを作る	np.zeros(要素数, dtype=bool)
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
option: グラフの色をシアンに設定する	color = 'cyan'
ヒストグラムをバイオレット色を用いて描画する	plt.hist(データ列, color='violet')
リネン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
レモンシフォン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームを各列毎にグループ化して列の合計を求める	df.groupby(column)[column2].sum()
データフレームのポイントプロットを描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='grey')
option: バイナリ書き込みモードに変更する	mode = 'wb'
タン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
マッピングを並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームをグループ化し各列に対し分散を求める	df.groupby(column)[column2].var()
データフレームの列の値がx以下のデータを選択する	df[df[column] <= x]
リストをビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
option: バイナリ書き込みモードにセットする	mode = 'wb'
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
option: グラフの色をオレンジレッドにセットする	color = 'orangered'
分類モデルの適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
プロットの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
データフレームを各列毎にグループ化し、、列の平均値を算出する	df.groupby(column)[column2].mean()
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
タイムスタンプ型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ダークレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
サドルブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
文字列が数字か調べる	s.isdigit()
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ディープスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
エクセルデータファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
改行で区切って２つの変数をプリントする	print(value, value2, sep='\n')
ヒストグラムを小麦色色を用いて描画する	plt.hist(データ列, color='wheat')
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
散布図をライトシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: グラフの色をシルバーに設定する	color = 'silver'
year年day月を日付時刻にする	datetime.datetime(year=year, month=month, day=1)
連番の行列の作成する	np.arange(開始値, 終了値, 等差)
Pandasで文字列のUNIX時間からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームの列概要	df.info()
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
データフレームを列によってグループ化し、それぞれのグループごとの個数を算出する	df.groupby(column).count()
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
ヒストグラムをシーグリーン色を用いて描画する	plt.hist(データ列, color='seagreen')
デピンク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
ポスター用にグラフを設定する	sns.set(context='poster')
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='grey')
縦棒グラフを描画し、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
今日が金曜日	datetime.datetime.today().weekday() == 4
折れ線グラフの色をマルーンにセットする	plt.plot(データ列x, データ列y, color='maroon')
グラフの縦軸のキャプションをuntitledにセットする	plt.ylabel('y軸ラベル')
option: ライトスカイブルーにフォントの色を設定する	color = 'lightskyblue'
改行なしに文字列をプリントする	print(value, end='')
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
配列とイテラブルについて散布図を描画してマーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームを10の位で丸める	df.round(-1)
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
イテラブルを文字列に変換して一つにする	''.join(map(str, iterable))
両端キューを全て取り除く	deq.clear()
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
正規表現で文字列を区切る	re.split(pattern, s)
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
文字列リストにイテラブルを変換して、部分文字列によって一つにする	sub.join(map(str, iterable))
option: ブラック色を使う	color = 'black'
データフレームのリストカラムのNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
ファイルから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
逆双曲線正弦を算出する	math.asinh(x)
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
インディアンレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
option: ドジャーブルー色を使用する	color = 'dodgerblue'
データフレームをTSV形式のファイルから読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
複数のデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
散布図をダークグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
x座標のラベルを指定する	plt.xlabel('x軸ラベル')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
option: 黄緑色を使う	color = 'chartreuse'
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
ヒストグラムでカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ヒストグラムの線種を点線に変更する	plt.hist(データ列, linestyle='dotted')
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
16進文字列を整数に変換する	int(s, 16)
文字列リストにイテラブルを変換して、空白によって結合する	' '.join(map(str, iterable))
文字列内にアルファベットがあるかどうか調べる	any(c.isalpha() for c in s)
CSV形式でデータフレームをJSONLファイルに保存する	df.to_csv(filename)
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
option: モカシンを用いる	color = 'moccasin'
データフレームを'A'列と'B'列でソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
変数がマイナス無限大に近づくとき数式の極限値を算出する	sympy.limit(e, z, -oo)
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
右にn個分両端キューの要素をローテンションする	deq.rotate(n)
配列とリストの散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
セットに値を追加する	aSet.add(element)
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
グラフのインチをセットする	plt.figure(figsize=(横幅, 高さ))
折れ線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ライトグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
文字列を隔離する	sys.intern(s)
数値を水色でプリントする	print(f'\033[36m{value}\033[0m')
ホットピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
出力ストリーム全体を行単位で分割して読み込む	f.readlines()
線グラフの色をフクシアにセットする	plt.plot(データ列x, データ列y, color='fuchsia')
数の値が整数	x.is_integer()
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
ファイル名のセパレータ記号	os.sep
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
文字列は全て十進数字かどうか	s.isdecimal()
散布図の四角印の色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
各列毎にデータフレームをグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データ列の正規分布に対する上下広がり	ds.skew()
大文字を全部使う	string.ascii_uppercase
散布図を赤い大バツマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
option: ネイビーを使う	color = 'navy'
データ列を十の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
数式の変数に数値を代入する	e.subs(z, e2)
文字列の先頭からタブを除去する	s.lstrip('\t')
折れ線グラフに丸マーカーを加える	plt.plot(データ列x, データ列y, marker='o')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
y座標の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
ダークレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: グラフの色をダークスレートブルーにセットする	color = 'darkslateblue'
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
コーンズシルク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
欠損値を含めて列の値でデータフレームをグループ化する	df.groupby(column, dropna=False)
実数で浮動小数点数を割って、切り捨てる	x // y
日付時刻データが火曜日か	aDatetime.weekday() == 1
複数の列によって昇順にデータフレームを破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
イテラブルから一つランダムに選ぶ	random.choice(iterable)
オプションで、標準出力に出力する	file = sys.stdout
最初の列を表から消す	df[df.columns[1:]]
ヒストグラムをタン色として描画する	plt.hist(データ列, color='tan')
部分文字列で文字列を分割したときの残りの文字列を使う	s.partition(sub)[-1]
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ビン数nとして配列を分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
数列とリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
リストとリストの散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
グラフの色を全般的に暗くする	sns.set(pallete='dark')
分割数nとしてデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: ダークブルー色を使用する	color = 'darkblue'
トマト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
全ての印字できる文字	string.printable
列'A'と列'B'をキーにして2つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムの色を濃いシアンに指定する	plt.hist(データ列, color='darkcyan')
破線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
カーキ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
option: 配列のデータ型を指定する	dtype = np.int8
半透明の一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
作画で用いる色を指定する	sns.set(pallete=パレット名)
データフレームの欠損値がある部分を色つけする	df.style.highlight_null()
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
JSONファイルのファイルを辞書に変換する	json.load(fin)
ビン数nでデータ列をビン分割する	pd.cut(ds, n)
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
分類結果の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: ダイアモンド印を描画する	marker = 'D'
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
各列毎にデータフレームをグループ化して、列の個数を求める	df.groupby(column)[column2].count()
淡い茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
option: グラフの色をライトグレーに指定する	color = 'lightgrey'
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
オレンジレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
ASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: リネンにグラフの色を設定する	color = 'linen'
nがn2よりも小さいか調べる	n < n2
データ列の折れ線グラフをポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
option: ダークバイオレットにフォントの色を設定する	color = 'darkviolet'
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
行列の列ごとの平均値を算出する	np.mean(aArray, axis=0)
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
散布図に菱形印を加える	plt.scatter(データ列x, データ列y, marker='D')
RANSACとしてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
横棒グラフを描く	plt.barh(ラベル列, データ列)
Pandasで、フォーマットfmtとしてデータフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col], format=fmt)
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字列に日本語が含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストについてリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
小数点数とyの斜辺を求める	math.hypot(x, y)
リストを逆さにする	reversed(aList)
ライトスチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightsteelblue')
データフレームを'A'列で小さい順に破壊的に整列する	df.sort_values(by='A', ascending=True, inplace=True)
ケンドールとしてデータフレームのリストで指定された列の相関行列	df[aList].corr(method='kendall')
空白	' '
option: パープルにグラフの色を設定する	color = 'purple'
データ列の離れ具合を描画する	sns.residplot(x=データ列, y=データ列)
新しい文字列で文字列を置き換える	s.replace(sub, newsub)
オリーブ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
逆正接	math.atan(x)
折れ線グラフに黒い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムをパレットトルコイズ色として描画する	plt.hist(データ列, color='paleturquoise')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
データフレームのカラムの中にあると文字列の合計を求める	df[col].isin([value, value2]).sum()
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
リストとリストの散布図に赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データ列の第三四分位数	ds.quantile(0.75)
辞書から最後の項目をポップする	aDict.popitem()
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストとリストについての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
正規分布によるパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
option: ブラウンを用いる	color = 'brown'
数式の変数の解を方程式として算出する	sympy.solve(e, z)
データ列の折れ線グラフをプロットして色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
浮動小数点数のn乗	pow(x, n)
プログラムの実行を正常に停止する	sys.exit(0)
データフレームのカラムを目的変数にする	目的変数 = df['列名']
ユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
option: グラフの色を小麦色に変更する	color = 'wheat'
双方向キューのデータを右にn個分ローテンションする	deq.rotate(n)
数値を両端キューから取り除く	deq.remove(element)
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
データフレームの列のどの値が頻出か調べる	df[col].mode()
文字列が文字列リストに含まれるか調べる	s in aStringList
列をキーとして２つのデータフレームをジョインする	pd.merge(df, df2, on=column)
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
データフレームを各列と列の組み合わせ毎にグループ分けして個数を計算する	df.groupby([column, column2], as_index=False).count()
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
最頻値でデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].mode().iloc[0])
要素を双方向キューの右に入れる	deq.append(element)
データフレームの中の列をn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: マルーン色を使う	color = 'maroon'
日付データの曜日を整数で見る	aDate.weekday()
配列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
データフレームに重複があるか確認する	df.duplicated()
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
ファイルパスから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
option: 星マーカーを使う	marker = '*'
データフレームをTSVでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
10を底とする小数点数の対数	math.log10(x)
ひとつでも非英数字が文字列中に含まれる	any(not c.isalnum() for c in s)
散布図に黒いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの色をハニーデューにセットする	plt.hist(データ列, color='honeydew')
青い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
文字列が全て識別子名か調べる	s.isidentifier()
行を付けずにJSONLファイルにデータフレームを保存する	df.to_csv(filename, index=None)
実数の双曲線正弦	math.sinh(x)
データフレームのリスト列が正規分布からどれだけ、歪んでいるか見る	df[aList].kurt()
Pandasで、フォーマットfmtでデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format=fmt)
タプルを引数として展開して表示する	print(*aTuple, sep=',')
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
イテラブルを両端キューに変換する	collections.deque(iterable)
ファイルをUTF8を用いてオープンする]	open(filepath, encoding='utf-8')
三自然数の最小公倍数を求める	math.lcm(n, n2, n3)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
リストとリストについて散布図を描画してマーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
データフレームの列の値がxより大きくx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
文字列を部分文字列で区切る	s.split(sub)
カラム名リストをデータ型でフィルタする	df.select_dtypes(型).columns
色付きの破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームのカラムの中に含まれる日付データの数をカウントする	df[col].isin([value]).sum()
xでデータ列のNaNを置き換える	ds.fillna(x)
折れ線グラフをクリムゾン色を用いて描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
データをL1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームのカラムの欠損値をメディアンに設定する	df[col].fillna(df[col].median())
何回まで再帰ができるか	sys.getrecursionlimit()
option: グラフの線の種類を実線に変更する	linestyle = 'solid'
データフレームを列名リストによって昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
横棒グラフをミスティローズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mistyrose')
二進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
マッピングからキーの値か、もしくは要素を得る	aDict.get(key, element)
黒色で変数を表示する	print(f'\033[30m{value}\033[0m')
ヒストグラムの色をライトブルーに指定する	plt.hist(データ列, color='lightblue')
サイコロ	random.randint(1, 6)
データフレームの中の列を等間隔でn個に分割する	pd.cut(df[col], n)
データフレームの列の中にいくつが含まれるか数える	df[col].isin([value]).sum()
主成分分析としてパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
クラス分類をMLPでする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
グラフのカラーテーマを色差別なくする	sns.set(pallete='colorblind')
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
下三角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
配列の次元数を求める	aArray.ndim
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームのリスト列の欠損値を最大値に指定する	df[aList].fillna(df[aList].max())
辞書から項目名の値を見る	aDict.get(key)
option: フォントの色をマルーンに指定する	color = 'maroon'
nが3で割り切れる	n % 3 == 0
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
縦棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
タンにヒストグラムの色を設定する	plt.hist(データ列, color='tan')
文字列は全て十進数字	s.isdecimal()
ゼロ埋めされたベクトル	np.zeros(要素数)
option: グラフの色を暗い赤に設定する	color = 'darkred'
ヒストグラムの色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>')
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
ヒストグラムの色をライトスチールブルーに変更する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムの色を暗い赤に変更する	plt.hist(データ列, color='darkred')
辞書の項目数	len(aDict)
棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
散布図にrgbの▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
nをn2でわる	n / n2
二つのデータフレームを列'A'と列'B'をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
option: ミディアムシアグリーンを使用する	color = 'mediumseagreen'
データフレームから破壊的に重複した行を落とす	df.drop_duplicates(inplace=True)
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
option: ゴーストホワイト色を使う	color = 'ghostwhite'
文字列の開始位置からと終了位置の範囲に部分文字列が存在する	s.find(sub, start, end) != -1
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
グラフのx座標に名称を付ける	plt.xlabel('x軸ラベル')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
グラフをポスター用に設定する	sns.set(context='poster')
データ列をインポートする	import pandas as pd
option: ダークターコイズにフォントの色をセットする	color = 'darkturquoise'
サーモン色でヒストグラムを描画する	plt.hist(データ列, color='salmon')
データフレームのリスト列の中に文字列があるかどうか	df[aList].isin([value])
データフレームのカラムは何時か調べる	df[col].dt.hour
nをn2で割った余りをnとする	n %= n2
試しに何か動かしてみる	print('Hello World')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
２数の最小値を計算する	min(x, y)
データ列の正規分布に対する左右対称性を計算する	ds.kurt()
データ列の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
option: グラフの色をタンに設定する	color = 'tan'
option: スノーにフォントの色を設定する	color = 'snow'
グラフの縦横の比率を等しくする	plt.axis('equals')
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
floatの最大値	sys.float_info.max
文字列内にひとつでも空白が含まれるかどうか調べる	any(c.isspace() for c in s)
グラフの描画で淡くカラーテーマを使用する	sns.set(pallete='muted')
棒グラフをゴールド色を用いて描画する	plt.bar(データ列x, データ列y, color='gold')
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
散布図にポイントマーカーを使用する	plt.scatter(データ列x, データ列y, marker='.')
CSVファイルファイル名がか調べる	filename.endswith('.csv')
時間を使用する	import time
数値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
option: 色をサンディーブラウンに設定する	color = 'sandybrown'
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
option: 色をライトサーモンに設定する	color = 'lightsalmon'
Pandasでフォーマットfmtで文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
ダーク・スラテグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
Pandasで、データフレームのcollを書式でタイムスタンプ型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
option: プラムにフォントの色を設定する	color = 'plum'
三つのデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
ピーチパフ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
項目名が辞書上で定義済み	key in aDict
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: グラフを一点鎖線に変更する	linestyle = 'dashbot'
組の要素を並べ直す	sorted(aTuple)
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
棒グラフの色をrgbにする	plt.bar(ラベル列, データ列, color=rgb)
カウンタのそれぞれの項目を、その出現回数だけ列挙する	aCounter.elements()
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
ヒストグラムをミスティローズ色として描画する	plt.hist(データ列, color='mistyrose')
数値を赤色にする	f'\033[31m{value}\033[0m'
グラフの横軸を対数に変更する	plt.xscale('log')
二つの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
リストを順に出力する	print(*aList)
nを符号なしでバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
リストと配列について散布図を描画して、マーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
rgbの▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
実行結果を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
option: グラフの色をグレーに設定する	color = 'gray'
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
option: 配列のデータ型を指定する	dtype = np.int32
カラムの欠損値を平均で埋める	ds.fillna(ds.mean())
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
ヒストグラムをシアン色を使って描画する	plt.hist(データ列, color='cyan')
ペールグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
配列と数列の散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
分割数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
グラフを画面用に設定する	sns.set(context='notebook')
データフレームのリストカラムの中にいくつがあるか数える	df[aList].isin([value]).sum()
組み合わせを算出する	math.comb(n, k)
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
文字列がリストの要素でないかどうか	element not in aList
文字列をバイト列にする	s.encode(encoding='utf-8', errors='strict')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
カラムを100の位で四捨五入する	ds.round(-2)
ゼロ埋めされた3二ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
文字列の先頭でパターンにASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
nをn2だけ減らす	n -= n2
疑似乱数を正規分布を使って得る	random.normalvariate(mu=0.5, sigma=0.2)
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
データフレームのリストカラムの欠損値を後の行の値に設定する	df[aList].fillna(method='bfill')
線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
実数を実数で割って、切り捨てる	x // y
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
書き込み用にEUCでファイルをオープンする]	open(filepath, mode='w', encoding='euc_jp')
タイムスタンプデータは何秒か知る	aDatetime.second
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
データフレームのリストカラムの中に文字列があるかどうか	df[aList].isin([value])
黒い三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフの色をダークバイオレットにセットする	plt.plot(データ列x, データ列y, color='darkviolet')
双方向キューをクリアする	deq.clear()
データフレームのNaNが含まれる箇所に色を付ける	df.style.highlight_null()
データフレームの列概要を調べる	df.info()
赤色で値を表示する	print(f'\033[31m{value}\033[0m')
文字列内にひとつでも英数字がある	any(c.isalnum() for c in s)
ナバホホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
カテゴリデータをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
赤い右三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
要素がセットの要素でないかどうか判定する	element not in aSet
データフレームの相関行列をヒートマップでグラフ化する	sns.heatmap(df.corr())
文字列中にひとつでも非数字があるかどうか確認する	any(not c.isdigit() for c in s)
option: ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
こんにちは世界と出力する	print('Hello World')
タプルの平均値を求める	sum(aTuple)/len(aTuple)
データフレームの中央値を求める	df.median()
リストとリストについて散布図を描画し、、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームとデータフレームの列を横方向に一つにする	pd.concat([df, ds], axis=1)
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフのダイアモンド印を赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
最大最小値でデータをスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
四角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
レベッカパープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
ファイルをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
option: マーカーの線幅を設定する	markeredgewidth = 2.5
分類モデルの偽陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データ列とリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
平均値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].mean())
ファイルを読み込みモードで開く]	open(filepath, mode='r')
option: カンマを区切り記号で使う	sep = ','
ロージーブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
円グラフのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
イテラブルの移り変わりを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
赤い菱形マーカーを配列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
変数が0に近づくときの数値の極限値を求める	sympy.limit(e, z, 0)
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
凡例をプロット中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
別の文字列に回数を制限して文字列中の部分文字列を置換する	s.replace(sub, newsub, n)
黒いバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
キーがマッピングにあるか調べる	key not in aDict
日付時刻データの分を求める	aDatetime.minute
nとn2の論理積	n & n2
option: 大バツ印を描画する	marker = 'X'
イテラブルの各要素に対してpredicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
表示する列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
文字列がリストに含まれるか	element in aList
２つのデータフレームを縦方向につなぐ	pd.concat([df, df2])
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
モデルを訓練する	model.fit(説明変数, 目的変数)
データフレームを複数の列で小さい順に並べる	df.sort_values(by=column, ascending=True)
列'A'と列'B'をキーにして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: ライトブルーに色を変更する	color = 'lightblue'
option: ミントクリームを使用する	color = 'mintcream'
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
表の列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
整数nを十六進文字列に変換する	hex(n)[2:]
事前にパターンをケースを無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
option: バツマーカーを描画する	marker = 'x'
一点鎖線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: カンマを区切りで使う	sep = ','
n2がnより大きくかつ、n3未満	n < n2 and n2 < n3
ベクトルの平均値	np.mean(aArray)
散布図に下三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
データフレームの行を条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
日付データが火曜日か調べる	aDate.weekday() == 1
option: 色をライトシアンに設定する	color = 'lightcyan'
前の行の値でデータフレームの列の欠損値を埋める	df[col].fillna(method='ffill')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=0)
表データから指定された二つの列を抽出する	df[[column, column2]]
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
空のセット	set()
折れ線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
表データを'A'列でソートする	df.sort_values(by='A')
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
整数nの二進数文字列	bin(n)[2:]
日付時刻データがタイムスタンプデータより後ろ	aDatetime > aDatetime2
両端キューの長さを制限する	collections.deque(maxlen=n)
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ファイルを開いて]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
イテラブルとイテラブルをzipする	itertools.zip_longest(iterable, iterable2)
グレー色を使ってヒストグラムを描画する	plt.hist(データ列, color='grey')
線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
今日のローカルな日付時刻	datetime.datetime.today()
部分集合か確認する	aSet.issubset(aSet2)
多層パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
リストとリストについての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図を三角印で描画する	plt.scatter(データ列x, データ列y, marker='^')
option: 書き込みモードに設定する	mode = 'w'
データ列を使う	import pandas as pd
プロットの凡例を表示する	plt.legend()
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
スレートブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: フォントの色をシエナにする	color = 'sienna'
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
データフレームを散布図で図示して、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームの中のNaNの合計をカウントする	df.isna().sum()
xのハッシュ値	hash(x)
青い△印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
日付データの日を使う	aDate.day
データ列を等間隔でn個に分割する	pd.cut(ds, n)
外れ値に強い線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
グラフのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
縦棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのそれぞれのグループごとの合計を算出する	df.groupby(column).sum()
線グラフの色をダークバイオレットに変更する	plt.plot(データ列x, データ列y, color='darkviolet')
option: フォレストグリーン色を使う	color = 'forestgreen'
option: グラフの色をペールグリーンにする	color = 'palegreen'
赤い大バツマーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='r')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
データ列の値がNaNかどうか	ds.isna()
JSONLファイルにタブ区切りでデータフレームを保存する	df.to_csv(filename, sep='\t')
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
パウダーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: ミントクリームを使う	color = 'mintcream'
リストから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
データフレームの列の値がxより小さいデータを抽出する	df[df[column] < x]
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
折れ線グラフを描く	plt.plot(データ列x, データ列y)
数から実数を引く	x - y
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
黒い▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
カウンタの要素を列挙する	aCounter.keys()
データ列の標準偏差	ds.std()
文字列を空白で区切って文字列リストに変換する	s.split()
タプルのキーとその項目をペアとして取り出す	aDict.items()
二つの列を用いてによって破壊的にデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
横棒グラフをフクシア色として描画する	plt.barh(データ列x, データ列y, color='fuchsia')
文字列の先頭から部分文字列を見つける	s.find(sub)
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
ミッドナイトブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
option: フォントの色をネイビーに設定する	color = 'navy'
データフレームで、列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
変数が無限大に近づく時、数式の極限値を求める	sympy.limit(e, z, oo)
ファイルからの入力ストリームを求める	open(filepath)
rgbのバツマーカーをリストと数列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
濃い青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
英字の文字列	string.ascii_letters
0から始まる無限数列	itertools.count()
範囲を指定して乱数を得る	random.randint(最小値, 最大値)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
オブジェクトがリストに含まれないかどうか調べる	element not in aList
疑似乱数平均と標準偏差からを発生させる	random.normalvariate(mu=0.5, sigma=0.2)
カウンタのユニークな要素をリストとして得る	list(aCounter)
option: 色を黄緑にセットする	color = 'chartreuse'
データフレームの列を削除する	df.drop(column, axis=1)
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
半透明の一点鎖線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
組内の要素が少なくともひとつ真	any(aTuple)
ビン数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
白いヒストグラムを描画する	plt.hist(データ列, color='w')
縦棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
データフレームを列で並べる	df.sort_values(by=column)
ヒストグラムの色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
nとn2の論理和	n | n2
CSVファイルを用いてデータフレームをJSONLファイルに保存する	df.to_csv(filename)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
日付時刻データは何秒か知る	aDatetime.second
紺碧色として散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
データフレームを表示するとき、折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
データフレームをまとめて小数点以下n桁で四捨五入する	df.round(n)
線グラフをミディアムシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
グラフのx座標に名前を付ける	plt.xlabel('x軸ラベル')
黒いダイアモンドマーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのカラムの日	df[col].dt.day
文字列リストを連結する	''.join(aStringList)
表データから最後の列を除く	df[df.columns[:-1]]
行列と同じ大きさの空配列を作る	np.empty_like(aArray)
データ列の中に存在する文字列の合計を数える	ds.isin([value]).sum()
プロットにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームのリストカラムを正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
データフレーム全体を降順でインデックスによってソートする	df.sort_index(ascending=False)
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
option: スラッシュを分割記号で使う	sep = '/'
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
値を青色でプリントする	print(f'\033[34m{value}\033[0m')
両端キューの中に要素が含まれてるかどうか調べる	element in deq
option: ミディアムパープルにグラフの色をする	color = 'mediumpurple'
ダークシアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データ列のユニークな値の個数を見る	ds.nunique()
ペルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
グラフに鉛直方向の点線をつける	plt.axvline(x=0, linestyle='dotted')
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データフレームのカラムの未入力値を前の値で埋める	df[col].fillna(method='ffill')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
option: ライトスレイグレー色を使う	color = 'lightslategray'
文字列をカンマで分割し、、列挙する	s.split(',')
勾配ブースティング回帰木を準備する	model = sklearn.ensemble.GradientBoostingRegressor()
rgbの右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
リストの出力を改行しないで行う	print(value, end='')
n引くn2	n - n2
折れ線グラフのダイアモンド印の大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
実数の指数を求める	math.frexp(x)[1]
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
折れ線グラフをゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='goldenrod')
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
リストと数列についての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
文字列をASCII限定としてパターンで区切る	re.split(pattern, s, flags=re.ASCI)
データフレームをランダムサンプリングする	df.sample()
ロードされたモジュールの一覧を知る	sys.modules
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
nを二進文字列に変換する	bin(n)[2:]
データ列間の平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: ホットピンクにグラフの色を変更する	color = 'hotpink'
nの無限の数列を得る	itertools.repeat(n)
無限にnから数え上げるする	itertools.count(start=n)
データフレームをグループ化しそれぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
散布図の印を右三角にする	plt.scatter(データ列x, データ列y, marker='>')
データフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column])
標準入力を使用する	sys.stdin
実数以上の最小の整数	math.ceil(x)
文字列がリストに含まれるかどうか	element in aList
Pandasで、データ列をタイムスタンプに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
グリッド線を赤くする	plt.grid(color='r')
線グラフをマルーン色として描画する	plt.plot(データ列x, データ列y, color='maroon')
option: アイボリーを使用する	color = 'ivory'
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データフレームから指定された三つの列のみ抽出する	df[[column, column2, column3]]
データフレームのカラムを整数に丸める	df[col].round()
分類モデルを学習する	model.fit(説明変数, 目的変数)
棒グラフをダークカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
データフレームの列のNaNをモードで埋める	df[col].fillna(df[col].mode().iloc[0])
ヒストグラムをスチールブルー色を使って描画する	plt.hist(データ列, color='steelblue')
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ダークオレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
ユニークな値を要素とする行列を使う	np.unique(aArray)
option: 色をライトスレイグレーに指定する	color = 'lightslategrey'
タイムスタンプデータが日付時刻データより後ろか	aDatetime > aDatetime2
データフレームの列の上位25%	df[col].quantile(0.25)
パスのセパレータ記号	os.sep
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームの先頭のカラム以外を説明変数にする	説明変数 = df[df.columns[1:]]
バイトオーダを確認する	sys.byteorder
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
option: パレットトルコイズ色を使う	color = 'paleturquoise'
option: 青緑にグラフの色を指定する	color = 'teal'
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
ファイルを読み込みできるように開く]	open(filepath, mode='r')
ミスティローズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ダークオリーブグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
縦棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
x,yの複素数	complex(x, y)
データフレームとデータフレームの列を連結する	pd.concat([df, ds], axis=1)
昇順に複数の列によってデータフレームを並べる	df.sort_values(by=column, ascending=True)
option: エンコーディングをSJISに変更する	encoding = 'shift_jis'
タイムスタンプデータが何月か知る	aDatetime.month
ファイル名がCSVファイル	filename.endswith('.csv')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
縦棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
要素は集合に含まれない	element not in aSet
nとn2の差を算出する	n - n2
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
浮動小数点数を数で除する	x / y
表データの列の値がリストに含まれる行を選択する	df[df[column].isin(aList)]
データフレームを関数の値によって分類する	df.groupby(関数)
option: 先頭列を行に設定する	index_col = 0
nの2乗を算出する	n ** 2
縦棒プロットを描画する	plt.bar(ラベル列, データ列)
リストの中の最小値を求める	min(aList)
JSONファイルの入力ストリームを辞書にする	json.load(fin)
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
項目名が辞書に存在するか確認する	key not in aDict
データフレームを各列と列の組み合わせ毎にグループ分けし、、最大値を求める	df.groupby([column, column2], as_index=False).max()
折れ線グラフの色をダークスラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategray')
双方向キューのデータをインプレースに逆に並べ直す	deq.reverse()
グラフを正方形にする	plt.axis('equals')
列の各要素を関数でフィルタする	map(func, iterable)
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
ファイルからを読む	pd.read_excel(filename)
値がセットのメンバーでないか確認する	element not in aSet
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
列を無限に繰り返す	itertools.cycle(iterable)
nがリストのどれかか判定する	n in aList
折れ線プロットのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をピーチパフに指定する	plt.hist(データ列, color='peachpuff')
nをn2だけ左シフトする	n << n2
赤い一点鎖線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
大量のデータ列が正規分布に従うかどうか調べる	scipy.stats.kstest(データ列, 'norm')
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
option: 茶色色を使用する	color = 'brown'
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
リストの平均	sum(aList)/len(aList)
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
散布図にクロスマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
option: オールドレースを用いる	color = 'oldlace'
赤いダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
折れ線グラフの菱形マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを列で集約して、それぞれのグループごとの最小値を算出する	df.groupby(column).min()
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
ライトグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
特異値分解として濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
y軸の目盛を表示しない	plt.yticks([])
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データ列を10の位で丸める	ds.round(-1)
線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: オレンジ色を用いる	color = 'orange'
二つの集合の交わりを使う	aSet.intersection(aSet2)
線グラフの色をモカシンにする	plt.plot(データ列x, データ列y, color='moccasin')
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
option: スレートブルーを使用する	color = 'slateblue'
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
折れ線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
Pandasで、文字列を日付データにする	pd.to_datetime(s)
データフレームのNaNをモードにセットする	df.fillna(df.mode().iloc[0])
イテラブルとイテラブルの直積を得る	itertools.product(iterable, iterable2)
文字列の開始位置からと終了位置の範囲に部分文字列が含まれる	s.find(sub, start, end) != -1
リストをダミー変数にする	pd.get_dummies(iterable)
自然数個からk個取り出したときの順列の総数を求める	math.perm(n, k)
因子分析を行う	model = sklearn.decomposition.PCA(n_components=n)
リストの散らばりを可視化する	plt.scatter(データ列x, データ列y)
データフレームのカラムの要約統計量を算出する	df[col].describe()
数値の因数分解を行う	sympy.factor(e)
データフレームの列名を指定した列名一覧に置き換える	df.columns = columns
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
OSがWindowsかどうか調べる	sys.platform.startswith('win32')
折れ線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
標準入力から1行分読み込む	sys.stdin.readline()
横棒グラフをコーンズシルク色を用いて描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
日付データをn週間前にする	aDate - datetime.timedelta(weeks=n)
空の階層化マップ	collections.ChainMap()
データフレームを'A'列によってソートする	df.sort_values(by='A')
散布図の右三角印の太さを設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
エクセルファイルファイルからを読み込む	pd.read_excel(filename)
データフレームの中に文字列がある	df.isin([value])
データフレームのカラムが正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
ファイルの絶対ファイルパス	os.path.abspath(filepath)
折れ線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
行列の差	aArray - aArray2
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームをタブ区切りとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームを2つの列によって昇順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
棒グラフをインディアンレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='indianred')
タプルの要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
配列のスカラー倍を使う	aArray * n
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
カーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
option: ダークグレー色を使用する	color = 'darkgray'
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
コーンフラワーブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
最初のカテゴリーを無視し、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
文字列を最後の部分文字列で二分し、前半の文字列を求める	s.rpartition(sub)[0]
タンジェント	math.tan(x)
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
リストを境界値として列をビン分割する	pd.cut(ds, aList)
シーグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='seagreen')
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
論文にグラフの用途を指定する	sns.set(context='paper')
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
データフレームの列名を列から文字列に付け直す	df.rename(columns={column: name})
ヒストグラムを破線に変更する	plt.hist(データ列, linestyle='dashed')
配列とデータ列の散布図に赤い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
リストとリストについて散布図を描画し、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
ヒストグラムをサンディーブラウン色を使って描画する	plt.hist(データ列, color='sandybrown')
option: ネイビー色を使う	color = 'navy'
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
リストと配列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
データフレームの指定された列名一覧の列だけ取り出す	df[columns]
散布図をrgbの丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
option: スチールブルーに色を設定する	color = 'steelblue'
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
リストの要素のみプリントする	print(*aList)
棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
列を配列に変換する	df[column].values
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
option: ダークグリーン色を使う	color = 'darkgreen'
黒い下三角マーカーを数列と配列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
書式でデータ列をタイムスタンプに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
option: 表示を半透明にする	alpha = 0.5
２つのデータフレームを結合する	pd.merge(df, df2)
散布図を黒いポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 青緑にフォントの色を設定する	color = 'teal'
ブール型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
外れ値に強い線形回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
配列の各要素の積を算出する	np.multiply(aArray, aArray2)
文字列が文字列より辞書順で前か調べる	s < s2
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
グラフの色を濃くする	sns.set(pallete='deep')
大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
列を累加したイテラブル	itertools.accumulate(iterable)
option: グラフの色を青緑に設定する	color = 'turquoise'
リストと配列について散布図を描き、、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
二つの値をカンマで区切ってプリントする	print(value, value2, sep=',')
文字列をユニコード列に変換する	[ord(ch) for ch in s]
線グラフの色をコーラルにする	plt.plot(データ列x, データ列y, color='coral')
nとn2の差を計算する	n - n2
option: 色をゴーストホワイトに変更する	color = 'ghostwhite'
データフレームのカラムの中にいくつがあるか数える	df[col].isin([value]).sum()
リストとイテラブルについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
列によってデータフレームを集計して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ファイルを追加モードを用いて開く]	open(filepath, mode='a')
option: フォントの色を紺に設定する	color = 'darkblue'
平均値付きボックスチャートを描画する	plt.boxplot(データ列, showmeans=True)
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
整数nの16進表記を見る	hex(n)
実数が正か調べる	x > 0
データフレームを'A'列によって昇順にソートし、更新する	df.sort_values(by='A', ascending=True, inplace=True)
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
データ列間のRMSEを算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
赤い右三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
項目名が辞書に存在しているかどうか調べる	key not in aDict
列のユニークな要素数を見る	ds.nunique()
option: 線を細くする	linewidth = 3.0
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
フォレストグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ダーク・スラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
組を番号付けする	enumerate(aTuple)
データフレームのカラムを10の位で丸める	df[col].round(-1)
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
改行せず二つの文字列をプリントする	print(value, value2, end='')
全要素を０で初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
箱ひげ図としてデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
配列とデータ列の散布図を描画して、クロスマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストにリストを展開する	aList.extend(aList2)
option: スノーを使用する	color = 'snow'
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
箱髭図を横に並べて描画する	plt.boxplot([データ列, データ列])
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データフレームを列によって並べて、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
ファイルをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
データフレームを列によって並べて更新する	df.sort_values(by=column, inplace=True)
組の要素を昇順に並べ変える	sorted(aTuple, reverse=False)
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
浮動小数点数が負の数か調べる	x < 0
グラフのサイズをセットする	plt.figure(figsize=(横幅, 高さ))
折れ線グラフのマーカーをクロスにする	plt.plot(データ列x, データ列y, marker='x')
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
散布図を左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<')
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
文字列の末尾から部分文字列を探す	s.rfind(sub)
二進文字列を整数に変換する	int(s, 2)
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: フォントの色をホワイトスモークに指定する	color = 'whitesmoke'
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
データ列の折れ線グラフを右三角印として描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
キュー中の要素の出現数を数える	deq.count(element)
データフレームを列によってグループ分けして、合計を求める	df.groupby(column).sum()
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
オプションで、標準エラーを出力先にする	file = sys.stderr
option: ディムグレーにフォントの色を変更する	color = 'dimgray'
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
２つの辞書をネストする	collections.ChainMap(aDict, aDict2)
分類モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ファイルパスをバイナリ用にオープンする]	open(filepath, mode='rb')
実数の整数部を求める	math.modf(x)[1]
シーケンスをカウンタにする	collections.Counter(iterable)
縦棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
プロットのx軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
数値を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
マッピングの値に要素は含まれていないか調べる	element not in aDict.values()
n進文字列をbytesizeバイトのバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
nマイナスn2を求める	n - n2
小数点数の余弦を求める	math.cos(x)
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
option: ディムグレー色を用いる	color = 'dimgrey'
nからn2までのstepごとによるスライス	slice(n, n2, step)
貝殻色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの四角印を黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列中のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
ヒストグラムの色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
実数を十六進表記の文字列に変換する	x.hex()
散布図を赤い菱形マーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列をセパレータによって分割し、、列挙する	s.split(sep)
rgbの四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
列の中にある日付データと文字列の合計を数える	ds.isin([value, value2]).sum()
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
文字列リストにイテラブルを変換してカンマで連結する	','.join(map(str, iterable))
実測値をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
option: フォントの色を青にセットする	color = 'blue'
predicateFuncが真になる列の要素	itertools.takewhile(predicateFunc, iterable)
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: スカイブルー色を使う	color = 'skyblue'
バイナリモードでファイルパスをオープンする]	open(filepath, mode='rb')
データフレームの文字列をNaNに変換する	df.replace(s, np.nan)
フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
x座標だけグリッド線	plt.grid(axis='x')
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ヒストグラムをダークシアン色として描画する	plt.hist(データ列, color='darkcyan')
折れ線グラフの▲印の太さを設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
文字列を最初の部分文字列で二つに分ける	s.partition(sub)
データ列の中に文字列と日付データが含まれる	ds.isin([value, value2])
既存の行列を元にして全要素が0のベクトル	np.zeros_like(aArray)
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
データフレームの値を正規表現patternでまとめて置き換える	df.replace(pattern, repl, regex=True)
ラベンダー色でヒストグラムを描画する	plt.hist(データ列, color='lavender')
文字列を最初の部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
文字列中にひとつでも非数字が含まれる	any(not c.isdigit() for c in s)
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
バリーウッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightseagreen')
オブジェクトがリスト型のインスタンスかどうか調べる	isinstance(obj, list)
イテラブルと配列の散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
縦棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='grey')
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
整数nの八進表現	oct(n)
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
ゼロ埋めされた論理値型の配列を作る	np.zeros(要素数, dtype=np.int32)
タブ区切りのファイルからCSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
整数nが組のひとつである	n in aTuple
option: ロージーブラウンにフォントの色を設定する	color = 'rosybrown'
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
行列の列ごとの最小値	np.min(aArray, axis=0)
データ列をy軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データフレームのリストカラムの未入力値を後の行の値で埋める	df[aList].fillna(method='bfill')
データフレームの列の未入力値を50パーセンタイルに設定する	df[col].fillna(df[col].median())
二つの列の値でデータフレームをグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
列から重複を取り除く	set(iterable)
カウンタのユニークな文字列を列挙する	list(aCounter)
データフレームを各列毎にグループ分けして、列の標準偏差を算出する	df.groupby(column)[column2].std()
行列の列ごとの最大値を算出する	np.max(aArray, axis=0)
ヒストグラムを黒くする	plt.hist(データ列, color='k')
双方向キューのn番目に値を差し込む	deq.insert(n, element)
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
角度のラジアン	math.radians(degree)
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
文字列を新しい文字列を用いて置き換える	s.replace(sub, newsub)
四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s')
散布図に赤いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
nをn2で値の切り上げ	(n + n2 - 1) // n2
実数を整数で割って切り捨てる	x // y
縦棒プロットを描画してバーの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
黒い菱形マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
オブジェクトにプロパティがあるか	hasattr(obj, プロパティ名)
多次元尺度構成法で多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
xを論理値に変換する	bool(x)
nが-9以上、9以下かどうか調べる	-9 <= n <= 9
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
浮動小数点数の仮数	math.frexp(x)[0]
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
二つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
option: グラフの色をトマトに設定する	color = 'tomato'
線グラフをチョコレート色を使って描画する	plt.plot(データ列x, データ列y, color='chocolate')
x座標の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
文字列をコロンで分割して文字列リストにする	s.split(':')
2つの文字列を順にプリントする	print(value, value2)
文字列中に非小文字が含まれるかどうか調べる	any(not c.islower() for c in s)
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
折れ線グラフを青い破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの指定した列をリストに変換する	df[column].values.tolist()
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
折れ線グラフのダイアモンドマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフの色をオリーブにセットする	plt.plot(データ列x, データ列y, color='olive')
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームの列の値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
横棒グラフを暗い赤色として描画する	plt.barh(データ列x, データ列y, color='darkred')
クロス印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
リストの先頭を使う	aList[0]
option: グラフの色を黄色に変更する	color = 'yellow'
カラムの値をValueMapでまとめて置き換える	ds.replace(ValueMap)
Pandasで文字列をフォーマットfmtで日付データにする	pd.to_datetime(s, format=fmt)
ロバストな単回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
行列を平坦化する	aArray.flatten()
データフレームの中の列をビン数nとしてビニングする	pd.cut(df[col], n)
折れ線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
オブジェクトがタプルか	isinstance(obj, tuple)
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
棒グラフを青紫色を使って描画する	plt.bar(データ列x, データ列y, color='violet')
散布図を青色として描画する	plt.scatter(データ列x, データ列y, color='blue')
値を黒色にする	f'\033[30m{value}\033[0m'
散布図のマーカーを三角印にする	plt.scatter(データ列x, データ列y, marker='^')
データ列が正規分布からどの程度、歪んでいるか調べる	ds.kurt()
ファイルのフォルダ名	os.path.dirname(filepath)
プロットの描画で色差別なくパレットを使う	sns.set(pallete='colorblind')
スーパーセットか調べる	aSet.issuperset(aSet2)
データフレームの重複していない行のみを取り出す	df[not df.duplicated(keep=False)]
散布図をブルーバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
点線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
菱形マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
日付データが月曜日か調べる	aDate.weekday() == 0
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: マーカーを四角に変える	marker = 's'
option: ロイヤルブルー色を用いる	color = 'royalblue'
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データフレームの列の値がx以上の行を選ぶ	df[df[column] >= x]
横棒グラフをサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='salmon')
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
列でデータフレームをソートする	df.sort_values(by=column)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
パラメータが0に近づくとき、数式の極限値を計算する	sympy.limit(e, z, 0)
ヒストグラムの色をオレンジレッドにセットする	plt.hist(データ列, color='orangered')
マッピング上で項目名が定義済みか	key in aDict
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
データフレームで列と列の重複をドロップする	df.drop_duplicates(subset=[column, column2])
が名前付きタプルのインスタンスか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: 線の種類を点線に変更する	linestyle = 'dotted'
予測データのコンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
横棒グラフをアンティークホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
貝殻色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
カラムが正規分布からどれだけ、尖っているか見る	ds.skew()
小数点数のルート	math.sqrt(x)
配列と配列について散布図を描画してマーカーをクロスにセットする	plt.plot(データ列x, データ列y, marker='x')
シルバー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
データフレームを二つの列を用いて降順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
option: フォントの色をバリーウッドに指定する	color = 'burlywood'
データフレームのリストカラムの欠損値を最大値に変更する	df[aList].fillna(df[aList].max())
変数が無限大に近づく際の数式の極限値を計算する	sympy.limit(e, z, oo)
リストを折れ線グラフを用いて可視化する	plt.plot(データ列x, データ列y)
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を計算する	df.groupby([column, column2], as_index=False).var()
データフレームのリスト列の中に文字列とがあるか	df[aList].isin([value, value2])
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
分子n、分母mの分数を作成する	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
nは何桁か	len(str(n))
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
データフレームのリストカラムの中の欠損値の合計を求める	df[aList].isna().sum()
折れ線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
タイムスタンプデータはタイムスタンプデータと同時	aDatetime == aDatetime2
ダークグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームを列をキーにして並べ直す	df.sort_values(by=column)
文字列を改行で区切る	s.splitlines()
option: ライトサーモン色を使用する	color = 'lightsalmon'
プラットホームがマックか調べる	sys.platform.startswith('darwin')
nとn2のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
真紅色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
option: タンを用いる	color = 'tan'
データフレームの指定された三つの列を取り出す	df[[column, column2, column3]]
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
イテラブルの重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
リストを反転する	reversed(aList)
データフレームのリストカラムのどの値が頻出か確認する	df[aList].mode()
赤い下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームを用いる	import pandas as pd
ヒストグラムをライトブルー色として描画する	plt.hist(データ列, color='lightblue')
データフレームのカラムの上位25%	df[col].quantile(0.25)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
組の総和	sum(aTuple)
縦棒グラフをプロットし、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
日付データをISO形式の文字列に変換する	aDate.isoformat()
option: フォントの色を赤に指定する	color = 'red'
option: ベージュを使う	color = 'beige'
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
データフレームの中の列を等しい量になるように分割数nを用いて分割する	pd.qcut(df[col], n)
ミディアムスレートブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
実数を実数で割って切り捨てる	x // y
行列の値	aArray[行番号, 列番号]
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
リストの要素を昇順にソートする	sorted(aList, reverse=False)
データフレームを行を用いて昇順に並べ直す	df.sort_index(ascending=True)
散布図をリネン色を用いて描画する	plt.scatter(データ列x, データ列y, color='linen')
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
データフレームのリストカラムの中に日付データがある	df[aList].isin([value])
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
イテラブルと配列について散布図を描画し、、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
両端キューをタプルに変換する	tuple(deq)
Pandasで文字列をフォーマットで日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームの列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームを列の値によってまとめたグループを使う	df.groupby(column)
データフレームの中の列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
Pythonのバージョンを知る	sys.version
ライトシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
option: ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
作画を正方形にする	plt.axis('equals')
データ列を使用する	import pandas as pd
文字列内に日本語が使われているか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
スカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
散布図をハニーデュー色を用いて描画する	plt.scatter(データ列x, データ列y, color='honeydew')
xのハッシュ値を求める	hash(x)
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
凡例をプロットの表示する	plt.legend()
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
散布図のマーカーの大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
タン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
リストをn個にビン分割する	pd.cut(aList, n)
散布図に青い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
ブール型のゼロ埋めされた行列を作る	np.zeros(要素数, dtype=np.int32)
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
エンコーディングで文字列をバイト列にする	s.encode(encoding=encoding)
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
クラス分類の再現率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: ライトイエロー色を使用する	color = 'lightyellow'
三つの文字列を順にプリントする	print(value, value2, value3)
文字列内に数字があるか調べる	any(c.isdigit() for c in s)
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
イテラブルを集合に変換する	set(iterable)
散布図にダイアモンドマーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
option: グラフの色をコーンズシルクに変更する	color = 'cornsilk'
ラジアンの角度を求める	math.degrees(x)
表データの列を行に設定する	df.set_index(column)
改行なしに二つの文字列をプリントする	print(value, value2, end='')
カウンタ同士で∩演算する	aCounter & aCounter2
クリムゾン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
日付時刻データの曜日を見る	aDatetime.weekday()
ライトグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
リストとリストについて散布図を描いて、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
８進数字を全て使う	string.octdigits
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
列の値によってデータフレームを集約して、分散を求める	df.groupby(column).var()
オーキッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
option: ライトグリーン色を使う	color = 'lightseagreen'
ヒストグラムで数列を可視化する	plt.hist(データ列)
ダークターコイズ色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
n2分のnを求める	n / n2
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
データフレームの未入力値を直前の値に設定する	df.fillna(method='ffill')
赤い四角マーカーを配列と配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフをライトイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightyellow')
実数の余弦を求める	math.cos(x)
新しい部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ひとつでも非英数字が文字列中にあるかどうか調べる	any(not c.isalnum() for c in s)
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
10を底とする実数の対数を求める	math.log10(x)
数値を数値に変換する	float(e)
OSがウィンドウズか確認する	sys.platform.startswith('win32')
日付時刻データの日数を見る	aDatetime.day
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
option: ブラックにグラフの色を設定する	color = 'black'
シーケンスのイミュータブルなセットを作る	frozenset(iterable)
リストと配列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: 左三角マーカーを加える	marker = '<'
option: 追加用に設定する	mode = 'a'
左に双方向キューの要素をn個分ローテンションする	deq.rotate(-n)
option: 上三角印を使う	marker = '^'
option: グラフの色をホットピンクにセットする	color = 'hotpink'
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
日付時刻データは何月か知る	aDatetime.month
文字列をカンマで区切り、列挙する	s.split(',')
カテゴリで色分けして、データフレームの全カラムの散布図をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
分類モデルのリコールを算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
パープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='purple')
散布図の左三角印を赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
カテゴリで色付けして、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: 色をインディアンレッドに設定する	color = 'indianred'
option: 降順にする	ascending = False
option: ミディアムターコイズを用いる	color = 'mediumturquoise'
リストとリストについて散布図を描画して文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
データフレームのNaNを直前の値で置き換える	df.fillna(method='ffill')
画面用にプロットをする	sns.set(context='notebook')
辞書を計数器に変換する	collections.Counter(aDict)
データを最大値と最小値として揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームを二つの列で昇順に並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ミディアムオーキッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
大バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
乱数を生成する	random.random()
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームから指定された二つの列を抽出する	df[[column, column2]]
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
データフレームの列をインデックスにする	df.set_index(column)
三つ並べてヒストグラムを描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
rgbのダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
配列と配列についての散布図にrgbの△マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
列の代表値	ds.describe()
データ列の欠損値を平均で埋める	ds.fillna(ds.mean())
確率的勾配降下としてクラス分類をする	model = sklearn.linear_model.SGDClassifier()
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
最大値でデータ列の未入力値を埋める	ds.fillna(ds.max())
折れ線グラフを青紫色を使って描画する	plt.plot(データ列x, データ列y, color='violet')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
イテラブルと配列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
nが負の数か確認する	n < 0
Pandasで、フォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
option: 色をパレットトルコイズに指定する	color = 'paleturquoise'
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
イテラブルとリストの散布図を描いて、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図を黒い丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
三つのリストを順に表示する	print(value, value2, value3)
option: ゴーストホワイトにグラフの色を変更する	color = 'ghostwhite'
ヒストグラムの色をオリベドラブに指定する	plt.hist(データ列, color='olivedrab')
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
文字列が文字列リストに存在するか調べる	s in aStringList
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
option: ライトゴールドロディイエローにグラフの色をする	color = 'lightgoldenrodyellow'
データフレームのリストカラムの中に文字列と文字列がいくつ含まれるか数える	df[aList].isin([value, value2]).sum()
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
データフレームのリストカラムのNaNをxに指定する	df[aList].fillna(x)
option: エラーがあるとき、例外を発生させる	errors = 'strict'
データフレームのカラムを散布図で可視化し、、カテゴリごとに色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの四角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
辞書をソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
JSONフォーマットのバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
異なる列をキーとして2つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
文字列中にひとつでも非アルファベットがある	any(not c.isalpha() for c in s)
行列をリストから作る	np.array(aList)
三自然数の最小公倍数	math.lcm(n, n2, n3)
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
nとn2の排他的論理和	n ^ n2
横棒グラフをやわらかい青色を使って描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームのリストカラムの下位25%	df[aList].quantile(0.75)
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームを列の値によってグループ化する	df.groupby(column)
行列の行ごとの分散	np.var(aArray, axis=1)
文字列が全て大文字かどうか調べる	s.isupper()
option: namesを列の名前にする	names = names
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
実数が負の数か調べる	x < 0
棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
赤い一点鎖線でラインをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
データフレームの重複した行だけを取り出す	df[df.duplicated(keep=False)]
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
散布図に赤い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
option: アクアにフォントの色を設定する	color = 'aqua'
オリーブ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
文字列を部分文字列で分けたときの最初の文字列	s.partition(sub)[0]
ホワイトスモーク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
線グラフを半透明の破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
いつまでもnからカウントアップする	itertools.count(start=n)
ボックスチャートで数列を描画する	plt.boxplot(データ列)
散布図を黒い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
サブ型	issubclass(サブクラス, クラス)
データフレームを表示するとき、行数をnに設定する	pd.set_option('display.max_rows', n)
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をミディアムブルーに指定する	color = 'mediumblue'
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
データ列を対数変換する	np.log(データ列)
縦棒グラフをミディアムオーキッド色を使って描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ファイルパスから拡張子付きのファイル名を求める	os.path.basename(filepath)
option: 区切り記号をコロンにする	sep = ':'
データフレームの列をドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
ゼロ埋めされた行列	np.zeros(要素数)
ゼロ埋めされた整数型の配列を作る	np.zeros(要素数, dtype=np.int)
シーケンスからサンプリングする	random.sample(iterable)
空のタプル	()
文字列はタプルに含まれるかどうか調べる	element in aTuple
データ列の中に文字列があるか	ds.isin([value])
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
ファイルを改行なしで一行ずつ読み込む	f.readline()
柱状図のプロットして、正規化する	plt.hist(データ列, density=True)
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
rgbのポイントマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ファイルからストリームを読み込みfileとする	file = open(filepath)
散布図を右三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='>')
option: 区切り記号を使わない	sep = ''
行列を2次元1行に変形する	aArray.reshape(1, -1)
双方向キュー中の値の出現数をカウントする	deq.count(element)
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データ列と数列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ヒストグラムを描画して、ビン数を変更する	plt.hist(データ列, bins=区関数)
ミディアムオーキッドにヒストグラムの色をする	plt.hist(データ列, color='mediumorchid')
データ列は何日か見る	ds.dt.day
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
option: ライムを使う	color = 'lime'
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
切片なしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: 色をライムグリーンに指定する	color = 'limegreen'
データフレームを列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
データ列の値が欠損値	ds.isna()
リストをビニングする	pd.cut(aList, aList)
マップから最後に追加した項目を取り出す	aDict.popitem()
深紅色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
データフレームを表示するとき、表示できる最大列数を変更する	pd.set_option('display.max_columns', n)
データ列の離れ具合を図示する	sns.residplot(x=データ列, y=データ列)
データフレームの中にある文字列と文字列の数をカウントする	df.isin([value, value2]).sum()
ファイル名がテキストファイルかどうか調べる	filename.endswith('.txt')
データフレームの列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
nが-9以上、9以下か調べる	-9 <= n <= 9
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
リストと配列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
option: マゼンタに色を設定する	color = 'magenta'
数列とデータ列についての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
文字列ひとつの組	(element,)
変数を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
option: ビスク色を使用する	color = 'bisque'
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
n個の要素があるリストを得る	[element] * n
データフレームのカラムのNaNを直後の値に設定する	df[col].fillna(method='bfill')
ファイルを開いて]、書き込みストリームを使う	open(filepath, mode='w')
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
スカイブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
プロットの補足の位置を(x,y)に指定する	plt.legend(loc=(x, y))
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
カウンタのキーとカウントを列挙する	aCounter.items()
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
両端キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
スピアマン相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='spearman')
表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>')
赤い四角マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
文字列の先頭から空白やタブを消す	s.lstrip()
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
option: 色のアルファ値を設定する	alpha = 0.5
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
全要素を初期値で初期化した配列を作る	np.full(要素数, 初期値, dtype=np.int)
データフレームのNaNをモードに設定する	df.fillna(df.mode().iloc[0])
半透明の点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
横棒グラフを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: ダークグレー色を使う	color = 'darkgrey'
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
データフレームの欠損値を最大値で補う	df.fillna(df.max())
両端キューの末尾に列の値を入れる	deq.extend(iterable)
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ラベンダー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームをJSONLファイルにBOM付きで書き込む	df.to_csv(filename, encoding='utf_8_sig')
コロンで区切って二つの変数をプリントする	print(value, value2, sep=':')
散布図をイエローグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
スクリプトのファイル名	sys.argv[0]
1行だけ標準入力から改行なしに読む	sys.stdin.readline().rstrip()
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
作画のフォントを日本語表示にセットする	sns.set(font='IPAexGothic')
辞書の全項目をクリアする	aDict.clear()
アクア色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図に青い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
改行せず文字列をプリントする	print(value, end='')
カデットブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
双方向キューを全て取り除く	deq.clear()
データフレームの列を十の位で丸める	df[col].round(-1)
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
オブジェクトのクラスを調べる	type(obj)
文字列の大文字と小文字を交換する	s.swapcase()
グラフをスライド用に指定する	sns.set(context='talk')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
集合に列を追加更新する	aSet.update(iterable)
ラインを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームの中に存在する日付データの個数を求める	df.isin([value]).sum()
文字列を複数行対応としてパターンで分割する	re.split(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
赤い▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
横棒グラフをパールゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
配列とリストについての散布図にrgbの▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
変数を黄色で表示できる文字列にする	f'\033[33m{value}\033[0m'
option: 色をライトコーラルに変更する	color = 'lightcoral'
配列と数列の散布図をプロットして下三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
'A'列で昇順にデータフレームを並べ直す	df.sort_values(by='A', ascending=True)
カラムの中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図をティール色として描画する	plt.scatter(データ列x, データ列y, color='teal')
要素が辞書の値として含まれているか	element in aDict.values()
文字列中のパターンを新しい文字列として置換する	re.sub(pattern, newsub, s)
横棒グラフをダークオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='darkorchid')
散布図に黒い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをゴールド色を使って描画する	plt.barh(データ列x, データ列y, color='gold')
横棒グラフをアクアマリン色を使って描画する	plt.barh(データ列x, データ列y, color='aquamarine')
中央値でデータ列の欠損値を補う	ds.fillna(ds.median())
コマンド引数を一覧として	sys.argv[1:]
確率的勾配降下を使ってクラス分類をする	model = sklearn.linear_model.SGDClassifier()
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
列名リストによってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
全要素を０で初期化した３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
option: コーラルを使う	color = 'coral'
大文字・小文字を無視して文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: フォレストグリーンを使う	color = 'forestgreen'
多次元データを多次元尺度構成法として濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
アンサンブル学習を用いてクラス分類を行う	sklearn.ensemble.VotingClassifier()
文字列の開始位置から終了位置までの範囲で部分文字列の登場回数をカウントする	s.count(sub, start, end)
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
リストと数列について散布図を描き、、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
NaN	math.nan
ゴールドにヒストグラムの色をする	plt.hist(データ列, color='gold')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
データフレームのリスト列の最頻値	df[aList].mode()
重回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
カウンタの最頻出な項目	aCounter.most_common()[0]
カウンタを低頻度方からリストとして得る	aCounter.most_common()[::-1]
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
データフレームを列で並べ直し、、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
タブで区切って2つの変数をプリントする	print(value, value2, sep='\t')
プログラムのファイルの名前を知る	sys.argv[0]
複数の列によってデータフレームを昇順に並べる	df.sort_values(by=column, ascending=True)
横棒グラフをタン色を用いて描画する	plt.barh(データ列x, データ列y, color='tan')
異なる列をキーにして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
リストを四分位数でビン分割する	pd.qcut(aList, 4)
文字列中にひとつでも非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
データフレームを'A'列で昇順にソートする	df.sort_values(by='A', ascending=True)
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数	s.count(sub, start, end)
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図に▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
文字列が空白文字からなる	s.isspace()
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
散布図をダークシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
ふたつの集合の積集合	aSet.intersection(aSet2)
配列の合計値	np.sum(aArray)
データフレームのNaNが含まれる箇所に	df.style.highlight_null()
option: データ型を指定する	dtype = np.int16
タプルを反転する	reversed(aTuple)
グレーにヒストグラムの色を指定する	plt.hist(データ列, color='gray')
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
列の値でデータフレームを集計し、、列挙する	[(name, group) for name, group in df.groupby(column)]
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
紺色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
option: ミディアムバイオレットレッドにフォントの色を変更する	color = 'mediumvioletred'
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
ライトコーラル色としてヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
二つの変数をスラッシュで区切って出力する	print(value, value2, sep='/')
インデックスでデータフレーム全体を降順でソートする	df.sort_index(ascending=False)
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
丸印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
Pandasで、データ列をPandasの日付型にする	pd.to_datetime(ds)
あらかじめ大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
数列の比率を円グラフで作図する	plt.pie(データ列, startangle=90)
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
データ列のユニークな値の個数を調べる	ds.nunique()
ピアソンでデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
散布図をフローラルホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ひとつでも数字が文字列内に含まれるかテストする	any(c.isdigit() for c in s)
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
option: ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
ミディアムアクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
データ列とリストの散布図を描き、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
パープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
折れ線グラフのマーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
データフレームの中に文字列と日付データが存在するかどうかテストする	df.isin([value, value2])
複数行対応として正規表現で文字列を分ける	re.split(pattern, s, flags=re.MULTILINE)
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
空列	[]
要素がマッピングの値に含まれていないか調べる	element not in aDict.values()
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
n2がnより大きくかつn3未満か確認する	n < n2 and n2 < n3
分割数nで配列をビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列の大文字小文字を逆にする	s.swapcase()
実数を実数に加える	x + y
文字列の最初を見る	s[0]
データフレームをまとめて四捨五入する	df.round()
後の行の値でデータ列の欠損値を補う	ds.fillna(method='bfill')
option: エンコーディングを文字列の示す文字コードに変更する	encoding = s
データフレームのカラムの中に文字列と日付データがある	df[col].isin([value, value2])
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
データフレームのリストカラムの第一四分位数を計算する	df[aList].quantile(0.25)
リストの値を小さい順に並べ変える	sorted(aList, reverse=True)
データフレームのpercent分位数を算出する	df.quantile(percent/100)
データフレームの列の未入力値を最大値に設定する	df[col].fillna(df[col].max())
文字列の末尾から空白を消す	s.rstrip(' ')
両端キュー中の要素をカウントする	deq.count(element)
縦棒グラフをオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='orange')
日付時刻データが何時か知る	aDatetime.hour
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
ダークブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
データ列のユニークな値を調べる	ds.unique()
rgbに横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
シエナ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームの中にあるの合計を数える	df.isin([value]).sum()
菱形マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D')
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
year年month月day日hour時minute分のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
カラムの欠損値を平均値で埋める	ds.fillna(ds.mean())
ヒストグラムを茶色色を用いて描画する	plt.hist(データ列, color='brown')
データフレームのリストカラムの最頻値	df[aList].mode()
日付時刻データが日付時刻データより前か確認する	aDatetime < aDatetime2
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームのヒートマップをグラフ化する	sns.heatmap(df.corr())
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
散布図にバツ印を用いる	plt.scatter(データ列x, データ列y, marker='x')
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームを列によってグループ化して、それぞれのグループの平均値を計算する	df.groupby(column).mean()
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
縦棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
option: グラフの色をアクアマリンに変更する	color = 'aquamarine'
ファイルパスをフォルダ名とファイル名に分割する	os.path.split(filepath)
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
組は少なくともひとつ真	any(aTuple)
カラムの各データが何回出現するか確認する	df[col].value_counts()
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
option: ゲインズボロを用いる	color = 'gainsboro'
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
列が正規分布からどの程度歪んでいるか見る	ds.kurt()
文字列を空白を用いて分割する	s.split()
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
相関係数と有意確率を計算する	scipy.stats.pearsonr(データ列, データ列2)
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
rgbの下三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ファイルパスを追加できるように開く]	open(filepath, mode='a')
散布図をダークオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
option: 淡いピンク色にグラフの色を指定する	color = 'lightpink'
カデットブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
カウンタ間で和集合	aCounter | aCounter2
日付時刻データを数値に変換する	aDatetime.timestamp()
棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
要素が集合のメンバーに含まれる	element in aSet
タイムスタンプデータの月数	aDatetime.month
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
プログラムを正しく終了する	sys.exit(0)
ブランチドアーモンド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
集合をイミュータブルに変換する	frozenset(aSet)
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
グラフの色をパステル調にする	sns.set(pallete='pastel')
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
シーケンスから1個ランダムに選ぶ	random.choice(iterable)
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
タイムスタンプデータにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
オブジェクトのバイトサイズ	sys.getsizeof(obj)
実線を使ってリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムをゴールデンロッド色を用いて描画する	plt.hist(データ列, color='goldenrod')
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
nとn2の論理和を計算する	n | n2
イテラブルの長さnの順列を得る	itertools.permutations(iterable, n)
データ列のユニークな値の個数	ds.nunique()
カラムの欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
nをn2で割った値を切り上げる	(n + n2 - 1) // n2
option: グラフの色をスラグレーに設定する	color = 'slategrey'
文字列中にひとつでも非小文字があるか調べる	any(not c.islower() for c in s)
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
option: 整数型を使う	dtype = np.int
データフレームの未入力値を平均値で埋める	df.fillna(df.mean())
option: 線種を点線に指定する	linestyle = 'dotted'
option: グラフの色をやわらかい青に変更する	color = 'cornflowerblue'
変数を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
降順に列によってでデータフレームを並べる	df.sort_values(by=column, ascending=False)
option: どのカラムもインデックスに設定しない	index_col = None
L2ノルムでデータを正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
文字列をカンマで分割して文字列リストに変換する	s.split(',')
日付時刻データの秒数	aDatetime.second
実数の双曲線余弦の逆数	math.acosh(x)
option: 配列のデータ型を指定する	dtype = bool
データ列と配列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
日付時刻データが日付時刻データより先	aDatetime < aDatetime2
データ列の中にいくつ欠損値があるかカウントする	ds.isna().sum()
線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
文字列内にひとつでも空白が含まれるか	any(c.isspace() for c in s)
option: ミディアムブルーにグラフの色を設定する	color = 'mediumblue'
option: 箱ひげ図を水平方向にする	vert = False
リストと配列についての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
データフレームの列の値がx、かつ列がx2であるデータを取り出す	df[(df[column] == x) & (df[column2] == x2)]
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgray')
配列をヒストグラムにする	plt.hist(データ列)
折れ線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
二つの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
データフレームの中のカラムをn個に等量で分割する	pd.qcut(df[col], n)
日付データが日付データより後ろか判定する	aDate > aDate2
データフレームのカラムのメディアンを求める	df[col].median()
整数nが組のいづれかか	n in aTuple
カウンタから最も頻出なキーの件数	aCounter.most_common()[1]
行列をフラット化する	aArray.flatten()
折れ線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
option: 色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
文字列をバイト配列に変換する	bytearray(s)
黒い左三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
オブジェクトがリストかどうか調べる	isinstance(obj, list)
青い一点鎖線としてラインを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
両端キューに要素をプッシュする	deq.append(element)
option: ダークスレートブルー色を使う	color = 'darkslateblue'
値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
折れ線グラフの印を大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
リストとリストの散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
折れ線グラフを半透明の実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
線グラフをパウダーブルー色を使って描画する	plt.plot(データ列x, データ列y, color='powderblue')
変数を緑色で出力する	print(f'\033[32m{value}\033[0m')
整数が正の数かどうか調べる	x > 0
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
カウンタのキーを、そのカウントだけ列挙する	aCounter.elements()
ファイル全体を行単位で分割して読み込む	f.readlines()
列の値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby(column).describe()
折れ線グラフに上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数)
多次元データを主成分分析を用いて淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データ列が何曜日か確認する	ds.dt.weekday_name
データフレームのリストカラムがどれだけ分散しているか見る	df[aList].var()
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
部分文字列が部分文字列で始まるかテストする	s.startswith(sub)
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
リストのn番目にオブジェクトを挿入する	aList.insert(n, element)
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ラインのラインスタイルを実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
日付データをタプルにする	aDate.timetuple()
データフレームの列をヒストグラムとして描画する	plt.hist(df[column])
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
文字列を文字のリストにする	list(s)
上限nのキューを生成する	collections.deque(maxlen=n)
スピアマンでデータフレームのリストで指定された列の相関行列	df[aList].corr(method='spearman')
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
整数型のゼロ埋めされた行列を初期化する	np.zeros(要素数, dtype=np.int)
option: 赤色を使う	color = 'red'
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
nの八進数文字列を見る	oct(n)[2:]
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
配列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データ列をヒストグラムにする	plt.hist(データ列)
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの指定された列を選択する	df[[column]]
ディレクトリをモジュールを検索するパスに追加する	sys.path.append(dir)
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
カラムの欠損値を最大値で埋める	ds.fillna(ds.max())
散布図の△印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
浮動小数点数の逆正弦を求める	math.asin(x)
nかけるn2	n * n2
文字列全体を正規表現にASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの標本標準偏差	df.std()
ライムグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
文字列の中で大文字・小文字を無視してパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
option: ビスクを使う	color = 'bisque'
データフレームのリスト列の中に文字列と文字列がいくつ含まれるかカウントする	df[aList].isin([value, value2]).sum()
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
グラフのタイトルを設定する	plt.title('グラフの名称')
折れ線グラフの▼印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
表データを'A'列と'B'列で並べ直す	df.sort_values(by=['A', 'B'])
既存のファイルパスをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
nプラスn2	n + n2
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームを表示するとき表示される最大行数を増やす	pd.set_option('display.max_rows', n)
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
まとめてValueMapでデータフレームのカラムの値を変更する	df[col].replace(ValueMap)
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
数列とリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの印を右三角にする	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの色をタンにする	plt.plot(データ列x, データ列y, color='tan')
複素数型のゼロ埋めした行列	np.zeros(要素数, dtype=bool)
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
option: 青緑色を使用する	color = 'turquoise'
データフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col])
現在が何年か知る	datetime.datetime.today().year
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
黄緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフにダイアモンド印を使う	plt.plot(データ列x, データ列y, marker='D')
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
棒グラフをバリーウッド色を使って描画する	plt.bar(データ列x, データ列y, color='burlywood')
折れ線グラフをクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
文字列をn回だけ置き換える	s.replace(sub, newsub, n)
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ゴールドにヒストグラムの色を変更する	plt.hist(データ列, color='gold')
ヒストグラムの色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
ファイルパスからストリームを開いて]fileとする	file = open(filepath)
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
タブ区切りのファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
実数が整数	x.is_integer()
データフレームをエクセルファイルから読み込む	pd.read_excel(filename)
スノー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
コードポイントの最大値を知る	sys.maxunicode
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
リストを展開してプリントする	print(*aList)
辞書からキーで指定されたエントリを取り出す	aDict.pop(key)
配列を中央値でビニングする	pd.qcut(aArray, 2)
データ列を複数並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ネイビー色を使ってヒストグラムを描画する	plt.hist(データ列, color='navy')
データフレームの欠損値を前の行の値で置換する	df.fillna(method='ffill')
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
棒グラフを黄緑色を使って描画する	plt.bar(データ列x, データ列y, color='chartreuse')
実数の双曲線正接の逆数を求める	math.atanh(x)
データフレームをCSVから読む	pd.read_csv(filename, sep=',')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
リストの合計を求める	sum(aList)
文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
0からnまでの整数列	list(range(n+1))
スペクトル分解を行う	model = sklearn.decomposition.PCA(n_components=n)
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
データ列の第二四分位数	ds.median()
シルバー色を用いてヒストグラムを描画する	plt.hist(データ列, color='silver')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
リスト中の文字列が最初に見つかる位置	aList.index(element)
nが1、もしくは2	n == 1 or n == 2
プログラムの実行を正常に終了する	sys.exit(0)
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
一度にValueMapでデータフレームの値を置き換える	df.replace(ValueMap)
option: 真紅にグラフの色を設定する	color = 'crimson'
カレントワーキングディレクトリ	os.getcwd()
プラットフォームの整数の最大値を調べる	sys.maxsize
配列とリストについて散布図を描いて、△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ディムグレーにヒストグラムの色をする	plt.hist(データ列, color='dimgray')
ダークサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
オプションで標準出力を出力にする	file = sys.stdout
円グラフをきれいな円にする	plt.axis('equals')
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
リストのオブジェクトの位置をエラーなく見る	aList.index(element) if element in aList else -1
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
２変数の最大値	max(x, y)
データフレームを列名リストによって並べ直して、更新する	df.sort_values(by=column, inplace=True)
文字列を最初の部分文字列で二分割する	s.partition(sub)
日付時刻データが何分か知る	aDatetime.minute
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
データフレームの列をに箱ひげ図を使って図示する	sns.boxplot(x='カテゴリ列', y='列', data=df)
nが一桁の整数	-9 <= n <= 9
option: 青緑にフォントの色を指定する	color = 'turquoise'
凡例をプロット中の(x,y)の場所に表示する	plt.legend(loc=(x, y))
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
option: コーンフラワーブルーにグラフの色を設定する	color = 'cornflowerblue'
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
棒グラフをバリーウッド色を用いて描画する	plt.bar(データ列x, データ列y, color='burlywood')
ファイルパスをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: 符号なし８ビット整数型を使う	dtype = np.uint8
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
セットから別の集合の要素を全て除く	aSet.difference_update(aSet2)
イテラブルとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
正規化したヒストグラムを描画する	plt.hist(データ列, density=True)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
文字列の右端から空白を取り除く	s.rstrip(' ')
実数を百の位で四捨五入する	round(x, -2)
データフレームの行を抽出する	df[start:end]
青紫色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
スクリプトファイルと同じディレクトリのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
option: 分割記号を使わない	sep = ''
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
0から始まる無限整数イテラブルを得る	itertools.count()
リストを組に変換する	tuple(aList)
文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
複素数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=bool)
文字列からformatのパターンを用いて日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
オブジェクトの属性を値に変更する	setattr(obj, プロパティ名, 値)
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
ヒストグラムを点線として描く	plt.hist(データ列, linestyle='dotted')
組の最初のn要素を捨てる	aTuple[n:]
option: マーカーを丸に変える	marker = 'o'
マッピングをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
横棒グラフをライトスチールブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
イテラブルから新しい多重集合を作成する	collections.Counter(iterable)
リストを順に表示する	print(*aList)
option: 改行コードをUNIXにする	newline = '\n'
パレットを暗くする	sns.set(pallete='dark')
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
列の未入力値を最小値に設定する	ds.fillna(ds.min())
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
filepathにカレント作業ディレクトリを設定する	os.chdir(os.dirname(filepath))
貝殻色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
文字列の最後から部分文字列を見つける	s.rfind(sub)
２つの列の値によってデータフレームをまとめたグループ	df.groupby(['A', 'B'])
二つの集合は共通の要素を持たない	aSet.isdisjoint(aSet2)
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
半透明の実線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
グリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
option: グラフの色をディムグレーに指定する	color = 'dimgrey'
列をキーにして2つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
1からNまでの行列	np.arange(1, N+1)
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
option: NaNも無視しない	dropna = True
データフレームの列がx以下のデータを抽出する	df[df[column] <= x]
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
ヒストグラムの色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
option: スラグレーにフォントの色を設定する	color = 'slategrey'
BOM付きとしてファイルを書き込みできるように開く]	open(filepath, mode='w', encoding='utf_8_sig')
ミディアムアクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
空行を出力する	print()
線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
rangeの無限バージョン	itertools.count(start=n, step=step)
グラフを使用する準備をする	import matplotlib.pyplot as plt
データフレームのn行目を抽出する	df.loc[n]
ヒストグラムをピーチパフ色を使って描画する	plt.hist(データ列, color='peachpuff')
散布図の印の線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
辞書の項目名の値を得る	aDict[key]
折れ線グラフの菱形マーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
タプルのn番目からn2番目	aTuple[n:n2]
ミディアムパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
列によってデータフレームを並べて、新しい行を加える	df.sort_values(columns).reset_index()
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
正規分布にしたがってデータ列の値が発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
nをn2で割った余りをnにする	n %= n2
最大最小値でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データをL1ノルムを用いて正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
プロットで用いるy座標に軸ラベルをつける	plt.ylabel('y軸ラベル')
ファイルパスのセパレータ記号	os.sep
折れ線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列が文字列リストのいづれかどうか確認する	s in aStringList
option: ブラックを使う	color = 'black'
option: デピンクを使う	color = 'deeppink'
データフレームをグループ化し、それぞれの列に対し分散を算出する	df.groupby(column)[column2].var()
データフレームのリスト列の欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
option: フォントの色をシアンに設定する	color = 'cyan'
データフレームを複数の列によってソートする	df.sort_values(by=column)
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
option: ダイアモンドマーカーを描画する	marker = 'D'
散布図をホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='white')
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
nが無限に続く数列	itertools.repeat(n)
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
オブジェクトが名前付きタプル型か	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
等間隔でリストをn個にビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームのカラムの中に文字列がある	df[col].isin([value])
折れ線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
標準入力から1行分読み込んで改行を取り除く	sys.stdin.readline().rstrip()
データ列の曜日が何日目か見る	ds.dt.dayofweek
データ列の値が正規分布にしたがって発生する確率を算出する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
ファイルをクローズする	f.close()
n個にリストをビニングする	pd.cut(aList, n)
実数で浮動小数点数を整数除算する	x // y
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
散布図を赤い大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c='r')
option: チョコレート色を用いる	color = 'chocolate'
option: ブラック色を使用する	color = 'black'
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
ファイルパスをオープンして]バイナリストリームを見る	open(filepath, mode='rb')
データフレームの中の欠損値の合計を求める	df.isna().sum()
線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
ライトグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
値∉セット	element not in aSet
表データの最初n行	df.head(n)
データフレームの列の文字列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
要素をデックから取り除く	deq.remove(element)
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
無限にオブジェクトが繰り返すイテラブル	itertools.repeat(element)
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの印をクロスにする	plt.plot(データ列x, データ列y, marker='x')
文字列の左端からタブを除く	s.lstrip('\t')
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
数列を縦軸、配列を横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
タイムスタンプデータをタプルにする	aDatetime.timetuple()
線グラフの色をスレートブルーにセットする	plt.plot(データ列x, データ列y, color='slateblue')
符号付き整数の最大値を知る	sys.maxsize
本日が火曜日かどうか	datetime.datetime.today().weekday() == 1
ミディアムパープル色でヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
カウンタから最頻出な項目の件数を計算する	aCounter.most_common()[1]
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
異なる列をキーにして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムの色をサドルブラウンにする	plt.hist(データ列, color='saddlebrown')
データフレームを各列毎に集約して文字列というグループの個数を求める	df.groupby(column).size()[s]
nがn2より大きいかテストする	n > n2
データフレームを各列と列の組み合わせ毎にグループ分けして、個数を算出する	df.groupby([column, column2], as_index=False).count()
データ列をビン数nで分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフの色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
３自然数のGCD	math.gcd(n, n2, n3)
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
列自身を2回あわせた直積を得る	itertools.product(iterable, repeat=2)
表データを列名リストによってで破壊的に整列する	df.sort_values(by=column, inplace=True)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
値を両端キューの末尾に入れる	deq.append(element)
データ列とリストについて散布図を描いて、▽マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームが正規分布からどの程度、尖っているか確認する	df.skew()
UTF8を用いてファイルを書き込みできるように開く]	open(filepath, mode='w', encoding='utf-8')
option: 印を▽に指定する	marker = 'v'
分類モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
ライトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
縦棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
xでデータフレームのリストカラムの未入力値を置き換える	df[aList].fillna(x)
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
nが3の倍数か調べる	n % 3 == 0
option: グラフの線のスタイルを実線に変更する	linestyle = 'solid'
最小値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].min())
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
'A'列によってデータフレームをグループ化する	df.groupby('A')
データフレームの平均を求める	df.mean()
データフレームの中の列をn個に等間隔で分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
タプルの項目名とその値を列挙する	aDict.items()
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
小文字を大文字にする	s.upper()
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: フォントの色をカデットブルーに変更する	color = 'cadetblue'
option: ミントクリーム色を使用する	color = 'mintcream'
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
青い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
Pandasで、UNIX秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
option: グラフの色をライムに設定する	color = 'lime'
option: グラフの色をグリーンに設定する	color = 'green'
option: ライトサーモンを使う	color = 'lightsalmon'
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ユニークな値を要素とする配列を使う	np.unique(aArray)
タプルと組を加える	aTuple + aTuple2
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
部分文字列で文字列を区切って文字列リストにする	s.split(sub)
rgbの丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
文字列を記号に変換する	sympy.Symbol(s)
書式をタプルでフォーマットする	formatText.format_map(aDict)
nの無限なイテラブル	itertools.repeat(n)
ゲインズボロ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
日付時刻データが日付時刻データより後ろ	aDatetime > aDatetime2
option: フォントの色をシスルにする	color = 'thistle'
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
マッピングをインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
辞書の項目名の一覧	aDict.keys()
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
セットが空でないか調べる	len(aSet) != 0
浮動小数点数を百の位で丸める	round(x, -2)
線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
ヒストグラムの色をタンに変更する	plt.hist(データ列, color='tan')
二つのデータフレームを列'A'と列'B'をキーにして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
新しいサポートベクター分類モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
淡い茶色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
ヒストグラムのスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
データフレームの行のリスト	df.index
データフレームを列名リストの値でグループ化する	df.groupby(columns)
線グラフを赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
組の末尾からn番目以前の部分を取り出す	aTuple[:-n]
x座標だけ目盛り線	plt.grid(axis='x')
文字列の終了位置より前に部分文字列が含まれる	s.find(sub, 0, end) != -1
等間隔で配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの中で列に重複があるか見る	df.duplicated(subset=column)
ファイルパスをバイナリモードを用いて開いて]、fとする	f = open(filepath, mode='rb')
option: ゲインズボロを使用する	color = 'gainsboro'
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
ミディアムパープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
option: グラフの色をディープスカイブルーに変更する	color = 'deepskyblue'
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
数値を水色化する	f'\033[36m{value}\033[0m'
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
データフレームの50パーセンタイル	df.median()
線形回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
カウンタの最頻出な項目を求める	aCounter.most_common()[0]
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: フォントの色をパールバイオレットレッドにする	color = 'palevioletred'
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
横棒グラフをペルー色を用いて描画する	plt.barh(データ列x, データ列y, color='peru')
データフレームの全カラムの相関を描く	sns.pairplot(df)
配列の累積和	np.cumsum(aArray)
日付データをn日前にする	aDate - datetime.timedelta(days=n)
配列と配列の散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
エクセルファイルをエクセルファイルファイルから読み込む	pd.read_excel(filename)
Pandasでデータフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
データ列の欠損値を最大値に変更する	ds.fillna(ds.max())
データフレームのリストカラムの未入力値を平均値で置換する	df[aList].fillna(df[aList].mean())
イテラブルとシーケンスをつなぐ	itertools.chain(iterable, iterable2)
数値の出力を改行せずに行う	print(value, end='')
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
option: ライムグリーン色を使う	color = 'limegreen'
散布図をポイント印を用いる描画する	plt.scatter(データ列x, データ列y, marker='.')
数値の数値を計算する	float(e)
option: データ型としてブール型を使用する	dtype = np.int32
データフレームを列によってグループ化し、、それぞれのグループごとの最小値を求める	df.groupby(column).min()
線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
文字列中に部分文字列がないか確認する	sub not in s
ヒストグラムの色をアンティークホワイトに指定する	plt.hist(データ列, color='antiquewhite')
データフレームの指定された三つの列だけ抽出する	df[[column, column2, column3]]
列の各値の出現回数を計算する	ds.value_counts()
データフレームのカラムを千の位で丸める	df[col].round(-3)
データ列の中にがある	ds.isin([value])
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
散布図の色をティールにする	plt.scatter(データ列x, データ列y, color='teal')
option: オレンジ色を使う	color = 'orange'
散布図をrgbの大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
列によってデータフレームを集約し、、個数を求める	df.groupby(column).count()
折れ線グラフの右三角印を青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: ダークカーキ色を使う	color = 'darkkhaki'
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
option: グラフの色をサーモンに設定する	color = 'salmon'
タプルのn番目の	aTuple[n]
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
データフレームの未入力値を前の行の値にセットする	df.fillna(method='ffill')
イエローグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
文字列を部分文字列で分割した時の先頭の文字列	s.partition(sub)[0]
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
タン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
option: フォントの色をマゼンタに指定する	color = 'magenta'
データ列の未入力値を直前の値に設定する	ds.fillna(method='ffill')
カウンタを多い順に列挙する	aCounter.most_common()
線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
タプルの各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
リストを両端キューに変換する	collections.deque(iterable)
データフレームの中にいくつがあるか数える	df.isin([value]).sum()
キューの末尾からデータを取り除く	deq.pop()
ブラック色として散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
データ列の各データ値の出現回数	ds.value_counts()
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
データフレームのカラムの一覧	df.info()
散布図の左三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
要素はセットのメンバーか	element in aSet
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
複数の列を用いてデータフレームをソートしてNaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
スピアマン相関係数を用いてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
モジュールを検索するパスを列挙する	sys.path
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
黒い右三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
リストの移り変わりを折れ線グラフで作図する	plt.plot(range(len(データ列)), データ列)
1からNまでの配列	np.arange(1, N+1)
データフレームのカラムをヒストグラムを用いて描画する	plt.hist(df[column])
列を両端キューに変換する	collections.deque(iterable)
データ列は何年か見る	ds.dt.year
ヒストグラムの色をペルーにする	plt.hist(データ列, color='peru')
データフレームを'A'列と'B'列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
オプションで出力先を標準出力に変更する	file = sys.stdout
グラフで用いるフォントを指定する	sns.set(font=フォント名)
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
文字列を右トリムする	s.rstrip()
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
本日が木曜日かどうか	datetime.datetime.today().weekday() == 3
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
option: インデックスを自動的な連番に設定する	index_col = None
option: 青紫色を使う	color = 'violet'
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
文字列中にひとつでも非小文字がある	any(not c.islower() for c in s)
ベクトルの個数	aArray.size
勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
データ列をインポートする	import pandas as pd
棒グラフをパパイヤウィップ色を用いて描画する	plt.bar(データ列x, データ列y, color='papayawhip')
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: ダークシアン色を使う	color = 'darkcyan'
データフレームを10の位で丸めて、整数にする	df.round(-1).astype(int)
バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームから数値データだけ抽出する	df.select_dtypes('number')
タイムスタンプデータが何時か知る	aDatetime.hour
散布図をライトイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
カンマ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
項目名がタプルに存在する	key not in aDict
折れ線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: ディープスカイブルーに色を設定する	color = 'deepskyblue'
追加モードとしてファイルをオープンして]fとする	f = open(filepath, mode='a')
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
シーケンスのそれぞれを関数でフィルタする	map(func, iterable)
ビン数nとして配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図の星マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
文字列に漢字が使われている	re.search('[\u4E00-\u9FD0]', s)
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
二つの実行結果をカンマで区切ってプリントする	print(value, value2, sep=',')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームの重複した行のみを取り出す	df[df.duplicated(keep=False)]
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
赤色でヒストグラムを描画する	plt.hist(データ列, color='red')
無限数列を得る	itertools.count()
データ列の日にちを使う	ds.dt.day
タプルの全エントリをクリアする	aDict.clear()
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
アイボリー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
xでデータフレームの欠損値を補う	df.fillna(x)
グラフの中に枠なしのデータラベルを表示する	plt.legend(frameon=False)
リストの末尾から要素を除く	aList.pop()
option: 三角マーカーを使う	marker = '^'
多い順にカウンタを列挙する	aCounter.most_common()
平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
紫色で文字列をプリントする	print(f'\033[35m{value}\033[0m')
2次元リストをflattenする	sum(aList)
数式のパラメータを数式で置き換える	e.subs(z, e2)
散布図に右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
文字列が全てアルファベットか調べる	s.isalpha()
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
データ列の中に文字列が存在するか調べる	ds.isin([value])
option: マーカーをポイントに指定する	marker = '.'
上限nの両端キューをリストから作る	collections.deque(iterable, maxlen=n)
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
日付時刻データが何月か知る	aDatetime.month
最大値でデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
数式の積分を求める	sympy.integrate(e)
文字列内にひとつでも小文字がある	any(c.islower() for c in s)
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
赤い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
実行結果を赤色にする	f'\033[31m{value}\033[0m'
ファイルを追加モードを用いて開いて]fとする	f = open(filepath, mode='a')
データフレームを表示するとき、表示可能な行数を減らす	pd.set_option('display.max_rows', n)
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
ピアソン相関係数としてデータフレームの相関行列を計算する	df.corr(method='pearson')
キューの最大長	deq.maxlen
nが偶数かどうか調べる	n % 2 == 0
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データ列は正規分布からどの程度、尖っているか見る	ds.skew()
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
黒い星マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
option: ゴールデンロッドを使う	color = 'goldenrod'
変数をアンダーライン付き化する	f'\033[4m{value}\033[0m'
option: 四角マーカーを加える	marker = 's'
option: 文字コードを文字列の示す文字コードに指定する	encoding = s
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
シーケンスを文字列リストに変換してタブによって連結する	'\t'.join(map(str, iterable))
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
両端キューの最大長を使う	deq.maxlen
変数を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
赤い一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームを'A'列と'B'列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
option: 分割記号をコロンにする	sep = ':'
文字列内にひとつでも数字があるか確認する	any(c.isdigit() for c in s)
データフレームの列の値がx未満の行を抽出する	df[df[column] < x]
ローングリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
2つの文字列を改行で区切って出力する	print(value, value2, sep='\n')
データフレームのカラムの中に存在すると文字列の合計を数える	df[col].isin([value, value2]).sum()
散布図のクロスマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
中央値でデータフレームのNaNを補う	df.fillna(df.median())
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
０で全要素を初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
折れ線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
ミディアムスレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
平方根	math.sqrt(x)
列のユニークな値	df[col].unique()
八進数文字列を整数に変換する	int(s, 8)
option: グラフの色をゴールドに指定する	color = 'gold'
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
データ列が正規分布からどれだけ、尖っているか調べる	ds.skew()
タプルをひとつ飛ばしで取り出す	aTuple[::2]
option: 黄色色を使用する	color = 'yellow'
散布図の四角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
option: 色をスカイブルーに変更する	color = 'skyblue'
文字列のn番目を使う	s[n]
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
マッピングの項目名を列挙する	list(aDict)
データフレームのカラムのタイムゾーンを東京に指定する	df[col].tz_convert('Asia/Tokyo')
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
データ列の分を見る	ds.dt.minute
リストと数列について散布図をプロットし、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
データフレームを二つの列の値によって集約する	df.groupby(['A', 'B'])
サーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
整数nを二進表記に変換する	bin(n)
変数を黄色化する	f'\033[33m{value}\033[0m'
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
データフレームの全列を散布図を用いて可視化する	sns.pairplot(df)
データフレームのカラム一覧を見る	df.info()
横棒グラフをラベンダー色を用いて描画する	plt.barh(データ列x, データ列y, color='lavender')
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
リストとリストの散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
横軸に説明を付ける	plt.xlabel('x軸ラベル')
0で全要素を初期化したベクトル	np.zeros(要素数)
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
コマンドラインフラグの状態	sys.flags
ヒストグラムの色をサーモンに指定する	plt.hist(データ列, color='salmon')
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
オプションで、出力先を標準エラーにする	file = sys.stderr
ファイルパスのファイルサイズ	os.path.get_size(filepath)
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
棒グラフをオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームを表示するとき表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
カウンタ同士で共通部分を求める	aCounter & aCounter2
データフレームのカラムのNaNを最大値で埋める	df[col].fillna(df[col].max())
データフレームの列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
要素一つのりスト	[element]
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
実数が正の数か調べる	x > 0
星マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: フォントの色をシルバーに設定する	color = 'silver'
折れ線グラフでデータ列の推移を描画する	plt.plot(range(len(データ列)), データ列)
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
ネイビー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
浮動小数点数を整数にする	int(x)
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ポイント印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ダークスラテグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
オプションで、出力先を標準出力に指定する	file = sys.stdout
option: 印を菱形に変更する	marker = 'D'
散布図の星印の大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
マッピングのキー一覧を参照する	list(aDict)
データフレームを関数によってグループ分けする	df.groupby(関数)
データフレームのstart行目からend行目まで選択する	df[start:end]
時刻をインポートする	import datetime
表から指定された二つの列を抽出する	df[[column, column2]]
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ファイルを開いて]追加ストリームを見る	open(filepath, mode='a')
文字列が組に含まれる	element in aTuple
日付データは日付データより後ろか調べる	aDate > aDate2
リストとリストについて散布図を描画して、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
コーンズシルク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
ふたつの辞書を合体する	aDict | aDict2
青い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
小数点数の絶対値	math.fabs(x)
正規分布による確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
一点鎖線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
行列の差を見る	aArray - aArray2
折れ線グラフの右三角印の線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データ列を100の位で四捨五入する	ds.round(-2)
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームの先頭n行	df.head(n)
集合を組に変換する	tuple(aSet)
グリーンイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
線グラフを青い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: スラグレーにフォントの色を設定する	color = 'slategray'
データフレームの上位25%	df.quantile(0.25)
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
黒い▼マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列はひらがなかテストする	('ぁ' <= ch <= 'ん')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
散布図の右三角印の色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
データフレームのリストカラムの中のNaNの合計を数える	df[aList].isna().sum()
組の文字列が最初に見つかるインデックス	aTuple.index(element)
グラフを全般的にパステル調にする	sns.set(pallete='pastel')
表データの各グループごとの個数	df.groupby(column).count()
セットの全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
データ列の推移を赤い実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
オレンジ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列をASCIIコード列にする	[ord(ch) for ch in s]
option: マーカーの太さを変更する	markeredgewidth = 2.5
データフレームのリストカラムは正規分布からどの程度、尖っているか確認する	df[aList].skew()
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: スラグレー色を使う	color = 'slategray'
データ列の時を使う	ds.dt.hour
シアン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ポイントマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
散布図をホワイト色で描画する	plt.scatter(データ列x, データ列y, color='white')
option: フォントの色をビスクに設定する	color = 'bisque'
実行結果を太文字で表示できる文字列にする	f'\033[1m{value}\033[0m'
値を両端キューのn番目に差し込む	deq.insert(n, element)
文字列が文字列リストにある	s in aStringList
勾配ブースティングを使ってクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
空のロバスト分類モデルを準備する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
複数の列の値によってデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
三変数の最も大きい値を計算する	max(x, y, z)
データフレームのカラムを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色をダークグリーンにする	color = 'darkgreen'
縦棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームを複数の列の値で集約する	df.groupby(columns)
文字列でフォーマットして日付データを文字列にする	"aDate.strftime(""%d/%m/%y"")"
option: グラフの色を青緑にセットする	color = 'teal'
データ列が正規分布からどれだけ、歪んでいるか調べる	ds.kurt()
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
文字列を水色にする	f'\033[36m{value}\033[0m'
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
データフレームを各列毎にグループ分けし、、列の分散を求める	df.groupby(column)[column2].var()
リストとイテラブルについて散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 色をターコイズに設定する	color = 'turquoise'
文字列を両端キューにエンキューする	deq.appendleft(element)
データフレームの欠損値を後の値に設定する	df.fillna(method='bfill')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
ファイルを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
タイムスタンプデータは何日か知る	aDatetime.day
カウンタを集合に変換する	set(aCounter)
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
JSONファイルファイル名がか	filename.endswith('.json')
xの絶対値	abs(x)
リストとイテラブルについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
二つのデータフレームを異なる列をキーにして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
option: ブルーバイオレット色を使う	color = 'blueviolet'
データフレームのリストカラムの25パーセンタイル	df[aList].quantile(0.25)
option: ハニーデュー色を使う	color = 'honeydew'
option: コーンズシルク色を使う	color = 'cornsilk'
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
逆双曲線正弦	math.asinh(x)
Pandasで、文字列のエポック秒からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
散布図をダークゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
option: フォントの色をダークマゼンタに設定する	color = 'darkmagenta'
線グラフの色をシアンにセットする	plt.plot(データ列x, データ列y, color='cyan')
データフレームの値を正規表現で一度にreplに変更する	df.replace(pattern, repl, regex=True)
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
プロットのパレットを全般的に明るくする	sns.set(pallete='bright')
半透明の一点鎖線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
リストとリストの散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
Pandasで、文字列をタイムスタンプに変換する	pd.to_datetime(s)
両端キュー中の要素の数を数える	deq.count(element)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームのカラムをにバイオリン図で図示する	sns.violinplot(x='カテゴリ列', y='列', data=df)
クラス分類をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
辞書に別のマッピングのエントリを更新する	aDict.update(aDict2)
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
列によって大きい順に破壊的にデータフレームを並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
青紫色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
option: ゴールデンロッド色を使用する	color = 'goldenrod'
スノー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームを列で分類して、列の要約統計量を計算する	df.groupby(column).describe()[column2]
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgray')
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
rgbの▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
データフレームを複数の列を用いてによって破壊的に並べる	df.sort_values(by=column, inplace=True)
タプルを逆さにする	reversed(aTuple)
データフレームの欠損値を中央値で置換する	df.fillna(df.median())
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
option: アンティークホワイト色を用いる	color = 'antiquewhite'
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
二つの列を用いてで破壊的にデータフレームを並べる	df.sort_values(by=['A', 'B'], inplace=True)
自然数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
nはn2か	n == n2
nがn2より小さいかどうかテストする	n < n2
分類モデルのF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
カーキ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
エポック秒から日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
破壊的にデータフレームを昇順に'A'列によって並べる	df.sort_values(by='A', ascending=True, inplace=True)
データフレームを列の値でグループ化する	df.groupby(column)
横棒グラフをアリスブルー色を使って描画する	plt.barh(データ列x, データ列y, color='aliceblue')
青い破線でラインを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
縦棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
部分文字列が部分文字列で始まる	s.startswith(sub)
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
ケンドール順位相関係数としてデータフレームの相関行列	df.corr(method='kendall')
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
プロットにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
小数点数の双曲線正弦の逆数	math.asinh(x)
データフレームの列の欠損値を中央値に設定する	df[col].fillna(df[col].median())
アクア色として線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
ライトシアン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
タプルの末尾からn番目以前の要素を取り出す	aTuple[:-n]
option: 色をローングリーンに変更する	color = 'lawngreen'
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
異なる列をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図に下三角印を加える	plt.scatter(データ列x, データ列y, marker='v')
多次元データを特異値分解を用いてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
option: 茶色に色を変更する	color = 'brown'
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
タプルの最初のn要素を取り除く	aTuple[n:]
インデックスによってデータフレームをソートする	df.sort_index()
option: 改行コードをUNIXに設定する	newline = '\n'
データ列の各データは何回出現するか調べる	ds.value_counts()
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
文字コードを文字にする	chr(unicode)
濃いシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ライトスチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
日付時刻データの日数	aDatetime.day
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
淡いピンク色にヒストグラムの色を指定する	plt.hist(データ列, color='lightpink')
文字列がタプルに含まれないかどうか調べる	element not in aTuple
分類結果のPPVを算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
レベッカパープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームを列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
折れ線グラフをティール色として描画する	plt.plot(データ列x, データ列y, color='teal')
option: シアン色を使う	color = 'cyan'
線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
モジュールを検索するパス	sys.path
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
0からnまでの整数リスト	list(range(n+1))
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
今日の日付時刻	datetime.datetime.now()
データフレームを各列毎にグループ分けして、カラムの個数を算出する	df.groupby(column)[column2].count()
列で表データをソートして、下位を取り出す	df.sort_values(columns).tail(n)
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
ヒストグラムを描いて、ビン数をセットする	plt.hist(データ列, bins=区関数)
折れ線グラフを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
リストの要素を逆順にする	aList[::-1]
コレクションを使う	import collections
カーキ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
文字をユニコードに変換する	ord(ch)
日付時刻データの分を見る	aDatetime.minute
データフレームのカラムのNaNを最頻値にセットする	df[col].fillna(df[col].mode().iloc[0])
文字列が全て英数字か調べる	s.isalnum()
データ列の歪度	ds.kurt()
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
nが1、もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
列の各値を両端キューの最初につけ加える	deq.extendleft(iterable)
赤い△マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
要素が集合に含まれないかどうか確認する	element not in aSet
データフレームからn行、サンプリングする	df.sample(n)
ひとつでも非空白が文字列中にあるか調べる	any(not c.isspace() for c in s)
星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*')
カウンタの上位を列挙する	aCounter.most_common(k)
データフレームを列によってソートして、下の方n件を取り出す	df.sort_values(columns).tail(n)
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
組を引数として展開してプリントする	print(*aTuple)
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
縦棒グラフを小麦色色を使って描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームからカテゴリデータのカラム名の一覧	df.select_dtypes('object').columns
2変数の最小値	min(x, y)
数式を数値にする	float(e)
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
ヒストグラムをオレンジレッド色を使って描画する	plt.hist(データ列, color='orangered')
タプルをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ロバストな重回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
option: 黄色に色をする	color = 'yellow'
データフレームの列の欠損値を平均値に指定する	df[col].fillna(df[col].mean())
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
シルバー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データフレームのリスト列の尖度	df[aList].skew()
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの欠損値をxで埋める	df.fillna(x)
option: 追加モードに変更する	mode = 'a'
データフレームを'A'列で昇順にソートし、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: オレンジレッド色を用いる	color = 'orangered'
ユニークな値を要素とするベクトル	np.unique(aArray)
option: 改行しない	end = ''
線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
上限nの双方向キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
リスト内の要素が少なくともひとつ真か確認する	any(aList)
実行結果を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
データ列をValueMapでまとめて置き換える	ds.replace(ValueMap)
リストをシャッフルする	random.shuffle(aList)
縦棒グラフを描いて中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームのリスト列の正規分布に対する左右対称性を求める	df[aList].kurt()
レモンシフォン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
黒い右三角マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムを描画して、ビンの数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフのラインスタイルを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームを破壊的に2つの列によってによって整列する	df.sort_values(by=['A', 'B'], inplace=True)
グラフの全般的に色テーマをパステル調にする	sns.set(pallete='pastel')
データフレームのカラムの値がx未満の行を選ぶ	df[df[column] < x]
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
ケンドール相関係数を用いてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='kendall')
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
xが1、もしくは2か	x == 1 or x == 2
黒いポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
option: トマトを使う	color = 'tomato'
イテラブルを文字列リストに変換して、タブでつなげる	'\t'.join(map(str, iterable))
データフレームから列を３つのみ選択する	df[[column, column2, column3]]
マッピングから項目名の値か、もしくは要素を見る	aDict.get(key, element)
nがn2未満、またはn3以上か	n < n2 or n >= n3
グリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
バイナリモードでファイルをオープンする]	open(filepath, mode='rb')
ゲインズボロ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
イテラブルとリストの散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
option: スラグレーを用いる	color = 'slategray'
カーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='khaki')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
データフレームの尖度を計算する	df.skew()
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
アクアにヒストグラムの色をする	plt.hist(データ列, color='aqua')
符号付き整数の最大値	sys.maxsize
縦棒グラフをミッドナイトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='midnightblue')
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
文字コードtextで追加できるようにファイルをオープンする]	open(filepath, mode='a', encoding=text)
ヒストグラムの色をターコイズに指定する	plt.hist(データ列, color='turquoise')
縦棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
プロットにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
option: ボックスチャートを横方向にする	vert = False
データ列の50パーセンタイル	ds.median()
option: グラフの色を白に設定する	color = 'white'
リストとデータ列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームから重複した行を削除する	df.drop_duplicates()
イテラブルを文字列リストに変換して、カンマを用いて連結する	','.join(map(str, iterable))
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのそれぞれのグループの最小値	df.groupby(column).min()
カラムの文字列をNaNにする	ds.replace(s, np.nan)
黒いポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
ペールグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
リストをシアンにする	f'\033[36m{value}\033[0m'
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
配列のデータ型を求める	aArray.dtype()
n個の数値イテラブル	range(n)
折れ線グラフをオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='orange')
nで乱数シードを初期化する	random.seed(n)
option: サドルブラウン色を使用する	color = 'saddlebrown'
スタックの値をn個分輪番で回す	deq.rotate(n)
線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
スクリプトの名前	sys.argv[0]
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
暗い赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
データ列のタイムゾーンを東京に変更する	ds.tz_convert('Asia/Tokyo')
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
option: グラフの色をバイオレットにする	color = 'violet'
異なる列をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
nが一桁の数か	0 <= n <= 9
折れ線グラフの色をダークシアグリーンにセットする	plt.plot(データ列x, データ列y, color='darkseagreen')
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列に日本語が含まれるかどうか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
option: グラフの色をリネンに変更する	color = 'linen'
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
データフレームのカラムの標本標準偏差	df[col].std()
モデルを当てはめる	model.fit(説明変数, 目的変数)
データフレームから指定された４列だけ抽出する	df[[column, column2, column3, column4]]
リストの要素を取り除く	aList.clear()
実行結果をアンダーライン付き化する	f'\033[4m{value}\033[0m'
黒い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
nをn2で割ったモジュロを求める	n % n2
赤いポイントマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームから数値データの列のみ取り出す	df.select_dtypes('number')
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
リストを箱ひげ図で可視化する	plt.boxplot(データ列)
行列の各要素のアダマール積	np.multiply(aArray, aArray2)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
実線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
乱数生成系列を初期化する	random.seed()
文字列内に数字があるかどうか調べる	any(c.isdigit() for c in s)
度数分布図を上限から下限までの区間で描画する	plt.hist(データ列, range=(start, end))
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
三数の最小値	min(x, y, z)
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームから指定されたデータ型のカラム名のリスト	df.select_dtypes(型).columns
JSON形式のファイルを辞書に変換する	json.load(fin)
データフレームのn行以降を取り出す	df[n:]
列によってデータフレームをグループ化して、標準偏差を算出する	df.groupby(column).std()
全要素を1で初期化した行列を作成する	np.ones(行数, 列数, dtype=np.int)
処理中の例外を情報	sys.exc_info()
カラーマップを用いてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
データフレームを表示するとき、小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
データフレームの指定された列のみ取り出す	df[[column]]
JSONLファイルにデータフレームをCSVとして書き込む	df.to_csv(filename)
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
表データの末尾n行を抽出する	df.tail(n)
ヒストグラムの色をロイヤルブルーに指定する	plt.hist(データ列, color='royalblue')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
列をカウントしてカウンタから引く	aCounter.subtract(iterable)
昇順にデータフレームを列でソートする	df.sort_values(by=column, ascending=True)
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
nが無限に続く数列を得る	itertools.repeat(n)
データフレームの中で何行、重複するか見る	df.duplicated().sum()
セットをリストに変換する	list(aSet)
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
データフレームの正規分布に対する上下広がり	df.skew()
データフレームを列の値ごとにグループ化し、それぞれのグループの最小値を求める	df.groupby(column).min()
文字列の開始位置先に部分文字列が含まれる	s.find(sub, start) != -1
濃くカラーパレットをグラフの描画で用いる	sns.set(pallete='deep')
線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
ファイルの拡張子付きのファイル名を使う	os.path.basename(filepath)
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
リストにリストを加えて広げる	aList.extend(aList2)
数式を部分分数として展開する	sympy.apart(e)
最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
縦棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
散布図を大バツ印を使い、描画する	plt.scatter(データ列x, データ列y, marker='X')
数値を簡単にする	sympy.sympify(e)
リスト内の要素が少なくともひとつ真か調べる	any(aList)
時刻を使う	import datetime
散布図の下三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
列を使ってデータフレームをグループ分けし、、グループの件数を知る	df.groupby(column).size()
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
option: 線種を破線に指定する	linestyle = 'dashed'
線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ひとつでも大文字が文字列内に含まれるか調べる	any(c.isupper() for c in s)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
ランダムフォレストでクラス分類をする	model = sklearn.ensemble.RandomForestClassifier()
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
折れ線グラフのポイント印の色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ネイピア数を使う	math.e
数列をヒストグラムにする	plt.hist(データ列)
nはリストの一つか	n in aList
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
赤い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
イテラブルからカウンタを新規生成する	collections.Counter(iterable)
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
カラムの値を正規表現patternでreplに置換する	ds.replace(pattern, repl, regex=True)
xを浮動小数点数型にする	float(x)
タプルの先頭	aTuple[0]
option: 色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
nが5で割り切れる	n % 5 == 0
リストを等しい量になるようにn個に分割する	pd.qcut(aList, n)
ラベンダーにヒストグラムの色をセットする	plt.hist(データ列, color='lavender')
文字列が英数字か調べる	s.isalnum()
日付時刻データが土曜日	aDatetime.weekday() == 5
レモンシフォン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
折れ線グラフの下三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
イテラブルの各要素をキューの末尾に追加する	deq.extend(iterable)
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
オブジェクトは文字列型	isinstance(obj, str)
シーケンスからカウンタを作る	collections.Counter(iterable)
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
文字列の示すエンコーディングとしてファイルを開く]	open(filepath, encoding=s)
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
追加できるように既存のファイルを文字列の示す文字コードとして開く]	open(filepath, mode='a', encoding=s)
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
タイムスタンプデータの曜日を整数で見る	aDatetime.weekday()
組をミュータブルにする	list(aTuple)
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
列でデータフレームを整列し、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
グラフの描画を見やすくする	import seaborn as sns
データ列は何秒か調べる	ds.dt.second
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ライムグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
タプルをn倍する	aTuple * n
２つのオブジェクトが同じか	obj is obj2
リストと配列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ダークターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
組の最初のオブジェクトを探す	aTuple.index(element)
ミディアムターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
変数を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ベクトルをイテラブルから初期化する	np.array(iterable)
option: 読み込まないフッタをnにセットする	skipfooter = n
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
第２引数で指定されたファイル名	sys.argv[1]
データフレームの列とカラムのヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
データフレームのカラムの値を正規表現でまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
ふたつの関係が真スーパーセット	aSet > aSet2
文字列中にひとつでも非ASCII文字があるか	any(not c.isascii() for c in s)
n個の要素があるリストを作る	[element] * n
散布図に青い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
プロットの縦軸の軸名をuntitledに設定する	plt.ylabel('y軸ラベル')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
散布図を赤いダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
実数の仮数部を算出する	math.frexp(x)[0]
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームを各列毎にグループ化して列の標準偏差を求める	df.groupby(column)[column2].std()
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
折れ線グラフをミディアムパープル色を使って描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
バイナリモードとしてファイルパスをオープンして]fとする	f = open(filepath, mode='rb')
オレンジにヒストグラムの色を指定する	plt.hist(データ列, color='orange')
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
データフレームとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
改行せずにリストを出力する	print(value, end='')
各グループごとにデータフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
TSVファイルからSJISでカンマ区切りのファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
nマイナスn2	n - n2
option: 論理値型を用いる	dtype = np.int32
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
リストとリストの散布図にrgbの上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
日付データは日付データと同時	aDate == aDate2
キューを空にする	deq.clear()
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
両端キューをポップする	deq.pop()
シーグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
リストと数列の散布図を描画して、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
データフレームのカラムの中にある日付データの合計を求める	df[col].isin([value]).sum()
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
ヒストグラムをプロットしてビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフを半透明の一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: 文字コードtextを使う	encoding = text
2進文字列を整数に変換する	int(s, 2)
ライトサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
リストと配列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 複素数型を用いる	dtype = bool
option: マーカーの線幅を変更する	markeredgewidth = 2.5
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
折れ線グラフの色をダークカーキにセットする	plt.plot(データ列x, データ列y, color='darkkhaki')
線形回帰モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
文字列が全て十進数字かどうか調べる	s.isdecimal()
データフレームを千の位で丸める	df.round(-3)
オプションで、出力先を標準エラーに設定する	file = sys.stderr
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
プログラムの実行を正しく止める	sys.exit(0)
浮動小数点数のk進対数	math.log(x, k)
折れ線グラフの色をフローラルホワイトに指定する	plt.plot(データ列x, データ列y, color='floralwhite')
線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
データフレームの全カラムを散布図としてプロット化する	sns.pairplot(df)
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
2つのデータフレームを結合する	pd.merge(df, df2)
数値の符号を同じにする	math.copysign(x, x2)
ヒストグラムをブランチドアーモンド色として描画する	plt.hist(データ列, color='blanchedalmond')
ファイルが存在しないかどうか調べる	not os.path.exists(filepath)
文字列をコロンによって区切り、列挙する	s.split(':')
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
option: ドジャーブルー色を使う	color = 'dodgerblue'
黒い▲マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
JSONLファイルにデータフレームをエクセルファイルとして保存する	df.to_excel(filename)
画像ファイルとしてグラフを保存する	plt.savefig('foo.png')
値が集合に含まれないかどうか	element not in aSet
新しいロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
等量でビン数nでリストをビンニングする	pd.qcut(aList, n)
数列とリストについての散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
パープル色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
赤い星マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームを各カラム毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
空のチェーンマップ	collections.ChainMap()
浮動小数点数の逆双曲線正接を算出する	math.atanh(x)
option: ローングリーンにグラフの色を設定する	color = 'lawngreen'
カテゴリでグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
イテラブルから上限nの両端キューを作る	collections.deque(iterable, maxlen=n)
両端キュー中の要素のインデックス	deq.index(element)
変数を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
option: グラフの種類を点線に設定する	linestyle = 'dotted'
散布図の四角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
カウンタ同士で交差	aCounter & aCounter2
文字列中に非アルファベットが含まれるかどうか調べる	any(not c.isalpha() for c in s)
棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
トマトにヒストグラムの色を設定する	plt.hist(データ列, color='tomato')
リストの末尾を除く	aList[:-1]
横棒グラフをビスク色として描画する	plt.barh(データ列x, データ列y, color='bisque')
折れ線グラフの色をハニーデューに変更する	plt.plot(データ列x, データ列y, color='honeydew')
縦棒グラフをナバホホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='navajowhite')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
散布図の四角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
タプル自身の長さnの順列	itertools.permutations(iterable, n)
新しいガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
year年の日付	datetime.date(year=year, month=1, day=1)
BOM付きとしてファイルパスを開く]	open(filepath, encoding='utf_8_sig')
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
十六進数字を全て見る	string.hexdigits
分割数nでデータフレームの中の列を等量で分割する	pd.qcut(df[col], n)
option: ダークサーモン色を用いる	color = 'darksalmon'
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
文字列の最初から部分文字列を探す	s.find(sub)
縦棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
option: ライトスカイブルー色を使用する	color = 'lightskyblue'
ヒストグラムをオリベドラブ色として描画する	plt.hist(データ列, color='olivedrab')
データフレームを２つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームの列と列のヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
整数のn乗して実数による余りを求める	pow(x, n, y)
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
日付データの月	aDate.month
自然数の順列の総数	math.perm(n)
サポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: インデックスを自動的な連番に変更する	index_col = None
セパレータで文字列を分割して、文字列リストにする	s.split(sep)
パラメータについて数値をn階微分する	sympy.diff(e, z, n)
数列とデータ列の散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
分割数nでリストを分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
option: 大きい順にする	ascending = False
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
半透明の破線で数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
リストと配列についての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
データフレームを各列毎に集約し、列の合計を求める	df.groupby(column)[column2].sum()
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
タイムスタンプデータをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
データフレームのカラムの平均値	df[col].mean()
ヒストグラムを淡いピンク色色を使って描画する	plt.hist(データ列, color='lightpink')
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
実測値を単回帰モデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
列の種類	df.info()
セットが空集合でない	len(aSet) != 0
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
ファイルパスをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
文字列に日本語があるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
計算機イプシロン	sys.float_info.epsilon
変数名をキーとして辞書	dict(name=element)
データフレームの全列の相関をプロットする	sns.pairplot(df)
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
ふたつの関係が部分集合かどうか	aSet.issubset(aSet2)
双方向キューに文字列をプッシュする	deq.append(element)
正規表現に複数行対応として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
データフレームのカラムを100の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
option: 色をライムに変更する	color = 'lime'
小数点数が無限大か調べる	math.isinf(x)
nをn2で整数除算する	n // n2
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
シルバー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
ファイル名がTSVファイル	filename.endswith('.tsv')
クラス分類のアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
option: 色をオリベドラブに変更する	color = 'olivedrab'
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
横棒プロットを描画する	plt.barh(ラベル列, データ列)
今日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
双方向キューをdequeue	deq.popleft()
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
文字列の右側からタブを除去する	s.rstrip('\t')
ヒストグラムの線の種類を破線に指定する	plt.hist(データ列, linestyle='dashed')
等しい量になるようにn個にデータ列を分割する	pd.qcut(ds, n)
折れ線グラフを半透明の点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
空の単回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
nとn2が同じ値かどうか調べる	n == n2
option: ミッドナイトブルーにグラフの色を設定する	color = 'midnightblue'
色付きの点線で配列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
回数を制限して文字列を置き換える	s.replace(sub, newsub, n)
option: 改行するの代わりに文字列を用いる	end = s
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
データフレームの歪度を算出する	df.kurt()
棒グラフをフクシア色を用いて描画する	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
データフレームのヒストグラム付き散布図を描く	sns.jointplot(x='列名', y='列名', data=df)
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
option: パールゴールデンロッド色を用いる	color = 'palegoldenrod'
サポートベクター分類モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
紺にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
option: 色をアクアマリンに変更する	color = 'aquamarine'
文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
整数nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
データフレームの列を文字列に名前変更する	df.rename(columns={column: name})
イテラブルを累加する	itertools.accumulate(iterable)
方程式として数値の変数の解を求める	sympy.solve(e, z)
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
行列の行ごとの最小値を計算する	np.min(aArray, axis=1)
破壊的にデータフレームを列名リストによってでソートする	df.sort_values(by=column, inplace=True)
文字列はタイトルケースか確認する	s.istitle()
分類モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
バイナリ書き込みできるようにファイルを開く]	open(filepath, mode='wb')
再帰の上限を増やす	sys.setrecursionlimit(1000000)
データ列を中央値でビン分割する	pd.qcut(ds, 2)
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
グラフで使える色名の一覧	matplotlib.colors.cnames
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: データ型として８ビット整数型を用いる	dtype = np.int8
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
実数の天井	math.ceil(x)
黒い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
折れ線グラフのクロスマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: ポイントマーカーを加える	marker = '.'
タプルをカンマ区切りでプリントする	print(*aTuple, sep=',')
グラフの目的を論文に変更する	sns.set(context='paper')
折れ線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
黒い菱形マーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
カテゴリでグループ化して、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: フォントの色をマゼンタに設定する	color = 'magenta'
データフレームの棒プロットをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
ベクトルを平坦化する	aArray.flatten()
シアンにヒストグラムの色を指定する	plt.hist(データ列, color='cyan')
JSONLファイルにファイルでデータフレームを保存する	df.to_excel(filename)
棒グラフをライトサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データ列のメディアンを計算する	ds.median()
折れ線グラフの色をミントクリームにセットする	plt.plot(データ列x, データ列y, color='mintcream')
折れ線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
データ列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
文字列が大文字かどうか調べる	s.isupper()
配列とイテラブルについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
オリベドラブ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
ヒストグラムの色をサンディーブラウンにセットする	plt.hist(データ列, color='sandybrown')
マゼンタにヒストグラムの色をする	plt.hist(データ列, color='magenta')
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
赤い菱形マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: 四角マーカーを用いる	marker = 's'
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
降順にデータフレームを破壊的に列によって並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
t-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
rgbの△マーカーを配列と配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
マッピングの浅いコピーを作る	aDict.copy()
ファイルでデータフレームをJSONLファイルに書き込む	df.to_excel(filename)
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
option: 三角印を加える	marker = '^'
nがn2以下または、n3以上かどうか確認する	n <= n2 or n >= n3
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
option: 線種を実線に指定する	linestyle = 'solid'
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
オブジェクトはリストかタプルか	isinstance(obj, (list)
折れ線グラフの色をダークオレンジに指定する	plt.plot(データ列x, データ列y, color='darkorange')
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
リストと配列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
列の重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
データフレームの欠損値が含まれる箇所を	df.style.highlight_null()
option: フォントの色をモカシンに設定する	color = 'moccasin'
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
nはn2と等しいか	n == n2
マッピングの項目名の値	aDict[key]
部分文字列が文字列の開始位置より後に存在しないか	s.find(sub, start) == -1
値が集合に含まれないか	element not in aSet
スタッキングとしてクラス分類をする	sklearn.ensemble.StackingClassifier()
分数を使う	import fractions
option: フォントの色をレモンシフォンにセットする	color = 'lemonchiffon'
データフレームを表示するとき、小数点以下をn桁に設定する	pd.set_option('precision', n)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: モカシン色を使う	color = 'moccasin'
浮動小数点数を二乗する	x ** 2
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
ファイルパスからファイル名を取り出す	os.path.basename(filepath)
柱状図のプロットし、、正規化する	plt.hist(データ列, density=True)
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
▽印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
option: ダークサーモン色を使う	color = 'darksalmon'
ファイルから拡張子付きのファイル名を見る	os.path.basename(filepath)
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
項目名がマップにあるか確認する	key in aDict
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
option: ダークシアグリーン色を使用する	color = 'darkseagreen'
マッピング上でキーがまだ定義されていないか調べる	key not in aDict
ヒストグラムをチョコレート色を用いて描画する	plt.hist(データ列, color='chocolate')
ヒストグラムをシルバー色を使って描画する	plt.hist(データ列, color='silver')
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの星印の色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
クロスマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
データフレームのNaNをモードで埋める	df.fillna(df.mode().iloc[0])
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
第２コマンド引数	sys.argv[1]
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
option: シャルトリューズを用いる	color = 'chartreuse'
rgbの右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームのリストカラムの中に文字列とがいくつあるか数える	df[aList].isin([value, value2]).sum()
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
Pythonインタプリタの実行ファイルの絶対パスを知る	sys.executable
データ列の相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
短い説明をグラフ中の(x,y)の場所に表示する	plt.legend(loc=(x, y))
predicateFuncが真となる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
バイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
サーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
オリーブ色を用いてヒストグラムを描画する	plt.hist(データ列, color='olive')
イテラブルを配列に変換する	np.array(iterable)
小文字を全て見る	string.ascii_lowercase
最大値・最小値の範囲として一様な乱数	random.uniform(最小値, 最大値)
折れ線グラフを点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted')
赤い一点鎖線を使って数列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
オブジェクトは辞書	isinstance(obj, dict)
本日が金曜日かどうか確認する	datetime.datetime.today().weekday() == 4
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
配列自身の長さnの順列	itertools.permutations(iterable, n)
nが5の倍数かどうか調べる	n % 5 == 0
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
リストと数列の散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
カテゴリで色分けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: グラフの色をサドルブラウンに指定する	color = 'saddlebrown'
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
Pandasで、dateStringをdatetime64型に変換する	pd.to_datetime(dateString)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
セットから別の集合の要素を除去する	aSet.difference_update(aSet2)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
データフレームのカラムはどの程度、分散しているか確認する	df[col].var()
データ列の中央値を計算する	ds.median()
オレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='orange')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
データフレームを使う	import pandas as pd
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
折れ線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
耐火レンガ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
リストが空でないか	len(aList) != 0
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
折れ線グラフに右三角印を用いる	plt.plot(データ列x, データ列y, marker='>')
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ファイルをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
データフレームの中の列と列に重複があれば、落とす	df.drop_duplicates(subset=[column, column2])
データ列を千の位で四捨五入する	ds.round(-3)
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
option: データ型を指定する	dtype = np.int8
浮動小数点数のサイン	math.sin(x)
文字列の両端から空白と改行を取り除く	s.strip()
時刻を用いる	import datetime
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
貝殻色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
タイムスタンプデータのタイムゾーンを見る	aDatetime.timetz()
マルーン色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')

欠損値を含めてデータフレームをある列でグループ化する	df.groupby('列A', dropna=False)
データ列とイテラブルについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
折れ線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
rgbの丸マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
行列の和	aArray + aArray2
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
浮動小数点数のn乗して浮動小数点数による余り	pow(x, n, y)
黒い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
折れ線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
紺碧色で線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
nがn2	n == n2
文字列をISO8601形式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
データフレームの指定したカラムにおいてどの値が頻出か見る	df['列A'].mode()
ふたつの関係が真下位集合か調べる	aSet < aSet2
デックに要素をエンキューする	deq.appendleft(element)
列と列を連結する	itertools.chain(iterable, iterable2)
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフに左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
ゼロ埋めされた符号なし８ビット整数型のベクトルを作る	np.zeros(要素数, dtype=np.uint8)
2を底とする対数	math.log2(x)
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
環境のバイトオーダを知る	sys.byteorder
option: 印を右三角に指定する	marker = '>'
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
データフレームの指定したカラムの母標準偏差	df['列A'].std(ddof=0)
スピアマン相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
指定したカラムが正規分布からどれだけ、尖っているか見る	df['列A'].skew()
ティール色でヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図に黒いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
オプションで、標準出力を使う	file = sys.stdout
データフレームから指定した二つの列だけ抽出する	df[['列A', '列B']]
ファイルを文字列の示す文字コードで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
配列のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
追加モードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='a')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
リストと数列についての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
指定した列で集計し、それぞれの分散を求める	df.groupby('列A').var()
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
文字列の先頭だけ大文字化する	s.capitalize()
option: グラフの色をミディアムオーキッドに変更する	color = 'mediumorchid'
下三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
データフレームのインデックス名一覧を求める	df.index
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: ダークターコイズ色を使用する	color = 'darkturquoise'
ドジャーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
option: 色をペールグリーンにする	color = 'palegreen'
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
nの二進数リテラルを見る	bin(n)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
真上位集合かどうか	aSet > aSet2
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
横棒グラフをコーンフラワーブルー色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
指定した列のカテゴリで集計し個数を求める	df.groupby('列A').count()
文字列に日本語が含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
折れ線グラフの星印を青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
プロットにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
文字列リストにイテラブルを変換して空白を用いて一つにする	' '.join(map(str, iterable))
データフレームをグループ化し、それぞれの最大値を求める	df.groupby('列A').max()
nから無限にカウントアップする	itertools.count(start=n)
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
組の先頭のn要素を取り除く	aTuple[n:]
ふたつの集合の差集合	aSet.difference(aSet2)
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
折れ線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
データシリーズの曜日は何日目か見る	ds.dt.dayofweek
項目名がマッピング上で定義済みかどうか調べる	key in aDict
option: 淡いピンク色色を使う	color = 'lightpink'
ダークグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームから1つのカラムだけ抽出する	df[['列A']]
実数以下の最大の整数を求める	math.floor(x)
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
大文字を全て見る	string.ascii_uppercase
範囲指定をした配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: グラフの色をブラックにする	color = 'black'
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
パレットトルコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
切り上げて整数にする	math.ceil(x)
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
縦棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームの指定したカラムの欠損値を最大値に指定する	df['列A'].fillna(df['列A'].max())
長さnのリストを得る	[0] * n
option: クリムゾン色を使用する	color = 'crimson'
リストとリストの散布図を描画し、マーカーを左三角にセットする	plt.plot(データ列x, データ列y, marker='<')
複数のデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームをCSV形式にBOM付きで出力する	df.to_csv('file.csv', encoding='utf_8_sig')
表データのn行目を削除し、	df.drop(n, axis=0)
データフレームから型リストデータ型の列を抽出する	df.select_dtypes(include=typeList)
白色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
実数を切り下げる	math.floor(x)
タイムスタンプ型の表データのあるカラムを表データのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
整数nはセットのどれかかどうか調べる	n in aSet
クラスは名前付きタプルか調べる	issubclass(C, tuple)
option: グラフの色をライトサーモンにセットする	color = 'lightsalmon'
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
書式をargsを引数としてフォーマットする	formatText.format(*args)
データフレームのカラムがどの程度、正規分布から歪んでいるか見る	df['列A'].kurt()
グラフのグリッドを暗くする	sns.set(style='darkgrid')
行列の逆行列を求める	np.linalg.inv(aArray)
タプルのn番目以降の部分を得る	aTuple[n:]
ペールグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
カウンタを高頻度な方からリストとして得る	aCounter.most_common()
折れ線グラフの三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ヒストグラムをダークシアン色を使って描画する	plt.hist(データ列, color='darkcyan')
トマト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
数値でデータフレームのNaNを埋める	df.fillna(x)
整数最小公倍数	math.lcm(n, n2)
option: ライトグリーンにグラフの色を変更する	color = 'lightgreen'
CSVをヘッダを指定せず読み込む	pd.read_csv('file.csv', header=None)
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
クラス分類の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
８ビット整数型の全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数, dtype=np.int8)
ロバストな線形分類器を作成する	model = sklearn.linear_model.HuberClassifier()
データ列のノルムをそろえる	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
プロットにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
配列と数列について散布図を描いてマーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
双方向キューのn番目の要素	deq[n]
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
n＋n2	n + n2
データフレームの選択したカラムの中にある文字列と日付データの合計を求める	df[['列A', '列B']].isin([value, value2]).sum()
データフレームを整列し、、新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
カウンタの最頻出な項目	aCounter.most_common()[0]
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
オーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
option: 不偏分散を用いる	ddof = 1
全要素を0で初期化した行列	np.zeros(要素数)
データ列をビン数nとして分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームをあるカラムのカテゴリでグループ化してグループごとの件数を知る	df.groupby('列A').size()
データフレームの指定したカラムの標準偏差を求める	df['列A'].std()
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
リストをコピーする	aList.copy()
option: 印を下三角に指定する	marker = 'v'
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
文字コードを文字に変換する	chr(unicode)
双方向キューの左に要素を追加する	deq.appendleft(element)
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームを二つの列によってまとめたグループ	df.groupby(['列A', '列B'])
TSVファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
option: グラフの色をバリーウッドに指定する	color = 'burlywood'
データシリーズの欠損値を後の行の値で埋める	ds.fillna(method='bfill')
折れ線グラフを一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの指定した名前リストの列だけ抽出する	df[columns]
要素が全て初期値の配列を作る	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームのある列をドロップしてみる	df.drop('列A', axis=1)
データフレームの選択したカラムを100の位で丸める	df[['列A', '列B']].round(-2)
データフレームの選択した列の欠損値を後の値に変更する	df[['列A', '列B']].fillna(method='bfill')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
整数nの八進リテラル	oct(n)
文字列中に非数字が含まれるか	any(not c.isdigit() for c in s)
数の値が整数か判定する	x.is_integer()
カテゴリで色分けしてデータフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: パレットトルコイズにグラフの色を指定する	color = 'paleturquoise'
ダークマゼンタ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
データフレームの指定した列の欠損値をxで埋める	df['列A'].fillna(x)
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
ラインを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
要素∈集合	element in aSet
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフに左三角印を用いる	plt.plot(データ列x, データ列y, marker='<')
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
部分文字列で右から文字列を区切る	s.rsplit(sub)
折れ線グラフの三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ヒストグラムの色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
データフレームのある列を配列に変換する	df['列A'].values
option: ライトサーモン色を使う	color = 'lightsalmon'
フォレストグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
データフレームが何行重複するか確認する	df.duplicated().sum()
option: 改行しない	end = ''
文字列が部分文字列で終わる	s.endswith(sub)
データフレームから型リストで指定したデータ型の列のみ選択する	df.select_dtypes(include=typeList)
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
データフレームのある列を配列として選択する	df['列A'].values
２つの数値を文字列で区切ってプリントする	print(value, value2, sep=s)
nとn2の値を足してnにする	n += n2
最大値・最小値で整数乱数を発生させる	random.randint(最小値, 最大値)
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
文字列に漢字が含まれるか確認する	re.search('[\u4E00-\u9FD0]', s)
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データフレームの指定した列を小数点以下n桁で丸める	df['列A'].round(n)
列をビン数nとして分割する	pd.cut(ds, n)
数列を三つ並べて柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
数列と配列の散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データ列の推移を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
代数計算モジュールを使う	import sympy
データフレームの指定した列を十の位で丸めて整数にする	df['列A'].round(-1).astype(int)
二つの列でデータフレームを集計して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: パールゴールデンロッド色を用いる	color = 'palegoldenrod'
辞書順で2つの文字列を比較する	s < s2
ファイルから1バイト読み込む	f.read(1)
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
option: スレートブルーを使う	color = 'slateblue'
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
数列とリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームのある列の統計量を見る	df['列A'].describe()
要素が集合に含まれるか調べる	element in aSet
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
データフレームのカラムのNaNを前の値で置換する	df['列A'].fillna(method='ffill')
グラフを正方形にする	plt.axis('equals')
イテラブルを文字列に変換して、部分文字列で連結する	sub.join(map(str, iterable))
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
散布図をライトゴールドロディイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
横棒グラフをライトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightblue')
黄緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームをある列によって降順にソートする	df.sort_values(by='列A', ascending=False)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
2つのデータ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
２つのデータフレームを横向きに一つにする	pd.merge(df, df2)
分類モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ライムグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
三つのデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=1)
線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームを出力する	df.to_csv('file.csv')
線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの指定したカラムの標本標準偏差	df['列A'].std(ddof=1)
柱状グラフでリストを可視化する	plt.hist(データ列)
シスル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
標準入力から1文字分読み込む	sys.stdin.read(1)
あるカラムの中にある文字列の合計を求める	df['列A'].isin([value]).sum()
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
xが1、もしくは2か確認する	x == 1 or x == 2
実数の2乗	x ** 2
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
小数点数の指数	math.frexp(x)[1]
イテラブルから配列を作る	np.array(iterable)
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
現在実行中の例外を情報	sys.exc_info()
option: ブラックを使う	color = 'black'
データフレームをCSV形式を用いて保存する	df.to_csv('file.tsv', sep='\t')
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
指定したカラムのNaNをその平均値で埋める	df['列A'].fillna(df['列A'].mean())
カラムの不偏標準偏差	df['列A'].std()
折れ線グラフの色をライトシアンにセットする	plt.plot(データ列x, データ列y, color='lightcyan')
折れ線グラフを赤い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
目盛り線	plt.grid(linewidth=3.0)
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データシリーズが何曜日か見る	ds.dt.weekday_name
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
実数のn乗を求める	x ** n
折れ線グラフに赤いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
数列と数列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ビン数を設定してヒストグラムをプロットする	plt.hist(データ列, bins=区関数)
グラフにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
列を指定して重複を除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
option: グラフの色を耐火レンガにする	color = 'firebrick'
数式を数値計算する	float(e)
棒グラフをゴールデンロッド色を使って描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームの選択したカラムの分散を求める	df[['列A', '列B']].var()
横棒グラフをライトスチールブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフに青い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
アンティークホワイトにヒストグラムの色をセットする	plt.hist(データ列, color='antiquewhite')
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
あるカラムの統計量を求める	df['列A'].describe()
ビスク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
配列の尖り	scipy.stats.kurtosis(配列, bias=False)
二つの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
データフレームの一部のカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
グラフの見た目をデフォルトでイイ感じに設定する	sns.set()
リストの末尾の値を使う	aList[-1]
データフレームのカラムの中にと文字列があるかどうか調べる	df['列A'].isin([value, value2])
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
文字列の終了位置より前に部分文字列が存在しないか	s.find(sub, 0, end) == -1
スタックが空	len(deq) == 0
ベクトルから重複を除いた配列を初期化する	np.unique(aArray)
option: ポイントマーカーを用いる	marker = '.'
組をnからナンバリングする	enumerate(aTuple, start=n)
コマンドの第二引数を確認する	sys.argv[1]
散布図のマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
ホットピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
ダークシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
淡い茶色色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
タイムスタンプデータをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
散布図をrgbの右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
表データを二つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームの重複を確認する	df.duplicated()
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフのマーカーをクロスにする	plt.plot(データ列x, データ列y, marker='x')
青い一点鎖線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
折れ線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
分割数nでリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データフレームの中に文字列と日付データがいくつ含まれるか求める	df.isin([value, value2]).sum()
文字列はタイトル大文字小文字か確認する	s.istitle()
部分文字列が文字列の開始位置と終了位置の間に含まれる	s.find(sub, start, end) != -1
データフレームのカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
データフレームを２つの列の値によってグループ化する	df.groupby(['列A', '列B'])
実数以下の最大の整数	math.floor(x)
ふたつの集合の共通部分を計算する	aSet.intersection(aSet2)
option: 黄緑色を使用する	color = 'chartreuse'
数列と配列の散布図にrgbのクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
プロットの縦軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
データフレームを表示するとき折り返しをオフに減らす	pd.set_option('expand_frame_repr', False)
option: 四角印を描画する	marker = 's'
データフレームのn行目まで取り出す	df[:n]
カウンタの要素を、そのカウントだけリストとして得る	aCounter.elements()
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
イテラブルからセットを作る	set(iterable)
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
折れ線グラフをオールドレース色を使って描画する	plt.plot(データ列x, データ列y, color='oldlace')
データシリーズの欠損値を平均値で埋める	ds.fillna(ds.mean())
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
縦軸の目盛りに文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
出力ストリームからn文字、読み込む	f.read(n)
データ列を折れ線グラフとして可視化する	plt.plot(データ列x, データ列y)
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
データフレームのあるカラムが何曜日か知る	df['列A'].dt.weekday_name
2進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
文字列の開始位置以降が部分文字列で始まるか判定する	s.startswith(sub, start)
線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
既存の行列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
option: チョコレートを用いる	color = 'chocolate'
日付時刻データは何月か知る	aDatetime.month
option: ダークシアン色を使う	color = 'darkcyan'
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
ユニコードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
整数nの十六進数リテラル	hex(n)
時間を使用する	import time
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
数式のインテグラルを行う	sympy.integrate(e)
データフレーム中の欠損値を除く	df.dropna(inplace=True)
データフレームの指定したカラムの未入力値をxで埋める	df['列A'].fillna(x)
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームの指定したカラムを千の位で四捨五入する	df['列A'].round(-3)
データシリーズにおいてどの値が頻出か確認する	ds.mode()
option: 文字列をセパレータで用いる	sep = s
入力から二つの文字を読む	A, B = map(str, input().split())
n個に配列を等量でビン分割する	pd.qcut(aArray, n)
箱ひげ図としてリストを可視化する	plt.boxplot(データ列)
ビン数nとしてデータ列をビニングする	pd.cut(ds, n)
最頻値でデータフレームの選択した列の欠損値を置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
グラフのフォントを日本語表示にセットする	sns.set(font='IPAexGothic')
5行をデータフレームからランダムに重複を認めてサンプリングする	df.sample(5, replace=True)
偽陽性を抑えたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
回帰分析をPLSを用いて行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
時間を使う	import time
淡いピンク色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームのインデックスの名前をまとめて変更する	df.rename(index={x: y})
nの二進文字列を使う	bin(n)[2:]
option: 最初のカラムを行に設定する	index_col = 0
データフレームの指定したカラムの値を正規表現patternでまとめて置換する	df['列A'].replace(pattern, repl, regex=True)
数値の数値を求める	float(e)
折れ線グラフをフローラルホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='floralwhite')
グラフのタイトルを設定する	plt.title('グラフの名称')
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データシリーズの平均値を計算する	ds.mean()
ヒストグラムの色を赤に変更する	plt.hist(データ列, color='red')
部分文字列が文字列の終了位置より前にあるかどうか確認する	s.find(sub, 0, end) != -1
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: マーカーの色を青にする	markerfacecolor = 'blue'
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
赤い▲マーカーをイテラブルとデータ列の散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
year年の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ファイルをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
数列とリストの散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
グラフを全般的に色差別なくする	sns.set(pallete='colorblind')
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
nとn2の値を足してnに代入する	n += n2
データフレームを小数点以下n桁で丸める	df.round(n)
データフレームのあるカラムの要約統計量	df['列A'].describe()
日付時刻データは何年か知る	aDatetime.year
キューを全て取り除く	deq.clear()
列名一覧を求める	df.columns
option: ダークゴールデンロッドにグラフの色をセットする	color = 'darkgoldenrod'
画面用にグラフを変更する	sns.set(context='notebook')
整数nの二進文字列	bin(n)[2:]
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
青い実線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: グラフの線の種類を点線にセットする	linestyle = 'dotted'
ゼロ埋めされた符号なし８ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.uint8)
サーモン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ダークカーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
線グラフの色を青緑にセットする	plt.plot(データ列x, データ列y, color='teal')
二つの変数を同じ値にする	x = y = n
二進対数	math.log2(x)
集合をタプルに変換する	tuple(aSet)
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
option: 色をスプリンググリーンにする	color = 'springgreen'
数値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
タプルの末尾を取り除く	aTuple[:-1]
シーケンスをカウントしてカウンタから減らす	aCounter.subtract(iterable)
option: セパレータを改行にする	sep = '\n'
表の最後10行を抽出する	df.tail(10)
ランダムにデータフレームから取り出す	df.sample()
表データのあるカラムの秒	df['列A'].dt.second
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: カーキ色を使用する	color = 'khaki'
勾配ブースティングでクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
セットが空集合か調べる	len(aSet) == 0
ある列のカテゴリごとの平均値を求める	df.groupby('列A').mean()
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
リストとリストについて散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
データフレームの指定した列の中のNaNの合計を数える	df['列A'].isna().sum()
数列と配列の散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
文字列中にひとつでも非数字があるか調べる	any(not c.isdigit() for c in s)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
リストの四分位を描画する	plt.boxplot(データ列)
データ列を分割数nでビン分割する	pd.cut(ds, n)
２つの列によってデータフレームを昇順に並べる	df.sort_values(by=['列A', '列B'], ascending=True)
配列と数列の散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
赤い点線で配列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームをグループ化して、ヒストグラムとして見る	sns.histplot(df, x='列名', hue='カテゴリ名')
小数点数の自然対数を求める	math.log(x)
ファイルを追加モードとしてオープンして]、fとする	f = open(filepath, mode='a')
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
折れ線グラフでデータフレームのカラムを可視化する	plt.plot(df[column], df[column])
数式の微分を算出する	sympy.diff(e)
データフレームが正規分布からどれだけ、歪んでいるか調べる	df.kurt()
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データ列をインポートする	import pandas as pd
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
二変数の最小値	min(x, y)
自然数の順列の総数を求める	math.perm(n)
グラフをプレゼンてション用に設定する	sns.set(context='talk')
上三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^')
データ列の推移を色付きの点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
nがn2よりも小さいかどうか調べる	n < n2
縦棒グラフをダークグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgreen')
組の最後からn番目以前の要素を取り出す	aTuple[:-n]
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
平均付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: データ型として８ビット整数型を使用する	dtype = np.int8
二次元タプルをフラット化する	sum(aTuple)
nがn2の倍数でない	n % n2 != 0
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
ミディアムオーキッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
数式処理を使う	import sympy
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
表データのあるカラムが何曜日か知る	df['列A'].dt.weekday_name
ガンマ関数の値を計算する	math.gamma(x)
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
タプルの各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
グラフに鉛直方向の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
タプルを引数として展開して出力する	print(*aTuple)
双方向キューに要素をプッシュする	deq.append(element)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
最大最小値でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
整数nがリストのどれかか調べる	n in aList
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
タイムスタンプデータが金曜日	aDatetime.weekday() == 4
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
シーケンスをイミュータブルなセットに変換する	frozenset(iterable)
option: 色をネイビーに設定する	color = 'navy'
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
整数nを十六進文字列に変換する	hex(n)[2:]
タプルの合計	sum(aTuple)
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
縦棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
nがn2の倍数かどうか	n % n2 == 0
データフレームのカラムの名前一覧で指定した列を消す	df.drop(columns, axis=1, inplace=True)
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
辞書から項目名の値か、もしくは要素を参照する	aDict.get(key, element)
データフレームとしてエクセルファイルを読み込む	pd.read_excel('file.xlsx')
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
option: 色をシエナに設定する	color = 'sienna'
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
データフレームの末尾5行を取り出す	df.tail(5)
無限にnからカウントアップする	itertools.count(start=n)
▲印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図をバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='violet')
タイムスタンプデータが月曜日	aDatetime.weekday() == 0
データフレームの不偏分散を求める	df.var(ddof=1)
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
nとn2の積を計算する	n * n2
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
両端キューの先頭に列の各値を追加する	deq.extendleft(iterable)
文字列をカンマで分割し、列挙する	s.split(',')
option: ダークカーキ色を使う	color = 'darkkhaki'
数を浮動小数点数で除した余り	x % y
データシリーズの値をValueMapでまとめて置換する	ds.replace(ValueMap)
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
配列とリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ファイルパスを書き込み用にBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: 文字コードを文字列の示すエンコーディングに設定する	encoding = s
データフレームの先頭5行	df.head(5)
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
分子と分母から分数を作る	fractions.Fraction(分子, 分母)
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの一部の列の欠損値を第二四分位数に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
リストと配列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
プロットを画面用に指定する	sns.set(context='notebook')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
無限にnからstep間隔で数え上げるする	itertools.count(start=n, step=step)
整数nが集合のいづれか	n in aSet
ひとつでも非アスキー文字が文字列中にあるか確認する	any(not c.isascii() for c in s)
正規表現をコンパイルする	re.compile(pattern)
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
ベージュ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
横棒グラフを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列を改行によって区切る	s.splitlines()
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
異なるカラムをキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
データフレームを散布図で可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
赤い三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフの色をライムにセットする	plt.plot(データ列x, データ列y, color='lime')
option: 色をライトスレイグレーに設定する	color = 'lightslategray'
ゼロ埋めした配列	np.zeros(要素数)
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
nを16進文字列に変換する	hex(n)[2:]
スクリプト名を調べる	sys.argv[0]
縦棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームを複数の列によって降順に破壊的に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
パープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
文字列を最後の部分文字列で分けた時の後半の文字列を求める	s.rpartition(sub)[-1]
線グラフの色をコーラルにセットする	plt.plot(データ列x, データ列y, color='coral')
データフレームのNaNを最大値で埋める	df.fillna(df.max())
プロットにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
rgbの大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
重複ありでランダムにデータフレームから100行をサンプリングする	df.sample(100, replace=True)
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
実数の常用対数を計算する	math.log10(x)
散布図を小麦色色を使って描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームのカラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
日付データは日付データと同時	aDate == aDate2
文字列中に非大文字が含まれるか調べる	any(not c.isupper() for c in s)
実数の逆双曲線正弦	math.asinh(x)
浮動小数点数以上の最小の整数	math.ceil(x)
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
グラフを使う	import matplotlib.pyplot as plt
折れ線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
predicateFuncが真とならない配列の部分	itertools.dropwhile(predicateFunc, iterable)
option: エンコーディングをEUCに指定する	encoding = 'euc_jp'
MSDで多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
プロットの中のy軸にラベルをつける	plt.ylabel('y軸ラベル')
rgbの四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
データシリーズの欠損値を直後の値で置換する	ds.fillna(method='bfill')
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
両端キューが空	len(deq) == 0
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
現在の再帰の最大回数	sys.getrecursionlimit()
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
散布図の三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
両端キューの最大長を使う	deq.maxlen
option: グラフの色をスラグレーに設定する	color = 'slategray'
指定したカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
書き込み用にEUCでファイルパスをオープンする]	open(filepath, mode='w', encoding='euc_jp')
一点鎖線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashbot')
nがn2で割り切れる	n % n2 == 0
散布図の大バツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
フクシア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
プロットに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
文字列で区切って二つの文字列をプリントする	print(value, value2, sep=s)
全ての数字	string.digits
option: 色をリネンに設定する	color = 'linen'
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムの色をアンティークホワイトに変更する	plt.hist(データ列, color='antiquewhite')
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
データフレームのあるカラムの欠損値を中央値に減らす	df['列A'].fillna(df['列A'].median())
UNIX時間のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
カラーバーを横向きにプロットする	plt.colorbar(orientation='horizontal')
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
リストとリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
黒い左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの選択したカラムを百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
カテゴリで色分けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ホワイトスモーク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
xでデータフレームのNaNを埋める	df.fillna(x)
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
分類モデルの再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
マップのキーの値	aDict[key]
正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
折れ線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
▲印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データ列の折れ線グラフを上三角印として描画する	plt.plot(データ列x, データ列y, marker='^')
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
option: フォントの色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
散布図を右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフを青い実線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
オブジェクトが関数か調べる	callable(obj)
三数の最大値	max(x, y, z)
データフレームの中にと文字列があるか	df.isin([value, value2])
黒い左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: インディゴにグラフの色を設定する	color = 'indigo'
フローラルホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ミディアムスプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(配列, 'norm')
文字列中の部分文字列を文字列に置換する	s.replace(sub, newsub)
キーがマップに存在しないとき、要素を追加する	aDict.setdefault(key, element)
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
データ列のパーセンタイルを可視化する	plt.boxplot(データ列)
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
データフレームのカラムのKurtosisを求める	scipy.stats.kurtosis(df['列A'], bias=False)
多次元尺度構成法を用いて多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: データ型として符号なし８ビット整数型を用いる	dtype = np.uint8
タプルのコピーを作る	dict(aDict)
表データが重複しているか	df.duplicated()
year年month月day日をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day)
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
ファイルパスを書き込み用にBOM付きとしてオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームの一部の列を小数点以下n桁で四捨五入する	df[['列A', '列B']].round(n)
カテゴリ別で色付けしてデータフレームをにバイオリン図を使って可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列が無限に続くイテラブル	itertools.repeat(element)
点線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: スラッシュをセパレータで使用する	sep = '/'
真部分集合か調べる	aSet < aSet2
マップから項目名の値をエラーなく見る	aDict.get(key, None)
nがn2よりも大きいか	n > n2
複数の列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
折れ線グラフに赤い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列の先頭から部分文字列を探す	s.find(sub)
データフレームの指定したカラムの歪度	df['列A'].kurt()
ファイルパスを書き込み用にBOM付きで開く]	open(filepath, mode='w', encoding='utf_8_sig')
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
２つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
option: オリーブに色を設定する	color = 'olive'
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
リストの文字列が最初に見つかる位置	aList.index(element)
データフレームのカラムの名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
データフレームの中である列に重複があれば除く	df.drop_duplicates(subset='列A', inplace=True)
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームのカラムの各値の出現数を求める	df[col].value_counts()
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
ヒストグラムの色をプラムにセットする	plt.hist(データ列, color='plum')
モデルを当てはめる	model.fit(説明変数, 目的変数)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
ヒストグラムの色をサーモンにする	plt.hist(データ列, color='salmon')
実数のハイパボリック・サインの逆数	math.asinh(x)
散布図のクロス印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
横棒グラフをライトサーモン色として描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
縦棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
異なるカラムをキーとしてデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームの一部のカラムのNaNを平均にする	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
代数計算モジュールを使用する	import sympy
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
option: ペルーを使用する	color = 'peru'
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列を二分割する	s.partition(sep)
ファイルを文字コードtextを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
追加できるように既存のファイルパスをBOM付きで開く]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームを表示するとき、表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
option: ミッドナイトブルーにグラフの色をセットする	color = 'midnightblue'
散布図を赤い右三角マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームが重なるいる	df.duplicated()
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
数値を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
グラフの使途をスライドに設定する	sns.set(context='talk')
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
マップのキーの一覧	aDict.keys()
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
外れ値を除いた配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
指定したカラムごとにデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データフレームからカテゴリデータの列名のリストを求める	df.select_dtypes('object').columns
option: ダークレッドに色を変更する	color = 'darkred'
SJISで文字列をバイト列にする	s.encode(encoding='sjis', errors='ignore')
イテラブルを関数でフィルタする	filter(func, iterable)
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
Pythonパスにを追加する	sys.path.append(dir)
option: アクアマリンにフォントの色を設定する	color = 'aquamarine'
句読点文字を全部求める	string.punctuation
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
降順にデータフレームを２つの列によってソートする	df.sort_values(by=['列A', '列B'], ascending=False)
箱ひげ図として数列を可視化する	plt.boxplot(データ列)
サイコロと同じ乱数	random.randint(1, 6)
ExcelファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
データフレームの選択したカラムの中に文字列が含まれるか調べる	df[['列A', '列B']].isin([value])
NaNがある行をドロップする	df.dropna(inplace=True)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
option: グラフの色をオレンジレッドにセットする	color = 'orangered'
リストとリストについて散布図を描いて、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
データフレームの50パーセンタイル	df.median()
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
列から複数個ランダムに選ぶ	random.choices(iterable, k=n)
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
データフレームの中の列を等間隔でn個にビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
複数の配列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: バイナリモードを使う	mode = 'rb'
option: 色をカデットブルーに設定する	color = 'cadetblue'
日付時刻データがタイムスタンプデータより後ろかどうか調べる	aDatetime > aDatetime2
データフレームの最後5行を抽出する	df.tail(5)
option: 紺色を使う	color = 'darkblue'
ヒストグラムの色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
欠損値がある行を除く	df.dropna(inplace=True)
ヒストグラムの色をミディアムパープルにする	plt.hist(データ列, color='mediumpurple')
データフレームのある列の欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
ヒストグラムの色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
グラフにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
option: クロスマーカーを使う	marker = 'x'
データフレームのstart行目からend行目までを選ぶ	df[start:end]
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
実行を異常停止する	sys.exit(1)
配列のSkewnessを算出する	scipy.stats.skew(配列, bias=False)
混同行列をヒートマップとして確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
指定した列の不偏標準偏差を求める	df['列A'].std()
データフレームの上5行	df.head(5)
option: フォントの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
サイコロと同じ乱数を生成する	random.randint(1, 6)
ビン数nでリストを分割する	pd.cut(aList, n)
データフレームをワンホット・ベクトルに変換する	pd.get_dummies(df)
option: グラフの色をカーキに設定する	color = 'khaki'
データフレームをExcelファイルから読み込む	pd.read_excel('file.xlsx')
行列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
列を100の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
プロットに目盛線を入れる	plt.grid(True)
折れ線グラフの色をサドルブラウンにする	plt.plot(データ列x, データ列y, color='saddlebrown')
option: グラフの色をアクアに変更する	color = 'aqua'
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
文字列の接頭辞が部分文字列かどうか	s.startswith(sub)
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
CSVファイルを読み込む	pd.read_csv('file.csv', sep=',')
オブジェクトは浮動小数点数型か調べる	isinstance(obj, float)
データフレームの欠損値を最大値で置換する	df.fillna(df.max())
データシリーズの中にいくつ欠損値があるか調べる	ds.isna().sum()
ヒストグラムをミディアムスプリンググリーン色を使って描画する	plt.hist(データ列, color='mediumspringgreen')
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
配列を中央値でビン分割する	pd.qcut(aArray, 2)
部分文字列が文字列の終了位置以前に含まれないかテストする	s.find(sub, 0, end) == -1
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
option: フローラルホワイト色を用いる	color = 'floralwhite'
イテラブルを無限に繰り返す	itertools.cycle(iterable)
データシリーズの歪み	ds.kurt()
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
チップのデータセットをロードする	df = sns.load_dataset('tips')
option: ダークスレートブルーにグラフの色を設定する	color = 'darkslateblue'
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
マッピングのキーを要素にする	aDict[key] = element
文字列が文字列より辞書順で前かどうか調べる	s < s2
文字列を変数に変換する	sympy.Symbol(s)
ガウス過程として回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
0で全要素を初期化した行列を作成する	np.zeros(要素数)
ヒストグラムをスラグレー色を使って描画する	plt.hist(データ列, color='slategray')
散布図を黒い下三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='v', c='k')
実数の平方根	math.sqrt(x)
グラフの凡例の場所を指定する	plt.legend(loc=(x, y))
横向きにデータフレームを連結する	pd.concat([df, df2], axis=1)
線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
組の長さ	len(aTuple)
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
データシリーズの中に文字列があるかどうか調べる	ds.isin([value])
折れ線グラフの色をカラーコードを用いて変更する	plt.plot(データ列x, データ列y, color='#800080')
ヒストグラムをオールドレース色を用いて描画する	plt.hist(データ列, color='oldlace')
縦棒グラフをブラック色として描画する	plt.bar(データ列x, データ列y, color='black')
自然数個のものからk個取り出した場合の並べ方の総数	math.perm(n, k)
表データのあるカラムの月	df['列A'].dt.month
データフレームの選択した列の母標準偏差を求める	df[['列A', '列B']].std(ddof=0)
散布図を赤い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
青にヒストグラムの色を変更する	plt.hist(データ列, color='blue')
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
nがn2未満、もしくはn3以上か調べる	n < n2 or n >= n3
実数から実数を減算する	x - y
棒グラフをダークサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='darksalmon')
y軸の目盛を対数に変更する	plt.yscale('log')
折れ線グラフを実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
nとkのnCkを計算する	math.comb(n, k)
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ロバストな単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
ふたつの集合はセットと互いに素か調べる	aSet.isdisjoint(aSet2)
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
文字列を文字リストにする	list(s)
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
数を小数点で丸める	round(x, n)
縦軸の目盛を表示しない	plt.yticks([])
日付データが月曜日かどうか調べる	aDate.weekday() == 0
最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームの最後10行を抽出する	df.tail(10)
折れ線グラフに青い△印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームの一部の列の欠損値を直後の値で置き換える	df[['列A', '列B']].fillna(method='bfill')
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
データフレームの選択した列を小数点以下n桁で丸める	df[['列A', '列B']].round(n)
データフレームの最初5行を調べる	df.head(5)
データフレームの中の列をリストを境界値としてビニングする	pd.cut(df[col], aList)
グラフの横軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
実部と虚部から複素数を作成する	complex(x, y)
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
option: スラグレー色を用いる	color = 'slategray'
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
青いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
実数を切り上げて整数に変換する	math.ceil(x)
リストとリストについての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
折れ線グラフのダイアモンドマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
カテゴリで色分けして、データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
スチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
横棒グラフをアンティークホワイト色を使って描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
option: ライトブルーにグラフの色を変更する	color = 'lightblue'
改行なしに値をプリントする	print(value, end='')
データフレームの重複した行のみを取り出す	df[df.duplicated(keep=False)]
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
predicateFuncを適用したときtrueとなるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
エンコーディングを知る	sys.getdefaultencoding()
グラフの縦軸を対数に変更する	plt.yscale('log')
ミディアムブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
散布図のバツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列が全て小文字か調べる	s.islower()
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
データフレームから列を一つのみ選択する	df[['列A']]
rgbのポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
リストとデータ列についての散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
横棒グラフをブラック色を使って描画する	plt.barh(データ列x, データ列y, color='black')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
配列とリストの散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図を大バツ印を使い、描画する	plt.scatter(データ列x, データ列y, marker='X')
棒グラフの色を真紅にする	plt.bar(データ列x, データ列y, color='crimson')
サーモン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
としてデータフレームの相関行列を求める	df.corr(method='kendall')
ヒストグラムを三つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームの一部のカラムの中に日付データとがいくつあるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
青い実線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ある列の文字列が部分文字列で終わらない行を選択する	df[~ df['列A'].str.endswith(部分文字列)]
上位集合か調べる	aSet.issuperset(aSet2)
実数の正接の逆数	math.atan(x)
データフレームの選択した列の歪み	df[['列A', '列B']].kurt()
分類木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
データフレームの選択した列の空文字を欠損値に変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームの指定した列を丸めて、整数型にする	df['列A'].round().astype(int)
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
ヒストグラムの色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
データフレームの一部のカラムの平均値を算出する	df[['列A', '列B']].mean()
データフレームのあるカラムを十の位で四捨五入して整数型にする	df['列A'].round(-1).astype(int)
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図に下三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
組の最初の文字列を探す	aTuple.index(element)
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
リストを太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
ファイルパスからストリームを読み込みfileとする	file = open(filepath)
1文字だけ標準入力から読む	sys.stdin.read(1)
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
横棒グラフをディープスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
縦軸だけグリッド線	plt.grid(axis='y')
オブジェクトは浮動小数点数かどうか	isinstance(obj, float)
文字列全体がパターンに複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
いつまでもカウントアップする	itertools.count()
横棒グラフをダークレッド色として描画する	plt.barh(データ列x, データ列y, color='darkred')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
option: フォントの色をオレンジに設定する	color = 'orange'
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
日付時刻データは日付時刻データと同時	aDatetime == aDatetime2
0からnまでの整数リストを作る	list(range(n+1))
タブ区切りのファイルから文字エンコーディングを指定して読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
行列のムーア・ペンローズの擬似逆行列を使う	np.linalg.pinv(aArray)
書式をタプルで文字列整形する	formatText.format_map(aDict)
ベージュにヒストグラムの色をする	plt.hist(データ列, color='beige')
指定した列を百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
リスト間のケンドールの順位相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
データフレームの指定した列の中にいくつ文字列があるか調べる	df['列A'].isin([value]).sum()
ハニーデュー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
データフレームの複数のカラムを並べて箱ひげ図を使って描画する	plt.boxplot([df['カラム'], df['カラム']])
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightgreen')
文字列を右から部分文字列で分割する	s.rsplit(sub)
データフレームをグループ化しあるカラムに対し最大値を求める	df.groupby('列A')['列B'].max()
二進文字列を整数に変換する	int(s, 2)
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
シーケンスを文字列リストに変換して、タブで結合する	'\t'.join(map(str, iterable))
データフレームの記述統計量	df.describe()
列をn個に等間隔でビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
列のイミュータブルな集合	frozenset(iterable)
年月日と時刻から日付時刻を作る	datetime.datetime(年, 月, 日, 時, 分, 秒)
ひとつでも小文字が文字列内に含まれる	any(c.islower() for c in s)
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
行列の行ごとの最大値を求める	np.max(aArray, axis=1)
ヒストグラムの色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
積み上げ棒プロットを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
変数名を項目名として、マップを作る	dict(name=element)
カラムの標準誤差を算出する	scipy.stats.sem(df['列A'])
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
CSVファイルをn番目のカラムを行として読む	pd.read_csv('file.csv', index_col=n)
列を累積した列	itertools.accumulate(iterable, operator.mul)
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
柱状図を二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
色テーマを全般的に淡くする	sns.set(pallete='muted')
option: エンコーディングをSJISに変更する	encoding = 'shift_jis'
文字列の開始位置からと終了位置の間に部分文字列が含まれるか判定する	s.find(sub, start, end) != -1
散布図の▽印の太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
集合の補集合	aSet.difference(aSet2)
文字列リストを連結する	''.join(aStringList)
option: 箱ひげ図に平均を加える	showmeans = False
現在の分数	datetime.date.today().minute
ある列のカテゴリごとの平均値	df.groupby('列A').mean()
正規表現にケースを無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
nをn2だけ小さくする	n -= n2
CSVファイルを読む	pd.read_csv('file.csv', sep=',')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
ファイル名がCSVファイル	filename.endswith('.csv')
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの選択した列を丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
散布図に黒い△印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
CSVファイルからデータフレームをロードする	pd.read_csv('file.csv', sep=',')
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
行列をベースにして全要素が初期値の行列	np.full_like(aArray, 初期値)
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
二進文字列をバイナリにする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
散布図を黒いダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='k')
カウンタを多い方からリストとして得る	aCounter.most_common()
綺麗なグラフを描画する準備をする	import seaborn as sns
縦軸の目盛りの表示値を変更する	plt.yticks(目盛りの値リスト)
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
折れ線グラフに右三角印を加える	plt.plot(データ列x, データ列y, marker='>')
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
配列のスピアマンの相関係数を使う	scipy.stats.spearmanr(配列, 配列2)
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
マッピングのキーを要素に設定する	aDict[key] = element
整数nは組のどれか	n in aTuple
データフレームの一部のカラムの未入力値を直後の値で補う	df[['列A', '列B']].fillna(method='bfill')
配列の最大	np.max(aArray)
縦棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームのn行目より後ろを抽出する	df[n:]
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
データフレームの指定したカラムの中にいくつ未入力値があるかカウントする	df['列A'].isna().sum()
データフレームの指定した列の中にある文字列と文字列の合計を調べる	df['列A'].isin([value, value2]).sum()
折れ線グラフの△マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームを千の位で丸める	df.round(-3)
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
正則化付き回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
２つの浮動小数点数が十分に近い	math.isclose(x, x2)
ヒストグラムをオリーブ色を用いて描画する	plt.hist(データ列, color='olive')
折れ線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフの右三角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
折れ線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
option: フォントの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
マッピングにキーワード引数で加えて、更新する	aDict.update(**kwargs)
グラフの用途を論文に設定する	sns.set(context='paper')
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
タプルを引数として展開してプリントする	print(*aTuple)
データフレームの選択した列の欠損値を最大値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
棒グラフをダークシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
データフレームを複数の列によって降順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
文字列を空白を用いて分割する	s.split()
部分文字列を文字列の開始位置から探す	s.find(sub, start)
ヒストグラムの色をペルーにする	plt.hist(データ列, color='peru')
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームのある列を削除してみる	df.drop('列A', axis=1)
ファイル全体を行分割して読む	f.readlines()
文字列の左側	s[0]
option: マーカーの色をバイオレットにする	markerfacecolor = 'violet'
標準入力を使う	sys.stdin
データフレームのn行目より前抽出する	df[:n]
整数に変換する	int(x)
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
数値の積分を求める	sympy.integrate(e)
異なる列をキーとしてデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
rgbのバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列の接尾辞が部分文字列	s.endswith(sub)
散布図をオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='orchid')
データフレームから指定した３つの列を抽出する	df[['列A', '列B', '列C']]
配列の行ごとの分散を求める	np.var(aArray, axis=1)
2つのデータフレームを横向きにマージする	pd.merge(df, df2)
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
日本語をプロット中で使えるようにする	sns.set(font='IPAexGothic')
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
枠なしの凡例を加える	plt.legend(frameon=False)
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
バイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
データフレームの選択したカラムの欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
オブジェクトのバイトサイズを調べる	sys.getsizeof(obj)
青紫色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
集合が空集合でないか	len(aSet) != 0
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
文字列を部分文字列で分けたときの先頭の文字列	s.partition(sub)[0]
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの指定したカラムの値がNaN	df['列A'].isna()
黒いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
縦棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
コマンドの第2引数を確認する	sys.argv[1]
option: ダークバイオレット色を用いる	color = 'darkviolet'
データフレームのインデックス一覧を使う	df.index
指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
フォレストグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ゴールド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
リストと数列について散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
nのn2乗	n ** n2
ロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの選択したカラムがどれだけ分散しているか調べる	df[['列A', '列B']].var()
文字列を改行によって分割する	s.splitlines()
文字列が片仮名かどうか調べる	('ァ' <= ch <= 'ン')
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
オプションで、標準出力に出力する	file = sys.stdout
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
表を並べる	df.sort_values('キーとなる列')
エクセルファイルからデータフレームを読む	pd.read_excel('file.xlsx')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームの列を度数分布図にする	plt.hist(df[column])
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
散布図に黒いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
リストと数列について散布図を描画してバツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データシリーズがどの程度、分散しているか見る	ds.var()
MSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
散布図の菱形マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフを点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
文字列を白色化する	f'\033[37m{value}\033[0m'
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ヒストグラムを赤色を用いて描画する	plt.hist(データ列, color='red')
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
線グラフをグリーンイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='greenyellow')
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
すべてのシートをExcelファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
データフレームをグループ化し、ある列に対し最小値を計算する	df.groupby('列A')['列B'].min()
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
option: フォントの色をアリスブルーに設定する	color = 'aliceblue'
２つのリストから辞書	dict(zip(aList, aList2))
浮動小数点数の最小値を求める	sys.float_info.min
ケンドール相関係数を使ってデータフレームの相関行列を計算する	df.corr(method='kendall')
黒い星マーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
変数について数式の積分を計算する	sympy.integrate(e, z)
データフレームを関数の値によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
プロットを表示する	plt.show()
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームのカラムをヒストグラムにする	plt.hist(df[column])
option: ピンク色を使う	color = 'pink'
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
option: バイオレット色を使う	color = 'violet'
データフレームのあるカラムを1000の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
棒グラフをコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='coral')
指定したカラムの値が欠損値か調べる	df['列A'].isna()
黒いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
指定したカラムの未入力値を直後の値に設定する	df['列A'].fillna(method='bfill')
線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
option: ミスティローズ色を使う	color = 'mistyrose'
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
集合の要素数	len(aSet)
折れ線グラフのアルファを設定する	plt.plot(データ列x, データ列y, alpha=0.5)
option: ピーチパフを用いる	color = 'peachpuff'
データシリーズの値は欠損値か調べる	ds.isna()
２つの文字列を辞書順で比較する	s < s2
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
nをn2分の１にする	n /= n2
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
TSVから文字エンコーディングを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
全ての印字可能な文字	string.printable
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフをグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='green')
タプルの要素を全て集合に追加する	aSet.update(iterable)
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
オブジェクトがバイト列型か調べる	isinstance(obj, bytes)
nーn2を求める	n - n2
option: ロージーブラウンにグラフの色を変更する	color = 'rosybrown'
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
コマンドtextを実行する	os.system(text)
データフレームのカーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
JSON形式の入力ストリームを読み込んで、dataとする	data = json.load(fin)
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
リストとデータ列について散布図を描画して、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
option: 印を四角に変える	marker = 's'
文字列が文字列リストのいづれ	s in aStringList
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: オリベドラブにグラフの色を指定する	color = 'olivedrab'
データフレームを２つの列を用いて並べ直し、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
option: 行列のデータ型を指定する	dtype = np.int32
データフレームからランダムに重複を認めて100行をサンプリングする	df.sample(100, replace=True)
リストにオブジェクトを追加する	aList.append(element)
マップから最後に追加した項目をポップする	aDict.popitem()
ライトスカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
オブジェクトは文字列型か	isinstance(obj, str)
縦棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
データフレームのある列の尖度を求める	df['列A'].skew()
分類結果の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
グラフの描画で淡く色を使う	sns.set(pallete='muted')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
データフレームをJSONL形式のファイルから読む	pd.read_json(filename, orient='records', lines=True)
データフレームの一部のカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
色差別なく色をグラフの描画で用いる	sns.set(pallete='colorblind')
ふたつの列を組み合わせてグループ化し分散を算出する	df.groupby(['列A', '列B'], as_index=False).var()
散布図の▲マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
配列と数列について散布図を描き、文字列という簡単な説明用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
option: 印の太さを変更する	markeredgewidth = 2.5
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
nまでの奇整数リストを作る	list(range(1, n, 2))
データフレームのカラムの名前一覧で指定した列を削除する	df.drop(columns, axis=1, inplace=True)
データシリーズの中に日付データと文字列があるかどうか調べる	ds.isin([value, value2])
option: 文字コードtextを使う	encoding = text
データシリーズが正規分布からどの程度、尖っているか見る	ds.skew()
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ライトグリーン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
データシリーズの欠損値を直後の値にする	ds.fillna(method='bfill')
シーケンスから一つランダムに選ぶ	random.choice(iterable)
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
散布図をパパイヤウィップ色として描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームの先頭10行	df.head(10)
マップを浅く複製する	aDict.copy()
option: グラフの色をビスクに設定する	color = 'bisque'
句点文字を全部使う	string.punctuation
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
ゴーストホワイト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
プロットにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
双方向キューの先頭に要素を付け加える	deq.appendleft(element)
データフレームの中のカラムを等しい量になるように分割数nとして分割する	pd.qcut(df[col], n)
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
一方に含まれ、他方に含まれない集合を計算する	aSet.difference(aSet2)
データフレームの指定したカラムの未入力値を第二四分位数で補う	df['列A'].fillna(df['列A'].median())
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームを二つの列によってソートする	df.sort_values(by=['列A', '列B'])
イテラブルを文字列リストに変換して'改行を用いて連結する	'\n'.join(map(str, iterable))
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
小数点数の正弦	math.sin(x)
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
リストと数列についての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
option: カデットブルーにグラフの色を設定する	color = 'cadetblue'
nが一桁の数かどうか調べる	-9 <= n <= 9
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
option: 色をドジャーブルーに設定する	color = 'dodgerblue'
リストにリストを加えて拡張する	aList.extend(aList2)
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
データフレームから重複を認めてランダムに5行をサンプリングする	df.sample(5, replace=True)
二つのオブジェクトは同一参照	obj is obj2
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
カラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
整数nのビット長	n.bit_length()
UNIX時間の列からdatetime64型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
option: ディムグレーを使用する	color = 'dimgrey'
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフを青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
集合が空でない	len(aSet) != 0
option: 色をスレートブルーに設定する	color = 'slateblue'
ポスターにグラフの用途を指定する	sns.set(context='poster')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
二つのオブジェクトが等しいか確認する	obj == obj2
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
連立方程式の解を算出する	sympy.solve([e, e2])
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
option: グラフの色をシーグリーンにする	color = 'seagreen'
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
双方向キューをイテラブルから生成する	collections.deque(iterable)
横向きに表データを連結する	pd.concat([df, df2], axis=1)
ファイルから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
ファイルをSJISを使って開く]	open(filepath, encoding='shift_jis')
実数の符号を同じにする	math.copysign(x, x2)
option: グリーンにグラフの色をセットする	color = 'green'
ヒストグラムを点線を用いて描画する	plt.hist(データ列, linestyle='dotted')
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
横棒プロットを描く	plt.barh(ラベル列, データ列)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
辞書上で項目名が未定義かどうか確認する	key not in aDict
option: 色をミスティローズにセットする	color = 'mistyrose'
シーケンスを文字列に変換して、部分文字列で一つにする	sub.join(map(str, iterable))
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
ヒートマップを用いて混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
表から5行サンプリングする	df.sample(5)
ヒストグラムをフクシア色として描画する	plt.hist(データ列, color='fuchsia')
文字列をシアンで表示する	print(f'\033[36m{value}\033[0m')
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
数値の微分を計算する	sympy.diff(e)
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
rgbの▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ファイルパスを書き込み用にオープンして]fとする	f = open(filepath, mode='w')
データフレームをグループ化しあるカラムに対し個数を計算する	df.groupby('列A')['列B'].count()
実数が整数か調べる	x.is_integer()
データフレームの選択したカラムの未入力値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
散布図のポイント印を青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
縦棒グラフをライトスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
n個の要素があるリスト	[element] * n
文字のユニコード	ord(ch)
暗い赤色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
名前付きタプルを用いる	import collections
散布図でデータフレームを見て、カテゴリごとに色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: フローラルホワイト色を使う	color = 'floralwhite'
文字列は文字列より辞書順で後かどうか	s > s2
データシリーズの欠損値を後の値にセットする	ds.fillna(method='bfill')
列の各値を順に両端キューの最後に入れる	deq.extend(iterable)
追加できるように既存のファイルをUTF8として開く]	open(filepath, mode='a', encoding='utf-8')
データフレームの選択したカラムを丸める	df[['列A', '列B']].round()
データフレームのカラムの欠損値をモードに設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
データフレームのあるカラムの欠損値を50パーセンタイルに設定する	df['列A'].fillna(df['列A'].median())
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: 箱ヒゲ図に平均を加える	showmeans = False
xを文字列に変換する	str(x)
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
イテラブルと配列について散布図を描画してマーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
データフレームの選択した列の中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
タプルの最初を捨てる	aTuple[1:]
配列の調和平均	scipy.stats.hmean(配列)
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
変数について数値の微分を求める	sympy.diff(e, z)
データフレームのカラムの歪度を計算する	scipy.stats.skew(df['列A'], bias=False)
ヒストグラムベースの勾配ブースティング分類木を準備する	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列の開始位置から終了位置の範囲で部分文字列の出現回数	s.count(sub, start, end)
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
ティール色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
２つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
リストとリストについての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
入力から二つの整数を取り出す	A, B = map(int, input().split())
predicateFuncが真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
'A'カラムの値がxに等しいデータを選ぶ	df[df['列A'] == x]
バイアスなしの重回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
グラフの用途を論文に変更する	sns.set(context='paper')
オリーブ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
nにn2をかけた値をnとする	n *= n2
黒い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
ロードされたモジュールを列挙する	sys.modules
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
ファイルをEUCを用いてオープンする]	open(filepath, encoding='euc_jp')
散布図に黒い上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
ふたつの集合の対称差を求める	aSet.symmetric_difference(aSet2)
seabornのデフォルトを適用する	sns.set()
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
文字列を最後の部分文字列で二分し後半の文字列を求める	s.rpartition(sub)[-1]
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
ラベンダー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
黒い四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
データシリーズの中にいくつ欠損値が含まれるか調べる	ds.isna().sum()
option: 説明変数を事前に正規化する	normalize = True
あるカラムのカテゴリごとの分散	df.groupby('列A').var()
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
色差別なくカラーパレットをグラフの描画で使う	sns.set(pallete='colorblind')
データフレームの先頭n行	df.head(n)
データフレームの中にいくつが含まれるかカウントする	df.isin([value]).sum()
データシリーズの欠損値を前の行の値に変更する	ds.fillna(method='ffill')
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
表データをある列をキーにして小さい順に並べ直す	df.sort_values(by='列A', ascending=True)
データシリーズの欠損値を数値で埋める	ds.fillna(x)
指定した列のカテゴリで集計しそれぞれの最大値を求める	df.groupby('列A').max()
オブジェクトがフィールドを持つか	hasattr(obj, プロパティ名)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
データシリーズの中に存在する文字列の個数を調べる	ds.isin([value]).sum()
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
タイタニックのデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムを複数横に並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
バイアスなしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
あらかじめ複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
option: グラフの色をパレットトルコイズに変更する	color = 'paleturquoise'
リストを組にする	tuple(aList)
文字列を紫色で表示できる文字列に変換する	f'\033[35m{value}\033[0m'
キュー中の値の位置を使う	deq.index(element)
option: 色をライトブルーに設定する	color = 'lightblue'
option: ミッドナイトブルーを使う	color = 'midnightblue'
option: ゴールデンロッドを使う	color = 'goldenrod'
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
ライトスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
option: フォントの色をダークシアグリーンに設定する	color = 'darkseagreen'
二つのリストから辞書を用意する	dict(zip(aList, aList2))
散布図の▽マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
文字列リストに列を変換して、タブによって一つにする	'\t'.join(map(str, iterable))
option: 菱形印を描画する	marker = 'D'
タプルと組を結合する	aTuple + aTuple2
ふたつの関係が真上位集合か調べる	aSet > aSet2
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
折れ線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
実数の余弦の逆数	math.acos(x)
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
文字列中に部分文字列が含まれる	sub in s
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
データフレームの一部の列の相関行列をスピアマン相関係数で算出する	df[['列A', '列B']].corr(method='spearman')
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
指定したカラムのカテゴリで集計し最小値を求める	df.groupby('列A').min()
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
オプションで標準エラーを出力先にする	file = sys.stderr
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームの指定したカラムのNaNをその最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
データフレームの次元の大きさ	df.shape
配列を平坦にする	aArray.flatten()
改行なしに２つの実行結果をプリントする	print(value, value2, end='')
xを実数にする	float(x)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
オブジェクトが関数か確認する	callable(obj)
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
正規分布によるパーセント・ポイント関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームの欠損値を直後の値で置換する	df.fillna(method='bfill')
組の中の最小値	min(aTuple)
イテラブルの折れ線プロットをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
指定した列のカテゴリで集計し、それぞれの最大値を求める	df.groupby('列A').max()
rgbの三角マーカーを数列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
整数nの十六進表現を使う	hex(n)
右三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ダークシアンにヒストグラムの色をする	plt.hist(データ列, color='darkcyan')
縦方向に三つのデータフレームを一つにまとめる	pd.concat([df, df2, df3], axis=1)
ケンドール順位相関係数を用いてデータフレームの相関行列を求める	df.corr(method='kendall')
option: バツマーカーを用いる	marker = 'x'
オブジェクトは整数クラスか調べる	isinstance(obj, int)
option: フォントの色をホットピンクに設定する	color = 'hotpink'
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
整数nの8進文字列を使う	oct(n)[2:]
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
指定した列で集計し、合計を求める	df.groupby('列A').sum()
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
データフレームを関数のカテゴリでグループ化する	df.groupby(関数)
データフレームのカラムのKurtosisを計算する	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームの列間の相関行列をまとめて求める	df.corr()
オブジェクトは組の要素でないかどうか	element not in aTuple
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
一番右側の列を除いたデータフレーム	df[df.columns[:-1]]
データフレームの指定した列の中にいくつ欠損値が存在するか数える	df['列A'].isna().sum()
タイムスタンプデータを浮動小数点数にする	aDatetime.timestamp()
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
グリーンイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
xの小数点以下'3'桁までを出力する	print(':.3f'.format(x))
グラフから格子を消す	plt.grid(False)
n個に等量でデータフレームの中の列を分割する	pd.qcut(df[col], n)
option: フォントの色をピンクに変更する	color = 'pink'
折れ線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームのあるカラムにおいてどの値が最も出現するか確認する	df['列A'].mode()
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
集合から全要素を取り除く	aSet.clear()
二つのオブジェクトが同一か調べる	obj is obj2
直後の値でデータフレームの列の欠損値を埋める	df['列A'].fillna(method='bfill')
nマイナスn2	n - n2
データフレームの一部のカラムの欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
リストの最初を除く	aList[1:]
日付時刻データは日付時刻データより前	aDatetime < aDatetime2
option: 色をダークマゼンタにする	color = 'darkmagenta'
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
縦棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
実数のcosを求める	math.cos(x)
アルファベットの大文字を全部使う	string.ascii_uppercase
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
配列をy軸、配列を横軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
データフレームのカラムの歪度	scipy.stats.skew(df['列A'], bias=False)
空白で右から文字列を区切る	s.rsplit()
環境がWindowsか調べる	sys.platform.startswith('win32')
折れ線グラフをアンティークホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
行列の行ごとの平均値	np.mean(aArray, axis=1)
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: グラフの色を小麦色に指定する	color = 'wheat'
小数点数の正接の逆数を求める	math.atan(x)
グラフの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームをCSVファイルにカラムの名前を付けず出力する	df.to_csv('file.csv', header=None)
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
option: グラフの色をピーチパフに変更する	color = 'peachpuff'
行列と同じ大きさの空の配列を作成する	np.empty_like(aArray)
今日の日付	datetime.date.today()
ブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームのあるカラムの月を使う	df['列A'].dt.month
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
全要素を1で初期化した行列を作成する	np.ones(行数, 列数, dtype=np.int)
データフレームを並べ直し、下位を取り出す	df.sort_values('キーとなる列').tail(n)
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
二進数の文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
リストと配列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
nをn2で割った余りを求める	n % n2
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
文字列の右側から空白を除く	s.rstrip()
option: 線種を点線に設定する	linestyle = 'dotted'
文字列が全て数字かどうか	s.isdigit()
縦棒グラフをナバホホワイト色として描画する	plt.bar(データ列x, データ列y, color='navajowhite')
文字列が全て英数字	s.isalnum()
散布図に上三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
タプルを浅くコピーする	dict(aDict)
文字列内にひとつでもASCII文字が含まれるか調べる	any(c.isascii() for c in s)
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
最大長nのキューを作る	collections.deque(maxlen=n)
ライトゴールドロディイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
その最小値でデータフレームの指定した列の欠損値を置換する	df['列A'].fillna(df['列A'].min())
データフレームのあるカラムの時	df['列A'].dt.hour
列に列を続ける	itertools.chain(iterable, iterable2)
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
データシリーズの欠損値を後の値で補う	ds.fillna(method='bfill')
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
y軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
アクアマリン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
option: ミディアムスプリンググリーンにグラフの色を指定する	color = 'mediumspringgreen'
配列と配列の散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列の開始位置番目からと終了位置までの間に部分文字列が含まれないか確認する	s.find(sub, start, end) == -1
n割るn2の切り上げ	(n + n2 - 1) // n2
nにn2を加える	n + n2
パターンに文字列がマッチさせる	re.match(pattern, s)
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: マーカーを四角に設定する	marker = 's'
option: 貝殻色を使う	color = 'seashell'
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
シアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
option: シーグリーンに色を変更する	color = 'seagreen'
配列を等量でビン数nとしてビン分割する	pd.qcut(aArray, n)
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
x,yの複素数を計算する	complex(x, y)
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
空の回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
プロットの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
横棒グラフの色を黄緑にする	plt.barh(データ列x, データ列y, color='chartreuse')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
predicateFuncを適用したとき真になる列の要素	itertools.dropwhile(predicateFunc, iterable)
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
浮動小数点数の双曲線正弦	math.sinh(x)
要素がセットに含まれるか判定する	element in aSet
折れ線グラフの色をデピンクに変更する	plt.plot(データ列x, データ列y, color='deeppink')
最頻値でデータフレームの選択したカラムの欠損値を置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: アクアを使う	color = 'aqua'
ダークスラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
文字列を空白で区切って列挙する	s.split()
データフレームを降順に破壊的にある列によって並べる	df.sort_values(by='列A', ascending=False, inplace=True)
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
ブランチドアーモンド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
nがn2未満またはn3以上	n < n2 or n >= n3
データシリーズの曜日が何日目か調べる	ds.dt.dayofweek
データシリーズの欠損値を最小値で補う	ds.fillna(ds.min())
option: セパレータをタブにする	sep = '\t'
Pythonインタプリタの実行ファイルの絶対パスを調べる	sys.executable
リストを累積した列を求める	itertools.accumulate(iterable, operator.mul)
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
ランダムに10行を重複ありでデータフレームからサンプリングする	df.sample(10, replace=True)
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
データフレームの末尾100行を選ぶ	df.tail(100)
データフレームの選択したカラムの平均値	df[['列A', '列B']].mean()
カラムのユニークな要素数	df[col].nunique()
タプルをミュータブルにする	list(aTuple)
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
組中の要素は全て真かどうか調べる	all(aTuple)
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
文字列を大文字・小文字を無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
ローングリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームの一部のカラムを1000の位で丸める	df[['列A', '列B']].round(-3)
option: ダークグレー色を使う	color = 'darkgrey'
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
配列を標準化する	scipy.stats.zscore(配列)
書き込みできるようにファイルをUTF8としてオープンする]	open(filepath, mode='w', encoding='utf-8')
整数nの二進表記を見る	bin(n)
日付時刻データが何日か知る	aDatetime.day
option: グラフを点線に設定する	linestyle = 'dotted'
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
２つのリストをカンマで区切ってプリントする	print(value, value2, sep=',')
配列の相関係数	scipy.stats.pearsonr(配列, 配列2)
データフレームの一部の列の要約統計量を計算する	df[['列A', '列B']].describe()
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
データフレームを二つの列によって並べ直して、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
集合を空集合にする	aSet.clear()
インディアンレッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
ライム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
データ列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
文字列の右側から空白を取り除く	s.rstrip()
線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
に箱ひげ図を用いてデータフレームのカラムを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
表データのあるカラムが何時か見る	df['列A'].dt.hour
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
ベクトルの累積和を計算する	np.cumsum(aArray)
文字列が大文字かどうか判定する	s.isupper()
散布図に丸印を加える	plt.scatter(データ列x, データ列y, marker='o')
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
クラス分類の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
セットから全ての要素を消す	aSet.clear()
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
整数乱数で要素を埋めたベクトルを作成する	np.random.randint(開始値, 終了値, N)
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームの選択した列の中に文字列と文字列があるか確認する	df[['列A', '列B']].isin([value, value2])
紺碧にヒストグラムの色を変更する	plt.hist(データ列, color='azure')
配列の差	aArray - aArray2
文字列が平仮名	('ぁ' <= ch <= 'ん')
データフレームの一部のカラムは正規分布からどれだけ歪んでいるか見る	df[['列A', '列B']].kurt()
空のチェーンマップ	collections.ChainMap()
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
配列とリストについての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームを表示するとき、表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
ある列のカテゴリの最大値	df.groupby('列A').max()
データフレームを関数ごとにグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
数列の変遷を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
プロットで使うカラーパレットを指定する	sns.set(pallete=パレット名)
1行から二つの整数値を読む	A, B = map(int, input().split())
安全に文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームの選択したカラムの中にいくつ欠損値があるかカウントする	df[['列A', '列B']].isna().sum()
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
文字列中からパターンにASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
散布図をパウダーブルー色として描画する	plt.scatter(データ列x, データ列y, color='powderblue')
option: グリーンイエロー色を使う	color = 'greenyellow'
カデットブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
表データのあるカラムは何曜日か見る	df['列A'].dt.weekday_name
折れ線グラフを色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
散布図を赤い丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
グラフを論文に変更する	sns.set(context='paper')
リストを太字で表示する	print(f'\033[1m{value}\033[0m')
文字列が文字列より辞書順で後か調べる	s > s2
スレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
データシリーズが正規分布からどの程度、歪んでいるか確認する	ds.kurt()
レベッカパープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
データフレームのカラムがどの程度、分散しているか確認する	df['列A'].var()
列を中央値でビン分割する	pd.qcut(ds, 2)
リストをn個に等量でビン分割する	pd.qcut(aList, n)
ビン数nとして配列を等量でビン分割する	pd.qcut(aArray, n)
option: 白にグラフの色を変更する	color = 'white'
グラフに鉛直方向の実線を設定する	plt.axvline(x=0, linestyle='solid')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
あるカラムの値毎の平均値	df.groupby('列A').mean()
左三角マーカーを使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
配列とリストの散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
文字列はキーワードか確認する	keyword.iskeyword(s)
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
青い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ロードしたモジュールの一覧を知る	sys.modules
カラムを標準化する	scipy.stats.zscore(df['列A'])
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
ファイルパスの絶対パス	os.path.abspath(filepath)
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
データフレームの指定したカラムは正規分布からどの程度歪んでいるか見る	df['列A'].kurt()
プロットに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
指定したカラムの未入力値を最小値に指定する	df['列A'].fillna(df['列A'].min())
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
パールゴールデンロッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
日付時刻データが日付時刻データより後ろか	aDatetime > aDatetime2
エンディアンを調べる	sys.byteorder
グラフの縦横をセットする	plt.figure(figsize=(横幅, 高さ))
正規表現を用いる	import re
部分文字列が文字列の終了位置より前にあるか判定する	s.find(sub, 0, end) != -1
縦棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
青い一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
ペルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
nullに等しい値	None
文字列中の部分文字列をカウントする	s.count(sub)
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
配列の四分位を描画する	plt.boxplot(データ列)
新しい勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
散布図を大バツマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='X')
カウンタ同士で交わり演算する	aCounter & aCounter2
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフに三角印を使用する	plt.plot(データ列x, データ列y, marker='^')
option: フォントの色をシアンに指定する	color = 'cyan'
データフレームの第一四分位数	df.quantile(0.25)
二次元組をフラット化する	sum(aTuple)
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
option: 色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
xの小数点以下'5'桁までを出力する	print(':.5f'.format(x))
縦軸の目盛を対数に変更する	plt.yscale('log')
プロット中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
option: グラフの色を小麦色に設定する	color = 'wheat'
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
散布図の印を赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
option: インディアンレッドにグラフの色を設定する	color = 'indianred'
文字列の最後から部分文字列を探す	s.rfind(sub)
あるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
option: ダークサーモンにグラフの色を設定する	color = 'darksalmon'
イテラブルとイテラブルについての散布図にrgbのクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
黄色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
分子n、分母mの分数を用意する	fractions.Fraction(numerator=n, denominator=m)
リストの散らばりを可視化する	plt.scatter(データ列x, データ列y)
ファイルから1文字、読み込む	f.read(1)
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
文字列の末尾から部分文字列を除く	s.removesuffix(sub)
データフレームの選択したカラムを一万の位で丸める	df[['列A', '列B']].round(-4)
横棒グラフをライトシアン色を使って描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームの列の名前一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
データフレームが正規分布からどれだけ尖っているか調べる	df.skew()
文字列がASCII文字か調べる	s.isascii()
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
要素をスタックのn番目に挿入する	deq.insert(n, element)
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
データフレームの一部のカラムの中に文字列と文字列がある	df[['列A', '列B']].isin([value, value2])
option: 表計算シート名を指定する	sheet_name = ['A', 'B']
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
表から指定したデータ型の列名の一覧	df.select_dtypes(型).columns
キーが辞書上で未定義か調べる	key not in aDict
散布図の四角印を青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ある列の値毎の最大値	df.groupby('列A').max()
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
option: ミディアムブルー色を用いる	color = 'mediumblue'
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ロイヤルブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
配列の推移を折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: ローングリーンにグラフの色を指定する	color = 'lawngreen'
リストとリストについて散布図をプロットして、大バツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
行列の最大値	np.max(aArray)
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
指定したカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
データフレームの一部のカラムの歪み	df[['列A', '列B']].kurt()
円プロットを真円にする	plt.axis('equals')
データフレームのあるカラムのタイムゾーンを東京に設定する	df['列A'].tz_convert('Asia/Tokyo')
データフレームの一部のカラムを四捨五入して整数型にする	df[['列A', '列B']].round().astype(int)
データフレームを２つの列で集計する	df.groupby(['列A', '列B'])
ヒストグラムのラインスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
プロットの色調を濃くする	sns.set(pallete='deep')
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
本日が金曜日	datetime.datetime.today().weekday() == 4
多次元データをSVDを使ってパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
rgbの右三角マーカーを配列と配列の散布図に描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
全印字可能な文字	string.printable
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
印字可能な文字を全部使う	string.printable
日付データをISO書式の文字列にする	aDate.isoformat()
文字列中の正規表現を新しい文字列で置換する	re.sub(pattern, newsub, s)
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
全要素を1で初期化した行列を初期化する	np.ones(行数, 列数, dtype=np.int)
ケンドール相関係数として表データの相関行列を求める	df.corr(method='kendall')
リストと配列について散布図を描き、、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストを等量で分割数nを用いて分割する	pd.qcut(aList, n)
データフレームの値は欠損値	df.isna()
ラインを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
最小値でデータシリーズのNaNを埋める	ds.fillna(ds.min())
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
本日の日付時刻を求める	datetime.datetime.now()
CSVのn行目をインデックスにして読み込む	pd.read_csv('file.csv', index_col=n)
option: ラベンダー色を使用する	color = 'lavender'
線グラフを色付きの実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフのクロス印の線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
あるカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
実線として線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
データ列のユニークな要素数	ds.nunique()
データフレームの先頭n行を抽出する	df.head(n)
配列の調和平均を算出する	scipy.stats.hmean(配列)
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
データシリーズの欠損値を50パーセンタイルで埋める	ds.fillna(ds.median())
小数点数を実数で割った剰余	math.remainder(x, x2)
２つのデータフレームをジョインする	pd.merge(df, df2)
データフレームをある列の値でグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
データフレームの相関行列をケンドール相関係数で算出する	df.corr(method='kendall')
折れ線グラフの上三角印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの母標準偏差	df.std(ddof=0)
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
要素が全て1の行列を作成する	np.ones(要素数, dtype=np.int)
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
折れ線グラフを色付きの点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
グラフの描画で明るくテーマを使う	sns.set(pallete='bright')
データフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
データフレームをある列によってソートする	df.sort_values(by='列A')
option: 印をダイアモンドに指定する	marker = 'D'
散布図の星印を黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
リストからベクトルを作る	np.array(aList)
データフレームの選択した列の標本分散を求める	df[['列A', '列B']].var(ddof=0)
データフレームをエクセルからシートの名前を指定して読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
横棒プロットをプロットしてラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームの指定した列の中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: フクシア色を使用する	color = 'fuchsia'
変数を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
双方向キューの最後に文字列を追加する	deq.append(element)
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
列を全てPandasの日付型に変換する	pd.to_datetime(df['列A'])
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
作画の背景色を暗くする	sns.set(style='darkgrid')
データフレームの指定した列のSkewnessを求める	df['列A'].skew()
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
グラフの色テーマを暗くする	sns.set(pallete='dark')
リストとリストについての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
nかけるn2	n * n2
option: マーカーを星に変える	marker = '*'
ヒストグラムの色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
今日が日曜日か調べる	datetime.datetime.today().weekday() == 6
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
ふたつのカラムからグループ化し、標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列x, データ列y, color='midnightblue')
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
プロットの色を全般的にパステル調にする	sns.set(pallete='pastel')
横棒グラフをパウダーブルー色を使って描画する	plt.barh(データ列x, データ列y, color='powderblue')
option: ゴールドにグラフの色を設定する	color = 'gold'
ナバホホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
英字の大文字列	string.ascii_uppercase
０で全要素を初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
option: 読み込まないフッタをnに指定する	skipfooter = n
データフレームがどの程度、分散しているか見る	df.var()
グリッド線を白くする	plt.grid(color='w')
実数の整数部を求める	math.modf(x)[1]
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
セットを更新不能に変換する	frozenset(aSet)
option: 印をポイントに指定する	marker = '.'
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
スプリンググリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
折れ線グラフの▽マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
カウンタから最頻出な要素の件数を求める	aCounter.most_common()[1]
ヒストグラムを真紅色で描画する	plt.hist(データ列, color='crimson')
線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データ列の変遷を一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
シーケンスを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
カウンタの項目数を使う	len(aCounter)
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データシリーズが正規分布からどの程度、尖っているか確認する	ds.skew()
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
ヒストグラムをダークカーキ色を用いて描画する	plt.hist(データ列, color='darkkhaki')
タイムスタンプデータにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
プログラムを正しく終了する	sys.exit(0)
スチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
データフレームを二つの列をキーにして昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
リストとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
整数nがセットのどれかか調べる	n in aSet
ヒストグラムのビン数を変更する	plt.hist(データ列, bins=区関数)
分類モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
表データのあるカラムは何時か調べる	df['列A'].dt.hour
回帰モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
実数の逆双曲線正接	math.atanh(x)
文字列中にひとつでも非小文字が含まれるかどうか	any(not c.islower() for c in s)
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, N)
ミディアムバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
標準エラーを用いる	sys.stderr
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
文字列の最初から空白を除く	s.lstrip(' ')
デピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
ミントクリーム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
インデックスを用いて降順でデータフレームをソートする	df.sort_index(ascending=False)
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
データフレームの指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
▲印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ファイルパスを書き込みできるように開く]	open(filepath, mode='w')
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: ダイアモンド印を使う	marker = 'D'
ふたつの集合の差集合を使う	aSet.difference(aSet2)
分類モデルの正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ヒストグラムの色をミディアムバイオレットレッドにする	plt.hist(データ列, color='mediumvioletred')
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
option: ミディアムパープル色を使用する	color = 'mediumpurple'
日付時刻データと日付時刻データの時間差を秒で算出する	(aDatetime - aDatetime2).total_seconds()//60
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
色付きの一点鎖線としてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ロージーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
指定したカラムの中にいくつ文字列があるかカウントする	df['列A'].isin([value]).sum()
option: アクアマリン色を使用する	color = 'aquamarine'
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
円周率	math.pi
タプル内の要素が全て真か調べる	all(aTuple)
文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
ダークレッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
配列を分割する	pd.cut(aArray, aList)
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
option: グラフの色をダークターコイズに変更する	color = 'darkturquoise'
棒グラフをグリーンイエロー色として描画する	plt.bar(データ列x, データ列y, color='greenyellow')
配列としてデータフレームのある列を選択する	df['列A'].values
データフレームのstart行目からend行目まで選択する	df[start:end]
表データのあるカラムの時刻	df['列A'].dt.hour
スーパーセットもしくは等しいかどうか調べる	aSet > aSet2
両端キュー中の要素の数を数える	deq.count(element)
ファイルをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
ファイルパスから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
ロイヤルブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
グラフのデータラベルを表示する	plt.legend()
保存するCSV形式の小数点以下の桁数を変更する	df.to_csv('file.csv', float_format='%.3f')
データフレームの標準偏差を求める	df.std()
双方向キューを用いる	import collections
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
option: フォントの色をライムグリーンに設定する	color = 'limegreen'
日本語をプロット中で表示できるようにする	sns.set(font='IPAexGothic')
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
インディアンレッドにヒストグラムの色をセットする	plt.hist(データ列, color='indianred')
option: フォントの色をライトシアンに変更する	color = 'lightcyan'
データシリーズの空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
データフレームの一部のカラムの未入力値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: グラフの色をダークグレーに設定する	color = 'darkgray'
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
新しいガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
データフレームの指定したカラムを四捨五入して、整数にする	df['列A'].round().astype(int)
実数の二乗	x ** 2
rgbの丸マーカーをデータ列と配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
データフレームのある列の値がxに等しいデータを選択する	df[df['列A'] == x]
option: タンを使用する	color = 'tan'
データフレームを指定したカラムで昇順にソートする	df.sort_values(by='列A', ascending=True)
文字列の右側から部分文字列を取り除く	s.removesuffix(sub)
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
ユニコードエスケープで文字列をバイト列にする	s.encode(encoding='unicode_escape')
配列の幾何平均を求める	scipy.stats.gmean(配列)
二つの集合のインターセクションを計算する	aSet.intersection(aSet2)
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
タイムスタンプデータとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
option: フォントの色をグレーにする	color = 'gray'
スタックが空でないかどうか	len(deq) != 0
option: スレートブルー色を使う	color = 'slateblue'
データ列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
異なる列をキーとしてデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データシリーズは何月か見る	ds.dt.month
データフレームの数値を一度に小数点以下n桁で四捨五入する	df.round(n)
浮動小数点数に変換する	float(x)
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
全要素が初期値の行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
折れ線グラフの三角印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
英字を全て使う	string.ascii_letters
データシリーズの中に文字列と日付データがいくつあるかカウントする	ds.isin([value, value2]).sum()
配列とリストの散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
両端キュー中の値のインデックス	deq.index(element)
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
縦棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームを正規表現patternで一度にreplに置換する	df.replace(pattern, repl, regex=True)
縦棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をやわらかい青に変更する	plt.hist(データ列, color='cornflowerblue')
二つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
貝殻色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
option: グラフの色をロイヤルブルーにセットする	color = 'royalblue'
真スーパーセットか調べる	aSet > aSet2
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
部分文字列か調べる	sub in s
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
データフレームの二つの列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
文字列の先頭からタブを取り除く	s.lstrip('\t')
文字列がリストに含まれるか	element in aList
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
数列の変遷を赤い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
option: ゴールド色を使う	color = 'gold'
option: グラフの種類を点線に変更する	linestyle = 'dotted'
数列の変遷を半透明の実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
指定した列のカテゴリで集計し、分散を求める	df.groupby('列A').var()
線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
文字列をキャピタライズする	s.capitalize()
カラムのスピアマンの順位相関係数を算出する	scipy.stats.spearmanr(df['列A'], df['列B'])
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
列のエポック秒をPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
option: トマトを用いる	color = 'tomato'
散布図のマーカーを黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(配列, 'norm')
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
データフレームの二つの列を並べて箱髭図を用いて可視化する	plt.boxplot([df['カラム'], df['カラム']])
行列の列ごとの平均	np.mean(aArray, axis=0)
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
ホットピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
平均でデータシリーズのNaNを埋める	ds.fillna(ds.mean())
option: 色をダークグリーンに設定する	color = 'darkgreen'
空のリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームの選択したカラムの標本分散	df[['列A', '列B']].var(ddof=0)
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
リストと配列の散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
真紅色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームをグループ化しそれぞれの最大値を算出する	df.groupby('列A').max()
データシリーズのNaNを直後の値に設定する	ds.fillna(method='bfill')
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
カラーパレットを全般的に暗くする	sns.set(pallete='dark')
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
xを文字列にして出力ストリームに書き込む	f.write(str(x))
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
折れ線グラフの色を青緑にセットする	plt.plot(データ列x, データ列y, color='teal')
コーンフラワーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
3つの値を順にプリントする	print(value, value2, value3)
線グラフの色をダークレッドにする	plt.plot(データ列x, データ列y, color='darkred')
指定した列のみデータフレームの重複を確認する	df.duplicated(subset='列A')
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
ライトブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフのマーカーを三角印にする	plt.plot(データ列x, データ列y, marker='^')
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
ポスター用にグラフをセットする	sns.set(context='poster')
option: 色をサドルブラウンに変更する	color = 'saddlebrown'
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをパープル色を使って描画する	plt.hist(データ列, color='purple')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
t-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
書き込み用に文字列の示すエンコーディングとしてファイルを開く]	open(filepath, mode='w', encoding=s)
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
両端キューが空でないかどうか調べる	len(deq) != 0
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
データシリーズが何時か見る	ds.dt.hour
データフレームをある列の値を用いて集約してそれぞれのグループ毎の件数を知る	df.groupby('列A').size()
option: ラベンダー色を使う	color = 'lavender'
まとめてデータフレームの列の名前を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
平均値でデータフレームの一部のカラムの欠損値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
オブジェクトのオブジェクト識別子	id(obj)
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
option: ダークグレー色を用いる	color = 'darkgray'
指定したカラムの標準偏差を求める	df['列A'].std()
配列の合計	np.sum(aArray)
2つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
三つの変数を順にプリントする	print(value, value2, value3)
ヒストグラムの線種を破線に設定する	plt.hist(データ列, linestyle='dashed')
配列のスピアマンの順位相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
外れ値に強い線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
option: 色をライトスカイブルーに指定する	color = 'lightskyblue'
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームの中の欠損値の数をカウントする	df.isna().sum()
プロット中のフォントを設定する	sns.set(font=フォント名)
アイボリー色としてヒストグラムを描画する	plt.hist(データ列, color='ivory')
線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
KNNを使ってクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
ベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
インディゴ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
カウンタの項目一覧	aCounter.keys()
option: ゴールドにグラフの色をセットする	color = 'gold'
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームの選択したカラムの中にいくつ欠損値が存在するか求める	df[['列A', '列B']].isna().sum()
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
散布図の左三角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
データフレームを各列毎にグループ化して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
option: パールバイオレットレッド色を使う	color = 'palevioletred'
データシリーズは何分か見る	ds.dt.minute
双方向キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
数をn乗する	x ** n
回帰木の重要度をグラフにする	plt.barh(X.columns, model.feature_importances_)
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
option: グラフの色をローングリーンに変更する	color = 'lawngreen'
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
セットからエラーなく値を取り除く	aSet.discard(element)
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
文字列モジュールをインポートする	import string
配列の偏差値を使う	50 + 10 * scipy.stats.zscore(配列)
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
オブジェクトがリストか調べる	isinstance(obj, list)
両端キューの最初から要素を取り除く	deq.popleft()
グループ化してデータフレームの散布図を横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
折れ線グラフを色付きの破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
日付データからn分引く	aDate - datetime.timedelta(minutes=n)
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームを列名を指定して右ジョインする	pd.merge(df, df2, on='列A', how='right')
既存のファイルをSJISを用いて追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームを表示するとき、列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
折れ線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
パステル調にカラーパレットをグラフの描画で使う	sns.set(pallete='pastel')
option: フォントの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
新しいヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
横軸の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの印を左三角にする	plt.plot(データ列x, データ列y, marker='<')
一点鎖線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
フォーマットとして列を日付データにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
最初のを除いたデータフレーム	df[df.columns[1:]]
散布図を赤い星マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームのカラムの中にある日付データとの合計を調べる	df['列A'].isin([value, value2]).sum()
数値を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
最適な位置に凡例を表示する	plt.legend(loc='best')
データフレームのカラムのトリム分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: フクシアを使う	color = 'fuchsia'
作業ディレクトリ	os.getcwd()
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの選択したカラムの中に日付データと文字列が存在する	df[['列A', '列B']].isin([value, value2])
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
プロットをプレゼンてション用に設定する	sns.set(context='talk')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
原点から点までの距離を計算する	math.hypot(x, y)
n進数文字列を整数に変換する	int(s, n)
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
上限長nのスタックを作る	collections.deque(maxlen=n)
カラムを四捨五入する	df['列A'].round()
option: プラムにグラフの色を設定する	color = 'plum'
横棒グラフをペールグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='palegreen')
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
データフレームのある列を選択する	df['列A']
線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
文字列が組に含まれるかどうか	element in aTuple
列のユニークな要素数	ds.nunique()
主成分分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
棒グラフをライトシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: グラフのラインスタイルを破線にセットする	linestyle = 'dashed'
option: ポイント印を描画する	marker = '.'
文字列の先頭で正規表現に複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
リストの長さを調べる	len(aList)
option: カラム名をリストで設定する	names = 列名リスト
option: n番目の列をインデックスにセットする	index_col = n
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
option: ダークオーキッド色を使用する	color = 'darkorchid'
日付時刻データが何分か知る	aDatetime.minute
データフレームから5行をランダムに重複ありでサンプリングする	df.sample(5, replace=True)
線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategray')
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
数式の展開を行う	sympy.expand(e)
データ列の推移を赤い実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
nが1もしくは2	n == 1 or n == 2
折れ線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
リストをボックスチャートとしてプロットする	plt.boxplot(データ列)
データフレームの欠損値を平均値に増やす	df.fillna(df.mean())
データフレームのカラムのトリム分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ヒストグラムをパールゴールデンロッド色を用いて描画する	plt.hist(データ列, color='palegoldenrod')
プロットの色を濃くする	sns.set(pallete='deep')
辞書をインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフの上三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
変数を青色化する	f'\033[34m{value}\033[0m'
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
ヒストグラムの色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
オブジェクトがフィールドを持つか調べる	hasattr(obj, プロパティ名)
折れ線グラフの色をグリーンイエローにする	plt.plot(データ列x, データ列y, color='greenyellow')
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームをグループ化し、ある列に対し最大値を求める	df.groupby('列A')['列B'].max()
日付データが月曜日か調べる	aDate.weekday() == 0
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
nはリストのいづれかかどうか	n in aList
縦棒グラフを描画し、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
option: ミディアムブルーを使用する	color = 'mediumblue'
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
データフレームのカラムをグループ化してヒストグラムを使ってグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームのカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
整数の並べ方の総数	math.perm(n)
nが無限に続く数列	itertools.repeat(n)
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
半透明の実線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
データフレームの一部の列を10の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
正規表現を事前にASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームをある列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
イテラブルから重複なくn個選ぶ	random.sample(iterable, k=n)
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
正弦の逆数	math.asin(x)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
大文字・小文字を無視してパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
TSVファイルをロードする	pd.read_csv('file.tsv', sep='\t')
折れ線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
横棒グラフを黄緑色を使って描画する	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
実数を複素数に変換する	complex(x)
option: ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
データフレームのある列をインデックスに指定する	df.set_index('列A')
nで乱数シードを初期化する	random.seed(n)
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
カデットブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
データ列とリストについての散布図に赤い菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データ列をn個にビンニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: 紺碧にフォントの色を指定する	color = 'azure'
散布図の△印の大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
カウンタを集合にする	set(aCounter)
データフレームのNaNを直後の値に指定する	df.fillna(method='bfill')
ヒストグラムをシルバー色として描画する	plt.hist(データ列, color='silver')
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
組の最初	aTuple[0]
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
option: マーカーをバツに指定する	marker = 'x'
指定した列で集計しそれぞれの分散を求める	df.groupby('列A').var()
ダークマゼンタ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
集合の濃度	len(aSet)
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
シスル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームをインポートする	import pandas as pd
データフレームを表示するとき小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
エクセルファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
標準出力の出力先がターミナル	sys.stdout.isatty()
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
option: コーンフラワーブルーにグラフの色をセットする	color = 'cornflowerblue'
セットの全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
三変数の最大値を求める	max(x, y, z)
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
データシリーズの標準偏差を算出する	ds.std()
イテラブルから行列を作る	np.array(iterable)
アイボリー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
option: ベクトルのデータ型を指定する	dtype = np.uint8
空の多重集合	collections.Counter()
オブジェクトに属性があるか	hasattr(obj, プロパティ名)
線グラフを破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
色付きの点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
実数を実数で割った余り	x % y
seabornのデフォルトスタイルを適用する	sns.set()
リストと配列の散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームが重複しているかどうか確認する	df.duplicated()
predicateFuncが真となる列の要素	itertools.dropwhile(predicateFunc, iterable)
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgray')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームをにバイオリン図でプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの複数の列を取り除く	df.drop(['列A', '列B'], axis=1, inplace=True)
ヒストグラムを紺色として描画する	plt.hist(データ列, color='darkblue')
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
数式を簡略化する	sympy.sympify(e)
リストの末尾から要素を取り出す	aList.pop()
ライトゴールドロディイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ファイルパスをバイナリモードとして開いて]、fとする	f = open(filepath, mode='rb')
二つのデータフレームを横向きにマージする	pd.merge(df, df2)
タプルのキーの値を得る	aDict[key]
標準入力から1文字読み込む	sys.stdin.read(1)
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
カラムが正規分布かどうか調べる	scipy.stats.shapiro(df['列A'])
プロットの色を暗くする	sns.set(pallete='dark')
リストを黄色でプリントする	print(f'\033[33m{value}\033[0m')
option: ダークシアグリーンを使う	color = 'darkseagreen'
option: 先頭のカラムをインデックスに変更する	index_col = 0
ヒストグラムの色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
データフレームの一部の列の中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
option: グラフの色をベージュに変更する	color = 'beige'
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
nが3で割り切れるか	n % 3 == 0
セパレータによって文字列を区切って、列挙する	s.split(sep)
データフレームの中に日付データと文字列がいくつあるか数える	df.isin([value, value2]).sum()
折れ線グラフの色をオーキッドにセットする	plt.plot(データ列x, データ列y, color='orchid')
リストとイテラブルについての散布図に黒い菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の印を上三角印にする	plt.scatter(データ列x, データ列y, marker='^')
棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
文字列の無限なイテラブル	itertools.repeat(element)
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
カテゴリで色分けしてデータフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
表計算から複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データシリーズの分	ds.dt.minute
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
ベクトルを転置する	aArray.T
ファイルをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
タン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
散布図の左三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
デックに要素をプッシュする	deq.append(element)
クラスは名前付きタプルかどうか調べる	issubclass(C, tuple)
０で全要素を初期化した三2ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
散布図をスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slateblue')
ピアソンでデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
ベクトルをフラット化する	aArray.flatten()
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図に左三角印を使用する	plt.scatter(データ列x, データ列y, marker='<')
タイムスタンプデータが日曜日か確認する	aDatetime.weekday() == 6
スノー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
option: 小麦色色を用いる	color = 'wheat'
をPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
散布図を▽マーカーとして描く	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの大バツマーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データフレームの選択した列の欠損値をモードに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
xが真	bool(x)
ヒストグラムの色をブラックに指定する	plt.hist(データ列, color='black')
線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
nがn2で割り切れないか	n % n2 != 0
最後の部分文字列で文字列を分割したときの前半の文字列を取り出す	s.rpartition(sub)[0]
部分文字列で文字列を分けた時の先頭の文字列を取り出す	s.partition(sub)[0]
標準入力	sys.stdin
グラフの中に枠なしのデータラベルを加える	plt.legend(frameon=False)
オプションで、標準出力を用いる	file = sys.stdout
タプルのオブジェクトが最初に見つかる場所を探す	aTuple.index(element)
列とシーケンスを連結する	itertools.chain(iterable, iterable2)
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
リストとリストの散布図を描画して丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
バリーウッドにヒストグラムの色を変更する	plt.hist(データ列, color='burlywood')
要素が全て1の配列を作成する	np.ones(要素数, dtype=np.int)
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
実数の逆双曲線正接を計算する	math.atanh(x)
青緑色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
赤いバツマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
等差数列から整数乱数を得る	random.randrange(start, end, step)
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
プロットから格子を消す	plt.grid(False)
辞書でカウンタを更新する	aCounter.update(aDict)
データシリーズを十の位で丸めて、整数にする	ds.round(-1).astype(int)
最後の部分文字列で文字列を分けた場合の前半の文字列	s.rpartition(sub)[0]
option: グラフの色をライトグリーンに指定する	color = 'lightgreen'
'A'カラムの値がxに等しいデータを抽出する	df[df['列A'] == x]
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
配列とイテラブルの直積を得る	itertools.product(iterable, iterable2)
日付時刻データの日付	aDatetime.date()
option: バツマーカーを描画する	marker = 'x'
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
半透明の実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームの指定したカラムの最頻値	df['列A'].mode()
文字列は平仮名か確認する	('ぁ' <= ch <= 'ん')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='^')
データフレームをある列の値でグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
option: 文字コードtextを用いる	encoding = text
フローラルホワイト色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
nが2で割り切れないか	n % 2 == 1
黒い左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c='k')
両端キューに数値をスタックする	deq.append(element)
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 青緑を使用する	color = 'teal'
データフレームの指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
二変数の最大値	max(x, y)
option: グラフの線種を一点鎖線に変更する	linestyle = 'dashbot'
ある列の標準偏差など	df['列A'].describe()
辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
オブジェクトは集合クラス	isinstance(obj, set)
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
散布図の四角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字列がn回続くイテラブル	itertools.repeat(element, n)
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
プロットのデータラベルを表示する	plt.legend()
改行で文字列を分割する	s.splitlines()
値∈セット	element in aSet
データフレームの一部のカラムを100の位で四捨五入する	df[['列A', '列B']].round(-2)
折れ線グラフの▽マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
部分文字列を文字列の接尾辞から除く	s.removesuffix(sub)
本日が何曜日か知る	datetime.datetime.today().weekday()
浮動小数点数を小数点第一位で丸める	round(x, 1)
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
等差数列から整数乱数を求める	random.randrange(start, end, step)
積み上げ棒グラフを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
option: グレーにフォントの色を設定する	color = 'grey'
列名を指定して２つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
ファイルパスをオープンして]追加ストリームを使う	open(filepath, mode='a')
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
xが一桁の整数	-9 <= x <= 9
データシリーズの中にあると文字列の合計を調べる	ds.isin([value, value2]).sum()
option: 読み込みモードにする	mode = 'r'
文字列が全て印字できるかどうか調べる	s.isprintable()
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
浮動小数点数を万の位で丸める	round(x, -4)
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(df['列A'], 'norm')
ふたつの関係が上位集合もしくは等しい	aSet > aSet2
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
二つのリストから辞書	dict(zip(aList, aList2))
ベクトルのスカラー倍を調べる	aArray * n
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
既にロードされたモジュールのリストを調べる	sys.modules
データ列の折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
両端キューの左側	deq[0]
三つのリストを順にプリントする	print(value, value2, value3)
日付と時刻から日付時刻を準備する	datetime.datetime(年, 月, 日, 時, 分, 秒)
双方向キューをリストに変換する	list(deq)
文字列の接頭辞から部分文字列を除去する	s.removeprefix(sub)
横棒グラフの色を深紅にする	plt.barh(データ列x, データ列y, color='crimson')
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
データフレームの欠損値をモードで置換する	df.fillna(df.mode().iloc[0])
JSON文字列を辞書に変換する	json.loads(jsonString)
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
データフレームのカラムの標準誤差を算出する	scipy.stats.sem(df['列A'])
option: 線種を破線に変更する	linestyle = 'dashed'
option: アンティークホワイトを使う	color = 'antiquewhite'
横棒グラフの色を濃いシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
3整数のLCM	math.lcm(n, n2, n3)
ある列の文字列に部分文字列が存在する行を取り出す	df[df['列A'].str.contains(部分文字列)]
マッピングから項目名の値をエラーなく得る	aDict.get(key, None)
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
オブジェクトにプロパティが存在するかどうか調べる	hasattr(obj, プロパティ名)
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
データシリーズの月	ds.dt.month
分割数nでリストをビン分割する	pd.cut(aList, n)
option: 下三角マーカーを用いる	marker = 'v'
縦棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
日付データと日付データの時間差は何秒か知る	(aDate - aDate2).total_seconds()
データフレームのあるカラムは何日か見る	df['列A'].dt.day
半透明の一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームをCSV形式を用いて出力する	df.to_csv('file.tsv', sep='\t')
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
配列としてデータフレームのある列を抽出する	df['列A'].values
nを半分にする	n /= 2
文字列を太文字で表示する	print(f'\033[1m{value}\033[0m')
データフレームのstart行目からend行目までを抽出する	df[start:end]
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
赤い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
列名を指定して二つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
紺碧色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
ヒストグラムをダークグリーン色として描画する	plt.hist(データ列, color='darkgreen')
ゴーストホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
配列を分割数nでビン分割する	pd.cut(aArray, n)
改行せず数値をプリントする	print(value, end='')
デピンク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
ダークオレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
option: 行方向に処理する	axis = 1
文字列中にひとつでも非大文字があるか調べる	any(not c.isupper() for c in s)
キーが辞書上で定義済みかどうか	key in aDict
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
折れ線グラフのダイアモンド印の色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
データ列をカテゴリデータにする	ds.astype(object)
プロットに被らない位置に凡例を表示する	plt.legend(loc='best')
コーンフラワーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
行列の値	aArray[行番号, 列番号]
ブースティングでクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: ライトゴールドロディイエロー色を使用する	color = 'lightgoldenrodyellow'
折れ線プロットを描く	plt.plot(データ列x, データ列y)
データフレームのカラムの各データ値の出現数を計算する	df[col].value_counts()
棒グラフをドジャーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
ファイルをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
option: ブラック色を使う	color = 'black'
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
散布図に三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
数字を全部使う	string.digits
option: グラフの色をフォレストグリーンに指定する	color = 'forestgreen'
配列の相関係数を使う	scipy.stats.pearsonr(配列, 配列2)
スーパーセットもしくは等しい	aSet > aSet2
横棒グラフをネイビー色を使って描画する	plt.barh(データ列x, データ列y, color='navy')
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
リストとデータ列について散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
リストから配列を作る	np.array(aList)
タイタニック号のデータセットをデータフレームとしてロードする	df = sns.load_dataset('titanic')
リストを境界値としてリストを分割する	pd.cut(aList, aList)
option: 青緑にフォントの色を設定する	color = 'teal'
下限指定をしたカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
新しい文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
ある列のカテゴリ毎の最小値を算出する	df.groupby('列A').min()
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームからランダムに10行を抽出する	df.sample(10)
縦棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
数のn乗して浮動小数点数による余りを求める	pow(x, n, y)
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
オブジェクトの固有のID	id(obj)
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
整数nが配列のどれか	n in aArray
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
クラスのサブ型か調べる	issubclass(サブクラス, クラス)
実数を十六進表記の文字列にする	x.hex()
列の値によってデータフレームをまとめたグループを見る	df.groupby('列A')
ナバホホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データ列の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
線グラフをディムグレー色を使って描画する	plt.plot(データ列x, データ列y, color='dimgray')
データシリーズの欠損値をxで埋める	ds.fillna(x)
２次元リストの転置行列を計算する	[list(x) for x in list(zip(*aList))]
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
部分文字列で文字列を分割する	s.partition(sub)
予測データの混同行列を計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
プラットホームはMacOSか調べる	sys.platform.startswith('darwin')
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
ロバストな単回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームは正規分布からどれだけ、歪んでいるか見る	df.kurt()
16進数文字列を整数に変換する	int(s, 16)
線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
データシリーズの中にある文字列と日付データの個数をカウントする	ds.isin([value, value2]).sum()
あるカラムの文字列が部分文字列で始まるデータを抽出する	df[df['列A'].str.startswith(部分文字列)]
option: スノーに色を設定する	color = 'snow'
ミッドナイトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgray')
イテラブルをカウンタに変換する	collections.Counter(iterable)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
折れ線グラフとしてデータフレームの列を描画する	plt.plot(df[column], df[column])
日付時刻データが火曜日かテストする	aDatetime.weekday() == 1
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
行列の行ごとの分散を求める	np.var(aArray, axis=1)
データ列の出現頻度を可視化する	plt.hist(データ列)
データフレームから重複を削除する	df.drop_duplicates(inplace=True)
縦棒グラフをロイヤルブルー色を使って描画する	plt.bar(データ列x, データ列y, color='royalblue')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
rgbの菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
高頻出な方からカウンタを列挙する	aCounter.most_common()
横棒グラフをコーラル色を使って描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームを並べ直して、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
あるカラムの値がx以上の行を取り出す	df[df['列A'] >= x]
乱数のベクトルを作成する	np.random.random(N)
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列の先頭から空白やタブを除く	s.lstrip()
整数nの十六進文字列を求める	hex(n)[2:]
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
横棒グラフをダーク・スラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
データ列の数値時刻を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
集合をイミュータブルな集合にする	frozenset(aSet)
折れ線グラフのダイアモンド印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムの色をオレンジにセットする	plt.hist(データ列, color='orange')
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのカラムの中にいくつ未入力値が存在するか数える	df['列A'].isna().sum()
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
整数nの8進数表記	oct(n)
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
option: 改行コードを動作環境依存に変更する	newline = None
縦棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
印字可能な文字を全て使う	string.printable
第２引数で指定したファイルの名前	sys.argv[1]
1行から2つの文字列値を取り出す	A, B = map(str, input().split())
リストと数列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
タイムスタンプデータからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ファイルを追加用にオープンして]fとする	f = open(filepath, mode='a')
数値を簡単にする	sympy.sympify(e)
実数のn乗して実数による余り	pow(x, n, y)
折れ線グラフをライトイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightyellow')
全八進数字	string.octdigits
データシリーズがどれだけ分散しているか調べる	ds.var()
配列とデータ列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
散布図をミディアムブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
縦棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
二つの文字列を表示する	print(value, value2)
リストとリストを接続する	aList + aList2
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
横棒グラフをダークレッド色で描画する	plt.barh(データ列x, データ列y, color='darkred')
パールゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
黒い三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムをシエナ色を用いて描画する	plt.hist(データ列, color='sienna')
直前の値でデータシリーズの欠損値を補う	ds.fillna(method='ffill')
文字列の先頭でパターンにASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
option: バイナリ書き込みモードを使用する	mode = 'wb'
nの8進数文字列	oct(n)[2:]
散布図のダイアモンドマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
エラーなく集合から要素を除去する	aSet.discard(element)
連続したベクトルの自動作成する	np.arange(開始値, 終了値, 等差)
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
オブジェクトがタプルの要素でないか	element not in aTuple
文字列の接尾辞から部分文字列を除く	s.removesuffix(sub)
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
データフレームが重複しているか調べる	df.duplicated()
option: ダークグリーン色を使う	color = 'darkgreen'
色付きの点線を用いてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームの一部のカラムの標本分散	df[['列A', '列B']].var(ddof=0)
データフレームをグループ化し、ある列に対し個数を計算する	df.groupby('列A')['列B'].count()
実数が有限か	math.isfinite(x)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
最頻値でデータフレームの指定したカラムのNaNを埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
線グラフの色をダークバイオレットに指定する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図の▲マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ライトサーモン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
現在が水曜日か調べる	datetime.datetime.today().weekday() == 2
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
ファイル名がCSVファイルか	filename.endswith('.csv')
実数の正接	math.tan(x)
黒いバツマーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
指定した列のカテゴリで集計し、それぞれの個数を求める	df.groupby('列A').count()
カラーバーをつける	plt.colorbar()
プロットで使う縦軸の説明をuntitledにセットする	plt.ylabel('y軸ラベル')
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
ベクトルをベースにして全要素が初期値の行列	np.full_like(aArray, 初期値)
データ列とリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの指定した列の未入力値を平均値に変更する	df['列A'].fillna(df['列A'].mean())
リストをy座標、配列を横軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
整数nは配列のどれかかどうか調べる	n in aArray
option: 青緑色を使う	color = 'teal'
方程式として数値の変数の解を算出する	sympy.solve(e, z)
乱数で要素を埋めた行列	np.random.random(N)
リストとイテラブルについて散布図を描画して、マーカーを大バツにセットする	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
データフレームの指定したカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
カウンタ同士で積集合演算する	aCounter & aCounter2
データフレームの中に日付データがあるか調べる	df.isin([value])
ヒストグラムの色をライムにセットする	plt.hist(データ列, color='lime')
2つのリストから辞書	dict(zip(aList, aList2))
多次元データをt分布型確率的近傍埋め込み法として淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
縦棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
オブジェクトにプロパティがあるか調べる	hasattr(obj, プロパティ名)
既存のファイルを文字列の示す文字コードで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
標準出力	sys.stdout
青いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
nが何桁か	len(str(n))
四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s')
option: ダークスラテグレー色を用いる	color = 'darkslategray'
ミディアムバイオレットレッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
ある列の値ごとの個数	df.groupby('列A').count()
散布図をミディアムスプリンググリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
２つの変数をそれぞれ定義する	x, y = i, j
データフレームの中に存在する文字列との合計を数える	df.isin([value, value2]).sum()
未入力値がある行をドロップしてみる	df.dropna()
カデットブルー色でヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
レモンシフォン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
予測結果のF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
行列の要素ごとに加算する	aArray + aArray2
リストとイテラブルについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
日付時刻データの年	aDatetime.year
データフレームは何行重複するか確認する	df.duplicated().sum()
リストとリストの散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
option: シスル色を使う	color = 'thistle'
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
横棒プロットを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
横棒グラフをコーンフラワーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
プログラムのファイルの名前	sys.argv[0]
ローングリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームの選択したカラムの欠損値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
赤い破線でリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
折れ線グラフをパールゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
実数の小数部を求める	math.modf(x)[0]
浮動小数点数を実数で割る	x / y
データを最大最小として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
半透明の実線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列を積極的に小文字にする	s.casefold()
データフレームのインデックスの名前をまとめて付け直す	df.rename(index={x: y})
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
標準入力から1行読む	sys.stdin.readline()
配列を四分位数でビニングする	pd.qcut(aArray, 4)
指定した列の値で集計し、それぞれの最大値を計算する	df.groupby('列A').max()
浮動小数点数を整数に変換する	int(x)
nが偶数か	n % 2 == 0
データフレームの選択したカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
ミディアムアクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
文字列をコロンで分割して列挙する	s.split(':')
英字を全部見る	string.ascii_letters
CSVファイルにインデックスを付けずデータフレームを出力する	df.to_csv('file.csv', index=None)
option: シーグリーン色を用いる	color = 'seagreen'
データフレームのNaNを平均値に指定する	df.fillna(df.mean())
n個に配列をビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
青い破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
オプションでファイルを出力にする	file = sys.open(filename, 'w')
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: オールドレース色を用いる	color = 'oldlace'
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
値を太字化する	f'\033[1m{value}\033[0m'
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
横棒グラフをプロットしてラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
グラフの補助目盛を有効にする	plt.minorticks_on()
あるカラムの標本分散	df['列A'].var(ddof=0)
ビンを設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
文字列の左側からタブを取り除く	s.lstrip('\t')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
分類結果の真陽性率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームの重複した行をマスクする	df.duplicated()
浮動小数点数のn乗の実数剰余を求める	pow(x, n, y)
option: ダークグレーを使用する	color = 'darkgrey'
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
ビスク色でヒストグラムを描画する	plt.hist(データ列, color='bisque')
黒いダイアモンドマーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
イテラブルの要素を全て集合に追加する	aSet.update(iterable)
データフレームのあるカラムが何日か知る	df['列A'].dt.day
データシリーズの時	ds.dt.hour
option: ダークゴールデンロッドを用いる	color = 'darkgoldenrod'
option: 配列のデータ型を指定する	dtype = bool
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
数値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
option: 色をゴールデンロッドにする	color = 'goldenrod'
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
両端キューをポップする	deq.pop()
ヒストグラムをディムグレー色を使って描画する	plt.hist(データ列, color='dimgray')
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
数式のパラメータに数式を代入する	e.subs(z, e2)
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
ヒストグラムの色をビスクにする	plt.hist(データ列, color='bisque')
プログラムの実行を正しく停止する	sys.exit(0)
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
ミスティローズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームがどの程度正規分布から歪んでいるか見る	df.kurt()
option: グラフの色をライトゴールドロディイエローに指定する	color = 'lightgoldenrodyellow'
option: 切片を計算しない	fit_intercept = False
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
ダークグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
実線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
リストとリストの散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームをグループ化しある列の要約統計量を算出する	df.groupby('列A').describe()['列B']
リストとリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ファイルを全て読み込む	f.read()
実数を十六進文字列にする	x.hex()
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
赤いバツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの指定したカラムの記述統計量	df['列A'].describe()
棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
折れ線グラフの印を△にする	plt.plot(データ列x, データ列y, marker='^')
データ列を折れ線グラフとして描画する	plt.plot(データ列x, データ列y)
黒いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
指定した列で集計し、標準偏差を算出する	df.groupby('列A').std()
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
濃いシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
多次元データをMSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
リストを昇順に並べ変える	sorted(aList, reverse=True)
縦棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ダークオリーブグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームの指定したカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
データフレームの指定したカラムを十の位で四捨五入して整数型にする	df['列A'].round(-1).astype(int)
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
リストとイテラブルの散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのあるカラムは何年か見る	df['列A'].dt.year
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
リストの要素を並べる	sorted(aList)
ランダムに100行をデータフレームから取り出す	df.sample(100)
option: グラフの色をマゼンタに設定する	color = 'magenta'
データフレームのある列を百の位で丸める	df['列A'].round(-2)
空白で文字列を分割し、、文字列リストにする	s.split()
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
オブジェクトが文字列クラス	isinstance(obj, str)
表計算ファイルファイルでデータフレームを保存する	df.to_excel('file.xlsx')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
折れ線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
二つの列からグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
データフレームをグループ化し、各最小値を求める	df.groupby('列A').min()
回数を制限して文字列を置き換える	s.replace(sub, newsub, n)
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
option: アクアマリン色を使う	color = 'aquamarine'
option: 星印を描画する	marker = '*'
ヒストグラムの色をスプリンググリーンにする	plt.hist(データ列, color='springgreen')
ヒストグラムの線種を一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
ふたつの列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
日付と時間からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
ある列の値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
option: 印を大バツに変更する	marker = 'X'
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
浮動小数点数のn乗を求める	pow(x, n)
リストとリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
文字列が空白文字か	s.isspace()
ヒストグラムをダークターコイズ色を使って描画する	plt.hist(データ列, color='darkturquoise')
文字列が組の要素か	element in aTuple
マップに辞書の項目を更新する	aDict.update(aDict2)
赤い大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームの文字列を欠損値にする	df.replace(値, np.nan)
線グラフの色をカデットブルーにする	plt.plot(データ列x, データ列y, color='cadetblue')
ある列によってデータフレームをグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
option: 丸印を加える	marker = 'o'
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
横棒グラフをミディアムスレートブルー色を使って描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
日付時刻データの分	aDatetime.minute
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
指定した列によってデータフレームを集約して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: マーカーをダイアモンドに変える	marker = 'D'
両端キューの中に要素が存在するか調べる	element in deq
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
データシリーズはどの程度、分散しているか見る	ds.var()
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
トマト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図をライトイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
分割数nで列をビン分割する	pd.cut(ds, n)
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データシリーズは何分か知る	ds.dt.minute
組の最後のn要素を取り除く	aTuple[:-n]
ブースティングを使って回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
文字列が全て小文字かどうか調べる	s.islower()
データシリーズの中にがあるかどうか調べる	ds.isin([value])
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
データフレームをある列でグループ化し、、それぞれのグループ毎の件数を知る	df.groupby('列A').size()
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
文字列を空白で区切って、文字列リストに変換する	s.split()
option: ８ビット整数型を用いる	dtype = np.int8
文字列は全て印字できるかどうか調べる	s.isprintable()
データフレームのあるカラムの月	df['列A'].dt.month
option: パープル色を用いる	color = 'purple'
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
変数を下線付きにする	f'\033[4m{value}\033[0m'
文字列は全て識別子名か調べる	s.isidentifier()
文字列中に部分文字列が含まれないかどうか調べる	sub not in s
既存の行列を元にして全要素が1の配列	np.ones_like(aArray)
セットの全ての要素が別のセットに含まれる	aSet.issubset(aSet2)
異なる列をキーにして２つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
縦棒プロットを描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
ダークグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
リストの最後からn番目以前の部分を取り出す	aList[:-n]
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
リストを白色でプリントする	print(f'\033[37m{value}\033[0m')
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
タイムスタンプデータは何年か知る	aDatetime.year
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
日付データをISO8601書式の文字列に変換する	aDate.isoformat()
直前の値でデータフレームのある列の欠損値を補う	df['列A'].fillna(method='ffill')
データフレームの選択した列の分位数	df[['列A', '列B']].quantile(パーセント/100)
ベクトルのユニークな要素とその個数を計算する	u, counts = np.unique(aArray, return_counts=True)
ヒストグラムをライトグレー色を使って描画する	plt.hist(データ列, color='lightgray')
配列の幾何平均を算出する	scipy.stats.gmean(配列)
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
グリッド線	plt.grid(alpha=0.5)
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
四分位数ごとにデータ列をビニングする	pd.qcut(ds, 4)
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
数値を紫色でプリントできる文字列にする	f'\033[35m{value}\033[0m'
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームの中に文字列と文字列があるか	df.isin([value, value2])
データフレームの行がnの行を抽出する	df.loc[n]
option: ブール型を使用する	dtype = np.int32
実数の二進対数を求める	math.log2(x)
カテゴリ列で色付けして、にバイオリン図でデータフレームを描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを関数の値によって集計する	df.groupby(関数)
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
標準入力から1文字読む	sys.stdin.read(1)
文字列のケースを変換する	s.casefold()
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
カテゴリ列で色付けしてデータフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームの列の名前一覧を使う	df.columns
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームの分位数	df.quantile(パーセント/100)
データフレームの未入力値を第二四分位数に変更する	df.fillna(df.median())
二つのデータフレームを列名を指定して外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
option: 紺色を用いる	color = 'darkblue'
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
データシリーズの曜日名を見る	ds.dt.weekday_name
綺麗なグラフを使う準備をする	import seaborn as sns
データフレームのある列の値がxより小さい行を抽出する	df[df['列A'] < x]
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
リストとリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームの選択したカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
散布図の▲印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データフレームの選択したカラムの歪度	df[['列A', '列B']].kurt()
カウンタを辞書として更新する	aCounter.update(aDict)
散布図をオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='orange')
データフレームのある列を除く	df.drop('列A', axis=1, inplace=True)
グラフの描画で明るくカラーパレットを使用する	sns.set(pallete='bright')
データフレームの中のカラムを中央値で分割する	pd.qcut(df[col], 2)
オブジェクトがタプルに含まれないかどうか調べる	element not in aTuple
赤い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
配列とリストについての散布図にrgbの上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列の列ごとの平均を使う	np.mean(aArray, axis=0)
プラム色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
オブジェクトは数値か調べる	isinstance(obj, (int,float))
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
プロット中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
データシリーズの値が欠損値かどうか調べる	ds.isna()
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
複数の列を組み合わせてグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
逆順のデック	reversed(deq)
日付時刻データは日付時刻データより早いか	aDatetime < aDatetime2
ファイルを開いて]バイナリ書き込みストリームを求める	open(filepath, mode='wb')
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
イテラブルと数列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: 印の色を指定する	markerfacecolor = '#800080'
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
セットが空か確認する	len(aSet) == 0
ふたつの集合の和集合を使う	aSet.union(aSet2)
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
散布図でデータフレームを可視化して、カテゴリごとに色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
デピンク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームをグループ化し、それぞれの標準偏差を求める	df.groupby('列A').std()
両端キューの末尾から要素を取り出す	deq.pop()
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
折れ線グラフの星マーカーの色を変える	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
日付時刻データの曜日を使う	aDatetime.weekday()
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
データフレームの指定したカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
縦棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
option: 読み込まない列番号をnamesで指定する	skiprows = names
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: BOM付きを使う	encoding = 'utf_8_sig'
ヒストグラムの色をアイボリーに指定する	plt.hist(データ列, color='ivory')
option: 改行コードを旧Macに変更する	newline = '\r'
フォレストグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ロバストな線形回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
真紅色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ファイルからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームの数値を全部、小数点以下n桁で丸める	df.round(n)
データフレームを二つの列の値によってグループ化し、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
相関係数を使う	scipy.stats.pearsonr(数列, 数列2)
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
数列の推移を破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
青い点線として数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
折れ線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
スタック中の要素の数をカウントする	deq.count(element)
表計算からデータフレームを読み込む	pd.read_excel('file.xlsx')
データフレームのあるカラムにおいてどの値が頻出か確認する	df['列A'].mode()
棒グラフをディープスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
実数の絶対値	math.fabs(x)
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
option: 線の幅を3.0ポイントに指定する	linewidth = 3.0
nからn2までの整数リスト	list(range(n, n2+1))
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームから同じ内容の行をインプレイスでドロップする	df.drop_duplicates(inplace=True)
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
option: マーカーをポイントに指定する	marker = '.'
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='turquoise')
option: 色をミディアムブルーに設定する	color = 'mediumblue'
ファイルからフォルダ名を見る	os.path.dirname(filepath)
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
整数nを八進数文字列にする	oct(n)[2:]
ファイルからのストリームを使う	open(filepath)
シーケンスから1個ランダムに選ぶ	random.choice(iterable)
文字列を大文字・小文字を無視してパターンで区切る	re.split(pattern, s, flags=re.IGNORECASE)
整数nを十六進表現に変換する	hex(n)
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
データフレームの指定したカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
option: バリーウッドを使う	color = 'burlywood'
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
双方向キューをクリアする	deq.clear()
ふたつの列を組み合わせてグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
散布図に黒い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
整数個からk個取り出したときの順列の総数を求める	math.perm(n, k)
線グラフをバリーウッド色を用いて描画する	plt.plot(データ列x, データ列y, color='burlywood')
n個に等間隔で配列を分割する	pd.cut(aArray, n)
カウンタの全数	aCounter.total()
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
日付時刻データが月曜日	aDatetime.weekday() == 0
option: グラフの色をシエナに設定する	color = 'sienna'
クリムゾン色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
文字列を全て小文字に変換する	s.casefold()
折れ線グラフを色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
グラフで用いるフォントを指定する	sns.set(font=フォント名)
データフレームの列間の相関行列を一度に求める	df.corr()
option: ダーク・スラテグレーに色を設定する	color = 'darkslategrey'
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
赤い▲マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムの色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
日付データの曜日を整数で求める	aDate.weekday()
プロットの色をパステル調にする	sns.set(pallete='pastel')
rgbの▼マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図に青い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
散布図をライム色を使って描画する	plt.scatter(データ列x, データ列y, color='lime')
ディープスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: シアン色を用いる	color = 'cyan'
データフレームの先頭100行を取り出す	df.head(100)
option: 文字コードをBOM付きにセットする	encoding = 'utf_8_sig'
nを十六進表現に変換する	hex(n)
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
option: サンディーブラウン色を使用する	color = 'sandybrown'
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
ライトスチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
データフレームの指定した列の欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
黒いポイントマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
option: グラフの色をミントクリームに指定する	color = 'mintcream'
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: 印の大きさを設定する	markersize = 2.0
散布図の右三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
データフレームを1000の位で丸める	df.round(-3)
リストを円グラフにする	plt.pie(データ列, startangle=90)
文字列の中の正規表現によるマッチを使う	re.findall(pattern, s)
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
表データのあるカラムの日を見る	df['列A'].dt.day
カテゴリ別でグループ化してデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームを関数でグループ化し、要約統計量を求める	df.groupby(関数).describe()
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームを各列毎にグループ化し、、文字列というグループの大きさを計算する	df.groupby(column).size()[s]
データフレームの列の名前を変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
多次元データを主成分分析として濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームを二つのカラムをキーにして小さい順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
真	True
データフレームの末尾n行を抽出する	df.tail(n)
組の中の一番大きい値	max(aTuple)
縦棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
配列にはいくつ要素があるか調べる	aArray.size
プロットのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ヒストグラムをダークゴールデンロッド色を用いて描画する	plt.hist(データ列, color='darkgoldenrod')
文字列が漢字か確認する	('\u4E00' <= ch <= '\u9FD0')
空白で文字列を区切って、文字列リストに変換する	s.split()
タイムスタンプデータとタイムスタンプデータの時間差	aDatetime - aDatetime2
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
イテラブルから双方向キューを用意する	collections.deque(iterable)
option: 色をオレンジに変更する	color = 'orange'
option: オーキッド色を用いる	color = 'orchid'
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームをある列のカテゴリを用いて集約してグループ名で取り出す	df.groupby('列A').get_group(グループ名)
折れ線グラフに左三角印を加える	plt.plot(データ列x, データ列y, marker='<')
1行から２つの浮動小数数値を読む	A, B = map(float, input().split())
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
option: 耐火レンガ色を使用する	color = 'firebrick'
ピーチパフ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
タプルの最後を使う	aTuple[-1]
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
算術計算ライブラリをインポートする	import math
折れ線グラフの色をフローラルホワイトに指定する	plt.plot(データ列x, データ列y, color='floralwhite')
option: NaNを無視しない	nan_policy = 'propagate'
配列のピアソンの相関係数を見る	scipy.stats.pearsonr(配列, 配列2)
今日が日曜日か確認する	datetime.datetime.today().weekday() == 6
集合をリストにする	list(aSet)
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームからカテゴリデータの列名リストを求める	df.select_dtypes('object').columns
まとめてデータフレームのある列の値を正規表現patternで置き換える	df['列A'].replace(pattern, repl, regex=True)
折れ線グラフを一点鎖線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
配列と数列の散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
辞書のキーの値	aDict[key]
折れ線グラフを濃いシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkcyan')
横棒グラフをシーグリーン色として描画する	plt.barh(データ列x, データ列y, color='seagreen')
小さい順に指定したカラムによってデータフレームをソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
データをL2ノルムとして正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
部分文字列かどうか	sub in s
リストをビニングする	pd.cut(aList, aList)
データフレームのあるカラムの母標準偏差を求める	df['列A'].std(ddof=0)
セットの全要素が別のセットに含まれるか	aSet.issubset(aSet2)
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ヒストグラムを一点鎖線で描く	plt.hist(データ列, linestyle='dashbot')
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
ある列の値がx以下の行を抽出する	df[df['列A'] <= x]
スピアマンの順位相関係数を計算する	scipy.stats.spearmanr(配列, 配列2)
組をミュータブルにする	list(aTuple)
指定したカラムの統計量をまとめて調べる	df['列A'].describe()
本日のタイムスタンプ	datetime.datetime.now()
デックのstart〜endの値	collections.deque(itertools.islice(deq, start, end))
文字列中にひとつでも非英数字がある	any(not c.isalnum() for c in s)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
正則化付き重回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
数値の因数分解を行う	sympy.factor(e)
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
コーンフラワーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
集合に要素を追加する	aSet.add(element)
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
タプルのn番目以降の要素を得る	aTuple[n:]
プログラムの実行を適切に終了する	sys.exit(0)
データフレームをある列のカテゴリでグループ化し、、それぞれのグループ毎の件数を知る	df.groupby('列A').size()
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームのある列の中にいくつがあるか数える	df['列A'].isin([value]).sum()
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
option: フォントの色をダークグレーに設定する	color = 'darkgrey'
nとn2の積を求める	n * n2
カンマ区切りのファイルをカラムの名前を指定せずロードする	pd.read_csv('file.csv', header=None)
リストと配列の散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ファイルのストリームを使う	open(filepath)
表計算ファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
両端キューの先頭から要素を取り出す	deq.popleft()
データフレームの指定した列の標本標準偏差	df['列A'].std(ddof=1)
文字列をシンボルにして変数にする	z = sympy.Symbol(s)
nがn2よりも小さいか調べる	n < n2
ファイルを書き込みモードで開いて]fとする	f = open(filepath, mode='w')
最小値でデータフレームのNaNを埋める	df.fillna(df.min())
データフレームのデータを条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
option: スプリンググリーン色を使う	color = 'springgreen'
文字列を記号化して、パラメータにする	z = sympy.Symbol(s)
ファイルからストリームを使う	open(filepath)
データフレームの未入力値を最大値に指定する	df.fillna(df.max())
ダークゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
配列の次元数	aArray.ndim
データ列と数列について散布図をプロットして、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
多次元データを主成分分析を使って濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
option: データ型として８ビット整数型を使う	dtype = np.int8
実数が負の数か確認する	x < 0
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
タプルの先頭を取り除く	aTuple[1:]
ファイルパスを書き込みできるように文字コードtextで開く]	open(filepath, mode='w', encoding=text)
ひとつでも非小文字が文字列中にあるかどうか調べる	any(not c.islower() for c in s)
散布図のダイアモンドマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフをアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='aquamarine')
横棒グラフをゴールド色を用いて描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームの列を散布図で図示する	sns.scatterplot(data=df, x='列名', y='列名')
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
eの乗数を求める	math.exp(x)
ある列の値がxより小さい行を取り出す	df[df['列A'] < x]
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
両端キューを列から作成する	collections.deque(iterable)
ケンドールの相関係数	scipy.stats.kendalltau(数列, 数列2)
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
折れ線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図に四角印を加える	plt.scatter(データ列x, データ列y, marker='s')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
データシリーズの月を見る	ds.dt.month
折れ線プロットの色をRGBを用いてする	plt.plot(データ列x, データ列y, color='#800080')
ファイルを改行なしで一行ずつ読む	f.readline()
列を文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
ファイルパスをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
データフレームの行名をまとめて変更する	df.rename(index={x: y})
データフレームのある列の不偏分散	df['列A'].var(ddof=1)
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データシリーズを十の位で丸めて、整数型にする	ds.round(-1).astype(int)
青紫色を用いてヒストグラムを描画する	plt.hist(データ列, color='violet')
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(配列, 'norm')
小麦色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
縦棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
今日のローカルなタイムスタンプ	datetime.datetime.today()
動作環境のエンコーディングを知る	sys.getdefaultencoding()
２つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
組合せを計算する	math.comb(n, k)
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
rgbの大バツマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストとリストについて散布図を描画し、、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
ビン数nとして等しい量になるように配列をビン分割する	pd.qcut(aArray, n)
散布図のダイアモンド印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの色をダークシアンにする	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフの色を青に変更する	plt.plot(データ列x, データ列y, color='blue')
組が少なくともひとつ真	any(aTuple)
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
ゼロ埋めされた行列を作成する	np.zeros(行数, 列数)
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
現在の分を使う	datetime.date.today().minute
option: グラフの色をペールグリーンに変更する	color = 'palegreen'
線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
線グラフの色をピンクに変更する	plt.plot(データ列x, データ列y, color='pink')
散布図を大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X')
フォレストグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='forestgreen')
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='teal')
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
現在のモジュールを	sys.modules[__name__]
列を等量でビン数nでビン分割する	pd.qcut(ds, n)
option: 色をライトブルーに変更する	color = 'lightblue'
散布図をハニーデュー色を使って描画する	plt.scatter(データ列x, データ列y, color='honeydew')
データフレームの欠損値をドロップし、みる	df.dropna()
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
option: グリーンを使う	color = 'green'
辞書からカウンタを作る	collections.Counter(aDict)
データフレームの指定した列を百の位で丸めて整数型にする	df['列A'].round(-2).astype(int)
リストのn番目からn2番目までの部分を取り出す	aList[n:n2]
option: ロイヤルブルーを用いる	color = 'royalblue'
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
黒い右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームのカラムを折れ線グラフで描画する	plt.plot(df[column], df[column])
黒い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
リストをnからナンバリングする	enumerate(aList, start=n)
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
option: シエナにグラフの色を設定する	color = 'sienna'
折れ線グラフをモカシン色を用いて描画する	plt.plot(データ列x, データ列y, color='moccasin')
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
書き込み用にUTF8を用いてファイルパスをオープンする]	open(filepath, mode='w', encoding='utf-8')
グリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
nが5の倍数	n % 5 == 0
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
配列と配列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
有理数モジュールを使う	import fractions
オールドレース色として散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
オブジェクトがリストに含まれるか調べる	element in aList
線グラフの色をダークターコイズにする	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
データフレームの選択した列の中にいくつ文字列があるか調べる	df[['列A', '列B']].isin([value]).sum()
標準入力から1行だけ改行なしで読み込む	sys.stdin.readline().rstrip()
データフレームのカラムを万の位で丸める	df['列A'].round(-4)
連番の行列の自動作成する	np.arange(開始値, 終了値, 等差)
凡例を加える	plt.legend(['凡例A', '凡例B'])
既存のファイルパスを追加できるようにEUCで開く]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
カラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
option: 先頭のカラムをインデックスに設定する	index_col = 0
スクリプトファイルのパスを使う	os.path.abspath(__file__)
事前に正規表現をコンパイルする	re.compile(pattern)
数値を積分する	sympy.integrate(e)
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
文字列のケースを入れ替える	s.swapcase()
インデックスによってデータフレーム全体を整列する	df.sort_index()
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
データ列の離れ具合をプロット化する	sns.residplot(x=データ列, y=データ列)
データフレームを並べ、行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
データフレームのカラムの25パーセンタイルを求める	df['列A'].quantile(0.25)
テンプレートをタプルで文字列整形する	formatText.format_map(aDict)
option: ベージュを使う	color = 'beige'
横棒グラフをオールドレース色を用いて描画する	plt.barh(データ列x, データ列y, color='oldlace')
クラスのサブクラス	issubclass(サブクラス, クラス)
option: ホワイトスモーク色を使用する	color = 'whitesmoke'
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
日付時刻データが日付時刻データより遅いか調べる	aDatetime > aDatetime2
実数のcos	math.cos(x)
タプル内の要素が少なくともひとつ真	any(aTuple)
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
二つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
データフレームの値をValueMapで一度に置き換える	df.replace(ValueMap)
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図をクロス印を使い、描画する	plt.scatter(データ列x, データ列y, marker='x')
散布図をシーグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='seagreen')
に箱ひげ図としてデータフレームの列を可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
最大値・最小値で乱数を得る	random.randint(最小値, 最大値)
データフレームの指定した列を1000の位で丸める	df['列A'].round(-3)
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
変数を黒色で表示する	print(f'\033[30m{value}\033[0m')
線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
データフレームの一部の列の中にいくつ文字列が存在するか数える	df[['列A', '列B']].isin([value]).sum()
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
option: 深紅を用いる	color = 'crimson'
指定した列のカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
配列とリストの散布図を描画してポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カンマ区切りのファイルからデータフレームを読む	pd.read_csv('file.csv', sep=',')
折れ線グラフの印をクロスにする	plt.plot(データ列x, データ列y, marker='x')
イテラブルを文字列リストに変換して、空白で結合する	' '.join(map(str, iterable))
データフレームの指定したカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
辞書に項目名ワード引数として追加する	aDict.update(**kwargs)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
ペアリストpairsからカウンタを新規生成する	collections.Counter(dict(pairs))
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
未初期化の配列を初期化する	np.empty(要素数, dtype=np.int)
データフレームの列のリスト	df.info()
日付データが日付データより前	aDate < aDate2
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
option: フォントの色をライムに設定する	color = 'lime'
配列は何次元か調べる	aArray.ndim
最初のコマンド引数	sys.argv[1]
CSVファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv('file.csv', index_col=n)
本日をタプルにする	datetime.datetime.today().timetuple()
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
二つの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
横軸だけ目盛り線	plt.grid(axis='x')
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ランダムにデータフレームから10行を重複ありでサンプリングする	df.sample(10, replace=True)
辞書のキーの一覧	aDict.keys()
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
組をナンバリングする	enumerate(aTuple)
option: グラフの色をコーンズシルクに指定する	color = 'cornsilk'
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
option: ダークシアグリーン色を使う	color = 'darkseagreen'
グラフの使途をポスターに設定する	sns.set(context='poster')
データフレームを表示するとき最大行数を変更する	pd.set_option('display.max_rows', n)
データフレームのカラムをヒストグラムで描画する	plt.hist(df[column])
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
option: Excelファイルシートの名前をする	sheet_name = ['A', 'B']
列の一意な値	df[col].unique()
線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
option: 最初の行をヘッダに設定する	header = 0
option: 配列のデータ型を指定する	dtype = np.int8
option: クロスマーカーを加える	marker = 'x'
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
カラムのNaNをxに増やす	df['列A'].fillna(x)
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
一方に含まれ、他方に含まれない集合を求める	aSet.difference(aSet2)
散布図を赤い右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
シアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
S-W検定を行う	scipy.stats.shapiro(df['列A'])
文字列はタプルの要素でないかどうか確認する	element not in aTuple
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
赤い実線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
データ列の離れ具合を見る	sns.residplot(x=データ列, y=データ列)
データフレームを使う	import pandas as pd
2次元タプルをフラット化する	sum(aTuple)
データフレームから100行サンプリングする	df.sample(100)
データフレームをグループ化し、ある列の要約統計量を求める	df.groupby('列A').describe()['列B']
折れ線グラフに星印を使用する	plt.plot(データ列x, データ列y, marker='*')
配列と数列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データ列とリストについての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームのNaNをメディアンに設定する	df.fillna(df.median())
nをn2で割った余りをnに代入する	n %= n2
パステル調に色をグラフの描画で使う	sns.set(pallete='pastel')
文字列がタプルに含まれないか調べる	element not in aTuple
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
縦棒グラフをホワイトスモーク色を使って描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
エラーなく辞書から項目名の値を見る	aDict.get(key, None)
ヒストグラムの色を耐火レンガにする	plt.hist(データ列, color='firebrick')
データフレームの指定したカラムを一万の位で丸める	df['列A'].round(-4)
rgbの右三角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストとリストの散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
散布図に右三角印を使用する	plt.scatter(データ列x, データ列y, marker='>')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
ファイルを追加用にオープンする]	open(filepath, mode='a')
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: グラフの線種を一点鎖線に設定する	linestyle = 'dashbot'
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データラベルをプロット中の(x,y)の場所に表示する	plt.legend(loc=(x, y))
折れ線プロットを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
リストを反転する	reversed(aList)
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
半透明の一点鎖線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
データフレームから型型の列のみ選択する	df.select_dtypes(ty)
ヒストグラムの色をカデットブルーにセットする	plt.hist(データ列, color='cadetblue')
乱数生成系列をnで初期化する	random.seed(n)
非数値データ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ひとつでも数字が文字列内に含まれる	any(c.isdigit() for c in s)
nの無限数列	itertools.repeat(n)
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
データシリーズのモード	ds.mode()
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
浮動小数点数の仮数	math.frexp(x)[0]
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
柱状図を３つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
整数nの八進数文字列	oct(n)[2:]
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
空の両端キュー	collections.deque()
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
カーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの色をターコイズにする	plt.plot(データ列x, データ列y, color='turquoise')
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
日付データの曜日を使う	aDate.weekday()
option: ゲインズボロを用いる	color = 'gainsboro'
変数を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
ヒストグラムの色をコーンズシルクにセットする	plt.hist(データ列, color='cornsilk')
散布図をバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='violet')
option: バイナリ書き込みモードを使う	mode = 'wb'
折れ線グラフをターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: シスルにフォントの色を変更する	color = 'thistle'
空のロバスト分類器を用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
nの各桁の総和	sum(map(int, str(n)))
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
データフレームの下10行を選ぶ	df.tail(10)
ヒートマップとして混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
カウンタからゼロカウントを取り出す	+aCounter
サポートベクターマシンとしてクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
部分文字列を文字列の終了位置まで探す	s.find(sub, 0, end)
データフレーム中の未入力値をドロップしてみる	df.dropna()
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
ヒストグラムをコーラル色を使って描画する	plt.hist(データ列, color='coral')
折れ線グラフの色をパープルにする	plt.plot(データ列x, データ列y, color='purple')
データシリーズを10の位で丸める	ds.round(-1)
混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列中にひとつでも非大文字があるか	any(not c.isupper() for c in s)
データフレームの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
option: ライムにフォントの色を指定する	color = 'lime'
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
文字列のn番目の文字を使う	s[n]
データフレームのある列の値がxより多い行を抽出する	df[df['列A'] > x]
日付時刻データが木曜日かどうか調べる	aDatetime.weekday() == 3
リストにリストを追加し、拡張する	aList.extend(aList2)
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
option: 色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ふたつのカラムを組み合わせてグループ化し、標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
折れ線グラフをグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='green')
辞書から項目名の値を得る	aDict.get(key)
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
折れ線グラフをダークオーキッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkorchid')
集合から全ての要素を消す	aSet.clear()
シアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
整数nを8進文字列にする	oct(n)[2:]
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
データフレームの指定した列の25パーセンタイルを求める	df['列A'].quantile(0.25)
ある列をドロップし、みる	df.drop('列A', axis=1)
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
アンティークホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
あるカラムの値が欠損値かテストする	df['列A'].isna()
データフレームの中の列をn個にビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
カウンタのユニークな項目をリストとして得る	list(aCounter)
データフレームの選択したカラムの欠損値を平均に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ファイルからの入力ストリームを求める	open(filepath)
option: グラフの線種を点線に設定する	linestyle = 'dotted'
データ列の折れ線グラフを描画し、カラーコードで色をする	plt.plot(データ列x, データ列y, color='#800080')
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
日付データと日付データの時間差は何分か知る	(aDate - aDate2).total_seconds()//60
配列のトリム平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
散布図をマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='magenta')
サポートベクター分類器を新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ヘッダを付けずデータフレームを保存する	df.to_csv('file.csv', header=None)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
日付データにn日を加える	aDate + datetime.timedelta(days=n)
配列の最頻値を算出する	mode, count = scipy.stats.mode(配列)
部分文字列が文字列の終了位置より前に含まれる	s.find(sub, 0, end) != -1
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
文字列中の部分文字列を新しい文字列に置換する	s.replace(sub, newsub)
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
3つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=1)
2つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
ベクトルの標準偏差	np.std(aArray)
option: グラフの色をインディゴに設定する	color = 'indigo'
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
リストの最後の要素を求める	aList[-1]
データフレームの先頭10行を見る	df.head(10)
値をデックにenqueueする	deq.appendleft(element)
二つの値をカンマで区切って表示する	print(value, value2, sep=',')
実数は有限	math.isfinite(x)
散布図の菱形印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
多次元データを主成分分析を用いて淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
スピアマンとしてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
縦棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームのカラムの平均の標準誤差を求める	scipy.stats.sem(df['列A'])
データフレームのあるカラムの文字列をNaNにする	df['列A'].replace(値, np.nan)
データフレームをある列によって昇順にソートする	df.sort_values(by='列A', ascending=True)
文字列を最後の部分文字列で二つに区切って、前半の文字列を求める	s.rpartition(sub)[0]
ヒストグラムをブランチドアーモンド色として描画する	plt.hist(データ列, color='blanchedalmond')
棒グラフの色を変更する	plt.bar(ラベル列, データ列, color=rgb)
黒い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
データフレームからランダムに10行を取り出す	df.sample(10)
線形回帰モデルの回帰変数を求める	model.coef_
行列を転置する	aArray.T
ふたつの集合が集合と互いに素かどうか	aSet.isdisjoint(aSet2)
データフレームを降順で行によって並べる	df.sort_index(ascending=False)
ある列の値がxに等しく、かつ別の列の値がyに等しいデータを選択する	df[(df['列A'] == x) & (df['列B'] == y)]
データフレームの選択したカラムのNaNをxで埋める	df[['列A', '列B']].fillna(x)
n個に配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
自然数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
タプルを引数として展開して表示する	print(*aTuple, sep=',')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
要素を両端キューの最初に追加する	deq.appendleft(element)
棒グラフをパウダーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='powderblue')
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
イテラブルのコンビネーション	itertools.combinations(iterable, n)
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
nが2で割り切れないか判定する	n % 2 == 1
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
データフレームの欠損値を直後の値で補う	df.fillna(method='bfill')
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
両端キューから最初の文字列を取り除く	deq.remove(element)
行列をシーケンスから作る	np.array(iterable)
折れ線グラフの色をアリスブルーに指定する	plt.plot(データ列x, データ列y, color='aliceblue')
変数を定義する	x = n
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ファイルを書き込み用に開く]	open(filepath, mode='w')
データフレームをグループ化し平均値を求める	df.groupby('列A').mean()
小数点数の逆正弦を算出する	math.asin(x)
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
データ列の出現頻度を作図する	plt.hist(データ列)
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
数列間のスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
リスト内の要素は全て真かどうか	all(aList)
nのバイト長を調べる	(n.bit_length() + 7) // 8
データフレームをグループ化しある列に対し最大値を求める	df.groupby('列A')['列B'].max()
淡く色をグラフの描画で使う	sns.set(pallete='muted')
option: グラフの色をスレートブルーに変更する	color = 'slateblue'
文字列を空白で区切る	s.split()
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
文字列を評価する	eval(s)
コマンドの第一引数を確認する	sys.argv[1]
折れ線グラフの色をダークバイオレットに変更する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列を末尾から空白で区切る	s.rsplit()
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフに丸印を用いる	plt.plot(データ列x, データ列y, marker='o')
積率相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
画面にプロットの目的を設定する	sns.set(context='notebook')
リストの個数	len(aList)
フィシャー流の尖度を計算する	scipy.stats.kurtosis(配列, fisher=True, bias=False)
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
タプルの末尾を除く	aTuple[:-1]
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
nがn2の倍数かどうか判定する	n % n2 == 0
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
データフレームの中に文字列と文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
散布図にポイントマーカーを使用する	plt.scatter(データ列x, データ列y, marker='.')
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
両端キューのn番目を見る	deq[n]
データシリーズの記述統計量	ds.describe()
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
データ列のエポック秒を日付データにする	pd.to_datetime(ds, unit='s', utc=True)
データフレームのカラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
データフレームの一部のカラムを1000の位で丸めて、整数にする	df[['列A', '列B']].round(-3).astype(int)
文字列をパディングする	s.zfill(文字列幅)
二つの文字列を順にプリントする	print(value, value2)
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: EUCを使う	encoding = 'euc_jp'
点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
縦棒グラフをモカシン色として描画する	plt.bar(データ列x, データ列y, color='moccasin')
紺にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
option: フォントの色をピーチパフに設定する	color = 'peachpuff'
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ダークシアグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: グリーンにグラフの色を設定する	color = 'green'
配列の累積積	np.cumprod(aArray)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
ふたつの集合の差集合を求める	aSet.difference(aSet2)
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
option: 書き込みモードを使用する	mode = 'w'
数式を数値に変換する	float(e)
option: アスキー文字に限定する	flag = re.ASCII
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームのカテゴリデータをベクトルに変換する	pd.get_dummies(df)
フォレストグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
既存の行列を元にして全要素が初期値の行列	np.full_like(aArray, 初期値)
データフレームの選択したカラムの最頻値を算出する	df[['列A', '列B']].mode()
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
散布図をサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='salmon')
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
正規分布のパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
CSVをデータフレームとして読み込む	pd.read_csv('file.csv', sep=',')
指定したカラムの歪度	df['列A'].kurt()
折れ線グラフの色をディープスカイブルーにセットする	plt.plot(データ列x, データ列y, color='deepskyblue')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
折れ線グラフでデータ列を可視化する	plt.plot(データ列x, データ列y)
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
option: レモンシフォンを使う	color = 'lemonchiffon'
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
赤色でリストをプリントする	print(f'\033[31m{value}\033[0m')
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームを2つの列の値でグループ化し、要約統計量を算出する	df.groupby(['列A', '列B']).describe()
平方根	math.sqrt(x)
option: フォントの色をインディゴにセットする	color = 'indigo'
データ列を箱ひげ図で描く	plt.boxplot(データ列)
文字列が片仮名かテストする	('ァ' <= ch <= 'ン')
配列とリストの散布図を描画し、、マーカーをダイアモンドにセットする	plt.plot(データ列x, データ列y, marker='D')
行列計算をする	import numpy as np
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
行列演算を行う	import numpy as np
データフレームの選択したカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
option: エンコーディングをUTF8に変更する	encoding = 'utf-8'
option: 文字列を分割記号で使用する	sep = s
データフレームとして表計算ファイルから複数のシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
横棒グラフをダークターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
実数を実数で割って、切り捨てる	x // y
改行を使う	'\n'
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
パーセプトロンを用いて回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ヒストグラムの色を青緑にする	plt.hist(データ列, color='teal')
回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
ミディアムスプリンググリーンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumspringgreen')
option: フォントの色をオールドレースに設定する	color = 'oldlace'
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
カウンタ間で和集合演算する	aCounter | aCounter2
xを文字列に変換してファイルに書き込む	f.write(str(x))
回帰分析をランダム性を追加したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
ヒストグラムの色をレベッカパープルにする	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
xの絶対値を計算する	abs(x)
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
変数について数式の積分を行う	sympy.integrate(e, z)
改行する	print()
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
画面用にグラフを指定する	sns.set(context='notebook')
散布図をダークカーキ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
変数が無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, oo)
線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
文字列を最後の部分文字列で二分し、前半の文字列を求める	s.rpartition(sub)[0]
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
nのバイト長を確認する	(n.bit_length() + 7) // 8
円グラフの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()
データ列の折れ線プロットを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
タイムスタンプデータの日付	aDatetime.date()
データフレームの分散を計算する	df.var()
ベクトルの標準偏差を算出する	np.std(aArray)
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
データシリーズの欠損値を最小値で埋める	ds.fillna(ds.min())
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
枠なしのデータラベルを描画する	plt.legend(frameon=False)
指定したカラムの不偏分散	df['列A'].var(ddof=1)
オブジェクトにフィールドが存在する	hasattr(obj, プロパティ名)
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
辞書に辞書の項目を加えて、更新する	aDict.update(aDict2)
リストを四分位数ごとにビンニングする	pd.qcut(aList, 4)
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: フクシア色を使う	color = 'fuchsia'
ヒストグラムを一点鎖線を用いて描く	plt.hist(データ列, linestyle='dashbot')
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
データシリーズの中にいくつ欠損値があるかカウントする	ds.isna().sum()
ある列の値がxに等しくないデータを抽出する	df[df['列A'] != x]
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
Pythonのバージョン	sys.version
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
散布図をポイントマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='.')
プラットホームがLinuxかどうか調べる	sys.platform.startswith('linux')
データフレームの指定したカラムの未入力値をその中央値で埋める	df['列A'].fillna(df['列A'].median())
折れ線グラフのバツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
データフレームの指定したカラムの標準偏差	df['列A'].std()
三つのデータフレームを縦方向につなぐ	pd.concat([df, df2, df3], axis=0)
データフレームのあるカラムの値がx以上の行を抽出する	df[df['列A'] >= x]
両端キューの要素をインプレースに反転する	deq.reverse()
文字列を大文字・小文字を無視してパターンで分ける	re.split(pattern, s, flags=re.IGNORECASE)
データフレームのグループ化した散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列中に部分文字列があるかどうかテストする	sub in s
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
行列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
クリムゾン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
三2ビット整数型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int16)
option: 配列のデータ型を指定する	dtype = np.uint8
辞書をコピーする	dict(aDict)
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
イテラブルの各要素に対してpredicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: フォントの色をパレットトルコイズに設定する	color = 'paleturquoise'
横棒グラフをミディアムターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
ゼロ埋めされた行列	np.zeros(要素数)
リストとリストについて散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
辞書のキー一覧	list(aDict)
辞書の項目数を得る	len(aDict)
散布図をフローラルホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
部分文字列が文字列中にないか調べる	sub not in s
クリムゾン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
ディムグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
ミディアムターコイズにヒストグラムの色をする	plt.hist(データ列, color='mediumturquoise')
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
データフレームの中の列をビン数nで分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの色をサーモンに変更する	plt.hist(データ列, color='salmon')
列を累積する	itertools.accumulate(iterable, operator.mul)
ダークゴールデンロッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
option: トマト色を使う	color = 'tomato'
範囲から配列	np.linspace(最小値, 最大値, 要素数)
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
リストとリストについての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
カウンタのKトップをリストとして得る	aCounter.most_common(k)
行列のユニークな要素を求める	np.unique(aArray)
option: ディムグレー色を使う	color = 'dimgrey'
カラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
リッジ回帰とロッソ回帰のハイブリットモデルを準備する	model = sklearn.linear_model.ElasticNet()
データフレームの全カラムを散布図でグラフ化する	sns.pairplot(df)
線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ミディアムパープルにヒストグラムの色を変更する	plt.hist(データ列, color='mediumpurple')
値を水色でプリントできる文字列にする	f'\033[36m{value}\033[0m'
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
散布図の右三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
datetime64型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ヒストグラムをティール色を用いて描画する	plt.hist(データ列, color='teal')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
文字コードtextで書き込み用にファイルパスを開く]	open(filepath, mode='w', encoding=text)
二点間のユークリッド距離	math.dist(point, point2)
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
nとkのコンビネーションを求める	math.comb(n, k)
データシリーズの未入力値を最小値に設定する	ds.fillna(ds.min())
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
ダークグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkgreen')
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: 色をパウダーブルーに設定する	color = 'powderblue'
ファイルから1文字読む	f.read(1)
散布図の左三角印を赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
キューの順序を右にn個分回転させる	deq.rotate(n)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
データフレームが重複しているかどうか調べる	df.duplicated()
option: ゴールドを使用する	color = 'gold'
配列と配列について散布図を描画して下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
マッピングを並べ直してJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
データフレームから型リストで指定したデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
データシリーズの中にと日付データがあるかどうか調べる	ds.isin([value, value2])
配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ハイパボリック・サインの逆数	math.asinh(x)
実数のn乗	pow(x, n)
数値の符号を同じにする	math.copysign(x, x2)
変数を赤色で表示する	print(f'\033[31m{value}\033[0m')
表計算ファイルからシートの名前を指定してデータフレームをロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームの未入力値を後の行の値に増やす	df.fillna(method='bfill')
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの指定したカラムを小数点以下n桁で丸める	df['列A'].round(n)
option: やわらかい青色を使う	color = 'cornflowerblue'
rgbの▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
双方向キューが空かどうか調べる	len(deq) == 0
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
option: ブラックを用いる	color = 'black'
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
カウンタ同士でインターセクションを求める	aCounter & aCounter2
行列の行ごとの最小値	np.min(aArray, axis=1)
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
双方向キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
折れ線グラフをライトイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列の先頭でパターンにASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
option: フォントの色をフクシアに指定する	color = 'fuchsia'
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
赤い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ある列のカテゴリごとの標準偏差	df.groupby('列A').std()
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategray')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
日付時刻データと日付時刻データの時間差を求める	aDatetime - aDatetime2
真紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
散布図をダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
バイナリ対数	math.log2(x)
option: ロイヤルブルーにグラフの色をする	color = 'royalblue'
データフレームの選択したカラムの統計量	df[['列A', '列B']].describe()
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図をベージュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='beige')
データフレームの一部のカラムの中にいくつがあるか数える	df[['列A', '列B']].isin([value]).sum()
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: ディムグレーに色を変更する	color = 'dimgrey'
変数を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
文字列を改行で区切り、文字列リストにする	s.splitlines()
配列の変遷を色付きの破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: サーモン色を使用する	color = 'salmon'
二進数文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
二つの列によってデータフレームをグループ化してグループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
実線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
日付データにn分を足す	aDate + datetime.timedelta(minutes=n)
グリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
無限に数え上げるする	itertools.count()
ヒストグラムの色をベージュに指定する	plt.hist(データ列, color='beige')
option: グラフの線の種類を破線に変更する	linestyle = 'dashed'
ヒストグラムの色をライムに変更する	plt.hist(データ列, color='lime')
文字列を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
option: ダークバイオレットを使う	color = 'darkviolet'
折れ線グラフの色をスカイブルーにする	plt.plot(データ列x, データ列y, color='skyblue')
ファイルをバイナリモードで開く]	open(filepath, mode='rb')
箱ひげ図をプロットして、平均値を加える	plt.boxplot(データ列, showmeans=True)
データシリーズの標本標準偏差を求める	ds.std(ddof=1)
ミントクリーム色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
リストのn番目からn2番目までを得る	aList[n:n2]
実数のn乗	x ** n
nが2で割り切れないか調べる	n % 2 == 1
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategrey')
十六進数字を全部使う	string.hexdigits
指定した値を用いてデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
列名を指定してデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
option: 色をトマトにする	color = 'tomato'
ある列の文字列に部分文字列がない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
変数を青色でプリントする	print(f'\033[34m{value}\033[0m')
数列とデータ列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
数値のパラメータを数式で置き換える	e.subs(z, e2)
データシリーズを千の位で丸めて、整数にする	ds.round(-3).astype(int)
折れ線グラフを四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームの選択したカラムの中にいくつ文字列が存在するか数える	df[['列A', '列B']].isin([value]).sum()
ある列の値がxより大きく、yより小さいデータを抽出する	df[(x < df['列A']) & (df['列A'] < y)]
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームを散布図で描画して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: ライトスレイグレーを用いる	color = 'lightslategray'
折れ線グラフのダイアモンド印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームを書き出す	df.to_csv('file.csv')
データフレームの選択したカラムの欠損値を直前の値で補完する	df[['列A', '列B']].fillna(method='ffill')
option: ▽マーカーを使う	marker = 'v'
線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの指定した列の値をValueMapでまとめて置換する	df['列A'].replace(ValueMap)
データフレームを指定した列によって降順に破壊的に整列する	df.sort_values(by='列A', ascending=False, inplace=True)
データフレームの一部のカラムの中にある文字列と日付データの個数を数える	df[['列A', '列B']].isin([value, value2]).sum()
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
データフレームの形状	df.shape
棒グラフをラベンダー色を用いて描画する	plt.bar(データ列x, データ列y, color='lavender')
nを8進リテラルに変換する	oct(n)
オブジェクトはリストかタプルか	isinstance(obj, (list)
データフレームの欠損値が含まれる箇所を色付けする	df.style.highlight_null()
実数に実数を加算する	x + y
option: ライトシアンにフォントの色を設定する	color = 'lightcyan'
タプルの長さを制限する	collections.deque(iterable, maxlen=n)
データフレームが重複しているか調べる	df.duplicated()
散布図の大バツマーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
実数の正弦	math.sin(x)
縦棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
あるカラムの値を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
option: 青を用いる	color = 'blue'
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
n個にリストを等量でビン分割する	pd.qcut(aList, n)
散布図の丸印を青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: シルバーにフォントの色を設定する	color = 'silver'
データフレームの一部のカラムの標本分散を求める	df[['列A', '列B']].var(ddof=0)
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
既存の行列をベースにして全要素が1の配列を初期化する	np.ones_like(aArray)
リストをy軸リストを横軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
nの二進数文字列	bin(n)[2:]
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
浮動小数点数の双曲線正接	math.tanh(x)
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
ヒストグラムをビン数を設定して描く	plt.hist(データ列, bins=区関数)
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
入力から2つの文字列を読む	A, B = map(str, input().split())
option: 印を▽に指定する	marker = 'v'
option: ライトイエローを用いる	color = 'lightyellow'
ある列の値毎の合計を計算する	df.groupby('列A').sum()
文字列は全て数値	s.isnumeric()
プログラムの実行を異常終了する	sys.exit(1)
列をカウンタに変換する	collections.Counter(iterable)
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
ニューラルネットとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ヒストグラムの色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
ファイルをBOM付きを用いてオープンする]	open(filepath, encoding='utf_8_sig')
本日が何月か知る	datetime.datetime.today().month
縦棒グラフをダークシアン色として描画する	plt.bar(データ列x, データ列y, color='darkcyan')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列を正規表現で分ける	re.split(pattern, s)
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
折れ線グラフの色をリネンにセットする	plt.plot(データ列x, データ列y, color='linen')
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
文字列の左側から空白を除去する	s.lstrip(' ')
タイムスタンプデータは何時か知る	aDatetime.hour
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
option: タブを区切り記号で使用する	sep = '\t'
文字列リストを連結して一つの文字列にする	''.join(aStringList)
文字列を部分文字列で分割したときの残りの文字列	s.partition(sub)[-1]
配列の差を使う	aArray - aArray2
グラフの目的をポスターに設定する	sns.set(context='poster')
ヒートマップでクラス分類の予測精度を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
イテラブルとイテラブルについて散布図をプロットして、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
データ列をn個に等間隔でビン分割する	pd.cut(ds, n)
nの二進数表現を求める	bin(n)
リストとイテラブルの散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
線グラフを青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ファイルパスのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
option: グラフの色をリネンに設定する	color = 'linen'
折れ線グラフの色をデピンクに指定する	plt.plot(データ列x, データ列y, color='deeppink')
全ての句読点文字	string.punctuation
option: 色をロージーブラウンに指定する	color = 'rosybrown'
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
行列の逆行列	np.linalg.inv(aArray)
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データシリーズの曜日名を使う	ds.dt.weekday_name
実数の天井数	math.ceil(x)
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
本日をタプルに変換する	datetime.datetime.today().timetuple()
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
ターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='turquoise')
タプルの全エントリを消去する	aDict.clear()
データフレームの指定したカラムのNaNをその中央値で置換する	df['列A'].fillna(df['列A'].median())
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
数値の部分分数化する	sympy.apart(e)
カラムの調和平均を算出する	scipy.stats.hmean(df['列A'])
辞書からカウンタを用意する	collections.Counter(aDict)
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
パウダーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='powderblue')
暗い赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
option: グラフの色をスノーに変更する	color = 'snow'
option: ３二ビット整数型を使う	dtype = np.int16
表データの先頭5行を抽出する	df.head(5)
縦棒グラフをバリーウッド色を使って描画する	plt.bar(データ列x, データ列y, color='burlywood')
線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
二次元リストをフラット化する	sum(aList)
option: 色をゴールデンロッドに変更する	color = 'goldenrod'
リストと配列について散布図を描いて、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
配列とリストの散布図をプロットし、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
複素数	complex(x, y)
グラフを明るくする	sns.set(pallete='bright')
option: ハニーデュー色を用いる	color = 'honeydew'
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
ハローワールドとプリントする	print('Hello World')
縦棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
書き込み用にファイルをSJISを用いてオープンする]	open(filepath, mode='w', encoding='shift_jis')
カテゴリでグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
nがn2以上	n >= n2
配列の形状を求める	aArray.shape
データフレームのカラム間の相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
year年の日付	datetime.date(year=year, month=1, day=1)
option: ミディアムターコイズを用いる	color = 'mediumturquoise'
nプラスn2	n + n2
改行せずに２つの値をプリントする	print(value, value2, end='')
ひとつでも非小文字が文字列中に含まれるかどうか	any(not c.islower() for c in s)
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: ティールを用いる	color = 'teal'
列から多重集合を作る	collections.Counter(iterable)
茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
option: レモンシフォンにグラフの色を変更する	color = 'lemonchiffon'
データフレームを表示するとき、列数を変更する	pd.set_option('display.max_columns', n)
データフレームのインデックス名を全て付け直す	df.rename(index={x: y})
データシリーズの曜日の名前	ds.dt.weekday_name
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
綺麗なグラフを使用する準備をする	import seaborn as sns
パレットを明るくする	sns.set(pallete='bright')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
整数nの2進数文字列	bin(n)[2:]
イテラブルから両端キューを作成する	collections.deque(iterable)
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
データシリーズの文字列を未入力値に変換する	ds.replace(値, np.nan)
option: ダークスレートブルー色を使う	color = 'darkslateblue'
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
ファイルパスからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
実数の常用対数	math.log10(x)
正規分布を用いて乱数を算出する	random.normalvariate(mu=0.5, sigma=0.2)
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
データフレームを関数によってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
データフレームの指定した列のパーセンタイル	df['列A'].quantile(パーセント/100)
部分文字列を文字列の先頭から除く	s.removeprefix(sub)
option: ドジャーブルー色を使う	color = 'dodgerblue'
赤い一点鎖線を使ってデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
行列の列ごとの合計値	np.sum(aArray, axis=0)
データフレームの欠損値をxで補完する	df.fillna(x)
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームをエクセルファイルからロードする	pd.read_excel('file.xlsx')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
上限から下限までの範囲でヒストグラムをプロットする	plt.hist(データ列, range=(start, end))
データフレームを指定した列によって昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
散布図をrgbのポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
あるカラムの文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
リストとイテラブルの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をミスティローズ色を使って描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
逆行列を算出する	np.linalg.inv(aArray)
横棒グラフをパールゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
非数値データ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ミディアムアクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
散布図に赤い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
option: ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
リストとリストについて散布図をプロットして、菱形マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データ列のユニークな要素数を確認する	ds.nunique()
値を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
マップの項目名を要素に設定する	aDict[key] = element
データフレームから指定したカラムの名前一覧の列を選択する	df[columns]
リストとリストについて散布図を描画し、、マーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
ファイルに文字列を書き込む	f.write(s)
散布図をダークオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
t-SNEを用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: バイオレットにグラフの色を設定する	color = 'violet'
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
カウンタを列を用いて更新する	aCounter.update(iterable)
option: 色を青緑に設定する	color = 'teal'
両端キューの末尾に要素を追加する	deq.append(element)
predicateFuncがTrueになるシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
kを底とする浮動小数点数の対数	math.log(x, k)
その最頻値でデータフレームのNaNを埋める	df.fillna(df.mode().iloc[0])
nがn2未満もしくはn3以上	n < n2 or n >= n3
データフレームの選択したカラムのNaNをメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
カウンタから最頻出な項目の件数を求める	aCounter.most_common()[1]
文字列を黄色にする	f'\033[33m{value}\033[0m'
キーが辞書にある	key not in aDict
今日の年数	datetime.datetime.today().year
データシリーズを丸めて整数型にする	ds.round().astype(int)
散布図をグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='green')
ヒストグラムをダークスレートブルー色を使って描画する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: 赤にフォントの色をする	color = 'red'
option: ピーチパフ色を用いる	color = 'peachpuff'
2つのオブジェクトが同一参照か調べる	obj is obj2
ベクトルのユニークな要素とそのインデックスを調べる	u, indices = np.unique(aArray, return_index=True)
ゼロ埋めした三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
既存のファイルパスを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
二つの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
文字の文字コード	ord(ch)
線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
nがn2より大きいか	n > n2
四分位数でリストを分割する	pd.qcut(aList, 4)
データフレームのカラム間のスピアマンの相関係数を計算する	scipy.stats.spearmanr(df['列A'], df['列B'])
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
データフレームのある列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
データフレームを行によって昇順に並べる	df.sort_index(ascending=True)
データ列の変化を半透明の実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
横棒グラフをレモンシフォン色として描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
option: ラインを細くする	linewidth = 3.0
カウンタを辞書に変換する	dict(aCounter)
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
rgbの丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの選択した列の未入力値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
線形モデルの係数	model.coef_
浮動小数点数の常用対数を求める	math.log10(x)
真紅色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ライトシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
貝殻色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
ファイルを読み込みモードを用いてオープンして]、fとする	f = open(filepath, mode='r')
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
データシリーズの要約統計量を算出する	ds.describe()
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
n回文字列を繰り返すイテラブルを得る	itertools.repeat(element, n)
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
option: 線の種類を破線に設定する	linestyle = 'dashed'
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
ファイルを開いて]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
アリスブルーにヒストグラムの色を設定する	plt.hist(データ列, color='aliceblue')
折れ線グラフの▽マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの選択した列のメディアン	df[['列A', '列B']].median()
辞書の浅いコピーを用意する	aDict.copy()
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
シーグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='seagreen')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
文字列の中でASCII限定としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
グリッド線を青くする	plt.grid(color='b')
マップの浅いコピーを用意する	aDict.copy()
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
標準出力がパイプか調べる	not sys.stdout.isatty()
丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o')
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
文字列が文字列リストに含まれるかテストする	s in aStringList
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
option: 線を細くする	linewidth = 3.0
配列の列ごとの最小値を求める	np.min(aArray, axis=0)
option: 分割記号をタブにする	sep = '\t'
行列の行ごとの最大値	np.max(aArray, axis=1)
データフレームの指定した列を10の位で四捨五入する	df['列A'].round(-1)
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
option: 複素数型を用いる	dtype = bool
折れ線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
赤い左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
rgbの大バツマーカーをリストと配列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフを貝殻色として描画する	plt.barh(データ列x, データ列y, color='seashell')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
option: 色のアルファを変更する	alpha = 0.5
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
日付データが日付データよりあと	aDate > aDate2
折れ線グラフをデピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='deeppink')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データシリーズの月を使う	ds.dt.month
２つの列によってデータフレームをまとめたグループ	df.groupby(['列A', '列B'])
黒い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
直前の値でデータフレームの選択したカラムの未入力値を埋める	df[['列A', '列B']].fillna(method='ffill')
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
三つの文字列を順にプリントする	print(value, value2, value3)
データフレームを表示するとき、表示する最大列数を増やす	pd.set_option('display.max_columns', n)
データフレームの不偏分散	df.var(ddof=1)
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
リストを二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
文字列を白色で表示できる文字列にする	f'\033[37m{value}\033[0m'
データシリーズの未入力値を最大値にセットする	ds.fillna(ds.max())
集合に値を追加する	aSet.add(element)
option: フォントの色をライトゴールドロディイエローにセットする	color = 'lightgoldenrodyellow'
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
文字列をセンタリングする	s.center(文字列幅)
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
読み込みモードとしてファイルパスを開いて]fとする	f = open(filepath, mode='r')
ファイルパスからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
配列と数列について散布図を描いて、マーカーを下三角に変更する	plt.plot(データ列x, データ列y, marker='v')
配列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ライムグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
新しい部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームのデータ型一覧	df.dtypes
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
キューを用いる	import collections
データフレームの指定した列の欠損値を中央値に指定する	df['列A'].fillna(df['列A'].median())
特異値分解として淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
カテゴリ別でグループ化して、データフレームをに箱ひげ図で図示する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
option: 丸マーカーを使用する	marker = 'o'
データフレームを並べ直し、新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
レベッカパープル色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
オブジェクトの型を求める	type(obj)
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
列から複数個、ランダムに選ぶ	random.choices(iterable, k=n)
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
option: 色をホワイトスモークに指定する	color = 'whitesmoke'
option: 色をディムグレーに設定する	color = 'dimgray'
ネイビー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
エクセルファイルのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
option: 改行コードをUNIXに変更する	newline = '\n'
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
散布図をフローラルホワイト色として描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームのあるカラムが何年か調べる	df['列A'].dt.year
カウンタの項目のカウント	aCounter[element]
ヒストグラムの色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
option: ライムグリーンにグラフの色を変更する	color = 'limegreen'
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
ダークスラテグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ミディアムオーキッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
グラフの大きさを変更する	plt.figure(figsize=(横幅, 高さ))
部分文字列が文字列中に含まれないか確認する	sub not in s
散布図の△マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
文字列の最初から部分文字列を見つける	s.find(sub)
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
option: マーカーの色を真紅にする	markerfacecolor = 'crimson'
ヒストグラムの色をモカシンに指定する	plt.hist(データ列, color='moccasin')
オリーブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
UNIX秒のデータ列からPandasの日付型にする	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
year年month月day日hour時minute分をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
行列の値を見る	aArray[行番号, 列番号]
リストとリストについての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
パラメータが無限大に近づく際の数式の極限値を算出する	sympy.limit(e, z, oo)
リストと配列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフを青い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データ列の偏りを平方根変換する	np.sqrt(データ列)
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
リストを青色にする	f'\033[34m{value}\033[0m'
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
データフレームのNaNを最小値に指定する	df.fillna(df.min())
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
ひとつでも非英数字が文字列中にあるか調べる	any(not c.isalnum() for c in s)
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: レモンシフォンにフォントの色を設定する	color = 'lemonchiffon'
ヒストグラムをシスル色を使って描画する	plt.hist(データ列, color='thistle')
ライトグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lightgreen')
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
フォレストグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
カウンタの項目をリストとして得る	aCounter.keys()
横棒グラフをビスク色として描画する	plt.barh(データ列x, データ列y, color='bisque')
nを16進数文字列に変換する	hex(n)[2:]
日付データをn分前にする	aDate - datetime.timedelta(minutes=n)
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
ミディアムスプリンググリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
環境名	sys.platform
スクリプトのファイルの名前	sys.argv[0]
option: パウダーブルー色を使う	color = 'powderblue'
ファイルパスをオープンして]読み込みストリームを使う	open(filepath, mode='r')
データフレームの一部のカラムのNaNを平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
文字列中にひとつでも非英字が含まれるか調べる	any(not c.isalpha() for c in s)
データシリーズが正規分布からどれだけ尖っているか調べる	ds.skew()
データシリーズを丸める	ds.round()
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
バイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
外れ値を除いた配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
辞書を空にする	aDict.clear()
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームのカラムを折れ線グラフで可視化する	plt.plot(df[column], df[column])
ダークオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
数値のパラメータについてのn階微分を行う	sympy.diff(e, z, n)
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
リストを太字にする	f'\033[1m{value}\033[0m'
線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
データフレームから重複したデータを残さずドロップする	df.drop_duplicates(keep=False)
青いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
表をグループ化し、ある列に対し分散を求める	df.groupby('列A')['列B'].var()
日付時刻データは何秒か知る	aDatetime.second
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
データフレームの指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
ライトグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
option: 色をコーンズシルクに指定する	color = 'cornsilk'
データシリーズが正規分布からどの程度、歪んでいるか見る	ds.kurt()
CSVファイルでデータフレームを保存する	df.to_csv('file.csv')
リストとイテラブルについて散布図を描画してマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
黒いポイントマーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ヒストグラムをサーモン色を使って描画する	plt.hist(データ列, color='salmon')
カテゴリで色分けして、データフレームをに箱ひげ図で描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
色付きの一点鎖線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgray')
option: グラフの色をダークシアグリーンに指定する	color = 'darkseagreen'
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ピーチパフにヒストグラムの色を指定する	plt.hist(データ列, color='peachpuff')
オブジェクトが名前付きタプルのインスタンス	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
日付データをISO書式の文字列に変換する	aDate.isoformat()
ミディアムスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
ベクトルと同じ大きさの空のベクトルを作る	np.empty_like(aArray)
横棒グラフをフローラルホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='floralwhite')
数から実数を減ずる	x - y
グラフの横軸の軸ラベルをする	plt.xlabel('x軸ラベル')
タイムスタンプデータと日付時刻データの時間差を秒で算出する	(aDatetime - aDatetime2).total_seconds()
オブジェクトがバイト列か	isinstance(obj, bytes)
実数の仮数部を計算する	math.frexp(x)[0]
option: ペルーを用いる	color = 'peru'
入力ストリーム全体をリストとして読み込む	f.readlines()
０で全要素を初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
方程式として数値の変数の解を計算する	sympy.solve(e, z)
option: ピーチパフ色を使う	color = 'peachpuff'
ロバスト推定でクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの行を範囲指定して抽出する	df[start:end]
データフレームの選択したカラムの中央値	df[['列A', '列B']].median()
BOM付きとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
横棒グラフをリネン色を使って描画する	plt.barh(データ列x, データ列y, color='linen')
グラフのインチを設定する	plt.figure(figsize=(横幅, 高さ))
option: BOM付きを使用する	encoding = 'utf_8_sig'
両端キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
小数点数の正接の逆数	math.atan(x)
辞書のの一覧を参照する	aDict.values()
リストと配列について散布図を描いて、マーカーを▼に指定する	plt.plot(データ列x, データ列y, marker='v')
リストとイテラブルについて散布図を描画し、、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
横軸の目盛を非表示にする	plt.xticks([])
文字列を下線付きにする	f'\033[4m{value}\033[0m'
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: オリーブにグラフの色を変更する	color = 'olive'
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
折れ線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
nが3で割り切れるかどうか	n % 3 == 0
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
マッピングの全項目をクリアする	aDict.clear()
データフレームの値をまとめて正規表現でreplに置換する	df.replace(pattern, repl, regex=True)
整数を二乗する	x ** 2
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
散布図をベージュ色として描画する	plt.scatter(データ列x, データ列y, color='beige')
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列がタプルの要素でないか調べる	element not in aTuple
リスト内の要素が全て真か調べる	all(aList)
データフレームのモード	df.mode()
データフレームが重複しているか	df.duplicated()
黒い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
データフレームの選択したカラムを百の位で丸める	df[['列A', '列B']].round(-2)
データシリーズのNaNをxで補う	ds.fillna(x)
全ての八進数字	string.octdigits
データフレームのカラムを散布図で描画してカテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
文字列は全て識別子名	s.isidentifier()
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
正規分布で疑似乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
option: ヘッダを自動的な連番に設定する	header = None
データフレームのあるカラムを小数点以下n桁で四捨五入する	df['列A'].round(n)
文字列の終了位置より前に部分文字列が含まれないか	s.find(sub, 0, end) == -1
実数の逆正弦を求める	math.asin(x)
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
ミッドナイトブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: アリスブルー色を用いる	color = 'aliceblue'
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データフレームの指定したカラムの中に文字列とがいくつ含まれるか数える	df['列A'].isin([value, value2]).sum()
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
グリーンイエローにヒストグラムの色を変更する	plt.hist(データ列, color='greenyellow')
疑似乱数を正規分布で発生させる	random.normalvariate(mu=0.5, sigma=0.2)
バイナリできるようにファイルパスを開く]	open(filepath, mode='rb')
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
そのモードでデータフレームの一部のカラムの未入力値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
文字列が印字できる	s.isprintable()
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
要素がマッピングの値に含まれていない	element not in aDict.values()
JSONフォーマットのファイルを読み込んで、dataとする	data = json.load(fin)
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
データフレームを配列にする	df.values
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
列の名前を列挙する	df.columns
データフレームをあるカラムによって大きい順に整列する	df.sort_values(by='列A', ascending=False)
コーンフラワーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
タプルの要素を逆順にする	aTuple[::-1]
option: パパイヤウィップ色を用いる	color = 'papayawhip'
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
データフレームのカラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームを小数点以下3桁まで書き出す	df.to_csv('file.csv', float_format='%.3f')
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='teal')
文字列を最後から部分文字列で区切る	s.rsplit(sub)
ミディアムスレートブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ファイルパスの絶対パスを求める	os.path.abspath(filepath)
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
タプルの最初を除く	aTuple[1:]
複数のデータフレームを縦向きに一つにまとめる	pd.concat([df, df2, df3], axis=0)
データフレームのある列の値がxより大きい行を取り出す	df[df['列A'] > x]
データフレームから1つの列を抽出する	df[['列A']]
一方に含まれ他方に含まれない集合を求める	aSet.difference(aSet2)
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
スピアマン相関係数でデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='spearman')
部分文字列を文字列の開始位置から終了位置まで探す	s.find(sub, start, end)
文字列が正規表現にマッチさせる	re.match(pattern, s)
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
文字列のn番目を使う	s[n]
データフレームの不偏標準偏差を計算する	df.std()
三つ並べて数列を柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
重複を認めて5行をデータフレームからランダムにサンプリングする	df.sample(5, replace=True)
リストをひとつ置きに抽出する	aList[::2]
データシリーズの未入力値を直前の値で埋める	ds.fillna(method='ffill')
カウンタからマッピングを減らす	aCounter.subtract(aDict)
グリッドの線種を実線に変更する	plt.grid(linestyle='solid')
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
散布図の左三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
rangeの無限バージョン	itertools.count(start=n, step=step)
イエローグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
表データをインデックスによって降順でソートする	df.sort_index(ascending=False)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフを一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ライトスレイグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightslategrey')
数列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームを二つの列の値によってグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
オブジェクトがタプルの要素か調べる	element in aTuple
データフレームの内であるカラムに重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
option: 暗い赤にフォントの色を設定する	color = 'darkred'
フローラルホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
オプションで標準出力を出力にする	file = sys.stdout
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ふたつの集合は互いに素か	aSet.isdisjoint(aSet2)
黒い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
集合から何でもいいから一つ取り出す	aSet.pop()
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
線グラフの色を淡い茶色にセットする	plt.plot(データ列x, データ列y, color='tan')
タプル中の要素は少なくともひとつ真か	any(aTuple)
グラフの凡例を表示する	plt.legend()
データフレームの欠損値を直後の値で補完する	df.fillna(method='bfill')
データフレームの選択したカラムのパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
n個の整数リストを作る	list(range(n))
新しいロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
option: グラフの色を貝殻に指定する	color = 'seashell'
相関係数	scipy.stats.pearsonr(数列, 数列2)
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
列の各データが何回出現するか確認する	df[col].value_counts()
散布図の三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
縦棒グラフをフクシア色を使って描画する	plt.bar(データ列x, データ列y, color='fuchsia')
両端キューの最大長	deq.maxlen
ヒストグラムの色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
散布図の丸印を赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
整数nを16進文字列にする	hex(n)[2:]
クラス分類をKNNでする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
ビン数nで等量でデータ列をビン分割する	pd.qcut(ds, n)
データフレームを二つの列をキーにして降順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
配列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
横棒グラフを濃いシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ヒストグラムをミッドナイトブルー色として描画する	plt.hist(データ列, color='midnightblue')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
データフレームの選択した列のNaNを直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
最大長を指定して、双方向キュー	collections.deque(maxlen=n)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
辞書の値を列挙する	aDict.values()
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
縦棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
タプルをnから順番付けする	enumerate(aTuple, start=n)
ライトシアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データフレームの中にある文字列と文字列の合計を求める	df.isin([value, value2]).sum()
文字列を白色にする	f'\033[37m{value}\033[0m'
配列とデータ列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
リストを逆順にする	aList[::-1]
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
option: 箱髭図に平均を追記する	showmeans = False
option: ライトスチールブルーにグラフの色を変更する	color = 'lightsteelblue'
棒グラフをミスティローズ色を使って描画する	plt.bar(データ列x, データ列y, color='mistyrose')
値をスタックにエンキューする	deq.appendleft(element)
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データシリーズの値をValueMapでまとめて置き換える	ds.replace(ValueMap)
関数の値によってデータフレームをグループ化する	df.groupby(関数)
ファイルを一行ずつ読む	f.readline()
黄色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームをある列をキーにして降順にソートする	df.sort_values(by='列A', ascending=False)
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
値を水色化する	f'\033[36m{value}\033[0m'
等間隔でリストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
オブジェクトのプロパティを値に変更する	setattr(obj, プロパティ名, 値)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
nの二乗	n ** 2
一点鎖線として配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの一部のカラムがどの程度、正規分布から歪んでいるか調べる	df[['列A', '列B']].kurt()
イテラブルと配列の散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
option: 星マーカーを描画する	marker = '*'
要素をスタックの末尾に追加する	deq.append(element)
option: 色をカデットブルーに指定する	color = 'cadetblue'
組のn番目からn2番目	aTuple[n:n2]
データフレームの選択したカラムの中にある日付データと文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
nが負の数か調べる	n < 0
リストをリストを境界値として分割する	pd.cut(aList, aList)
文字列の両端から空白を除去する	s.strip()
出現頻度を可視化する	plt.hist(データ列)
線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
データフレームの指定した列の中の未入力値の合計を数える	df['列A'].isna().sum()
データ列と配列についての散布図に赤い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
整数nのバイト長	(n.bit_length() + 7) // 8
データシリーズの欠損値を中央値に設定する	ds.fillna(ds.median())
文字列の末尾から改行を取り除く	s.rstrip('\n')
インディアンレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームから10行をランダムに選ぶ	df.sample(10)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
TSVファイルから文字コードを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
マゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
データ列を使用する	import pandas as pd
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
入力ストリーム全体を行単位で分割して読み込む	f.readlines()
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
option: フォントの色をダークブルーに変更する	color = 'darkblue'
オブジェクトのプロパティを値にセットする	setattr(obj, プロパティ名, 値)
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
配列の偏差値を求める	50 + 10 * scipy.stats.zscore(配列)
横棒グラフをレベッカパープル色として描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
ファイルパスをオープンして]書き込みストリームを使う	open(filepath, mode='w')
タプルの末尾からn番目以前の要素を取り出す	aTuple[:-n]
ヒストグラムをビスク色を使って描画する	plt.hist(データ列, color='bisque')
ケンドールの順位相関係数	scipy.stats.kendalltau(配列, 配列2)
nが1、もしくは2	n == 1 or n == 2
オプションで、出力先を標準エラーに変更する	file = sys.stderr
空の両端キューを用意する	collections.deque()
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
指定したカラムの不偏分散を求める	df['列A'].var(ddof=1)
タプルの最後を取り除く	aTuple[:-1]
改行なしで標準入力から1行読む	sys.stdin.readline().rstrip()
リストとリストについて散布図を描画し、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフをスノー色を使って描画する	plt.plot(データ列x, データ列y, color='snow')
option: 青緑を使う	color = 'turquoise'
折れ線グラフを半透明の点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
データフレームを表計算ファイルファイルで出力する	df.to_excel('file.xlsx')
2つの文字列は同じか判定する	s == s2
ValueMapでまとめてデータシリーズの値を置き換える	ds.replace(ValueMap)
データフレームの25パーセンタイル	df.quantile(0.25)
折れ線グラフの色を真紅に指定する	plt.plot(データ列x, データ列y, color='crimson')
散布図に赤い△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
ファイルを追加できるようにSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
行列の転置行列	aArray.T
配列をビン数nでビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
option: ダークオーキッド色を使う	color = 'darkorchid'
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
ファイルパスを開いて]、書き込みストリームを使う	open(filepath, mode='w')
option: 丸印を描画する	marker = 'o'
リストとリストについて散布図を描いて右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのどの値が頻出か見る	df.mode()
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
あるカラムの値がx以上、y未満の行を選択する	df[(x <= df['列A']) & (df['列A'] < y)]
青い破線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
青い点線を使って数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
グラフの縦横の比率を等しくする	plt.axis('equals')
スクリプトの名前	sys.argv[0]
オールドレース色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
横棒グラフをラベンダー色を用いて描画する	plt.barh(データ列x, データ列y, color='lavender')
散布図をシエナ色を用いて描画する	plt.scatter(データ列x, データ列y, color='sienna')
固有値分解の準備をする	model = sklearn.decomposition.PCA(n_components=n)
二つの関係がスーパーセットかどうか調べる	aSet.issuperset(aSet2)
両端キューをリストにする	list(deq)
指定したカラムのカテゴリで集計し平均値を求める	df.groupby('列A').mean()
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
データシリーズの欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
option: フォントの色をディープスカイブルーに設定する	color = 'deepskyblue'
データ列の各データは何回出現するか確認する	ds.value_counts()
ヒストグラムをパレットトルコイズ色として描画する	plt.hist(データ列, color='paleturquoise')
範囲指定をした配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
文字列の先頭の文字を求める	s[0]
option: サーモン色を使う	color = 'salmon'
文字列を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
０で全要素を初期化した行列を作る	np.zeros(行数, 列数)
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
nが2で割り切れないかどうか調べる	n % 2 == 1
整数に実数を加える	x + y
ティール色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
データ列と数列についての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: マゼンタ色を使う	color = 'magenta'
リストと数列の散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategrey')
option: 改行コードを動作環境依存に指定する	newline = None
10行をランダムにデータフレームから抽出する	df.sample(10)
データフレームを関数の値によって集約して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
両端キューの最初の要素を使う	deq[0]
表データのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
オーキッドにヒストグラムの色をセットする	plt.hist(データ列, color='orchid')
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ローングリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
タイムスタンプデータとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
option: 暗い赤色を用いる	color = 'darkred'
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
リストを横棒プロットにする	plt.barh(ラベル列, データ列)
両端キューの最大長を見る	deq.maxlen
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
黒い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
指定した列で集計し、最大値を求める	df.groupby('列A').max()
文字列が文字列より辞書順で前	s < s2
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
折れ線グラフの右三角印を黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
自然数LCMを算出する	math.lcm(n, n2)
折れ線グラフのダイアモンドマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
レベッカパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
タプルを引数として展開して表示する	print(*aTuple)
等量でn個にリストをビン分割する	pd.qcut(aList, n)
データフレームの末尾100行を抽出する	df.tail(100)
option: 分割記号をスラッシュにする	sep = '/'
データを最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ヒストグラムの色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
オブジェクトのクラス	type(obj)
文字列の先頭	s[0]
新しいガウス過程分類器を準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
リストとイテラブルについて散布図をプロットしてマーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
ラインを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムの色をミディアムパープルに指定する	plt.hist(データ列, color='mediumpurple')
インディゴ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
2つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
タイムスタンプデータの年	aDatetime.year
エポック秒のカラムから日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
横棒グラフをビスク色を用いて描画する	plt.barh(データ列x, データ列y, color='bisque')
折れ線グラフをカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='khaki')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
シャルトリューズ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
クラス分類の偽陰性をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
両端キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームの中のカラムをビン数nでビン分割する	pd.cut(df[col], n)
option: コロンを区切りで用いる	sep = ':'
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列])
ひとつ置きに組を得る	aTuple[::2]
２つの列によってデータフレームを昇順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ピンク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
データフレームの指定したカラムのNaNを直前の値に減らす	df['列A'].fillna(method='ffill')
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムを青くする	plt.hist(データ列, color='b')
散布図をオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orchid')
option: マーカーを四角に変更する	marker = 's'
星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*')
ファイルの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ライムグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを表示するときヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
option: 色をダークスラテグレーに変更する	color = 'darkslategray'
ターコイズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
日付データが水曜日か確認する	aDate.weekday() == 2
データ列のエポック秒をdatetime64型にする	pd.to_datetime(ds, unit='s', utc=True)
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
正規化された度数分布図をプロットする	plt.hist(データ列, density=True)
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
ライトシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
散布図の▼マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフを小麦色色を使って描画する	plt.barh(データ列x, データ列y, color='wheat')
データシリーズの欠損値を中央値に指定する	ds.fillna(ds.median())
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
実数を数で整数除算する	x // y
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
リストを縦軸リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
オブジェクトが数値	isinstance(obj, (int,float))
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
option: 上三角マーカーを描画する	marker = '^'
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: ラベンダーを使用する	color = 'lavender'
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
行列の累積和を見る	np.cumsum(aArray)
ペルー色としてヒストグラムを描画する	plt.hist(データ列, color='peru')
データ列の各データ値の出現数を計算する	ds.value_counts()
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
今日をタプルにする	datetime.datetime.today().timetuple()
データシリーズのタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ロードしたモジュールの一覧	sys.modules
線グラフを茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
空行を出力する	print()
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
列を文字列リストに変換して空白を用いて連結する	' '.join(map(str, iterable))
折れ線グラフにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
オブジェクトをユーザ向けの文字列にする	str(obj)
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
リストの要素を逆順にする	aList[::-1]
散布図を赤い星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c='r')
範囲指定してデータフレームの行を取り出す	df[start:end]
2つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
日付時刻データからn週間分減らす	aDatetime - datetime.timedelta(weeks=n)
エクセルファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
縦棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
データ列を等量で分割数nでビン分割する	pd.qcut(ds, n)
タイムスタンプデータの時間	aDatetime.time()
データシリーズの中にいくつNaNが存在するか数える	ds.isna().sum()
文字列はリストに含まれないかどうか調べる	element not in aList
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
組の最後からn番目以前の要素を得る	aTuple[:-n]
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
横棒グラフの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
赤い△印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列中にひとつでも非英数字が含まれる	any(not c.isalnum() for c in s)
データフレームをCSVファイルにインデックスを付けず保存する	df.to_csv('file.csv', index=None)
option: グラフの色をゴールドに設定する	color = 'gold'
option: ダークマゼンタを使用する	color = 'darkmagenta'
データフレームの選択したカラムの未入力値を直前の値にセットする	df[['列A', '列B']].fillna(method='ffill')
白色を用いてヒストグラムを描画する	plt.hist(データ列, color='white')
オールドレース色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
値が集合に含まれないか調べる	element not in aSet
入力から二つの浮動小数数を読み込む	A, B = map(float, input().split())
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
配列をy軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
カテゴリ別でグループ化して、データフレームの全カラムの散布図を描画する	sns.pairplot(df, hue='カテゴリ列')
ラベンダー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
二つの文字列をタブで区切って表示する	print(value, value2, sep='\t')
線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
タブ	'\t'
0からnまでのスライス	slice(n)
データフレームの指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
指定したカラムのカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
回帰分析をニューラルネットで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
縦棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データ列とリストについて散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データフレームの列間の相関係数を一度に算出する	df.corr()
データフレームの中にいくつ欠損値があるか求める	df.isna().sum()
ガウス過程として回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
データシリーズがどの程度正規分布から歪んでいるか見る	ds.kurt()
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
配列のn次モーメント	scipy.stats.moment(配列, moment=n)
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
データシリーズの値がNaN	ds.isna()
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
Pythonパスのリストを知る	sys.path
データフレームの選択した列の中に日付データと文字列が存在するか確認する	df[['列A', '列B']].isin([value, value2])
空の回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
配列の形状	aArray.shape
データシリーズを1000の位で丸めて整数にする	ds.round(-3).astype(int)
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
ベクトルのデータ型	aArray.dtype()
option: グラフの色をプラムに設定する	color = 'plum'
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
入力から2つの浮動小数数値を読む	A, B = map(float, input().split())
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
データフレームを使用する	import pandas as pd
変数について数値の積分を算出する	sympy.integrate(e, z)
青い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
線グラフの色をピーチパフにする	plt.plot(データ列x, データ列y, color='peachpuff')
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
散布図をダークスラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
外れ値を除いた配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
小数点数の正接	math.tan(x)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
インディゴ色としてヒストグラムを描画する	plt.hist(データ列, color='indigo')
縦棒グラフをナバホホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='navajowhite')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
option: 区切りをタブにする	sep = '\t'
option: フォントの色をオリーブに設定する	color = 'olive'
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
文字列をファイルに書き込む	f.write(s)
折れ線グラフでデータフレームの列を可視化する	plt.plot(df[column], df[column])
リストを改行なしにプリントする	print(value, end='')
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 右三角マーカーを描画する	marker = '>'
データフレームの一部のカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
option: 三角マーカーを使う	marker = '^'
JSONフォーマットの文字列をデータにする	json.loads(jsonString)
データフレームをエクセルファイルファイルで保存する	df.to_excel('file.xlsx')
縦棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
実数のハイパボリック・タンジェント	math.tanh(x)
シアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
日付時刻データの秒数	aDatetime.second
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
ある列の文字列に部分文字列が存在しないデータを抽出する	df[~df['列A'].str.contains(部分文字列)]
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
グラフをプレゼンにする	sns.set(context='talk')
論文用にグラフを変更する	sns.set(context='paper')
三つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
折れ線グラフの左三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ヒストグラムをミディアムオーキッド色を用いて描画する	plt.hist(データ列, color='mediumorchid')
分数モジュールを用いる	import fractions
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: 線の幅を設定する	linewidth = 3.0
線グラフの色をスレートブルーにセットする	plt.plot(データ列x, データ列y, color='slateblue')
nが正の数	n > 0
文字列の無限イテラブルを得る	itertools.repeat(element)
option: ライトスカイブルー色を使う	color = 'lightskyblue'
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
インディアンレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
格子をグラフに入れる	plt.grid(True)
ヒストグラムと勾配ブースティングを使って回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: ロイヤルブルー色を使う	color = 'royalblue'
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
横棒グラフをスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='slateblue')
データフレームの指定したカラムを10の位で丸める	df['列A'].round(-1)
CSVを読み込む	pd.read_csv('file.csv', sep=',')
大文字・小文字を無視して文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
配列の行を選択する	aArray[行番号]
データ列をn個にビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
上位集合か判定する	aSet.issuperset(aSet2)
データフレームのあるカラムを千の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
カテゴリで色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
パラメータが0に近づく際の数式の極限値を求める	sympy.limit(e, z, 0)
リストを箱ひげ図にする	plt.boxplot(データ列)
ある列の値がx以上y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
option: グラフの色をシアンに設定する	color = 'cyan'
データフレームをグループ化しある列に対し個数を求める	df.groupby('列A')['列B'].count()
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
nからn2の範囲を使う	range(n, n2)
折れ線グラフの菱形印の色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
nとkのコンビネーションを算出する	math.comb(n, k)
横棒グラフをパールバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='palevioletred')
データフレームを正規表現patternでまとめてreplに変更する	df.replace(pattern, repl, regex=True)
折れ線グラフをティール色として描画する	plt.plot(データ列x, データ列y, color='teal')
空白によって文字列を分割し、、整数リストにする	map(int, s.split())
データフレームのカーネル密度分布図をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
濃くカラーパレットをグラフの描画で使う	sns.set(pallete='deep')
横方向にデータフレームを連結する	pd.concat([df, df2], axis=1)
ヒストグラムの色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
指定したカラムの標本分散を求める	df['列A'].var(ddof=0)
日付データの表データのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ペールグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='palegreen')
散布図の星マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
データフレームの選択したカラムの欠損値をそのメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
回帰モデルをあてはめる	model.fit(説明変数, 目的変数)
実数以上の最小の整数	math.ceil(x)
文字列リストにリストを変換して空白によって連結する	' '.join(map(str, iterable))
赤い丸マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームをグループ化し合計を求める	df.groupby('列A').sum()
数を実数で割って、切り捨てる	x // y
横棒グラフをグレー色を使って描画する	plt.barh(データ列x, データ列y, color='gray')
散布図を淡い茶色色として描画する	plt.scatter(データ列x, データ列y, color='tan')
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
ディムグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
指定したカラムで集計し、最小値を計算する	df.groupby('列A').min()
option: 印を三角に変える	marker = '^'
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
文字列の両端から部分文字列を消す	s.strip(sub)
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
黒いポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図をブルーバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
双方向キュー中の値の位置を求める	deq.index(element)
配列とリストについて散布図を描画し、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
データシリーズのタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
データ列の相関を可視化する	plt.scatter(データ列x, データ列y)
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
列の空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
xでデータフレームの一部のカラムの欠損値を補う	df[['列A', '列B']].fillna(x)
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
折れ線グラフをハニーデュー色を使って描画する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
配列とリストについての散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
ヒストグラムをグリーンイエロー色として描画する	plt.hist(データ列, color='greenyellow')
数式の数値を算出する	float(e)
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ダーク・スラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: 印を左三角に変える	marker = '<'
行列の演算をする	import numpy as np
ベストな位置に凡例を表示する	plt.legend(loc='best')
数式を方程式として解く	sympy.solve(e)
nが一桁の数かテストする	0 <= n <= 9
リストとリストについての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
文字列を緑色にする	f'\033[32m{value}\033[0m'
縦棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
タイムスタンプデータの年数	aDatetime.year
ファイルを文字コードtextを用いてオープンする]	open(filepath, encoding=text)
散布図のポイント印を黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データシリーズの欠損値を後の値で埋める	ds.fillna(method='bfill')
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
列からひとつランダムに選ぶ	random.choice(iterable)
線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: ヘッダを連番に増やす	header = None
ヒストグラムをペルー色として描画する	plt.hist(データ列, color='peru')
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームのインデックスがnの行を抽出する	df.loc[n]
nが-9以上、9以下	-9 <= n <= 9
線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgray')
アクア色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
文字列の最後から改行を除く	s.rstrip('\n')
ダーク・スラテグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
両端キューのn番目に要素を挿入する	deq.insert(n, element)
mathモジュールをインポートする	import math
ダークオリーブグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
降順でデータフレーム全体をインデックスでソートする	df.sort_index(ascending=False)
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
配列とリストについて散布図を描画して、マーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
文字列の開始位置からと終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
option: 印を右三角に変える	marker = '>'
散布図を四角印を使い、描画する	plt.scatter(データ列x, データ列y, marker='s')
縦棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
棒グラフをダークオーキッド色を使って描画する	plt.bar(データ列x, データ列y, color='darkorchid')
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
マッピングのキーとその項目をペアとして取り出す	aDict.items()
配列のスカラー倍	aArray * n
データ列をカテゴリデータに変換する	ds.astype(object)
データフレームの列を10の位で丸める	df['列A'].round(-1)
折れ線グラフの線の種類を破線にセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのある列の空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームの分散を求める	df.var()
浮動小数点数を実数で除算して、小数点以下を切り捨てる	x // y
データ列を折れ線プロットで図示する	plt.plot(データ列x, データ列y)
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
整数nがタプルのどれかか調べる	n in aTuple
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
xが一桁の整数か	-9 <= x <= 9
散布図に右三角印を加える	plt.scatter(データ列x, データ列y, marker='>')
変数が0に近づく時、数式の極限値を計算する	sympy.limit(e, z, 0)
黒い大バツマーカーを配列と配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフに丸マーカーを加える	plt.plot(データ列x, データ列y, marker='o')
ふたつの集合の積集合を使う	aSet.intersection(aSet2)
日付データが火曜日か確認する	aDate.weekday() == 1
データフレームの選択したカラムを十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
カウンタの文字列一覧を使う	aCounter.keys()
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
ヒストグラムを上限から下限までの区間で描く	plt.hist(データ列, range=(start, end))
コーラル色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
線形回帰モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
横棒プロットの幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
小数点数の逆余弦を求める	math.acos(x)
あるカラムの統計量	df['列A'].describe()
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームをグループ化し、ある列に対し最大値を計算する	df.groupby('列A')['列B'].max()
オブジェクトはリストクラスか調べる	isinstance(obj, list)
折れ線グラフの色をブラウンに指定する	plt.plot(データ列x, データ列y, color='brown')
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
横軸の目盛を対数に変更する	plt.xscale('log')
棒グラフをロージーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='rosybrown')
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
オブジェクト一つのりストを得る	[element]
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
option: スカイブルーにフォントの色を指定する	color = 'skyblue'
実数の小数点以下を丸める	round(x)
リストを分割数nで分割する	pd.cut(aList, n)
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ビン数nを用いてデータフレームの中の列を等量で分割する	pd.qcut(df[col], n)
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
エクセルファイルからシートを指定してデータフレームをロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームを関数によってまとめたグループ	df.groupby(関数)
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
双方向キューに要素をenqueueする	deq.appendleft(element)
半透明の一点鎖線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
データフレームのパーセンタイル	df.quantile(パーセント/100)
実数の双曲線正弦を求める	math.sinh(x)
文字列の開始位置からと終了位置までの間に部分文字列が含まれない	s.find(sub, start, end) == -1
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
▽印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
タプルの値の一覧	aDict.values()
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
赤いバツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
option: 配列のデータ型を指定する	dtype = np.int32
オーキッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
キューのデータを左にn個分回転させる	deq.rotate(-n)
文字列は全て識別子名か	s.isidentifier()
横棒プロットの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
グラフ中のフォントをする	sns.set(font=フォント名)
配列の正規分布を判定する	scipy.stats.shapiro(配列)
散布図を紺色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkblue')
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
ファイルパスからバイナリストリームを開き]fとする	f = open(filepath, mode='rb')
データフレームに重複があるか調べる	df.duplicated()
ミディアムスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームからランダムに100行を取り出す	df.sample(100)
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ファイルからストリームを開き]fileとする	file = open(filepath)
列の25パーセンタイルを求める	df['列A'].quantile(0.25)
現在は何秒か知る	datetime.date.today().second
日付データと日付データの時間差	aDate - aDate2
option: インディゴにグラフの色を変更する	color = 'indigo'
データフレームのカラムのユニークな値	df[col].unique()
集合のイミュータブル版	frozenset(aSet)
浮動小数点数の指数を計算する	math.frexp(x)[1]
データフレームの列の各データ値の出現数	df[col].value_counts()
データシリーズが正規分布からどれだけ、尖っているか見る	ds.skew()
散布図の四角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
スタックに要素をプッシュする	deq.append(element)
線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
散布図に青い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ミスティローズ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
グラフをプレゼン用に設定する	sns.set(context='talk')
データシリーズの値をValueMapでまとめて変更する	ds.replace(ValueMap)
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
スチールブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
黒い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
柱状図としてデータ列を可視化する	plt.hist(データ列)
黒い▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
データフレームを指定したカラムによってグループ分けし、、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データフレームのある列をリストに変換する	df['列A'].values.tolist()
箱ひげ図をプロットして、平均値を追加する	plt.boxplot(データ列, showmeans=True)
データフレームの最初5行を見る	df.head(5)
イテラブルの全順列を得る	itertools.permutations(iterable)
option: グラフの色をダークレッドに変更する	color = 'darkred'
カテゴリ別で色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
データフレームの指定したカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
日付データが木曜日か確認する	aDate.weekday() == 3
ピアソンでデータフレームの相関行列を求める	df.corr(method='pearson')
データフレームのある列を千の位で四捨五入して、整数型にする	df['列A'].round(-3).astype(int)
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
ライトコーラル色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
第一引数のファイル名	sys.argv[1]
折れ線グラフの左三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
組を引数として展開して表示する	print(*aTuple, sep=',')
option: 真紅色を使う	color = 'crimson'
リストを赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
文字列を走査し、正規表現にケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
あるカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
コマンドフラグの状態を知る	sys.flags
ヒストグラムの色をクリムゾンに指定する	plt.hist(データ列, color='crimson')
option: グラフの色をコーラルに指定する	color = 'coral'
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
縦棒グラフをオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orchid')
オブジェクトが集合	isinstance(obj, set)
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
データフレームをエクセルファイルから読み込む	pd.read_excel('file.xlsx')
データをL2ノルムを用いて正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
散布図の色をティールにする	plt.scatter(データ列x, データ列y, color='teal')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
散布図に上三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
数列の折れ線グラフを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの第一四分位数を算出する	df.quantile(0.25)
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
ユニークな値を要素とする配列	np.unique(aArray)
ペアリストpairsからカウンタを準備する	collections.Counter(dict(pairs))
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
リストのn番目に文字列を挿入する	aList.insert(n, element)
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
文字列の右側から空白を除く	s.rstrip(' ')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
要素が集合に含まれないか調べる	element not in aSet
オプションで、出力先をファイルに変更する	file = sys.open(filename, 'w')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
ゼロ埋めした整数型の配列を初期化する	np.zeros(要素数, dtype=np.int)
多項式回帰データフレームの散布図にを加える	sns.regplot(data=df, x='列名', y='列名', order=2)
データフレームの一部のカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
タプルを展開してプリントする	print(*aTuple)
1行から二つの整数を取り出す	A, B = map(int, input().split())
棒グラフをライトサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をホワイトスモークに指定する	plt.plot(データ列x, データ列y, color='whitesmoke')
破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
option: 耐火レンガ色を使う	color = 'firebrick'
指定した列の値によってデータフレームをグループ化する	df.groupby('列A')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
リストとリストの散布図を描いて、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ある列の値がx以上、y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
今日が何月か知る	datetime.datetime.today().month
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
nが無限に続く整数イテラブルを求める	itertools.repeat(n)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
option: 丸マーカーを加える	marker = 'o'
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
あるカラムの中にいくつNaNがあるか数える	df['列A'].isna().sum()
縦棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
タプルをn回結合する	aTuple * n
データをL1ノルムを用いて正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームの選択した列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
データシリーズを100の位で丸めて整数にする	ds.round(-2).astype(int)
データフレームの重複を見る	df.duplicated()
nが5で割り切れる	n % 5 == 0
エクセルファイルからすべてのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
文字列中の全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
両端キューの末尾を使う	deq[-1]
option: グラフの色をゴールドにセットする	color = 'gold'
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
0で全要素を初期化したベクトルを作成する	np.zeros(要素数)
文字列をPandasの日付型にする	pd.to_datetime(日付を表現した文字列)
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
タイムスタンプデータは何月か知る	aDatetime.month
option: 色をホットピンクに指定する	color = 'hotpink'
データフレームの未入力値を最小値で埋める	df.fillna(df.min())
縦棒グラフを描き、バーの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
ヒストグラムを紺碧色として描画する	plt.hist(データ列, color='azure')
プロットの背景色を暗くする	sns.set(style='darkgrid')
option: パパイヤウィップにグラフの色を設定する	color = 'papayawhip'
データフレームの指定したカラムがどの程度分散しているか見る	df['列A'].var()
ゲインズボロ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
折れ線グラフの色を青にセットする	plt.plot(データ列x, データ列y, color='blue')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
マッピングをネスト化する	collections.ChainMap(aDict)
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
xが一桁の正の数	0 <= x <= 9
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
option: パープルにグラフの色を指定する	color = 'purple'
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
グリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームの選択したカラムの中の欠損値の個数を数える	df[['列A', '列B']].isna().sum()
グラフを使う準備をする	import matplotlib.pyplot as plt
option: スノー色を用いる	color = 'snow'
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
日付と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
縦棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
option: グラフの色をライムに設定する	color = 'lime'
グリッドを点線にする	plt.grid(linestyle='dotted')
数列とデータ列について散布図を描き、、マーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームの欠損値をxに設定する	df.fillna(x)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
リストの最初の文字列を探す	aList.index(element)
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
ベクトルの差を求める	aArray - aArray2
線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
ふたつの列からグループ化し平均値を算出する	df.groupby(['列A', '列B'], as_index=False).mean()
1行から２つの整数を読み込む	A, B = map(int, input().split())
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
リストとイテラブルについて散布図をプロットし、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのカラムをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
イテラブルのヒストグラムをプロットする	plt.hist(データ列)
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
リストの最後のn要素を取り除く	aList[:-n]
文字列の先頭の余分な空白を取り除く	s.lstrip()
欠損値がある行を除いてみる	df.dropna()
指定した列でデータフレームを大きい順に破壊的に並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
折れ線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
文字列を区切り記号で区切り、、列挙する	s.split(sep)
文字列を最後の部分文字列で分割したときの残りの文字列	s.rpartition(sub)[-1]
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
二つの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
データフレームの指定したカラムの25パーセンタイル	df['列A'].quantile(0.25)
データフレームから同じ内容の行をドロップする	df.drop_duplicates(inplace=True)
散布図でデータフレームの全列を可視化する	sns.pairplot(df)
データシリーズの不偏分散	ds.var(ddof=1)
バギングを用いて回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
リストを昇順にソートする	sorted(aList, reverse=False)
データフレームの指定したカラムのNaNを中央値に変更する	df['列A'].fillna(df['列A'].median())
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームのカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
データフレームにおいてどの値が最も出現するか見る	df.mode()
PLSで回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
グラフのサイズをセットする	plt.figure(figsize=(横幅, 高さ))
横棒グラフを青色を使って描画する	plt.barh(データ列x, データ列y, color='blue')
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
option: ライトスレイグレー色を用いる	color = 'lightslategray'
整数nが配列のひとつ	n in aArray
タプルの先頭	aTuple[0]
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図をrgbのダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
データシリーズを10000の位で丸める	ds.round(-4)
配列の散布を可視化する	plt.scatter(データ列x, データ列y)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図のバツ印の大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
option: ディムグレー色を使う	color = 'dimgray'
エクセルファイルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
両端キューのn番目の要素	deq[n]
部分文字列が文字列の開始位置以降に存在しないかどうか調べる	s.find(sub, start) == -1
白色で文字列を表示する	print(f'\033[37m{value}\033[0m')
カーキ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
リストをn個に分割する	pd.cut(aList, n)
データフレームの中の列をn個に等間隔でビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
横棒グラフをインディゴ色として描画する	plt.barh(データ列x, データ列y, color='indigo')
あるカラムの値の分散を求める	df.groupby('列A').var()
ディープスカイブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
日付時刻データが木曜日かどうか	aDatetime.weekday() == 3
丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
option: インディアンレッドを使う	color = 'indianred'
文字列がタプルに含まれるかどうか調べる	element in aTuple
スピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
データ列の折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームの選択した列を十の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
option: プラム色を用いる	color = 'plum'
横棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の左側から部分文字列を除去する	s.lstrip(sub)
カンマ区切りのファイルのn行目を行としてロードする	pd.read_csv('file.csv', index_col=n)
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データシリーズの欠損値を直前の値に設定する	ds.fillna(method='ffill')
リストとリストを連結する	aList + aList2
データフレームを10の位で四捨五入する	df.round(-1)
タイムスタンプデータが日曜日	aDatetime.weekday() == 6
データフレームを指定した列の値によってグループ化する	df.groupby('列A')
タイムスタンプデータの日を見る	aDatetime.day
ラベンダーブラッシュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームを関数でまとめた表	df.groupby(関数)
ヒストグラムの色をミディアムパープルに変更する	plt.hist(データ列, color='mediumpurple')
配列の出現頻度を図示する	plt.hist(データ列)
option: グラフの色をシエナに指定する	color = 'sienna'
ネイビー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
二つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
option: 星マーカーを加える	marker = '*'
ドジャーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
カラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
グラフの横軸に名称をつける	plt.xlabel('x軸ラベル')
複数のカラムからグループ化し分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
折れ線グラフのバツ印の大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
データフレームをシートの名前を指定してエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
ロイヤルブルー色としてヒストグラムを描画する	plt.hist(データ列, color='royalblue')
要素一つのりスト	[element]
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
データシリーズの中の欠損値の合計を数える	ds.isna().sum()
行列の合計	np.sum(aArray)
配列の内積	np.dot(aArray, aArray2)
要素が集合の要素かどうか調べる	element in aSet
配列の移り変わりを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
nを十六進表記に変換する	hex(n)
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
散布図の大バツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
マッピングをインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
分類結果の真陰性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
タプルの値を小さい順にソートする	sorted(aTuple, reverse=False)
グラフを綺麗にする	import seaborn as sns
コーンフラワーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
整数nを二進表現に変換する	bin(n)
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
数字を全部見る	string.digits
実線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの色を暗い赤に指定する	plt.plot(データ列x, データ列y, color='darkred')
1からNまでの配列	np.arange(1, N+1)
コロンで区切って二つの文字列をプリントする	print(value, value2, sep=':')
横棒グラフをイエローグリーン色として描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
青い点線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
縦棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
指定したカラムの欠損値を最頻値にセットする	df['列A'].fillna(df['列A'].mode().iloc[0])
リストのn番目にオブジェクトを挿入する	aList.insert(n, element)
option: グラフの色を紺に指定する	color = 'darkblue'
リストをビン数nで分割する	pd.cut(aList, n)
ネイビー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームの指定した３つの列だけ抽出する	df[['列A', '列B', '列C']]
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
双方向キューは空であるか調べる	len(deq) == 0
縦棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
オブジェクトは論理値クラス	isinstance(obj, bool)
nが2で割り切れるか調べる	n % 2 == 0
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
辞書からカウンタを作成する	collections.Counter(aDict)
データシリーズの欠損値を第二四分位数に設定する	ds.fillna(ds.median())
出力ストリームから1文字読み込む	f.read(1)
折れ線グラフを赤い破線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
現在のミリ秒	int(time.time() * 1000)
データフレームを十の位で四捨五入して、整数型にする	df.round(-1).astype(int)
nをバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
データシリーズは正規分布からどれだけ、歪んでいるか見る	ds.kurt()
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
配列と配列の散布図を描いて、マーカーをダイアモンドにセットする	plt.plot(データ列x, データ列y, marker='D')
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データフレームの相関行列をヒートマップを用いて可視化する	sns.heatmap(df.corr())
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
集合からエラーなく要素を取り除く	aSet.discard(element)
option: 欠損値も無視しない	dropna = True
折れ線グラフのポイント印を赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列を別の文字列によって置換する	s.replace(sub, newsub)
データフレームの選択した列のモード	df[['列A', '列B']].mode()
外れ値に強い単回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
ある列の値がxより大きく、yより小さい行を選ぶ	df[(x < df['列A']) & (df['列A'] < y)]
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
末尾の列を除いたデータフレーム	df[df.columns[:-1]]
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
部分文字列で文字列を末尾から区切る	s.rsplit(sub)
リストの末尾から要素をポップする	aList.pop()
option: ライトグレー色を使う	color = 'lightgrey'
十六進数文字列を整数に変換する	int(s, 16)
option: エラーを無視する	errors = 'ignore'
option: グレーにグラフの色をセットする	color = 'gray'
option: タブをセパレータで用いる	sep = '\t'
option: グラフの色をオレンジに指定する	color = 'orange'
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: グラフの色をクリムゾンに変更する	color = 'crimson'
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
option: バッファリングのサイズを変更する	buffering = 4096
データフレームのカラムを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
真サブセット	aSet < aSet2
その平均でデータフレームの選択したカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
既存の配列を元に全要素が1の行列	np.ones_like(aArray)
配列の差を計算する	aArray - aArray2
リストが空でないか確認する	len(aList) != 0
ペールグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図に▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
データフレームのあるカラムの曜日数	df['列A'].dt.dayofweek
option: ライトブルーを使う	color = 'lightblue'
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
オブジェクトはリストかタプルかどうか調べる	isinstance(obj, (list)
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
nの8進文字列	oct(n)[2:]
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: フォントの色をライトコーラルに設定する	color = 'lightcoral'
実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
実行結果を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
線グラフを茶色色を使って描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
数列とリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
両端キューのn番目の値を使う	deq[n]
option: グラフの色をパープルに設定する	color = 'purple'
ピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
データフレームの列のユニークな要素	df[col].unique()
JSONファイルのファイルを読み込んで、dataとする	data = json.load(fin)
データフレームのある列の分位数	df['列A'].quantile(パーセント/100)
折れ線グラフの菱形マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
真紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ふたつの集合は集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
カウンタのktopをリストとして得る	aCounter.most_common(k)
option: グレーを使う	color = 'gray'
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
データフレームの列を選んで重複を消す	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
n個の数値イテラブル	range(n)
文字列はキーワードか	keyword.iskeyword(s)
サーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
破線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashed')
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
耐火レンガ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
数列とリストについての散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
サーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
リストの要素数を見る	len(aList)
数列と数列の散布図を描き、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
文字列が全てアルファベットかどうか調べる	s.isalpha()
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
プロットの使途をスライドに設定する	sns.set(context='talk')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
バイナリモードでファイルをオープンして]、fとする	f = open(filepath, mode='rb')
各グループごとにデータフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
プロットの縦横比を等しくする	plt.axis('equals')
散布図のダイアモンド印を黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームをグループ化し、ある列に対し最小値を算出する	df.groupby('列A')['列B'].min()
線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
option: ライトコーラル色を使う	color = 'lightcoral'
データフレームの選択した列の欠損値をその最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
option: 貝殻に色を設定する	color = 'seashell'
実数を百の位で丸める	round(x, -2)
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
1からNまでの行列を作成する	np.arange(1, N+1)
オブジェクトのメモリビュー	memoryview(obj)
行列の列を選択する	aArray[:, 列番号]
option: ミディアムターコイズにフォントの色を指定する	color = 'mediumturquoise'
ピアソンとしてデータフレームの相関行列を算出する	df.corr(method='pearson')
option: 青色を使う	color = 'blue'
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
折れ線グラフのクロス印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
線を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
option: グラフの種類を実線に設定する	linestyle = 'solid'
紺碧色として散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
表のある列の値がxに等しくない行を取り出す	df[df['列A'] != x]
option: どの列もインデックスに設定しない	index_col = None
カラムのピアソンの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
縦棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
最後の列を除いた表データ	df[df.columns[:-1]]
折れ線グラフに下三角印を使う	plt.plot(データ列x, データ列y, marker='v')
データフレームをカンマ区切り形式にヘッダを付けず保存する	df.to_csv('file.csv', header=None)
option: ゴールデンロッドを用いる	color = 'goldenrod'
文字列を右寄せする	s.rjust(文字列幅)
ファイルをクローズする	f.close()
ホワイトスモーク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
散布図に赤い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
文字を文字コードにする	ord(ch)
option: 下三角印を描画する	marker = 'v'
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームのあるカラムを配列に変換する	df['列A'].values
折れ線グラフの星印を黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
棒グラフをミディアムオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
最大値と最小値を使ってデータを揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
数列と配列について散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の印をダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
正規表現で文字列を分割する	re.split(pattern, s)
数列と配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
option: アクア色を使う	color = 'aqua'
オレンジレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='orangered')
最後のカラムを除いたデータフレーム	df[df.columns[:-1]]
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
実行結果を緑色化する	f'\033[32m{value}\033[0m'
小数点数の正接を求める	math.tan(x)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
option: 大きい順にする	ascending = False
ひとつでも空白が文字列内にある	any(c.isspace() for c in s)
option: ゴールドを使う	color = 'gold'
重複した行のみを選択する	df[df.duplicated(keep=False)]
実数を実数で割って切り捨てる	x // y
折れ線グラフを赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
カラムの欠損値をその最小値で補完する	df['列A'].fillna(df['列A'].min())
ブランチドアーモンド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
小数点数の指数を算出する	math.frexp(x)[1]
二つの列からグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
既存のファイルパスを追加できるようにSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームの選択した列の欠損値を平均にする	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
データフレームの選択したカラムの中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
縦方向に２つの表データを連結する	pd.concat([df, df2], axis=0)
リストをn倍する	aList * n
タプルの先頭を捨てる	aTuple[1:]
配列とデータ列についての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
nからn2を引いてnに代入する	n -= n2
データフレームの指定したカラムの中に文字列と文字列がいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
日付データの年数を求める	aDate.year
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
ヒストグラムの色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
イテラブルとデータ列の散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
カウンタの項目の出現回数	aCounter[element]
option: 色をコーンズシルクに変更する	color = 'cornsilk'
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
データフレームの一部のカラムの相関行列をピアソンで求める	df[['列A', '列B']].corr(method='pearson')
線を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
イテラブルから両端キューを作る	collections.deque(iterable)
option: ゲインズボロ色を用いる	color = 'gainsboro'
option: インディゴを使用する	color = 'indigo'
option: 四角マーカーを用いる	marker = 's'
指定したカラムを千の位で丸めて整数にする	df['列A'].round(-3).astype(int)
等量でn個に配列を分割する	pd.qcut(aArray, n)
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
option: カデットブルーを使う	color = 'cadetblue'
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
データフレームを表示するとき表示可能な最大行数をnに変更する	pd.set_option('display.max_rows', n)
option: 色をホワイトスモークに設定する	color = 'whitesmoke'
アルファベットの文字列	string.ascii_letters
データフレームを2つの列によって昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの右三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
タプルをひとつ飛ばしで取り出す	aTuple[::2]
配列とリストの散布図を描いて右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
要素が辞書の値として含まれているか調べる	element in aDict.values()
文字列は文字列より辞書順で後か	s > s2
ヒストグラムを点線として描画する	plt.hist(データ列, linestyle='dotted')
データフレームの選択したカラムのどの値が最も出現するか調べる	df[['列A', '列B']].mode()
左三角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
データフレームの列名を置き換える	df.columns = columns
データフレームの全カラムを散布図でプロット化する	sns.pairplot(df)
オブジェクトは数値か	isinstance(obj, (int,float))
カラムの最頻値を算出する	mode, count = scipy.stats.mode(df['列A'])
リスト中の要素が少なくともひとつ真	any(aList)
option: グラフの色をフクシアに設定する	color = 'fuchsia'
アヤメのデータセットをデータフレームとしてロードする	df = sns.load_dataset('iris')
ホットピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
数式の積分を求める	sympy.integrate(e)
ヒストグラムをライトコーラル色を用いて描画する	plt.hist(データ列, color='lightcoral')
実数の平方根を求める	math.sqrt(x)
２次元リストをフラット化する	sum(aList)
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
option: グラフの色をライトグレーに指定する	color = 'lightgray'
整数nを半分にする	n //= 2
折れ線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームの相関行列を相関係数を使って求める	df.corr(method='pearson')
配列とデータ列について散布図をプロットして、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
モジュールとして自分自身を	sys.modules[__name__]
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
上限nの双方向キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
リストとリストの散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームの指定したカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
option: △印を描画する	marker = '^'
半透明の一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
データフレームの選択したカラムを万の位で四捨五入する	df[['列A', '列B']].round(-4)
文字列が識別子名	s.isidentifier()
データフレームから100行、ランダムサンプリングする	df.sample(100)
空の集合を使う	set()
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
ストリームをクローズする	f.close()
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
自然数の順列の総数	math.perm(n)
option: ダークサーモンを用いる	color = 'darksalmon'
文字列が文字列より辞書順で後	s > s2
タプルのキーに対応した値	aDict.get(key)
カテゴリ別で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
双方向キューが空でないかどうか確認する	len(deq) != 0
ダークオリーブグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
指定した列リストだけ表データの重複を見る	df.duplicated(subset=['列A', '列B'])
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
文字列をシンボルに変換する	sympy.Symbol(s)
オレンジレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
オプションで、出力先を標準出力に設定する	file = sys.stdout
データフレームの指定したカラムの記述統計量をまとめて見る	df['列A'].describe()
データフレームの名前リストで指定した列を除く	df.drop(columns, axis=1, inplace=True)
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
指定したカラムのカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
option: 色をリネンに変更する	color = 'linen'
ファイルを絶対ファイルパスにする	os.path.abspath(filepath)
大きい順にデータフレームを破壊的に複数の列によって並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
縦棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
文字コードを指定してTSVファイルからロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
文字列を下線付きで表示できる文字列にする	f'\033[4m{value}\033[0m'
データシリーズは正規分布からどの程度、歪んでいるか見る	ds.kurt()
データシリーズの中にいくつ文字列があるか数える	ds.isin([value]).sum()
モードでデータフレームの欠損値を補う	df.fillna(df.mode().iloc[0])
データフレームを表示するとき表示可能な行数を変更する	pd.set_option('display.max_rows', n)
折れ線グラフの下三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
目盛り線	plt.grid(color='#800080')
データフレームの選択したカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
2を底とする実数の対数	math.log2(x)
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
データシリーズの欠損値を50パーセンタイルで補う	ds.fillna(ds.median())
文字列は全て数値か調べる	s.isnumeric()
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='gray')
タイムスタンプデータからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
追加できるようにSJISで既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='shift_jis')
option: サドルブラウン色を用いる	color = 'saddlebrown'
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: グラフの色をチョコレートに変更する	color = 'chocolate'
線グラフをミディアムターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
平仮名をカタカナにする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
入力から二つの整数値を読み込む	A, B = map(int, input().split())
データフレームの指定したカラムの欠損値をxで埋める	df['列A'].fillna(x)
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
xの絶対値を求める	abs(x)
CSVファイルにデータフレームを小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
option: ゴーストホワイトを使う	color = 'ghostwhite'
折れ線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
ある列によってデータフレームを昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ミディアムスプリンググリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
文字列を水色でプリントする	print(f'\033[36m{value}\033[0m')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
1からnまでの整数列	list(range(1, n+1))
要素がマップの値として含まれている	element in aDict.values()
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
双方向キューの右にタプルの各要素を追加する	deq.extend(iterable)
リストをカンマ区切りで表示する	print(*aList, sep=',')
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
プロットの描画でパステル調に色を使う	sns.set(pallete='pastel')
散布図を黄色色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellow')
配列とリストについて散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
FIXME	np.linalg.eig(aArray)
xが1もしくは2もしくは3に等しいか確認する	x == 1 or x == 2 or x == 3
option: マーカーを左三角に変える	marker = '<'
option: 改行コードを動作環境依存にセットする	newline = None
ファイルパスを書き込みモードでオープンする]	open(filepath, mode='w')
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
データフレームの未入力値を直前の値で補完する	df.fillna(method='ffill')
線形回帰モデルの予測値と目的変数を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームの中にいくつ日付データがあるか数える	df.isin([value]).sum()
kを底とする対数を求める	math.log(x, k)
nからn2の値を引いてnとする	n -= n2
x座標の表示範囲を変更する	plt.xlim(最小値, 最大値)
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの星印の大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
option: グラフの色をハニーデューに変更する	color = 'honeydew'
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
第二引数のファイルの名前	sys.argv[1]
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
最後に追加した値をタプルからポップする	aDict.popitem()
ふたつの列を組み合わせてグループ化し、最小値を算出する	df.groupby(['列A', '列B'], as_index=False).min()
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
浮動小数点数の分数近似	q.limit_denominator(max_denominator=1000000)
線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
日付時刻データが火曜日か	aDatetime.weekday() == 1
データフレームの最頻値	df.mode()
データフレームの列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
リネン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
改行なしで標準入力から1行だけ読む	sys.stdin.readline().rstrip()
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
散布図をrgbの丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの一部のカラムを百の位で丸める	df[['列A', '列B']].round(-2)
option: ビスク色を使う	color = 'bisque'
配列をn個に等間隔でビン分割する	pd.cut(aArray, n)
データ列の折れ線グラフを描画して、RGBを用いて色を設定する	plt.plot(データ列x, データ列y, color='#800080')
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
option: 色をスチールブルーに設定する	color = 'steelblue'
小数点数の逆双曲線正弦を計算する	math.asinh(x)
データフレームをグループ化し、ある列に対し分散を求める	df.groupby('列A')['列B'].var()
ライトスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
折れ線グラフにダイアモンド印を使う	plt.plot(データ列x, データ列y, marker='D')
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
リストとイテラブルの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
二つのカラムで昇順にデータフレームを整列する	df.sort_values(by=['列A', '列B'], ascending=True)
データフレームのKurtosisを計算する	df.kurt()
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
option: パープル色を使用する	color = 'purple'
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: グレー色を使う	color = 'grey'
タブで区切って２つの数値を表示する	print(value, value2, sep='\t')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
option: ライトスチールブルーを用いる	color = 'lightsteelblue'
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
複数のデータフレームを縦方向に一つにまとめる	pd.concat([df, df2, df3], axis=1)
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
折れ線グラフのマーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
フォレストグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
２つの最も大きい値を求める	max(x, y)
オブジェクトはリストクラス	isinstance(obj, list)
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
欠損値のある行を除く	df.dropna(inplace=True)
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
ダークレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
データフレームの下位25％	df.quantile(0.75)
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
グリッド線	plt.grid(linestyle='--')
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
紺色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
小麦色色として線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
エクセルファイルからシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
列を2回あわせた直積	itertools.product(iterable, repeat=2)
散布図を濃い青色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームの全カラムの散らばりを描く	sns.pairplot(df)
日付データの曜日を整数で使う	aDate.weekday()
ヒストグラムをグレー色を使って描画する	plt.hist(データ列, color='gray')
縦棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
イテラブルと配列の散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
３自然数のLCM	math.lcm(n, n2, n3)
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
プログラムのファイル名	sys.argv[0]
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
変数をシアンでプリントする	print(f'\033[36m{value}\033[0m')
配列の行ごとの最大値	np.max(aArray, axis=1)
option: 複素数型を使う	dtype = bool
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: グラフを破線に指定する	linestyle = 'dashed'
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
一点鎖線を用いてリストの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
黄色で数値を出力する	print(f'\033[33m{value}\033[0m')
マッピングをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
変数を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
青いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのあるカラムの中に日付データが含まれるか調べる	df['列A'].isin([value])
option: ダークターコイズにグラフの色をセットする	color = 'darkturquoise'
ファイルを追加モードでオープンして]fとする	f = open(filepath, mode='a')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
実数を複素数にする	complex(x)
グリーンイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
グラフの横軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
ダークレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
サドルブラウンにヒストグラムの色をセットする	plt.hist(データ列, color='saddlebrown')
データフレームをカテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
リストが全て真か	all(aList)
カウンタを辞書で更新する	aCounter.update(aDict)
折れ線グラフのポイント印の色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
option: グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
縦棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
nを二進数文字列に変換する	bin(n)[2:]
リストと配列の散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
辞書をカウンタに変換する	collections.Counter(aDict)
ヒストグラムをライトゴールドロディイエロー色を使って描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ベクトルの要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
option: ミディアムバイオレットレッドにフォントの色を設定する	color = 'mediumvioletred'
タイムスタンプデータが金曜日かどうか調べる	aDatetime.weekday() == 4
配列の行ごとの最小値	np.min(aArray, axis=1)
イテラブルを累加した列	itertools.accumulate(iterable)
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
二つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
ビン数nを用いて配列をビン分割する	pd.cut(aArray, n)
データフレームの先頭100行を抽出する	df.head(100)
インタプリタの再帰の最大回数	sys.getrecursionlimit()
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
データフレームの先頭100行	df.head(100)
縦軸の目盛りに文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
青い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
オブジェクトは集合型のインスタンスか	isinstance(obj, set)
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
線グラフの色をアンティークホワイトにセットする	plt.plot(データ列x, データ列y, color='antiquewhite')
t分布型確率的近傍埋め込み法でパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
二つのオブジェクトが等しいかどうか調べる	obj == obj2
データフレームを二つの列でまとめたグループ	df.groupby(['列A', '列B'])
ファイルパスをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
リストと配列について散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
表データのあるカラムの曜日の名前	df['列A'].dt.weekday_name
折れ線グラフに大バツ印を用いる	plt.plot(データ列x, データ列y, marker='X')
アリスブルー色としてヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
散布図に▽マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
option: グラフの色をスノーに設定する	color = 'snow'
ファイルパスをUTF8としてオープンする]	open(filepath, encoding='utf-8')
データフレームの指定したカラムの不偏標準偏差	df['列A'].std()
辞書の値の一覧	aDict.values()
option: エクセルファイルシートの名前を指定する	sheet_name = ['A', 'B']
タプルをコピーする	dict(aDict)
全要素を０で初期化した整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int)
ベクトルの演算を行う	import numpy as np
データフレームの指定したカラムの第一四分位数を求める	df['列A'].quantile(0.25)
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームの重複を調べる	df.duplicated()
棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
リストのn番目からn2番目まで	aList[n:n2]
option: ポイントマーカーを使う	marker = '.'
最大長nの両端キューをイテラブルから生成する	collections.deque(iterable, maxlen=n)
option: ホットピンク色を使う	color = 'hotpink'
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
option: 下三角マーカーを描画する	marker = 'v'
ISO書式の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
y座標だけグリッド線	plt.grid(axis='y')
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
option: フォントの色をパールバイオレットレッドに変更する	color = 'palevioletred'
入力から二つの整数を読む	A, B = map(int, input().split())
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
十六進数字を使う	string.hexdigits
option: 耐火レンガにグラフの色を設定する	color = 'firebrick'
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
昇順にリストの値を並べ変える	sorted(aList, reverse=True)
データフレームの一部のカラムの欠損値を直前の値で置き換える	df[['列A', '列B']].fillna(method='ffill')
option: ダークオレンジにグラフの色を設定する	color = 'darkorange'
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
配列の列ごとの平均値	np.mean(aArray, axis=0)
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
集合＼集合	aSet.difference(aSet2)
要素が集合のメンバーでないか調べる	element not in aSet
option: トマトにフォントの色を設定する	color = 'tomato'
イテラブルから計数器を生成する	collections.Counter(iterable)
指定したカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
option: グラフの色をグレーに設定する	color = 'grey'
目盛り線	plt.grid(linestyle='--')
option: ビスクにグラフの色を設定する	color = 'bisque'
３つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームを表示するとき表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
xを論理値に変換する	bool(x)
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
リストとリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームからカラムを二つ選択する	df[['列A', '列B']]
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
カテゴリでグループ化して、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
データ列のユニークな値	ds.unique()
ミディアムバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
マップからキーで指定された値をポップする	aDict.pop(key)
実数の双曲線余弦	math.cosh(x)
文字コードtextとして既存のファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームの選択した列を百の位で丸めて整数にする	df[['列A', '列B']].round(-2).astype(int)
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
正接の逆数	math.atan(x)
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
nの二進数表現	bin(n)
データフレームのカラムの欠損値を前の行の値に変更する	df['列A'].fillna(method='ffill')
青い破線としてラインをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
指定したカラムの値を正規表現でまとめて置換する	df['列A'].replace(pattern, repl, regex=True)
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ベクトルの累積和を求める	np.cumsum(aArray)
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
文字列の左側から部分文字列を探す	s.find(sub)
xが1、もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストに文字列を加える	aList.append(element)
リストをn個にビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列を最初の部分文字列で二分し、残りの文字列を求める	s.partition(sub)[-1]
option: グレー色を使用する	color = 'gray'
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
ヒストグラムを上限から下限までの上限下限でプロットする	plt.hist(データ列, range=(start, end))
複数の列からグループ化し、分散を計算する	df.groupby(['列A', '列B'], as_index=False).var()
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
数列とリストについて散布図を描画して丸マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
プラム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
プロット描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
２つの列によってデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ある列の値の最大値	df.groupby('列A').max()
2つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
イテラブルとリストについての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
nがn2で割り切れるかどうか	n % n2 == 0
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
プロットの描画で色差別なく色を用いる	sns.set(pallete='colorblind')
折れ線グラフとしてデータフレームのカラムを描画する	plt.plot(df[column], df[column])
全数字	string.digits
組を展開して表示する	print(*aTuple)
option: ダークグリーン色を用いる	color = 'darkgreen'
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: 色を赤に設定する	color = 'red'
散布図にrgbの▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
点線にラインの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
辞書をJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
部分集合か調べる	aSet.issubset(aSet2)
データフレームの指定したカラムの第三四分位数	df['列A'].quantile(0.75)
SJISでファイルパスを書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
CSVファイルをn番目のカラムをインデックスとしてロードする	pd.read_csv('file.csv', index_col=n)
データフレームのn行目を選択する	df.loc[n]
option: エラーを無視するように設定する	errors = 'ignore'
折れ線グラフにラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
現在の日付	datetime.date.today()
自然数のGCD	math.gcd(n, n2)
option: ダークバイオレットにフォントの色を指定する	color = 'darkviolet'
ヒストグラムをパールバイオレットレッド色として描画する	plt.hist(データ列, color='palevioletred')
縦棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
イテラブルを行列に変換する	np.array(iterable)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
タプルに別の辞書の項目を更新する	aDict.update(aDict2)
折れ線グラフに青い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
option: レモンシフォン色を使用する	color = 'lemonchiffon'
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
部分文字列が文字列中に含まれない	sub not in s
データフレームのある列の不偏標準偏差	df['列A'].std()
nilに等しい値	None
ある列の文字列が部分文字列で始まる行を選ぶ	df[df['列A'].str.startswith(部分文字列)]
青い一点鎖線として配列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームを二つの列によって昇順に整列して、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
２つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
option: 昇順にする	ascending = True
文字列リストにイテラブルを変換して、タブで結合する	'\t'.join(map(str, iterable))
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
オブジェクトはタプルの要素でないか	element not in aTuple
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
データシリーズの年を使う	ds.dt.year
数値時刻の列から日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームの一部の列の欠損値を前の行の値で埋める	df[['列A', '列B']].fillna(method='ffill')
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
十六進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームを横に連結する	pd.concat([df, df2], axis=1)
浮動小数点数の逆余弦	math.acos(x)
ある列の文字列が正規表現にマッチするデータを抽出する	df[df['列A'].str.match(正規表現)]
変数がマイナス無限大に近づくときの数式の極限値を算出する	sympy.limit(e, z, -oo)
折れ線グラフの▽マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データシリーズの母標準偏差を求める	ds.std(ddof=0)
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
文字列中に部分文字列がないか	sub not in s
モジュールを検索するパスを列挙する	sys.path
文字列の無限列を得る	itertools.repeat(element)
データフレームのある列の値がxより小さい行を選択する	df[df['列A'] < x]
データフレームをグループ化し、ある列の基本統計量を求める	df.groupby('列A').describe()['列B']
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
部分文字列が文字列中に含まれないかどうか	sub not in s
3つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
オールドレース色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
文字列を部分文字列で二つに区切って、後半の文字列を見る	s.partition(sub)[-1]
カウンタから列を出現回数して引く	aCounter.subtract(iterable)
2つの浮動小数点数がほぼ等しいか調べる	math.isclose(x, x2)
線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列を部分文字列で二分し、最初の文字列を見る	s.partition(sub)[0]
散布図の星印の大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
データフレームの選択した列の中にある文字列と文字列の合計をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
符号付きでnをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
文字列の中のASCII限定としてパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
カウンタをリストにする	list(aCounter)
データフレームの一部のカラムの統計量	df[['列A', '列B']].describe()
標準エラー	sys.stderr
文字列中の正規表現を新しい文字列を使って置き換える	re.sub(pattern, newsub, s)
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データシリーズの最頻値を求める	ds.mode()
ディープスカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: ▽印を描画する	marker = 'v'
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームをソートして下位を取り出す	df.sort_values('キーとなる列').tail(n)
平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
白色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
最大長を指定して両端キュー	collections.deque(maxlen=n)
偽陽性を避けたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
アクアマリン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ファイルの絶対パス	os.path.abspath(filepath)
行列を2次元1列に変形する	aArray.reshape(-1, 1)
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
散布図を赤い大バツマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
データシリーズの中の未入力値の合計を数える	ds.isna().sum()
nをバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
折れ線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームの指定したカラムの第一四分位数	df['列A'].quantile(0.25)
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームの列を散布図でグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
データフレームの中にある文字列と日付データの合計を数える	df.isin([value, value2]).sum()
データフレームのある列をNaNも加えてワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], dummy_na=True)
全空白文字	string.whitespace
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
データフレームの一部のカラムのKurtosis	df[['列A', '列B']].kurt()
要素がタプルの値に含まれていないか調べる	element not in aDict.values()
折れ線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームを二つの列の値によってまとめたグループ	df.groupby(['列A', '列B'])
半透明の実線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
句点文字を全て使う	string.punctuation
データフレームをカテゴリにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
CSVファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
ヒストグラムを青色を使って描画する	plt.hist(データ列, color='blue')
セット＼集合	aSet.difference(aSet2)
ファイルパスをバイナリモードで開く]	open(filepath, mode='rb')
日付時刻データが水曜日かどうか判定する	aDatetime.weekday() == 2
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
文字列中の部分文字列の登場回数をカウントする	s.count(sub)
分類木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
ダークシアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
双方向キューの最後にイテラブルの要素を入れる	deq.extend(iterable)
縦棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
データフレームとしてエクセルを読む	pd.read_excel('file.xlsx')
配列と配列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
横棒グラフをダークサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='darksalmon')
文字列が全てアスキー文字か調べる	s.isascii()
データフレームのあるカラムを日付データに変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
option: グラフの色をミディアムスレートブルーに指定する	color = 'mediumslateblue'
散布図をパパイヤウィップ色を使って描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
インデント付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
線グラフの色をライトサーモンにする	plt.plot(データ列x, データ列y, color='lightsalmon')
option: ライトグリーン色を使う	color = 'lightgreen'
オブジェクトは整数クラス	isinstance(obj, int)
データフレームの列をグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図の印を▼にする	plt.scatter(データ列x, データ列y, marker='v')
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
文字列を二分する	s.partition(sep)
データフレームの中の欠損値の個数を数える	df.isna().sum()
大バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
数列と配列について散布図を描画してマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
双方向キューが空かテストする	len(deq) == 0
数列のピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby('列A').describe()
リストを中央値で分割する	pd.qcut(aList, 2)
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
option: 線を太くする	linewidth = 3.0
行列にはいくつ要素があるか調べる	aArray.size
最大値でデータフレームの選択した列のNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ミスティローズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
二変数の最小値を求める	min(x, y)
全要素を初期値で初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
散布図を黒いバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='k')
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
カラム名を指定して2つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
文字列をコロンで区切って、列挙する	s.split(':')
データフレームを四捨五入する	df.round()
データシリーズを100の位で丸めて整数型にする	ds.round(-2).astype(int)
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
1からnまでの整数列を得る	list(range(1, n+1))
小数点以下の表示精度を変更する	pd.set_option('precision', n)
行列の行ごとの標準偏差を調べる	np.std(aArray, axis=1)
散布図を白色を使って描画する	plt.scatter(データ列x, データ列y, color='white')
組内の要素が全て真かどうか調べる	all(aTuple)
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
配列とイテラブルについて散布図を描画し、、左三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
データフレームの指定した列のどの値が最も出現するか見る	df['列A'].mode()
ベクトルを縦ベクトルに変形する	aArray.reshape(-1, 1)
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: 線の種類を一点鎖線に指定する	linestyle = 'dashbot'
option: 色を濃いシアンに変更する	color = 'darkcyan'
パターンにマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
nがn2よりも大きいかどうか確認する	n > n2
整数の順列の総数	math.perm(n)
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
実数が無限大	math.isinf(x)
オブジェクトがリストの要素	element in aList
茶色色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
等差数列をベクトルにする	np.arange(開始値, 終了値, 等差)
year年month月day日hour時minute分のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
組をn回連結する	aTuple * n
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
リストと配列について散布図を描画し、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
文字列をASCIIコード列に変換する	[ord(ch) for ch in s]
文字列の開始位置以降が部分文字列で始まるか確認する	s.startswith(sub, start)
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
nが奇数か確認する	n % 2 == 1
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
n割るn2	n / n2
折れ線グラフをクリムゾン色を使って描画する	plt.plot(データ列x, データ列y, color='crimson')
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
ヒストグラムをゲインズボロ色を使って描画する	plt.hist(データ列, color='gainsboro')
データフレームのNaNをモードに指定する	df.fillna(df.mode().iloc[0])
10を底とする実数の対数を求める	math.log10(x)
オブジェクトが組の要素でない	element not in aTuple
プロットの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
マルーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
option: グラフの色をダークオレンジにセットする	color = 'darkorange'
散布図のバツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ヒストグラムを２つ並べてプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
配列と配列の散布図をプロットして、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
要素が全て1の配列	np.ones(要素数, dtype=np.int)
データ列の各値が何回出現するか確認する	ds.value_counts()
option: フォントの色をドジャーブルーに設定する	color = 'dodgerblue'
xが真か調べる	bool(x)
上限のある両端キューを作る	collections.deque(maxlen=n)
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: 読み込まないフッタをnに設定する	skipfooter = n
データシリーズの欠損値をその最小値で埋める	ds.fillna(ds.min())
フォレストグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームの平均と信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をミディアムバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='mediumvioletred')
データ列の移り変わりを折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
赤いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
文字列の中の複数行対応としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: シスルにグラフの色を変更する	color = 'thistle'
option: グラフの色をミントクリームにセットする	color = 'mintcream'
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフに▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
クラス分類をガウス過程でする	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
ミディアムオーキッド色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
ひとつでも非大文字が文字列中に含まれる	any(not c.isupper() for c in s)
特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
リストと数列についての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
ファイルをUTF8を使って書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
パラメータについて数式の積分を求める	sympy.integrate(e, z)
二つの関係が部分集合	aSet.issubset(aSet2)
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
折れ線グラフを濃いシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
入力ストリームを一行ずつ読み込む	f.readline()
項目名が辞書にないとき、要素を追加する	aDict.setdefault(key, element)
実数を万の位で丸める	round(x, -4)
指定したカラムの標本分散	df['列A'].var(ddof=0)
ラベンダー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
指定した列によってデータフレームをグループ化し要約統計量を計算する	df.groupby('列A').describe()
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
コマンド引数を一覧として	sys.argv[1:]
文字列をn回繰り返すイテラブルを得る	itertools.repeat(element, n)
option: ライムに色を設定する	color = 'lime'
実行結果を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
OS名を調べる	sys.platform
データフレームの選択したカラムのNaNを最大値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: ライトイエロー色を用いる	color = 'lightyellow'
部分文字列が文字列中に含まれるか調べる	sub in s
xが一桁の数か調べる	-9 <= x <= 9
散布図に黒いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図をミッドナイトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
ひとつでも数字が文字列内にあるかテストする	any(c.isdigit() for c in s)
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
日付データが火曜日かどうか確認する	aDate.weekday() == 1
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ライトコーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
昇順にリストをソートする	sorted(aList, reverse=False)
データシリーズの平均値を算出する	ds.mean()
option: グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
MSEを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
リストとリストについての散布図に赤い上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
nがn2以下、それか、n3以上か調べる	n <= n2 or n >= n3
グラフのy軸を対数目盛に変更する	plt.yscale('log')
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
散布図をサドルブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: グラフの色をダークターコイズに指定する	color = 'darkturquoise'
双方向キューのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
nilに等しい識別子	None
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
指定した列のカテゴリで集計し平均値を求める	df.groupby('列A').mean()
二つの列の値によってデータフレームを集計する	df.groupby(['列A', '列B'])
集合の更新不能版	frozenset(aSet)
線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
ファイルパスをUTF8として書き込みできるように開く]	open(filepath, mode='w', encoding='utf-8')
リストの要素をソートする	sorted(aList)
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
貝殻色でヒストグラムを描画する	plt.hist(データ列, color='seashell')
ヒストグラムをクリムゾン色として描画する	plt.hist(データ列, color='crimson')
nまたはn2	n or n2
整数nの八進文字列	oct(n)[2:]
指定した列だけ、データフレームの重複を見る	df.duplicated(subset='列A')
今日が金曜日	datetime.datetime.today().weekday() == 4
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
文字列からformatのパターンを用いてタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
横棒グラフをダークターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
配列とリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
bとn2から成るペアを作る	(n, n2)
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
キューの値数	len(deq)
折れ線グラフの色をチョコレートにセットする	plt.plot(データ列x, データ列y, color='chocolate')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
横棒グラフをホットピンク色を使って描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
円グラフとして数列の割合を可視化する	plt.pie(データ列, startangle=90)
ライトグレー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
指定したカラムの欠損値を前の行の値で埋める	df['列A'].fillna(method='ffill')
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
option: インデックスを連番に変更する	index_col = None
配列の最小を求める	np.min(aArray)
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
有理数を使用する	import fractions
グラフの補助目盛りを有効にする	plt.minorticks_on()
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
ヒストグラムを小麦色色として描画する	plt.hist(データ列, color='wheat')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
データフレームの上位25％を算出する	df.quantile(0.25)
option: バッファリングを無効にする	buffering = 0
ダークスレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
二つの列で大きい順に破壊的にデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
配列とリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
リストとデータ列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
option: 無視するフッタをnに減らす	skipfooter = n
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
文字列は片仮名か調べる	('ァ' <= ch <= 'ン')
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
散布図をミントクリーム色を用いて描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームのカラムを各グループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ミディアムターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフの左三角印の色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
数式のn階微分を求める	sympy.diff(e, z, n)
折れ線グラフに▲マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
option: ライトグリーン色を用いる	color = 'lightgreen'
データフレームのカラムの各値の出現数	df[col].value_counts()
実数の双曲線正接の逆数	math.atanh(x)
棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
分割数nでデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
カンマ区切りのファイルのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
集合から要素を全て取り除く	aSet.clear()
指定したカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
option: グラフの色をブラックに設定する	color = 'black'
データフレームの指定したカラムの不偏分散	df['列A'].var(ddof=1)
ふたつの集合は共通の要素を持たないか確認する	aSet.isdisjoint(aSet2)
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームが重なるいるか調べる	df.duplicated()
ふたつの集合が共通の要素を持たないかテストする	aSet.isdisjoint(aSet2)
ヒストグラムの色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
クロスマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
option: タンにフォントの色を変更する	color = 'tan'
棒グラフの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
データ列の推移を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
縦棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
空の階層化マップを生成する	collections.ChainMap()
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図の丸印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
配列の各要素のアダマール積を求める	np.multiply(aArray, aArray2)
文字列の後ろから空白を除去する	s.rstrip()
変数を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
option: グラフの色をネイビーに設定する	color = 'navy'
データフレームの選択した列の中の未入力値の合計をカウントする	df[['列A', '列B']].isna().sum()
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
配列の歪度を求める	scipy.stats.skew(配列, bias=False)
データシリーズの中に含まれる文字列の合計をカウントする	ds.isin([value]).sum()
データフレームの中の列をビニングする	pd.cut(df[col], aList)
二つのデータフレームを列名を指定して内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
折れ線グラフをシルバー色として描画する	plt.plot(データ列x, データ列y, color='silver')
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
実数の仮数	math.frexp(x)[0]
0で全要素を初期化した配列	np.zeros(要素数)
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
option: ラベンダーにフォントの色をする	color = 'lavender'
option: パパイヤウィップ色を使う	color = 'papayawhip'
option: 色の透明度を指定する	alpha = 0.5
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
既存のベクトルを元にして全要素が1の配列	np.ones_like(aArray)
nの3乗を求める	n ** 3
３２ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
nが-9以上、9以下か調べる	-9 <= n <= 9
八進文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
リストを青色で表示する	print(f'\033[34m{value}\033[0m')
折れ線グラフの星印の大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
スタックの値を反転する	deq.reverse()
マッピングにキーが存在しない時、要素を追加する	aDict.setdefault(key, element)
ガウス過程を用いて回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
option: ラベンダーブラッシュにグラフの色を設定する	color = 'lavenderblush'
option: ローングリーンを使う	color = 'lawngreen'
書式をマッピングでフォーマットする	formatText.format_map(aDict)
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
組の合計	sum(aTuple)
横棒グラフをトマト色を使って描画する	plt.barh(データ列x, データ列y, color='tomato')
線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
折れ線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
表データが重複している	df.duplicated()
リストとリストの散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
空のロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
数列と配列について散布図を描画してマーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
グリーンイエロー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
nをn2で値の切り上げ	(n + n2 - 1) // n2
縦棒グラフをインディゴ色を用いて描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームの欠損値を50パーセンタイルに指定する	df.fillna(df.median())
行列のユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
タイムスタンプデータのタイムゾーン	aDatetime.timetz()
散布図をライトコーラル色を使って描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
黒いポイントマーカーをイテラブルと配列の散布図に描く	plt.plot(データ列x, データ列y, marker='.', c='k')
ロードされたモジュールの一覧を知る	sys.modules
文字列内に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
青い破線を用いてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
見やすいグラフを描画する	import seaborn as sns
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
year年month月の日付	datetime.date(year=year, month=month, day=1)
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
要素はマッピングの値に含まれていないかどうか調べる	element not in aDict.values()
タプルをソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
ヒストグラムをサンディーブラウン色を使って描画する	plt.hist(データ列, color='sandybrown')
縦棒グラフを描画して、バーの横幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
データ列の一意な値を調べる	ds.unique()
option: フォントの色をビスクにセットする	color = 'bisque'
散布図を赤い上三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: カーキを使う	color = 'khaki'
棒グラフをペールグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='palegreen')
カウンタをゼロにする	aCounter.clear()
空のチェーンマップを作る	collections.ChainMap()
散布図の三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
棒グラフをホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='white')
データフレームから型の列のみ取り出す	df.select_dtypes(ty)
データフレームのカラムのスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
option: 32ビット整数型を使用する	dtype = np.int16
列のUNIX秒を日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
option: トマトにグラフの色を設定する	color = 'tomato'
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフのアルファ値をセットする	plt.plot(データ列x, データ列y, alpha=0.5)
アルファベットの小文字を全部見る	string.ascii_lowercase
最後の部分文字列で文字列を二分し前半の文字列を使う	s.rpartition(sub)[0]
表データの数値を全部小数点以下n桁で丸める	df.round(n)
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategray'
option: フォントの色を青紫に変更する	color = 'violet'
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
option: ライトブルー色を使用する	color = 'lightblue'
データシリーズの値がNaNか調べる	ds.isna()
データ列を箱ひげ図で可視化する	plt.boxplot(データ列)
要素を両端キューにエンキューする	deq.appendleft(element)
データフレームを表示するとき、表示可能な列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
新しい回帰木モデルを準備する	model = sklearn.tree.DecisionTreeRegressor()
ゴールド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
タプルの先頭を見る	aTuple[0]
option: グラフの色を淡いピンク色に変更する	color = 'lightpink'
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
空白	' '
データシリーズの歪度	ds.kurt()
横棒グラフをミントクリーム色を使って描画する	plt.barh(データ列x, データ列y, color='mintcream')
データフレームの列をヒストグラムで描く	plt.hist(df[column])
配列の行ごとの分散	np.var(aArray, axis=1)
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
サドルブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='saddlebrown')
タイタニック号のデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
データシリーズの中に文字列があるか	ds.isin([value])
フローラルホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='floralwhite')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
現在が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
リストの相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
データフレームが正規分布からどの程度尖っているか確認する	df.skew()
本日の日付	datetime.date.today()
縦棒グラフを描画してラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データ列のユニークな要素	ds.unique()
データシリーズをValueMapでまとめて置き換える	ds.replace(ValueMap)
散布図を青色として描画する	plt.scatter(データ列x, データ列y, color='blue')
イテラブルとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
新しい文字列でパターンにマッチした文字列を置き換える	re.sub(pattern, newsub, s)
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
最大長を指定して、双方向キューを作る	collections.deque(maxlen=n)
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
リストとリストについて散布図を描画してマーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
データ列の変遷を半透明の破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
リストと配列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
CSVをn番目の列をインデックスとしてロードする	pd.read_csv('file.csv', index_col=n)
クロス印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
配列と配列の散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
データフレームから重複を破壊的に消す	df.drop_duplicates(inplace=True)
イテラブルを文字列リストに変換して、カンマで結合する	','.join(map(str, iterable))
option: グラフの色をスラグレーに変更する	color = 'slategray'
カーネル密度による分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
相関係数でデータフレームの選択したカラムの相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
ある列の値がx以上、y以下のデータを抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
データフレームのあるカラムの年を使う	df['列A'].dt.year
行列のユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
xをブール値に変換する	bool(x)
縦棒グラフをサンディーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='sandybrown')
横棒グラフをミディアムオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
バイトオーダを知る	sys.byteorder
リストとリストについて散布図を描画し、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフの色をカデットブルーにする	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームのstart行目からend行目まで選ぶ	df[start:end]
マッピングの項目名に対応した値	aDict.get(key)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
読み込み用にファイルをオープンして]fとする	f = open(filepath, mode='r')
データフレームの分散	df.var()
指定したカラムがどの程度、正規分布から歪んでいるか見る	df['列A'].kurt()
ベクトルの行列式を求める	np.linalg.det(aArray)
日付時刻データが月曜日か	aDatetime.weekday() == 0
整数nを十六進表記に変換する	hex(n)
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
箱ひげ図に簡単な説明をつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
プロットを用いる準備をする	import matplotlib.pyplot as plt
折れ線グラフを▼印で描画する	plt.plot(データ列x, データ列y, marker='v')
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ヒストグラムの色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
カーネル密度による分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの指定したカラムの中に文字列と文字列があるか調べる	df['列A'].isin([value, value2])
option: ミディアムブルーにグラフの色をする	color = 'mediumblue'
option: ダークサーモン色を使う	color = 'darksalmon'
option: 先頭のカラムをインデックスに減らす	index_col = 0
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
多い順にカウンタを列挙する	aCounter.most_common()
nが1、もしくは2かどうか	n == 1 or n == 2
空のカウンタを生成する	collections.Counter()
フィシャー流の尖度	scipy.stats.kurtosis(配列, fisher=True, bias=False)
イテラブルの重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
縦棒グラフをダークサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='darksalmon')
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
オブジェクトがあるクラス	isinstance(obj, クラス)
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
n足すn2を求める	n + n2
イエローグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
黒い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
棒グラフを青緑色を用いて描画する	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフをタン色を用いて描画する	plt.plot(データ列x, データ列y, color='tan')
option: サーモンを使う	color = 'salmon'
集合のすべての要素が別の集合に含まれる	aSet.issubset(aSet2)
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
ある列の文字列が部分文字列で始まる行を取り出す	df[df['列A'].str.startswith(部分文字列)]
option: 未入力値を含めない	dropna = True
赤い四角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
option: 大バツマーカーを使う	marker = 'X'
表データのインデックスの名前をまとめて付け直す	df.rename(index={x: y})
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
線グラフをスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームの一部のカラムの中に文字列と日付データがあるかどうか確認する	df[['列A', '列B']].isin([value, value2])
ダークグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
回帰分析をPLSで行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームの選択したカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
黒い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
option: グラフの色をダークカーキに変更する	color = 'darkkhaki'
option: ミディアムブルー色を使う	color = 'mediumblue'
n個の整数リスト	list(range(n))
ヒストグラムを点線に指定する	plt.hist(データ列, linestyle='dotted')
文字列のサフィックスが部分文字列か調べる	s.endswith(sub)
散布図の▲印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
データ列をビン数nで分割する	pd.cut(ds, n)
キーが辞書上で定義済みか	key in aDict
プロットにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
カウンタの共通部分	aCounter & aCounter2
データシリーズの文字列を欠損値にする	ds.replace(値, np.nan)
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
ゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
空白で文字列を区切って、整数リストに変換する	map(int, s.split())
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
要素が全て1の配列を作る	np.ones(要素数, dtype=np.int)
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
データフレームのNaNをxで埋める	df.fillna(x)
正規分布にしたがって配列をランダムに生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
二つの文字列は同じでないかどうか調べる	s != s2
データフレームの列を名前を変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
日付データが金曜日か確認する	aDate.weekday() == 4
散布図の△マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの一部のカラムの値をまとめて正規表現patternでreplに変更する	df[['列A', '列B']].replace(pattern, repl, regex=True)
数式を簡単にする	sympy.sympify(e)
黄色で値をプリントする	print(f'\033[33m{value}\033[0m')
縦棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
クラス分類の適合率を算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ピンクにヒストグラムの色を指定する	plt.hist(データ列, color='pink')
コマンド引数の一覧を得る	sys.argv[1:]
データフレームのカラムの空文字を未入力値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
青色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
数列とリストについて散布図を描き、、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
パパイヤウィップ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
文字列を最後の部分文字列で分けた場合の後半の文字列	s.rpartition(sub)[-1]
標準出力	sys.stdout
既存の配列を元にして全要素が1の配列	np.ones_like(aArray)
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
本日のタイムスタンプを求める	datetime.datetime.today()
新しいロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
黒い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
option: グラフの色をスプリンググリーンにセットする	color = 'springgreen'
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
アクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
行列の累積積	np.cumprod(aArray)
指定したカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
集合を更新不能な集合にする	frozenset(aSet)
折れ線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームからカテゴリデータの列名の一覧	df.select_dtypes('object').columns
option: リネンにグラフの色をセットする	color = 'linen'
文字列をn回繰り返すイテラブル	itertools.repeat(element, n)
線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列の一覧	df.info()
トマト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
文字列中に部分文字列がある	sub in s
箱ひげ図でリストを作図する	plt.boxplot(データ列)
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
2つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
option: フォントの色をスラグレーに設定する	color = 'slategray'
ヒストグラムをスチールブルー色を用いて描画する	plt.hist(データ列, color='steelblue')
配列とリストの散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
今日が何日か知る	datetime.datetime.today().day
線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
option: ダークシアグリーン色を使用する	color = 'darkseagreen'
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データ列をn個に等しい量になるようにビン分割する	pd.qcut(ds, n)
外れ値を除いたデータフレームのカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
タプルの長さを知る	len(aTuple)
散布図の印を四角印にする	plt.scatter(データ列x, データ列y, marker='s')
データを最大値として正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
リストと配列についての散布図に▽マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
最大値を用いて正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
rgbの大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: データ型として整数型を使う	dtype = np.int
option: グラフの色をドジャーブルーに変更する	color = 'dodgerblue'
数列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
現在が木曜日か調べる	datetime.datetime.today().weekday() == 3
計算機イプシロン	sys.float_info.epsilon
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
昇順にリストの要素をソートする	sorted(aList, reverse=False)
データフレームの指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
珊瑚色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
縦棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
横棒グラフをティール色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
ユニコードに対応する文字を使う	chr(unicode)
データフレームを二つの列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ファイルから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
option: 黄色に色を設定する	color = 'yellow'
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ファイルからn文字読む	f.read(n)
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategrey')
ダークシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkseagreen')
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
赤い点線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
外れ値を除いたデータフレームのカラムの分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データシリーズのNaNを中央値に設定する	ds.fillna(ds.median())
データフレームの一部のカラムの中に文字列があるか調べる	df[['列A', '列B']].isin([value])
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
predicateFuncを適用したとき真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
データシリーズは何秒か知る	ds.dt.second
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
ミントクリーム色としてヒストグラムを描画する	plt.hist(データ列, color='mintcream')
ファイルからの入力ストリームを使う	open(filepath)
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
値を表示する	print(value)
イテラブルとデータ列について散布図を描画してマーカーを△に変更する	plt.plot(データ列x, データ列y, marker='^')
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
ふたつの集合の∩を計算する	aSet.intersection(aSet2)
数列とリストの散布図を描き、、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
nが-9以上9以下かどうか	-9 <= n <= 9
オブジェクトはバイト列型か	isinstance(obj, bytes)
データフレームの重複していない行を選ぶ	df[~ df.duplicated(keep=False)]
データシリーズの平均	ds.mean()
まとめてデータフレームの列名を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームのあるカラムの欠損値を直後の値に増やす	df['列A'].fillna(method='bfill')
横棒グラフを真紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
青いヒストグラムを描画する	plt.hist(データ列, color='b')
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
最後の部分文字列を使って文字列を二分する	s.rpartition(sub)
黒いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームのひとつの列を説明変数にする	説明変数 = df[['列名']]
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
前もってASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
option: ペルーにフォントの色を指定する	color = 'peru'
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: ８ビット整数型を使う	dtype = np.int8
n個に等間隔で列を分割する	pd.cut(ds, n)
ダークスレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
２つの整数LCM	math.lcm(n, n2)
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
散布図のマーカーの色を指定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
文字列の左側からタブを除く	s.lstrip('\t')
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
データシリーズの中にある日付データの合計をカウントする	ds.isin([value]).sum()
折れ線グラフの色を淡い茶色に指定する	plt.plot(データ列x, データ列y, color='tan')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
バイナリ対数を求める	math.log2(x)
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
行列の平均	np.mean(aArray)
option: 印を▲に変更する	marker = '^'
データフレームの選択した列を百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
option: グラフの種類を点線に設定する	linestyle = 'dotted'
文字列の開始位置番目と終了位置番目の間に部分文字列がない	s.find(sub, start, end) == -1
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図をオレンジレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフの▽マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの未入力値をその最小値で補完する	df.fillna(df.min())
変数が0に近づく時の数式の極限値を求める	sympy.limit(e, z, 0)
option: ミスティローズを使用する	color = 'mistyrose'
クラス分類の予測精度をヒートマップを用いて確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
セットの要素が別の集合に含まれるかどうか	aSet.issubset(aSet2)
整数の階乗	math.factorial(n)
データ列のヒストグラムを描画する	plt.hist(データ列)
データフレームをある列の値によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
三つの文字列をプリントする	print(value, value2, value3)
option: ダークシアグリーンにフォントの色を設定する	color = 'darkseagreen'
ミディアムオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
文字列をn回続く列を得る	itertools.repeat(element, n)
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
option: 書き込みモードに変更する	mode = 'w'
配列の平均	np.mean(aArray)
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データ列を等量でビン数nで分割する	pd.qcut(ds, n)
nが配列のどれか	n in aArray
正規表現を大文字・小文字を無視して事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
option: 丸マーカーを描画する	marker = 'o'
小数点数の逆双曲線正接を求める	math.atanh(x)
プロットに水平方向の点線を設定する	plt.axhline(y=0, linestyle='dotted')
データフレームの選択した列の中に存在するの合計をカウントする	df[['列A', '列B']].isin([value]).sum()
option: グラフの色をロイヤルブルーに指定する	color = 'royalblue'
データフレームの指定したカラムの欠損値をメディアンで補う	df['列A'].fillna(df['列A'].median())
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
文字列を大文字に変換する	s.upper()
配列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
リストをn回、連結する	aList * n
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
実行を即座に終える	sys.exit()
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
赤い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
整数nがタプルのどれか	n in aTuple
データ列の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
昇順にタプルをソートする	sorted(aTuple, reverse=False)
赤い四角マーカーを数列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームの一部のカラムの未入力値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
行列を平坦化する	aArray.flatten()
横棒グラフを描き、中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: ローングリーン色を用いる	color = 'lawngreen'
データフレームのカラムの値をValueMapで全て置き換える	df['列A'].replace(ValueMap)
線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
リストとリストについて散布図を描いて、マーカーを左三角にセットする	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
横棒グラフをライトシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcyan')
predicateFuncがtrueとなるイテラブルの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
折れ線グラフの菱形印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
option: グラフの色をバリーウッドに変更する	color = 'burlywood'
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
リストとリストの散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
指定した列の中にと文字列がいくつ存在するかカウントする	df['列A'].isin([value, value2]).sum()
データフレームの選択した列を十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
カンマで区切って二つの文字列をプリントする	print(value, value2, sep=',')
リストとリストについて散布図を描いてマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
option: グリーン色を用いる	color = 'green'
タプルをnから番号付けする	enumerate(aTuple, start=n)
列の種類を見る	df.info()
データフレームの下10行を抽出する	df.tail(10)
データ列とリストについての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
降順でデータフレームを行によってソートする	df.sort_index(ascending=False)
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームを10の位で丸めて整数型にする	df.round(-1).astype(int)
データシリーズの中にある文字列と文字列の個数を調べる	ds.isin([value, value2]).sum()
菱形マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列x, データ列y, color='lightcoral')
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームの選択したカラムの未入力値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
セットを変更不能な集合に変換する	frozenset(aSet)
データフレームをある列によって並べて、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
リストとリストについて散布図をプロットし、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
xを印字できる文字列にする	ascii(x)
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
８進数字を全部見る	string.octdigits
モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
文字列中の部分文字列の出現を数える	s.count(sub)
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
両端キュー中の要素のインデックス	deq.index(element)
タプルの最初のオブジェクトを探す	aTuple.index(element)
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
最初のカテゴリーを除いてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
文字列の右側から範囲を指定して部分文字列を探す	s.find(sub, start, end)
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
綺麗なグラフを使う	import seaborn as sns
変数を太文字でプリントする	print(f'\033[1m{value}\033[0m')
複数行対応として正規表現で文字列を分ける	re.split(pattern, s, flags=re.MULTILINE)
リストの要素を小さい順にソートする	sorted(aList, reverse=True)
プロットを色差別なくする	sns.set(pallete='colorblind')
双方向キューは空か調べる	len(deq) == 0
配列から双方向キューを作る	collections.deque(iterable)
印字可能な文字を全部求める	string.printable
データフレームの選択した列のパーセンタイルを計算する	df[['列A', '列B']].quantile(パーセント/100)
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
デフォルト見た目を適用する	sns.set()
実数の双曲線余弦の逆数を計算する	math.acosh(x)
数式を微分する	sympy.diff(e)
リストの全値を消す	aList.clear()
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
ダークスレートブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
ファイルを文字列の示すエンコーディングで書き込みできるように開く]	open(filepath, mode='w', encoding=s)
散布図の星マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
データフレームをソートして、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
グラフにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
赤色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
option: ダークブルーにグラフの色を設定する	color = 'darkblue'
option: ダークブルーを使う	color = 'darkblue'
option: グラフの色をデピンクに変更する	color = 'deeppink'
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
数列と数列について散布図を描画し、、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
要素がセットに含まれないか	element not in aSet
データフレームのあるカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
ヒストグラムの色をシルバーにセットする	plt.hist(データ列, color='silver')
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
ライトシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
作画のx軸とy軸の比率を同じする	plt.axis('equals')
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
データフレームのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ゼロ埋めされた論理値型の行列	np.zeros(要素数, dtype=np.int32)
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
ペールグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
集合をリストに変換する	list(aSet)
データシリーズの日にち	ds.dt.day
方程式の解	sympy.solve(e)
option: パールゴールデンロッドを使用する	color = 'palegoldenrod'
データシリーズを四捨五入して整数にする	ds.round().astype(int)
キューの上限制限された長さ	deq.maxlen
データフレームのNaNをモードに変更する	df.fillna(df.mode().iloc[0])
真上位集合か調べる	aSet > aSet2
空のタプルを得る	()
折れ線グラフに黒い△印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの指定したカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
ある列のカテゴリ毎の標準偏差	df.groupby('列A').std()
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: グラフの色をダークスラテグレーに変更する	color = 'darkslategray'
縦棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
二つの集合に共通する要素からなる集合	aSet.intersection(aSet2)
オブジェクトを文字列に変換する	str(obj)
リストをイミュータブルにする	tuple(aList)
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
表データのn行目を抽出する	df.loc[n]
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
正則化付き線形モデルを作る	model = sklearn.linear_model.ElasticNet()
円グラフでデータ列のパーセントを図示する	plt.pie(データ列, startangle=90)
有理数を使う	import fractions
データフレームの選択したカラムの中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
折れ線グラフに▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
リストと数列について散布図を描画してマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームの指定したカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
文字列を最後の部分文字列で分けた場合の後半の文字列を取り出す	s.rpartition(sub)[-1]
浮動小数点数が正の数	x > 0
nとn2の商	n / n2
指定した列の欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
散布図に黒い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
列名を指定して２つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
散布図をポイントマーカーでプロットする	plt.plot(データ列x, データ列y, marker='.')
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
分類結果の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: ダークターコイズ色を使う	color = 'darkturquoise'
線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
スラグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
データフレームのカラム概要	df.info()
option: 改行コードをWindowsに指定する	newline = '\r\n'
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
数値を青色で表示する	print(f'\033[34m{value}\033[0m')
リストとリストの散布図に赤いクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
クラス分類をランダム性を強化したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
配列とリストについての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
特異値分解で多次元データをパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
丸印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
リストとリストを加える	aList + aList2
黒い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
数式の簡略化を行う	sympy.sympify(e)
option: ミディアムパープル色を使う	color = 'mediumpurple'
要素が集合に含まれるかどうか調べる	element in aSet
ヒストグラムをホワイト色として描画する	plt.hist(データ列, color='white')
縦棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
列名を指定して二つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
数列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
折れ線グラフの丸印の大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ファイルのファイル名	os.path.basename(filepath)
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
行列の列ごとの合計値を求める	np.sum(aArray, axis=0)
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
散布図をダークシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
オリベドラブ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
配列の列ごとの平均値を求める	np.mean(aArray, axis=0)
正規分布か仮説検定する	scipy.stats.shapiro(配列)
半透明の点線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: チョコレートにグラフの色を変更する	color = 'chocolate'
空白文字を全て使う	string.whitespace
option: グラフの色をミントクリームに設定する	color = 'mintcream'
印字可能な文字を見る	string.printable
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
データ列を指定した値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
配列のピアソンの相関係数	scipy.stats.pearsonr(配列, 配列2)
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
文字列がリストに含まれるか調べる	element in aList
棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームを表示するとき最大行数をnにセットする	pd.set_option('display.max_rows', n)
データフレームを関数によってまとめた表	df.groupby(関数)
両端キューを用いる	import collections
ターコイズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
文字列の開始位置から終了位置の範囲で部分文字列の出現を数える	s.count(sub, start, end)
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgray')
ユニークな値を要素とする行列	np.unique(aArray)
辞書のの一覧	aDict.values()
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
ヒストグラムの色をローングリーンにセットする	plt.hist(データ列, color='lawngreen')
option: 事前に説明変数を正規化する	normalize = True
リストの末尾に要素を追加する	aList.append(element)
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
余弦	math.cos(x)
直後の値でデータフレームの選択した列の欠損値を補う	df[['列A', '列B']].fillna(method='bfill')
浮動小数点数のn乗の実数剰余を計算する	pow(x, n, y)
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
option: オーキッド色を使用する	color = 'orchid'
三変数の最も小さい値を計算する	min(x, y, z)
黒い菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
リストをnから順番付けする	enumerate(aList, start=n)
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
変数を赤色にする	f'\033[31m{value}\033[0m'
ValueMapで全部データフレームの値を置き換える	df.replace(ValueMap)
小数点数のハイパボリック・コサインを算出する	math.cosh(x)
データフレームのあるカラムが何曜日か調べる	df['列A'].dt.weekday_name
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
赤い破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
パラメータが0に近づく時の数式の極限値を求める	sympy.limit(e, z, 0)
横棒グラフをプラム色を用いて描画する	plt.barh(データ列x, データ列y, color='plum')
ビン数nでデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
nが正の数かどうか確認する	n > 0
リストのn番目以降の部分を得る	aList[n:]
ディムグレー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフの色をバリーウッドに変更する	plt.plot(データ列x, データ列y, color='burlywood')
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
二つのカウンタのいずれかに含まれる要素を算出する	aCounter | aCounter2
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
パラメータがマイナス無限大に近づくとき数式の極限値を求める	sympy.limit(e, z, -oo)
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgray')
xのハッシュ値	hash(x)
データフレームのあるカラムの標本標準偏差	df['列A'].std(ddof=1)
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
オリーブ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ヒストグラムをダークゴールデンロッド色として描画する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
JSONL形式のファイルからデータフレームをロードする	pd.read_json(filename, orient='records', lines=True)
ファイル名がCSVファイルかどうか調べる	filename.endswith('.csv')
データフレームの選択したカラムの欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
カウンタをイテラブルを用いて更新する	aCounter.update(iterable)
データフレームの欠損値を50パーセンタイルにセットする	df.fillna(df.median())
ルート	math.sqrt(x)
辞書から最後の項目をポップする	aDict.popitem()
データフレームの指定したカラムの欠損値をその最小値で補う	df['列A'].fillna(df['列A'].min())
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
ファイルを開いて]書き込みストリームを使う	open(filepath, mode='w')
rangeの無限版	itertools.count(start=n, step=step)
option: 最初のカラムを行にする	index_col = 0
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
rgbの上三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データシリーズは何年か調べる	ds.dt.year
option: マーカーを大バツに変更する	marker = 'X'
白いヒストグラムを描画する	plt.hist(データ列, color='w')
円プロットの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データフレームのカラムの不偏標準偏差	df['列A'].std()
列名を指定して２つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
データフレームを二つの列の値でグループ化し、基本統計量を算出する	df.groupby(['列A', '列B']).describe()
日付データの日	aDate.day
要素がセットのメンバーに含まれるかどうか調べる	element in aSet
散布図をシルバー色として描画する	plt.scatter(データ列x, データ列y, color='silver')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
環境がMacOSか	sys.platform.startswith('darwin')
データフレームの不偏分散を算出する	df.var(ddof=1)
データフレームの中央値	df.median()
数を実数で割る	x / y
データフレームのあるカラムを千の位で丸める	df['列A'].round(-3)
コーンズシルク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
文字列を最後の部分文字列で二分し後半の文字列を使う	s.rpartition(sub)[-1]
環境はWindows	sys.platform.startswith('win32')
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
文字列中の小文字を大文字に変換する	s.upper()
散布図の菱形印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
グラフ中のフォントを変更する	sns.set(font=フォント名)
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
文字列の末尾	s[-1]
リストをひとつ置きに得る	aList[::2]
散布図の印の太さを設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
データフレームの末尾10行を選ぶ	df.tail(10)
データフレームの指定した列の値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
出力するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
option: ライムグリーンを使う	color = 'limegreen'
option: 色を黄緑に変更する	color = 'chartreuse'
折れ線グラフの△マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
nの無限リストを得る	itertools.repeat(n)
実数の逆双曲線余弦	math.acosh(x)
０で全要素を初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
グラフの中の縦軸にラベルをつける	plt.ylabel('y軸ラベル')
実数が整数か	x.is_integer()
nが奇数か調べる	n % 2 == 1
箱ヒゲ図をプロットして、平均線を追加する	plt.boxplot(データ列, meanline=True)
指定した列によってデータフレームをまとめたグループ	df.groupby('列A')
タプルの先頭のn要素を取り除く	aTuple[n:]
データフレームをグループ化し、ある列に対し合計を計算する	df.groupby('列A')['列B'].sum()
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームの最後n行を抽出する	df.tail(n)
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
縦棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
本日の日数を使う	datetime.datetime.today().day
option: △マーカーを描画する	marker = '^'
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
現在が何年か知る	datetime.datetime.today().year
日付時刻データが金曜日かどうか	aDatetime.weekday() == 4
散布図を真紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
ある列のカテゴリごとの合計を求める	df.groupby('列A').sum()
列から重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
実数から実数を引く	x - y
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
0から始まる無限な列を得る	itertools.count()
書き込み用に文字コードtextでファイルをオープンする]	open(filepath, mode='w', encoding=text)
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
nが1もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
データシリーズの欠損値を後の値に設定する	ds.fillna(method='bfill')
ユニークな値を要素とするベクトル	np.unique(aArray)
データフレームの一部の列の母標準偏差	df[['列A', '列B']].std(ddof=0)
データフレームを指定した列で昇順に破壊的に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
逆余弦	math.acos(x)
線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
紺碧色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの指定したデータ型のカラム名を列挙する	df.select_dtypes(型).columns
S-W検定を行う	scipy.stats.shapiro(配列)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
nの八進文字列	oct(n)[2:]
文字列は全て印字できる	s.isprintable()
データフレームのn行目をインプレイスでドロップする	df.drop(n, axis=0, inplace=True)
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
折れ線グラフをミントクリーム色を使って描画する	plt.plot(データ列x, データ列y, color='mintcream')
ベクトルの全要素を指定の値にする	aArray[:, :] = 指定の値
バリーウッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
範囲を指定して部分文字列を文字列の最後から探す	s.find(sub, start, end)
option: コーラルにフォントの色を変更する	color = 'coral'
nがn2未満もしくはn3以上かどうか	n < n2 or n >= n3
ファイルを文字列の示すエンコーディングを用いてオープンする]	open(filepath, encoding=s)
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字化けを防ぐ	sns.set(font='IPAexGothic')
数の小数点以下を四捨五入する	round(x)
データフレームの指定したカラムを丸めて整数型にする	df['列A'].round().astype(int)
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
文字列がタプルに含まれる	element in aTuple
リストをビン数nでビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
要素を双方向キューにプッシュする	deq.append(element)
イテラブルとリストの散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームの指定したカラムの中にいくつ文字列が存在するか数える	df['列A'].isin([value]).sum()
ファイルをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
文字列の中のケースを無視して正規表現による全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
イテラブルから重複なくn要素ランダムに選ぶ	random.sample(iterable, k=n)
option: フォントの色をダークスレートブルーに設定する	color = 'darkslateblue'
文字列の先頭で正規表現にケースを無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
option: 追加モードに設定する	mode = 'a'
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
イテラブルとリストについてリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
文字列内にひとつでもアスキー文字があるかどうか調べる	any(c.isascii() for c in s)
文字列中にひとつでも非小文字があるかどうか調べる	any(not c.islower() for c in s)
データシリーズを百の位で四捨五入する	ds.round(-2)
rgbの大バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: ダークオーキッドにフォントの色を設定する	color = 'darkorchid'
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
2つのデータフレームを列名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
オブジェクトの型	type(obj)
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
空のロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
実数が負の数か調べる	x < 0
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
イテラブルをヒストグラムにする	plt.hist(データ列)
文字列が全て印字できるか調べる	s.isprintable()
option: バツマーカーを使用する	marker = 'x'
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
配列の分散を求める	np.var(aArray)
縦棒グラフを描いてバーの幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
散布図をプラム色を用いて描画する	plt.scatter(データ列x, データ列y, color='plum')
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
ある列の文字列に部分文字列が含まれない行を選択する	df[~df['列A'].str.contains(部分文字列)]
データ列の折れ線グラフを描画して、色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
ファイルパスをオープンして]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
散布図の▲印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの列をヒストグラムにする	plt.hist(df[column])
JSONファイルのfをデータに変換する	json.load(fin)
option: グラフを破線に設定する	linestyle = 'dashed'
散布図をクロス印で描画する	plt.scatter(データ列x, データ列y, marker='x')
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
外れ値を除いた配列の分散を算出する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
小文字を大文字に変換する	s.upper()
配列の差を求める	aArray - aArray2
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
シエナ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
nからn2までの整数列	list(range(n, n2+1))
線グラフを一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: 印を右三角に変更する	marker = '>'
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
列名を指定して２つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
折れ線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
最初のカテゴリーを除外し、データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
３自然数の最小公倍数を求める	math.lcm(n, n2, n3)
データフレームの列を100の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
折れ線グラフを描き、、色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
nとn2が等しいか調べる	n == n2
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
データフレームのメディアン	df.median()
option: 色をスチールブルーにセットする	color = 'steelblue'
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
等量でn個に配列をビンニングする	pd.qcut(aArray, n)
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
数列のスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフの色をスカイブルーにセットする	plt.plot(データ列x, データ列y, color='skyblue')
入力から二つの文字列を読む	A, B = map(str, input().split())
散布図を赤い丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図を黒い△マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ある列のカテゴリ毎の分散を求める	df.groupby('列A').var()
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
リストとリストについて散布図をプロットして、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
option: 線の種類を実線に設定する	linestyle = 'solid'
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
リストとリストの散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
エクセルからシート名を指定して読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
option: ラベンダーブラッシュに色を設定する	color = 'lavenderblush'
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
option: グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
辞書の全項目を消去する	aDict.clear()
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームのカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
イテラブルのイミュータブルな集合	frozenset(iterable)
データフレームをBOMを付けて出力する	df.to_csv('file.csv', encoding='utf_8_sig')
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
日付データが土曜日かどうか	aDate.weekday() == 5
日付時刻データの日数を使う	aDatetime.day
小文字を全部見る	string.ascii_lowercase
丸マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
縦棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
文字列が無限に繰り返すイテラブルを得る	itertools.repeat(element)
ミディアムターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
イテラブルからカウンタを作る	collections.Counter(iterable)
散布図を大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X')
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
両端キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
option: データ型を指定する	dtype = np.uint8
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
文字列を最初の部分文字列で分けたときの前半の文字列を取り出す	s.partition(sub)[0]
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
文字列の末尾から部分文字列を除去する	s.rstrip(sub)
リストが空かどうか調べる	len(aList) == 0
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
option: オーキッド色を使う	color = 'orchid'
折れ線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
マッピングから項目名の値を得る	aDict.get(key)
ファイルを一行ずつ読み込む	f.readline()
option: △印を使う	marker = '^'
浮動小数点数の３乗を求める	x ** 3
集合を組に変換する	tuple(aSet)
option: 改行を区切り記号で使用する	sep = '\n'
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームのヒストグラムを縦横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データフレームから一つのカラムを取り出す	df[['列A']]
組を昇順に並べ直す	sorted(aTuple, reverse=False)
ファイル名がCSVファイルかどうか	filename.endswith('.csv')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
ふたつの集合のユニオン	aSet.union(aSet2)
白いグリッド線を引く	plt.grid(color='w')
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
ファイルパスを文字列の示す文字コードでオープンする]	open(filepath, encoding=s)
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
イテラブルからサンプリングする	random.sample(iterable)
ヒストグラムの色をシスルにセットする	plt.hist(データ列, color='thistle')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
データフレームの指定した列は正規分布からどれだけ、歪んでいるか見る	df['列A'].kurt()
文字列を下線付き化する	f'\033[4m{value}\033[0m'
配列のトリム平均を使う	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
縦棒グラフを描画してラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
データフレームを関数の値でグループ化する	df.groupby(関数)
データフレームの全カラムの相関を見る	sns.pairplot(df)
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
実数の床	math.floor(x)
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
指定したカラムを百の位で四捨五入して、整数にする	df['列A'].round(-2).astype(int)
ターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
配列をビン数nでビン分割する	pd.cut(aArray, n)
カウンタ間で交わり演算する	aCounter & aCounter2
データフレームの値が欠損値か調べる	df.isna()
配列の調和平均を計算する	scipy.stats.hmean(配列)
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
小文字を全て見る	string.ascii_lowercase
コマンドの第二引数を知る	sys.argv[1]
折れ線グラフのクロスマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
百分率付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
オブジェクトは文字列クラスかどうか判定する	isinstance(obj, str)
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
三つの値を順に表示する	print(value, value2, value3)
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
データシリーズが何曜日か知る	ds.dt.weekday_name
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
n個に等しい量になるようにリストをビン分割する	pd.qcut(aList, n)
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
データフレームを表示するとき、表示可能な最大行数を減らす	pd.set_option('display.max_rows', n)
ファイルパスからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
option: グラフの色をミディアムターコイズにする	color = 'mediumturquoise'
ファイルパスをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
option: 青緑色を使用する	color = 'teal'
ヒストグラムの色を淡い茶色にセットする	plt.hist(データ列, color='tan')
文字列中にひとつでも非アルファベットが含まれるか確認する	any(not c.isalpha() for c in s)
データシリーズは何時か見る	ds.dt.hour
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
縦棒グラフをライトシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データフレームのヒストグラムを横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名')
ファイルをオープンして]追加ストリームを見る	open(filepath, mode='a')
データフレームのあるカラムの最頻値	df['列A'].mode()
小数点数の角度を計算する	math.degrees(x)
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
双方向キューを空にする	deq.clear()
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
option: インディアンレッド色を使う	color = 'indianred'
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
床を求める	math.floor(x)
数式の数値を計算する	float(e)
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
濃い青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
数値を簡単化する	sympy.sympify(e)
数値を微分する	sympy.diff(e)
プラットホームはLinuxかどうか調べる	sys.platform.startswith('linux')
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
辞書の値も複製する	{k: copy.copy(v) for k, v in aDict.items()}
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
配列とリストについての散布図に赤い▲マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
整数LCMを求める	math.lcm(n, n2)
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
散布図の大バツ印の大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
シエナにヒストグラムの色を変更する	plt.hist(データ列, color='sienna')
ロージーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
option: 色をパールバイオレットレッドに設定する	color = 'palevioletred'
スピアマン順位相関係数でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
データフレームの選択した列のどの値が最も出現するか確認する	df[['列A', '列B']].mode()
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
スカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
マッピングの項目名の値	aDict[key]
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
線グラフをサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='salmon')
ターコイズ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームの一部のカラムを小数点以下n桁で四捨五入する	df[['列A', '列B']].round(n)
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
円グラフの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
散布図を描画する	plt.scatter(データ列x, データ列y)
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
リストを２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ヒストグラムをペルー色を用いて描画する	plt.hist(データ列, color='peru')
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
ロバストな線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
マッピングをJSON形式で出力ストリームに保存する	json.dump(aDict, fout, ensure_ascii=False)
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
散布図の星マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
オブジェクトがリストの要素かどうか調べる	element in aList
分類モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
nまでの偶整数リスト	list(range(2, n, 2))
行列の行	aArray[行番号]
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームのあるカラムの第一四分位数を計算する	df['列A'].quantile(0.25)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
ホワイト色のヒストグラムを描画する	plt.hist(データ列, color='white')
データ列の偏りを対数変換する	np.log(データ列)
タプルの末尾を使う	aTuple[-1]
本日が火曜日かどうか確認する	datetime.datetime.today().weekday() == 1
真紅色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
プロットのパレットをパステル調にする	sns.set(pallete='pastel')
黒い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
ラインを半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
二つの変数を順にプリントする	print(value, value2)
散布図を貝殻色を使って描画する	plt.scatter(データ列x, データ列y, color='seashell')
N未満までの行列	np.arange(N)
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
トマト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
今日のローカルな日付時刻	datetime.datetime.today()
オリベドラブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフの右三角印の色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
項目名がマップに存在するかどうか調べる	key in aDict
ヒストグラムの色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
配列と数列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをライトスカイブルー色を用いて描画する	plt.hist(データ列, color='lightskyblue')
リストの重複を除去する	sorted(set(aList), key=aList.index)
直後の値でデータフレームのNaNを埋める	df.fillna(method='bfill')
データフレームの選択したカラムの標準偏差	df[['列A', '列B']].std()
縦棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
option: 色をミディアムブルーにする	color = 'mediumblue'
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームの列を柱状図を使って描画する	plt.hist(df[column])
リストにリストを加える	aList.extend(aList2)
データフレームの選択したカラムの欠損値をその最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
散布図に黒い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームをある列によってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
ファイルパスを読み込みモードでオープンする]	open(filepath, mode='r')
リストをn回連結する	aList * n
ボックスチャートをプロットし、、平均線を加える	plt.boxplot(データ列, meanline=True)
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
フォレストグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: グラフの色をミディアムブルーに変更する	color = 'mediumblue'
2進文字列を整数にする	int(s, 2)
option: 赤色を使用する	color = 'red'
空のリッジ回帰とロッソ回帰のハイブリットモデルを作成する	model = sklearn.linear_model.ElasticNet()
文字列を区切りで分割し、、列挙する	s.split(sub)
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
option: ダークグリーン色を使用する	color = 'darkgreen'
実行結果を下線付きにする	f'\033[4m{value}\033[0m'
淡いピンク色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
文字列リストを一つの文字列にする	''.join(aStringList)
小さい順にタプルの値を並べる	sorted(aTuple, reverse=False)
行列の行ごとの標準偏差を算出する	np.std(aArray, axis=1)
縦棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
文字列は全て十進数字か調べる	s.isdecimal()
チョコレート色としてヒストグラムを描画する	plt.hist(データ列, color='chocolate')
nがn2で割り切れないか判定する	n % n2 != 0
線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームの相関行列をスピアマン順位相関係数で求める	df.corr(method='spearman')
日付時刻データからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
オプションで、標準エラーを出力にする	file = sys.stderr
文字列をアンダーライン付きで表示する	print(f'\033[4m{value}\033[0m')
棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの右三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの複数の列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
リストのn番目の要素を削除する	del aList[n]
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
折れ線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
データフレームを二つの列によって大きい順に破壊的に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
耐火レンガ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
空の辞書	{}
ミディアムシアグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
昇順にデータフレームを指定したカラムによって並べる	df.sort_values(by='列A', ascending=True)
組の要素を小さい方からソートする	sorted(aTuple, reverse=True)
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフの下三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
マッピングのキーとその値を列挙する	aDict.items()
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
折れ線グラフの三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
エクセルファイルからSJISでCSVファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
n÷n2	n / n2
全要素を1で初期化した行列を作る	np.ones(要素数, dtype=np.int)
破線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategray')
オブジェクトが整数クラスか調べる	isinstance(obj, int)
オブジェクトの無限な列	itertools.repeat(element)
プロットにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
線グラフの色をスカイブルーに指定する	plt.plot(データ列x, データ列y, color='skyblue')
option: 降順にする	ascending = False
整数nが配列のどれかかどうか調べる	n in aArray
nをn2で整数除算する	n // n2
浮動小数点数を実数に足す	x + y
ラベンダーブラッシュ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
現在の再帰の上限	sys.getrecursionlimit()
横棒グラフをダークブルー色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
折れ線グラフの色をレモンシフォンにする	plt.plot(データ列x, データ列y, color='lemonchiffon')
2つの実行結果をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
赤い点線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
整数nを八進数表現にする	oct(n)
値を両端キューの最後に追加する	deq.append(element)
データシリーズが何曜日か調べる	ds.dt.weekday_name
縦棒グラフをダークレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
折れ線グラフの▼印を赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフをダークターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ダークサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='darksalmon')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
タプルをカウンタに変換する	collections.Counter(aDict)
組とタプルを連結する	aTuple + aTuple2
集合を組にする	tuple(aSet)
縦方向に三つのデータフレームを結合する	pd.concat([df, df2, df3], axis=1)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
文字列の後ろを求める	s[-1]
nがn2で割り切れるか	n % n2 == 0
欠損値のある行をインプレイスでドロップする	df.dropna(inplace=True)
インディアンレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='indianred')
リストにリストを追加して拡張する	aList.extend(aList2)
カウンタをリセットする	aCounter.clear()
データフレームの選択したカラムを十の位で丸めて、整数にする	df[['列A', '列B']].round(-1).astype(int)
option: 珊瑚色を使う	color = 'coral'
ヒストグラムをグリーン色として描画する	plt.hist(データ列, color='green')
散布図の右三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームの中に日付データがある	df.isin([value])
ファイルパスを書き込み用にオープンする]	open(filepath, mode='w')
option: ライトブルー色を用いる	color = 'lightblue'
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
２つのリストを改行で区切って出力する	print(value, value2, sep='\n')
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
指定した列のみ、データフレームの重複を見る	df.duplicated(subset='列A')
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
文字列が空白文字からなるか調べる	s.isspace()
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
option: フォントの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
データシリーズの欠損値を最大値に設定する	ds.fillna(ds.max())
データフレームの上n行	df.head(n)
二つの文字列は同じかどうか	s == s2
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
データフレームの選択したカラムが正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
ユーザから入力される	int(input())
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
SDGでクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
ふたつの列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
option: フォントの色をスチールブルーに設定する	color = 'steelblue'
文字列の開始位置以降に部分文字列が存在するかどうか調べる	s.find(sub, start) != -1
データフレームの行の名前のリスト	df.index
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
データフレームの歪度を計算する	df.kurt()
タイムスタンプを用いる	import time
タイムスタンプ型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
文字コードtextでファイルを開く]	open(filepath, encoding=text)
青い破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
変数がマイナス無限大に近づく場合の数式の極限値を求める	sympy.limit(e, z, -oo)
ファイルからファイル名を使う	os.path.basename(filepath)
データフレームの記述統計量を見る	df.describe()
行列の列ごとの平均を求める	np.mean(aArray, axis=0)
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
タプルに項目名ワード引数として追加する	aDict.update(**kwargs)
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
カラーバーを横向きに描く	plt.colorbar(orientation='horizontal')
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
辞書の項目数を見る	len(aDict)
ファイルを文字列の示す文字コードでオープンする]	open(filepath, encoding=s)
タイムスタンプデータが日付時刻データより早い	aDatetime < aDatetime2
オブジェクトが数値か	isinstance(obj, (int,float))
データフレームの指定した列の欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
ふたつのリストの共通りストを算出する	list(set(aList) & set(aList2))
option: グラフの色をライトグレーに設定する	color = 'lightgray'
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
カウンタの全出現回数	aCounter.total()
ダークターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
半透明の点線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
三つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=0)
2つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
文字列がリストに含まれない	element not in aList
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
ある列の値でデータフレームをまとめたグループ	df.groupby('列A')
黒いバツマーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	s.rpartition(sub)[-1]
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
option: シアンにグラフの色を指定する	color = 'cyan'
ロイヤルブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
option: ハニーデュー色を使用する	color = 'honeydew'
n引くn2	n - n2
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
データシリーズの値はNaN	ds.isna()
イテラブルと配列について散布図を描画して、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの最初10行	df.head(10)
option: 色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
散布図をコーンフラワーブルー色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームを２つの列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
コマンド引数の一覧	sys.argv[1:]
カテゴリ別で色分けしてデータフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの選択した列のSkewnessを求める	df[['列A', '列B']].skew()
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
実数の複素数を求める	complex(x)
ヒストグラムの色を真紅に変更する	plt.hist(データ列, color='crimson')
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
option: データ型を指定する	dtype = np.int32
辞書を浅くコピーする	dict(aDict)
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームの最初5行	df.head(5)
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
option: マーカーの色をダークブルーにする	markerfacecolor = 'darkblue'
データフレームのカラムの歪度を求める	scipy.stats.skew(df['列A'], bias=False)
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
データフレームを十の位で四捨五入して、整数にする	df.round(-1).astype(int)
指定した列の中の未入力値の数をカウントする	df['列A'].isna().sum()
オブジェクトが関数かどうか調べる	callable(obj)
文字列は平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
予測値とデータの離れ具合を見る	sns.residplot(x='列名', y='列名', data=df)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='grey')
正規表現を前もって複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
フォーマットで列をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
グラフのデザインを良くする	import seaborn as sns
表データを使う	import pandas as pd
ヒストグラムをダークオーキッド色を使って描画する	plt.hist(データ列, color='darkorchid')
折れ線グラフの色をサーモンにする	plt.plot(データ列x, データ列y, color='salmon')
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgrey')
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
nで乱数シードを固定化する	random.seed(n)
リストの中の最大値	max(aList)
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ベクトルの値を使う	aArray[行番号, 列番号]
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
文字列の中のケースを無視してパターンによる全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
赤い下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
カウンタを少ない順番にリストとして得る	aCounter.most_common()[::-1]
スクリプトファイルのディレクトリ名を使う	os.path.dirname(os.path.abspath(__file__))
option: グラフの色を青緑に設定する	color = 'teal'
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
xが1、もしくは2もしくは3に等しい	x == 1 or x == 2 or x == 3
データフレームとデータシリーズを連結する	pd.concat([df, ds], axis=1)
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
タプルの最初のn要素を取り除く	aTuple[n:]
線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
データシリーズを千の位で丸めて、整数型にする	ds.round(-3).astype(int)
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
二つの値を改行で区切ってプリントする	print(value, value2, sep='\n')
データフレームを散布図で描画し、、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
折れ線グラフを色付きの破線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
nの各桁の総和を算出する	sum(map(int, str(n)))
option: 色をライトコーラルに設定する	color = 'lightcoral'
文字列を全て大文字に変換する	s.upper()
配列の列ごとの合計	np.sum(aArray, axis=0)
黄色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームの指定したカラムを千の位で丸める	df['列A'].round(-3)
正規分布にしたがって配列の値が発生する確率を使う	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
文字列を部分文字列で二分する	s.partition(sub)
データシリーズの中のNaNの合計を数える	ds.isna().sum()
標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
数列とデータ列リストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: 色をグレーに設定する	color = 'gray'
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
ゴールデンロッドにヒストグラムの色をする	plt.hist(データ列, color='goldenrod')
変数について数値を積分する	sympy.integrate(e, z)
データシリーズの平均値を求める	ds.mean()
オプションで、ファイルを出力先にする	file = sys.open(filename, 'w')
option: グラフの色を茶色に設定する	color = 'brown'
インデックスを付けずデータフレームを保存する	df.to_csv('file.csv', index=None)
を使ってデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
文字列がタイトルケースか調べる	s.istitle()
指定した列リストだけ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
エクセルファイルからシート名を指定してデータフレームを読む	pd.read_excel('file.xlsx', sheet_name=シート名)
エクセルファイルから複数のシートを読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
2つの文字列を辞書順で比較する	s < s2
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
ファイルパスを追加モードとしてオープンする]	open(filepath, mode='a')
データ列の文字列長を列として使う	ds.str.len()
データフレームをカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
赤い▲印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームのある列をリストにする	df['列A'].values.tolist()
option: グラフの色を珊瑚に設定する	color = 'coral'
リストの末尾の要素を使う	aList[-1]
シーケンスを2回あわせたデカルト積を求める	itertools.product(iterable, repeat=2)
データフレームのある列の欠損値をxに設定する	df['列A'].fillna(x)
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
タイタニックのデータセットをデータフレームとしてロードする	df = sns.load_dataset('titanic')
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
カンマで文字列を分割して、文字列リストに変換する	s.split(',')
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
リストとイテラブルについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図の▼印の太さを指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
JSON形式の文字列をデータにする	json.loads(jsonString)
指定した列が正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
option: アクアマリンに色を設定する	color = 'aquamarine'
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
要素が集合に含まれる	element in aSet
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
最初のコマンド引数を知る	sys.argv[1]
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
散布図のダイアモンドマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
option: マーカーを上三角に変更する	marker = '^'
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
ライトスチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームを指定した列を用いてソートしてNaNを先頭にする	df.sort_values(by='列A', na_position='first')
データフレームのカラムをリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
回帰分析をKNNとして行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
書き込みできるように文字列の示すエンコーディングを使ってファイルをオープンする]	open(filepath, mode='w', encoding=s)
非数を使用する	math.nan
リストにリストを追加する	aList.extend(aList2)
リストと数列について散布図をプロットして、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
グラフに目盛り線を入れる	plt.grid(True)
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレーム中の欠損値をドロップする	df.dropna(inplace=True)
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームの一部の列の欠損値を最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
青緑色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
データフレーム中のNaNを破壊的にドロップする	df.dropna(inplace=True)
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
時刻をインポートする	import datetime
データフレームをある列によって大きい順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
散布図に左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
配列から重複を取り除く	set(iterable)
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
散布図のクロス印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
赤いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ヒストグラムをミッドナイトブルー色を使って描画する	plt.hist(データ列, color='midnightblue')
散布図のクロスマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
整数nを符号付きで長さn2のバイナリにする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
option: 色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
小数点数の双曲線正接の逆数	math.atanh(x)
二つのリストの積集合	list(set(aList) & set(aList2))
第2引数のファイル名	sys.argv[1]
文字列を空白で分割する	s.split()
n2がn以上かつ、n3以下か調べる	n <= n2 and n2 <= n3
線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
複数の列からグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
option: モカシンにフォントの色を設定する	color = 'moccasin'
データフレームをグループ化し各最小値を求める	df.groupby('列A').min()
日付時刻データが水曜日かどうかテストする	aDatetime.weekday() == 2
リストの最後を使う	aList[-1]
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
タプルをnからナンバリングする	enumerate(aTuple, start=n)
データフレームの中の未入力値の合計をカウントする	df.isna().sum()
データフレームの一部の列の値を正規表現でまとめて置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
横棒グラフをマルーン色を用いて描画する	plt.barh(データ列x, データ列y, color='maroon')
複数行対応として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
シーケンスを文字列に変換して部分文字列で連結する	sub.join(map(str, iterable))
ダークシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
option: 区切り記号を使わない	sep = ''
黒いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームのNaNを最小値で補う	df.fillna(df.min())
グリッド線	plt.grid(color='#800080')
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
データフレームをグループ化し最大値を求める	df.groupby('列A').max()
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
日付時刻データが土曜日か確認する	aDatetime.weekday() == 5
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
文字列を文字コード列にする	[ord(ch) for ch in s]
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
カテゴリで色付けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ダークバイオレット色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
多次元データを主成分分析を用いてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
option: グラフの色をクリムゾンに設定する	color = 'crimson'
折れ線グラフの色をクリムゾンに変更する	plt.plot(データ列x, データ列y, color='crimson')
両端キューをタプルに変換する	tuple(deq)
作画のフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
双方向キューの最初から値を取り除く	deq.popleft()
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: ペルーを使う	color = 'peru'
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
ライトスカイブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
二つの列を用いて表データを大きい順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
ヒストグラムをサンディーブラウン色を用いて描画する	plt.hist(データ列, color='sandybrown')
両端キューの中に値は含まれてる	element in deq
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: グラフを一点鎖線に指定する	linestyle = 'dashbot'
option: グラフの種類を実線に変更する	linestyle = 'solid'
折れ線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
全要素を0で初期化した配列	np.zeros(要素数)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
配列の要素ごとに加算する	aArray + aArray2
カーキ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
散布図に▲マーカーを使用する	plt.scatter(データ列x, データ列y, marker='^')
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
整数nを八進表現にする	oct(n)
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
配列をn個に分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
改行なしに二つの文字列をプリントする	print(value, value2, end='')
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列の終了位置より前に部分文字列が含まれるか	s.find(sub, 0, end) != -1
自然数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
ヒートマップとしてクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
タプルをn回連結する	aTuple * n
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
図の縦横を変更する	plt.figure(figsize=(横幅, 高さ))
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
配列間のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
データフレームの指定したカラムのどの値が頻出か調べる	df['列A'].mode()
三自然数の最小公倍数を算出する	math.lcm(n, n2, n3)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
数値を下線付きにする	f'\033[4m{value}\033[0m'
L1ノルムを使ってデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
データフレームの平均値	df.mean()
データフレームを指定した列でソートする	df.sort_values(by='列A')
オブジェクトの無限のイテラブル	itertools.repeat(element)
小文字を全て使う	string.ascii_lowercase
option: 全体を計算対象にする	axis = None
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
option: ダークバイオレットを使用する	color = 'darkviolet'
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
データフレームの各カテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
昇順にデータフレームを二つの列によってソートし、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
小麦色色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
タプル中の最初の文字列を探す	aTuple.index(element)
データフレームの選択した列の中にいくつ欠損値があるかカウントする	df[['列A', '列B']].isna().sum()
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
縦軸の目盛を非表示にする	plt.yticks([])
データフレームの指定した列の中にいくつ文字列が存在するか求める	df['列A'].isin([value]).sum()
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
2つの文字列は等しい	s == s2
散布図の▲マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
文字列中に非英字が含まれるか判定する	any(not c.isalpha() for c in s)
ヒストグラムを赤くする	plt.hist(データ列, color='r')
データフレームから重複をインプレイスでドロップする	df.drop_duplicates(inplace=True)
横棒グラフをミディアムパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: ディムグレーを用いる	color = 'dimgray'
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列が文字列より辞書順で前か判定する	s < s2
マゼンタで文字列をプリントする	print(f'\033[35m{value}\033[0m')
イテラブルでカウンタを更新する	aCounter.update(iterable)
CSVファイルにデータフレームをBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
値は集合の要素でないか調べる	element not in aSet
データフレームの中のカラムを等量でビン数nでビン分割する	pd.qcut(df[col], n)
データフレームのあるカラムの中にある日付データの数をカウントする	df['列A'].isin([value]).sum()
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
option: ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
データフレームの指定した列の空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
実数のn乗の実数剰余を求める	pow(x, n, y)
縦棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
改行しなくて数値を出力する	print(value, end='')
option: 色をチョコレートに設定する	color = 'chocolate'
リストをy座標、リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
ファイルパスをSJISを用いて開く]	open(filepath, encoding='shift_jis')
文字列の先頭から空白を取り除く	s.lstrip()
データ列のユニークな要素を調べる	ds.unique()
プロットに格子を入れる	plt.grid(True)
リストをビン数nを用いてビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
赤い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
モデルの精度を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームの選択したカラムを千の位で四捨五入する	df[['列A', '列B']].round(-3)
データフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
今日の日付時刻を求める	datetime.datetime.now()
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: 色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
ゼロ埋めされたブール型のベクトルを作成する	np.zeros(要素数, dtype=np.int32)
浮動小数点数を実数に加算する	x + y
option: 行列のデータ型を指定する	dtype = np.uint8
option: ピンク色を使用する	color = 'pink'
配列とリストについての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
文字列中に部分文字列が含まれるか調べる	sub in s
表データのあるカラムが何分か調べる	df['列A'].dt.minute
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
日付データからn日分、減らす	aDate - datetime.timedelta(days=n)
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: 淡いピンク色を使う	color = 'lightpink'
両端キューの要素数	len(deq)
折れ線グラフをダークスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
縦棒グラフを青紫色を用いて描画する	plt.bar(データ列x, データ列y, color='violet')
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int)
サイコロと同じ乱数を発生させる	random.randint(1, 6)
タプルを反転する	reversed(aTuple)
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
タプルの項目数	len(aDict)
文字列内にひとつでも小文字がある	any(c.islower() for c in s)
異なる列をキーにしてデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
キーで指定された項目をマッピングからポップする	aDict.pop(key)
文字列を正規表現で区切る	re.split(pattern, s)
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
昇順にリストの要素を並べる	sorted(aList, reverse=True)
折れ線グラフのダイアモンドマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列がリストに含まれないか	element not in aList
シーケンスの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
option: フォントの色をグリーンイエローに変更する	color = 'greenyellow'
指定したカラムの要約統計量	df['列A'].describe()
データフレームのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
黒い下三角マーカーをイテラブルと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X')
重複を認めてデータフレームからランダムに5行をサンプリングする	df.sample(5, replace=True)
numpyを使う	import numpy as np
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームのn番目の行を抽出する	df.loc[n]
列名を指定して２つのデータフレームを左結合する	pd.merge(df, df2, on='列A', how='left')
入力から２つの文字列値を読む	A, B = map(str, input().split())
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()//60
行列を一次元にする	aArray.flatten()
データ列のユニークな要素数を調べる	ds.nunique()
今日が木曜日か調べる	datetime.datetime.today().weekday() == 3
データフレームの基本統計量	df.describe()
ヒストグラムをスプリンググリーン色を使って描画する	plt.hist(データ列, color='springgreen')
エクセルファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
赤いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの選択したカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
データフレームからランダムに抽出する	df.sample()
文字列を積極的に小文字に変換する	s.casefold()
浮動小数点数はNaNかどうかテストする	math.isnan(x)
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: フォントの色をミディアムスレートブルーに変更する	color = 'mediumslateblue'
option: エラーがあるとき、例外を発生させる	errors = 'strict'
10を底とする対数	math.log10(x)
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
文字列を改行で分割する	s.splitlines()
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
SJISでデータフレームをCSV形式に保存する	df.to_csv('file.csv', encoding='shift_jis')
option: グリーンイエロー色を使用する	color = 'greenyellow'
配列とリストについての散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
赤いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
グラフのデータラベルの場所を(x,y)に変更する	plt.legend(loc=(x, y))
データフレームをある列で小さい順に整列して、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
八進文字列をバイナリにする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
配列の値を変更する	aArray[行番号, 列番号] = 指定の値
グラフの見栄えを良くする	import seaborn as sns
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
1からnまでの整数リストを作る	list(range(1, n+1))
マッピングの項目名に対応した値を得る	aDict.get(key)
nが一桁の数か調べる	0 <= n <= 9
ファイルパスを読み込みできるように開く]	open(filepath, mode='r')
縦棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
散布図をシャルトリューズ色を使って描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
プロットからグリッド線を消す	plt.grid(False)
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
option: 印をポイントに変える	marker = '.'
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
リストを番号付けする	enumerate(aList)
箱ヒゲ図にラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
横棒グラフをスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='steelblue')
タイムスタンプデータの月	aDatetime.month
テーマを色差別なくする	sns.set(pallete='colorblind')
オブジェクトのフィールドを削除する	delattr(obj, プロパティ名)
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: 赤にグラフの色を設定する	color = 'red'
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
データフレームの指定した列の母標準偏差	df['列A'].std(ddof=0)
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='grey')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
散布図に大バツ印を用いる	plt.scatter(データ列x, データ列y, marker='X')
year年day月のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
ファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
グラフの見栄えをデフォルトでイイ感じに設定する	sns.set()
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
行列の行列積	np.matmul(aArray, aArray2)
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
指定した列の値で集計し、最大値を求める	df.groupby('列A').max()
パラメータが無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, oo)
線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ゼロ埋めされた複素数型の配列を作る	np.zeros(要素数, dtype=bool)
縦棒プロットを描き、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
二つの集合は互いに素	aSet.isdisjoint(aSet2)
散布図の三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ある列の値でデータフレームをグループ化する	df.groupby('列A')
文字列内にひとつでも大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
option: 丸マーカーを使う	marker = 'o'
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
option: 小麦色色を使う	color = 'wheat'
option: フォントの色をシルバーに指定する	color = 'silver'
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
データ列の変遷を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
回帰分析をニューラルネットとしてする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
文字列の中で複数行対応としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
折れ線グラフの丸マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
x座標の目盛を対数に変更する	plt.xscale('log')
文字列でフォーマットしてタイムスタンプデータを文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
option: バイナリ用にセットする	mode = 'rb'
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
数式の平方根を求める	sympy.sqrt(e)
文字列を空白によって分割し、整数リストに変換する	map(int, s.split())
option: グラフの色をホワイトスモークにする	color = 'whitesmoke'
珊瑚色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
実数の床数	math.floor(x)
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
その最頻値でデータフレームのカラムの欠損値を補う	df['列A'].fillna(df['列A'].mode().iloc[0])
目盛線	plt.grid(alpha=0.5)
パレットトルコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームをTSVファイルからロードする	pd.read_csv('file.tsv', sep='\t')
赤い実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
サポートベクターマシンとして回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
リスト内の要素が全て真	all(aList)
グラフの色テーマを濃くする	sns.set(pallete='deep')
カラムのUNIX時間を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
option: フローラルホワイトを使用する	color = 'floralwhite'
ベクトルの形状を変形する	aArray.reshape(行数, 列数)
リストの中の一番大きい値	max(aList)
プラットホームがLinuxかどうか確認する	sys.platform.startswith('linux')
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
タプルの文字列が最初に見つかる位置	aTuple.index(element)
日付データの月数を見る	aDate.month
行列の演算を行う	import numpy as np
データフレームのカラムのn次モーメントを計算する	scipy.stats.moment(df['列A'], moment=n)
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームをグループ化し、それぞれの平均値を求める	df.groupby('列A').mean()
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
データシリーズの値が欠損値か調べる	ds.isna()
非数値データ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
option: プラムにフォントの色を設定する	color = 'plum'
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
入力から二つの実数を読み込む	A, B = map(float, input().split())
折れ線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategrey')
イテラブルを文字列リストに変換して、タブを用いて結合する	'\t'.join(map(str, iterable))
option: グラフの色をサーモンに設定する	color = 'salmon'
実数は非数	math.isnan(x)
2次元リストをフラット化する	sum(aList)
EUCとしてファイルパスをオープンする]	open(filepath, encoding='euc_jp')
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
データフレームをグループ化し、個数を求める	df.groupby('列A').count()
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
小数点数の双曲線正接を求める	math.tanh(x)
文字列中からパターンに大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
連立方程式の解を求める	sympy.solve([e, e2])
option: デピンクにグラフの色を設定する	color = 'deeppink'
大バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
散らばりを描画する	plt.scatter(データ列x, データ列y)
リストが少なくともひとつ真か調べる	any(aList)
データフレームの指定したカラムの中にがあるか	df['列A'].isin([value])
データフレームのカラムからユニークな値を抽出し、リスト化する	df[col].unique().tolist()
縦棒グラフをプロットして、バーの横幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
nからn2を引いてnとする	n -= n2
棒グラフをラベンダーブラッシュ色を用いて描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
JSONフォーマットの文字列をロードする	json.loads(jsonString)
二つの関係が真サブセットかどうか調べる	aSet < aSet2
リストをn個に等間隔でビンニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
縦軸を対数に変更する	plt.yscale('log')
折れ線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームから１つのカラムだけ選択する	df[['列A']]
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
ヒストグラムをゴールデンロッド色を用いて描画する	plt.hist(データ列, color='goldenrod')
データフレームの最後を調べる	df.tail()
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
追加できるように既存のファイルをBOM付きとしてオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームを二つの列によって昇順に並べる	df.sort_values(by=['列A', '列B'], ascending=True)
パールバイオレットレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
棒グラフをサンディーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ティール色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームから10行、ランダムサンプリングする	df.sample(10)
データフレームのある列の欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
カラムの最頻値を求める	mode, count = scipy.stats.mode(df['列A'])
あるカラムのカテゴリごとの個数	df.groupby('列A').count()
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
黒い右三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
ダーク・スラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
option: 大バツマーカーを使用する	marker = 'X'
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
横方向に2つのデータフレームを合体させる	pd.merge(df, df2)
縦棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
既存のファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
折れ線グラフに赤い▼印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの行数と列数を調べる	df.shape
option: バイナリ書き込みモードに設定する	mode = 'wb'
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
リネン色でヒストグラムを描画する	plt.hist(データ列, color='linen')
リストの先頭の要素	aList[0]
線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
option: フォントの色をライトグレーに指定する	color = 'lightgray'
option: グラフの色を白に設定する	color = 'white'
データシリーズの中にいくつ欠損値があるか数える	ds.isna().sum()
配列と配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームをCSV形式で出力する	df.to_csv('file.tsv', sep='\t')
データフレームの中の列を分割する	pd.cut(df[col], aList)
option: ミントクリームを使用する	color = 'mintcream'
珊瑚色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
option: グラフの色をスチールブルーに変更する	color = 'steelblue'
データフレームの欠損値をxに指定する	df.fillna(x)
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
データフレームをある列のカテゴリでグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
配列とデータ列の散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
三角印を使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
文字列をISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
文字列を走査し、パターンに複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
TSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
全要素が1の行列を作る	np.ones(行数, 列数, dtype=np.int)
日付データからn時間を減らす	aDate - datetime.timedelta(hours=n)
n掛けるn2	n * n2
２次元リストをflattenする	sum(aList)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
エポック秒を日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
標準出力を用いる	sys.stdout
全要素を０で初期化した3２ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
外れ値に強い単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
文字列が全てアスキー文字	s.isascii()
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
データ列をリストを境界値としてビニングする	pd.cut(ds, aList)
ヒストグラムの色をビスクにセットする	plt.hist(データ列, color='bisque')
列自身の長さnの順列	itertools.permutations(iterable, n)
データシリーズが何分か知る	ds.dt.minute
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
茶色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
100行を重複ありでランダムにデータフレームからサンプリングする	df.sample(100, replace=True)
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
ふたつのカラムからグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
n進文字列を整数にする	int(s, n)
option: ライトスレイグレーを使う	color = 'lightslategray'
再帰の最大回数	sys.getrecursionlimit()
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
線形モデルの係数を見る	model.coef_
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
標準入力から1行分改行なしで読む	sys.stdin.readline().rstrip()
項目名が辞書に存在するかどうか調べる	key not in aDict
文字列を空白で区切って、整数リストにする	map(int, s.split())
文字列を最後の部分文字列で二分し、最初の文字列を求める	s.rpartition(sub)[0]
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
文字列が全て空白	s.isspace()
文字列の左側から部分文字列を取り除く	s.removeprefix(sub)
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
辞書のキーとその項目をペアとして取り出す	aDict.items()
２つのオブジェクトが同じ	obj is obj2
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
JSONフォーマットのファイル入力を読み込んで、dataとする	data = json.load(fin)
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
文字列を赤色にする	f'\033[31m{value}\033[0m'
データフレームのあるカラムが何分か見る	df['列A'].dt.minute
三数の最も小さい値	min(x, y, z)
option: オリーブを使用する	color = 'olive'
データシリーズのどの値が頻出か見る	ds.mode()
標準出力をフラッシュする	sys.stdout.flush()
マッピングのキー一覧	list(aDict)
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
赤い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
サーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
文字列リストを一つにし、ひとつの文字列にする	''.join(map(str, iterable))
データ列と配列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
散布図を赤い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
書き込みモードを用いてファイルパスをオープンする]	open(filepath, mode='w')
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムの色をゴールデンロッドにする	plt.hist(データ列, color='goldenrod')
option: 改行をセパレータで用いる	sep = '\n'
データフレームのカラムのモードを求める	mode, count = scipy.stats.mode(df['列A'])
回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
配列が正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
クラス分類をスタッキングを用いて行う	sklearn.ensemble.StackingClassifier()
二つの文字列を文字列で区切って出力する	print(value, value2, sep=s)
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
リストをマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
エラーなく辞書からキーの値を得る	aDict.get(key, None)
タプルとタプルを連結する	aTuple + aTuple2
データフレームの選択したカラムを四捨五入して整数型にする	df[['列A', '列B']].round().astype(int)
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ラインを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームのある列の歪み	df['列A'].kurt()
option: ブランチドアーモンドにグラフの色を設定する	color = 'blanchedalmond'
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
option: インディゴ色を使う	color = 'indigo'
データフレームから型リストデータ型の列を取り出す	df.select_dtypes(include=typeList)
プログラムの実行を即座に終了する	sys.exit()
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
リストと数列について散布図を描画して、大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストをタプルにする	tuple(aList)
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
ペルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列の末尾から部分文字列を消す	s.rstrip(sub)
線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
オブジェクトの属性を削除する	delattr(obj, プロパティ名)
横棒グラフをインディゴ色を使って描画する	plt.barh(データ列x, データ列y, color='indigo')
表データの上5行を取り出す	df.head(5)
辞書のコピーを作る	aDict.copy()
データフレームの選択した列のNaNを前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
ファイルパスのファイル名を使う	os.path.basename(filepath)
要素が集合に含まれないか	element not in aSet
配列の幾何平均	scipy.stats.gmean(配列)
双方向キュー中の数値の数を数える	deq.count(element)
多次元尺度構成法を使って多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
イテラブルから集合	set(iterable)
カウンタの要素数	len(aCounter)
入力ストリーム全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
２つの列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
xとyの商と余りを同時に計算する	divmod(x, y)
2つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
option: コーンズシルクを使う	color = 'cornsilk'
正規表現を事前にコンパイルする	re.compile(pattern)
ラベンダーブラッシュ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ある列の文字列に部分文字列が存在する行を抽出する	df[df['列A'].str.contains(部分文字列)]
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
インデックスによってデータフレームを並べる	df.sort_index()
平均付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
三つ並べてヒストグラムを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
n個分双方向キューの順序をローテンションする	deq.rotate(n)
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
両端キューの先頭から要素を取り除く	deq.popleft()
リストをナンバリングする	enumerate(aList)
データフレームの列を柱状図にする	plt.hist(df[column])
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
データフレームのカラムが正規分布に従うか調べる	scipy.stats.shapiro(df['列A'])
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
実数が正の数	x > 0
マッピングを階層化マップにする	collections.ChainMap(aDict)
ダークオーキッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
赤い一点鎖線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
プロットの用途を論文にする	sns.set(context='paper')
データフレームの先頭5行を調べる	df.head(5)
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
データを最大最小値を用いて標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
多次元データを主成分分析として濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
パレットトルコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
キューの値を逆に並べ直す	deq.reverse()
文字列の先頭の空白を取り除く	s.lstrip()
データフレームの列の名前の一覧を使う	df.columns
option: ピーチパフを使う	color = 'peachpuff'
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
変数について数値をn階微分する	sympy.diff(e, z, n)
指定した列の欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
最大長nの双方向キューを準備する	collections.deque(maxlen=n)
n個に等量でデータフレームの中のカラムを分割する	pd.qcut(df[col], n)
クラス分類をランダムフォレストでする	model = sklearn.ensemble.RandomForestClassifier()
キーがマップ上でまだ定義されていないか調べる	key not in aDict
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
option: グラフの色をスプリンググリーンにする	color = 'springgreen'
option: ▲マーカーを用いる	marker = '^'
文字列は全て印字できるか	s.isprintable()
文字列を小文字に変換する	s.lower()
option: スラッシュをセパレータで使う	sep = '/'
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
NULLに等しい値	None
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
文字列が全て空白文字からなる	s.isspace()
文字列は文字列より辞書順で前か調べる	s < s2
option: UTF8を使う	encoding = 'utf-8'
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
option: トマト色を用いる	color = 'tomato'
実数以上の最小の整数を求める	math.ceil(x)
データフレームのカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
円グラフを完全な円にする	plt.axis('equals')
ヒストグラムの色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
入力を整数として受け取る	int(input())
ベクトルの形状	aArray.shape
第二引数で指定されたファイルの名前	sys.argv[1]
option: グラフの色をダークマゼンタに変更する	color = 'darkmagenta'
ファイルパスからの入力ストリームを使う	open(filepath)
ゼロ埋めされたブール型の配列を作成する	np.zeros(要素数, dtype=np.int32)
データフレームのある列の値がx以下の行を抽出する	df[df['列A'] <= x]
実線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
日付データからn日分減らす	aDate - datetime.timedelta(days=n)
カラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
option: 貝殻色を用いる	color = 'seashell'
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
option: サーモンを使用する	color = 'salmon'
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
カラムの幾何平均を計算する	scipy.stats.gmean(df['列A'])
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
実数の小数部を計算する	math.modf(x)[0]
SVDを用いて多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームのあるカラムの中にいくつ欠損値が存在するか数える	df['列A'].isna().sum()
x座標だけ目盛り線	plt.grid(axis='x')
散布図をカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='khaki')
プラットフォームのコードポイントの最大値	sys.maxunicode
キューは空でないかどうか調べる	len(deq) != 0
ミディアムターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
オブジェクトはある型	isinstance(obj, クラス)
全要素が初期値の行列を初期化する	np.full((行数, 列数), 初期値, dtype=np.int)
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
リストとリストについての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
文字列を紫色でプリントできる文字列にする	f'\033[35m{value}\033[0m'
八進数字を使う	string.octdigits
xを実数に変換する	float(x)
0からnの範囲で	range(n)
データフレームの中に文字列があるか	df.isin([value])
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
nまでの奇整数リスト	list(range(1, n, 2))
原点から(実数,y)の距離	math.hypot(x, y)
0からN未満までの配列	np.arange(N)
相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
option: ペールグリーン色を用いる	color = 'palegreen'
option: データ型として複素数型を使う	dtype = bool
データフレームの選択したカラムを万の位で丸める	df[['列A', '列B']].round(-4)
真部分集合か確認する	aSet < aSet2
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
カラーパレットを濃くする	sns.set(pallete='deep')
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
option: ドジャーブルー色を用いる	color = 'dodgerblue'
線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
ある列の文字列が正規表現文字列にマッチしない行を抽出する	df[~df['列A'].str.match(正規表現)]
データシリーズのKurtosisを算出する	ds.kurt()
option: ダークスラテグレーを用いる	color = 'darkslategray'
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
予測値とデータの離れ具合をグラフ化する	sns.residplot(x='列名', y='列名', data=df)
正規表現に文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
トマト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
無限大を用いる	math.inf
ライトスレイグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
散布図の△マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
文字列中から部分文字列を見つける	s.find(sub)
データフレームの選択したカラムの値を正規表現patternでまとめてreplに置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: スノーにグラフの色を変更する	color = 'snow'
データフレームの選択した列の中にある文字列の数を数える	df[['列A', '列B']].isin([value]).sum()
縦棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データシリーズのタイムゾーンをセットする	ds.tz_convert('Asia/Tokyo')
タプル中の最初のオブジェクトを探す	aTuple.index(element)
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
表データを二つの列で降順に並べる	df.sort_values(by=['列A', '列B'], ascending=False)
タプルの長さ	len(aTuple)
ランダムに5行をデータフレームから抽出する	df.sample(5)
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの行の一覧を使う	df.index
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
ラインを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 青緑を用いる	color = 'turquoise'
プロットを画面用に変更する	sns.set(context='notebook')
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
ヘッダなしでCSVファイルを読む	pd.read_csv('file.csv', header=None)
横棒グラフをミントクリーム色を用いて描画する	plt.barh(データ列x, データ列y, color='mintcream')
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
xが一桁の正の数か判定する	0 <= x <= 9
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
ヒストグラムの色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
option: ライトスレイグレーに色を変更する	color = 'lightslategrey'
辞書をJSON形式のインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
箱ヒゲ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
ターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
書き込みモードとしてファイルを開いて]fとする	f = open(filepath, mode='w')
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
文字列の左端から部分文字列を消す	s.lstrip(sub)
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
KNNでクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
リストをひとつ置きに取り出す	aList[::2]
ある列に重複があれば、削除する	df.drop_duplicates(subset='列A', inplace=True)
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
option: チョコレート色を使う	color = 'chocolate'
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
データフレームの複数のカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームのあるカラムの中に存在する文字列の合計をカウントする	df['列A'].isin([value]).sum()
日付時刻データからn分減算する	aDatetime - datetime.timedelta(minutes=n)
データ列を全て日付データにする	pd.to_datetime(ds)
浮動小数点数の最大値	sys.float_info.max
データフレームの末尾10行を選択する	df.tail(10)
n回オブジェクトが繰り返すイテラブル	itertools.repeat(element, n)
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
Pandasのバージョンを出力する	print(pd.__version__)
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
イテラブルとシーケンスを連結する	itertools.chain(iterable, iterable2)
ライトグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
nの無限な整数リスト	itertools.repeat(n)
日付時刻データの時間数を使う	aDatetime.hour
ヒストグラムを二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
option: カラム名をリストでセットする	names = 列名リスト
リストをn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの選択した列の標準偏差を求める	df[['列A', '列B']].std()
グラフの縦横比を等しくする	plt.axis('equals')
カテゴリ列でグループ化して、データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
数式を簡略にする	sympy.sympify(e)
y軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
指定したカラムの第三四分位数	df['列A'].quantile(0.75)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
データフレームからカラムを１つ選択する	df[['列A']]
ふたつの集合の交わりを求める	aSet.intersection(aSet2)
数列とリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
スタックを全て取り除く	deq.clear()
列名を指定して二つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
ヒストグラムの色をプラムに変更する	plt.hist(データ列, color='plum')
線グラフの色をバイオレットにする	plt.plot(データ列x, データ列y, color='violet')
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
部分文字列で文字列を区切る	s.split(sub)
JSON形式のファイルを辞書にする	json.load(fin)
線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
値をプリントする	print(value)
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
列自身の長さnの順列を求める	itertools.permutations(iterable, n)
データフレームのカラムの歪度を求める	df['列A'].kurt()
ファイルをオープンして]バイナリストリームを見る	open(filepath, mode='rb')
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
散布図を赤いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='r')
オールドレース色としてヒストグラムを描画する	plt.hist(データ列, color='oldlace')
散布図をディープスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
横棒グラフをペルー色を用いて描画する	plt.barh(データ列x, データ列y, color='peru')
タプルの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
option: 書き込み用に設定する	mode = 'w'
数値の変数の解を方程式として求める	sympy.solve(e, z)
ある列の文字列に部分文字列が含まれない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
散布図にrgbの星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データシリーズの欠損値を平均値に設定する	ds.fillna(ds.mean())
ヒストグラムをパールバイオレットレッド色を使って描画する	plt.hist(データ列, color='palevioletred')
黄緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
列をビン分割する	pd.cut(ds, aList)
option: ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
日付データが木曜日かどうか	aDate.weekday() == 3
辞書の項目数	len(aDict)
文字列の中のASCII限定として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
コレクションを用いる	import collections
配列とリストの散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図に赤いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
左三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
ランダムに重複ありでn行をデータフレームからサンプリングする	df.sample(n, replace=True)
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
データ列の各値が何回出現するか調べる	ds.value_counts()
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
クリムゾンにヒストグラムの色をする	plt.hist(データ列, color='crimson')
スレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
イテラブルを文字列リストに変換して、タブによってつなげる	'\t'.join(map(str, iterable))
入力から二つの整数を読み込む	A, B = map(int, input().split())
カウンタ同士で共通部分演算する	aCounter & aCounter2
データフレームのKurtosis	df.kurt()
option: フォントの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
ヒストグラムをハニーデュー色として描画する	plt.hist(データ列, color='honeydew')
ファイルから入力ストリームを使う	open(filepath)
カウンタ間でユニオン演算する	aCounter | aCounter2
option: レベッカパープルにグラフの色を変更する	color = 'rebeccapurple'
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
配列と数列についての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
リストと数列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図に▽印を使用する	plt.scatter(データ列x, データ列y, marker='v')
option: 白を使用する	color = 'white'
本日の日付時刻	datetime.datetime.now()
ひとつでも大文字が文字列内にあるか調べる	any(c.isupper() for c in s)
データ列の移り変わりを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
両端キューのn番目に値を挿入する	deq.insert(n, element)
２つの列の値によってデータフレームをグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
散布図の印を青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
スラグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
今日は何月か知る	datetime.datetime.today().month
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
グループ化してデータフレームの散布図を縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
折れ線グラフをダーク・スラテグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
アンサンブル学習を用いて回帰分析をする	sklearn.ensemble.VotingRegressor()
データフレームのn行目を抽出する	df.loc[n]
option: 紺碧を使用する	color = 'azure'
線グラフをフォレストグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
数列とデータ列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データ列を閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
整数nの16進リテラル	hex(n)
リストをビン数nとしてビン分割する	pd.cut(aList, n)
散布図をダイアモンド印を使用して描画する	plt.scatter(データ列x, データ列y, marker='D')
option: 真紅に色を設定する	color = 'crimson'
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
リストの全要素を除く	aList.clear()
プロットのフォントを日本語に指定する	sns.set(font='IPAexGothic')
折れ線グラフに三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
辞書のキーとその値を列挙する	aDict.items()
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
データフレームの選択したカラムの中にが含まれるか調べる	df[['列A', '列B']].isin([value])
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
折れ線グラフの上三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: グラフの色をライトコーラルに指定する	color = 'lightcoral'
データフレームの列のユニークな値の個数	df[col].nunique()
箱ひげ図としてデータ列を描く	plt.boxplot(データ列)
実数から浮動小数点数を減算する	x - y
実数の双曲線正弦の逆数	math.asinh(x)
データフレームの最初10行を見る	df.head(10)
数を文字列に変換する	str(x)
データフレームの選択した列の第三四分位数	df[['列A', '列B']].quantile(0.75)
散布図の下三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
整数nを二進数表記に変換する	bin(n)
xでデータフレームの未入力値を置換する	df.fillna(x)
散布図のバツ印を黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: 色をダークゴールデンロッドにする	color = 'darkgoldenrod'
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
nがn2未満、またはn3以上か確認する	n < n2 or n >= n3
セットの浅いコピーを準備する	aSet.copy()
マップのキーと値を入れ替える	{v: k for k, v in aDict.items()}
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
散布図を赤いバツマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
カンマ区切りのファイルを読む	pd.read_csv('file.csv', sep=',')
指定した列を千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
列を分割する	pd.cut(ds, aList)
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
全要素を0で初期化した配列を作成する	np.zeros(要素数)
データフレームの列をヒストグラムでプロットする	plt.hist(df[column])
データシリーズを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
リストを組に変換する	tuple(aList)
option: 印をバツに変更する	marker = 'x'
option: フォントの色をスラグレーにする	color = 'slategrey'
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
計算機イプシロンを求める	sys.float_info.epsilon
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
オーキッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
option: n番目の列を行に設定する	index_col = n
縦棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフをリネン色を用いて描画する	plt.plot(データ列x, データ列y, color='linen')
線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
改行文字を求める	'\n'
データフレームのあるカラムの値をValueMapで全部変更する	df['列A'].replace(ValueMap)
文字コードtextで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding=text)
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
青いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データ列の推移を折れ線プロットとして可視化する	plt.plot(range(len(データ列)), データ列)
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
角度のラジアンを算出する	math.radians(degree)
代数計算を使用する	import sympy
option: ハニーデューを使用する	color = 'honeydew'
空白で文字列を右から分割する	s.rsplit()
数列とリストについて散布図を描画し、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
散布図をオールドレース色を用いて描画する	plt.scatter(データ列x, データ列y, color='oldlace')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
データフレームの指定したカラムを四捨五入して整数型にする	df['列A'].round().astype(int)
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
現在のエポック秒	int(time.time())
グラフの描画で明るくカラーパレットを用いる	sns.set(pallete='bright')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
option: ダークグレー色を使用する	color = 'darkgrey'
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
データフレームの尖度を求める	df.skew()
アヤメのデータセットをロードする	df = sns.load_dataset('iris')
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
コーパスのバージョン	version = 'wcce2022-0.1'
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データ列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
小数点数の仮数部	math.frexp(x)[0]
option: 切片を算出しない	fit_intercept = False
ディープスカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
文字列の開始位置から先に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ダークオリーブグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
辞書のキーとその値をペアとして取り出す	aDict.items()
値を太字で表示する	print(f'\033[1m{value}\033[0m')
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
横棒グラフをオレンジ色として描画する	plt.barh(データ列x, データ列y, color='orange')
青い線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
シーケンスとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームを表示するとき折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
データフレームのインデックスの名前の一覧	df.index
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
ヒストグラムをライトスレイグレー色を使って描画する	plt.hist(データ列, color='lightslategrey')
option: グラフの色をゴールデンロッドに変更する	color = 'goldenrod'
折れ線グラフのポイントマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
縦棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
文字列リストにシーケンスを変換して、カンマで連結する	','.join(map(str, iterable))
キューのn番目に要素を途中追加する	deq.insert(n, element)
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
特異値分解で多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフの星印の色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
日付時刻データとタイムスタンプデータの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
numpyを使用する	import numpy as np
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ローングリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
文字列が文字列リストに含まれるか	s in aStringList
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
8進文字列を整数に変換する	int(s, 8)
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
一点鎖線として数列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
整数nはタプルのいづれか	n in aTuple
rgbのダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
商と余りを同時に計算する	divmod(x, y)
要素がマッピングの値として含まれている	element in aDict.values()
xでデータフレームの指定した列の未入力値を置換する	df['列A'].fillna(x)
シーケンスを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
パラメータについて数値の積分を求める	sympy.integrate(e, z)
線を青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
シスル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
配列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
辞書から項目名の値	aDict.get(key)
データフレームの欠損値が含まれる部分を	df.style.highlight_null()
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
配列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
ファイルパスを絶対パスにする	os.path.abspath(filepath)
データシリーズの記述統計量を算出する	ds.describe()
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
カウンタをリストに変換する	list(aCounter)
日付データと日付データの時間差を算出する	aDate - aDate2
文字列を最後の部分文字列で二つに区切って、後半の文字列を使う	s.rpartition(sub)[-1]
横棒グラフをサンディーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='sandybrown')
タイムスタンプデータと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフを半透明の点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
option: フォントの色を小麦色に設定する	color = 'wheat'
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームからランダムに5行を選ぶ	df.sample(5)
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフの左三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
こんにちは世界と出力する	print('Hello World')
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
ファイルを読み込み用にオープンする]	open(filepath, mode='r')
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
線グラフを黄緑色を用いて描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
全要素を０で初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
ベクトルの次元数	aArray.ndim
折れ線グラフの大バツ印を黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
散布図を黒い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの選択した列の相関行列をピアソンとして算出する	df[['列A', '列B']].corr(method='pearson')
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
縦棒グラフをアリスブルー色を使って描画する	plt.bar(データ列x, データ列y, color='aliceblue')
十六進数字を全部見る	string.hexdigits
ファイルをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
オプションで、ファイルを使用する	file = sys.open(filename, 'w')
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
数値の変数を数式で置き換える	e.subs(z, e2)
半透明の破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
タプルからキーの値をエラーなく参照する	aDict.get(key, None)
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
文字列を左トリムする	s.lstrip()
データシリーズがどれだけ、正規分布から尖っているか見る	ds.skew()
散布図の左三角印を青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
縦棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
書き込みできるようにファイルパスを開く]	open(filepath, mode='w')
数列とリストの散布図に文字列というデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
常用対数	math.log10(x)
コーンフラワーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: 色をネイビーに変更する	color = 'navy'
リストとリストについて散布図を描いて、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
リストと数列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの右三角印の太さを設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
コーンズシルク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
行列の累積和	np.cumsum(aArray)
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
赤い▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
mathをインポートする	import math
オブジェクトのハッシュ値を算出する	hash(obj)
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
ふたつの列からグループ化し最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
リストとリストについて散布図を描画して、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
指定した列を万の位で丸める	df['列A'].round(-4)
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
変数を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
データ列の各値の出現数	ds.value_counts()
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
配列のユニークな要素	np.unique(aArray)
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームのあるカラムを万の位で丸める	df['列A'].round(-4)
ガンマ関数の値	math.gamma(x)
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームをソートして、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
option: ライトグレー色を用いる	color = 'lightgray'
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
リスト間の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
紺碧色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
昇順にデータフレームを指定した列を用いてソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
リストを複製する	aList.copy()
タプルをひとつ置きに取り出す	aTuple[::2]
破線にヒストグラムをセットする	plt.hist(データ列, linestyle='dashed')
データフレームから型型のカラムだけ選択する	df.select_dtypes(ty)
白色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
プロットにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
表データをグループ化し、ある列に対し合計を求める	df.groupby('列A')['列B'].sum()
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
実数の整数部	math.modf(x)[1]
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
縦棒グラフをプロットしてラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
option: グラフの色をモカシンにする	color = 'moccasin'
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
折れ線グラフのバツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
option: バイナリモードを用いる	mode = 'rb'
文字列はPythonのキーワード	keyword.iskeyword(s)
縦棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
要素が集合のメンバーか確認する	element in aSet
赤い点線を使って線を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
標準出力を使用する	sys.stdout
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
オリベドラブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
指定したカラムの標本標準偏差を求める	df['列A'].std(ddof=1)
データフレームの未入力値が含まれる箇所に	df.style.highlight_null()
指定した列のNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
プロットの色テーマを暗くする	sns.set(pallete='dark')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
option: コロンをセパレータで用いる	sep = ':'
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
リストの先頭を取り除く	aList[1:]
nをn2だけ右シフトする	n >> n2
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
x座標の軸ラベルを指定する	plt.xlabel('x軸ラベル')
nがn2未満、またはn3以上	n < n2 or n >= n3
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
タプルをnから順序付けする	enumerate(aTuple, start=n)
データシリーズの中にいくつがあるか数える	ds.isin([value]).sum()
試しに何か動かす	print('Hello World')
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
棒グラフの横幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ある列に重複があれば除く	df.drop_duplicates(subset='列A', inplace=True)
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
イテラブルを箱ひげ図でプロットする	plt.boxplot(データ列)
Pandasのバージョンを表示する	print(pd.__version__)
線グラフの色をライトサーモンに変更する	plt.plot(データ列x, データ列y, color='lightsalmon')
データフレームの二つのカラムを並べてボックスチャートとして描画する	plt.boxplot([df['カラム'], df['カラム']])
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
データフレームをグループ化し、あるカラムに対し最大値を算出する	df.groupby('列A')['列B'].max()
横棒グラフをライム色として描画する	plt.barh(データ列x, データ列y, color='lime')
実数のtan	math.tan(x)
文字列を区切りで分割して、文字列リストに変換する	s.split(sub)
ファイルパスを書き込みモードで開く]	open(filepath, mode='w')
散布図に青い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
数式の微分を求める	sympy.diff(e)
サポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ダークスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
文字列の後ろから部分文字列を探す	s.rfind(sub)
データフレームをTSVファイルで保存する	df.to_csv('file.tsv', sep='\t')
二つの集合が集合と互いに素	aSet.isdisjoint(aSet2)
データ列の折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームのn行目を削除して	df.drop(n, axis=0)
要素は辞書の値として含まれているか調べる	element in aDict.values()
カウンタの値数	len(aCounter)
データフレームのあるカラムの曜日の名前を使う	df['列A'].dt.weekday_name
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='turquoise')
文字列を部分文字列で二つに区切って、左端の文字列を見る	s.partition(sub)[0]
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
リストと数列の散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
真上位集合かどうか調べる	aSet > aSet2
縦棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
行列の形状を求める	aArray.shape
option: ▲マーカーを使う	marker = '^'
テンプレートを辞書で文字列整形する	formatText.format_map(aDict)
グラフをポスターに設定する	sns.set(context='poster')
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
文字列を部分文字列で二分割する	s.partition(sub)
リストをn回、接続する	aList * n
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図に青い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: バッファのサイズをセットする	buffering = 4096
データフレームの複数の列を削除する	df.drop(['列A', '列B'], axis=1, inplace=True)
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
2つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
データフレームの値が欠損値かどうか判定する	df.isna()
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
赤色で文字列を出力する	print(f'\033[31m{value}\033[0m')
ヒートマップを用いてデータフレームの相関行列を可視化する	sns.heatmap(df.corr())
データフレームのあるカラムの記述統計量	df['列A'].describe()
ビン数nを使ってデータフレームの中の列をビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
配列と列のデカルト積を得る	itertools.product(iterable, iterable2)
タイムスタンプデータの時間数	aDatetime.hour
option: グラフの色をシアンに変更する	color = 'cyan'
0から始まる無限リスト	itertools.count()
右三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
実数のコサインの逆数	math.acos(x)
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームの指定した列の中にある文字列と文字列の個数を数える	df['列A'].isin([value, value2]).sum()
データシリーズを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
縦棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
option: フォントの色をオールドレースにセットする	color = 'oldlace'
配列のスカラー倍を求める	aArray * n
ファイルを読み込みモードを使って開く]	open(filepath, mode='r')
小数点数が有限	math.isfinite(x)
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
方程式の解を算出する	sympy.solve(e)
折れ線グラフの丸マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
リストの長さnの順列	itertools.permutations(iterable, n)
データシリーズの不偏分散を計算する	ds.var(ddof=1)
上限指定をした配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
option: バッファを使わない	buffering = 0
組の末尾を除く	aTuple[:-1]
データフレームの選択したカラムの中にある文字列の個数を調べる	df[['列A', '列B']].isin([value]).sum()
まとめて正規表現patternでデータフレームの選択したカラムの値を置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
オブジェクトのハッシュ値を求める	hash(obj)
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
サポートベクターマシンを用いて回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームの一部のカラムの中にある文字列の合計を求める	df[['列A', '列B']].isin([value]).sum()
文字列をカンマで区切って、列挙する	s.split(',')
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
最大値・最小値の範囲で一様な疑似乱数	random.uniform(最小値, 最大値)
横棒グラフをタン色を用いて描画する	plt.barh(データ列x, データ列y, color='tan')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: マーカーの色を設定する	markerfacecolor = '#800080'
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
option: マーカーを丸に変える	marker = 'o'
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
option: ポイントマーカーを描画する	marker = '.'
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
実数に浮動小数点数を加える	x + y
黄色で数値をプリントする	print(f'\033[33m{value}\033[0m')
option: ミディアムバイオレットレッドに色を設定する	color = 'mediumvioletred'
データフレームの列をグループ化して、ヒストグラムを用いて図示する	sns.histplot(df, x='列名', hue='カテゴリ名')
両端キューをデキューする	deq.popleft()
ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
列名を指定してデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
nとn2の排他的論理和	n ^ n2
横棒グラフをチョコレート色を用いて描画する	plt.barh(データ列x, データ列y, color='chocolate')
実数の逆余弦を求める	math.acos(x)
フクシア色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
度数分布図を描画し、、ビン数を設定する	plt.hist(データ列, bins=区関数)
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
最大値・最小値を用いて乱数を求める	random.randint(最小値, 最大値)
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
配列を分割数nでビニングする	pd.cut(aArray, n)
数列と配列についての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムの色をダークレッドに指定する	plt.hist(データ列, color='darkred')
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
カラム名を指定して２つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
ファイルをバイナリ書き込みモードで開いて]、fとする	f = open(filepath, mode='wb')
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの指定したカラムの値を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
部分文字列が文字列の開始位置以降に含まれない	s.find(sub, start) == -1
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
データシリーズの値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
チョコレート色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
option: 読み込みモードを使用する	mode = 'r'
データフレームのn行目以降選択する	df[n:]
等間隔でn個にデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
線グラフの色をオールドレースにセットする	plt.plot(データ列x, データ列y, color='oldlace')
option: スプリンググリーンを使う	color = 'springgreen'
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
組を反転する	reversed(aTuple)
整数nがリストのどれかかどうか調べる	n in aList
xを浮動小数点数にする	float(x)
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
散布図をダークスラテグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ファイル名がJSONファイルかどうか	filename.endswith('.json')
option: レベッカパープル色を使う	color = 'rebeccapurple'
両端キューから最初の要素を取り除く	deq.remove(element)
ある列を削除する	df.drop('列A', axis=1, inplace=True)
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ファイルパスのファイルサイズ	os.path.get_size(filepath)
散布図を赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='red')
データシリーズは何日か見る	ds.dt.day
データフレームの列をカテゴリデータにする	df[col].astype(object)
イテラブルと配列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
縦方向に複数のデータフレームを結合する	pd.concat([df, df2, df3], axis=0)
データフレームの尖度を算出する	df.skew()
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
カウンタの項目数	len(aCounter)
折れ線グラフの色をターコイズに指定する	plt.plot(データ列x, データ列y, color='turquoise')
小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
散布図を下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
指定した列の値で集計し、個数を求める	df.groupby('列A').count()
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームの指定したカラムの尖度	df['列A'].skew()
縦棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
縦棒グラフの色を深紅にする	plt.bar(データ列x, データ列y, color='crimson')
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
アクア色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
まとめてreplに正規表現patternで指定したカラムの値を置き換える	df['列A'].replace(pattern, repl, regex=True)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
リストと数列について散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
作画のフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
箱髭図を描画し、平均線を加える	plt.boxplot(データ列, meanline=True)
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームの指定したカラムの中にいくつNaNがあるか調べる	df['列A'].isna().sum()
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
ミディアムシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
辞書の項目名を列挙する	list(aDict)
selectorsでマスクしたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: ラベンダーブラッシュにフォントの色を設定する	color = 'lavenderblush'
option: 青を使う	color = 'blue'
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
nがn2より小さいかどうか確認する	n < n2
正規表現に文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
日付時刻データの日	aDatetime.day
ヒストグラムの色をターコイズに指定する	plt.hist(データ列, color='turquoise')
L2ノルムでデータを正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
rgbの▲マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
追加できるように文字コードtextとして既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
option: 淡い茶色にグラフの色を設定する	color = 'tan'
ダークレッド色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
バギングとしてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
既存の配列をベースに全要素が0の配列	np.zeros_like(aArray)
オブジェクトの種類	type(obj)
折れ線グラフに星印を加える	plt.plot(データ列x, データ列y, marker='*')
浮動小数点数のn乗	pow(x, n)
ヒストグラムの上限下限を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームの指定した列の名前一覧の列を抽出する	df[columns]
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
ゼロ埋めされた整数型のベクトル	np.zeros(要素数, dtype=np.int)
縦棒グラフを描いて、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームをグループ化しある列の要約統計量を求める	df.groupby('列A').describe()['列B']
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
option: 青紫色を使う	color = 'violet'
配列とリストの散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
列を全て日付データにする	pd.to_datetime(df['列A'])
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
実数をn乗する	x ** n
タプルをリストに変換する	list(aTuple)
option: ライトスカイブルー色を使用する	color = 'lightskyblue'
タンにヒストグラムの色を指定する	plt.hist(データ列, color='tan')
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
リストとイテラブルの散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ゼロ埋めされた行列	np.zeros(行数, 列数)
データフレームから重複した行を残さず消す	df.drop_duplicates(keep=False)
option: ペールグリーン色を使用する	color = 'palegreen'
リッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
ファイル名がTSVファイルか	filename.endswith('.tsv')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
データフレームの列の種類を見る	df.info()
データシリーズの標本分散を求める	ds.var(ddof=0)
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの指定したカラムの値をValueMapでまとめて置換する	df['列A'].replace(ValueMap)
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
縦棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
色付きの点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームの選択した列の欠損値をxで補う	df[['列A', '列B']].fillna(x)
バギングとしてクラス分類をする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
２次元タプルをフラット化する	sum(aTuple)
データ列の一意な値	ds.unique()
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
RANSACとして回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
グレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
正規表現で一度にデータシリーズの値をreplに変更する	ds.replace(pattern, repl, regex=True)
棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
淡く色調をグラフの描画で使用する	sns.set(pallete='muted')
option: グラフの色を貝殻に変更する	color = 'seashell'
タプルを昇順にソートする	sorted(aTuple, reverse=False)
ファイルのファイルサイズ	os.path.get_size(filepath)
イテラブルを多重集合に変換する	collections.Counter(iterable)
指定したカラムの上位25％	df['列A'].quantile(0.25)
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
明日の日付を求める	datetime.date.today() + datetime.timedelta(days=1)
配列とリストの散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
線グラフをリネン色を使って描画する	plt.plot(データ列x, データ列y, color='linen')
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームのあるカラムの平均を算出する	df['列A'].mean()
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
何回まで再帰ができるか、確認する	sys.getrecursionlimit()
棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
文字列中に非数字があるかどうか調べる	any(not c.isdigit() for c in s)
二つの集合は集合と交わりを持たない	aSet.isdisjoint(aSet2)
グラフのx軸を対数に変更する	plt.xscale('log')
最初の要素を双方向キューから取り除く	deq.remove(element)
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
文字列を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
実数が無限大か調べる	math.isinf(x)
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
散布図のクロス印の色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
リストを黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
リストをひとつ飛ばしで取り出す	aList[::2]
option: ハニーデューを使う	color = 'honeydew'
マップに辞書の値を更新する	aDict.update(aDict2)
指定した列で集計し、個数を求める	df.groupby('列A').count()
データフレームの選択したカラムの中に文字列と文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
文字列のケースを交換する	s.swapcase()
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
データフレームを関数の値によって集約する	df.groupby(関数)
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
黄緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
黒い▽マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
複素数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=bool)
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
データフレームの最頻値を求める	df.mode()
ランダムにデータフレームから10行を抽出する	df.sample(10)
折れ線グラフの下三角印を青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
一点鎖線を用いてヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームをタブ区切りのファイルから読む	pd.read_csv('file.tsv', sep='\t')
インデント幅nで、タプルをJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
グラフの色を明るくする	sns.set(pallete='bright')
スレートブルー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームの指定したカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
文字列の出力を改行しなくて行う	print(value, end='')
データ列の推移を赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
ヒストグラムをシルバー色を用いて描画する	plt.hist(データ列, color='silver')
グラフのx軸にラベルを付ける	plt.xlabel('x軸ラベル')
目的変数をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
ヒストグラムの色をシャルトリューズにする	plt.hist(データ列, color='chartreuse')
ある列の値がxに等しい行を選択する	df[df['列A'] == x]
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームをグループ化し、最大値を計算する	df.groupby('列A').max()
ビン数nとしてリストを分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
option: 濃いシアンにフォントの色を指定する	color = 'darkcyan'
線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
多次元データを特異値分解で濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データフレームからカラムを1つだけ選択する	df[['列A']]
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ローングリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
折れ線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データシリーズの中にある日付データと日付データの合計を数える	ds.isin([value, value2]).sum()
option: ナバホホワイト色を使う	color = 'navajowhite'
2つ並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
数値のパラメータにnを代入する	e.subs(z, n)
リストとシーケンスをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
数列のヒストグラムを描画する	plt.hist(データ列)
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
真部分集合	aSet < aSet2
イテラブルの集合を新規生成する	set(iterable)
データフレームの一部のカラムの標準偏差を求める	df[['列A', '列B']].std()
ファイルをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
両端キューの末尾	deq[-1]
数列と配列の散布図にrgbの四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
線グラフの色をサンディーブラウンにセットする	plt.plot(データ列x, データ列y, color='sandybrown')
データ列の各値が何回出現するか見る	ds.value_counts()
データフレームの欠損値をドロップしてみる	df.dropna()
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
日付時刻データがタイムスタンプデータと同時	aDatetime == aDatetime2
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
オブジェクトに属性が存在するか調べる	hasattr(obj, プロパティ名)
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
カウンタの項目を、そのカウントだけリストとして得る	aCounter.elements()
文字列の開始位置からと終了位置の間に部分文字列が含まれるかどうか確認する	s.find(sub, start, end) != -1
ヒストグラムを深紅色として描画する	plt.hist(データ列, color='crimson')
現在は何曜日か知る	datetime.datetime.today().weekday()
option: グラフの色をシャルトリューズに変更する	color = 'chartreuse'
ヒストグラムをティール色で描画する	plt.hist(データ列, color='teal')
表データのあるカラムは何日か見る	df['列A'].dt.day
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
表データとデータシリーズを横方向に連結する	pd.concat([df, ds], axis=1)
nが5の倍数か調べる	n % 5 == 0
実数を百の位で四捨五入する	round(x, -2)
xを浮動小数点数型にする	float(x)
辞書順で文字列が文字列より後	s > s2
データフレームの一部の列の平均値	df[['列A', '列B']].mean()
配列とイテラブルについて散布図を描き、、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
整数nを八進文字列に変換する	oct(n)[2:]
散布図に青い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームをソートする	df.sort_values('キーとなる列')
二つの数値を文字列で区切って表示する	print(value, value2, sep=s)
重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
箱ひげ図を描いて、平均を加える	plt.boxplot(データ列, showmeans=True)
データフレームを万の位で丸める	df.round(-4)
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ロージーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
カテゴリ列で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームの一部のカラムの中に日付データが含まれるかどうか	df[['列A', '列B']].isin([value])
タプルの最後のn要素を取り除く	aTuple[:-n]
三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
黒い四角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='k')
リストをカンマ区切りでプリントする	print(*aList, sep=',')
イエローグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
横棒グラフをマゼンタ色を使って描画する	plt.barh(データ列x, データ列y, color='magenta')
データフレームをカンマ区切り形式で保存する	df.to_csv('file.csv')
マップからキーの値をエラーなく得る	aDict.get(key, None)
xが一桁の正の整数かテストする	0 <= x <= 9
フォレストグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
横に並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ライトスチールブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
オプションで、標準エラーを用いる	file = sys.stderr
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
散布図に丸印を使用する	plt.scatter(データ列x, データ列y, marker='o')
データフレームの選択した列の値がNaNか調べる	df[['列A', '列B']].isna()
文字列のプレフィックスが部分文字列か確認する	s.startswith(sub)
２つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
オブジェクトはタプルクラスか確認する	isinstance(obj, tuple)
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
折れ線グラフのスタイルを一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図を大バツマーカーを使って描く	plt.plot(データ列x, データ列y, marker='X')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
散布図の▼印を赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
option: ライムグリーン色を使う	color = 'limegreen'
二つのデータフレームを連結する	pd.concat([df, df2])
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図に黒い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
組の平均	sum(aTuple)/len(aTuple)
ヒストグラムをミディアムオーキッド色として描画する	plt.hist(データ列, color='mediumorchid')
単位行列を初期化する	np.eye(行数, 列数)
文字列から部分文字列を全て取り除く	s.replace(sub, '')
線グラフの色をスプリンググリーンにする	plt.plot(データ列x, データ列y, color='springgreen')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をアイボリーに指定する	color = 'ivory'
双方向キューは空	len(deq) == 0
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
ネイビーにヒストグラムの色をセットする	plt.hist(データ列, color='navy')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをパレットトルコイズ色を用いて描画する	plt.hist(データ列, color='paleturquoise')
現在が何日か知る	datetime.datetime.today().day
option: 黄緑に色を設定する	color = 'chartreuse'
ファイルを開き]、読み込みストリームを使う	open(filepath, mode='r')
縦棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
オブジェクトが辞書クラス	isinstance(obj, dict)
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
表データのあるカラムをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
ヒストグラムをダークブルー色を用いて描画する	plt.hist(データ列, color='darkblue')
区間から配列	np.linspace(最小値, 最大値, 要素数)
文字列中に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
本日が木曜日かどうか	datetime.datetime.today().weekday() == 3
配列のケンドールの順位相関係数を算出する	scipy.stats.kendalltau(配列, 配列2)
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データフレームをサンプリングする	df.sample()
SJISで追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='shift_jis')
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームをグループ化し、ある列に対し合計を求める	df.groupby('列A')['列B'].sum()
横棒グラフをダークオーキッド色として描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
ライムグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを各列毎にグループ化して、文字列というグループの大きさを計算する	df.groupby(column).size()[s]
外れ値を除いたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
新しいロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームを複数の列をキーにして大きい順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
散布図をサーモン色として描画する	plt.scatter(データ列x, データ列y, color='salmon')
データフレームの欠損値を平均で置き換える	df.fillna(df.mean())
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームのあるカラムの中央値	df['列A'].median()
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
文字列が無限に繰り返す列	itertools.repeat(element)
ヒストグラムをライトコーラル色として描画する	plt.hist(データ列, color='lightcoral')
折れ線グラフの色をホワイトスモークにする	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームを横方向に合体する	pd.concat([df, df2], axis=1)
二つのデータフレームを横に連結する	pd.concat([df, df2], axis=1)
option: ペールグリーンにフォントの色を設定する	color = 'palegreen'
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
リストとリストについて散布図を描画し、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
横棒プロットを描画する	plt.barh(ラベル列, データ列)
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
自然数個からk個取り出した時の順列の総数	math.perm(n, k)
ポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの中にいくつNaNがあるか求める	df.isna().sum()
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
散布図の菱形マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: 改行なし	end = ''
データフレームをCSV形式にインデックスを付けず保存する	df.to_csv('file.csv', index=None)
データフレームをグループ化しある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
リストの最後から要素を得る	aList.pop()
左三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
分類モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
nとn2のビット積を求める	n & n2
リストと数列についての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をマルーンにする	plt.hist(データ列, color='maroon')
nが一桁の整数かテストする	-9 <= n <= 9
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
ファイルパスをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
option: ライトグレーを使う	color = 'lightgrey'
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれない	s.find(sub, start, end) == -1
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
日付時刻データの時刻	aDatetime.time()
セットから任意の要素を取り出す	aSet.pop()
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームのインデックスの一覧を使う	df.index
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
rgbのクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
オブジェクトが整数クラスのインスタンスか判定する	isinstance(obj, int)
散布図のマーカーの太さを設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データ列の散布図をプロットする	plt.scatter(データ列x, データ列y)
イテラブルを累加したイテラブルを得る	itertools.accumulate(iterable)
ヒストグラムをプロットして、ビンの数を指定する	plt.hist(データ列, bins=区関数)
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
データフレームを使う	import pandas as pd
データ列と数列の散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
値はセットの要素でないか判定する	element not in aSet
n2がnより大きく、かつ、n3より小さいか	n < n2 and n2 < n3
データフレームのカラムの調和平均を求める	scipy.stats.hmean(df['列A'])
データフレームの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
option: ブラウンにグラフの色を設定する	color = 'brown'
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
線グラフを青い破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
レモンシフォン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: 色をミディアムパープルに指定する	color = 'mediumpurple'
データフレームに重複があるか確認する	df.duplicated()
印字可能な文字列	ascii(x)
ファイルを文字列の示す文字コードを用いてオープンする]	open(filepath, encoding=s)
処理中の例外を情報を知る	sys.exc_info()
データフレームの未入力値をその最小値で置換する	df.fillna(df.min())
横棒グラフをダークバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='darkviolet')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームから数値データの列のみ選択する	df.select_dtypes('number')
重複していない行だけを抽出する	df[~ df.duplicated(keep=False)]
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
option: グレーにグラフの色を設定する	color = 'grey'
文字列の末尾から空白を取り除く	s.rstrip(' ')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
数式の変数を数値で置き換える	e.subs(z, e2)
データフレームの選択したカラムの欠損値を前の行の値で埋める	df[['列A', '列B']].fillna(method='ffill')
日付データをn週間前にする	aDate - datetime.timedelta(weeks=n)
predicateFuncを適用したときTrueとなるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフを右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
シーケンスにイテラブルを続ける	itertools.chain(iterable, iterable2)
実数のハイパボリック・コサインの逆数を計算する	math.acosh(x)
珊瑚色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
縦棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームの一部のカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
行列の最小値を調べる	np.min(aArray)
データフレームのあるカラムの曜日は何日目か見る	df['列A'].dt.dayofweek
データフレームとして表計算を読む	pd.read_excel('file.xlsx')
ホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
データフレームの中にいくつ未入力値があるか求める	df.isna().sum()
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
文字列中にひとつでも非小文字がある	any(not c.islower() for c in s)
カウンタの項目の出現回数を見る	aCounter[element]
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
リスト内の要素が全て真かどうか調べる	all(aList)
二つの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
列のエポック秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
グラフの色を指定する	sns.set(pallete=パレット名)
折れ線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
文字列の終了位置以前に部分文字列が含まれない	s.find(sub, 0, end) == -1
変数を黒色にする	f'\033[30m{value}\033[0m'
option: フォントの色をグリーンに設定する	color = 'green'
データフレームのあるカラムの日	df['列A'].dt.day
棒グラフをパパイヤウィップ色を用いて描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: 配列のデータ型を指定する	dtype = np.int16
文字列の中で複数行対応としてパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
アルファベットが文字列内に含まれるか	any(c.isalpha() for c in s)
日付データが金曜日か調べる	aDate.weekday() == 4
option: スラグレーにフォントの色を変更する	color = 'slategrey'
ゴーストホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='ghostwhite')
リストをシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
配列を横ベクトルに変形する	aArray.reshape(1, -1)
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
重複していない行を抽出する	df[~ df.duplicated(keep=False)]
項目名がタプルにないとき、要素を追加する	aDict.setdefault(key, element)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
度数分布図を描画する	plt.hist(データ列)
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
nの桁数	len(str(n))
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
数値を数値計算する	float(e)
データフレームを２つの列の値によってグループ化し、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
プロットの目的をプレゼンに設定する	sns.set(context='talk')
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
散布図のダイアモンド印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
列を分割数nで分割する	pd.cut(ds, n)
データフレームのあるカラムのタイムゾーンを日本に指定する	df['列A'].tz_convert('Asia/Tokyo')
ナバホホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
スノー色としてヒストグラムを描画する	plt.hist(データ列, color='snow')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
option: ミディアムパープルを使う	color = 'mediumpurple'
option: ピーチパフにグラフの色を指定する	color = 'peachpuff'
option: グラフの色をライトブルーに設定する	color = 'lightblue'
キーがマッピングにあるか	key not in aDict
nを八進表現に変換する	oct(n)
文字列を新しい文字列によって置換する	s.replace(sub, newsub)
折れ線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
ダイアモンドマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='D')
スプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
黒い右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
３自然数の最大公約数	math.gcd(n, n2, n3)
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
最大値・最小値の範囲で一様な疑似乱数を求める	random.uniform(最小値, 最大値)
データフレームのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
赤い破線でイテラブルの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をコーラルに変更する	color = 'coral'
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: オリーブに色をする	color = 'olive'
データフレームを２つの列をキーにして昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
nが偶数	n % 2 == 0
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
option: 小さい順にする	ascending = True
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
リストを分割数nで等量で分割する	pd.qcut(aList, n)
option: ダークカーキ色を使用する	color = 'darkkhaki'
データフレームの選択したカラムの欠損値をxに指定する	df[['列A', '列B']].fillna(x)
辞書のキーを列挙する	aDict.keys()
散布図に黒い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
データフレームからn行、サンプリングする	df.sample(n)
option: ライトスレイグレー色を使う	color = 'lightslategrey'
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
データフレームからランダムに100行を選択する	df.sample(100)
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
ファイルから1バイト、読む	f.read(1)
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
option: 青にグラフの色を設定する	color = 'blue'
文字列からISO書式を使って日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
水色で実行結果を表示する	print(f'\033[36m{value}\033[0m')
線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
1からNまでの行列	np.arange(1, N+1)
ネイビー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
option: 茶色色を使う	color = 'brown'
option: ライトグレー色を使う	color = 'lightgray'
バイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
ヒストグラムの色をロイヤルブルーに指定する	plt.hist(データ列, color='royalblue')
option: ミディアムパープル色を用いる	color = 'mediumpurple'
ロバストな線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
ヒストグラムをイエローグリーン色を用いて描画する	plt.hist(データ列, color='yellowgreen')
散布図を赤いポイントマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
散布図の▼マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
上位集合かどうか調べる	aSet.issuperset(aSet2)
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
ブラック色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
データフレームからカテゴリデータの列名の一覧を求める	df.select_dtypes('object').columns
データフレームの指定した列の名前一覧の列を選択する	df[columns]
変数について数値のインテグラルを求める	sympy.integrate(e, z)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
JSON形式の文字列をデータに変換する	json.loads(jsonString)
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データフレームの欠損値をメディアンで埋める	df.fillna(df.median())
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
リストが全て真	all(aList)
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
データフレームの欠損値を平均にする	df.fillna(df.mean())
配列とリストの散布図に黒い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームのあるカラムの母標準偏差を算出する	df['列A'].std(ddof=0)
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
option: 色をブランチドアーモンドに設定する	color = 'blanchedalmond'
データフレームから指定した三つの列を抽出する	df[['列A', '列B', '列C']]
rgbの丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
データフレームから重複を破壊的に削除する	df.drop_duplicates(inplace=True)
データフレームの列をヒストグラムを用いて描画する	plt.hist(df[column])
データフレームを２つの列によって昇順に整列する	df.sort_values(by=['列A', '列B'], ascending=True)
折れ線グラフの色をピーチパフにセットする	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームをある列の値で集計してそれぞれのグループごとの件数を知る	df.groupby('列A').size()
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
指定したカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
四分位数ごとに配列を分割する	pd.qcut(aArray, 4)
散布図を赤い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: ダークカーキを使う	color = 'darkkhaki'
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
リストが空でないかどうか	len(aList) != 0
スタックは空でない	len(deq) != 0
option: バイナリ書き込み用に変更する	mode = 'wb'
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
option: グラフの色を紺に設定する	color = 'darkblue'
文字コードtextとしてファイルパスをオープンする]	open(filepath, encoding=text)
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
JSONファイルの入力ストリームを読み込んで、dataとする	data = json.load(fin)
文字列リストを結合し、一つの文字列にする	''.join(aStringList)
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
折れ線グラフの丸印の線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
16進文字列を整数に変換する	int(s, 16)
指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
n個の整数列を作る	list(range(n))
データフレームの列を百の位で四捨五入する	df['列A'].round(-2)
散布図を青緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='teal')
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
データフレームをインポートする	import pandas as pd
nがn2と等しいか	n == n2
実数を切り下げて整数に変換する	math.floor(x)
option: 色をダークオレンジに設定する	color = 'darkorange'
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
プロットの縦横をセットする	plt.figure(figsize=(横幅, 高さ))
セットにイテラブルを追加する	aSet.update(iterable)
データフレームの中にと文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
多次元データをt-SNEを使ってパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
option: ミスティローズを使う	color = 'mistyrose'
option: バッファリングのサイズを指定する	buffering = 4096
赤いバツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='r')
整数nの二進表現	bin(n)
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
データフレームの選択したカラムの欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
ヒストグラムをスカイブルー色を用いて描画する	plt.hist(データ列, color='skyblue')
表データをある列のカテゴリでグループ化して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
イテラブルを文字列リストに変換して'改行で連結する	'\n'.join(map(str, iterable))
タプルのそれぞれを関数でフィルタする	map(func, iterable)
散布図の▲印の太さを設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: 色をパープルに設定する	color = 'purple'
線グラフの色をタンに変更する	plt.plot(データ列x, データ列y, color='tan')
列でデータフレームをまとめた表	df.groupby('列A')
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
option: グラフの色をシエナにする	color = 'sienna'
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
ヒストグラムの線種を破線に指定する	plt.hist(データ列, linestyle='dashed')
ヒストグラムの色をライトスチールブルーにセットする	plt.hist(データ列, color='lightsteelblue')
データフレームから列を2つのみ選択する	df[['列A', '列B']]
リストの平均を計算する	sum(aList)/len(aList)
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
データシリーズの中にある日付データの合計を数える	ds.isin([value]).sum()
ベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
データフレームをある列によって大きい順にソートする	df.sort_values(by='列A', ascending=False)
データフレームを表示するとき、列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
青い破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームの選択した列を十の位で丸める	df[['列A', '列B']].round(-1)
文字列の末尾から部分文字列を見つける	s.rfind(sub)
option: フォントの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
真紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
option: 文字コードtextを使用する	encoding = text
折れ線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
配列とデータ列についての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: オレンジレッドを用いる	color = 'orangered'
数値の変数にnを代入する	e.subs(z, n)
データフレームを関数によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
パラメータがマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, -oo)
表データの指定した三つの列を抽出する	df[['列A', '列B', '列C']]
データフレームの相関行列をスピアマン順位相関係数を用いて求める	df.corr(method='spearman')
ファイルパスから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
文字列リストを一つにして一つの文字列にする	''.join(map(str, iterable))
両端キューからポップする	deq.pop()
データフレームの一部のカラムを10の位で丸める	df[['列A', '列B']].round(-1)
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
リストとリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
データ列を全てタイムスタンプ型に変換する	pd.to_datetime(ds)
データフレームのn番目の行を選択する	df.loc[n]
データフレームの指定したカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
外れ値を除いたデータフレームのカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
配列の合計値	np.sum(aArray)
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
カウンタを多い順にリストとして得る	aCounter.most_common()
辞書を並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
縦棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフを左三角印として描画する	plt.plot(データ列x, データ列y, marker='<')
option: モカシンに色を変更する	color = 'moccasin'
ベクトルの行ごとの合計値を求める	np.sum(aArray, axis=1)
積み上げ棒グラフをプロットする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
データフレームの選択した列の平均など	df[['列A', '列B']].describe()
線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'])
現在の分	datetime.date.today().minute
ラインを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
配列を転置する	aArray.T
アルファベットの大文字を全て見る	string.ascii_uppercase
カウンタ同士で和集合	aCounter | aCounter2
特異値分解として濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
ファイルを追加モードで開いて]fとする	f = open(filepath, mode='a')
y軸の軸ラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
option: 色をオレンジレッドに設定する	color = 'orangered'
エクセルファイルからシートの名前を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームの一部のカラムの欠損値をモードで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
1行から二つの整数を読む	A, B = map(int, input().split())
n番目の列を除いたデータフレームを使う	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
横棒プロットを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームを小数点以下3桁まで出力する	df.to_csv('file.csv', float_format='%.3f')
データ列を中央値でビニングする	pd.qcut(ds, 2)
散布図をアクア色を用いて描画する	plt.scatter(データ列x, データ列y, color='aqua')
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
データ列の折れ線グラフを大バツ印として描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフをビスク色を用いて描画する	plt.plot(データ列x, データ列y, color='bisque')
散布図の星マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
カウントプロットを描く	sns.countplot(x='列名', data=df)
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
データ列を三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
欠損値がある行をドロップしてみる	df.dropna()
乱数で要素を埋めたベクトル	np.random.random(N)
ヒストグラムをチョコレート色として描画する	plt.hist(データ列, color='chocolate')
スノー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
テキストファイルファイル名がか調べる	filename.endswith('.txt')
その最小値でデータフレームの一部のカラムのNaNを補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
数列とデータ列について散布図を描いて、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
文字列を最後の部分文字列で分割した場合の前半の文字列	s.rpartition(sub)[0]
option: ミディアムブルーを使う	color = 'mediumblue'
線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
多次元尺度構成法として多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
スタッキングを用いて回帰分析をする	sklearn.ensemble.StackingRegressor()
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
文字列の開始位置以降に部分文字列が含まれる	s.find(sub, start) != -1
モジュールを検索するパス	sys.path
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームを二つの列のカテゴリによってグループ化する	df.groupby(['列A', '列B'])
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
逆順の双方向キューを求める	reversed(deq)
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
ある列のカテゴリの平均値	df.groupby('列A').mean()
整数nを2進表現に変換する	bin(n)
折れ線グラフの三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
option: マーカーの大きさを変更する	markersize = 2.0
文字列がタプルに含まれない	element not in aTuple
データフレームが重複している	df.duplicated()
オブジェクトが辞書クラスかどうか調べる	isinstance(obj, dict)
色付きの破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
部分文字列が部分文字列で開始するか	s.startswith(sub)
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
紺色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの全列を散布図で可視化する	sns.pairplot(df)
点線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
データフレームを二つの列でソートする	df.sort_values(by=['列A', '列B'])
散布図の印を右三角にする	plt.scatter(データ列x, データ列y, marker='>')
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
最大最小でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ミディアムスプリンググリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
回帰分析をSDGでする	model = sklearn.linear_model.SGDRegressor()
整数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
rgbの三角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの印を星印にする	plt.plot(データ列x, データ列y, marker='*')
rgbの四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの欠損値を直前の値に変更する	df.fillna(method='ffill')
線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
散布図にポイント印を用いる	plt.scatter(データ列x, データ列y, marker='.')
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: フォントの色をミディアムパープルにする	color = 'mediumpurple'
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
赤い破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
日付時刻データが日付時刻データより前かどうか判定する	aDatetime < aDatetime2
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
表データのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
横棒グラフを貝殻色を使って描画する	plt.barh(データ列x, データ列y, color='seashell')
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ライトシアン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: イエローグリーンを使用する	color = 'yellowgreen'
rgbの三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: マーカーをバツに変更する	marker = 'x'
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>')
ある列の値がx以上の行を取り出す	df[df['列A'] >= x]
オブジェクトがリストかタプルかどうか調べる	isinstance(obj, (list)
複数行対応としてパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
２つの文字列を順に表示する	print(value, value2)
JSON文字列をデータに変換する	json.loads(jsonString)
リストと配列について散布図を描画してマーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
option: ダークグリーンを使う	color = 'darkgreen'
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
リストの先頭のn要素を捨てる	aList[n:]
文字列を文字コードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
リストとリストについての散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフの四角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
option: フォントの色をチョコレートに指定する	color = 'chocolate'
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ファイルをオープンして]、追加ストリームを見る	open(filepath, mode='a')
option: エンコーディングをBOM付きにする	encoding = 'utf_8_sig'
線グラフの色をミディアムアクアマリンにセットする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
多次元データを多次元尺度構成法としてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: ドジャーブルーを使う	color = 'dodgerblue'
floatの最小値を求める	sys.float_info.min
青い一点鎖線で数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ASCII限定として正規表現で文字列を区切る	re.split(pattern, s, flags=re.ASCI)
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
数を２乗する	x ** 2
文字列が全て十進数字	s.isdecimal()
実数のn乗して整数による余り	pow(x, n, y)
数値を数値にする	float(e)
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
データフレームの選択した列の標本分散を算出する	df[['列A', '列B']].var(ddof=0)
リストとリストの散布図を描画して、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
文字列の末尾から改行を除く	s.rstrip('\n')
SJISでExcelファイルを読む	pd.read_csv('file.csv', encoding='shift_jis')
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
バイナリ書き込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='wb')
一点鎖線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
新しいヒストグラムベースの勾配ブースティング分類木を準備する	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームをCSVファイルにSJISで書き出す	df.to_csv('file.csv', encoding='shift_jis')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
データフレームの先頭10行を抽出する	df.head(10)
濃い青にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
グラフの使途を画面に設定する	sns.set(context='notebook')
option: n番目のカラムをインデックスに設定する	index_col = n
日付時刻データのタイムゾーン	aDatetime.timetz()
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
折れ線グラフを青い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
データフレームの尖度	df.skew()
リストとイテラブルについての散布図に赤い菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
有理数の分子	q.numerator
配列を2つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
配列とデータ列についての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
セットから別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
グラフのパレットを淡くする	sns.set(pallete='muted')
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
xの小数点以下'4'桁までを表示する	print(':.4f'.format(x))
文字列を最後の部分文字列で二分し、前半の文字列を見る	s.rpartition(sub)[0]
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
符号なし８ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
シルバーにヒストグラムの色をセットする	plt.hist(データ列, color='silver')
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
数値の符号をコピーにする	math.copysign(x, x2)
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
タプル内の要素は少なくともひとつ真か調べる	any(aTuple)
バリーウッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
year年day月を日付時刻にする	datetime.datetime(year=year, month=month, day=1)
データフレームの上10行	df.head(10)
option: ダークオレンジに色を設定する	color = 'darkorange'
nがn2の倍数か調べる	n % n2 == 0
n行をデータフレームから重複を認めてランダムにサンプリングする	df.sample(n, replace=True)
option: ダイアモンドマーカーを加える	marker = 'D'
折れ線グラフの色をベージュにセットする	plt.plot(データ列x, データ列y, color='beige')
カラーバーを描画する	plt.colorbar()
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: 先頭の行をヘッダに設定する	header = 0
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
正規表現を使う	import re
option: グラフの色を赤に指定する	color = 'red'
疑似乱数	random.random()
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
モデルデータでを学習する	model.fit(説明変数, 目的変数)
nが1、もしくは2か調べる	n == 1 or n == 2
実数の双曲線正接の逆数を計算する	math.atanh(x)
スピアマン順位相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
組の値を関数に適用した結果でソートする	sorted(aTuple, key=func)
ダークブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームをグループ化し、合計を求める	df.groupby('列A').sum()
配列とリストを連結する	itertools.chain(iterable, iterable2)
折れ線グラフの四角印の太さを設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
リストをn個に分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
リスト中のオブジェクトが最初に見つかるインデックス	aList.index(element)
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
インデックスとしてCSVファイルのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
小数点数の双曲線余弦を計算する	math.cosh(x)
書式を辞書でフォーマットする	formatText.format_map(aDict)
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフを青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
ある列の値ごとの平均値	df.groupby('列A').mean()
option: マーカーの太さを変更する	markeredgewidth = 2.5
文字列が全て英数字かどうか調べる	s.isalnum()
エクセルファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
文字列中に非小文字が含まれるかどうか調べる	any(not c.islower() for c in s)
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
option: 表計算ファイルシートの名前を設定する	sheet_name = ['A', 'B']
タブで区切って2つの文字列を出力する	print(value, value2, sep='\t')
ミッドナイトブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
散布図の星マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
横方向に２つのデータフレームを結合する	pd.concat([df, df2], axis=1)
option: グラフの色を貝殻に設定する	color = 'seashell'
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
指定した列のカテゴリで集計しそれぞれの平均値を求める	df.groupby('列A').mean()
白色として散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
重複を認めてデータフレームから100行をランダムにサンプリングする	df.sample(100, replace=True)
文字列は組の要素か調べる	element in aTuple
配列と数列について散布図をプロットし、、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: フォントの色をホットピンクにする	color = 'hotpink'
データフレームの列のユニークな要素数	df[col].nunique()
x座標の目盛を表示しない	plt.xticks([])
アルファベットを全部求める	string.ascii_letters
散布図にバツ印を使う	plt.scatter(データ列x, データ列y, marker='x')
散布図の▲マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列の先頭で正規表現にASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームの最初100行	df.head(100)
option: 整数型を使う	dtype = np.int
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
行列の行ごとの最小	np.min(aArray, axis=1)
作画の背景色を白くする	sns.set(style='whitegrid')
日付データは日付データより後ろか	aDate > aDate2
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
プログラムの実行を正しく終了する	sys.exit(0)
ラジアンの角度	math.degrees(x)
CSVファイルをヘッダを指定せず読み込む	pd.read_csv('file.csv', header=None)
０で全要素を初期化した行列	np.zeros(行数, 列数)
未初期化のベクトル	np.empty(要素数, dtype=np.int)
赤い▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
データシリーズが何日か調べる	ds.dt.day
option: ライトイエロー色を使う	color = 'lightyellow'
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
青いグリッド線を引く	plt.grid(color='b')
列の標本分散	df['列A'].var(ddof=0)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
整数nは配列のいづれかかテストする	n in aArray
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
数列とリストの散布図をプロットして、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付を使う	import datetime
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
カウンタの正のカウントのみ残す	+aCounter
option: 青色を使用する	color = 'blue'
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
表の列の名前の一覧を使う	df.columns
イテラブルから多重集合を作る	collections.Counter(iterable)
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
リストとリストについて散布図をプロットし、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
日付データにn週間分、足す	aDate + datetime.timedelta(weeks=n)
折れ線グラフをマゼンタ色を使って描画する	plt.plot(データ列x, データ列y, color='magenta')
ロージーブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
クロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
縦棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
計算機イプシロンを算出する	sys.float_info.epsilon
データフレームから重複ありでランダムに10行をサンプリングする	df.sample(10, replace=True)
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
option: 左三角印を加える	marker = '<'
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
双方向キューに要素を積む	deq.append(element)
棒グラフを青緑色を用いて描画する	plt.bar(データ列x, データ列y, color='teal')
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
実数のコサイン	math.cos(x)
カラムの歪度を求める	scipy.stats.skew(df['列A'], bias=False)
データフレームのあるカラムの分	df['列A'].dt.minute
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
option: 印を星に変更する	marker = '*'
浮動小数点数を十の位で四捨五入する	round(x, -1)
双方向キューのstart番目からend番目までの部分値	collections.deque(itertools.islice(deq, start, end))
データフレームを２つの列の値によってグループ化し、統計量を計算する	df.groupby(['列A', '列B']).describe()
データフレームのカラムの中のNaNの合計を求める	df['列A'].isna().sum()
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
多次元尺度構成法を使って多次元データを淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
option: スラグレーにグラフの色を指定する	color = 'slategrey'
カテゴリ別で色付けして、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
ふたつの集合の積集合	aSet.intersection(aSet2)
データフレームを二つのカラムをキーにして昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフのクロスマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
破線を用いてヒストグラムを描く	plt.hist(データ列, linestyle='dashed')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
日付時刻データからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
データフレームを2つの列で昇順に整列する	df.sort_values(by=['列A', '列B'], ascending=True)
新しい文字列に文字列中の部分文字列を回数を制限して置換する	s.replace(sub, newsub, n)
データフレームを配列に変換する	df.values
指定したカラムを小数点以下n桁で丸める	df['列A'].round(n)
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
混同行列をヒートマップを使って確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
棒グラフをスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='steelblue')
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
実数の天井	math.ceil(x)
データフレームの中の列を四分位数ごとにビニングする	pd.qcut(df[col], 4)
option: 右三角マーカーを用いる	marker = '>'
等量で配列をビン数nを用いてビン分割する	pd.qcut(aArray, n)
昇順にリストの値を並べ変える	sorted(aList, reverse=False)
タイムスタンプデータは何日か知る	aDatetime.day
データフレームにおいてどの値が頻出か調べる	df.mode()
棒グラフをブラック色を使って描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
オールドレース色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
黒い△マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
エラーを出力する	sys.stderr
横棒グラフを赤色として描画する	plt.barh(データ列x, データ列y, color='red')
ロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
配列のn次モーメントを求める	scipy.stats.moment(配列, moment=n)
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
nの各桁の和	sum(map(int, str(n)))
片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
散布図をブランチドアーモンド色を用いて描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
配列をビン数nで分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
配列をリストから作成する	np.array(iterable)
データフレームの選択したカラムがどの程度、分散しているか見る	df[['列A', '列B']].var()
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
データフレームの選択した列の中にと文字列が存在する	df[['列A', '列B']].isin([value, value2])
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図をミディアムバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
データフレームの指定したカラムの値が欠損値か調べる	df['列A'].isna()
数列と配列について散布図をプロットして、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
データフレームの選択したカラムの中に日付データがある	df[['列A', '列B']].isin([value])
option: 破壊的に操作する	inplace = True
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
項目名がマッピングにない場合、要素を追加する	aDict.setdefault(key, element)
データフレームのあるカラムの年	df['列A'].dt.year
文字列の大文字と小文字を交換する	s.swapcase()
棒グラフを茶色色を使って描画する	plt.bar(データ列x, データ列y, color='brown')
ヒストグラムを２つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームの相関行列を計算する	df.corr()
option: 青紫にグラフの色を設定する	color = 'violet'
疑似乱数を計算する	random.random()
線グラフをミントクリーム色を用いて描画する	plt.plot(データ列x, データ列y, color='mintcream')
散布図のポイントマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
実数がNaNか	math.isnan(x)
option: 色をライトイエローに変更する	color = 'lightyellow'
折れ線グラフの四角印の線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ミディアムバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: ビスクを使う	color = 'bisque'
指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
option: ホットピンク色を使用する	color = 'hotpink'
option: 複数行に対応する	flag = re.MULTILINE
行列の列	aArray[:, 列番号]
マップのキーを列挙する	aDict.keys()
2進数文字列を整数に変換する	int(s, 2)
散布図に左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
ある列の文字列に部分文字列があるデータを抽出する	df[df['列A'].str.contains(部分文字列)]
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=区関数)
散布図の丸印の太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
カウンタのそれぞれの要素をカウントだけリストとして得る	aCounter.elements()
散布図を黒い△マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
ラベンダー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
本日の月数	datetime.datetime.today().month
数が正	x > 0
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
変数について数値の微分を行う	sympy.diff(e, z)
日付時刻データの月数を見る	aDatetime.month
イテラブルの長さnの順列	itertools.permutations(iterable, n)
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
グラフの中の縦軸にラベルを設定する	plt.ylabel('y軸ラベル')
実線に線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='solid')
シーケンスを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
option: 符号なし８ビット整数型を使用する	dtype = np.uint8
配列の相乗平均を求める	scipy.stats.gmean(配列)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
赤い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームから列名を複数指定して選択する	df[columns]
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
option: グラフの色をゴーストホワイトに指定する	color = 'ghostwhite'
nが5で割り切れるか確認する	n % 5 == 0
入力から二つの実数を読む	A, B = map(float, input().split())
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
実数は有限かどうか調べる	math.isfinite(x)
データフレームを関数でまとめた表を見る	df.groupby(関数)
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
xが-9以上、9以下	-9 <= x <= 9
option: カーキ色を使う	color = 'khaki'
点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: コーラル色を用いる	color = 'coral'
縦棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
ロバスト回帰モデルを新規作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列でフォーマットして日付時刻データを文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
縦棒グラフを描画して、バーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
マップの項目名に対応した値	aDict.get(key)
データ列の折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
データフレームの選択したカラムはどの程度正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
折れ線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
散布図に大バツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='X')
option: どの列もインデックスにしない	index_col = None
t-SNEで多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
折れ線グラフの印を四角印にする	plt.plot(データ列x, データ列y, marker='s')
パールバイオレットレッドにヒストグラムの色を指定する	plt.hist(データ列, color='palevioletred')
部分文字列で文字列を二つに区切って最初の文字列を使う	s.partition(sub)[0]
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
組の長さを調べる	len(aTuple)
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データフレームをある列によって降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
ある列によってデータフレームをソートする	df.sort_values(by='列A')
y軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
データフレームのカラムの尖度を使う	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームから一つの列を取り出す	df[['列A']]
イテラブルを文字列として連結する	''.join(map(str, iterable))
実行結果を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
日付データの日数	aDate.day
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
オレンジレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
option: ベージュ色を使う	color = 'beige'
丸マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
グラフの用途を論文に指定する	sns.set(context='paper')
nをn2で割った余り	n % n2
ライトグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
option: サーモンにグラフの色を設定する	color = 'salmon'
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
赤い三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
データフレームを正規表現で一度に置き換える	df.replace(pattern, repl, regex=True)
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
文字列をバイト列に変換する	bytes(s)
nの三乗を計算する	n ** 3
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
両端キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
ファイルをオープンして]書き込みストリームを使う	open(filepath, mode='w')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
折れ線グラフの色をプラムに指定する	plt.plot(データ列x, データ列y, color='plum')
実行結果を紫色にする	f'\033[35m{value}\033[0m'
入力ストリーム全体を行分割して読む	f.readlines()
ラベンダーブラッシュ色を用いてヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
ファイルから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
リストとリストについて散布図を描画して、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
ファイルパスを書き込み用に開いて]、fとする	f = open(filepath, mode='w')
データフレームをグループ化してヒストグラムとして見る	sns.histplot(df, x='列名', hue='カテゴリ名')
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
折れ線プロットをプロットする	plt.plot(データ列x, データ列y)
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
データ列とリストについて散布図を描画し、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
ファイルをオープンして]、追加ストリームを求める	open(filepath, mode='a')
文字列が全て空白文字か調べる	s.isspace()
デピンク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
日付データが日付データと同時か調べる	aDate == aDate2
リストとデータ列の散布図を描いて、その大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
option: バッファリングのサイズを小さくする	buffering = 4096
リストとリストについて散布図を描画し、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
配列の要素数	aArray.size
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
文字列の後ろの文字	s[-1]
２つの列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
青色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
option: 行列のデータ型を指定する	dtype = np.int
横棒グラフをクリムゾン色として描画する	plt.barh(データ列x, データ列y, color='crimson')
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
黒い星マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
カウンタを多い方から列挙する	aCounter.most_common()
データ列を二つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
縦棒グラフを描く	plt.bar(ラベル列, データ列)
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
横棒グラフをサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='salmon')
2つのオブジェクトが等しい	obj == obj2
横棒プロットをプロットして、棒の縦幅を変更する	plt.barh(ラベル列, データ列, width=0.5)
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
横棒グラフをマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='magenta')
データフレームをグループ化し、あるカラムに対し標準偏差を求める	df.groupby('列A')['列B'].std()
箱ヒゲ図を横向きにする	plt.boxplot(データ列, vert=False)
データフレームの中のカラムを分割する	pd.cut(df[col], aList)
紺碧色としてヒストグラムを描画する	plt.hist(データ列, color='azure')
棒グラフをダークゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
リストの要素数だけ繰り返す	range(len(aList))
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
配列を等量でビン数nを用いてビン分割する	pd.qcut(aArray, n)
今日が日曜日かテストする	datetime.datetime.today().weekday() == 6
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
ヒストグラムをアクア色を用いて描画する	plt.hist(データ列, color='aqua')
ゴールド色を用いてヒストグラムを描画する	plt.hist(データ列, color='gold')
データフレームがどの程度、分散しているか調べる	df.var()
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
データ列の推移を折れ線グラフとして可視化する	plt.plot(range(len(データ列)), データ列)
タプルの要素だけプリントする	print(*aTuple)
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
文字列を黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
日付時刻データをエポック秒にする	aDatetime.timestamp()
配列とイテラブルについての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
文字列の開始位置番目からと終了位置までの範囲に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
ヒストグラムの色をブラックにセットする	plt.hist(データ列, color='black')
ヒストグラムの色をドジャーブルーに変更する	plt.hist(データ列, color='dodgerblue')
散布図をパールバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
赤い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列を空白によって分割する	s.split()
データフレームの列名をリストで置き換える	df.columns = columns
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
predicateFuncがTrueとなるシーケンスの部分を求める	itertools.takewhile(predicateFunc, iterable)
ヘッダー行を左寄せにする	pd.set_option('colheader_justify', 'left')
縦棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
スクリプトファイルの絶対パス	os.path.abspath(__file__)
データシリーズの曜日数	ds.dt.dayofweek
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
データフレームのstart行目からend行目まで抽出する	df[start:end]
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
辞書にキーが存在するか調べる	key in aDict
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
ライトスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
最小値でデータフレームのあるカラムの欠損値を補う	df['列A'].fillna(df['列A'].min())
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
エクセルファイルを読み込む	pd.read_excel('file.xlsx')
セットの濃度を求める	len(aSet)
実数に実数を加える	x + y
option: ダークグレーにフォントの色をセットする	color = 'darkgray'
線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
データフレームをグループ化し最小値を求める	df.groupby('列A').min()
多重集合を列から生成する	collections.Counter(iterable)
ファイルを追加モードを用いて開いて]、fとする	f = open(filepath, mode='a')
列を選んで重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
ベクトルの次元の数を計算する	aArray.ndim
空集合を使う	set()
データシリーズの不偏分散を算出する	ds.var(ddof=1)
データフレームの選択したカラムの未入力値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
再帰が何回までできるか、	sys.getrecursionlimit()
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
リストとリストについて散布図を描いて、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
散布図のマーカーを菱形にする	plt.scatter(データ列x, データ列y, marker='D')
文字列が全て識別子名か調べる	s.isidentifier()
アルファベットの大文字列	string.ascii_uppercase
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフの菱形印を赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
CSVファイルをn番目の列をインデックスにして読み込む	pd.read_csv('file.csv', index_col=n)
既存のベクトルをベースに全要素が初期値の行列	np.full_like(aArray, 初期値)
両端キューの先頭に要素を追加する	deq.appendleft(element)
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
オブジェクトに属性が存在する	hasattr(obj, プロパティ名)
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
配列の各要素のアダマール積	np.multiply(aArray, aArray2)
データフレームをCSVから読み込む	pd.read_csv('file.csv', sep=',')
データフレームをにバイオリン図としてプロット化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームのNaNをxに変更する	df.fillna(x)
タン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
データフレームの列名の一覧	df.columns
nの無限のイテラブル	itertools.repeat(n)
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
nの三乗を算出する	n ** 3
日付データからn時間分、減らす	aDate - datetime.timedelta(hours=n)
タプルの最後からn番目以前の要素を取り出す	aTuple[:-n]
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
散布図のポイント印の線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列の左側から部分文字列を除く	s.lstrip(sub)
2進数の文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
option: グラフの色をオレンジレッドに変更する	color = 'orangered'
二つ並べてデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
に箱ひげ図としてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
nをn2で割ったmod	n % n2
文字列が組の要素か調べる	element in aTuple
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
正規分布を判定する	scipy.stats.shapiro(df['列A'])
棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
インディアンレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ダークバイオレット色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームの指定した列の中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
ダークブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
JSON形式の文字列をデータにする	json.loads(b.decode('unicode-escape'))
縦軸の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
イテラブルを両端キューに変換する	collections.deque(iterable)
ヒストグラムの色をダークカーキに指定する	plt.hist(データ列, color='darkkhaki')
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの選択した列の相関行列を相関係数で求める	df[['列A', '列B']].corr(method='pearson')
縦棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
縦棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
箱ヒゲ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
ブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
カンマによって文字列を分割し、、列挙する	s.split(',')
指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
指定したカラムの中にいくつ未入力値があるか調べる	df['列A'].isna().sum()
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
option: 列の名前をリストで指定する	names = 列名リスト
マッピングのキーに対応した値	aDict.get(key)
数式を展開する	sympy.expand(e)
現在の分数を使う	datetime.date.today().minute
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
点間のユークリッド距離を求める	math.dist(point, point2)
エンコーディング	sys.getdefaultencoding()
線グラフをライトグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
イテラブルを累加する	itertools.accumulate(iterable)
option: 改行コードを旧Macに設定する	newline = '\r'
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列をシアンにする	f'\033[36m{value}\033[0m'
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
ニューラルネットを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
指定した列リストのみ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x')
リストとリストについての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
実行を即座に停止する	sys.exit()
プロットの色を全般的に明るくする	sns.set(pallete='bright')
データフレームのあるカラムが何時か見る	df['列A'].dt.hour
option: ライトグリーンに色を設定する	color = 'lightseagreen'
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
option: ホットピンクに色を指定する	color = 'hotpink'
ローングリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
オブジェクトが文字列型か調べる	isinstance(obj, str)
option: ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
縦棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
カテゴリで色分けして、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図をrgbの丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: ナバホホワイト色を用いる	color = 'navajowhite'
小数点数のtan	math.tan(x)
最大行数をnに設定する	pd.set_option('display.max_rows', n)
ミディアムオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumorchid')
2つの最小の値	min(x, y)
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
２つの変数を同じ値にする	x = y = n
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
option: 色をイエローグリーンに指定する	color = 'yellowgreen'
やわらかい青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームはどれだけ、分散しているか見る	df.var()
データシリーズの中にある文字列の個数をカウントする	ds.isin([value]).sum()
実数以下の最大の整数を計算する	math.floor(x)
データフレームから型を抽出する	df.select_dtypes(ty)
指定したカラムのNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
option: 行方向に計算する	axis = 1
折れ線グラフをライトサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
データフレームの値が欠損値	df.isna()
ダークブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
実数を千の位で丸める	round(x, -3)
線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
カラムのケンドールの順位相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
リストの移り変わりを折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
option: グラフの色を黄色に設定する	color = 'yellow'
データシリーズの年度を使う	ds.dt.year
タイムスタンプデータとタイムスタンプデータの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
現在の分を見る	datetime.date.today().minute
データシリーズは何年か知る	ds.dt.year
option: データ型を指定する	dtype = np.int16
データフレームをグループ化しそれぞれの分散を求める	df.groupby('列A').var()
eの乗数	math.exp(x)
option: フォントの色をグリーンに指定する	color = 'green'
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: ミディアムアクアマリンに色を設定する	color = 'mediumaquamarine'
ホットピンク色を用いてヒストグラムを描画する	plt.hist(データ列, color='hotpink')
ダークスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
option: 右三角印を使う	marker = '>'
追加できるように既存のファイルをEUCとしてオープンする]	open(filepath, mode='a', encoding='euc_jp')
ヒストグラムの色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
テンプレートを引数としてargsをフォーマットする	formatText.format(*args)
nを十六進文字列に変換する	hex(n)[2:]
リストを中央値でビニングする	pd.qcut(aList, 2)
最大列数を増やす	pd.set_option('display.max_columns', n)
実数の仮数を算出する	math.frexp(x)[0]
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
スレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
再帰の上限を上げる	sys.setrecursionlimit(1000000)
データフレームの一部のカラムの欠損値をxに変更する	df[['列A', '列B']].fillna(x)
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
option: オリーブ色を使用する	color = 'olive'
データフレームの指定した列のNaNを数値で補う	df['列A'].fillna(x)
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
縦棒プロットを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
菱形印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
折れ線グラフに四角印を使う	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
文字列をユニコード列に変換する	[ord(ch) for ch in s]
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
複数の列からグループ化し分散を算出する	df.groupby(['列A', '列B'], as_index=False).var()
データ列とリストについての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
option: エンコーディングを文字コードtextに設定する	encoding = text
option: ライトグリーンを使用する	color = 'lightgreen'
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
nからn2の範囲を見る	range(n, n2)
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
横棒グラフをミディアムオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
サーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データフレームの相関行列をヒートマップで可視化する	sns.heatmap(df.corr())
option: グラフの色を黄色に変更する	color = 'yellow'
ダークオリーブグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
本日の日数	datetime.datetime.today().day
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
データフレームの中にいくつがあるかカウントする	df.isin([value]).sum()
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
折れ線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データ列の折れ線グラフを描いて色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
データシリーズのタイムゾーンを設定する	ds.tz_convert('Asia/Tokyo')
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
データシリーズのNaNを中央値で補う	ds.fillna(ds.median())
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
配列を縦軸、リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
入力ストリームを改行除外して一行ずつ読み込む	f.readline()
配列の変化を青い点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['列A'].value_counts().sort_index().index
オブジェクトのバイトサイズ	sys.getsizeof(obj)
データフレームの指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データフレームのNaNをその平均値で埋める	df.fillna(df.mean())
文字列を部分文字列で二分し、前半の文字列を見る	s.partition(sub)[0]
ヒストグラムの色を暗い赤に変更する	plt.hist(データ列, color='darkred')
データフレームの選択したカラムの未入力値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
要素がセットのメンバー	element in aSet
黒い左三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
option: 耐火レンガにグラフの色を変更する	color = 'firebrick'
kを底とする浮動小数点数の対数を求める	math.log(x, k)
区切りで文字列を分割して、文字列リストに変換する	s.split(sep)
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
option: アリスブルーにフォントの色を設定する	color = 'aliceblue'
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
データフレームの次元数を見る	df.shape
回帰モデル訓練データでを学習する	model.fit(説明変数, 目的変数)
実数が整数かどうかテストする	x.is_integer()
文字列リストにイテラブルを変換して、カンマで結合する	','.join(map(str, iterable))
option: オールドレース色を使う	color = 'oldlace'
横棒グラフをロイヤルブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='royalblue')
配列の累積和	np.cumsum(aArray)
文字列の長さ	len(s)
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームの指定したカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
変数を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
クラス分類のリコールを計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: 色をトマトに設定する	color = 'tomato'
データフレームのあるカラムの分を使う	df['列A'].dt.minute
十六進文字列を整数に変換する	int(s, 16)
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
option: 紺碧を用いる	color = 'azure'
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
低頻度方からカウンタを列挙する	aCounter.most_common()[::-1]
nとkのコンビネーション	math.comb(n, k)
ヒストグラムをフローラルホワイト色を使って描画する	plt.hist(データ列, color='floralwhite')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
ふたつの集合がセットと互いに素か	aSet.isdisjoint(aSet2)
ゼロ埋めされた三二ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
プロットの縦軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ミントクリーム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
デフォルトのエンコーディングを使う	sys.getdefaultencoding()
線グラフの色をアイボリーにセットする	plt.plot(データ列x, データ列y, color='ivory')
データフレームの選択したカラムを四捨五入する	df[['列A', '列B']].round()
縦軸の目盛りを表示しない	plt.yticks([])
ヒストグラムの色をデピンクに変更する	plt.hist(データ列, color='deeppink')
文字列中に非小文字がある	any(not c.islower() for c in s)
フクシア色を用いてヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
色付きの実線を用いてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図の四角印の色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
文字列を最後の部分文字列で分けた時の残りの文字列を取り出す	s.rpartition(sub)[-1]
フォーマットを用いて列を日付データにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ミディアムオーキッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
文字列中の部分文字列の出現をカウントする	s.count(sub)
浮動小数点数のn乗を求める	x ** n
データフレームの指定したカラムの未入力値を最小値で埋める	df['列A'].fillna(df['列A'].min())
折れ線グラフの▲印を青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
改行せず二つの文字列をプリントする	print(value, value2, end='')
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームの指定したカラムの値を正規表現でまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
クラス分類をK最近傍法として行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
option: バッファリングのサイズを設定する	buffering = 4096
データフレームをソートして上位n件を取り出す	df.sort_values('キーとなる列').head(n)
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
２つのデータフレームを横方向に合体させる	pd.concat([df, df2], axis=1)
データフレームを並べて、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
配列のスピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
ベクトルの形	aArray.shape
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
文字列は全て識別子名かどうか確認する	s.isidentifier()
データフレームのあるカラムは何秒か知る	df['列A'].dt.second
option: サーモン色を用いる	color = 'salmon'
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
option: マーカーの色を変更する	markerfacecolor = '#800080'
日付データが土曜日かどうか調べる	aDate.weekday() == 5
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
日付データのデータフレームのあるカラムを表データのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
option: グラフの色をタンに変更する	color = 'tan'
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
nをn2で割った余りを算出する	n % n2
日付データのデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
まとめて正規表現patternでデータシリーズを置き換える	ds.replace(pattern, repl, regex=True)
値を両端キューの先頭に追加する	deq.appendleft(element)
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
グラフの描画で暗く色を用いる	sns.set(pallete='dark')
散布図のクロスマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
指定した列で集計し、それぞれの平均値を算出する	df.groupby('列A').mean()
異なる列をキーとして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
分類結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
リストと配列についての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
本日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
データフレームの選択した列がどれだけ、正規分布から歪んでいるか確認する	df[['列A', '列B']].kurt()
ベージュ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
配列と数列の散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
オブジェクトの参照カウントを知る	sys.getrefcount(obj)
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
切り捨てながらnをn2分の１にする	n //= n2
データフレームとしてExcelファイルのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームの指定した列の統計量を見る	df['列A'].describe()
本日の曜日を使う	datetime.datetime.today().weekday()
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
データ列の推移を点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
保存するCSV形式の小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
ある列の文字列が部分文字列で始まるデータを選択する	df[df['列A'].str.startswith(部分文字列)]
列と列をチェインする	itertools.chain(iterable, iterable2)
クラス分類を確率的勾配降下でする	model = sklearn.linear_model.SGDClassifier()
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
option: 印をクロスに指定する	marker = 'x'
option: 改行の代わりに文字列を用いる	end = s
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
部分文字列で文字列を分けた時の後半の文字列	s.partition(sub)[-1]
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームの一部のカラムの中に存在する日付データと文字列の合計をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
切り捨てながらnを半分にする	n //= 2
nがn2より大きいか調べる	n > n2
あるカラムの値ごとの合計を計算する	df.groupby('列A').sum()
nが一桁の数か調べる	-9 <= n <= 9
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
初めてのプログラムを書く	print('Hello World')
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
ヒストグラムを貝殻色として描画する	plt.hist(データ列, color='seashell')
箱髭図を描画して平均線を加える	plt.boxplot(データ列, meanline=True)
折れ線グラフをミディアムスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
数値を赤色にする	f'\033[31m{value}\033[0m'
縦棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
散布図に赤い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
クラス分類を確率的勾配降下で行う	model = sklearn.linear_model.SGDClassifier()
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
文字列の最後から改行を取り除く	s.rstrip()
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
縦棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
プロットをパステル調にする	sns.set(pallete='pastel')
文字列が文字列リストに存在するか	s in aStringList
数を二乗する	x ** 2
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
データシリーズの欠損値をメディアンで埋める	ds.fillna(ds.median())
配列の最頻値	mode, count = scipy.stats.mode(配列)
データシリーズの欠損値を前の行の値で埋める	ds.fillna(method='ffill')
データシリーズの欠損値を直後の値で補う	ds.fillna(method='bfill')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データシリーズの不偏標準偏差	ds.std()
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
ふたつのカラムからグループ化し、分散を算出する	df.groupby(['列A', '列B'], as_index=False).var()
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
凡例をプロットの表示する	plt.legend()
option: グラフの線の幅を3.0ポイントに変更する	linewidth = 3.0
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
双方向キューの長さを制限する	collections.deque(maxlen=n)
option: カデットブルー色を用いる	color = 'cadetblue'
散布図の三角印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
赤い一点鎖線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの指定したカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
データフレームの指定したカラムのNaNをxに変更する	df['列A'].fillna(x)
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
オブジェクトから属性を削除する	delattr(obj, プロパティ名)
現在が何時か知る	datetime.date.today().hour
データシリーズの秒を見る	ds.dt.second
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
折れ線グラフに三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
八進数文字列を整数に変換する	int(s, 8)
option: n番目の列をインデックスに設定する	index_col = n
折れ線グラフの▼マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
グラフで使う題名をセットする	plt.title('グラフの名称')
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
データフレームのあるカラムが何日か見る	df['列A'].dt.day
カウンタ同士でユニオン	aCounter | aCounter2
三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^')
組のn番目以降の部分を抽出する	aTuple[n:]
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
データフレームのカラム間の相関係数を算出する	scipy.stats.pearsonr(df['列A'], df['列B'])
リストと配列についての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
実数の双曲線余弦の逆数	math.acosh(x)
データフレームの列の最頻値	df['列A'].mode()
折れ線グラフの色をスプリンググリーンにセットする	plt.plot(データ列x, データ列y, color='springgreen')
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
option: マーカーの色をライムにする	markerfacecolor = 'lime'
小数点数の双曲線正弦	math.sinh(x)
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ミディアムパープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
折れ線グラフをシャルトリューズ色を用いて描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
マッピングにキーワード引数として加えて、更新する	aDict.update(**kwargs)
線形回帰モデルの係数	model.coef_
データフレームの一部の列の相関行列をで計算する	df[['列A', '列B']].corr(method='kendall')
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームのカラムを整数に四捨五入する	df['列A'].round()
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
option: ライムを用いる	color = 'lime'
線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
イテラブルとリストの散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
option: 色をダークサーモンに変更する	color = 'darksalmon'
データシリーズの中に文字列とがいくつあるか数える	ds.isin([value, value2]).sum()
散布図のマーカーを下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
option: 印の線幅を変更する	markeredgewidth = 2.5
option: 線の種類を一点鎖線にする	linestyle = 'dashbot'
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
option: ディムグレー色を用いる	color = 'dimgray'
レベッカパープル色としてヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームの列の中に文字列と文字列が存在する	df['列A'].isin([value, value2])
xでデータシリーズの欠損値を置き換える	ds.fillna(x)
棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
リストをダミー変数に変換する	pd.get_dummies(リスト)
option: ライトグレーにグラフの色を設定する	color = 'lightgray'
実数の双曲線余弦を求める	math.cosh(x)
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
カデットブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
指定した列のカテゴリで集計し、各合計を求める	df.groupby('列A').sum()
折れ線グラフをダークグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
option: グラフの色をデピンクにセットする	color = 'deeppink'
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
本日の日付時刻	datetime.datetime.today()
option: グラフの色をミディアムスプリンググリーンにセットする	color = 'mediumspringgreen'
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
変数名をキーとして辞書	dict(name=element)
データシリーズを整数に丸める	ds.round()
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
追加モードでファイルをオープンする]	open(filepath, mode='a')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
バイナリ書き込み用にファイルパスをオープンする]	open(filepath, mode='wb')
ドジャーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
文字列はタイトルケースかテストする	s.istitle()
浮動小数点数をn乗する	x ** n
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: ダークゴールデンロッドに色を設定する	color = 'darkgoldenrod'
文字列の開始位置以降に部分文字列が含まれるか	s.find(sub, start) != -1
円グラフの特定の要素を目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
タプルの中の一番大きい値を求める	max(aTuple)
部分集合か	aSet.issubset(aSet2)
横棒グラフをオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='orange')
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
欠損値が存在する行をドロップし、みる	df.dropna()
標準エラーを	sys.stderr
セットから何でもいいからひとつ取り出す	aSet.pop()
ひとつでも数字が文字列内に含まれるか調べる	any(c.isdigit() for c in s)
横棒グラフを耐火レンガ色を使って描画する	plt.barh(データ列x, データ列y, color='firebrick')
データフレームを欠損値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
データフレームのカラムを千の位で丸める	df['列A'].round(-3)
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
分類モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
前もって複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
実数の仮数を求める	math.frexp(x)[0]
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
黄色で変数をプリントする	print(f'\033[33m{value}\033[0m')
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ある列にリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
ふたつの関係が真上位集合	aSet > aSet2
ダークオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
多次元データを特異値分解として濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
数値をプリントする	print(value)
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
option: ドジャーブルー色を使用する	color = 'dodgerblue'
要素が集合のメンバーに含まれないかどうか	element not in aSet
option: ディープスカイブルーを使用する	color = 'deepskyblue'
データフレームのデータを条件で取り除く	df[(df['列A'] == x) & (df['列B'] == y)]
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
データフレームのあるカラムのNaNを最頻値に指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
numpyを入れる	import numpy as np
イテラブルから双方向キューを新規生成する	collections.deque(iterable)
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
nがn2よりも大きいかどうか調べる	n > n2
option: ロージーブラウン色を使う	color = 'rosybrown'
リストとイテラブルについて散布図を描画してマーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
1からNまでの配列を作る	np.arange(1, N+1)
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームの末尾n行を取り出す	df.tail(n)
折れ線グラフのポイントマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
'A'列の値がxに等しい行を抽出する	df[df['列A'] == x]
ピンク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
赤いダイアモンドマーカーを配列とデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
数式のインテグラルを計算する	sympy.integrate(e)
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
タプルの最後のn要素を除く	aTuple[:-n]
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
n個分双方向キューの要素を左にローテンションする	deq.rotate(-n)
ゼロ埋めされた三二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
辞書の項目名の一覧	aDict.keys()
棒グラフをリネン色を用いて描画する	plt.bar(データ列x, データ列y, color='linen')
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのあるカラムのKurtosisを求める	df['列A'].kurt()
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームをある列のカテゴリで集計し、、それぞれのグループ毎の件数を知る	df.groupby('列A').size()
二つのデータフレームを合体する	pd.concat([df, df2])
折れ線グラフの右三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
データフレームの選択したカラムの未入力値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
二つの実行結果を順にプリントする	print(value, value2)
ある列の値がxに等しい行を取り出す	df[df['列A'] == x]
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
分割数nでリストを分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームから同じ内容の行を削除する	df.drop_duplicates(inplace=True)
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
棒グラフをライトイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightyellow')
整数nを十六進表記にする	hex(n)
文字列の先頭から部分文字列を取り除く	s.removeprefix(sub)
円周率を使用する	math.pi
データフレームの選択したカラムの尖度を求める	df[['列A', '列B']].skew()
オブジェクトが整数クラスのインスタンスかどうか調べる	isinstance(obj, int)
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
散布図をターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='turquoise')
浮動小数点数を十六進表記の文字列にする	x.hex()
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
リストとデータ列について散布図をプロットして、クロスマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのシェイプ	df.shape
データフレームのある列をNaNも加えてダミー変数にする	pd.get_dummies(df['列A'], dummy_na=True)
非数値データをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
option: カンマを区切りで使う	sep = ','
パールバイオレットレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
回帰分析をバギングでする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
文字列中の部分文字列を別の文字列に回数を制限して置換する	s.replace(sub, newsub, n)
二つの整数の最大公約数を算出する	math.gcd(n, n2)
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
ローングリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
オブジェクトのハッシュ値を計算する	hash(obj)
データフレームを指定した列で小さい順にソートする	df.sort_values(by='列A', ascending=True)
実行時に標準出力がパイプ	not sys.stdout.isatty()
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
赤い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
あるカラムの基本統計量を計算する	df['列A'].describe()
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
option: コロンをセパレータで使う	sep = ':'
rgbのダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストと配列についての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
折れ線グラフに三角印を使う	plt.plot(データ列x, データ列y, marker='^')
データフレームから型型の列を抽出する	df.select_dtypes(ty)
リストとイテラブルについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ファイルをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
ホワイトスモークにヒストグラムの色を指定する	plt.hist(データ列, color='whitesmoke')
下三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
option: グリーンを用いる	color = 'green'
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
イテラブルとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
マッピングの項目数を得る	len(aDict)
青紫色でヒストグラムを描画する	plt.hist(データ列, color='violet')
折れ線グラフの色をモカシンにセットする	plt.plot(データ列x, データ列y, color='moccasin')
ひとつでもアスキー文字が文字列内に含まれるかテストする	any(c.isascii() for c in s)
あるカラムの中に文字列と文字列があるか調べる	df['列A'].isin([value, value2])
リストのn番目を消す	del aList[n]
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
データ列の折れ線グラフを描画して色をRGBとして設定する	plt.plot(データ列x, データ列y, color='#800080')
predicateFuncが真となるタプルの要素	itertools.takewhile(predicateFunc, iterable)
折れ線グラフの丸印を黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
データフレームの一部のカラムを十の位で丸める	df[['列A', '列B']].round(-1)
データフレームの複数の列を削除してみる	df.drop(['列A', '列B'], axis=1)
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームをNaNを含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
日付時刻データが日曜日か	aDatetime.weekday() == 6
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
ある列のカテゴリごとの最大値	df.groupby('列A').max()
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
オプションで、標準エラーを出力先にする	file = sys.stderr
フローラルホワイト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
両端キューの中に数値が含まれてる	element in deq
散布図の▽印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
文字列からISO書式を用いてタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
数を十六進表記の文字列に変換する	x.hex()
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
外れ値を除いたカラムの算術平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
等差数列から乱数を得る	random.randrange(start, end, step)
散布図の大バツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データシリーズを百の位で丸めて、整数にする	ds.round(-2).astype(int)
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
option: スチールブルーを使用する	color = 'steelblue'
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
文字列をn回続くイテラブル	itertools.repeat(element, n)
データフレームをグループ化し、ある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
折れ線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
文字列がリストの要素でないか確認する	element not in aList
折れ線グラフでデータ列の推移を可視化する	plt.plot(range(len(データ列)), データ列)
エポックタイムを使う	import time
データフレームのある列の値がxに等しい行を抽出する	df[df['列A'] == x]
タイムスタンプデータの日付を使う	aDatetime.date()
数列とイテラブルの散布図を描画して、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
辞書上で項目名がまだ定義されていないかどうか確認する	key not in aDict
option: ディムグレーを使う	color = 'dimgray'
ヒストグラムの色をスノーにする	plt.hist(データ列, color='snow')
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
本日の月数を見る	datetime.datetime.today().month
option: 色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
JSON形式の文字列をロードする	json.loads(jsonString)
データ列の推移を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
三数の最大値を計算する	max(x, y, z)
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ミディアムバイオレットレッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
文字列の最初	s[0]
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
タプルの要素をソートする	sorted(aTuple)
ファイルパスをオープンして]、バイナリストリームを求める	open(filepath, mode='rb')
原点から点までの距離を求める	math.hypot(x, y)
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データシリーズが何年か見る	ds.dt.year
ブラック色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
カウンタ同士でユニオン演算する	aCounter | aCounter2
アルファベットの小文字を全て見る	string.ascii_lowercase
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームを100の位で丸める	df.round(-2)
棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
書式を引数としてargsを文字列整形する	formatText.format(*args)
整数nがタプルのどれかかどうか	n in aTuple
プロットをポスターに指定する	sns.set(context='poster')
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
option: アイボリーを使用する	color = 'ivory'
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームの行を振り直す	df.reset_index()
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
カテゴリで色付けしてカーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
正規分布を用いて乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
新しい文字列として文字列中の正規表現を置換する	re.sub(pattern, newsub, s)
マップのキーとその値を列挙する	aDict.items()
ゲインズボロ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
等間隔でデータフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
配列とリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
最後の部分文字列によって文字列を二つに分ける	s.rpartition(sub)
浮動小数点数が負の数か調べる	x < 0
未初期化の行列を作る	np.empty((行数, 列数), dtype=np.int)
JSONファイルの入力を辞書に変換する	json.load(fin)
リストが空でないかどうか調べる	len(aList) != 0
データフレームの一部の列の欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
BOM付きでファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: ピンクを用いる	color = 'pink'
ダークスラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームをくっつける	pd.concat([df, df2])
英字の小文字を全て使う	string.ascii_lowercase
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームのある列の値がx以上の行を取り出す	df[df['列A'] >= x]
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
プロットのパレットを全般的に濃くする	sns.set(pallete='deep')
オブジェクトをユーザ向けの文字列に変換する	str(obj)
縦棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
グラフの色を淡くする	sns.set(pallete='muted')
空白文字を使う	string.whitespace
文字列が文字列リストのいづれかどうか確認する	s in aStringList
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
整数nがリストのひとつであるか調べる	n in aList
散布図をトマト色を用いて描画する	plt.scatter(データ列x, データ列y, color='tomato')
ホワイトスモーク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
横棒グラフをダークシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkcyan')
折れ線グラフの▼印の大きさを指定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
折れ線グラフの色をシスルにセットする	plt.plot(データ列x, データ列y, color='thistle')
ヒストグラムを濃い青色で描画する	plt.hist(データ列, color='darkblue')
イテラブルを文字列に変換してつなげる	''.join(map(str, iterable))
データフレームをある列で昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
文字列が片仮名	('ァ' <= ch <= 'ン')
イテラブルをセットに変換する	set(iterable)
マッピングから最後に追加したエントリを取り出す	aDict.popitem()
データフレームから列を二つ選択する	df[['列A', '列B']]
タプルを引数として展開して出力する	print(*aTuple, sep=',')
色を淡くする	sns.set(pallete='muted')
散布図をライトグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
データフレームをグループ化し、ある列に対し平均値を計算する	df.groupby('列A')['列B'].mean()
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
オプションでファイルを使う	file = sys.open(filename, 'w')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
出力するCSV形式の小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
タプルの項目名とその値を列挙する	aDict.items()
文字列はタプルに含まれないかどうか調べる	element not in aTuple
文字列を右から空白で区切る	s.rsplit()
option: ダーク・スラテグレー色を用いる	color = 'darkslategrey'
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
散布図をダークグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
option: 印を三角に変更する	marker = '^'
折れ線グラフの四角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
折れ線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
option: 三角マーカーを描画する	marker = '^'
データフレームをグループ化し、あるカラムに対し平均値を求める	df.groupby('列A')['列B'].mean()
指定した列のカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
実数の双曲線正接を算出する	math.tanh(x)
簡単な説明を最適な位置に表示する	plt.legend(loc='best')
英数字が文字列内に含まれる	any(c.isalnum() for c in s)
正規分布か仮説検定する	scipy.stats.shapiro(df['列A'])
デックをデキューする	deq.popleft()
カウンタのキーと出現回数をリストとして得る	aCounter.items()
横軸の目盛を表示しない	plt.xticks([])
折れ線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
両端キューの長さを制限する	collections.deque(maxlen=n)
淡い茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
レモンシフォン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
文字列がn回繰り返す列	itertools.repeat(element, n)
行列式	np.linalg.det(aArray)
数値の変数に数値を代入する	e.subs(z, e2)
あるカラムの文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
データフレームをTSVファイルで出力する	df.to_csv('file.tsv', sep='\t')
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列を隔離する	sys.intern(s)
前もってASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
縦棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
表データを複数の列によって昇順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データフレームのあるカラムを表データの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
タイムスタンプを使う	import time
データフレームの選択したカラムの未入力値を最大値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
二つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
数列とリストについて散布図をプロットして上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
三つのデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=0)
列名を指定して二つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
ゼロ埋めしたベクトル	np.zeros(要素数)
縦棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
option: グラフの色をサンディーブラウンにする	color = 'sandybrown'
値をキューのn番目に挿入する	deq.insert(n, element)
option: マーカーの色をタンにする	markerfacecolor = 'tan'
データフレームの選択したカラムの中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
散布図を下三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='v')
浮動小数点数が負の数かどうか調べる	x < 0
データフレームをCSV形式にヘッダを付けず出力する	df.to_csv('file.csv', header=None)
イテラブルの変化を色付きの点線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームをソートして、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
ミディアムパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフをマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='magenta')
横棒グラフをブラウン色で描画する	plt.barh(データ列x, データ列y, color='brown')
オブジェクトはバイト列クラスかどうか	isinstance(obj, bytes)
度数分布図を三つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: シアン色を使う	color = 'cyan'
データフレームのカラムを散布図で図示して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
プロットを暗くする	sns.set(pallete='dark')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
クラス分類の真陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ゼロ埋めされた3２ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
日付時刻データの年数	aDatetime.year
散布図を下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
多次元データをt-SNEを使って濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
リストの要素を昇順にソートする	sorted(aList, reverse=False)
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
nがn2よりも小さいか確認する	n < n2
リストの末尾から要素を得る	aList.pop()
横棒グラフをダークブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
スピアマン順位相関係数を用いてデータフレームの相関行列を算出する	df.corr(method='spearman')
線形モデルの回帰変数	model.coef_
コマンドの第一引数を知る	sys.argv[1]
辞書から項目名で指定された項目を取り出す	aDict.pop(key)
集合を空にする	aSet.clear()
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
nからn2までの整数列を求める	list(range(n, n2+1))
書式を引数としてargsをフォーマットする	formatText.format(*args)
オレンジレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
データフレームのある列をドロップする	df.drop('列A', axis=1, inplace=True)
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
縦棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームのカラムを百の位で丸める	df['列A'].round(-2)
文字列が文字列リストにある	s in aStringList
集合が空	len(aSet) == 0
入力から２つの整数値を読む	A, B = map(int, input().split())
散布図を左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<')
特異値分解で多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
数列と数列の散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをオリーブ色を使って描画する	plt.hist(データ列, color='olive')
データシリーズの秒	ds.dt.second
カラムの調和平均	scipy.stats.hmean(df['列A'])
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
データフレームの二つのカラムを並べて箱髭図で描画する	plt.boxplot([df['カラム'], df['カラム']])
ダークオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ブラック色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
リストとデータ列の散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムを耐火レンガ色として描画する	plt.hist(データ列, color='firebrick')
オブジェクトはバイト列クラスのインスタンスか	isinstance(obj, bytes)
ライトサーモン色としてヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
散布図に四角印を使う	plt.scatter(データ列x, データ列y, marker='s')
sinの逆数	math.asin(x)
両端キューから要素を取り除く	deq.remove(element)
配列とデータ列の散布図を描画し、マーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
小数点数以上の最小の整数を求める	math.ceil(x)
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
rgbの下三角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
option: 色をタンに設定する	color = 'tan'
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
配列の標準誤差	scipy.stats.sem(配列)
データシリーズのNaNを50パーセンタイルに設定する	ds.fillna(ds.median())
スタックのstart番目からend番目までの要素	collections.deque(itertools.islice(deq, start, end))
標準入力から1行読み取る	input()
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
文字列中に非アスキー文字があるか調べる	any(not c.isascii() for c in s)
散布図の▲マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
xの絶対値	abs(x)
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
主成分分析で淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ファイルからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列の右側から安全に部分文字列を除去する	s.removesuffix(sub)
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
デピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
実行環境がLinuxか調べる	sys.platform.startswith('linux')
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
リストとリストの散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
指定した列のカテゴリで集計し、最小値を求める	df.groupby('列A').min()
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
ヒストグラムをダークシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
散布図の下三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: グラフの色をペルーに変更する	color = 'peru'
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
実行結果をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
線グラフの色をオレンジにセットする	plt.plot(データ列x, データ列y, color='orange')
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
実部と虚部から複素数を作る	complex(x, y)
オブジェクトはバイト列クラスかテストする	isinstance(obj, bytes)
データシリーズの中の欠損値の個数を数える	ds.isna().sum()
文字列を赤色化する	f'\033[31m{value}\033[0m'
文字列中に非アルファベットが含まれる	any(not c.isalpha() for c in s)
読み込みできるようにファイルをオープンする]	open(filepath, mode='r')
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
数の三乗	x ** 3
nまでの偶整数列	list(range(2, n, 2))
データフレームの指定したカラムの下位25パーセント	df['列A'].quantile(0.75)
スクリプト名	sys.argv[0]
MSDで多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
折れ線グラフの菱形マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
ふたつの列からグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
データフレームを正規表現でまとめて置き換える	df.replace(pattern, repl, regex=True)
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
相関を可視化する	plt.scatter(データ列x, データ列y)
線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
日付時刻データにn分分加える	aDatetime + datetime.timedelta(minutes=n)
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
データフレームからランダムにn行を抽出する	df.sample(n)
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
ヒストグラムの色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
タイムスタンプ型のデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
データフレームの歪み	df.kurt()
ファイルパスからディレクトリ名取り出す	os.path.dirname(filepath)
タイタニックのデータセットからデータフレームをロードする	df = sns.load_dataset('titanic')
折れ線グラフに下三角印を使用する	plt.plot(データ列x, データ列y, marker='v')
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
黒いダイアモンドマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
柱状図の描画して、正規化する	plt.hist(データ列, density=True)
ある列の値ごとの最大値	df.groupby('列A').max()
データフレームをグループ化し個数を求める	df.groupby('列A').count()
配列を横棒グラフにする	plt.barh(ラベル列, データ列)
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
ファイル名のセパレータ記号	os.sep
option: 追加モードに指定する	mode = 'a'
ヒストグラムの色をミディアムアクアマリンにセットする	plt.hist(データ列, color='mediumaquamarine')
２変数の最も大きい値	max(x, y)
option: グラフの色をコーラルに設定する	color = 'coral'
クラス分類をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
表のある列を最初のカテゴリーを除外し、ワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], drop_first=True)
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
ヒストグラムの色をダーク・スラテグレーに変更する	plt.hist(データ列, color='darkslategrey')
黄緑色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
実数のサインを計算する	math.sin(x)
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームを百の位で四捨五入する	df.round(-2)
データシリーズの欠損値をその中央値で置換する	ds.fillna(ds.median())
折れ線グラフの大バツマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
文字列がリストの要素でないかどうか調べる	element not in aList
青色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ヒストグラムを破線を用いて描画する	plt.hist(データ列, linestyle='dashed')
プロットの縦軸を対数に変更する	plt.yscale('log')
ユーザの入力を整数として受け取る	int(input())
MSEを算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
縦棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
回帰分析をランダム性を追加したランダムフォレストでする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をミスティローズに変更する	color = 'mistyrose'
破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図に左三角印を用いる	plt.scatter(データ列x, データ列y, marker='<')
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
モードでデータフレームのあるカラムの欠損値を補完する	df['列A'].fillna(df['列A'].mode().iloc[0])
option: フォントの色をシエナに設定する	color = 'sienna'
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
クラス分類の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数をカウントする	s.count(sub, start, end)
散布図をrgbの大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの末尾10行を取り出す	df.tail(10)
シャルトリューズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
現在のワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
散布図に黒い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: グラフの色をトマトに変更する	color = 'tomato'
nが負の数か	n < 0
nをn2だけ減少させる	n -= n2
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
棒グラフをダークサーモン色として描画する	plt.bar(データ列x, データ列y, color='darksalmon')
オレンジ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
ファイルパスをバイナリ書き込みモードとしてオープンして]fとする	f = open(filepath, mode='wb')
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
グラフを濃くする	sns.set(pallete='deep')
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
プロットの色調を全般的に淡くする	sns.set(pallete='muted')
データシリーズがどの程度分散しているか見る	ds.var()
rgbのポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
ふたつの集合の対称差集合を求める	aSet.symmetric_difference(aSet2)
option: パパイヤウィップ色を使用する	color = 'papayawhip'
スピアマン順位相関係数を使ってデータフレームの相関行列を算出する	df.corr(method='spearman')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
Pythonパスを知る	sys.path
イテラブルを文字列に変換して、空白で連結する	' '.join(map(str, iterable))
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
カラムの標準誤差を計算する	scipy.stats.sem(df['列A'])
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
文字列の開始位置以降が部分文字列で開始する	s.startswith(sub, start)
データフレームのn行目を取り除いてみる	df.drop(n, axis=0)
データフレームを転置する	df.T
文字列が全てアスキー文字かどうか	s.isascii()
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
切片なしの単回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
指定したカラムの中に文字列があるか調べる	df['列A'].isin([value])
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
標準出力を使う	sys.stdout
黒い星マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='k')
配列とリストについて散布図を描画してマーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
集合の浅いコピーを生成する	aSet.copy()
文字列が全て数値	s.isnumeric()
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
行列の列ごとの分散	np.var(aArray, axis=0)
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
双方向キューの上限	deq.maxlen
データフレームの選択したカラムの下位25％	df[['列A', '列B']].quantile(0.75)
option: オレンジを使用する	color = 'orange'
データフレームの指定した列を千の位で四捨五入する	df['列A'].round(-3)
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
両端キューの左側にイテラブルの要素を追加する	deq.extendleft(iterable)
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgray')
データ列を平方根変換する	np.sqrt(データ列)
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
横棒グラフをベージュ色を用いて描画する	plt.barh(データ列x, データ列y, color='beige')
黄緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
正規分布による累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: 紺碧色を使う	color = 'azure'
線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
データフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr()
縦棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
横棒プロットの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
ケンドール相関係数でデータフレームの相関行列を計算する	df.corr(method='kendall')
散布図のダイアモンド印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
リストの末尾の要素	aList[-1]
カラムのトリム分散を使う	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
線グラフを色付きの一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
イテラブルを更新不能なセットに変換する	frozenset(iterable)
rgbの下三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの一部のカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
データフレームをある列によって破壊的に昇順にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
文字列の右端から部分文字列を取り除く	s.removesuffix(sub)
計数器	collections.Counter()
イテラブルの変遷を点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
リストを黄色にする	f'\033[33m{value}\033[0m'
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
外れ値を除いた配列の算術平均を使う	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
データシリーズの空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの指定したカラムを丸める	df['列A'].round()
ポスター用にグラフを設定する	sns.set(context='poster')
文字列がいつまでも繰り返す列を得る	itertools.repeat(element)
option: フォントの色をグリーンイエローに設定する	color = 'greenyellow'
コロンで区切って２つの数値をプリントする	print(value, value2, sep=':')
折れ線グラフの星印の大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
文字列内にアスキー文字があるかどうか調べる	any(c.isascii() for c in s)
イテラブルの折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
カテゴリ列でグループ化して、にバイオリン図としてデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ゼロ埋めした複素数型の配列	np.zeros(要素数, dtype=bool)
日付データのデータシリーズを表データのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
文字列を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームをグループ化し、あるカラムに対し平均値を算出する	df.groupby('列A')['列B'].mean()
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームのカラムのSkewnessを計算する	scipy.stats.skew(df['列A'], bias=False)
y座標の目盛りを対数に変更する	plt.yscale('log')
イテラブルを箱ひげ図にする	plt.boxplot(データ列)
データフレームを指定したカラムごとにグループ分けして列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データフレームを二つの列の値によってグループ化する	df.groupby(['列A', '列B'])
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
n個の集まりからk個選ぶ方法	math.comb(n, k)
改行を見る	'\n'
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
ニューラルネットで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
シルバーにヒストグラムの色を指定する	plt.hist(データ列, color='silver')
散布図をロイヤルブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='royalblue')
nがn2以下か調べる	n <= n2
データ列の相関を描画する	plt.scatter(データ列x, データ列y)
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
エクセルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
数列を箱ひげ図として描く	plt.boxplot(データ列)
集合のすべての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
データフレームのカラムをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの大バツ印を赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ダークゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
組が少なくとも一つ真か確認する	any(aTuple)
2つの変数をそれぞれ定義する	x, y = i, j
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
浮動小数点数の最小値	sys.float_info.min
横棒グラフをミディアムオーキッド色として描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
縦棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
option: ペルーにグラフの色を設定する	color = 'peru'
Excelからデータフレームを読み込む	pd.read_excel('file.xlsx')
散布図をrgbの▼マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
空のカウンタ	collections.Counter()
データフレームからカテゴリデータのカラムだけ選択する	df.select_dtypes('object')
データシリーズの25パーセンタイル	ds.quantile(0.25)
指定した列のカテゴリで集計し、それぞれの平均値を求める	df.groupby('列A').mean()
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
変数を青色で表示する	print(f'\033[34m{value}\033[0m')
線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームを２つの列をキーにして並べ直す	df.sort_values(by=['列A', '列B'])
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
ヒストグラムの線の種類を点線に指定する	plt.hist(データ列, linestyle='dotted')
折れ線グラフを半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列は全て識別子名かどうか調べる	s.isidentifier()
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
CSVからデータフレームを読む	pd.read_csv('file.csv', sep=',')
データフレームのn行目を取り出す	df.loc[n]
日付時刻データの曜日を整数で使う	aDatetime.weekday()
要素ひとつの組	(element,)
今日の日数	datetime.datetime.today().day
マップの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
文字列がリストの要素でないか	element not in aList
行列が何のデータ型か調べる	aArray.dtype()
データフレームの選択したカラムの75パーセンタイル	df[['列A', '列B']].quantile(0.75)
rgbの左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の印をバツにする	plt.scatter(データ列x, データ列y, marker='x')
文字列はひらがなかどうか	('ぁ' <= ch <= 'ん')
乱数の行列	np.random.random((行数, 列数))
数列とリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
指定した列の歪度	df['列A'].kurt()
上三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ダークシアン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
マッピングにマッピングの項目を加えて、更新する	aDict.update(aDict2)
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
データシリーズの日を使う	ds.dt.day
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
空白文字を全部使う	string.whitespace
ファイル名がテキストファイルか	filename.endswith('.txt')
数式のパラメータの解を方程式として計算する	sympy.solve(e, z)
縦棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
ふたつの集合は集合と交わりを持たない	aSet.isdisjoint(aSet2)
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
イテラブルと列を連結する	itertools.chain(iterable, iterable2)
option: フォントの色を青に指定する	color = 'blue'
配列の尖りを求める	scipy.stats.kurtosis(配列, bias=False)
少ない方からカウンタをリストとして得る	aCounter.most_common()[::-1]
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
スレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
正則化付き単回帰モデルを準備する	model = sklearn.linear_model.ElasticNet()
散布図をライムグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データフレームの一部の列のSkewness	df[['列A', '列B']].skew()
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームの選択したカラムの要約統計量を求める	df[['列A', '列B']].describe()
文字列全体をパターンにASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
黒い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
緑色でリストを出力する	print(f'\033[32m{value}\033[0m')
option: グラフの色をオールドレースに設定する	color = 'oldlace'
ひとつでも非空白が文字列中にあるか確認する	any(not c.isspace() for c in s)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
文字列をカンマで区切り、列挙する	s.split(',')
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
option: グラフの色をサーモンに変更する	color = 'salmon'
データフレームのデータ型の一覧を使う	df.dtypes
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ガンマ関数	math.gamma(x)
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
散布図をダークターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
カウンタの正の数のみ残す	+aCounter
散布図をグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='grey')
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
カウンタ同士でインターセクション演算する	aCounter & aCounter2
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
濃く色をグラフの描画で用いる	sns.set(pallete='deep')
option: 区切りを使わない	sep = ''
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
印字を全て見る	string.printable
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
ミスティローズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: フォントの色をミディアムパープルに変更する	color = 'mediumpurple'
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームのカラムのケンドールの順位相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
数値の積分を行う	sympy.integrate(e)
タプルの末尾のn要素を取り除く	aTuple[:-n]
ブルーバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
データフレームをBOM付きで出力する	df.to_csv('file.csv', encoding='utf_8_sig')
折れ線グラフを暗い赤色として描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームの選択したカラムの中に文字列とがいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
データフレームの中にいくつ日付データがあるか求める	df.isin([value]).sum()
線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
データフレームのカラムの積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
nはn2か調べる	n == n2
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データ列を箱ヒゲ図にする	plt.boxplot(データ列)
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
最大値・最小値で乱数を求める	random.randint(最小値, 最大値)
タプルからカウンタを生成する	collections.Counter(aDict)
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
option: 色を紺に指定する	color = 'darkblue'
散布図をティール色として描画する	plt.scatter(データ列x, データ列y, color='teal')
option: 最初の列を行に設定する	index_col = 0
データフレームのデータ型の一覧	df.dtypes
データフレーム中の欠損値をドロップしてみる	df.dropna()
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
指定したカラムのカテゴリで集計し、個数を求める	df.groupby('列A').count()
縦棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
白色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
多次元データをt分布型確率的近傍埋め込み法で淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフのバツ印の線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
表データをある列として集約し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
option: グラフの色をロイヤルブルーにする	color = 'royalblue'
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
折れ線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
縦軸の目盛りの値を変更する	plt.yticks(目盛りの値リスト)
option: ピーチパフ色を使用する	color = 'peachpuff'
小数点数のハイパボリック・タンジェントの逆数	math.atanh(x)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
散布図をダークバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
ヒストグラムの色をコーラルに指定する	plt.hist(データ列, color='coral')
データを四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: スラグレーにグラフの色を設定する	color = 'slategrey'
データフレームの選択したカラムがどの程度、正規分布から尖っているか調べる	df[['列A', '列B']].skew()
数式の数値	float(e)
データシリーズを小数点以下n桁で四捨五入する	ds.round(n)
グリーンイエロー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームから列を１つ選択する	df[['列A']]
ミディアムターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームをに箱ひげ図としてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
文字列リストにイテラブルを変換して、カンマで連結する	','.join(map(str, iterable))
変数の値をスワップする	x, y = y, x
線グラフをミディアムオーキッド色を使って描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
現在のワーキングディレクトリ	os.getcwd()
黒い▲印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
小文字列	string.ascii_lowercase
option: ミントクリームを使う	color = 'mintcream'
リストを等量でビン数nとして分割する	pd.qcut(aList, n)
リストとイテラブルについて散布図をプロットし、、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
カウンタを多い順番にリストとして得る	aCounter.most_common()
実数のk進対数	math.log(x, k)
データフレームの一部のカラムを小数点以下n桁で丸める	df[['列A', '列B']].round(n)
実数とyの斜辺	math.hypot(x, y)
ふたつの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
配列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
組の個数を使う	len(aTuple)
２つのカラムをキーにして破壊的に昇順にデータフレームを並べ直す	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
点線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
ある列でデータフレームを整列する	df.sort_values(by='列A')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
文字列の最初だけ大文字化する	s.capitalize()
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
サイコロを振る	random.randint(1, 6)
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
散布図をバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
現在は何月か知る	datetime.datetime.today().month
データフレームをグループ化し、各最大値を計算する	df.groupby('列A').max()
タブ文字を使う	'\t'
ピンクにヒストグラムの色を変更する	plt.hist(データ列, color='pink')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データシリーズはどの程度、正規分布から尖っているか見る	ds.skew()
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
ふたつの集合の差	aSet.difference(aSet2)
変数を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
線グラフを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
データフレームが正規分布からどの程度尖っているか調べる	df.skew()
option: グラフの色をスラグレーに変更する	color = 'slategrey'
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
option: グラフの色をライトイエローに指定する	color = 'lightyellow'
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
スピアマンの順位相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
線形モデルの切片を求める	model.intercept_
option: グラフの色をインディアンレッドに変更する	color = 'indianred'
rgbのポイントマーカーをイテラブルとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
最頻値でデータフレームの欠損値を置換する	df.fillna(df.mode().iloc[0])
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
実行結果を水色でプリントする	print(f'\033[36m{value}\033[0m')
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
option: ドジャーブルーを使用する	color = 'dodgerblue'
縦棒プロットを描く	plt.bar(ラベル列, データ列)
表計算ファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
二つの実行結果を改行なしにプリントする	print(value, value2, end='')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
文字列をコロンで分割し、列挙する	s.split(':')
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
BOM付きで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
無限整数イテラブル	itertools.count()
ふたつの辞書を結合する	aDict | aDict2
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
リストとデータ列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: フォントの色をミスティローズに変更する	color = 'mistyrose'
データフレームの値を全部ValueMapで置換する	df.replace(ValueMap)
散布図を▽印を用いる描画する	plt.scatter(データ列x, データ列y, marker='v')
散布図の色を深紅にする	plt.scatter(データ列x, データ列y, color='crimson')
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
数値を赤色化する	f'\033[31m{value}\033[0m'
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
数列のケンドールの順位相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
数式のインテグラルを求める	sympy.integrate(e)
リストからサンプリングする	random.sample(iterable)
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
文字列が全て英数字か確認する	s.isalnum()
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
昇順にタプルの値を並べ直す	sorted(aTuple, reverse=True)
浮動小数点数の双曲線正接を求める	math.tanh(x)
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
option: フォントの色をパウダーブルーに設定する	color = 'powderblue'
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
イテラブルとリストについての散布図にrgbの▲マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
option: ダークサーモンに色を設定する	color = 'darksalmon'
データ列の推移を実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
配列のスピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
黒い三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
折れ線グラフをドジャーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
カテゴリで色付けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームから指定した三つの列を選択する	df[['列A', '列B', '列C']]
文字列内にひとつでもASCII文字が含まれるか	any(c.isascii() for c in s)
option: ピンクにフォントの色を指定する	color = 'pink'
散布図をダークグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgray')
新しい線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
棒グラフをピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='pink')
配列とリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
複数のデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=1)
リストの推移を折れ線プロットとして可視化する	plt.plot(range(len(データ列)), データ列)
Pythonパスの一覧を調べる	sys.path
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
行列の逆行列を計算する	np.linalg.inv(aArray)
折れ線グラフの三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
棒グラフを紺色を使って描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: フォントの色をプラムに変更する	color = 'plum'
ヒストグラムの色をペルーにセットする	plt.hist(データ列, color='peru')
辞書の項目名の値	aDict[key]
整数nをn2分の１にする	n //= n2
数列の相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
ヒストグラムの色をダークレッドに変更する	plt.hist(データ列, color='darkred')
データ列のUNIX時間をPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
n個分両端キューの要素をローテンションする	deq.rotate(n)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
縦棒プロットを描画して、棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
リスト中の要素は少なくとも一つ真	any(aList)
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
散布図としてデータフレームを見る	sns.scatterplot(data=df, x='列名', y='列名')
フォーマットで列を日付データにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
グラフで使える色名の一覧	matplotlib.colors.cnames
nをn2で割ったモジュロを求める	n % n2
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
データフレームを二つの列でグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
データフレームをインデックスで降順でソートする	df.sort_index(ascending=False)
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
データ列の推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
日付時刻データの曜日を整数で見る	aDatetime.weekday()
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図に黒い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列の中でケースを無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームを10の位で丸めて、整数にする	df.round(-1).astype(int)
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
リストとリストについての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
複数の列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
タブを求める	'\t'
表データが重複しているか調べる	df.duplicated()
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
カウンタの項目を増やす	aCounter[element] += 1
複数のシートをデータフレームとしてエクセルファイルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
表計算ファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
タプルの最初の文字列を探す	aTuple.index(element)
nとn2の値を足してnとする	n += n2
データシリーズの中に日付データとがいくつ存在するか求める	ds.isin([value, value2]).sum()
エクセルファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
線形モデルのバイアス	model.intercept_
二つのマッピングを階層的につなぐ	collections.ChainMap(aDict, aDict2)
点線にヒストグラムを設定する	plt.hist(データ列, linestyle='dotted')
真上位集合か判定する	aSet > aSet2
オブジェクトは整数型か調べる	isinstance(obj, int)
ヒストグラムをオリベドラブ色として描画する	plt.hist(データ列, color='olivedrab')
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
棒グラフをデピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='deeppink')
文字列中にひとつでも非空白がある	any(not c.isspace() for c in s)
欠損値が存在する行を破壊的に除く	df.dropna(inplace=True)
項目名が辞書にあるかどうか	key in aDict
ポイントマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
縦棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
データフレームの統計量	df.describe()
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
データフレームの先頭100行を調べる	df.head(100)
データ列の折れ線グラフを四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
xを浮動小数点数型に変換する	float(x)
ファイルからn文字、読み込む	f.read(n)
文字列がタプルに含まれないかどうか調べる	element not in aTuple
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
文字列中に非空白が含まれるか調べる	any(not c.isspace() for c in s)
option: 読み込み用に設定する	mode = 'r'
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
データシリーズの中央値を算出する	ds.median()
option: 星マーカーを使う	marker = '*'
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: ネイビーにグラフの色を変更する	color = 'navy'
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
複数の列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
データフレームの歪みを計算する	df.kurt()
配列の幾何平均を計算する	scipy.stats.gmean(配列)
データフレームの選択したカラムのSkewnessを求める	df[['列A', '列B']].skew()
nとn2の論理積を求める	n & n2
小数点数の逆双曲線余弦を求める	math.acosh(x)
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
データ列を複数横に並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: 珊瑚色を使用する	color = 'coral'
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
改行しないで2つの数値を表示する	print(value, value2, end='')
タイムスタンプデータが何年か知る	aDatetime.year
option: グラフの色をインディゴにする	color = 'indigo'
ラベンダー色でヒストグラムを描画する	plt.hist(データ列, color='lavender')
ベクトルの合計値	np.sum(aArray)
折れ線グラフの四角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
0からnまでの整数リストを得る	list(range(n+1))
データフレームの選択したカラムの中のNaNの合計を数える	df[['列A', '列B']].isna().sum()
文字列を走査しパターンにケースを無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
パレットトルコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
両端キュー中の数値のインデックス	deq.index(element)
nがn2以上か調べる	n >= n2
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
アンティークホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
データフレームの選択したカラムの欠損値を中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
横棒グラフをカデットブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
データフレームをソートして、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
文字列の末尾から空白を除く	s.rstrip(' ')
option: ベージュ色を使用する	color = 'beige'
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
二つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
文字列を区切りで分割して文字列リストに変換する	s.split(sep)
列を等間隔でn個にビン分割する	pd.cut(ds, n)
リストとリストの散布図に赤い△マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
表計算ファイルのシートをデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=シート名)
ある列の中にとが含まれるかどうか調べる	df['列A'].isin([value, value2])
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
x軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
シスル色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
横棒グラフを描く	plt.barh(ラベル列, データ列)
option: ボックスチャートを水平方向にする	vert = False
回帰分析をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingRegressor()
ブルーバイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='blueviolet')
シーグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
要素が集合に含まれないかどうか確認する	element not in aSet
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: 色をダークカーキに指定する	color = 'darkkhaki'
ヒストグラムを淡いピンク色色として描画する	plt.hist(データ列, color='lightpink')
表データのあるカラムが何年か見る	df['列A'].dt.year
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
ネイビー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: 色をグレーに設定する	color = 'grey'
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
表データのあるカラムの日	df['列A'].dt.day
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
キーが辞書に存在しているか調べる	key not in aDict
プログラムを即座に終了する	sys.exit()
キュー中の要素の位置	deq.index(element)
ミディアムオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データフレームの列の平均	df['列A'].mean()
option: 青緑に色を変更する	color = 'teal'
日付データが日付データより遅いか	aDate > aDate2
整数を文字列に変換する	str(x)
配列とリストについて散布図を描画して、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
データフレームの指定した列の欠損値を直後の値に指定する	df['列A'].fillna(method='bfill')
option: マーカーの大きさを変える	markersize = 2.0
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列を文字コードを使ってバイト列に変換する	s.encode(encoding=encoding)
文字列内に日本語があるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームのカラムの標準偏差	df['列A'].std()
列の一意な値	ds.unique()
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
赤い実線として数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
項目名が辞書上で定義済みか調べる	key in aDict
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
文字列をカンマによって区切り、列挙する	s.split(',')
折れ線グラフを赤い点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
実数のハイパボリック・コサインを求める	math.cosh(x)
データフレームのカラムの欠損値をそのメディアンで埋める	df['列A'].fillna(df['列A'].median())
nがn2で割り切れないかどうか	n % n2 != 0
文字列を代数計算の変数に変換する	sympy.Symbol(s)
線グラフをブルーバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ホワイトスモーク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
プロット中のフォントをする	sns.set(font=フォント名)
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
外れ値を除いた配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
組の末尾のn要素を除く	aTuple[:-n]
モジュールを検索するパスにを追加する	sys.path.append(dir)
折れ線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
データフレームを二つの列によって降順に並べる	df.sort_values(by=['列A', '列B'], ascending=False)
疑似乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
作画に使うフォントを指定する	sns.set(font=フォント名)
ヒストグラムのスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
xの小数点以下'4'桁まで表示する	print(':.4f'.format(x))
空の集合	set()
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
カウンタ間で交差	aCounter & aCounter2
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
散布図に青い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
折れ線グラフの▲印を赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ファイルを書き込み用に文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
折れ線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
リストとリストの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの一部の列の中に日付データがあるか調べる	df[['列A', '列B']].isin([value])
nをn2で割った余りをnとする	n %= n2
数値の微分を求める	sympy.diff(e)
option: スノー色を使う	color = 'snow'
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
数のn乗	pow(x, n)
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
四角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
リストを等量でn個にビニングする	pd.qcut(aList, n)
option: 印の大きさを変更する	markersize = 2.0
指定した列のカテゴリで集計しそれぞれの最小値を求める	df.groupby('列A').min()
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
小数点数以下の最大の整数を計算する	math.floor(x)
rgbの菱形マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームの相関行列を積率相関係数で算出する	df.corr(method='pearson')
nとn2の論理和	n | n2
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームを各列毎にグループ分けして、文字列というグループの大きさを算出する	df.groupby(column).size()[s]
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
リストの先頭を求める	aList[0]
改行なしに二つの変数をプリントする	print(value, value2, end='')
リストをビン数nで等量でビン分割する	pd.qcut(aList, n)
ヒストグラムをミスティローズ色として描画する	plt.hist(データ列, color='mistyrose')
ベクトルの累積積	np.cumprod(aArray)
rgbの下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: 茶色色を用いる	color = 'brown'
データフレームが何行重複するか見る	df.duplicated().sum()
組の中の最小値を求める	min(aTuple)
カウンタからゼロ出現回数を取り出す	+aCounter
シーケンスにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
重回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
数式を変数についてn階微分する	sympy.diff(e, z, n)
コーンズシルク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
リストと配列についての散布図に文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
全要素を1で初期化したベクトルを作る	np.ones(要素数, dtype=np.int)
nからn2までの整数列を得る	list(range(n, n2+1))
棒グラフをビスク色を使って描画する	plt.bar(データ列x, データ列y, color='bisque')
指定したカラムの値で集計し、それぞれの平均値を求める	df.groupby('列A').mean()
リストをプリントする	print(value)
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ダーク・スラテグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
日付データが土曜日	aDate.weekday() == 5
option: コーンズシルク色を使う	color = 'cornsilk'
折れ線グラフの左三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
赤い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
option: スプリンググリーン色を使用する	color = 'springgreen'
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
rgbの▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
データフレームのデータを条件で消す	df[(df['列A'] == x) & (df['列B'] == y)]
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
nが負の数かどうか	n < 0
データフレームのカーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データ列を用いる	import pandas as pd
ファイルパスのセパレータ記号	os.sep
データフレームを２つの列によってグループ化し、要約統計量を計算する	df.groupby(['列A', '列B']).describe()
データフレームを二つの列の値によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
最初のカテゴリーを除外してデータフレームのあるカラムをベクトルにする	pd.get_dummies(df['列A'], drop_first=True)
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
ある列をドロップしてみる	df.drop('列A', axis=1)
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
列から両端キューを用意する	collections.deque(iterable)
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
データフレームの複数のカラムを並べて箱ひげ図で作図する	plt.boxplot([df['カラム'], df['カラム']])
列名を列挙する	df.columns
データフレームをValueMapで全て置き換える	df.replace(ValueMap)
ヒストグラムを濃いシアン色として描画する	plt.hist(データ列, color='darkcyan')
折れ線グラフの色をドジャーブルーにする	plt.plot(データ列x, データ列y, color='dodgerblue')
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgrey')
赤い▽マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
実線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='solid')
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図の大バツ印を赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの色をシエナに指定する	plt.plot(データ列x, データ列y, color='sienna')
データシリーズの欠損値を直後の値に指定する	ds.fillna(method='bfill')
option: 色をロイヤルブルーに設定する	color = 'royalblue'
棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
グラフのx軸とy軸の比率を同じする	plt.axis('equals')
データフレームの一部の列を十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
目盛り線	plt.grid(alpha=0.5)
グラフの描画を見やすくする	import seaborn as sns
両端キューのstart番目からend番目までの要素を求める	collections.deque(itertools.islice(deq, start, end))
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
ミスティローズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: EUCを用いる	encoding = 'euc_jp'
リストと数列についての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ファイルを読み込みモードとして開く]	open(filepath, mode='r')
ホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='white')
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
末尾の列を除いたデータフレームを求める	df[df.columns[:-1]]
カウンタのキー数	len(aCounter)
データフレームを表示するとき最大行数をnに変更する	pd.set_option('display.max_rows', n)
オブジェクトが整数クラスのインスタンス	isinstance(obj, int)
目盛り線	plt.grid(alpha=0.5)
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
ふたつの集合は互いに素かどうか調べる	aSet.isdisjoint(aSet2)
カウンタ間でユニオン	aCounter | aCounter2
option: スラグレーを使う	color = 'slategray'
n個にデータフレームの中の列をビニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
option: グラフの色をダークグリーンに指定する	color = 'darkgreen'
列を四分位数でビン分割する	pd.qcut(ds, 4)
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
改行なしに実行結果をプリントする	print(value, end='')
イテラブルと数列について散布図を描いてマーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
あるカラムのNaNを最小値に指定する	df['列A'].fillna(df['列A'].min())
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
option: グラフの色をライトグリーンにする	color = 'lightgreen'
リストとしてデータフレームのあるカラムを抽出する	df['列A'].values.tolist()
表示可能な列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
赤い下三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
リストからベクトルを初期化する	np.array(aList)
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
日付データが火曜日かどうか調べる	aDate.weekday() == 1
空列を作る	[]
option: フォントの色をロイヤルブルーに変更する	color = 'royalblue'
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
xが-9以上、9以下かどうか調べる	-9 <= x <= 9
色テーマを濃くする	sns.set(pallete='deep')
マルーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームをグループ化し、ある列に対し個数を求める	df.groupby('列A')['列B'].count()
列を関数でフィルタする	filter(func, iterable)
データフレームの選択したカラムのNaNを最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: ライトスカイブルーを使う	color = 'lightskyblue'
ベクトルの次元数を調べる	aArray.ndim
データフレームの指定したカラムの中のNaNの合計をカウントする	df['列A'].isna().sum()
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
データシリーズの中にある文字列との数を数える	ds.isin([value, value2]).sum()
文字列がタプルに含まれるか調べる	element in aTuple
連立方程式を解く	sympy.solve([e, e2])
ふたつのカラムを組み合わせてグループ化し標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
スカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='skyblue')
option: 左三角マーカーを使用する	marker = '<'
棒グラフをライトグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightgray')
特異値分解で多次元データを淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
黒い星マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの一部の列の中にある文字列の合計を求める	df[['列A', '列B']].isin([value]).sum()
サイコロ	random.randint(1, 6)
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
rgbのポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: 書き込みモードに指定する	mode = 'w'
データフレームの一部のカラムを十の位で丸めて、整数にする	df[['列A', '列B']].round(-1).astype(int)
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
折れ線グラフの線種を点線にする	plt.plot(データ列x, データ列y, linestyle='dotted')
昇順に複数のカラムを用いてデータフレームを整列する	df.sort_values(by=['列A', '列B'], ascending=True)
レモンシフォン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームを表示するとき行数を変更する	pd.set_option('display.max_rows', n)
カウンタを高頻出方からリストとして得る	aCounter.most_common()
浮動小数点数が負	x < 0
データフレームの指定したカラムのNaNを平均値に設定する	df['列A'].fillna(df['列A'].mean())
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
option: ライトグリーンにグラフの色を変更する	color = 'lightseagreen'
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
文字列リストにイテラブルを変換して、'改行によってつなげる	'\n'.join(map(str, iterable))
スカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
ヒストグラムをライトシアン色を用いて描画する	plt.hist(データ列, color='lightcyan')
データシリーズの中に日付データと文字列がいくつ存在するか求める	ds.isin([value, value2]).sum()
n個に等しい量になるようにデータ列をビン分割する	pd.qcut(ds, n)
option: 印を右三角に設定する	marker = '>'
小数点数を切り下げて整数に変換する	math.floor(x)
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの指定したカラムの欠損値を平均に設定する	df['列A'].fillna(df['列A'].mean())
指定したカラムを10の位で四捨五入する	df['列A'].round(-1)
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
オブジェクトのハッシュ値	hash(obj)
散布図の印の線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
リストと配列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
円プロットを円にする	plt.axis('equals')
n個に配列を等間隔でビン分割する	pd.cut(aArray, n)
データフレームの指定したカラムのNaNを数値で置換する	df['列A'].fillna(x)
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(配列)
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
散布図をティール色で描画する	plt.scatter(データ列x, データ列y, color='teal')
データフレームから型リストで指定したデータ型のカラムを取り出す	df.select_dtypes(include=typeList)
文字列を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
散布図に黒い▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
option: ミディアムスレートブルーにグラフの色を設定する	color = 'mediumslateblue'
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
作画のx軸とy軸の比率を等しくする	plt.axis('equals')
バイアスなしの線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: 色をスカイブルーに設定する	color = 'skyblue'
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
rgbの左三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
n2がnより大きく、かつ、n3未満か確認する	n < n2 and n2 < n3
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
option: ロイヤルブルーにフォントの色を変更する	color = 'royalblue'
辞書に項目名ワード引数で更新する	aDict.update(**kwargs)
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
カラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
データフレームの指定したカラムの文字列をNaNにする	df['列A'].replace(値, np.nan)
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
データフレームのNaNを直後の値で補完する	df.fillna(method='bfill')
option: ダーク・スラテグレーを用いる	color = 'darkslategrey'
縦棒グラフをグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='green')
散布図の▽マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
インディアンレッドにヒストグラムの色を変更する	plt.hist(データ列, color='indianred')
データフレームを並べ、、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
データフレームをインデックスによって小さい順にソートする	df.sort_index(ascending=True)
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
option: グリーンイエローを使う	color = 'greenyellow'
配列のKurtosisを計算する	scipy.stats.kurtosis(配列, bias=False)
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
組の合計値	sum(aTuple)
ヒストグラムの色をチョコレートにセットする	plt.hist(データ列, color='chocolate')
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
ペールグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
データ列を中央値で分割する	pd.qcut(ds, 2)
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
文字列リストをつなげる一つの文字列にする	''.join(map(str, iterable))
グラフをプロットする	import matplotlib.pyplot as plt
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
散布図の菱形マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
横棒グラフを描画して下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームの一部の列の中に存在する文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
ある列の値ごとの最小値	df.groupby('列A').min()
ダークオーキッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
option: 文字列を改行するの代わりに用いる	end = s
表の先頭10行を抽出する	df.head(10)
データフレームの列の種類	df.info()
回帰木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
配列と数列についての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
等間隔の行列	np.arange(開始値, 終了値, 等差)
数列とリストについて散布図をプロットし、、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
数式のパラメータにnを代入する	e.subs(z, n)
カラーバーを付ける	plt.colorbar()
要素一つのりストを得る	[element]
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
option: グラフの色をフォレストグリーンにセットする	color = 'forestgreen'
データフレームを各カラム毎にグループ化して文字列というグループの個数を計算する	df.groupby(column).size()[s]
option: UTF8を使用する	encoding = 'utf-8'
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: ダイアモンドマーカーを描画する	marker = 'D'
散布図をカデットブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
t-SNEとして淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
浮動小数点数を実数で割った余り	x % y
データフレームの選択した列を万の位で丸める	df[['列A', '列B']].round(-4)
ファイルパスの絶対パスを見る	os.path.abspath(filepath)
文字列を記号にする	sympy.Symbol(s)
散布図のバツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームの標本分散	df.var(ddof=0)
option: グラフの線種を実線に設定する	linestyle = 'solid'
リストと数列の散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
折れ線グラフの▲マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
option: オリーブを使う	color = 'olive'
0から始まるn個の整数列を作る	list(range(n))
データフレームを関数のカテゴリによってグループ化する	df.groupby(関数)
文字列を走査し、正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
チップのデータセットからデータフレームを読み込む	df = sns.load_dataset('tips')
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
ある列によってデータフレームをグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
浮動小数点数に実数を加える	x + y
データフレームを表示するとき、表示可能な列数を変更する	pd.set_option('display.max_columns', n)
データフレームをグループ化し各最大値を算出する	df.groupby('列A').max()
要素は集合に含まれるかどうか確認する	element in aSet
リストとリストについて散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの標本分散を計算する	df.var(ddof=0)
オブジェクトは論理値型か調べる	isinstance(obj, bool)
プロットの色を明るくする	sns.set(pallete='bright')
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
指定した列のカテゴリで集計し各最小値を求める	df.groupby('列A').min()
相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
nからn2を引く	n - n2
平方根を求める	math.sqrt(x)
option: オリーブにグラフの色を指定する	color = 'olive'
option: マルーンを使用する	color = 'maroon'
リストとリストについて散布図をプロットし、、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのカラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
option: ライトスカイブルーにフォントの色を変更する	color = 'lightskyblue'
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームをある列をキーにしてソートする	df.sort_values(by='列A')
分割数nで配列をビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
option: ダークシアンを用いる	color = 'darkcyan'
列とイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
リストの値を並べる	sorted(aList)
ヒストグラムを描画して、ビン数を変更する	plt.hist(データ列, bins=区関数)
浮動小数点数の複素数	complex(x)
折れ線グラフをオレンジレッド色を使って描画する	plt.plot(データ列x, データ列y, color='orangered')
ヒートマップを用いてクラス分類の予測精度を確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
黄色でリストを出力する	print(f'\033[33m{value}\033[0m')
データシリーズの文字列をNaNにする	ds.replace(値, np.nan)
データから名前付きタプルをインスタンス化する	C._make(パラメータ)
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
option: フォレストグリーンにグラフの色を設定する	color = 'forestgreen'
両端キューに要素をエンキューする	deq.appendleft(element)
文字列の接尾辞は部分文字列かどうか調べる	s.endswith(sub)
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgray')
ディープスカイブルーにヒストグラムの色をセットする	plt.hist(データ列, color='deepskyblue')
リストをヒストグラムにする	plt.hist(データ列)
数値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
option: マーカーを下三角に変更する	marker = 'v'
変数について数式をn階微分する	sympy.diff(e, z, n)
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
二つの集合の和集合を求める	aSet.union(aSet2)
８ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
option: 色をライトグレーに設定する	color = 'lightgrey'
グラフをポスター用に設定する	sns.set(context='poster')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
option: 読む行番号をnamesで指定する	usecols = names
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
グラフのグリッドを暗くする	sns.set(style='darkgrid')
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
折れ線グラフの左三角印の色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
リストをビン数nを用いてビン分割する	pd.cut(aList, n)
辞書をソートしてJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
変数を太字にする	f'\033[1m{value}\033[0m'
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
配列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
グラフの横軸を対数に変更する	plt.xscale('log')
カテゴリで色付けしてに箱ひげ図を用いてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
シーケンスをカウントしてカウンタを更新する	aCounter.update(iterable)
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
3つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
実数を実数で割る	x / y
リストが空か	len(aList) == 0
ゼロ埋めした行列	np.zeros(要素数)
プラットホームがリナックスか確認する	sys.platform.startswith('linux')
配列のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームの指定したカラムの統計量	df['列A'].describe()
option: 色を小麦色に設定する	color = 'wheat'
指定した列の欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
折れ線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: バリーウッド色を使う	color = 'burlywood'
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
改行付きでタプルを文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
浮動小数点数の複素数を求める	complex(x)
横棒グラフをディムグレー色を使って描画する	plt.barh(データ列x, データ列y, color='dimgrey')
x軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
実数の双曲線正接	math.tanh(x)
データフレームから数値データを取り出す	df.select_dtypes('number')
赤いグリッド線を引く	plt.grid(color='r')
パパイヤウィップ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームをグループ化し、それぞれの分散を求める	df.groupby('列A').var()
二つの数値を改行せずプリントする	print(value, value2, end='')
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
目盛線	plt.grid(color='#800080')
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
整数nが配列のどれかか調べる	n in aArray
ライトイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
ベクトルの要素ごとに加算する	aArray + aArray2
小麦色色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
文字列を最後の部分文字列で分けたときの残りの文字列を取り出す	s.rpartition(sub)[-1]
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームの中に存在する文字列の合計を数える	df.isin([value]).sum()
珊瑚にヒストグラムの色を設定する	plt.hist(データ列, color='coral')
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
ゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
棒グラフをグリーンイエロー色を使って描画する	plt.bar(データ列x, データ列y, color='greenyellow')
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームを整数に丸める	df.round()
実数が整数	x.is_integer()
線を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
パラメータについて数式を積分する	sympy.integrate(e, z)
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
タイムスタンプデータにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
option: ダークオーキッドにグラフの色を指定する	color = 'darkorchid'
データフレームのあるカラムを最初のカテゴリーを除いてワンホット・ベクトルにする	pd.get_dummies(df['列A'], drop_first=True)
CSV形式にデータフレームをヘッダを付けず出力する	df.to_csv('file.csv', header=None)
イテラブルを集合に変換する	set(iterable)
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
数列とリストについての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
グリッド線	plt.grid(alpha=0.5)
散布図の丸マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
太文字で数値をプリントする	print(f'\033[1m{value}\033[0m')
option: ディムグレーに色を設定する	color = 'dimgrey'
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
CSVファイルをデータフレームとして読む	pd.read_csv('file.csv', sep=',')
最後の部分文字列で文字列を分けたときの前半の文字列を取り出す	s.rpartition(sub)[0]
リストと配列について散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列中にひとつでも非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
エンコーディングによって文字列をバイト列にする	s.encode(encoding=encoding)
欠損値も加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
列とイテラブルのデカルト積	itertools.product(iterable, iterable2)
英字の大文字を全部求める	string.ascii_uppercase
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
option: フォントの色をカデットブルーに変更する	color = 'cadetblue'
option: チョコレートにフォントの色を変更する	color = 'chocolate'
実数の仮数部	math.frexp(x)[0]
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
縦棒グラフをプロットして、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ヒストグラムをパレットトルコイズ色を使って描画する	plt.hist(データ列, color='paleturquoise')
option: ラベンダーブラッシュを使用する	color = 'lavenderblush'
リストと配列の散布図を描画して三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: フォントの色をゴーストホワイトに変更する	color = 'ghostwhite'
データシリーズの統計量	ds.describe()
散布図を菱形印を用いる描画する	plt.scatter(データ列x, データ列y, marker='D')
散布図の下三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
セットにイテラブルの要素を全て追加する	aSet.update(iterable)
文字列が全てアスキー文字か確認する	s.isascii()
フォーマットでカラムをPandasの日付型にする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
option: グラフの色を茶色に指定する	color = 'brown'
カラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
グラフで用いるy軸に名前をつける	plt.ylabel('y軸ラベル')
セットに列を追加更新する	aSet.update(iterable)
列名を指定して二つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
option: 色を暗い赤に設定する	color = 'darkred'
最頻値でデータフレームの選択した列の欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
年月日と時刻から日付時刻を作成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
横棒グラフをスノー色として描画する	plt.barh(データ列x, データ列y, color='snow')
ブルーバイオレット色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
赤い実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
nを符号付きで長さn2のバイナリにする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
書き込み用にファイルをSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームの選択したカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
集合の補集合を求める	aSet.difference(aSet2)
ヒストグラムの色をゲインズボロにセットする	plt.hist(データ列, color='gainsboro')
散布図をビスク色を用いて描画する	plt.scatter(データ列x, データ列y, color='bisque')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
データフレームの相関行列をスピアマン相関係数として求める	df.corr(method='spearman')
棒グラフをダークスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
淡いピンク色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
改行文字	'\n'
ユニークな値を要素とするベクトルを使う	np.unique(aArray)
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
ベクトルの列ごとの最小	np.min(aArray, axis=0)
ペールグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
小数点数を小数点数で割った剰余を求める	math.remainder(x, x2)
リストとイテラブルについて散布図をプロットして下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
アルファベットを見る	string.ascii_letters
散布図をミスティローズ色として描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
その第二四分位数でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
二つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
データシリーズの値がNaNかどうか調べる	ds.isna()
RANSACを使ってクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
実数のコサインの逆数を求める	math.acos(x)
ダークオレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
データフレームを指定した列によって大きい順にソートする	df.sort_values(by='列A', ascending=False)
２つの行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
文字コードtextでファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
ヒストグラムでカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
JSONを使う	import json
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
重複ありでデータフレームから100行をランダムにサンプリングする	df.sample(100, replace=True)
リスト中の要素は少なくともひとつ真か調べる	any(aList)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
インディゴ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: 色をレベッカパープルに設定する	color = 'rebeccapurple'
データフレームを表示するとき表示可能な行数をnに指定する	pd.set_option('display.max_rows', n)
データフレームのあるカラムのNaNを前の行の値で補完する	df['列A'].fillna(method='ffill')
インデックスによってデータフレームを昇順にソートする	df.sort_index(ascending=True)
データフレームの一部のカラムがどの程度分散しているか調べる	df[['列A', '列B']].var()
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
分数の分母	q.denominator
option: 四角マーカーを使う	marker = 's'
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
スクリプトファイルのパス	os.path.abspath(__file__)
指定した列を10の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
双方向キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
値を黒色にする	f'\033[30m{value}\033[0m'
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ヒストグラムの色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
option: 菱形マーカーを使用する	marker = 'D'
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
折れ線グラフのマーカーを四角印にする	plt.plot(データ列x, データ列y, marker='s')
プロットの補助目盛を有効にする	plt.minorticks_on()
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
アンティークホワイト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
Pandasの日付型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
アクアマリン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームをある列によってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
ふたつのリストのインターセクションを算出する	list(set(aList) & set(aList2))
プラム色としてヒストグラムを描画する	plt.hist(データ列, color='plum')
ゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='goldenrod')
黒いグリッド線を引く	plt.grid(color='k')
指定したカラムを10の位で丸める	df['列A'].round(-1)
リストのイミュータブルなセットを使う	frozenset(iterable)
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
中央値でデータフレームの中の列をビンニングする	pd.qcut(df[col], 2)
nにn2をかけた値をnに代入する	n *= n2
縦棒グラフを描画し、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
データフレームから列を一つ選択する	df[['列A']]
事前にパターンをコンパイルする	re.compile(pattern)
両端キューが空でないかどうか	len(deq) != 0
浮動小数点数の整数部	math.modf(x)[1]
リストをビン数nとしてビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
グラフの色を色差別なくする	sns.set(pallete='colorblind')
データフレームのある列をインデックスに減らす	df.set_index('列A')
辞書にキーが存在していないとき要素を追加する	aDict.setdefault(key, element)
標準出力を	sys.stdout
赤い実線で配列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
要素が集合のメンバーか調べる	element in aSet
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
グラフから目盛線を消す	plt.grid(False)
リストと数列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データ列とリストの散布図を描画して、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: ライム色を使う	color = 'lime'
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
動作環境はWindowsか確認する	sys.platform.startswith('win32')
赤色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームの列の各値の出現数	df[col].value_counts()
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
option: 紺にグラフの色を設定する	color = 'darkblue'
文字列が文字列リストのいづれかどうか調べる	s in aStringList
t-SNEとして多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
option: 星印を加える	marker = '*'
あるカラムのパーセンタイルを求める	df['列A'].quantile(パーセント/100)
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
option: グラフの色をチョコレートに設定する	color = 'chocolate'
option: ネイビー色を用いる	color = 'navy'
データフレームをソートし、、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
オブジェクトのイテレータ	iter(obj)
組の長さを使う	len(aTuple)
データフレームから重複をドロップする	df.drop_duplicates(inplace=True)
日付時刻データが金曜日か確認する	aDatetime.weekday() == 4
データフレームから同じ内容の行を破壊的に削除する	df.drop_duplicates(inplace=True)
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
グラフの背景色を暗くする	sns.set(style='darkgrid')
文字列中に非空白が含まれるかどうか調べる	any(not c.isspace() for c in s)
グラフの描画で濃く色を使う	sns.set(pallete='deep')
レモンシフォン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
n進文字列を整数に変換する	int(s, n)
文字列がn回繰り返すイテラブルを得る	itertools.repeat(element, n)
データフレームからカテゴリデータのみ取り出す	df.select_dtypes('object')
k進対数を求める	math.log(x, k)
option: ダークマゼンタ色を使う	color = 'darkmagenta'
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
データシリーズの75パーセンタイル	ds.quantile(0.75)
文字列を正規表現で分割する	re.split(pattern, s)
カテゴリ別でグループ化してデータフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
回帰分析を勾配ブースティングとして行う	model = sklearn.ensemble.GradientBoostingRegressor()
縦棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
値は集合に含まれる	element in aSet
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
リストと配列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
折れ線グラフをミディアムパープル色を使って描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: 色をフローラルホワイトにセットする	color = 'floralwhite'
全要素が1の行列を初期化する	np.ones(行数, 列数, dtype=np.int)
横棒グラフをゲインズボロ色を用いて描画する	plt.barh(データ列x, データ列y, color='gainsboro')
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
option: フォントの色を濃いシアンに変更する	color = 'darkcyan'
実数を実数で割った剰余	math.remainder(x, x2)
文字列を最後の部分文字列で二分し、先頭の文字列を使う	s.rpartition(sub)[0]
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
データフレームの選択したカラムの分位数を計算する	df[['列A', '列B']].quantile(パーセント/100)
ファイルを書き込みできるように開く]	open(filepath, mode='w')
option: グラフの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
折れ線グラフの四角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムの色をブラウンにセットする	plt.hist(データ列, color='brown')
棒グラフをブランチドアーモンド色を用いて描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
文字列中に部分文字列が存在するか調べる	sub in s
シャルトリューズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
タブを使う	'\t'
折れ線グラフの大バツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
イテラブルのイミュータブルな集合を使う	frozenset(iterable)
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
線グラフをハニーデュー色を用いて描画する	plt.plot(データ列x, データ列y, color='honeydew')
横棒グラフをデピンク色として描画する	plt.barh(データ列x, データ列y, color='deeppink')
横棒グラフをミディアムブルー色を使って描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
全要素を初期値で初期化した行列を初期化する	np.full(要素数, 初期値, dtype=np.int)
要素を集合から除く	aSet.remove(element)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
option: オレンジを用いる	color = 'orange'
データシリーズを千の位で丸める	ds.round(-3)
非数値データをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データフレームを各カテゴリに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
nが偶数か調べる	n % 2 == 0
横棒グラフの幅をする	plt.barh(ラベル列, データ列, width=0.5)
100行をランダムに重複ありでデータフレームからサンプリングする	df.sample(100, replace=True)
時間をインポートする	import time
option: フォントの色をアクアに指定する	color = 'aqua'
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データシリーズのメディアン	ds.median()
データフレームを二つの列をキーにして降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームの一部のカラムを十の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
ファイルパスを文字コードtextを使って書き込み用に開く]	open(filepath, mode='w', encoding=text)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
関数の値によってデータフレームをグループ化し要約統計量を算出する	df.groupby(関数).describe()
双方向キューの末尾に要素を追加する	deq.append(element)
データフレームのあるカラムの曜日	df['列A'].dt.weekday_name
option: フォントの色をブラックに変更する	color = 'black'
option: 線の種類を破線に変更する	linestyle = 'dashed'
データフレームの一部のカラムの中央値	df[['列A', '列B']].median()
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
データ列の推移を色付きの破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データシリーズの欠損値を最大値で埋める	ds.fillna(ds.max())
リストを行列に変換する	np.array(aList)
表データのあるカラムのタイムゾーンをする	df['列A'].tz_convert('Asia/Tokyo')
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
浮動小数点数を浮動小数点数に加える	x + y
データシリーズの曜日の名前を見る	ds.dt.weekday_name
実数を実数で	x // y
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
プロットの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
rgbの三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストとイテラブルについて散布図をプロットして、菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
勾配ブースティング分類木を準備する	model = sklearn.ensemble.GradientBoostingClassifier()
縦方向に二つのデータフレームを一つにする	pd.concat([df, df2], axis=0)
option: 書き込みモードを用いる	mode = 'w'
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: ダークスレートブルーを使用する	color = 'darkslateblue'
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
カラムを指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
散布図を黒い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
数列とリストについて散布図を描画して、△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
横棒グラフをラベンダーブラッシュ色を使って描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
NaN	math.nan
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
predicateFuncがtrueとなるイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
リストを中央値でビン分割する	pd.qcut(aList, 2)
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
イテラブルとリストの散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
深紅色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ダークシアグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='darkseagreen')
３変数の最大値を計算する	max(x, y, z)
データフレームのあるカラムは何時か見る	df['列A'].dt.hour
散布図の左三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
カテゴリ列で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
三角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
JSONフォーマットのバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
行列の列ごとの最大値	np.max(aArray, axis=0)
散布図を赤い四角マーカーを使って描く	plt.plot(データ列x, データ列y, marker='s', c='r')
option: コーンフラワーブルーにグラフの色を設定する	color = 'cornflowerblue'
option: コーンフラワーブルーを使う	color = 'cornflowerblue'
option: グラフの色をマルーンに指定する	color = 'maroon'
CSVファイルファイル名が	filename.endswith('.csv')
部分文字列が文字列の終了位置より前に含まれないか確認する	s.find(sub, 0, end) == -1
データフレームの指定した列名一覧の列を選択する	df[columns]
折れ線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
文字列の開始位置以降が部分文字列で開始するか調べる	s.startswith(sub, start)
スピアマンの相関係数を算出する	scipy.stats.spearmanr(数列, 数列2)
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
データフレームの最頻値を計算する	df.mode()
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
ビン数を設定して柱状グラフを描画する	plt.hist(データ列, bins=区関数)
実線にヒストグラムの線の種類を変更する	plt.hist(データ列, linestyle='solid')
両端キューの中に要素が含まれてるか調べる	element in deq
配列とデータ列について散布図を描画して文字列という簡単な説明用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
折れ線グラフをコーンフラワーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
既存のファイルパスを追加できるように文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
option: マーカーを右三角に変更する	marker = '>'
目盛り線をグラフに加える	plt.grid(True)
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: ミディアムパープルにグラフの色を指定する	color = 'mediumpurple'
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
文字列の両端から空白を除く	s.strip()
ふたつの列でグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
文字列がリストの要素か調べる	element in aList
文字列を区切りで区切る	s.split(sub)
全要素を０で初期化した三2ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
n個の整数列	list(range(n))
x軸だけ目盛り線	plt.grid(axis='x')
データフレームをグループ化しあるカラムに対し分散を計算する	df.groupby('列A')['列B'].var()
option: グラフの色をペールグリーンに指定する	color = 'palegreen'
CSVファイルでデータフレームを書き出す	df.to_csv('file.csv')
option: ダークオーキッドを用いる	color = 'darkorchid'
nが3の倍数かどうか確認する	n % 3 == 0
nが1もしくは2かどうか調べる	n == 1 or n == 2
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
xのハッシュ値を求める	hash(x)
ライトスレイグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
リストに文字列を追加する	aList.append(element)
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
オブジェクトのメモリビューを使う	memoryview(obj)
既存の行列を元に全要素が初期値のベクトルを作る	np.full_like(aArray, 初期値)
辞書の項目名を要素に設定する	aDict[key] = element
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
縦棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
散布図を深紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
JSON形式の文字列を読み込む	json.loads(jsonString)
事前に複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
部分文字列が文字列の開始位置から先に存在しないかどうか	s.find(sub, start) == -1
リストのn番目以降の部分を取り出す	aList[n:]
カラムのスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
指定した列のカテゴリで集計し、各最大値を求める	df.groupby('列A').max()
表示できる最大行数を増やす	pd.set_option('display.max_rows', n)
ファイルが存在するか調べる	os.path.exists(filepath)
要素ひとつのりスト	[element]
ストリームからn文字、読む	f.read(n)
option: ロージーブラウンを使う	color = 'rosybrown'
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
日付データの月数	aDate.month
小数点数を切り上げる	math.ceil(x)
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
配列とリストについての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
データフレームのあるカラムをドロップしてみる	df.drop('列A', axis=1)
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
組内の要素が少なくともひとつ真かどうか	any(aTuple)
部分的最小二乗法を使って回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームの列を折れ線プロットとして可視化する	plt.plot(df[column], df[column])
データフレームの中の列を等しい量になるようにn個にビニングする	pd.qcut(df[col], n)
データフレームが正規分布からどれだけ歪んでいるか調べる	df.kurt()
rgbの下三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
SJISでデータフレームを出力する	df.to_csv('file.csv', encoding='shift_jis')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
文字列をカンマで区切り、、列挙する	s.split(',')
リストのn番目の要素を消す	del aList[n]
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
シエナ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
横軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
箱ひげ図を描画して、平均値を追加する	plt.boxplot(データ列, showmeans=True)
データフレームの選択した列の欠損値を最小値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
文字列が英数字か調べる	s.isalnum()
データフレームのあるカラムの標準偏差	df['列A'].std()
データフレームの選択したカラムを千の位で丸める	df[['列A', '列B']].round(-3)
新しいリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
option: バイナリモードを使用する	mode = 'rb'
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
列の全順列	itertools.permutations(iterable)
回帰分析をスタッキングとして行う	sklearn.ensemble.StackingRegressor()
データフレームの欠損値をその最頻値で埋める	df.fillna(df.mode().iloc[0])
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
ヒストグラムをペールグリーン色を用いて描画する	plt.hist(データ列, color='palegreen')
数列とリストについて散布図をプロットし、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをドジャーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
セットに要素を追加する	aSet.add(element)
キューのstart番目からend番目までの部分データ	collections.deque(itertools.islice(deq, start, end))
ふたつの列からグループ化し分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
クラス分類の再現率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
コギーくんを使いたい	import kogi
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
線グラフを青い一点鎖線を使って描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
データシリーズの未入力値を最大値で置換する	ds.fillna(ds.max())
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
データ列をn個にビン分割する	pd.cut(ds, n)
データフレームをグループ化し、それぞれの合計を求める	df.groupby('列A').sum()
タプルを昇順にソートする	sorted(aTuple, reverse=True)
標準入力から入力される	input()
option: グラフの種類を破線に設定する	linestyle = 'dashed'
配列とデータ列の散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
文字列の右端から改行を取り除く	s.rstrip('\n')
線グラフの色をダークシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
データ列の折れ線グラフを右三角印として描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをバリーウッド色を用いて描画する	plt.plot(データ列x, データ列y, color='burlywood')
ベクトルのスカラー倍	aArray * n
カウンタの最頻出な項目を算出する	aCounter.most_common()[0]
部分文字列が文字列中に含まれる	sub in s
オプションで、出力先を標準エラーに指定する	file = sys.stderr
線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
縦棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
整数nの八進表現	oct(n)
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
辞書の全をクリアする	aDict.clear()
散布図にポイント印を加える	plt.scatter(データ列x, データ列y, marker='.')
リストと配列についての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
データフレームの一部のカラムの値がNaNかどうか調べる	df[['列A', '列B']].isna()
option: グラフの色をモカシンに設定する	color = 'moccasin'
イテラブルをヒストグラムで可視化する	plt.hist(データ列)
オブジェクトが組の要素でないか	element not in aTuple
option: デピンク色を用いる	color = 'deeppink'
整数nを16進リテラルに変換する	hex(n)
横棒グラフをライトイエロー色を使って描画する	plt.barh(データ列x, データ列y, color='lightyellow')
全ての十六進数字	string.hexdigits
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
アイボリー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
option: 未入力値は無視する	dropna = True
TSVファイルをデータフレームとして読み込む	pd.read_csv('file.tsv', sep='\t')
ダークカーキ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
Excelファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
JSONファイルファイル名がかどうか	filename.endswith('.json')
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
option: フォントの色をゴールドに設定する	color = 'gold'
option: バイナリ書き込みモードを用いる	mode = 'wb'
ある列の値がxより大きい行を抽出する	df[df['列A'] > x]
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
option: カラムの名前をリストで指定する	names = 列名リスト
データフレームのあるカラムの値がx以下の行を抽出する	df[df['列A'] <= x]
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
両端キューの中に文字列が存在するか確認する	element in deq
小数点数を切り下げる	math.floor(x)
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
文字列を区切りで区切って列挙する	s.split(sep)
オーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
三自然数のLCM	math.lcm(n, n2, n3)
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
色を全般的に濃くする	sns.set(pallete='deep')
option: ライトスカイブルーを用いる	color = 'lightskyblue'
散布図の上三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ゼロ埋めされた行列を作る	np.zeros(要素数)
折れ線グラフの下三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列が全て英字か調べる	s.isalpha()
データフレームのある列をインプレイスで削除する	df.drop('列A', axis=1, inplace=True)
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
数値を緑色にする	f'\033[32m{value}\033[0m'
option: ダークグレーに色を変更する	color = 'darkgrey'
双方向キューの先頭にシーケンスの各要素を追加する	deq.extendleft(iterable)
大バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
カウンタの要素を列挙する	aCounter.keys()
データフレームの重複していない行だけ	df[~ df.duplicated(keep=False)]
option: グレーを使う	color = 'grey'
option: グラフの色をペルーに設定する	color = 'peru'
散布図をダークオリーブグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
リストをn回、結合する	aList * n
データシリーズの50パーセンタイル	ds.median()
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
ライトスカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームの指定したカラムを整数に丸める	df['列A'].round()
商と余りを同時に求める	divmod(x, y)
タプルを小さい順にソートする	sorted(aTuple, reverse=False)
option: 追加用に設定する	mode = 'a'
option: 決定木の最大深さをする	maxdepth = n
配列とリストについての散布図にrgbの三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
０で全要素を初期化した三二ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
リストの要素を昇順に並べ変える	sorted(aList, reverse=False)
入力ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
データフレームのn行まで取り出す	df[:n]
異なる列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ダーク・スラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームの一部のカラムの標本標準偏差を求める	df[['列A', '列B']].std(ddof=1)
option: ネイビー色を使う	color = 'navy'
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームを丸めて、整数型にする	df.round().astype(int)
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
option: 紺碧にグラフの色を設定する	color = 'azure'
散布図を丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o')
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
文字列の先頭で正規表現にケースを無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
アークタンジェント	math.atan(x)
イテラブルを集合にする	set(iterable)
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
option: ダーク・スラテグレー色を使用する	color = 'darkslategrey'
黄色色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
predicateFuncが真になるシーケンスの要素	itertools.takewhile(predicateFunc, iterable)
第一引数で指定されたファイルの名前	sys.argv[1]
データシリーズの中に文字列と日付データがあるか調べる	ds.isin([value, value2])
タブで区切って二つの実行結果を表示する	print(value, value2, sep='\t')
白色で線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
グレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
データフレームの欠損値を平均値に指定する	df.fillna(df.mean())
データシリーズの未入力値をxに設定する	ds.fillna(x)
option: ライトグリーン色を使う	color = 'lightseagreen'
データフレームのカラムの尖度を計算する	scipy.stats.kurtosis(df['列A'], bias=False)
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
文字列の接頭辞は部分文字列か調べる	s.startswith(sub)
散布図をドジャーブルー色として描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
縦棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームの欠損値を50パーセンタイルに変更する	df.fillna(df.median())
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
出力するCSVファイルの小数点以下の桁数を減らす	df.to_csv('file.csv', float_format='%.3f')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
散布図を黒い丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 文字コードを文字コードtextに設定する	encoding = text
option: パールゴールデンロッドに色を指定する	color = 'palegoldenrod'
現在が月曜日かテストする	datetime.datetime.today().weekday() == 0
データシリーズの中に文字列と文字列があるかどうか調べる	ds.isin([value, value2])
リストのヒストグラムを描画する	plt.hist(データ列)
文字列中にひとつでも非英数字があるか判定する	any(not c.isalnum() for c in s)
1行分標準入力から読む	sys.stdin.readline()
英文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
カテゴリ列で色分けして、にバイオリン図でデータフレームを見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データシリーズの要約統計量	ds.describe()
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
option: 改行しないように設定する	end = ''
配列の平均値	np.mean(aArray)
rgbに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
実行結果を太字化する	f'\033[1m{value}\033[0m'
option: バイナリモードに指定する	mode = 'rb'
データフレームの指定したカラムの中央値	df['列A'].median()
線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームの最後を見る	df.tail()
浮動小数点数を三乗する	x ** 3
散布図に大バツマーカーを使用する	plt.scatter(データ列x, データ列y, marker='X')
タン色を用いてヒストグラムを描画する	plt.hist(データ列, color='tan')
円プロットでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
データフレームをCSVファイルにSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
option: 深さを制限する	maxdepth = n
グリッド線を赤くする	plt.grid(color='r')
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
配列とリストの散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
色付きの破線を使ってリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: オレンジ色を使う	color = 'orange'
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
グリーンイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データシリーズの欠損値をそのモードで埋める	ds.fillna(ds.mode().iloc[0])
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフをプロットし、、カラーコードで色を指定する	plt.plot(データ列x, データ列y, color='#800080')
グラフの背景色を暗くする	sns.set(style='darkgrid')
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
文字列内にひとつでも空白が含まれるか	any(c.isspace() for c in s)
データフレームをある列のカテゴリとしてグループ化してグループ名で取り出す	df.groupby('列A').get_group(グループ名)
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=0)
データフレームの中の列をビン数nを用いて等量でビンニングする	pd.qcut(df[col], n)
指定した列によってデータフレームを昇順にソートする	df.sort_values(by='列A', ascending=True)
データフレームの選択した列の欠損値を平均値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
データフレームのn行目を削除し、みる	df.drop(n, axis=0)
データフレームのインデックスを振り直す	df.reset_index()
折れ線グラフの色をスチールブルーにセットする	plt.plot(データ列x, データ列y, color='steelblue')
線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
空のリストを作る	[]
データシリーズのNaNを最小値に設定する	ds.fillna(ds.min())
データフレームをグループ化し、それぞれの標準偏差を計算する	df.groupby('列A').std()
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームの選択した列の分散	df[['列A', '列B']].var()
文字列の開始位置から終了位置までの範囲で部分文字列の出現を数える	s.count(sub, start, end)
rgbの下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
シーケンスとリストの直積	itertools.product(iterable, iterable2)
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
赤いバツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
パウダーブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
散布図のポイントマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ペールグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
二つの関係が真⊂かどうか調べる	aSet < aSet2
青い実線でリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
二進数の文字列をbytesizeバイトのバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データフレームを表示するとき折り返しを無効に減らす	pd.set_option('expand_frame_repr', False)
大文字を小文字にする	s.lower()
データフレームのカラムのケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
実数を二乗する	x ** 2
ヒストグラムを黒くする	plt.hist(データ列, color='k')
点線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
リストを引数として展開して表示する	print(*aList)
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
データフレームの一部のカラムの中にと日付データがいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
十六進数字を全部求める	string.hexdigits
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
データフレームのある列のNaNを平均値で埋める	df['列A'].fillna(df['列A'].mean())
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
本日の年数を使う	datetime.datetime.today().year
折れ線グラフをアリスブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='aliceblue')
指定した列のKurtosisを計算する	df['列A'].kurt()
データフレームを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
切片なしの単回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
文字列内に英数字が含まれるか調べる	any(c.isalnum() for c in s)
SJISでExcelファイルファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
データ列の折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
option: バイナリ書き込み用にする	mode = 'wb'
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
option: 先頭の列を行にセットする	index_col = 0
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
モカシン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
モカシン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
値を集合に追加する	aSet.add(element)
折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
実数の二進対数	math.log2(x)
折れ線グラフをダークスラテグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkslategray')
数値でデータフレームの指定した列のNaNを補う	df['列A'].fillna(x)
両端キューの先頭	deq[0]
線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
空文字を求める	''
kを底とする実数の対数	math.log(x, k)
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
文字列が文字列リストのいづれか調べる	s in aStringList
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
横棒グラフを濃い青色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
nが無限に続くイテラブルを得る	itertools.repeat(n)
上限長を指定して、キュー	collections.deque(maxlen=n)
nとn2のビット和	n | n2
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
ブースティングとして回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
option: ダイアモンドマーカーを使う	marker = 'D'
option: オリベドラブ色を用いる	color = 'olivedrab'
ある列の文字列が部分文字列で終わらない行を取り出す	df[~ df['列A'].str.endswith(部分文字列)]
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
数のn乗を求める	x ** n
option: グラフの色をアクアに設定する	color = 'aqua'
サーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームから重複した行を残さず削除する	df.drop_duplicates(keep=False)
タイムスタンプ型のデータシリーズをインデックスにする	df.index = pd.DatetimeIndex(ds)
正規分布を使って疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
リストを引数として展開して表示する	print(*aList, sep=',')
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
カテゴリ別で色付けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
赤い破線としてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
option: グレーにグラフの色を変更する	color = 'gray'
データフレームをグループ化し各最小値を算出する	df.groupby('列A').min()
クラス分類の偽陰性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームの選択したカラムの欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
折れ線グラフをシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='cyan')
回帰分析をヒストグラムと勾配ブースティングを用いてする	model = sklearn.ensemble.HistGradientBoostingRegressor()
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームをグループ化してヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
2つのカウンタのいずれかに含まれる値	aCounter | aCounter2
未初期化の行列を初期化する	np.empty((行数, 列数), dtype=np.int)
上位集合もしくは等しいか	aSet > aSet2
ある列の値がxに等しく、かつ別の列の値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
整数nを二進文字列に変換する	bin(n)[2:]
折れ線グラフをパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='purple')
option: エンコーディングを文字コードtextに変更する	encoding = text
逆行列を求める	np.linalg.inv(aArray)
ヒストグラムの色をゴールデンロッドに指定する	plt.hist(データ列, color='goldenrod')
シーケンスのイミュータブルな集合	frozenset(iterable)
配列を中央値で分割する	pd.qcut(aArray, 2)
option: グラフの種類を破線に変更する	linestyle = 'dashed'
等間隔で列をn個にビン分割する	pd.cut(ds, n)
横軸の目盛りを対数に変更する	plt.xscale('log')
option: フォントの色をドジャーブルーにセットする	color = 'dodgerblue'
組を逆さにする	reversed(aTuple)
クロスマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
データフレームの欠損値を中央値に指定する	df.fillna(df.median())
ビン数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
リストと配列の散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
整数nが配列のいづれかか	n in aArray
浮動小数点数のタンジェント	math.tan(x)
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
複素数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=bool)
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
折れ線グラフの△マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
グラフの色を明るくする	sns.set(pallete='bright')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
データシリーズの欠損値をその平均値で置換する	ds.fillna(ds.mean())
ヒストグラムを描いて、ビン数を設定する	plt.hist(データ列, bins=区関数)
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
ファイル名がTSVファイル	filename.endswith('.tsv')
行列のユニークな各要素の出現回数	np.unique(aArray, return_counts=True)
カラムの未入力値をxに増やす	df['列A'].fillna(x)
文字列を最後の部分文字列で二つに区切って、最初の文字列を見る	s.rpartition(sub)[0]
横棒グラフの縦幅をする	plt.barh(ラベル列, データ列, width=0.5)
散布図の上三角印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのカラムのピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの選択した列の値が欠損値	df[['列A', '列B']].isna()
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
アイボリー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
半透明の破線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
追加できるようにBOM付きで既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフを半透明の実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図のバツマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: シーグリーンを使う	color = 'seagreen'
カンマ区切りのファイルをカラム名なしで読み込む	pd.read_csv('file.csv', header=None)
rgbの左三角マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストが空	len(aList) == 0
最後の部分文字列で文字列を二分割する	s.rpartition(sub)
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
一点鎖線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの選択したカラムのモード	df[['列A', '列B']].mode()
option: ハニーデュー色を使う	color = 'honeydew'
データシリーズの母標準偏差を算出する	ds.std(ddof=0)
シーケンスの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
カラーパレットを淡くする	sns.set(pallete='muted')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
カウンタの最も頻出な項目	aCounter.most_common()[0]
アイリスのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
リストとリストの散布図に▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: ネイビー色を使用する	color = 'navy'
グラフの見栄えを綺麗にする	import seaborn as sns
SVDを行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
最初のを外したデータフレームを求める	df[df.columns[1:]]
最頻値でデータシリーズの欠損値を補う	ds.fillna(ds.mode().iloc[0])
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
カウンタの文字列をひとつ増やす	aCounter[element] += 1
データフレームの選択したカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
整数nの二進リテラルを求める	bin(n)
目盛り線	plt.grid(linewidth=3.0)
指定したカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
データフレームの先頭n行を選ぶ	df.head(n)
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
オブジェクトはバイト列型かテストする	isinstance(obj, bytes)
プロットにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
リストの最初	aList[0]
JSONを用いる	import json
多次元データをt-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: グラフの色をアイボリーに設定する	color = 'ivory'
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
option: 印を四角に設定する	marker = 's'
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
青い破線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
データフレームの一部のカラムの未入力値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
新しいサポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの二つの列を並べて箱髭図で作図する	plt.boxplot([df['カラム'], df['カラム']])
nが2で割り切れるかどうか調べる	n % 2 == 0
マルーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームのカラムの偏差値を使う	50 + 10 * scipy.stats.zscore(df['列A'])
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
option: グラフの色をダークオレンジに変更する	color = 'darkorange'
二つのデータフレームを合体させる	pd.concat([df, df2])
折れ線グラフの左三角印の太さを指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ファイルパスを開いて]、バイナリストリームを見る	open(filepath, mode='rb')
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列の開始位置以降に部分文字列が含まれるか確認する	s.find(sub, start) != -1
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
パールバイオレットレッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
文字列内にひとつでも数字があるか	any(c.isdigit() for c in s)
折れ線グラフを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームの中にいくつがあるか求める	df.isin([value]).sum()
xが1もしくは2か調べる	x == 1 or x == 2
カウンタの各要素をその出現回数だけ列挙する	aCounter.elements()
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
option: ミッドナイトブルー色を使う	color = 'midnightblue'
option: マーカーをポイントに設定する	marker = '.'
指定した列を丸める	df['列A'].round()
折れ線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
option: シーグリーン色を使用する	color = 'seagreen'
文字列を双方向キューに積む	deq.append(element)
ある列のカテゴリ毎の最小値	df.groupby('列A').min()
指定した列で集計し、各個数を求める	df.groupby('列A').count()
グラフに鉛直方向の破線を設定する	plt.axvline(x=0, linestyle='dashed')
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
nの3乗	n ** 3
option: 青紫色を用いる	color = 'violet'
データフレームを表示するとき折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
点線に線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図をホワイトスモーク色を用いて描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
データフレームの中にある日付データの個数を調べる	df.isin([value]).sum()
関数の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby(関数).describe()
オブジェクトが辞書型かどうか	isinstance(obj, dict)
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの選択したカラムの中にあるの合計を数える	df[['列A', '列B']].isin([value]).sum()
日付時刻データが何年か知る	aDatetime.year
スレートブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
CSVファイルをカラム名を指定せず読み込む	pd.read_csv('file.csv', header=None)
option: トマトを使用する	color = 'tomato'
グラフの中のy軸にラベルを設定する	plt.ylabel('y軸ラベル')
ダークスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
マッピングの項目名とその項目を列挙する	aDict.items()
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
データ列と配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
配列の要素ごとの積	np.multiply(aArray, aArray2)
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
データシリーズの欠損値を中央値で埋める	ds.fillna(ds.median())
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
データフレームのパーセンタイルを計算する	df.quantile(パーセント/100)
option: データ型を指定する	dtype = bool
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
option: グラフの色をダークグリーンにセットする	color = 'darkgreen'
ゼロ埋めされた論理値型のベクトル	np.zeros(要素数, dtype=np.int32)
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
option: シエナを使う	color = 'sienna'
ヒストグラムをシアン色を用いて描画する	plt.hist(データ列, color='cyan')
散布図にバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
データ列を使う	import pandas as pd
ゴールド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
文字列内に英数字が含まれるか判定する	any(c.isalnum() for c in s)
データシリーズの最頻値を計算する	ds.mode()
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
文字列からISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
二数の最大値	max(x, y)
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列に漢字があるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列の先頭でパターンにマッチするか調べる	re.match(pattern, s)
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
正規分布に基づくパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
散布図に右三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='>')
文字列を空白を使って分割し、、整数リストに変換する	map(int, s.split())
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
変数を紫色でプリントする	print(f'\033[35m{value}\033[0m')
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
組の末尾を取り除く	aTuple[:-1]
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
グリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='green')
カウンタをタプルを用いて更新する	aCounter.update(aDict)
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データ列の折れ線グラフをポイント印を使用して描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
三2ビット整数型のゼロ埋めした行列	np.zeros(要素数, dtype=np.int16)
双方向キューをポップする	deq.pop()
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
文字列を式として評価する	eval(s)
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
散布図の三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
1で全要素を初期化した配列	np.ones(要素数, dtype=np.int)
文字列がキーワード	keyword.iskeyword(s)
データフレームの指定したカラムのNaNを最大値で補う	df['列A'].fillna(df['列A'].max())
データフレームの選択した列のNaNを前の行の値に変更する	df[['列A', '列B']].fillna(method='ffill')
線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
nを切り捨てながらn2分の一にする	n //= n2
要素がセットの要素でない	element not in aSet
データシリーズの欠損値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
数列とイテラブルについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
数値の微分を算出する	sympy.diff(e)
文字列がASCII文字か確認する	s.isascii()
データフレームのあるカラムの分を見る	df['列A'].dt.minute
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
nがn2以下、もしくはn3以上か	n <= n2 or n >= n3
文字列をマゼンタ化する	f'\033[35m{value}\033[0m'
データフレームの標準偏差	df.std()
option: 赤色を使う	color = 'red'
文字列中に非小文字が含まれるか調べる	any(not c.islower() for c in s)
option: グラフの色をスラグレーに指定する	color = 'slategray'
カウンタから最も頻出なキーの件数	aCounter.most_common()[1]
カウンタ同士で∩を求める	aCounter & aCounter2
数列と配列についての散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
グラフで用いる横軸の名前を設定する	plt.xlabel('x軸ラベル')
配列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ファイルが存在しないかどうか	not os.path.exists(filepath)
データフレームの欠損値を平均値で置き換える	df.fillna(df.mean())
ふたつの関係が部分集合	aSet.issubset(aSet2)
リストとリストの散布図を描画し、、△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列を青色にする	f'\033[34m{value}\033[0m'
ある列の中の未入力値の個数をカウントする	df['列A'].isna().sum()
option: マーカーを右三角に設定する	marker = '>'
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
スチールブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
ダークバイオレット色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
縦棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
option: バイナリモードに変更する	mode = 'rb'
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームのある列をインデックスに設定する	df.set_index('列A')
リストとデータ列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列がPythonのキーワード	keyword.iskeyword(s)
散布図に黒い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
変数を白色でプリントする	print(f'\033[37m{value}\033[0m')
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
半透明の破線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
オプションで、出力先を標準出力に指定する	file = sys.stdout
キーがマッピングに存在するか調べる	key in aDict
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
空のロバスト分類器を準備する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
データフレームの重複する行をマスクする	df.duplicated()
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
クリムゾン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
option: グラフの色をオールドレースに指定する	color = 'oldlace'
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
小数点以下の表示精度を設定する	pd.set_option('precision', n)
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
文字列を右寄せにする	s.rjust(文字列幅)
文字列を改行で分割し文字列リストに変換する	s.splitlines()
集合にシーケンスの要素を全て追加する	aSet.update(iterable)
縦棒グラフを赤色を使って描画する	plt.bar(データ列x, データ列y, color='red')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
昇順にタプルの要素を並べ直す	sorted(aTuple, reverse=False)
データフレームの選択したカラムにおいてどの値が最も出現するか見る	df[['列A', '列B']].mode()
データシリーズの欠損値を直後の値で補完する	ds.fillna(method='bfill')
ある列の文字列に部分文字列がないデータを抽出する	df[~df['列A'].str.contains(部分文字列)]
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームから指定した三列のみ取り出す	df[['列A', '列B', '列C']]
データフレームの一部のカラムの中に文字列が含まれるか調べる	df[['列A', '列B']].isin([value])
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
▽マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
CSVファイルからデータフレームを読む	pd.read_csv('file.csv', sep=',')
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
リストと配列について散布図を描画し、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
日付データが日付データと同時かどうか調べる	aDate == aDate2
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
事前にケースを無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
option: 色をスラグレーに設定する	color = 'slategrey'
線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
縦軸だけ目盛り線	plt.grid(axis='y')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
データフレームの指定したカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
ガンマ関数の値を求める	math.gamma(x)
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
option: グラフの色をレモンシフォンに指定する	color = 'lemonchiffon'
ヒストグラムの色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
データフレームをソートして、行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
2変数の最も大きい値	max(x, y)
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
シスル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
option: 決定木の深さを制限する	maxdepth = n
半透明の実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
n個にリストを等量で分割する	pd.qcut(aList, n)
option: ライトスチールブルー色を使用する	color = 'lightsteelblue'
タプルの合計値	sum(aTuple)
2つのオブジェクトが同一参照	obj is obj2
グラフの色を全般的に明るくする	sns.set(pallete='bright')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
ミディアムシアグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
浮動小数点数を浮動小数点数で除算する	x / y
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
オブジェクトがプロパティを持つかどうか調べる	hasattr(obj, プロパティ名)
配列とリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ファイル名がテキストファイルかどうかテストする	filename.endswith('.txt')
データフレームから重複ありでランダムに5行をサンプリングする	df.sample(5, replace=True)
棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
星印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ランダムにデータフレームから5行を重複ありでサンプリングする	df.sample(5, replace=True)
option: グラフの色をトマトに設定する	color = 'tomato'
値を集合から除去する	aSet.remove(element)
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
option: シスルを使う	color = 'thistle'
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
日付データからn秒分、引く	aDate - datetime.timedelta(seconds=n)
数値をマゼンタ化する	f'\033[35m{value}\033[0m'
option: アイボリーを使う	color = 'ivory'
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
単回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
リストにオブジェクトを加える	aList.append(element)
線グラフを紺色を使って描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: セパレータをコロンにする	sep = ':'
折れ線グラフをトマト色を用いて描画する	plt.plot(データ列x, データ列y, color='tomato')
rgbの下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
データフレームの選択したカラムの未入力値を最小値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: フォントの色をミディアムオーキッドにセットする	color = 'mediumorchid'
空列	[]
列の一意な値の個数	df[col].nunique()
折れ線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
多次元データをt-SNEとして濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
辞書のキーに対応した値	aDict.get(key)
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
nからn2までのスライス	slice(n, n2)
Excelファイルファイルでデータフレームを保存する	df.to_excel('file.xlsx')
option: 未入力値も無視しない	dropna = True
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
中央値でデータフレームの一部の列の欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
二つのマッピングをネストする	collections.ChainMap(aDict, aDict2)
データシリーズの未入力値を最頻値にセットする	ds.fillna(ds.mode().iloc[0])
ある列ごとの分散	df.groupby('列A').var()
文字列を文字コード列に変換する	[ord(ch) for ch in s]
下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v')
最大値・最小値の範囲として一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
データフレームの中にいくつ日付データが存在するか数える	df.isin([value]).sum()
線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: カラムの名前を自動的な連番に設定する	header = None
列をカウンタにする	collections.Counter(iterable)
option: ライムグリーンを使用する	color = 'limegreen'
上位集合かどうか確認する	aSet.issuperset(aSet2)
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
配列の列ごとの最小値	np.min(aArray, axis=0)
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
リストを太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
文字列をシアン化する	f'\033[36m{value}\033[0m'
両端キュー中の数値のインデックスを求める	deq.index(element)
データフレームを並べ、、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
表データのあるカラムが何分か知る	df['列A'].dt.minute
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
青い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
２つの列によってデータフレームをグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
散布図を左三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='<')
線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
データフレームの選択したカラムの中の欠損値の数を数える	df[['列A', '列B']].isna().sum()
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
シーケンスのそれぞれを関数でフィルタする	map(func, iterable)
二つの集合の対称差集合を見る	aSet.symmetric_difference(aSet2)
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
サーモンにヒストグラムの色をセットする	plt.hist(データ列, color='salmon')
セットの浅いコピーを作る	aSet.copy()
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームの複数の列を消す	df.drop(['列A', '列B'], axis=1, inplace=True)
日付時刻データが水曜日か	aDatetime.weekday() == 2
複数のデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
データフレームは何行重複するか調べる	df.duplicated().sum()
セットをイミュータブルにする	frozenset(aSet)
データ列の割合を円グラフで可視化する	plt.pie(データ列, startangle=90)
カウンタの最頻出の項目を算出する	aCounter.most_common()[0]
追加できるようにファイルパスをUTF8でオープンする]	open(filepath, mode='a', encoding='utf-8')
散布図の四角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: グラフの色をオーキッドに変更する	color = 'orchid'
二つの文字列は等しくないか調べる	s != s2
折れ線グラフの印を△印にする	plt.plot(データ列x, データ列y, marker='^')
浮動小数点数を切り上げて整数に変換する	math.ceil(x)
辞書の項目数を参照する	len(aDict)
JSONファイルファイル名がか調べる	filename.endswith('.json')
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
をPythonパスに追加する	sys.path.append(dir)
カウンタのインターセクション演算する	aCounter & aCounter2
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
辞書からカウンタを生成する	collections.Counter(aDict)
散布図を左三角印で描画する	plt.scatter(データ列x, データ列y, marker='<')
データフレームの一部のカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
折れ線グラフのクロスマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
リストとリストについて散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
配列とイテラブルについて散布図を描いて、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの指定した列の第二四分位数	df['列A'].median()
データフレームをある列のカテゴリとしてグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
辞書のコピー	dict(aDict)
オレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
横棒グラフをロージーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='rosybrown')
散布図のダイアモンドマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ヒストグラムの色をアイボリーにする	plt.hist(データ列, color='ivory')
データフレームの指定したカラムの欠損値をxで補う	df['列A'].fillna(x)
データシリーズのNaNを数値で埋める	ds.fillna(x)
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
データシリーズの欠損値を直前の値で埋める	ds.fillna(method='ffill')
リストのn番目の	aList[n]
折れ線グラフの色をピンクに変更する	plt.plot(データ列x, データ列y, color='pink')
配列をn個に等しい量になるように分割する	pd.qcut(aArray, n)
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgray')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
スーパーセットもしくは等しいか確認する	aSet > aSet2
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフをゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='goldenrod')
リストとリストの散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
リストの重複を取り除く	sorted(set(aList), key=aList.index)
イテラブルの推移を色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図のポイント印の色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームの欠損値をxで埋める	df.fillna(x)
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
option: 下三角マーカーを加える	marker = 'v'
option: 線幅を3.0ポイントにセットする	linewidth = 3.0
本日の曜日を整数で見る	datetime.datetime.today().weekday()
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
nがn2以上か確認する	n >= n2
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
列の中に含まれる文字列の合計をカウントする	df['列A'].isin([value]).sum()
半透明の点線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフの印を▼にする	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データ列を平方根する	np.sqrt(データ列)
option: 印をダイアモンドに設定する	marker = 'D'
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフの色をミディアムブルーにセットする	plt.plot(データ列x, データ列y, color='mediumblue')
UTF8としてファイルパスをオープンする]	open(filepath, encoding='utf-8')
複数のイテラブルをボックスチャートにする	plt.boxplot([データ列, データ列])
option: グラフの色をマルーンに設定する	color = 'maroon'
リストと数列について散布図を描画して、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
SVDを用いて濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
指定した列を千の位で四捨五入して、整数にする	df['列A'].round(-3).astype(int)
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
横棒グラフをライトイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightyellow')
文字列がリストの要素でないか判定する	element not in aList
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
n進数の文字列をバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
菱形印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
nがn2よりも小さいか	n < n2
データシリーズが何年か知る	ds.dt.year
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
option: ディープスカイブルーを使う	color = 'deepskyblue'
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
カテゴリ別で色分けして、データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
今日が金曜日か	datetime.datetime.today().weekday() == 4
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
辞書から最後に追加したエントリをポップする	aDict.popitem()
文字列中にひとつでも非数字があるかどうか	any(not c.isdigit() for c in s)
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
リストの最後からn番目以前の要素を抽出する	aList[:-n]
指定した列のカテゴリで集計し、標準偏差を求める	df.groupby('列A').std()
折れ線グラフの色をクリムゾンにする	plt.plot(データ列x, データ列y, color='crimson')
xが一桁の数	-9 <= x <= 9
option: ホワイトスモークを使う	color = 'whitesmoke'
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
データシリーズの未入力値を前の値に設定する	ds.fillna(method='ffill')
散布図を下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v')
縦棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームの選択した列のNaNを中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
数列とリストの散布図を描いてバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
最大値でデータフレームの選択した列の未入力値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
リストを展開して出力する	print(*aList)
カウンタのユニークな要素をリストとして得る	list(aCounter)
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgrey')
π	math.pi
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
散布図を黒いポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームを連結する	pd.concat([df, df2])
乱数の行列を作成する	np.random.random((行数, 列数))
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームのカラムのSkewness	scipy.stats.skew(df['列A'], bias=False)
数式をパラメータについて微分する	sympy.diff(e, z)
線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
黄色いグリッド線を引く	plt.grid(color='y')
eの実数乗を算出する	math.exp(x)
線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
ボックスチャートに簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
option: パープルにグラフの色を変更する	color = 'purple'
初期値で全要素を初期化したベクトルを作る	np.full(要素数, 初期値, dtype=np.int)
文字列内に空白が含まれるかどうか調べる	any(c.isspace() for c in s)
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
散布図のダイアモンド印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
文字列のn番目	s[n]
自然対数の底を使う	math.e
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
nullに等しいもの	None
散布図の左三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームの重複した行を抽出する	df[df.duplicated(keep=False)]
データフレームを２つの列の値でグループ化し、要約統計量を算出する	df.groupby(['列A', '列B']).describe()
レベッカパープルにヒストグラムの色を変更する	plt.hist(データ列, color='rebeccapurple')
三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
プログラムをエラーとして停止する	sys.exit(1)
データフレームの指定した列を百の位で丸める	df['列A'].round(-2)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
列の一覧を見る	df.info()
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
日付データにn時間分加える	aDate + datetime.timedelta(hours=n)
ミディアムスプリンググリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
キーワード引数でマップに更新する	aDict.update(**kwargs)
カウンタからタプルを引く	aCounter.subtract(aDict)
リストとリストについての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを列ごとにグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
データフレームのひとつのカラムのみ説明変数にする	説明変数 = df[['列名']]
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
データフレームを二つの列の値によって集約し、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
option: 改行をセパレータで使う	sep = '\n'
文字列が平仮名か確認する	('ぁ' <= ch <= 'ん')
イテラブルを文字列に変換して、空白によって連結する	' '.join(map(str, iterable))
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
ファイルのファイル名を使う	os.path.basename(filepath)
option: ブルーバイオレット色を使う	color = 'blueviolet'
option: 改行コードをWindowsにセットする	newline = '\r\n'
一方に含まれ、他方に含まれない集合を使う	aSet.difference(aSet2)
option: 小麦色にグラフの色を設定する	color = 'wheat'
データ列とリストの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
三つのデータフレームを縦に一つにする	pd.concat([df, df2, df3], axis=1)
option: 列方向に計算する	axis = 0
option: △マーカーを使う	marker = '^'
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
表データの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
横方向に二つのデータフレームを合体する	pd.concat([df, df2], axis=1)
最初のプログラムを書く	print('Hello World')
分子と分母から分数を新規生成する	fractions.Fraction(分子, 分母)
新しいヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
文字列の大文字小文字を整える	s.casefold()
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
文字列内にひとつでも英数字があるかどうか調べる	any(c.isalnum() for c in s)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
データフレームの一部の列の欠損値をその第二四分位数で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
xの小数点以下'3'桁の文字列にする	':.3f'.format(x)
部分文字列で文字列の開始位置以降が始まる	s.startswith(sub, start)
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
タイムスタンプデータの日	aDatetime.day
option: 黄色色を使用する	color = 'yellow'
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
データフレームの選択したカラムの欠損値を第二四分位数に増やす	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データ列の推移を青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
データフレームの指定したカラムの欠損値を最頻値に指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
ヒストグラムを実線として描く	plt.hist(データ列, linestyle='solid')
数列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
データシリーズの標本標準偏差を算出する	ds.std(ddof=1)
option: 線の幅を3.0ポイントに変更する	linewidth = 3.0
option: グラフの色をダークグレーに変更する	color = 'darkgrey'
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
配列を2次元1行に変形する	aArray.reshape(1, -1)
ローングリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
グリッド線を黒くする	plt.grid(color='k')
実行結果を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
リストとリストについての散布図にrgbの▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列に日本語があるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ボックスチャートを２つ並べて描く	plt.boxplot([データ列, データ列])
データフレームの指定した列が正規分布からどの程度、尖っているか調べる	df['列A'].skew()
指定した列のカテゴリで集計し、合計を算出する	df.groupby('列A').sum()
日付データが何年か知る	aDate.year
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
データシリーズの尖り	ds.skew()
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
option: 読み込む行番号をnamesで指定する	usecols = names
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ピーチパフ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフの星印を赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
縦棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
既存のファイルパスを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
ある列のカテゴリごとの最小値	df.groupby('列A').min()
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
複数行対応としてあらかじめ正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
新しいロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
option: グラフの色をデピンクに設定する	color = 'deeppink'
散布図の大バツ印の色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
集合をイミュータブルに変換する	frozenset(aSet)
文字列が十進数字かどうか調べる	s.isdecimal()
第二コマンド引数を知る	sys.argv[1]
nをn2で結果の切り上げ	(n + n2 - 1) // n2
データフレームの列の欠損値を平均値にセットする	df['列A'].fillna(df['列A'].mean())
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ファイルを全て読む	f.read()
シーグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
散布図に黒い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
カウンタのユニークなキーを列挙する	list(aCounter)
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
文字をユニコードに変換する	ord(ch)
文字列に漢字が含まれるか	re.search('[\u4E00-\u9FD0]', s)
線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
柱状図の範囲を設定する	plt.hist(データ列, range=(start, end))
データをL2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: スラグレーにフォントの色を設定する	color = 'slategray'
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
列から行列を作る	np.array(iterable)
データフレームの指定したカラム名一覧の列を選択する	df[columns]
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームの先頭100行	df.head(100)
データフレームを表示するとき、小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
option: グラフの色をコーンフラワーブルーに変更する	color = 'cornflowerblue'
実行環境のエンディアンを使う	sys.byteorder
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
テンプレートを引数としてargsを文字列整形する	formatText.format(*args)
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
行列の列ごとの平均値を求める	np.mean(aArray, axis=0)
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データフレームのある列を行に設定する	df.set_index('列A')
データフレームをグループ化しそれぞれの最大値を求める	df.groupby('列A').max()
文字列を黒色で表示する	print(f'\033[30m{value}\033[0m')
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームを表示するとき列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: フォントの色を黄色に設定する	color = 'yellow'
ストリーム全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
2を底とする小数点数の対数	math.log2(x)
ファイルパスをバイナリモードを用いてオープンする]	open(filepath, mode='rb')
データフレームを複数の列で昇順に並べて更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
ヒストグラムの色をシアンにセットする	plt.hist(データ列, color='cyan')
回帰木モデルを準備する	model = sklearn.tree.DecisionTreeRegressor()
リストが少なくともひとつ真か	any(aList)
option: 菱形印を加える	marker = 'D'
日付時刻データにn日分、加える	aDatetime + datetime.timedelta(days=n)
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
データシリーズの欠損値を直後の値に設定する	ds.fillna(method='bfill')
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
オレンジレッド色としてヒストグラムを描画する	plt.hist(データ列, color='orangered')
リストの変化を折れ線グラフとして可視化する	plt.plot(range(len(データ列)), データ列)
タプルの合計値を求める	sum(aTuple)
データフレームをグループ化し、各分散を求める	df.groupby('列A').var()
半透明の実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
集合に列の要素を追加する	aSet.update(iterable)
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
データフレームの指定した列の平均値	df['列A'].mean()
分類木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
カレントワーキングディレクトリ	os.getcwd()
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
option: 色を青紫に変更する	color = 'violet'
辞書の浅いコピーを作る	aDict.copy()
データフレームのある列の値がxより少ない行を取り出す	df[df['列A'] < x]
散布図をアリスブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ゼロ埋めされた複素数型の行列を初期化する	np.zeros(要素数, dtype=bool)
指定した列のカテゴリで集計し、分散を計算する	df.groupby('列A').var()
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列中からパターンにケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
二つの集合の共通要素のみにする	aSet.intersection_update(aSet2)
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフのマーカーを丸印にする	plt.plot(データ列x, データ列y, marker='o')
データフレームの標本標準偏差	df.std(ddof=1)
option: 配列のデータ型を指定する	dtype = np.int
日付データをタプルに変換する	aDate.timetuple()
データフレームから5行サンプリングする	df.sample(5)
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
指定した列のカテゴリで集計し、それぞれの分散を計算する	df.groupby('列A').var()
横棒グラフをフクシア色として描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームを丸める	df.round()
集合の浅いコピーを作る	aSet.copy()
グラフの用途をプレゼンに変更する	sns.set(context='talk')
線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: ピンクにグラフの色を設定する	color = 'pink'
データフレームのカラムを十の位で四捨五入する	df['列A'].round(-1)
小数点数の天井	math.ceil(x)
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
nが3で割り切れる	n % 3 == 0
タプルの長さを見る	len(aTuple)
データシリーズの年	ds.dt.year
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: グラフの色をライムグリーンにセットする	color = 'limegreen'
option: グラフの色をゴールドに変更する	color = 'gold'
棒グラフをバリーウッド色を用いて描画する	plt.bar(データ列x, データ列y, color='burlywood')
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
オブジェクトはタプルか調べる	isinstance(obj, tuple)
文字列が全て空白文字からなるか調べる	s.isspace()
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
実数の３乗を求める	x ** 3
option: フォントの色をクリムゾンに指定する	color = 'crimson'
option: バリーウッド色を用いる	color = 'burlywood'
書式をargsを引数として文字列整形する	formatText.format(*args)
プロットの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
ある列によってデータフレームを降順にソートする	df.sort_values(by='列A', ascending=False)
リストの散らばりを作図する	plt.scatter(データ列x, データ列y)
nとn2のビット積	n & n2
文字列を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
option: グラフの色をゲインズボロに指定する	color = 'gainsboro'
シルバー色としてヒストグラムを描画する	plt.hist(データ列, color='silver')
線グラフを赤い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
辞書に辞書の項目を更新する	aDict.update(aDict2)
縦棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームの選択したカラムを整数に丸める	df[['列A', '列B']].round()
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
t-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームの全カラムの相関を描画する	sns.pairplot(df)
option: フォントの色を真紅に設定する	color = 'crimson'
カウンタを列をカウントして、更新する	aCounter.update(iterable)
折れ線グラフの▲マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列の出力を改行しないで行う	print(value, end='')
option: ラベンダーブラッシュを用いる	color = 'lavenderblush'
ヒストグラムをディープスカイブルー色を用いて描画する	plt.hist(データ列, color='deepskyblue')
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフの色をインディアンレッドにセットする	plt.plot(データ列x, データ列y, color='indianred')
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
縦棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
日付時刻データを数値にする	aDatetime.timestamp()
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
option: ミディアムブルーにフォントの色を設定する	color = 'mediumblue'
データフレームの列の一意な値の個数を確認する	df[col].nunique()
折れ線グラフの色を淡い茶色に変更する	plt.plot(データ列x, データ列y, color='tan')
グラフにグリッド線を描画する	plt.grid(True)
データフレームの選択した列のNaNをその50パーセンタイルで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データ列の推移を赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
リストの末尾を取り除く	aList[:-1]
ある列ごとの合計	df.groupby('列A').sum()
option: オリーブ色を用いる	color = 'olive'
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
タプルを階層化する	collections.ChainMap(aDict)
ヒストグラムの色をミディアムスレートブルーにする	plt.hist(データ列, color='mediumslateblue')
データフレームの中の列をn個にビニングする	pd.cut(df[col], n)
option: フォントの色をオレンジに指定する	color = 'orange'
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
文字列を最後の部分文字列で分けたときの最初の文字列	s.rpartition(sub)[0]
マップからキーの値かもしくは要素を得る	aDict.get(key, element)
グレーにヒストグラムの色を変更する	plt.hist(データ列, color='gray')
辞書から最後のエントリをポップする	aDict.popitem()
オブジェクトの種類を調べる	type(obj)
数式の変数を数式で置き換える	e.subs(z, e2)
ヒストグラムの色を真紅にセットする	plt.hist(データ列, color='crimson')
３つの変数を順に出力する	print(value, value2, value3)
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
散布図の丸印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームの選択したカラムの尖り	df[['列A', '列B']].skew()
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
option: シルバー色を使う	color = 'silver'
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
ファイルを書き込みモードを用いて開く]	open(filepath, mode='w')
データフレームから一つの列を抽出する	df[['列A']]
option: アリスブルーを用いる	color = 'aliceblue'
ミッドナイトブルー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
等間隔でn個にデータフレームの中のカラムをビン分割する	pd.cut(df[col], n)
オブジェクトはリストか調べる	isinstance(obj, list)
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
データシリーズの欠損値をxに指定する	ds.fillna(x)
rgbの菱形マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストを順に表示する	print(*aList)
タプルを逆順にする	reversed(aTuple)
日付データをISO形式の文字列に変換する	aDate.isoformat()
組の要素を逆順にする	aTuple[::-1]
option: マーカーの線幅を変える	markeredgewidth = 2.5
データフレームをあるカラムの値によってグループ化し要約統計量を求める	df.groupby('列A').describe()
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
option: グラフの色をダーク・スラテグレーにセットする	color = 'darkslategrey'
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームの指定したカラムの欠損値をその最頻値で補う	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
データフレームの一部のカラムを四捨五入して、整数型にする	df[['列A', '列B']].round().astype(int)
データ列を分割数nを用いてビン分割する	pd.cut(ds, n)
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
目盛り線をグラフに表示する	plt.grid(True)
データフレームの二つのカラムを並べて箱髭図として可視化する	plt.boxplot([df['カラム'], df['カラム']])
データフレームの指定したカラムの未入力値を直前の値に設定する	df['列A'].fillna(method='ffill')
コマンドラインフラグの状態	sys.flags
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
実数を万の位で四捨五入する	round(x, -4)
ふたつの集合のユニオンを見る	aSet.union(aSet2)
データシリーズのNaNを最大値で埋める	ds.fillna(ds.max())
データ列をビン数nとしてビンニングし、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームをにバイオリン図としてプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
option: フォントの色をバイオレットに設定する	color = 'violet'
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv('file.csv', float_format='%.3f')
option: グレー色を用いる	color = 'grey'
データシリーズの未入力値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
ストリームに文字列を書き込む	f.write(s)
実数とyの斜辺を計算する	math.hypot(x, y)
線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
グローバル変数の一覧	globals()
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
タイムスタンプデータからn週間を減らす	aDatetime - datetime.timedelta(weeks=n)
今日が火曜日か	datetime.datetime.today().weekday() == 1
データフレームを小さい順に２つの列を用いて並べる	df.sort_values(by=['列A', '列B'], ascending=True)
浮動小数点数を文字列にする	str(x)
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
ヒストグラムの色をラベンダーに指定する	plt.hist(データ列, color='lavender')
option: 左三角マーカーを使う	marker = '<'
データフレームを表示するとき小数点以下の表示精度を指定する	pd.set_option('precision', n)
データフレームのあるカラムの欠損値を直前の値に変更する	df['列A'].fillna(method='ffill')
折れ線グラフの色をダークゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
黒い大バツマーカーを配列とデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
実数を小数点以下で丸める	round(x, n)
ミディアムスプリンググリーンにヒストグラムの色をセットする	plt.hist(データ列, color='mediumspringgreen')
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
二つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
ヘッダを付けずデータフレームをCSVファイルに出力する	df.to_csv('file.csv', header=None)
ファイルから1バイト、読み込む	f.read(1)
カーキ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
プラットホーム名	sys.platform
データフレームのSkewness	df.skew()
n番目の列を行としてCSVを読み込む	pd.read_csv('file.csv', index_col=n)
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データシリーズの未入力値をその中央値で埋める	ds.fillna(ds.median())
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
リストとデータ列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ある列の値がx以上、y以下の行を取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
既存のファイルを追加できるように文字列の示すエンコーディングでオープンする]	open(filepath, mode='a', encoding=s)
線グラフを点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
クラス分類のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
正規表現を使用する	import re
文字列をn回だけ置き換える	s.replace(sub, newsub, n)
列を日付データにする	pd.to_datetime(df['列A'])
グリッド線を黄色くする	plt.grid(color='y')
主成分分析を使って淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
ダークオレンジにヒストグラムの色を変更する	plt.hist(データ列, color='darkorange')
標準エラーを使う	sys.stderr
option: 三二ビット整数型を使う	dtype = np.int16
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
option: 茶色に色を指定する	color = 'brown'
紺碧色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
配列と数列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
貝殻色を用いてヒストグラムを描画する	plt.hist(データ列, color='seashell')
データフレームをある列によって並べ直し、、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
要素が集合に含まれないか確認する	element not in aSet
横棒グラフをライトスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
データフレームから100行、サンプリングする	df.sample(100)
双方向キューの順序を左にn個分回転させる	deq.rotate(-n)
範囲指定してデータフレームの行を抽出する	df[start:end]
nをn2で割った値を切り上げる	(n + n2 - 1) // n2
nをn2だけ大きくする	n += n2
ヒストグラムをトマト色を用いて描画する	plt.hist(データ列, color='tomato')
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: 色をインディゴにセットする	color = 'indigo'
リストとリストの散布図を描画し、、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
上位集合か	aSet.issuperset(aSet2)
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
データシリーズを千の位で四捨五入する	ds.round(-3)
アルファベットが文字列内に含まれるかどうか	any(c.isalpha() for c in s)
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ファイルからベースファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
データフレームの選択したカラムの値を正規表現patternで一度にreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: パパイヤウィップを使う	color = 'papayawhip'
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategray')
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
散布図を耐火レンガ色を用いて描画する	plt.scatter(データ列x, データ列y, color='firebrick')
データフレームのカラムの一覧を見る	df.info()
新しいヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
散布図の印の線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないか調べる	s.find(sub, start, end) == -1
データフレームを二つの列によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
複数の列を組み合わせてグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
散布図を大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X')
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
データフレームを二つの列の値によってグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
横棒グラフを描画して、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームの欠損値がある部分に色をつける	df.style.highlight_null()
カウンタ同士でユニオンを求める	aCounter | aCounter2
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
配列を変更不能な集合にする	frozenset(iterable)
グラフを描画する準備をする	import matplotlib.pyplot as plt
文字列を最後の部分文字列によって二つに分ける	s.rpartition(sub)
データシリーズの欠損値をxに変更する	ds.fillna(x)
見やすいグラフを使う準備をする	import seaborn as sns
ミディアムスプリンググリーンにヒストグラムの色をする	plt.hist(データ列, color='mediumspringgreen')
option: フォントの色をオーキッドに設定する	color = 'orchid'
ヒストグラムを暗い赤色として描画する	plt.hist(データ列, color='darkred')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ダークオリーブグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='darkolivegreen')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
nがn2より大きい	n > n2
データフレームの一部の列の相関行列をケンドール相関係数で求める	df[['列A', '列B']].corr(method='kendall')
文字列がタプルの要素でない	element not in aTuple
縦棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
２数の最小値を求める	min(x, y)
空の勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
ベクトルの和	aArray + aArray2
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
ライトスレイグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
コレクションを使う	import collections
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
リストの散布図をプロットする	plt.scatter(データ列x, データ列y)
バイナリ書き込みモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='wb')
ファイルを書き込みできるようにBOM付きとしてオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
option: n番目のカラムをインデックスに指定する	index_col = n
列によってデータフレームを集計して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データフレームの一部のカラムを100の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
ダークバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
散布図の▽印の色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
全要素を初期値で初期化した行列を作る	np.full(要素数, 初期値, dtype=np.int)
縦棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
ファイルパスをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
クラス分類の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
TSVファイルからデータフレームをロードする	pd.read_csv('file.tsv', sep='\t')
リストの末尾のn要素を捨てる	aList[:-n]
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
eの小数点数乗	math.exp(x)
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
カラムの最頻値を計算する	mode, count = scipy.stats.mode(df['列A'])
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームの欠損値を最小値にセットする	df.fillna(df.min())
n個にリストを等間隔でビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
組の末尾のn要素を取り除く	aTuple[:-n]
数列とリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
散布図に赤いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのn行目をドロップしてみる	df.drop(n, axis=0)
文字列が部分文字列で終了するか	s.endswith(sub)
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
n番目のカラムを除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
ヒストグラムの色をアクアに変更する	plt.hist(データ列, color='aqua')
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
データ列の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームの選択したカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
option: グラフの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
二つの文字列を辞書順で比較する	s < s2
列のユニークな値の個数	ds.nunique()
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
rgbの丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
散布図をアンティークホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
散布図のダイアモンドマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
プラムにヒストグラムの色を変更する	plt.hist(データ列, color='plum')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
ライトグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightgrey')
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
８進数字を全部使う	string.octdigits
データフレームのあるカラムの中に文字列が含まれる	df['列A'].isin([value])
折れ線グラフの右三角印の太さを変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
数値でデータシリーズの欠損値を埋める	ds.fillna(x)
日付データが土曜日かどうか判定する	aDate.weekday() == 5
option: 行を自動的な連番に設定する	index_col = None
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
その最頻値でデータフレームの未入力値を埋める	df.fillna(df.mode().iloc[0])
散布図の▽マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: ゴールデンロッド色を使う	color = 'goldenrod'
配列の和を計算する	aArray + aArray2
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
xが1、もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
リストの全ての要素をクリアにする	aList.clear()
データフレームのインデックスをリセットする	df.reset_index()
オブジェクトがリストの要素でない	element not in aList
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
option: 線種を実線に設定する	linestyle = 'solid'
nをn2だけ左シフトする	n << n2
テンプレートをタプルでフォーマットする	formatText.format_map(aDict)
指定したカラムのカテゴリで集計し、それぞれの標準偏差を算出する	df.groupby('列A').std()
あるカラムの値がx以上、y未満のデータを抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
ヒストグラムの色をホットピンクにセットする	plt.hist(データ列, color='hotpink')
青い一点鎖線でリストの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
八進数字を全部求める	string.octdigits
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図に黒いクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームを列の値によって集計して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
縦棒グラフをラベンダーブラッシュ色を用いて描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
文字列が無限に繰り返す列を得る	itertools.repeat(element)
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
データ列を箱ひげ図で作図する	plt.boxplot(データ列)
データフレームのあるカラムが何時か知る	df['列A'].dt.hour
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
カウンタの全回数	aCounter.total()
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
タプルのキーとその項目をペアとして取り出す	aDict.items()
コマンドの第一引数を調べる	sys.argv[1]
オブジェクトはタプルに含まれないか調べる	element not in aTuple
option: オールドレースを使う	color = 'oldlace'
双方向キューのn番目の要素を使う	deq[n]
nを8進表記に変換する	oct(n)
散布図に黒い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの指定したカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
リストのn番目からn2番目の部分	aList[n:n2]
nが正の数か調べる	n > 0
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
マッピングのコピー	dict(aDict)
辞書からキーで指定された項目をポップする	aDict.pop(key)
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
リストの推移を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データシリーズの歪度を計算する	ds.kurt()
折れ線グラフでイテラブルを描画する	plt.plot(データ列x, データ列y)
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
サブクラス	issubclass(サブクラス, クラス)
ヒストグラムをサーモン色として描画する	plt.hist(データ列, color='salmon')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
option: セパレータをカンマにする	sep = ','
両端キューの大きさを求める	len(deq)
option: 符号なし８ビット整数型を使う	dtype = np.uint8
option: 文字コードを文字列の示す文字コードに変更する	encoding = s
データフレームを表示するときカラムの最大幅をnに変更する	pd.set_option('max_colwidth', n)
option: ブルーバイオレットを使う	color = 'blueviolet'
整数nを八進文字列にする	oct(n)[2:]
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
表のインデックスの名前をまとめて付け直す	df.rename(index={x: y})
x軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
実測値をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
rgbのポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
タブ文字	'\t'
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
文字列の左端からタブを取り除く	s.lstrip('\t')
データフレームの列の文字列長を列として見る	df[col].str.len()
横棒グラフをフクシア色を用いて描画する	plt.barh(データ列x, データ列y, color='fuchsia')
ボックスチャートを横方向にする	plt.boxplot(データ列, vert=False)
疑似乱数を正規分布で求める	random.normalvariate(mu=0.5, sigma=0.2)
1行分標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
リストをランダムにシャッフルする	random.shuffle(aList)
無限に文字列が繰り返す列	itertools.repeat(element)
ふたつの集合の和集合	aSet.union(aSet2)
二つの文字列を順に出力する	print(value, value2)
カテゴリで色付けして、データフレームをに箱ひげ図でプロット化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
グラフの全般的に色テーマを暗くする	sns.set(pallete='dark')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムをベージュ色を使って描画する	plt.hist(データ列, color='beige')
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
文字列が部分文字列で終わるか調べる	s.endswith(sub)
折れ線グラフに青い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの星マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
データフレームのカラムを標準化する	scipy.stats.zscore(df['列A'])
横棒グラフをライトグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgray')
エクセルファイルファイルからSJISでCSVファイルを読む	pd.read_csv('file.csv', encoding='shift_jis')
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
データシリーズを万の位で丸める	ds.round(-4)
回帰モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
現在は何時か知る	datetime.date.today().hour
データフレームをグループ化しある列に対し分散を算出する	df.groupby('列A')['列B'].var()
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
整数nがタプルのいづれかかどうか調べる	n in aTuple
書式でデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データシリーズの中央値	ds.median()
全８進数字	string.octdigits
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
範囲を指定して整数乱数を計算する	random.randint(最小値, 最大値)
外れ値を除いたカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
値を両端キューにプッシュする	deq.append(element)
rgbの▽マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ライトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightblue')
濃い青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
セットの浅いコピーを新規生成する	aSet.copy()
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
nの8進リテラル	oct(n)
行列の次元を変形する	aArray.reshape(行数, 列数)
折れ線グラフの色を紺碧にする	plt.plot(データ列x, データ列y, color='azure')
xを浮動小数点数に変換する	float(x)
データフレームのあるカラムの曜日の名前	df['列A'].dt.weekday_name
八進数字を全部使う	string.octdigits
option: ダークスラテグレー色を使う	color = 'darkslategray'
option: 複素数型を使用する	dtype = bool
オブジェクトがあるクラスか	isinstance(obj, クラス)
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
option: グラフの色をフォレストグリーンに変更する	color = 'forestgreen'
サポートベクター分類モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの選択した列の未入力値をxに設定する	df[['列A', '列B']].fillna(x)
ヒストグラムを描いてビンを変更する	plt.hist(データ列, bins=区関数)
データフレームのn行以降を取り出す	df[n:]
データフレームの列間の相関をまとめて計算する	df.corr()
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
数値を変数について微分する	sympy.diff(e, z)
ブラック色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
option: フォントの色をチョコレートに設定する	color = 'chocolate'
ある列の値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
表データから指定した二つの列のみ取り出す	df[['列A', '列B']]
散布図をレベッカパープル色として描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ライトイエロー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
文字列リストを一つにする	''.join(aStringList)
カウンタ同士で積集合	aCounter & aCounter2
回帰分析をランダムフォレストでする	model = sklearn.ensemble.RandomForestRegressor()
整数を整数に変換する	int(x)
データを最大最小として揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
日付データが土曜日か調べる	aDate.weekday() == 5
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategray')
ヒストグラムをダークブルー色として描画する	plt.hist(データ列, color='darkblue')
要素が集合のメンバーかどうか調べる	element in aSet
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
2つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
文字列の左側から空白を消す	s.lstrip(' ')
日付データが火曜日か調べる	aDate.weekday() == 1
パールバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
散布図に右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
区切りで文字列を分割して、列挙する	s.split(sep)
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
二つの列によってデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの色をターコイズにセットする	plt.plot(データ列x, データ列y, color='turquoise')
イテラブルとデータ列についての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
実数は無限大か調べる	math.isinf(x)
データフレームの選択したカラムを10の位で丸める	df[['列A', '列B']].round(-1)
文字列から部分文字列を全て除く	s.replace(sub, '')
グラフの目的を論文に変更する	sns.set(context='paper')
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightseagreen')
データフレームのある列のNaNを直後の値に設定する	df['列A'].fillna(method='bfill')
ヒストグラムを破線として描画する	plt.hist(データ列, linestyle='dashed')
グラフの中に枠なしの凡例を加える	plt.legend(frameon=False)
散布図をインディゴ色を用いて描画する	plt.scatter(データ列x, データ列y, color='indigo')
データフレームの選択したカラムの中にいくつ日付データがあるか数える	df[['列A', '列B']].isin([value]).sum()
数値を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
表の列名を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
散布図をゲインズボロ色として描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
最大値でデータシリーズの未入力値を置換する	ds.fillna(ds.max())
カラムが正規分布からどれだけ尖っているか確認する	df['列A'].skew()
既存の行列を元に全要素が初期値の行列	np.full_like(aArray, 初期値)
大文字・小文字を無視してパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
配列の合計値を求める	np.sum(aArray)
文字列中にひとつでも非アスキー文字があるか	any(not c.isascii() for c in s)
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ライトスレイグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
nを八進文字列に変換する	oct(n)[2:]
線グラフの色をライムグリーンにセットする	plt.plot(データ列x, データ列y, color='limegreen')
ハニーデュー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
ミディアムオーキッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
コマンド引数を列挙する	sys.argv[1:]
option: グレーに色を設定する	color = 'grey'
データフレームの一部の列を10の位で四捨五入する	df[['列A', '列B']].round(-1)
option: グラフの色を赤に設定する	color = 'red'
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
あるカラムの欠損値を第二四分位数に設定する	df['列A'].fillna(df['列A'].median())
ある列の文字列に部分文字列がないデータを選ぶ	df[~df['列A'].str.contains(部分文字列)]
散布図の星印を赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
列の組み合わせ	itertools.combinations(iterable, n)
数値をパラメータについて微分する	sympy.diff(e, z)
線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
グラフのパレットをパステル調にする	sns.set(pallete='pastel')
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
散布図をrgbの星マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
浮動小数点数を小数点以下で丸める	round(x, n)
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
平均値と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームから列を1つのみ選択する	df[['列A']]
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
最初のカテゴリーを無視してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
多次元データをMSDでパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データシリーズは何年か見る	ds.dt.year
option: 行を自動的な連番に変更する	index_col = None
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
PNGファイルとしてプロットを保存する	plt.savefig('foo.png')
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
option: 色をダークサーモンに設定する	color = 'darksalmon'
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
データ列をビン数nでビン分割する	pd.cut(ds, n)
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列x, データ列y, color='lavender')
茶色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
スカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='skyblue')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
配列をダミー変数に変換する	pd.get_dummies(配列)
option: ダークレッドを用いる	color = 'darkred'
ダークブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
リストから行列を作る	np.array(aList)
ファイルパスをオープンする]	open(filepath)
浮動小数点数のn乗の実数剰余	pow(x, n, y)
散布図をミディアムオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: グラフの色を青緑にする	color = 'teal'
文字をASCIIコードに変換する	ord(ch)
データフレームの先頭	df.head()
回帰分析をバギングとしてする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
オプションでファイルを用いる	file = sys.open(filename, 'w')
整数nが組のどれかか確認する	n in aTuple
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
option: アイボリー色を使う	color = 'ivory'
縦棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
データフレームをグループ化し、ある列の要約統計量を計算する	df.groupby('列A').describe()['列B']
データシリーズの値をValueMapで一度に置換する	ds.replace(ValueMap)
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
ダークオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
option: フォレストグリーンにフォントの色を指定する	color = 'forestgreen'
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームの中に文字列があるか調べる	df.isin([value])
スピアマンの順位相関係数を計算する	scipy.stats.spearmanr(数列, 数列2)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
データフレームの一部の列を万の位で丸める	df[['列A', '列B']].round(-4)
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ストリームにxを文字列に変換して書き込む	f.write(str(x))
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの選択したカラムの値を正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
赤色で文字列をプリントする	print(f'\033[31m{value}\033[0m')
列をカウントして、カウンタを更新する	aCounter.update(iterable)
折れ線グラフの透明度をする	plt.plot(データ列x, データ列y, alpha=0.5)
貝殻にヒストグラムの色を変更する	plt.hist(データ列, color='seashell')
データ列をビン数nとしてビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
グラフを色差別なくする	sns.set(pallete='colorblind')
折れ線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
マッピングをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
折れ線グラフの星マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
セットの全ての要素が別のセットに含まれるかどうか調べる	aSet.issubset(aSet2)
オブジェクトは文字列	isinstance(obj, str)
ファイルパスを開いて]、バイナリストリームを求める	open(filepath, mode='rb')
数列の四分位を可視化する	plt.boxplot(データ列)
整数nがリストのいづれかかどうか判定する	n in aList
一点鎖線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: ミディアムシアグリーンを使用する	color = 'mediumseagreen'
データフレームをグループ化しある列の要約統計量を計算する	df.groupby('列A').describe()['列B']
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
赤い三角マーカーを数列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
クラス分類を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingClassifier()
浮動小数点数の逆正弦	math.asin(x)
グレー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
配列とリストについて散布図を描いて、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
▼印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
行列の行ごとの最大	np.max(aArray, axis=1)
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
ヒストグラムの色をホワイトに変更する	plt.hist(データ列, color='white')
等間隔の配列	np.arange(開始値, 終了値, 等差)
データフレームの列の名前をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
散布図をホワイト色で描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームの指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
option: グラフの色を青紫に設定する	color = 'violet'
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
二つの集合が互いに素	aSet.isdisjoint(aSet2)
文字列を置換する	s.replace(sub, newsub)
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
散布図をパパイヤウィップ色を用いて描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
列を周期的に繰り返す	itertools.cycle(iterable)
データフレームを表示するとき小数点以下をn桁に変更する	pd.set_option('precision', n)
データフレームの指定したカラムの平均値	df['列A'].mean()
小数点数の逆双曲線正接	math.atanh(x)
ミディアムスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumslateblue')
データフレームの内容を見る	df.head()
数列とリストについて散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
行列積	np.matmul(aArray, aArray2)
散布図の左三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ExcelファイルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
イテラブルとリストについて散布図を描画してマーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: ダークオリーブグリーンを使う	color = 'darkolivegreen'
データフレームの中の列を分割数nで分割する	pd.cut(df[col], n)
ミディアムブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
やわらかい青色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
平均でデータフレームのカラムの欠損値を埋める	df['列A'].fillna(df['列A'].mean())
集合から要素を取り除く	aSet.remove(element)
ロバストな単クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
部分的最小二乗回帰モデルを作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
リストを赤色でプリントする	print(f'\033[31m{value}\033[0m')
rgbの四角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 色をフクシアに設定する	color = 'fuchsia'
散布図の菱形マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
小数点数のルートを求める	math.sqrt(x)
xを整数に変換する	int(x)
option: バリーウッド色を使用する	color = 'burlywood'
赤い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
option: フォントの色をマゼンタに設定する	color = 'magenta'
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
メディアンでデータフレームの欠損値を置換する	df.fillna(df.median())
ライトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: コロンを区切り記号で使う	sep = ':'
option: タン色を使う	color = 'tan'
ダークシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームのn行以降抽出する	df[n:]
nをn2でわる	n / n2
JSON文字列を辞書にする	json.loads(jsonString)
文字列の中のASCII限定としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
データフレームの行を選ぶ	df[start:end]
option: リネンを使う	color = 'linen'
線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
縦棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
辞書順で文字列が文字列より前か調べる	s < s2
スノー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
リストの末尾のn要素を取り除く	aList[:-n]
全ての句点文字	string.punctuation
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームのあるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
グラフの色テーマを全般的に暗くする	sns.set(pallete='dark')
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
変数をシアンにする	f'\033[36m{value}\033[0m'
セットをイミュータブルに変換する	frozenset(aSet)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
横棒グラフをライムグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='limegreen')
データフレームのNaNを最小値に設定する	df.fillna(df.min())
ライム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
日付時刻データが日曜日かどうか	aDatetime.weekday() == 6
ファイルパスを文字コードtextでオープンする]	open(filepath, encoding=text)
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
配列の形状を変形する	aArray.reshape(行数, 列数)
インデント付きでマッピングを文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図をサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='salmon')
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを表示するとき、小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
棒グラフをパープル色を使って描画する	plt.bar(データ列x, データ列y, color='purple')
自然対数を計算する	math.log(x)
option: 色をダークスラテグレーに設定する	color = 'darkslategray'
データフレームの中のカラムをn個にビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
データフレームをある列のカテゴリによってグループ化する	df.groupby('列A')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
ニューラルネットとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
データフレームの選択したカラムの最頻値	df[['列A', '列B']].mode()
表データのあるカラムは何年か見る	df['列A'].dt.year
ベクトルの各要素に加算する	aArray + aArray2
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
両端キューの上限を見る	deq.maxlen
文字列の変数名を数式にする	sympy.Symbol(s)
スピアマン順位相関係数としてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
イテラブルと数列についての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: バツ印を加える	marker = 'x'
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
いつまでもnから数え上げるする	itertools.count(start=n)
散布図に菱形マーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
ふたつの列からグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
データフレームを並べ直して、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
コーンフラワーブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
データフレームの指定したカラムの母標準偏差を計算する	df['列A'].std(ddof=0)
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
日付時刻データの分数	aDatetime.minute
両端キューに値をプッシュする	deq.append(element)
データフレームの要約統計量を計算する	df.describe()
折れ線グラフをダークバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='darkviolet')
タプルを順に表示する	print(*aTuple)
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
ダークゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkgoldenrod')
マッピングの値数	len(aDict)
アークコサイン	math.acos(x)
グラフをイイ感じに設定する	sns.set()
文字列がタイトル大文字小文字か調べる	s.istitle()
折れ線グラフの△マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの選択した列を百の位で丸める	df[['列A', '列B']].round(-2)
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: ロイヤルブルー色を用いる	color = 'royalblue'
データシリーズのパーセンタイル	ds.quantile(パーセント/100)
要素がマッピングの値に含まれていないか調べる	element not in aDict.values()
データフレームの中央値を計算する	df.median()
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
フローラルホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
ベクトルをフラットにする	aArray.flatten()
文字列を空白を使って区切って、整数リストにする	map(int, s.split())
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
多次元データを主成分分析で淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
option: 色を青に指定する	color = 'blue'
実数を整数で割る	x / y
線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: ダークシアンにグラフの色を設定する	color = 'darkcyan'
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの選択したカラムを10の位で四捨五入する	df[['列A', '列B']].round(-1)
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: 茶色にグラフの色を設定する	color = 'brown'
線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
列を四分位数ごとに分割する	pd.qcut(ds, 4)
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
組の最後を除く	aTuple[:-1]
大量のデータが正規分布かどうか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
本日の年数	datetime.datetime.today().year
option: グラフの色をホワイトにする	color = 'white'
組の最後の要素	aTuple[-1]
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
ベクトルの列	aArray[:, 列番号]
データシリーズの欠損値をモードに変更する	ds.fillna(ds.mode().iloc[0])
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
文字列を部分文字列で区切る	s.split(sub)
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームの選択した列が正規分布からどの程度尖っているか見る	df[['列A', '列B']].skew()
データフレームの選択したカラムの中にいくつNaNがあるかカウントする	df[['列A', '列B']].isna().sum()
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
option: 区切りをコロンにする	sep = ':'
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
ブランチドアーモンド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
配列から複数個ランダムに選ぶ	random.choices(iterable, k=n)
論文用にプロットを設定する	sns.set(context='paper')
散布図を黒い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
配列からサンプリングする	random.sample(iterable)
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgray')
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
値が集合のメンバーに含まれる	element in aSet
カラムの偏差値を計算する	50 + 10 * scipy.stats.zscore(df['列A'])
組の平均を求める	sum(aTuple)/len(aTuple)
データフレームをCSVファイルを用いて保存する	df.to_csv('file.csv')
円プロットのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データフレームの一部の列の欠損値をメディアンで補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データフレームをグループ化し、ある列に対し個数を算出する	df.groupby('列A')['列B'].count()
配列のトリム分散を算出する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
実数のハイパボリック・コサイン	math.cosh(x)
カウンタから列をカウントして引く	aCounter.subtract(iterable)
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームのカラムの平均値を求める	df['列A'].mean()
上限長nの両端キューを列から作成する	collections.deque(iterable, maxlen=n)
rgbの▼マーカーをリストとイテラブルについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グラフの描画でパステル調にパレットを使う	sns.set(pallete='pastel')
ベクトルの列ごとの平均値を求める	np.mean(aArray, axis=0)
折れ線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
表データの指定の列に重複があれば、削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
折れ線グラフのポイント印を赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
横方向にデータフレームを一つにする	pd.concat([df, df2], axis=1)
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
リストの平均値	sum(aList)/len(aList)
日付時刻データの月数	aDatetime.month
有理数モジュールをインポートする	import fractions
文字列全体がパターンにマッチするか調べる	re.fullmatch(pattern, s)
option: マーカーを丸に変更する	marker = 'o'
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: グラフの色をダークスレートブルーに指定する	color = 'darkslateblue'
データフレームの指定したカラムは正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
ゴーストホワイト色でヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
ダーク・スラテグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データフレームをある列を用いて降順に破壊的に並べる	df.sort_values(by='列A', ascending=False, inplace=True)
指定したカラムの値で集計しそれぞれの個数を計算する	df.groupby('列A').count()
数列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
データフレームの選択した列の欠損値を平均で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データシリーズの未入力値を最頻値に変更する	ds.fillna(ds.mode().iloc[0])
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
データフレームからカラムを二つだけ選択する	df[['列A', '列B']]
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
数列とリストについての散布図に赤い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
縦方向に三つのデータフレームを一つにする	pd.concat([df, df2, df3], axis=1)
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
オールドレースにヒストグラムの色を指定する	plt.hist(データ列, color='oldlace')
折れ線グラフの色をデピンクにセットする	plt.plot(データ列x, データ列y, color='deeppink')
ミディアムバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
横棒グラフをフォレストグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='forestgreen')
データフレームをグループ化し標準偏差を求める	df.groupby('列A').std()
データフレームから1つの列を選ぶ	df[['列A']]
データフレームを複数の列によって昇順にソートして更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
赤いポイントマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
エラーなく集合から要素を除く	aSet.discard(element)
データフレームの指定したカラムがどの程度、分散しているか見る	df['列A'].var()
両端キューを空にする	deq.clear()
浮動小数点数を整数にする	int(x)
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
横棒グラフの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
リストとリストについて散布図を描き、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
切り上げて整数に変換する	math.ceil(x)
option: ダークターコイズを使う	color = 'darkturquoise'
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
折れ線グラフに上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
前もって大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
散布図のダイアモンドマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
配列の尖度を算出する	scipy.stats.kurtosis(配列, bias=False)
1行から二つの浮動小数数値を取り出す	A, B = map(float, input().split())
ヒストグラムをレモンシフォン色を用いて描画する	plt.hist(データ列, color='lemonchiffon')
値を白色にする	f'\033[37m{value}\033[0m'
双方向キューの先頭を使う	deq[0]
option: ブラックにグラフの色を設定する	color = 'black'
データフレームから列を三つ選択する	df[['列A', '列B', '列C']]
データフレームをグループ化し、あるカラムに対し分散を求める	df.groupby('列A')['列B'].var()
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
option: 更新する	inplace = True
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
option: グラフの色をダークブルーに設定する	color = 'darkblue'
二つの列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
インデックスを付けずデータフレームをCSVファイルに出力する	df.to_csv('file.csv', index=None)
rgbの菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
2つの表データを列名を指定して外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
ミディアムオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
スノー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
bとn2から成るペアを得る	(n, n2)
双方向キューをリストにする	list(deq)
配列とリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
辞書順で文字列は文字列より前かどうか調べる	s < s2
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
色付きの実線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
リストの要素を関数に適用した結果でソートする	sorted(aList, key=func)
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
データフレームの指定した列を10の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
option: ミッドナイトブルーにフォントの色を設定する	color = 'midnightblue'
リストと配列の散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをバリーウッド色を使って描画する	plt.barh(データ列x, データ列y, color='burlywood')
折れ線グラフを赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
横棒プロットの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
オプションで、標準出力を出力先にする	file = sys.stdout
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームの欠損値を第二四分位数で補う	df.fillna(df.median())
散布図のマーカーを右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
グラフにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
ダークターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
文字列内にひとつでもアスキー文字がある	any(c.isascii() for c in s)
線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
横棒グラフをミディアムスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
青い一点鎖線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
データフレームの相関行列をヒートマップでグラフ化する	sns.heatmap(df.corr())
文字列を黄色で表示する	print(f'\033[33m{value}\033[0m')
２つの配列を箱ひげ図にする	plt.boxplot([データ列, データ列])
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの中に文字列が含まれる	df.isin([value])
集合の浅いコピー	aSet.copy()
データフレームの未入力値を最大値で埋める	df.fillna(df.max())
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
青い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
リストのイミュータブルな集合	frozenset(iterable)
文字列を後ろから部分文字列で分割する	s.rsplit(sub)
色付きの破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
円プロットを正確な円にする	plt.axis('equals')
option: 白色を用いる	color = 'white'
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
ライトスカイブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ファイルパスをEUCで書き込みできるように開く]	open(filepath, mode='w', encoding='euc_jp')
システム時刻で乱数を初期化する	random.seed()
環境はLinuxかどうか調べる	sys.platform.startswith('linux')
リストを配列に変換する	np.array(aList)
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
マッピングをチェーンマップにする	collections.ChainMap(aDict)
タイムスタンプデータにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
配列をビニングする	pd.cut(aArray, aList)
データフレームの指定したカラムを百の位で丸める	df['列A'].round(-2)
データフレームの選択したカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
方程式として数式の変数の解を求める	sympy.solve(e, z)
データフレームの一部のカラムの未入力値を前の行の値で埋める	df[['列A', '列B']].fillna(method='ffill')
シーグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
パラメータがマイナス無限大に近づく時、数式の極限値を求める	sympy.limit(e, z, -oo)
棒グラフをゴーストホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ランダムにデータフレームから重複ありで10行をサンプリングする	df.sample(10, replace=True)
散布図の色をダークレッドにする	plt.scatter(データ列x, データ列y, color='darkred')
縦棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
数列のスピアマンの順位相関係数を算出する	scipy.stats.spearmanr(数列, 数列2)
数値の平方根を求める	sympy.sqrt(e)
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
線グラフの色をシスルにセットする	plt.plot(データ列x, データ列y, color='thistle')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
配列の標準誤差を求める	scipy.stats.sem(配列)
最大長nの両端キューを作成する	collections.deque(maxlen=n)
赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
整数nのバイト長を見る	(n.bit_length() + 7) // 8
全ての空白文字	string.whitespace
データフレームの指定した列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
データフレームの選択した列の中に文字列とがいくつ存在するかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
青い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: グラフの色をラベンダーに設定する	color = 'lavender'
データフレームを小数点以下n桁で四捨五入する	df.round(n)
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
データフレームの列の名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
option: ディムグレー色を使用する	color = 'dimgrey'
棒グラフをアクアマリン色を使って描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ビン数nとしてデータフレームの中の列をビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
filepathにカレントワーキングディレクトリを設定する	os.chdir(os.dirname(filepath))
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
option: スプリンググリーンにフォントの色を指定する	color = 'springgreen'
データフレームの指定したカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
option: フォントの色をタンに設定する	color = 'tan'
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
要素をキューの末尾から削除する	deq.pop()
ビン数nを用いてデータフレームの中の列を等量でビン分割する	pd.qcut(df[col], n)
option: デピンクを使う	color = 'deeppink'
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
整数nがセットのどれか	n in aSet
相関係数でデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
黒いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: バツマーカーを使う	marker = 'x'
option: 大文字・小文字を無視する	flag = re.IGNORECASE
ファイルを開いて]、追加ストリームを使う	open(filepath, mode='a')
散布図をオリベドラブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データフレームのカラムをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
変数を下線付きで表示できる文字列にする	f'\033[4m{value}\033[0m'
option: アンティークホワイト色を用いる	color = 'antiquewhite'
線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: 追加モードを使う	mode = 'a'
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
リストの折れ線プロットを描画し、、カラーコードを用いて色を設定する	plt.plot(データ列x, データ列y, color='#800080')
option: フォントの色をミディアムオーキッドに指定する	color = 'mediumorchid'
文字列の最後から改行を除く	s.rstrip()
数を整数に変換する	int(x)
データフレームから重複を取り除く	df.drop_duplicates(inplace=True)
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
棒グラフをシルバー色を用いて描画する	plt.bar(データ列x, データ列y, color='silver')
整数nの十六進表現	hex(n)
タプルとタプルを加える	aTuple + aTuple2
文字列の最後から空白を除去する	s.rstrip()
線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図をダークシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ヒストグラムをビスク色として描画する	plt.hist(データ列, color='bisque')
データフレームの行と列を入れ替える	df.T
nの十六進表現を使う	hex(n)
クラス分類をパーセプトロンで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ロバストな線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
正規化したヒストグラムを描画する	plt.hist(データ列, density=True)
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
破壊的に大きい順にデータフレームを二つのカラムによってソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
モードで指定したカラムの欠損値を埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
列の重複コンビネーションを計算する	itertools.combinations_with_replacement(iterable, n)
青い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ヒストグラムの線の種類を実線に指定する	plt.hist(データ列, linestyle='solid')
スカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
回帰モデルの残差を計算する	目的変数 - model.predict(説明変数)
折れ線グラフの色をオレンジレッドにセットする	plt.plot(データ列x, データ列y, color='orangered')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
全要素を初期値で初期化したベクトルを作成する	np.full(要素数, 初期値, dtype=np.int)
option: 右三角印を描画する	marker = '>'
option: シャルトリューズ色を使用する	color = 'chartreuse'
グリッド線	plt.grid(linewidth=3.0)
折れ線グラフのバツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データシリーズの欠損値を直前の値で補う	ds.fillna(method='ffill')
データフレームの一部の列を千の位で丸めて整数型にする	df[['列A', '列B']].round(-3).astype(int)
データフレームの指定したカラムの欠損値を直後の値で補う	df['列A'].fillna(method='bfill')
空のカウンタを作成する	collections.Counter()
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
option: スラッシュを区切りで使用する	sep = '/'
指定した列の未入力値を最大値で埋める	df['列A'].fillna(df['列A'].max())
シエナ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
折れ線グラフの右三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データシリーズをdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
二つの浮動小数点数が十分に近いか	math.isclose(x, x2)
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
0から始まるn個の整数列を得る	list(range(n))
predicateFuncを適用したとき真とならないイテラブルの部分を求める	itertools.dropwhile(predicateFunc, iterable)
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
折れ線グラフの色を紺にセットする	plt.plot(データ列x, データ列y, color='darkblue')
データフレームのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
option: 分割記号をカンマにする	sep = ','
表データのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
JSONフォーマットの文字列を辞書に変換する	json.loads(jsonString)
八進文字列を整数にする	int(s, 8)
コマンドの第二引数を調べる	sys.argv[1]
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムの色をダークレッドに設定する	plt.hist(データ列, color='darkred')
棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データフレームからランダムに重複を認めて5行をサンプリングする	df.sample(5, replace=True)
option: 青緑色を用いる	color = 'turquoise'
改行付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
空の回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
xが-9以上9以下	-9 <= x <= 9
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームのデータ型リスト	df.dtypes
三自然数の最大公約数を求める	math.gcd(n, n2, n3)
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
行列の平均値を使う	np.mean(aArray)
オブジェクトがタプルに含まれないか調べる	element not in aTuple
option: 色をカーキに変更する	color = 'khaki'
データフレームのあるカラムを整数に四捨五入する	df['列A'].round()
数列とリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
option: グラフの線の幅を3.0ポイントに指定する	linewidth = 3.0
散布図に青いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームを複数の列によって並べ直す	df.sort_values(by=['列A', '列B'])
option: やわらかい青を用いる	color = 'cornflowerblue'
ある列によってデータフレームを昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
あるカラムの未入力値を最大値に設定する	df['列A'].fillna(df['列A'].max())
乱数シードをnで固定する	random.seed(n)
10を底とする実数の対数を計算する	math.log10(x)
n2分のn	n / n2
Pythonパスにディレクトリを追加する	sys.path.append(dir)
数の２乗を計算する	x ** 2
セットにリストを追加更新する	aSet.update(iterable)
option: NaNを先頭にする	na_position = 'first'
データフレームを10000の位で四捨五入する	df.round(-4)
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
行列の列ごとの標準偏差を計算する	np.std(aArray, axis=0)
ファイルを文字コードtextとしてオープンする]	open(filepath, encoding=text)
横棒プロットを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
散布図をスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='skyblue')
棒グラフをスプリンググリーン色を使って描画する	plt.bar(データ列x, データ列y, color='springgreen')
青い上三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
既存のファイルパスをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ゴーストホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
分数の分子	q.numerator
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
折れ線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの行の名前の一覧	df.index
リストを赤色にする	f'\033[31m{value}\033[0m'
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
データフレームのカラムの欠損値をxで埋める	df['列A'].fillna(x)
符号なし８ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
双方向キュー中の文字列のインデックス	deq.index(element)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
イテラブルと配列について散布図を描画して三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
正規分布によるパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
クラス分類をK最近傍法で行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
赤い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
数列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
あるカラムに重複があれば、除く	df.drop_duplicates(subset='列A', inplace=True)
option: 色をラベンダーブラッシュに指定する	color = 'lavenderblush'
データシリーズにおいてどの値が最も出現するか見る	ds.mode()
試しに何か動かしてみる	print('Hello World')
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
二つのオブジェクトが等しいか調べる	obj == obj2
シーケンスのセット	set(iterable)
データフレームの指定した列を小数点以下n桁で四捨五入する	df['列A'].round(n)
グラフで用いるy軸に説明をつける	plt.ylabel('y軸ラベル')
分類モデルのPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
タプルを使ってカウンタを更新する	aCounter.update(aDict)
表の名前リストで指定した列を除く	df.drop(columns, axis=1, inplace=True)
セットを変更不能に変換する	frozenset(aSet)
ダークブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
二つの集合は集合と交わりを持たないかどうかテストする	aSet.isdisjoint(aSet2)
カレント作業ディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
横棒グラフを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
二つのカラムを用いて小さい順にデータフレームをソートし、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
最大値でデータフレームの指定したカラムのNaNを埋める	df['列A'].fillna(df['列A'].max())
文字列に日本語がある	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
部分文字列が文字列の終了位置より前に含まれないか	s.find(sub, 0, end) == -1
線形回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
カラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの中の列をビン数nでビニングする	pd.cut(df[col], n)
折れ線グラフをミディアムブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumblue')
文字列中の正規表現を新しい文字列として置換する	re.sub(pattern, newsub, s)
ベクトルの計算をする	import numpy as np
データフレームの指定したカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
option: グラフの色をシルバーに変更する	color = 'silver'
データフレームの一部の列を百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
option: クリムゾン色を使う	color = 'crimson'
行列の要素ごとの積	np.multiply(aArray, aArray2)
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図を左三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='<')
散布図を黒い右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
日付時刻データが日付時刻データと同時かどうか調べる	aDatetime == aDatetime2
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
クラス分類の予測精度をヒートマップを使って見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
実数を整数にする	int(x)
配列のユニークな各要素の出現回数	np.unique(aArray, return_counts=True)
日付時刻データはタイムスタンプデータより後ろか調べる	aDatetime > aDatetime2
日付時刻データのタイムゾーンを見る	aDatetime.timetz()
マッピングから項目名で指定されたエントリをポップする	aDict.pop(key)
リストの出現頻度を可視化する	plt.hist(データ列)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
イテラブルに列を続けた列	itertools.chain(iterable, iterable2)
データフレームのあるカラムを百の位で四捨五入する	df['列A'].round(-2)
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
データシリーズのNaNを後の値に変更する	ds.fillna(method='bfill')
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: マルーンにフォントの色を設定する	color = 'maroon'
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
ロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
折れ線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
シエナ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
配列とリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
リストとリストの散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: シスルにグラフの色を設定する	color = 'thistle'
option: 色をミディアムターコイズに設定する	color = 'mediumturquoise'
パラメータが無限大に近づくとき数式の極限値を求める	sympy.limit(e, z, oo)
ヒストグラムの範囲を変更する	plt.hist(データ列, range=(start, end))
数値を白色化する	f'\033[37m{value}\033[0m'
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
ヒストグラムをロイヤルブルー色として描画する	plt.hist(データ列, color='royalblue')
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
UNIX時刻をインポートする	import time
グラフで利用可能な色名の一覧	matplotlib.colors.cnames
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: ダークオーキッドにグラフの色を変更する	color = 'darkorchid'
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
列の一覧	df.info()
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
option: グラフの色をゴーストホワイトにする	color = 'ghostwhite'
データフレームの一部のカラムの中に存在する日付データの合計を数える	df[['列A', '列B']].isin([value]).sum()
データシリーズの第一四分位数	ds.quantile(0.25)
データフレームの平均と信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
option: 濃い青を使う	color = 'darkblue'
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
option: データ型として三二ビット整数型を使う	dtype = np.int16
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
option: フォントの色をライトグリーンに設定する	color = 'lightgreen'
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
分割数nとしてデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
シーケンスから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
プログラムの実行を即座に止める	sys.exit()
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
リストと配列についての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
CSVを読む	pd.read_csv('file.csv', sep=',')
エクセルファイルから全シートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
データフレームの最後の列以外を説明変数にする	説明変数 = df[df.columns[:-1]]
データフレームの相関行列を描画する	sns.heatmap(df.corr())
データフレームのカラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
データフレームのメディアンを求める	df.median()
散布図の右三角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
集合をイミュータブルなセットにする	frozenset(aSet)
折れ線グラフの上三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: マーカーの色を白にする	markerfacecolor = 'white'
option: UTF8を用いる	encoding = 'utf-8'
カテゴリでグループ化して、にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
2つのデータフレームを列名を指定して全ジョインする	pd.merge(df, df2, on='列A', how='outer')
ミディアムスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
日付データが日付データより前か調べる	aDate < aDate2
クラスが名前付きタプルかどうか調べる	issubclass(C, tuple)
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
散布図の印を黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
▲マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
リストが少なくともひとつ真か確認する	any(aList)
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
実行環境のエンコーディング	sys.getdefaultencoding()
データフレームの選択した列がどの程度、正規分布から尖っているか見る	df[['列A', '列B']].skew()
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
nの各桁の総和を計算する	sum(map(int, str(n)))
実数のn乗の実数剰余を計算する	pow(x, n, y)
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
option: 読み込みモードに設定する	mode = 'r'
データフレームの未入力値を前の行の値にする	df.fillna(method='ffill')
無限にカウントアップする	itertools.count()
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列x, データ列y, color='rosybrown')
データシリーズの中にいくつNaNがあるか数える	ds.isna().sum()
散布図の大バツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ピアソンとしてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
データフレームの指定したカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
第一コマンド引数を確認する	sys.argv[1]
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
折れ線グラフのアルファ値をする	plt.plot(データ列x, データ列y, alpha=0.5)
リストとリストの散布図を描画し、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.')
KNNを用いてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
データシリーズの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
データフレームの列の名前を列挙する	df.columns
BOM付きとしてファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
データフレームの指定したカラムを10の位で四捨五入する	df['列A'].round(-1)
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
散布図をミッドナイトブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
折れ線グラフの色をラベンダーブラッシュにセットする	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列はリストの要素かどうか調べる	element in aList
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
xが-9以上9以下か	-9 <= x <= 9
グラフの色を暗くする	sns.set(pallete='dark')
実数の符号をコピーにする	math.copysign(x, x2)
日付データが日曜日	aDate.weekday() == 6
デピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
option: 欠損値を含めない	dropna = True
リストの文字列が最初に見つかるインデックスを使う	aList.index(element)
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームをグループ化しあるカラムに対し平均値を求める	df.groupby('列A')['列B'].mean()
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
列を累加した列	itertools.accumulate(iterable)
降順でインデックスでデータフレームを並べる	df.sort_index(ascending=False)
整数nを8進文字列に変換する	oct(n)[2:]
データフレームを関数ごとに集計してグループ名を列挙する	[name for name, _ in df.groupby(関数)]
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
nーn2	n - n2
option: アリスブルー色を使う	color = 'aliceblue'
option: ラベンダーを使う	color = 'lavender'
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
option: グラフの色をアイボリーに変更する	color = 'ivory'
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
折れ線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
表データをインポートする	import pandas as pd
縦棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
option: ネイビーにフォントの色を設定する	color = 'navy'
浮動小数点数を実数で除する	x / y
折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
行列のスカラー倍を求める	aArray * n
ピアソンとしてデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='pearson')
space	' '
辞書の項目名とその値をペアとして取り出す	aDict.items()
青紫色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
データシリーズは何分か調べる	ds.dt.minute
データフレームを整列し、、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
データフレームの列を目的変数にする	目的変数 = df['列名']
データフレームを保存する	df.to_csv('file.csv')
option: フォントの色をサーモンに指定する	color = 'salmon'
option: ブラックにグラフの色を指定する	color = 'black'
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
データシリーズの未入力値をxで埋める	ds.fillna(x)
空のリストを得る	[]
ファイルのベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
タイムスタンプデータとタイムスタンプデータの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
あらかじめ大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
棒グラフをロイヤルブルー色を使って描画する	plt.bar(データ列x, データ列y, color='royalblue')
n2分のnを計算する	n / n2
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: フォントの色をアイボリーに変更する	color = 'ivory'
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
ミディアムターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: マーカーをポイントに変える	marker = '.'
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームのカラムを目的変数にする	目的変数 = df['列名']
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
ロードされたモジュールの一覧	sys.modules
データフレームをグループ化しある列に対し平均値を算出する	df.groupby('列A')['列B'].mean()
今日が金曜日か確認する	datetime.datetime.today().weekday() == 4
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
データフレームのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
要素がマップの値として含まれているか調べる	element in aDict.values()
行列と同じ大きさの空配列を作る	np.empty_like(aArray)
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
散布図を用いてデータフレームの列を見る	sns.scatterplot(data=df, x='列名', y='列名')
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
オブジェクトのプロパティの値を値に指定する	setattr(obj, プロパティ名, 値)
option: ダークバイオレット色を使う	color = 'darkviolet'
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
両端キューの末尾から要素を取り除く	deq.pop()
耐火レンガ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: グラフの色をプラムに指定する	color = 'plum'
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
２つのカラムとしてグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
year年month月を日付にする	datetime.date(year=year, month=month, day=1)
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: ダークレッド色を用いる	color = 'darkred'
データフレームの指定したカラムの要約統計量	df['列A'].describe()
何回まで再帰ができるかを	sys.getrecursionlimit()
option: ホワイトにグラフの色を設定する	color = 'white'
現在のタイムスタンプ	datetime.datetime.now()
スチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
グラフで使うx軸にラベルを設定する	plt.xlabel('x軸ラベル')
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
日付データのデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
赤い一点鎖線としてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
nの十六進表現	hex(n)
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
文字列内にひとつでも英数字が含まれるかどうか調べる	any(c.isalnum() for c in s)
イエローグリーン色でヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
散布図を下三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v')
オブジェクトはある型のインスタンスか確認する	isinstance(obj, クラス)
リストをタプルに変換する	tuple(aList)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
散布図をタン色として描画する	plt.scatter(データ列x, データ列y, color='tan')
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームから列を二つのみ選択する	df[['列A', '列B']]
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
数列のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ヒストグラムの色をバイオレットにする	plt.hist(データ列, color='violet')
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図をライトグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgray')
selectorsでマスクされた配列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
線グラフの色をシスルに指定する	plt.plot(データ列x, データ列y, color='thistle')
option: ライトグレー色を用いる	color = 'lightgrey'
option: ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
本日が金曜日か	datetime.datetime.today().weekday() == 4
データ列の変化を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
アクア色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
ベクトルを平坦にする	aArray.flatten()
イテラブルの全順列	itertools.permutations(iterable)
文字コードに対応する文字を見る	chr(unicode)
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
配列と配列について散布図を描画し、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
二つの集合は共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
文字列内に大文字が含まれる	any(c.isupper() for c in s)
棒グラフをシーグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='gray')
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
配列のデータ型	aArray.dtype()
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
データフレームを並べる	df.sort_values('キーとなる列')
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
rgbの上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色をハニーデューに設定する	color = 'honeydew'
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図をrgbの大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ブール型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
フィシャー流の尖度を求める	scipy.stats.kurtosis(配列, fisher=True, bias=False)
ファイルパスをBOM付きで書き込みできるように開く]	open(filepath, mode='w', encoding='utf_8_sig')
文字列を改行を用いて区切る	s.splitlines()
クロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
カンマ区切り形式でデータフレームを出力する	df.to_csv('file.csv')
キューに値をプッシュする	deq.append(element)
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
2数の最も大きい値	max(x, y)
リストの最初のn要素を取り除く	aList[n:]
データフレームのあるカラムのタイムゾーンを変更する	df['列A'].tz_convert('Asia/Tokyo')
データシリーズが何月か調べる	ds.dt.month
散布図の△印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
多重集合	collections.Counter()
データフレームの指定したカラムはどの程度、分散しているか見る	df['列A'].var()
データフレームのある列をNaNも加えてダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
ヒストグラムをインディゴ色を用いて描画する	plt.hist(データ列, color='indigo')
散布図をライトスチールブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: グラフの色をシルバーに設定する	color = 'silver'
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
スラッシュで区切って二つの変数を表示する	print(value, value2, sep='/')
データフレームをある列の値でグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
ダークバイオレットにヒストグラムの色をする	plt.hist(データ列, color='darkviolet')
青い破線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
配列をn個にビニングする	pd.cut(aArray, n)
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
逆双曲線余弦	math.acosh(x)
option: SJISを使う	encoding = 'shift_jis'
補助目盛を有効にする	plt.minorticks_on()
実数の双曲線余弦の逆数を求める	math.acosh(x)
データフレームのあるカラムは何月か見る	df['列A'].dt.month
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
線グラフの色を真紅にする	plt.plot(データ列x, データ列y, color='crimson')
データフレームの選択した列の中に含まれる文字列の合計を求める	df[['列A', '列B']].isin([value]).sum()
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: グラフの色をシスルにセットする	color = 'thistle'
文字列がリストの要素でない	element not in aList
散布図を赤い▼マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='r')
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
配列の次元を変形する	aArray.reshape(行数, 列数)
ダークターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='darkturquoise')
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
y軸の目盛を表示しない	plt.yticks([])
データフレームを表示するときヘッダー行を左寄せに減らす	pd.set_option('colheader_justify', 'left')
オブジェクトはリストかタプル	isinstance(obj, (list)
パターンによって文字列を置き換える	re.sub(pattern, newsub, s)
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: フォレストグリーン色を使う	color = 'forestgreen'
文字列を文字リストに変換する	list(s)
二つの文字列は同じか確認する	s == s2
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
配列の列ごとの合計値	np.sum(aArray, axis=0)
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
データ列とリストの散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
点線でリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
浮動小数点数にする	float(x)
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
日付データが日曜日かどうか調べる	aDate.weekday() == 6
黒い▲マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
指定したカラムがどの程度、正規分布から歪んでいるか確認する	df['列A'].kurt()
パレットトルコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
データフレームからn行、ランダムサンプリングする	df.sample(n)
赤い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
数値を因数分解する	sympy.factor(e)
データフレームのn番目の行を取り出す	df.loc[n]
データシリーズがどの程度、正規分布から歪んでいるか見る	ds.kurt()
カラムが正規分布に従うかどうか調べる	scipy.stats.shapiro(df['列A'])
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
ヒストグラムの色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
ゲインズボロ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
欠損値が存在する行を破壊的にドロップする	df.dropna(inplace=True)
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームの一部のカラムにおいてどの値が最も出現するか見る	df[['列A', '列B']].mode()
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
指定した列のカテゴリで集計しそれぞれの平均値を計算する	df.groupby('列A').mean()
散布図をrgbの四角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
書き込みできるようにファイルを開く]	open(filepath, mode='w')
ベクトルの差	aArray - aArray2
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
列の中にいくつNaNがあるか数える	df['列A'].isna().sum()
折れ線グラフの菱形マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
グラフで使える色名の一覧を知る	matplotlib.colors.cnames
ライトブルー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
縦棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
クリムゾン色としてヒストグラムを描画する	plt.hist(データ列, color='crimson')
option: グラフの色をグレーに設定する	color = 'gray'
データフレームの指定した列の欠損値を直前の値に増やす	df['列A'].fillna(method='ffill')
プロットの横軸を対数に変更する	plt.xscale('log')
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
文字列を右トリムする	s.rstrip()
表をグループ化し、ある列に対し個数を求める	df.groupby('列A')['列B'].count()
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
ブースティングとしてクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
ヒストグラムの色をグレーにセットする	plt.hist(データ列, color='gray')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
データフレームのあるカラムの上位25％	df['列A'].quantile(0.25)
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
日付時刻データはタイムスタンプデータと同時か調べる	aDatetime == aDatetime2
最大長を指定して、両端キューを生成する	collections.deque(maxlen=n)
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
データフレームの未入力値をその最小値で埋める	df.fillna(df.min())
折れ線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
文字列の接尾辞が部分文字列か確認する	s.endswith(sub)
要素は集合の要素	element in aSet
リストの文字列が最初に見つかる場所	aList.index(element)
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
日付データは何曜日か知る	aDate.weekday()
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
配列の標準偏差	np.std(aArray)
右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
横棒グラフをライトブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightblue')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
線グラフをオレンジレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orangered')
柱状図を上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
option: 先頭の行をヘッダに指定する	header = 0
ブースティングを用いて回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
横棒グラフをカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='khaki')
線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
文字列を最後の部分文字列で分けたときの後半の文字列を使う	s.rpartition(sub)[-1]
データフレームのカラムのユニークな要素数を見る	df[col].nunique()
ファイルパスのディレクトリ名を使う	os.path.dirname(filepath)
グラフで使える色の一覧	matplotlib.colors.cnames
ファイルをSJISとして追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
マップの項目名の一覧	aDict.keys()
浮動小数点数以下の最大の整数	math.floor(x)
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
正規表現でreplにデータシリーズの値をまとめて置き換える	ds.replace(pattern, repl, regex=True)
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
赤い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
逆正弦を求める	math.asin(x)
複数の列からグループ化し合計を算出する	df.groupby(['列A', '列B'], as_index=False).sum()
データフレームを関数の値によってグループ化する	df.groupby(関数)
ダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
UNIX時間のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
色付きの実線として数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ラベンダーにヒストグラムの色を変更する	plt.hist(データ列, color='lavender')
nとn2の積	n * n2
英字を全部使う	string.ascii_letters
データシリーズの欠損値を最小値で置換する	ds.fillna(ds.min())
イテラブルとリストの散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
シーケンスを文字列リストに変換してカンマで連結する	','.join(map(str, iterable))
rgbのポイントマーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データシリーズの中にいくつ未入力値が含まれるか調べる	ds.isna().sum()
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームをある列のカテゴリでグループ化して各グループごとの件数を知る	df.groupby('列A').size()
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームの選択したカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
データフレームの指定した列の中に文字列があるか調べる	df['列A'].isin([value])
線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
浮動小数点数の常用対数	math.log10(x)
リストの先頭のn要素を除く	aList[n:]
文字列を部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
option: 四角印を使う	marker = 's'
ヒストグラムの色をライトスチールブルーに変更する	plt.hist(データ列, color='lightsteelblue')
タイムスタンプデータからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
データフレームの列を型にする	df[col] = df[col].astype(ty)
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームのカラム間の相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
折れ線グラフの菱形マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
カテゴリで色付けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
標準入力から1文字だけ読む	sys.stdin.read(1)
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
実数を十六進表記の文字列に変換する	x.hex()
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
option: アクアマリンを用いる	color = 'aquamarine'
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
リストを境界値として配列を分割する	pd.cut(aArray, aList)
縦棒グラフをインディアンレッド色を使って描画する	plt.bar(データ列x, データ列y, color='indianred')
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
option: フォントの色を青に設定する	color = 'blue'
数値をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
データシリーズのNaNを平均値に増やす	ds.fillna(ds.mean())
指定したカラムを万の位で四捨五入する	df['列A'].round(-4)
option: 四角マーカーを描画する	marker = 's'
標準エラーを得る	sys.stderr
option: マーカーをバツに設定する	marker = 'x'
nとn2の和を算出する	n + n2
リストを等量で分割数nでビン分割する	pd.qcut(aList, n)
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
シーケンスを累積する	itertools.accumulate(iterable, operator.mul)
アクア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
文字列を後ろから部分文字列で区切る	s.rsplit(sub)
リストの末尾を使う	aList[-1]
赤い丸マーカーを配列とイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
文字列はタイトル大文字小文字	s.istitle()
実数の逆余弦	math.acos(x)
ペルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
実数の逆正接	math.atan(x)
散布図のクロス印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
環境はWindowsかテストする	sys.platform.startswith('win32')
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
リストを展開してプリントする	print(*aList)
データフレームの中のNaNの合計を数える	df.isna().sum()
バイトオーダを確認する	sys.byteorder
棒グラフをオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='orange')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
第二四分位数でカラムの欠損値を埋める	df['列A'].fillna(df['列A'].median())
当てはまりの良さを算出する	sklearn.metrics.r2_score(データ列, データ列2)
グラフの背景色を白くする	sns.set(style='whitegrid')
option: 値を置き換える	inplace = True
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
nが5で割り切れるか	n % 5 == 0
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
配列の尖度を算出する	scipy.stats.kurtosis(配列, bias=False)
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
ダーク・スラテグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
タイムスタンプデータの日数を求める	aDatetime.day
option: オーキッドを使う	color = 'orchid'
最小値でデータフレームの一部のカラムのNaNを置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
ある列の値がx以上、y以下のデータを取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
現在の日数を使う	datetime.datetime.today().day
実数のルートを計算する	math.sqrt(x)
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
カウンタのキーと出現回数を列挙する	aCounter.items()
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
二つのオブジェクトは同一	obj is obj2
xが一桁の正の数かどうか	0 <= x <= 9
二次元タプルをflattenする	sum(aTuple)
シーケンスを両端キューにする	collections.deque(iterable)
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図に赤いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームをある列によってまとめたグループ	df.groupby('列A')
文字列の中でASCII限定としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
データ列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
二つの数値を改行で区切ってプリントする	print(value, value2, sep='\n')
グラフの用途を画面に指定する	sns.set(context='notebook')
nとn2の和を計算する	n + n2
2数の最大値を求める	max(x, y)
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームのある列の値がx以上のデータを抽出する	df[df['列A'] >= x]
プロットにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
二つのデータフレームを縦向きにつなぐ	pd.concat([df, df2], axis=0)
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
シャルトリューズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
日付データの年	aDate.year
文字列がリストの要素	element in aList
文字列の無限イテラブル	itertools.repeat(element)
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
集合が空か	len(aSet) == 0
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームの選択した列を1000の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
データフレームの中の列をn個にビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
範囲指定をしたカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
正規表現モジュールをインポートする	import re
散布図をパレットトルコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
データフレームの値を正規表現で一度に置き換える	df.replace(pattern, repl, regex=True)
ニューラルネットでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ヒストグラムの色をミディアムオーキッドに変更する	plt.hist(データ列, color='mediumorchid')
データフレームの指定した列の標準偏差	df['列A'].std()
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
オブジェクトは数値	isinstance(obj, (int,float))
プログラムの実行を強制的に終了する	sys.exit()
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
ダーク・スラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
リストの要素数	len(aList)
散布図の▽印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
文字列を最後の部分文字列で二つに区切って先頭の文字列を使う	s.rpartition(sub)[0]
ライムにヒストグラムの色を指定する	plt.hist(データ列, color='lime')
option: 星印を使用する	marker = '*'
option: パープル色を使う	color = 'purple'
大文字を小文字に変換する	s.lower()
大文字が文字列内に含まれる	any(c.isupper() for c in s)
両端キューをdequeue	deq.popleft()
指定したカラムの欠損値を直前の値に変更する	df['列A'].fillna(method='ffill')
イテラブルの各要素に対してpredicateFuncの適用が真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
青い点線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
指定したカラムの欠損値を平均に指定する	df['列A'].fillna(df['列A'].mean())
現在の時間を使う	datetime.date.today().hour
行列のデータ型	aArray.dtype()
option: フォントの色をフローラルホワイトに設定する	color = 'floralwhite'
文字列は全て印字できるか調べる	s.isprintable()
変数の出力を改行せずに行う	print(value, end='')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
データシリーズは何曜日か見る	ds.dt.weekday_name
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
nがn2以下またはn3以上	n <= n2 or n >= n3
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データ列を全てdatetime64型に変換する	pd.to_datetime(ds)
横棒グラフをシエナ色を使って描画する	plt.barh(データ列x, データ列y, color='sienna')
新しいリッジ回帰モデルを作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
散布図を黒い星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
浮動小数点数に実数を乗算する	x * y
値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
オブジェクトが無限に繰り返す列	itertools.repeat(element)
リストを出力する	print(value)
実数のアークサインを計算する	math.asin(x)
データフレームからn行をランダムに抽出する	df.sample(n)
点線にラインをする	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームを100の位で丸めて整数型にする	df.round(-2).astype(int)
数を実数で整数除算する	x // y
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
データ列を等量でビン数nを使ってビン分割する	pd.qcut(ds, n)
線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
本日が何日か知る	datetime.datetime.today().day
文字列中にひとつでも非英数字が含まれるか	any(not c.isalnum() for c in s)
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
eの浮動小数点数乗を求める	math.exp(x)
散布図を赤いポイントマーカーとして描く	plt.plot(データ列x, データ列y, marker='.', c='r')
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
option: グラフの色をローングリーンに指定する	color = 'lawngreen'
option: パープルを使う	color = 'purple'
ふたつのカラムでグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
option: グラフの色をイエローグリーンにする	color = 'yellowgreen'
実数の三乗を算出する	x ** 3
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
整数nをn2分の1にする	n //= n2
文字列が全て大文字か調べる	s.isupper()
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
実数のタンジェントの逆数を計算する	math.atan(x)
option: 表示を半透明にする	alpha = 0.5
文字列内にひとつでも英字がある	any(c.isalpha() for c in s)
分類モデルを学習する	model.fit(説明変数, 目的変数)
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
赤い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
データフレームのある列の値がxより小さいデータを抽出する	df[df['列A'] < x]
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
ロージーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='rosybrown')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
option: 色を淡い茶色に設定する	color = 'tan'
単回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
あるカラムの文字列が部分文字列で始まらないデータを取り出す	df[~ df['列A'].str.startswith(部分文字列)]
オブジェクトが関数か	callable(obj)
ふたつの集合の和集合を求める	aSet.union(aSet2)
データフレームの一部のカラムが正規分布からどれだけ歪んでいるか調べる	df[['列A', '列B']].kurt()
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
ある列にリストの値が含まれる行を取り出す	df[df['列A'].isin(リスト)]
日付データは何年か知る	aDate.year
リストと数列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
２次元リストの転置行列	[list(x) for x in list(zip(*aList))]
▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
データフレームをソートして新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
教師データとしてモデルを学習する	model.fit(説明変数, 目的変数)
正規表現でreplに一度にデータフレームの選択した列の値を置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
リストとリストについて散布図を描き、丸マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
変数を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: ケースを無視する	flag = re.IGNORECASE
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
TSVを読み込む	pd.read_csv('file.tsv', sep='\t')
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データシリーズの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
文字列が漢字か判定する	('\u4E00' <= ch <= '\u9FD0')
リストから文字列を取り除く	aList.remove(element)
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
辞書を消去する	aDict.clear()
散布図をリネン色を使って描画する	plt.scatter(データ列x, データ列y, color='linen')
option: ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
nまでの奇整数列を作る	list(range(1, n, 2))
組の末尾の要素	aTuple[-1]
辞書の項目名を要素に変更する	aDict[key] = element
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
2を底とする浮動小数点数の対数を算出する	math.log2(x)
リストから文字列と等しい最初の要素を捨てる	aList.remove(element)
散布図を大バツマーカーを使って描画する	plt.scatter(データ列x, データ列y, marker='X')
グリーン色としてヒストグラムを描画する	plt.hist(データ列, color='green')
デックの先頭に値を追加する	deq.appendleft(element)
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
option: ダークスレートブルーを使う	color = 'darkslateblue'
散布図に赤い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの中に存在すると文字列の数を数える	df.isin([value, value2]).sum()
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
ブランチドアーモンド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームの列名一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
カテゴリで色分けして、データフレームの全列の相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
表データを関数ごとにグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
ファイルを文字列の示すエンコーディングで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
データフレームの選択したカラムのSkewness	df[['列A', '列B']].skew()
集合から任意の要素を取り除く	aSet.pop()
データフレームのあるカラムを取り除き、みる	df.drop('列A', axis=1)
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
計数器をイテラブルから生成する	collections.Counter(iterable)
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
データ列とリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
浮動小数点数の小数点を丸める	round(x)
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
横棒グラフをパウダーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='powderblue')
ヒストグラムを真紅色として描画する	plt.hist(データ列, color='crimson')
option: ポイント印を使う	marker = '.'
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
配列のSkewnessを計算する	scipy.stats.skew(配列, bias=False)
データフレームの未入力値を直後の値に指定する	df.fillna(method='bfill')
自然数個のものからk個取り出した場合の並べ方を算出する	math.perm(n, k)
整数を小数点以下第一位で四捨五入する	round(x, 1)
ガンマ関数の値を算出する	math.gamma(x)
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
option: ライトスレイグレーに色を設定する	color = 'lightslategrey'
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
データフレームの指定したカラムの欠損値を平均で埋める	df['列A'].fillna(df['列A'].mean())
インタプリタの実行ファイルの絶対パス	sys.executable
にバイオリン図でデータフレームを描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ナバホホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: ライトスチールブルーを使う	color = 'lightsteelblue'
データフレームのある列の値がxより大きい行を抽出する	df[df['列A'] > x]
オブジェクトがクラス	isinstance(obj, クラス)
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
折れ線グラフの大バツ印の線幅を指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
option: マーカーを右三角に変える	marker = '>'
rgbのダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
実数を整数に変換する	int(x)
赤い▼マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
パープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームを散布図でグラフ化してカテゴリごとに色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データシリーズのNaNをxに設定する	ds.fillna(x)
シーケンスを集合に変換する	set(iterable)
両端キューをクリアする	deq.clear()
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
散布図を黒い四角マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
データフレームのあるカラムの第三四分位数	df['列A'].quantile(0.75)
bとn2から成るペア	(n, n2)
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
option: アクア色を使用する	color = 'aqua'
三つ並べてリストを柱状グラフにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列中の部分文字列を別の文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
列からユニークな値を抽出しリスト化する	ds.unique().tolist()
ダークシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームの中に文字列と文字列がいくつあるかカウントする	df.isin([value, value2]).sum()
▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
自然数の階乗	math.factorial(n)
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
項目名がマッピングに存在しない場合、要素を追加する	aDict.setdefault(key, element)
集合から値を取り除く	aSet.remove(element)
シスル色を用いてヒストグラムを描画する	plt.hist(データ列, color='thistle')
option: どの行もヘッダにしない	header = None
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
ケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
nをn2で割った値の切り上げ	(n + n2 - 1) // n2
三つ並べて度数分布図を描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
タプルをチェーンマップに変換する	collections.ChainMap(aDict)
パラメータがマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
破壊的に複数の列によってデータフレームを昇順に並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ケンドール相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
青紫色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
２つのデータフレームを横向きにつなぐ	pd.concat([df, df2], axis=1)
両端キューの順序をn個分回転させる	deq.rotate(n)
配列をビン数nとしてビニングする	pd.cut(aArray, n)
ヒストグラムをミントクリーム色を使って描画する	plt.hist(データ列, color='mintcream')
リストをビン分割する	pd.cut(aList, aList)
線グラフの色をダークカーキにする	plt.plot(データ列x, データ列y, color='darkkhaki')
option: バリーウッドにフォントの色を変更する	color = 'burlywood'
自然数の階乗を計算する	math.factorial(n)
ファイルをオープンする]	open(filepath)
列を文字列に変換して結合する	''.join(map(str, iterable))
リストとリストの散布図に黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
グラフを暗くする	sns.set(pallete='dark')
option: ブール型を使う	dtype = np.int32
散布図の左三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
列を全てタイムスタンプ型に変換する	pd.to_datetime(df['列A'])
クラス分類のPPVを算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
線グラフの色をシーグリーンにセットする	plt.plot(データ列x, データ列y, color='seagreen')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
リスト内の要素が全て真か確認する	all(aList)
追加できるようにBOM付きを用いて既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
文字列の両端から部分文字列を取り除く	s.strip(sub)
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
カウンタの文字列を列挙する	aCounter.keys()
自然対数の底	math.e
データフレームの欠損値がある部分に	df.style.highlight_null()
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
データシリーズの第二四分位数	ds.median()
散布図をアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
横棒グラフをダークスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
文字列をインターンする	sys.intern(s)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
データフレームを関数の値で集約して列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データフレームの選択したカラムの中にある文字列と日付データの個数を数える	df[['列A', '列B']].isin([value, value2]).sum()
両端キューが空でないか調べる	len(deq) != 0
表データをある列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
リストをビン数nでビニングする	pd.cut(aList, n)
ブルーバイオレットにヒストグラムの色をセットする	plt.hist(データ列, color='blueviolet')
option: オレンジレッドを使用する	color = 'orangered'
要素を双方向キューの最後から取り除く	deq.pop()
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
赤い一点鎖線でイテラブルの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
棒グラフをスノー色を用いて描画する	plt.bar(データ列x, データ列y, color='snow')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
現在のモジュール	sys.modules[__name__]
ダークオリーブグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
点線を用いて折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームの選択したカラムのKurtosis	df[['列A', '列B']].kurt()
データフレームの一部の列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
データフレームの指定の列に重複があれば除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
option: バッファのサイズを設定する	buffering = 4096
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
文字列中の部分文字列を別の文字列に置換する	s.replace(sub, newsub)
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
カウンタのKトップを列挙する	aCounter.most_common(k)
データフレームの選択したカラムの欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線グラフの下三角印を黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
散布図の下三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
既存の行列を元に全要素が1のベクトル	np.ones_like(aArray)
データフレームの先頭5行	df.head(5)
タプルの要素数を知る	len(aTuple)
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
パターンに文字列全体をマッチさせる	re.fullmatch(pattern, s)
列を累加する	itertools.accumulate(iterable)
データフレームとしてJSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
カウンタ間で積集合演算する	aCounter & aCounter2
キーがマッピング上で未定義か調べる	key not in aDict
実数の双曲線正弦の逆数を求める	math.asinh(x)
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
実数を十の位で丸める	round(x, -1)
オブジェクトは文字列型のインスタンスか	isinstance(obj, str)
Excelファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
option: フォントの色をサンディーブラウンに変更する	color = 'sandybrown'
データシリーズの未入力値を直前の値に設定する	ds.fillna(method='ffill')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
コロンで文字列を区切って、列挙する	s.split(':')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
日付データにn日分、足す	aDate + datetime.timedelta(days=n)
ある列の文字列が部分文字列で始まる行を抽出する	df[df['列A'].str.startswith(部分文字列)]
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームの指定したカラムの中に日付データと文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
エクセルファイルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
コーラル色を使ってヒストグラムを描画する	plt.hist(データ列, color='coral')
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
イテラブルに配列を続ける	itertools.chain(iterable, iterable2)
ダークグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
指定した列の値で集計し個数を算出する	df.groupby('列A').count()
ベクトルは何次元か調べる	aArray.ndim
タイムスタンプデータの秒数	aDatetime.second
データフレームのカラムの歪み	scipy.stats.skew(df['列A'], bias=False)
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
空のガウス過程分類モデルを準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
配列をn個にビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
線グラフの色をダークスラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategray')
真紅色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
変数名を項目名として、マッピング	dict(name=element)
線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
イテラブルとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
プログラムの実行をここで停止する	sys.exit()
データ列と数列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
散布図を黒い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列が全て空白文字	s.isspace()
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ヒストグラムをサドルブラウン色を用いて描画する	plt.hist(データ列, color='saddlebrown')
レベッカパープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームに重複があるか見る	df.duplicated()
折れ線グラフに▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
ユニークな値を要素とする配列を見る	np.unique(aArray)
正則化付き回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
nを8進数リテラルに変換する	oct(n)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: フォントの色をサンディーブラウンに設定する	color = 'sandybrown'
option: オリーブにフォントの色を変更する	color = 'olive'
nがn2か	n == n2
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
リストに要素を追加する	aList.append(element)
ゼロ埋めした配列を作る	np.zeros(要素数)
乱数を計算する	random.random()
データフレームの選択したカラムのNaNを直前の値にセットする	df[['列A', '列B']].fillna(method='ffill')
縦棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
辞書に項目名がある	key not in aDict
縦向きに２つのデータフレームをつなぐ	pd.concat([df, df2], axis=0)
あるカラムを1000の位で四捨五入する	df['列A'].round(-3)
データフレームをソートして上位を取り出す	df.sort_values('キーとなる列').head(n)
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
二つのベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
イテラブルから集合を求める	set(iterable)
データフレームの先頭10行	df.head(10)
プロットのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
nが1、もしくは2もしくは3に等しいか	n == 1 or n == 2 or n == 3
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
その平均でデータフレームの欠損値を補う	df.fillna(df.mean())
CSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
散布図の菱形印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
表の末尾100行を取り出す	df.tail(100)
カウンタを高頻出方から列挙する	aCounter.most_common()
nがn2よりも大きいかどうか	n > n2
ある列の値がx以上、y未満のデータを抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
数値をアンダーライン付きにする	f'\033[4m{value}\033[0m'
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
カウンタをイテラブルとして更新する	aCounter.update(iterable)
整数を複素数に変換する	complex(x)
折れ線グラフの色をオリベドラブに変更する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームの行列を入れ替える	df.T
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: リネンにフォントの色を変更する	color = 'linen'
貝殻色としてヒストグラムを描画する	plt.hist(データ列, color='seashell')
横棒グラフをダークスラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ブランチドアーモンドにヒストグラムの色をセットする	plt.hist(データ列, color='blanchedalmond')
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
データフレームの中の列をビン数nとしてビン分割する	pd.cut(df[col], n)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
ロバストな単回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
表データのあるカラムのタイムゾーンを東京に設定する	df['列A'].tz_convert('Asia/Tokyo')
三自然数の最大公約数	math.gcd(n, n2, n3)
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
ヒストグラムの色をダークバイオレットにする	plt.hist(データ列, color='darkviolet')
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
変数名をキーとして辞書を生成する	dict(name=element)
データフレームの指定したカラムの平均を求める	df['列A'].mean()
グラフの用途をスライドに指定する	sns.set(context='talk')
option: マーカーを▼に変更する	marker = 'v'
データフレームの欠損値を最小値で置換する	df.fillna(df.min())
option: グラフの色をミディアムスレートブルーにする	color = 'mediumslateblue'
xでデータフレームの未入力値を補完する	df.fillna(x)
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームのカラムの中にいくつ欠損値が存在するかカウントする	df['列A'].isna().sum()
グラフを画面用に設定する	sns.set(context='notebook')
指定したカラムの分散	df['列A'].var()
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
丸印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
nを切り捨てながらn2分の１にする	n //= n2
option: エラーがあるとき例外を発生させる	errors = 'strict'
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
散布図をミディアムターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
浮動小数点数の二進対数を求める	math.log2(x)
散布図のバツ印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ホットピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
分類モデルの正確さを算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
文字列がタプルの要素か調べる	element in aTuple
文字列が空白文字からなる	s.isspace()
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームのカラム名を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
リストをシアンでプリントする	print(f'\033[36m{value}\033[0m')
データ列の移り変わりを折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
リスト内の要素が少なくともひとつ真かどうか	any(aList)
タプルをひとつ置きに得る	aTuple[::2]
セットを空にする	aSet.clear()
タプルの中の最小値	min(aTuple)
白色で実行結果をプリントする	print(f'\033[37m{value}\033[0m')
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
三自然数の最小公倍数	math.lcm(n, n2, n3)
折れ線グラフの色をラベンダーブラッシュにする	plt.plot(データ列x, データ列y, color='lavenderblush')
データシリーズの平均値	ds.mean()
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
オブジェクトはリストか確認する	isinstance(obj, list)
折れ線グラフの印を上三角にする	plt.plot(データ列x, データ列y, marker='^')
大文字・小文字を無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
実数の複素数	complex(x)
データフレームを全て小数点以下n桁で四捨五入する	df.round(n)
データフレームのカラムの中にと日付データがいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
指定したカラムの欠損値をそのモードで埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
黒い四角マーカーをリストと数列の散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データシリーズの欠損値を平均値で補完する	ds.fillna(ds.mean())
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ファイルパスから拡張子付きのファイル名を求める	os.path.basename(filepath)
散布図を黒いクロスマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
nプラスn2を計算する	n + n2
自然数の最大公約数	math.gcd(n, n2)
散布図に菱形マーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
文字列をバイト列にする	s.encode(encoding='utf-8', errors='strict')
option: マーカーを三角に変更する	marker = '^'
本日の日付時刻を使う	datetime.datetime.today()
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないか確認する	s.find(sub, start, end) == -1
双方向キューが空であるか調べる	len(deq) == 0
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
nがn2以下または、n3以上	n <= n2 or n >= n3
ヒストグラムをオーキッド色を使って描画する	plt.hist(データ列, color='orchid')
日付データが木曜日か調べる	aDate.weekday() == 3
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
両端キューのデータをインプレースに反転する	deq.reverse()
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データ列と数列の散布図を描いて、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
データフレームの指定した列の空文字をドロップする	df['列A'].replace('', np.nan).dropna()
ある列をキーにして小さい順にデータフレームをソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
データフレームのカラムの最頻値を求める	mode, count = scipy.stats.mode(df['列A'])
データフレームの選択したカラムの欠損値をxにする	df[['列A', '列B']].fillna(x)
リストをビン数nでビンニングする	pd.cut(aList, n)
作画の縦横の比率を等しくする	plt.axis('equals')
マッピングからカウンタを作る	collections.Counter(aDict)
文字列を部分文字列で分けたときの先頭の文字列を求める	s.partition(sub)[0]
データフレームの選択したカラムの欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
データフレームの指定したカラムの中に存在する文字列の合計を調べる	df['列A'].isin([value]).sum()
双方向キューをdequeue	deq.popleft()
日付時刻データからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
nの無限な数列	itertools.repeat(n)
option: オレンジレッド色を使う	color = 'orangered'
option: フォントの色をダークグリーンに変更する	color = 'darkgreen'
項目名が辞書に存在しないとき要素を追加する	aDict.setdefault(key, element)
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
色付きの一点鎖線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
辞書をソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
option: 大バツ印を使う	marker = 'X'
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
二つの変数をそれぞれ定義する	x, y = i, j
データシリーズの中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
タプルの末尾	aTuple[-1]
ヒストグラムを実線を用いて描画する	plt.hist(データ列, linestyle='solid')
折れ線グラフのクロスマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ダークオレンジ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
半透明の破線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: フォントの色をペルーに設定する	color = 'peru'
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームのカラムの標準誤差を求める	scipy.stats.sem(df['列A'])
nの三乗	n ** 3
折れ線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
数値を簡略化する	sympy.sympify(e)
データフレームのカラムの調和平均	scipy.stats.hmean(df['列A'])
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
折れ線グラフの菱形印の色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
seabornのデフォルト見た目を適用する	sns.set()
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
ライトブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データシリーズを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
マッピングのの一覧を得る	aDict.values()
文字列リストを結合してひとつの文字列にする	''.join(aStringList)
文字列にリストを変換して、'改行でつなげる	'\n'.join(map(str, iterable))
ヒストグラムの色をロイヤルブルーにセットする	plt.hist(データ列, color='royalblue')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
空のロッソ回帰モデルを作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
変数について数式の微分を行う	sympy.diff(e, z)
黒い下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの下三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
スノー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームをソートして、上位を取り出す	df.sort_values('キーとなる列').head(n)
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
nわるn2	n / n2
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
散布図に赤い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
最大長nの双方向キューをシーケンスから作る	collections.deque(iterable, maxlen=n)
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
ライトスカイブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
縦棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
option: シャルトリューズ色を使う	color = 'chartreuse'
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
xの小数点以下'3'桁までを表示する	print(':.3f'.format(x))
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
散布図をパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='purple')
タプルの最後	aTuple[-1]
プラム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
グラフの描画で暗くカラーパレットを使用する	sns.set(pallete='dark')
データフレームの選択したカラムの歪度を算出する	df[['列A', '列B']].kurt()
配列を2次元1列に変形する	aArray.reshape(-1, 1)
相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
散布図の印を黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
折れ線グラフの左三角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
option: ミディアムブルー色を使用する	color = 'mediumblue'
プログラムの実行をここで終了する	sys.exit()
ファイルをSJISとして書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
ヒストグラムの色をダークグリーンにセットする	plt.hist(データ列, color='darkgreen')
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
オプションで標準エラーに出力する	file = sys.stderr
データフレームの選択したカラムの欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
データフレームの指定のカラムに重複があれば削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
文字列をコロンによって区切って列挙する	s.split(':')
折れ線グラフをミディアムシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフの色をダークオリーブグリーンにする	plt.plot(データ列x, データ列y, color='darkolivegreen')
ファイルを追加モードでオープンする]	open(filepath, mode='a')
データシリーズが何月か見る	ds.dt.month
文字コードに対応する文字を求める	chr(unicode)
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
データフレームのあるカラムの値がxに等しくないデータを抽出する	df[df['列A'] != x]
コマンドの第２引数を知る	sys.argv[1]
赤い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
オプションで、標準エラーに出力する	file = sys.stderr
実数の逆双曲線正接を算出する	math.atanh(x)
リスト中の文字列が最初に見つかるインデックス	aList.index(element)
2つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
L1ノルムでデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
配列とリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをダークオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkorange')
表データのカラム名一覧	df.columns
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
配列をビン数nとして分割する	pd.cut(aArray, n)
カテゴリデータをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
オブジェクトが名前付きタプルのインスタンスか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
浮動小数点数が正か調べる	x > 0
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
文字列としてシーケンスを連結する	''.join(map(str, iterable))
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
グラフに補足を加える	plt.legend(['凡例A', '凡例B'])
折れ線グラフの色をプラムにセットする	plt.plot(データ列x, データ列y, color='plum')
マッピングの値の一覧	aDict.values()
配列の行ごとの平均値	np.mean(aArray, axis=1)
デックをdequeue	deq.popleft()
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームをある列の値によってグループ化する	df.groupby('列A')
エポック秒の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
その最頻値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
列を出現回数してカウンタを更新する	aCounter.update(iterable)
文字列の右側からタブを取り除く	s.rstrip('\t')
散布図の右三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの指定したカラムの四分位点など	df['列A'].describe()
二つの文字列は同じか調べる	s == s2
改行で文字列を区切り、文字列リストに変換する	s.splitlines()
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
平均と標準偏差から疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
データフレームのあるカラムが何月か見る	df['列A'].dt.month
日付データが金曜日か判定する	aDate.weekday() == 4
グラフをポスター用に変更する	sns.set(context='poster')
データフレームの行を抽出する	df[start:end]
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
列を等量でn個に分割する	pd.qcut(ds, n)
データフレームの選択した列の未入力値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
要素が集合のメンバーでない	element not in aSet
データフレームの選択したカラムの未入力値をモードに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
スタックの末尾に数値を追加する	deq.append(element)
二つのリストからマップ	dict(zip(aList, aList2))
実数の逆双曲線正弦を求める	math.asinh(x)
option: 印を丸に変える	marker = 'o'
UNIX時間の列からPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
折れ線グラフの丸印の色を指定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
数値時刻のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
option: データ型としてブール型を使用する	dtype = np.int32
nの二進文字列	bin(n)[2:]
線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
option: ハニーデューにグラフの色を設定する	color = 'honeydew'
プロットの描画で色差別なく色を使用する	sns.set(pallete='colorblind')
最大長nの両端キューを作る	collections.deque(maxlen=n)
文字列中の大文字を小文字に変換する	s.lower()
関数の値ごとにデータフレームをグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
折れ線グラフに菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
データフレームの選択したカラムのNaNをxに設定する	df[['列A', '列B']].fillna(x)
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
横棒グラフをシルバー色として描画する	plt.barh(データ列x, データ列y, color='silver')
マルーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='maroon')
nの八進数表現を求める	oct(n)
データフレームをソートし、、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
option: 色をパールバイオレットレッドに指定する	color = 'palevioletred'
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
カラムの名前を列挙する	df.columns
列の中にある文字列の合計をカウントする	df['列A'].isin([value]).sum()
双方向キューの最後の要素	deq[-1]
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
行列を元にして全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
option: マーカーの色をホワイトにする	markerfacecolor = 'white'
非数	math.nan
データ列のユニークな値の個数	ds.nunique()
リストのn番目からn2番目までの部分	aList[n:n2]
option: ホワイト色を使う	color = 'white'
折れ線グラフを大バツマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームの選択したカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
文字列を新しい文字列によって置き換える	s.replace(sub, newsub)
文字コードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームにおいてどの値が頻出か見る	df.mode()
折れ線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの▼印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ミディアムオーキッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
文字列がキーワードかどうか調べる	keyword.iskeyword(s)
オプションで、標準エラーを使う	file = sys.stderr
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
文字列中の部分文字列を回数を制限して新しい文字列に置き換える	s.replace(sub, newsub, n)
折れ線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
散布図に赤い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
関数の値によってデータフレームをまとめたグループ	df.groupby(関数)
option: ゲインズボロに色をセットする	color = 'gainsboro'
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
散布図の▼マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
グラフで使う横軸にラベルをつける	plt.xlabel('x軸ラベル')
黒い▽印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
要素∉集合	element not in aSet
option: グラフの色をアクアマリンに変更する	color = 'aquamarine'
実行を正常に止める	sys.exit(0)
nのn2乗を算出する	n ** n2
データフレームの中のカラムを等量でn個にビニングする	pd.qcut(df[col], n)
データフレームの指定したカラムを十の位で丸めて、整数にする	df['列A'].round(-1).astype(int)
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
リストのn番目を削除する	del aList[n]
文字列を大文字・小文字を無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームの平均値を求める	df.mean()
option: ミディアムターコイズを使う	color = 'mediumturquoise'
データシリーズの欠損値をメディアンに設定する	ds.fillna(ds.median())
濃いシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
リストとリストについて散布図を描画してマーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をミディアムスプリンググリーンにセットする	plt.hist(データ列, color='mediumspringgreen')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
ある列の値がxに等しく、かつ別のカラムの値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
モードでデータフレームの一部のカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
カラムの歪み	scipy.stats.skew(df['列A'], bias=False)
線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
型のサブクラスか	issubclass(サブクラス, クラス)
文字列の接頭辞は部分文字列	s.startswith(sub)
散布図に赤いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
二数の最大値を求める	max(x, y)
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
オブジェクトはタプル型のインスタンスか	isinstance(obj, tuple)
サポートベクターマシンを用いてクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフを茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
文字列リストにシーケンスを変換して部分文字列を用いて連結する	sub.join(map(str, iterable))
データフレームをCSVファイルにBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
タプルのの一覧	aDict.values()
文字列が平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
option: グラフの色をオリベドラブに指定する	color = 'olivedrab'
オーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
日付時刻データが何曜日か知る	aDatetime.weekday()
データフレームをグループ化しある列に対し合計を求める	df.groupby('列A')['列B'].sum()
キュー中の数値の数を数える	deq.count(element)
データフレームをまとめて整数に四捨五入する	df.round()
両端キューの値をn個分ローテンションする	deq.rotate(n)
ファイルとfilenameを結合する	os.path.join(filepath, filename)
集合のすべての要素が別のセットに含まれる	aSet.issubset(aSet2)
折れ線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
option: マーカーを左三角に指定する	marker = '<'
option: ライトブルーにフォントの色を設定する	color = 'lightblue'
option: グラフの色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
データフレームの数値をまとめて丸める	df.round()
散布図の左三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
辞書をJSON形式で出力ストリームに保存する	json.dump(aDict, fout, ensure_ascii=False)
折れ線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図にクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
指定したカラムの要約統計量を算出する	df['列A'].describe()
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
ラインの線の種類を破線に変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
y座標にラベルを付ける	plt.ylabel('y軸ラベル')
二つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
アイボリー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
行列をフラットにする	aArray.flatten()
散布図に▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
データフレームの未入力値が含まれる箇所に色をつける	df.style.highlight_null()
文字列リストにイテラブルを変換して、タブで一つにする	'\t'.join(map(str, iterable))
正規表現を事前に複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
度数分布図を描画し、合計を1にする	plt.hist(データ列, density=True)
option: グラフの色を紺碧に設定する	color = 'azure'
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
CSVファイルをカラム名なしで読み込む	pd.read_csv('file.csv', header=None)
データシリーズのNaNを中央値にセットする	ds.fillna(ds.median())
変数について数式を積分する	sympy.integrate(e, z)
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
行列の転置行列を算出する	aArray.T
option: 色を半透明にする	alpha = 0.5
データフレームの列の文字列長を列として使う	df[col].str.len()
ふたつの列でグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
赤い▼マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
指定した列で集計しそれぞれの合計を算出する	df.groupby('列A').sum()
option: オリベドラブに色を設定する	color = 'olivedrab'
ディレクトリをモジュールを検索するパスに追加する	sys.path.append(dir)
option: 白色を使う	color = 'white'
アルファベットを全部使う	string.ascii_letters
nxn2の二次元リストを得る	[[0] * n for _ in range(n2)]
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
option: グラフの色をペルーに指定する	color = 'peru'
数式の変数にnを代入する	e.subs(z, n)
棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
新しいヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
文字列の最初の余分な空白やタブを除く	s.lstrip()
データフレームのカラムを千の位で四捨五入する	df['列A'].round(-3)
日付時刻データからn日分、減らす	aDatetime - datetime.timedelta(days=n)
辞書を階層化マップに変換する	collections.ChainMap(aDict)
複数のデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
散布図を淡いピンク色色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightpink')
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
データフレームのヒストグラムを横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名')
最大値でデータフレームの欠損値を補う	df.fillna(df.max())
リストをシャッフルする	random.shuffle(aList)
イテラブルをセットに追加する	aSet.update(iterable)
JSONファイルの入力を辞書にする	json.load(fin)
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
散布図に赤い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
集合からエラーなく値を除く	aSet.discard(element)
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
option: 色のアルファ値を指定する	alpha = 0.5
散布図をダークレッド色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: コロンを分割記号で用いる	sep = ':'
データフレームを2つの列の値によって分類する	df.groupby(['列A', '列B'])
変数について数式の積分を求める	sympy.integrate(e, z)
既存の配列を元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
データシリーズの未入力値を最小値で埋める	ds.fillna(ds.min())
０で全要素を初期化した３２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ハニーデュー色としてヒストグラムを描画する	plt.hist(データ列, color='honeydew')
チップのデータセットからデータフレームをロードする	df = sns.load_dataset('tips')
n2がnより大きく、かつ、n3未満か	n < n2 and n2 < n3
option: グラフの種類を実線にセットする	linestyle = 'solid'
破壊的にある列によって大きい順にデータフレームを並べる	df.sort_values(by='列A', ascending=False, inplace=True)
配列の尖りを使う	scipy.stats.kurtosis(配列, bias=False)
行列の列ごとの最大	np.max(aArray, axis=0)
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
散布図をドジャーブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
nがn2の倍数か	n % n2 == 0
xでデータシリーズのNaNを埋める	ds.fillna(x)
文字列中から正規表現にケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
リストを複数横に並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ファイルをバイナリモードで開き]、fとする	f = open(filepath, mode='rb')
棒グラフをミディアムアクアマリン色を使って描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
タプルを文字列に変換して、空白によってつなげる	' '.join(map(str, iterable))
点線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列の開始位置以降が部分文字列で始まるかテストする	s.startswith(sub, start)
option: ライトグレーを用いる	color = 'lightgray'
２つのリストからマップを作る	dict(zip(aList, aList2))
xを整数に変換する	int(x)
データフレームの欠損値を前の行の値で埋める	df.fillna(method='ffill')
赤い▽マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
文字列をセパレータで区切って、列挙する	s.split(sep)
散布図の星マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データシリーズがどの程度、分散しているか調べる	ds.var()
ダークスレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
パパイヤウィップ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
日付時刻データが水曜日かどうか	aDatetime.weekday() == 2
変数が無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, oo)
方程式として数値を解く	sympy.solve(e)
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
双方向キューの大きさ	len(deq)
実数の2進対数	math.log2(x)
nが無限に続くリストを得る	itertools.repeat(n)
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフの下三角印の色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフの四角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
最大値でデータフレームの欠損値を補完する	df.fillna(df.max())
文字列をコロンで分割して、文字列リストにする	s.split(':')
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
コーンフラワーブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
ミディアムパープルにヒストグラムの色を指定する	plt.hist(データ列, color='mediumpurple')
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
等量でn個にデータフレームの中のカラムをビン分割する	pd.qcut(df[col], n)
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
データシリーズの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
データフレームのふたつのカラムを消し、みる	df.drop(['列A', '列B'], axis=1)
二つの列からグループ化し、平均値を計算する	df.groupby(['列A', '列B'], as_index=False).mean()
データフレームの選択したカラムの尖度	df[['列A', '列B']].skew()
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
部分文字列で文字列を分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
ヒートマップとしてデータフレームの相関行列を描画する	sns.heatmap(df.corr())
追加できるように既存のファイルをSJISで開く]	open(filepath, mode='a', encoding='shift_jis')
データフレームの指定した2つの列を取り出す	df[['列A', '列B']]
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
リストの中の最小値	min(aList)
▽印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
方程式として数式を解く	sympy.solve(e)
ファイルを追加用にオープンして]、fとする	f = open(filepath, mode='a')
文字列を空白で区切って、整数列にする	map(int, s.split())
データフレームの指定した三つの列のみ抽出する	df[['列A', '列B', '列C']]
大文字と小文字を入れ替える	s.swapcase()
文字列内にひとつでも小文字が含まれる	any(c.islower() for c in s)
2つのタプルをネスト化する	collections.ChainMap(aDict, aDict2)
ミッドナイトブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
シーケンスを累加する	itertools.accumulate(iterable)
文字列全体がパターンに大文字・小文字を無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
縦棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームの行の名前を全て付け直す	df.rename(index={x: y})
エクセルファイルファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
横棒グラフを淡いピンク色色として描画する	plt.barh(データ列x, データ列y, color='lightpink')
リストの文字列が最初に見つかるインデックス	aList.index(element)
辞書のキーを要素に設定する	aDict[key] = element
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
ゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
option: 下三角マーカーを使う	marker = 'v'
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
折れ線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
列の重複組み合せ	itertools.combinations_with_replacement(iterable, n)
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
オブジェクトがクラスか調べる	isinstance(obj, クラス)
option: 色をライトスレイグレーに設定する	color = 'lightslategrey'
散布図を星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
散布図でデータフレームの列を可視化する	sns.scatterplot(data=df, x='列名', y='列名')
貝殻色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
散布図のダイアモンド印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
nが1もしくは2か	n == 1 or n == 2
縦棒プロットを描画する	plt.bar(ラベル列, データ列)
目盛線	plt.grid(alpha=0.5)
折れ線グラフを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
データフレームの尖りを算出する	df.skew()
スプリンググリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
option: 書き込みモードを使う	mode = 'w'
実数の小数部	math.modf(x)[0]
option: ゴーストホワイトにグラフの色を設定する	color = 'ghostwhite'
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
正則化付き単回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームをまとめて丸める	df.round()
CSVのn行目を行として読み込む	pd.read_csv('file.csv', index_col=n)
文字列の大文字と小文字を入れ替える	s.swapcase()
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
3整数の最大公約数	math.gcd(n, n2, n3)
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
nがn2よりも大きいか調べる	n > n2
イテラブルとリストの散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
数列を三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ミディアムオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
青い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
アンティークホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
文字をユニコードにする	ord(ch)
データフレームの指定した名前リストの列だけ取り出す	df[columns]
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図のマーカーの大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
データフレームの欠損値を前の行の値に設定する	df.fillna(method='ffill')
黒い四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
x軸の目盛りを非表示にする	plt.xticks([])
線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
イテラブルとイテラブルについて散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
指定したカラムを丸める	df['列A'].round()
散布図の▼印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
日付データが日曜日か調べる	aDate.weekday() == 6
カウンタ同士で交差演算する	aCounter & aCounter2
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
棒プロットの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
▲マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
最初のカテゴリーを除外してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
データフレームのデータ型リストを求める	df.dtypes
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
単位正方行列	np.identity(n)
指定した列だけデータフレームの重複を確認する	df.duplicated(subset='列A')
マゼンタ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
リストの全要素をクリアにする	aList.clear()
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
データフレーム全体を行によってソートする	df.sort_index()
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
文字列がタイトルケースかどうか調べる	s.istitle()
option: マーカーを大バツに指定する	marker = 'X'
モデルの残差を求める	目的変数 - model.predict(説明変数)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	s.find(sub, start, end) == -1
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
データシリーズの中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
キーが辞書上で定義されているか調べる	key in aDict
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
データフレームの中にが存在するか確認する	df.isin([value])
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
option: 色をサーモンに設定する	color = 'salmon'
縦棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
option: 色をゲインズボロに設定する	color = 'gainsboro'
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
リストとイテラブルについて散布図を描画してマーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
上三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^')
カラーマップを用いてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
日付データが日付データより前かどうか調べる	aDate < aDate2
ヒストグラムの色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
標準入力を用いる	sys.stdin
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
データフレームをソートし、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
インデックスとしてCSVのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
スカイブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
配列のトリム分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームを行によって降順でソートする	df.sort_index(ascending=False)
線グラフの線の種類を破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのあるカラムのどの値が頻出か見る	df['列A'].mode()
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='turquoise')
データフレームの指定したカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
ゴールド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームの欠損値を最頻値で補う	df.fillna(df.mode().iloc[0])
実数のアークコサインを計算する	math.acos(x)
リストを等間隔でn個にビンニングする	pd.cut(aList, n)
異なる列をキーとして表データを全結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
CSVファイルのn行目をインデックスとして読む	pd.read_csv('file.csv', index_col=n)
折れ線グラフのダイアモンドマーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
ミディアムブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumblue')
ダークスレートブルーにヒストグラムの色をセットする	plt.hist(データ列, color='darkslateblue')
option: ダークグレー色を使う	color = 'darkgray'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
未入力値がある行をドロップする	df.dropna(inplace=True)
データシリーズを丸めて、整数型にする	ds.round().astype(int)
二つのデータフレームを列名を指定して右結合する	pd.merge(df, df2, on='列A', how='right')
オブジェクトは集合型か調べる	isinstance(obj, set)
空のセット	set()
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
サーモン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
リストと数列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ある列のカテゴリ毎の分散を算出する	df.groupby('列A').var()
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
辞書を計数器に変換する	collections.Counter(aDict)
円プロットの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームのある列を抽出する	df['列A']
実数のn乗の実数剰余	pow(x, n, y)
データフレームの一部のカラムの中のNaNの合計を数える	df[['列A', '列B']].isna().sum()
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームの指定したカラムの75パーセンタイル	df['列A'].quantile(0.75)
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
全要素を初期値で初期化した配列を初期化する	np.full(要素数, 初期値, dtype=np.int)
線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
リストの最後から要素をポップする	aList.pop()
データフレームをグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
option: グラフを点線に指定する	linestyle = 'dotted'
xの印字可能な文字列	ascii(x)
データフレームの二つの列をドロップし、みる	df.drop(['列A', '列B'], axis=1)
データシリーズの欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
option: スプリンググリーン色を用いる	color = 'springgreen'
nまでのスライス	slice(n)
データフレームの一部の列を千の位で丸める	df[['列A', '列B']].round(-3)
配列と配列についての散布図に菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D')
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
アクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
文字列の示すエンコーディングとしてファイルパスを開く]	open(filepath, encoding=s)
0からnまでの整数列	list(range(n+1))
option: マーカーの線幅を設定する	markeredgewidth = 2.5
辞書の項目を列挙する	aDict.values()
ファイル全体を行単位で分割して読み込む	f.readlines()
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
多次元尺度構成法としてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ふたつの列を組み合わせてグループ化し、標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
2つのデータフレームを異なる列をキーにして結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
ファイルをバイナリモードを使ってオープンする]	open(filepath, mode='rb')
タプルの要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
青緑色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームをグループ化し、それぞれの最小値を求める	df.groupby('列A').min()
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(df['列A'])
線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
カラムのエポック秒をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
セットをタプルにする	tuple(aSet)
ピーチパフ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームの中に含まれる日付データの数を求める	df.isin([value]).sum()
option: フローラルホワイトにフォントの色を指定する	color = 'floralwhite'
ヒストグラムをダークスレートブルー色を用いて描画する	plt.hist(データ列, color='darkslateblue')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
数列と数列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
データフレームをグループ化し、それぞれの平均値を計算する	df.groupby('列A').mean()
データフレームの指定したカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
全ての８進数字	string.octdigits
棒グラフをシアン色を使って描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームを関数の値でまとめたグループ	df.groupby(関数)
ヒストグラムをハニーデュー色を使って描画する	plt.hist(データ列, color='honeydew')
データフレームのある列の未入力値を後の値で埋める	df['列A'].fillna(method='bfill')
option: スカイブルーを用いる	color = 'skyblue'
リストとリストについて散布図を描画してマーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
英字の文字列	string.ascii_letters
データフレームをグループ化し、ある列に対し標準偏差を算出する	df.groupby('列A')['列B'].std()
赤い▲マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
n2分のnを求める	n / n2
データ列をインポートする	import pandas as pd
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
コーンズシルク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
option: グラフの色をグリーンに設定する	color = 'green'
オーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='orchid')
データフレームのあるカラムの平均	df['列A'].mean()
リストと配列についての散布図に黒いクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
表データを関数の値によってグループ化し、統計量を求める	df.groupby(関数).describe()
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
二つの列によってデータフレームをグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
横棒グラフを茶色色として描画する	plt.barh(データ列x, データ列y, color='brown')
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームをある列によって昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
文字列がリストの要素でないか調べる	element not in aList
濃いシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
文字列をエンコーディングを用いてバイト列に変換する	s.encode(encoding=encoding)
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ある列のカテゴリの個数	df.groupby('列A').count()
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
nが正の数かどうか調べる	n > 0
ライトグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームのあるカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
追加できるように既存のファイルを文字コードtextとして開く]	open(filepath, mode='a', encoding=text)
アイボリー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
コマンド引数を一覧として得る	sys.argv[1:]
要素がタプルの値として含まれているか調べる	element in aDict.values()
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
データフレームの指定したカラムの中にいくつ文字列が存在するかカウントする	df['列A'].isin([value]).sum()
線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
列にイテラブルを続けた列	itertools.chain(iterable, iterable2)
option: ライトサーモンを使う	color = 'lightsalmon'
ブラック色としてヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームを各カラム毎にグループ化し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
二つの集合の共通部分を計算する	aSet.intersection(aSet2)
ドジャーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='dodgerblue')
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
option: マーカーの色を変える	markerfacecolor = '#800080'
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
書式としてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームの相関行列	df.corr()
データフレームの選択したカラムにおいてどの値が頻出か調べる	df[['列A', '列B']].mode()
Pythonパスのリスト	sys.path
指定したカラムは正規分布からどの程度、尖っているか見る	df['列A'].skew()
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
nまでの奇整数列	list(range(1, n, 2))
データフレームの指定したカラムを万の位で丸める	df['列A'].round(-4)
ピーチパフ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
日付データが何曜日か知る	aDate.weekday()
データフレームからランダムに5行を選択する	df.sample(5)
列を四分位数ごとにビニングする	pd.qcut(ds, 4)
ある列の文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
ヒストグラムの色を耐火レンガにセットする	plt.hist(データ列, color='firebrick')
縦棒グラフをコーンフラワーブルー色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgray')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
nからstep間隔でいつまでも数え上げるする	itertools.count(start=n, step=step)
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
option: フォントの色をダークシアンに指定する	color = 'darkcyan'
赤い△マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
タプルの項目名の値	aDict[key]
リストの要素を並べ直す	sorted(aList)
二つのデータ列を箱髭図にする	plt.boxplot([データ列, データ列])
リストと配列の散布図を描画してマーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをダークゴールデンロッド色を使って描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
t分布型確率的近傍埋め込み法で濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームのカラムを折れ線グラフを用いて可視化する	plt.plot(df[column], df[column])
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
ダークターコイズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
あるカラムのカテゴリの最小値	df.groupby('列A').min()
option: グラフの色をマルーンに変更する	color = 'maroon'
グローバル変数の一覧を見る	globals()
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
カテゴリでグループ化して、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
option: ラインスタイルを一点鎖線に設定する	linestyle = 'dashbot'
棒グラフをオリベドラブ色を使って描画する	plt.bar(データ列x, データ列y, color='olivedrab')
n行をランダムにデータフレームから重複を認めてサンプリングする	df.sample(n, replace=True)
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
三変数の最も大きい値	max(x, y, z)
数値を水色でプリントできる文字列にする	f'\033[36m{value}\033[0m'
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
データフレームの選択したカラムの中に文字列と文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
辞書にタプルの項目を更新する	aDict.update(aDict2)
シーケンスの全順列	itertools.permutations(iterable)
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
文字列はリストの要素でない	element not in aList
文字列をバイト配列に変換する	bytearray(s)
散布図のマーカーを三角印にする	plt.scatter(データ列x, データ列y, marker='^')
配列のユニークな要素を求める	np.unique(aArray)
項目名がマップ上で未定義か調べる	key not in aDict
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
実行結果の出力を改行せず行う	print(value, end='')
文字列を部分文字列で二つに区切って後半の文字列を見る	s.partition(sub)[-1]
タプルを引数として展開してプリントする	print(*aTuple, sep=',')
データフレームの一部のカラムの欠損値を平均値にする	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
本日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
オブジェクトは浮動小数点数クラスか	isinstance(obj, float)
データフレームのあるカラムを選択する	df['列A']
データフレームの重複を数える	df.duplicated().sum()
２つの列のカテゴリによってデータフレームをグループ化する	df.groupby(['列A', '列B'])
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
キーがタプル上で未定義かどうか調べる	key not in aDict
グラフの描画で淡くパレットを用いる	sns.set(pallete='muted')
ケンドール順位相関係数としてデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='kendall')
データシリーズが何分か調べる	ds.dt.minute
日付データが月曜日か	aDate.weekday() == 0
折れ線グラフの色をパパイヤウィップにセットする	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームの中の列をn個に分割する	pd.cut(df[col], n)
データフレームにおいてどの値が最も出現するか確認する	df.mode()
rgbのバツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データシリーズの中に文字列とが存在するか調べる	ds.isin([value, value2])
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
option: ライトグレーを用いる	color = 'lightgrey'
データフレームのふたつのカラムをドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
新しいサポートベクター回帰モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
nをバイナリにする	n.to_bytes(length=bytesize, byteorder='big')
xとyの商と余りを同時に求める	divmod(x, y)
タプルとタプルを結合する	aTuple + aTuple2
1からNまでの行列を作る	np.arange(1, N+1)
文字列中に部分文字列が含まれるかどうか調べる	sub in s
ラベンダーブラッシュ色でヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
小麦色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
確率的勾配降下を用いて回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
データフレームの中に文字列と日付データが含まれる	df.isin([value, value2])
オプションで、標準出力を使用する	file = sys.stdout
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
データシリーズのNaNを直前の値に指定する	ds.fillna(method='ffill')
両端キューの右側に値を追加する	deq.append(element)
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
指定した列のカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データフレームの列を折れ線プロットで可視化する	plt.plot(df[column], df[column])
option: インデックスを自動的な連番に変更する	index_col = None
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
スクリプトファイルのパスを見る	os.path.abspath(__file__)
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
マゼンタ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
データシリーズの曜日が何日目か見る	ds.dt.dayofweek
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
データシリーズのタイムゾーンを指定する	ds.tz_convert('Asia/Tokyo')
データフレームを各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームのカラムの欠損値を最小値で補う	df['列A'].fillna(df['列A'].min())
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
リストからオブジェクトを取り除く	aList.remove(element)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
グラフの用途を画面にセットする	sns.set(context='notebook')
文字列中の大文字を小文字にする	s.lower()
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
option: グラフの色をスノーにする	color = 'snow'
リストから行列を初期化する	np.array(aList)
二点間のユークリッド距離を算出する	math.dist(point, point2)
option: 色をダークグレーに変更する	color = 'darkgray'
配列の変遷を色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
列をカテゴリデータに変換する	ds.astype(object)
配列のモード	mode, count = scipy.stats.mode(配列)
勾配ブースティング回帰木を作成する	model = sklearn.ensemble.GradientBoostingRegressor()
データシリーズの未入力値を直前の値で置換する	ds.fillna(method='ffill')
ミディアムシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
リストとリストの散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
リストの全ての要素を取り除く	aList.clear()
リストを分割する	pd.cut(aList, aList)
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
option: モカシンを使う	color = 'moccasin'
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
新しい文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
実行時の標準出力の出力先がターミナルかどうか確認する	os.isatty(sys.stdin.fileno())
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
option: 改行コードをUNIXにセットする	newline = '\n'
option: モカシン色を使う	color = 'moccasin'
カウンタの上位を列挙する	aCounter.most_common(k)
バイオリン図を描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
データ列の四分位を作図する	plt.boxplot(データ列)
データフレームのあるカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
データシリーズのNaNを最大値に設定する	ds.fillna(ds.max())
イテラブルとリストの散布図を描画して、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
データフレームのNaNを最小値で埋める	df.fillna(df.min())
ライトスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightskyblue')
カウンタ間で積集合	aCounter & aCounter2
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
環境がWindowsかどうか調べる	sys.platform.startswith('win32')
配列の最大値	np.max(aArray)
チョコレート色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
数に実数を掛ける	x * y
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: ホワイトスモーク色を使う	color = 'whitesmoke'
option: フォントの色をドジャーブルーに指定する	color = 'dodgerblue'
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategray')
折れ線グラフの菱形印を黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
グラフの描画で淡く色を用いる	sns.set(pallete='muted')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ヒストグラムを青色を用いて描画する	plt.hist(データ列, color='blue')
データシリーズの母標準偏差	ds.std(ddof=0)
線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
ある列の値ごとの合計を計算する	df.groupby('列A').sum()
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
指定したカラムの中に日付データとがいくつ存在するか数える	df['列A'].isin([value, value2]).sum()
横棒グラフをシャルトリューズ色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
nが一桁の整数か確認する	-9 <= n <= 9
年月日と時間から日付時刻を新規生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
配列のトリム平均を算出する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
二つのデータフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
option: 読み込みモードに変更する	mode = 'r'
整数nの8進表現	oct(n)
カウンタの全カウント	aCounter.total()
再帰の上限を増やす	sys.setrecursionlimit(1000000)
option: 暗い赤色を使う	color = 'darkred'
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
文字列の両端から空白を取り除く	s.strip()
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
リストを無限に繰り返す	itertools.cycle(iterable)
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
ミディアムシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
折れ線グラフを深紅色として描画する	plt.plot(データ列x, データ列y, color='crimson')
赤い丸マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
文字列全体が正規表現にマッチするか調べる	re.fullmatch(pattern, s)
データフレームの最初10行を抽出する	df.head(10)
横棒グラフを黄緑色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
データシリーズの欠損値をその平均値で埋める	ds.fillna(ds.mean())
行列の分散を計算する	np.var(aArray)
文字列をゼロ埋めする	s.zfill(文字列幅)
option: マルーン色を用いる	color = 'maroon'
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ヒストグラムをゴールド色を用いて描画する	plt.hist(データ列, color='gold')
rgbの四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: ライトシアンに色を設定する	color = 'lightcyan'
文字列がタプルの要素か	element in aTuple
データフレームのカラムのn次モーメント	scipy.stats.moment(df['列A'], moment=n)
option: ブルーバイオレット色を使用する	color = 'blueviolet'
双方向キューの右に要素を追加する	deq.append(element)
データ列をフォーマットで日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームの不偏標準偏差	df.std()
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
小数点数の天井を求める	math.ceil(x)
茶色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
シャルトリューズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
指定したカラムのカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
データフレームの中の列を分割数nで分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
配列の尖り	scipy.stats.kurtosis(配列, bias=False)
二次元リストの転置行列を計算する	[list(x) for x in list(zip(*aList))]
リストをn回、加える	aList * n
filepathに現在の作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
option: カンマをセパレータで使用する	sep = ','
ダークグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkgray')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
データフレームの代表値	df.describe()
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
データフレームの選択した列の欠損値をxに設定する	df[['列A', '列B']].fillna(x)
プロットの見栄えをデフォルトでいい感じに指定する	sns.set()
イテラブルの各要素をキューの左側に追加する	deq.extendleft(iterable)
十六進文字列をbytesizeバイトのバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
リストを緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
文字列中にひとつでも非空白が含まれるか	any(not c.isspace() for c in s)
縦棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
重複ありでランダムにn行をデータフレームからサンプリングする	df.sample(n, replace=True)
option: フォントの色をダークターコイズに変更する	color = 'darkturquoise'
データフレームのあるカラムの統計量	df['列A'].describe()
青にヒストグラムの色をする	plt.hist(データ列, color='blue')
データフレームの指定したカラムの中の欠損値の合計を調べる	df['列A'].isna().sum()
option: NaNは無視する	dropna = True
x軸だけ目盛線	plt.grid(axis='x')
棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
上限長を指定して、両端キュー	collections.deque(maxlen=n)
x座標を対数に変更する	plt.xscale('log')
リストとリストの散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
日付データからn週間分、減らす	aDate - datetime.timedelta(weeks=n)
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: ダークスラテグレー色を使用する	color = 'darkslategray'
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
辞書からキーの値か、もしくは要素を参照する	aDict.get(key, element)
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
ブラック色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
列を累積した列を得る	itertools.accumulate(iterable, operator.mul)
棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレーム全体を昇順にインデックスをキーにして整列する	df.sort_index(ascending=True)
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
グラフの横軸に名称を付ける	plt.xlabel('x軸ラベル')
縦棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
ロバスト推定を用いてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
箱髭図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
グリーンイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
option: スラグレー色を使う	color = 'slategray'
重回帰分析を行う	model = sklearn.linear_model.LinearRegression()
ファイルから1文字読み込む	f.read(1)
グラフにグリッド線を付ける	plt.grid(True)
データフレームの最初n行	df.head(n)
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
平均値と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
option: 青紫を使う	color = 'violet'
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
赤い点線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
赤い実線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
ヒストグラムと勾配ブースティングでクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの選択したカラムの最頻値を求める	df[['列A', '列B']].mode()
数値をシアン化する	f'\033[36m{value}\033[0m'
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
nにn2をかける	n * n2
箱ひげ図を使ってデータ列を図示する	plt.boxplot(データ列)
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
柱状図を用いてデータフレームの列を描画する	plt.hist(df[column])
折れ線グラフの▲マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
第二四分位数でデータフレームの選択したカラムの欠損値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データ列の寄与率を計算する	sklearn.metrics.r2_score(データ列, データ列2)
現在の作業ディレクトリ	os.getcwd()
前もってパターンをコンパイルする	re.compile(pattern)
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
散布図に赤いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
線グラフの色をパープルにする	plt.plot(データ列x, データ列y, color='purple')
配列のトリム分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
書き込み用にファイルをUTF8としてオープンする]	open(filepath, mode='w', encoding='utf-8')
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
オレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
option: オリーブを用いる	color = 'olive'
現在の時間数	datetime.date.today().hour
グラフの縦横比を同じする	plt.axis('equals')
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
セットから別の集合を取り除く	aSet.difference_update(aSet2)
option: グラフの色をライムにセットする	color = 'lime'
ある列にリストの値が含まれるデータを取り出す	df[df['列A'].isin(リスト)]
あるカラムにリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
実数の逆双曲線余弦を計算する	math.acosh(x)
文字列が全て数字か判定する	s.isdigit()
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
コマンド引数のリスト	sys.argv[1:]
データフレームから指定した三列のみ抽出する	df[['列A', '列B', '列C']]
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ある列のカテゴリごとの個数	df.groupby('列A').count()
型のサブクラスか調べる	issubclass(サブクラス, クラス)
データフレームのn行目をドロップし、みる	df.drop(n, axis=0)
実数で実数を割って切り捨てる	x // y
option: ゴールドに色を変更する	color = 'gold'
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
ネイビー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
16進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームの中に含まれる文字列の合計を調べる	df.isin([value]).sum()
データフレームから重複を破壊的にドロップする	df.drop_duplicates(inplace=True)
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
双方向キューの順番を右にn個分回転させる	deq.rotate(n)
文字列が全て小文字かどうか	s.islower()
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ある列のカテゴリごとの標準偏差を求める	df.groupby('列A').std()
赤いバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
赤にヒストグラムの色を変更する	plt.hist(データ列, color='red')
書式としてデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
イテラブルから一つランダムに選ぶ	random.choice(iterable)
マップからキーの値を得る	aDict.get(key)
ライトコーラル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データシリーズのNaNを後の値に設定する	ds.fillna(method='bfill')
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
データフレームのカラムを各グループ列ごとにグループ化して散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: マーカーの線幅を変更する	markeredgewidth = 2.5
散布図の下三角印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフを貝殻色を用いて描画する	plt.barh(データ列x, データ列y, color='seashell')
option: カデットブルー色を使う	color = 'cadetblue'
option: 平均を追記する	showmeans = False
データフレームからカテゴリデータのカラム名リストを使う	df.select_dtypes('object').columns
青い破線でリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
リストとリストについての散布図にrgbの菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのカラムの尖度を計算する	scipy.stats.kurtosis(df['列A'], bias=False)
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
折れ線グラフのバツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
文字列の最初から部分文字列を取り除く	s.lstrip(sub)
二つの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
グラフ中のフォントを設定する	sns.set(font=フォント名)
線グラフの色を黄緑に変更する	plt.plot(データ列x, データ列y, color='chartreuse')
リストの中の最も大きい値	max(aList)
部分文字列を文字列の先頭から見つける	s.find(sub)
option: 改行をセパレータで使用する	sep = '\n'
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
ベクトルの行列積	np.matmul(aArray, aArray2)
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
カウンタのそれぞれの文字列を、そのカウントだけ列挙する	aCounter.elements()
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
セットから任意の要素を除く	aSet.pop()
シャルトリューズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データ列の四分位を可視化する	plt.boxplot(データ列)
線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgray')
配列をビン数nとして分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
表データのあるカラムの年を見る	df['列A'].dt.year
下三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
option: ミディアムスレートブルー色を使用する	color = 'mediumslateblue'
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
折れ線グラフのダイアモンド印の大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
棒グラフをライム色を使って描画する	plt.bar(データ列x, データ列y, color='lime')
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
クラス分類をロバスト推定でする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
割合付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
散布図を菱形印を使って描画する	plt.scatter(データ列x, データ列y, marker='D')
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
横棒グラフをダークレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkred')
MLPを用いて回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
乱数シードをnで初期化する	random.seed(n)
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
文字列の終了位置以前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
動作環境がLinuxか調べる	sys.platform.startswith('linux')
配列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
option: グラフの色をグレーに指定する	color = 'gray'
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
配列と同じ大きさの空行列を初期化する	np.empty_like(aArray)
ラベンダー色を使ってヒストグラムを描画する	plt.hist(データ列, color='lavender')
ミディアムブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
やわらかい青色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
重複ありで100行をデータフレームからランダムにサンプリングする	df.sample(100, replace=True)
nが3の倍数か調べる	n % 3 == 0
文字列を区切り記号で区切り、、文字列リストに変換する	s.split(sep)
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
青い一点鎖線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームをある列のカテゴリでグループ化して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
黒い四角マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データシリーズの欠損値をその平均値で補う	ds.fillna(ds.mean())
option: ペルーにフォントの色を設定する	color = 'peru'
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
x軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
小数点数の小数部	math.modf(x)[0]
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームから列を３つ選択する	df[['列A', '列B', '列C']]
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
リストを文字列リストに変換して'改行を使って結合する	'\n'.join(map(str, iterable))
n番目の列を外した表データ	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
本日の月数を使う	datetime.datetime.today().month
文字列中にひとつでも非アスキー文字があるか調べる	any(not c.isascii() for c in s)
サブセット	aSet.issubset(aSet2)
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
数列とリストの散布図を描画して、マーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
option: グラフの色をホワイトスモークに指定する	color = 'whitesmoke'
データフレームから指定したデータ型の列名の一覧を見る	df.select_dtypes(型).columns
1で全要素を初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
option: マーカーを左三角に変更する	marker = '<'
option: グラフの色をダークオレンジに指定する	color = 'darkorange'
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ダークサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームをに箱ひげ図でプロット化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームを２つの列でグループ化し統計量を求める	df.groupby(['列A', '列B']).describe()
ロバストな線形分類モデルを準備する	model = sklearn.linear_model.HuberClassifier()
数値を青色でプリントする	print(f'\033[34m{value}\033[0m')
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
文字列がひらがなか	('ぁ' <= ch <= 'ん')
バリーウッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
カテゴリで色付けして、データフレームをにバイオリン図を使ってグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
パレットトルコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategrey')
整数乱数で要素を埋めた行列を作成する	np.random.randint(開始値, 終了値, (行数, 列数))
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
option: 紺を使う	color = 'darkblue'
ヒストグラムの色をミディアムスレートブルーに指定する	plt.hist(データ列, color='mediumslateblue')
日付時刻データが金曜日	aDatetime.weekday() == 4
双方向キュー中の要素を数える	deq.count(element)
散布図の印を丸印にする	plt.scatter(データ列x, データ列y, marker='o')
データフレームを二つの列を用いて小さい順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=True)
シャルトリューズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
現在が火曜日か	datetime.datetime.today().weekday() == 1
データシリーズの25パーセンタイルを求める	ds.quantile(0.25)
ユニークな値を要素とする配列を使う	np.unique(aArray)
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
３整数のGCD	math.gcd(n, n2, n3)
ヒストグラムの色をパパイヤウィップに指定する	plt.hist(データ列, color='papayawhip')
文字列が全てアルファベットか	s.isalpha()
正規表現に文字列全体を複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ファイルを開き]、読み込みストリームを求める	open(filepath, mode='r')
データフレームをグループ化しある列に対し分散を求める	df.groupby('列A')['列B'].var()
リストと列の直積	itertools.product(iterable, iterable2)
スカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
ファイルを全部、読み込む	f.read()
データフレームの指定したカラムの文字列をNaNにする	df['列A'].replace(値, np.nan)
データフレームの選択したカラムの中に文字列と日付データがいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
option: スカイブルーを使う	color = 'skyblue'
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
コマンドの第一引数	sys.argv[1]
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
棒グラフをプラム色を用いて描画する	plt.bar(データ列x, データ列y, color='plum')
コーンズシルク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
OSはMacOS	sys.platform.startswith('darwin')
データフレームのある列を100の位で丸める	df['列A'].round(-2)
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
実行結果を黒色でプリントする	print(f'\033[30m{value}\033[0m')
整数nをバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
データフレームを指定した列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
プロットにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
option: グラフの色をオレンジに設定する	color = 'orange'
折れ線グラフの色をビスクに変更する	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
データフレームの選択したカラムがどの程度分散しているか確認する	df[['列A', '列B']].var()
データシリーズにおいてどの値が頻出か見る	ds.mode()
数式のインテグラルを算出する	sympy.integrate(e)
暗くカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
リストとリストを結合する	aList + aList2
空の両端キューを生成する	collections.deque()
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
黄緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
赤い▼マーカーをイテラブルとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの大バツマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
実数を実数で除する	x / y
散布図をスノー色を用いて描画する	plt.scatter(データ列x, データ列y, color='snow')
文字列の開始位置から終了位置までの範囲で部分文字列の登場を数える	s.count(sub, start, end)
データフレームが重複している	df.duplicated()
イテラブルとリストについて散布図をプロットし、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
配列とイテラブルについての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
n掛けるn2を求める	n * n2
データフレームの指定したカラムの未入力値を直後の値で埋める	df['列A'].fillna(method='bfill')
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
折れ線グラフの色をコーラルにする	plt.plot(データ列x, データ列y, color='coral')
JSONフォーマットの文字列をデータに変換する	json.loads(jsonString)
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
円グラフのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データフレームから型リストで指定したデータ型の列を抽出する	df.select_dtypes(include=typeList)
option: グラフの色をアンティークホワイトにする	color = 'antiquewhite'
日付時刻データをISO8601形式の文字列にする	aDatetime.isoformat()
折れ線グラフの▽印の大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの選択した列の中の欠損値の合計を求める	df[['列A', '列B']].isna().sum()
option: スチールブルー色を用いる	color = 'steelblue'
ある列の値でデータフレームをグループ化し、要約統計量を求める	df.groupby('列A').describe()
アヤメのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
辞書のキーの値を得る	aDict[key]
x座標の最大・最小値を変更する	plt.xlim(最小値, 最大値)
グラフの用途をスライドに設定する	sns.set(context='talk')
縦棒グラフをライトゴールドロディイエロー色を使って描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字列を左寄せにする	s.ljust(文字列幅)
黒いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
実数を三乗する	x ** 3
インデント幅nでマッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
日付データが何日か知る	aDate.day
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
文字列の開始位置から終了位置までの範囲で部分文字列の登場をカウントする	s.count(sub, start, end)
option: グラフの色をミディアムパープルにセットする	color = 'mediumpurple'
パープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
リストの最後	aList[-1]
表データをインポートする	import pandas as pd
ふたつの列からグループ化し、平均値を計算する	df.groupby(['列A', '列B'], as_index=False).mean()
データフレームの上10行を抽出する	df.head(10)
カラムの不偏分散	df['列A'].var(ddof=1)
散布図をブランチドアーモンド色として描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
要素をキューの最後に追加する	deq.append(element)
ひとつ置きにタプルを取り出す	aTuple[::2]
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
option: ライトグリーン色を使用する	color = 'lightseagreen'
データフレームの指定したカラムの中にいくつ文字列が存在するか求める	df['列A'].isin([value]).sum()
文字列をコロンで分割して、列挙する	s.split(':')
配列の調和平均を求める	scipy.stats.hmean(配列)
棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
中央値でリストをビン分割する	pd.qcut(aList, 2)
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
暗くカラーパレットをグラフの描画で使用する	sns.set(pallete='dark')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
データフレームを関数の値に集計して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
辞書の項目名を列挙する	aDict.keys()
文字列を文字のリストに変換する	list(s)
データフレームをグループ化しそれぞれの分散を計算する	df.groupby('列A').var()
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
浮動小数点数のn乗の数剰余	pow(x, n, y)
リストのn番目にオブジェクトを差し込む	aList.insert(n, element)
ファイルパスを文字列の示すエンコーディングで書き込み用に開く]	open(filepath, mode='w', encoding=s)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
データ列の推移を折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
配列とデータ列についての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ダーク・スラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategrey')
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
データフレームのカラムの欠損値を中央値に変更する	df['列A'].fillna(df['列A'].median())
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
range関数の無限バージョン	itertools.count(start=n, step=step)
標準入力を使用する	sys.stdin
データフレームを複数の列でソートする	df.sort_values(by=['列A', '列B'])
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
綺麗なグラフを用いる	import seaborn as sns
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
折れ線グラフの▲印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
作画の色を指定する	sns.set(pallete=パレット名)
本日は何年か知る	datetime.datetime.today().year
データフレームから列を１つのみ選択する	df[['列A']]
ファイルをEUCとして開く]	open(filepath, encoding='euc_jp')
ヒストグラムを実線にする	plt.hist(データ列, linestyle='solid')
ピアソンの相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
ヒストグラムの色をプラムに指定する	plt.hist(データ列, color='plum')
option: オレンジ色を用いる	color = 'orange'
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ファイルをバイナリ用にオープンする]	open(filepath, mode='rb')
option: ゴールド色を使用する	color = 'gold'
文字列を最後の部分文字列で二分し、後半の文字列を見る	s.rpartition(sub)[-1]
赤い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
Pythonパスの一覧	sys.path
データフレームをインデックスによってソートする	df.sort_index()
日付データからn分、減らす	aDate - datetime.timedelta(minutes=n)
大バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
最後の部分文字列で文字列を分割する	s.rpartition(sub)
サポートベクトル分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
横棒グラフをブランチドアーモンド色を使って描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
二つの変数をタブで区切って表示する	print(value, value2, sep='\t')
浮動小数点数を数に加える	x + y
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
赤い左三角マーカーをリストとイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: ライトブルー色を使う	color = 'lightblue'
データフレームを表示するとき、小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
データフレームの欠損値を後の値に設定する	df.fillna(method='bfill')
シーケンスを双方向キューにする	collections.deque(iterable)
下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
データフレームの中に日付データと日付データが存在するか調べる	df.isin([value, value2])
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
横棒グラフを描き、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列の出力を改行なしに行う	print(value, end='')
折れ線グラフにバツ印を使用する	plt.plot(データ列x, データ列y, marker='x')
ある列にリストの値が含まれるデータを抽出する	df[df['列A'].isin(リスト)]
配列とデータ列の散布図を描き、、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
option: 右三角マーカーを使う	marker = '>'
y軸の目盛りを対数に変更する	plt.yscale('log')
散布図のマーカーを▼印にする	plt.scatter(データ列x, データ列y, marker='v')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
ダークオレンジにヒストグラムの色をセットする	plt.hist(データ列, color='darkorange')
現在の時刻	datetime.date.today().hour
文字列を走査しパターンに複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
黒い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
棒グラフをライトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightblue')
インデント幅nで、タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
日付データは日付データより前かどうか調べる	aDate < aDate2
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
黒い下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
option: 欠損値を先頭にする	na_position = 'first'
縦棒グラフを描いて、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
分類モデルの正確さを計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
文字列中に部分文字列がいくつか含まれるか数える	s.count(sub)
カラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
データフレームの標本標準偏差を求める	df.std(ddof=1)
スピアマンの相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
イテラブルとデータ列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
オブジェクトが集合クラスのインスタンスか調べる	isinstance(obj, set)
nが奇数か	n % 2 == 1
散布図のポイントマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームの最初5行	df.head(5)
ムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
小さい順にある列で表データをソートする	df.sort_values(by='列A', ascending=True)
データフレームから数値データを抽出する	df.select_dtypes('number')
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
列名を指定して２つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
データフレームの列の欠損値を最小値で置換する	df['列A'].fillna(df['列A'].min())
option: フォントの色をミントクリームにセットする	color = 'mintcream'
実数を実数で整数除算する	x // y
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
耐火レンガ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
オブジェクトを文字列にする	str(obj)
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
組をn倍する	aTuple * n
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
リストとリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
正規分布か調べる	scipy.stats.shapiro(配列)
実行結果を太文字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
option: グラフの色をスチールブルーにセットする	color = 'steelblue'
文字列が文字列より辞書順で前か調べる	s < s2
配列のピアソンの積立相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
オブジェクトをイテラブルに変換する	iter(obj)
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
双方向キューの先頭に要素を追加する	deq.appendleft(element)
データフレームのあるカラムが何秒か見る	df['列A'].dt.second
文字列中からパターンにケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
リストが空でないか調べる	len(aList) != 0
文字列を空白で区切り、、文字列リストにする	s.split()
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o')
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
折れ線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
最後の部分文字列で文字列を二つに区切って前半の文字列を使う	s.rpartition(sub)[0]
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
縦棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
グラフに鉛直方向の点線を設定する	plt.axvline(x=0, linestyle='dotted')
option: グリーンイエロー色を用いる	color = 'greenyellow'
リストとリストの散布図をプロットして、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
option: フォントの色をダークスラテグレーに指定する	color = 'darkslategray'
データフレームの選択したカラムの欠損値を最小値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
データフレームから型の列のみ選択する	df.select_dtypes(ty)
青色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
散布図をシルバー色を用いて描画する	plt.scatter(データ列x, データ列y, color='silver')
実線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのあるカラムが何年か見る	df['列A'].dt.year
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: パレットトルコイズを使う	color = 'paleturquoise'
イテラブルを折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
option: 改行コードをUNIXに設定する	newline = '\n'
カウンタから辞書を減らす	aCounter.subtract(aDict)
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
文字列の後ろ	s[-1]
データシリーズの中に文字列と文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
文字列を部分文字列で二分し、最初の文字列を求める	s.partition(sub)[0]
ベクトルをベースに全要素が0の配列	np.zeros_like(aArray)
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
列を無限に繰り返す	itertools.cycle(iterable)
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
データフレームとデータシリーズを横方向に連結する	pd.concat([df, ds], axis=1)
ある列の不偏分散	df['列A'].var(ddof=1)
ヒストグラムをモカシン色を用いて描画する	plt.hist(データ列, color='moccasin')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
表データの選択した列の相関行列	df[['列A', '列B']].corr()
左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<')
両端キューから値を削除する	deq.remove(element)
数式の因数分解を行う	sympy.factor(e)
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
パウダーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
マッピングに項目名があるか調べる	key not in aDict
イテラブルを2回あわせたデカルト積を計算する	itertools.product(iterable, repeat=2)
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
文字列を走査しパターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
ミディアムターコイズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
カウンタの要素をリストとして得る	aCounter.keys()
データフレームをある列の値でグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
最大値・最小値を用いて整数乱数を生成する	random.randint(最小値, 最大値)
縦棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgray')
ヒストグラムを貝殻色を用いて描画する	plt.hist(データ列, color='seashell')
日付を用いる	import datetime
option: フォントの色を紺に設定する	color = 'darkblue'
二つの文字列は同じかどうか調べる	s == s2
線を半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
キューに文字列をenqueueする	deq.appendleft(element)
表データのstart行目からend行目まで選択する	df[start:end]
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
rgbの右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
カデットブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
マップの項目名を要素に変更する	aDict[key] = element
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
日付時刻データが月曜日かどうかテストする	aDatetime.weekday() == 0
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
ファイルパスをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
文字列が部分文字列で終了するか調べる	s.endswith(sub)
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
option: 色をオールドレースに設定する	color = 'oldlace'
二つの文字列は等しくない	s != s2
文字列をマゼンタで出力する	print(f'\033[35m{value}\033[0m')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
折れ線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームを表示するとき、表示できる行数をnに指定する	pd.set_option('display.max_rows', n)
緑色で文字列を表示する	print(f'\033[32m{value}\033[0m')
nが1、もしくは2もしくは3に等しいか確認する	n == 1 or n == 2 or n == 3
平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムをミディアムパープル色を使って描画する	plt.hist(データ列, color='mediumpurple')
nとn2の排他的論理和を求める	n ^ n2
文字列は識別子名か調べる	s.isidentifier()
空のリッジ回帰モデルを作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
アルファベットを全て使う	string.ascii_letters
行列を一次元化する	aArray.flatten()
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
データフレームの選択したカラムの中にいくつ欠損値があるか求める	df[['列A', '列B']].isna().sum()
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
散布図のダイアモンド印の色を指定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームの最初100行	df.head(100)
ビンを設定して度数分布図を描画する	plt.hist(データ列, bins=区関数)
日付時刻データの時間	aDatetime.time()
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームのあるカラムの欠損値を直後の値にセットする	df['列A'].fillna(method='bfill')
文字列はタイトル大文字小文字か調べる	s.istitle()
データシリーズの中に文字列があるか調べる	ds.isin([value])
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
タプルをn倍する	aTuple * n
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
option: グリーン色を使用する	color = 'green'
パールバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
タイムスタンプデータが何月か知る	aDatetime.month
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
nがn2より小さいか調べる	n < n2
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
データフレームの指定した列が正規分布からどの程度、尖っているか見る	df['列A'].skew()
縦棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
オブジェクトがバイト列型のインスタンスかどうか	isinstance(obj, bytes)
実数のハイパボリック・サイン	math.sinh(x)
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
画像ファイルとしてグラフを保存する	plt.savefig('foo.png')
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
配列とリストの散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
表データからn行、サンプリングする	df.sample(n)
データフレームのカラムを四捨五入して、整数型にする	df['列A'].round().astype(int)
データ列の折れ線グラフを▲印で描画する	plt.plot(データ列x, データ列y, marker='^')
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
あるカラムの文字列が正規表現にマッチする行を取り出す	df[df['列A'].str.match(正規表現)]
option: 色をライトグレーに変更する	color = 'lightgrey'
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
xが真かどうか調べる	bool(x)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
'A'列の値がxに等しい行を取り出す	df[df['列A'] == x]
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
整数nを十六進文字列にする	hex(n)[2:]
実行結果をマゼンタ化する	f'\033[35m{value}\033[0m'
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
ファイルを読み込みモードを使ってオープンする]	open(filepath, mode='r')
ふたつの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
ヒストグラムをシーグリーン色を用いて描画する	plt.hist(データ列, color='seagreen')
ヒストグラムの色をマルーンにセットする	plt.hist(データ列, color='maroon')
ディープスカイブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
option: フォントの色をグレーに指定する	color = 'grey'
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
ファイル名がテキストファイル	filename.endswith('.txt')
回帰モデルを訓練する	model.fit(説明変数, 目的変数)
長さnのリスト	[0] * n
データシリーズを100の位で丸めて、整数型にする	ds.round(-2).astype(int)
データフレームの指定したカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
配列を平坦化する	aArray.flatten()
濃いシアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
棒グラフをナバホホワイト色として描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームの一部のカラムのNaNをメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
配列をビン分割する	pd.cut(aArray, aList)
横棒グラフをパレットトルコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームの選択したカラムの代表値	df[['列A', '列B']].describe()
数列と配列の散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
オブジェクトが属性を持つか	hasattr(obj, プロパティ名)
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
option: ポイント印を使用する	marker = '.'
バツマーカーを使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
エクセルファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ある列のカテゴリの分散	df.groupby('列A').var()
データフレームをCSV形式で保存する	df.to_csv('file.tsv', sep='\t')
データフレームの選択した列の値をValueMapで一度に置き換える	df[['列A', '列B']].replace(ValueMap)
option: グラフの色をアクアに指定する	color = 'aqua'
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
貝殻にヒストグラムの色を指定する	plt.hist(データ列, color='seashell')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレーム全体を行によって小さい順にソートする	df.sort_index(ascending=True)
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
グラフの色テーマを指定する	sns.set(pallete=パレット名)
組の平均値	sum(aTuple)/len(aTuple)
線グラフをプラム色を用いて描画する	plt.plot(データ列x, データ列y, color='plum')
option: どのカラムもインデックスに設定しない	index_col = None
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
本日の月	datetime.datetime.today().month
データフレームをインデックスを付けず保存する	df.to_csv('file.csv', index=None)
外れ値を除いたデータフレームのカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
文字列の中の正規表現による全マッチを使う	re.findall(pattern, s)
シーケンスと配列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
option: カンマをセパレータで用いる	sep = ','
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
リストをn個に等間隔でビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
空白文字を使う	' '
ヒストグラムをネイビー色として描画する	plt.hist(データ列, color='navy')
stringをインポートする	import string
グラフをパステル調にする	sns.set(pallete='pastel')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
タプルの末尾からn番目以前の要素を抽出する	aTuple[:-n]
option: タブを区切りで使う	sep = '\t'
スクリプトファイルのフォルダパスを使う	os.path.dirname(os.path.abspath(__file__))
散布図のマーカーを菱形印にする	plt.scatter(データ列x, データ列y, marker='D')
データフレームの選択したカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ダークバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
カテゴリ別でグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: インデックスを自動的な連番に設定する	index_col = None
nのビット長	n.bit_length()
双方向キューをタプルに変換する	tuple(deq)
ある列の値がxより大きく、yより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
データフレームを100の位で四捨五入する	df.round(-2)
二つのカラムによってデータフレームを整列して、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
異なるカラムをキーにして2つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
option: ベージュにグラフの色を変更する	color = 'beige'
リストと配列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
双方向キューの末尾にシーケンスの各要素を追加する	deq.extend(iterable)
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
集合から全ての要素を取り除く	aSet.clear()
クラス分類のF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
ガウス過程回帰モデルを作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データシリーズを四捨五入する	ds.round()
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
カウンタの最頻出な項目を計算する	aCounter.most_common()[0]
データフレームのある列をリストとして抽出する	df['列A'].values.tolist()
文字列の末尾から部分文字列を探す	s.rfind(sub)
両端キューの末尾にリストの要素を追加する	deq.extend(iterable)
ヒストグラムの色をライトサーモンにセットする	plt.hist(データ列, color='lightsalmon')
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
nがn2以下	n <= n2
数列とデータ列についての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフをミディアムスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
あるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
フォーマットを使ってデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
文字列をセパレータで区切って、文字列リストに変換する	s.split(sub)
説明変数と目的変数としてモデルを学習する	model.fit(説明変数, 目的変数)
非数値データ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
配列の値が正規分布にしたがって発生する累積確率を計算する	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
リストの長さを見る	len(aList)
0から始まる無限数列	itertools.count()
数値を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
平均線付き箱髭図を描く	plt.boxplot(データ列, meanline=True)
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データ列を閾値としてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: フォントの色をパレットトルコイズに指定する	color = 'paleturquoise'
出力するカンマ区切り形式の小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
option: セパレータを使わない	sep = ''
データフレームのカラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
白色としてヒストグラムを描画する	plt.hist(データ列, color='white')
データフレームの中のカラムをn個に等量で分割する	pd.qcut(df[col], n)
aListn番目から要素をポップする	aList.pop(n)
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: フォントの色をデピンクに設定する	color = 'deeppink'
データフレームの中にがあるか調べる	df.isin([value])
スラッシュで区切って二つの文字列をプリントする	print(value, value2, sep='/')
二つの集合がセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
バイナリ書き込みモードでファイルパスを開き]、fとする	f = open(filepath, mode='wb')
数値の変数に数式を代入する	e.subs(z, e2)
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
列にタプルを続けた列	itertools.chain(iterable, iterable2)
欠損値がある行をドロップする	df.dropna(inplace=True)
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
パターンで文字列を区切る	re.split(pattern, s)
option: グラフの色をパールバイオレットレッドにする	color = 'palevioletred'
本日が水曜日かどうか判定する	datetime.datetime.today().weekday() == 2
nがn2と等しい	n == n2
折れ線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
リストの値を昇順にソートする	sorted(aList, reverse=True)
組のn番目以降の要素を抽出する	aTuple[n:]
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
単位行列	np.eye(行数, 列数)
データシリーズの中にあるの数をカウントする	ds.isin([value]).sum()
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
コーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
整数nがリストのいづれか	n in aList
レベッカパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームのある列の最頻値を求める	df['列A'].mode()
リストとリストについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
nがタプルのいづれかかどうか調べる	n in aTuple
異なる列をキーにしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
ふたつの列を組み合わせてグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
option: スタイルを点線に設定する	linestyle = 'dotted'
文字列が全て英数字か調べる	s.isalnum()
折れ線グラフの色を茶色に指定する	plt.plot(データ列x, データ列y, color='brown')
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
カデットブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
文字列を緑色で出力する	print(f'\033[32m{value}\033[0m')
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
日付時刻データにn時間を加算する	aDatetime + datetime.timedelta(hours=n)
データフレームのstart行目からend行目まで取り出す	df[start:end]
リストと数列についての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: ミッドナイトブルーにフォントの色をセットする	color = 'midnightblue'
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームのn行までを選択する	df[:n]
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
option: シアンに色を指定する	color = 'cyan'
赤いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列の中でASCII限定として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
データ列を二つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
グラフの描画で明るくパレットを使う	sns.set(pallete='bright')
等しい量になるようにn個にデータフレームの中の列を分割する	pd.qcut(df[col], n)
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
カウンタのユニークな項目を列挙する	list(aCounter)
スチールブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
nの各桁の和を計算する	sum(map(int, str(n)))
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
プラム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
n2がnより大きく、かつ、n3より小さいか確認する	n < n2 and n2 < n3
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
空の線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
角度のラジアンを求める	math.radians(degree)
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
リストとリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
カラムの幾何平均を算出する	scipy.stats.gmean(df['列A'])
棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
空白で文字列を末尾から分割する	s.rsplit()
option: 色を暗い赤に指定する	color = 'darkred'
文字列の文字数	len(s)
option: 色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
縦棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
黒い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
ユニークな各要素の頻度を使う	np.unique(aArray, return_counts=True)
配列とリストについての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
option: 四角マーカーを加える	marker = 's'
ダークレッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
データフレームの母標準偏差を求める	df.std(ddof=0)
線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
nをn2だけ減らす	n -= n2
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
実数の双曲線正弦	math.sinh(x)
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
折れ線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
作画の縦横比を等しくする	plt.axis('equals')
ゲインズボロにヒストグラムの色をセットする	plt.hist(データ列, color='gainsboro')
要素が全て初期値の行列を初期化する	np.full(要素数, 初期値, dtype=np.int)
やわらかい青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
横向きに二つのデータフレームをくっつける	pd.concat([df, df2], axis=1)
正規分布を判定する	scipy.stats.shapiro(配列)
データフレームを表計算ファイルから読み込む	pd.read_excel('file.xlsx')
オブジェクトはリストクラスか確認する	isinstance(obj, list)
散布図の上三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: 区切りをスラッシュにする	sep = '/'
数列とリストについて散布図を描画し、、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
データシリーズを小数点以下n桁で丸める	ds.round(n)
EUCで既存のファイルを追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
option: ３二ビット整数型を使用する	dtype = np.int16
データフレームの選択したカラムの空文字を欠損値に変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データシリーズの中に文字列と日付データがいくつあるか数える	ds.isin([value, value2]).sum()
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
データフレームの一部のカラムの欠損値をその平均で置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
指定した列の中にいくつ欠損値が存在するか数える	df['列A'].isna().sum()
オブジェクトは整数クラスか	isinstance(obj, int)
データシリーズの欠損値をxに増やす	ds.fillna(x)
ブランチドアーモンド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
クラス分類の偽陰性をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
日付を表現した文字列をタイムスタンプ型に変換する	pd.to_datetime(日付を表現した文字列)
データフレームの指定した列の欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
文字列の終了位置より前に部分文字列が含まれない	s.find(sub, 0, end) == -1
option: タンを用いる	color = 'tan'
データフレームをCSVファイルにBOMを付けて保存する	df.to_csv('file.csv', encoding='utf_8_sig')
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
マップの値を列挙する	aDict.values()
浮動小数点数を整数で割った余り	x % y
赤いバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列の示すエンコーディングとして追加できるようにファイルを開く]	open(filepath, mode='a', encoding=s)
青い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
入力から2つの自然数値を読む	A, B = map(int, input().split())
リストの要素をクリアにする	aList.clear()
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
データフレームを表示するとき、データフレームをn列まで表示するようにする	pd.set_option('display.max_columns', n)
option: グラフの色を赤に変更する	color = 'red'
散布図に右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
リストとリストについての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
カラム間のケンドールの順位相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
二つのデータフレームを列名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
データを最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
リストを箱ひげ図として作図する	plt.boxplot(データ列)
散布図に星印を加える	plt.scatter(データ列x, データ列y, marker='*')
列のユニークな値	df[col].unique()
未初期化の配列	np.empty(要素数, dtype=np.int)
option: ティール色を用いる	color = 'teal'
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームをCSVファイルで保存する	df.to_csv('file.csv')
本日のローカルな日付	datetime.date.today()
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
実数の正弦の逆数	math.asin(x)
折れ線グラフのマーカーを▼にする	plt.plot(データ列x, データ列y, marker='v')
nをn2倍にする	n *= n2
グラフの描画で淡くカラーパレットを使用する	sns.set(pallete='muted')
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(df['列A'], 'norm')
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データラベルをプロット中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
赤い丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ダークレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
指定したカラムを十の位で丸める	df['列A'].round(-1)
あるカラムの値がxに等しく、別の列の値がyに等しい行を選択する	df[(df['列A'] == x) & (df['列B'] == y)]
データフレームを2つの列を用いて昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
リストから文字列を除く	aList.remove(element)
色付きの破線でラインをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列リストを結合し、一つの文字列にする	''.join(map(str, iterable))
パレットトルコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
option: 改行を分割記号で使う	sep = '\n'
線グラフの色を青紫に指定する	plt.plot(データ列x, データ列y, color='violet')
UNIX秒の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
データフレームを関数の値によってグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データフレームのカラム名を置き換える	df.columns = columns
option: グリーン色を使う	color = 'green'
実数のn乗の浮動小数点数剰余	pow(x, n, y)
日付データが月曜日か確認する	aDate.weekday() == 0
標準エラーを使用する	sys.stderr
スクリプトのファイルの名前を調べる	sys.argv[0]
データフレームの行を条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
文字列が文字列リストに含まれるかどうか調べる	s in aStringList
主成分分析で多次元データを濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
最大最小としてスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
平均線付きボックスチャートを描画する	plt.boxplot(データ列, meanline=True)
データフレームの平均など	df.describe()
チョコレート色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
列の数値時刻を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
1からnまでの整数列を作る	list(range(1, n+1))
データフレームのあるカラムの不偏標準偏差	df['列A'].std()
折れ線グラフをホワイト色として描画する	plt.plot(データ列x, データ列y, color='white')
option: セパレータを文字列にする	sep = s
散布図をライトコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
オレンジレッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
色差別なく色をグラフの描画で使う	sns.set(pallete='colorblind')
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
option: フォントの色を赤に設定する	color = 'red'
option: フォントの色をダークグリーンに指定する	color = 'darkgreen'
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: グラフの色をゲインズボロに変更する	color = 'gainsboro'
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
列を全て日付データに変換する	pd.to_datetime(df['列A'])
サーモン色でヒストグラムを描画する	plt.hist(データ列, color='salmon')
空行をプリントする	print()
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
非数字が文字列中に含まれるか調べる	any(not c.isdigit() for c in s)
棒グラフをスラグレー色を使って描画する	plt.bar(データ列x, データ列y, color='slategray')
ゴーストホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
サドルブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
縦棒グラフをダーク・スラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
グラフのy座標を対数に変更する	plt.yscale('log')
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
散布図に黒い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームのある列をドロップし、みる	df.drop('列A', axis=1)
データフレームのあるカラムの時刻	df['列A'].dt.hour
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
配列をフラットにする	aArray.flatten()
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームの一部の列のNaNを直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
option: 印の色を変える	markerfacecolor = '#800080'
カウンタを低頻度方からリストとして得る	aCounter.most_common()[::-1]
長さが一致しないバージョンのzip	itertools.zip_longest(iterable, iterable2)
ホワイトスモーク色としてヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
データシリーズが何分か見る	ds.dt.minute
データフレームのあるカラムを十の位で丸める	df['列A'].round(-1)
データフレームが重複しているかどうか調べる	df.duplicated()
マップを浅く複製する	dict(aDict)
エクセルファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
折れ線グラフの丸印を青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
行列の列ごとの最小値	np.min(aArray, axis=0)
シスル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
グラフで使うフォントを日本語に設定する	sns.set(font='IPAexGothic')
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
ファイルパスをバイナリできるように開く]	open(filepath, mode='rb')
文字列内にひとつでも数字が含まれる	any(c.isdigit() for c in s)
オプションで、出力先をファイルにセットする	file = sys.open(filename, 'w')
グリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
青紫色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
指定したカラムの中に文字列と文字列が含まれるか	df['列A'].isin([value, value2])
浮動小数点数の逆双曲線正接	math.atanh(x)
rgbのバツマーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ダイアモンド印を加える	marker = 'D'
マップをクリアする	aDict.clear()
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
タプル内の要素が全て真	all(aTuple)
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
コロンによって文字列を分割して、列挙する	s.split(':')
y軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
実数が有限か調べる	math.isfinite(x)
大バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
タプルのコピー	dict(aDict)
日付時刻データとタイムスタンプデータの時間差を求める	aDatetime - aDatetime2
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
円グラフを時計回りにプロットする	plt.pie(データ列, startangle=90, counterclock=False)
日付時刻データの時間数	aDatetime.hour
データフレームの列名を列挙する	df.columns
ミディアムスレートブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
半透明の実線で数列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
行列の行を選択する	aArray[行番号]
集合から別のセットとの共通要素を除く	aSet.symmetric_difference_update(aSet2)
リストを分割数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データシリーズをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: マーカーを菱形に指定する	marker = 'D'
データフレームの中に文字列と文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
配列と数列の散布図を描き、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
SJISでファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
文字列内にひとつでもアスキー文字が含まれるか	any(c.isascii() for c in s)
プロットのx軸を対数に変更する	plt.xscale('log')
リストの値を並べ変える	sorted(aList)
線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
散布図をダークスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
環境がMacOSか調べる	sys.platform.startswith('darwin')
二つの実行結果をスラッシュで区切ってプリントする	print(value, value2, sep='/')
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
散布図に赤い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
縦棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='grey')
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
ポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.')
データフレームの指定したカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
折れ線グラフの色をパレットトルコイズにする	plt.plot(データ列x, データ列y, color='paleturquoise')
option: Excelシート名を設定する	sheet_name = ['A', 'B']
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(配列, 'norm')
イテラブルのヒストグラムを描画する	plt.hist(データ列)
散布図の菱形印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
縦棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
線グラフの線種を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
組をn回、連結する	aTuple * n
ある列のカテゴリ毎の最大値を求める	df.groupby('列A').max()
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列x, データ列y, color='firebrick')
ヒストグラムでリストを可視化する	plt.hist(データ列)
データフレームの選択したカラムの欠損値をxで埋める	df[['列A', '列B']].fillna(x)
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
赤いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのあるカラムを最初のカテゴリーを無視してダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
option: グラフの色をタンに設定する	color = 'tan'
エクセルから全てのシートを読む	pd.read_excel('file.xlsx', sheet_name=None)
折れ線グラフの星マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ダークマゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
実数の正弦を計算する	math.sin(x)
整数nの2進数表現	bin(n)
ヒストグラムの線の種類を実線に変更する	plt.hist(データ列, linestyle='solid')
散布図をブラウン色として描画する	plt.scatter(データ列x, データ列y, color='brown')
デックの左側	deq[0]
Excelファイルから複数のシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
プロット中の(x,y)の位置に補足を表示する	plt.legend(loc=(x, y))
散布図を四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの△印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
データフレームのカラムを説明変数にする	説明変数 = df[['列名', '列名2']]
データフレームの選択した列の欠損値をメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
配列をビン数nとしてビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
項目名がマッピングに存在していないとき、要素を追加する	aDict.setdefault(key, element)
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
入力ストリームを解放する	f.close()
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
データフレームの一部の列の中に文字列がある	df[['列A', '列B']].isin([value])
option: 平均を加える	showmeans = False
データフレームの選択したカラムの中にある日付データと文字列の合計をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
セットから要素を取り除く	aSet.remove(element)
eの実数乗	math.exp(x)
グラフの見栄えをよくする	import seaborn as sns
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
グラフの色を色差別なくする	sns.set(pallete='colorblind')
列の名前の一覧を使う	df.columns
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
折れ線グラフを赤い一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
等間隔で列をn個にビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
現在が水曜日か判定する	datetime.datetime.today().weekday() == 2
option: 色をアンティークホワイトに変更する	color = 'antiquewhite'
option: タン色を用いる	color = 'tan'
棒グラフをマルーン色を用いて描画する	plt.bar(データ列x, データ列y, color='maroon')
ファイルからn文字読み込む	f.read(n)
タプル内の要素が全て真かどうか調べる	all(aTuple)
二つの集合のユニオンを求める	aSet.union(aSet2)
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
数列と数列について散布図を描画し、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームのある列の値がx以上の行を抽出する	df[df['列A'] >= x]
あるカラムの値がx以上、y未満のデータを取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
レモンシフォン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
データシリーズを十の位で丸めて整数型にする	ds.round(-1).astype(int)
ヒストグラムの色をパレットトルコイズにする	plt.hist(データ列, color='paleturquoise')
列の文字列長を列として求める	ds.str.len()
ある列のカテゴリごとの分散	df.groupby('列A').var()
データ列の比率を円グラフで可視化する	plt.pie(データ列, startangle=90)
option: グラフの色をスプリンググリーンに指定する	color = 'springgreen'
散布図の星印を赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
リスト間のピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
option: ミントクリーム色を使う	color = 'mintcream'
サブクラスか調べる	issubclass(サブクラス, クラス)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
ヒストグラムをアリスブルー色として描画する	plt.hist(データ列, color='aliceblue')
データフレームのn行目をドロップする	df.drop(n, axis=0, inplace=True)
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ケンドール順位相関係数を使ってデータフレームの相関行列を算出する	df.corr(method='kendall')
option: モカシンにグラフの色を設定する	color = 'moccasin'
データフレームの選択したカラムの欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: カラムの名前をリストで設定する	names = 列名リスト
散布図を丸印で描画する	plt.scatter(データ列x, データ列y, marker='o')
JSON形式のファイルを読み込んで、dataとする	data = json.load(fin)
データシリーズを百の位で丸めて、整数型にする	ds.round(-2).astype(int)
折れ線グラフの色をインディアンレッドに変更する	plt.plot(データ列x, データ列y, color='indianred')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
ファイルをUTF8で開く]	open(filepath, encoding='utf-8')
配列のケンドールの順位相関係数を計算する	scipy.stats.kendalltau(配列, 配列2)
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
本日の曜日を見る	datetime.datetime.today().weekday()
option: ミッドナイトブルーにグラフの色を変更する	color = 'midnightblue'
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームの選択したカラムの歪み	df[['列A', '列B']].kurt()
無限の数列を求める	itertools.count()
option: 文字列の示すエンコーディングを使う	encoding = s
三変数の最小値	min(x, y, z)
データフレームのあるカラムの値がxより小さいデータを抽出する	df[df['列A'] < x]
データフレームの選択したカラムを丸めて整数型にする	df[['列A', '列B']].round().astype(int)
option: マーカーをクロスに変更する	marker = 'x'
実数を千の位で四捨五入する	round(x, -3)
option: ベージュ色を用いる	color = 'beige'
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
データフレームの一部のカラムを千の位で四捨五入して整数にする	df[['列A', '列B']].round(-3).astype(int)
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
文字列を紫色でプリントする	print(f'\033[35m{value}\033[0m')
2つのリストを改行で区切ってプリントする	print(value, value2, sep='\n')
正規分布によるパーセント・ポイント関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
異なる列をキーとしてデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
辞書を並べ直してJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
データフレームの選択した列の空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
半透明の一点鎖線としてデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
本日が日曜日	datetime.datetime.today().weekday() == 6
横方向に三つのデータフレームをくっつける	pd.concat([df, df2, df3], axis=1)
マッピングの項目名を列挙する	aDict.keys()
日付データからn時間を引く	aDate - datetime.timedelta(hours=n)
データフレームを複数の列を用いて昇順にソートし、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
タプルにキーワード引数として更新する	aDict.update(**kwargs)
散布図をホワイトスモーク色を使って描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームの指定した列の中に文字列が存在する	df['列A'].isin([value])
データフレームのある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
キーが辞書に存在するか調べる	key not in aDict
下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
option: コーンフラワーブルーを用いる	color = 'cornflowerblue'
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
データフレームの選択した列の中にいくつ欠損値があるか調べる	df[['列A', '列B']].isna().sum()
縦棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: オールドレース色を使用する	color = 'oldlace'
マップを空にする	aDict.clear()
折れ線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
数式の部分分数化を行う	sympy.apart(e)
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ロバスト推定として回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
リストとイテラブルの散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
option: フォントの色をダークグレーに設定する	color = 'darkgray'
文字列の左側からタブを除去する	s.lstrip('\t')
折れ線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
スタックの大きさを求める	len(deq)
データフレームの列の名前のリストを使う	df.columns
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
散布図をペルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='peru')
データフレームからランダムに一行を抽出する	df.sample()
データフレームの選択したカラムの未入力値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
丸マーカーを用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
変数について数式のインテグラルを求める	sympy.integrate(e, z)
文字列をセンタリングにする	s.center(文字列幅)
線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
ヒストグラムをタン色として描画する	plt.hist(データ列, color='tan')
配列とデータ列についての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
option: タンに色を設定する	color = 'tan'
実数を小数点以下第一位で丸める	round(x, 1)
データフレームの選択したカラムの尖度を算出する	df[['列A', '列B']].skew()
表から指定した３カラムのみ抽出する	df[['列A', '列B', '列C']]
２つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
線グラフの色をダークシアンにセットする	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
日付データが何月か知る	aDate.month
無限に文字列が繰り返すイテラブルを求める	itertools.repeat(element)
データフレームの末尾を見る	df.tail()
year年month月の日付をオブジェクト化する	datetime.date(year=year, month=month, day=1)
ミディアムスプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
ダークバイオレット色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
整数個からk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのカラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
ランダムフォレストでクラス分類をする	model = sklearn.ensemble.RandomForestClassifier()
句点文字を全部見る	string.punctuation
部分文字列によって文字列を二分する	s.partition(sub)
データフレームの中の列をビンニングする	pd.cut(df[col], aList)
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
データフレームを関数の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
バリーウッドにヒストグラムの色を指定する	plt.hist(データ列, color='burlywood')
ピーチパフ色としてヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
標準入力から1行だけ読み込む	sys.stdin.readline()
散布図の星印の太さを変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
タイムスタンプデータからn日分、減らす	aDatetime - datetime.timedelta(days=n)
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
グラフの色を濃くする	sns.set(pallete='deep')
データフレームを十の位で四捨五入する	df.round(-1)
散布図をフクシア色を使って描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
濃い青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
option: アクア色を用いる	color = 'aqua'
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームをあるカラムによって小さい順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
配列と数列について散布図を描いて、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
タプルをn回、加える	aTuple * n
イテラブルを配列にする	np.array(iterable)
ヒストグラムをハニーデュー色を用いて描画する	plt.hist(データ列, color='honeydew')
option: フォントの色をピーチパフに変更する	color = 'peachpuff'
スクリプトファイルのフォルダパス	os.path.dirname(os.path.abspath(__file__))
nの16進文字列を求める	hex(n)[2:]
データフレームの下100行を取り出す	df.tail(100)
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
配列と配列の散布図を描画して△マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: スカイブルー色を用いる	color = 'skyblue'
線グラフをロイヤルブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='royalblue')
線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
グラフの色を淡くする	sns.set(pallete='muted')
option: マゼンタ色を使用する	color = 'magenta'
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
タプルの各値を関数に適用した結果で並べる	sorted(aTuple, key=func)
L2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: エクセルシートの名前を指定する	sheet_name = ['A', 'B']
ある列の値ごとの合計	df.groupby('列A').sum()
縦棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightgreen')
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: マーカーを大バツに変える	marker = 'X'
データフレームの選択したカラムの未入力値を前の行の値に設定する	df[['列A', '列B']].fillna(method='ffill')
指定したカラムのNaNを直前の値で埋める	df['列A'].fillna(method='ffill')
データを最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: コーンズシルク色を用いる	color = 'cornsilk'
リストの長さだけ繰り返す	range(len(aList))
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
xの小数点以下'4'桁の文字列にする	':.4f'.format(x)
カウンタの最頻出な要素	aCounter.most_common()[0]
ペールグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
コロンで区切って二つの文字列を出力する	print(value, value2, sep=':')
タプルの末尾を捨てる	aTuple[:-1]
イテラブルとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
符号なしで整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
option: 耐火レンガ色を用いる	color = 'firebrick'
行列の列ごとの分散を使う	np.var(aArray, axis=0)
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
配列とリストについて散布図を描画して、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
数を浮動小数点数で除算した余り	x % y
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
2つの実行結果をカンマで区切って表示する	print(value, value2, sep=',')
コーンズシルク色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
縦棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
リストを黒色でプリントする	print(f'\033[30m{value}\033[0m')
データフレームの中の欠損値の数を求める	df.isna().sum()
option: ▼マーカーを用いる	marker = 'v'
グリーンイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
ファイルから書き込みストリームを開き]、fとする	f = open(filepath, mode='w')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
文字列が全て英数字か	s.isalnum()
option: ローングリーン色を使う	color = 'lawngreen'
文字列の両端から不要な空白を取り除く	s.strip()
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
ユーザが整数を入力する	int(input())
n割るn2を求める	n / n2
バイナリ書き込みできるようにファイルパスをオープンする]	open(filepath, mode='wb')
リストとデータ列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データシリーズの時刻を使う	ds.dt.hour
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
カテゴリで色付けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
文字列の終了位置より前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームのカラムのトリム平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
二つの列からグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
本日の曜日を整数で使う	datetime.datetime.today().weekday()
データフレームからランダムに5行を抽出する	df.sample(5)
カテゴリで色分けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
行列から重複を除いた配列を作る	np.unique(aArray)
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
リストのn番目のの要素	aList[n]
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: 整数型を使用する	dtype = np.int
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
モデルを学習する	model.fit(説明変数, 目的変数)
タプルを番号付けする	enumerate(aTuple)
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
option: 改行コードを動作環境依存に設定する	newline = None
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
データフレームのカーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
双方向キューのn番目に値を挿入する	deq.insert(n, element)
文字列の中でパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s)
タプルと組を加える	aTuple + aTuple2
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
カラム名を指定して二つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
グラフの縦軸の説明をuntitledに設定する	plt.ylabel('y軸ラベル')
ラジアンの角度を求める	math.degrees(x)
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
文字列を区切り記号で区切り、文字列リストに変換する	s.split(sep)
複数横に並べてデータ列を度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフの色をペルーにセットする	plt.plot(データ列x, データ列y, color='peru')
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
集合が空でないか調べる	len(aSet) != 0
最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
2つのカウンタの共通する要素	aCounter & aCounter2
文字列が十進数字か確認する	s.isdecimal()
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ミントクリーム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
オリーブにヒストグラムの色を指定する	plt.hist(データ列, color='olive')
ファイルパスを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
回帰分析をK最近傍法でする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
確率的勾配降下を用いてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
半透明の点線としてリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
表をインポートする	import pandas as pd
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
リストとイテラブルについての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
データフレームをある列の値毎に集約して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
書式で列をPandasの日付型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
カテゴリデータをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
実数の値が整数	x.is_integer()
行列の平均値を求める	np.mean(aArray)
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
折れ線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
データフレームから型リストで指定したデータ型の列のみ取り出す	df.select_dtypes(include=typeList)
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
棒グラフをインディゴ色を使って描画する	plt.bar(データ列x, データ列y, color='indigo')
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
カウンタからマッピングを引く	aCounter.subtract(aDict)
ライムグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
部分文字列かどうか調べる	sub in s
NaNがある行を削除してみる	df.dropna()
大文字・小文字を無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
ファイルパスがあるか調べる	os.path.exists(filepath)
折れ線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
破壊的にある列によって小さい順にデータフレームを整列する	df.sort_values(by='列A', ascending=True, inplace=True)
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
ダークマゼンタ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
イテラブルから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
行列の行列式	np.linalg.det(aArray)
データフレームの中の欠損値の合計を数える	df.isna().sum()
折れ線グラフをパレットトルコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
nのバイト長を見る	(n.bit_length() + 7) // 8
赤い右三角マーカーを配列と数列の散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='r')
文字列中にひとつでも非空白があるか	any(not c.isspace() for c in s)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフの左三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
列を四分位数で分割する	pd.qcut(ds, 4)
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
option: 先頭の列を行に指定する	index_col = 0
タプルのn番目からn2番目までの部分	aTuple[n:n2]
データフレームの選択した列の不偏標準偏差	df[['列A', '列B']].std()
折れ線グラフをレモンシフォン色を用いて描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
多次元データを多次元尺度構成法として濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
散布図をダークバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
ボックスチャートにラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームをある列の値を使ってグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
行列の行ごとの分散	np.var(aArray, axis=1)
option: オレンジに色を指定する	color = 'orange'
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
rgbの右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
x,yの複素数を求める	complex(x, y)
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
option: 上三角印を使用する	marker = '^'
タイムスタンプデータは何曜日か知る	aDatetime.weekday()
名前からカラーマップを見る	"plt.get_cmap(""カラーマップ名"")"
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
option: ダークスラテグレーにグラフの色をする	color = 'darkslategray'
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
横棒グラフを濃いシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ライトサーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をライトイエローにする	plt.hist(データ列, color='lightyellow')
ゼロ埋めしたブール型の配列	np.zeros(要素数, dtype=np.int32)
リストの末尾のn要素を除く	aList[:-n]
n2がnより大きく、かつ、n3より小さいか調べる	n < n2 and n2 < n3
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
ふたつの関係がサブセット	aSet.issubset(aSet2)
カウンタのキーとカウントを列挙する	aCounter.items()
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
n番目の列を外したデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データ列を全て日付データに変換する	pd.to_datetime(ds)
集合から別の集合を取り除く	aSet.difference_update(aSet2)
option: アクアマリンを使用する	color = 'aquamarine'
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームの選択した列の代表値を求める	df[['列A', '列B']].describe()
折れ線グラフをシーグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='seagreen')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ある列でデータフレームを降順に整列する	df.sort_values(by='列A', ascending=False)
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
グラフをスライド用に設定する	sns.set(context='talk')
あるカラムの文字列に部分文字列が含まれる行を取り出す	df[df['列A'].str.contains(部分文字列)]
散布図の▲印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
緑色で文字列をプリントする	print(f'\033[32m{value}\033[0m')
整数nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
xとyの商と余りを同時に算出する	divmod(x, y)
アルファベットの小文字を全部使う	string.ascii_lowercase
四角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
指定したカラムを整数に丸める	df['列A'].round()
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
文字列の先頭から部分文字列を除く	s.removeprefix(sub)
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
フローラルホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データ列を分割数nでビニングする	pd.cut(ds, n)
option: 黄色色を使う	color = 'yellow'
データフレームのあるカラムの時刻を使う	df['列A'].dt.hour
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
関数によってデータフレームをグループ化し、要約統計量を算出する	df.groupby(関数).describe()
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
データフレーム中の未入力値を消し、みる	df.dropna()
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
指定した列で集計し、それぞれの最小値を求める	df.groupby('列A').min()
データフレームの選択したカラムを百の位で四捨五入する	df[['列A', '列B']].round(-2)
安全に文字列の右端から部分文字列を取り除く	s.removesuffix(sub)
全要素を０で初期化した三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
縦棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
色付きの点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームを10の位で丸めて整数にする	df.round(-1).astype(int)
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
データフレームの指定したカラムの分散	df['列A'].var()
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
二つの文字列を改行で区切って出力する	print(value, value2, sep='\n')
マップの項目名の値	aDict[key]
データフレームの中に文字列と文字列がある	df.isin([value, value2])
グラフに水平方向の破線をつける	plt.axhline(y=0, linestyle='dashed')
列のそれぞれを関数でフィルタする	map(func, iterable)
分類モデルの平均２乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
option: 行列のデータ型を指定する	dtype = np.int8
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
双方向キューの値をインプレースに反転する	deq.reverse()
カウンタをシーケンスをカウントして、更新する	aCounter.update(iterable)
横棒グラフをアリスブルー色として描画する	plt.barh(データ列x, データ列y, color='aliceblue')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
0からnの範囲を使う	range(n)
句読点文字を全部見る	string.punctuation
三つのデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
グラフに水平方向の実線を設定する	plt.axhline(y=0, linestyle='solid')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
コロンで区切って二つの数値を出力する	print(value, value2, sep=':')
option: グラフの線の種類を一点鎖線に変更する	linestyle = 'dashbot'
データフレームの指定したカラムの標本分散	df['列A'].var(ddof=0)
二つのデータフレームを列名を指定して結合する	pd.merge(df, df2, on='列A')
数列とリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
option: グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
半透明の実線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
数式を因数分解する	sympy.factor(e)
データフレームから同じ内容のデータをドロップする	df.drop_duplicates(inplace=True)
リストの最後を除く	aList[:-1]
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
option: サンディーブラウン色を使う	color = 'sandybrown'
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
ピアソンとしてデータフレームの相関行列を求める	df.corr(method='pearson')
selectorsでマスクしたタプルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
縦棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
ライトシアン色としてヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
枠なしのデータラベルを入れる	plt.legend(frameon=False)
データフレームのカラム間のケンドールの順位相関係数を算出する	scipy.stats.kendalltau(df['列A'], df['列B'])
データフレームからランダムに5行を取り出す	df.sample(5)
グラフの色を全般的に暗くする	sns.set(pallete='dark')
データシリーズのNaNをその平均値で補う	ds.fillna(ds.mean())
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
散布図のマーカーを△印にする	plt.scatter(データ列x, データ列y, marker='^')
文字列をプリントする	print(value)
ヒストグラムを白くする	plt.hist(データ列, color='w')
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
タプルからキーの値	aDict.get(key)
8進文字列を整数にする	int(s, 8)
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
正規表現に文字列がマッチさせる	re.match(pattern, s)
インディゴ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
二つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
nがn2以上かどうか	n >= n2
配列の尖度を計算する	scipy.stats.kurtosis(配列, bias=False)
ヒストグラムの色をモカシンにする	plt.hist(データ列, color='moccasin')
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データ列の各データは何回出現するか見る	ds.value_counts()
option: 色をカーキに設定する	color = 'khaki'
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
データフレームをあるカラムによってグループ化する	df.groupby('列A')
option: ダークカーキを用いる	color = 'darkkhaki'
最大値でデータシリーズの欠損値を埋める	ds.fillna(ds.max())
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
predicateFuncが真となる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
プラットフォームのコードポイントの最大値を確認する	sys.maxunicode
現在が何秒か知る	datetime.date.today().second
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
散布図に赤い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='r')
配列の和	aArray + aArray2
線グラフを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 欠損値は無視する	dropna = True
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
行列の行ごとの標準偏差	np.std(aArray, axis=1)
数式を数値にする	float(e)
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
実行結果を白色にする	f'\033[37m{value}\033[0m'
日付データの曜日を整数で見る	aDate.weekday()
シーケンスにイテラブルを続けた列	itertools.chain(iterable, iterable2)
数式の数値を求める	float(e)
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームの選択したカラムの未入力値を最小値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
リストの要素を入れ替える	aList[i], aList[j] = aList[j], aList[i]
nが5で割り切れるか調べる	n % 5 == 0
白色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
ヒストグラムの色をイエローグリーンに指定する	plt.hist(データ列, color='yellowgreen')
キューの先頭から要素を取り出す	deq.popleft()
nをn2乗に増やす	n **= n2
文字列からISO8601形式で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
数列とリストの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの選択したカラムの分散を計算する	df[['列A', '列B']].var()
ダークスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
変数について数式の微分を求める	sympy.diff(e, z)
文字列をエンコーディングでバイト列にする	s.encode(encoding=encoding)
数値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
縦棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
あるカラムの欠損値をxに設定する	df['列A'].fillna(x)
イテラブルを関数でフィルタする	map(func, iterable)
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
ストリームから1バイト、読み込む	f.read(1)
列のコンビネーション	itertools.combinations(iterable, n)
文字列の末尾の文字を見る	s[-1]
散布図のダイアモンドマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
リストの末尾から値をポップする	aList.pop()
数値を白色にする	f'\033[37m{value}\033[0m'
イテラブルと配列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
表データを並べる	df.sort_values('キーとなる列')
両端キューの中に数値が含まれてるか	element in deq
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: 色をダーク・スラテグレーに設定する	color = 'darkslategrey'
リストのn番目に文字列を差し込む	aList.insert(n, element)
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
データフレームを二つの列によって集約する	df.groupby(['列A', '列B'])
データフレームのヒストグラムを横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名')
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
predicateFuncが真となる列の要素を除去する	itertools.dropwhile(predicateFunc, iterable)
リストとリストについて散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
ケンドール相関係数でデータフレームの一部の列の相関行列を算出する	df[['列A', '列B']].corr(method='kendall')
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: バイナリモードに設定する	mode = 'rb'
データフレームをグループ化し、ある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
データフレームを2つの列の値でグループ化し、要約統計量を計算する	df.groupby(['列A', '列B']).describe()
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
データフレームの選択したカラムの欠損値を後の行の値に増やす	df[['列A', '列B']].fillna(method='bfill')
データフレームの選択したカラムの値が欠損値か調べる	df[['列A', '列B']].isna()
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int)
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
オブジェクトが組に含まれないか	element not in aTuple
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
列の各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームの複数の列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
横軸の目盛りを非表示にする	plt.xticks([])
配列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
数列の推移を赤い実線を使って描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
書き込みモードでファイルをオープンする]	open(filepath, mode='w')
文字列をバイト列にする	bytes(s)
実行結果を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
赤色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
データフレームの指定したカラムの50パーセンタイルを求める	df['列A'].median()
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
折れ線グラフを四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
文字列はリストに含まれないか判定する	element not in aList
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
ミディアムパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データ列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
線グラフの色をイエローグリーンにセットする	plt.plot(データ列x, データ列y, color='yellowgreen')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
option: ダークカーキに色を設定する	color = 'darkkhaki'
上位集合	aSet.issuperset(aSet2)
データフレームの選択した列の統計量を確認する	df[['列A', '列B']].describe()
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
行列の列ごとの標準偏差	np.std(aArray, axis=0)
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
黒い丸マーカーを配列と数列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列はタプルに含まれないか調べる	element not in aTuple
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
option: ゴーストホワイト色を使う	color = 'ghostwhite'
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームのあるカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
変数を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
散布図を貝殻色を用いて描画する	plt.scatter(データ列x, データ列y, color='seashell')
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
option: ディムグレー色を用いる	color = 'dimgrey'
タイムスタンプデータからn分引く	aDatetime - datetime.timedelta(minutes=n)
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
データシリーズが正規分布からどれだけ、歪んでいるか確認する	ds.kurt()
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
折れ線グラフの▼マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列をカンマで区切って列挙する	s.split(',')
タイムスタンプデータが何秒か知る	aDatetime.second
勾配ブースティングとしてクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
リストの最後のn要素を捨てる	aList[:-n]
データフレームの選択したカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
SDGで回帰分析をする	model = sklearn.linear_model.SGDRegressor()
option: 文字列を区切り記号で用いる	sep = s
散布図をダークグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
カラーバーを横向きに設定する	plt.colorbar(orientation='horizontal')
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
option: シーグリーン色を使う	color = 'seagreen'
文字列から部分文字列を除く	s.replace(sub, '')
データフレームの指定したカラムの尖度を計算する	df['列A'].skew()
数列と配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
ファイルの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
横軸にラベルを付ける	plt.xlabel('x軸ラベル')
等間隔でn個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
指定した列を100の位で四捨五入して、整数型にする	df['列A'].round(-2).astype(int)
ライトスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
イテラブルを文字列に変換して、'改行で結合する	'\n'.join(map(str, iterable))
集合をイミュータブルなセットに変換する	frozenset(aSet)
黒い▲マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
毎回異なるように乱数を初期化する	random.seed()
色付きの破線として数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: フォントの色をアリスブルーに変更する	color = 'aliceblue'
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
日付データの年数	aDate.year
箱髭図をプロットし、、平均値を加える	plt.boxplot(データ列, showmeans=True)
rgbの大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
オリベドラブ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
線グラフの色を青紫にする	plt.plot(データ列x, データ列y, color='violet')
データフレームの指定の列に重複があれば、削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データフレームの選択したカラムの中に文字列と文字列がいくつあるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
線グラフをダークシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
nがセットのどれかか調べる	n in aSet
折れ線グラフの色をミディアムパープルに指定する	plt.plot(データ列x, データ列y, color='mediumpurple')
二つの集合が集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
オプションで、出力先をファイルにする	file = sys.open(filename, 'w')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
小さい順に二つの列によってデータフレームを破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
集合の全ての要素が別の集合に含まれるかどうか	aSet.issubset(aSet2)
横棒グラフをミディアムシアグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
イテラブルを変更不能な集合に変換する	frozenset(iterable)
あるカラムの値ごとの最小値	df.groupby('列A').min()
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
日付データと日付データの時間差を求める	aDate - aDate2
カラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームの選択したカラムの分位数	df[['列A', '列B']].quantile(パーセント/100)
option: グラフの色をホットピンクに変更する	color = 'hotpink'
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
データラベルをグラフの表示する	plt.legend()
option: グラフの色をティールに設定する	color = 'teal'
実行時の標準出力の出力先がターミナルか確認する	sys.stdout.isatty()
データフレームの列をヒストグラムとして描く	plt.hist(df[column])
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
スピアマン相関係数でデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='spearman')
集合が空か調べる	len(aSet) == 0
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
縦棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
リストをアンダーライン付き化する	f'\033[4m{value}\033[0m'
option: 改行コードを旧Macにセットする	newline = '\r'
散布図の△印を黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データ列を柱状図にする	plt.hist(データ列)
棒グラフをスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='steelblue')
クラス分類を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingClassifier()
散布図にバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
option: ゴーストホワイトに色を設定する	color = 'ghostwhite'
文字列の右端から部分文字列を除く	s.rstrip(sub)
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
option: フローラルホワイト色を使用する	color = 'floralwhite'
option: 分類木の最大深さを設定する	maxdepth = n
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: 右三角マーカーを加える	marker = '>'
プロットを論文用に設定する	sns.set(context='paper')
option: どのカラムも行にしない	index_col = None
疑似乱数を得る	random.random()
タプルを階層化マップにする	collections.ChainMap(aDict)
行列の内積を使う	np.dot(aArray, aArray2)
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
オブジェクトのバイトサイズを知る	sys.getsizeof(obj)
赤い下三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
０で全要素を初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
二つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
ファイルを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: エクセルファイルシートの名前を設定する	sheet_name = ['A', 'B']
データフレームの指定した列のKurtosis	df['列A'].kurt()
2を底とする小数点数の対数を求める	math.log2(x)
整数nがリストのひとつ	n in aList
リストの合計	sum(aList)
日付時刻データは日付時刻データより前か調べる	aDatetime < aDatetime2
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
異なる列をキーとしてデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
表のある列の値がx以上の行を抽出する	df[df['列A'] >= x]
あるカラムの文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
option: エンコーディングをUTF8にする	encoding = 'utf-8'
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
データシリーズの欠損値を平均値にする	ds.fillna(ds.mean())
リストが空か調べる	len(aList) == 0
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
下三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
集合に列を追加更新する	aSet.update(iterable)
データシリーズの欠損値を平均で埋める	ds.fillna(ds.mean())
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
データシリーズの中にが存在するか調べる	ds.isin([value])
変数を緑色にする	f'\033[32m{value}\033[0m'
配列の最小値	np.min(aArray)
ある列のカテゴリごとの合計	df.groupby('列A').sum()
データシリーズの中に文字列が含まれるか調べる	ds.isin([value])
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
データフレームの指定の列に重複があればドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
文字列をセパレータで区切り、列挙する	s.split(sep)
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
リストの長さ	len(aList)
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
itertoolsモジュールをインポートする	import itertools
データフレームのある列のパーセンタイルを計算する	df['列A'].quantile(パーセント/100)
配列の要素数を計算する	aArray.size
文字列を最初の部分文字列で二分し、残りの文字列を使う	s.partition(sub)[-1]
赤いダイアモンドマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
整数nが配列のいづれかか調べる	n in aArray
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
リストを緑色にする	f'\033[32m{value}\033[0m'
線の線の種類を一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データシリーズはどの程度、正規分布から尖っているか確認する	ds.skew()
データフレームの中にと日付データがあるか調べる	df.isin([value, value2])
データフレームのカラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
日付データが日付データより前か	aDate < aDate2
文字列が無限に続くイテラブルを得る	itertools.repeat(element)
option: グラフの色を青に設定する	color = 'blue'
データフレームの最後100行を抽出する	df.tail(100)
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
option: フォントの色をライトコーラルに指定する	color = 'lightcoral'
nからn2までのstepごとによるスライス	slice(n, n2, step)
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
数列と数列について散布図を描き、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: スラグレー色を使う	color = 'slategrey'
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
option: グラフの色を暗い赤に設定する	color = 'darkred'
整数nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
データフレームのn行まで抽出する	df[:n]
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
降順にある列でデータフレームを並べる	df.sort_values(by='列A', ascending=False)
ローングリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
散布図をポイント印を使用して描画する	plt.scatter(データ列x, データ列y, marker='.')
最大値でデータシリーズのNaNを置換する	ds.fillna(ds.max())
現在が土曜日か	datetime.datetime.today().weekday() == 5
UTF8としてファイルをオープンする]	open(filepath, encoding='utf-8')
nがタプルのどれかかどうか	n in aTuple
文字列を複数行対応として正規表現で分ける	re.split(pattern, s, flags=re.MULTILINE)
文字列の後ろから部分文字列を見つける	s.rfind(sub)
散布図を黒い丸マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列を区切りを使って区切って、列挙する	s.split(sep)
floatの最小値	sys.float_info.min
全てのシートを表計算から読み込む	pd.read_excel('file.xlsx', sheet_name=None)
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
文字列中から部分文字列を探す	s.find(sub)
外れ値を除いた配列の算術平均を算出する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
サポートベクター分類器を用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列の大文字小文字を変換する	s.casefold()
イテラブルから重複を取り除く	set(iterable)
データラベルを追記する	plt.legend(['凡例A', '凡例B'])
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: グラフの色をアンティークホワイトに変更する	color = 'antiquewhite'
縦棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
二つの文字列が同じか調べる	s == s2
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
多次元データをSVDとして淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
散布図のクロスマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
数列の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームからカテゴリデータのカラム名を列挙する	df.select_dtypes('object').columns
文字列はキーワード	keyword.iskeyword(s)
プラットホームがLinux	sys.platform.startswith('linux')
オプションで出力先を標準エラーに変更する	file = sys.stderr
両端キューは空でないか調べる	len(deq) != 0
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データフレームの指定したカラムを千の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
折れ線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ファイルを改行を取り除いて一行ずつ読む	f.readline()
タプルのオブジェクトが最初に見つかる位置	aTuple.index(element)
nが5で割り切れるかどうか調べる	n % 5 == 0
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
スペクトル分解を行う	model = sklearn.decomposition.PCA(n_components=n)
ブラック色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
散布図を暗い赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkred')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
二つの列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightgreen')
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームを行によって整列する	df.sort_index()
表から同じ内容の行を除く	df.drop_duplicates(inplace=True)
option: グラフの色をオーキッドに設定する	color = 'orchid'
カラムの歪みを計算する	scipy.stats.skew(df['列A'], bias=False)
データフレームを指定した列の値によってグループ化し、要約統計量を計算する	df.groupby('列A').describe()
ダークカーキにヒストグラムの色をする	plt.hist(データ列, color='darkkhaki')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
配列とイテラブルについて散布図をプロットしてマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データフレームの選択したカラムはどの程度、分散しているか確認する	df[['列A', '列B']].var()
データを四分位点としてスケーリングする	sklearn.preprocessing.RobustScaler().fit_transform(データ)
二つの列によってデータフレームを集約し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
折れ線グラフを赤い点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
ネイピア数	math.e
カラーテーマを明るくする	sns.set(pallete='bright')
nからいつまでも数え上げるする	itertools.count(start=n)
リストをひとつ飛ばしで抽出する	aList[::2]
データフレームの指定したカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
表データから10行を重複を認めてランダムにサンプリングする	df.sample(10, replace=True)
データフレームのNaNをメディアンにセットする	df.fillna(df.median())
nがn2以下、または、n3以上か確認する	n <= n2 or n >= n3
散布図の丸印の線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: ローングリーンにフォントの色を設定する	color = 'lawngreen'
フォレストグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
文字列に文字列中の部分文字列を全部置換する	s.replace(sub, newsub)
option: 濃いシアン色を用いる	color = 'darkcyan'
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
グラフのフォントを日本語に設定する	sns.set(font='IPAexGothic')
文字列リストにイテラブルを変換して、部分文字列で結合する	sub.join(map(str, iterable))
データフレームをソートして、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
日付データの日数を見る	aDate.day
nが3の倍数	n % 3 == 0
配列が何のデータ型か調べる	aArray.dtype()
ゼロ埋めされた整数型の配列を作る	np.zeros(要素数, dtype=np.int)
書き込みモードでファイルパスをオープンして]fとする	f = open(filepath, mode='w')
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
実数に実数を掛ける	x * y
異なる列をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
データフレームのn行以降選ぶ	df[n:]
散布図をrgbの▲マーカーを使ってプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
二つの数値をコロンで区切ってプリントする	print(value, value2, sep=':')
空のガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
列を多重集合に変換する	collections.Counter(iterable)
オールドレース色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
クラス分類の適合率と再現率の調和平均を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームのカラムの分散	df['列A'].var()
データフレームを2つのカラムで小さい順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
深紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
文字列を部分文字列で二つに区切って、先頭の文字列を求める	s.partition(sub)[0]
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
全要素を初期値で初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
データ列の変遷を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームをTSVファイルから読む	pd.read_csv('file.tsv', sep='\t')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
キーがマップに存在しないとき要素を追加する	aDict.setdefault(key, element)
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
ベクトルと同じ大きさの空行列を作成する	np.empty_like(aArray)
データシリーズの歪みを求める	ds.kurt()
集合から別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
リストとリストについて散布図を描き、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをパパイヤウィップ色を用いて描画する	plt.barh(データ列x, データ列y, color='papayawhip')
中央値で配列を分割する	pd.qcut(aArray, 2)
散布図に三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
散布図の丸印の色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: フォントの色をグリーンに変更する	color = 'green'
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図のバツ印の色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームの選択した列の相関行列をスピアマン相関係数で求める	df[['列A', '列B']].corr(method='spearman')
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: 色をダークバイオレットにセットする	color = 'darkviolet'
整数nをn2分の一にする	n //= n2
データフレームの選択したカラムにおいてどの値が頻出か見る	df[['列A', '列B']].mode()
散布図のクロスマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
等しい量になるようにビン数nで配列をビン分割する	pd.qcut(aArray, n)
グラフに鉛直方向の破線をつける	plt.axvline(x=0, linestyle='dashed')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
option: 紺碧にフォントの色を設定する	color = 'azure'
option: シャルトリューズにグラフの色を設定する	color = 'chartreuse'
横棒グラフをライトコーラル色として描画する	plt.barh(データ列x, データ列y, color='lightcoral')
散布図の上三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列中からパターンにマッチする文字列を探す	re.search(pattern, s)
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をブラウンに設定する	color = 'brown'
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
文字列の左側から空白を取り除く	s.lstrip(' ')
データフレームの選択した列の中央値を求める	df[['列A', '列B']].median()
カウンタのユニオン	aCounter | aCounter2
option: 色をビスクに設定する	color = 'bisque'
フローラルホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
文字列の右端から空白を取り除く	s.rstrip(' ')
日付データが日付データより後ろ	aDate > aDate2
リストを境界値としてデータ列を分割する	pd.cut(ds, aList)
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
重複ありで5行をランダムに表からサンプリングする	df.sample(5, replace=True)
カンマ区切りのファイルをヘッダなしで読む	pd.read_csv('file.csv', header=None)
ポイント印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: グラフの色をスプリンググリーンに変更する	color = 'springgreen'
逆順の双方向キュー	reversed(deq)
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
スレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
表データを関数でまとめたグループを使う	df.groupby(関数)
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
折れ線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
キューに要素をプッシュする	deq.append(element)
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
青い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
赤い破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
データフレームをグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ファイルパスをEUCで開く]	open(filepath, encoding='euc_jp')
カテゴリに並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
黒い▽マーカーをリストと配列の散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列の右側から改行を取り除く	s.rstrip('\n')
新しいリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
予測データのコンフュージョン・マトリックスを計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
リストをボックスチャートにする	plt.boxplot(データ列)
上位集合もしくは等しいかどうか調べる	aSet > aSet2
データフレームの信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
標準入力から1文字分読む	sys.stdin.read(1)
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
行によって昇順にデータフレーム全体をソートする	df.sort_index(ascending=True)
ヒストグラムをミディアムバイオレットレッド色として描画する	plt.hist(データ列, color='mediumvioletred')
二つの一番小さい値	min(x, y)
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
２つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
表データの下10行を抽出する	df.tail(10)
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
プラットホームはWindowsか	sys.platform.startswith('win32')
配列の平均の標準誤差を計算する	scipy.stats.sem(配列)
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストとしてデータフレームのある列を抽出する	df['列A'].values.tolist()
option: 三角マーカーを使用する	marker = '^'
小数点数の小数部を求める	math.modf(x)[0]
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
x座標の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
ダークオリーブグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
50パーセンタイルであるカラムの未入力値を埋める	df['列A'].fillna(df['列A'].median())
option: 三2ビット整数型を用いる	dtype = np.int16
データフレームをCSVファイルに小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
空のリスト	[]
ヒストグラムの色をアンティークホワイトにセットする	plt.hist(データ列, color='antiquewhite')
新しい文字列で正規表現にマッチした文字列を置換する	re.sub(pattern, newsub, s)
データフレームのカラムの一意な値	df[col].unique()
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
文字列は全て十進数字	s.isdecimal()
正規表現patternでまとめてデータフレームの選択したカラムの値をreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
青い実線でリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
標準出力のバッファをフラッシュする	sys.stdout.flush()
ダークサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
リストとリストについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
文字列を青色化する	f'\033[34m{value}\033[0m'
セットの補集合を求める	aSet.difference(aSet2)
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
二変数の最大値を求める	max(x, y)
nは何桁か	len(str(n))
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームの選択した列の文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
アクアマリン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのインデックスの名前を一度に付け直す	df.rename(index={x: y})
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフに▲印を加える	plt.plot(データ列x, データ列y, marker='^')
棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
データフレームをある列のカテゴリで集約し、、各グループごとの件数を知る	df.groupby('列A').size()
カテゴリで色付けして、データフレームの全カラムの相関を描画する	sns.pairplot(df, hue='カテゴリ列')
データフレームを百の位で四捨五入して、整数型にする	df.round(-2).astype(int)
コーラル色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
浮動小数点数が整数か調べる	x.is_integer()
osモジュールをインポートする	import os
オブジェクトがタプル型か調べる	isinstance(obj, tuple)
データフレームをある列によって昇順に整列する	df.sort_values(by='列A', ascending=True)
ある列の文字列が正規表現文字列にマッチしないデータを抽出する	df[~df['列A'].str.match(正規表現)]
データフレームの中の列を四分位数で分割する	pd.qcut(df[col], 4)
データフレームの一部の列の75パーセンタイル	df[['列A', '列B']].quantile(0.75)
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
散布図を大バツマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='X')
横棒グラフの縦幅をセットする	plt.barh(ラベル列, データ列, width=0.5)
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
nから無限に数え上げるする	itertools.count(start=n)
新しいヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
双方向キューの末尾に数値を付け加える	deq.append(element)
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
option: アンティークホワイトにグラフの色を変更する	color = 'antiquewhite'
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
配列をn個にビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
日付時刻データにn分分、足す	aDatetime + datetime.timedelta(minutes=n)
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
ふたつの列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
option: パウダーブルーを用いる	color = 'powderblue'
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
散布図をオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='orange')
option: グラフの色をマゼンタに指定する	color = 'magenta'
データシリーズの欠損値を直後の値で埋める	ds.fillna(method='bfill')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
option: BOM付きを用いる	encoding = 'utf_8_sig'
折れ線グラフの印を星にする	plt.plot(データ列x, データ列y, marker='*')
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
リストとイテラブルについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
シーケンスを文字列に変換して、タブで連結する	'\t'.join(map(str, iterable))
タイムスタンプデータの秒を見る	aDatetime.second
ダイアモンド印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
縦棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
列名を指定して2つのデータフレームを結合する	pd.merge(df, df2, on='列A')
横棒グラフをミディアムシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
散布図をトマト色を使って描画する	plt.scatter(データ列x, データ列y, color='tomato')
データシリーズのSkewnessを求める	ds.skew()
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
列名をリストで置き換える	df.columns = columns
ヒートマップで混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
横棒グラフの色をティールにする	plt.barh(データ列x, データ列y, color='teal')
最大値でデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
棒グラフをホットピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='hotpink')
実数のkを底とする対数を算出する	math.log(x, k)
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
option: シエナにグラフの色を変更する	color = 'sienna'
データフレームの指定した列を四捨五入して、整数型にする	df['列A'].round().astype(int)
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
option: NaNを無視する	nan_policy = 'omit'
データフレームの一部の列の統計量	df[['列A', '列B']].describe()
オブジェクトは浮動小数点数クラスかテストする	isinstance(obj, float)
データフレームの列のユニークな値を見る	df[col].unique()
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
option: タブをセパレータで使う	sep = '\t'
双方向キューの要素をインプレースに反転する	deq.reverse()
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
ヒストグラムの色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
平均値と標準偏差から乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
タイムスタンプデータの時刻	aDatetime.time()
棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategray')
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
配列の推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
円周率を使う	math.pi
二つのオブジェクトが等しいか	obj == obj2
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
マップからキーの値か、もしくは要素を得る	aDict.get(key, element)
カテゴリで色付けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
縦棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
nが5の倍数か	n % 5 == 0
変数が0に近づくときの数式の極限値を計算する	sympy.limit(e, z, 0)
破壊的に二つの列によって降順にデータフレームを並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
option: 紺碧を使う	color = 'azure'
option: フォントの色をレベッカパープルに設定する	color = 'rebeccapurple'
リストとリストについての散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
整数nのビット長を見る	n.bit_length()
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列の接尾辞が部分文字列か判定する	s.endswith(sub)
データフレームの一部のカラムの欠損値を最大値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
セットから全ての要素を除去する	aSet.clear()
指定した列の値で集計し、標準偏差を求める	df.groupby('列A').std()
縦棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ペルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
項目名が辞書上でまだ定義されていないか調べる	key not in aDict
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
プログラムの実行を正常に止める	sys.exit(0)
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategray')
データフレームを複数の列を用いて並べ直す	df.sort_values(by=['列A', '列B'])
数値の平方根を算出する	sympy.sqrt(e)
文字列中に部分文字列が含まれるか	sub in s
ケンドール相関係数でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
タプルをインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
縦棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
散布図の印の色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
綺麗なグラフを描画する	import seaborn as sns
四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
データフレームの選択した列の相関行列	df[['列A', '列B']].corr()
option: ブルーバイオレットに色を設定する	color = 'blueviolet'
option: n番目のカラムを行に設定する	index_col = n
ダークグレー色を使ってヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
日付時刻データが何月か知る	aDatetime.month
小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
rgbの左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
昇順に組の要素をソートする	sorted(aTuple, reverse=True)
データフレームを正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
イテラブルとリストの散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: ダークグレーを使う	color = 'darkgrey'
y座標の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
浮動小数点数の絶対値	math.fabs(x)
横棒グラフをアクア色を使って描画する	plt.barh(データ列x, データ列y, color='aqua')
データフレームの選択したカラムの不偏標準偏差	df[['列A', '列B']].std()
双方向キューの末尾の値	deq[-1]
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
ベクトルの合計値を求める	np.sum(aArray)
表データのあるカラムをタイムスタンプ型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
リストを箱ひげ図として可視化する	plt.boxplot(データ列)
データフレームをある列でグループ化し記述統計量を求める	df.groupby('列A').describe()
データフレームの中の列をビン数nで等量でビン分割する	pd.qcut(df[col], n)
折れ線グラフの下三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
右三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
リストが空でないか	len(aList) != 0
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームのNaNをドロップしてみる	df.dropna()
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
二つの整数最小公倍数	math.lcm(n, n2)
ロバスト回帰モデルを作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
リストとリストについて散布図を描画し、、大バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
要素を集合から取り除く	aSet.remove(element)
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
文字列が全て数値か調べる	s.isnumeric()
データフレームの一部のカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
オブジェクトのフィールドの値を見る	getattr(obj, プロパティ名)
ある列の値がxより大きく、yより小さい行を取り出す	df[(x < df['列A']) & (df['列A'] < y)]
黒い▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
nを8進表現に変換する	oct(n)
文字列中にひとつでも非ASCII文字が含まれる	any(not c.isascii() for c in s)
オブジェクトはタプル型	isinstance(obj, tuple)
ある列の文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
option: ペールグリーンを使用する	color = 'palegreen'
nが3で割り切れるかどうか調べる	n % 3 == 0
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
文字列はひらがなか調べる	('ぁ' <= ch <= 'ん')
折れ線グラフをカデットブルー色を使って描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
option: 黄緑色を使う	color = 'chartreuse'
option: グラフの種類を一点鎖線に指定する	linestyle = 'dashbot'
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームの指定したカラムはどの程度、正規分布から歪んでいるか見る	df['列A'].kurt()
最適な位置にデータラベルを表示する	plt.legend(loc='best')
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
rgbのポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフを茶色色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
ある列のカテゴリ毎の分散	df.groupby('列A').var()
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームのNaNをその平均で置き換える	df.fillna(df.mean())
点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームのあるカラムの秒	df['列A'].dt.second
リストのそれぞれを関数でフィルタする	map(func, iterable)
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
折れ線グラフのマーカーを▽にする	plt.plot(データ列x, データ列y, marker='v')
option: 紺にグラフの色を変更する	color = 'darkblue'
リストの四分位を可視化する	plt.boxplot(データ列)
データフレームのあるカラムがどの程度、正規分布から尖っているか見る	df['列A'].skew()
option: ホットピンクに色をセットする	color = 'hotpink'
青いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
実数を小数点数で割った剰余を計算する	math.remainder(x, x2)
リストをソートする	sorted(aList)
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
句読点文字を全部使う	string.punctuation
キューから指定した範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
文字列中に非アスキー文字がある	any(not c.isascii() for c in s)
データフレームの指定した列の未入力値をxに変更する	df['列A'].fillna(x)
文字列ひとつのりスト	[element]
ドジャーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
ビスク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
指定した列で集計し、平均値を求める	df.groupby('列A').mean()
本日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
option: 色をカーキにセットする	color = 'khaki'
データフレームをグループ化し、それぞれの個数を求める	df.groupby('列A').count()
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図にクロス印を使う	plt.scatter(データ列x, データ列y, marker='x')
データフレームの選択したカラムを小数点以下n桁で四捨五入する	df[['列A', '列B']].round(n)
option: ライトイエローを使う	color = 'lightyellow'
今日が月曜日か	datetime.datetime.today().weekday() == 0
スプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
実数で数を割って小数点以下を切り捨てる	x // y
カラムの相乗平均を求める	scipy.stats.gmean(df['列A'])
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームのあるカラムの中に文字列とが含まれるか確認する	df['列A'].isin([value, value2])
変数をアンダーライン付きで表示する	print(f'\033[4m{value}\033[0m')
データフレームの重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
リストを境界値としてリストをビニングする	pd.cut(aList, aList)
横棒グラフをゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='goldenrod')
文字列の変数名を数式に変換する	sympy.Symbol(s)
未定値	None
文字コードに対応する文字	chr(unicode)
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
イテラブルを横棒プロットにする	plt.barh(ラベル列, データ列)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
文字列をASCIIコードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
２つの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
その最小値でデータフレームのNaNを埋める	df.fillna(df.min())
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
タプルをリストにする	list(aTuple)
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
データフレームの末尾	df.tail()
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
option: ライトイエローにグラフの色をする	color = 'lightyellow'
実数を実数で除算した余り	x % y
マップの項目名とその値をペアとして取り出す	aDict.items()
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
nがn2で割り切れない	n % n2 != 0
リストから重複を取り除く	sorted(set(aList), key=aList.index)
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
nをn2で割る	n / n2
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
イテラブルを文字列リストに変換して、部分文字列によって結合する	sub.join(map(str, iterable))
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
nにn2をかけた値をnにする	n *= n2
option: ロージーブラウン色を使用する	color = 'rosybrown'
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
等差数列から整数乱数を算出する	random.randrange(start, end, step)
データフレームの選択したカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームの列の文字列長を列として求める	df[col].str.len()
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
option: ダークマゼンタにフォントの色を設定する	color = 'darkmagenta'
棒グラフをシエナ色を用いて描画する	plt.bar(データ列x, データ列y, color='sienna')
作画のフォントを日本語にする	sns.set(font='IPAexGothic')
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
データフレームをCSVファイルにヘッダを付けず保存する	df.to_csv('file.csv', header=None)
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
実行結果を緑色で表示する	print(f'\033[32m{value}\033[0m')
データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
ヒストグラムの色を貝殻にセットする	plt.hist(データ列, color='seashell')
部分文字列かテストする	sub in s
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
データフレームのカラムの尖度を算出する	scipy.stats.kurtosis(df['列A'], bias=False)
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
棒グラフをパールバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palevioletred')
あるカラムのカテゴリごとの標準偏差	df.groupby('列A').std()
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
散布図に黒い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='k')
カウンタ間で共通部分	aCounter & aCounter2
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
イテラブルとリストの散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
淡い茶色色のヒストグラムを描画する	plt.hist(データ列, color='tan')
あるカラムの値がxに等しく、かつ別の列の値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
ファイルパスの拡張子付きのファイル名	os.path.basename(filepath)
現在の秒数	datetime.date.today().second
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
表データをグループ化し、標準偏差を算出する	df.groupby('列A').std()
線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
nではない	not n
折れ線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムを上限から下限の上限下限で描く	plt.hist(データ列, range=(start, end))
配列のn次モーメントを使う	scipy.stats.moment(配列, moment=n)
エクセルファイルからシートを指定してデータフレームを読む	pd.read_excel('file.xlsx', sheet_name=シート名)
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
xが1もしくは2、もしくは3に等しいかどうか判定する	x == 1 or x == 2 or x == 3
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフの大バツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: フォントの色を貝殻に変更する	color = 'seashell'
データフレームの選択した列の不偏分散を求める	df[['列A', '列B']].var(ddof=1)
折れ線グラフの▲マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
列からn個、ランダムに選ぶ	random.choices(iterable, k=n)
replにデータフレームの一部のカラムの値を正規表現patternでまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
線グラフをブラック色を用いて描画する	plt.plot(データ列x, データ列y, color='black')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
y座標の目盛を対数に変更する	plt.yscale('log')
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
option: アンティークホワイトに色を設定する	color = 'antiquewhite'
データフレームの指定したカラムの中に日付データがあるか	df['列A'].isin([value])
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
横棒グラフをダークオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='darkorchid')
データフレームの数値をまとめて四捨五入する	df.round()
黄色色でヒストグラムを描画する	plt.hist(データ列, color='yellow')
n2がnより大きく、かつ、n3より小さい	n < n2 and n2 < n3
UNIX秒の列からPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
データシリーズの尖度を計算する	ds.skew()
日付時刻データの日数	aDatetime.day
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
文字列を空白で分割して、整数のリストに変換する	map(int, s.split())
棒グラフをアクア色を用いて描画する	plt.bar(データ列x, データ列y, color='aqua')
シャルトリューズにヒストグラムの色を変更する	plt.hist(データ列, color='chartreuse')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
横棒グラフを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
2つの表データを列名を指定してジョインする	pd.merge(df, df2, on='列A')
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
option: マーカーの色を淡い茶色にする	markerfacecolor = 'tan'
折れ線グラフに四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
オプションで標準出力に出力する	file = sys.stdout
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
文字列を最初の部分文字列で分けたときの左側の文字列を取り出す	s.partition(sub)[0]
ターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
タプルを展開して表示する	print(*aTuple)
配列とリストについて散布図を描いて、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームの指定したカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームの欠損値を前の値で置換する	df.fillna(method='ffill')
option: 文字列をセパレータで使う	sep = s
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
option: グラフの色をオリーブに設定する	color = 'olive'
option: スラッシュを区切り記号で使う	sep = '/'
ファイルパスをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
列をPandasの日付型に変換する	pd.to_datetime(df['列A'])
折れ線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
オブジェクトは文字列型のインスタンスか確認する	isinstance(obj, str)
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
ピアソンを用いてデータフレームの相関行列を求める	df.corr(method='pearson')
黒いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームがどれだけ、正規分布から尖っているか見る	df.skew()
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
列名を指定して二つのデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
グラフを描画する	import matplotlib.pyplot as plt
データフレームの歪度	df.kurt()
両端キューの左に文字列を入れる	deq.appendleft(element)
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
折れ線グラフの色をミディアムブルーにする	plt.plot(データ列x, データ列y, color='mediumblue')
option: フォントの色をダークカーキに設定する	color = 'darkkhaki'
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
降順にある列によって破壊的にデータフレームをソートする	df.sort_values(by='列A', ascending=False, inplace=True)
指定した列の欠損値を直後の値にセットする	df['列A'].fillna(method='bfill')
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
n引くn2を算出する	n - n2
リストのピアソンの積立相関係数	scipy.stats.pearsonr(数列, 数列2)
二つの変数を出力する	print(value, value2)
配列の変遷を破線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
数値を紫色で表示できる文字列に変換する	f'\033[35m{value}\033[0m'
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データ列のUNIX秒を日付データにする	pd.to_datetime(ds, unit='s', utc=True)
文字列の先頭を使う	s[0]
option: レモンシフォンを用いる	color = 'lemonchiffon'
option: 色をラベンダーに変更する	color = 'lavender'
データフレームのn行目を消し、	df.drop(n, axis=0)
グラフの用途をポスターに設定する	sns.set(context='poster')
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
ブール型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
データフレームの要約統計量を求める	df.describe()
データフレームが重複しているかどうか	df.duplicated()
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
option: ブール型を用いる	dtype = np.int32
文字列リストをひとつの文字列にする	''.join(aStringList)
option: ドジャーブルーを用いる	color = 'dodgerblue'
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ブラウン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
配列とリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
ある列のカテゴリの合計	df.groupby('列A').sum()
ディレクトリを求める	os.getcwd()
整数nを二進文字列にする	bin(n)[2:]
リストとリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
rgbの星マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
切り捨てながらnをn2分の一にする	n //= n2
キュー中の数値を数える	deq.count(element)
両端キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
データフレームをある列のカテゴリを用いてグループ分けしてそれぞれのグループごとの件数を知る	df.groupby('列A').size()
赤い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
ミディアムオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ビスク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
辞書にキーが存在する	key in aDict
nとn2が等しい	n == n2
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
option: フォントの色をミディアムオーキッドに設定する	color = 'mediumorchid'
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
文字コードを文字にする	chr(unicode)
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームの選択したカラムを整数に四捨五入する	df[['列A', '列B']].round()
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
ヒストグラムの色をコーラルにセットする	plt.hist(データ列, color='coral')
配列のモードを求める	mode, count = scipy.stats.mode(配列)
数式を浮動小数点数に変換する	float(e)
区間数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
リストとリストの散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: グラフの色をライムグリーンに変更する	color = 'limegreen'
指定した列リストのみデータフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
要素がセットに含まれないかテストする	element not in aSet
ふたつの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
両端キューに要素をプッシュする	deq.append(element)
マッピングのキーの値を見る	aDict[key]
option: スラグレー色を使用する	color = 'slategrey'
option: フォントの色をハニーデューにセットする	color = 'honeydew'
最大長のある両端キュー	collections.deque(maxlen=n)
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
日付データが日曜日か確認する	aDate.weekday() == 6
空のリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgrey')
散布図をシアン色として描画する	plt.scatter(データ列x, データ列y, color='cyan')
ホワイトスモーク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
既存のベクトルを元に全要素が0の配列	np.zeros_like(aArray)
イエローグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
文字列を別の文字列によって置き換える	s.replace(sub, newsub)
データフレームから散布図を作り回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
配列とリストについて散布図をプロットし、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ミディアムスレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumslateblue')
線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
year年month月day日の日付をオブジェクト化する	datetime.date(year=year, month=month, day=day)
データ列のエポック秒を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
縦棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
デックの末尾から値を取り除く	deq.pop()
折れ線グラフに青いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ある列の値毎の最小値	df.groupby('列A').min()
nを否定する	not n
オーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
表を異なる列をキーとして全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムを描いて、ビン数を変更する	plt.hist(データ列, bins=区関数)
部分文字列	sub in s
読み込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='r')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, markersize=2.0)
イテラブルをカウントしてカウンタを更新する	aCounter.update(iterable)
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームを関数の値でグループ化し、要約統計量を計算する	df.groupby(関数).describe()
ある列の文字列に部分文字列が含まれる行を抽出する	df[df['列A'].str.contains(部分文字列)]
多次元データをt-SNEを用いてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
値を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
option: グラフの色を青にセットする	color = 'blue'
あるカラムの値がx以上、y未満の行を取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
ヒストグラムをナバホホワイト色を使って描画する	plt.hist(データ列, color='navajowhite')
シーケンスから最大長nの両端キューを生成する	collections.deque(iterable, maxlen=n)
ボックスチャートを横に並べて描く	plt.boxplot([データ列, データ列])
二進数文字列を整数に変換する	int(s, 2)
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
プラットフォームの符号付き整数の最大値を確認する	sys.maxsize
option: カンマを区切りで使用する	sep = ','
実数が無限大か判定する	math.isinf(x)
標準入力から1行分読む	sys.stdin.readline()
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
スノー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
ふたつの集合の共通部分を算出する	aSet.intersection(aSet2)
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
浮動小数点数の二乗	x ** 2
タプルのn番目以降の部分を取り出す	aTuple[n:]
データフレームをある列の値で欠損値を含めてグループ化する	df.groupby('列A', dropna=False)
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
データフレームから10行をランダムに選択する	df.sample(10)
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
データ列とリストについて散布図を描画し、、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
列名を指定してデータフレームをジョインする	pd.merge(df, df2, on='列A')
ヒストグラムの色を深紅に指定する	plt.hist(データ列, color='crimson')
セパレータで文字列を分割して、列挙する	s.split(sep)
文字を文字コードに変換する	ord(ch)
折れ線グラフの色を黄緑にセットする	plt.plot(データ列x, データ列y, color='chartreuse')
非英数字が文字列中にあるか調べる	any(not c.isalnum() for c in s)
インプレースに双方向キューの要素を反転する	deq.reverse()
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
リストの最後を捨てる	aList[:-1]
option: ベクトルのデータ型を指定する	dtype = np.int
日付時刻データが何時か知る	aDatetime.hour
データ列とリストについての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
リストを赤色化する	f'\033[31m{value}\033[0m'
データフレームの指定した列のNaNを後の行の値に減らす	df['列A'].fillna(method='bfill')
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
実数の双曲線正接を求める	math.tanh(x)
データフレームのある列の値がxより少ない行を抽出する	df[df['列A'] < x]
文字列の末尾から余分な空白を除く	s.rstrip()
組の末尾からn番目以前の部分を取り出す	aTuple[:-n]
日付時刻データが木曜日か確認する	aDatetime.weekday() == 3
データフレームをある列の値によって集約し、、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
ヒストグラムの色をライトイエローにセットする	plt.hist(データ列, color='lightyellow')
棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
列を集合に追加更新する	aSet.update(iterable)
リストの値のみ出力する	print(*aList)
リストとイテラブルについて散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
浮動小数点数が有限か調べる	math.isfinite(x)
option: 色の透明度を変更する	alpha = 0.5
整数nのバイト長を確認する	(n.bit_length() + 7) // 8
逆順の両端キュー	reversed(deq)
線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフをスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのあるカラムを行にセットする	df.set_index('列A')
数式を簡単化する	sympy.sympify(e)
現在のタイムスタンプ	int(time.time())
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
キーが辞書上で定義済みか調べる	key in aDict
データフレームの未入力値を前の値で補完する	df.fillna(method='ffill')
チョコレート色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
option: 色をナバホホワイトに変更する	color = 'navajowhite'
データフレームの列の中央値	df['列A'].median()
上限から下限までの範囲でヒストグラムを描く	plt.hist(データ列, range=(start, end))
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
2つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
タプルの平均値	sum(aTuple)/len(aTuple)
未入力値が存在する行を削除してみる	df.dropna()
今日が何曜日か知る	datetime.datetime.today().weekday()
表計算ファイルから複数のシートを指定してデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: ブラウン色を使う	color = 'brown'
最大値として正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
グラフのパレットを淡くする	sns.set(pallete='muted')
リストを逆順にする	reversed(aList)
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
淡くカラーパレットをグラフの描画で使う	sns.set(pallete='muted')
正則化付き線形回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
縦棒グラフをオレンジレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orangered')
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
ファイルのディレクトリ名	os.path.dirname(filepath)
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
nを十六進文字列にする	hex(n)[2:]
データフレームを関数によって集約して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
配列の最頻値を求める	mode, count = scipy.stats.mode(配列)
option: スキップする列番号をnamesで指定する	skiprows = names
ランダムにデータフレームから抽出する	df.sample()
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
データフレームを二つの列の値によってグループ分けする	df.groupby(['列A', '列B'])
グラフで使える色の一覧を使う	matplotlib.colors.cnames
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
列名を指定して2つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
折れ線グラフを一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
プロットの背景色を白くする	sns.set(style='whitegrid')
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
表データのあるカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
ふたつのリストの積集合	list(set(aList) & set(aList2))
ライトスレイグレーにヒストグラムの色をする	plt.hist(データ列, color='lightslategrey')
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
option: カーキにグラフの色を変更する	color = 'khaki'
両端キューのn番目	deq[n]
option: ダークシアグリーンに色をセットする	color = 'darkseagreen'
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
本日は何日か知る	datetime.datetime.today().day
カラムの名前なしでCSVファイルを読み込む	pd.read_csv('file.csv', header=None)
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
線グラフをリネン色を用いて描画する	plt.plot(データ列x, データ列y, color='linen')
実数の自然対数	math.log(x)
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
文字列の右端から空白を除く	s.rstrip()
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームをValueMapでまとめて変更する	df.replace(ValueMap)
データフレームのある列を配列として抽出する	df['列A'].values
両端キューのstart〜endの値	collections.deque(itertools.islice(deq, start, end))
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの選択した列を千の位で四捨五入する	df[['列A', '列B']].round(-3)
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
ヒストグラムの色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
カウンタを集合に変換する	set(aCounter)
option: マーカーの大きさを指定する	markersize = 2.0
線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
ミディアムシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
青い一点鎖線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
データフレームの中の列をn個に等間隔で分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストと列の直積を得る	itertools.product(iterable, iterable2)
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
リストと配列についての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
列を指定して重複を取り除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
決定木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
リストをアンダーライン付きで出力する	print(f'\033[4m{value}\033[0m')
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
リストの中の最小値を求める	min(aList)
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
大量のデータが正規分布に従うかどうか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
カウンタを高頻度方から列挙する	aCounter.most_common()
半透明の一点鎖線を用いて折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームの指定した列を100の位で丸める	df['列A'].round(-2)
半透明の一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
赤い四角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
両端キューをイテラブルから用意する	collections.deque(iterable)
データ列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのあるカラムの中のNaNの数を数える	df['列A'].isna().sum()
データフレームを行によってソートする	df.sort_index()
折れ線グラフの色をホットピンクにセットする	plt.plot(データ列x, データ列y, color='hotpink')
文字列を記号にして、パラメータにする	z = sympy.Symbol(s)
縦棒グラフを描き、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列中の部分文字列を数える	s.count(sub)
指定した列の欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
カラムのNaNを最頻値で補完する	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
option: シエナ色を使う	color = 'sienna'
値を白色化する	f'\033[37m{value}\033[0m'
ヒストグラムと勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
データフレームから重複を残さず重複を消す	df.drop_duplicates(keep=False)
ValueMapで全部データフレームを置き換える	df.replace(ValueMap)
破線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
本日が木曜日か確認する	datetime.datetime.today().weekday() == 3
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
四分位点としてスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームの中に存在する日付データの数を求める	df.isin([value]).sum()
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
TSVからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
ふたつの集合がセットと互いに素	aSet.isdisjoint(aSet2)
文字列がリストの要素か確認する	element in aList
'A'列の値がxに等しい行を選択する	df[df['列A'] == x]
リストの値を関数に適用した結果で並べ変える	sorted(aList, key=func)
空集合	set()
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフのマーカーを上三角印にする	plt.plot(データ列x, データ列y, marker='^')
数の2乗	x ** 2
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
双方向キューの末尾から要素を取り除く	deq.pop()
データフレームの中のカラムをビン数nとしてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ベクトルのユニークな要素	np.unique(aArray)
散布図の丸マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: アイボリーにグラフの色を設定する	color = 'ivory'
既存のファイルを追加できるようにBOM付きとしてオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
既存の行列を元にして全要素が0の行列を作成する	np.zeros_like(aArray)
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
文字列中にひとつでも非大文字が含まれる	any(not c.isupper() for c in s)
データフレームの選択したカラムの母標準偏差を求める	df[['列A', '列B']].std(ddof=0)
ライトイエロー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: 改行コードをUNIXにする	newline = '\n'
散布図の右三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
option: エラーがあるとき、例外を発生させるように指定する	errors = 'strict'
ヒストグラムの色を青紫に変更する	plt.hist(データ列, color='violet')
option: サンディーブラウンにフォントの色を設定する	color = 'sandybrown'
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
データシリーズの中に文字列と文字列があるかどうか	ds.isin([value, value2])
ある列の文字列が正規表現文字列にマッチしない行を取り出す	df[~df['列A'].str.match(正規表現)]
リストの末尾からn番目以前の部分を得る	aList[:-n]
イテラブルをイミュータブルなセットにする	frozenset(iterable)
丸印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
option: グラフの色をオリベドラブに変更する	color = 'olivedrab'
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
十六進文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
データフレームをグループ化し、それぞれの最小値を計算する	df.groupby('列A').min()
実数が整数かどうか調べる	x.is_integer()
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
レベッカパープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
ベクトルにはいくつ要素があるか調べる	aArray.size
行列を2次元1行に変形する	aArray.reshape(1, -1)
データ列をヒストグラムで可視化する	plt.hist(データ列)
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
散布図の▲マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
破線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
二つのデータフレームを横向きに合体させる	pd.merge(df, df2)
複数のリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
ディレクトリを見る	os.getcwd()
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
多次元データをt-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
▽印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
option: 色をディムグレーに設定する	color = 'dimgrey'
ライトグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
指定したカラムを千の位で四捨五入する	df['列A'].round(-3)
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='grey')
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データ列の比率を円プロットを使って可視化する	plt.pie(データ列, startangle=90)
文字列を改行で区切り文字列リストにする	s.splitlines()
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
option: 箱ヒゲ図に平均を追記する	showmeans = False
ミスティローズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
nがn2かどうか調べる	n == n2
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
散布図をrgbの左三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームの選択したカラムの未入力値をxに設定する	df[['列A', '列B']].fillna(x)
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
数列とリストについて散布図を描画し、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色をダークオレンジにセットする	plt.hist(データ列, color='darkorange')
データフレームの列名を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
整数nを八進表現に変換する	oct(n)
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
表データのあるカラムが何月か知る	df['列A'].dt.month
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ファイルをSJISで開く]	open(filepath, encoding='shift_jis')
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
正規分布の累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
インディゴにヒストグラムの色を設定する	plt.hist(データ列, color='indigo')
データフレームの指定した列の値が欠損値	df['列A'].isna()
行列のユニークな要素を計算する	np.unique(aArray)
数列と配列の散布図を描画して、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
リストとデータ列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
タプルのn番目の	aTuple[n]
ピアソンの相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
option: 32ビット整数型を使う	dtype = np.int16
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
ファイルパスがないか調べる	not os.path.exists(filepath)
ある列の値がx以上のデータを選択する	df[df['列A'] >= x]
option: オレンジレッドを使う	color = 'orangered'
option: グラフの色をミディアムオーキッドにセットする	color = 'mediumorchid'
乱数で要素を埋めた配列	np.random.random(N)
ファイルをバイナリ書き込みモードを用いてオープンして]fとする	f = open(filepath, mode='wb')
縦棒グラフをダークレッド色として描画する	plt.bar(データ列x, データ列y, color='darkred')
文字列の先頭の文字	s[0]
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
指定した列のカテゴリで集計し、合計を求める	df.groupby('列A').sum()
シルバー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列をパターンで分ける	re.split(pattern, s)
option: 色をダークシアンにセットする	color = 'darkcyan'
option: コーラルにグラフの色を設定する	color = 'coral'
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
空の辞書を作成する	{}
浮動小数点数を百の位で四捨五入する	round(x, -2)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
x軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
option: 色をターコイズに設定する	color = 'turquoise'
データフレームの列の名前一覧	df.columns
option: 小麦色色を使用する	color = 'wheat'
データフレームの選択したカラムのNaNを前の行の値で補完する	df[['列A', '列B']].fillna(method='ffill')
二つの浮動小数点数は十分に近い	math.isclose(x, x2)
折れ線グラフをダークターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: パールゴールデンロッドを使う	color = 'palegoldenrod'
実数のアークコサイン	math.acos(x)
データフレームの選択したカラムを100の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
貝殻色として線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームの指定した列を十の位で丸める	df['列A'].round(-1)
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
nとn2の論理積	n & n2
マゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
文字列を区切りで分割して、列挙する	s.split(sep)
option: ディムグレーを使う	color = 'dimgrey'
部分文字列で文字列が終わるかどうか	s.endswith(sub)
オブジェクトは浮動小数点数型か	isinstance(obj, float)
逆正接	math.atan(x)
数列とイテラブルについての散布図にrgbの△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: ライトスレイグレーにフォントの色を設定する	color = 'lightslategray'
辞書のキーとそのエントリを列挙する	aDict.items()
本日のローカルなタイムスタンプを使う	datetime.datetime.today()
データシリーズの標本標準偏差	ds.std(ddof=1)
データフレームの一部の列のNaNを中央値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
多次元尺度構成法で多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
リスト中のオブジェクトが最初に見つかる場所	aList.index(element)
データフレームをソートし、、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
ランダムに重複を認めてn行をデータフレームからサンプリングする	df.sample(n, replace=True)
ある列の値がxより大きいデータを抽出する	df[df['列A'] > x]
折れ線グラフを半透明の破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
行列の行列積を使う	np.matmul(aArray, aArray2)
淡いピンク色にヒストグラムの色を変更する	plt.hist(データ列, color='lightpink')
グラフの色をパステル調にする	sns.set(pallete='pastel')
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
リストを分割数nを用いてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
文字列中のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
option: 耐火レンガを使う	color = 'firebrick'
リストとリストについて散布図を描き、ポイントマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
option: ピンク色を用いる	color = 'pink'
線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
横棒グラフをダークカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
リストとリストについての散布図にrgbの▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データシリーズの分を求める	ds.dt.minute
日付データにn分分加える	aDate + datetime.timedelta(minutes=n)
何回まで再帰ができるか	sys.getrecursionlimit()
今日のローカルな日付を使う	datetime.date.today()
棒グラフをドジャーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
丸印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
データシリーズのパーセンタイルを計算する	ds.quantile(パーセント/100)
option: グラフの色をスラグレーに設定する	color = 'slategrey'
データフレームの文字列を未入力値に変換する	df.replace(値, np.nan)
デックの先頭からデータを削除する	deq.popleft()
棒グラフをライトスレイグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightslategray')
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列の推移を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データシリーズの中にある文字列の合計を数える	ds.isin([value]).sum()
ヒストグラムをスレートブルー色を用いて描画する	plt.hist(データ列, color='slateblue')
散布図に青い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: 淡いピンク色色を用いる	color = 'lightpink'
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
グリッドを実線にする	plt.grid(linestyle='solid')
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
リストと数列についての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
文字列は数値か調べる	s.isnumeric()
デフォルトスタイルを適用する	sns.set()
ある列の文字列に部分文字列が含まれる行を取り出す	df[df['列A'].str.contains(部分文字列)]
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームのカラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
折れ線グラフに星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
predicateFuncが真になるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
文字列をISO8601として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
option: グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
整数nが組のいづれかか調べる	n in aTuple
色付きの実線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
散布図の三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ヒストグラムをホワイトスモーク色を用いて描画する	plt.hist(データ列, color='whitesmoke')
数式を部分分数に展開する	sympy.apart(e)
データフレームを万の位で四捨五入する	df.round(-4)
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
角度のラジアン	math.radians(degree)
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
実数のn乗を求める	pow(x, n)
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
行列の各要素に加算する	aArray + aArray2
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
青い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ふたつのマップを結合する	aDict | aDict2
折れ線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
option: ダークシアグリーンを用いる	color = 'darkseagreen'
グラフをいい感じに設定する	sns.set()
マゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
データシリーズを整数に四捨五入する	ds.round()
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
1行から2つの浮動小数数値を読む	A, B = map(float, input().split())
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
アクア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームの全カラムの相関をグラフ化する	sns.pairplot(df)
値が集合に含まれない	element not in aSet
3つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
option: ライトブルーを用いる	color = 'lightblue'
カラーコードで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategrey')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
8進文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
縦棒グラフをホワイトスモーク色を用いて描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
xが1、もしくは2	x == 1 or x == 2
データフレームの中の列を等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
散布図の下三角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
自然数の並べ方の総数を求める	math.perm(n)
線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
横棒グラフをアンティークホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
データフレームのある列を消す	df.drop('列A', axis=1, inplace=True)
配列の値	aArray[行番号, 列番号]
今日をタプルに変換する	datetime.datetime.today().timetuple()
データシリーズの標準偏差	ds.std()
文字列のn番目の文字	s[n]
データシリーズの尖度	ds.skew()
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
2つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
rgbの大バツマーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
何か試しに動かしてみる	print('Hello World')
折れ線グラフを青い点線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
文字列中の文字を列挙する	list(s)
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
二つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
縦棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームの列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
カラーバーを水平でつける	plt.colorbar(orientation='horizontal')
データフレームの一部のカラムの50パーセンタイル	df[['列A', '列B']].median()
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
列をn個にビン分割する	pd.cut(ds, n)
棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
データシリーズの分散	ds.var()
option: レモンシフォン色を使う	color = 'lemonchiffon'
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
データフレームの一部のカラムが正規分布からどの程度、尖っているか調べる	df[['列A', '列B']].skew()
配列と配列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
数列とデータ列の散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
データフレームのカラムの第三四分位数	df['列A'].quantile(0.75)
クラス分類の正確さを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
カデットブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフの四角印を青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
エンコーディングを確認する	sys.getdefaultencoding()
現在の再帰の最大回数を調べる	sys.getrecursionlimit()
表データのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
option: 色をナバホホワイトに指定する	color = 'navajowhite'
option: フォントの色をスカイブルーに変更する	color = 'skyblue'
横棒グラフをゴールド色として描画する	plt.barh(データ列x, データ列y, color='gold')
ヒストグラムの色をブラックにする	plt.hist(データ列, color='black')
線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
列の文字列長を列として使う	ds.str.len()
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
データシリーズの中にある文字列と日付データの合計を調べる	ds.isin([value, value2]).sum()
リストと配列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
行列をベースにして全要素が0の行列	np.zeros_like(aArray)
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
ロバスト推定として回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
グラフを論文用に設定する	sns.set(context='paper')
既存のベクトルをベースに全要素が0の配列	np.zeros_like(aArray)
キューをリストに変換する	list(deq)
折れ線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
散布図をrgbの上三角マーカーを使ってプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図を△マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='^')
グラフを全般的に明るくする	sns.set(pallete='bright')
配列とリストについての散布図に黒い△マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
外れ値を除いたデータフレームのカラムの算術平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
文字列中の部分文字列を新しい文字列に全て置換する	s.replace(sub, newsub)
回帰分析をアンサンブル学習で行う	sklearn.ensemble.VotingRegressor()
リストとリストの散布図を描画し、、マーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
データ列の推移を半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームからランダムにn行を取り出す	df.sample(n)
両端キュー中の数値の数を数える	deq.count(element)
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
option: ライトスレイグレーを用いる	color = 'lightslategrey'
配列の積立相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
縦棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
ライムグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
サンディーブラウンにヒストグラムの色をする	plt.hist(データ列, color='sandybrown')
ゴールド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
名前付きタプルを使用する	import collections
データフレームを千の位で丸めて、整数にする	df.round(-3).astype(int)
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
黒色で変数を表示する	print(f'\033[30m{value}\033[0m')
プラットホームの名前	sys.platform
値の出力を改行なしに行う	print(value, end='')
データフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
本日が月曜日	datetime.datetime.today().weekday() == 0
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: 色を貝殻に設定する	color = 'seashell'
分子割る分母	fractions.Fraction(分子, 分母)
option: スカイブルー色を使う	color = 'skyblue'
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
2つのデータフレームを横につなぐ	pd.concat([df, df2], axis=1)
配列の行ごとの合計値	np.sum(aArray, axis=1)
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
2つのデータフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
オレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
データシリーズの未入力値を平均値に設定する	ds.fillna(ds.mean())
データフレームの指定のカラムに重複があれば取り除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
option: イエローグリーン色を使う	color = 'yellowgreen'
データシリーズの未入力値を中央値で埋める	ds.fillna(ds.median())
実数が無限大か確認する	math.isinf(x)
ブルーバイオレット色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
マッピングとしてカウンタを更新する	aCounter.update(aDict)
データフレームを2つの列でソートする	df.sort_values(by=['列A', '列B'])
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
フォーマットで列を日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
ある列の値ごとの分散を算出する	df.groupby('列A').var()
双方向キューの末尾に値を付け加える	deq.append(element)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか調べる	s.count(sub, start, end)
option: 線の種類を点線に設定する	linestyle = 'dotted'
CSVファイルのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
データフレームの指定したカラムの中のNaNの合計を求める	df['列A'].isna().sum()
部分文字列が文字列の開始位置からと終了位置までの範囲に含まれない	s.find(sub, start, end) == -1
データフレームの重複する行だけを取り出す	df[df.duplicated(keep=False)]
赤いクロス印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
リストが全て真かどうか調べる	all(aList)
コマンドライン引数を列挙する	sys.argv
ゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
セットに配列の要素を全て追加する	aSet.update(iterable)
列を等間隔でn個にビニングする	pd.cut(ds, n)
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
箱ひげ図でデータ列を作図する	plt.boxplot(データ列)
折れ線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
文字列の開始位置から終了位置の間で部分文字列の登場回数	s.count(sub, start, end)
データフレームの指定したカラムの中に日付データがある	df['列A'].isin([value])
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
整数の最大公約数を求める	math.gcd(n, n2)
天井	math.ceil(x)
線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データ列とリストの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列中からパターンに複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
数値を青色にする	f'\033[34m{value}\033[0m'
日付時刻データの秒	aDatetime.second
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
xが1、もしくは2もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
イテラブルの各要素を双方向キューの先頭に入れる	deq.extendleft(iterable)
文字列はタイトルケースか調べる	s.istitle()
データフレームの最後100行を取り出す	df.tail(100)
配列の最小値を求める	np.min(aArray)
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
option: インディアンレッド色を使用する	color = 'indianred'
現在が火曜日か調べる	datetime.datetime.today().weekday() == 1
両端キューの大きさ	len(deq)
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
既存の行列をベースに全要素が1のベクトル	np.ones_like(aArray)
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの欠損値を平均で補完する	df.fillna(df.mean())
双方向キューの最大長	deq.maxlen
リストをy軸データ列をx軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
カウンタの項目を列挙する	aCounter.keys()
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
組をリストに変換する	list(aTuple)
ファイルにxを文字列にして書く	f.write(str(x))
黒い▽マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
データフレームのn行より前取り出す	df[:n]
オブジェクトは集合か調べる	isinstance(obj, set)
８進数字を全て見る	string.octdigits
データフレームをある列で並べ直す	df.sort_values(by='列A')
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
リストを箱ひげ図としてプロットする	plt.boxplot(データ列)
データフレームの指定したカラムの値を正規表現patternで全てreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
カウンタから最頻出の要素の件数	aCounter.most_common()[1]
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: オリベドラブ色を使う	color = 'olivedrab'
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
ファイルをSJISを使って書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
縦横比を同じする	plt.axis('equals')
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
データフレームの選択した列のパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
nが偶数かどうか	n % 2 == 0
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
２つの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
ベクトルを平坦化する	aArray.flatten()
2つのデータフレームを横に結合する	pd.concat([df, df2], axis=1)
データシリーズの欠損値を平均値で置き換える	ds.fillna(ds.mean())
nかつn2	n and n2
ヒストグラムを暗い赤色を使って描画する	plt.hist(データ列, color='darkred')
データフレームのNaNをインプレイスで取り除く	df.dropna(inplace=True)
データフレームをある列によって昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
標準入力を得る	sys.stdin
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
回帰モデルを学習する	model.fit(説明変数, 目的変数)
文字列の開始位置より後に部分文字列が含まれるかどうか調べる	s.find(sub, start) != -1
デフォルトでグラフをいい感じに設定する	sns.set()
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
カデットブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
option: グラフの色をミスティローズにセットする	color = 'mistyrose'
option: フォントの色をダークグレーに変更する	color = 'darkgray'
データフレームの選択した列の未入力値を最小値にする	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
option: 文字コードをEUCにする	encoding = 'euc_jp'
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
タプルを並べる	sorted(aTuple)
横棒グラフをダークスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
nの八進数文字列	oct(n)[2:]
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
データ列をビン分割する	pd.cut(ds, aList)
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
棒グラフをライトコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcoral')
リストと配列について散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
データフレームの指定した列の中に文字列とが存在するかどうか	df['列A'].isin([value, value2])
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
ミディアムターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
option: 黄色にフォントの色を設定する	color = 'yellow'
マップからキーの値	aDict.get(key)
符号なし８ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.uint8)
最大値・最小値として整数乱数を得る	random.randint(最小値, 最大値)
折れ線プロットの色をカラーコードでセットする	plt.plot(データ列x, データ列y, color='#800080')
option: マーカーを星に変更する	marker = '*'
線グラフをチョコレート色を使って描画する	plt.plot(データ列x, データ列y, color='chocolate')
青い実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
option: モカシン色を使用する	color = 'moccasin'
nがn2以下または、n3以上かどうか調べる	n <= n2 or n >= n3
データフレームを複数の列で昇順にソートして更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
JSON形式の文字列を辞書にする	json.loads(jsonString)
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
線グラフをホワイトスモーク色を使って描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
赤い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
実数の小数点を丸める	round(x)
現在の時間	datetime.date.today().hour
リストの要素のみプリントする	print(*aList)
データシリーズの中に日付データと文字列があるか調べる	ds.isin([value, value2])
option: 色をダークターコイズに指定する	color = 'darkturquoise'
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
折れ線グラフのクロス印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ゲインズボロ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
リストとリストの散布図を描いて、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
実数の正弦の逆数を求める	math.asin(x)
タプルをn回、連結する	aTuple * n
option: グラフの色をダークゴールデンロッドに指定する	color = 'darkgoldenrod'
OSがリナックスか確認する	sys.platform.startswith('linux')
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
データシリーズの欠損値を最小値にする	ds.fillna(ds.min())
rgbの下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
option: データ型を指定する	dtype = np.int8
最大値と最小値としてデータを正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
option: ▲印を描画する	marker = '^'
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
ピーチパフ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
パールバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ダークオーキッドにヒストグラムの色をする	plt.hist(データ列, color='darkorchid')
文字列を新しい文字列を用いて置換する	s.replace(sub, newsub)
イテラブルとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
プロットにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
リストと配列についての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
見やすいグラフを描画する準備をする	import seaborn as sns
nがn2の倍数	n % n2 == 0
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
option: フォントの色をペールグリーンに変更する	color = 'palegreen'
オブジェクトはリストの要素	element in aList
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
option: イエローグリーン色を用いる	color = 'yellowgreen'
文字列の中でケースを無視して正規表現にマッチした文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
列の各データは何回出現するか確認する	ds.value_counts()
積み上げ棒プロットを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
リスト間のケンドールの相関係数を算出する	scipy.stats.kendalltau(数列, 数列2)
ある列ごとの平均値	df.groupby('列A').mean()
データフレームから	df.select_dtypes(型).columns
rgbの△マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
データフレームの選択したカラムの中にある文字列の合計をカウントする	df[['列A', '列B']].isin([value]).sum()
リスト間のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
パープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='purple')
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
リストと配列についての散布図に菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D')
option: グラフの色を濃いシアンに設定する	color = 'darkcyan'
n進文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
横棒グラフをダークサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='darksalmon')
オブジェクトがプロパティを持つかどうか確認する	hasattr(obj, プロパティ名)
option: 文字コードを文字列の示すエンコーディングに変更する	encoding = s
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
横棒グラフを真紅色として描画する	plt.barh(データ列x, データ列y, color='crimson')
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
option: ラベンダーブラッシュ色を使用する	color = 'lavenderblush'
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
アリスブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
組の最初のn要素を取り除く	aTuple[n:]
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
大量のデータが正規分布に従うかどうか仮説検定する	scipy.stats.kstest(配列, 'norm')
データフレームの中の列を分割数nとしてビン分割する	pd.cut(df[col], n)
配列をダミー変数にする	pd.get_dummies(配列)
配列をビン数nで分割する	pd.cut(aArray, n)
作画の縦横の比率を同じする	plt.axis('equals')
option: グラフの色をホットピンクに設定する	color = 'hotpink'
nとn2の差を求める	n - n2
option: 色をレモンシフォンに変更する	color = 'lemonchiffon'
n2行n列の２次元リストを得る	[[0] * n for _ in range(n2)]
折れ線グラフの色をライトスカイブルーにする	plt.plot(データ列x, データ列y, color='lightskyblue')
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
有理数の分母	q.denominator
行列の転置行列を計算する	aArray.T
データ列間のMAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
列を両端キューにする	collections.deque(iterable)
折れ線グラフのポイント印を黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームの一部のカラムの尖度	df[['列A', '列B']].skew()
タプルを昇順に並べ直す	sorted(aTuple, reverse=True)
青い点線を用いてイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
サンディーブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
option: プラム色を使う	color = 'plum'
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
セットから別のセットとの共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
ヒストグラムをブラウン色で描画する	plt.hist(データ列, color='brown')
線グラフの色をライトサーモンにセットする	plt.plot(データ列x, データ列y, color='lightsalmon')
ディムグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
コマンドライン引数	sys.argv
散布図に青いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ミディアムシアグリーンにヒストグラムの色をする	plt.hist(データ列, color='mediumseagreen')
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
リストとリストの散布図に黒い菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
nが無限に続く数列を求める	itertools.repeat(n)
データフレームの内容を調べる	df.head()
文字列は全て十進数字かどうか判定する	s.isdecimal()
rgbに棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
符号付き整数の最大値を知る	sys.maxsize
折れ線グラフの星マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データフレームの列のユニークな値	df[col].unique()
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
アリスブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
小数点数の余弦	math.cos(x)
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
横棒グラフをインディゴ色を用いて描画する	plt.barh(データ列x, データ列y, color='indigo')
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームを2つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
グリーンイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
ファイルパスを文字コードtextとしてオープンする]	open(filepath, encoding=text)
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
縦棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
文字列を小文字に変換する	s.casefold()
折れ線グラフの色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
ふたつの列からグループ化し、最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
データシリーズの欠損値を最小値に設定する	ds.fillna(ds.min())
折れ線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
カテゴリ別で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
列を文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
辞書を階層化する	collections.ChainMap(aDict)
横棒グラフをやわらかい青色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
データシリーズの日	ds.dt.day
nからn2の値を引いてnにする	n -= n2
ファイルパスを追加用にオープンする]	open(filepath, mode='a')
線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
商と余りを同時に計算する	divmod(x, y)
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
文字列を最初の部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
プラットホームがリナックス	sys.platform.startswith('linux')
文字列を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
にバイオリン図を使ってデータフレームのカラムを見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの色をライトイエローにする	plt.plot(データ列x, データ列y, color='lightyellow')
読み込みモードでファイルパスを開いて]、fとする	f = open(filepath, mode='r')
option: シスルにフォントの色を設定する	color = 'thistle'
散布図の大バツマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
要素一つのタプル	(element,)
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
散布図に黒い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
変数をマゼンタにする	f'\033[35m{value}\033[0m'
３変数の一番小さい値	max(x, y, z)
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
グラフの用途を論文にセットする	sns.set(context='paper')
option: 文字列を改行の代わりに用いる	end = s
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ある列がどれだけ、分散しているか見る	df['列A'].var()
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
数値を簡略にする	sympy.sympify(e)
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列からformatのパターンを使って日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ヒストグラムの色をオレンジに指定する	plt.hist(データ列, color='orange')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
リストと数列についての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
文字列リストに列を変換してカンマを用いて一つにする	','.join(map(str, iterable))
ゴールド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
option: 色をフォレストグリーンに指定する	color = 'forestgreen'
文字列を部分文字列で分割する	s.split(sub)
空白を使う	' '
⊆	aSet.issubset(aSet2)
無限大	math.inf
上限指定をしたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
最適な場所に凡例を表示する	plt.legend(loc='best')
実数を実数で除算する	x / y
インディゴにヒストグラムの色を変更する	plt.hist(データ列, color='indigo')
第二コマンド引数	sys.argv[1]
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
文字列がPythonのキーワードか調べる	keyword.iskeyword(s)
データフレームのカラムにおいてどの値が最も出現するか調べる	df['列A'].mode()
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
列のエポック秒をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
文字列が部分文字列で終了するかどうか	s.endswith(sub)
SDGでクラス分類をする	model = sklearn.linear_model.SGDClassifier()
表データのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
リストの変化を色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムの線種を点線に変更する	plt.hist(データ列, linestyle='dotted')
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
option: フォントの色をベージュに指定する	color = 'beige'
データフレームの末尾5行を抽出する	df.tail(5)
数列と配列について散布図を描画して左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横棒グラフをプロットする	plt.barh(ラベル列, データ列)
配列とイテラブルについて散布図を描画して、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
回帰分析を部分的最小二乗法でする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
ミディアムブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームの選択したカラムのNaNを直後の値に変更する	df[['列A', '列B']].fillna(method='bfill')
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: シスル色を用いる	color = 'thistle'
ファイルから追加ストリームを開き]、fとする	f = open(filepath, mode='a')
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
赤い菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
最頻値で指定した列の欠損値を置換する	df['列A'].fillna(df['列A'].mode().iloc[0])
ライトグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
横棒グラフをミスティローズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mistyrose')
文字列の開始位置からと終了位置までの間に部分文字列が存在しないかどうかテストする	s.find(sub, start, end) == -1
イテラブルからベクトルを初期化する	np.array(iterable)
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
要素が辞書の値に含まれていないかどうか調べる	element not in aDict.values()
行列の計算をする	import numpy as np
直前の値でデータフレームのNaNを埋める	df.fillna(method='ffill')
等間隔でn個にリストをビン分割する	pd.cut(aList, n)
相関係数でデータフレームの相関行列を計算する	df.corr(method='pearson')
日付データが水曜日	aDate.weekday() == 2
option: ダイアモンドマーカーを使用する	marker = 'D'
カウンタをイテラブルで更新する	aCounter.update(iterable)
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
リストの中の一番小さい値	min(aList)
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
データフレームから列を一つだけ選択する	df[['列A']]
日付データが金曜日か	aDate.weekday() == 4
データフレームをBOMを付けて書き出す	df.to_csv('file.csv', encoding='utf_8_sig')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
表データのあるカラムのタイムゾーンを東京に指定する	df['列A'].tz_convert('Asia/Tokyo')
ファイルの絶対ファイルパス	os.path.abspath(filepath)
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
組をひとつ置きに抽出する	aTuple[::2]
タイムスタンプデータからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
色付きの破線で数列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
オプションで、標準出力を出力にする	file = sys.stdout
横棒グラフをダークマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
折れ線グラフのマーカーを▲印にする	plt.plot(データ列x, データ列y, marker='^')
option: チョコレートにグラフの色を設定する	color = 'chocolate'
option: 大バツ印を加える	marker = 'X'
データシリーズの未入力値を直前の値に指定する	ds.fillna(method='ffill')
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
ふたつの列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
オブジェクトのフィールドの値を値に設定する	setattr(obj, プロパティ名, 値)
xが1、もしくは2か調べる	x == 1 or x == 2
要素は集合のメンバーでないか調べる	element not in aSet
相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ASCII限定として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
nがn2で割り切れないか調べる	n % n2 != 0
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
各カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
option: フォントの色をダークレッドに指定する	color = 'darkred'
あるカラムの平均値	df['列A'].mean()
表データのあるカラムが何分か見る	df['列A'].dt.minute
データ列を等間隔でn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフをダークシアグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
option: 色をコーラルに設定する	color = 'coral'
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
ヒストグラムの色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
実行中の例外を情報	sys.exc_info()
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
列のエポック秒をタイムスタンプに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
数列を円グラフにする	plt.pie(データ列, startangle=90)
ナバホホワイトにヒストグラムの色をセットする	plt.hist(データ列, color='navajowhite')
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
文字列を置き換える	s.replace(sub, newsub)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームの不偏標準偏差を算出する	df.std()
折れ線プロットの色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
整数nは集合の一つであるか確認する	n in aSet
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
データフレームを指定した列の値によってグループ化し、統計量を計算する	df.groupby('列A').describe()
縦棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をダークシアンにする	plt.hist(データ列, color='darkcyan')
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
文字列の先頭が部分文字列	s.startswith(sub)
線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
タプルを並べ変える	sorted(aTuple)
ある列の値がxより少ない行を抽出する	df[df['列A'] < x]
散布図に上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
書き込み用にファイルパスを開く]	open(filepath, mode='w')
option: カンマをセパレータで使う	sep = ','
日付データの年数を見る	aDate.year
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
ヒストグラムの色をライトブルーにする	plt.hist(データ列, color='lightblue')
指定した列の値で集計し合計を求める	df.groupby('列A').sum()
辞書に別の辞書の項目を更新する	aDict.update(aDict2)
フォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームをグループ化し、各平均値を求める	df.groupby('列A').mean()
option: ペルー色を使う	color = 'peru'
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
あるカラムを正規表現で一度に置き換える	df['列A'].replace(pattern, repl, regex=True)
データフレームの一部のカラムの上位25％を求める	df[['列A', '列B']].quantile(0.25)
文字列の開始位置より後に部分文字列があるかどうか確認する	s.find(sub, start) != -1
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図の大バツ印を赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの指定した列の分散	df['列A'].var()
キューのn番目	deq[n]
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームを列の値によってまとめた表	df.groupby('列A')
option: フォントの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
文字列をトリムする	s.strip()
n割るn2を切り上げる	(n + n2 - 1) // n2
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームを10の位で丸める	df.round(-1)
データフレームのカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
文字列の開始位置からと終了位置の間に部分文字列が含まれるかテストする	s.find(sub, start, end) != -1
スプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='springgreen')
データフレームをグループ化し、各合計を求める	df.groupby('列A').sum()
option: 青緑にグラフの色を設定する	color = 'teal'
度数分布図のプロットして、正規化する	plt.hist(データ列, density=True)
タイムスタンプデータがタイムスタンプデータより先かどうか調べる	aDatetime < aDatetime2
ヒストグラムの色をダークオーキッドにセットする	plt.hist(データ列, color='darkorchid')
データシリーズを万の位で四捨五入する	ds.round(-4)
タブ区切りのファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
ベクトルの行ごとの最大値を求める	np.max(aArray, axis=1)
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
空のタプル	()
データフレームの一部のカラムは正規分布からどの程度歪んでいるか見る	df[['列A', '列B']].kurt()
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
破壊的に昇順にデータフレームをある列を用いて整列する	df.sort_values(by='列A', ascending=True, inplace=True)
ヒストグラムの色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
option: ヘッダを連番にする	header = None
データフレームの列一覧	df.info()
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
色付きの実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
緑色でリストを表示する	print(f'\033[32m{value}\033[0m')
実数の自然対数を算出する	math.log(x)
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
option: 改行コードをWindowsに設定する	newline = '\r\n'
データフレームの一部のカラムの欠損値をxで埋める	df[['列A', '列B']].fillna(x)
文字列を全て小文字に変換する	s.lower()
文字列をシンボルにして、パラメータにする	z = sympy.Symbol(s)
整数の三乗を求める	x ** 3
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
リストとリストの散布図をプロットして、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
シーケンスから複数個ランダムに選ぶ	random.choices(iterable, k=n)
デックをリストに変換する	list(deq)
キーがマッピング上で定義済みかどうか調べる	key in aDict
暗い赤色としてヒストグラムを描画する	plt.hist(データ列, color='darkred')
小数点数の正弦を求める	math.sin(x)
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
八進文字列を整数に変換する	int(s, 8)
ASCII限定として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
n回の数値イテラブル	range(n)
option: シルバー色を用いる	color = 'silver'
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか確認する	s.find(sub, start, end) != -1
x,yの複素数	complex(x, y)
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
折れ線グラフに下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
今日の月数	datetime.datetime.today().month
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
データフレームから型リストで指定したデータ型の列を取り出す	df.select_dtypes(include=typeList)
画面にグラフの目的を設定する	sns.set(context='notebook')
散布図をフォレストグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
数列とリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ひとつでも空白が文字列内にあるか調べる	any(c.isspace() for c in s)
色付きの一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
棒グラフをダークスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
option: ピンクを使う	color = 'pink'
四分位点を使ってデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ベクトルの行ごとの合計	np.sum(aArray, axis=1)
マッピングの項目数を参照する	len(aDict)
折れ線グラフの△印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: フォントの色をペルーに変更する	color = 'peru'
文字列を黒色にする	f'\033[30m{value}\033[0m'
データフレームのインデックスの名前を全て変更する	df.rename(index={x: y})
縦棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
option: フォントの色をトマトにセットする	color = 'tomato'
数字を見る	string.digits
カラム名一覧を使う	df.columns
両端キューが空でない	len(deq) != 0
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: サドルブラウンを使う	color = 'saddlebrown'
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
option: 読み込みモードを用いる	mode = 'r'
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
データフレームのある列の値がxより少ないデータを抽出する	df[df['列A'] < x]
指定した列の値で集計し、それぞれの分散を求める	df.groupby('列A').var()
グラフのx軸のラベルを設定する	plt.xlabel('x軸ラベル')
逆順の両端キューを見る	reversed(deq)
SJISとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
三二ビット整数型のゼロ埋めされた行列を作る	np.zeros(要素数, dtype=np.int16)
データフレームの選択したカラムのNaNを中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データ列とリストの散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームをある列によって並べ、、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
ランダムに10行をデータフレームから抽出する	df.sample(10)
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
option: 青にグラフの色を指定する	color = 'blue'
二つのデータフレームをジョインする	pd.merge(df, df2)
option: 色をゴールデンロッドに指定する	color = 'goldenrod'
y軸だけグリッド線	plt.grid(axis='y')
低頻出方からカウンタをリストとして得る	aCounter.most_common()[::-1]
配列をビン数nを使ってビン分割する	pd.cut(aArray, n)
オブジェクトが論理値クラスか調べる	isinstance(obj, bool)
オブジェクトの型を調べる	type(obj)
ValueMapでまとめてデータフレームの選択したカラムの値を置き換える	df[['列A', '列B']].replace(ValueMap)
多次元データを主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
プロットを使う	import matplotlib.pyplot as plt
データ列とリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
二つの集合の∩	aSet.intersection(aSet2)
散布図の星マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
外れ値に強い線形モデルを作る	model = sklearn.linear_model.HuberRegressor()
折れ線グラフをプラム色を用いて描画する	plt.plot(データ列x, データ列y, color='plum')
データシリーズの欠損値をモードにセットする	ds.fillna(ds.mode().iloc[0])
オブジェクトは論理値クラスか確認する	isinstance(obj, bool)
折れ線グラフの色をミディアムアクアマリンにする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
配列とリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
横軸だけグリッド線	plt.grid(axis='x')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
option: グラフの色をクリムゾンに指定する	color = 'crimson'
パラメータがマイナス無限大に近づく場合の数値の極限値を計算する	sympy.limit(e, z, -oo)
option: グラフの色をディムグレーに設定する	color = 'dimgray'
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
カラーバーをプロットする	plt.colorbar()
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
データフレームの75パーセンタイル	df.quantile(0.75)
ふたつの集合は集合と互いに素	aSet.isdisjoint(aSet2)
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データシリーズが正規分布からどの程度歪んでいるか見る	ds.kurt()
文字列に漢字があるか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームの一部のカラムの欠損値を平均に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
青紫色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの一部のカラムの欠損値を最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
データシリーズのNaNを中央値で埋める	ds.fillna(ds.median())
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
カウンタの和集合演算する	aCounter | aCounter2
原点から(小数点数,y)の距離	math.hypot(x, y)
データフレームの指定したカラムの標本分散を算出する	df['列A'].var(ddof=0)
Pandasのバージョンを見る	print(pd.__version__)
プログラムの実行を正しく終える	sys.exit(0)
前もって正規表現をコンパイルする	re.compile(pattern)
ライム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
散布図の色をホワイトにする	plt.scatter(データ列x, データ列y, color='white')
特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データフレームをBOMを付けて保存する	df.to_csv('file.csv', encoding='utf_8_sig')
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
データ列の各データが何回出現するか見る	ds.value_counts()
データフレームをTSVファイルとして書き出す	df.to_csv('file.tsv', sep='\t')
ファイルからnバイト読み込む	f.read(n)
配列の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
要素が辞書の値に含まれていない	element not in aDict.values()
n足すn2	n + n2
ふたつの辞書を合体する	aDict | aDict2
上位集合もしくは等しいか調べる	aSet > aSet2
文字列を部分文字列で区切り、、列挙する	s.split(sub)
データフレームの選択した列が正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
集合にイテラブルを追加更新する	aSet.update(iterable)
ダークゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
文字列を部分文字列で区切り、、文字列リストに変換する	s.split(sub)
ポスターにグラフの用途を変更する	sns.set(context='poster')
データを最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
辞書からキーで指定された項目を取り出す	aDict.pop(key)
option: ミスティローズ色を用いる	color = 'mistyrose'
データフレームの列名をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
option: グラフの色をライトサーモンに指定する	color = 'lightsalmon'
あるカラムを一万の位で丸める	df['列A'].round(-4)
行列が何次元か調べる	aArray.ndim
データフレームの選択したカラムの中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
option: データ型としてブール型を用いる	dtype = np.int32
標準出力のバッファを強制表示する	sys.stdout.flush()
ディムグレーにヒストグラムの色を指定する	plt.hist(データ列, color='dimgrey')
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
要素が辞書の値として含まれているか確認する	element in aDict.values()
year年の日付をオブジェクト化する	datetime.date(year=year, month=1, day=1)
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
イテラブルのコンビネーションを得る	itertools.combinations(iterable, n)
新しい文字列で文字列中の正規表現を置換する	re.sub(pattern, newsub, s)
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
平均でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ライトグレーを使う	color = 'lightgray'
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
全印字できる文字	string.printable
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
最後の列を除いたデータフレーム	df[df.columns[:-1]]
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
スクリプトファイルと同じフォルダのファイルのパスを求める	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
文字列の開始位置と終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
大文字列	string.ascii_uppercase
option: 色をベージュにする	color = 'beige'
option: 色をシアンに設定する	color = 'cyan'
option: マーカーをダイアモンドに変更する	marker = 'D'
別の文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
データフレームの選択したカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
文字列に日本語が使われている	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
折れ線グラフの色をパールゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='palegoldenrod')
項目名が辞書上で未定義	key not in aDict
データフレームのカラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
本日が土曜日	datetime.datetime.today().weekday() == 5
タイムスタンプデータをタプルにする	aDatetime.timetuple()
縦棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
ヒストグラムをミディアムシアグリーン色を用いて描画する	plt.hist(データ列, color='mediumseagreen')
値を両端キューから取り除く	deq.remove(element)
列のエポック秒をタイムスタンプ型にする	pd.to_datetime(df['列A'], unit='s', utc=True)
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
ヒストグラムの色をフォレストグリーンに指定する	plt.hist(データ列, color='forestgreen')
データフレームの指定したカラムの未入力値を最小値に変更する	df['列A'].fillna(df['列A'].min())
option: アンティークホワイト色を使う	color = 'antiquewhite'
菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
option: ライトシアン色を使う	color = 'lightcyan'
文字列の中のケースを無視して正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
黄緑色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
データフレームから重複ありでランダムに100行をサンプリングする	df.sample(100, replace=True)
色付きの破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ナバホホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
あるカラムによって破壊的にデータフレームを昇順に整列する	df.sort_values(by='列A', ascending=True, inplace=True)
グラフのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
データフレームをグループ化しある列に対し標準偏差を計算する	df.groupby('列A')['列B'].std()
option: ダークオレンジを用いる	color = 'darkorange'
nからいつまでもカウントアップする	itertools.count(start=n)
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データシリーズの中に日付データとがいくつあるかカウントする	ds.isin([value, value2]).sum()
実数で実数を割る	x / y
文字列全体がパターンに複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ダークオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームのあるカラムの値がxに等しいデータを抽出する	df[df['列A'] == x]
option: グラフの色をターコイズに設定する	color = 'turquoise'
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
データフレームのあるカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
1行だけ列を除いたデータフレームを使う	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
表データのあるカラムは何月か知る	df['列A'].dt.month
option: 色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
データフレームを昇順にあるカラムによって並べ直す	df.sort_values(by='列A', ascending=True)
option: グラフの色をホワイトに指定する	color = 'white'
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ミスティローズ色としてヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
今日が水曜日	datetime.datetime.today().weekday() == 2
option: 改行コードをWindowsに変更する	newline = '\r\n'
ファイルをEUCとして書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
データフレームの先頭n行	df.head(n)
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
カウントプロットを描画する	sns.countplot(x='列名', data=df)
option: 丸マーカーを用いる	marker = 'o'
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
ファイルが存在しないかどうか調べる	not os.path.exists(filepath)
データフレームから重複を残さず重複をドロップする	df.drop_duplicates(keep=False)
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
文字列の最後	s[-1]
キューの末尾	deq[-1]
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
rgbの丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgreen')
ファイルに文字列を書く	f.write(s)
option: モカシンにグラフの色をセットする	color = 'moccasin'
二つの文字列をコロンで区切って表示する	print(value, value2, sep=':')
配列にリストを続ける	itertools.chain(iterable, iterable2)
option: ピーチパフにフォントの色を設定する	color = 'peachpuff'
データシリーズが何秒か見る	ds.dt.second
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
シアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
表データからランダムにn行を取り出す	df.sample(n)
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
赤い点線を用いてラインを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ミディアムスレートブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
実測値をモデルの予測値と対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ふたつのマップをマージする	aDict | aDict2
データ列間のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
数式を積分する	sympy.integrate(e)
最大最小から行列を作る	np.linspace(最小値, 最大値, 要素数)
ディムグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
スタッキングを用いて回帰分析を行う	sklearn.ensemble.StackingRegressor()
表データの列の名前を一度に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
欠損値も加えてデータフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
赤い破線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームの一部の列の代表値	df[['列A', '列B']].describe()
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
option: パレットトルコイズ色を使う	color = 'paleturquoise'
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
配列とリストについて散布図を描画し、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
列を文字列リストに変換して、カンマで一つにする	','.join(map(str, iterable))
ライトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
ヒストグラムの色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
option: どの行もカラムの名前にしない	header = None
データシリーズの中に日付データと文字列がいくつ存在するか数える	ds.isin([value, value2]).sum()
折れ線グラフを色付きの一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データシリーズの中に存在する文字列の合計を調べる	ds.isin([value]).sum()
データフレームの選択したカラムの未入力値を数値で埋める	df[['列A', '列B']].fillna(x)
オブジェクトをデバッグ向けの文字列にする	repr(obj)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
nはセットのどれかか	n in aSet
データ列を等量でn個に分割する	pd.qcut(ds, n)
0からnの範囲	range(n)
データフレームの欠損値をモードに設定する	df.fillna(df.mode().iloc[0])
散布図の印を大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
option: スチールブルーにグラフの色を指定する	color = 'steelblue'
日付時刻データの月	aDatetime.month
option: マルーン色を使う	color = 'maroon'
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
二次元組をflattenする	sum(aTuple)
組の先頭を使う	aTuple[0]
主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
浮動小数点数を複素数にする	complex(x)
青い点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームをランダムサンプリングする	df.sample()
配列の分散	np.var(aArray)
option: サドルブラウン色を使う	color = 'saddlebrown'
イテラブルをダミー変数にする	pd.get_dummies(iterable)
ゴーストホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
縦棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
option: フォントの色をオレンジレッドに設定する	color = 'orangered'
行列を元に全要素が初期値の行列	np.full_like(aArray, 初期値)
ガウス過程を使って回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
既存の行列を元に全要素が0の行列	np.zeros_like(aArray)
指定した列のカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
ヒストグラムをアンティークホワイト色を使って描画する	plt.hist(データ列, color='antiquewhite')
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
標準入力から1行だけ読む	sys.stdin.readline()
指定したカラムの空文字を欠損値に変換しドロップする	df['列A'].replace('', np.nan).dropna()
ラインの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
オブジェクトが関数	callable(obj)
ライトイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
nを二進表記に変換する	bin(n)
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
グラフの描画を綺麗にする	import seaborn as sns
散布図に△マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
改行せずに二つの変数を出力する	print(value, value2, end='')
ヒストグラムを横に並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
数式の変数に数値を代入する	e.subs(z, e2)
option: 線の種類を点線に指定する	linestyle = 'dotted'
rgbのポイントマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
nからn2の範囲	range(n, n2)
要素が集合のメンバーか	element in aSet
リストをダミー変数にする	pd.get_dummies(リスト)
日付を表現した文字列を日付データにする	pd.to_datetime(日付を表現した文字列)
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
タプルの中の最大値を求める	max(aTuple)
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
データフレームの中の列をビン数nで分割する	pd.cut(df[col], n)
黒い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
赤い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データシリーズの母標準偏差を計算する	ds.std(ddof=0)
ある列によってデータフレームをまとめたグループ	df.groupby('列A')
リストの値を昇順にソートする	sorted(aList, reverse=False)
リストを３つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
淡いピンク色色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
y座標の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
折れ線グラフの色をダークカーキにセットする	plt.plot(データ列x, データ列y, color='darkkhaki')
双方向キューの要素数	len(deq)
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategray')
option: ヘッダを自動的な連番にする	header = None
リストと配列の散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ラベンダーブラッシュ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
折れ線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
棒グラフを白色を用いて描画する	plt.bar(データ列x, データ列y, color='white')
ヘッダを指定せずCSVファイルを読む	pd.read_csv('file.csv', header=None)
散布図のダイアモンド印の色を設定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: リネン色を使う	color = 'linen'
文字列の最後を使う	s[-1]
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
度数分布図の区間の数を設定する	plt.hist(データ列, bins=区関数)
今日が何年か知る	datetime.datetime.today().year
黒い大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
x座標の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
リストの末尾	aList[-1]
CSVファイルファイル名がかどうか	filename.endswith('.csv')
折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
黒い右三角マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='k')
リストを引数として展開して出力する	print(*aList)
黒い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
改行なしに二つの実行結果をプリントする	print(value, value2, end='')
代数計算を使う	import sympy
折れ線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ライムグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
小文字を求める	string.ascii_lowercase
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
ヒストグラムの色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
列を等量でビン数nとしてビニングする	pd.qcut(ds, n)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
option: ライトスレイグレーにグラフの色を変更する	color = 'lightslategrey'
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
リストと数列について散布図を描いて、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図でデータフレームを可視化して、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ある列の文字列が正規表現にマッチする行を抽出する	df[df['列A'].str.match(正規表現)]
option: 紺碧色を用いる	color = 'azure'
数列とリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
nがn2の倍数でないか調べる	n % n2 != 0
リストからデックを生成する	collections.deque(iterable)
データシリーズのNaNを平均値で補完する	ds.fillna(ds.mean())
コサインの逆数	math.acos(x)
データフレームの選択したカラムを十の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
文字列の開始位置以降に部分文字列がないか調べる	s.find(sub, start) == -1
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
タプルのn番目からn2番目の部分を取り出す	aTuple[n:n2]
シーケンスの長さnの順列	itertools.permutations(iterable, n)
データフレームの指定したカラムの中に含まれる日付データの数を数える	df['列A'].isin([value]).sum()
行列の形状を変形する	aArray.reshape(行数, 列数)
データフレームは何行重複するか見る	df.duplicated().sum()
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
折れ線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
配列とリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
折れ線グラフの印を▲印にする	plt.plot(データ列x, データ列y, marker='^')
コードポイントの最大値	sys.maxunicode
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
本日が日曜日か	datetime.datetime.today().weekday() == 6
棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
option: グラフの色をベージュに設定する	color = 'beige'
浮動小数点数の逆双曲線正弦	math.asinh(x)
FIXME:カテゴリーデータを出現頻度順に並べる	df['列A'].value_counts().sort_index().index
配列とイテラブルについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
文字列の中の正規表現による全てのマッチを見る	re.findall(pattern, s)
線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムの色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
実行結果を青色にする	f'\033[34m{value}\033[0m'
データフレームのある列	df['列A']
プロットで使う横軸の名称を設定する	plt.xlabel('x軸ラベル')
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
異なる列をキーとしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
ラインを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: グラフの色を青緑に設定する	color = 'turquoise'
option: 半透明にする	alpha = 0.5
整数nはタプルのどれか	n in aTuple
ある列の値毎の平均値	df.groupby('列A').mean()
組のn番目からn2番目の部分	aTuple[n:n2]
データフレームの欠損値を直前の値に減らす	df.fillna(method='ffill')
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
散布図をライトスレイグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
分類モデルの訓練を開始する	model.fit(説明変数, 目的変数)
散布図に星印を用いる	plt.scatter(データ列x, データ列y, marker='*')
リストにリストを加え、拡張する	aList.extend(aList2)
変数名をキーとして、辞書	dict(name=element)
データフレームの選択した列の空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの選択したカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
文字列中に漢字が使われているか確認する	re.search('[\u4E00-\u9FD0]', s)
実数の天井数を求める	math.ceil(x)
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
両端キューをリストに変換する	list(deq)
数列と配列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
線形回帰モデルの切片	model.intercept_
オブジェクトは整数型か	isinstance(obj, int)
デピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
リスト内の要素が少なくともひとつ真かどうか調べる	any(aList)
シスル色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
nが1もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
文字列からformatのパターンとして日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
日付データが月曜日かどうか	aDate.weekday() == 0
実数の逆双曲線正弦を算出する	math.asinh(x)
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
文字列の中で正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s)
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
横棒プロットを描画して棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightseagreen')
データシリーズの欠損値を平均にセットする	ds.fillna(ds.mean())
データフレームを指定した列によって大きい順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
散布図をオレンジ色を使って描画する	plt.scatter(データ列x, データ列y, color='orange')
タイタニックのデータセットをロードする	df = sns.load_dataset('titanic')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgrey')
データシリーズの中にいくつ日付データがあるか数える	ds.isin([value]).sum()
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
ヒストグラムをターコイズ色を用いて描画する	plt.hist(データ列, color='turquoise')
option: 赤色を用いる	color = 'red'
アクア色としてヒストグラムを描画する	plt.hist(データ列, color='aqua')
文字列を部分文字列で分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
散布図を小麦色色を用いて描画する	plt.scatter(データ列x, データ列y, color='wheat')
黒い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
リストを二つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
散布図に黒い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
いつまでもnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
スタックのstart〜endの部分要素を求める	collections.deque(itertools.islice(deq, start, end))
縦棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
カウンタからシーケンスを回数して引く	aCounter.subtract(iterable)
数列のスピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: ティール色を使う	color = 'teal'
整数nの8進表現を使う	oct(n)
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
サンディーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
配列のSkewness	scipy.stats.skew(配列, bias=False)
マッピングの項目を列挙する	aDict.values()
列の種類を確認する	df.info()
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
列をタイムスタンプ型に変換する	pd.to_datetime(df['列A'])
列をフォーマットを用いて日付データにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
リストの合計値を計算する	sum(aList)
データフレームの未入力値を直後の値に設定する	df.fillna(method='bfill')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
FIXME:カテゴリーデータを出現頻度順にソートする	df['列A'].value_counts().sort_index().index
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
列からベクトルを作る	np.array(iterable)
nがn2か調べる	n == n2
タプルが全て真か調べる	all(aTuple)
線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False)
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ファイルがあるか調べる	os.path.exists(filepath)
グリッド線	plt.grid(linewidth=3.0)
項目名で指定したエントリを辞書からポップする	aDict.pop(key)
折れ線グラフの色をゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='goldenrod')
数値をシアンでプリントする	print(f'\033[36m{value}\033[0m')
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o')
option: グラフの色をタンに指定する	color = 'tan'
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
タプルを逆順にする	aTuple[::-1]
ペールグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='palegreen')
折れ線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
文字列を右から部分文字列で区切る	s.rsplit(sub)
option: グラフの色をダークターコイズにセットする	color = 'darkturquoise'
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの一部のカラムの平均	df[['列A', '列B']].mean()
文字列を黒色化する	f'\033[30m{value}\033[0m'
標準出力を得る	sys.stdout
マッピングから項目名で指定された値を取り出す	aDict.pop(key)
データ列の各データ値の出現数	ds.value_counts()
散布図をタン色を用いて描画する	plt.scatter(データ列x, データ列y, color='tan')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: 色をライトスレイグレーに指定する	color = 'lightslategray'
多次元尺度構成法を用いて濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データ列を閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
フォーマットでデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
黒い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
再帰エラーを防ぐ	sys.setrecursionlimit(1000000)
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
プロットで使用するy座標の説明をuntitledに設定する	plt.ylabel('y軸ラベル')
多次元データを多次元尺度構成法を用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
カウンタをリストを使って更新する	aCounter.update(iterable)
データフレームを縦向きに一つにまとめる	pd.concat([df, df2], axis=0)
スタックから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
ファイルパスをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
データシリーズの空文字をドロップする	ds.replace('', np.nan).dropna()
データシリーズの文字列を未入力値に変換する	ds.replace(値, np.nan)
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
要素はセットに含まれるか調べる	element in aSet
データフレームのふたつの列を削除してみる	df.drop(['列A', '列B'], axis=1)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
option: 改行コードをUNIXに指定する	newline = '\n'
折れ線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
ファイルパスをSJISで書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
option: アイボリーにフォントの色を設定する	color = 'ivory'
データフレームのカラムのスピアマンの順位相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
折れ線グラフにクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
グローバル変数の一覧を使う	globals()
データフレームのカラムを度数分布図で描画する	plt.hist(df[column])
組のn番目以降の部分を得る	aTuple[n:]
データフレームの値をValueMapで一度に置換する	df.replace(ValueMap)
平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列の長さを使う	len(s)
縦棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
option: ターコイズ色を使う	color = 'turquoise'
データフレームから5行、サンプリングする	df.sample(5)
小数点数の絶対値	math.fabs(x)
ヒストグラムをライトサーモン色を用いて描画する	plt.hist(データ列, color='lightsalmon')
両端キューの最後から要素を取り除く	deq.pop()
文字列を部分文字列で分割したときの後半の文字列	s.partition(sub)[-1]
２つのデータフレームを異なる列をキーにして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
事前にパターンをASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームから型リストで指定したデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
カデットブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
リストの末尾を捨てる	aList[:-1]
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
カラーバーを水平で描く	plt.colorbar(orientation='horizontal')
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
縦棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
縦棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
ヒストグラムをオールドレース色として描画する	plt.hist(データ列, color='oldlace')
ユニークな値を要素とする行列を使う	np.unique(aArray)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
シエナ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
整数nの十六進文字列	hex(n)[2:]
option: ゲインズボロを使う	color = 'gainsboro'
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
リストとリストについての散布図に▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
リストと数列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
二つのリストから辞書を作成する	dict(zip(aList, aList2))
辞書に要素をキーとして加える	aDict[key] = element
グラフを表示する	plt.show()
ミスティローズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
option: ナバホホワイトを使う	color = 'navajowhite'
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ダークグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
option: マゼンタを使う	color = 'magenta'
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
リストの合計値	sum(aList)
濃いシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
文字列の接尾辞が部分文字列か	s.endswith(sub)
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
２つの浮動小数点数が十分に近いか	math.isclose(x, x2)
浮動小数点数を万の位で四捨五入する	round(x, -4)
データシリーズの中にいくつ文字列が含まれるか数える	ds.isin([value]).sum()
n個に列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
色付きの点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
数式を変数について微分する	sympy.diff(e, z)
バイオレット色のヒストグラムを描画する	plt.hist(データ列, color='violet')
3変数の最大値	max(x, y, z)
データシリーズが何秒か調べる	ds.dt.second
リストと配列について散布図を描画して、マーカーを△に変更する	plt.plot(データ列x, データ列y, marker='^')
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
option: ミントクリームにフォントの色を指定する	color = 'mintcream'
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
option: 星印を使う	marker = '*'
ハニーデューにヒストグラムの色を変更する	plt.hist(データ列, color='honeydew')
イテラブルとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: アクアマリン色を用いる	color = 'aquamarine'
データフレームの名前リストで指定した列を削除する	df.drop(columns, axis=1, inplace=True)
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
リストのn番目の値を削除する	del aList[n]
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
線グラフの色をスプリンググリーンにセットする	plt.plot(データ列x, データ列y, color='springgreen')
マッピングの項目名とその値をペアとして取り出す	aDict.items()
モデル教師データでを学習する	model.fit(説明変数, 目的変数)
ハッシュ値	hash(x)
暗い赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
nからn2の値を引いてnに代入する	n -= n2
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
多層パーセプトロンとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ディムグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
プロットの使途を論文にセットする	sns.set(context='paper')
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームとデータフレームの列を合体させる	pd.concat([df, ds], axis=1)
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
空のカウンタを作る	collections.Counter()
データフレームのカラムの尖り	scipy.stats.kurtosis(df['列A'], bias=False)
黒い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
指定したカラムリストのみ、表の重複を見る	df.duplicated(subset=['列A', '列B'])
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
option: ラベンダーにグラフの色を設定する	color = 'lavender'
データシリーズの標本分散	ds.var(ddof=0)
暗い赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
シーケンスから重複を取り除く	set(iterable)
線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフを青色を使って描画する	plt.plot(データ列x, データ列y, color='blue')
配列の型	aArray.dtype()
リストとデータ列の散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
文字列の無限列	itertools.repeat(element)
option: シャルトリューズにフォントの色を指定する	color = 'chartreuse'
カウンタ間で和集合	aCounter | aCounter2
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
option: ライトグリーンを用いる	color = 'lightseagreen'
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: 色をライトグリーンに設定する	color = 'lightseagreen'
イテラブルとシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
縦棒グラフを淡い茶色色として描画する	plt.bar(データ列x, データ列y, color='tan')
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: ライトグレーにグラフの色をする	color = 'lightgrey'
option: グラフの色をピンクに設定する	color = 'pink'
日付時刻データが木曜日	aDatetime.weekday() == 3
両端キューの左にイテラブルの各値を追加する	deq.extendleft(iterable)
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
要素が集合のメンバーに含まれない	element not in aSet
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
option: 無視するフッタをnに設定する	skipfooter = n
分類結果の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
nが-9以上、9以下かどうか調べる	-9 <= n <= 9
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
ふたつの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
コーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
グラフの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
二つの列からグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
赤いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
カーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
ヒストグラムでリストを作図する	plt.hist(データ列)
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフを半透明の点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフにクロスマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
集合からエラーなく要素を除く	aSet.discard(element)
現在が何分か知る	datetime.date.today().minute
八進数文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
青い破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフの▼マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
rgbに棒プロットの色をセットする	plt.bar(ラベル列, データ列, color=rgb)
option: フォントの色をサドルブラウンに設定する	color = 'saddlebrown'
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームを表示するとき、折り返しをオフに減らす	pd.set_option('expand_frame_repr', False)
青紫色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
データフレームのある列の母標準偏差	df['列A'].std(ddof=0)
散布図をライムグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='limegreen')
読み込みモードでファイルパスをオープンする]	open(filepath, mode='r')
グラフをデフォルトでいい感じに設定する	sns.set()
散布図を黄緑色を使って描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフを青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
カウンタから辞書を引く	aCounter.subtract(aDict)
option: グラフの色をシャルトリューズに指定する	color = 'chartreuse'
ベクトルの要素数	aArray.size
リストとリストリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームの選択したカラムの欠損値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
リストと配列の散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
セットから要素を除く	aSet.remove(element)
三変数の最大値	max(x, y, z)
タプルの中の最大値	max(aTuple)
文字列の先頭は部分文字列かどうか確認する	s.startswith(sub)
プロットの見た目をいい感じにする	sns.set()
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
option: NaNは例外を投げる	nan_policy = 'raise'
データフレームのインデックスの一覧	df.index
option: フォントの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
現在が水曜日	datetime.datetime.today().weekday() == 2
nとn2の差	n - n2
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
数列とデータ列についての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
棒グラフを青紫色として描画する	plt.bar(データ列x, データ列y, color='violet')
セットが空か調べる	len(aSet) == 0
ヒストグラムの線の種類を一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
データフレームがどれだけ分散しているか調べる	df.var()
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
数値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームをある列でグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
option: レモンシフォンにグラフの色を設定する	color = 'lemonchiffon'
ライトサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
分類結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
リストと配列についての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
黄色い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
option: 箱ひげ図を水平方向にする	vert = False
nとn2が等しいかどうか調べる	n == n2
オリーブにヒストグラムの色を変更する	plt.hist(データ列, color='olive')
エクセルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
option: ドジャーブルーにグラフの色を設定する	color = 'dodgerblue'
キューの長さを制限する	collections.deque(maxlen=n)
表データの指定した二つの列を抽出する	df[['列A', '列B']]
青紫色で線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ラインを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
日付時刻データがタイムスタンプデータよりあと	aDatetime > aDatetime2
集合から任意の要素を取り出す	aSet.pop()
データシリーズの第三四分位数	ds.quantile(0.75)
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
実数が正の数か	x > 0
自然数最小公倍数	math.lcm(n, n2)
ベクトルが何のデータ型か調べる	aArray.dtype()
二つのカウンタの共通する要素	aCounter & aCounter2
ある列の文字列に部分文字列がない行を選択する	df[~df['列A'].str.contains(部分文字列)]
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
指定した列が正規分布からどの程度、尖っているか見る	df['列A'].skew()
実数は無限大か	math.isinf(x)
nをn2だけ増加させる	n += n2
データフレームを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
コーンフラワーブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
縦棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームから数値データだけ抽出する	df.select_dtypes('number')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
オブジェクトのバイト長	sys.getsizeof(obj)
データフレームの値をValueMapでまとめて置換する	df.replace(ValueMap)
データフレームの一部のカラムを丸める	df[['列A', '列B']].round()
データフレームを表示するとき列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
オブジェクトの参照カウント	sys.getrefcount(obj)
xが一桁の正の数かどうか調べる	0 <= x <= 9
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
日付時刻データの時間	aDatetime.hour
文字列が文字列リストに含まれるか調べる	s in aStringList
データフレームから指定した二つの列を抽出する	df[['列A', '列B']]
値をアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
横棒グラフを黄緑色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームの指定したカラムの中に文字列があるか調べる	df['列A'].isin([value])
option: グレーを用いる	color = 'grey'
x軸だけグリッド線	plt.grid(axis='x')
データ列の移り変わりを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
パラメータについて数式を微分する	sympy.diff(e, z)
標準入力から1文字だけ読み込む	sys.stdin.read(1)
文字列を部分文字列で分けたときの後半の文字列を見る	s.partition(sub)[-1]
明るくカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
辞書のキーを列挙する	list(aDict)
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
カテゴリ別で色付けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフをデピンク色を使って描画する	plt.plot(データ列x, データ列y, color='deeppink')
赤色としてヒストグラムを描画する	plt.hist(データ列, color='red')
nまでの偶整数列を得る	list(range(2, n, 2))
文字列が全て大文字か判定する	s.isupper()
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
文字列を太字にする	f'\033[1m{value}\033[0m'
文字列から部分文字列を全て消す	s.replace(sub, '')
まとめてデータシリーズの値をValueMapで置換する	ds.replace(ValueMap)
データフレームの選択したカラムの標本分散を求める	df[['列A', '列B']].var(ddof=0)
ファイルを追加モードとしてオープンする]	open(filepath, mode='a')
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
1行標準入力から読む	sys.stdin.readline()
ファイルパスのディレクトリ名を見る	os.path.dirname(filepath)
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
option: グレー色を使う	color = 'gray'
散布図をライム色を用いて描画する	plt.scatter(データ列x, データ列y, color='lime')
実行結果を太字で出力する	print(f'\033[1m{value}\033[0m')
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
真下位集合かどうか調べる	aSet < aSet2
ヒストグラムの色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
折れ線グラフを色付きの実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
小数点数とyの斜辺	math.hypot(x, y)
パールバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データシリーズを十の位で丸めて整数にする	ds.round(-1).astype(int)
nとn2の和	n + n2
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
データフレームの一部のカラムの欠損値を第二四分位数にする	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: ペールグリーン色を使う	color = 'palegreen'
ユーザから入力される	input()
小数点数を切り上げて整数に変換する	math.ceil(x)
折れ線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
オブジェクトは浮動小数点数型かどうか調べる	isinstance(obj, float)
SJISを使ってファイルパスをオープンする]	open(filepath, encoding='shift_jis')
xでデータフレームのカラムの欠損値を置換する	df['列A'].fillna(x)
データ列とリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
option: 淡いピンク色にグラフの色を変更する	color = 'lightpink'
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
列のユニークな値	ds.unique()
グラフの補足の場所を(x,y)に変更する	plt.legend(loc=(x, y))
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
折れ線グラフをブランチドアーモンド色を使って描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
折れ線グラフのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
黒い四角マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
複数のシートをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
データフレームの要約統計量	df.describe()
ヒストグラムを白色として描画する	plt.hist(データ列, color='white')
データフレームの文字列をNaNにする	df.replace(値, np.nan)
二つの集合のインターセクションのみに更新する	aSet.intersection_update(aSet2)
両端キューを全て取り除く	deq.clear()
グラフにy=0の点線を設定する	plt.axhline(y=0, linestyle='dotted')
option: データ型として８ビット整数型を用いる	dtype = np.int8
グラフで使える色名の一覧を使う	matplotlib.colors.cnames
データフレームから同じデータをドロップする	df.drop_duplicates(inplace=True)
いつまでも列を繰り返す	itertools.cycle(iterable)
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
切り捨てながらnをn2分の1にする	n //= n2
データ列の折れ線グラフを丸印を使って描画する	plt.plot(データ列x, データ列y, marker='o')
配列とリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
暗い赤色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: コーラル色を使う	color = 'coral'
改行	'\n'
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ラベンダーブラッシュにヒストグラムの色を変更する	plt.hist(データ列, color='lavenderblush')
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
指定した列のカテゴリで集計し各標準偏差を計算する	df.groupby('列A').std()
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
ミディアムスプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
配列から重複を除いた配列を作る	np.unique(aArray)
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
プロットの背景色を暗くする	sns.set(style='darkgrid')
データフレームのカラムの欠損値を後の行の値で埋める	df['列A'].fillna(method='bfill')
タプルを順番付けする	enumerate(aTuple)
データフレームの未入力値をモードに設定する	df.fillna(df.mode().iloc[0])
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
2つのデータフレームを縦向きに連結する	pd.concat([df, df2], axis=0)
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列のn番目を求める	s[n]
データフレームの文字列を欠損値にする	df.replace(値, np.nan)
データフレーム全体をインデックスによってソートする	df.sort_index()
データフレームを十の位で丸める	df.round(-1)
データフレームの一部のカラムを一万の位で丸める	df[['列A', '列B']].round(-4)
option: ホットピンクを使う	color = 'hotpink'
タプルのオブジェクトが最初に見つかるインデックス	aTuple.index(element)
小数点数の双曲線正弦を算出する	math.sinh(x)
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
option: グラフの種類を一点鎖線にセットする	linestyle = 'dashbot'
xが-9以上、9以下かどうかテストする	-9 <= x <= 9
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
データフレームの欠損値を平均に変更する	df.fillna(df.mean())
データフレームをグループ化しそれぞれの個数を求める	df.groupby('列A').count()
ヒストグラムの色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
データフレームとして表計算ファイルを読み込む	pd.read_excel('file.xlsx')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
現在が何月か知る	datetime.datetime.today().month
データフレームの選択したカラムを小数点以下n桁で丸める	df[['列A', '列B']].round(n)
データフレームをある列の値として集計し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
表計算ファイルファイルでデータフレームを出力する	df.to_excel('file.xlsx')
option: フォントの色をカーキに変更する	color = 'khaki'
日付時刻データを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
線グラフをミディアムパープル色を使って描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
主成分分析として濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームの選択したカラムの要約統計量	df[['列A', '列B']].describe()
リストとリストの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
両端キューの上限	deq.maxlen
ライトグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
部分文字列で部分文字列が始まるか	s.startswith(sub)
ダークバイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='darkviolet')
オプションで標準エラーを出力にする	file = sys.stderr
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
ファイル名がJSONファイルか調べる	filename.endswith('.json')
グリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
option: 分割記号を文字列にする	sep = s
配列のn次モーメントを見る	scipy.stats.moment(配列, moment=n)
折れ線グラフの色をやわらかい青にセットする	plt.plot(データ列x, データ列y, color='cornflowerblue')
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
リストを行列にする	np.array(aList)
行列の合計値	np.sum(aArray)
浮動小数点数に実数をかける	x * y
文字列を改行で区切る	s.splitlines()
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
ファイルからファイル名を取り出す	os.path.basename(filepath)
セットの濃度	len(aSet)
横棒グラフをバイオレット色で描画する	plt.barh(データ列x, データ列y, color='violet')
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
範囲を指定して整数乱数を算出する	random.randint(最小値, 最大値)
線を半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
グリーンイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
文字列をUTF8でバイト列にする	s.encode(encoding='utf-8', errors='strict')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
表データのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
データフレームの複数の列を除き、みる	df.drop(['列A', '列B'], axis=1)
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
オレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
青い破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
文字列中にひとつでも非アスキー文字が含まれるか判定する	any(not c.isascii() for c in s)
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
現在の日付時刻	datetime.datetime.today()
リストと数列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
グラフを論文用にする	sns.set(context='paper')
日付時刻データが火曜日	aDatetime.weekday() == 1
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
option: 色をライムに指定する	color = 'lime'
横棒グラフを青紫色を使って描画する	plt.barh(データ列x, データ列y, color='violet')
ネイピア数を用いる	math.e
部分文字列を文字列の先頭から探す	s.find(sub)
列をn個にビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
ハローワールドと表示する	print('Hello World')
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ファイルパスを書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='w')
色付きの点線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
xが1、もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
option: グラフの色をシスルに設定する	color = 'thistle'
プロットのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
データシリーズの中に日付データがあるか調べる	ds.isin([value])
option: エクセルファイルシート名を指定する	sheet_name = ['A', 'B']
折れ線グラフのクロスマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: 青緑に色を設定する	color = 'teal'
グラフの描画で明るく色を使用する	sns.set(pallete='bright')
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
nが1、もしくは2、もしくは3に等しいかどうか	n == 1 or n == 2 or n == 3
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
option: シートの名前を設定する	sheet_name = ['A', 'B']
nが1、もしくは2か	n == 1 or n == 2
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
色を全般的に淡くする	sns.set(pallete='muted')
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
列をイミュータブルなセットに変換する	frozenset(iterable)
横棒プロットを描画してバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
散布図の星印を青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
option: フクシアにグラフの色を設定する	color = 'fuchsia'
文字列が小文字か調べる	s.islower()
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
散布図のバツマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図のバツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
カテゴリ列でグループ化してデータフレームの全列の相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
表データの先頭n行	df.head(n)
グラフに使うフォントを指定する	sns.set(font=フォント名)
データフレームの列の標本標準偏差	df['列A'].std(ddof=1)
Pythonパスのリストを確める	sys.path
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
option: フォントの色をライトグリーンに指定する	color = 'lightseagreen'
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データシリーズの値が欠損値か判定する	ds.isna()
オブジェクトがあるクラスのインスタンスか	isinstance(obj, クラス)
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
イテラブルを配列に変換する	np.array(iterable)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
option: 先頭の行をヘッダに増やす	header = 0
option: ダークスラテグレーを使う	color = 'darkslategray'
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
線グラフの色をミッドナイトブルーにセットする	plt.plot(データ列x, データ列y, color='midnightblue')
折れ線グラフをイエローグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
第一引数で指定したファイルの名前	sys.argv[1]
散布図のポイント印の大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
データフレームの一部のカラムの標準偏差	df[['列A', '列B']].std()
データフレームの一部の列を1000の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
データ列の折れ線グラフを描画して、色をRGBとして設定する	plt.plot(データ列x, データ列y, color='#800080')
option: フォントの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をカーキに指定する	color = 'khaki'
ヒストグラムの色をブルーバイオレットに指定する	plt.hist(データ列, color='blueviolet')
青い下三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ヒストグラムの色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
モカシン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
散布図をミディアムバイオレットレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
option: 線の種類を実線に変更する	linestyle = 'solid'
線グラフを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
実数を切り上げる	math.ceil(x)
predicateFuncを適用したとき真とならない列の部分	itertools.dropwhile(predicateFunc, iterable)
散布図をサドルブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
データフレームからランダムに100行を抽出する	df.sample(100)
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
折れ線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
多次元データをMSDで淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: フォントの色をプラムに設定する	color = 'plum'
円プロットでデータ列のパーセントを描画する	plt.pie(データ列, startangle=90)
データフレームのカラムをカテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ファイルをオープンして]書き込みストリームを見る	open(filepath, mode='w')
異なる列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
指定した列によってデータフレームをソートしてNaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
特異値分解を用いて多次元データをパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
セットからエラーなく要素を除く	aSet.discard(element)
リストの先頭のn要素を取り除く	aList[n:]
リストを下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
文字列を最後の部分文字列で二つに区切って後半の文字列を使う	s.rpartition(sub)[-1]
0からN未満までのベクトル	np.arange(N)
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
要素が集合に含まれるかどうか	element in aSet
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
リストとリストについて散布図を描画して三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
両端キューの末尾の値を求める	deq[-1]
グラフの描画でパステル調にカラーパレットを使用する	sns.set(pallete='pastel')
多次元データをSVDで淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: フォントの色をシアンに設定する	color = 'cyan'
切片なしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
棒グラフをスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームの選択したカラムがどの程度、正規分布から歪んでいるか調べる	df[['列A', '列B']].kurt()
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームを二つの列によって小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: フォントの色をゴーストホワイトに設定する	color = 'ghostwhite'
折れ線グラフのアルファをセットする	plt.plot(データ列x, データ列y, alpha=0.5)
リストの値を逆順にする	aList[::-1]
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: 線の種類を破線に指定する	linestyle = 'dashed'
縦棒グラフをディープスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データ列の偏りを対数する	np.log(データ列)
文字列が英字か確認する	s.isalpha()
点線を用いて数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムをカデットブルー色を用いて描画する	plt.hist(データ列, color='cadetblue')
ベクトルの演算をする	import numpy as np
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームをある列を用いて降順にソートする	df.sort_values(by='列A', ascending=False)
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: バリーウッドを用いる	color = 'burlywood'
プロットの色を全般的に淡くする	sns.set(pallete='muted')
option: オリーブ色を使う	color = 'olive'
nを切り捨てながら半分にする	n //= 2
ある列の文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
ファイルを文字コードtextで書き込みできるように開く]	open(filepath, mode='w', encoding=text)
縦棒プロットをプロットして、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
横棒グラフをアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='aquamarine')
文字列がタプルの要素でないかどうか調べる	element not in aTuple
anemptystring	''
棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
データフレームを散布図で可視化して、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
方程式として数式のパラメータの解を求める	sympy.solve(e, z)
リストを配列にする	np.array(aList)
nが3で割り切れるか調べる	n % 3 == 0
文字列を太字化する	f'\033[1m{value}\033[0m'
文字列は十進数字かどうか調べる	s.isdecimal()
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
xが一桁の正の数か調べる	0 <= x <= 9
データシリーズを表データの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
ミディアムオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
双方向キューからポップする	deq.pop()
オブジェクトはリスト型のインスタンスかどうか調べる	isinstance(obj, list)
新しい文字列で文字列を全て置換する	s.replace(sub, newsub)
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
行列は何のデータ型か調べる	aArray.dtype()
UTF8を用いてファイルを追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
データフレームのあるカラムをインデックスに指定する	df.set_index('列A')
データフレームのヒストグラムを縦横に並べて、描く	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
実行を強制的に終了する	sys.exit()
ファイルが存在しないか調べる	not os.path.exists(filepath)
ヒストグラムをブラウン色として描画する	plt.hist(データ列, color='brown')
データフレームの選択した列の欠損値を最大値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
実部と虚部から複素数	complex(x, y)
日付を表現した文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
横棒プロットを描いてバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ふたつのマップを合体する	aDict | aDict2
散布図をシルバー色を使って描画する	plt.scatter(データ列x, データ列y, color='silver')
カテゴリで色分けして、に箱ひげ図を用いてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図にrgbの△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
欠損値がある行をドロップし、みる	df.dropna()
右に双方向キューの要素をn個分ローテンションする	deq.rotate(n)
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: ライトスチールブルー色を用いる	color = 'lightsteelblue'
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
BOM付きでファイルパスを追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームから指定した列名一覧の列のみ抽出する	df[columns]
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
文字列がアルファベットか判定する	s.isalpha()
データフレームを行を用いて降順でソートする	df.sort_index(ascending=False)
十六進数字を全て使う	string.hexdigits
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
オリーブにヒストグラムの色をセットする	plt.hist(データ列, color='olive')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
現在の秒を使う	datetime.date.today().second
イテラブルの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
option: ８ビット整数型を使用する	dtype = np.int8
棒グラフをフクシア色を使って描画する	plt.bar(データ列x, データ列y, color='fuchsia')
クラス分類の真陰性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
n個に列を等間隔で分割する	pd.cut(ds, n)
option: 貝殻を使う	color = 'seashell'
データフレームの中の欠損値の合計を調べる	df.isna().sum()
データフレームをグループ化し、ある列に対し最小値を求める	df.groupby('列A')['列B'].min()
option: ミディアムシアグリーンに色を変更する	color = 'mediumseagreen'
実線を使ってデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
ロージーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフの▼マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
xが-9以上、9以下か調べる	-9 <= x <= 9
リストとリストの散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
データフレームの先頭のカラム以外を説明変数にする	説明変数 = df[df.columns[1:]]
散布図をスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='steelblue')
日付データをn秒前にする	aDate - datetime.timedelta(seconds=n)
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
option: フォントの色をミディアムブルーに設定する	color = 'mediumblue'
ピアソンでデータフレームの相関行列を算出する	df.corr(method='pearson')
日本語が文字列中に使われているかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームをグループ化しそれぞれの最小値を計算する	df.groupby('列A').min()
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
数列と配列について散布図をプロットしてクロスマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
線グラフをマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='magenta')
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
コンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
カウンタの最頻出の要素を求める	aCounter.most_common()[0]
データシリーズの中に含まれるの合計を数える	ds.isin([value]).sum()
十六進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームから10行、サンプリングする	df.sample(10)
データ列と数列の散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームをソートし、、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
データフレームのカラムの中にあると文字列の個数を求める	df['列A'].isin([value, value2]).sum()
option: グリーンイエローにグラフの色を設定する	color = 'greenyellow'
赤い下三角マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='r')
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
option: 真紅を使う	color = 'crimson'
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
オブジェクトひとつのりストを得る	[element]
配列を箱ひげ図で描画する	plt.boxplot(データ列)
nがn2と等しいか調べる	n == n2
平均値でデータフレームのNaNを置換する	df.fillna(df.mean())
散布図をネイビー色を用いて描画する	plt.scatter(データ列x, データ列y, color='navy')
数値を紫色にする	f'\033[35m{value}\033[0m'
スピアマン相関係数としてデータフレームの相関行列を計算する	df.corr(method='spearman')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
散布図をビスク色を使って描画する	plt.scatter(データ列x, データ列y, color='bisque')
カラムのモード	mode, count = scipy.stats.mode(df['列A'])
日付時刻データがタイムスタンプデータと同時か判定する	aDatetime == aDatetime2
二つの列で大きい順にデータフレームを並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
UNIXコマンドtextを実行する	os.system(text)
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
昇順にデータフレームをある列によって並べて更新する	df.sort_values(by='列A', ascending=True, inplace=True)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
xのハッシュ値を計算する	hash(x)
散布図のバツ印を青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
フィシャー流の尖度を算出する	scipy.stats.kurtosis(配列, fisher=True, bias=False)
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
標準エラー	sys.stderr
ダークマゼンタにヒストグラムの色を指定する	plt.hist(データ列, color='darkmagenta')
最初の部分文字列によって文字列を二分する	s.partition(sub)
表データのn行目を消し、	df.drop(n, axis=0)
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
UNIX秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームを複数のカラムを用いてソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
データシリーズは何日か知る	ds.dt.day
option: シエナ色を用いる	color = 'sienna'
配列と数列の散布図を描いて下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
データフレームの選択したカラムの中に文字列があるか調べる	df[['列A', '列B']].isin([value])
option: エラーがあるとき例外を発生させるように設定する	errors = 'strict'
折れ線グラフの丸マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
散布図を黒いダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
外れ値に強い重回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
イテラブルをセットにする	set(iterable)
データ列を中央値でビン分割する	pd.qcut(ds, 2)
サンディーブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
ダークオレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='darkorange')
ライトグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
データフレームの選択したカラムを十の位で丸めて整数にする	df[['列A', '列B']].round(-1).astype(int)
文字列内にひとつでも小文字が含まれるかどうか	any(c.islower() for c in s)
シーケンスを文字列に変換して'改行で結合する	'\n'.join(map(str, iterable))
データフレームの選択した列の第一四分位数	df[['列A', '列B']].quantile(0.25)
option: パールバイオレットレッドにグラフの色を変更する	color = 'palevioletred'
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
オブジェクトから属性を消す	delattr(obj, プロパティ名)
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
0から始まるn個の整数列	list(range(n))
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
アルファベットの大文字を全部見る	string.ascii_uppercase
折れ線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
リストをビン数nでビン分割する	pd.cut(aList, n)
文字列がアスキー文字かどうか調べる	s.isascii()
散らばりを可視化する	plt.scatter(データ列x, データ列y)
リスト内の要素が少なくともひとつ真か調べる	any(aList)
文字列中に非アスキー文字があるかどうか調べる	any(not c.isascii() for c in s)
データシリーズの値が欠損値	ds.isna()
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
データフレームの列の名前一覧で指定した列を取り除く	df.drop(columns, axis=1, inplace=True)
option: 暗い赤にグラフの色を設定する	color = 'darkred'
イテラブルの集合	set(iterable)
実数を文字列に変換する	str(x)
アルファベットの小文字を使う	string.ascii_lowercase
option: 四角マーカーを使用する	marker = 's'
データフレームの列をグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームの指定したカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
配列間の各要素の最大公約数	np.gcd(aArray, aArray2)
option: フォレストグリーンにフォントの色を変更する	color = 'forestgreen'
重複していない行のみ	df[~ df.duplicated(keep=False)]
オーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ひとつでも英字が文字列内に含まれる	any(c.isalpha() for c in s)
ヒストグラムをフローラルホワイト色として描画する	plt.hist(データ列, color='floralwhite')
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
数列とリストの散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
黒いポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図に赤いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
option: 色をライトグリーンに設定する	color = 'lightgreen'
折れ線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
オブジェクトをイテレータに変換する	iter(obj)
真スーパーセットかどうか調べる	aSet > aSet2
データシリーズを正規表現patternでまとめて変更する	ds.replace(pattern, repl, regex=True)
文字列がリストに含まれる	element in aList
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()
分類木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
セットが空でないか	len(aSet) != 0
option: フォントの色をハニーデューに変更する	color = 'honeydew'
文字列をISO8601で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
散布図に赤い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
散布図に赤い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
オプションで標準エラーを使う	file = sys.stderr
データフレームの一部のカラムの平均値	df[['列A', '列B']].mean()
数から実数を引く	x - y
ファイルがない	not os.path.exists(filepath)
ふたつの関係が部分集合か	aSet.issubset(aSet2)
縦棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
青紫色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: パレットトルコイズに色を設定する	color = 'paleturquoise'
インディゴ色を用いてヒストグラムを描画する	plt.hist(データ列, color='indigo')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
指定した列の欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
データフレームの列を名前変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
リストを等しい量になるように分割数nとしてビン分割する	pd.qcut(aList, n)
ヒストグラムを青紫色を使って描画する	plt.hist(データ列, color='violet')
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
全要素を０で初期化した行列	np.zeros(行数, 列数)
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
散布図をシスル色を用いて描画する	plt.scatter(データ列x, データ列y, color='thistle')
配列とリストの散布図を描画して、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
option: フォントの色をラベンダーに変更する	color = 'lavender'
散布図の三角印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの選択した列を1000の位で丸める	df[['列A', '列B']].round(-3)
散布図をディープスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データフレームの指定したカラムの中に文字列と日付データがいくつあるかカウントする	df['列A'].isin([value, value2]).sum()
グラフに使う横軸の名前を設定する	plt.xlabel('x軸ラベル')
カテゴリでグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
散布図のポイントマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
数列間のスピアマンの相関係数を算出する	scipy.stats.spearmanr(数列, 数列2)
nが1、もしくは2かどうかテストする	n == 1 or n == 2
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
最頻値でデータシリーズの欠損値を埋める	ds.fillna(ds.mode().iloc[0])
xの小数点以下'4'桁までを出力する	print(':.4f'.format(x))
赤い上三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのあるカラムのタイムゾーンを指定する	df['列A'].tz_convert('Asia/Tokyo')
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
両端キューが空か調べる	len(deq) == 0
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
ひとつでも非アルファベットが文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
破壊的に大きい順にデータフレームを二つの列によって並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
option: 濃い青にグラフの色を設定する	color = 'darkblue'
クラス分類をガウス過程を用いてする	model = sklearn.gaussian_process.GaussianProcessClassifier()
縦棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
散布図の星印の色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ファイル全体をリストとして読む	f.readlines()
SVDで多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データフレームのある列の値がx以下の行を取り出す	df[df['列A'] <= x]
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
時刻を使う	import datetime
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
既にロードされたモジュールを列挙する	sys.modules
今日が土曜日か調べる	datetime.datetime.today().weekday() == 5
データフレームの未入力値をxで埋める	df.fillna(x)
日付時刻データが何秒か知る	aDatetime.second
ライトコーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
option: 色をディープスカイブルーに設定する	color = 'deepskyblue'
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
イテラブルから重複なく、n要素選ぶ	random.sample(iterable, k=n)
option: バッファのサイズを指定する	buffering = 4096
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
option: マーカーの色をブラックにする	markerfacecolor = 'black'
偽	False
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
スプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
データシリーズの未入力値を最小値に指定する	ds.fillna(ds.min())
横棒グラフを暗い赤色として描画する	plt.barh(データ列x, データ列y, color='darkred')
option: 色をペルーに変更する	color = 'peru'
データシリーズの中に文字列と文字列があるか調べる	ds.isin([value, value2])
JSONファイルのファイル入力を辞書にする	json.load(fin)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ファイルパスをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
２つのデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
リストをアンダーライン付きで表示できる文字列にする	f'\033[4m{value}\033[0m'
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
一度にデータフレームの選択したカラムの値をValueMapで変更する	df[['列A', '列B']].replace(ValueMap)
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
option: 左三角マーカーを描画する	marker = '<'
異なる列をキーとして二つの表データをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
先頭のを除いたデータフレーム	df[df.columns[1:]]
サーモン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
ふたつの集合がセットと交わりを持たないか	aSet.isdisjoint(aSet2)
ある列ごとの標準偏差を求める	df.groupby('列A').std()
カウンタのキーを増やす	aCounter[element] += 1
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
折れ線グラフの丸マーカーの色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: ダークゴールデンロッドにフォントの色を変更する	color = 'darkgoldenrod'
下線付きで変数を表示する	print(f'\033[4m{value}\033[0m')
折り返しをしない	pd.set_option('expand_frame_repr', False)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
文字列に日本語があるか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
マッピングにキーが存在する	key not in aDict
青色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
リストとデータ列の散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
option: パープルを用いる	color = 'purple'
ヒストグラムをロージーブラウン色を使って描画する	plt.hist(データ列, color='rosybrown')
三整数の最大公約数を求める	math.gcd(n, n2, n3)
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
既存の行列をベースに全要素が0のベクトルを初期化する	np.zeros_like(aArray)
縦棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
タプルを並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
横軸を対数に変更する	plt.xscale('log')
option: 小麦色を使用する	color = 'wheat'
ファイルをオープンして]読み込みストリームを求める	open(filepath, mode='r')
option: ダイアモンドマーカーを用いる	marker = 'D'
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
辞書の浅いコピーを作成する	aDict.copy()
データフレームのあるカラムの値がNaNかどうか	df['列A'].isna()
リストの先頭	aList[0]
赤い一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
実行結果を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
データフレームの列の各データが何回出現するか調べる	df[col].value_counts()
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
回帰木分析を行う	model = sklearn.tree.DecisionTreeRegressor()
散布図に▽マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
正規分布にしたがってランダムに配列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームを四捨五入して、整数型にする	df.round().astype(int)
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
散布図を黒い下三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームのインデックスの名前一覧を使う	df.index
option: フォントの色をゴールドにセットする	color = 'gold'
データフレームの指定した３つの列を選択する	df[['列A', '列B', '列C']]
データフレームのカウントプロットを描く	sns.countplot(x='列名', data=df)
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色を淡いピンク色に指定する	color = 'lightpink'
nがn2の倍数でないかどうか調べる	n % n2 != 0
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
データフレームの一部の列の中に日付データと文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
データフレームを2つの列によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
縦棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
option: バリーウッドに色を指定する	color = 'burlywood'
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
nからn2までの一つ置きの整数列を作る	list(range(n, n2+1, 2))
CSV形式にデータフレームをインデックスを付けず保存する	df.to_csv('file.csv', index=None)
ファイルパスをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
データフレームを百の位で丸める	df.round(-2)
option: 濃いシアン色を使う	color = 'darkcyan'
散布図の菱形印の太さを指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: セパレータをスラッシュにする	sep = '/'
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
データシリーズを百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
文字列内にひとつでも大文字があるか調べる	any(c.isupper() for c in s)
ミディアムバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
実数の床を求める	math.floor(x)
アヤメのデータセットからデータフレームをロードする	df = sns.load_dataset('iris')
空の部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
黒いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
パウダーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
リストと配列の散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
辞書順で二つの文字列を比較する	s < s2
option: 印を▼に変更する	marker = 'v'
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
エクセルファイルから全てのシートをロードする	pd.read_excel('file.xlsx', sheet_name=None)
option: 読み込みモードを使う	mode = 'r'
疑似乱数を生成する	random.random()
自分自身をモジュールとして	sys.modules[__name__]
データ列を分割数nを用いてビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームをグループ化し、最小値を求める	df.groupby('列A').min()
辞書の項目名一覧	list(aDict)
データフレームの選択したカラムの中に文字列と文字列がいくつあるか調べる	df[['列A', '列B']].isin([value, value2]).sum()
option: アクアにフォントの色を変更する	color = 'aqua'
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
イテラブルを多重集合にする	collections.Counter(iterable)
option: 紺色を使用する	color = 'darkblue'
大きさnでリストとリストについての散布図を描く	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色をスノーに指定する	plt.hist(データ列, color='snow')
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
棒グラフをレモンシフォン色を使って描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの指定したカラムの未入力値を平均値にセットする	df['列A'].fillna(df['列A'].mean())
データフレームを二つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームの中に日付データと日付データがいくつ含まれるかカウントする	df.isin([value, value2]).sum()
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
グレーにヒストグラムの色を指定する	plt.hist(データ列, color='grey')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='turquoise')
折れ線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
グラフからグリッド線を消す	plt.grid(False)
x軸の目盛りを対数に変更する	plt.xscale('log')
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームのあるカラムの欠損値を最小値にセットする	df['列A'].fillna(df['列A'].min())
タプルを出現回数して、カウンタを更新する	aCounter.update(iterable)
データフレームのあるカラムは何日か知る	df['列A'].dt.day
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
濃い青色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データフレームのカラムの文字列長を列として使う	df[col].str.len()
データフレームのあるカラムの曜日数を求める	df['列A'].dt.dayofweek
ヒストグラムをライトブルー色として描画する	plt.hist(データ列, color='lightblue')
折れ線グラフの色をホワイトに変更する	plt.plot(データ列x, データ列y, color='white')
２つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
データフレームの末尾10行を抽出する	df.tail(10)
折れ線グラフを青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
リストと配列の散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
整数乱数の配列	np.random.randint(開始値, 終了値, N)
option: 文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
option: グラフの色をプラムに変更する	color = 'plum'
ダークシアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ふたつのカラムを組み合わせてグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
積み上げ横棒グラフをプロットする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
option: トマト色を使用する	color = 'tomato'
小数点数の双曲線正接	math.tanh(x)
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ミスティローズ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
option: ブルーバイオレット色を用いる	color = 'blueviolet'
データフレームのカラムのスピアマンの順位相関係数を算出する	scipy.stats.spearmanr(df['列A'], df['列B'])
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
グラフの中の縦軸に名前を付ける	plt.ylabel('y軸ラベル')
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データシリーズの未入力値を最小値で補完する	ds.fillna(ds.min())
実数の三乗	x ** 3
option: ゲインズボロ色を使う	color = 'gainsboro'
データシリーズの欠損値を最小値にセットする	ds.fillna(ds.min())
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの一部の列においてどの値が頻出か見る	df[['列A', '列B']].mode()
ゼロ埋めされた配列	np.zeros(要素数)
縦棒プロットをプロットしてラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
折れ線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
nにn2を足して代入する	n += n2
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
文字列を最初の部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: 色の透明度を設定する	alpha = 0.5
nが負の数	n < 0
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
箱ひげ図を描画して平均値を加える	plt.boxplot(データ列, showmeans=True)
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
データフレームの一部のカラムの欠損値をその平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
小数点以下3桁までデータフレームを出力する	df.to_csv('file.csv', float_format='%.3f')
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
リストとリストの散布図を描画して、マーカーをクロスにセットする	plt.plot(データ列x, データ列y, marker='x')
上限指定をしたカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ディムグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
四分位数ごとにリストを分割する	pd.qcut(aList, 4)
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategrey')
ベクトルの内積	np.dot(aArray, aArray2)
横棒グラフをフローラルホワイト色を使って描画する	plt.barh(データ列x, データ列y, color='floralwhite')
グリーンイエロー色でヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
列を文字列として一つにする	''.join(map(str, iterable))
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
低頻出な方からカウンタを列挙する	aCounter.most_common()[::-1]
オブジェクトのクラスを見る	type(obj)
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
option: 暗い赤を使う	color = 'darkred'
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
option: 色をスチールブルーに変更する	color = 'steelblue'
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームのカラム間のスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
データ列のRMSEを計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ダークターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ASCII限定として正規表現で文字列を分ける	re.split(pattern, s, flags=re.ASCI)
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
nの無限数列を求める	itertools.repeat(n)
二変数の最も小さい値を求める	min(x, y)
データフレームの指定したカラムの中にいくつ日付データが含まれるか調べる	df['列A'].isin([value]).sum()
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
predicateFuncが真となるイテラブルの部分を得る	itertools.takewhile(predicateFunc, iterable)
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
ファイルパスのディレクトリ名	os.path.dirname(filepath)
二つの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
ヒストグラムの色をベージュに変更する	plt.hist(データ列, color='beige')
集合＼セット	aSet.difference(aSet2)
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
文字列が文字列リストにあるか調べる	s in aStringList
ガウス過程を用いて回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
青い一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームの欠損値をその中央値で埋める	df.fillna(df.median())
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
option: ライトスチールブルーにフォントの色を設定する	color = 'lightsteelblue'
後ろから部分文字列で文字列を区切る	s.rsplit(sub)
要素がセットのメンバーでない	element not in aSet
データ列とデータ列について散布図を描き、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
今日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
option: ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
縦棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
ライトスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
プロットにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
データフレームの列の欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
四分位数でデータフレームの中のカラムを分割する	pd.qcut(df[col], 4)
kを底とする小数点数の対数	math.log(x, k)
option: ダークオレンジ色を使う	color = 'darkorange'
データフレームを２つの列によってまとめたグループ	df.groupby(['列A', '列B'])
option: ライトブルーにグラフの色を設定する	color = 'lightblue'
折れ線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
option: クリムゾンを用いる	color = 'crimson'
ファイルが存在しない	not os.path.exists(filepath)
ダークカーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データ列の推移を色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列が大文字	s.isupper()
棒グラフの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
赤色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
指定した列のカテゴリで集計し、最大値を求める	df.groupby('列A').max()
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
option: ブラックにフォントの色を変更する	color = 'black'
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
配列のスピアマンの順位相関係数	scipy.stats.spearmanr(配列, 配列2)
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
文字列の右側からタブを除く	s.rstrip('\t')
rgbの△マーカーをリストと数列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 箱髭図に平均を加える	showmeans = False
nが2で割り切れるかテストする	n % 2 == 0
タプルを逆さにする	reversed(aTuple)
文字列が全て大文字	s.isupper()
セットからエラーなく要素を取り除く	aSet.discard(element)
データフレームをCSV形式にヘッダを付けず保存する	df.to_csv('file.csv', header=None)
データフレームの中に文字列とが存在する	df.isin([value, value2])
オブジェクトはリストに含まれない	element not in aList
Excelファイルでデータフレームを保存する	df.to_excel('file.xlsx')
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
データシリーズの欠損値をxに設定する	ds.fillna(x)
データ列の偏りを平方根する	np.sqrt(データ列)
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
データフレームを複数の列で並べ、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
棒グラフをダークシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームのあるカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
データシリーズの中の欠損値の合計をカウントする	ds.isna().sum()
散布図を黒い▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列の四分位を描画する	plt.boxplot(データ列)
ライトグリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
option: 書き込みモードに設定する	mode = 'w'
tanの逆数	math.atan(x)
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データフレームのあるカラムの未入力値を最大値で埋める	df['列A'].fillna(df['列A'].max())
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
線形モデルの回帰変数を求める	model.coef_
データフレームの中の列を分割数nを用いてビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
イテラブルを行列にする	np.array(iterable)
散布図を黒い四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
書き込み用にファイルをBOM付きを用いてオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
グラフを描く準備をする	import matplotlib.pyplot as plt
データフレームのある列の値がx以下のデータを抽出する	df[df['列A'] <= x]
データフレームとしてJSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
option: マーカーの色を赤にする	markerfacecolor = 'red'
文字列がリストに含まれないか調べる	element not in aList
ヒストグラムの色をペルーに変更する	plt.hist(データ列, color='peru')
両端キューの最初	deq[0]
赤いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データシリーズの中に日付データが存在するか調べる	ds.isin([value])
指定したカラムを一万の位で丸める	df['列A'].round(-4)
option: ゴーストホワイトに色を変更する	color = 'ghostwhite'
データフレームの指定したカラムを十の位で四捨五入して整数にする	df['列A'].round(-1).astype(int)
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
改行なしに文字列をプリントする	print(value, end='')
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
数列とリストの散布図に赤い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
アリスブルーにヒストグラムの色を変更する	plt.hist(データ列, color='aliceblue')
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
エクセルファイルから複数のシートを指定してデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: 色を淡いピンク色にする	color = 'lightpink'
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
多次元データを主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
option: 色をサンディーブラウンに変更する	color = 'sandybrown'
実行結果を黄色で表示できる文字列にする	f'\033[33m{value}\033[0m'
横向きに２つのデータフレームを一つにする	pd.concat([df, df2], axis=1)
ヒストグラムの色をブランチドアーモンドにセットする	plt.hist(データ列, color='blanchedalmond')
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
実行時の標準出力の出力先がターミナルか確認する	os.isatty(sys.stdin.fileno())
サーモンにヒストグラムの色を変更する	plt.hist(データ列, color='salmon')
散布図の丸印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
ある列ごとの最小値を求める	df.groupby('列A').min()
文字列の最後から部分文字列を取り除く	s.rstrip(sub)
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
文字列が文字列リストのいづれか	s in aStringList
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgray')
棒グラフをパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='purple')
option: 区切り記号を改行にする	sep = '\n'
標準入力	sys.stdin
珊瑚色として散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
タイタニック号のデータセットをロードする	df = sns.load_dataset('titanic')
行列の列ごとの標準偏差を算出する	np.std(aArray, axis=0)
各カテゴリごとにデータフレームの棒プロットを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
NaNを用いる	math.nan
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームから型型を抽出する	df.select_dtypes(ty)
列名を指定してデータフレームを右結合する	pd.merge(df, df2, on='列A', how='right')
部分文字列を文字列の接頭辞から除去する	s.removeprefix(sub)
データ列とリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
エクセルファイルからシート名を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
オブジェクトにプロパティがあるかどうか調べる	hasattr(obj, プロパティ名)
あるカラムの値で表を未入力値を含めてグループ化する	df.groupby('列A', dropna=False)
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
箱ひげ図を描画し、、平均値を追加する	plt.boxplot(データ列, showmeans=True)
列を累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
双方向キューの値を反転する	deq.reverse()
縦軸の目盛りを整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
配列をビン数nとしてビン分割する	pd.cut(aArray, n)
ファイルを絶対パスに変換する	os.path.abspath(filepath)
オーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
日付データが日付データより後ろか調べる	aDate > aDate2
双方向キューの末尾	deq[-1]
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
ある列の文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
散布図をrgbの星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
空のマップ	{}
ヒストグラムのビン数をセットする	plt.hist(データ列, bins=区関数)
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームの全カラムの散らばりを可視化する	sns.pairplot(df)
線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
データフレームのカラムの幾何平均	scipy.stats.gmean(df['列A'])
option: スチールブルー色を使う	color = 'steelblue'
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
option: ピンクにフォントの色を変更する	color = 'pink'
データフレームの数値を一度に四捨五入する	df.round()
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: デピンク色を使う	color = 'deeppink'
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
JSONファイルのファイルを辞書に変換する	json.load(fin)
色付きの点線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
双方向キューの右側から要素を削除する	deq.pop()
ファイル全体を行分割して読み込む	f.readlines()
nわるn2を求める	n / n2
タイムスタンプデータにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
リストとリストについての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
折れ線グラフに大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: グラフの色をライトシアンに指定する	color = 'lightcyan'
プロットの凡例を表示する	plt.legend()
データフレームの一部のカラムの不偏標準偏差を求める	df[['列A', '列B']].std()
赤い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
文字列中に部分文字列が含まれないか調べる	sub not in s
浮動小数点数のkを底とする対数	math.log(x, k)
折れ線グラフの三角印を赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
数式の変数についてのn階微分を計算する	sympy.diff(e, z, n)
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
option: ライトグリーン色を使用する	color = 'lightgreen'
ファイルパスからバイナリ書き込みストリームを開き]、fとする	f = open(filepath, mode='wb')
一点鎖線に線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームの選択したカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
文字列の接尾辞は部分文字列か調べる	s.endswith(sub)
データフレームの列の各データが何回出現するか確認する	df[col].value_counts()
配列と配列についての散布図に黒い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
ヒストグラムの色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
nがn2の倍数でないか確認する	n % n2 != 0
year年month月day日のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
実数がNaNか調べる	math.isnan(x)
データ列をヒストグラムにする	plt.hist(データ列)
option: スタイルを破線に設定する	linestyle = 'dashed'
エポック秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの丸印の色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データシリーズの欠損値を前の行の値に指定する	ds.fillna(method='ffill')
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
2つの文字列が等しくないか調べる	s != s2
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
option: フォントの色を茶色に設定する	color = 'brown'
グラフの見た目を良くする	import seaborn as sns
データシリーズが何日か見る	ds.dt.day
アルファベットの小文字列	string.ascii_lowercase
データシリーズの未入力値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
半透明の点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
折れ線グラフの印を下三角印にする	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
タプルをナンバリングする	enumerate(aTuple)
シーケンスを累積した列	itertools.accumulate(iterable, operator.mul)
ベクトルは何のデータ型か調べる	aArray.dtype()
折れ線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
データ列を箱ひげ図にする	plt.boxplot(データ列)
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
文字列を走査し正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
実数の双曲線余弦を算出する	math.cosh(x)
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
ヒストグラムをミディアムスレートブルー色として描画する	plt.hist(データ列, color='mediumslateblue')
option: 分割記号を改行にする	sep = '\n'
10を底とする実数の対数	math.log10(x)
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームをグループ化しあるカラムに対し標準偏差を求める	df.groupby('列A')['列B'].std()
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
カウンタの要素の出現回数	aCounter[element]
ヒストグラムの色をアンティークホワイトに指定する	plt.hist(データ列, color='antiquewhite')
オールドレース色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
辞書からキーの値	aDict.get(key)
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
実数が正の数か調べる	x > 0
キューに要素をエンキューする	deq.appendleft(element)
指定したカラムの値を正規表現でまとめてreplに変更する	df['列A'].replace(pattern, repl, regex=True)
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
要素を集合に追加する	aSet.add(element)
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
データフレームを十の位で四捨五入して整数型にする	df.round(-1).astype(int)
平均と分散を用いてデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
カラムのモード	df['列A'].mode()
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
プラットフォームの文字コードの最大値	sys.maxunicode
散布図のクロスマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
ディープスカイブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ゼロ埋めした整数型のベクトル	np.zeros(要素数, dtype=np.int)
データ列をビン数nとしてビニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
マッピングを浅くコピーする	dict(aDict)
ある列の値によってデータフレームをグループ化する	df.groupby('列A')
データフレームのあるカラムをPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
グラフにグリッド線を入れる	plt.grid(True)
青い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
ファイルパスを文字列の示すエンコーディングを用いて開く]	open(filepath, encoding=s)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
データフレームを複数の列によって並べる	df.sort_values(by=['列A', '列B'])
変数をスワップする	x, y = y, x
列から配列を初期化する	np.array(iterable)
線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データ列を２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
集合から別のセットとの共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列を改行なしに表示する	print(value, end='')
折れ線グラフの△マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データシリーズを百の位で丸める	ds.round(-2)
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
２つの列によってデータフレームを並べ直して、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
データシリーズを10の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
データフレームの行を取り出す	df[start:end]
印字を全部使う	string.printable
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
縦棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ファイルを読み込みモードで開き]、fとする	f = open(filepath, mode='r')
表の下5行を抽出する	df.tail(5)
折れ線グラフを青い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
アルファベットの大文字を全部求める	string.ascii_uppercase
２つ並べて配列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
データシリーズの上位25％を求める	ds.quantile(0.25)
線形モデルの切片	model.intercept_
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
散布図をブラック色を使って描画する	plt.scatter(データ列x, データ列y, color='black')
パーセプトロンを用いてクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
横棒グラフを白色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
2つの文字列が等しくないか判定する	s != s2
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
主成分分析として淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
マップのの一覧	aDict.values()
小数点数の自然対数を算出する	math.log(x)
色付きの実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームの欠損値を最大値に変更する	df.fillna(df.max())
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
折れ線グラフの色をペールグリーンにする	plt.plot(データ列x, データ列y, color='palegreen')
オレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームのインデックスがnの行を取り出す	df.loc[n]
折れ線グラフのポイント印を青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列が十進数字か	s.isdecimal()
rgbのバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
ブラック色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
青い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
日付データは日付データより遅い	aDate > aDate2
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
タイムスタンプのデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
option: ローングリーンにグラフの色を設定する	color = 'lawngreen'
実数から実数を減ずる	x - y
データ列の推移を赤い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
空集合を見る	set()
データフレームの選択した列の母標準偏差	df[['列A', '列B']].std(ddof=0)
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームを指定したカラムでグループ化し要約統計量を求める	df.groupby('列A').describe()
option: 色をやわらかい青に変更する	color = 'cornflowerblue'
棒グラフをイエローグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
タプルの先頭を除く	aTuple[1:]
折れ線グラフの色を淡いピンク色にする	plt.plot(データ列x, データ列y, color='lightpink')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
文字列の右側から空白を取り除く	s.rstrip(' ')
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
黒い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
カウンタ同士で∪演算する	aCounter | aCounter2
折れ線グラフの色をレベッカパープルにセットする	plt.plot(データ列x, データ列y, color='rebeccapurple')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
折れ線グラフを色付きの破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: エラーを無視するように指定する	errors = 'ignore'
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
option: エラーを無視するようにする	errors = 'ignore'
空白文字を全部求める	string.whitespace
データフレームをある列によって並べる	df.sort_values(by='列A')
あるカラムの値がxに等しい行を抽出する	df[df['列A'] == x]
カウンタを多い順に列挙する	aCounter.most_common()
青い破線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図の上三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
ゼロ埋めされた３二ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.int16)
データフレームの未入力値を平均値で埋める	df.fillna(df.mean())
色付きの点線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
モデルのバージョン	version = 'wcce2022-0.1'
散布図をローングリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
プロットに使用するx軸のラベルを設定する	plt.xlabel('x軸ラベル')
配列の次元の数を算出する	aArray.ndim
▲マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
事前にパターンを大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
散布図の▼マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
リストと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
データ列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
クラス名が名前付きタプル	issubclass(C, tuple)
option: グラフの色をライトサーモンに変更する	color = 'lightsalmon'
整数nがリストのどれかか	n in aList
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
箱ひげ図を用いてデータ列を描画する	plt.boxplot(データ列)
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの一部のカラムの25パーセンタイル	df[['列A', '列B']].quantile(0.25)
辞書のキーに対応した値を得る	aDict.get(key)
option: ビスク色を使用する	color = 'bisque'
リストとデータ列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの末尾を調べる	df.tail()
半透明の破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
データフレームの値を正規表現でまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームの全カラムを散布図を用いてグラフ化する	sns.pairplot(df)
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
赤いクロスマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
小さい順にある列でデータフレームを並べ直す	df.sort_values(by='列A', ascending=True)
数を十の位で四捨五入する	round(x, -1)
コーラル色を用いてヒストグラムを描画する	plt.hist(データ列, color='coral')
データシリーズの平均を求める	ds.mean()
縦棒グラフをチョコレート色を使って描画する	plt.bar(データ列x, データ列y, color='chocolate')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
縦向きに3つのデータフレームを結合する	pd.concat([df, df2, df3], axis=0)
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
本日が火曜日	datetime.datetime.today().weekday() == 1
K最近傍法で回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
option: ペールグリーンに色を指定する	color = 'palegreen'
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
データフレームの行と列をひっくり返す	df.T
option: マーカーをポイントに変更する	marker = '.'
色付きの実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
数列を折れ線グラフを用いて可視化する	plt.plot(データ列x, データ列y)
rgbのバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列を黄色化する	f'\033[33m{value}\033[0m'
実行結果を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームの列のユニークな値の個数を見る	df[col].nunique()
正規分布にしたがって配列の値が発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
縦軸の目盛りを対数に変更する	plt.yscale('log')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
折れ線グラフの色をシャルトリューズにセットする	plt.plot(データ列x, データ列y, color='chartreuse')
乱数シードを初期化する	random.seed()
散布図のポイント印を青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図をレベッカパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
数値を水色でプリントする	print(f'\033[36m{value}\033[0m')
モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
散布図のクロスマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: バツ印を使う	marker = 'x'
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
ファイルパスをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
option: エラーがあるとき、例外を発生させるようにセットする	errors = 'strict'
データフレームの選択した列の中に日付データと文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
表データのあるカラムが何年か調べる	df['列A'].dt.year
分類モデルのF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
ファイルが存在するかどうか調べる	os.path.exists(filepath)
リストを逆さにする	reversed(aList)
option: クリムゾン色を用いる	color = 'crimson'
データフレームの選択した列がどれだけ分散しているか見る	df[['列A', '列B']].var()
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのあるカラムの欠損値を平均値で補完する	df['列A'].fillna(df['列A'].mean())
文字のASCIIコード	ord(ch)
データフレームのカラムのトリム分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
２つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
データフレームの中である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
配列が正規分布に従うかどうか調べる	scipy.stats.shapiro(配列)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
ヒストグラムをスカイブルー色を使って描画する	plt.hist(データ列, color='skyblue')
オレンジレッドにヒストグラムの色を変更する	plt.hist(データ列, color='orangered')
option: ライトスレイグレー色を使う	color = 'lightslategray'
option: 最初のカラムをインデックスに設定する	index_col = 0
nがn2で割り切れるか調べる	n % n2 == 0
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
逆順のキュー	reversed(deq)
実数の逆正弦	math.asin(x)
option: n番目のカラムをインデックスにセットする	index_col = n
option: ホワイトスモークにフォントの色を設定する	color = 'whitesmoke'
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームから同じ内容の行を破壊的にドロップする	df.drop_duplicates(inplace=True)
線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
凡例の位置を指定する	plt.legend(loc=(x, y))
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームの標準偏差を計算する	df.std()
カウンタのキーとカウントをリストとして得る	aCounter.items()
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
rgbの星マーカーを配列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームをある列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
データフレームからカテゴリデータの列を選択する	df.select_dtypes('object')
option: ASCII文字に限定する	flag = re.ASCII
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
データ列の推移を半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
組を順に表示する	print(*aTuple)
二つの数値を文字列で区切ってプリントする	print(value, value2, sep=s)
単位正方行列を初期化する	np.identity(n)
異なる列をキーとして２つのデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
オブジェクトはタプルクラスかどうか調べる	isinstance(obj, tuple)
ファイルをBOM付きとして開く]	open(filepath, encoding='utf_8_sig')
データフレームの中にあると日付データの個数を数える	df.isin([value, value2]).sum()
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
文字列は文字列より辞書順で後かどうか調べる	s > s2
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
nをn2分の一にする	n /= n2
データフレームの第一四分位数を求める	df.quantile(0.25)
グラフの描画で濃くパレットを使う	sns.set(pallete='deep')
列数を減らす	pd.set_option('display.max_columns', n)
文字列が全てアルファベットか調べる	s.isalpha()
散布図を赤い丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
タプルの値を列挙する	aDict.values()
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
データフレームの選択した列の標本標準偏差を求める	df[['列A', '列B']].std(ddof=1)
option: ライトサーモン色を用いる	color = 'lightsalmon'
空の双方向キューを作る	collections.deque()
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: グラフの色をスレートブルーにする	color = 'slateblue'
option: 菱形マーカーを用いる	marker = 'D'
折れ線プロットの色をRGBを用いて指定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: ディープスカイブルー色を使う	color = 'deepskyblue'
パープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
ダークシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
線グラフをチョコレート色を用いて描画する	plt.plot(データ列x, データ列y, color='chocolate')
両端キューの先頭に列の各要素を付け加える	deq.extendleft(iterable)
データシリーズが正規分布からどの程度歪んでいるか確認する	ds.kurt()
データフレームの選択したカラムのNaNを平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
リストと配列についての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
組の値を逆順にする	aTuple[::-1]
散布図をライトグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
浮動小数点数が正	x > 0
option: グラフの色をブランチドアーモンドに変更する	color = 'blanchedalmond'
ガンマ関数の絶対値に自然対数をとった値を算出する	math.lgamma(x)
データフレームをグループ列ごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
縦棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
マルーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
ペルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
セットから別の集合の要素を全て除去する	aSet.difference_update(aSet2)
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データシリーズの分散を求める	ds.var()
JSONを使用する	import json
データフレームの選択した列の中にいくつ未入力値が存在するかカウントする	df[['列A', '列B']].isna().sum()
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
配列のトリム平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
変数が0に近づく時、数式の極限値を求める	sympy.limit(e, z, 0)
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
オブジェクトはタプルに含まれるかどうか確認する	element in aTuple
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
リストと配列について散布図をプロットして、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
赤いバツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
カウンタのキーを列挙する	aCounter.keys()
option: ダークサーモン色を使用する	color = 'darksalmon'
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
組のn番目のの要素を使う	aTuple[n]
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
数式の変数に数式を代入する	e.subs(z, e2)
双方向キューの最初から要素を取り除く	deq.popleft()
浮動小数点数の最大値を求める	sys.float_info.max
ブラック色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: グラフの色を青に変更する	color = 'blue'
ある列の値がx以上、y未満の行を取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
ダークレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
option: ローングリーンを用いる	color = 'lawngreen'
グラフで使うフォントを指定する	sns.set(font=フォント名)
データフレームのデータ型一覧を使う	df.dtypes
option: グラフの色をフクシアに変更する	color = 'fuchsia'
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
縦棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフをミディアムバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームをエクセルファイルで保存する	df.to_excel('file.xlsx')
データフレームを二つの列によって並べて、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
タプルのキーの一覧	aDict.keys()
折れ線グラフを色付きの実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
要素ひとつのりストを作る	[element]
散布図のクロスマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームの列の基本統計量	df['列A'].describe()
２つのオブジェクトは同一かどうか調べる	obj is obj2
三つの値を順にプリントする	print(value, value2, value3)
nが負の整数かどうか調べる	n < 0
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
ファイルパスを書き込み用に文字列の示す文字コードで開く]	open(filepath, mode='w', encoding=s)
データ列を使う	import pandas as pd
option: 色をピンクに設定する	color = 'pink'
部分文字列が部分文字列で始まる	s.startswith(sub)
データシリーズのKurtosis	ds.kurt()
データシリーズのタイムゾーンを変更する	ds.tz_convert('Asia/Tokyo')
回帰分析をロバスト推定を用いて行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
リストをn個に等しい量になるように分割する	pd.qcut(aList, n)
リストと配列についての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
青色で文字列を表示する	print(f'\033[34m{value}\033[0m')
データフレームから型の列を抽出する	df.select_dtypes(ty)
option: 箱ひげ図に平均を追記する	showmeans = False
データフレームの全列を散布図でグラフ化する	sns.pairplot(df)
カラムの標本分散	df['列A'].var(ddof=0)
キーが辞書に存在するか調べる	key in aDict
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
二つのオブジェクトが同一参照か調べる	obj is obj2
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
nが一桁の数	-9 <= n <= 9
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
配列のデータ型を求める	aArray.dtype()
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
指定した列リストだけ、表の重複を見る	df.duplicated(subset=['列A', '列B'])
データ列の推移を赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
グラフをプレゼン用に指定する	sns.set(context='talk')
折れ線グラフの大バツ印の線幅を変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
オブジェクトのフィールドの値を変更する	setattr(obj, プロパティ名, 値)
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
データフレームの中にいくつ文字列が含まれるか数える	df.isin([value]).sum()
データフレームをカラム名を指定して右ジョインする	pd.merge(df, df2, on='列A', how='right')
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
文字列の先頭から不要な空白を取り除く	s.lstrip()
ある列の値がxより大きいデータを選ぶ	df[df['列A'] > x]
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
行列にはいくつ要素が含まれるか調べる	aArray.size
モジュールとして自分自身をを得る	sys.modules[__name__]
エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
線グラフの色をミディアムオーキッドにする	plt.plot(データ列x, データ列y, color='mediumorchid')
ミディアムスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
2つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
データシリーズの第二四分位数を求める	ds.median()
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
カテゴリで色分けして、データフレームの全カラムの散布図をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
折れ線グラフをクリムゾン色を用いて描画する	plt.plot(データ列x, データ列y, color='crimson')
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: オーキッドにフォントの色をセットする	color = 'orchid'
文字列に漢字がある	re.search('[\u4E00-\u9FD0]', s)
NaNも加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
データフレームから同じ内容のデータを破壊的にドロップする	df.drop_duplicates(inplace=True)
option: スレートブルーにグラフの色を変更する	color = 'slateblue'
リストとリストについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データ列の変遷を色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データ列の変化を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
カラムの一覧	df.info()
'A'列の値がxに等しいデータを取り出す	df[df['列A'] == x]
カウンタからゼロカウントを取り除く	+aCounter
rgbの丸マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
配列を元に全要素が0の配列	np.zeros_like(aArray)
データフレームから重複する行を残さず除く	df.drop_duplicates(keep=False)
要素ひとつのタプル	(element,)
散布図に下三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
option: ミディアムスプリンググリーンにグラフの色をする	color = 'mediumspringgreen'
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
グラフの描画でパステル調に色を使用する	sns.set(pallete='pastel')
サポートベクター分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列を出力ストリームに書き込む	f.write(s)
50パーセンタイルでデータフレームの選択した列の未入力値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
バギングで回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの第三四分位数	df.quantile(0.75)
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
データフレームの中にある文字列の数を数える	df.isin([value]).sum()
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
２つの文字列は同じか確認する	s == s2
データフレームの欠損値を最大値に減らす	df.fillna(df.max())
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
列からn個、サンプリングする	random.sample(iterable, k=n)
データ列の離れ具合を描画する	sns.residplot(x=データ列, y=データ列)
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームの列を度数分布図を用いてプロットする	plt.hist(df[column])
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データ列の変遷を折れ線グラフを用いて可視化する	plt.plot(range(len(データ列)), データ列)
２つのカウンタの共通する要素	aCounter & aCounter2
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムの色を黄緑に変更する	plt.hist(データ列, color='chartreuse')
カタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
option: 小麦色を使う	color = 'wheat'
ラベンダー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
option: スラッシュを区切りで使う	sep = '/'
データフレームのカラムの相乗平均を求める	scipy.stats.gmean(df['列A'])
コマンド引数をリストとして得る	sys.argv[1:]
データフレーム中の欠損値をドロップし、みる	df.dropna()
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
データフレームの数値を一度に整数に丸める	df.round()
n番目の列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
空文字	''
配列と数列について散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
線グラフの色をブラウンに変更する	plt.plot(データ列x, データ列y, color='brown')
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
インディアンレッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
データフレームの選択したカラムの中に日付データと文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
データフレームをグループ化し、個数を計算する	df.groupby('列A').count()
文字列が全て数字か調べる	s.isdigit()
青い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
データ列の推移を青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームを見る	df.head()
グラフを全般的に暗くする	sns.set(pallete='dark')
周期的にイテラブルを繰り返す	itertools.cycle(iterable)
タプルの中の最小値を求める	min(aTuple)
円グラフでデータ列の割合を描画する	plt.pie(データ列, startangle=90)
グラフの用途を画面に設定する	sns.set(context='notebook')
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
整数nの8進数表現	oct(n)
文字列としてイテラブルを結合する	''.join(map(str, iterable))
データフレームのあるカラムを10の位で丸める	df['列A'].round(-1)
点線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
予測データのコンフュージョン・マトリックスを算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
本日が何年か知る	datetime.datetime.today().year
表データのあるカラムの曜日数	df['列A'].dt.dayofweek
データフレームの選択したカラムの中にいくつ未入力値があるか求める	df[['列A', '列B']].isna().sum()
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
データ列の折れ線グラフを三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームをある列によって小さい順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
切片なしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
配列をビンニングする	pd.cut(aArray, aList)
グラフに簡単な説明を加える	plt.legend(['凡例A', '凡例B'])
データフレームの選択したカラムの中にがあるか調べる	df[['列A', '列B']].isin([value])
コロンで区切って二つの数値をプリントする	print(value, value2, sep=':')
データフレームを欠損値を含めてあるカラムの値でグループ分けする	df.groupby('列A', dropna=False)
実数の指数	math.frexp(x)[1]
辞書をコピーする	aDict.copy()
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
グラフのx軸を対数目盛に変更する	plt.xscale('log')
標準入力を	sys.stdin
円グラフを真円にする	plt.axis('equals')
二つの変数をスラッシュで区切って表示する	print(value, value2, sep='/')
赤い一点鎖線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの欠損値を直前の値で置換する	df.fillna(method='ffill')
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを並べ直し、、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
t-SNEを用いてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
作画のフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
辞書の全項目をクリアする	aDict.clear()
ライム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
データシリーズの最頻値	ds.mode()
ファイルパスの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
大きい順に破壊的にデータフレームをある列によって整列する	df.sort_values(by='列A', ascending=False, inplace=True)
新しい文字列によって文字列を置換する	s.replace(sub, newsub)
エクセルからデータフレームをロードする	pd.read_excel('file.xlsx')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフの丸印を赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
データフレームの選択した列の空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
option: 大バツマーカーを描画する	marker = 'X'
グリッドを破線にする	plt.grid(linestyle='dashed')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
ドジャーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフをライトゴールドロディイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データフレームの重複した行を数える	df.duplicated().sum()
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
ダークグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
列の欠損値を直後の値に増やす	df['列A'].fillna(method='bfill')
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
グラフで使う名前を設定する	plt.title('グラフの名称')
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
ブルーバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
ガンマ関数を使う	math.gamma(x)
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
実数の三乗を求める	x ** 3
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
データフレームのカラムのスピアマンの相関係数を計算する	scipy.stats.spearmanr(df['列A'], df['列B'])
型が名前付きタプルか調べる	issubclass(C, tuple)
列とイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
集合が空でないかどうか調べる	len(aSet) != 0
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
文字列はリストの要素でないか	element not in aList
配列とイテラブルについての散布図に黒い▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
パウダーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
横棒グラフをペールグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームから指定したデータ型の列名の一覧を使う	df.select_dtypes(型).columns
リストを変更不能な集合に変換する	frozenset(iterable)
数字を全て使う	string.digits
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフの色を濃いシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
実数を文字列にする	str(x)
グラフで使う横軸に名前を付ける	plt.xlabel('x軸ラベル')
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
option: フォントの色をアリスブルーに指定する	color = 'aliceblue'
データシリーズの時を求める	ds.dt.hour
二つの変数をタブで区切って出力する	print(value, value2, sep='\t')
線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
非数字が文字列中にある	any(not c.isdigit() for c in s)
新しい勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームとして表計算のシートをロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
ある列の文字列が部分文字列で始まらないデータを取り出す	df[~ df['列A'].str.startswith(部分文字列)]
データフレームのカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
ファイルからストリームを開いて]、fileとする	file = open(filepath)
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ヒストグラムを破線を使って描く	plt.hist(データ列, linestyle='dashed')
改行で文字列を分割し文字列リストにする	s.splitlines()
日付データが水曜日か調べる	aDate.weekday() == 2
棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
リストから配列を初期化する	np.array(aList)
文字列は片仮名かどうか	('ァ' <= ch <= 'ン')
縦棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
データシリーズを十の位で丸める	ds.round(-1)
リストと数列の散布図を描いて、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データシリーズの要約統計量を求める	ds.describe()
数列とリストについての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストとイテラブルについて散布図を描画してマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
データフレームの選択したカラムの分散	df[['列A', '列B']].var()
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
実数の余弦	math.cos(x)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームをソートして新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
文字列内にひとつでもアルファベットがあるか調べる	any(c.isalpha() for c in s)
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
ファイルを追加できるように文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
箱ひげ図としてデータ列を描画する	plt.boxplot(データ列)
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
データフレームのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
日付時刻データをタプルに変換する	aDatetime.timetuple()
プロットの目的をポスターに設定する	sns.set(context='poster')
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
option: サンディーブラウンを使う	color = 'sandybrown'
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの指定したカラムを小数点以下n桁で四捨五入する	df['列A'].round(n)
赤いポイントマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
option: ネイビーを使う	color = 'navy'
線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
プラットフォームの符号付き整数の最大値	sys.maxsize
データフレームのあるカラムをリストとして抽出する	df['列A'].values.tolist()
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
表から重複を認めてランダムにn行をサンプリングする	df.sample(n, replace=True)
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
折れ線グラフにバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
数列をヒストグラムで可視化する	plt.hist(データ列)
option: フォントの色をアクアに設定する	color = 'aqua'
ファイルから拡張子付きのファイル名を見る	os.path.basename(filepath)
昇順にリストの値をソートする	sorted(aList, reverse=True)
文字列内にひとつでも小文字があるか調べる	any(c.islower() for c in s)
二つの集合の∪を求める	aSet.union(aSet2)
線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
文字列内に英数字が含まれる	any(c.isalnum() for c in s)
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
列をカテゴリデータにする	ds.astype(object)
シエナ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
文字列中に非数字がある	any(not c.isdigit() for c in s)
option: アンティークホワイトを使用する	color = 'antiquewhite'
小さい方からリストを並べ直す	sorted(aList, reverse=False)
現在処理中の例外を情報	sys.exc_info()
ランダムにデータフレームからn行を抽出する	df.sample(n)
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
散布図の下三角印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: グラフの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
大文字を全部使う	string.ascii_uppercase
データフレームから散布図を作り線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
Excelファイルファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
ディムグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
RANSACとしてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
文字列を最初の部分文字列で分けた場合の残りの文字列	s.partition(sub)[-1]

黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
option: 丸マーカーを使用する	marker = 'o'
シスル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
クラスのサブクラス	issubclass(サブクラス, クラス)
赤い実線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データシリーズの欠損値を直前の値で補う	ds.fillna(method='ffill')
ミディアムスプリンググリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムをフローラルホワイト色として描画する	plt.hist(データ列, color='floralwhite')
データフレームの一部のカラムの中に文字列があるか調べる	df[['列A', '列B']].isin([value])
行列を横ベクトルに変形する	aArray.reshape(1, -1)
CSVファイルをデータフレームとして読み込む	pd.read_csv('file.csv', sep=',')
n進数文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
データシリーズの中の欠損値の合計を調べる	ds.isna().sum()
option: フォントの色をアクアに設定する	color = 'aqua'
配列とリストについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
データフレームのn行目まで抽出する	df[:n]
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
シードをnで固定する	random.seed(n)
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
グラフの題名を設定する	plt.title('グラフの名称')
数列とデータ列について散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
青い破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
半透明の一点鎖線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
リストを赤色でプリントする	print(f'\033[31m{value}\033[0m')
折れ線グラフの四角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
二つの実行結果を改行で区切ってプリントする	print(value, value2, sep='\n')
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームのあるカラムの分を見る	df['列A'].dt.minute
コマンドフラグの状態を知る	sys.flags
リストの先頭を使う	aList[0]
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
双方向キューをリストに変換する	list(deq)
要素を両端キューにスタックする	deq.append(element)
オプションで、標準エラーを使用する	file = sys.stderr
外れ値を除いた配列の算術平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームの内である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
浮動小数点数のn乗	x ** n
option: ダークカーキを用いる	color = 'darkkhaki'
文字列内にひとつでも小文字が含まれるか確認する	any(c.islower() for c in s)
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
データフレームの選択したカラムの中にいくつ文字列が存在するか数える	df[['列A', '列B']].isin([value]).sum()
縦棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
今日が月曜日	datetime.datetime.today().weekday() == 0
リストを黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
縦棒グラフをスノー色を用いて描画する	plt.bar(データ列x, データ列y, color='snow')
日付データが月曜日か	aDate.weekday() == 0
option: フォントの色を紺碧に指定する	color = 'azure'
ドジャーブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
要素を双方向キューのn番目に挿入する	deq.insert(n, element)
辞書の項目名とその値をペアとして取り出す	aDict.items()
データフレームをソートして上位n件を取り出す	df.sort_values('キーとなる列').head(n)
多次元尺度構成法を用いてパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
青紫色として散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
マップの全を消去する	aDict.clear()
n個にデータ列を等しい量になるようにビン分割する	pd.qcut(ds, n)
データシリーズのNaNをxに設定する	ds.fillna(x)
真部分集合	aSet < aSet2
rgbのバツマーカーをデータ列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストの折れ線グラフを描画して、色をRGBとして変更する	plt.plot(データ列x, データ列y, color='#800080')
カウンタをイテラブルを出現回数して、更新する	aCounter.update(iterable)
線グラフの色をモカシンにセットする	plt.plot(データ列x, データ列y, color='moccasin')
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
文字列をアンダーライン付き化する	f'\033[4m{value}\033[0m'
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムの色をターコイズにセットする	plt.hist(データ列, color='turquoise')
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
プログラムの実行を強制的に止める	sys.exit()
青い▽印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
二つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
データフレームからランダムに取り出す	df.sample()
列を文字列リストに変換して、'改行を用いて結合する	'\n'.join(map(str, iterable))
データフレームのあるカラムのタイムゾーンをセットする	df['列A'].tz_convert('Asia/Tokyo')
青紫色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
option: 珊瑚にグラフの色を設定する	color = 'coral'
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
線グラフの色をダークオーキッドに指定する	plt.plot(データ列x, データ列y, color='darkorchid')
指定したカラムの欠損値をxで置換する	df['列A'].fillna(x)
プログラムの実行を適切に止める	sys.exit(0)
縦棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
文字列中に部分文字列があるか調べる	sub in s
列を更新不能なセットに変換する	frozenset(iterable)
散布図に赤い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
バイナリ対数	math.log2(x)
データシリーズの平均値を求める	ds.mean()
横棒グラフをブラウン色で描画する	plt.barh(データ列x, データ列y, color='brown')
プロットに被らない位置に凡例を表示する	plt.legend(loc='best')
辞書から項目名で指定した項目を取り出す	aDict.pop(key)
データフレームを表示するとき、行数を変更する	pd.set_option('display.max_rows', n)
ある列を削除する	df.drop('列A', axis=1, inplace=True)
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
赤い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: バッファリングのサイズを小さくする	buffering = 4096
実行環境がMacOSか調べる	sys.platform.startswith('darwin')
リストの最後から要素をポップする	aList.pop()
データシリーズの歪み	ds.kurt()
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
に箱ひげ図でデータフレームのカラムを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
表データを複数のカラムで降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
option: カーキを用いる	color = 'khaki'
追加モードを用いてファイルをオープンする]	open(filepath, mode='a')
指定したカラムの母標準偏差	df['列A'].std(ddof=0)
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
文字列の最後から部分文字列を見つける	s.rfind(sub)
ファイルパスをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
外れ値を除いたデータフレームのカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
マッピングのキーに対応した値	aDict.get(key)
ASCII限定として正規表現で文字列を区切る	re.split(pattern, s, flags=re.ASCI)
option: バイナリ書き込みモードにセットする	mode = 'wb'
直前の値でデータシリーズの欠損値を埋める	ds.fillna(method='ffill')
真紅にヒストグラムの色をする	plt.hist(データ列, color='crimson')
データフレームの数値をまとめて整数に四捨五入する	df.round()
カウンタの最頻出な要素	aCounter.most_common()[0]
ライトグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
指定した列の値で集計し最大値を算出する	df.groupby('列A').max()
プログラムを即座に終える	sys.exit()
オブジェクトがフィールドを持つか調べる	hasattr(obj, プロパティ名)
rgbの大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
オブジェクトは集合型か調べる	isinstance(obj, set)
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['列A'].value_counts().sort_index().index
option: スラッシュをセパレータで用いる	sep = '/'
データフレームの複数の列を除き、みる	df.drop(['列A', '列B'], axis=1)
データフレームの形状	df.shape
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
まとめてデータフレームの選択したカラムの値をValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
リストを等量でn個にビンニングする	pd.qcut(aList, n)
行列の累積積	np.cumprod(aArray)
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
データ列を分割数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームはどれだけ、分散しているか見る	df.var()
集合にイテラブルを追加する	aSet.update(iterable)
データシリーズのモード	ds.mode()
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
正規表現を使用する	import re
option: ポイント印を描画する	marker = '.'
項目名が辞書に存在するかどうか調べる	key in aDict
浮動小数点数を数から減算する	x - y
K-S検定を行う	scipy.stats.kstest(配列, 'norm')
nの十六進文字列を求める	hex(n)[2:]
option: ライトスレイグレーにグラフの色をセットする	color = 'lightslategray'
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
xを論理値にする	bool(x)
赤いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
グラフのデータラベルの場所を(x,y)に設定する	plt.legend(loc=(x, y))
nの十六進表記	hex(n)
データフレームのカラムのスピアマンの相関係数を計算する	scipy.stats.spearmanr(df['列A'], df['列B'])
整数nはリストのどれか	n in aList
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
リストが空でないかどうか調べる	len(aList) != 0
０で全要素を初期化した３２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
複数の列からグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
赤い星マーカーを配列と配列の散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='r')
表データのあるカラムは何月か見る	df['列A'].dt.month
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
ダーク・スラテグレー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
２つのデータフレームを連結する	pd.concat([df, df2])
データシリーズの平均を計算する	ds.mean()
データフレームのあるカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
option: ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
リストとイテラブルについての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
スノー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
オブジェクトがn回続くイテラブル	itertools.repeat(element, n)
小数点数の絶対値を求める	math.fabs(x)
nの十六進数表現	hex(n)
データフレームから重複するデータを残さずドロップする	df.drop_duplicates(keep=False)
浮動小数点数をn乗する	x ** n
データシリーズを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: フォントの色をライトゴールドロディイエローにセットする	color = 'lightgoldenrodyellow'
数値を両端キューの左につけ加える	deq.appendleft(element)
文字列からISO8601で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
散布図を丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o')
行列の行列式を算出する	np.linalg.det(aArray)
ホワイトスモーク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームの欠損値を数値で補完する	df.fillna(x)
標準入力から1行受け取る	input()
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
タプルの先頭のn要素を捨てる	aTuple[n:]
プロットのカラーテーマを淡くする	sns.set(pallete='muted')
option: ダークオレンジを使う	color = 'darkorange'
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
option: 丸印を使う	marker = 'o'
データシリーズの文字列をNaNにする	ds.replace(値, np.nan)
散布図の印を▼印にする	plt.scatter(データ列x, データ列y, marker='v')
ダークオレンジにヒストグラムの色をする	plt.hist(データ列, color='darkorange')
表データのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
パープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
RGBで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの列間の相関行列を求める	df.corr()
option: グラフの色をトマトに変更する	color = 'tomato'
文字列中のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームのあるカラムの統計量	df['列A'].describe()
偽陽性を抑えたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ヒストグラムをダークスレートブルー色を用いて描画する	plt.hist(データ列, color='darkslateblue')
指定した列で表データをまとめた表	df.groupby('列A')
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
ゼロ埋めされた８ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.int8)
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
文字列が文字列リストに含まれるかどうか	s in aStringList
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
nが奇数かどうか調べる	n % 2 == 1
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
option: アリスブルーを使用する	color = 'aliceblue'
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
入力から二つの文字列を読み込む	A, B = map(str, input().split())
データフレームのある列の欠損値を最小値で置き換える	df['列A'].fillna(df['列A'].min())
リストと数列リストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
データフレームのカラムの相乗平均を算出する	scipy.stats.gmean(df['列A'])
nの三乗を計算する	n ** 3
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
nから無限に数え上げるする	itertools.count(start=n)
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
xが1もしくは2、もしくは3に等しいか判定する	x == 1 or x == 2 or x == 3
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
数式の変数の解を方程式として計算する	sympy.solve(e, z)
rangeの無限版	itertools.count(start=n, step=step)
赤い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
グラフの全般的にパレットを濃くする	sns.set(pallete='deep')
新しいリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
データ列と配列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの大バツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
option: ネイビー色を使用する	color = 'navy'
option: 色をダークシアンに設定する	color = 'darkcyan'
nからn2の範囲を使う	range(n, n2)
データフレームの指定した列の中に文字列があるか調べる	df['列A'].isin([value])
option: フォントの色をグリーンに変更する	color = 'green'
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
折れ線グラフのポイント印の大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
折れ線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
パーセプトロンとして回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
配列と数列の散布図を描画して、マーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
配列をビン数nで分割する	pd.cut(aArray, n)
カラーパレットを色差別なくする	sns.set(pallete='colorblind')
平均値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(df['列A'].mean())
数列の変化を色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
辞書から項目名の値	aDict.get(key)
ホットピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
文字列を紫色にする	f'\033[35m{value}\033[0m'
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
ファイルパスを文字コードtextで書き込み用に開く]	open(filepath, mode='w', encoding=text)
要素を集合から除く	aSet.remove(element)
データフレームの一部のカラムの中央値を求める	df[['列A', '列B']].median()
実数の逆双曲線正弦を計算する	math.asinh(x)
現在の作業ディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
ミディアムオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データフレームをあるカラムのカテゴリを用いてグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図をダークシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ベクトルの計算をする	import numpy as np
外れ値に強い線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
組の中の最小値	min(aTuple)
浮動小数点数の最小値を求める	sys.float_info.min
キーがマップに存在する	key in aDict
グラフにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
ある列の値がxに等しい行を取り出す	df[df['列A'] == x]
現在の時間	datetime.date.today().hour
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
小数点数のタンジェントの逆数	math.atan(x)
リストを順に表示する	print(*aList)
レモンシフォン色でヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
横棒グラフをインディゴ色を用いて描画する	plt.barh(データ列x, データ列y, color='indigo')
部分文字列で部分文字列が始まるか調べる	s.startswith(sub)
option: グラフの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
セットのイミュータブル版	frozenset(aSet)
ライトスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: 青色を使用する	color = 'blue'
option: フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
t-SNEを用いて淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ケンドール相関係数としてデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='kendall')
２次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
データフレームの行をリセットする	df.reset_index()
option: チョコレート色を用いる	color = 'chocolate'
option: 印の色を指定する	markerfacecolor = '#800080'
rgbの下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
SDGとしてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
平均値付き箱ヒゲ図を描画する	plt.boxplot(データ列, showmeans=True)
データフレームのn行より後ろ取り出す	df[n:]
リストの値を逆順にする	aList[::-1]
nとn2のビット和	n | n2
nがn2よりも大きいか	n > n2
タブを使う	'\t'
Excelファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
オプションで、標準出力を用いる	file = sys.stdout
棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
リストとリストの散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
行列のユニークな要素とそのインデックスを求める	u, indices = np.unique(aArray, return_index=True)
予測結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
変数が0に近づくとき、数式の極限値を計算する	sympy.limit(e, z, 0)
グラフの縦軸のキャプションをuntitledに指定する	plt.ylabel('y軸ラベル')
ポイントマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ペールグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
リストと数列について散布図を描画し、、マーカーを▲にセットする	plt.plot(データ列x, データ列y, marker='^')
散布図をダークターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
横棒グラフをディープスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
データフレームのn行以降選択する	df[n:]
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームの中の列を分割数nで分割する	pd.cut(df[col], n)
リスト内の要素は全て真か調べる	all(aList)
小数点数の正弦の逆数	math.asin(x)
データフレームの上n行	df.head(n)
データフレームの行を条件で取り除く	df[(df['列A'] == x) & (df['列B'] == y)]
データシリーズがどの程度分散しているか調べる	ds.var()
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
文字列が大文字か調べる	s.isupper()
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
両端キューの先頭から値を取り出す	deq.popleft()
ふたつの列としてグループ化し、個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
八進数文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
カテゴリ別でグループ化して、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
イテラブルからキューを作る	collections.deque(iterable)
option: 線の種類を一点鎖線に変更する	linestyle = 'dashbot'
三数の一番小さい値	min(x, y, z)
データフレームの中に文字列と日付データがいくつ存在するか数える	df.isin([value, value2]).sum()
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
option: 半透明にする	alpha = 0.5
option: グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
データフレームがどの程度分散しているか見る	df.var()
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
散布図の▼マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
デピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
黒い左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの選択したカラムを千の位で丸めて、整数にする	df[['列A', '列B']].round(-3).astype(int)
線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
赤い下三角マーカーをイテラブルとイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図に右三角印を使用する	plt.scatter(データ列x, データ列y, marker='>')
両端キューのn番目に要素を途中追加する	deq.insert(n, element)
算術計算ライブラリをインポートする	import math
散布図のマーカーを▽印にする	plt.scatter(データ列x, データ列y, marker='v')
色付きの破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
線グラフの色をブランチドアーモンドにする	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: 印の色を変更する	markerfacecolor = '#800080'
折れ線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
プロットのx軸を対数目盛に変更する	plt.xscale('log')
クリムゾン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
リストとリストの散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
データフレームの指定したカラムの中に文字列と文字列があるか	df['列A'].isin([value, value2])
カラムの最頻値を求める	mode, count = scipy.stats.mode(df['列A'])
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
option: 耐火レンガを使う	color = 'firebrick'
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
カウンタの文字列一覧	aCounter.keys()
データフレームの指定した列名リストの列を抽出する	df[columns]
カウンタを列で更新する	aCounter.update(iterable)
データフレームの一部のカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
データフレームの中であるカラムに重複があればドロップする	df.drop_duplicates(subset='列A', inplace=True)
散布図の大バツ印の太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
nがn2の倍数でないかどうか調べる	n % n2 != 0
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
日付データからn分、減らす	aDate - datetime.timedelta(minutes=n)
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
スピアマン順位相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
折れ線グラフに左三角印を用いる	plt.plot(データ列x, データ列y, marker='<')
データフレームの指定したカラムのNaNをその最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
線形回帰モデルの係数	model.coef_
プラム色を用いてヒストグラムを描画する	plt.hist(データ列, color='plum')
散布図の星印の色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ブール型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
マッピングの項目名に対応した値	aDict.get(key)
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
線グラフの色をダークスラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategray')
文字列内にひとつでも大文字がある	any(c.isupper() for c in s)
浮動小数点数の分数近似	q.limit_denominator(max_denominator=1000000)
部分的最小二乗回帰モデルを準備する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
行列の列ごとの最小を計算する	np.min(aArray, axis=0)
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
小数点数のハイパボリック・サインの逆数	math.asinh(x)
文字列がタプルの要素	element in aTuple
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
改行で文字列を区切る	s.splitlines()
小数点数の自然対数を計算する	math.log(x)
散布図をシルバー色として描画する	plt.scatter(データ列x, データ列y, color='silver')
あるカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
option: フォントの色をダークブルーに設定する	color = 'darkblue'
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
集合が空	len(aSet) == 0
データフレームの選択した列の中に文字列と文字列がいくつ存在するか数える	df[['列A', '列B']].isin([value, value2]).sum()
原点から点までの距離	math.hypot(x, y)
option: グラフの色をライトグリーンに変更する	color = 'lightgreen'
year年のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
option: グラフの色をシャルトリューズに指定する	color = 'chartreuse'
配列とリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ブースティングとして回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データフレームをグループ化しそれぞれの標準偏差を求める	df.groupby('列A').std()
UTF8を用いてファイルを開く]	open(filepath, encoding='utf-8')
マッピングをインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
リストの要素を入れ替える	aList[i], aList[j] = aList[j], aList[i]
ふたつの集合に共通する要素からなる集合を使う	aSet.intersection(aSet2)
t-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
タプルの末尾の値	aTuple[-1]
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
mathを使う	import math
データフレームを確認する	df.head()
縦棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
データ列の折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
よりランダムなランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
ある列のカテゴリごとの最大値を求める	df.groupby('列A').max()
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
option: グリーンイエローを使う	color = 'greenyellow'
散布図に赤い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの一部のカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
ファイルをオープンして]読み込みストリームを見る	open(filepath, mode='r')
グリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
文字列を空白で分割する	s.split()
option: 印を丸に変更する	marker = 'o'
パーセプトロンで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: ▼マーカーを描画する	marker = 'v'
浮動小数点数の絶対値	math.fabs(x)
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
配列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
オプションで、標準エラーを出力先にする	file = sys.stderr
データフレームの指定したカラムの欠損値をその平均値で埋める	df['列A'].fillna(df['列A'].mean())
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
グラフを暗くする	sns.set(pallete='dark')
データフレームの選択した列の尖度を求める	df[['列A', '列B']].skew()
行列の行ごとの最大値を計算する	np.max(aArray, axis=1)
列のイミュータブルなセットを求める	frozenset(iterable)
折れ線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
上位集合もしくは等しいかどうかテストする	aSet > aSet2
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
マッピングをカウンタにする	collections.Counter(aDict)
黒い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ローングリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
指定したカラムの未入力値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
折れ線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
nのn2乗を計算する	n ** n2
データフレームを千の位で四捨五入する	df.round(-3)
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
折れ線グラフの四角印の色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
ダークシアグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
option: プラムを使う	color = 'plum'
黒い四角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='k')
y軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
文字列をASCIIコードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
option: ドジャーブルー色を使用する	color = 'dodgerblue'
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
リスト内の要素が全て真	all(aList)
ホットピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
JSON形式のfをデータに変換する	json.load(fin)
option: グラフの色をビスクに指定する	color = 'bisque'
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
散布図を深紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
切片なしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
線グラフを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームのある列の値を正規表現patternで全部置換する	df['列A'].replace(pattern, repl, regex=True)
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
縦棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
nを八進文字列に変換する	oct(n)[2:]
折れ線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をシャルトリューズに変更する	plt.plot(データ列x, データ列y, color='chartreuse')
点線にヒストグラムの線の種類を変更する	plt.hist(データ列, linestyle='dotted')
option: グラフの色をグリーンイエローに変更する	color = 'greenyellow'
ある列の値がx以上y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
折れ線グラフの丸印を赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
option: 線の幅を設定する	linewidth = 3.0
option: グラフの色を濃い青にする	color = 'darkblue'
行列の行ごとの平均値を求める	np.mean(aArray, axis=1)
変数について数値を積分する	sympy.integrate(e, z)
パープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
二つのカラムからグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
実線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
デックの先頭	deq[0]
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
nを八進数文字列に変換する	oct(n)[2:]
再帰の最大回数を増やす	sys.setrecursionlimit(1000000)
ファイルからファイル名を取り出す	os.path.basename(filepath)
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
散布図のクロス印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
ある列の値がxに等しく、別の列の値がyに等しい行を選択する	df[(df['列A'] == x) & (df['列B'] == y)]
線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
10行をデータフレームから重複ありでランダムにサンプリングする	df.sample(10, replace=True)
横棒グラフをコーラル色として描画する	plt.barh(データ列x, データ列y, color='coral')
ダークターコイズ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
二つのデータフレームを横に一つにする	pd.merge(df, df2)
折れ線グラフをピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='pink')
折れ線グラフに赤い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ライトイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
リストの各要素を関数に適用した結果で並べる	sorted(aList, key=func)
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
二つのデータ列の散布図として残差をプロットする	sns.residplot(x=データ列, y=データ列)
TSVをロードする	pd.read_csv('file.tsv', sep='\t')
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
データ列の折れ線グラフを大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
リストとリストについて散布図を描画し、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
カデットブルーにヒストグラムの色を指定する	plt.hist(データ列, color='cadetblue')
データフレームをインデックスを付けず出力する	df.to_csv('file.csv', index=None)
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
散布図の星マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
リストとリストについての散布図に赤いクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
リストとリストについて散布図を描き、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
マッピングからキーで指定されたエントリをポップする	aDict.pop(key)
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
スレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
折れ線グラフの色をダークブルーに変更する	plt.plot(データ列x, データ列y, color='darkblue')
xの小数点以下'4'桁までを表示する	print(':.4f'.format(x))
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
複数行対応としてパターンで文字列を区切る	re.split(pattern, s, flags=re.MULTILINE)
散布図をベージュ色として描画する	plt.scatter(データ列x, データ列y, color='beige')
文字列内に大文字が含まれる	any(c.isupper() for c in s)
UTF8を使って既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
option: ライトスレイグレー色を使用する	color = 'lightslategray'
数を三乗する	x ** 3
nが1、もしくは2	n == 1 or n == 2
データフレームをカラムの名前を付けず保存する	df.to_csv('file.csv', header=None)
分類モデルの分類精度を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
箱ひげ図を２つ並べて描画する	plt.boxplot([データ列, データ列])
データフレームを二つの列の値でグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
option: ゴールデンロッドを用いる	color = 'goldenrod'
リストをリストを境界値としてビンニングする	pd.cut(aList, aList)
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
実数が無限大かどうか調べる	math.isinf(x)
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
CSVファイルにデータフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
キューをポップする	deq.pop()
多次元データを主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームの中にいくつ欠損値が存在するかカウントする	df.isna().sum()
option: n番目のカラムを行に指定する	index_col = n
リストの変遷を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
データシリーズがどの程度、分散しているか確認する	ds.var()
文字列の無限列	itertools.repeat(element)
ファイルから読み込みストリームを開いて]fとする	f = open(filepath, mode='r')
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
リストと数列について散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
option: チョコレートを使う	color = 'chocolate'
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategrey')
本日は何曜日か知る	datetime.datetime.today().weekday()
散布図をグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='gray')
黒いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
Pythonパス	sys.path
nが5の倍数かどうか調べる	n % 5 == 0
グラフの描画で淡く色を使う	sns.set(pallete='muted')
ファイルパスをEUCで開く]	open(filepath, encoding='euc_jp')
二つのカラムによって昇順にデータフレームを並べて、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
オブジェクトから属性を削除する	delattr(obj, プロパティ名)
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
ダークオレンジ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
文字列の終了位置以前に部分文字列が含まれないかどうか調べる	s.find(sub, 0, end) == -1
オプションで、標準出力を出力先にする	file = sys.stdout
ミディアムパープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
表データのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
数値を表示する	print(value)
ふたつの関係が真上位集合か調べる	aSet > aSet2
ファイルパスをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの指定したカラムを10の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
浮動小数点数の双曲線正弦	math.sinh(x)
数式の数値	float(e)
横棒グラフをロージーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データシリーズがどれだけ正規分布から尖っているか確認する	ds.skew()
両端キューの末尾に列の各要素を順に追加する	deq.extend(iterable)
数式の積分を行う	sympy.integrate(e)
行列の要素ごとに加算する	aArray + aArray2
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームのカラムの調和平均	scipy.stats.hmean(df['列A'])
マッピングに項目名ワード引数として追加する	aDict.update(**kwargs)
文字列を変数化して、変数にする	z = sympy.Symbol(s)
イエローグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームを散布図で可視化してカテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
縦軸を対数に変更する	plt.yscale('log')
データフレームの一部の列の相関行列	df[['列A', '列B']].corr()
ドジャーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: 色をライトブルーに指定する	color = 'lightblue'
イテラブルを行列に変換する	np.array(iterable)
補足の位置を(x,y)に指定する	plt.legend(loc=(x, y))
双方向キューのstart番目からendの部分値を使う	collections.deque(itertools.islice(deq, start, end))
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
3つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=0)
option: グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
データシリーズの値が欠損値	ds.isna()
回帰分析をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームのあるカラムの時刻	df['列A'].dt.hour
データフレームのインデックスを振り直す	df.reset_index()
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
実数を実数で	x // y
データフレームをグループ化し、各最大値を算出する	df.groupby('列A').max()
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
赤い大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
浮動小数点数に変換する	float(x)
リストとリストの散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
nが負の数かどうか調べる	n < 0
ふたつの集合の和集合を計算する	aSet.union(aSet2)
n回だけ文字列を置き換える	s.replace(sub, newsub, n)
nが3の倍数かどうか調べる	n % 3 == 0
空白文字を全て求める	string.whitespace
データフレームをグループ化し、あるカラムに対し個数を計算する	df.groupby('列A')['列B'].count()
プロット中のフォントを設定する	sns.set(font=フォント名)
ポスターにグラフの用途を設定する	sns.set(context='poster')
データフレームの指定した列の欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
黒い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: 淡いピンク色色を使用する	color = 'lightpink'
散布図に赤い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
部分文字列が文字列中に存在しないか調べる	sub not in s
文字列を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
予測データの混同行列を計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
正規分布にしたがって配列をランダムに生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
縦棒グラフをスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='steelblue')
2つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
両端キューの先頭の要素	deq[0]
データフレームをある列で集約して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データ列を全てPandasの日付型に変換する	pd.to_datetime(ds)
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフを淡いピンク色色を使って描画する	plt.plot(データ列x, データ列y, color='lightpink')
英字の文字列	string.ascii_letters
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
折れ線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームのKurtosisを計算する	df.kurt()
option: 四角マーカーを使用する	marker = 's'
ダークゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
文字列の末尾が部分文字列	s.endswith(sub)
option: ミディアムパープルを使う	color = 'mediumpurple'
nを八進表現に変換する	oct(n)
リストと配列について散布図を描画し、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
列にイテラブルを続けたイテラブルを得る	itertools.chain(iterable, iterable2)
option: ミディアムスプリンググリーンにフォントの色を設定する	color = 'mediumspringgreen'
rgbの▽マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ダークレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
日付データの曜日を見る	aDate.weekday()
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
option: 黄色を使う	color = 'yellow'
numpyを用いる	import numpy as np
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームのあるカラムを10の位で丸める	df['列A'].round(-1)
ダークグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: 四角印を使う	marker = 's'
オプションでファイルを使う	file = sys.open(filename, 'w')
線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ライトシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
グラフの目的をポスターに設定する	sns.set(context='poster')
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
実線でリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
文字列をケースを無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
折れ線グラフのダイアモンドマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの一部のカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
文字列中にひとつでも非空白が含まれるかどうか調べる	any(not c.isspace() for c in s)
折れ線グラフのバツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
数式の変数を数値で置き換える	e.subs(z, e2)
新しいガウス過程分類モデルを準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
グラフの大きさを変更する	plt.figure(figsize=(横幅, 高さ))
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
赤いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
サドルブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
実数に整数を掛ける	x * y
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
タプルからn個、サンプリングする	random.sample(iterable, k=n)
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
データフレームの選択したカラムを小数点以下n桁で四捨五入する	df[['列A', '列B']].round(n)
横棒グラフをダークオリーブグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ある列によってデータフレームをまとめたグループを見る	df.groupby('列A')
リストの要素のみプリントする	print(*aList)
データ列の当てはまりの良さを計算する	sklearn.metrics.r2_score(データ列, データ列2)
組の合計値	sum(aTuple)
グラフの色を全般的に明るくする	sns.set(pallete='bright')
rgbに棒グラフの色を変更する	plt.bar(ラベル列, データ列, color=rgb)
option: 黄色色を用いる	color = 'yellow'
ベクトルは何次元か調べる	aArray.ndim
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ガウス過程回帰モデルを作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
SJISでファイルをオープンする]	open(filepath, encoding='shift_jis')
縦棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
シーケンスの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
リストをマゼンタにする	f'\033[35m{value}\033[0m'
データ列を横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
エクセルファイルからデータフレームをロードする	pd.read_excel('file.xlsx')
キューの最大長	deq.maxlen
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
２つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
10を底とする対数を求める	math.log10(x)
指定した列のカテゴリで集計し、それぞれの最大値を計算する	df.groupby('列A').max()
ヒストグラムをシアン色として描画する	plt.hist(データ列, color='cyan')
option: 追加モードを用いる	mode = 'a'
オリーブ色としてヒストグラムを描画する	plt.hist(データ列, color='olive')
オブジェクトをデバッグ向けの文字列にする	repr(obj)
データフレームの未入力値を直前の値で埋める	df.fillna(method='ffill')
データフレームの値をValueMapで全部置き換える	df.replace(ValueMap)
データフレームの欠損値をxで置き換える	df.fillna(x)
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームのカラムを目的変数にする	目的変数 = df['列名']
データフレームがどれだけ分散しているか確認する	df.var()
データフレームの先頭n行を取り出す	df.head(n)
エクセルファイルファイルからCSVファイルをSJISでロードする	pd.read_csv('file.csv', encoding='shift_jis')
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
ひとつ置きにタプルを取り出す	aTuple[::2]
配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
文字列の左側から空白を消す	s.lstrip(' ')
データフレームの歪みを求める	df.kurt()
データシリーズの時刻	ds.dt.hour
データフレームのあるカラムの不偏分散	df['列A'].var(ddof=1)
option: ▽マーカーを描画する	marker = 'v'
実数の2乗	x ** 2
黒い▽マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
予測値とデータの離れ具合をグラフ化する	sns.residplot(x='列名', y='列名', data=df)
option: フォントの色を淡い茶色に設定する	color = 'tan'
データフレームのあるカラムをリストに変換する	df['列A'].values.tolist()
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
ファイルをSJISを用いてオープンする]	open(filepath, encoding='shift_jis')
青い線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
ヒストグラムのビンを設定する	plt.hist(データ列, bins=区関数)
黒い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図の下三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ある列によって大きい順にデータフレームを破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
option: カデットブルーに色を設定する	color = 'cadetblue'
バイナリ書き込みできるようにファイルをオープンする]	open(filepath, mode='wb')
カウンタをクリアする	aCounter.clear()
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
データシリーズを正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
小数点数のハイパボリック・コサインの逆数	math.acosh(x)
グラフの色を全般的に淡くする	sns.set(pallete='muted')
列を回数してカウンタから引く	aCounter.subtract(iterable)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
青い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
あるカラムの中にある文字列の個数を数える	df['列A'].isin([value]).sum()
縦棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
赤い▲マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
整数のn乗して実数による余りを求める	pow(x, n, y)
データフレームからランダムにn行を選択する	df.sample(n)
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
リストとデータ列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
プロットのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
option: 文字コードtextを用いる	encoding = text
データフレームを表示するとき、表示できる最大行数をnにセットする	pd.set_option('display.max_rows', n)
データシリーズの欠損値を直後の値で補う	ds.fillna(method='bfill')
option: 右三角印を加える	marker = '>'
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
option: ダークターコイズを使う	color = 'darkturquoise'
データフレームの行を選択する	df[start:end]
配列の次元の数を求める	aArray.ndim
option: ブランチドアーモンドに色を設定する	color = 'blanchedalmond'
現在は何分か知る	datetime.date.today().minute
ヒストグラムの色をローングリーンにする	plt.hist(データ列, color='lawngreen')
リストと配列について散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データフレームのカラムの幾何平均	scipy.stats.gmean(df['列A'])
プロットをプロットする準備をする	import matplotlib.pyplot as plt
ヒストグラムの色をオーキッドに指定する	plt.hist(データ列, color='orchid')
新しいヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームの最初のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
コマンドの第2引数を知る	sys.argv[1]
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
文字列が全てアルファベットか判定する	s.isalpha()
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
値を白色にする	f'\033[37m{value}\033[0m'
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
３つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
option: ミディアムブルーにフォントの色を設定する	color = 'mediumblue'
横棒グラフをアイボリー色を用いて描画する	plt.barh(データ列x, データ列y, color='ivory')
折れ線グラフのアルファを設定する	plt.plot(データ列x, データ列y, alpha=0.5)
option: バリーウッド色を用いる	color = 'burlywood'
ヒストグラムの色をシャルトリューズに指定する	plt.hist(データ列, color='chartreuse')
縦棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームのNaNを最頻値で埋める	df.fillna(df.mode().iloc[0])
ファイルを読み込みモードとしてオープンする]	open(filepath, mode='r')
散布図の右三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
データフレームのNaNを平均値に設定する	df.fillna(df.mean())
option: データ型を指定する	dtype = np.int16
折れ線グラフに星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
セットが空でないか	len(aSet) != 0
文字列に日本語が含まれるか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
線グラフの色をビスクに変更する	plt.plot(データ列x, データ列y, color='bisque')
折れ線グラフにバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
補助目盛りを有効にする	plt.minorticks_on()
データフレームのカラム間のピアソンの積立相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
シーケンスを両端キューに変換する	collections.deque(iterable)
濃いシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
日付データと日付データの時間差を求める	aDate - aDate2
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
ヒストグラムをダークバイオレット色を用いて描画する	plt.hist(データ列, color='darkviolet')
リストの末尾の要素	aList[-1]
nをn2だけ減らす	n -= n2
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
フィシャー流の尖度を算出する	scipy.stats.kurtosis(配列, fisher=True, bias=False)
線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
グリーンイエロー色でヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
リストを円グラフにする	plt.pie(データ列, startangle=90)
文字列で区切って二つの変数をプリントする	print(value, value2, sep=s)
青い一点鎖線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: グラフの色をパープルにセットする	color = 'purple'
文字列全体がパターンに大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
カテゴリでグループ化して、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
日付時刻データが月曜日	aDatetime.weekday() == 0
双方向キューに文字列をスタックする	deq.append(element)
数を百の位で丸める	round(x, -2)
option: ダイアモンド印を描画する	marker = 'D'
option: アンティークホワイトを用いる	color = 'antiquewhite'
実線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
option: フォントの色を青にセットする	color = 'blue'
列と列のデカルト積	itertools.product(iterable, iterable2)
数列をボックスチャートにする	plt.boxplot(データ列)
グラフを見やすくする	import seaborn as sns
タイムスタンプ型のデータシリーズを表データのインデックスにする	df.index = pd.DatetimeIndex(ds)
自然数個のものからk個取り出した場合の並べ方の総数を計算する	math.perm(n, k)
書き込みできるようにファイルを文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
組中の文字列が最初に見つかるインデックス	aTuple.index(element)
二つのリストをタブで区切ってプリントする	print(value, value2, sep='\t')
タプルのオブジェクトが最初に見つかるインデックス	aTuple.index(element)
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
２つのカウンタの共通する要素	aCounter & aCounter2
文字列をアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
パラメータについて数式の微分を行う	sympy.diff(e, z)
2つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
エクセルファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
浮動小数点数を実数で割る	x / y
横軸の目盛りを対数に変更する	plt.xscale('log')
文字列全体が正規表現にケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームから同じ内容のデータをドロップする	df.drop_duplicates(inplace=True)
タイムスタンプデータの日数	aDatetime.day
データフレームの中にが存在するか	df.isin([value])
データフレームの一部のカラムの中にある文字列の数を数える	df[['列A', '列B']].isin([value]).sum()
ビン数nを用いてリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
イテラブルをダミー変数にする	pd.get_dummies(iterable)
データフレームのあるカラムは何日か調べる	df['列A'].dt.day
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
データフレームのカラムの中にいくつ文字列があるかカウントする	df['列A'].isin([value]).sum()
カラムの欠損値を第二四分位数に設定する	df['列A'].fillna(df['列A'].median())
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
スタッキングを用いて回帰分析を行う	sklearn.ensemble.StackingRegressor()
二つの文字列は等しい	s == s2
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
多層パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
縦棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
フォレストグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
プロットにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
文字列の右端から空白を取り除く	s.rstrip()
option: 色をローングリーンに設定する	color = 'lawngreen'
オブジェクトはリストクラス	isinstance(obj, list)
ヒストグラムをフクシア色を使って描画する	plt.hist(データ列, color='fuchsia')
プレゼン用にグラフを設定する	sns.set(context='talk')
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
散布図をダークブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームの欠損値が含まれる箇所を色つけする	df.style.highlight_null()
option: ベージュを用いる	color = 'beige'
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
横棒グラフの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
チップのデータセットからデータフレームをロードする	df = sns.load_dataset('tips')
option: オレンジにフォントの色を指定する	color = 'orange'
データフレームの指定した列を100の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
横棒グラフをベージュ色を用いて描画する	plt.barh(データ列x, データ列y, color='beige')
ある列の値がx以上y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
値∉集合	element not in aSet
マゼンタにヒストグラムの色を指定する	plt.hist(データ列, color='magenta')
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
マゼンタ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
辞書順で文字列が文字列より後か調べる	s > s2
プラム色としてヒストグラムを描画する	plt.hist(データ列, color='plum')
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
表データから列を３つのみ選択する	df[['列A', '列B', '列C']]
平均と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
文字列を最初の部分文字列で二分し前半の文字列を見る	s.partition(sub)[0]
データフレームの一部のカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ファイルをBOM付きを用いて開く]	open(filepath, encoding='utf_8_sig')
２つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
指定した列のカテゴリで集計しそれぞれの分散を求める	df.groupby('列A').var()
option: リネン色を使用する	color = 'linen'
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
組を引数として展開して表示する	print(*aTuple, sep=',')
実数が正の数かどうか調べる	x > 0
が名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
バイオレット色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
1行から２つの整数を読む	A, B = map(int, input().split())
option: ダークカーキ色を使用する	color = 'darkkhaki'
データ列の推移を半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームをソートして下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
日付データの曜日を使う	aDate.weekday()
option: オリーブを使う	color = 'olive'
データフレームの中央値を求める	df.median()
線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの色を赤に指定する	color = 'red'
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームの選択したカラムの中の欠損値の合計をカウントする	df[['列A', '列B']].isna().sum()
option: フォントの色をシルバーに設定する	color = 'silver'
option: ポイントマーカーを加える	marker = '.'
実数を２乗する	x ** 2
ある列の値の個数を求める	df.groupby('列A').count()
option: ダークグリーンを使う	color = 'darkgreen'
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
文字列を最後の部分文字列で二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
２つの変数を同じ値にする	x = y = n
option: 書き込みモードに指定する	mode = 'w'
リスト内の要素が少なくとも一つ真か調べる	any(aList)
整数nの二進リテラル	bin(n)
文字列を青色化する	f'\033[34m{value}\033[0m'
option: グラフの色をマゼンタに指定する	color = 'magenta'
散布図の四角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
折れ線グラフの色をロイヤルブルーにセットする	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの一部のカラムの中央値	df[['列A', '列B']].median()
配列とリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
文字列を小文字にする	s.lower()
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
第一コマンド引数	sys.argv[1]
折れ線グラフに三角印を使う	plt.plot(データ列x, データ列y, marker='^')
日付データの月数を使う	aDate.month
リネン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
レモンシフォン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
option: サーモンを用いる	color = 'salmon'
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
リストと数列の散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: バツ印を加える	marker = 'x'
プラットホームはLinuxか調べる	sys.platform.startswith('linux')
option: グリーンイエロー色を使用する	color = 'greenyellow'
S-W検定を行う	scipy.stats.shapiro(df['列A'])
整数nを2進数表現に変換する	bin(n)
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
スピアマン相関係数を用いてデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
赤い▲マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
全十六進数字	string.hexdigits
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
散布図の星印を青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
option: マーカーの色をダークブルーにする	markerfacecolor = 'darkblue'
赤い左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
中央値でデータフレームの中のカラムをビン分割する	pd.qcut(df[col], 2)
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
option: 青緑にフォントの色を設定する	color = 'teal'
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: 黄色にグラフの色を設定する	color = 'yellow'
二つの集合の和集合	aSet.union(aSet2)
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
データフレームを表示するときデータフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
ある列のカテゴリによってデータフレームを集約する	df.groupby('列A')
クラスが名前付きタプルかテストする	issubclass(C, tuple)
データ列間の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
文字列が全て空白文字からなる	s.isspace()
最後から部分文字列で文字列を区切る	s.rsplit(sub)
option: ダークバイオレットを使う	color = 'darkviolet'
データ列の移り変わりを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
グラフに格子を付ける	plt.grid(True)
茶色色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.')
データフレームの一部の列の欠損値を平均に増やす	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
折れ線グラフをダークグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkgreen')
xが真かどうか調べる	bool(x)
今日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
option: 印を△に変更する	marker = '^'
プラム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
赤い実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
縦棒グラフを描画し、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
三変数の最小値を算出する	min(x, y, z)
データフレームを関数によってまとめたグループを使う	df.groupby(関数)
データフレームの指定した列の欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
双方向キューの最後	deq[-1]
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
ファイルパスの絶対ファイルパス	os.path.abspath(filepath)
プロットに簡単な説明を加える	plt.legend(['凡例A', '凡例B'])
option: フォントの色をゴーストホワイトに設定する	color = 'ghostwhite'
文字列中の部分文字列の登場	s.count(sub)
データフレームの行一覧を使う	df.index
データフレームのNaNが含まれる箇所に色を付ける	df.style.highlight_null()
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
列名を指定して２つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
双曲線正弦の逆数を求める	math.asinh(x)
折れ線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
カンマ区切りのファイルをカラムの名前を指定せず読む	pd.read_csv('file.csv', header=None)
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
横棒グラフをアリスブルー色として描画する	plt.barh(データ列x, データ列y, color='aliceblue')
赤い上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの選択した列の要約統計量を計算する	df[['列A', '列B']].describe()
日付データが日付データと同時かどうか調べる	aDate == aDate2
３変数の最大値	max(x, y, z)
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
option: グラフの色をブルーバイオレットにセットする	color = 'blueviolet'
折れ線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
リストの変遷を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ブール型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int32)
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
棒グラフをミディアムシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ひとつでも非小文字が文字列中に含まれる	any(not c.islower() for c in s)
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
折れ線グラフの△マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームを指定した列によって並べ直す	df.sort_values(by='列A')
折れ線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
縦棒グラフをダークサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='darksalmon')
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
切り下げて整数にする	math.floor(x)
インデント付きでマッピングを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
日付をインポートする	import datetime
リスト中の文字列が最初に見つかる場所	aList.index(element)
二つのベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームの選択したカラムのNaNをxに設定する	df[['列A', '列B']].fillna(x)
ヒストグラムをダークブルー色を用いて描画する	plt.hist(データ列, color='darkblue')
オブジェクトが関数か確認する	callable(obj)
ブラック色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
▲印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームの選択したカラムの歪み	df[['列A', '列B']].kurt()
縦棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
実線に線グラフの線の種類を指定する	plt.plot(データ列x, データ列y, linestyle='solid')
縦棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
nにn2を掛ける	n * n2
折れ線グラフの三角マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームを表示するとき折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
実数を小数点第一位で丸める	round(x, 1)
正規分布に基づくパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
実数の絶対値を求める	math.fabs(x)
散布図のポイント印を赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
ダークシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームのあるカラムの母標準偏差	df['列A'].std(ddof=0)
ホワイトスモーク色を用いてヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
リストとリストについて散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
nの十六進数文字列	hex(n)[2:]
線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
リストとリストについての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
nがリストのいづれかかどうか判定する	n in aList
散布図を白色として描画する	plt.scatter(データ列x, データ列y, color='white')
ファイルからベースファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
青色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
欠損値がある行をドロップし、みる	df.dropna()
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのカラムのトリム分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
リストを縦軸、リストを横軸として大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: グラフの色を紺碧にセットする	color = 'azure'
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
空の階層化マップを生成する	collections.ChainMap()
ファイルから1バイト読み込む	f.read(1)
option: 青緑色を使う	color = 'turquoise'
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
プロットの色を明るくする	sns.set(pallete='bright')
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
データフレームの相関行列をヒートマップでグラフ化する	sns.heatmap(df.corr())
切片なしの単回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ドジャーブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
最後のエントリをマップから取り出す	aDict.popitem()
ティール色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
nをn2で割ったモジュロ	n % n2
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
散布図をハニーデュー色を用いて描画する	plt.scatter(データ列x, データ列y, color='honeydew')
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
散布図のクロスマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
散布図の四角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
マッピングのキーを要素に設定する	aDict[key] = element
グリーンイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
option: ディープスカイブルー色を使用する	color = 'deepskyblue'
二次元組をフラット化する	sum(aTuple)
データシリーズが何時か知る	ds.dt.hour
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
新しい文字列を用いて文字列を置換する	s.replace(sub, newsub)
乱数平均値と標準偏差からを求める	random.normalvariate(mu=0.5, sigma=0.2)
シーケンスの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
辞書をクリアする	aDict.clear()
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
列を累積する	itertools.accumulate(iterable, operator.mul)
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
ミディアムブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
数列とリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
印字可能な文字を全部見る	string.printable
現在の時刻	datetime.date.today().hour
イテラブルと配列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ひとつでも非空白が文字列中に含まれるか	any(not c.isspace() for c in s)
日付時刻データからn秒を減らす	aDatetime - datetime.timedelta(seconds=n)
データフレームをある列でソートする	df.sort_values(by='列A')
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
ある列の値がx以下のデータを抽出する	df[df['列A'] <= x]
指定した列の母標準偏差を算出する	df['列A'].std(ddof=0)
option: 改行するの代わりに文字列を用いる	end = s
印字を全部見る	string.printable
10を底とする小数点数の対数を算出する	math.log10(x)
グラフを使用する準備をする	import matplotlib.pyplot as plt
nからn2の値を引いてnにする	n -= n2
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
回帰分析をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
データフレームを10000の位で丸める	df.round(-4)
双方向キューの順序を右にn個分ローテンションする	deq.rotate(n)
データ列の各データ値の出現回数	ds.value_counts()
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
option: マーカーの大きさを変える	markersize = 2.0
データフレームをある列の値によって集約する	df.groupby('列A')
リストを更新不能な集合に変換する	frozenset(iterable)
散布図の右三角印を青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
アンティークホワイト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
散布図の丸印の線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
現在の曜日を整数で見る	datetime.datetime.today().weekday()
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームをグループ化して、ヒストグラムでプロット化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームの指定した列の名前一覧の列のみ抽出する	df[columns]
グラフのy軸の軸名をuntitledに指定する	plt.ylabel('y軸ラベル')
option: サドルブラウンを使う	color = 'saddlebrown'
値を青色にする	f'\033[34m{value}\033[0m'
nがn2以上か確認する	n >= n2
指定したカラムが正規分布からどの程度尖っているか調べる	df['列A'].skew()
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategray')
列名を指定して２つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
データ列を等しい量になるようにビン数nでビン分割する	pd.qcut(ds, n)
全ての八進数字	string.octdigits
実数のハイパボリック・サイン	math.sinh(x)
データフレームの選択した列を10の位で丸める	df[['列A', '列B']].round(-1)
改行なしに二つの実行結果を出力する	print(value, value2, end='')
文字列がリストに含まれないかどうか調べる	element not in aList
option: ミディアムシアグリーンにグラフの色を設定する	color = 'mediumseagreen'
折れ線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームのNaNを最小値で置換する	df.fillna(df.min())
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
赤い下三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
上位集合もしくは等しいかどうか	aSet > aSet2
現在は何日か知る	datetime.datetime.today().day
option: フォントの色をダークカーキに指定する	color = 'darkkhaki'
青紫色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
列の文字列長を列として求める	ds.str.len()
データフレームの未入力値を直前の値で補う	df.fillna(method='ffill')
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
空集合を使う	set()
ヒストグラムをオリーブ色を使って描画する	plt.hist(データ列, color='olive')
リストを分割する	pd.cut(aList, aList)
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
カラーコードで折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
option: フローラルホワイトを使う	color = 'floralwhite'
区間数を設定して度数分布図を描く	plt.hist(データ列, bins=区関数)
option: グラフの色をレモンシフォンに変更する	color = 'lemonchiffon'
折れ線グラフの色をライトゴールドロディイエローにする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
グラフを明るくする	sns.set(pallete='bright')
横棒グラフをダークターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
プロットをスライドに変更する	sns.set(context='talk')
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
前もって正規表現を大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームのあるカラムは何日か見る	df['列A'].dt.day
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
重複ありでデータフレームから100行をランダムにサンプリングする	df.sample(100, replace=True)
日付データをn分前にする	aDate - datetime.timedelta(minutes=n)
変数が0に近づく時の数式の極限値を求める	sympy.limit(e, z, 0)
データフレームのある列をNaNも加えてダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
option: ミスティローズに色を変更する	color = 'mistyrose'
n2行n列の二次元リストを得る	[[0] * n for _ in range(n2)]
ミディアムバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
空のマップ	{}
空の多重集合	collections.Counter()
線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
その最頻値でデータフレームの一部のカラムの欠損値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ASCII限定としてパターンで文字列を分ける	re.split(pattern, s, flags=re.ASCI)
散布図を青色を使って描画する	plt.scatter(データ列x, データ列y, color='blue')
中央値でデータフレームのNaNを置換する	df.fillna(df.median())
最大長のある双方向キュー	collections.deque(maxlen=n)
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
マップの値として要素は含まれているか	element in aDict.values()
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
option: アイボリーを使用する	color = 'ivory'
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
option: ダークシアグリーンを用いる	color = 'darkseagreen'
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
既存のファイルパスをUTF8を用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
イテラブルとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データシリーズの不偏分散を求める	ds.var(ddof=1)
データフレームの中の列をn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
データフレームの選択したカラムの値が欠損値かどうか調べる	df[['列A', '列B']].isna()
横棒グラフをパパイヤウィップ色を使って描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ヒストグラムでリストを可視化する	plt.hist(データ列)
ヒストグラムのプロットして、正規化する	plt.hist(データ列, density=True)
ファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ヒストグラムでカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
グラフの横軸に軸名を付ける	plt.xlabel('x軸ラベル')
棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
カウンタのそれぞれの項目を、その回数だけ列挙する	aCounter.elements()
データフレームの指定したカラムの中央値を求める	df['列A'].median()
predicateFuncが真とならないイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
ランダムに10行をデータフレームから重複ありでサンプリングする	df.sample(10, replace=True)
タプルのn番目からn2番目までの部分を得る	aTuple[n:n2]
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
安全に文字列のサフィックスから部分文字列を取り除く	s.removesuffix(sub)
データフレームのカラムのKurtosis	scipy.stats.kurtosis(df['列A'], bias=False)
整数の最大公約数	math.gcd(n, n2)
異なる列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
指定したカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
シャルトリューズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
K最近傍法としてクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
プロットに使うy座標のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
リストとリストを接続する	aList + aList2
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
組のn番目のの要素	aTuple[n]
プロットをデフォルトでいい感じに設定する	sns.set()
配列の型	aArray.dtype()
option: エラーを無視する	errors = 'ignore'
データシリーズの分位数	ds.quantile(パーセント/100)
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
n個にリストをビン分割する	pd.cut(aList, n)
option: フォントの色をピンクに指定する	color = 'pink'
ヒストグラムをダークグリーン色を用いて描画する	plt.hist(データ列, color='darkgreen')
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
リストのn番目のの要素を使う	aList[n]
データフレームの末尾10行を選択する	df.tail(10)
日付時刻データが金曜日かテストする	aDatetime.weekday() == 4
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
3自然数の最小公倍数	math.lcm(n, n2, n3)
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームの選択したカラムの中に文字列と文字列が含まれるか調べる	df[['列A', '列B']].isin([value, value2])
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
漢字が文字列に含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
実数の複素数を求める	complex(x)
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
英字の小文字列	string.ascii_lowercase
option: データ型として整数型を使用する	dtype = np.int
縦棒プロットを描画し、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
百分率付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
ダークオーキッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
追加できるようにBOM付きで既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: パウダーブルーにフォントの色を設定する	color = 'powderblue'
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
マッピングの値の一覧を見る	aDict.values()
データフレームのカラムの各データは何回出現するか見る	df[col].value_counts()
リストとリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
文字列の先頭の文字	s[0]
スレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: 深紅色を用いる	color = 'crimson'
リストを引数として展開して出力する	print(*aList, sep=',')
直前の値でデータフレームの選択した列の欠損値を補う	df[['列A', '列B']].fillna(method='ffill')
ガンマ関数を使う	math.gamma(x)
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
浮動小数点数は無限大か	math.isinf(x)
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
プロットの背景色を白くする	sns.set(style='whitegrid')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
オリーブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
集合を更新不能に変換する	frozenset(aSet)
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
英字の大文字を使う	string.ascii_uppercase
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームが何行重複するか見る	df.duplicated().sum()
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
option: カーキにグラフの色を設定する	color = 'khaki'
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
rgbの下三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ファイルをバイナリ用に開く]	open(filepath, mode='rb')
グラフ中のフォントを指定する	sns.set(font=フォント名)
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
データフレームの全カラムの相関を描画する	sns.pairplot(df)
棒グラフをダークカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
リストと数列について散布図を描いて、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームのあるカラムの曜日名を使う	df['列A'].dt.weekday_name
サーモン色としてヒストグラムを描画する	plt.hist(データ列, color='salmon')
本日の月数を求める	datetime.datetime.today().month
データフレームのカラムを度数分布図にする	plt.hist(df[column])
option: 色をライムグリーンに設定する	color = 'limegreen'
折れ線グラフをダークシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
数が整数かどうか	x.is_integer()
option: △マーカーを描画する	marker = '^'
カウンタのユニオン演算する	aCounter | aCounter2
プログラムの実行を即座に終了する	sys.exit()
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
折れ線グラフのクロスマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
読み込み用にファイルパスをオープンする]	open(filepath, mode='r')
辞書の項目名の一覧	aDict.keys()
文字列の両端から部分文字列を除く	s.strip(sub)
下位集合	aSet.issubset(aSet2)
ベクトルを平坦化する	aArray.flatten()
バツマーカーを用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
要素が全て1の行列を作成する	np.ones(要素数, dtype=np.int)
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
文字列の両端から不要な空白を取り除く	s.strip()
茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
集合の更新不能版	frozenset(aSet)
マッピングに要素を項目名として加える	aDict[key] = element
データを最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームのあるカラムの中にいくつ欠損値があるか調べる	df['列A'].isna().sum()
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
リストを分割数nを用いてビン分割する	pd.cut(aList, n)
指定したカラムの欠損値を後の値で置換する	df['列A'].fillna(method='bfill')
option: カーキを使う	color = 'khaki'
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
横軸の目盛りを非表示にする	plt.xticks([])
折り返しをオフに変更する	pd.set_option('expand_frame_repr', False)
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
クラス分類のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームの行列を入れ替える	df.T
２つのオブジェクトが同一参照か調べる	obj is obj2
シルバー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
option: フォントの色をダークサーモンに設定する	color = 'darksalmon'
主成分分析として多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
nが3で割り切れる	n % 3 == 0
縦棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
カウンタから辞書を減らす	aCounter.subtract(aDict)
データフレームの相関行列をヒートマップとして可視化する	sns.heatmap(df.corr())
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
イテラブルからカウンタを作成する	collections.Counter(iterable)
データフレームのあるカラムは何月か見る	df['列A'].dt.month
option: フォントの色をカーキに設定する	color = 'khaki'
文字列からformatのパターンを使って日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: ライトグリーンを用いる	color = 'lightgreen'
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
既存のファイルパスをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
n個の集まりからk個選ぶ方法	math.comb(n, k)
option: インディゴを使う	color = 'indigo'
option: 書き込み用に設定する	mode = 'w'
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
データフレームを各列毎にグループ化して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
上位集合か確認する	aSet.issuperset(aSet2)
データシリーズのNaNをその最小値で埋める	ds.fillna(ds.min())
配列を分割数nでビン分割する	pd.cut(aArray, n)
オリベドラブ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='gray')
カラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
データフレームの数値を一度に丸める	df.round()
正方単位行列	np.identity(n)
丸印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
小数点数の平方根を求める	math.sqrt(x)
データシリーズの中に日付データと文字列があるか調べる	ds.isin([value, value2])
データフレームからカテゴリデータのカラム名の一覧を使う	df.select_dtypes('object').columns
グラフに使う横軸のキャプションを指定する	plt.xlabel('x軸ラベル')
カラムのピアソンの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
NaNを使う	math.nan
二つのデータフレームを横向きにマージする	pd.merge(df, df2)
Excelファイルのシートをデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=シート名)
nとn2の値を足してnとする	n += n2
丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o')
データフレームの先頭n行を抽出する	df.head(n)
データフレームが正規分布からどの程度、尖っているか調べる	df.skew()
ハニーデュー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
ケンドールの相関係数を計算する	scipy.stats.kendalltau(df['列A'], df['列B'])
分類モデルを当てはめる	model.fit(説明変数, 目的変数)
現在の秒数を使う	datetime.date.today().second
両端キューが空でないか	len(deq) != 0
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
データフレームの指定したカラムを四捨五入して、整数型にする	df['列A'].round().astype(int)
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームのNaNを直前の値で埋める	df.fillna(method='ffill')
ネイビー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ダークサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
ヒストグラムをダークゴールデンロッド色を使って描画する	plt.hist(データ列, color='darkgoldenrod')
小数点数の双曲線余弦の逆数	math.acosh(x)
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
nがn2かテストする	n == n2
ヒストグラムをプラム色を用いて描画する	plt.hist(データ列, color='plum')
その最頻値でデータシリーズの欠損値を埋める	ds.fillna(ds.mode().iloc[0])
マルーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=区関数)
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームのn行目より前抽出する	df[:n]
ドジャーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
黒い下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
日付データをn日前にする	aDate - datetime.timedelta(days=n)
データフレームの一部の列の欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
数値を青色で表示できる文字列にする	f'\033[34m{value}\033[0m'
プロットに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
カーネル密度推定グラフ描画でを使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
スカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='skyblue')
データ列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
0で全要素を初期化したベクトル	np.zeros(要素数)
数列間の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
項目名が辞書に存在するか	key in aDict
配列のユニークな値を要素とする配列	np.unique(aArray)
線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ライムグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
option: 黄緑色を用いる	color = 'chartreuse'
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: グラフの色をアクアマリンにする	color = 'aquamarine'
ダークゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
リストとしてデータフレームのある列を抽出する	df['列A'].values.tolist()
リストとイテラブルについて散布図を描画して、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのある列をリストとして選択する	df['列A'].values.tolist()
option: 改行コードをUNIXにする	newline = '\n'
タイムスタンプデータが何時か知る	aDatetime.hour
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
横棒グラフを青緑色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームのカラムのトリム平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
異なる列をキーにして２つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
日付データが木曜日かどうか確認する	aDate.weekday() == 3
データシリーズの最頻値を計算する	ds.mode()
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
ヒストグラムのラインスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
横棒グラフの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
数列間のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
データフレームの指定したカラムの未入力値を最大値に設定する	df['列A'].fillna(df['列A'].max())
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
指定した列のカテゴリで集計し、個数を求める	df.groupby('列A').count()
ある列の値がx以下の行を抽出する	df[df['列A'] <= x]
行列の平均値	np.mean(aArray)
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
数列の分布を可視化する	plt.scatter(データ列x, データ列y)
小数点数の自然対数を求める	math.log(x)
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
ヒストグラムの線種を破線に設定する	plt.hist(データ列, linestyle='dashed')
ミスティローズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
カウンタの上位をリストとして得る	aCounter.most_common(k)
2進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ラベンダーブラッシュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームの未入力値をモードに設定する	df.fillna(df.mode().iloc[0])
辞書から最後の項目を取り出す	aDict.popitem()
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
option: 色をローングリーンに指定する	color = 'lawngreen'
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
プロットのx軸にラベルを設定する	plt.xlabel('x軸ラベル')
データフレームを２つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: ライトスカイブルーを使う	color = 'lightskyblue'
option: グラフの色を真紅に設定する	color = 'crimson'
貝殻色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
ペールグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データ列の折れ線グラフを左三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='<')
ある列のカテゴリごとの分散を算出する	df.groupby('列A').var()
配列を列から作る	np.array(iterable)
リストとリストについて散布図を描画し、、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
スラグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
データフレームの一部のカラムのパーセンタイルを算出する	df[['列A', '列B']].quantile(パーセント/100)
方程式として数式のパラメータの解を求める	sympy.solve(e, z)
日付時刻データの曜日を使う	aDatetime.weekday()
表データのあるカラムが何月か見る	df['列A'].dt.month
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
文字列がタプルに含まれるかどうか調べる	element in aTuple
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
辞書から最後の値をポップする	aDict.popitem()
リストの最初を取り除く	aList[1:]
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
option: グラフの色をライトコーラルに変更する	color = 'lightcoral'
黒い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
リスト中の最初の文字列を探す	aList.index(element)
ある列の値ごとの分散	df.groupby('列A').var()
option: オリーブ色を使用する	color = 'olive'
ヒストグラムをダークシアン色として描画する	plt.hist(データ列, color='darkcyan')
指定した列の値で集計し、それぞれの平均値を求める	df.groupby('列A').mean()
ある列の文字列が部分文字列で終わるデータを抽出する	df[df['列A'].str.endswith(部分文字列)]
実数の双曲線正接の逆数を算出する	math.atanh(x)
データフレームのカラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
option: 色をミディアムアクアマリンにセットする	color = 'mediumaquamarine'
ヒストグラムをホワイト色を用いて描画する	plt.hist(データ列, color='white')
イテラブルを多重集合にする	collections.Counter(iterable)
配列のスピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
集合を組に変換する	tuple(aSet)
データフレームをグループ化しそれぞれの標準偏差を計算する	df.groupby('列A').std()
折れ線グラフのバツ印の色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
組の最後の要素	aTuple[-1]
散布図の四角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
散布図をパールバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
折れ線グラフに▽印を使う	plt.plot(データ列x, データ列y, marker='v')
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
16進文字列を整数にする	int(s, 16)
ファイルから入力ストリームを見る	open(filepath)
データシリーズを小数点以下n桁で四捨五入する	ds.round(n)
散布図を赤い大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
option: シエナ色を使用する	color = 'sienna'
データフレームを二つの列の値によってグループ化し要約統計量を算出する	df.groupby(['列A', '列B']).describe()
実線にヒストグラムの線の種類をセットする	plt.hist(データ列, linestyle='solid')
タプルのキー一覧を参照する	list(aDict)
折れ線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
データシリーズの標本分散を求める	ds.var(ddof=0)
Excelファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
指定したカラムの中に存在する文字列の数を求める	df['列A'].isin([value]).sum()
文字列中にひとつでも非アスキー文字が含まれるかどうか調べる	any(not c.isascii() for c in s)
option: 赤色を使用する	color = 'red'
option: 青色を用いる	color = 'blue'
折れ線グラフを耐火レンガ色を用いて描画する	plt.plot(データ列x, データ列y, color='firebrick')
ファイルパスのファイル名を使う	os.path.basename(filepath)
データフレームを破壊的に2つのカラムによって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
タプルのn番目からn2番目を取り出す	aTuple[n:n2]
線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
文字列の中で大文字・小文字を無視してパターンにマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームの選択した列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
数列とリストについて散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図に下三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
文字列の変数名を数式にする	sympy.Symbol(s)
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
データシリーズは何時か知る	ds.dt.hour
n進文字列を整数にする	int(s, n)
ピーチパフ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
ブラウン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
空白を使う	' '
データフレームの選択した列がどの程度正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
縦棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの指定したカラムの未入力値を中央値にセットする	df['列A'].fillna(df['列A'].median())
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
青緑色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
リストをカンマ区切りで表示する	print(*aList, sep=',')
配列とリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
横棒グラフをライトスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
小文字を大文字に変換する	s.upper()
三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
散布図のマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
option: バイナリ書き込みモードを用いる	mode = 'wb'
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
nがn2以下、もしくは、n3以上か調べる	n <= n2 or n >= n3
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
項目名がマッピングに存在しないとき、要素を追加する	aDict.setdefault(key, element)
データシリーズのタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
option: エラーがあるとき例外を発生させるように指定する	errors = 'strict'
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
nとkの組合せを求める	math.comb(n, k)
試しに何か動かしてみる	print('Hello World')
ミッドナイトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
実線としてヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
赤い▲印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
カテゴリで色付けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列を走査し、パターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
散布図に赤いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列が組の要素でないか調べる	element not in aTuple
ロイヤルブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームを一度に小数点以下n桁で丸める	df.round(n)
赤いポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
改行文字を見る	'\n'
黄色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
固有値分解の準備をする	model = sklearn.decomposition.PCA(n_components=n)
option: ライム色を用いる	color = 'lime'
列の各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
option: コーンフラワーブルーにフォントの色を設定する	color = 'cornflowerblue'
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
散布図のダイアモンド印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ファイルパスを文字コードtextを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
二つのデータフレームを横方向に一つにする	pd.merge(df, df2)
データフレームのヒストグラムを横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名')
option: ブラウン色を使う	color = 'brown'
nの二進数文字列	bin(n)[2:]
半透明の一点鎖線としてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
列の一意な値	ds.unique()
表データをある列によって降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
2つのデータフレームを異なる列をキーとして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
データフレームの先頭100行を取り出す	df.head(100)
折れ線グラフにクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
空白が文字列内に含まれるかどうか調べる	any(c.isspace() for c in s)
プラム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームの中に文字列と文字列が存在するか調べる	df.isin([value, value2])
データを最大最小として正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの選択した列の中にと文字列がいくつあるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
データシリーズのタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
配列としてデータフレームのある列を抽出する	df['列A'].values
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
option: マーカーをバツに設定する	marker = 'x'
十六進数字を全部見る	string.hexdigits
リストとリストの散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
タイムスタンプデータからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
リストをn回、接続する	aList * n
option: フォントの色をネイビーに変更する	color = 'navy'
グラフで使える色の一覧	matplotlib.colors.cnames
第2引数で指定されたファイルの名前	sys.argv[1]
データシリーズの値が未入力値か	ds.isna()
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
1で全要素を初期化した行列	np.ones(要素数, dtype=np.int)
リストとイテラブルについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ファイル名がテキストファイルかどうか	filename.endswith('.txt')
option: オーキッドにグラフの色を設定する	color = 'orchid'
パーセント付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategrey'
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
リストとリストについての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
双方向キューのn番目に要素を差し込む	deq.insert(n, element)
グラフ中のフォントを変更する	sns.set(font=フォント名)
配列にイテラブルを続ける	itertools.chain(iterable, iterable2)
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
データフレームのカラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
事前にパターンをコンパイルする	re.compile(pattern)
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
ヒストグラムの色を青緑にセットする	plt.hist(データ列, color='teal')
ライム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: グラフの色をライトシアンに指定する	color = 'lightcyan'
データフレームのインデックスがnの行を取り出す	df.loc[n]
ビスク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
オーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
赤い実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図をrgbの丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
イテラブルとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの重複した行だけ	df[df.duplicated(keep=False)]
ヒストグラムとしてデータ列を可視化する	plt.hist(データ列)
option: フォントの色を小麦色に設定する	color = 'wheat'
横棒グラフをダークグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームのヒストグラムを縦横に並べて見る	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
option: シアンにグラフの色を設定する	color = 'cyan'
関数によってデータフレームをグループ化し、要約統計量を求める	df.groupby(関数).describe()
リストをひとつ飛ばしで取り出す	aList[::2]
区間から配列	np.linspace(最小値, 最大値, 要素数)
横軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
初めてのプログラムを書く	print('Hello World')
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
アイリスのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
標準入力を用いる	sys.stdin
イテラブルを文字列リストに変換して空白で一つにする	' '.join(map(str, iterable))
ヒストグラムの色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
データシリーズはどの程度分散しているか調べる	ds.var()
横棒グラフを描画して中央寄せする	plt.barh(ラベル列, データ列, align='center')
nがn2未満、もしくはn3以上かテストする	n < n2 or n >= n3
データフレームの選択した列の平均値	df[['列A', '列B']].mean()
線形回帰データフレームのグループ化した散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームのカラムを散布図として可視化する	sns.scatterplot(data=df, x='列名', y='列名')
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
タイムスタンプデータをタプルにする	aDatetime.timetuple()
リストと配列についての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
配列をリストを境界値としてビニングする	pd.cut(aArray, aList)
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='gray')
stringをインポートする	import string
option: 分割記号を改行にする	sep = '\n'
データフレームの指定したカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
グリーンイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
リストの値を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームのある列を削除する	df.drop('列A', axis=1, inplace=True)
データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
ブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ASCII限定として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
文字列中に非英字が含まれる	any(not c.isalpha() for c in s)
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
棒グラフをスノー色を用いて描画する	plt.bar(データ列x, データ列y, color='snow')
リストと数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
Pythonパスを知る	sys.path
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図をネイビー色を使って描画する	plt.scatter(データ列x, データ列y, color='navy')
折れ線グラフを暗い赤色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
ヒストグラムの色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
リストを分割数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データシリーズを四捨五入する	ds.round()
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
文字列の左側から部分文字列を除く	s.lstrip(sub)
フォーマットとして列をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
プログラムの実行を異常停止する	sys.exit(1)
グラフのx軸を対数に変更する	plt.xscale('log')
多次元データを特異値分解を用いてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ふたつのカラムでグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
リストの先頭を除く	aList[1:]
option: 茶色色を用いる	color = 'brown'
データフレームの指定したカラムを小数点以下n桁で四捨五入する	df['列A'].round(n)
指定したカラムを百の位で四捨五入する	df['列A'].round(-2)
データシリーズの値を正規表現patternでまとめて置き換える	ds.replace(pattern, repl, regex=True)
タイムスタンプデータにn分を加える	aDatetime + datetime.timedelta(minutes=n)
縦棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
データフレームの指定したカラムの欠損値を平均に設定する	df['列A'].fillna(df['列A'].mean())
ヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
縦棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
フクシア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ミディアムターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='mediumturquoise')
データフレームの中に日付データがある	df.isin([value])
ASCIIコードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
データフレームの中の列をビン数nでビンニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データ列の移り変わりを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフをダークカーキ色を使って描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
浮動小数点数を実数に加える	x + y
option: コーンズシルク色を使用する	color = 'cornsilk'
ヒストグラムの色をグリーンに変更する	plt.hist(データ列, color='green')
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
リストを等しい量になるようにビン数nとしてビン分割する	pd.qcut(aList, n)
データフレームの下10行を抽出する	df.tail(10)
折れ線グラフの丸印の太さを指定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategray'
赤い星マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
nの無限な数列を得る	itertools.repeat(n)
文字列内に日本語が含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
縦棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
昇順にリストの要素を並べ変える	sorted(aList, reverse=False)
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
実行結果を黄色にする	f'\033[33m{value}\033[0m'
文字列を区切りを使って分割して、列挙する	s.split(sep)
データフレームのカラムを散布図でプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
ValueMapでデータフレームの一部のカラムをまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
文字列を文字のリストに変換する	list(s)
縦軸だけ目盛り線	plt.grid(axis='y')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
スピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレーム中の欠損値をドロップし、みる	df.dropna()
既存のベクトルをベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
文字列を部分文字列で二分し、最初の文字列を使う	s.partition(sub)[0]
線グラフをダークオーキッド色として描画する	plt.plot(データ列x, データ列y, color='darkorchid')
マッピング上でキーが未定義	key not in aDict
ある列の値ごとの標準偏差を求める	df.groupby('列A').std()
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
option: パパイヤウィップ色を用いる	color = 'papayawhip'
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
２つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
nの8進数文字列	oct(n)[2:]
データフレームの指定した列を十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
数列とリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
正規表現を事前に複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
空白で最後から文字列を区切る	s.rsplit()
浮動小数点数の二乗	x ** 2
option: 貝殻にグラフの色を設定する	color = 'seashell'
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
ホットピンク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
処理中の例外を情報を知る	sys.exc_info()
option: 色をパープルに設定する	color = 'purple'
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームのカラムの平均値	df['列A'].mean()
列をビン分割する	pd.cut(ds, aList)
リストを太字で表示する	print(f'\033[1m{value}\033[0m')
データ列を中央値でビニングする	pd.qcut(ds, 2)
折れ線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
指定した列リストのみデータフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
文字列を走査しパターンにASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
本日が月曜日	datetime.datetime.today().weekday() == 0
ヒストグラムの色をダークグレーにする	plt.hist(データ列, color='darkgrey')
ディムグレーにヒストグラムの色を変更する	plt.hist(データ列, color='dimgray')
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ダークバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
日付時刻データからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
データフレームの一部の列の値はNaNか調べる	df[['列A', '列B']].isna()
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
option: 色をコーンフラワーブルーに指定する	color = 'cornflowerblue'
ダークレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームを散布図で可視化してカテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ライトコーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
行列をフラット化する	aArray.flatten()
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
rgbの上三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
ハニーデューにヒストグラムの色を指定する	plt.hist(データ列, color='honeydew')
リストと配列について散布図を描画して、その大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
データフレームの重複を確認する	df.duplicated()
ダークシアグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkseagreen')
100行をデータフレームからランダムに抽出する	df.sample(100)
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
読み込みできるようにファイルパスをオープンする]	open(filepath, mode='r')
文字列が空白からなるかどうか調べる	s.isspace()
配列は何のデータ型か調べる	aArray.dtype()
あるカラムの中にいくつ文字列があるか求める	df['列A'].isin([value]).sum()
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
行列の個数	aArray.size
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
option: 色をペールグリーンに設定する	color = 'palegreen'
リストとリストについての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
option: フォントの色をハニーデューに変更する	color = 'honeydew'
現在が火曜日	datetime.datetime.today().weekday() == 1
プラットホームがWindowsか	sys.platform.startswith('win32')
組をリストに変換する	list(aTuple)
散布図の印の大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
ファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
option: シスルを使う	color = 'thistle'
オブジェクトはバイト列型かどうか調べる	isinstance(obj, bytes)
文字列がn回続く列	itertools.repeat(element, n)
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
標準出力の出力先がターミナルか確認する	os.isatty(sys.stdin.fileno())
データフレームをに箱ひげ図として描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: ダークゴールデンロッドにフォントの色を設定する	color = 'darkgoldenrod'
0からnまでの整数リスト	list(range(n+1))
データフレームの一部のカラムを1000の位で四捨五入する	df[['列A', '列B']].round(-3)
データフレームのヒストグラムを縦横に並べてグラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データフレームからカテゴリデータの列を取り出す	df.select_dtypes('object')
ヒストグラムをパールゴールデンロッド色を使って描画する	plt.hist(データ列, color='palegoldenrod')
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
指定したカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
データ列と数列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
option: 星マーカーを用いる	marker = '*'
データフレームから型型の列を抽出する	df.select_dtypes(ty)
数列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データシリーズの欠損値をその最小値で埋める	ds.fillna(ds.min())
欠損値を含めてデータフレームをある列の値でグループ分けする	df.groupby('列A', dropna=False)
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
option: エンコーディングを文字コードtextに指定する	encoding = text
破線にラインの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列を部分文字列で分割する	s.split(sub)
ラベンダーブラッシュ色でヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
双方向キュー中の値の数を数える	deq.count(element)
主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
文字列の左側から空白を取り除く	s.lstrip()
アリスブルーにヒストグラムの色を指定する	plt.hist(データ列, color='aliceblue')
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
ナバホホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
行列の次元を変形する	aArray.reshape(行数, 列数)
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
黒い左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列])
グラフのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
回帰分析をK最近傍法で行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データシリーズの文字列を欠損値にする	ds.replace(値, np.nan)
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
データフレームのカラムの偏差値を計算する	50 + 10 * scipy.stats.zscore(df['列A'])
ある列の文字列が部分文字列で始まらない行を取り出す	df[~ df['列A'].str.startswith(部分文字列)]
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
データフレームの値を一度に正規表現patternで変更する	df.replace(pattern, repl, regex=True)
ファイルを開く]	open(filepath)
配列と配列についての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
ベクトルのスカラー倍	aArray * n
目盛り線	plt.grid(alpha=0.5)
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
散布図の三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
指定した列の値で集計し標準偏差を求める	df.groupby('列A').std()
リストの末尾を求める	aList[-1]
下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
option: ロイヤルブルーを使用する	color = 'royalblue'
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
紺色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データシリーズの欠損値をメディアンで補う	ds.fillna(ds.median())
縦棒グラフを描画し、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
option: タンにグラフの色を設定する	color = 'tan'
option: エンコーディングをUTF8に変更する	encoding = 'utf-8'
等間隔で配列をn個にビニングする	pd.cut(aArray, n)
両端キュー中の値の位置を使う	deq.index(element)
ベージュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
小数点数を切り下げる	math.floor(x)
散布図をダークサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
表データをインポートする	import pandas as pd
スレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='slateblue')
ゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
あるカラムの欠損値を前の行の値に設定する	df['列A'].fillna(method='ffill')
辞書上でキーが定義済みか調べる	key in aDict
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
ロージーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='rosybrown')
部分文字列を文字列の開始位置から探す	s.find(sub, start)
ふたつの集合のインターセクション	aSet.intersection(aSet2)
option: マーカーの色をホワイトにする	markerfacecolor = 'white'
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
サーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームの分散を計算する	df.var()
分類モデルの予測値と目的変数を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
ミディアムオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumorchid')
変数を白色でプリントする	print(f'\033[37m{value}\033[0m')
スチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
双方向キューの最大長	deq.maxlen
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
集合をイミュータブルな集合にする	frozenset(aSet)
データシリーズは何秒か知る	ds.dt.second
S-W検定を行う	scipy.stats.shapiro(配列)
option: 回帰木の深さを制限する	maxdepth = n
既存の行列を元に全要素が0の配列	np.zeros_like(aArray)
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
赤いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
線グラフの色をディープスカイブルーにセットする	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームのヒストグラムを横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名')
縦軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
option: レベッカパープルを使う	color = 'rebeccapurple'
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図の△マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
日付時刻データをISO8601書式の文字列に変換する	aDatetime.isoformat()
データフレームとデータシリーズを横向きに連結する	pd.concat([df, ds], axis=1)
折れ線グラフの色をシルバーにする	plt.plot(データ列x, データ列y, color='silver')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列が全て数字かどうか調べる	s.isdigit()
列名を指定して2つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
外れ値を除いたデータフレームのカラムの分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
xの小数点以下'4'桁まで出力する	print(':.4f'.format(x))
TSVファイルでデータフレームを書き出す	df.to_csv('file.tsv', sep='\t')
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
データフレームの列名一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
option: ゴールデンロッド色を用いる	color = 'goldenrod'
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
option: 色を青に設定する	color = 'blue'
ファイルからn文字、読む	f.read(n)
バイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
マルーン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
ある列の文字列が部分文字列で始まるデータを抽出する	df[df['列A'].str.startswith(部分文字列)]
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか	s.find(sub, start, end) != -1
データ列の折れ線グラフを三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
散布図にダイアモンドマーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
option: バツ印を使う	marker = 'x'
TSVファイルファイル名がかどうか調べる	filename.endswith('.tsv')
option: スチールブルーを使う	color = 'steelblue'
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
カラムの名前を付けずデータフレームをCSV形式に保存する	df.to_csv('file.csv', header=None)
グラフの題名を変更する	plt.title('グラフの名称')
8進文字列を整数に変換する	int(s, 8)
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
SJISで文字列をバイト列にする	s.encode(encoding='sjis', errors='ignore')
折れ線グラフのダイアモンドマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
numpyをインポートする	import numpy as np
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
ダークオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='darkorchid')
xを文字列にしてファイルに書く	f.write(str(x))
ファイルが存在しない	not os.path.exists(filepath)
その最小値でデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
既存の行列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
グラフのパレットを指定する	sns.set(pallete=パレット名)
データ列の折れ線グラフを▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
数式の部分分数化する	sympy.apart(e)
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
数列とリストについて散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
二つの文字列は同じでない	s != s2
ファイル名がテキストファイル	filename.endswith('.txt')
nが正の整数か調べる	n > 0
実数は無限大か調べる	math.isinf(x)
option: 色をライトスチールブルーに設定する	color = 'lightsteelblue'
option: 論理値型を使う	dtype = np.int32
数値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
文字列の最後から余分な空白を取り除く	s.rstrip()
リストを展開して表示する	print(*aList)
option: ダークスラテグレーにグラフの色を変更する	color = 'darkslategray'
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
文字列リストをひとつの文字列にする	''.join(aStringList)
散布図をミディアムパープル色として描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
タプルの最初のオブジェクトを探す	aTuple.index(element)
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
縦棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
1行分標準入力から読み込む	sys.stdin.readline()
ヒストグラムをグリーンイエロー色を用いて描画する	plt.hist(データ列, color='greenyellow')
データフレームの未入力値を最小値に設定する	df.fillna(df.min())
option: ▲マーカーを加える	marker = '^'
実数の双曲線余弦を算出する	math.cosh(x)
option: 印を星に変える	marker = '*'
度数分布図を描画し、合計を1にする	plt.hist(データ列, density=True)
option: グラフの色をライトイエローに変更する	color = 'lightyellow'
標準エラーを	sys.stderr
option: プラムにグラフの色を指定する	color = 'plum'
イテラブルとリストについて散布図をプロットして、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
nがn2より小さい	n < n2
線グラフの色をダークマゼンタにセットする	plt.plot(データ列x, データ列y, color='darkmagenta')
組を引数として展開して表示する	print(*aTuple)
棒プロットの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
ある列のカテゴリの平均値	df.groupby('列A').mean()
折れ線プロットの色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
英字の大文字列	string.ascii_uppercase
プロットにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
ラベンダー色でヒストグラムを描画する	plt.hist(データ列, color='lavender')
option: ミスティローズを用いる	color = 'mistyrose'
データフレームの指定した列の歪度	df['列A'].kurt()
２つのデータフレームをジョインする	pd.merge(df, df2)
リストとイテラブルについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
n個の文字列があるリストを作る	[element] * n
データフレームをグループ化しそれぞれの最大値を求める	df.groupby('列A').max()
指定した列の値で集計し、標準偏差を求める	df.groupby('列A').std()
ファイルからフォルダ名を使う	os.path.dirname(filepath)
文字列を空白で分割し、、列挙する	s.split()
散布図の印を青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
option: ダークグレーにグラフの色を指定する	color = 'darkgray'
option: ブルーバイオレット色を用いる	color = 'blueviolet'
線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
option: スノーにグラフの色を設定する	color = 'snow'
追加用にファイルをオープンする]	open(filepath, mode='a')
option: グラフの色をロージーブラウンに変更する	color = 'rosybrown'
カラムを全て日付データに変換する	pd.to_datetime(df['列A'])
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
option: フォレストグリーンに色を設定する	color = 'forestgreen'
nが一桁の数	0 <= n <= 9
最後の列を除いたデータフレームを求める	df[df.columns[:-1]]
ファイルパスを文字列の示すエンコーディングとして書き込みできるように開く]	open(filepath, mode='w', encoding=s)
先頭のを除いたデータフレーム	df[df.columns[1:]]
ある列の文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: 大バツ印を加える	marker = 'X'
折れ線グラフを実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図をダークシアン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
こんにちは世界とプリントする	print('Hello World')
折れ線グラフの下三角印を黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームから散布図を作り回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
散布図のマーカーの大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
モデル教師データでを学習する	model.fit(説明変数, 目的変数)
線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームのふたつの列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
ヒストグラムをリネン色を用いて描画する	plt.hist(データ列, color='linen')
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
rgbの菱形マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列x, データ列y, color='rosybrown')
option: スラグレー色を使用する	color = 'slategrey'
棒グラフをターコイズ色として描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図をライトスレイグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームの一部のカラムの標準偏差	df[['列A', '列B']].std()
折れ線グラフの色をライトブルーにセットする	plt.plot(データ列x, データ列y, color='lightblue')
タプルの最初を除く	aTuple[1:]
折れ線グラフのマーカーを▼にする	plt.plot(データ列x, データ列y, marker='v')
リストをリストを境界値として分割する	pd.cut(aList, aList)
ひとつ飛ばしでタプルを得る	aTuple[::2]
折れ線グラフに青い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
半透明の一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
赤い右三角マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ダークグリーンに色を設定する	color = 'darkgreen'
データフレームからカラムを1つ選択する	df[['列A']]
option: バイナリ書き込みモードに指定する	mode = 'wb'
文字列の無限のイテラブル	itertools.repeat(element)
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: 文字列の示すエンコーディングを使用する	encoding = s
入力から二つの整数値を読む	A, B = map(int, input().split())
上限から下限までの上限下限で度数分布図を描画する	plt.hist(データ列, range=(start, end))
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
赤い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
双方向キュー中の要素のインデックス	deq.index(element)
配列の次元数を求める	aArray.ndim
列のユニークな値の個数	df[col].nunique()
カテゴリで色分けして、にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
option: サンディーブラウン色を用いる	color = 'sandybrown'
オブジェクトが無限に繰り返す列	itertools.repeat(element)
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
CSVファイルを列名を指定せず読む	pd.read_csv('file.csv', header=None)
option: カンマをセパレータで用いる	sep = ','
実数の小数点以下を四捨五入する	round(x)
文字列の最初から部分文字列を探す	s.find(sub)
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
ディープスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
欠損値を含めて表データをある列の値でグループ化する	df.groupby('列A', dropna=False)
方程式として数式の変数の解を計算する	sympy.solve(e, z)
n回文字列が繰り返すイテラブルを得る	itertools.repeat(element, n)
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
オブジェクトは整数クラスのインスタンス	isinstance(obj, int)
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
異なる列をキーとしてデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
散布図をrgbの星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列の開始位置より後に部分文字列が含まれるか	s.find(sub, start) != -1
データフレームのインデックスの名前を一度に付け直す	df.rename(index={x: y})
option: クロスマーカーを描画する	marker = 'x'
折れ線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
option: フォントの色をディープスカイブルーに変更する	color = 'deepskyblue'
リストを青色でプリントする	print(f'\033[34m{value}\033[0m')
日付データが水曜日か	aDate.weekday() == 2
オブジェクトは整数型	isinstance(obj, int)
小麦色色としてヒストグラムを描画する	plt.hist(データ列, color='wheat')
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
option: パールゴールデンロッドにグラフの色を指定する	color = 'palegoldenrod'
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
データシリーズの欠損値をそのメディアンで埋める	ds.fillna(ds.median())
日付時刻データが日曜日かどうか	aDatetime.weekday() == 6
データフレームをグループ化し、分散を計算する	df.groupby('列A').var()
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームから指定したデータ型の列名の一覧を使う	df.select_dtypes(型).columns
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
データフレームの選択したカラムの欠損値をモードに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
折れ線グラフに▲印を使う	plt.plot(データ列x, データ列y, marker='^')
散布図をグリーンイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
option: デピンクを使う	color = 'deeppink'
グラフの凡例の場所を指定する	plt.legend(loc=(x, y))
空のガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
行列の行ごとの合計	np.sum(aArray, axis=1)
データフレームの選択したカラムはどの程度、分散しているか見る	df[['列A', '列B']].var()
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
入力ストリームからn文字読む	f.read(n)
入力ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
タプルの項目名を列挙する	list(aDict)
データフレームのカラムの文字列長を列として使う	df[col].str.len()
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列x, データ列y, color='midnightblue')
文字列がカタカナ	('ァ' <= ch <= 'ン')
1行から二つの浮動小数数を読み込む	A, B = map(float, input().split())
option: SJISを用いる	encoding = 'shift_jis'
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
データフレームのカラムの各データが何回出現するか見る	df[col].value_counts()
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームの一部のカラムの歪度	df[['列A', '列B']].kurt()
アスキー文字が文字列内に含まれる	any(c.isascii() for c in s)
option: 線幅を設定する	linewidth = 3.0
データフレームの一部のカラムを丸めて整数型にする	df[['列A', '列B']].round().astype(int)
書き込み用にファイルを文字列の示すエンコーディングとして開く]	open(filepath, mode='w', encoding=s)
散布図のダイアモンドマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列中に部分文字列が存在しないかどうか確認する	sub not in s
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
マゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
option: グラフを破線に設定する	linestyle = 'dashed'
三つ並べてデータ列を度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列の接頭辞は部分文字列か調べる	s.startswith(sub)
xが1、もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
データフレームの未入力値を中央値に設定する	df.fillna(df.median())
棒グラフをダークオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorange')
折れ線グラフのアルファ値を指定する	plt.plot(データ列x, データ列y, alpha=0.5)
散布図に黒い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='k')
rgbの大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストが少なくとも一つ真	any(aList)
一番右側の列を外したデータフレームを見る	df[df.columns[:-1]]
nがn2より小さいか	n < n2
折れ線グラフを色付きの点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
変数名をキーとして、マッピング	dict(name=element)
コロンで区切って二つの文字列をプリントする	print(value, value2, sep=':')
文字列をカンマで区切って、文字列リストに変換する	s.split(',')
指定した列の中に文字列があるか調べる	df['列A'].isin([value])
範囲指定してデータフレームの行を選択する	df[start:end]
データフレームの選択した列はどの程度、分散しているか見る	df[['列A', '列B']].var()
ヒストグラムをオレンジ色を使って描画する	plt.hist(データ列, color='orange')
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='grey')
グリーンイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
縦棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
横棒プロットを描画してバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
黄色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
今日をタプルに変換する	datetime.datetime.today().timetuple()
八進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データ列の折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
プラットホームがウィンドウズかどうか調べる	sys.platform.startswith('win32')
データシリーズの中にとが存在するか調べる	ds.isin([value, value2])
実数を2乗する	x ** 2
データ列の変化を半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
配列とリストの散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
散布図の上三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
リストの末尾にリストを追加する	aList.extend(aList2)
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
年月日と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
青い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
nがn2の倍数でないか確認する	n % n2 != 0
入力を整数として受け取る	int(input())
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データシリーズの中にある日付データと日付データの合計をカウントする	ds.isin([value, value2]).sum()
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームからランダムに10行を選択する	df.sample(10)
プログラムを正しく終了する	sys.exit(0)
グレー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
カウンタの最頻出の項目	aCounter.most_common()[0]
偽陰性を避けたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: グラフの色をダークシアンに指定する	color = 'darkcyan'
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
部分文字列が部分文字列で開始するか調べる	s.startswith(sub)
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
リストを等間隔でn個に分割する	pd.cut(aList, n)
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフを赤い点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: シーグリーンを用いる	color = 'seagreen'
xが一桁の数	-9 <= x <= 9
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
数式のn階微分を求める	sympy.diff(e, z, n)
option: 三角印を描画する	marker = '^'
標準エラー	sys.stderr
データシリーズの記述統計量	ds.describe()
散布図の右三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ラインを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
キーがマップ上で未定義か調べる	key not in aDict
option: ライムグリーンを使う	color = 'limegreen'
異なる列をキーとしてデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
現在が月曜日	datetime.datetime.today().weekday() == 0
浮動小数点数を浮動小数点数で除した余り	x % y
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
文字列内にひとつでも英字が含まれるか調べる	any(c.isalpha() for c in s)
文字列が漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
書き込み用にファイルをBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
配列とデータ列について散布図を描画し、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
青い破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: 青紫色を用いる	color = 'violet'
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
データフレームの二つのカラムを並べてボックスチャートで可視化する	plt.boxplot([df['カラム'], df['カラム']])
文字列を最後の部分文字列で二分し後半の文字列を使う	s.rpartition(sub)[-1]
データフレームの一部の列の欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
数式を部分分数として展開する	sympy.apart(e)
縦棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
耐火レンガにヒストグラムの色を変更する	plt.hist(データ列, color='firebrick')
option: 分割記号を使わない	sep = ''
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフの左三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
シーケンスを文字列リストに変換してカンマによって連結する	','.join(map(str, iterable))
積率相関係数で表データの相関行列を求める	df.corr(method='pearson')
二つの関係が⊆かどうか	aSet.issubset(aSet2)
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
散布図をドジャーブルー色として描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
両端キューが空	len(deq) == 0
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
データフレームの列の名前の一覧	df.columns
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列の最初だけ大文字化する	s.capitalize()
標準出力を使用する	sys.stdout
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
イテラブルとリストについて散布図を描画し、、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
option: 読む行番号をnamesで指定する	usecols = names
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
文字列を走査し、正規表現に複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
最小値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(df['列A'].min())
データフレームを指定した列によって昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
ある列の文字列が正規表現文字列にマッチしないデータを選択する	df[~df['列A'].str.match(正規表現)]
線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームの指定したカラムの平均値を計算する	df['列A'].mean()
耐火レンガ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
浮動小数点数を文字列にする	str(x)
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
文字列を全て小文字にする	s.lower()
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
リストと配列についての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
option: フォントの色をダークゴールデンロッドに指定する	color = 'darkgoldenrod'
数式の平方根を計算する	sympy.sqrt(e)
ファイルをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
文字列が平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
xが真	bool(x)
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
行列の合計を求める	np.sum(aArray)
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
option: グラフの色をシャルトリューズに変更する	color = 'chartreuse'
option: モカシンを使う	color = 'moccasin'
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
nからn2を減算する	n - n2
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
縦棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
リストの中の一番大きい値	max(aList)
文字列を最後から部分文字列で分割する	s.rsplit(sub)
イテラブルを文字列に変換して部分文字列を用いて連結する	sub.join(map(str, iterable))
二つの浮動小数点数は十分に近いかどうか	math.isclose(x, x2)
ラベンダー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
文字列から部分文字列を除く	s.replace(sub, '')
ヒストグラムの色を耐火レンガにセットする	plt.hist(データ列, color='firebrick')
実数の双曲線正接を算出する	math.tanh(x)
ビン数nとしてリストをビン分割する	pd.cut(aList, n)
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
option: 色をコーンズシルクに設定する	color = 'cornsilk'
折れ線グラフに四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
データフレームを異なるカラムをキーにして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
キーが辞書に存在するかどうか調べる	key not in aDict
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(配列, 'norm')
カウンタをゼロにする	aCounter.clear()
実線を使ってヒストグラムをプロットする	plt.hist(データ列, linestyle='solid')
折れ線グラフの下三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
配列をダミー変数にする	pd.get_dummies(配列)
ファイルを読み込みモードで開いて]、fとする	f = open(filepath, mode='r')
配列とリストについて散布図を描いて、文字列という短い説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
縦棒グラフをパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='purple')
option: サーモンを使う	color = 'salmon'
列から1個ランダムに選ぶ	random.choice(iterable)
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
データフレームのあるカラムの中央値	df['列A'].median()
データフレームの代表値を求める	df.describe()
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
n個にデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームを10の位で丸めて整数型にする	df.round(-1).astype(int)
option: イエローグリーン色を使用する	color = 'yellowgreen'
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
nが2で割り切れるかどうか	n % 2 == 0
データシリーズの中のNaNの数を数える	ds.isna().sum()
option: ネイビーを用いる	color = 'navy'
ロバストな重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
配列とリストの散布図を描いて、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ブラックを使用する	color = 'black'
データ列の変化を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
関数によってデータフレームをまとめたグループを使う	df.groupby(関数)
降順にデータフレームをある列によってソートする	df.sort_values(by='列A', ascending=False)
四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
リストとリストについての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームを散布図でグラフ化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
日付データと日付データの時間差は何秒か知る	(aDate - aDate2).total_seconds()
縦棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
リストとデータ列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
option: フォントの色をダークスレートブルーに設定する	color = 'darkslateblue'
option: 茶色にグラフの色を変更する	color = 'brown'
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図を黒い丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
集合の全要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
オブジェクトはタプルクラス	isinstance(obj, tuple)
今日が何月か知る	datetime.datetime.today().month
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
白色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
文字列の最後から部分文字列を探す	s.rfind(sub)
散布図の▼マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフを黄緑色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
option: グレーにグラフの色を設定する	color = 'gray'
option: 色をレベッカパープルに設定する	color = 'rebeccapurple'
Pythonのバージョンを知る	sys.version
データフレームをグループ化し、それぞれの分散を算出する	df.groupby('列A').var()
データフレームをグループ化し、それぞれの合計を算出する	df.groupby('列A').sum()
タイムスタンプデータの日付	aDatetime.date()
データフレームの指定した列の25パーセンタイル	df['列A'].quantile(0.25)
コマンドの第一引数	sys.argv[1]
グリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
文字列中の部分文字列の出現	s.count(sub)
棒グラフの幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
1からNまでの行列	np.arange(1, N+1)
今日は何年か知る	datetime.datetime.today().year
データシリーズの中の未入力値の合計をカウントする	ds.isna().sum()
ダークマゼンタ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
エクセルからシート名を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
t-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
リストとリストについて散布図を描画してその大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
option: 表示を半透明にする	alpha = 0.5
アークタンジェント	math.atan(x)
option: オリベドラブを使う	color = 'olivedrab'
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
散布図を赤い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
標準出力がパイプか調べる	not sys.stdout.isatty()
データフレームの選択したカラムを1000の位で丸める	df[['列A', '列B']].round(-3)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
nを十六進表記に変換する	hex(n)
データシリーズの曜日が何日目か知る	ds.dt.dayofweek
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
配列からn個、サンプリングする	random.sample(iterable, k=n)
データフレームの選択したカラムの不偏分散を算出する	df[['列A', '列B']].var(ddof=1)
option: ベクトルのデータ型を指定する	dtype = np.uint8
グラフの描画で濃くパレットを使う	sns.set(pallete='deep')
決定木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: アイボリーに色を設定する	color = 'ivory'
マッピングのキー一覧	list(aDict)
データフレームのカラムの平均などをまとめて見る	df['列A'].describe()
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
二つのカラムからグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
双方向キューが空でない	len(deq) != 0
要素がセットに含まれるか調べる	element in aSet
日付データが土曜日か確認する	aDate.weekday() == 5
辞書の全項目を空にする	aDict.clear()
実数のハイパボリック・タンジェント	math.tanh(x)
データフレームの欠損値を最大値に増やす	df.fillna(df.max())
ふたつの列でグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
ネイビー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
行列の最小値を計算する	np.min(aArray)
縦軸の目盛の値を変更する	plt.yticks(目盛りの値リスト)
空の重回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データフレームの列名一覧で指定したカラムをドロップする	df.drop(columns, axis=1, inplace=True)
ミディアムスプリンググリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
パールバイオレットレッドにヒストグラムの色をする	plt.hist(データ列, color='palevioletred')
nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
文字列中の全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図をダークスラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
０で全要素を初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
日付時刻データにn時間を加算する	aDatetime + datetime.timedelta(hours=n)
指定したカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
文字列の接尾辞から部分文字列を除く	s.removesuffix(sub)
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
ケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
カウンタ同士で和集合	aCounter | aCounter2
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ファイルをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
日付データからn週間を減らす	aDate - datetime.timedelta(weeks=n)
三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームのn行目以降選ぶ	df[n:]
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
リストとリストの散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
青いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
カウンタのユニークな項目をリストとして得る	list(aCounter)
文字列が全てアルファベットかどうか	s.isalpha()
データフレームの75パーセンタイル	df.quantile(0.75)
横棒グラフをアンティークホワイト色として描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: 区切りを文字列にする	sep = s
ファイルを閉じる	f.close()
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
3自然数のGCD	math.gcd(n, n2, n3)
棒グラフをアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='aquamarine')
商と余りを同時に算出する	divmod(x, y)
文字列はPythonのキーワード	keyword.iskeyword(s)
イテラブルからベクトルを作る	np.array(iterable)
データフレームのあるカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
実数の符号を同じにする	math.copysign(x, x2)
代数計算ライブラリを使う	import sympy
表データのn行目を削除して	df.drop(n, axis=0)
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
option: グラフの色をデピンクに指定する	color = 'deeppink'
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
リストの要素を並べ変える	sorted(aList)
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
オブジェクトの属性の値を変更する	setattr(obj, プロパティ名, 値)
散布図に黒いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
箱ひげ図にラベルを設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
サポートベクター分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
データフレームの選択したカラムの欠損値を前の行の値にする	df[['列A', '列B']].fillna(method='ffill')
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
Excelファイルからカンマ区切りのファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
横軸の目盛を表示しない	plt.xticks([])
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
今日の日付時刻	datetime.datetime.today()
リストにリストを加えて広げる	aList.extend(aList2)
データ列の推移を破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed')
ふたつの集合は集合と互いに素かどうか	aSet.isdisjoint(aSet2)
option: 列の名前をリストで設定する	names = 列名リスト
縦方向に複数のデータフレームを結合する	pd.concat([df, df2, df3], axis=0)
文字列の右端からタブを取り除く	s.rstrip('\t')
縦棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
本日が土曜日かどうか	datetime.datetime.today().weekday() == 5
option: ライトサーモン色を用いる	color = 'lightsalmon'
ライトスチールブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
ミディアムスレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
リストをy座標配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームの列の名前を一度に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ある列のカテゴリ毎の最小値	df.groupby('列A').min()
データフレームの選択したカラムの中に文字列とがあるか	df[['列A', '列B']].isin([value, value2])
現在が何曜日か知る	datetime.datetime.today().weekday()
両端キューが空かどうか判定する	len(deq) == 0
ダークターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
実行結果を太文字でプリントする	print(f'\033[1m{value}\033[0m')
カーキにヒストグラムの色を変更する	plt.hist(データ列, color='khaki')
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
日付時刻データは日付時刻データと同時か確認する	aDatetime == aDatetime2
option: ライトイエローを使う	color = 'lightyellow'
文字列の左端だけ大文字化する	s.capitalize()
デックをポップする	deq.pop()
折れ線グラフを青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: フォントの色を茶色に変更する	color = 'brown'
データ列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
無限にイテラブルを繰り返す	itertools.cycle(iterable)
option: ダークグリーンにフォントの色をセットする	color = 'darkgreen'
スクリプトファイルのフォルダ名を使う	os.path.dirname(os.path.abspath(__file__))
あるカラムの値によってデータフレームをグループ化し、要約統計量を算出する	df.groupby('列A').describe()
xでデータシリーズの欠損値を埋める	ds.fillna(x)
option: BOM付きを用いる	encoding = 'utf_8_sig'
option: ターコイズに色を設定する	color = 'turquoise'
SDGを用いて回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
列名を指定してデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
オプションで標準出力を使う	file = sys.stdout
リストを三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
文字列の示すエンコーディングでファイルをオープンする]	open(filepath, encoding=s)
スカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
ファイル全体をリストとして読み込む	f.readlines()
指定したカラムの中に文字列と文字列がある	df['列A'].isin([value, value2])
option: シルバーを用いる	color = 'silver'
文字列の最後の文字	s[-1]
あるカラムの値がx以上の行を取り出す	df[df['列A'] >= x]
小麦色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
option: フォントの色をマルーンに設定する	color = 'maroon'
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するかカウントする	s.count(sub, start, end)
オブジェクトはリストかタプル	isinstance(obj, (list)
ダークブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
折れ線グラフにバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
rgbの菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
凡例をグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
データフレームの指定した列のNaNを最大値で埋める	df['列A'].fillna(df['列A'].max())
縦棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
外れ値に強い線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
option: 未入力値を先頭にする	na_position = 'first'
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
option: オールドレースにフォントの色を設定する	color = 'oldlace'
散布図の▲マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
データフレームを小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
データフレームの選択したカラムを万の位で四捨五入する	df[['列A', '列B']].round(-4)
文字列の示す文字コードで既存のファイルパスを追加できるように開く]	open(filepath, mode='a', encoding=s)
確率的勾配降下として回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
イエローグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
インデント幅nでマッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
日付時刻データはタイムスタンプデータと同時かどうか	aDatetime == aDatetime2
文字列は全て印字できるか確認する	s.isprintable()
データシリーズの上位25％	ds.quantile(0.25)
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
決定木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
最大長nの両端キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
数式の変数についてのn階微分を算出する	sympy.diff(e, z, n)
少ない順にカウンタをリストとして得る	aCounter.most_common()[::-1]
線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
散布図の三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
既存のベクトルを元に全要素が1の配列を作る	np.ones_like(aArray)
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
グラフのパレットを色差別なくする	sns.set(pallete='colorblind')
行列のスカラー倍	aArray * n
nの各桁の総和を計算する	sum(map(int, str(n)))

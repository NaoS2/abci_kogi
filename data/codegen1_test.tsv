データフレームのカラムのNaNを中央値に設定する	df[col].fillna(df[col].median())
データフレームを散布図で可視化してカテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: グラフを破線に設定する	linestyle = 'dashed'
等量でビン数nとしてデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
データ列のNaNを最小値で埋める	ds.fillna(ds.min())
整数を複素数に変換する	complex(x)
データフレームを各列と列の組み合わせ毎に分類し、、分散を求める	df.groupby([column, column2], as_index=False).var()
散布図の四角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
初期値で全要素を初期化した行列	np.full(要素数, 初期値, dtype=np.int)
データフレームを千の位で丸める	df.round(-3)
文字列を文字リストにする	list(s)
option: 文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
カデットブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: ダークグリーンを使用する	color = 'darkgreen'
シスル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
カテゴリでグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
浮動小数点数が正の数か	x > 0
コーラル色を用いてヒストグラムを描画する	plt.hist(データ列, color='coral')
option: グラフの色をロイヤルブルーに指定する	color = 'royalblue'
文字列をカンマで分割して、列挙する	s.split(',')
ファイルをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
箱髭図をプロットして平均値を加える	plt.boxplot(データ列, showmeans=True)
2つの文字列を辞書順で比較する	s < s2
双方向キューの要素をインプレースに反転する	deq.reverse()
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
棒グラフをダークシアン色として描画する	plt.bar(データ列x, データ列y, color='darkcyan')
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
xを浮動小数点数にする	float(x)
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
ミッドナイトブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
マッピングの項目数	len(aDict)
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
option: エラーがあるとき例外を発生させる	errors = 'strict'
実数の小数部を求める	math.modf(x)[0]
散布図の大バツ印を赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
リストをコピーする	aList.copy()
小数点数のサイン	math.sin(x)
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
データ列を1000の位で丸めて、整数にする	ds.round(-3).astype(int)
データフレームのカラムは何曜日か見る	df[col].dt.weekday_name
文字列が片仮名かどうか判定する	('ァ' <= ch <= 'ン')
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
TSVからCSVをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
２つの列で破壊的にデータフレームを降順にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
数列の比率を円グラフで描画する	plt.pie(データ列, startangle=90)
文字列内にひとつでも数字が含まれるかテストする	any(c.isdigit() for c in s)
日付データは何年か知る	aDate.year
実数で実数を割る	x / y
文字列の終了位置より前に部分文字列がないか調べる	s.find(sub, 0, end) == -1
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
列のどの値が頻出か見る	ds.mode()
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
ヒストグラムの色をミディアムシアグリーンにする	plt.hist(データ列, color='mediumseagreen')
折れ線グラフの四角印を黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
マゼンタ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
追加モードでファイルをオープンする]	open(filepath, mode='a')
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データ列のNaNを直後の値で補う	ds.fillna(method='bfill')
符号付きでnをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
縦棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
左三角印を用いるデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
黒い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ファイルをオープンして]書き込みストリームを使う	open(filepath, mode='w')
option: グラフの色をホワイトに設定する	color = 'white'
コーンズシルク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
ファイルパスのファイル名を使う	os.path.basename(filepath)
option: ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
配列から重複を除いた行列を初期化する	np.unique(aArray)
グラフの見た目を綺麗にする	import seaborn as sns
現在の秒	datetime.date.today().second
図の縦横をする	plt.figure(figsize=(横幅, 高さ))
データフレームから重複を残さず、落とす	df.drop_duplicates(keep=False)
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
option: フォントの色をハニーデューに設定する	color = 'honeydew'
データフレームの未入力値を最頻値で補う	df.fillna(df.mode().iloc[0])
option: ロイヤルブルー色を使用する	color = 'royalblue'
インディゴ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
ベクトルの累積積	np.cumprod(aArray)
全数字	string.digits
棒グラフをダーク・スラテグレー色を使って描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームから指定されたカラムの名前一覧の列を抽出する	df[columns]
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
綺麗なグラフを使用する準備をする	import seaborn as sns
自然数LCM	math.lcm(n, n2)
青い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
２次元リストをflattenする	sum(aList)
タプルの最初のn要素を除く	aTuple[n:]
数に数をかける	x * y
Pandasで、データ列のエポック秒からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムをゴールデンロッド色を用いて描画する	plt.hist(データ列, color='goldenrod')
option: アクアを用いる	color = 'aqua'
リストをnから順番付けする	enumerate(aList, start=n)
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
プロットの色を淡くする	sns.set(pallete='muted')
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgrey')
線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
ミッドナイトブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
ヒストグラムの線種を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
方程式の解を算出する	sympy.solve(e)
表示できる最大列数を増やす	pd.set_option('display.max_columns', n)
棒グラフをミディアムシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
nが一桁の数	-9 <= n <= 9
空白で文字列を区切って、整数リストに変換する	map(int, s.split())
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
散布図をアリスブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
リストとデータ列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ファイルをEUCを使ってオープンする]	open(filepath, encoding='euc_jp')
データ列が正規分布に従うか調べる	scipy.stats.shapiro(データ列)
値を緑色にする	f'\033[32m{value}\033[0m'
データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図をミスティローズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
ロードされたモジュールの一覧を確認する	sys.modules
オブジェクトの属性の値を指定する	setattr(obj, プロパティ名, 値)
追加できるようにSJISを使って既存のファイルをオープンする]	open(filepath, mode='a', encoding='shift_jis')
集合の更新不能版	frozenset(aSet)
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
リストを昇順にソートする	sorted(aList, reverse=True)
データフレームのカラムの欠損値をモードで埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
プロットの背景色を白くする	sns.set(style='whitegrid')
rgbの大バツマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームのリストで指定された列のヒートマップを描画する	sns.heatmap(df[aList].corr())
値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
黒い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列を最初の部分文字列で分けた時の後半の文字列	s.partition(sub)[-1]
データフレームのリストカラムの歪度を求める	df[aList].kurt()
データフレームの列とカラムのヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
クラス分類の適合率と再現率の調和平均を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームのリストカラムを1000の位で四捨五入して、整数にする	df[aList].round(-3).astype(int)
カテゴリでグループ化して、データフレームをに箱ひげ図で図示する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ゴールデンロッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
貝殻色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
option: チョコレートに色を設定する	color = 'chocolate'
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
日付データからn週間分引く	aDate - datetime.timedelta(weeks=n)
ヒストグラムの色を白に指定する	plt.hist(データ列, color='white')
マップのキーを列挙する	list(aDict)
データフレームから列を４つのみ選択する	df[[column, column2, column3, column4]]
スピアマン順位相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
実数を実数に加算する	x + y
既存のベクトルを元に全要素が初期値の配列を作成する	np.full_like(aArray, 初期値)
RANSACを使ってクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: フォントの色をリネンに設定する	color = 'linen'
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
行列が何のデータ型か調べる	aArray.dtype()
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
横棒グラフをビスク色として描画する	plt.barh(データ列x, データ列y, color='bisque')
option: フォントの色をサーモンに設定する	color = 'salmon'
文字列が小文字かどうか調べる	s.islower()
線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
散布図をスノー色として描画する	plt.scatter(データ列x, データ列y, color='snow')
データ列を分割する	pd.cut(ds, aList)
option: グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
データ列を整数に丸める	ds.round()
表データのそれぞれのグループ毎の最小値	df.groupby(column).min()
コマンドライン引数を列挙する	sys.argv
散布図をパパイヤウィップ色を使って描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
データフレームを表示するとき折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
文字列中の全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
ロイヤルブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
組の合計	sum(aTuple)
option: 印をポイントに変更する	marker = '.'
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
カテゴリ列で色分けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
プロットに凡例を追記する	plt.legend(['凡例A', '凡例B'])
実数を数で除した余り	x % y
散布図に左三角印を加える	plt.scatter(データ列x, データ列y, marker='<')
データフレームを複数の列を用いてソートして更新する	df.sort_values(by=column, inplace=True)
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='gray')
カウンタを高頻度方から列挙する	aCounter.most_common()
ダークバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
リッジ回帰分析を行う	model = sklearn.linear_model.Ridge(alpha=正則化項)
リストにリストを展開する	aList.extend(aList2)
レベッカパープル色として線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
要素が全て初期値の配列を作る	np.full(要素数, 初期値, dtype=np.int)
option: 丸マーカーを用いる	marker = 'o'
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
黒い右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
分類モデルのアキュレシーを算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
線グラフの色をレベッカパープルに指定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
両端キューに数値をプッシュする	deq.append(element)
黒い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: グラフの色をダークオリーブグリーンにセットする	color = 'darkolivegreen'
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
ベクトルが何のデータ型か調べる	aArray.dtype()
カラーマップを用いてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
二つのデータフレームを列をキーにして全ジョインする	pd.merge(df, df2, on=column, how='outer')
option: ライムグリーン色を使用する	color = 'limegreen'
カウンタの最頻出の項目を求める	aCounter.most_common()[0]
データフレームのリスト列の空文字をドロップする	df[aList].replace('', np.nan).dropna()
折れ線グラフの四角印を青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
xの小数点以下'1'桁まで表示する	print(':.1f'.format(x))
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
ヒストグラムを濃いシアン色として描画する	plt.hist(データ列, color='darkcyan')
option: 星印を加える	marker = '*'
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
データ列を度数分布図にする	plt.hist(データ列)
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
ケンドールでデータフレームの相関行列を求める	df.corr(method='kendall')
オブジェクトが属性を持つ	hasattr(obj, プロパティ名)
散布図を濃いシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
正規表現を使用する	import re
2つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
散布図をダークオリーブグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
改行なしに二つの変数をプリントする	print(value, value2, end='')
列を10の位で丸める	ds.round(-1)
リストを小さい順に並べ変える	sorted(aList, reverse=True)
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
ヒストグラムをダークスレートブルー色を用いて描画する	plt.hist(データ列, color='darkslateblue')
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
折れ線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
計算機イプシロンを計算する	sys.float_info.epsilon
双方向キューのn番目の要素	deq[n]
option: カンマを区切りで用いる	sep = ','
ファイル全体をリストとして読む	f.readlines()
文字列が全て小文字かどうか調べる	s.islower()
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
数列とデータ列の散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
シーケンスを文字列に変換して連結する	''.join(map(str, iterable))
ピアソン積率相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
option: フォントの色をトマトに設定する	color = 'tomato'
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
文字列中の正規表現を新しい文字列として置き換える	re.sub(pattern, newsub, s)
ブラック色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
ミディアムバイオレットレッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームの中に含まれる日付データの数を数える	df.isin([value]).sum()
縦棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームのリストカラムの値を正規表現patternでまとめて変更する	df[aList].replace(pattern, repl, regex=True)
サポートベクター分類モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
データフレームを列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
散布図を珊瑚色として描画する	plt.scatter(データ列x, データ列y, color='coral')
'A'列と'B'列によってによって大きい順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
nがn2で割り切れない	n % n2 != 0
配列とリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
外れ値に強い重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
データ列が何曜日か調べる	ds.dt.weekday_name
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
縦棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
散布図を黒い大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図の四角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームのカラムの未入力値を直前の値で置き換える	df[col].fillna(method='ffill')
横棒グラフをライトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightblue')
リストの重複を除く	sorted(set(aList), key=aList.index)
折れ線グラフを一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgreen')
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: ライトグレー色を用いる	color = 'lightgrey'
2つのデータフレームを異なるカラムをキーとして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
option: マルーンを用いる	color = 'maroon'
半透明の破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
データ列の折れ線グラフを▲マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^')
リストから行列を作成する	np.array(aList)
標準出力を	sys.stdout
ベクトルと同じ大きさの空配列を作成する	np.empty_like(aArray)
n個の整数リストを得る	list(range(n))
実数を切り下げて整数にする	math.floor(x)
数式の簡単化を行う	sympy.sympify(e)
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームの列の75パーセンタイル	df[col].quantile(0.75)
イテラブルを縦軸、リストをx軸として大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
文字列が漢字かどうか	('\u4E00' <= ch <= '\u9FD0')
文字列リストを連結して一つの文字列にする	''.join(aStringList)
option: バッファのサイズを小さくする	buffering = 4096
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
mathを使う	import math
ヒストグラムをフローラルホワイト色として描画する	plt.hist(データ列, color='floralwhite')
データフレームは正規分布からどの程度尖っているか見る	df.skew()
列の中にがあるか調べる	ds.isin([value])
option: チョコレートを使う	color = 'chocolate'
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
文字列を水色でプリントする	print(f'\033[36m{value}\033[0m')
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
データフレームを複数の列によって降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
リストの折れ線グラフをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのカラムをValueMapで置き換える	df[col].replace(ValueMap)
option: ポイント印を使用する	marker = '.'
文字列をコロンで区切り、、列挙する	s.split(':')
リストと配列の散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
行列積	np.matmul(aArray, aArray2)
option: 色をシルバーに設定する	color = 'silver'
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
文字列全体がパターンにケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
プロットにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
データ列は何月か見る	ds.dt.month
数列の推移を半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
両端キューの最後に要素を入れる	deq.append(element)
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
option: グラフの色をアイボリーに変更する	color = 'ivory'
データフレームを各列と列の組み合わせ毎に集約し、、合計を求める	df.groupby([column, column2], as_index=False).sum()
nが2で割り切れない	n % 2 == 1
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
最大値・最小値として乱数を生成する	random.randint(最小値, 最大値)
今日が何曜日か知る	datetime.datetime.today().weekday()
データフレームを2つの列で昇順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
文字列をUTF8でバイト列にする	s.encode(encoding='utf-8', errors='strict')
散布図を黒い右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c='k')
文字列を最後の部分文字列で分けた時の前半の文字列	s.rpartition(sub)[0]
濃い青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
datetime64型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームを列名リストで昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
表データから列を１つ選択する	df[[column]]
小文字列	string.ascii_lowercase
データフレームのリストカラムの相関行列をヒートマップを用いてグラフ化する	sns.heatmap(df[aList].corr())
データフレームの中のNaNの合計を求める	df.isna().sum()
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
日付データの月数を求める	aDate.month
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
nがn2以上かどうか調べる	n >= n2
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
特異値分解としてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
折れ線グラフを黄緑色を用いて描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームを'A'列と'B'列によってまとめたグループを使う	df.groupby(['A', 'B'])
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
パウダーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
データフレームの列の各データ値の出現回数	df[col].value_counts()
option: 色をミディアムパープルに設定する	color = 'mediumpurple'
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
y軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
特異値分解として多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
カテゴリで色付けしてデータフレームをにバイオリン図で図示する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: スラグレーを使用する	color = 'slategray'
データフレームのカラムを100の位で四捨五入する	df[col].round(-2)
ぐるぐると列を繰り返す	itertools.cycle(iterable)
折れ線グラフの印を星にする	plt.plot(データ列x, データ列y, marker='*')
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategrey')
リストにオブジェクトを追加する	aList.append(element)
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
文字列を空白で分割して列挙する	s.split()
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
リストのn番目以降の部分を得る	aList[n:]
折れ線グラフの四角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
部分文字列が文字列の開始位置と終了位置の間にあるか	s.find(sub, start, end) != -1
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
シエナ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
ライトサーモン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
区間数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
棒グラフをバリーウッド色を使って描画する	plt.bar(データ列x, データ列y, color='burlywood')
option: 小麦色色を使用する	color = 'wheat'
横棒グラフを描画して、棒の縦幅を変更する	plt.barh(ラベル列, データ列, width=0.5)
凡例をベストな位置に表示する	plt.legend(loc='best')
文字列中の部分文字列を別の文字列に全部置き換える	s.replace(sub, newsub)
折れ線グラフの大バツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
レモンシフォン色でヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
データフレームの列を整数に丸める	df[col].round()
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
青紫色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
変数名をキーとして、辞書を作る	dict(name=element)
option: namesをカラム名に変更する	names = names
ヒストグラムの線の種類を一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
双方向キューをポップする	deq.pop()
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
データフレームの欠損値を最小値で補う	df.fillna(df.min())
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームの列と列のヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
データフレームのn行目まで抽出する	df[:n]
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフの星印の大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
nがn2で割り切れないか確認する	n % n2 != 0
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームの値が欠損値か	df.isna()
数列と配列の散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
predicateFuncが真となるシーケンスの要素	itertools.takewhile(predicateFunc, iterable)
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
ヒストグラムをシアン色を用いて描画する	plt.hist(データ列, color='cyan')
データ列が何曜日か確認する	ds.dt.weekday_name
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: マーカーを上三角に変更する	marker = '^'
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
オブジェクトは集合クラスのインスタンスかどうか調べる	isinstance(obj, set)
組のn番目からn2番目までの部分	aTuple[n:n2]
データフレームの指定した列をリストとして抽出する	df[column].values.tolist()
コマンドtextを実行する	os.system(text)
option: フクシアにグラフの色を設定する	color = 'fuchsia'
逆双曲線正弦	math.asinh(x)
実数を浮動小数点数で割る	x / y
太文字で文字列を表示する	print(f'\033[1m{value}\033[0m')
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
データフレームの指定された列を配列として取り出す	df[column].values
部分文字列で文字列を分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
線グラフをペルー色を使って描画する	plt.plot(データ列x, データ列y, color='peru')
option: マゼンタ色を使用する	color = 'magenta'
部分文字列を文字列の開始位置から終了位置まで探す	s.find(sub, start, end)
散布図をライム色を使って描画する	plt.scatter(データ列x, データ列y, color='lime')
複数のデータフレームを横に連結する	pd.concat([df, df2, df3], axis=1)
データフレームの列をインデックスにする	df.set_index(column)
option: フォントの色を黄色に設定する	color = 'yellow'
ファイルからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
option: 珊瑚色を用いる	color = 'coral'
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
ライム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
小数点数の常用対数を求める	math.log10(x)
数列とリストについて散布図を描画して、菱形マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
サンディーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
昇順に複数の列でデータフレームをソートする	df.sort_values(by=column, ascending=True)
データ列の折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
リストと配列について散布図をプロットして下三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
カンマで文字列を分割して文字列リストに変換する	s.split(',')
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
本日が月曜日か	datetime.datetime.today().weekday() == 0
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
文字列がリストの要素でない	element not in aList
線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
全要素を0で初期化した行列	np.zeros(要素数)
実数のアークサイン	math.asin(x)
分類モデルの適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
リストを配列に変換する	np.array(iterable)
破線を用いてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームをグループ化し、それぞれの列に対し平均値を計算する	df.groupby(column)[column2].mean()
option: ゲインズボロ色を使用する	color = 'gainsboro'
マッピングのキーの一覧	aDict.keys()
レベッカパープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
option: 色をライトグリーンに設定する	color = 'lightgreen'
切り捨てながらnをn2分の一にする	n //= n2
集合から全ての要素を除く	aSet.clear()
最大長nの両端キューを生成する	collections.deque(maxlen=n)
nが3で割り切れるか	n % 3 == 0
リストを等量でビン数nを使ってビン分割する	pd.qcut(aList, n)
箱ひげ図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
ファイルを書き込みモードを用いてオープンして]、fとする	f = open(filepath, mode='w')
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
カウンタをクリアする	aCounter.clear()
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
リストの最後を除く	aList[:-1]
今日をタプルに変換する	datetime.datetime.today().timetuple()
整数nの16進文字列を求める	hex(n)[2:]
青い破線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
３つのデータフレームを横向きにつなぐ	pd.concat([df, df2, df3], axis=1)
線グラフの色をスカイブルーにセットする	plt.plot(データ列x, データ列y, color='skyblue')
スカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='skyblue')
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
文字列が大文字か調べる	s.isupper()
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフの色をオールドレースにする	plt.plot(データ列x, データ列y, color='oldlace')
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
配列とリストについて散布図をプロットして、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
整数個のものからk個取り出したときの並べ方を求める	math.perm(n, k)
option: ドジャーブルー色を使用する	color = 'dodgerblue'
nが3の倍数	n % 3 == 0
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
データ列の文字列を未入力値に変換する	ds.replace(s, np.nan)
タイムスタンプデータが木曜日かどうか確認する	aDatetime.weekday() == 3
棒グラフをダークシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: フォントの色をターコイズに変更する	color = 'turquoise'
ペルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
ダークゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームのカラムの日を使う	df[col].dt.day
グラフのx軸を対数に変更する	plt.xscale('log')
データフレームからランダムに重複ありでn行をサンプリングする	df.sample(n, replace=True)
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
配列と配列について散布図をプロットして、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
シスル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
タプルのキーとその値を列挙する	aDict.items()
option: グラフの色をベージュにセットする	color = 'beige'
option: フォントの色をシスルに設定する	color = 'thistle'
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
列'A'と列'B'をキーとして二つの表を外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ミディアムターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
今日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
各列毎にデータフレームをグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
縦棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
縦棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
ライトスチールブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
リストとリストの散布図を描画してマーカーを三角にセットする	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
ファイルパスをオープンする]	open(filepath)
option: ピンク色を用いる	color = 'pink'
折れ線グラフをフローラルホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
シーケンスを多重集合にする	collections.Counter(iterable)
0からnの範囲で	range(n)
タプルを順番付けする	enumerate(aTuple)
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをスノー色を使って描画する	plt.barh(データ列x, データ列y, color='snow')
セットをイミュータブルにする	frozenset(aSet)
ファイルをバイナリ書き込みモードでオープンして]fとする	f = open(filepath, mode='wb')
option: 大バツ印を描画する	marker = 'X'
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
文字列を最後から空白で区切る	s.rsplit()
実行を正しく終える	sys.exit(0)
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
横棒グラフをオリベドラブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olivedrab')
タプルの全項目をクリアする	aDict.clear()
プロットの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームを複数の列で昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
箱ひげ図としてデータフレームの２つのカラムを並べて描画する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
縦棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
２つのカウンタの共通する要素	aCounter & aCounter2
option: サンディーブラウン色を使用する	color = 'sandybrown'
option: ダークターコイズを用いる	color = 'darkturquoise'
option: インディアンレッドにグラフの色を指定する	color = 'indianred'
空の回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
数列とリストについて散布図を描画し、、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
option: 左三角印を描画する	marker = '<'
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
モデルデータでを学習する	model.fit(説明変数, 目的変数)
柱状図でデータフレームのカラムを描画する	plt.hist(df[column])
線グラフを半透明の点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
リストにリストを追加し、拡張する	aList.extend(aList2)
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
イエローグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
カウンタのktopを列挙する	aCounter.most_common(k)
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
スーパーセットか調べる	aSet.issuperset(aSet2)
分数の分母	q.denominator
双方向キューをリストにする	list(deq)
オブジェクトのプロパティの値を指定する	setattr(obj, プロパティ名, 値)
原点から(小数点数,y)の距離	math.hypot(x, y)
option: コーラル色を用いる	color = 'coral'
リストと配列について散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
オールドレース色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
Pythonパスを調べる	sys.path
nとn2のビット積	n & n2
KNNで回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
リネン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
表の数値を小数点以下n桁で丸める	df.round(n)
組の平均値を求める	sum(aTuple)/len(aTuple)
リストとリストについての散布図に黒い△マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
キーで指定されたエントリをマップからポップする	aDict.pop(key)
行列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
折れ線グラフのポイントマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
デック中の要素のインデックス	deq.index(element)
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
散布図をパールバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
サイコロと同じ乱数を生成する	random.randint(1, 6)
プロットのx軸とy軸の比率を同じする	plt.axis('equals')
option: 分割記号をカンマにする	sep = ','
option: スレートブルー色を用いる	color = 'slateblue'
文字列中に部分文字列が含まれる	sub in s
辞書をネスト化する	collections.ChainMap(aDict)
散布図の三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
オレンジ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームの上n行	df.head(n)
BOM付きでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームをグループ化し、列に対し最大値を求める	df.groupby(column)[column2].max()
option: 青緑色を用いる	color = 'teal'
未初期化の行列	np.empty(要素数, dtype=np.int)
option: アイボリー色を使用する	color = 'ivory'
JSONファイルのファイルを辞書にする	json.load(fin)
線形回帰モデルの回帰変数	model.coef_
線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
散布図の菱形マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
ダークスラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategray')
日付データが日付データと同時かどうか判定する	aDate == aDate2
パターンによって文字列を置き換える	re.sub(pattern, newsub, s)
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
カウンタ同士で和集合演算する	aCounter | aCounter2
グラフの使途を論文に設定する	sns.set(context='paper')
データフレームから重複を消す	df.drop_duplicates()
３自然数の最大公約数	math.gcd(n, n2, n3)
データフレームのカラムを百の位で丸めて整数にする	df[col].round(-2).astype(int)
プロットにグリッド線を付ける	plt.grid(True)
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
環境がLinux	sys.platform.startswith('linux')
データ列の欠損値を50パーセンタイルに設定する	ds.fillna(ds.median())
凡例を表示する	plt.legend()
線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
棒グラフをフローラルホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='floralwhite')
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
小麦色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
作画で使うフォントを日本語に変更する	sns.set(font='IPAexGothic')
再帰が何回までできるか、	sys.getrecursionlimit()
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
データフレームをインデックスでソートする	df.sort_index()
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
文字列を最初の部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
ユニコードを文字に変換する	chr(unicode)
文字列のプレフィックスから部分文字列を取り除く	s.removeprefix(sub)
データフレームから重複する行を消して、更新する	df.drop_duplicates(inplace=True)
右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>')
数列を円グラフにする	plt.pie(データ列, startangle=90)
折れ線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
黒い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
データ列の欠損値を第二四分位数に設定する	ds.fillna(ds.median())
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
データフレームを'A'列と'B'列の値でグループ化する	df.groupby(['A', 'B'])
option: ダークスレートブルーを使う	color = 'darkslateblue'
列の値を用いてデータフレームをグループ化して、各グループごとの件数を知る	df.groupby(column).size()
実数の床を求める	math.floor(x)
ファイルをデータフレームとして読む	pd.read_excel(filename)
データ列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データ列を箱ひげ図として描画する	plt.boxplot(データ列)
分類木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
ビン数nとして配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
パーセプトロンとしてクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
半透明の一点鎖線を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
10を底とする対数	math.log10(x)
値が集合のメンバー	element in aSet
二つの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
グラフの簡単な説明を表示する	plt.legend()
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
option: マーカーの色を淡い茶色にする	markerfacecolor = 'tan'
バイオリン図をプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの列の母標準偏差	df[col].std(ddof=0)
最大長を指定して両端キュー	collections.deque(maxlen=n)
数列を３つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ヒストグラムをサーモン色を用いて描画する	plt.hist(データ列, color='salmon')
標準出力を用いる	sys.stdout
列の値が欠損値か	ds.isna()
option: スラグレーを使う	color = 'slategrey'
入力から二つの浮動小数数を読み込む	A, B = map(float, input().split())
タプルを文字列リストに変換して、'改行を用いて一つにする	'\n'.join(map(str, iterable))
折れ線グラフに丸印を使う	plt.plot(データ列x, データ列y, marker='o')
シーグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
2つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
option: 文字列を区切り記号で使う	sep = s
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
データフレームの正規分布に対する左右対称性を求める	df.kurt()
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: ライトスレイグレー色を用いる	color = 'lightslategray'
折れ線グラフの上三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データ列は何時か見る	ds.dt.hour
横棒グラフをグリーンイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='greenyellow')
文字列を小文字に変換する	s.lower()
全要素を初期値で初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
option: バイオレット色を使う	color = 'violet'
最適な場所に凡例を表示する	plt.legend(loc='best')
新しい文字列でパターンにマッチした文字列を置き換える	re.sub(pattern, newsub, s)
一度にデータ列をValueMapで置換する	ds.replace(ValueMap)
文字列中にひとつでも非ASCII文字が含まれるか確認する	any(not c.isascii() for c in s)
文字列を最後の部分文字列で二分し、残りの文字列を使う	s.rpartition(sub)[-1]
リストの中の一番大きい値	max(aList)
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
2を底とする対数	math.log2(x)
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
カラムの標本標準偏差を計算する	ds.std()
データ列の度数分布図を描く	plt.hist(データ列)
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
ヒストグラムを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ファイルからベースファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
散布図の▼マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
変数が0に近づく場合、数式の極限値を求める	sympy.limit(e, z, 0)
散布図をダークターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
データ列の75パーセンタイル	ds.quantile(0.75)
データフレームのリストカラムの欠損値を直前の値に変更する	df[aList].fillna(method='ffill')
ライムグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
文字列が部分文字列で終わる	s.endswith(sub)
option: ダークサーモン色を使用する	color = 'darksalmon'
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
分子n、分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
辞書順で2つの文字列を比較する	s < s2
パステル調にカラーパレットをグラフの描画で使用する	sns.set(pallete='pastel')
関数でデータフレームをまとめたグループ	df.groupby(関数)
小数点数の常用対数	math.log10(x)
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの列が文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
データフレームをグループ化し各列に対し最小値を計算する	df.groupby(column)[column2].min()
データフレームを複数の列によって昇順に並べ、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
グレーにヒストグラムの色を変更する	plt.hist(データ列, color='grey')
モデルの残差を算出する	目的変数 - model.predict(説明変数)
オブジェクトがタプルクラスか調べる	isinstance(obj, tuple)
数を実数から減算する	x - y
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
現在が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
複数のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
二つの値をタブで区切って出力する	print(value, value2, sep='\t')
文字列が空白か調べる	s.isspace()
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
文字列が全て英字かどうか調べる	s.isalpha()
縦棒グラフを描画して、棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームをグループ化し、それぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ふたつの関係がスーパーセットもしくは等しい	aSet > aSet2
チョコレート色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: ラベンダーを使用する	color = 'lavender'
データフレームのリストカラムを千の位で四捨五入する	df[aList].round(-3)
線グラフの色をミディアムブルーにセットする	plt.plot(データ列x, データ列y, color='mediumblue')
部分文字列かどうか調べる	sub in s
データフレームをJSONLファイルにタブ区切りで書き込む	df.to_csv(filename, sep='\t')
横棒グラフを白色として描画する	plt.barh(データ列x, データ列y, color='white')
折れ線グラフの色を淡いピンク色に指定する	plt.plot(データ列x, データ列y, color='lightpink')
カラーコードで折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
直後の値でデータフレームの列のNaNを埋める	df[col].fillna(method='bfill')
option: ベージュ色を用いる	color = 'beige'
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
option: フォントの色をロイヤルブルーに設定する	color = 'royalblue'
ヒストグラムの色をディープスカイブルーに指定する	plt.hist(データ列, color='deepskyblue')
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
自然数個のものからk個取り出した時の並べ方の総数を計算する	math.perm(n, k)
カウンタをリストにする	list(aCounter)
辞書でカウンタを更新する	aCounter.update(aDict)
折れ線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
イテラブルとリストについての散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: コーンズシルクを使う	color = 'cornsilk'
カウンタ同士で∪演算する	aCounter | aCounter2
既存のファイルを追加できるように文字列の示す文字コードを用いてオープンする]	open(filepath, mode='a', encoding=s)
nが偶数	n % 2 == 0
option: オールドレースにグラフの色を設定する	color = 'oldlace'
文字列を最後の部分文字列を用いて二分割する	s.rpartition(sub)
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームを列名リストで並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
空白文字を全て使う	string.whitespace
実部と虚部から複素数を生成する	complex(x, y)
等差数列から整数乱数を求める	random.randrange(start, end, step)
フクシア色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
両端キューは空でないか調べる	len(deq) != 0
散布図をミッドナイトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
今日のローカルな日付時刻	datetime.datetime.today()
本日が日曜日か	datetime.datetime.today().weekday() == 6
二つの文字列をスラッシュで区切って表示する	print(value, value2, sep='/')
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
option: オレンジレッド色を用いる	color = 'orangered'
データフレームのカラムを散布図で可視化して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列を緑色で表示する	print(f'\033[32m{value}\033[0m')
文字列を両端キューのn番目に差し込む	deq.insert(n, element)
小数点数の逆双曲線正弦	math.asinh(x)
option: ネイビーを使う	color = 'navy'
列'A'と列'B'をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームのリスト列の欠損値をxにする	df[aList].fillna(x)
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgrey')
文字列をバイト列にする	bytes(s)
散布図を丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o')
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
既存のファイルパスを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
nが3の倍数かどうか調べる	n % 3 == 0
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
列名リストによってデータフレームを昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: 文字列を改行の代わりに用いる	end = s
折れ線グラフの色をグリーンイエローにする	plt.plot(データ列x, データ列y, color='greenyellow')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームのカラムを百の位で丸める	df[col].round(-2)
データフレームのカラムの欠損値を平均で補う	df[col].fillna(df[col].mean())
オブジェクトのオブジェクト識別子を使う	id(obj)
プロットのy軸を対数目盛に変更する	plt.yscale('log')
イテラブルを文字列リストに変換して、カンマによって連結する	','.join(map(str, iterable))
モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
縦棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
タプルをnから番号付けする	enumerate(aTuple, start=n)
データフレームのカラムを十の位で丸める	df[col].round(-1)
データフレームをCSVファイルとしてJSONLファイルに保存する	df.to_csv(filename)
縦棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
nを16進リテラルに変換する	hex(n)
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
マッピングから多重集合を作る	collections.Counter(aDict)
数列を箱ひげ図で描画する	plt.boxplot(データ列)
組をミュータブルにする	list(aTuple)
目盛線	plt.grid(linewidth=3.0)
列を両端キューに変換する	collections.deque(iterable)
青緑色で線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
半透明の一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
英字を使う	string.ascii_letters
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
カウンタからゼロカウントを取り出す	+aCounter
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: フォントの色をスプリンググリーンに設定する	color = 'springgreen'
折れ線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='palevioletred')
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
２つのオブジェクトが同じ参照か調べる	obj is obj2
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
カラムの空文字をドロップする	ds.replace('', np.nan).dropna()
タイムスタンプデータをISO8601形式の文字列に変換する	aDatetime.isoformat()
黄色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
option: フォントの色をアクアに指定する	color = 'aqua'
ふたつの集合に共通する要素からなる集合を計算する	aSet.intersection(aSet2)
複数行対応として事前にパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
option: ゴールドにグラフの色を設定する	color = 'gold'
新しい文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
折れ線グラフの▲マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
縦棒グラフをプロットし、、左寄せする	plt.bar(ラベル列, データ列, align='edge')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
ライトサーモン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をミディアムパープルに指定する	plt.hist(データ列, color='mediumpurple')
前の行の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
option: プラムを用いる	color = 'plum'
保存するCSVの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
行列を2次元1行に変形する	aArray.reshape(1, -1)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
データ列の未入力値を最小値に変更する	ds.fillna(ds.min())
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
線グラフの色をホワイトスモークにセットする	plt.plot(データ列x, データ列y, color='whitesmoke')
文字列の中で複数行対応として正規表現にマッチした文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
値が集合に含まれる	element in aSet
スペクトル分解を行う	model = sklearn.decomposition.PCA(n_components=n)
xが-9以上、9以下か判定する	-9 <= x <= 9
データフレームのカラムを散布図で見て、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
オプションで出力先を標準出力に設定する	file = sys.stdout
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
リストとイテラブルについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
自然数最小公倍数を算出する	math.lcm(n, n2)
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
タブ文字	'\t'
2つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームのリスト列の値を正規表現でまとめてreplに変更する	df[aList].replace(pattern, repl, regex=True)
散布図に大バツ印を加える	plt.scatter(データ列x, データ列y, marker='X')
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
dateStringを日付データに変換する	pd.to_datetime(dateString)
リストとリストの散布図を描画して、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データ列の各データが何回出現するか確認する	ds.value_counts()
データフレームから列を１つ選択する	df[[column]]
文字列リストにイテラブルを変換して、カンマで連結する	','.join(map(str, iterable))
折れ線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
２つの浮動小数点数がほぼ等しい	math.isclose(x, x2)
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
bとn2から成るペアを得る	(n, n2)
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
文字列リストを結合して一つの文字列にする	''.join(aStringList)
数式のパラメータを数式で置き換える	e.subs(z, e2)
タプルの最後	aTuple[-1]
イテラブルを文字列リストに変換して空白で連結する	' '.join(map(str, iterable))
xを整数にする	int(x)
プロットの描画で暗くカラーテーマを用いる	sns.set(pallete='dark')
グラフの横軸に説明を付ける	plt.xlabel('x軸ラベル')
文字列に日本語が使われているかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームの列の名前の一覧	df.columns
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
縦軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ふたつの辞書を結合する	aDict | aDict2
行列の行ごとの合計値	np.sum(aArray, axis=1)
点線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
散布図に黒いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='k')
ディレクトリをPythonパスに追加する	sys.path.append(dir)
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
文字列をタイムスタンプに変換する	pd.to_datetime(s)
データフレームのカラムの欠損値を最頻値に指定する	df[col].fillna(df[col].mode().iloc[0])
列とイテラブルをチェインする	itertools.chain(iterable, iterable2)
数値を数値計算する	float(e)
コーンズシルク色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ライトスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
カウンタからゼロカウントを削除する	+aCounter
日付時刻データは何分か知る	aDatetime.minute
整数nを符号なしでバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
nとn2の積を計算する	n * n2
データ列の散らばりを描画する	plt.scatter(データ列x, データ列y)
ヒストグラムをパールバイオレットレッド色として描画する	plt.hist(データ列, color='palevioletred')
列の各データが何回出現するか見る	df[col].value_counts()
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
オプションで、標準エラーを用いる	file = sys.stderr
ファイルを読み込む	pd.read_excel(filename)
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
文字列の開始位置より後に部分文字列が含まれるか判定する	s.find(sub, start) != -1
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
タプルの最初の値	aTuple[0]
データフレームのリスト列が正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
イテラブルを文字列リストに変換して、カンマでつなげる	','.join(map(str, iterable))
２変数の最小値	min(x, y)
暗い赤色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
青い点線で配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
等差数列から整数乱数を得る	random.randrange(start, end, step)
オブジェクトはタプルか調べる	isinstance(obj, tuple)
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
nにn2を加算する	n + n2
両端キューの末尾を使う	deq[-1]
小数点数の余弦の逆数	math.acos(x)
リストとリストを接続する	aList + aList2
アリスブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ブルーバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームをグループ化しそれぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
データフレームのカラムのタイムゾーンを文字列にセットする	df[col].tz_convert(s)
列の長さを制限する	collections.deque(iterable, maxlen=n)
リストと配列の散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
分類モデルの真陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームの中の列をn個に等量で分割する	pd.qcut(df[col], n)
実行結果を赤色化する	f'\033[31m{value}\033[0m'
色をパステル調にする	sns.set(pallete='pastel')
option: グリーンを使う	color = 'green'
線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
データ列の推移を青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
散布図の星印を赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
散布図の星マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
文字列内に大文字が含まれるか調べる	any(c.isupper() for c in s)
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
作画のグリッドを暗くする	sns.set(style='darkgrid')
組の中の最大値	max(aTuple)
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
カテゴリで色分けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
黄色にヒストグラムの色を変更する	plt.hist(データ列, color='yellow')
折れ線グラフをインディアンレッド色として描画する	plt.plot(データ列x, データ列y, color='indianred')
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
昨日の日付を見る	datetime.date.today() - datetime.timedelta(days=1)
nまでの奇整数リストを作る	list(range(1, n, 2))
線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ベクトルの全要素を指定の値にする	aArray[:, :] = 指定の値
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
折れ線グラフの四角印の色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
配列をリストを境界値として分割する	pd.cut(aArray, aList)
プロットを使う	import matplotlib.pyplot as plt
記号計算を使う	import sympy
データフレームのカラムの第二四分位数	df[col].median()
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
option: ピーチパフ色を用いる	color = 'peachpuff'
上限長nの両端キューをシーケンスから作る	collections.deque(iterable, maxlen=n)
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
ライトシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
本日が火曜日か	datetime.datetime.today().weekday() == 1
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
マッピングにキーがあるかどうか調べる	key not in aDict
線グラフをやわらかい青色を用いて描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図の大バツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームの中にある文字列の合計を求める	df.isin([value]).sum()
整数nがセットのいづれかか調べる	n in aSet
データ列の秒を見る	ds.dt.second
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
ガンマ関数の値を求める	math.gamma(x)
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
タイムスタンプデータにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
option: 青緑色を使う	color = 'turquoise'
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
文字列に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
真部分集合か確認する	aSet < aSet2
エクセルファイルファイルでJSONLファイルにデータフレームを保存する	df.to_excel(filename)
縦棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームの中の欠損値をドロップする	df.dropna()
データフレームを列毎にグループ化して、分散を求める	df.groupby(column).var()
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
散布図をマルーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='maroon')
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
文字コードtextで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
枠なしのデータラベルを入れる	plt.legend(frameon=False)
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
2つの文字列は同じか調べる	s == s2
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
列の長さnの順列	itertools.permutations(iterable, n)
ティールにヒストグラムの色を設定する	plt.hist(データ列, color='teal')
赤いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: フォントの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
折れ線グラフのダイアモンドマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
黒い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
二つの集合の和集合	aSet.union(aSet2)
二つの浮動小数点数は十分に近いか調べる	math.isclose(x, x2)
多次元データを特異値分解で淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
２つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
二つの実行結果をスラッシュで区切ってプリントする	print(value, value2, sep='/')
線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
異なる列をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
散布図をプラム色を用いて描画する	plt.scatter(データ列x, データ列y, color='plum')
ファイル名がTSVファイル	filename.endswith('.tsv')
昇順にデータフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
列のユニークな要素	ds.unique()
0からnまでの整数リスト	list(range(n+1))
散布図をシアン色として描画する	plt.scatter(データ列x, データ列y, color='cyan')
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
option: フォントの色を赤に設定する	color = 'red'
文字列を最後の部分文字列で二つに区切って、残りの文字列を使う	s.rpartition(sub)[-1]
データフレームの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
貝殻色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
option: フォントの色をスチールブルーに変更する	color = 'steelblue'
ダークオーキッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
カテゴリでグループ化してデータフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
データ列をビン数nを使ってビニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
破壊的に重複をデータフレームから削除する	df.drop_duplicates(inplace=True)
実数を浮動小数点数で除算した余り	x % y
列を用いてデータフレームを並べて更新する	df.sort_values(by=column, inplace=True)
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
パールバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ふたつの集合が集合と交わりを持たない	aSet.isdisjoint(aSet2)
チョコレート色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
ひとつでも空白が文字列内に含まれるかどうか調べる	any(c.isspace() for c in s)
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
二つの整数のGCD	math.gcd(n, n2)
回帰分析をRANSACで行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
グラフ中のフォントをセットする	sns.set(font=フォント名)
最大値と最小値を用いて正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームから型の列のみ選択する	df.select_dtypes(ty)
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
パラメータがマイナス無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, -oo)
option: ダーク・スラテグレーを用いる	color = 'darkslategrey'
整数nを二進数表現に変換する	bin(n)
数列とリストについて散布図を描画し、、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
タプルの中の最大値を求める	max(aTuple)
赤い左三角マーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
小数点数のハイパボリック・タンジェントの逆数	math.atanh(x)
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
棒グラフをブラック色を用いて描画する	plt.bar(データ列x, データ列y, color='black')
ライトグリーンにヒストグラムの色をする	plt.hist(データ列, color='lightgreen')
マッピングに要素をキーとして加える	aDict[key] = element
option: ダークカーキにグラフの色を変更する	color = 'darkkhaki'
散布図をライトスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
カラムが正規分布からどの程度尖っているか調べる	ds.skew()
折れ線グラフを青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
オブジェクトがバイト列型か調べる	isinstance(obj, bytes)
タプルの最後からn番目以前の部分を得る	aTuple[:-n]
折れ線グラフをディムグレー色を使って描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
双方向キュー中の文字列をカウントする	deq.count(element)
オリーブ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
商と余りを同時に求める	divmod(x, y)
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
小数点以下3桁までデータフレームをJSONLファイルに書き込む	df.to_csv(filename, float_format='%.3f')
分類結果の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
数列とイテラブルについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
シエナにヒストグラムの色を変更する	plt.hist(データ列, color='sienna')
データフレームのカラムが正規表現文字列にマッチしない行を取り出す	df[not df[column].str.match(s)]
集合＼セット	aSet.difference(aSet2)
日付データが木曜日か確認する	aDate.weekday() == 3
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
データフレームのリストカラムの未入力値を平均値に設定する	df[aList].fillna(df[aList].mean())
option: フォントの色をダークグレーに変更する	color = 'darkgray'
文字列の中でケースを無視してパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
クリムゾン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムをマゼンタ色を使って描画する	plt.hist(データ列, color='magenta')
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
符号なし８ビット整数型のゼロ埋めした配列	np.zeros(要素数, dtype=np.uint8)
データ列の未入力値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
二つの関係が真上位集合か調べる	aSet > aSet2
データから名前付きタプルをインスタンス化する	C._make(パラメータ)
ファイルを文字列の示すエンコーディングとして開く]	open(filepath, encoding=s)
option: オレンジを使う	color = 'orange'
データを四分位点としてスケーリングする	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図に青い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
黄緑色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図でデータフレームを可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
ファイルからの読み込みストリームを使う	open(filepath)
ヒストグラムの色を赤にする	plt.hist(データ列, color='red')
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
データフレームのカラムを並べて箱ヒゲ図にする	plt.boxplot([df['カラム'], df['カラム']])
実数を万の位で四捨五入する	round(x, -4)
データフレームを列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
データフレームを昇順に列によって整列する	df.sort_values(by=column, ascending=True)
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
データフレームから指定された４列を抽出する	df[[column, column2, column3, column4]]
データフレームの欠損値を前の行の値で補う	df.fillna(method='ffill')
分類モデルを学習する	model.fit(説明変数, 目的変数)
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
ファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
縦軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
データフレームを表示するとき、小数点以下をn桁に設定する	pd.set_option('precision', n)
option: シルバー色を用いる	color = 'silver'
データフレームの列の名前一覧で指定された列をドロップする	df.drop(columns, axis=1)
散布図の▽印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの指定された2つの列を抽出する	df[[column, column2]]
option: ダークターコイズに色を設定する	color = 'darkturquoise'
分数モジュールをインポートする	import fractions
ダークサーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
既存のファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
変数をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
option: 読むシートの名前をnamesに設定する	sheet_name = names
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
カンマで区切って２つの変数をプリントする	print(value, value2, sep=',')
文字列はリストの要素か調べる	element in aList
リストとリストについての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
option: エンコーディングを文字列の示す文字コードに変更する	encoding = s
文字列が片仮名かどうか調べる	('ァ' <= ch <= 'ン')
下位集合	aSet.issubset(aSet2)
ストリームからnバイト読み込む	f.read(n)
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
三つ並べてデータ列を柱状グラフにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームのリストカラムの最頻値を求める	df[aList].mode()
データフレームを列毎にグループ分けしてそれぞれのグループごとの分散を算出する	df.groupby(column).var()
データフレームの中に存在する文字列と日付データの合計を数える	df.isin([value, value2]).sum()
ポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.')
データフレームのインデックスの名前をまとめてnameからname2に付け直す	df.rename(index={name: name2})
nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームのリスト列の空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
option: ライトシアンにグラフの色をする	color = 'lightcyan'
散布図をゴーストホワイト色として描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
折れ線グラフをライトシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcyan')
MSEを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
マップのキーの一覧を得る	aDict.keys()
列をn個に等間隔で分割する	pd.cut(ds, n)
文字列は全て数値	s.isnumeric()
データフレームを昇順に複数の列で並べる	df.sort_values(by=column, ascending=True)
折れ線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
空のタプルを作る	()
ブースティングとしてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データフレームの第一四分位数を求める	df.quantile(0.25)
データフレームの列の中に文字列と文字列がいくつあるか求める	df[col].isin([value, value2]).sum()
データフレームのグループの標準偏差	df.groupby(column).std()
シーケンスの各要素を関数でフィルタする	filter(func, iterable)
ライトスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightskyblue')
散布図をライトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightblue')
オレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームから数値データの列のみ選択する	df.select_dtypes('number')
二つのベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ヒストグラムをミディアムスレートブルー色を用いて描画する	plt.hist(データ列, color='mediumslateblue')
クラス分類の正確さを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
折れ線グラフに上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
散布図を貝殻色を用いて描画する	plt.scatter(データ列x, データ列y, color='seashell')
折れ線グラフの色を黄緑に設定する	plt.plot(データ列x, データ列y, color='chartreuse')
option: 青紫を使う	color = 'violet'
列を文字列として一つにする	''.join(map(str, iterable))
JSONLファイルにタブ区切りでデータフレームを保存する	df.to_csv(filename, sep='\t')
3変数の最も小さい値	min(x, y, z)
三つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
散布図の色をダークレッドにする	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの二つのカラムを並べて箱ひげ図として図示する	plt.boxplot([df['カラム'], df['カラム']])
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
データ列の中の未入力値の合計を数える	ds.isna().sum()
赤い実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データ列が何日か確認する	ds.dt.day
小数点数の仮数を求める	math.frexp(x)[0]
新しい文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
ゴーストホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
今日が金曜日か調べる	datetime.datetime.today().weekday() == 4
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
回帰分析をロバスト推定として行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
散布図をダイアモンド印を用いる描画する	plt.scatter(データ列x, データ列y, marker='D')
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
リストのn番目の値を削除する	del aList[n]
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
グリーンイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
リストの全ての値をクリアにする	aList.clear()
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
option: マーカーの色を変える	markerfacecolor = '#800080'
データフレームは正規分布からどれだけ、歪んでいるか確認する	df.kurt()
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
文字列をカンマによって分割し、列挙する	s.split(',')
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
データ列の一意な値を見る	ds.unique()
データフレームのリスト列の欠損値をxで補う	df[aList].fillna(x)
文字列を中央寄せする	s.center(文字列幅)
n個にリストを分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
データ列が正規分布か調べる	scipy.stats.shapiro(データ列)
ライトイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
option: 先頭のカラムをインデックスに変更する	index_col = 0
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
文字列は平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
配列とイテラブルについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: 箱ひげ図に平均を追記する	showmeans = False
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
出現頻度を作図する	plt.hist(データ列)
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
データフレームの各グループごとの合計	df.groupby(column).sum()
データフレームを各列と列の組み合わせ毎にグループ分けして分散を算出する	df.groupby([column, column2], as_index=False).var()
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
組の中の一番大きい値を算出する	max(aTuple)
タイムスタンプデータにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
nを十六進文字列に変換する	hex(n)[2:]
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
option: アクアマリン色を使用する	color = 'aquamarine'
option: 三角マーカーを用いる	marker = '^'
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
実数の双曲線余弦を求める	math.cosh(x)
線グラフを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
配列とリストの散布図をプロットしてマーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
ベクトルのユニークな値を要素とする配列を見る	np.unique(aArray)
option: フクシアを使う	color = 'fuchsia'
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
配列と配列について散布図を描いて、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
文字列がタプルの要素かどうか	element in aTuple
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
ライトイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
文字列リストをつなげる	''.join(aStringList)
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: ダークブルー色を使う	color = 'darkblue'
データフレームの中の列をn個に等しい量になるようにビン分割する	pd.qcut(df[col], n)
リストを下線付きでプリントする	print(f'\033[4m{value}\033[0m')
グラフの中の日本語表示を利用可能にする	sns.set(font='IPAexGothic')
文字列はリストの要素でないか	element not in aList
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
データフレームのカラムの標準偏差を求める	df[col].std()
散布図に青い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
列によってデータフレームを集約して、最大値を求める	df.groupby(column).max()
文字列を黒色で表示する	print(f'\033[30m{value}\033[0m')
折れ線グラフの右三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームのリスト列の欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
option: ダークゴールデンロッドを用いる	color = 'darkgoldenrod'
青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
散布図をバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='violet')
option: データ型としてブール型を使う	dtype = np.int32
平均と分散としてデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
リストとリストについての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ファイルパスをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
列をキーとして２つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
リストの最初の要素	aList[0]
文字列が英数字	s.isalnum()
ブースティングとして回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
データフレームの中に文字列と文字列が存在するかテストする	df.isin([value, value2])
ダークシアグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkseagreen')
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
xが一桁の正の数	0 <= x <= 9
ヒストグラムをダークゴールデンロッド色として描画する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムをナバホホワイト色として描画する	plt.hist(データ列, color='navajowhite')
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
データ列がどの程度、分散しているか確認する	ds.var()
option: ライトスカイブルーに色を設定する	color = 'lightskyblue'
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
プロットを画像ファイルとして保存する	plt.savefig('foo.png')
縦棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
日付をインポートする	import datetime
データフレームのリストカラムが正規分布からどれだけ、尖っているか確認する	df[aList].skew()
リストと配列についての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
が名前付きタプルか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームを列を用いてソートして、上の方を取り出す	df.sort_values(columns).head(n)
実数が無限大か判定する	math.isinf(x)
キーがマッピングに存在し、いるか調べる	key in aDict
列をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ダークグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
BOM付きとしてファイルをオープンする]	open(filepath, encoding='utf_8_sig')
リストをシャッフルする	random.shuffle(aList)
文字列を全て小文字にする	s.casefold()
改行文字を使う	'\n'
列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
option: ブルーバイオレットを使う	color = 'blueviolet'
日付時刻データの月	aDatetime.month
文字列が部分文字列で終わるか判定する	s.endswith(sub)
データフレームをグループ化し列に対し個数を求める	df.groupby(column)[column2].count()
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
赤い一点鎖線として数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
箱髭図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
黄色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
ハニーデュー色を使ってヒストグラムを描画する	plt.hist(データ列, color='honeydew')
ライトコーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データ列の推移を色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームのリスト列の分散	df[aList].var()
デックの要素を右にn個分回転させる	deq.rotate(n)
日付時刻データが水曜日	aDatetime.weekday() == 2
数式の変数の解を方程式として算出する	sympy.solve(e, z)
横棒グラフをサンディーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームのカラムのNaNを直前の値に設定する	df[col].fillna(method='ffill')
PandasでUNIX秒のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
日付データが金曜日か	aDate.weekday() == 4
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
グリッドの線スタイルを点線に変更する	plt.grid(linestyle='dotted')
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームの中の列をn個にビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をロイヤルブルーに変更する	color = 'royalblue'
整数nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
真部分集合	aSet < aSet2
紺色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: サドルブラウン色を用いる	color = 'saddlebrown'
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
ライトゴールドロディイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
seabornのデフォルトスタイルを適用する	sns.set()
散布図を黒い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
グラフに水平方向の点線をつける	plt.axhline(y=0, linestyle='dotted')
ファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
ファイルからエクセルファイルを読み込む	pd.read_excel(filename)
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ヒストグラムの色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
ハイパボリック・コサインの逆数	math.acosh(x)
option: 複素数型を使用する	dtype = bool
リストに要素を追加する	aList.append(element)
イエローグリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategrey')
浮動小数点数を十六進表記の文字列に変換する	x.hex()
行列の累積積	np.cumprod(aArray)
データ列を等量でn個に分割する	pd.qcut(ds, n)
データフレームの列を柱状図にする	plt.hist(df[column])
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
既存のファイルを追加できるように文字コードtextを用いてオープンする]	open(filepath, mode='a', encoding=text)
option: 書き込みモードに変更する	mode = 'w'
option: ハニーデューを使う	color = 'honeydew'
グリーンイエローにヒストグラムの色を設定する	plt.hist(データ列, color='greenyellow')
文字列全体を正規表現に大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
JSONLファイルに形式でデータフレームを保存する	df.to_excel(filename)
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームのリストカラムが正規分布からどの程度歪んでいるか見る	df[aList].kurt()
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データ列と数列について散布図を描いてマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
2つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
線グラフを色付きの一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームの列がx以上の行を取り出す	df[df[column] >= x]
rgbのダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのn行目を消す	df.drop(n, axis=0)
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
タプルの項目名の値を参照する	aDict[key]
数式の微分を算出する	sympy.diff(e)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
小数点数のコサインの逆数	math.acos(x)
集合が空	len(aSet) == 0
回数を制限して文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub, n)
リストの各値を関数に適用した結果で並べる	sorted(aList, key=func)
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
マッピングに別のマッピングの項目を更新する	aDict.update(aDict2)
データフレームの列をドロップして入れ替える	df.drop(column, axis=1, inplace=True)
データ列を2つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
データ列の欠損値を平均に設定する	ds.fillna(ds.mean())
折れ線グラフを半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
nが負の整数か調べる	n < 0
データフレームの列をヒストグラムを用いて描画する	plt.hist(df[column])
浮動小数点数に実数をかける	x * y
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
破壊的にデータフレームのn行目をドロップする	df.drop(n, axis=0, inplace=True)
線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
キューの上限長	deq.maxlen
印字可能な文字を全部求める	string.printable
rgbの丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
year年month月day日の日付をオブジェクト化する	datetime.date(year=year, month=month, day=day)
等量でn個にデータ列をビン分割する	pd.qcut(ds, n)
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ダーク・スラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ディープスカイブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
疑似乱数平均値と標準偏差からを発生させる	random.normalvariate(mu=0.5, sigma=0.2)
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategray')
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
イテラブルとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
辞書を複製する	aDict.copy()
各列毎にデータフレームをグループ化し、、列の個数を算出する	df.groupby(column)[column2].count()
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
データフレームを列の値によってグループ化し、基本統計量を算出する	df.groupby(column).describe()
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
option: グラフの色をライトコーラルに変更する	color = 'lightcoral'
K-S検定を行う	scipy.stats.kstest(データ列, 'norm')
折れ線グラフをドジャーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームの各グループごとの平均値	df.groupby(column).mean()
xでデータ列の欠損値を置換する	ds.fillna(x)
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
リストを分割数nでビニングする	pd.cut(aList, n)
イテラブルからカウンタを新規生成する	collections.Counter(iterable)
カウンタの要素一覧を見る	aCounter.keys()
項目名が辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
データフレームを複数の列によって並べ直す	df.sort_values(by=column)
小数点数の仮数を算出する	math.frexp(x)[0]
タプルを両端キューに変換する	collections.deque(iterable)
kを底とする対数	math.log(x, k)
散布図の上三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
破壊的に重複を表データから削除する	df.drop_duplicates(inplace=True)
データフレームのそれぞれのグループ毎の個数を算出する	df.groupby(column).count()
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
xが真かどうか調べる	bool(x)
配列とリストの散布図に凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
オブジェクトがリスト	isinstance(obj, list)
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='grey')
option: スラグレーにフォントの色を設定する	color = 'slategrey'
option: ハニーデューにグラフの色を設定する	color = 'honeydew'
欠損値も加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
モカシン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームを配列にする	df.values
文字列を最初の部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
データフレームを複数の列で大きい順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
オプションで標準エラーを出力先にする	file = sys.stderr
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
データフレームの列が文字列で終わる行を取り出す	df[df[column].str.endswith(s)]
データ列を縦棒プロットにする	plt.bar(ラベル列, データ列)
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
データフレームを２つの列の値でまとめたグループ	df.groupby(['A', 'B'])
青い一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
辞書の全項目を空にする	aDict.clear()
option: 行を連番に設定する	index_col = None
異なる列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: プラムにグラフの色を設定する	color = 'plum'
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
グラフで用いる縦軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
option: 色をダークスラテグレーに指定する	color = 'darkslategray'
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
ヒートマップで混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
nがn2より大きいかどうか調べる	n > n2
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
ポスター用にグラフを設定する	sns.set(context='poster')
折れ線グラフの▽マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
横棒グラフをやわらかい青色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
option: マーカーをポイントに変える	marker = '.'
ファイルパスの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
値を黄色で表示する	print(f'\033[33m{value}\033[0m')
データフレームがどの程度、分散しているか確認する	df.var()
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
option: ミディアムブルーを使う	color = 'mediumblue'
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
折れ線グラフの色を暗い赤に指定する	plt.plot(データ列x, データ列y, color='darkred')
データフレームから重複したデータを残さず削除する	df.drop_duplicates(keep=False)
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
エラーなく集合から要素を除去する	aSet.discard(element)
現在は何時か知る	datetime.date.today().hour
２つのデータフレームを横方向にマージする	pd.merge(df, df2)
データフレームのグループ毎の合計	df.groupby(column).sum()
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
散布図をrgbの左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
グリーンイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
nの各桁の和	sum(map(int, str(n)))
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
1行から２つの整数を読む	A, B = map(int, input().split())
バイナリ書き込みできるようにファイルをオープンする]	open(filepath, mode='wb')
各列毎にデータフレームをグループ化して列の分散を計算する	df.groupby(column)[column2].var()
CSVファイルファイル名がか調べる	filename.endswith('.csv')
ヒストグラムをライトスレイグレー色を使って描画する	plt.hist(データ列, color='lightslategray')
アクア色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
勾配ブースティング回帰木を準備する	model = sklearn.ensemble.GradientBoostingRegressor()
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
列のコンビネーション	itertools.combinations(iterable, n)
リストの合計	sum(aList)
実行結果を太字化する	f'\033[1m{value}\033[0m'
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: 線の種類を点線に指定する	linestyle = 'dotted'
外れ値に強い線形分類モデルを準備する	model = sklearn.linear_model.HuberClassifier()
行列の行ごとの最大を計算する	np.max(aArray, axis=1)
棒グラフをダークレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
ナバホホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
変数を緑色で出力する	print(f'\033[32m{value}\033[0m')
整数nをn2分の１にする	n //= n2
棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
タプルをリストにする	list(aTuple)
ヒストグラムを黄色色として描画する	plt.hist(データ列, color='yellow')
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
タイムスタンプデータが金曜日かどうか調べる	aDatetime.weekday() == 4
TSVファイルからSJISでCSVを読み込む	pd.read_csv(filename, encoding='shift_jis')
文字列を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
option: ミッドナイトブルーにグラフの色を変更する	color = 'midnightblue'
SJISでTSVファイルを読む	pd.read_csv(filename, encoding='shift_jis')
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
柱状グラフを描画し、、区間数を設定する	plt.hist(データ列, bins=区関数)
８ビット整数型のゼロ埋めされた行列を作る	np.zeros(要素数, dtype=np.int8)
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
配列の列ごとの最大	np.max(aArray, axis=0)
２次元リストをフラット化する	sum(aList)
数式の平方根を計算する	sympy.sqrt(e)
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
数列とリストについて散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: シエナ色を用いる	color = 'sienna'
日付時刻データが日曜日か	aDatetime.weekday() == 6
折れ線プロットを描画して、色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
データフレームのカラムを丸めて整数型にする	df[col].round().astype(int)
整数乱数の配列	np.random.randint(開始値, 終了値, N)
数が負の数かどうか調べる	x < 0
多次元データを主成分分析として濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
OSのエンディアンを知る	sys.byteorder
option: インディゴにグラフの色を指定する	color = 'indigo'
データ列の文字列長を列として求める	ds.str.len()
option: マーカーを三角に設定する	marker = '^'
データ列のNaNをメディアンで埋める	ds.fillna(ds.median())
自然数の並べ方の総数	math.perm(n)
散布図をダークシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
option: グラフの色を青緑に設定する	color = 'turquoise'
折れ線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
日付時刻データが日付時刻データより後ろかどうか	aDatetime > aDatetime2
データ列のNaNを直後の値で埋める	ds.fillna(method='bfill')
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
ヒストグラムの色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
データフレームの列の値がxでない行を消す	df[df[column] == x]
が名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
データフレームを降順に列によってで並べ直す	df.sort_values(by=column, ascending=False)
データ列の曜日が何日目か調べる	ds.dt.dayofweek
データフレームで列に重複があるか見る	df.duplicated(subset=column)
入力ストリームを一行ずつ読み込む	f.readline()
option: 線の幅を3.0ポイントにセットする	linewidth = 3.0
組合せ	math.comb(n, k)
Pandasで、文字列のUNIX秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
nからn2の値を引いてnとする	n -= n2
ひとつでも非大文字が文字列中に含まれる	any(not c.isupper() for c in s)
データフレームの中の未入力値がある行を削除する	df.dropna()
配列の変遷を実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
文字列を改行で区切り、文字列リストにする	s.splitlines()
ヒストグラムを一点鎖線を用いて描画する	plt.hist(データ列, linestyle='dashbot')
双曲線正弦の逆数	math.asinh(x)
読み込みモードでファイルを開く]	open(filepath, mode='r')
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
折れ線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
データ列の中に文字列と文字列がいくつ含まれるか数える	ds.isin([value, value2]).sum()
実数を実数で割って切り捨てる	x // y
二つのデータフレームを列'A'と列'B'をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
要素は集合のメンバーに含まれないか調べる	element not in aSet
実行時の標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
nが無限に続くリスト	itertools.repeat(n)
データフレームのカラムの最頻値を求める	df[col].mode()
逆余弦	math.acos(x)
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
散布図の右三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
オーキッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
折れ線グラフをハニーデュー色を用いて描画する	plt.plot(データ列x, データ列y, color='honeydew')
最大値として正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
二つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
ミディアムオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
文字列内にひとつでも空白があるかどうか調べる	any(c.isspace() for c in s)
レベッカパープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ベクトルの和を求める	aArray + aArray2
半透明の実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
ホットピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
'A'列によってデータフレームをまとめたグループ	df.groupby('A')
カテゴリで色分けして、に箱ひげ図でデータフレームをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ファイルパスがないか	not os.path.exists(filepath)
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
等量でデータ列をビン数nを使ってビン分割する	pd.qcut(ds, n)
回帰分析をガウス過程を用いてする	model = sklearn.gaussian_process.GaussianProcessRegressor()
代数計算モジュールを使う	import sympy
大バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
カテゴリで色分けしてにバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
カラムの欠損値を後の行の値に設定する	ds.fillna(method='bfill')
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
散布図を右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
白色で線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
イテラブルを変更不能な集合にする	frozenset(iterable)
淡いピンク色色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightpink')
データフレームを関数によってまとめた表	df.groupby(関数)
データフレームをグループ化し列に対し平均値を計算する	df.groupby(column)[column2].mean()
データフレームを列によってグループ分けする	df.groupby(column)
ダークオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
option: マーカーの色をティールにする	markerfacecolor = 'teal'
コマンド引数のリスト	sys.argv[1:]
option: フォントの色を青に設定する	color = 'blue'
部分文字列を文字列の終了位置まで探す	s.find(sub, 0, end)
option: グラフの種類を一点鎖線に指定する	linestyle = 'dashbot'
データフレームのカラムのどの値が最も現れるか見る	df[col].mode()
折れ線グラフの色をデピンクに指定する	plt.plot(データ列x, データ列y, color='deeppink')
リストを白色にする	f'\033[37m{value}\033[0m'
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
折れ線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
データフレームの各グループごとの分散	df.groupby(column).var()
十六進数字を全部見る	string.hexdigits
グラフの色を淡くする	sns.set(pallete='muted')
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフの▼印の線幅を変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
単位行列を作る	np.eye(行数, 列数)
数値の簡単化を行う	sympy.sympify(e)
辞書からキーの値か、もしくは要素を参照する	aDict.get(key, element)
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
イテラブルを文字列に変換して、タブによって結合する	'\t'.join(map(str, iterable))
option: データ型を指定する	dtype = np.uint8
行列の列ごとの最大	np.max(aArray, axis=0)
データフレームのカラムを型にする	df[col] = df[col].astype(ty)
タプルの先頭を捨てる	aTuple[1:]
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: グラフの色をサーモンに指定する	color = 'salmon'
文字列を部分文字列で分割したときの前半の文字列	s.partition(sub)[0]
数式の積分を算出する	sympy.integrate(e)
ローングリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
文字列の最初から空白を取り除く	s.lstrip()
データフレームの中で、列に重複があるか確認する	df.duplicated(subset=column)
折れ線グラフに丸マーカーを加える	plt.plot(データ列x, データ列y, marker='o')
文字列中にひとつでも非ASCII文字が含まれる	any(not c.isascii() for c in s)
ビスク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
配列とリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
改行で区切って2つの文字列をプリントする	print(value, value2, sep='\n')
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
青いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
グローバル変数の一覧を使う	globals()
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
2進文字列を整数に変換する	int(s, 2)
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
文字列の接頭辞が部分文字列かどうかテストする	s.startswith(sub)
実数の小数点以下を四捨五入する	round(x)
データフレームのリストカラムの中に含まれる文字列の合計を求める	df[aList].isin([value]).sum()
散布図に青い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
指定した値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
行列の列ごとの分散を求める	np.var(aArray, axis=0)
グラフの色を全般的に暗くする	sns.set(pallete='dark')
ヒストグラムの色をパウダーブルーにセットする	plt.hist(データ列, color='powderblue')
文字列の開始位置から終了位置の範囲で部分文字列の出現回数をカウントする	s.count(sub, start, end)
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
散布図をナバホホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
ヒストグラムの区間を変更する	plt.hist(データ列, range=(start, end))
線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
行列を転置する	aArray.T
データフレームを複数の列によってまとめたグループを使う	df.groupby(columns)
option: カーキにグラフの色を設定する	color = 'khaki'
カラムの中に文字列と文字列があるか調べる	ds.isin([value, value2])
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
折れ線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
option: スノーを用いる	color = 'snow'
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
カラムでデータフレームを集約して、それぞれのグループごとの件数を知る	df.groupby(column).size()
option: ミディアムパープル色を用いる	color = 'mediumpurple'
星マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
シーグリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
多次元データをt-SNEを用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: ドジャーブルーにグラフの色を変更する	color = 'dodgerblue'
データフレームのそれぞれのグループ毎の個数	df.groupby(column).count()
文字列をシンボルにして、パラメータにする	z = sympy.Symbol(s)
option: 色を青に変更する	color = 'blue'
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームのリスト列の正規分布に対する上下広がり	df[aList].skew()
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのリストカラムがどの程度分散しているか確認する	df[aList].var()
option: シアンを用いる	color = 'cyan'
ベクトルの各要素の積	np.multiply(aArray, aArray2)
シーケンスにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
柱状図を二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームを表示するとき、表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
アクア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
異なる列をキーとして二つのデータフレームを全ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームを複数の列を用いてによって破壊的に並べる	df.sort_values(by=column, inplace=True)
データフレームのリストカラムのNaNを中央値に設定する	df[aList].fillna(df[aList].median())
破壊的にデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
集合にタプルの要素を全て追加する	aSet.update(iterable)
黒い左三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列の左側	s[0]
値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
option: ライトイエローを用いる	color = 'lightyellow'
配列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
モジュールとして自分自身を	sys.modules[__name__]
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
折れ線グラフの三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
配列と配列について散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
第二コマンド引数を知る	sys.argv[1]
Pandasでエポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
等量でビン数nを使って配列をビン分割する	pd.qcut(aArray, n)
n進文字列をバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
ゴーストホワイト色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
標準入力から改行なしに1行だけ読む	sys.stdin.readline().rstrip()
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
ブランチドアーモンド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
整数に実数を加える	x + y
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ライトスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
データ列の母標準偏差を求める	ds.std(ddof=0)
線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストを逆さにする	reversed(aList)
散布図の大バツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
nがn2以下か	n <= n2
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
ミディアムシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
線グラフをターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
イテラブルの長さnの順列を得る	itertools.permutations(iterable, n)
グラフのサイズをする	plt.figure(figsize=(横幅, 高さ))
範囲指定してデータフレームの行を抽出する	df[start:end]
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
赤い実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ヒストグラムと勾配ブースティングを用いてクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
平均値付きボックスチャートを描画する	plt.boxplot(データ列, showmeans=True)
データフレームのリスト列を丸めて整数にする	df[aList].round().astype(int)
ヒストグラムの描き、、正規化する	plt.hist(データ列, density=True)
シーケンスを配列に変換する	np.array(iterable)
データフレームの列の欠損値を最大値に設定する	df[col].fillna(df[col].max())
y座標の目盛りを対数に変更する	plt.yscale('log')
線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
散布図の星印を黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
カウンタを列で更新する	aCounter.update(iterable)
option: フォントの色を貝殻に設定する	color = 'seashell'
リストから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
双方向キューのn番目に値を挿入する	deq.insert(n, element)
ダークターコイズにヒストグラムの色をする	plt.hist(データ列, color='darkturquoise')
実数とyのノルム	math.hypot(x, y)
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
y軸の目盛りを対数に変更する	plt.yscale('log')
データフレームの列の値がxより小さい行を抽出する	df[df[column] < x]
データフレームのリスト列を四捨五入して、整数型にする	df[aList].round().astype(int)
行列間の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
データフレームの中にいくつ文字列があるか求める	df.isin([value]).sum()
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
データフレームを複数の列によって並べて、更新する	df.sort_values(by=column, inplace=True)
文字列は漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
散布図をプラム色を使って描画する	plt.scatter(データ列x, データ列y, color='plum')
散布図を赤い大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームを各列毎に集約して列の分散を求める	df.groupby(column)[column2].var()
文字列はタイトル大文字小文字	s.istitle()
リストの各要素を関数に適用した結果で並べ変える	sorted(aList, key=func)
小文字を大文字にする	s.upper()
データ列と配列について散布図を描画し、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
データフレームのリスト列の中に文字列があるか調べる	df[aList].isin([value])
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
両端キューの末尾にタプルの各要素を入れる	deq.extend(iterable)
線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
双方向キューの要素を右にn個分ローテンションする	deq.rotate(n)
リストの散らばりを作図する	plt.scatter(データ列x, データ列y)
option: 色をダークグリーンに指定する	color = 'darkgreen'
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームのリスト列を丸める	df[aList].round()
タイムスタンプデータの年数	aDatetime.year
option: 色をオレンジレッドに設定する	color = 'orangered'
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: ライトサーモン色を用いる	color = 'lightsalmon'
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
出現頻度を図示する	plt.hist(データ列)
文字列を空白で分割して整数リストに変換する	map(int, s.split())
option: フォントの色を暗い赤に設定する	color = 'darkred'
year年を日付にする	datetime.date(year=year, month=1, day=1)
リストの中の一番小さい値	min(aList)
部分文字列を文字列の先頭から取り除く	s.removeprefix(sub)
データフレームを百の位で丸める	df.round(-2)
データ列の出現頻度を描画する	plt.hist(データ列)
ヒストグラムでカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ラインを赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
全要素を０で初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
nからn2を減算する	n - n2
文字列が文字列リストのいづれか確認する	s in aStringList
日付データが日曜日かどうか調べる	aDate.weekday() == 6
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
配列を箱髭図を用いて描く	plt.boxplot(データ列)
option: カンマをセパレータで用いる	sep = ','
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
日付時刻データがタイムスタンプデータと同時	aDatetime == aDatetime2
列を2回あわせた直積を求める	itertools.product(iterable, repeat=2)
イエローグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
nをn2で割った余りをnにする	n %= n2
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
プロットの使途を論文に設定する	sns.set(context='paper')
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データフレームのリスト列の欠損値をxに変更する	df[aList].fillna(x)
配列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ミディアムスプリンググリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
カテゴリで色分けしてデータフレームをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
青い線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
ヒストグラムをダークカーキ色として描画する	plt.hist(データ列, color='darkkhaki')
横棒グラフをオレンジレッド色として描画する	plt.barh(データ列x, データ列y, color='orangered')
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
リストと配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
データ列が正規分布からどれだけ、尖っているか見る	ds.skew()
キューの末尾から要素を取り除く	deq.pop()
n個の整数列を得る	list(range(n))
多次元データを主成分分析を用いて濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
カウンタの要素をリストとして得る	aCounter.keys()
青い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
三自然数のGCD	math.gcd(n, n2, n3)
selectorsでマスクした列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
空のガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
数列とイテラブルについて散布図を描画して、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
行列をシーケンスから作る	np.array(iterable)
等間隔でn個にデータフレームの中の列をビン分割する	pd.cut(df[col], n)
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
異なる列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームを'A'列によってソートし、、更新する	df.sort_values(by='A', inplace=True)
タイムスタンプデータからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
データ列の欠損値を最小値に指定する	ds.fillna(ds.min())
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームに重複があるか調べる	df.duplicated()
ラベンダーブラッシュ色としてヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
列によってデータフレームを小さい順に並べる	df.sort_values(by=column, ascending=True)
ヒストグラムの色をパパイヤウィップに指定する	plt.hist(データ列, color='papayawhip')
散布図の丸マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
散布図を黒いバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='k')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: パウダーブルーにグラフの色を変更する	color = 'powderblue'
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図をミディアムバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
JSONファイルのファイルを読み込んで、dataとする	data = json.load(fin)
エクセルファイルファイルからnとn2のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
縦棒グラフをダークシアン色として描画する	plt.bar(データ列x, データ列y, color='darkcyan')
イテラブルから双方向キューを作成する	collections.deque(iterable)
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
オブジェクトをイテレータに変換する	iter(obj)
データフレームを列でソートする	df.sort_values(by=column)
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: レモンシフォンを使う	color = 'lemonchiffon'
散布図をスプリンググリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='springgreen')
option: ダークグリーンを使う	color = 'darkgreen'
横棒グラフの色を濃いシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
ファイルをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
縦棒グラフを描く	plt.bar(ラベル列, データ列)
option: グラフの色をスカイブルーにセットする	color = 'skyblue'
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
縦棒グラフをダークスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ヒストグラムをライトコーラル色として描画する	plt.hist(データ列, color='lightcoral')
nがn2よりも大きい	n > n2
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームのn行まで取り出す	df[:n]
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
データフレームから指定されたデータ型の列名一覧を求める	df.select_dtypes(型).columns
データ列の中にいくつ文字列が含まれるか数える	ds.isin([value]).sum()
シアンで変数を出力する	print(f'\033[36m{value}\033[0m')
▼印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
双方向キューの順序を左にn個分ローテンションする	deq.rotate(-n)
データフレームのカラムの値をまとめて正規表現patternで置き換える	df[col].replace(pattern, repl, regex=True)
折れ線グラフの下三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの中のカラムを四分位数ごとにビニングする	pd.qcut(df[col], 4)
二つの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
破壊的にデータフレームを昇順に二つの列でソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
リストと配列の散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
右三角印を用いるデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ネイビー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
2つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
散布図のバツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームを列によってソートし、、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
一点鎖線を使って数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
色付きの破線として線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
範囲から行列	np.linspace(最小値, 最大値, 要素数)
タイムスタンプデータは何分か知る	aDatetime.minute
x軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
データフレームを各グループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの色をタンに変更する	plt.plot(データ列x, データ列y, color='tan')
データフレームを二つの列でソートする	df.sort_values(by=['A', 'B'])
ファイルパスを開き]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームを各列と列の組み合わせ毎に集計して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
ペアリストpairsからカウンタを用意する	collections.Counter(dict(pairs))
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
option: 改行コードをUNIXに指定する	newline = '\n'
各列毎にデータフレームをグループ化して列の最大値を計算する	df.groupby(column)[column2].max()
option: ゲインズボロを用いる	color = 'gainsboro'
配列とリストについての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
組をソートする	sorted(aTuple)
回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
グラフに使うフォントを指定する	sns.set(font=フォント名)
プログラムをエラーとして停止する	sys.exit(1)
割合付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
数列とリストについての散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
イテラブルのコンビネーションを計算する	itertools.combinations(iterable, n)
文字列中から部分文字列を見つける	s.find(sub)
バリーウッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
実数の正接の逆数を求める	math.atan(x)
ダークターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: 色のアルファを設定する	alpha = 0.5
スクリプトファイルのパスを使う	os.path.abspath(__file__)
散布図の△マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームのリストカラムがどの程度分散しているか見る	df[aList].var()
部分文字列が文字列中に含まれるか調べる	sub in s
作画の背景色を暗くする	sns.set(style='darkgrid')
ベクトルの行列積	np.matmul(aArray, aArray2)
kを底とする実数の対数を求める	math.log(x, k)
データフレームのリストカラムの空文字をNaNに変換し、ドロップする	df[aList].replace('', np.nan).dropna()
配列と配列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
配列とリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: カラムの名前をnamesに設定する	header = names
辞書の項目名を要素に設定する	aDict[key] = element
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
option: アイボリーにグラフの色を変更する	color = 'ivory'
円グラフの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
nが配列のひとつであるかどうか	n in aArray
空白で文字列を最後から分割する	s.rsplit()
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムをサンディーブラウン色を用いて描画する	plt.hist(データ列, color='sandybrown')
文字列の末尾から部分文字列を取り除く	s.rstrip(sub)
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
線グラフの色を小麦色に変更する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
データフレームのリスト列の欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
ファイルからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
折れ線グラフの色をスカイブルーにする	plt.plot(データ列x, データ列y, color='skyblue')
データフレームを各列毎に分類して、文字列という名前のグループを使う	df.groupby(column).get_group(s)
半透明の実線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
要素はタプルの値に含まれていない	element not in aDict.values()
Pandasでデータ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
散布図をrgbの下三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ビスク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
列とイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
値がセットのメンバーでないか調べる	element not in aSet
変数を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
複数の列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby(columns).describe()
データフレームを二つの列で昇順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
データフレームのデータ型一覧を使う	df.dtypes
表データの列を文字列にリネームする	df.rename(columns={column: name})
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
option: 追加モードを用いる	mode = 'a'
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データ列を四捨五入して、整数にする	ds.round().astype(int)
ロバスト回帰モデルを新規作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データ列を用いる	import pandas as pd
グラフの描画で色差別なくカラーパレットを用いる	sns.set(pallete='colorblind')
折れ線グラフをパールゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームのカラムが何秒か調べる	df[col].dt.second
追加できるように文字列の示すエンコーディングで既存のファイルパスを開く]	open(filepath, mode='a', encoding=s)
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
文字列の開始位置と終了位置の間に部分文字列が存在するか調べる	s.find(sub, start, end) != -1
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
分割数nでデータ列をビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
半透明の点線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
TSV形式でデータフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
イテラブルから双方向キューを作る	collections.deque(iterable)
リストとリストについての散布図に▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
横棒グラフをオールドレース色を使って描画する	plt.barh(データ列x, データ列y, color='oldlace')
データフレームのNaNを最小値で埋める	df.fillna(df.min())
アンティークホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='antiquewhite')
勾配ブースティングとして回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
option: 丸印を使う	marker = 'o'
色付きの破線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
青い破線を用いてラインを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムを点線を使ってプロットする	plt.hist(データ列, linestyle='dotted')
色付きの点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
等間隔のベクトルを作る＼	np.arange(開始値, 終了値, 等差)
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
文字列の無限列	itertools.repeat(element)
列の各データは何回出現するか見る	ds.value_counts()
option: 色をライトイエローに設定する	color = 'lightyellow'
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
文字列の開始位置以降が部分文字列で開始するか調べる	s.startswith(sub, start)
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
ライム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
赤い四角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
プロットのグリッドを白くする	sns.set(style='whitegrid')
確率的勾配降下を用いてクラス分類をする	model = sklearn.linear_model.SGDClassifier()
日付時刻データは何時か知る	aDatetime.hour
配列とデータ列の散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
赤いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
色付きの一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
配列とリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
双方向キューから値を削除する	deq.remove(element)
折れ線グラフの色をグリーンにセットする	plt.plot(データ列x, データ列y, color='green')
四角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['A'].value_counts().sort_index().index
現在のUNIX時間	int(time.time())
散布図の星マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
二つのリストからマップ	dict(zip(aList, aList2))
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
option: 色をダークマゼンタに設定する	color = 'darkmagenta'
８ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int8)
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
浮動小数点数の正接を計算する	math.tan(x)
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
nが3の倍数か確認する	n % 3 == 0
グラフのテーマを全般的に淡くする	sns.set(pallete='muted')
分類モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
列名を指定された名前リストに置き換える	df.columns = columns
折れ線グラフの色を珊瑚にセットする	plt.plot(データ列x, データ列y, color='coral')
横軸だけ目盛り線	plt.grid(axis='x')
データフレームのリストカラムの欠損値を最大値に増やす	df[aList].fillna(df[aList].max())
option: カーキにフォントの色をセットする	color = 'khaki'
rgbの四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
実線でヒストグラムを描く	plt.hist(データ列, linestyle='solid')
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームの欠損値を後の行の値に指定する	df.fillna(method='bfill')
option: フォントの色をホワイトスモークに設定する	color = 'whitesmoke'
淡いピンク色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
データフレームをグループ化し、各列に対し最大値を求める	df.groupby(column)[column2].max()
option: ピーチパフにグラフの色を変更する	color = 'peachpuff'
ベクトルの平均値	np.mean(aArray)
データフレームを列によって並べ直す	df.sort_values(by=column)
黒いポイントマーカーを配列とデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
コーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームを列の値によってグループ化し、平均値を求める	df.groupby(column).mean()
整数nがタプルのひとつか調べる	n in aTuple
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
ヒストグラムの線の種類を点線に変更する	plt.hist(データ列, linestyle='dotted')
ライム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
データフレームを'A'列で並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
折れ線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
真紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
マルーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
数列とリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
xとyの商と余りを同時に算出する	divmod(x, y)
x,y,zをそれぞれn,n2,n3に指定する	x, y, z = n, n2, n3
option: グラフの色をコーンズシルクに変更する	color = 'cornsilk'
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
実線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームから型リストで指定されたデータ型のカラムのみ除外する	df.select_dtypes(exclude=typeList)
インディアンレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
MSEを算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
文字列の出力を改行しないで行う	print(value, end='')
ファイルパスが存在するか調べる	os.path.exists(filepath)
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
色付きの一点鎖線でリストの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
カラムを100の位で四捨五入する	ds.round(-2)
オブジェクトは辞書型のインスタンス	isinstance(obj, dict)
データフレームが正規分布からどれだけ、歪んでいるか見る	df.kurt()
棒グラフをゴーストホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
をモジュールを検索するパスに追加する	sys.path.append(dir)
カウンタ間で積集合	aCounter & aCounter2
データ列の離れ具合をプロット化する	sns.residplot(x=データ列, y=データ列)
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームのリスト列の相関行列ピアソン相関係数で	df[aList].corr(method='pearson')
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
xが一桁の数	-9 <= x <= 9
データフレームから指定された三つの列を取り出す	df[[column, column2, column3]]
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
カラムを1000の位で丸める	ds.round(-3)
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
多次元データをt-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: グラフの色をペルーに変更する	color = 'peru'
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
リストのn番目を削除する	del aList[n]
option: グラフの色をダークシアンに指定する	color = 'darkcyan'
文字列の末尾から空白を取り除く	s.rstrip()
データフレームのカラムのNaNを最小値で埋める	df[col].fillna(df[col].min())
ネイビー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
option: 紺碧を使用する	color = 'azure'
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
列のそれぞれを関数でフィルタする	map(func, iterable)
データフレームのリストカラムの未入力値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのリストカラムの中にいくつ欠損値があるか求める	df[aList].isna().sum()
数式を簡略化する	sympy.sympify(e)
2つのカウンタのいずれかに含まれる値	aCounter | aCounter2
縦棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
xでデータフレームのカラムの欠損値を埋める	df[col].fillna(x)
タプルの値を列挙する	aDict.values()
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
双方向キュー中の数値のインデックス	deq.index(element)
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
見やすいグラフを描画する準備をする	import seaborn as sns
値が集合に含まれないかどうか調べる	element not in aSet
データフレームのリストカラムの中にあるの個数を数える	df[aList].isin([value]).sum()
タプル内の要素は全て真かどうか	all(aTuple)
デフォルトでグラフをいい感じに設定する	sns.set()
縦棒グラフをグレー色を使って描画する	plt.bar(データ列x, データ列y, color='grey')
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
nがn2と等しい	n == n2
日付データにn日を加える	aDate + datetime.timedelta(days=n)
ゼロ埋めされた複素数型の配列を作成する	np.zeros(要素数, dtype=bool)
整数nの二進数文字列	bin(n)[2:]
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
option: 改行コードをWindowsにセットする	newline = '\r\n'
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
Pandasで、データフレームのカラムをPandasの日付型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
列をカウントして、カウンタを更新する	aCounter.update(iterable)
キーがマッピング上で既に定義されているか調べる	key in aDict
線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
option: ポイント印を描画する	marker = '.'
NULLに等しい値	None
データフレームのリスト列の各列間の相関係数	df[aList].corr()
集合から別の集合との共通要素を除去する	aSet.symmetric_difference_update(aSet2)
文字列の終了位置以前に部分文字列が含まれないかテストする	s.find(sub, 0, end) == -1
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
実数の値が整数か調べる	x.is_integer()
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
タプルをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームの中で列と列の重複を見る	df.duplicated(subset=[column, column2])
データフレームの歪度を計算する	df.kurt()
棒グラフをライトコーラル色を使って描画する	plt.bar(データ列x, データ列y, color='lightcoral')
カウンタの文字列を増やす	aCounter[element] += 1
配列とリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
列を中央値でビニングする	pd.qcut(ds, 2)
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
０で全要素を初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームの内で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
nとn2のXORを算出する	n ^ n2
option: グラフの線の種類を破線に設定する	linestyle = 'dashed'
折れ線グラフを半透明の実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列を右寄せする	s.rjust(文字列幅)
縦棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームのNaNを前の行の値に設定する	df.fillna(method='ffill')
横棒プロットを描き、、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
最大値でデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
ヒストグラムをシルバー色を用いて描画する	plt.hist(データ列, color='silver')
実数の符号を同じにする	math.copysign(x, x2)
折れ線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
option: フォントの色をダークグリーンに設定する	color = 'darkgreen'
部分文字列で文字列が終わるかどうか調べる	s.endswith(sub)
データフレームの中のカラムを四分位数でビン分割する	pd.qcut(df[col], 4)
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
黒い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
こんにちは世界とプリントする	print('Hello World')
日付時刻データの時刻を使う	aDatetime.time()
ダークスレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: namesを列の名前に設定する	names = names
ミディアムパープル色としてヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
カウンタのユニークな項目をリストとして得る	list(aCounter)
赤い菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
リストの先頭を除く	aList[1:]
option: ライトスカイブルーを使用する	color = 'lightskyblue'
イテラブルとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
棒グラフをダーク・スラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
オプションでファイルを出力にする	file = sys.open(filename, 'w')
タプルの要素を昇順に並べる	sorted(aTuple, reverse=False)
柱状グラフでデータ列を可視化する	plt.hist(データ列)
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
オブジェクトは論理値クラスかどうか確認する	isinstance(obj, bool)
シーケンスをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
option: フォントの色をコーラルに設定する	color = 'coral'
データフレームのn行目より後ろ抽出する	df[n:]
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
文字列中に非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムをスプリンググリーン色を用いて描画する	plt.hist(データ列, color='springgreen')
実数を千の位で四捨五入する	round(x, -3)
option: 色をサンディーブラウンに設定する	color = 'sandybrown'
棒グラフをティール色として描画する	plt.bar(データ列x, データ列y, color='teal')
からデータフレームを読む	pd.read_excel(filename)
タプル内の要素が少なくともひとつ真	any(aTuple)
配列と数列について散布図をプロットして三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
カテゴリで色分けしてカーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
現在をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
グラフの色を暗くする	sns.set(pallete='dark')
クラス分類の適合率と再現率の調和平均を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
数値を部分分数に展開する	sympy.apart(e)
カラムの未入力値を中央値に変更する	ds.fillna(ds.median())
option: シーグリーンを使う	color = 'seagreen'
タプルの項目名を要素に設定する	aDict[key] = element
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
イテラブルとデータ列について散布図を描いて、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
プロットのy軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
ブランチドアーモンド色としてヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データ列の中にある文字列の合計をカウントする	ds.isin([value]).sum()
辞書のキーに対応した値を見る	aDict.get(key)
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
空行を出力する	print()
リストをn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
行列の行を選択する	aArray[行番号]
文字列の開始位置以降に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
昇順にデータフレームを列によってソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
四分位数ごとにデータ列をビン分割する	pd.qcut(ds, 4)
データフレームを表示するとき列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームの列を十の位で丸める	df[col].round(-1)
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームを2つの列の値によってグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
option: ライトグリーン色を使用する	color = 'lightgreen'
実数を小数点で丸める	round(x, n)
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ミントクリーム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: 印を大バツに変える	marker = 'X'
文字列が文字列リストにあるかどうか確認する	s in aStringList
赤い破線としてイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームを列でで降順に並べる	df.sort_values(by=column, ascending=False)
データフレームを各列毎にグループ化し、文字列というグループを求める	df.groupby(column).get_group(s)
option: スラグレーを使う	color = 'slategray'
option: グラフの色を淡い茶色に設定する	color = 'tan'
棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
リストとリストについて散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: フォントの色を小麦色に設定する	color = 'wheat'
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
散布図をライトイエロー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
文字列を下線付きで表示する	print(f'\033[4m{value}\033[0m')
マップに辞書の項目を加えて、更新する	aDict.update(aDict2)
マゼンタにヒストグラムの色を指定する	plt.hist(データ列, color='magenta')
データ列の推移を一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
横棒グラフを淡いピンク色色として描画する	plt.barh(データ列x, データ列y, color='lightpink')
データフレームの中の未入力値がある行を落とす	df.dropna()
赤い実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
nが2で割り切れるか	n % 2 == 0
赤いバツマーカーを数列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
二つの変数を改行しないでプリントする	print(value, value2, end='')
文字列をマゼンタで表示できる文字列にする	f'\033[35m{value}\033[0m'
線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
列でデータフレームをグループ化して、列の要約統計量を算出する	df.groupby(column).describe()[column2]
ファイルパスを開いて]バイナリストリームを使う	open(filepath, mode='rb')
散布図をベージュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='beige')
文字列を空白で区切って整数リストに変換する	map(int, s.split())
アイボリー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
option: グラフの色をやわらかい青に変更する	color = 'cornflowerblue'
列でデータフレームを集約して、列の要約統計量を算出する	df.groupby(column).describe()[column2]
タプルの値をソートする	sorted(aTuple)
option: マーカーの線幅を変える	markeredgewidth = 2.5
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
パールバイオレットレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: ダークカーキを使う	color = 'darkkhaki'
３つのデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
ベクトルの行	aArray[行番号]
データフレームを列の値ごとにグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
nまでの偶整数列を得る	list(range(2, n, 2))
パーセプトロンとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: ペールグリーン色を使用する	color = 'palegreen'
黒い右三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
リストの全値をクリアにする	aList.clear()
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
文字列の最初だけ大文字化する	s.capitalize()
option: 印を右三角に指定する	marker = '>'
グラフの横軸の名称を変更する	plt.xlabel('x軸ラベル')
ヒストグラムをグレー色を使って描画する	plt.hist(データ列, color='grey')
本日の曜日を使う	datetime.datetime.today().weekday()
値をスタックの先頭から取り除く	deq.popleft()
最大値でデータフレームの欠損値を補う	df.fillna(df.max())
option: グラフの色をライムに変更する	color = 'lime'
散布図にrgbのクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
行列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ガウス過程を用いて回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
リストをn個にビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの列のユニークな要素	df[col].unique()
円プロットにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの重複する行数を数える	df.duplicated().sum()
線グラフの色を暗い赤に指定する	plt.plot(データ列x, データ列y, color='darkred')
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
カウンタの項目を、その回数だけ列挙する	aCounter.elements()
両端キューをタプルにする	tuple(deq)
小数点数のsinの逆数を求める	math.asin(x)
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
リストの最後から要素を得る	aList.pop()
列のユニークな値の個数	df[col].nunique()
option: 三二ビット整数型を用いる	dtype = np.int16
データフレームから最後のカラムを除く	df[df.columns[:-1]]
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
縦棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データ列の欠損値を前の値に設定する	ds.fillna(method='ffill')
カウンタからリストを出現回数して引く	aCounter.subtract(iterable)
データフレームを表示するとき表示可能な最大行数をnに変更する	pd.set_option('display.max_rows', n)
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
文字列の開始位置番目と終了位置番目の間に部分文字列がないかどうか調べる	s.find(sub, start, end) == -1
重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストとリストの散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図に黒いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
ラジアンの角度を求める	math.degrees(x)
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
データフレームのカラムの中に文字列と文字列があるか	df[col].isin([value, value2])
データ列の中にいくつがあるか数える	ds.isin([value]).sum()
多次元データを特異値分解で濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
列'A'と列'B'をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
nとn2のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
スクリプトの名前を調べる	sys.argv[0]
タプルの値数	len(aDict)
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
ヒストグラムの色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
菱形印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
０で全要素を初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
nをn2で割った値の切り上げ	(n + n2 - 1) // n2
データフレームの列の欠損値をxに設定する	df[col].fillna(x)
ふたつの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
データフレームを表示するとき、表示可能な列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
SJISとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
2次元リストの転置行列	[list(x) for x in list(zip(*aList))]
折れ線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームの欠損値を前の行の値に設定する	df.fillna(method='ffill')
青い一点鎖線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
散布図のバツ印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
複数の列でによってデータフレームを大きい順にソートする	df.sort_values(by=column, ascending=False)
option: 白を使う	color = 'white'
option: オーキッドを使う	color = 'orchid'
数を実数に足す	x + y
リストと数列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
列名を指定した名前リストに置き換える	df.columns = columns
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
二つのデータフレームを列をキーにして内部結合する	pd.merge(df, df2, on=column, how='inner')
リストの先頭の値を使う	aList[0]
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
リストと配列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線プロットとしてデータフレームの列を描画する	plt.plot(df[column], df[column])
option: グラフの色を小麦色にする	color = 'wheat'
option: ダークオーキッド色を用いる	color = 'darkorchid'
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
最大値・最小値の範囲で一様な疑似乱数を得る	random.uniform(最小値, 最大値)
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
nが一桁の数かどうか判定する	-9 <= n <= 9
文字列を最後の部分文字列で分けたときの先頭の文字列	s.rpartition(sub)[0]
折れ線グラフの▼印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
散布図に▼マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
スノー色を用いてヒストグラムを描画する	plt.hist(データ列, color='snow')
箱ひげ図でデータ列を作図する	plt.boxplot(データ列)
二つのデータフレームを横にマージする	pd.merge(df, df2)
集合から別の集合の要素を取り除く	aSet.difference_update(aSet2)
散布図のダイアモンド印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
ゼロ埋めされた行列を作る	np.zeros(行数, 列数)
青色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
クラス分類の感度を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームのカラムの曜日を求める	df[col].dt.weekday_name
両端キューの値を右にn個分ローテンションする	deq.rotate(n)
option: デピンク色を用いる	color = 'deeppink'
JSONファイルファイル名が	filename.endswith('.json')
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームのリスト列の未入力値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
N未満までの配列	np.arange(N)
リストを引数として展開して出力する	print(*aList, sep=',')
線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
標準エラー	sys.stderr
散布図に△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
散布図のマーカーを▲印にする	plt.scatter(データ列x, データ列y, marker='^')
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
散布図に赤いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
降順にデータフレームを複数の列を用いてによって並べる	df.sort_values(by=column, ascending=False)
データフレームから重複する行を残さず、削除する	df.drop_duplicates(keep=False)
アイボリー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
ピアソンとしてデータフレームのリストカラムの相関行列	df[aList].corr(method='pearson')
floatの最小値を算出する	sys.float_info.min
option: フォントの色をナバホホワイトに変更する	color = 'navajowhite'
配列の行ごとの最小値	np.min(aArray, axis=1)
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
折れ線グラフをラベンダー色を用いて描画する	plt.plot(データ列x, データ列y, color='lavender')
データフレームのリストカラムの中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
option: パープルにグラフの色を設定する	color = 'purple'
項目名が辞書上で未定義か調べる	key not in aDict
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ヒストグラムをビンを設定して描画する	plt.hist(データ列, bins=区関数)
nを8進リテラルにする	oct(n)
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
シーケンスの重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
標準エラー	sys.stderr
折れ線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
平均値でデータフレームのリストカラムのNaNを補う	df[aList].fillna(df[aList].mean())
数列と数列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: グラフの色をミントクリームにセットする	color = 'mintcream'
option: オーキッドを用いる	color = 'orchid'
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
棒グラフをマルーン色を用いて描画する	plt.bar(データ列x, データ列y, color='maroon')
ライトゴールドロディイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
シスル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームのカラムが何年か調べる	df[col].dt.year
縦棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
option: グラフの色をホットピンクに指定する	color = 'hotpink'
データフレームを確認する	df.head()
二つの列の値でデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
リストを青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
スカイブルーにヒストグラムの色をセットする	plt.hist(データ列, color='skyblue')
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データフレームのリストカラムの中にいくつ文字列が存在するか数える	df[aList].isin([value]).sum()
目盛り線	plt.grid(color='#800080')
n足すn2	n + n2
ネイビーにヒストグラムの色を変更する	plt.hist(データ列, color='navy')
小数点数はNaNか	math.isnan(x)
黒い菱形マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
t-SNEで多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
2つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
組の長さを見る	len(aTuple)
データフレームを列によってグループ化して、最大値を求める	df.groupby(column).max()
nがn2よりも小さいかどうか調べる	n < n2
実数の３乗を計算する	x ** 3
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
縦棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ダークオレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
nの桁数を計算する	len(str(n))
カウンタからイテラブルを出現回数して引く	aCounter.subtract(iterable)
データフレームの列はどれだけ、分散しているか見る	df[col].var()
改行で区切って二つの値をプリントする	print(value, value2, sep='\n')
イテラブルを文字列リストに変換して、部分文字列で結合する	sub.join(map(str, iterable))
タイムスタンプデータが日付時刻データより後ろ	aDatetime > aDatetime2
イテラブルをセットに変換する	set(iterable)
列の中にいくつ欠損値があるか数える	ds.isna().sum()
折れ線グラフの色をダークグレーにセットする	plt.plot(データ列x, データ列y, color='darkgray')
リストと数列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームを列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを２つの列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
nがn2の倍数	n % n2 == 0
オールドレース色としてヒストグラムを描画する	plt.hist(データ列, color='oldlace')
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
散布図を星マーカーで描く	plt.plot(データ列x, データ列y, marker='*')
入力から２つの浮動小数数値を読む	A, B = map(float, input().split())
ダーク・スラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: ダークグレーに色を設定する	color = 'darkgrey'
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
文字列を区切りで区切り、、列挙する	s.split(sep)
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ブラウン色でヒストグラムを描画する	plt.hist(データ列, color='brown')
キーが辞書に存在するか確認する	key not in aDict
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
変数を黒色にする	f'\033[30m{value}\033[0m'
折れ線グラフに黒い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをダークオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkorange')
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
日付時刻データが火曜日か確認する	aDatetime.weekday() == 1
データフレームを'A'列によってまとめた表	df.groupby('A')
ポイント印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
カウンタの最頻出の項目	aCounter.most_common()[0]
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
文字列はタイトルケースか確認する	s.istitle()
文字列の右端からタブを取り除く	s.rstrip('\t')
グラフの中の縦軸に名前をつける	plt.ylabel('y軸ラベル')
filepathに現在の作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
辞書の項目数を得る	len(aDict)
文字列がASCII文字か	s.isascii()
option: ダークシアンを使う	color = 'darkcyan'
データフレームのカラムが何年か確認する	df[col].dt.year
ヒストグラムの線種を点線に設定する	plt.hist(データ列, linestyle='dotted')
option: ダークバイオレットを用いる	color = 'darkviolet'
多次元データを特異値分解としてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
日付時刻データは何月か知る	aDatetime.month
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
コーンズシルク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
nの3乗	n ** 3
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
データ列の推移を折れ線グラフで作図する	plt.plot(range(len(データ列)), データ列)
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
日付時刻データが木曜日かどうかテストする	aDatetime.weekday() == 3
浮動小数点数のn乗	pow(x, n)
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ふたつの集合の∩	aSet.intersection(aSet2)
インデックスによってデータフレームをソートする	df.sort_index()
タイムスタンプデータにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
option: データ型として複素数型を使う	dtype = bool
列をビン数nを用いてビニングする	pd.cut(ds, n)
散布図の▲マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
日付データの月数を使う	aDate.month
行列の全要素の値を変更する	aArray[:, :] = 指定の値
データフレームはどの程度、分散しているか見る	df.var()
数式を部分分数として展開する	sympy.apart(e)
配列をn個に等しい量になるようにビン分割する	pd.qcut(aArray, n)
ミディアムスプリンググリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
散布図に赤い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
1行から２つの文字列を読む	A, B = map(str, input().split())
データフレームを'A'列と'B'列によって大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
文字列の右側からタブを除去する	s.rstrip('\t')
リストの末尾のn要素を除く	aList[:-n]
ベクトルの標準偏差	np.std(aArray)
データフレームのリスト列の未入力値を最大値で埋める	df[aList].fillna(df[aList].max())
option: ロージーブラウン色を用いる	color = 'rosybrown'
イテラブルのセット	set(iterable)
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t')
'A'列と'B'列によってデータフレームを昇順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
リストとリストについて散布図を描画し、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームを'A'列の値にグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
２つの変数をそれぞれ定義する	x, y = i, j
空白文字を全て見る	string.whitespace
option: フォントの色をシャルトリューズに設定する	color = 'chartreuse'
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
黒い△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
行列の行ごとの平均を調べる	np.mean(aArray, axis=1)
数列とリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 大バツマーカーを使用する	marker = 'X'
文字列が全て印字できるか調べる	s.isprintable()
横棒グラフをクリムゾン色として描画する	plt.barh(データ列x, データ列y, color='crimson')
option: スカイブルーを用いる	color = 'skyblue'
縦棒プロットを描画してラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
線グラフの色を淡いピンク色に指定する	plt.plot(データ列x, データ列y, color='lightpink')
二つの数値を改行しなくて表示する	print(value, value2, end='')
プロットを正方形にする	plt.axis('equals')
エクセルデータファイルから全シートを読み込む	pd.read_excel(filename, sheet_name=None)
作画の縦横比を等しくする	plt.axis('equals')
集合に列を追加更新する	aSet.update(iterable)
赤いポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
最大長を指定して、スタック	collections.deque(maxlen=n)
ファイルからnバイト、読み込む	f.read(n)
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
散布図をオールドレース色を用いて描画する	plt.scatter(データ列x, データ列y, color='oldlace')
列を多重集合にする	collections.Counter(iterable)
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
0からnまでの整数列を作る	list(range(n+1))
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
リストを下線付きにする	f'\033[4m{value}\033[0m'
リストとリストの散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの列をインプレイスで削除する	df.drop(column, axis=1, inplace=True)
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
パールバイオレットレッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
シードを初期化する	random.seed()
リストを番号付けする	enumerate(aList)
nがn2以下、もしくはn3以上か調べる	n <= n2 or n >= n3
シスル色としてヒストグラムを描画する	plt.hist(データ列, color='thistle')
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
ペルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データ列のヒストグラムを描く	plt.hist(データ列)
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
表示する最大行数をnに設定する	pd.set_option('display.max_rows', n)
折れ線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
マップをコピーする	aDict.copy()
再帰が何回までできるかを	sys.getrecursionlimit()
option: マーカーの大きさを変える	markersize = 2.0
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフをグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='green')
ディレクトリ	os.getcwd()
option: 星マーカーを加える	marker = '*'
range関数の無限バージョン	itertools.count(start=n, step=step)
折れ線グラフの星マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
正則化付き回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
縦棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: どのカラムもインデックスにしない	index_col = None

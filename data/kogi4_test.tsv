横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgrey')
横に並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
option: グラフの色をサーモンに変更する	color = 'salmon'
散布図の大バツマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
改行なしにリストをプリントする	print(value, end='')
Pandasでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col])
リストと配列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームをグループ化し各列に対し標準偏差を計算する	df.groupby(column)[column2].std()
青い破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ミディアムシアグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
各列毎にデータフレームをグループ分けして、列の合計を求める	df.groupby(column)[column2].sum()
文字列の示すエンコーディングで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding=s)
自然対数	math.log(x)
イテラブルと数列について散布図をプロットし、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
リストとリストの散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
半透明の点線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ライトグリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームの列の値がxより大きくx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
半透明の破線として数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストの先頭の要素	aList[0]
線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
整数nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
列を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
option: グラフの種類を点線に指定する	linestyle = 'dotted'
option: ダークレッドにフォントの色を設定する	color = 'darkred'
赤い左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
赤い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
実数が整数かどうか調べる	x.is_integer()
カテゴリでグループ化してカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列が全て数値かどうか調べる	s.isnumeric()
文字列がアスキー文字かどうか確認する	s.isascii()
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
配列と数列の散布図を描画して、マーカーを▽に変更する	plt.plot(データ列x, データ列y, marker='v')
option: シスルに色を設定する	color = 'thistle'
折れ線グラフをポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.')
カウンタの最も頻出な項目	aCounter.most_common()[0]
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
両端キューの最大長を求める	deq.maxlen
option: スレートブルーにグラフの色を設定する	color = 'slateblue'
NaNも加えて表の列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
組の値を逆順にする	aTuple[::-1]
バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
リストから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
データフレームからランダムにn行を選択する	df.sample(n)
t分布型確率的近傍埋め込み法で淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームから重複を残さず、消す	df.drop_duplicates(keep=False)
option: 印をクロスに変更する	marker = 'x'
sin	math.sin(x)
一点鎖線にヒストグラムの線種を設定する	plt.hist(データ列, linestyle='dashbot')
赤い点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
リストと数列についての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
実行時の標準出力の出力先がターミナルか	sys.stdout.isatty()
組内の要素は少なくともひとつ真	any(aTuple)
リストとリストについての散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をライムにセットする	plt.plot(データ列x, データ列y, color='lime')
整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
データフレームの数値をまとめて整数に丸める	df.round()
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
散布図に▲印を使用する	plt.scatter(データ列x, データ列y, marker='^')
浮動小数点数の絶対値	math.fabs(x)
option: フォントの色をオールドレースにセットする	color = 'oldlace'
双方向キューをポップする	deq.pop()
散布図に黒い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
イテラブルとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
サドルブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
バイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
タプルの最初を見る	aTuple[0]
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
今日の月を使う	datetime.datetime.today().month
rgbの三角マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのリスト列の中の欠損値の数を数える	df[aList].isna().sum()
無限にnから数え上げるする	itertools.count(start=n)
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
散布図に大バツ印を加える	plt.scatter(データ列x, データ列y, marker='X')
カラムは正規分布からどの程度歪んでいるか見る	ds.kurt()
棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
文字列を最後の部分文字列で分けた時の後半の文字列	s.rpartition(sub)[-1]
ヒストグラムの色をゴールデンロッドに指定する	plt.hist(データ列, color='goldenrod')
option: オリーブ色を使用する	color = 'olive'
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
nが無限に続く数列を求める	itertools.repeat(n)
option: ダークサーモンを用いる	color = 'darksalmon'
データフレームの列を100の位で丸める	df[col].round(-2)
折れ線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
クラスのサブ型かどうか	issubclass(サブクラス, クラス)
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
Pandasで文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームの中の列を分割する	pd.cut(df[col], aList)
分類モデルのアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
シスル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
nがn2未満もしくはn3以上	n < n2 or n >= n3
散布図を上三角印を用いる描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
リストと配列について散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
変数名を項目名として、辞書	dict(name=element)
ディープスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
折れ線グラフを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列の終了位置より前に部分文字列が含まれる	s.find(sub, 0, end) != -1
散布図の▽マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
棒グラフをターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='turquoise')
重複した行を破壊的にデータフレームから削除する	df.drop_duplicates(inplace=True)
折れ線グラフの色をパウダーブルーにする	plt.plot(データ列x, データ列y, color='powderblue')
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
データ列の中央値を求める	ds.median()
option: ライムグリーンに色を設定する	color = 'limegreen'
表の先頭n行を見る	df.head(n)
文字列が全て英数字かどうか	s.isalnum()
破壊的にデータフレームの列をドロップする	df.drop(column, axis=1, inplace=True)
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
逆双曲線正弦	math.asinh(x)
日付データが木曜日か	aDate.weekday() == 3
列を累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
イテラブルの組み合せ	itertools.combinations(iterable, n)
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
Pandasで、文字列をフォーマットfmtでdatetime64型に変換する	pd.to_datetime(s, format=fmt)
教師データとして回帰モデルを学習する	model.fit(説明変数, 目的変数)
データ列の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
標準出力をフラッシュする	sys.stdout.flush()
ファイルが存在しない	not os.path.exists(filepath)
ライムグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='limegreen')
線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
変数を白色でプリントする	print(f'\033[37m{value}\033[0m')
散布図をダイアモンドマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの最後の列以外を説明変数にする	説明変数 = df[df.columns[:-1]]
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
複数のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
ファイルパスをオープンして]、追加ストリームを使う	open(filepath, mode='a')
ビン数nで配列をビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列中の部分文字列の登場回数	s.count(sub)
赤いバツマーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: ホワイトにグラフの色をする	color = 'white'
データ列を整数に丸める	ds.round()
プロットを淡くする	sns.set(pallete='muted')
線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
線グラフを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
浮動小数点数の双曲線余弦	math.cosh(x)
データ列の折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: バイオレットにグラフの色を変更する	color = 'violet'
棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
濃いシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
option: 色をピーチパフに設定する	color = 'peachpuff'
option: フォントの色をミディアムオーキッドに設定する	color = 'mediumorchid'
文字列はリストに含まれる	element in aList
文字列がn回続くイテラブル	itertools.repeat(element, n)
文字列中にひとつでも非アスキー文字が含まれるかどうか調べる	any(not c.isascii() for c in s)
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
rgbの丸マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをアクア色を用いて描画する	plt.barh(データ列x, データ列y, color='aqua')
y座標の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
散布図に赤いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
右に双方向キューの値をn個分ローテンションする	deq.rotate(n)
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
列を文字列に変換してつなげる	''.join(map(str, iterable))
nとn2のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
プロットにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフの色をクリムゾンにセットする	plt.plot(データ列x, データ列y, color='crimson')
列の名前の一覧を求める	df.columns
データ列とデータ列についての散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
二つのデータフレームを異なる列をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
実数のタンジェントの逆数	math.atan(x)
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
部分文字列が文字列の終了位置より前に含まれないか調べる	s.find(sub, 0, end) == -1
nが一桁の数かどうか確認する	0 <= n <= 9
PandasでUNIX時間の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
散布図のダイアモンド印を赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
赤い左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: フォントの色をドジャーブルーに設定する	color = 'dodgerblue'
連番の配列の作成する	np.arange(開始値, 終了値, 等差)
ファイルからファイル名を取り出す	os.path.basename(filepath)
スピアマン相関係数を用いてデータフレームの相関行列	df.corr(method='spearman')
option: フォントの色をマゼンタに設定する	color = 'magenta'
コマンドラインフラグの状態を調べる	sys.flags
線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
ファイルをSJISとして書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
option: 淡い茶色を使う	color = 'tan'
リストを太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
小数点数が無限大か調べる	math.isinf(x)
データフレームのカラムの月を使う	df[col].dt.month
が名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
標準出力を用いる	sys.stdout
option: タンにグラフの色を変更する	color = 'tan'
混同行列をヒートマップとして確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
配列と配列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
横棒グラフをダークスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
折れ線グラフの色をライトサーモンに変更する	plt.plot(データ列x, データ列y, color='lightsalmon')
ポイントマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
散布図を下三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='v')
データを最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: グラフの色をクリムゾンに指定する	color = 'crimson'
線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
xでデータフレームのカラムの欠損値を埋める	df[col].fillna(x)
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
ファイルを改行除外して一行ずつ読み込む	f.readline()
数列のパーセンタイルを作図する	plt.boxplot(データ列)
データフレームの列と列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
リストと配列の散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
赤色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
JSONLファイルにデータフレームをタブ区切りとして保存する	df.to_csv(filename, sep='\t')
データ列の曜日	ds.dt.weekday_name
プロットにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
ファイルを開いて]、読み込みストリームを見る	open(filepath, mode='r')
グラフの色を暗くする	sns.set(pallete='dark')
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
真下位集合か調べる	aSet < aSet2
データフレームのNaNを平均値に指定する	df.fillna(df.mean())
データフレームのn行より後ろ選択する	df[n:]
ファイルを文字コードtextを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
PandasでデータフレームのcollのUNIX秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
配列の要素ごとのアダマール積を使う	np.multiply(aArray, aArray2)
データフレームのリスト列の欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列の左側から部分文字列を除去する	s.lstrip(sub)
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
イテラブルからn個サンプリングする	random.sample(iterable, k=n)
データフレームを関数によって集約する	df.groupby(関数)
折れ線グラフに上三角印を加える	plt.plot(データ列x, データ列y, marker='^')
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの列の欠損値を最小値に変更する	df[col].fillna(df[col].min())
データ列のNaNを中央値に設定する	ds.fillna(ds.median())
option: フォントの色をダークマゼンタに設定する	color = 'darkmagenta'
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
平均値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].mean())
データフレームを複数の列で昇順にソートする	df.sort_values(by=column, ascending=True)
データフレームの列が正規表現文字列にマッチするデータを取り出す	df[df[column].str.match(s)]
データフレームのカラムは何分か見る	df[col].dt.minute
空白で文字列を区切って整数リストに変換する	map(int, s.split())
rgbの菱形マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図の丸マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: 色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
縦棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
データフレームの末尾を見る	df.tail()
replにまとめて正規表現patternでデータフレームのリストカラムの値を置き換える	df[aList].replace(pattern, repl, regex=True)
文字列の中の複数行対応としてパターンによるマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
option: ライトシアンを使う	color = 'lightcyan'
今日の日付を求める	datetime.date.today()
ミディアムブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
リストの推移を点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
2つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
辞書のキーとその項目をペアとして取り出す	aDict.items()
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
BOM付きとしてファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
浮動小数点数のn乗して浮動小数点数による余り	pow(x, n, y)
ベクトルの要素ごとに加算する	aArray + aArray2
エンコーディングで文字列をバイト列に変換する	s.encode(encoding=encoding)
色付きの一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
グラフの色を明るくする	sns.set(pallete='bright')
ファイルが存在する	os.path.exists(filepath)
option: グラフのラインスタイルを破線に設定する	linestyle = 'dashed'
シアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
文字列リストを一つの文字列にする	''.join(map(str, iterable))
option: グラフの色を黄色に指定する	color = 'yellow'
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
サンディーブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームのカラムの中の欠損値の合計を求める	df[col].isna().sum()
折れ線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームのカラムの年を見る	df[col].dt.year
プロットをスライドに設定する	sns.set(context='talk')
クラス分類をブースティングとしてする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
オブジェクトがタプルに含まれるか調べる	element in aTuple
散布図の四角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データ列と配列についての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の先頭から部分文字列を見つける	s.find(sub)
カラムの標本標準偏差	ds.std()
nからn2の値を引いてnとする	n -= n2
折れ線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
ヒストグラムをパールバイオレットレッド色として描画する	plt.hist(データ列, color='palevioletred')
カラムの欠損値を平均値に設定する	ds.fillna(ds.mean())
スタックのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
変数を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
箱ひげ図にラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
option: ダークターコイズにグラフの色を変更する	color = 'darkturquoise'
等間隔のベクトル	np.arange(開始値, 終了値, 等差)
正規表現をコンパイルする	re.compile(pattern)
データフレームの未入力値がある行を削除する	df.dropna()
option: 色をコーラルに設定する	color = 'coral'
データフレームの列の中にある文字列と文字列の合計を求める	df[col].isin([value, value2]).sum()
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データ列の中にあるの数をカウントする	ds.isin([value]).sum()
リストを三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームを各列毎に集計して、列の分散を求める	df.groupby(column)[column2].var()
文字列中に部分文字列がいくつかあるかカウントする	s.count(sub)
option: ベージュ色を使用する	color = 'beige'
ベクトルの形	aArray.shape
折れ線グラフを青い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
実数の常用対数を求める	math.log10(x)
線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
多い順にカウンタを列挙する	aCounter.most_common()
option: 色をバリーウッドに設定する	color = 'burlywood'
両端キューの最初にイテラブルの各要素を順に追加する	deq.extendleft(iterable)
nの二進リテラル	bin(n)
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームのリスト列の中に日付データと日付データがある	df[aList].isin([value, value2])
線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
リストの平均値を求める	sum(aList)/len(aList)
データフレームの列が文字列が含まれない行を選択する	df[not df[column].str.contains(s)]
データフレームのモード	df.mode()
データフレームの列が正規分布からどの程度歪んでいるか見る	df[col].kurt()
全印字できる文字	string.printable
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
グラフの縦横比を同じする	plt.axis('equals')
配列をn個に分割する	pd.cut(aArray, n)
書式をタプルでフォーマットする	formatText.format_map(aDict)
データフレームのリストカラムの欠損値を直後の値にセットする	df[aList].fillna(method='bfill')
折れ線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
データフレームの列のユニークな要素数	df[col].nunique()
ValueMapでデータフレームの列を一度に変更する	df[col].replace(ValueMap)
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフをティール色を用いて描画する	plt.plot(データ列x, データ列y, color='teal')
文字コードtextでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
文字化けしないようにTSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームを関数の値でグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
ライトスカイブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
配列をn個にビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのリストカラムの第一四分位数を求める	df[aList].quantile(0.25)
オリベドラブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
リストとリストの散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
整数nは配列のどれかかどうか	n in aArray
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: フォントの色をゴーストホワイトに設定する	color = 'ghostwhite'
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
縦棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
折れ線グラフのダイアモンド印を赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
集合の全要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
option: ポイント印を使う	marker = '.'
データフレームを'A'列でグループ化する	df.groupby('A')
線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
ゴールド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
ヒストグラムをアリスブルー色を用いて描画する	plt.hist(データ列, color='aliceblue')
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
ダークブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ロバスト推定として回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ミディアムスプリンググリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
双方向キュー中の文字列を数える	deq.count(element)
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: 貝殻に色を設定する	color = 'seashell'
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムの色をダークマゼンタにする	plt.hist(データ列, color='darkmagenta')
タプルの各値を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
イテラブルを両端キューにする	collections.deque(iterable)
データフレームのカラムの値が欠損値か判定する	df[col].isna()
文字列をISO8601として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
書き込み用にファイルをEUCとして開く]	open(filepath, mode='w', encoding='euc_jp')
ラインを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
▼印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
y軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
要素は集合に含まれないか調べる	element not in aSet
ルートのチェーンマップを作る	collections.ChainMap()
プログラムの実行を正しく終える	sys.exit(0)
ヒストグラムの色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
列から重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
特異値分解で多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームのリストカラムの中にがあるか判定する	df[aList].isin([value])
分類モデルのF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
線グラフをイエローグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
部分文字列で部分文字列が開始するか調べる	s.startswith(sub)
nがn2の倍数でない	n % n2 != 0
折れ線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
折れ線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
option: フォントの色をフォレストグリーンに設定する	color = 'forestgreen'
データ列を等量で分割数nでビニングする	pd.qcut(ds, n)
データフレームの列に重複があればマスクする	df.duplicated(subset=column)
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategray'
横方向に二つのデータフレームを合体させる	pd.concat([df, df2], axis=1)
列をダミー変数にする	pd.get_dummies(iterable)
nが5で割り切れる	n % 5 == 0
プロットの用途を画面に設定する	sns.set(context='notebook')
現在が金曜日	datetime.datetime.today().weekday() == 4
逆正弦	math.asin(x)
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
出現頻度を可視化する	plt.hist(データ列)
要素はタプルの値として含まれているか調べる	element in aDict.values()
データフレームの中で、列の重複を調べる	df.duplicated(subset=column)
nが1もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
カラムの文字列をNaNにする	ds.replace(s, np.nan)
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
右三角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
リストをシアンでプリントする	print(f'\033[36m{value}\033[0m')
データフレームから一番左側の列を消す	df[df.columns[1:]]
データフレームの列が文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
xが真かどうか調べる	bool(x)
データフレームのカラムの中に含まれる文字列の合計を数える	df[col].isin([value]).sum()
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
文字列はタイトル大文字小文字か判定する	s.istitle()
リストにリストを加える	aList.extend(aList2)
option: 色をオリーブに設定する	color = 'olive'
エクセルファイルファイルを読み込む	pd.read_excel(filename)
ヒストグラムの色を深紅に設定する	plt.hist(データ列, color='crimson')
既存のベクトルを元に全要素が0の配列	np.zeros_like(aArray)
折れ線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
ミッドナイトブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ヒストグラムの色をラベンダーブラッシュにセットする	plt.hist(データ列, color='lavenderblush')
整数個からk個取り出したときの並べ方の総数	math.perm(n, k)
option: ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
最頻値でデータフレームのカラムのNaNを置換する	df[col].fillna(df[col].mode().iloc[0])
ファイルをUTF8で開く]	open(filepath, encoding='utf-8')
数列とリストの散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
辞書にキーが存在しない時、要素を追加する	aDict.setdefault(key, element)
データフレームのカラムがどれだけ、分散しているか見る	df[col].var()
両端キューのstart番目からend番目までの部分値を使う	collections.deque(itertools.islice(deq, start, end))
データフレームをグループ化し各列に対し合計を求める	df.groupby(column)[column2].sum()
プロットに補足を加える	plt.legend(['凡例A', '凡例B'])
データフレームの中の列をリストを境界値としてビニングする	pd.cut(df[col], aList)
データフレームを各列と列の組み合わせ毎に集約し、、分散を求める	df.groupby([column, column2], as_index=False).var()
データフレームを各列とカラムの組み合わせ毎にグループ分けして、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
折れ線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
整数nの十六進数文字列	hex(n)[2:]
バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
リストをひとつ飛ばしで取り出す	aList[::2]
データフレームの内で何行、重複するか見る	df.duplicated().sum()
データフレームの指定された列を配列にする	df[column].values
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
現在のワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
データフレームを列によってグループ分けし、、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
option: 淡いピンク色に色を指定する	color = 'lightpink'
部分文字列が文字列の開始位置以降に含まれないか調べる	s.find(sub, start) == -1
ピーチパフ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
多次元尺度構成法として濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
y軸だけグリッド線	plt.grid(axis='y')
xが1、もしくは2、もしくは3に等しいかどうか確認する	x == 1 or x == 2 or x == 3
折れ線グラフをベージュ色を用いて描画する	plt.plot(データ列x, データ列y, color='beige')
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
ベクトルの分散	np.var(aArray)
option: ナバホホワイトを使う	color = 'navajowhite'
数を実数で割って、切り捨てる	x // y
アンティークホワイト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2])
文字列ひとつのりスト	[element]
データフレームを二つの列を用いて昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
最大長nのキューを作る	collections.deque(maxlen=n)
作画のフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
option: ミディアムシアグリーンにフォントの色を設定する	color = 'mediumseagreen'
文字列の両端から空白を消す	s.strip()
データフレームをに箱ひげ図として見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
ヒストグラムをライトゴールドロディイエロー色を用いて描画する	plt.hist(データ列, color='lightgoldenrodyellow')
棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
日付時刻データがタイムスタンプデータより後ろかどうか判定する	aDatetime > aDatetime2
折れ線グラフの左三角印を黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームの全カラムを散布図でプロット化する	sns.pairplot(df)
データフレームの欠損値を直後の値に変更する	df.fillna(method='bfill')
暗い赤色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
キーがマッピングにあるか	key not in aDict
データフレームを'A'列によってグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
カラムの中にいくつ未入力値があるか数える	ds.isna().sum()
新しいサポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
行列が何のデータ型か調べる	aArray.dtype()
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
データフレームの欠損値を最小値で補う	df.fillna(df.min())
データフレームの欠損値をモードで補う	df.fillna(df.mode().iloc[0])
シンボル計算を使う	import sympy
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
カラムによってデータフレームを集約して、それぞれのグループごとの個数を求める	df.groupby(column).count()
データフレームの中の列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
黒い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームのカラムのNaNを直後の値で埋める	df[col].fillna(method='bfill')
データフレームの列を整数に四捨五入する	df[col].round()
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
文字列の接頭辞から部分文字列を消す	s.removeprefix(sub)
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
色差別なくカラーパレットをグラフの描画で使う	sns.set(pallete='colorblind')
棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
ヒストグラムをスレートブルー色を用いて描画する	plt.hist(データ列, color='slateblue')
データフレームを列を用いて整列する	df.sort_values(by=column)
データフレームのリストカラムの中に存在する文字列の合計を数える	df[aList].isin([value]).sum()
リストの推移を破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
グレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
列'A'と列'B'をキーにして2つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
円プロットを真円にする	plt.axis('equals')
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: フォントの色をライトグレーに指定する	color = 'lightgrey'
option: 珊瑚色を使う	color = 'coral'
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
データフレームを昇順に複数の列によって破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
文字列の開始位置からと終了位置番目までの間に部分文字列が存在しない	s.find(sub, start, end) == -1
二次元組をflattenする	sum(aTuple)
nが負の整数か調べる	n < 0
既存のファイルパスを追加できるようにEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
横棒プロットをプロットして、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
折れ線グラフを青い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
確率的勾配降下でクラス分類をする	model = sklearn.linear_model.SGDClassifier()
データフレームを十の位で四捨五入して整数型にする	df.round(-1).astype(int)
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
棒プロットの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
リストとデータ列について散布図を描画してマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をスプリンググリーンに指定する	color = 'springgreen'
日付データが日付データよりあと	aDate > aDate2
option: ハニーデューを使う	color = 'honeydew'
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
プロットにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
配列とリストの散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
セットから別のセットの要素を取り除く	aSet.difference_update(aSet2)
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
データフレームから重複したデータをドロップして、入れ替える	df.drop_duplicates(inplace=True)
浮動小数点数が正	x > 0
xの小数点以下'2'桁の文字列にする	':.2f'.format(x)
option: データ型として整数型を使う	dtype = np.int
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
折れ線グラフの色をダークカーキにセットする	plt.plot(データ列x, データ列y, color='darkkhaki')
未入力値を含めてデータフレームを列でグループ化する	df.groupby(column, dropna=False)
データフレームのカラムを100の位で丸めて、整数にする	df[col].round(-2).astype(int)
値をキューの末尾から取り除く	deq.pop()
空のロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: フォントの色をダークバイオレットに指定する	color = 'darkviolet'
ターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
折れ線プロットに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのカラムの歪度を計算する	df[col].kurt()
リストとイテラブルについての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
多次元データを主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
環境がウィンドウズか調べる	sys.platform.startswith('win32')
変数が0に近づくとき、数値の極限値を求める	sympy.limit(e, z, 0)
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ふたつの集合の積集合を求める	aSet.intersection(aSet2)
線グラフの色をフローラルホワイトにセットする	plt.plot(データ列x, データ列y, color='floralwhite')
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
ダークブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: ディムグレーにフォントの色を設定する	color = 'dimgrey'
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
カウンタの要素のカウントを使う	aCounter[element]
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
ファイルを追加モードとしてオープンする]	open(filepath, mode='a')
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
データフレームを表示するとき、表示できる行数を減らす	pd.set_option('display.max_rows', n)
折れ線グラフのダイアモンドマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
散布図に左三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='<')
文字列を改行を用いて区切る	s.splitlines()
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
ライトゴールドロディイエロー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのNaNを中央値に設定する	df.fillna(df.median())
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
行列演算をする	import numpy as np
リストをn個にビニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
ベクトルの列ごとの平均	np.mean(aArray, axis=0)
シーグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
データ列の中にと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
データフレームを二つの列でまとめた表を使う	df.groupby(['A', 'B'])
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
変数を下線付き化する	f'\033[4m{value}\033[0m'
配列の行ごとの最小	np.min(aArray, axis=1)
カテゴリ別でグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
両端キューが空であるか調べる	len(deq) == 0
整数乱数で要素を埋めた配列を作成する	np.random.randint(開始値, 終了値, N)
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
セットを変更不能な集合に変換する	frozenset(aSet)
青い実線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
イテラブルと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームの列の文字列が文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
折れ線グラフをスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='skyblue')
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
スタッキングとして回帰分析をする	sklearn.ensemble.StackingRegressor()
データフレームを複数の列でグループ化し要約統計量を求める	df.groupby(columns).describe()
カウンタ同士で∩	aCounter & aCounter2
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
線グラフを半透明の点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: グラフのラインスタイルを実線に設定する	linestyle = 'solid'
データフレームのカラムが何時か調べる	df[col].dt.hour
床数	math.floor(x)
データ列を100の位で四捨五入して整数型にする	ds.round(-2).astype(int)
折れ線グラフに赤いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
赤いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
疑似乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
ValueMapで一度にデータフレームのリストカラムの値を置き換える	df[aList].replace(ValueMap)
ミディアムオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームの未入力値を取り除く	df.dropna()
x座標の目盛りを対数に変更する	plt.xscale('log')
文字列の開始位置からと終了位置の間に部分文字列が存在する	s.find(sub, start, end) != -1
散布図をターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='turquoise')
タプルの最後を捨てる	aTuple[:-1]
ヒストグラムをミスティローズ色として描画する	plt.hist(データ列, color='mistyrose')
デックから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
option: バッファのサイズを設定する	buffering = 4096
縦棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
オブジェクトはバイト列か	isinstance(obj, bytes)
カテゴリ列でグループ化して、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを関数の値でグループ化し、要約統計量を求める	df.groupby(関数).describe()
タプルを多重集合に変換する	collections.Counter(aDict)
パターンに文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムの色を青紫にする	plt.hist(データ列, color='violet')
データフレームのシェイプ	df.shape
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
option: バイナリ書き込みモードにセットする	mode = 'wb'
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
データフレームの列の標本標準偏差を求める	df[col].std()
ミディアムパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
改行なしに二つの文字列を表示する	print(value, value2, end='')
グラフのサイズをセットする	plt.figure(figsize=(横幅, 高さ))
整数nの十六進表現を求める	hex(n)
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
列の要素を双方向キューの右に追加する	deq.extend(iterable)
既存の配列を元に全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
四分位点を用いてスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ラベンダーブラッシュ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
赤い点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
ネイピア数を使用する	math.e
線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
表データをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
パステル調にカラーテーマをグラフの描画で使う	sns.set(pallete='pastel')
データフレームのカラムのNaNを最大値に設定する	df[col].fillna(df[col].max())
データフレームを正規表現patternで一度にreplに変更する	df.replace(pattern, repl, regex=True)
二つのリストの共通りストを計算する	list(set(aList) & set(aList2))
棒グラフをダークオリーブグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームを各列とカラムの組み合わせ毎にグループ化して最大値を求める	df.groupby([column, column2], as_index=False).max()
データ列のユニークな要素数	ds.nunique()
タプルの末尾からn番目以前の部分を抽出する	aTuple[:-n]
二つの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
nを十六進表現に変換する	hex(n)
数値を白色にする	f'\033[37m{value}\033[0m'
データフレームで、列と列の重複を見る	df.duplicated(subset=[column, column2])
データフレームを列でグループ化してグループごとの件数を知る	df.groupby(column).size()
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
option: 改行コードを動作環境依存にセットする	newline = None
最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
リネンにヒストグラムの色をセットする	plt.hist(データ列, color='linen')
データフレームの列の未入力値を最大値で埋める	df[col].fillna(df[col].max())
サンディーブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
プレゼン用にグラフを変更する	sns.set(context='talk')
カラーバーを横向きでプロットする	plt.colorbar(orientation='horizontal')
文字列で区切って2つのリストをプリントする	print(value, value2, sep=s)
タプルのオブジェクトが最初に見つかるインデックスを探す	aTuple.index(element)
十六進数字を全部見る	string.hexdigits
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategrey'
折れ線グラフのクロス印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
散布図を青色を用いて描画する	plt.scatter(データ列x, データ列y, color='blue')
線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
昇順に組の値を並べる	sorted(aTuple, reverse=True)
散布図をrgbの四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
マゼンタで文字列をプリントする	print(f'\033[35m{value}\033[0m')
縦棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
列'A'と列'B'をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
半透明の実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームのカラムを1000の位で四捨五入して、整数にする	df[col].round(-3).astype(int)
データフレームとデータフレームの列をつなぐ	pd.concat([df, ds], axis=1)
列自身の長さnの順列	itertools.permutations(iterable, n)
等量で配列をn個にビニングする	pd.qcut(aArray, n)
データフレームとしてTSVファイルを読む	pd.read_csv(filename, sep='\t')
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
option: ロイヤルブルーにグラフの色を指定する	color = 'royalblue'
横棒グラフをブラウン色として描画する	plt.barh(データ列x, データ列y, color='brown')
MSDで多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
縦棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームをグループ化し、各列に対し最大値を算出する	df.groupby(column)[column2].max()
インデント幅nで、マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: ヘッダを連番に設定する	header = None
ベクトルは何次元か調べる	aArray.ndim
データ列の中にと文字列があるかどうか確認する	ds.isin([value, value2])
option: グラフの色をパレットトルコイズに変更する	color = 'paleturquoise'
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
実線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='solid')
浮動小数点数のn乗	x ** n
データ列の歪度を求める	ds.kurt()
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
option: 黄緑にグラフの色を設定する	color = 'chartreuse'
棒グラフをミッドナイトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='midnightblue')
nが1、もしくは2かどうか調べる	n == 1 or n == 2
データフレームの中に文字列がある	df.isin([value])
データフレームの相関行列ケンドール相関係数として	df.corr(method='kendall')
データフレームをグループ化しそれぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
ふたつの集合が共通の要素を持たないか判定する	aSet.isdisjoint(aSet2)
ファイルを読み込み用にオープンする]	open(filepath, mode='r')
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
行列の列ごとの最小	np.min(aArray, axis=0)
線グラフを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
日付時刻データにn週間を加える	aDatetime + datetime.timedelta(weeks=n)
最大値・最小値として乱数を得る	random.randint(最小値, 最大値)
文字列の右側から範囲を指定して部分文字列を探す	s.find(sub, start, end)
オブジェクトは論理値クラスのインスタンスかどうか調べる	isinstance(obj, bool)
グラフにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
option: 下三角印を使う	marker = 'v'
ピアソン相関係数でデータフレームのリストで指定されたカラムの相関行列	df[aList].corr(method='pearson')
データフレームを各列と列の組み合わせ毎にグループ化し、、合計を求める	df.groupby([column, column2], as_index=False).sum()
線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームをグループ化し、各列に対し個数を計算する	df.groupby(column)[column2].count()
option: グリーンイエローにグラフの色を設定する	color = 'greenyellow'
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
棒グラフをベージュ色を用いて描画する	plt.bar(データ列x, データ列y, color='beige')
グラフの名称を設定する	plt.title('グラフの名称')
浮動小数点数が負の数かどうか調べる	x < 0
データフレームをインデックスで降順で並べ直す	df.sort_index(ascending=False)
ファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
両端キューをdequeue	deq.popleft()
文字列を部分文字列で分けたときの後半の文字列を使う	s.partition(sub)[-1]
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
ボックスチャートとしてデータフレームの2つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
サーモン色としてヒストグラムを描画する	plt.hist(データ列, color='salmon')
散布図を黒い四角マーカーとして描く	plt.plot(データ列x, データ列y, marker='s', c='k')
数式の変数に数値を代入する	e.subs(z, e2)
実数の三乗を計算する	x ** 3
実行結果をシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
option: フォントの色をホワイトスモークに指定する	color = 'whitesmoke'
option: 追加モードに指定する	mode = 'a'
カウンタをマッピングで更新する	aCounter.update(aDict)
列を無限に繰り返す	itertools.cycle(iterable)
データフレームをSJISでJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
日付時刻データが土曜日	aDatetime.weekday() == 5
ピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
文字列中にひとつでも非大文字が含まれるかどうか調べる	any(not c.isupper() for c in s)
データフレームを列によってを用いて破壊的にソートする	df.sort_values(by=column, inplace=True)
データ列間のRMSEを算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
本日をタプルにする	datetime.datetime.today().timetuple()
ひとつでもアルファベットが文字列内に含まれるかどうか調べる	any(c.isalpha() for c in s)
タイムスタンプデータが金曜日かどうか調べる	aDatetime.weekday() == 4
リストの値を小さい方からソートする	sorted(aList, reverse=False)
散布図の△マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
数列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
リストをビン数nで分割する	pd.cut(aList, n)
散布図に黒い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストとリストについての散布図にバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
ネイビー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
サドルブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
散布図のバツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: 小麦色色を使用する	color = 'wheat'
リストとリストについての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームが重複している	df.duplicated()
値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
リストを更新不能なセットにする	frozenset(iterable)
双方向キューの左から要素を取り除く	deq.popleft()
コロンで文字列を区切り、、列挙する	s.split(':')
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
オブジェクトはタプルクラスか確認する	isinstance(obj, tuple)
文字列が全て空白からなる	s.isspace()
セットからエラーなく値を除く	aSet.discard(element)
文字列の左端からタブを消す	s.lstrip('\t')
配列の行列式	np.linalg.det(aArray)
option: 印を大バツに指定する	marker = 'X'
タプルを順に出力する	print(*aTuple)
データフレームのカラムを散布図を使って可視化する	sns.scatterplot(data=df, x='列名', y='列名')
ヒストグラムの色をグリーンに変更する	plt.hist(データ列, color='green')
データフレームの列の中にいくつ欠損値があるか数える	df[col].isna().sum()
option: 左三角印を加える	marker = '<'
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
キーがタプルに存在するか調べる	key in aDict
ライトグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
ダークバイオレット色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
横棒グラフをサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='salmon')
データフレームのカラムが正規分布からどの程度尖っているか確認する	df[col].skew()
文字列の後ろ	s[-1]
データフレームの中にある文字列との数を数える	df.isin([value, value2]).sum()
xが一桁の正の数か確認する	0 <= x <= 9
文字列内にひとつでも小文字が含まれるか確認する	any(c.islower() for c in s)
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
文字列から部分文字列を除く	s.replace(sub, '')
第二引数のファイル名	sys.argv[1]
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
折れ線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
nがn2以下か	n <= n2
列'A'と列'B'をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
列の値によってデータフレームを集約し、列挙する	[(name, group) for name, group in df.groupby(column)]
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
3自然数の最小公倍数を算出する	math.lcm(n, n2, n3)
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
オブジェクトは集合か調べる	isinstance(obj, set)
赤い実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
kを底とする浮動小数点数の対数を計算する	math.log(x, k)
横棒グラフをクリムゾン色として描画する	plt.barh(データ列x, データ列y, color='crimson')
スタックの末尾に数値を追加する	deq.append(element)
数に浮動小数点数を掛ける	x * y
勾配ブースティングとして回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
実数を浮動小数点数で除した余り	x % y
データ列の中にある文字列と文字列の個数を数える	ds.isin([value, value2]).sum()
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
Pandasで、フォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
文字列の中でASCII限定として正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
リストとリストについての散布図にrgbの星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: タブを区切り記号で用いる	sep = '\t'
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
印字を全部見る	string.printable
黒い三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
整数nの八進数文字列	oct(n)[2:]
外れ値に強い線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
データフレームの列の文字列が文字列が含まれるデータを取り出す	df[df[column].str.contains(s)]
タプルをnから順序付けする	enumerate(aTuple, start=n)
二つの数列を箱髭図にする	plt.boxplot([データ列, データ列])
option: 青紫を用いる	color = 'violet'
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
aListn番目から値を取り除く	aList.pop(n)
縦棒プロットを描いてラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図の△マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
エクセルデータファイルから全てのシートを読む	pd.read_excel(filename, sheet_name=None)
文字列中から正規表現にケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ピンクにヒストグラムの色を指定する	plt.hist(データ列, color='pink')
文字列の中の正規表現による全てのマッチを見る	re.findall(pattern, s)
散布図を黒いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームの中に存在するの合計をカウントする	df.isin([value]).sum()
茶色色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データ列を百の位で丸める	ds.round(-2)
散布図を赤いダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
重複をデータフレームから破壊的に落とす	df.drop_duplicates(inplace=True)
リストと数列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
option: 色をダークグレーに設定する	color = 'darkgrey'
データフレームを列名リストによってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
数列とリストについて散布図を描いて、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
スノー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
縦棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
クラス分類をロバスト推定で行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
リストとリストについての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
八進文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
縦棒グラフを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
正規表現によって文字列を置換する	re.sub(pattern, newsub, s)
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
実行結果を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
リストと数列について散布図を描いて右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ファイルパスをバイナリ用にオープンする]	open(filepath, mode='rb')
双方向キューの要素を左にn個分輪番で回す	deq.rotate(-n)
データフレームのNaNを中央値で補う	df.fillna(df.median())
データフレームのカラムをグループ化して、ヒストグラムで図示する	sns.histplot(df, x='列名', hue='カテゴリ名')
追加できるようにファイルパスをオープンする]	open(filepath, mode='a')
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
データフレームの中にいくつ文字列が存在するか求める	df.isin([value]).sum()
データフレームの中の列と列に重複があれば、取り除く	df.drop_duplicates(subset=column)
ふたつの関係が真スーパーセットか確認する	aSet > aSet2
横棒グラフを描画し、、中央寄せする	plt.barh(ラベル列, データ列, align='center')
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
配列間の要素ごとの最小公倍数を計算する	np.lcm(aArray, aArray2)
0から始まる無限整数リスト	itertools.count()
数列とイテラブルについて散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ロージーブラウン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
グラフの縦軸のラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
ビン数nを用いてリストを等量でビン分割する	pd.qcut(aList, n)
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ピーチパフ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
棒グラフをオレンジレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orangered')
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
多次元データをMSDで淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図を四角印を用いる描画する	plt.scatter(データ列x, データ列y, marker='s')
パウダーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
プロットの用途を論文に変更する	sns.set(context='paper')
y座標の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
プロットに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
横棒グラフを赤色として描画する	plt.barh(データ列x, データ列y, color='red')
組内の要素が全て真	all(aTuple)
option: 色をライトコーラルに設定する	color = 'lightcoral'
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
実数を実数で割った剰余を求める	math.remainder(x, x2)
option: ミディアムターコイズを使う	color = 'mediumturquoise'
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
カウンタを辞書から作成する	collections.Counter(aDict)
タプルの末尾を求める	aTuple[-1]
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
クラス分類の予測精度をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
中央値でデータ列をビニングする	pd.qcut(ds, 2)
縦棒グラフを描画してバーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
データフレームのカラムをreplにまとめて正規表現patternで置換する	df[col].replace(pattern, repl, regex=True)
option: ディムグレーにフォントの色を変更する	color = 'dimgray'
カウンタの項目を一つ増やす	aCounter[element] += 1
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
本日のタイムスタンプ	datetime.datetime.now()
データ列は何分か調べる	ds.dt.minute
文字列リストにシーケンスを変換してタブを用いて結合する	'\t'.join(map(str, iterable))
棒グラフをダークオーキッド色を使って描画する	plt.bar(データ列x, データ列y, color='darkorchid')
文字列を区切りによって区切り、、列挙する	s.split(sep)
option: トマト色を用いる	color = 'tomato'
線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
ダークシアン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
グラフの中の縦軸に名前をつける	plt.ylabel('y軸ラベル')
出力ストリームをクローズする	f.close()
option: 丸印を加える	marker = 'o'
文字列内に英数字が含まれるか	any(c.isalnum() for c in s)
改行で区切って二つの文字列をプリントする	print(value, value2, sep='\n')
プロットの縦横の比率を等しくする	plt.axis('equals')
ヒストグラムをフローラルホワイト色を使って描画する	plt.hist(データ列, color='floralwhite')
折れ線グラフの下三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
棒グラフをライムグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='limegreen')
ヒストグラムと勾配ブースティングとして回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
乱数生成系列をnで固定する	random.seed(n)
データフレームのn番目の行を選ぶ	df.loc[n]
折れ線グラフにポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
赤い星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
配列と配列の散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図の上三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
大きさnでリストと数列についての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
浮動小数点数の正接を求める	math.tan(x)
現在が木曜日かどうか	datetime.datetime.today().weekday() == 3
辞書のキーの値を得る	aDict[key]
option: ライトブルー色を使用する	color = 'lightblue'
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
データ列をビン数nでビンニングする	pd.cut(ds, n)
ロバストな線形分類モデルを作成する	model = sklearn.linear_model.HuberClassifier()
option: アクアマリンを使う	color = 'aquamarine'
文字列TSVファイルからCSVをn番目の列をインデックスにして読み込む	pd.read_csv(filename, index_col=n)
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
option: シルバーにフォントの色を設定する	color = 'silver'
データフレームの列の値がx未満の行を抽出する	df[df[column] < x]
濃いシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: バリーウッドを使用する	color = 'burlywood'
グラフの使途をポスターに変更する	sns.set(context='poster')
データ列の中にいくつ日付データがあるか数える	ds.isin([value]).sum()
リストの合計値を求める	sum(aList)
データフレームの値をValueMapで一度に置換する	df.replace(ValueMap)
データフレームのNaNを最小値に設定する	df.fillna(df.min())
丸マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列中に非数字があるかどうか調べる	any(not c.isdigit() for c in s)
縦棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームを表示するときカラムの最大幅をnにセットする	pd.set_option('max_colwidth', n)
データフレームのカラムの正規分布に対する上下広がりを求める	df[col].skew()
ヒストグラムをナバホホワイト色として描画する	plt.hist(データ列, color='navajowhite')
タイムスタンプを使用する	import time
日付データが金曜日	aDate.weekday() == 4
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
文字列がリストの要素か	element in aList
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
前もって複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategray')
データフレームの中に文字列とが存在するか	df.isin([value, value2])
タプルの個数	len(aTuple)
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
文字列を出力ストリームに書く	f.write(s)
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
プロットの描画で濃く色テーマを使う	sns.set(pallete='deep')
ふたつの集合の和集合を見る	aSet.union(aSet2)
ダークシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: サーモンを用いる	color = 'salmon'
黒い右三角マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='k')
いつまでも文字列が繰り返すイテラブル	itertools.repeat(element)
データフレームの指定された三つの列を取り出す	df[[column, column2, column3]]
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
データフレームのNaNが含まれる箇所に色を付ける	df.style.highlight_null()
列によってデータフレームをグループ化して、最大値を求める	df.groupby(column).max()
リストの文字列が最初に見つかる位置を使う	aList.index(element)
ダークゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
数式のn階微分を行う	sympy.diff(e, z, n)
辞書をインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
カラムの未入力値をxに設定する	ds.fillna(x)
option: 大バツマーカーを加える	marker = 'X'
ファイル全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
グラフに使うx座標にラベルを設定する	plt.xlabel('x軸ラベル')
線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
eの小数点数乗	math.exp(x)
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
option: フォントの色をペールグリーンにセットする	color = 'palegreen'
部分文字列で文字列を最後から区切る	s.rsplit(sub)
インディゴ色を使ってヒストグラムを描画する	plt.hist(データ列, color='indigo')
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
横軸の目盛りの表示値を変更する	plt.xticks(目盛りの値リスト)
双方向キュー中の要素のインデックスを使う	deq.index(element)
文字列が文字列より辞書順で前かどうか確認する	s < s2
リストを縦軸、リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
option: フォントの色を濃いシアンに指定する	color = 'darkcyan'
文字列をアンダーライン付きで表示する	print(f'\033[4m{value}\033[0m')
ゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームの列の値がx以下の行を抽出する	df[df[column] <= x]
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
コロンで文字列を区切って、文字列リストに変換する	s.split(':')
整数nがリストのどれかか	n in aList
散布図にrgbの▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
マッピングのキー一覧	list(aDict)
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategrey')
option: 色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
nまでの奇整数リストを得る	list(range(1, n, 2))
option: 色をダークオレンジに設定する	color = 'darkorange'
option: ホットピンクを使用する	color = 'hotpink'
辞書のの一覧を見る	aDict.values()
データフレームの列をドロップして更新する	df.drop(column, axis=1, inplace=True)
数値を緑色にする	f'\033[32m{value}\033[0m'
rgbのバツマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
タプルを集合に追加更新する	aSet.update(iterable)
散布図でデータフレームを可視化し、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
折れ線グラフに▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
散布図の▲印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
集合から要素を全て除く	aSet.clear()
option: マーカーを菱形に変更する	marker = 'D'
マップから項目名の値をエラーなく見る	aDict.get(key, None)
全般的に色を淡くする	sns.set(pallete='muted')
ダークレッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkred')
xが-9以上、9以下か	-9 <= x <= 9
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
実測値をモデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームのカラムは何曜日か見る	df[col].dt.weekday_name
整数nを八進数表現に変換する	oct(n)
predicateFuncが真となるシーケンスの部分	itertools.takewhile(predicateFunc, iterable)
列を等量でn個に分割する	pd.qcut(ds, n)
行列の最大値	np.max(aArray)
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データ列の未入力値を最小値に設定する	ds.fillna(ds.min())
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームのカラムのタイムゾーンを東京に設定する	df[col].tz_convert('Asia/Tokyo')
グリーンイエローにヒストグラムの色を指定する	plt.hist(データ列, color='greenyellow')
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
既存のファイルを追加できるように文字列の示すエンコーディングとしてオープンする]	open(filepath, mode='a', encoding=s)
キューに値をエンキューする	deq.appendleft(element)
散布図を深紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
option: フクシアにフォントの色をセットする	color = 'fuchsia'
キューの最初に要素を追加する	deq.appendleft(element)
ミディアムアクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
文字列はタプルに含まれない	element not in aTuple
データ列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
データフレームをTSV形式のファイルから読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
円グラフとしてリストの割合を可視化する	plt.pie(データ列, startangle=90)
各列毎にデータフレームをグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
データフレームのn行目まで選ぶ	df[:n]
リストの各要素に対して、predicateFuncの適用が真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
実数のバイナリ対数を求める	math.log2(x)
ファイルパスから入力ストリームを使う	open(filepath)
文字列を区切りで区切り、、文字列リストに変換する	s.split(sep)
タイムスタンプデータと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
青い一点鎖線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列が大文字か調べる	s.isupper()
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
８進数字を全部求める	string.octdigits
各列毎にデータフレームをグループ化し、、列の標準偏差を計算する	df.groupby(column)[column2].std()
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
正弦の逆数を求める	math.asin(x)
散布図をダークレッド色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
ファイルを文字列の示すエンコーディングとしてオープンする]	open(filepath, encoding=s)
原点から(実数,y)の距離を算出する	math.hypot(x, y)
線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
２つのオブジェクトが同じ参照か調べる	obj is obj2
二つの浮動小数点数が十分に近い	math.isclose(x, x2)
カウンタの各項目をその出現回数だけ列挙する	aCounter.elements()
データフレームを千の位で丸めて整数型にする	df.round(-3).astype(int)
データ列の推移を一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ファイルを書き込みモードとしてオープンして]fとする	f = open(filepath, mode='w')
ライトスチールブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
横棒グラフをダークサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='darksalmon')
双方向キューの最初の要素	deq[0]
データフレームのリスト列の欠損値をxで補う	df[aList].fillna(x)
タプルをリバースする	reversed(aTuple)
二つの文字列は等しくない	s != s2
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
データフレームのそれぞれのグループごとの最大値を求める	df.groupby(column).max()
カーネル密度分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムをライトシアン色を使って描画する	plt.hist(データ列, color='lightcyan')
点線にヒストグラムのラインスタイルを設定する	plt.hist(データ列, linestyle='dotted')
データフレームの列の中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
全要素を初期値で初期化した配列を初期化する	np.full(要素数, 初期値, dtype=np.int)
数列とリストについて散布図を描いて、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
rgbの左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
各列毎にデータフレームをグループ化して、列の最大値を算出する	df.groupby(column)[column2].max()
マッピングの項目名を列挙する	aDict.keys()
option: フォントの色をライトグレーに設定する	color = 'lightgray'
rgbの右三角マーカーを数列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのリスト列の平均値	df[aList].mean()
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
ラインを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
'A'列によってデータフレームをソートして更新する	df.sort_values(by='A', inplace=True)
データフレームのリスト列がどの程度、分散しているか確認する	df[aList].var()
数列とデータ列についての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
数列を柱状図で可視化する	plt.hist(データ列)
Pandasで、データフレームのcollをフォーマットで日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
新しいロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
折れ線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
行列の和を求める	aArray + aArray2
データフレームの列のユニークな要素を見る	df[col].unique()
データフレームのヒストグラムを縦横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
組の要素をソートする	sorted(aTuple)
ファイルを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
赤い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
線グラフを色付きの点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームを関数の値によってまとめたグループ	df.groupby(関数)
ライトグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームの中のカラムを等しい量になるようにn個にビン分割する	pd.qcut(df[col], n)
データフレームを列名リストによって昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列をパターンで分割する	re.split(pattern, s)
線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
散布図の▽印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
タプルの長さを制限する	collections.deque(iterable, maxlen=n)
データフレームのリスト列は正規分布からどの程度歪んでいるか確認する	df[aList].kurt()
散布図にバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームを列で小さい順に並べる	df.sort_values(by=column, ascending=True)
2つのタプルをネストする	collections.ChainMap(aDict, aDict2)
option: 先頭のカラムを行に減らす	index_col = 0
要素は集合のメンバーに含まれるか確認する	element in aSet
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
三つのデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
option: フォントの色をフローラルホワイトに設定する	color = 'floralwhite'
option: 読むシートの名前をnamesに設定する	sheet_name = names
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフのクロス印の線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフのポイント印の大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
オブジェクトがリストクラス	isinstance(obj, list)
組のn番目からn2番目までの部分	aTuple[n:n2]
線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
リストと配列について散布図をプロットし、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データ列の記述統計量を計算する	ds.describe()
JSONファイルの入力を辞書にする	json.load(fin)
Pandasで数値時刻のデータ列からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
本日のタイムスタンプ	datetime.datetime.today()
データフレームのカラムをヒストグラムで描く	plt.hist(df[column])
ふたつの辞書をマージする	aDict | aDict2
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
棒グラフを淡い茶色色として描画する	plt.bar(データ列x, データ列y, color='tan')
PandasでdateStringをPandasの日付型にする	pd.to_datetime(dateString)
文字列が文字列より辞書順で後か	s > s2
最大値・最小値の範囲として一様な乱数を生成する	random.uniform(最小値, 最大値)
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
要素が集合のメンバーに含まれないか調べる	element not in aSet
二つの列を用いてデータフレームをソートする	df.sort_values(by=['A', 'B'])
点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームを'A'列でで破壊的にソートする	df.sort_values(by='A', inplace=True)
データ列とデータ列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの重複した行だけを選ぶ	df[df.duplicated(keep=False)]
データ列の値を正規表現でまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
データフレームの中の列を等しい量になるようにビン数nとしてビン分割する	pd.qcut(df[col], n)
リストとリストの散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データ列の25パーセンタイル	ds.quantile(0.25)
日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
option: フォントの色をゴールデンロッドに設定する	color = 'goldenrod'
散布図をミディアムアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: シアンにグラフの色を設定する	color = 'cyan'
リストを白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのカラムの時刻	df[col].dt.hour
色付きの一点鎖線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムと勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: ライムにフォントの色を変更する	color = 'lime'
ブースティングとして回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データ列が何秒か確認する	ds.dt.second
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
option: アリスブルーにフォントの色を指定する	color = 'aliceblue'
option: グラフの色をライトスチールブルーに変更する	color = 'lightsteelblue'
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームの列の文字列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
列と列の重複を削除する	df.drop_duplicates(subset=column)
nはn2か調べる	n == n2
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームの列がxのデータを取り出す	df[df[column] == x]
線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームを表示するとき、小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
０で全要素を初期化した３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
散布図のバツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ビン数nを用いて配列を等量でビン分割する	pd.qcut(aArray, n)
表データを'A'列と'B'列を用いてソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
現在の分を使う	datetime.date.today().minute
マッピングを階層化する	collections.ChainMap(aDict)
表データを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
凡例を表示する	plt.legend()
横棒グラフをタン色を用いて描画する	plt.barh(データ列x, データ列y, color='tan')
option: ダーク・スラテグレーにフォントの色を設定する	color = 'darkslategrey'
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
データフレームを'A'列によって並べ直して、NaNを先頭にする	df.sort_values(by='A', na_position='first')
小数点数が有限かどうか調べる	math.isfinite(x)
実数を十六進表記の文字列にする	x.hex()
既存のファイルを追加できるようにUTF8でオープンする]	open(filepath, mode='a', encoding='utf-8')
データフレームの値は欠損値かどうか	df.isna()
データフレームを'A'列と'B'列の値によって集計する	df.groupby(['A', 'B'])
マッピングをコピーする	dict(aDict)
文字列を最後の部分文字列で分けたときの前半の文字列を取り出す	s.rpartition(sub)[0]
バイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
option: 色をインディゴにセットする	color = 'indigo'
空のマッピングを生成する	{}
散布図を赤い四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
色付きの点線として配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
両端キューに要素をスタックする	deq.append(element)
横棒プロットを描画してバーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ファイルにxを文字列に変換して書く	f.write(str(x))
スレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
表データを用いる	import pandas as pd
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
xが一桁の数か確認する	-9 <= x <= 9
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
列のどの値が最も現れるか見る	ds.mode()
データフレームが正規分布からどの程度尖っているか見る	df.skew()
昇順に行を用いてデータフレームを並べる	df.sort_index(ascending=True)
データフレームのカラムをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
イテラブルを計数器に変換する	collections.Counter(iterable)
二つの文字列は大文字小文字を無視して同じか	s.casefold() == s2.casefold()
辞書のエントリ数	len(aDict)
option: グラフの色をアクアに変更する	color = 'aqua'
耐火レンガ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
四分位数ごとにデータフレームの中のカラムをビニングする	pd.qcut(df[col], 4)
日付データをISO書式の文字列にする	aDate.isoformat()
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
列を配列に変換する	np.array(iterable)
selectorsでマスクしたリストの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
棒グラフをマルーン色を用いて描画する	plt.bar(データ列x, データ列y, color='maroon')
ヒストグラムをホワイト色を用いて描画する	plt.hist(データ列, color='white')
多層パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
リスト内の要素が全て真	all(aList)
データ列の折れ線グラフを左三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をパールバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='palevioletred')
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
数列とイテラブルについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データ列の推移を実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのリスト列を丸める	df[aList].round()
カテゴリデータを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
こんにちは世界とプリントする	print('Hello World')
実数のアークタンジェント	math.atan(x)
黒い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
浮動小数点数から実数を減算する	x - y
nが正の数	n > 0
線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
ファイルをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
データフレームのリスト列の中に存在する日付データと文字列の数を数える	df[aList].isin([value, value2]).sum()
折れ線グラフのダイアモンド印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
リストをソートする	sorted(aList)
配列と配列について散布図を描画し、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
TSVファイルからSJISでCSVを読み込む	pd.read_csv(filename, encoding='shift_jis')
列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
列によってデータフレームをグループ化し、、グループごとの最小値を計算する	df.groupby(column).min()
option: サンディーブラウンに色を設定する	color = 'sandybrown'
折れ線グラフの色を青緑に変更する	plt.plot(データ列x, データ列y, color='turquoise')
predicateFuncが真とならないリストの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
ファイルを開き]、バイナリストリームを使う	open(filepath, mode='rb')
nの八進表現を使う	oct(n)
散布図の印をダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
ベクトルのユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
淡い茶色にヒストグラムの色を変更する	plt.hist(データ列, color='tan')
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
データフレームの列の欠損値を前の行の値に設定する	df[col].fillna(method='ffill')
シーケンスのそれぞれを関数でフィルタする	map(func, iterable)
配列と配列についての散布図に補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
スノー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
整数の階乗	math.factorial(n)
横方向に二つのデータフレームをマージする	pd.merge(df, df2)
整数nはセットのどれかかどうか調べる	n in aSet
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
黒い右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
ビスクにヒストグラムの色を指定する	plt.hist(データ列, color='bisque')
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
双方向キューの要素をインプレースに反転する	deq.reverse()
散布図の上三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ベクトルと同じ大きさの空配列を作成する	np.empty_like(aArray)
文字列がリストの要素でないか	element not in aList
データフレームから指定された列のみ抽出する	df[[column]]
変数が無限大に近づく時、数式の極限値を求める	sympy.limit(e, z, oo)
データ列が正規分布からどれだけ尖っているか見る	ds.skew()
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
オブジェクトが数値か	isinstance(obj, (int,float))
エクセルデータファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
日付時刻データの曜日を使う	aDatetime.weekday()
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
折れ線グラフを半透明の一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
日付データが火曜日かどうか調べる	aDate.weekday() == 1
Pandasで、フォーマットfmtとしてデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format=fmt)
リストを黄色にする	f'\033[33m{value}\033[0m'
データフレームを列によってまとめたグループを使う	df.groupby(column)
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
データフレームを列の値毎にグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
▲マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^')
まとめてデータ列をValueMapで置き換える	ds.replace(ValueMap)
option: シアン色を用いる	color = 'cyan'
option: マーカーを▲に設定する	marker = '^'
日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
リスト内の要素が少なくともひとつ真	any(aList)
データフレームを複数の列の値によって集約する	df.groupby(columns)
デピンク色としてヒストグラムを描画する	plt.hist(データ列, color='deeppink')
データフレームのリストカラムの未入力値をモードに増やす	df[aList].fillna(df[aList].mode().iloc[0])
ひとつでも非英数字が文字列中に含まれるかどうか調べる	any(not c.isalnum() for c in s)
辞書の浅いコピーを生成する	aDict.copy()
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームのリストカラムの値が欠損値かどうか調べる	df[aList].isna()
回帰分析をニューラルネットで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ベクトルの合計値	np.sum(aArray)
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
現在が水曜日かどうか確認する	datetime.datetime.today().weekday() == 2
option: フォントの色をパープルに設定する	color = 'purple'
ヒストグラムをスラグレー色を使って描画する	plt.hist(データ列, color='slategray')
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
有理数を使用する	import fractions
部分文字列で文字列を分けた時の前半の文字列	s.partition(sub)[0]
散布図を黒いクロスマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
枠なしの凡例をグラフの中に加える	plt.legend(frameon=False)
インデント付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームを列の値によってグループ分けし、、合計を計算する	df.groupby(column).sum()
option: ネイビーにグラフの色を設定する	color = 'navy'
バイトオーダを用いる	sys.byteorder
散布図に左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
リストをn個にビン分割する	pd.cut(aList, n)
三二ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
文字列の開始位置以降に部分文字列が含まれる	s.find(sub, start) != -1
リストの全要素をクリアにする	aList.clear()
辞書から項目名で指定された値をポップする	aDict.pop(key)
option: フォントの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
データ列を二つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
ファイルパスのセパレータ記号を使う	os.sep
日付時刻データの日数を使う	aDatetime.day
ミディアムアクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
配列とリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
３つのデータフレームを縦方向に一つにまとめる	pd.concat([df, df2, df3], axis=0)
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
部分文字列で文字列の開始位置以降が始まる	s.startswith(sub, start)
イテラブルとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームから数値データのカラムのみ取り出す	df.select_dtypes('number')
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
BOMを付けてJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
TSVをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
柱状図を上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
データ列の未入力値を直後の値で埋める	ds.fillna(method='bfill')
リストとイテラブルについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
オリーブ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームの列の未入力値を中央値に設定する	df[col].fillna(df[col].median())
ベクトルにはいくつ要素が存在するか調べる	aArray.size
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
'A'列でデータフレームを昇順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: グラフの色をグリーンにセットする	color = 'green'
文字列が片仮名か確認する	('ァ' <= ch <= 'ン')
nを八進文字列に変換する	oct(n)[2:]
文字列を部分文字列で二つに区切って前半の文字列を見る	s.partition(sub)[0]
赤い下三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
タプルをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
アイボリー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
折れ線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
グラフの色調を指定する	sns.set(pallete=パレット名)
データ列の各データは何回出現するか見る	ds.value_counts()
浮動小数点数の小数点以下を丸める	round(x)
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
文字列中の部分文字列を新しい文字列に全部置き換える	s.replace(sub, newsub)
最小値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].min())
データ列を十の位で丸めて、整数型にする	ds.round(-1).astype(int)
黒い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図にポイント印を使用する	plt.scatter(データ列x, データ列y, marker='.')
行列の列ごとの最大を算出する	np.max(aArray, axis=0)
オブジェクトが文字列クラスのインスタンス	isinstance(obj, str)
横棒グラフをアイボリー色を用いて描画する	plt.barh(データ列x, データ列y, color='ivory')
二つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
線グラフの色をダークマゼンタにセットする	plt.plot(データ列x, データ列y, color='darkmagenta')
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
折れ線グラフに黒い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
値は集合に含まれるかどうか確認する	element in aSet
option: 色をグレーに設定する	color = 'grey'
小数点数がNaNか調べる	math.isnan(x)
データフレームが正規分布からどれだけ、歪んでいるか見る	df.kurt()
カウンタ同士で∪演算する	aCounter | aCounter2
リストを順に出力する	print(*aList)
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
行列の行ごとの平均を求める	np.mean(aArray, axis=1)
折れ線グラフの線種を破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
全要素を０で初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
データフレームがどの程度、分散しているか確認する	df.var()
折れ線グラフの上三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
option: カデットブルーにグラフの色を設定する	color = 'cadetblue'
配列とイテラブルの散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの列の欠損値を中央値で補う	df[col].fillna(df[col].median())
イテラブルからセット	set(iterable)
文字列の中のASCII限定として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
BOM付きとして書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
箱髭図を横に並べて描画する	plt.boxplot([データ列, データ列])
データ列をn個にビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
データフレームを２つの列によってで破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
列をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
option: スノー色を用いる	color = 'snow'
データフレームのグループ毎の平均値	df.groupby(column).mean()
数値を太字化する	f'\033[1m{value}\033[0m'
横棒グラフを白色として描画する	plt.barh(データ列x, データ列y, color='white')
青色でヒストグラムを描画する	plt.hist(データ列, color='blue')
option: フォントの色をミスティローズに変更する	color = 'mistyrose'
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='turquoise')
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームのリストカラムの欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
numpyを入れる	import numpy as np
線グラフをシエナ色を用いて描画する	plt.plot(データ列x, データ列y, color='sienna')
小数点数のk進対数	math.log(x, k)
実行結果を紫色化する	f'\033[35m{value}\033[0m'
データフレームを列によってグループ化する	df.groupby(column)
破線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashed')
上位集合か判定する	aSet.issuperset(aSet2)
ワーキングディレクトリ	os.getcwd()
ランダムに重複ありでn行をデータフレームからサンプリングする	df.sample(n, replace=True)
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
データフレームの指定した列名一覧の列のみ抽出する	df[columns]
二つの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
散布図に黒い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
データフレームのNaNを最頻値に指定する	df.fillna(df.mode().iloc[0])
文字列の末尾から部分文字列を見つける	s.rfind(sub)
データフレームの中の未入力値の数を数える	df.isna().sum()
折れ線グラフの右三角印の色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
行列の累積積を求める	np.cumprod(aArray)
文字列中に部分文字列が含まれないかどうか確認する	sub not in s
2を底とする実数の対数を求める	math.log2(x)
実行時に標準出力がパイプかどうか	not sys.stdout.isatty()
option: ダークオーキッドにフォントの色を変更する	color = 'darkorchid'
折れ線グラフのクロスマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
プロットを論文用に設定する	sns.set(context='paper')
ファイル全体を行単位で分割して読む	f.readlines()
多次元データをt-SNEとして濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
２次元リストをフラット化する	sum(aList)
マッピングの項目名を要素に設定する	aDict[key] = element
数列とリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
上限長nのキューをイテラブルから用意する	collections.deque(iterable, maxlen=n)
データフレームの上位25%を算出する	df.quantile(0.25)
双方向キューの末尾	deq[-1]
ヒストグラムを描画する	plt.hist(データ列)
列'A'と列'B'をキーにして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
文字列をケースを無視してパターンで区切る	re.split(pattern, s, flags=re.IGNORECASE)
ビン数を設定して度数分布図を描画する	plt.hist(データ列, bins=区関数)
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
文字列をカンマで区切り、、列挙する	s.split(',')
データフレームのインデックス名を、nameからname2に付け直す	df.rename(index={name: name2})
０で全要素を初期化した８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
イテラブルとリストの散布図を描いて、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムを折れ線プロットで描画する	plt.plot(df[column], df[column])
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図をスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='skyblue')
option: フォントの色をコーンズシルクに指定する	color = 'cornsilk'
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
配列とリストの散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームから型を選ぶ	df.select_dtypes(ty)
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
リストと配列の散布図を描き、左三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
双方向キューの中に要素は含まれてるか	element in deq
option: グラフの色をスカイブルーにセットする	color = 'skyblue'
データフレームの列の種類を見る	df.info()
文字列を部分文字列を用いて分割する	s.split(sub)
昇順にタプルの要素をソートする	sorted(aTuple, reverse=False)
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのカラムの中に日付データがある	df[col].isin([value])
黒い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのリストカラムを100の位で丸めて、整数にする	df[aList].round(-2).astype(int)
分類モデルを学習する	model.fit(説明変数, 目的変数)
option: マーカーを右三角に設定する	marker = '>'
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列はタプルの要素でないか調べる	element not in aTuple
表データを'A'列と'B'列ごとに集約して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
2つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
タプルの最後のn要素を除く	aTuple[:-n]
ヒストグラムを青緑色を用いて描画する	plt.hist(データ列, color='teal')
n掛けるn2	n * n2
列名リストごとにデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
ミントクリームにヒストグラムの色を変更する	plt.hist(データ列, color='mintcream')
nがn2以下、もしくは、n3以上か調べる	n <= n2 or n >= n3
2進数文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
表データの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
辞書から最後に追加したエントリをポップする	aDict.popitem()
列の重複組み合せを求める	itertools.combinations_with_replacement(iterable, n)
option: 文字列を分割記号で使う	sep = s
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
データフレームの指定された列をリストとして選ぶ	df[column].values.tolist()
全要素を1で初期化したベクトル	np.ones(要素数, dtype=np.int)
折れ線グラフの△マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
16進数文字列をバイナリにする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
nが一桁の数	-9 <= n <= 9
二つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
nを二進表現に変換する	bin(n)
二つの数値を表示する	print(value, value2)
データフレームを'A'列によって小さい順に整列する	df.sort_values(by='A', ascending=True)
データフレームのグループごとの最小値	df.groupby(column).min()
リストと数列の散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
空白で文字列を区切って列挙する	s.split()
線グラフをゴーストホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフをホットピンク色を使って描画する	plt.plot(データ列x, データ列y, color='hotpink')
降順に二つの列ででデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
折れ線グラフを使ってデータ列の変遷を可視化する	plt.plot(range(len(データ列)), データ列)
'A'列でデータフレームを並べる	df.sort_values(by='A')
リストとイテラブルについて散布図を描画し、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
日付時刻データが木曜日	aDatetime.weekday() == 3
方程式の解を求める	sympy.solve(e)
ダークカーキにヒストグラムの色を変更する	plt.hist(データ列, color='darkkhaki')
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
ゼロ埋めされた行列	np.zeros(要素数)
option: namesをカラム名に減らす	names = names
データ列を箱ひげ図を使って作図する	plt.boxplot(データ列)
文字列をカンマで区切って文字列リストに変換する	s.split(',')
ファイル名がCSVファイルかどうか調べる	filename.endswith('.csv')
文字列を複数行対応としてパターンで分割する	re.split(pattern, s, flags=re.MULTILINE)
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
双方向キューから最初の要素を削除する	deq.remove(element)
折れ線グラフの色をモカシンにセットする	plt.plot(データ列x, データ列y, color='moccasin')
散布図をrgbの右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
変数をプリントする	print(value)
数列と配列について散布図を描画し、、▽マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
Pandasで、データフレームのcollをフォーマットfmtでタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
データフレームを列で集計して、列の要約統計量を求める	df.groupby(column).describe()[column2]
ミディアムアクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategray')
データフレームのカラムを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: ブラックにグラフの色を指定する	color = 'black'
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
外れ値に強い回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
オブジェクトは整数クラスかどうか調べる	isinstance(obj, int)
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
昇順に破壊的に'A'列でデータフレームを並べる	df.sort_values(by='A', ascending=True, inplace=True)
グラフの描画で暗くカラーパレットを用いる	sns.set(pallete='dark')
数を実数で	x // y
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
タプルをクリアする	aDict.clear()
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
折れ線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームのカラムの中にいくつがあるか数える	df[col].isin([value]).sum()
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: ターコイズ色を用いる	color = 'turquoise'
カウンタ間で∪	aCounter | aCounter2
カンマで区切って2つの文字列をプリントする	print(value, value2, sep=',')
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
辞書を浅くコピーする	aDict.copy()
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
二つのカウンタの共通する値	aCounter & aCounter2
赤い丸マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ダーク・スラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
青緑色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
リストをビン数nでビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ゲインズボロ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームから重複する行を残さず、ドロップする	df.drop_duplicates(keep=False)
色名をからコードに変換する	matplotlib.colors.cnames[色名]
option: 青にグラフの色を設定する	color = 'blue'
コレクションを用いる	import collections
見やすいグラフを描画する準備をする	import seaborn as sns
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
ライトスチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
シーケンスに列を続けたイテラブル	itertools.chain(iterable, iterable2)
配列とリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
行列から重複を除いた配列を作る	np.unique(aArray)
配列をフラットにする	aArray.flatten()
UTF8としてファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
データ列がどの程度分散しているか確認する	ds.var()
option: 行を自動的な連番に設定する	index_col = None
option: オールドレースを使う	color = 'oldlace'
option: ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
option: フォントの色をダークグレーに変更する	color = 'darkgray'
グラフに格子線を付ける	plt.grid(True)
データフレームを列によって昇順に並べて更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
行列の最小を求める	np.min(aArray)
散布図のダイアモンドマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
数列とリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
綺麗なグラフを使う	import seaborn as sns
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
折れ線グラフをアリスブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: デピンク色を使用する	color = 'deeppink'
カテゴリ別でグループ化して、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列に漢字が含まれるか確認する	re.search('[\u4E00-\u9FD0]', s)
二つの数値をコロンで区切って出力する	print(value, value2, sep=':')
データフレームの列と列の相関行列ケンドール相関係数を用いて	df[[column, column2]].corr(method='kendall')
カラムのNaNを最小値で埋める	ds.fillna(ds.min())
散布図に青い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ミディアムパープルにヒストグラムの色を変更する	plt.hist(データ列, color='mediumpurple')
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフの色をミディアムパープルにする	plt.plot(データ列x, データ列y, color='mediumpurple')
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
散布図をrgbの三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
データフレームのリストカラムの欠損値をメディアンに指定する	df[aList].fillna(df[aList].median())
新しい文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
散布図の▽マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
２つの列で昇順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
文字列の右端から空白を取り除く	s.rstrip(' ')
イテラブルとリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
複数の列によってデータフレームをソートする	df.sort_values(by=column)
平均値付き箱髭図をプロットする	plt.boxplot(データ列, showmeans=True)
リストの最後にリストを追加して拡張する	aList.extend(aList2)
データフレームの列が文字列で終わる行を選択する	df[df[column].str.endswith(s)]
option: フォントの色をシエナに変更する	color = 'sienna'
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
option: スラッシュを区切りで使用する	sep = '/'
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
日付時刻データの月	aDatetime.month
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
オブジェクトに属性がある	hasattr(obj, プロパティ名)
データ列の未入力値を直後の値に設定する	ds.fillna(method='bfill')
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームのカラムをPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
箱ひげ図をプロットして、平均を追加する	plt.boxplot(データ列, showmeans=True)
辞書に要素を項目名として加える	aDict[key] = element
データフレームからn番目のカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
ロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: フォントの色を小麦色に変更する	color = 'wheat'
折れ線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフに大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
ミディアムスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
データフレームを列でソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
多次元データをt-SNEを用いてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームの列がxかつカラムがx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
文字列の右端から改行を取り除く	s.rstrip('\n')
イテラブルを文字列リストに変換して、空白で結合する	' '.join(map(str, iterable))
リストとデータ列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
プロットを使う準備をする	import matplotlib.pyplot as plt
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
ファイルをSJISを用いてオープンする]	open(filepath, encoding='shift_jis')
空の多重集合	collections.Counter()
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
option: スノーに色を設定する	color = 'snow'
部分文字列が文字列の開始位置と終了位置の間に存在するか調べる	s.find(sub, start, end) != -1
Pandasで、文字列を書式として日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
rgbに横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
入力ストリームからn文字、読み込む	f.read(n)
option: グラフの色をスラグレーに指定する	color = 'slategray'
文字列がPythonのキーワードか調べる	keyword.iskeyword(s)
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
option: ボックスチャートを横方向にする	vert = False
option: 印を丸に変更する	marker = 'o'
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
スプリンググリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
プログラムを強制的に終了する	sys.exit()
折れ線グラフの▽マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
nを二進数文字列に変換する	bin(n)[2:]
データフレームを表示するとき、表示できる行数をnに設定する	pd.set_option('display.max_rows', n)
列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
黒い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
nがn2で割り切れないかどうか調べる	n % n2 != 0
半透明の一点鎖線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
MSEを算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図をホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='white')
文字列が全てアルファベットか	s.isalpha()
スピアマンを使ってデータフレームのリストで指定された列の相関行列を求める	df[aList].corr(method='spearman')
最初のカテゴリーを無視してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
データフレームから指定されたデータ型の列名リストを使う	df.select_dtypes(型).columns
等差数列から整数乱数を求める	random.randrange(start, end, step)
色付きの破線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
部分文字列が文字列中に含まれる	sub in s
文字列の先頭でパターンにケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
nはn2と等しいか	n == n2
箱ひげ図を用いてデータ列を描画する	plt.boxplot(データ列)
浮動小数点数を実数で除する	x / y
散布図にrgbの大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
プロットの見栄えをデフォルトでいい感じに設定する	sns.set()
データフレームのリスト列の母標準偏差	df[aList].std(ddof=0)
データフレームのカラムのNaNをモードに設定する	df[col].fillna(df[col].mode().iloc[0])
データフレームを列によってソートして上の方n件を取り出す	df.sort_values(columns).head(n)
データフレームのリスト列が正規分布からどの程度、尖っているか調べる	df[aList].skew()
データ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
predicateFuncが真となるイテラブルの要素を消す	itertools.dropwhile(predicateFunc, iterable)
２つの文字列は同じかどうか	s == s2
xでカラムの欠損値を埋める	ds.fillna(x)
データフレームの中にいくつ欠損値があるか求める	df.isna().sum()
フクシア色としてヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
option: フォントの色をレベッカパープルに指定する	color = 'rebeccapurple'
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
nとn2が等しいかどうか調べる	n == n2
正規分布を用いて疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
辞書に別の辞書のエントリを追加する	aDict.update(aDict2)
option: マーカーを星に指定する	marker = '*'
option: フォントの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
二つのベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データ列と数列について散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
分子n分母mの分数を生成する	fractions.Fraction(numerator=n, denominator=m)
データフレームの指定した二つの列を抽出する	df[[column, column2]]
実数の複素数を計算する	complex(x)
ダークカーキ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
列を文字列リストに変換して、部分文字列を使って連結する	sub.join(map(str, iterable))
rgbの左三角マーカーをイテラブルとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: フォントの色をミディアムスレートブルーにセットする	color = 'mediumslateblue'
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
文字列の後ろから余分な改行を取り除く	s.rstrip()
表データの相関行列ピアソン相関係数を用いて	df.corr(method='pearson')
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
列をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ミッドナイトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームを複数の列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
オブジェクトは浮動小数点数クラスのインスタンス	isinstance(obj, float)
オブジェクトがリストかタプルかどうか確認する	isinstance(obj, (list)
二つの集合が集合と交わりを持たない	aSet.isdisjoint(aSet2)
ネイビー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
散布図の下三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
マッピングにキーワード引数として更新する	aDict.update(**kwargs)
黒いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
プラットホームのエンコーディングを知る	sys.getdefaultencoding()
クラス分類の感度を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ファイルから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
ふたつの集合は集合と互いに素	aSet.isdisjoint(aSet2)
ダークグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
文字列が全て十進数字かどうか確認する	s.isdecimal()
配列とイテラブルについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ロードされたモジュールのリスト	sys.modules
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
降順に複数の列によってでデータフレームをソートする	df.sort_values(by=column, ascending=False)
プラム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
縦軸の目盛りを表示しない	plt.yticks([])
符号なし８ビット整数型のゼロ埋めされた配列を初期化する	np.zeros(要素数, dtype=np.uint8)
線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームの重複していない行のみを選択する	df[not df.duplicated(keep=False)]
シーケンスの要素を集合に追加する	aSet.update(iterable)
データ列の折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームを列によって降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
タプルのn番目のを見る	aTuple[n]
赤い一点鎖線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
データフレームのリストカラムの未入力値を中央値で埋める	df[aList].fillna(df[aList].median())
二つの関係が部分集合かどうか調べる	aSet.issubset(aSet2)
ゲインズボロ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームのリストカラムの相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
option: ディムグレーを使う	color = 'dimgrey'
nがn2で割り切れるかどうか調べる	n % n2 == 0
列のユニークな値	ds.unique()
タプルの合計	sum(aTuple)
折れ線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
y座標の目盛の値を変更する	plt.yticks(目盛りの値リスト)
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
option: 上三角マーカーを使う	marker = '^'
青い点線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
ファイルをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
option: 色をチョコレートにする	color = 'chocolate'
エクセルデータファイルからエクセルデータを読み込む	pd.read_excel(filename)
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのカラムのpercentパーセンタイルを求める	df[col].quantile(percent/100)
option: フォントの色をゴールドに変更する	color = 'gold'
データをL2ノルムとして正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
分類モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
双方向キューのn番目の値	deq[n]
線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ビン数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
日付データは日付データより前	aDate < aDate2
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
縦に2つのデータフレームを連結する	pd.concat([df, df2], axis=0)
ファイルを文字コードtextを使って開く]	open(filepath, encoding=text)
マッピングをJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False)
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
コマンドの第二引数を調べる	sys.argv[1]
option: 菱形マーカーを使う	marker = 'D'
データフレームのカラムの欠損値を直前の値で補う	df[col].fillna(method='ffill')
マッピングのキーの一覧	aDict.keys()
オブジェクトのプロパティの値を見る	getattr(obj, プロパティ名)
線形回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
部分文字列で文字列が終わるかどうか調べる	s.endswith(sub)
パープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
データフレームの欠損値を前の行の値で埋める	df.fillna(method='ffill')
一方に含まれ、他方に含まれない集合を計算する	aSet.difference(aSet2)
データフレームのカラム名一覧で指定された列を落とす	df.drop(columns, axis=1)
二つの集合の差集合	aSet.difference(aSet2)
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
論理値型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int32)
標準入力から1行読み込んで改行を取り除く	sys.stdin.readline().rstrip()
列をリストを境界値として分割する	pd.cut(ds, aList)
縦棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームを列によって並べ、、更新する	df.sort_values(by=column, inplace=True)
行列の平均値	np.mean(aArray)
表データを各列と列の組み合わせ毎にグループ化して、標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
ライム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
散布図を黒い下三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='v', c='k')
３つの実行結果を出力する	print(value, value2, value3)
option: 箱髭図に平均を加える	showmeans = False
リストを昇順にソートする	sorted(aList, reverse=True)
データフレームのカラムの欠損値を直後の値に増やす	df[col].fillna(method='bfill')
数値をシアン化する	f'\033[36m{value}\033[0m'
文字列を最後の部分文字列で二つに区切って、前半の文字列を見る	s.rpartition(sub)[0]
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
option: グラフの色をオレンジレッドに指定する	color = 'orangered'
データ列の中の未入力値の合計をカウントする	ds.isna().sum()
実数の逆双曲線正接を計算する	math.atanh(x)
多次元データを特異値分解を用いて淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
データフレームを列で並べ直して、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
表を各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
JSONLファイルにデータフレームを書き込む	df.to_excel(filename)
option: グレーを使う	color = 'grey'
凡例を最適な位置に表示する	plt.legend(loc='best')
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=[column, column2])
PandasでUNIX時間のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
列によってデータフレームを並べて、下の方n件を取り出す	df.sort_values(columns).tail(n)
データフレームを列によってで降順にソートする	df.sort_values(by=column, ascending=False)
option: 黄緑色を使う	color = 'chartreuse'
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
列でデータフレームをグループ化し要約統計量を求める	df.groupby(column).describe()
ヒストグラムの色をダークスラテグレーにセットする	plt.hist(データ列, color='darkslategray')
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
n個に等間隔で列をビン分割する	pd.cut(ds, n)
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
データ列の散らばりを作図する	plt.scatter(データ列x, データ列y)
データフレームを二つの列によって小さい順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
非小文字が文字列中に含まれる	any(not c.islower() for c in s)
折れ線グラフの四角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
option: グラフの色をブラウンに変更する	color = 'brown'
浮動小数点数を小数点以下で丸める	round(x, n)
分類モデルの予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
グラフで使う横軸の名称を指定する	plt.xlabel('x軸ラベル')
リストと配列について散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームのリストカラムの中にいくつ日付データが含まれるか数える	df[aList].isin([value]).sum()
ゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
メディアンでデータ列のNaNを埋める	ds.fillna(ds.median())
大きい順に'A'列ででデータフレームをソートする	df.sort_values(by='A', ascending=False)
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
セパレータで文字列を区切って列挙する	s.split(sub)
カラムのpercentパーセンタイルを求める	ds.quantile(percent/100)
option: ライトイエローを使う	color = 'lightyellow'
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
ブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
TSVファイルをデータフレームとして読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
実数の余弦の逆数を計算する	math.acos(x)
オブジェクトの無限イテラブル	itertools.repeat(element)
option: グラフの色を紺碧に指定する	color = 'azure'
カンマ区切りのファイルを読み込む	pd.read_csv(filename, sep=',')
文字列を末尾から空白で分割する	s.rsplit()
ヒストグラムをコーンフラワーブルー色を使って描画する	plt.hist(データ列, color='cornflowerblue')
プロットの色をパステル調にする	sns.set(pallete='pastel')
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgrey')
キーがタプル上で定義済みかどうか確認する	key in aDict
グラフの色を濃くする	sns.set(pallete='deep')
折れ線グラフの色をペールグリーンにする	plt.plot(データ列x, データ列y, color='palegreen')
データフレームのリスト列のNaNを平均値に減らす	df[aList].fillna(df[aList].mean())
グラフのx座標を対数に変更する	plt.xscale('log')
リストのイミュータブルな集合	frozenset(iterable)
カウンタから最も頻出の値の件数を求める	aCounter.most_common()[1]
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
文字列の開始位置から終了位置までの範囲で部分文字列の出現	s.count(sub, start, end)
ヒストグラムの色をロージーブラウンにする	plt.hist(データ列, color='rosybrown')
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
箱ひげ図を描画し、、平均線を加える	plt.boxplot(データ列, meanline=True)
nが3の倍数か	n % 3 == 0
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
第2コマンド引数	sys.argv[1]
散布図でデータフレームを可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
上位集合もしくは等しい	aSet > aSet2
イテラブルからカウンタを作成する	collections.Counter(iterable)
データ列を10の位で四捨五入する	ds.round(-1)
ゼロ埋めした複素数型のベクトル	np.zeros(要素数, dtype=bool)
文字列を最後の部分文字列で二分し、後半の文字列を求める	s.rpartition(sub)[-1]
オブジェクトがクラスかどうか調べる	isinstance(obj, クラス)
実数に浮動小数点数を加える	x + y
グラフを濃くする	sns.set(pallete='deep')
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームを列で並べて、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
option: サドルブラウンにフォントの色を設定する	color = 'saddlebrown'
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データ列を千の位で四捨五入して整数型にする	ds.round(-3).astype(int)
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
折れ線グラフに星印を用いる	plt.plot(データ列x, データ列y, marker='*')
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフを濃いシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
リストとリストについて散布図を描画してマーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
リストの先頭を除く	aList[1:]
データ列の未入力値を平均で埋める	ds.fillna(ds.mean())
線グラフをダークスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
小数点数のcosを計算する	math.cos(x)
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
棒グラフを黄緑色を用いて描画する	plt.bar(データ列x, データ列y, color='chartreuse')
二つの最大値	max(x, y)
３自然数の最大公約数	math.gcd(n, n2, n3)
ヒストグラムの色をピーチパフに指定する	plt.hist(データ列, color='peachpuff')
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
n番目のカラムをインデックスとしてCSVTSVファイルを読み込む	pd.read_csv(filename, index_col=n)
線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
散布図に▽マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
二つの文字列をタブで区切って出力する	print(value, value2, sep='\t')
実数の平方根を計算する	math.sqrt(x)
option: 黄色を使う	color = 'yellow'
黄色で数値をプリントする	print(f'\033[33m{value}\033[0m')
ライトゴールドロディイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの指定された４列だけ抽出する	df[[column, column2, column3, column4]]
データフレームの列を10の位で四捨五入して整数型にする	df[col].round(-1).astype(int)
辞書から項目名の値かもしくは要素を参照する	aDict.get(key, element)
最大値でデータフレームの欠損値を置換する	df.fillna(df.max())
ローングリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームを各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
八進文字列を整数にする	int(s, 8)
配列の差を調べる	aArray - aArray2
赤いバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線プロットを描画して、カラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
リストの要素を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームの列の欠損値を平均値に指定する	df[col].fillna(df[col].mean())
データフレームの信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
データフレームのリストカラムの中に文字列と日付データがいくつあるか求める	df[aList].isin([value, value2]).sum()
データラベルをグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
データ列とリストについて散布図を描画し、、△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図に黒い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフをダークシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
整数nのバイト長を見る	(n.bit_length() + 7) // 8
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームを列によってグループ化して平均値を求める	df.groupby(column).mean()
複数の列の値によってデータフレームをまとめたグループ	df.groupby(columns)
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
データ列の値は欠損値かテストする	ds.isna()
赤い破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
切片なしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
option: グレーにグラフの色を変更する	color = 'gray'
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームのリスト列の第二四分位数	df[aList].median()
横棒グラフをチョコレート色を使って描画する	plt.barh(データ列x, データ列y, color='chocolate')
データフレームを表示するとき、小数点以下をn桁にする	pd.set_option('precision', n)
変数について数値のインテグラルを求める	sympy.integrate(e, z)
ヒストグラムの色をパールゴールデンロッドにセットする	plt.hist(データ列, color='palegoldenrod')
リストとリストについての散布図に三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
データフレームの行を範囲指定して選択する	df[start:end]
ハイパボリック・コサインの逆数	math.acosh(x)
option: パープル色を用いる	color = 'purple'
ヒストグラムの色をシエナに変更する	plt.hist(データ列, color='sienna')
option: ダークグリーンにフォントの色を設定する	color = 'darkgreen'
データフレームを各列毎にグループ分けし、、列の平均値を求める	df.groupby(column)[column2].mean()
クラスは名前付きタプルか	issubclass(C, tuple)
データフレームのリストで指定されたカラムのヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
ピアソンの相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
データフレームの列と列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
ダークサーモン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
最大長を指定して両端キュー	collections.deque(maxlen=n)
データフレームの未入力値をxで埋める	df.fillna(x)
nが奇数	n % 2 == 1
データフレームを各列毎にグループ化して、文字列という名前のグループを使う	df.groupby(column).get_group(s)
行を用いてデータフレーム全体を並べる	df.sort_index()
データ列の離れ具合をグラフ化する	sns.residplot(x=データ列, y=データ列)
データフレームのリスト列のpercent分位数を求める	df[aList].quantile(percent/100)
データ列と数列について散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームのリストカラムを丸めて、整数にする	df[aList].round().astype(int)
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
列をキーにして２つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
ビスク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
オブジェクトがリストに含まれないか調べる	element not in aList
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
自然数個のものからk個取り出した時の並べ方	math.perm(n, k)
折れ線グラフの△マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
表データからカテゴリデータの列名一覧を求める	df.select_dtypes('object').columns
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
イテラブルと列の直積	itertools.product(iterable, iterable2)
option: フォントの色をターコイズに指定する	color = 'turquoise'
パールゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: ライトグリーンに色を指定する	color = 'lightseagreen'
フローラルホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='floralwhite')
要素がマッピングの値に含まれていないかテストする	element not in aDict.values()
２つのデータフレームを異なる列をキーにして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ファイルの絶対ファイルパスを見る	os.path.abspath(filepath)
プラットホームがリナックスかどうか調べる	sys.platform.startswith('linux')
nがn2以上かどうか調べる	n >= n2
データフレームの列名を指定した名前リストに置き換える	df.columns = columns
横棒グラフをバイオレット色で描画する	plt.barh(データ列x, データ列y, color='violet')
既存のファイルをSJISとして追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
辞書から項目名の値	aDict.get(key)
ひとつでも数字が文字列内に含まれる	any(c.isdigit() for c in s)
日付時刻データの分	aDatetime.minute
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
option: データ型として３2ビット整数型を使う	dtype = np.int16
マッピングのキーを列挙する	list(aDict)
日付データが日付データと同時	aDate == aDate2
ファイルをオープンして]バイナリ書き込みストリームを見る	open(filepath, mode='wb')
散布図を赤色として描画する	plt.scatter(データ列x, データ列y, color='red')
最大最小から行列を作る	np.linspace(最小値, 最大値, 要素数)
点線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
折れ線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: ビスクにフォントの色を指定する	color = 'bisque'
データフレームから型リストデータ型の列を抽出する	df.select_dtypes(include=typeList)
新しい文字列として文字列中のパターンを置換する	re.sub(pattern, newsub, s)
円プロットの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
データフレームのカラムの文字列を未入力値にする	df[col].replace(s, np.nan)
タプルをn回、接続する	aTuple * n
文字列を黒色で表示する	print(f'\033[30m{value}\033[0m')
ボックスチャートを横方向にする	plt.boxplot(データ列, vert=False)
ヒストグラムのビンを設定する	plt.hist(データ列, bins=区関数)
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
シルバー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
option: フォントの色をイエローグリーンに設定する	color = 'yellowgreen'
データフレームから列を３つのみ選択する	df[[column, column2, column3]]
option: ダークシアグリーンにグラフの色をセットする	color = 'darkseagreen'
コーラルにヒストグラムの色を指定する	plt.hist(データ列, color='coral')
行列間の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
列'A'と列'B'をキーとして2つの表データを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
'A'列によってデータフレームをまとめたグループを使う	df.groupby('A')
キーがマップ上で未定義か調べる	key not in aDict
クラス分類をアンサンブル学習で行う	sklearn.ensemble.VotingClassifier()
リストと配列の散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
ひとつでも大文字が文字列内にあるか確認する	any(c.isupper() for c in s)
組をひとつ飛ばしで得る	aTuple[::2]
option: ダークグリーン色を使用する	color = 'darkgreen'
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
配列として列を抽出する	df[column].values
大文字・小文字を無視してあらかじめパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
正規分布のパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
文字列の先頭から空白やタブを除去する	s.lstrip()
ヒストグラムを実線で描く	plt.hist(データ列, linestyle='solid')
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
散布図のマーカーの太さを指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: ライトグレー色を使用する	color = 'lightgrey'
文字列の接尾辞は部分文字列か調べる	s.endswith(sub)
最頻値でデータ列の欠損値を補う	ds.fillna(ds.mode().iloc[0])
コーンズシルクにヒストグラムの色を指定する	plt.hist(データ列, color='cornsilk')
option: ライトスカイブルーに色を変更する	color = 'lightskyblue'
文字列を緑色で表示する	print(f'\033[32m{value}\033[0m')
回帰分析を確率的勾配降下で行う	model = sklearn.linear_model.SGDRegressor()
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
入力ストリームから1文字読み込む	f.read(1)
データフレームの列の要約統計量	df[col].describe()
データフレームをCSV形式としてJSONLファイルに書き込む	df.to_csv(filename)
n2がnより大きく、かつ、n3未満	n < n2 and n2 < n3
整数nがタプルの一つであるかどうか調べる	n in aTuple
option: フォントの色をベージュに変更する	color = 'beige'
列をリストにする	df[column].values.tolist()
文字列の開始位置番目と終了位置番目の間に部分文字列がない	s.find(sub, start, end) == -1
BOM付きとしてファイルをオープンする]	open(filepath, encoding='utf_8_sig')
プログラムの実行をエラーとして終える	sys.exit(1)
データフレームを複数の列でソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
文字列の先頭が部分文字列か調べる	s.startswith(sub)
Pandasでデータ列の数値時刻からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
カテゴリでグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
折れ線グラフをタン色を使って描画する	plt.plot(データ列x, データ列y, color='tan')
option: オレンジを使う	color = 'orange'
カテゴリデータをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
折れ線グラフとしてデータ列を作図する	plt.plot(データ列x, データ列y)
横棒グラフをオリベドラブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: アンティークホワイト色を使用する	color = 'antiquewhite'
ファイルをバイナリ書き込みモードで開き]、fとする	f = open(filepath, mode='wb')
外れ値に強いクラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
Pandasで、文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
タプルの平均値を算出する	sum(aTuple)/len(aTuple)
プロットの描画で明るく色テーマを使う	sns.set(pallete='bright')
縦棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
スタックをイテラブルから新規生成する	collections.deque(iterable)
NULLに等しい値	None
データ列間の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
データ列が正規分布に従うかどうか調べる	scipy.stats.shapiro(データ列)
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
データ列の折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
TSVファイルでJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
文字列の先頭から空白を除去する	s.lstrip(' ')
度数分布図を描画し、、ビン数を変更する	plt.hist(データ列, bins=区関数)
現在の曜日を整数で見る	datetime.datetime.today().weekday()
'A'列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby('A').describe()
データフレームの列の中に文字列と文字列がある	df[col].isin([value, value2])
散布図を珊瑚色で描画する	plt.scatter(データ列x, データ列y, color='coral')
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
多次元データを特異値分解を用いてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
折れ線グラフを色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
空の集合を使う	set()
エクセルデータファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
赤いポイントマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
リストを文字列リストに変換して、カンマで結合する	','.join(map(str, iterable))
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
ライトグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
数列とリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
赤い右三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
プラットホームがMacOSか	sys.platform.startswith('darwin')
オブジェクトが辞書クラスのインスタンスかどうか	isinstance(obj, dict)
タプルの値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
昇順に破壊的に列によってデータフレームを並べる	df.sort_values(by=column, ascending=True, inplace=True)
実数の仮数を求める	math.frexp(x)[0]
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
散布図をrgbの▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームを各列毎にグループ化し、文字列というグループの個数を求める	df.groupby(column).size()[s]
リストとイテラブルを連結する	itertools.chain(iterable, iterable2)
三変数の最大値を求める	max(x, y, z)
オブジェクトの型を使う	type(obj)
option: シスル色を用いる	color = 'thistle'
アリスブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
双方向キューの要素数	len(deq)
nが5の倍数かどうか確認する	n % 5 == 0
option: n番目のカラムを行に設定する	index_col = n
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
データ列は何月か見る	ds.dt.month
option: ダークレッド色を使用する	color = 'darkred'
テキストファイルファイル名がか判定する	filename.endswith('.txt')
タイムスタンプデータが日曜日か	aDatetime.weekday() == 6
ヒストグラムの色をホワイトに指定する	plt.hist(データ列, color='white')
文字列が組の要素かどうか	element in aTuple
行列の転置行列を計算する	aArray.T
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: フォントの色をダークスレートブルーに指定する	color = 'darkslateblue'
グリーンイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームのリストカラムの75パーセンタイル	df[aList].quantile(0.75)
書き込み用にファイルをオープンする]	open(filepath, mode='w')
ユークリッド距離を計算する	math.dist(point, point2)
黒い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
パールゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
ライトシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
値を双方向キューのn番目に挿入する	deq.insert(n, element)
データフレームの中のカラムをビン数nとしてビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: フォントの色をモカシンに指定する	color = 'moccasin'
リストとデータ列についての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
文字列を別の文字列で置き換える	s.replace(sub, newsub)
ファイルを全て読む	f.read()
要素一つのタプル	(element,)
データフレームのリストカラムのNaNを前の値に設定する	df[aList].fillna(method='ffill')
数値の積分を行う	sympy.integrate(e)
ミントクリーム色としてヒストグラムを描画する	plt.hist(データ列, color='mintcream')
行列の行ごとの合計値	np.sum(aArray, axis=1)
キューが空でないか調べる	len(deq) != 0
ダークシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
カテゴリで色分けしてデータフレームをにバイオリン図を用いて可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
赤い三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
option: 色をライトグリーンに設定する	color = 'lightgreen'
データフレームの全カラムの散らばりを図示する	sns.pairplot(df)
点線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
データフレームの列概要	df.info()
ミディアムスプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームの列の最頻値	df[col].mode()
データフレームのそれぞれのグループ毎の合計を計算する	df.groupby(column).sum()
各列毎に表データをグループ化して、列の個数を求める	df.groupby(column)[column2].count()
散布図をrgbのダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
黒いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
10を底とする実数の対数を計算する	math.log10(x)
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
option: グラフの色を赤にセットする	color = 'red'
ヒストグラムを3つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
小数点数の双曲線正接の逆数	math.atanh(x)
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
文字列リストにシーケンスを変換して、'改行で連結する	'\n'.join(map(str, iterable))
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームを複数の列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
リストとデータ列について散布図を描画して丸マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
値を青色でプリントする	print(f'\033[34m{value}\033[0m')
文字列中にひとつでも非空白があるかどうか	any(not c.isspace() for c in s)
折れ線グラフを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームを２つの列によって整列して、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
カラーコードを用いて折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: ダークブルーに色を設定する	color = 'darkblue'
棒グラフをコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='coral')
スピアマン相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='spearman')
日付時刻データは何月か知る	aDatetime.month
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
小文字を全部見る	string.ascii_lowercase
データフレームを二つの列によってグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
組の最初のn要素を捨てる	aTuple[n:]
値を赤色化する	f'\033[31m{value}\033[0m'
イテラブルとデータ列について散布図を描画して、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列中のタブ文字をn個の空白に置き換える	s.expandtabs(tabsize=n)
Pandasでデータ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームの列を1000の位で丸める	df[col].round(-3)
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データ列の中に日付データがあるかどうか調べる	ds.isin([value])
整数の並べ方の総数	math.perm(n)
散布図に▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
散布図に赤い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
組を順番付けする	enumerate(aTuple)
新しいヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
空の部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)

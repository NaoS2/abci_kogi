変数をプリントする	print(value)
三つの値を順にプリントする	print(value, value2, value3)
二つの変数を改行せずにプリントする	print(value, value2, end='')
リストの値のみプリントする	print(*aList)
＜オプション＞カンマをセパレータで用いる	sep = ','
＜オプション＞コロンを区切りで用いる	sep = ':'
＜オプション＞改行を区切りで使う	sep = '\n'
二つの変数をタブで区切って出力する	print(value, value2, sep='\t')
２つのリストをコロンで区切って表示する	print(value, value2, sep=':')
２つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
二つの実行結果を改行で区切ってプリントする	print(value, value2, sep='\n')
文字列で区切って２つの文字列を出力する	print(value, value2, sep=s)
ハローワールドをプリントする	print('Hello World')
黒色で実行結果をプリントする	print(f'\033[30m{value}\033[0m')
赤色で変数を表示する	print(f'\033[31m{value}\033[0m')
リストを緑色で表示する	print(f'\033[32m{value}\033[0m')
黄色で数値をプリントする	print(f'\033[33m{value}\033[0m')
実行結果を青色でプリントする	print(f'\033[34m{value}\033[0m')
文字列を紫色でプリントする	print(f'\033[35m{value}\033[0m')
文字列を水色でプリントする	print(f'\033[36m{value}\033[0m')
太字でリストをプリントする	print(f'\033[1m{value}\033[0m')
変数をアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
値を黒色化する	f'\033[30m{value}\033[0m'
文字列を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
実行結果を赤色化する	f'\033[31m{value}\033[0m'
文字列を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
リストを緑色にする	f'\033[32m{value}\033[0m'
変数を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
値を黄色にする	f'\033[33m{value}\033[0m'
リストを青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
文字列を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
変数をマゼンタにする	f'\033[35m{value}\033[0m'
実行結果を水色にする	f'\033[36m{value}\033[0m'
リストを白色で表示できる文字列にする	f'\033[37m{value}\033[0m'
実行結果を白色化する	f'\033[37m{value}\033[0m'
文字列を太文字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
数値を太字化する	f'\033[1m{value}\033[0m'
数値をアンダーライン付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
文字列を下線付き化する	f'\033[4m{value}\033[0m'
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
xが真	bool(x)
複素数	complex(x, y)
二数の最大値	max(x, y)
２変数の最小値	min(x, y)
三変数の最も大きい値	max(x, y, z)
カウンタを使う	import collections
双方向キュー	collections.deque()
列から両端キューを作る	collections.deque(iterable)
シーケンスを双方向キューにする	collections.deque(iterable)
最大長を指定して、キューを作る	collections.deque(maxlen=n)
最大長nの両端キューを作成する	collections.deque(maxlen=n)
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
最大長nの両端キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
スタックの最初に値を入れる	deq.appendleft(element)
両端キューに要素をenqueueする	deq.appendleft(element)
要素を双方向キューの最後に入れる	deq.append(element)
要素をキューにプッシュする	deq.append(element)
双方向キューの先頭に列の各データを順に入れる	deq.extendleft(iterable)
双方向キューの末尾に列の各値を追加する	deq.extend(iterable)
数値を両端キューのn番目に挿入する	deq.insert(n, element)
要素を双方向キューの先頭から削除する	deq.popleft()
双方向キューをデキューする	deq.popleft()
キューの末尾から要素を取り除く	deq.pop()
スタックから要素を取り除く	deq.remove(element)
キューを全て取り除く	deq.clear()
n個分キューの要素を右に輪番で回す	deq.rotate(n)
左にスタックの順序をn個分ローテンションする	deq.rotate(-n)
両端キューの最大長を使う	deq.maxlen
両端キューの要素数	len(deq)
キューは空か調べる	len(deq) == 0
キューは空でないか調べる	len(deq) != 0
キューの中に要素が含まれてるか調べる	element in deq
双方向キューの先頭の要素を使う	deq[0]
キューの右の要素を見る	deq[-1]
双方向キューのn番目の要素を使う	deq[n]
キューのstart〜endの要素を見る	collections.deque(itertools.islice(deq, start, end))
デックのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
キュー中の値のインデックス	deq.index(element)
両端キュー中の数値の出現数をカウントする	deq.count(element)
インプレースにキューの要素を反転する	deq.reverse()
空の計数器	collections.Counter()
カウンタをリストから作成する	collections.Counter(iterable)
辞書から計数器を新規生成する	collections.Counter(aDict)
カウンタのそれぞれのキーをその出現回数だけ列挙する	aCounter.elements()
カウンタを高頻度方から列挙する	aCounter.most_common()
少ない順番にカウンタを列挙する	aCounter.most_common()[::-1]
カウンタのKトップを列挙する	aCounter.most_common(k)
カウンタの最頻出な要素を計算する	aCounter.most_common()[0]
カウンタから最も頻出な要素の件数を求める	aCounter.most_common()[1]
イテラブルを回数してカウンタを更新する	aCounter.update(iterable)
イテラブルをカウントしてカウンタから減らす	aCounter.subtract(iterable)
カウンタの値のカウント	aCounter[element]
カウンタのユニークな要素を列挙する	list(aCounter)
カウンタをセットにする	set(aCounter)
カウンタの積集合	aCounter & aCounter2
２つのカウンタの共通する要素	aCounter & aCounter2
カウンタ同士で和集合	aCounter | aCounter2
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
カウンタ同士で∪演算する	aCounter | aCounter2
クラス名は名前付きタプルか	issubclass(C, tuple)
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ルートのチェーンマップを作る	collections.ChainMap()
タプルを階層化辞書に変換する	collections.ChainMap(aDict)
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
本日の日付時刻を求める	datetime.datetime.now()
日付と時間からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列をISO8601形式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
今日のローカルな日付時刻	datetime.datetime.today()
現在の日付	datetime.date.today()
タイムスタンプデータの年数	aDatetime.year
今日の年数	datetime.datetime.today().year
本日の月	datetime.datetime.today().month
タイムスタンプデータの日	aDatetime.day
日付データの曜日を整数で見る	aDate.weekday()
日付時刻データが月曜日	aDatetime.weekday() == 0
日付データが月曜日か判定する	aDate.weekday() == 0
今日が月曜日か	datetime.datetime.today().weekday() == 0
日付時刻データが火曜日か	aDatetime.weekday() == 1
本日が水曜日かどうか判定する	datetime.datetime.today().weekday() == 2
日付時刻データが木曜日かどうか調べる	aDatetime.weekday() == 3
現在が木曜日か	datetime.datetime.today().weekday() == 3
タイムスタンプデータが金曜日か	aDatetime.weekday() == 4
本日が金曜日	datetime.datetime.today().weekday() == 4
日付時刻データが土曜日	aDatetime.weekday() == 5
本日が土曜日	datetime.datetime.today().weekday() == 5
タイムスタンプデータが日曜日	aDatetime.weekday() == 6
日付データが日曜日かテストする	aDate.weekday() == 6
本日をタプルにする	datetime.datetime.today().timetuple()
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
現在をISO形式の文字列にする	datetime.datetime.today().isoformat()
今日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
日付時刻データの時間	aDatetime.hour
現在の時間数を見る	datetime.date.today().hour
現在の分数を使う	datetime.date.today().minute
日付時刻データからn週間分引く	aDatetime - datetime.timedelta(weeks=n)
日付時刻データにn日分、加える	aDatetime + datetime.timedelta(days=n)
日付データにn日を足す	aDate + datetime.timedelta(days=n)
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
日付時刻データにn時間分加える	aDatetime + datetime.timedelta(hours=n)
タイムスタンプデータからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
日付時刻データからn分、引く	aDatetime - datetime.timedelta(minutes=n)
タイムスタンプデータにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
日付時刻データがタイムスタンプデータより先か	aDatetime < aDatetime2
日付時刻データは日付時刻データより後ろかどうか調べる	aDatetime > aDatetime2
日付データが日付データより後ろか	aDate > aDate2
日付時刻データはタイムスタンプデータと同時か調べる	aDatetime == aDatetime2
日付データが日付データと同時か	aDate == aDate2
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
日付時刻データと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()//60
変数名をキーとしてマッピング	dict(name=element)
タプルのキーの値を得る	aDict[key]
タプルのキーを列挙する	list(aDict)
辞書のエントリ数	len(aDict)
辞書の全をクリアする	aDict.clear()
タプルの浅いコピーを作る	aDict.copy()
辞書から項目名の値を得る	aDict.get(key)
マッピングの項目名に対応した値	aDict.get(key)
辞書から項目名の値をエラーなく見る	aDict.get(key, None)
マッピングから項目名の値か、もしくは要素を見る	aDict.get(key, element)
項目名がマップに存在するか判定する	key in aDict
キーがタプル上で定義済みかどうか	key in aDict
辞書にキーが存在するかどうか調べる	key not in aDict
マップ上で項目名が未定義かどうか調べる	key not in aDict
マッピングのキーとその項目を列挙する	aDict.items()
辞書のキーとその項目をペアとして取り出す	aDict.items()
タプルのキーを列挙する	aDict.keys()
マップのキーの一覧	aDict.keys()
辞書の項目を列挙する	aDict.values()
マッピングのの一覧	aDict.values()
要素がマッピングの値として含まれているかどうか調べる	element in aDict.values()
要素がマッピングの値に含まれていないか調べる	element not in aDict.values()
マップのキーを要素に変更する	aDict[key] = element
マッピングに要素をキーとして加える	aDict[key] = element
マップに項目名がないとき、要素を追加する	aDict.setdefault(key, element)
辞書にマッピングのエントリを更新する	aDict.update(aDict2)
マッピングに項目名ワード引数として加えて、更新する	aDict.update(**kwargs)
マッピングからキーで指定された項目を取り出す	aDict.pop(key)
マッピングから最後の項目をポップする	aDict.popitem()
二つのリストから辞書を作成する	dict(zip(aList, aList2))
マッピングをコピーする	dict(aDict)
タプルのコピー	dict(aDict)
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ファイル名のセパレータ記号	os.sep
ディレクトリを使う	os.getcwd()
カレントワーキングディレクトリをfilepathにする	os.chdir(os.dirname(filepath))
ファイルのファイル名を見る	os.path.basename(filepath)
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
ファイルパスが存在するか調べる	os.path.exists(filepath)
ファイルがないか調べる	not os.path.exists(filepath)
スクリプトファイルのパス	os.path.abspath(__file__)
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ファイルからストリームをオープンして]fileとする	file = open(filepath)
ファイルパスを読み込みモードでオープンする]	open(filepath, mode='r')
ファイルパスをバイナリ用にオープンする]	open(filepath, mode='rb')
ファイルをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
ファイルパスを書き込みモードとしてオープンする]	open(filepath, mode='w')
ファイルをオープンして]書き込みストリームを見る	open(filepath, mode='w')
ファイルパスをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
ファイルをオープンして]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
ファイルを追加モードとして開く]	open(filepath, mode='a')
ファイルをオープンして]、追加ストリームを見る	open(filepath, mode='a')
ファイルを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
ファイルから読み込みストリームを開き]、fとする	f = open(filepath, mode='r')
ファイルパスをバイナリ用に開き]、fとする	f = open(filepath, mode='rb')
ファイルパスからバイナリストリームを開き]、fとする	f = open(filepath, mode='rb')
ファイルを書き込みモードを使ってオープンして]、fとする	f = open(filepath, mode='w')
ファイルパスをバイナリ書き込み用にオープンして]fとする	f = open(filepath, mode='wb')
ファイルパスを追加用にオープンして]、fとする	f = open(filepath, mode='a')
＜オプション＞バイナリモードに変更する	mode = 'rb'
＜オプション＞書き込み用に設定する	mode = 'w'
＜オプション＞追加用に設定する	mode = 'a'
UTF8としてファイルをオープンする]	open(filepath, encoding='utf-8')
ファイルをSJISで開く]	open(filepath, encoding='shift_jis')
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
文字コードtextでファイルをオープンする]	open(filepath, encoding=text)
ファイルを文字列の示す文字コードでオープンする]	open(filepath, encoding=s)
書き込み用にファイルをUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
ファイルをSJISで書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
書き込み用にファイルをEUCで開く]	open(filepath, mode='w', encoding='euc_jp')
BOM付きとして書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
文字コードtextで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding=text)
書き込みできるように文字列の示すエンコーディングでファイルパスをオープンする]	open(filepath, mode='w', encoding=s)
ファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
SJISとして追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='shift_jis')
追加できるように既存のファイルパスをEUCを用いてオープンする]	open(filepath, mode='a', encoding='euc_jp')
既存のファイルをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
文字コードtextで既存のファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
ファイルパスを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
＜オプション＞エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
＜オプション＞エンコーディングを文字コードtextに指定する	encoding = text
＜オプション＞エンコーディングを文字列の示す文字コードに設定する	encoding = s
＜オプション＞バッファリングのサイズを小さくする	buffering = 4096
＜オプション＞エラーがあるとき例外を発生させるように設定する	errors = 'strict'
ファイルから1バイト、読み込む	f.read(1)
入力ストリームからn文字、読む	f.read(n)
ストリーム全体をリストにする	[s.strip() for s in f.readlines()]
入力ストリームを改行除外して一行ずつ読む	f.readline()
文字列をファイルに書く	f.write(s)
xを文字列にしてストリームに書く	f.write(str(x))
実数が正の数	x > 0
実数が負か調べる	x < 0
浮動小数点数を三乗する	x ** 3
数に実数を加える	x + y
整数に数を掛ける	x * y
実数を浮動小数点数で割る	x / y
実数を数で割って、小数点以下を切り捨てる	x // y
実数を浮動小数点数で整数除算する	x // y
浮動小数点数を実数で割った余り	x % y
浮動小数点数を文字列に変換する	str(x)
実数のn乗して実数による余りを算出する	pow(x, n, y)
数の小数点以下を四捨五入する	round(x)
浮動小数点数を小数点以下で丸める	round(x, n)
浮動小数点数を十の位で四捨五入する	round(x, -1)
浮動小数点数の最大値を算出する	sys.float_info.max
浮動小数点数が整数	x.is_integer()
実数を十六進表記の文字列にする	x.hex()
分数を使う	import fractions
分子n分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
分子と分母から分数を生成する	fractions.Fraction(分子, 分母)
二進文字列を整数にする	int(s, 2)
16進文字列を整数に変換する	int(s, 16)
n進数文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
二進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
8進数の文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
十六進文字列をbytesizeバイトのバイナリにする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
整数nの二進表現を見る	bin(n)
整数nの八進リテラル	oct(n)
nを八進表記に変換する	oct(n)
整数nの十六進表記を求める	hex(n)
整数nを十六進リテラルに変換する	hex(n)
整数nの2進文字列を求める	bin(n)[2:]
nを二進数文字列に変換する	bin(n)[2:]
nの8進数文字列	oct(n)[2:]
整数nの十六進数文字列	hex(n)[2:]
nを16進文字列に変換する	hex(n)[2:]
符号付きでnをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
n×n2を求める	n * n2
n割るn2	n / n2
nをn2で割った余りを計算する	n % n2
nとn2のビット積	n & n2
nがn2と等しいか	n == n2
nはn2か調べる	n == n2
nがn2より大きいか	n > n2
nがn2以上	n >= n2
nがn2未満、またはn3以上かどうか調べる	n < n2 or n >= n3
nがn2以下、もしくは、n3以上	n <= n2 or n >= n3
n2がn以上かつ、n3以下か	n <= n2 and n2 <= n3
n2がnより大きく、かつ、n3より小さいかどうか	n < n2 and n2 < n3
nが偶数か	n % 2 == 0
nが2で割り切れるか確認する	n % 2 == 0
nが3の倍数	n % 3 == 0
nが3で割り切れるか	n % 3 == 0
nがn2の倍数	n % n2 == 0
nがn2で割り切れる	n % n2 == 0
nがn2の倍数でないかどうか調べる	n % n2 != 0
nがn2で割り切れないか	n % n2 != 0
nが負の数	n < 0
nが一桁の数かどうか	-9 <= n <= 9
整数nがリストのどれかかどうか調べる	n in aList
整数nがセットのいづれかかどうか調べる	n in aSet
整数nが組のどれかかどうか	n in aTuple
整数nは配列のひとつであるか	n in aArray
nが1もしくは2、もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
xが一桁の整数かどうか調べる	-9 <= x <= 9
xが一桁の正の数	0 <= x <= 9
xが1、もしくは2	x == 1 or x == 2
xが1もしくは2、もしくは3に等しいか確認する	x == 1 or x == 2 or x == 3
nの無限のイテラブル	itertools.repeat(n)
文字列が無限に続くイテラブル	itertools.repeat(element)
n回文字列を繰り返す列を得る	itertools.repeat(element, n)
0から始まる無限整数イテラブル	itertools.count()
nからいつまでもカウントアップする	itertools.count(start=n)
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
列を無限に繰り返す	itertools.cycle(iterable)
イテラブルを累加したイテラブルを得る	itertools.accumulate(iterable)
リストを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
列とリストを連結する	itertools.chain(iterable, iterable2)
リストにイテラブルを続ける	itertools.chain(iterable, iterable2)
タプルにシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
イテラブルの各要素に対して、predicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
predicateFuncが真とならないイテラブルの要素を求める	itertools.dropwhile(predicateFunc, iterable)
predicateFuncが真となる配列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
列とイテラブルの直積を計算する	itertools.product(iterable, iterable2)
イテラブルを2回あわせた直積を得る	itertools.product(iterable, repeat=2)
イテラブルの全順列を求める	itertools.permutations(iterable)
列の組み合せを求める	itertools.combinations(iterable, n)
イテラブルの重複組み合せ	itertools.combinations_with_replacement(iterable, n)
JSONフォーマットの文字列を辞書に変換する	json.loads(jsonString)
JSONフォーマットの入力を辞書にする	json.load(fin)
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
タプルをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
辞書をインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
インデント幅nでタプルをJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
タプルをJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
文字列ひとつの組	(element,)
文字列ひとつのりスト	[element]
n2行n列の2次元リストを作る	[[0] * n for _ in range(n2)]
組をリストにする	list(aTuple)
タプルの長さを調べる	len(aTuple)
リストが空	len(aList) == 0
リストが空でないかどうか	len(aList) != 0
リストをn回連結する	aList * n
組をn回、連結する	aTuple * n
リストの最後を使う	aList[-1]
リストのn番目のの要素	aList[n]
リストの最初を捨てる	aList[1:]
組の先頭を除く	aTuple[1:]
タプルの最初のn要素を取り除く	aTuple[n:]
組のn番目以降の要素を得る	aTuple[n:]
リストの最後のn要素を取り除く	aList[:-n]
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
タプルの最後のn要素を除く	aTuple[:-n]
組の末尾からn番目以前の部分を取り出す	aTuple[:-n]
ひとつ飛ばしでリストを取り出す	aList[::2]
リストのn番目からn2番目までを得る	aList[n:n2]
タプルのn番目からn2番目までの部分を取り出す	aTuple[n:n2]
リストの中の最大値を求める	max(aList)
nからn2までの整数列を作る	list(range(n, n2+1))
nからn2までの一つ置きの整数リスト	list(range(n, n2+1, 2))
nまでの奇整数リスト	list(range(1, n, 2))
リストの最後にリストを追加し、拡張する	aList.extend(aList2)
リストの末尾から値を取り出す	aList.pop()
aListn番目から値を除く	aList.pop(n)
リストの全要素を取り除く	aList.clear()
文字列がリストの要素か	element in aList
オブジェクトがリストに含まれるか	element in aList
文字列がタプルの要素かどうか	element in aTuple
文字列はタプルに含まれるか調べる	element in aTuple
文字列がリストの要素でない	element not in aList
文字列がリストに含まれないか	element not in aList
文字列がタプルの要素でないかどうか調べる	element not in aTuple
文字列はタプルに含まれないかどうか調べる	element not in aTuple
リストのオブジェクトが最初に見つかるインデックスを求める	aList.index(element)
組の最初の文字列を探す	aTuple.index(element)
リストをソートする	sorted(aList)
組の要素を並べ変える	sorted(aTuple)
リストを昇順に並べ直す	sorted(aList, reverse=False)
タプルの値を昇順にソートする	sorted(aTuple, reverse=False)
昇順にリストの値を並べ直す	sorted(aList, reverse=True)
タプルを昇順に並べ変える	sorted(aTuple, reverse=True)
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
リストの各要素を関数に適用した結果で並べる	sorted(aList, key=func)
組を逆順にする	reversed(aTuple)
リストが全て真か	all(aList)
タプル中の要素が全て真か調べる	all(aTuple)
リスト内の要素が少なくとも一つ真か確認する	any(aList)
タプル内の要素が少なくとも一つ真	any(aTuple)
タプルを順にプリントする	print(*aTuple)
二次元組をフラット化する	sum(aTuple)
組を番号付けする	enumerate(aTuple)
実数の平方根を求める	math.sqrt(x)
切り上げて整数にする	math.ceil(x)
実数の床数を求める	math.floor(x)
自然数LCM	math.lcm(n, n2)
三自然数のGCD	math.gcd(n, n2, n3)
nとkの組み合わせ	math.comb(n, k)
小数点数の絶対値	math.fabs(x)
浮動小数点数の仮数	math.frexp(x)[0]
2つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
実数が有限かどうか調べる	math.isfinite(x)
実数が無限大か判定する	math.isinf(x)
実数がNaNかどうか	math.isnan(x)
整数の並べ方の総数を求める	math.perm(n)
整数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
eの小数点数乗を求める	math.exp(x)
小数点数のk進対数を求める	math.log(x, k)
実数の二進対数を求める	math.log2(x)
2を底とする対数を算出する	math.log2(x)
10を底とする対数	math.log10(x)
小数点数の正弦	math.sin(x)
浮動小数点数の正接	math.tan(x)
浮動小数点数の逆余弦	math.acos(x)
余弦の逆数	math.acos(x)
実数のsinの逆数を計算する	math.asin(x)
実数の正接の逆数を算出する	math.atan(x)
ラジアンの角度を計算する	math.degrees(x)
浮動小数点数の逆双曲線余弦	math.acosh(x)
双曲線余弦の逆数	math.acosh(x)
双曲線正弦の逆数	math.asinh(x)
実数の逆双曲線正接を算出する	math.atanh(x)
実数の双曲線正接の逆数を求める	math.atanh(x)
実数のハイパボリック・コサイン	math.cosh(x)
浮動小数点数の双曲線正弦を求める	math.sinh(x)
2点間のユークリッド距離を計算する	math.dist(point, point2)
実数とyのノルムを求める	math.hypot(x, y)
原点から点までの距離	math.hypot(x, y)
グラフをプロットする準備をする	from sympy import N
グラフを使用する準備をする	from sympy import N
見やすいグラフを使用する	import seaborn as sns
グラフの描画を綺麗にする	import seaborn as sns
グラフをイイ感じに設定する	sns.set()
グラフの用途を論文に指定する	sns.set(context='paper')
論文用にグラフを設定する	sns.set(context='paper')
画面用にグラフを変更する	sns.set(context='notebook')
スライドにプロットの用途を設定する	sns.set(context='talk')
スライド用にグラフを設定する	sns.set(context='talk')
ポスター用にグラフを変更する	sns.set(context='poster')
プロットを濃くする	sns.set(pallete='deep')
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
グラフを淡くする	sns.set(pallete='muted')
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
グラフのパレットをパステル調にする	sns.set(pallete='pastel')
グラフを全般的に暗くする	sns.set(pallete='dark')
グラフの色を暗くする	sns.set(pallete='dark')
グラフの色を全般的に明るくする	sns.set(pallete='bright')
グラフのテーマを全般的に明るくする	sns.set(pallete='bright')
グラフを色差別なくする	sns.set(pallete='colorblind')
グラフの全般的に色を色差別なくする	sns.set(pallete='colorblind')
淡い色をグラフの描画で使う	sns.set(pallete='muted')
暗いカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
グラフの描画で明るいパレットを使う	sns.set(pallete='bright')
プロットの描画で色差別ない色を使う	sns.set(pallete='colorblind')
グラフの色をpalleteNameに設定する	sns.set(pallete=palleteName)
プロットで日本語を表示できるようにする	sns.set(font='IPAexGothic')
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
プロットの名前をuntitledに設定する	plt.title(untitled)
プロットのサイズを横width縦heightに変更する	plt.figure(figsize=(width, height))
グラフのサイズを指定する	plt.figure(figsize=(width, height))
グラフの横軸の名前をuntitledに設定する	plt.xlabel(untitled)
グラフの横軸にuntitledという名称を付ける	plt.xlabel(untitled)
グラフで使うy軸の軸ラベルをuntitledに設定する	plt.ylabel(untitled)
グラフの中のy座標にuntitledという軸名を付ける	plt.ylabel(untitled)
グラフにグリッド線を加える	plt.grid(True)
グラフにデータラベルを入れる	plt.legend()
グラフに文字列と文字列とデータラベルを入れる	plt.legend([s, s2])
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
プロットの凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
データラベルをグラフ中の(x,y)の位置に加える	plt.legend(loc=(x, y))
凡例を最適な場所に描画する	plt.legend(loc='best')
プロットの中に枠なしの凡例を入れる	plt.legend(frameon=False)
配列と数列の折れ線グラフを描画する	plt.plot(xdata, ydata)
リストとリストを折れ線グラフにプロットする	plt.plot(xdata, ydata)
数列を縦軸、配列を横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
配列の変化を折れ線グラフで描く	plt.plot(range(len(xdata)), xdata)
リストを横軸と設定して折れ線を描く	plt.plot(range(len(xdata)), xdata)
データフレームのカラムとカラムを折れ線グラフとして描画する	plt.plot(df[col], df[col2])
折れ線の透明度をalphaに指定する	plt.plot(xdata, ydata, alpha=alpha)
配列とイテラブルの折れ線グラフを透明度alphaで描く	plt.plot(xdata, ydata, alpha=alpha)
数列とイテラブルの折れ線グラフをプロットし、、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
で利用可能な色名の一覧を使う	matplotlib.colors.cnames
文字列の色で数列と配列の折れ線グラフを描画する	plt.plot(xdata, ydata, color=s)
リストと配列の折れ線を描画して色を文字列に設定する	plt.plot(xdata, ydata, color=s)
折れ線の色をカラーコードに指定する	plt.plot(xdata, ydata, color=rgb)
データ列とリストの折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
リストと配列の折れ線グラフを描画してその色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
配列と配列について破線グラフをプロットして、色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
データ列と配列について破線グラフを描いて、その色を淡いにする	plt.plot(xdata, ydata, linestyle='dash', color='muted')
破線の色をパステル調のに変更する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
イテラブルとリストの破線グラフをプロットして、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
配列とリストの破線グラフを描画して、その色を暗いにする	plt.plot(xdata, ydata, linestyle='dash', color='dark')
破線の色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
データ列とリストについて破線グラフを描画して、色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
イテラブルとイテラブルについて破線グラフを描画して、色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
濃い色の折れ線をプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
配列とリストについて濃い色の折れ線グラフをプロットし、、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='deep')
淡い色の折れ線グラフを描き、、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
リストと配列について淡い色の折れ線グラフを描画して、その線幅をnにする	plt.plot(xdata, ydata, linewidth=n, color='muted')
パステル調の色の折れ線グラフを描き、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
リストと数列についてパステル調の色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
暗い色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
イテラブルとリストについて暗い色の折れ線グラフをプロットし、、線幅をnにする	plt.plot(xdata, ydata, linewidth=n, color='dark')
明るい色の折れ線グラフを描き、、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='bright')
リストと配列について明るい色の折れ線グラフをプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
色差別ない色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
数列とリストについて色差別ない色の折れ線を描いてその線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
濃い色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='deep')
リストと数列についての散布図を濃い色でプロットする	plt.plot(xdata, ydata, c='deep')
配列とリストについて散布図を描いて、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
散布図を淡い色のマーカーで描画する	plt.plot(xdata, ydata, c='muted')
淡い色としてリストとリストの散布図を描画する	plt.plot(xdata, ydata, c='muted')
リストとリストの散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
散布図にパステル調の色のマーカーを用いる	plt.plot(xdata, ydata, c='pastel')
パステル調の色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='pastel')
リストと配列についての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
数列とリストについて散布図を描画し、、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
散布図を暗い色として描く	plt.plot(xdata, ydata, c='dark')
暗い色でイテラブルと配列の散布図を描画する	plt.plot(xdata, ydata, c='dark')
リストと配列について散布図を描画して、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
明るい色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='bright')
リストとリストの散布図を明るい色でプロットする	plt.plot(xdata, ydata, c='bright')
配列と配列の散布図を描画し、、マーカーの色を明るいに指定する	plt.plot(xdata, ydata, c='bright')
色差別ない色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='colorblind')
リストとリストの散布図を色差別ない色を用いて描画する	plt.plot(xdata, ydata, c='colorblind')
数列と配列について散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
散布図を重なりを見やすく濃い色で描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
配列とリストについての散布図を濃い色として重なりを見やすくプロットする	plt.plot(xdata, ydata, c='deep', alpha=0.5)
淡い色のマーカーとして散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
リストとデータ列の散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
パステル調の色のマーカーで散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
パステル調の色を用いてデータ列と配列についての散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
暗い色のマーカーで重なりを見やすく散布図を描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
リストとデータ列についての散布図を重なりを見やすく暗い色で描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
明るい色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
リストとリストについての散布図を重なりを見やすく明るい色で描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
重なりを見やすく散布図を色差別ない色のマーカーとして描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
リストとリストについての散布図を色差別ない色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
ヒストグラムを濃いとして描画する	plt.hist(xdata, color='deep')
データ列を濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
淡いで柱状図を描画する	plt.hist(xdata, color='muted')
配列を淡い色の度数分布図で描画する	plt.hist(xdata, color='muted')
パステル調の色を用いてヒストグラムを描画する	plt.hist(xdata, color='pastel')
リストをパステル調の色のヒストグラムを用いて描く	plt.hist(xdata, color='pastel')
暗い色で柱状図を描画する	plt.hist(xdata, color='dark')
リストを暗い色のヒストグラムでプロットする	plt.hist(xdata, color='dark')
ヒストグラムを明るいを用いて描画する	plt.hist(xdata, color='bright')
リストを明るい色の柱状図として描く	plt.hist(xdata, color='bright')
色差別ないで数列についてのヒストグラムを描く	plt.hist(xdata, color='colorblind')
配列を色差別ない色のヒストグラムとして描く	plt.hist(xdata, color='colorblind')
配列とリストの折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
データ列とリストの折れ線を描画し、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
折れ線の線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n)
折れ線をリストとデータ列で描いて線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
濃いの折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
濃いグラフの線幅をnにセットする	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
リストとリストとして濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
淡いグラフの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
淡いを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
リストとリストでパステル調のの折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
暗いの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
暗いの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
リストと数列で暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
リストとリストで明るいグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
色差別ないの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
色差別ないの折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
リストとリストについてカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
リストとリストとして濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
淡いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
リストとデータ列のカラーコードの淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
淡いグラフをデータ列とリストを使って描いて線幅をnにセットする	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
パステル調のグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
リストとイテラブルのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
パステル調のの折れ線グラフをリストと配列で描いてその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
暗いの折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データ列とリストのカラーコードの暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
リストとイテラブルで暗いグラフをプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
明るいの色をカラーコードにセットする	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
数列と数列のカラーコードの明るいグラフをプロットする	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
明るいグラフをプロットして、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
色差別ないの折れ線グラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
数列とリストのカラーコードの色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
色差別ないグラフをリストとデータ列を使って描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
赤色の濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='r')
濃いの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
濃いを描き、、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color='r')
赤色の淡いの折れ線グラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='r')
リストとイテラブルで淡いの折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', color='r')
赤いパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
パステル調のの折れ線の色を赤にする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
リストと数列でパステル調のグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
赤色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
明るいの折れ線グラフをプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
赤い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
色差別ないの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
色差別ないグラフをプロットし、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リストとリストの青い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
リストとリストの濃いグラフを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストと配列について青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データ列とデータ列の淡いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
パステル調のの色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
配列とデータ列について青いパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
数列とリストのパステル調のをプロットしてその色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
配列とリストの青い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
リストとリストについて暗いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
青色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
リストとリストについて青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
データ列とリストについて明るいグラフを描いて、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
リストとリストについて青色の色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストとリストについて色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
黒い濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='k')
数列とリストの黒色の濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='k')
数列とリストについて濃いグラフを描いて、その色を黒くする	plt.plot(xdata, ydata, linestyle='deep', color='k')
リストと配列の黒い淡いを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストと数列について淡いを描画して、その色を黒色に設定する	plt.plot(xdata, ydata, linestyle='muted', color='k')
黒色のパステル調のをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
パステル調のグラフの色を黒色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
配列とデータ列の黒いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
イテラブルとリストのパステル調のグラフを描き、、色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
配列とリストについて黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
配列とリストの暗いグラフを描画し、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
黒色の明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
イテラブルとリストの黒い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
リストと数列の明るいをプロットして、色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
黒い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとイテラブルの黒い色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとリストの色差別ないグラフを描画し、、色を黒くする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
イテラブルとリストの散布図を描く	plt.scatter(xdata, ydata)
リストとリストについて散らばりを可視化する	plt.scatter(xdata, ydata)
散布図のマーカーの大きさをnにする	plt.scatter(xdata, ydata, s=n)
リストをy座標リストをx軸として、大きさnの散布図を描く	plt.scatter(xdata, ydata, s=n)
大きさnでリストとリストについての散布図を描画する	plt.scatter(xdata, ydata, s=n)
数列とリストについて散布図を描画してその大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
ポイントマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='.')
配列と配列について散布図を描画して、マーカーをポイントに変更する	plt.plot(xdata, ydata, marker='.')
リストとイテラブルについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
丸マーカーで散布図を描く	plt.plot(xdata, ydata, marker='o')
リストとデータ列について散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
リストとリストについての散布図に丸マーカーを描く	plt.plot(xdata, ydata, marker='o')
散布図に上三角マーカーを使用する	plt.plot(xdata, ydata, marker='^')
上三角マーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='^')
イテラブルとイテラブルの散布図を描画して、マーカーを▲に設定する	plt.plot(xdata, ydata, marker='^')
リストとリストについての散布図に▲マーカーをプロットする	plt.plot(xdata, ydata, marker='^')
散布図に▽マーカーを用いる	plt.plot(xdata, ydata, marker='v')
下三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='v')
リストとリストについて散布図をプロットし、、マーカーを▼にセットする	plt.plot(xdata, ydata, marker='v')
データ列とリストについての散布図に▽マーカーをプロットする	plt.plot(xdata, ydata, marker='v')
散布図を左三角マーカーで描画する	plt.plot(xdata, ydata, marker='<')
リストと数列について散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
数列と配列についての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
数列とリストの散布図を描画して、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
リストとリストの散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
バツマーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='x')
数列と配列の散布図をプロットし、、マーカーをバツに変更する	plt.plot(xdata, ydata, marker='x')
データ列とリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
散布図に大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X')
大バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='X')
リストとイテラブルについて散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
四角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='s')
数列と配列について散布図を描画して、マーカーを四角に変更する	plt.plot(xdata, ydata, marker='s')
数列とデータ列の散布図に四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s')
ダイアモンドマーカーを散布図に使う	plt.plot(xdata, ydata, marker='D')
散布図をダイアモンドマーカーとして描画する	plt.plot(xdata, ydata, marker='D')
リストとリストの散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
イテラブルとリストについての散布図にダイアモンドマーカーをプロットする	plt.plot(xdata, ydata, marker='D')
星マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='*')
リストとリストについて散布図をプロットし、、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
リストとリストの散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
数列とイテラブルについての散布図にカラーコードのポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c=rgb)
リストとデータ列の散布図を描画して、ポイントマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='.', c=rgb)
リストとリストについての散布図にカラーコードの丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
イテラブルとイテラブルの散布図を描画し、、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
散布図にカラーコードの△マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
カラーコードの▲マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
リストとリストについての散布図にカラーコードの上三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c=rgb)
リストとリストについて散布図を描いて、三角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='^', c=rgb)
散布図にカラーコードの▽マーカーを用いる	plt.plot(xdata, ydata, marker='v', c=rgb)
カラーコードの下三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
データ列と配列についての散布図にカラーコードの▼マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c=rgb)
データ列とリストについて散布図を描画して下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
カラーコードの左三角マーカーを使って散布図を描く	plt.plot(xdata, ydata, marker='<', c=rgb)
配列とリストについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストとリストについて散布図を描画して左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
カラーコードの右三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
リストと配列の散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
イテラブルと数列の散布図を描画して、右三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='>', c=rgb)
散布図にカラーコードのバツマーカーを用いる	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードのバツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードのバツマーカーをデータ列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
データ列とリストの散布図を描いて、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
散布図をカラーコードの大バツマーカーで描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
カラーコードの大バツマーカーをリストとイテラブルについての散布図に描く	plt.plot(xdata, ydata, marker='X', c=rgb)
数列とリストについて散布図を描画し、、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
散布図をカラーコードの四角マーカーで描く	plt.plot(xdata, ydata, marker='s', c=rgb)
配列と数列についての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
リストとデータ列について散布図を描画して、四角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='s', c=rgb)
散布図にカラーコードの菱形マーカーを使う	plt.plot(xdata, ydata, marker='D', c=rgb)
カラーコードのダイアモンドマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D', c=rgb)
データ列とデータ列の散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
データ列と数列について散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
カラーコードの星マーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
数列と数列についての散布図にカラーコードの星マーカーをプロットする	plt.plot(xdata, ydata, marker='*', c=rgb)
データ列とリストについて散布図を描画して星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
赤いポイントマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='.', c='r')
赤色のポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
赤いポイントマーカーをリストとデータ列についての散布図にプロットする	plt.plot(xdata, ydata, marker='.', c='r')
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c='r')
赤い▲マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='r')
赤い三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='^', c='r')
赤い三角マーカーをデータ列と配列についての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='r')
散布図に赤色の下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='r')
散布図を赤い▽マーカーとしてプロットする	plt.plot(xdata, ydata, marker='v', c='r')
リストと配列についての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
赤色の左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
赤い左三角マーカーを配列とリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='<', c='r')
赤い右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c='r')
散布図を赤い右三角マーカーとして描画する	plt.plot(xdata, ydata, marker='>', c='r')
数列とリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c='r')
散布図に赤色のクロスマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
散布図を赤色のバツマーカーとして描画する	plt.plot(xdata, ydata, marker='x', c='r')
数列とリストの散布図に赤色のバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
赤い大バツマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='X', c='r')
赤色の大バツマーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='X', c='r')
数列とリストについての散布図に赤色の大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X', c='r')
赤い四角マーカーを使って散布図をプロットする	plt.plot(xdata, ydata, marker='s', c='r')
リストと数列についての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
散布図に赤色のダイアモンドマーカーを用いる	plt.plot(xdata, ydata, marker='D', c='r')
赤い菱形マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
データ列と配列についての散布図に赤いダイアモンドマーカーをプロットする	plt.plot(xdata, ydata, marker='D', c='r')
赤色の星マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='*', c='r')
赤い星マーカーをリストとリストの散布図に描く	plt.plot(xdata, ydata, marker='*', c='r')
散布図に黒色のポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='k')
黒いポイントマーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='.', c='k')
リストとリストの散布図に黒色のポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c='k')
黒色の丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o', c='k')
黒い丸マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='o', c='k')
リストと配列の散布図に黒い丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c='k')
散布図に黒い上三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
黒い△マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c='k')
リストとデータ列の散布図に黒い上三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
散布図に黒色の下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
黒色の▼マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
数列と数列の散布図に黒い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
黒い左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='k')
黒色の左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
リストとリストの散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
散布図を黒い右三角マーカーを使って描画する	plt.plot(xdata, ydata, marker='>', c='k')
配列と数列についての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
黒いバツマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='x', c='k')
配列と数列についての散布図に黒いクロスマーカーを描く	plt.plot(xdata, ydata, marker='x', c='k')
黒い大バツマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='X', c='k')
黒色の大バツマーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='X', c='k')
黒い四角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='s', c='k')
黒色の四角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
黒い四角マーカーをリストと配列の散布図に描画する	plt.plot(xdata, ydata, marker='s', c='k')
散布図に黒いダイアモンドマーカーを用いる	plt.plot(xdata, ydata, marker='D', c='k')
黒い菱形マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
黒い菱形マーカーをリストとリストの散布図にプロットする	plt.plot(xdata, ydata, marker='D', c='k')
散布図を黒い星マーカーで描画する	plt.plot(xdata, ydata, marker='*', c='k')
黒い星マーカーを配列とリストについての散布図に描く	plt.plot(xdata, ydata, marker='*', c='k')
グラフにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
にy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
リストとリストリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
リストと配列についての散布図に文字列という凡例用のラベルをつける	plt.scatter(xdata, xdata, label=s)
リストとリストについて散布図を描き、、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
リストを度数分布図で可視化する	plt.hist(aList)
データフレームのカラムのヒストグラムを描画する	plt.hist(df[column])
データフレームの列を度数分布図で可視化する	plt.hist(df[column])
データ列の柱状図を描画する	plt.hist(ds)
ヒストグラムとしてデータ列を可視化する	plt.hist(ds)
ヒストグラムを半透明化する	plt.hist(データ列, alpha=0.5)
ヒストグラムをプロットし、、半透明化にする	plt.hist(データ列, alpha=0.5)
xにヒストグラムのアルファ値を設定する	plt.hist(データ列, alpha=x)
ヒストグラムを描いて、透明度をxに設定する	plt.hist(データ列, alpha=x)
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=n)
ビン数をnに設定してヒストグラムをプロットする	plt.hist(データ列, bins=n)
ヒストグラムを描画して、ビン数をnに変更する	plt.hist(データ列, bins=n)
度数分布図の範囲を設定する	plt.hist(データ列, range=(start, end))
度数分布図をstartからendまでの区間で描画する	plt.hist(データ列, range=(start, end))
startからendの範囲のヒストグラムを用いてリストをプロットする	plt.hist(データ列, range=(start, end))
2つのデータ列を並べて柱状グラフにする	plt.hist([データ列, データ列2], color=['b', 'r'])
二つ並べて度数分布図をプロットする	plt.hist([データ列, データ列2], color=['b', 'r'])
データ列を箱髭図にする	plt.boxplot(データ列)
箱髭図を2つ並べて描画する	plt.boxplot([データ列, データ列2])
棒グラフを描く	plt.bar(ラベル列, データ列)
データ列とラベルを指定して、棒グラフを描く	plt.bar(ラベル列, データ列)
データ列とラベルを指定して、縦棒をプロットする	plt.bar(ラベル列, データ列)
データ列とラベル列を指定して、横棒を描画する	plt.barh(ラベル列, データ列)
カラーコードに棒の色を設定する	plt.bar(ラベル列, データ列, color=rgb)
横棒グラフの色をカラーコードに指定する	plt.barh(ラベル列, データ列, color=rgb)
データ列とラベル列を指定して積み上げ棒を描く	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
データ列とラベル列を指定して、積み上げ横棒グラフをプロットする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
棒グラフを描画して、幅をxにする	plt.bar(ラベル列, データ列, width=x)
横棒グラフをプロットし、、グラフ幅をxにセットする	plt.barh(ラベル列, データ列, width=x)
xに横棒の幅を設定する	plt.barh(ラベル列, データ列, width=x)
棒を描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
縦棒グラフを描き、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
横棒を描画して中央寄せする	plt.barh(ラベル列, データ列, align='center')
複数列の散布図を一度に描画する	sns.pairplot(df[[column, column2, column3]])
＜オプション＞アリスブルー色を用いる	color = 'aliceblue'
＜オプション＞グラフの色をアンティークホワイトに変更する	color = 'antiquewhite'
＜オプション＞色をアクアマリンに変更する	color = 'aquamarine'
＜オプション＞ベージュを使う	color = 'beige'
＜オプション＞色をベージュに設定する	color = 'beige'
＜オプション＞ビスク色を用いる	color = 'bisque'
＜オプション＞色をビスクに設定する	color = 'bisque'
＜オプション＞ブラックを使う	color = 'black'
＜オプション＞グラフの色をブラックに変更する	color = 'black'
＜オプション＞ブルーバイオレット色を用いる	color = 'blueviolet'
＜オプション＞グラフの色をブルーバイオレットに変更する	color = 'blueviolet'
＜オプション＞カデットブルーにグラフの色を設定する	color = 'cadetblue'
＜オプション＞色をシャルトリューズに設定する	color = 'chartreuse'
＜オプション＞コーラル色を使用する	color = 'coral'
＜オプション＞やわらかい青に色を設定する	color = 'cornflowerblue'
＜オプション＞グラフの色をコーンズシルクにセットする	color = 'cornsilk'
＜オプション＞色をクリムゾンにする	color = 'crimson'
＜オプション＞シアンを用いる	color = 'cyan'
＜オプション＞濃い青色を使う	color = 'darkblue'
＜オプション＞色を紺に指定する	color = 'darkblue'
＜オプション＞色を濃いシアンにセットする	color = 'darkcyan'
＜オプション＞ダークゴールデンロッドを使う	color = 'darkgoldenrod'
＜オプション＞グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
＜オプション＞ダークグレーに色を設定する	color = 'darkgrey'
＜オプション＞グラフの色をダークカーキに指定する	color = 'darkkhaki'
＜オプション＞ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
＜オプション＞色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
＜オプション＞ダークオレンジ色を用いる	color = 'darkorange'
＜オプション＞ダークオーキッドに色を指定する	color = 'darkorchid'
＜オプション＞ダークレッド色を用いる	color = 'darkred'
＜オプション＞暗い赤にグラフの色を設定する	color = 'darkred'
＜オプション＞ダークサーモンにグラフの色を設定する	color = 'darksalmon'
＜オプション＞色をダークスレートブルーに変更する	color = 'darkslateblue'
＜オプション＞ダークスラテグレー色を用いる	color = 'darkslategray'
＜オプション＞グラフの色をダークスラテグレーに変更する	color = 'darkslategray'
＜オプション＞色をダーク・スラテグレーにする	color = 'darkslategrey'
＜オプション＞ダークターコイズにグラフの色を変更する	color = 'darkturquoise'
＜オプション＞デピンクを使う	color = 'deeppink'
＜オプション＞グラフの色をディープスカイブルーに変更する	color = 'deepskyblue'
＜オプション＞色をドジャーブルーに設定する	color = 'dodgerblue'
＜オプション＞耐火レンガにグラフの色を変更する	color = 'firebrick'
＜オプション＞フローラルホワイトに色を設定する	color = 'floralwhite'
＜オプション＞色をフォレストグリーンに設定する	color = 'forestgreen'
＜オプション＞フクシア色を使用する	color = 'fuchsia'
＜オプション＞フクシアに色を指定する	color = 'fuchsia'
＜オプション＞ゲインズボロにグラフの色をセットする	color = 'gainsboro'
＜オプション＞色をゴーストホワイトに設定する	color = 'ghostwhite'
＜オプション＞色をゴールドにセットする	color = 'gold'
＜オプション＞ゴールデンロッド色を用いる	color = 'goldenrod'
＜オプション＞色をゴールデンロッドにセットする	color = 'goldenrod'
＜オプション＞グレーに色を設定する	color = 'gray'
＜オプション＞グリーンにグラフの色を設定する	color = 'green'
＜オプション＞グリーンイエローにグラフの色を設定する	color = 'greenyellow'
＜オプション＞グレーを使用する	color = 'grey'
＜オプション＞ホットピンク色を用いる	color = 'hotpink'
＜オプション＞ホットピンクにグラフの色を指定する	color = 'hotpink'
＜オプション＞グラフの色をインディアンレッドに変更する	color = 'indianred'
＜オプション＞インディゴ色を使用する	color = 'indigo'
＜オプション＞色をインディゴに設定する	color = 'indigo'
＜オプション＞アイボリーに色を設定する	color = 'ivory'
＜オプション＞色をカーキに設定する	color = 'khaki'
＜オプション＞グラフの色をラベンダーに変更する	color = 'lavender'
＜オプション＞レモンシフォンに色を設定する	color = 'lemonchiffon'
＜オプション＞ライトブルー色を用いる	color = 'lightblue'
＜オプション＞色をライトコーラルにセットする	color = 'lightcoral'
＜オプション＞色をライトシアンに変更する	color = 'lightcyan'
＜オプション＞ライトゴールドロディイエローを使用する	color = 'lightgoldenrodyellow'
＜オプション＞ライトグレーにグラフの色を設定する	color = 'lightgray'
＜オプション＞ライトグリーンにグラフの色を設定する	color = 'lightgreen'
＜オプション＞ライトグレー色を使用する	color = 'lightgrey'
＜オプション＞色をライトグレーに変更する	color = 'lightgrey'
＜オプション＞色をライトサーモンに設定する	color = 'lightsalmon'
＜オプション＞色をライトグリーンに変更する	color = 'lightseagreen'
＜オプション＞ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
＜オプション＞ライトスレイグレー色を用いる	color = 'lightslategray'
＜オプション＞グラフの色をライトスレイグレーに変更する	color = 'lightslategray'
＜オプション＞ライトスレイグレー色を使用する	color = 'lightslategrey'
＜オプション＞ライトスレイグレーに色を設定する	color = 'lightslategrey'
＜オプション＞グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
＜オプション＞ライトイエローにグラフの色を設定する	color = 'lightyellow'
＜オプション＞ライムグリーン色を用いる	color = 'limegreen'
＜オプション＞ライムグリーンに色をセットする	color = 'limegreen'
＜オプション＞マゼンタを使う	color = 'magenta'
＜オプション＞色をミディアムブルーに設定する	color = 'mediumblue'
＜オプション＞ミディアムオーキッドを用いる	color = 'mediumorchid'
＜オプション＞グラフの色をミディアムオーキッドにする	color = 'mediumorchid'
＜オプション＞ミディアムパープル色を用いる	color = 'mediumpurple'
＜オプション＞色をミディアムパープルに設定する	color = 'mediumpurple'
＜オプション＞色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
＜オプション＞グラフの色をミディアムスレートブルーにする	color = 'mediumslateblue'
＜オプション＞ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
＜オプション＞ミディアムターコイズを使う	color = 'mediumturquoise'
＜オプション＞ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
＜オプション＞モカシンを使う	color = 'moccasin'
＜オプション＞色をモカシンに設定する	color = 'moccasin'
＜オプション＞色をナバホホワイトに変更する	color = 'navajowhite'
＜オプション＞グラフの色をオリーブに変更する	color = 'olive'
＜オプション＞グラフの色をオリベドラブに指定する	color = 'olivedrab'
＜オプション＞オレンジ色を使用する	color = 'orange'
＜オプション＞オレンジにグラフの色を設定する	color = 'orange'
＜オプション＞オレンジレッドを使う	color = 'orangered'
＜オプション＞オレンジレッドに色を指定する	color = 'orangered'
＜オプション＞グラフの色をオーキッドに変更する	color = 'orchid'
＜オプション＞パールゴールデンロッドにグラフの色をする	color = 'palegoldenrod'
＜オプション＞パレットトルコイズ色を使用する	color = 'paleturquoise'
＜オプション＞グラフの色をパレットトルコイズにする	color = 'paleturquoise'
＜オプション＞パールバイオレットレッドにグラフの色をする	color = 'palevioletred'
＜オプション＞パパイヤウィップを用いる	color = 'papayawhip'
＜オプション＞パパイヤウィップに色を設定する	color = 'papayawhip'
＜オプション＞色をピーチパフに指定する	color = 'peachpuff'
＜オプション＞ペルーを使う	color = 'peru'
＜オプション＞色をペルーに変更する	color = 'peru'
＜オプション＞ピンクにグラフの色を設定する	color = 'pink'
＜オプション＞プラムにグラフの色を設定する	color = 'plum'
＜オプション＞パープルにグラフの色を設定する	color = 'purple'
＜オプション＞レベッカパープルを用いる	color = 'rebeccapurple'
＜オプション＞グラフの色をレベッカパープルにする	color = 'rebeccapurple'
＜オプション＞赤色を用いる	color = 'red'
＜オプション＞赤に色を変更する	color = 'red'
＜オプション＞グラフの色をロージーブラウンに変更する	color = 'rosybrown'
＜オプション＞グラフの色をロイヤルブルーに変更する	color = 'royalblue'
＜オプション＞サーモンを使う	color = 'salmon'
＜オプション＞サーモンにグラフの色を変更する	color = 'salmon'
＜オプション＞貝殻を用いる	color = 'seashell'
＜オプション＞グラフの色を貝殻に指定する	color = 'seashell'
＜オプション＞シエナ色を用いる	color = 'sienna'
＜オプション＞グラフの色をシエナに変更する	color = 'sienna'
＜オプション＞色をシルバーに設定する	color = 'silver'
＜オプション＞グラフの色をスカイブルーにする	color = 'skyblue'
＜オプション＞スレートブルーを使う	color = 'slateblue'
＜オプション＞色をスラグレーに設定する	color = 'slategray'
＜オプション＞スラグレーにグラフの色を設定する	color = 'slategrey'
＜オプション＞グラフの色をスプリンググリーンに変更する	color = 'springgreen'
＜オプション＞色をスチールブルーに設定する	color = 'steelblue'
＜オプション＞タン色を用いる	color = 'tan'
＜オプション＞グラフの色を淡い茶色にセットする	color = 'tan'
＜オプション＞シスル色を使用する	color = 'thistle'
＜オプション＞色をトマトに変更する	color = 'tomato'
＜オプション＞青緑色を使う	color = 'turquoise'
＜オプション＞ターコイズに色をする	color = 'turquoise'
＜オプション＞青紫にグラフの色を設定する	color = 'violet'
＜オプション＞小麦色色を使用する	color = 'wheat'
＜オプション＞グラフの色を小麦色にセットする	color = 'wheat'
＜オプション＞グラフの色をホワイトスモークにセットする	color = 'whitesmoke'
＜オプション＞黄色色を用いる	color = 'yellow'
＜オプション＞黄色にグラフの色をセットする	color = 'yellow'
＜オプション＞イエローグリーンを使う	color = 'yellowgreen'
折れ線グラフの色をアリスブルーにする	plt.plot(データ列, データ列2, color='aliceblue')
折れ線グラフを描画して、色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフを描画して色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
折れ線グラフの色を紺碧に変更する	plt.plot(データ列, データ列2, color='azure')
折れ線グラフを描画して、その色を紺碧に変更する	plt.plot(データ列, データ列2, color='azure')
折れ線グラフを描画して、その色をベージュに指定する	plt.plot(データ列, データ列2, color='beige')
線グラフの色をビスクに変更する	plt.plot(データ列, データ列2, color='bisque')
折れ線グラフの色をブラックにする	plt.plot(データ列, データ列2, color='black')
折れ線グラフを描画して、その色をブラックに指定する	plt.plot(データ列, データ列2, color='black')
線グラフを描画して、色をブランチドアーモンドに指定する	plt.plot(データ列, データ列2, color='blanchedalmond')
線グラフを描画して、その色を青に設定する	plt.plot(データ列, データ列2, color='blue')
線グラフの色をブルーバイオレットに指定する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフを描画して、その色をブルーバイオレットに変更する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフを描画して色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
折れ線グラフを描画して、色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
折れ線グラフを描画して、色をカデットブルーに指定する	plt.plot(データ列, データ列2, color='cadetblue')
線グラフの色をシャルトリューズに変更する	plt.plot(データ列, データ列2, color='chartreuse')
黄緑色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='chartreuse')
折れ線グラフを描画してその色を黄緑に設定する	plt.plot(データ列, データ列2, color='chartreuse')
線グラフの色をコーラルに指定する	plt.plot(データ列, データ列2, color='coral')
線グラフを描画して、色を珊瑚にセットする	plt.plot(データ列, データ列2, color='coral')
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列, データ列2, color='cornflowerblue')
折れ線グラフを描画して、色をコーンフラワーブルーに指定する	plt.plot(データ列, データ列2, color='cornflowerblue')
線グラフの色をクリムゾンに指定する	plt.plot(データ列, データ列2, color='crimson')
真紅色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
線グラフを描画してその色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
線グラフの色をシアンに変更する	plt.plot(データ列, データ列2, color='cyan')
線グラフを描画してその色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
折れ線グラフの色を紺に変更する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフを描画してその色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフの色をダークシアンに指定する	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフを描画してその色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフを描画して、その色をダークゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgray')
線グラフを描画して、その色をダークグレーにセットする	plt.plot(データ列, データ列2, color='darkgray')
線グラフを描画してその色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgrey')
折れ線グラフを描画して、色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
折れ線グラフの色をダークオレンジにする	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフを描画して、その色をダークオレンジに変更する	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフを描画して、その色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
線グラフの色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
線グラフを描画してその色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
折れ線グラフの色をダークシアグリーンにする	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフを描画して、色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフの色をダークスレートブルーに指定する	plt.plot(データ列, データ列2, color='darkslateblue')
折れ線グラフを描画して、その色をダークスレートブルーに変更する	plt.plot(データ列, データ列2, color='darkslateblue')
折れ線グラフを描画して、色をダークスラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategray')
折れ線グラフを描画して、色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
折れ線グラフを描画してその色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
折れ線グラフの色をダークバイオレットに変更する	plt.plot(データ列, データ列2, color='darkviolet')
折れ線グラフを描画して、色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
線グラフを描画してその色をデピンクに指定する	plt.plot(データ列, データ列2, color='deeppink')
折れ線グラフの色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
折れ線グラフを描画して、色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgrey')
線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
折れ線グラフの色をドジャーブルーに指定する	plt.plot(データ列, データ列2, color='dodgerblue')
折れ線グラフを描画してその色をドジャーブルーにセットする	plt.plot(データ列, データ列2, color='dodgerblue')
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列, データ列2, color='firebrick')
折れ線グラフを描画して、色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
折れ線グラフを描画して、色をフォレストグリーンに変更する	plt.plot(データ列, データ列2, color='forestgreen')
線グラフの色をゲインズボロに指定する	plt.plot(データ列, データ列2, color='gainsboro')
折れ線グラフを描画して、その色をゲインズボロに変更する	plt.plot(データ列, データ列2, color='gainsboro')
折れ線グラフの色をゴーストホワイトにセットする	plt.plot(データ列, データ列2, color='ghostwhite')
折れ線グラフを描画して、色をゴーストホワイトに指定する	plt.plot(データ列, データ列2, color='ghostwhite')
折れ線グラフを描画して、色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
折れ線グラフを描画して、その色をグレーに指定する	plt.plot(データ列, データ列2, color='gray')
線グラフの色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
線グラフを描画して、その色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
折れ線グラフを描画して、色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
折れ線グラフを描画して、その色をグレーに指定する	plt.plot(データ列, データ列2, color='grey')
線グラフを描画して、その色をハニーデューに指定する	plt.plot(データ列, データ列2, color='honeydew')
線グラフを描画して、その色をホットピンクに指定する	plt.plot(データ列, データ列2, color='hotpink')
線グラフの色をインディアンレッドに指定する	plt.plot(データ列, データ列2, color='indianred')
線グラフを描画して、その色をインディアンレッドに変更する	plt.plot(データ列, データ列2, color='indianred')
線グラフを描画してその色をアイボリーに指定する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフを描画して、色をカーキに指定する	plt.plot(データ列, データ列2, color='khaki')
線グラフを描画して、色をラベンダーにする	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列, データ列2, color='lavenderblush')
折れ線グラフを描画してその色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
折れ線グラフを描画して、色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
折れ線グラフを描画してその色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
線グラフの色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
線グラフを描画して、色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
折れ線グラフを描画して、その色をライトシアンにする	plt.plot(データ列, データ列2, color='lightcyan')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
折れ線グラフを描画して、その色をライトゴールドロディイエローにセットする	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
線グラフの色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgray')
折れ線グラフを描画して、色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgray')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightgreen')
折れ線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
折れ線グラフを描画してその色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
折れ線グラフを描画して、色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
折れ線グラフを描画して、その色をライトサーモンに変更する	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightseagreen')
折れ線グラフを描画して、その色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
線グラフを描画して、その色をライトスカイブルーに指定する	plt.plot(データ列, データ列2, color='lightskyblue')
折れ線グラフを描画してその色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
折れ線グラフを描画して、色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
折れ線グラフを描画して色をライムにセットする	plt.plot(データ列, データ列2, color='lime')
線グラフの色をライムグリーンに変更する	plt.plot(データ列, データ列2, color='limegreen')
折れ線グラフを描画して、色をライムグリーンに変更する	plt.plot(データ列, データ列2, color='limegreen')
線グラフを描画して、その色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
線グラフを描画して、その色をマゼンタに指定する	plt.plot(データ列, データ列2, color='magenta')
線グラフを描画して、色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
折れ線グラフを描画して、色をミディアムオーキッドに指定する	plt.plot(データ列, データ列2, color='mediumorchid')
折れ線グラフを描画して色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフを描画して、色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
折れ線グラフを描画して、その色をミディアムスレートブルーに変更する	plt.plot(データ列, データ列2, color='mediumslateblue')
線グラフを描画して色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
線グラフの色をミディアムターコイズにセットする	plt.plot(データ列, データ列2, color='mediumturquoise')
線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='mediumvioletred')
折れ線グラフを描画して、その色をミディアムバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='mediumvioletred')
線グラフを描画して、その色をミッドナイトブルーに指定する	plt.plot(データ列, データ列2, color='midnightblue')
線グラフの色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
折れ線グラフを描画して、その色をミントクリームにセットする	plt.plot(データ列, データ列2, color='mintcream')
線グラフを描画してその色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフの色をモカシンにセットする	plt.plot(データ列, データ列2, color='moccasin')
折れ線グラフを描画して色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
折れ線グラフを描画してその色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
折れ線グラフの色をネイビーにセットする	plt.plot(データ列, データ列2, color='navy')
線グラフを描画してその色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
線グラフの色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
線グラフを描画して色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフを描画して、色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
線グラフの色をオリベドラブに変更する	plt.plot(データ列, データ列2, color='olivedrab')
折れ線グラフを描画して色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
線グラフの色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
折れ線グラフを描画して、色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
折れ線グラフを描画して色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
線グラフの色をペールグリーンに指定する	plt.plot(データ列, データ列2, color='palegreen')
線グラフを描画して、色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列, データ列2, color='paleturquoise')
折れ線グラフを描画して、その色をパレットトルコイズに指定する	plt.plot(データ列, データ列2, color='paleturquoise')
線グラフを描画してその色をパールバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='palevioletred')
線グラフの色をパパイヤウィップに指定する	plt.plot(データ列, データ列2, color='papayawhip')
折れ線グラフを描画してその色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
線グラフを描画して、その色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
折れ線グラフの色をペルーにセットする	plt.plot(データ列, データ列2, color='peru')
折れ線グラフを描画してその色をピンクに変更する	plt.plot(データ列, データ列2, color='pink')
折れ線グラフを描画してその色をプラムに指定する	plt.plot(データ列, データ列2, color='plum')
線グラフを描画して、色をパウダーブルーに変更する	plt.plot(データ列, データ列2, color='powderblue')
線グラフの色をパープルに指定する	plt.plot(データ列, データ列2, color='purple')
線グラフを描画して、その色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフの色をレベッカパープルに指定する	plt.plot(データ列, データ列2, color='rebeccapurple')
折れ線グラフを描画して色をレベッカパープルに変更する	plt.plot(データ列, データ列2, color='rebeccapurple')
線グラフを描画してその色を赤に変更する	plt.plot(データ列, データ列2, color='red')
折れ線グラフを描画して、色をロージーブラウンに指定する	plt.plot(データ列, データ列2, color='rosybrown')
折れ線グラフを描画して、その色をロイヤルブルーにセットする	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフを描画してその色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
折れ線グラフを描画してその色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
折れ線グラフを描画して、その色をサンディーブラウンにセットする	plt.plot(データ列, データ列2, color='sandybrown')
線グラフの色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
線グラフを描画して、その色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
折れ線グラフを描画して色を貝殻に指定する	plt.plot(データ列, データ列2, color='seashell')
折れ線グラフを描画してその色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
折れ線グラフを描画してその色をスカイブルーに指定する	plt.plot(データ列, データ列2, color='skyblue')
線グラフを描画して、その色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
折れ線グラフを描画してその色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
折れ線グラフを描画して、色をスチールブルーにセットする	plt.plot(データ列, データ列2, color='steelblue')
折れ線グラフの色を淡い茶色に変更する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフを描画して、その色をタンにセットする	plt.plot(データ列, データ列2, color='tan')
線グラフの色を青緑に指定する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフを描画して、色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
線グラフを描画して、その色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフの色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
線グラフを描画して、その色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
折れ線グラフの色を青緑にする	plt.plot(データ列, データ列2, color='turquoise')
折れ線グラフを描画して、その色をターコイズに変更する	plt.plot(データ列, データ列2, color='turquoise')
線グラフの色を青紫に変更する	plt.plot(データ列, データ列2, color='violet')
折れ線グラフを描画して、色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
折れ線グラフを描画してその色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
線グラフの色を白に指定する	plt.plot(データ列, データ列2, color='white')
折れ線グラフを描画してその色を白に変更する	plt.plot(データ列, データ列2, color='white')
折れ線グラフを描画して、色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
折れ線グラフの色をイエローグリーンにセットする	plt.plot(データ列, データ列2, color='yellowgreen')
ヒストグラムを描画してその色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
ヒストグラムを描画して、色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
ヒストグラムを描画して、色をアクアに設定する	plt.hist(データ列, color='aqua')
アクアマリンにヒストグラムの色を指定する	plt.hist(データ列, color='aquamarine')
ヒストグラムを描画して、その色をアクアマリンにセットする	plt.hist(データ列, color='aquamarine')
ヒストグラムを描画してその色をビスクに設定する	plt.hist(データ列, color='bisque')
ヒストグラムを描画してその色をブラックに設定する	plt.hist(データ列, color='black')
ヒストグラムを描画して色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムを描画して、その色を青に指定する	plt.hist(データ列, color='blue')
ヒストグラムの色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
ヒストグラムを描画して、その色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
ヒストグラムの色をシャルトリューズにする	plt.hist(データ列, color='chartreuse')
ヒストグラムを描画して、その色をシャルトリューズにセットする	plt.hist(データ列, color='chartreuse')
ヒストグラムを描画して、その色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
ヒストグラムの色を珊瑚にする	plt.hist(データ列, color='coral')
ヒストグラムを描画して、色をコーラルに設定する	plt.hist(データ列, color='coral')
やわらかい青にヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムを描画してその色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
ヒストグラムを描画して色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
ヒストグラムを描画して、その色をシアンにセットする	plt.hist(データ列, color='cyan')
ヒストグラムの色を濃い青にセットする	plt.hist(データ列, color='darkblue')
ヒストグラムを描画して、その色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
ダークシアンにヒストグラムの色を指定する	plt.hist(データ列, color='darkcyan')
ヒストグラムを描画してその色を濃いシアンに指定する	plt.hist(データ列, color='darkcyan')
ヒストグラムを描画してその色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムの色をダークグリーンにセットする	plt.hist(データ列, color='darkgreen')
ヒストグラムを描画して、色をダークグレーにセットする	plt.hist(データ列, color='darkgrey')
ヒストグラムを描画して色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
ヒストグラムを描画して、色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
ヒストグラムの色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
ヒストグラムを描画してその色をダークオーキッドにする	plt.hist(データ列, color='darkorchid')
ヒストグラムを描画して、その色をダークレッドに指定する	plt.hist(データ列, color='darkred')
ヒストグラムを描画して、色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
ヒストグラムを描画して、色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
ヒストグラムを描画して色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
ヒストグラムを描画して、その色をダーク・スラテグレーにする	plt.hist(データ列, color='darkslategrey')
ヒストグラムを描画して、色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
ヒストグラムを描画してその色をデピンクに変更する	plt.hist(データ列, color='deeppink')
ヒストグラムの色をディープスカイブルーにする	plt.hist(データ列, color='deepskyblue')
ヒストグラムを描画してその色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
ヒストグラムを描画してその色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
ヒストグラムを描画して色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
ヒストグラムを描画して、その色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
ヒストグラムの色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
ヒストグラムを描画して、その色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
ゲインズボロにヒストグラムの色をする	plt.hist(データ列, color='gainsboro')
ヒストグラムを描画して、色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
ゴーストホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='ghostwhite')
ヒストグラムの色をゴールドに指定する	plt.hist(データ列, color='gold')
ヒストグラムを描画してその色をゴールドに変更する	plt.hist(データ列, color='gold')
ヒストグラムの色をゴールデンロッドに指定する	plt.hist(データ列, color='goldenrod')
ヒストグラムを描画して、色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
ヒストグラムを描画して、色をグレーに指定する	plt.hist(データ列, color='grey')
ヒストグラムを描画して、その色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
ヒストグラムを描画してその色をインディゴに変更する	plt.hist(データ列, color='indigo')
ヒストグラムを描画して、その色をアイボリーに指定する	plt.hist(データ列, color='ivory')
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
ヒストグラムを描画して、その色をカーキにする	plt.hist(データ列, color='khaki')
ヒストグラムを描画して、その色をラベンダーに指定する	plt.hist(データ列, color='lavender')
ヒストグラムを描画してその色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
ヒストグラムを描画して、色をレモンシフォンにセットする	plt.hist(データ列, color='lemonchiffon')
ヒストグラムを描画して、色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
ヒストグラムを描画して、その色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
ヒストグラムを描画してその色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
ヒストグラムを描画して、その色をライトゴールドロディイエローにセットする	plt.hist(データ列, color='lightgoldenrodyellow')
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightgreen')
ヒストグラムを描画して、その色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
ヒストグラムを描画して、その色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
ヒストグラムを描画して、その色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
ヒストグラムを描画してその色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
ライトスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightskyblue')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
ヒストグラムを描画してその色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
ヒストグラムを描画して、その色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
ヒストグラムを描画して、その色をライトスチールブルーに変更する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
ヒストグラムの色をライムグリーンにセットする	plt.hist(データ列, color='limegreen')
ヒストグラムを描画して、色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
ヒストグラムを描画してその色をリネンに設定する	plt.hist(データ列, color='linen')
ヒストグラムを描画して色をマゼンタにセットする	plt.hist(データ列, color='magenta')
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
ヒストグラムを描画して、その色をマルーンに変更する	plt.hist(データ列, color='maroon')
ヒストグラムの色をミディアムアクアマリンにする	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムを描画してその色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムを描画して、その色をミディアムオーキッドにする	plt.hist(データ列, color='mediumorchid')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
ヒストグラムを描画して、色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
ヒストグラムを描画してその色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
ヒストグラムを描画して、その色をミディアムスレートブルーにセットする	plt.hist(データ列, color='mediumslateblue')
ヒストグラムを描画して、その色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムを描画して、その色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
ヒストグラムを描画してその色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
ヒストグラムを描画して、その色をモカシンに指定する	plt.hist(データ列, color='moccasin')
ヒストグラムを描画して、その色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
ヒストグラムを描画して色をネイビーに設定する	plt.hist(データ列, color='navy')
オールドレースにヒストグラムの色をセットする	plt.hist(データ列, color='oldlace')
ヒストグラムを描画して、色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
オリーブにヒストグラムの色をセットする	plt.hist(データ列, color='olive')
ヒストグラムを描画して色をオリーブに設定する	plt.hist(データ列, color='olive')
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
ヒストグラムを描画して色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
ヒストグラムを描画して、その色をオレンジに指定する	plt.hist(データ列, color='orange')
ペールグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='palegreen')
ヒストグラムを描画して、その色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
ヒストグラムを描画して、色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
パールバイオレットレッドにヒストグラムの色を指定する	plt.hist(データ列, color='palevioletred')
ヒストグラムを描画してその色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ピーチパフにヒストグラムの色を指定する	plt.hist(データ列, color='peachpuff')
ヒストグラムを描画して、色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
ヒストグラムを描画して色をペルーに設定する	plt.hist(データ列, color='peru')
ヒストグラムを描画して色をプラムに設定する	plt.hist(データ列, color='plum')
ヒストグラムを描画して、その色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
ヒストグラムを描画してその色を赤に変更する	plt.hist(データ列, color='red')
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
ヒストグラムを描画して、その色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
ヒストグラムの色をサーモンに指定する	plt.hist(データ列, color='salmon')
ヒストグラムを描画して、色をサーモンに指定する	plt.hist(データ列, color='salmon')
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
ヒストグラムを描画してその色をサンディーブラウンにする	plt.hist(データ列, color='sandybrown')
ヒストグラムを描画して、その色をシーグリーンにセットする	plt.hist(データ列, color='seagreen')
ヒストグラムを描画して、色を貝殻に設定する	plt.hist(データ列, color='seashell')
ヒストグラムを描画して、色をシエナに設定する	plt.hist(データ列, color='sienna')
ヒストグラムを描画して、その色をシルバーに指定する	plt.hist(データ列, color='silver')
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
ヒストグラムの色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
ヒストグラムを描画して色をスラグレーに設定する	plt.hist(データ列, color='slategray')
ヒストグラムを描画して、その色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
ヒストグラムを描画して、色をスノーに指定する	plt.hist(データ列, color='snow')
ヒストグラムを描画して、色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
ヒストグラムの色をタンにセットする	plt.hist(データ列, color='tan')
ヒストグラムを描画して、色をタンに指定する	plt.hist(データ列, color='tan')
ヒストグラムを描画して、色を青緑にセットする	plt.hist(データ列, color='teal')
ヒストグラムの色をシスルにセットする	plt.hist(データ列, color='thistle')
トマトにヒストグラムの色を指定する	plt.hist(データ列, color='tomato')
ヒストグラムを描画して色をトマトに設定する	plt.hist(データ列, color='tomato')
ヒストグラムを描画して、その色をバイオレットに設定する	plt.hist(データ列, color='violet')
ホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='white')
ヒストグラムを描画して、その色をホワイトに設定する	plt.hist(データ列, color='white')
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
ヒストグラムを描画して、色をイエローグリーンにセットする	plt.hist(データ列, color='yellowgreen')
＜オプション＞線種を点線に指定する	linestyle = 'dotted'
＜オプション＞グラフの線種を実線に設定する	linestyle = 'solid'
破線に折れ線グラフを設定する	plt.plot(データ列, データ列2, linestyle='dashed')
破線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
折れ線グラフを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
折れ線グラフを実線に設定する	plt.plot(データ列, データ列2, linestyle='solid')
破線にヒストグラムの線のスタイルを変更する	plt.hist(データ列, linestyle='dashed')
一点鎖線にヒストグラムの線のスタイルを指定する	plt.hist(データ列, linestyle='dashbot')
一点鎖線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムを点線に指定する	plt.hist(データ列, linestyle='dotted')
ヒストグラムの線のスタイルを実線に指定する	plt.hist(データ列, linestyle='solid')
実線でヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
＜オプション＞上三角印を使う	marker = '^'
＜オプション＞印を下三角に変更する	marker = 'v'
＜オプション＞左三角印を使用する	marker = '<'
＜オプション＞クロスマーカーを使う	marker = 'x'
＜オプション＞大バツ印を加える	marker = 'X'
＜オプション＞ダイアモンドマーカーを加える	marker = 'D'
データ列を折れ線グラフに描画してマーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
データ列を折れ線グラフに描画してマーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
折れ線グラフに上三角マーカーを使う	plt.plot(データ列, データ列2, marker='^')
折れ線グラフのマーカーを△にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフに描画して印を▲印にする	plt.plot(データ列, データ列2, marker='^')
データ列を折れ線グラフに描画してマーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列, データ列2, marker='<')
データ列を折れ線グラフに描画して、印を左三角にする	plt.plot(データ列, データ列2, marker='<')
折れ線グラフに右三角マーカーを加える	plt.plot(データ列, データ列2, marker='>')
折れ線グラフにクロスマーカーを使う	plt.plot(データ列, データ列2, marker='x')
折れ線グラフに描画して、マーカーをクロス印にする	plt.plot(データ列, データ列2, marker='x')
折れ線グラフに大バツ印を使う	plt.plot(データ列, データ列2, marker='X')
折れ線グラフに四角印を加える	plt.plot(データ列, データ列2, marker='s')
折れ線グラフに描画して、マーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
折れ線グラフに描画して、印をダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
折れ線グラフに星マーカーを用いる	plt.plot(データ列, データ列2, marker='*')
折れ線グラフのポイント印を赤色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
折れ線グラフの▲印を赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
折れ線グラフの下三角マーカーを赤色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
折れ線グラフの▲マーカーを青色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
折れ線グラフのバツ印を青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
折れ線グラフに黒い△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
折れ線グラフの三角マーカーを黒色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
折れ線グラフの四角印を黒色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
黄色い三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
折れ線グラフの▲マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
折れ線グラフに黄色い▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
折れ線グラフに黄色いクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
折れ線グラフに緑色の上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
折れ線グラフの三角印を緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
緑色の▽マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
折れ線グラフの▼マーカーを緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
緑色の右三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
緑色のダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
緑色の星マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
折れ線グラフのポイント印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
折れ線グラフの三角マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフに大きさnの下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
折れ線グラフの下三角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
折れ線グラフの左三角マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
折れ線グラフにサイズnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフのクロスマーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフの大バツ印の大きさをnに変更する	plt.plot(データ列, データ列2, marker='X', markersize=n)
折れ線グラフの四角印のサイズをnにセットする	plt.plot(データ列, データ列2, marker='s', markersize=n)
折れ線グラフにサイズnの菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフのダイアモンド印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフの星印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
折れ線グラフの丸マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
線幅nの▲マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
折れ線グラフの上三角印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
折れ線グラフの▽マーカーの線幅をnにセットする	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
折れ線グラフのバツマーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
線幅nの大バツ印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
折れ線グラフの大バツマーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
折れ線グラフの四角印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
折れ線グラフに線幅nの菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
折れ線グラフのダイアモンドマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
折れ線グラフの星印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
＜オプション＞三二ビット整数型を用いる	dtype = np.int16
配列をリストから作る	np.array(aList)
列を配列に変換する	np.array(iterable)
イテラブルから配列を作成する	np.array(iterable)
ゼロ埋めされた行列	np.zeros(要素数)
ゼロ埋めされた８ビット整数型のベクトルを作る	np.zeros(要素数, dtype=np.int8)
ゼロ埋めされた符号なし８ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.uint8)
ゼロ埋めされた三２ビット整数型のベクトルを作る	np.zeros(要素数, dtype=np.int16)
ブール型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int32)
０で全要素を初期化された整数型の行列	np.zeros(行数, 列数, dtype=np.int)
全要素を０で初期化された８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
全要素を０で初期化された符号なし８ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.uint8)
全要素を０で初期化された三二ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
０で全要素を初期化された論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
全要素を1で初期化されたベクトル	np.ones(要素数, dtype=np.int)
全要素を初期値で初期化された行列を作成する	np.full(要素数, 初期値, dtype=np.int)
未初期化のベクトル	np.empty(要素数, dtype=np.int)
配列と同じ大きさの空の配列を作る	np.empty_like(aArray)
1からNまでの行列	np.arange(1, N+1)
等差数列を行列に変換する	np.arange(開始値, 終端値, 等差)
行列の次元を変形する	aArray.reshape(行数, 列数)
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
既存の配列を元に全要素が0の配列を作成する	np.zeros_like(aArray)
既存の配列をベースに全要素が1の配列	np.ones_like(aArray)
ベクトルを元に全要素が初期値のベクトル	np.full_like(aArray, 初期値)
配列の列を選択する	aArray[:, 列番号]
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
ベクトルの各要素に加算する	aArray + aArray2
行列の差を求める	aArray - aArray2
行列の各要素の積を算出する	np.multiply(aArray, aArray2)
配列の内積を求める	np.dot(aArray, aArray2)
行列積	np.matmul(aArray, aArray2)
逆行列	np.linalg.inv(aArray)
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ベクトル間の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
ベクトルの形状	aArray.shape
行列のデータ型を計算する	aArray.dtype()
ベクトルの次元数を求める	aArray.ndim
行列の合計を計算する	np.sum(aArray)
行列の列ごとの合計値	np.sum(aArray, axis=0)
行列の行ごとの合計値を計算する	np.sum(aArray, axis=1)
行列の列ごとの平均値	np.mean(aArray, axis=0)
配列の行ごとの平均を計算する	np.mean(aArray, axis=1)
ベクトルの列ごとの最小値を算出する	np.min(aArray, axis=0)
配列の最大	np.max(aArray)
ベクトルの標準偏差を算出する	np.std(aArray)
ベクトルの累積和を求める	np.cumsum(aArray)
配列の累積積を算出する	np.cumprod(aArray)
配列から重複を除いたベクトルを作る	np.unique(aArray)
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
行列を一次元化する	aArray.flatten()
二つのオブジェクトが等しいかどうか調べる	obj == obj2
２つのオブジェクトが同一参照かどうか確認する	obj is obj2
オブジェクトをユーザ向けの文字列に変換する	str(obj)
オブジェクトは関数かどうか確認する	callable(obj)
オブジェクトの属性の値を見る	getattr(obj, プロパティ名)
オブジェクトにフィールドがあるかどうか調べる	hasattr(obj, プロパティ名)
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
オブジェクトがあるクラス	isinstance(obj, クラス)
オブジェクトは整数型のインスタンスかどうか調べる	isinstance(obj, int)
オブジェクトが浮動小数点数	isinstance(obj, float)
オブジェクトが文字列クラスか調べる	isinstance(obj, str)
オブジェクトが論理値型のインスタンス	isinstance(obj, bool)
オブジェクトはリストクラスかどうか調べる	isinstance(obj, list)
オブジェクトがタプルクラスのインスタンスか調べる	isinstance(obj, tuple)
オブジェクトは辞書か調べる	isinstance(obj, dict)
オブジェクトが集合か調べる	isinstance(obj, set)
オブジェクトはバイト列クラスかどうか調べる	isinstance(obj, bytes)
オブジェクトがリストかタプル	isinstance(obj, (list)
型のサブ型か	issubclass(サブクラス, クラス)
オブジェクトのクラスを使う	type(obj)
列の要約統計量	ds.describe()
データフレームのリストカラムの平均値を計算する	df[aList].mean()
カラムの平均値	ds.mean()
データフレームの中央値を求める	df.median()
列の50パーセンタイル	ds.median()
データフレームの第一四分位数を求める	df.quantile(0.25)
データフレームのリストカラムの25パーセンタイル	df[aList].quantile(0.25)
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
カラムの第三四分位数	ds.quantile(0.75)
データフレームのpercentパーセンタイル	df.quantile(percent/100)
データフレームの列のpercentパーセンタイル	df[col].quantile(percent/100)
データフレームのリスト列のどの値が最も現れるか見る	df[aList].mode()
カラムのモード	ds.mode()
データフレームの列の最頻値を求める	df[col].mode()
データフレームの列のどの値が頻出か見る	df[col].mode()
データフレームの標本標準偏差を求める	df.std()
データフレームのリストカラムの標本標準偏差を求める	df[aList].std()
カラムの標本標準偏差	ds.std()
データフレームのリストカラムの分散を求める	df[aList].var()
データフレームのリスト列はどの程度、分散しているか見る	df[aList].var()
列の分散を算出する	ds.var()
カラムがどの程度、分散しているか調べる	ds.var()
データフレームの列がどれだけ分散しているか見る	df[col].var()
データフレームは正規分布からどれだけ、歪んでいるか調べる	df.kurt()
データフレームのリストカラムの歪度を計算する	df[aList].kurt()
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか見る	df[aList].kurt()
データ列が正規分布からどの程度歪んでいるか確認する	ds.kurt()
データフレームのカラムが正規分布からどの程度、歪んでいるか調べる	df[col].kurt()
データフレームが正規分布からどれだけ、尖っているか確認する	df.skew()
データフレームのリストカラムの正規分布に対する上下広がりを算出する	df[aList].skew()
データフレームのリストカラムは正規分布からどの程度、尖っているか見る	df[aList].skew()
データフレームのカラムが正規分布からどれだけ、尖っているか確認する	df[col].skew()
データ列を整数に丸める	ds.round()
データフレームのリスト列を10の位で丸める	df[aList].round(-1)
カラムを10の位で丸める	ds.round(-1)
データフレームのリストカラムを千の位で丸める	df[aList].round(-3)
データ列を1000の位で四捨五入する	ds.round(-3)
データフレームを四捨五入して、整数型にする	df.round().astype(int)
データ列を丸めて整数型にする	ds.round().astype(int)
データフレームのカラムを丸めて整数型にする	df[col].round().astype(int)
データフレームのリストカラムを10の位で丸めて、整数にする	df[aList].round(-1).astype(int)
データ列を10の位で四捨五入して整数型にする	ds.round(-1).astype(int)
データフレームの列を10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
データフレームのリストカラムを100の位で四捨五入して、整数にする	df[aList].round(-2).astype(int)
データ列を100の位で四捨五入して、整数にする	ds.round(-2).astype(int)
データフレームのカラムを100の位で丸めて整数にする	df[col].round(-2).astype(int)
カラムを千の位で丸めて、整数型にする	ds.round(-3).astype(int)
データフレームのカラムを1000の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
xでデータフレームの欠損値を埋める	df.fillna(x)
データフレームのNaNをxに設定する	df.fillna(x)
データフレームのリスト列の未入力値をxで補う	df[aList].fillna(x)
データフレームのリストカラムの欠損値をxに指定する	df[aList].fillna(x)
データ列のNaNをxで埋める	ds.fillna(x)
データ列のNaNをxに設定する	ds.fillna(x)
xでデータフレームのカラムの欠損値を置換する	df[col].fillna(x)
データフレームのカラムのNaNをxに設定する	df[col].fillna(x)
データフレームの欠損値を平均値で補う	df.fillna(df.mean())
データフレームの欠損値を平均にセットする	df.fillna(df.mean())
データフレームのリスト列の欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
データフレームのリストカラムの欠損値を平均に設定する	df[aList].fillna(df[aList].mean())
カラムの欠損値を平均で埋める	ds.fillna(ds.mean())
データ列の欠損値を平均値にする	ds.fillna(ds.mean())
データフレームの列の欠損値を平均値で置換する	df[col].fillna(df[col].mean())
データフレームの列のNaNを平均値に設定する	df[col].fillna(df[col].mean())
データフレームのNaNをモードで埋める	df.fillna(df.mode().iloc[0])
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
モードでデータフレームのリストカラムの欠損値を置換する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのリスト列の欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
最頻値で列のNaNを埋める	ds.fillna(ds.mode().iloc[0])
データ列のNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
モードでデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームのカラムの欠損値を最頻値に増やす	df[col].fillna(df[col].mode().iloc[0])
メディアンでデータフレームの未入力値を埋める	df.fillna(df.median())
データフレームの欠損値をメディアンに変更する	df.fillna(df.median())
データフレームのリスト列のNaNを中央値で補う	df[aList].fillna(df[aList].median())
データフレームのリストカラムのNaNを中央値に設定する	df[aList].fillna(df[aList].median())
50パーセンタイルでデータ列の欠損値を埋める	ds.fillna(ds.median())
データ列のNaNを中央値に設定する	ds.fillna(ds.median())
データフレームのカラムの欠損値を中央値で補う	df[col].fillna(df[col].median())
データフレームのカラムの未入力値をメディアンに設定する	df[col].fillna(df[col].median())
最大値でデータフレームの未入力値を埋める	df.fillna(df.max())
データフレームのリストカラムのNaNを最大値で補う	df[aList].fillna(df[aList].max())
データフレームのリスト列のNaNを最大値に設定する	df[aList].fillna(df[aList].max())
データ列の欠損値を最大値で置き換える	ds.fillna(ds.max())
データフレームのカラムのNaNを最大値に設定する	df[col].fillna(df[col].max())
データフレームの欠損値を最小値で置換する	df.fillna(df.min())
データフレームのリスト列の欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
最小値で列の欠損値を補う	ds.fillna(ds.min())
データ列の欠損値を最小値に増やす	ds.fillna(ds.min())
最小値でデータフレームの列のNaNを置換する	df[col].fillna(df[col].min())
データフレームのカラムの欠損値を最小値に指定する	df[col].fillna(df[col].min())
直前の値でデータフレームのNaNを置換する	df.fillna(method='ffill')
データフレームのリストカラムの未入力値を直前の値で埋める	df[aList].fillna(method='ffill')
データフレームのリストカラムの未入力値を直前の値に設定する	df[aList].fillna(method='ffill')
データ列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
直前の値でデータフレームのカラムの欠損値を補う	df[col].fillna(method='ffill')
データフレームのカラムのNaNを直前の値に設定する	df[col].fillna(method='ffill')
直後の値でデータフレームのNaNを置換する	df.fillna(method='bfill')
データフレームのNaNを直後の値に設定する	df.fillna(method='bfill')
直後の値でデータフレームのリスト列のNaNを埋める	df[aList].fillna(method='bfill')
データフレームのリストカラムのNaNを直後の値に設定する	df[aList].fillna(method='bfill')
直後の値でデータ列の欠損値を補う	ds.fillna(method='bfill')
データ列のNaNを後の値に設定する	ds.fillna(method='bfill')
直後の値でデータフレームの列の欠損値を置き換える	df[col].fillna(method='bfill')
データフレームの列の欠損値を直後の値に変更する	df[col].fillna(method='bfill')
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
データフレームの空文字をNaNに変換しドロップする	df.replace('', np.nan).dropna()
データフレームのリストカラムの空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
カラムの空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
ValueMapで一度にデータフレームを置換する	df.replace(ValueMap)
ValueMapでデータフレームのリストカラムの値を置き換える	df[aList].replace(ValueMap)
データ列をValueMapでまとめて置き換える	ds.replace(ValueMap)
まとめてデータフレームのカラムをValueMapで置き換える	df[col].replace(ValueMap)
データフレームの値を正規表現patternでreplにまとめて置き換える	df.replace(pattern, repl, regex=True)
まとめてreplに正規表現patternでデータフレームのリストカラムの値を置き換える	df[aList].replace(pattern, repl, regex=True)
カラムの値を正規表現でまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
データフレームのカラムの値を正規表現patternでreplに置き換える	df[col].replace(pattern, repl, regex=True)
データフレームの値が欠損値	df.isna()
データフレームのリストカラムの値が欠損値	df[aList].isna()
データ列の値がNaNか調べる	ds.isna()
データフレームのカラムの値は未入力値	df[col].isna()
データフレームの中にいくつ欠損値が含まれるか数える	df.isna().sum()
データフレームのリスト列の中の欠損値の合計をカウントする	df[aList].isna().sum()
データフレームのリストカラムの中にいくつ欠損値が存在するか求める	df[aList].isna().sum()
データ列の中の欠損値の数を数える	ds.isna().sum()
データフレームのカラムの中のNaNの数を数える	df[col].isna().sum()
データフレームのカラムの中にいくつ欠損値があるか求める	df[col].isna().sum()
データフレームの中に文字列が存在するか調べる	df.isin([value])
データフレームのリスト列の中に文字列があるか調べる	df[aList].isin([value])
カラムの中に文字列がある	ds.isin([value])
データフレームのカラムの中にが含まれるか調べる	df[col].isin([value])
データフレームの中に存在する日付データの数を数える	df.isin([value]).sum()
データフレームのリストカラムの中に存在する文字列の合計を数える	df[aList].isin([value]).sum()
データフレームのリストカラムの中にいくつがあるか数える	df[aList].isin([value]).sum()
データ列の中にある文字列の数をカウントする	ds.isin([value]).sum()
データ列の中にいくつ文字列があるか求める	ds.isin([value]).sum()
データフレームのカラムの中にある日付データの合計をカウントする	df[col].isin([value]).sum()
データフレームのカラムの中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
データフレームの中にと日付データが存在する	df.isin([value, value2])
データフレームのリストカラムの中に文字列と日付データが含まれるかどうか調べる	df[aList].isin([value, value2])
列の中に日付データと日付データがあるかどうか確認する	ds.isin([value, value2])
データフレームの列の中に文字列と文字列があるか調べる	df[col].isin([value, value2])
データフレームの中に含まれる文字列との合計をカウントする	df.isin([value, value2]).sum()
データフレームの中にと日付データがいくつ存在するか数える	df.isin([value, value2]).sum()
データフレームのリストカラムの中にある日付データと文字列の合計を数える	df[aList].isin([value, value2]).sum()
データフレームのリストカラムの中に日付データと文字列がいくつ存在するか数える	df[aList].isin([value, value2]).sum()
カラムの中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
データ列の中に日付データと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
データフレームのカラムの中に存在する日付データと日付データの合計をカウントする	df[col].isin([value, value2]).sum()
データフレームのカラムの中に文字列と日付データがいくつあるか求める	df[col].isin([value, value2]).sum()
縦方向に二つのデータフレームを連結する	pd.concat([df, df2])
二つのデータフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
２つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
複数のデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
横方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
データフレームとデータ列を合体させる	pd.concat([df, ds], axis=1)
データフレームから一番左側の列を除く	df[df.columns[1:]]
データフレームから末尾の列を除く	df[df.columns[:-1]]
データフレームからn番目の列を消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
２つのデータフレームを結合する	pd.merge(df, df2)
二つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
異なる列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
列をキーにして２つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
列をキーにして2つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
列'A'と列'B'をキーとして2つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
異なる列をキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
二つのデータフレームを列'A'と列'B'をキーとして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
二つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
列'A'と列'B'をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
列'A'と列'B'をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
イテラブルをダミー変数にする	pd.get_dummies(iterable)
データフレームの列を最初のカテゴリーを除外し、ワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
データフレームの列をNaNも加えてダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
データフレームの先頭n行を取り出す	df.head(n)
データフレームの下n行を抽出する	df.tail(n)
データフレームからランダムに一行を抽出する	df.sample()
データフレームからランダムにn行を選択する	df.sample(n)
データフレームからランダムにn行を重複を認めてサンプリングする	df.sample(n, replace=True)
範囲指定してデータフレームの行を選択する	df[start:end]
データフレームのstart行目からend行目まで取り出す	df[start:end]
データフレームのn行目以降抽出する	df[n:]
データフレームのn行までを選ぶ	df[:n]
データフレームの指定された列を取り出す	df[column]
配列としてデータフレームの指定した列を選択する	df[column].values
データフレームの指定した列をリストに変換する	df[column].values.tolist()
データフレームから指定された列だけ抽出する	df[[column]]
データフレームから列を２つ選択する	df[[column, column2]]
データフレームから指定された二列だけ抽出する	df[[column, column2]]
データフレームからカラムを三つのみ選択する	df[[column, column2, column3]]
データフレームから指定した三つの列を選ぶ	df[[column, column2, column3]]
データフレームから指定された４つの列を取り出す	df[[column, column2, column3, column4]]
データフレームの指定された列名一覧の列のみ選択する	df[columns]
データフレームの列の種類を見る	df.info()
表の列名の一覧を使う	df.columns
表データの列名を指定された列の名前一覧に置き換える	df.columns = columns
表データからカテゴリデータのカラム名の一覧を使う	df.select_dtypes('object').columns
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
データフレームのインデックス一覧を使う	df.index
データフレームから型リストデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
データフレームから型リストで指定したデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
データフレームからカテゴリデータを選択する	df.select_dtypes('object')
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
データフレームから型の列を取り出す	df.select_dtypes(ty)
データフレームのシェイプ	df.shape
データフレームのリスト列の各列間の相関係数	df[aList].corr()
ピアソンとしてデータフレームの相関行列を求める	df.corr(method='pearson')
ピアソンを使ってデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
データフレームのリストで指定した列の相関行列ピアソンを用いて	df[aList].corr(method='pearson')
データフレームの相関行列ケンドール順位相関係数で	df.corr(method='kendall')
ケンドールとしてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
ケンドール順位相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
データフレームの相関行列スピアマン相関係数として	df.corr(method='spearman')
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
スピアマン順位相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
データフレームの相関行列をヒートマップを用いて描画する	sns.heatmap(df.corr())
データフレームのリストで指定された列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
データフレームの数値を丸める	df.round()
データフレームを一度に小数点以下n桁で丸める	df.round(n)
データフレームのカラムの名前を付け直す	df.rename(columns={column: name})
データフレームの列名を一度に文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームの行の名前を一度に、nameからname2に付け直す	df.rename(index={name: name2})
データフレームの列がxである行を取り出す	df[df[column] == x]
データフレームの列がxでない行を消す	df[df[column] == x]
データフレームの列の値がxかつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームの列がxより小さいデータを抽出する	df[df[column] < x]
データフレームの列がx以下の行を選択する	df[df[column] <= x]
データフレームの列がxより大きい行を選択する	df[df[column] > x]
データフレームの列の値がxより多くx2より小さい行を選択する	df[(x < df[column]) & (df[column] < x2)]
表データの列の値がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
データフレームの列で文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
データフレームの列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
データフレームの列の文字列が正規表現文字列にマッチしない行を取り出す	df[not df[column].str.match(s)]
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
データフレームの列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
データフレームの列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
データフレームの欠損値がある箇所に色を付ける	df.style.highlight_null()
データフレームのn行目を削除して、入れ替える	df.drop(n, axis=0, inplace=True)
表データの列をインプレイスで消す	df.drop(column, axis=1, inplace=True)
データフレームの列と列を取り除く	df.drop([column, column2], axis=1)
データフレームの列名一覧で指定された列を落とす	df.drop(columns, axis=1)
データフレームの内の欠損値を消す	df.dropna()
データフレームの内の欠損値が存在する行を削除する	df.dropna()
データフレームの重複する行数のマスク	df.duplicated()
重複した行のみを抽出する	df[df.duplicated(keep=False)]
データフレームの重複していない行だけを選択する	df[not df.duplicated(keep=False)]
データフレームの中で列の重複を見る	df.duplicated(subset=column)
データフレームの中で、列に重複があるか確認する	df.duplicated(subset=column)
データフレームの中で、列と列の重複を確認する	df.duplicated(subset=[column, column2])
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
データフレームから重複した行をドロップする	df.drop_duplicates()
重複を破壊的にデータフレームから削除する	df.drop_duplicates(inplace=True)
データフレームから重複した行を削除し、、更新する	df.drop_duplicates(inplace=True)
データフレームから破壊的に重複した行をドロップする	df.drop_duplicates(inplace=True)
データフレームの中で、列と列の重複を消す	df.drop_duplicates(subset=column)
データフレームの列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームの中の列とカラムに重複があれば、消す	df.drop_duplicates(subset=[column, column2])
dateStringをdatetime64型に変換する	pd.to_datetime(dateString)
Pandasで、データ列をPandasの日付型にする	pd.to_datetime(ds)
Pandasで、文字列をPandasの日付型に変換する	pd.to_datetime(s)
Pandasで、フォーマットとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
書式としてデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
フォーマットfmtでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format=fmt)
Pandasで、フォーマットfmtでデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format=fmt)
Pandasで、フォーマットfmtで文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
エポック秒のデータフレームのcollからタイムスタンプに変換する	pd.to_datetime(df[col], unit='s', utc=True)
Pandasで、データフレームのcollのエポック秒からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
Pandasで、UNIX秒のデータ列からPandasの日付型にする	pd.to_datetime(ds, unit='s', utc=True)
データ列のUNIX時間から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
Pandasで、エポック秒の文字列からPandasの日付型にする	pd.to_datetime(s, unit='s', utc=True)
文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
タイムスタンプ型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
Pandasで、データフレームのカラムをPandasの日付型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
Pandasでデータ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データ列が何月か確認する	ds.dt.month
データフレームのカラムの時を使う	df[col].dt.hour
データフレームのカラムは何曜日か調べる	df[col].dt.weekday_name
データ列の曜日名を使う	ds.dt.weekday_name
データフレームを表示するとき表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームを表示するとき、最大行数を変更する	pd.set_option('display.max_rows', n)
データフレームを表示するとき、表示される行数をnに変更する	pd.set_option('display.max_rows', n)
データフレームを表示するときn行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
データフレームを表示するとき小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
データフレームを表示するとき列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
データフレームを表示するとき、ヘッダー行を左寄せにセットする	pd.set_option('colheader_justify', 'left')
データフレームをエクセルファイルから読み込む	pd.read_excel(filename)
エクセルデータファイルを読み込む	pd.read_excel(filename)
エクセルファイルをファイルから読み込む	pd.read_excel(filename)
エクセルファイルファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
エクセルデータファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
エクセルファイルファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
nとn2のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
TSVを読み込む	pd.read_csv(filename, sep='\t')
＜オプション＞エクセルファイルのシートの名前をnamesに設定する	sheet_name = names
＜オプション＞先頭の列を行に設定する	index_col = 0
＜オプション＞n番目の列を行に設定する	index_col = n
＜オプション＞行を自動的な連番に変更する	index_col = None
＜オプション＞最初の行をヘッダにする	header = 0
＜オプション＞カラムの名前を自動的な連番にする	header = None
＜オプション＞namesをカラムの名前に指定する	names = names
＜オプション＞読み込まないフッタをnに指定する	skipfooter = n
TSVファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
CSVファイルTSVをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
文字列TSVファイルからCSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
TSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
TSVファイルからCSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームをJSONL形式のファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームをエクセルデータファイルでJSONLファイルに書き込む	df.to_excel(filename)
データフレームをCSVファイルとしてJSONLファイルに保存する	df.to_csv(filename)
JSONLファイルにタブ区切りとしてデータフレームを保存する	df.to_csv(filename, sep='\t')
TSV形式でデータフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ヘッダを付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, header=None)
データフレームをSJISでJSONLファイルに書き込む	df.to_csv(filename, encoding='shift_jis')
データフレームを列の値でグループ分けする	df.groupby(column)
データフレームを列によってまとめた表	df.groupby(column)
データフレームを'A'列の値によって集計する	df.groupby('A')
二つの列の値によって表データを分類する	df.groupby(['A', 'B'])
データフレームを二つの列でまとめたグループを使う	df.groupby(['A', 'B'])
複数の列の値によってデータフレームをグループ化する	df.groupby(columns)
列名リストによってデータフレームをまとめたグループ	df.groupby(columns)
データフレームを関数によってグループ化する	df.groupby(関数)
関数でデータフレームをまとめたグループ	df.groupby(関数)
列の値によってデータフレームをグループ化し記述統計量を計算する	df.groupby(column).describe()
データフレームを'A'列の値によってグループ化し、要約統計量を算出する	df.groupby('A').describe()
データフレームを二つの列によってグループ化し、記述統計量を計算する	df.groupby(['A', 'B']).describe()
データフレームを複数の列によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
データフレームを関数でグループ化し、要約統計量を求める	df.groupby(関数).describe()
列の値でデータフレームを欠損値を含めて集約する	df.groupby(column, dropna=False)
データフレームを列にグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームを'A'列ごとにグループ化し、、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームを２つの列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
列名リストごとにデータフレームをグループ分けして、列挙する	[(name, group) for name, group in df.groupby(columns)]
関数の値によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームを各列毎にグループ化し、文字列というグループを求める	df.groupby(column).get_group(s)
データフレームを列の値でグループ化し、、それぞれのグループの件数を知る	df.groupby(column).size()
データフレームを各列毎にグループ化して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
データフレームの各グループごとの合計	df.groupby(column).sum()
データフレームを列毎に集計して合計を求める	df.groupby(column).sum()
データフレームの各グループの平均値	df.groupby(column).mean()
データフレームを列によってグループ化して、それぞれのグループ毎の平均値を計算する	df.groupby(column).mean()
データフレームのそれぞれのグループの個数を求める	df.groupby(column).count()
データフレームを列の値によってグループ化して、各グループごとの個数を算出する	df.groupby(column).count()
データフレームのグループ毎の最大値	df.groupby(column).max()
列によってデータフレームをグループ化して、グループごとの最大値を算出する	df.groupby(column).max()
表データのグループごとの最小値を求める	df.groupby(column).min()
データフレームを列によってグループ化し、、各グループ毎の最小値を求める	df.groupby(column).min()
表データを列の値によってグループ分けし、それぞれのグループ毎の分散を求める	df.groupby(column).var()
列によってデータフレームを集計し、、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
データフレームを各列と列の組み合わせ毎にグループ化して個数を求める	df.groupby([column, column2], as_index=False).count()
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を計算する	df.groupby([column, column2], as_index=False).max()
データフレームを各列と列の組み合わせ毎にグループ分けして、最小値を算出する	df.groupby([column, column2], as_index=False).min()
データフレームを各列と列の組み合わせ毎に集約して、分散を求める	df.groupby([column, column2], as_index=False).var()
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
各列毎にデータフレームをグループ化して、カラムの合計を求める	df.groupby(column)[column2].sum()
各列毎に表データをグループ化してカラムの平均値を計算する	df.groupby(column)[column2].mean()
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
データフレームを各列毎にグループ化し、、列の個数を算出する	df.groupby(column)[column2].count()
データフレームをグループ化し、各列に対し最大値を求める	df.groupby(column)[column2].max()
各列毎にデータフレームをグループ化して、列の最大値を計算する	df.groupby(column)[column2].max()
データフレームをグループ化し各列に対し最小値を求める	df.groupby(column)[column2].min()
データフレームを各列毎にグループ化して、列の最小値を計算する	df.groupby(column)[column2].min()
データフレームをグループ化し、列に対し分散を求める	df.groupby(column)[column2].var()
各列毎にデータフレームをグループ分けし、列の分散を計算する	df.groupby(column)[column2].var()
各列毎にデータフレームをグループ化して列の標準偏差を求める	df.groupby(column)[column2].std()
データフレームを列で集計し、列の要約統計量を求める	df.groupby(column).describe()[column2]
データ列の各値の出現回数	ds.value_counts()
列の各値が何回出現するか確認する	ds.value_counts()
列の各データ値の出現数を計算する	df[col].value_counts()
データフレームの列の各データが何回出現するか確認する	df[col].value_counts()
列の一意な要素	ds.unique()
データフレームの列の一意な値を見る	df[col].unique()
データ列のユニークな値の個数を見る	ds.nunique()
データ列をビン数nを用いてビン分割する	pd.cut(ds, n)
データ列をn個にビン分割する	pd.cut(ds, n)
データフレームの中の列をビン数nとして分割する	pd.cut(df[col], n)
データフレームの中のカラムをn個にビン分割する	pd.cut(df[col], n)
ビン数nとしてリストをビン分割する	pd.cut(aList, n)
n個にリストをビン分割する	pd.cut(aList, n)
ビン数nを用いて配列をビン分割する	pd.cut(aArray, n)
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
列を分割数nでビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
ビン数nでデータフレームの中のカラムをビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
n個にデータフレームの中の列をビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
ビン数nでリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
n個にリストを分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ビン数nで配列をビニングし、namesのラベルをつける	pd.cut(aArray, n, labels=names)
配列をn個にビニングし、namesのラベルをつける	pd.cut(aArray, n, labels=names)
等量でビン数nを用いてデータ列を分割する	pd.qcut(ds, n)
列を等量でn個にビニングする	pd.qcut(ds, n)
データフレームの中の列を等量で分割数nで分割する	pd.qcut(df[col], n)
ビン数nでリストを等しい量になるようにビン分割する	pd.qcut(aList, n)
リストを等しい量になるようにn個に分割する	pd.qcut(aList, n)
ビン数nとして配列を等量でビン分割する	pd.qcut(aArray, n)
配列をn個に等量でビン分割する	pd.qcut(aArray, n)
列をビン分割する	pd.cut(ds, aList)
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
データ列を中央値で分割する	pd.qcut(ds, 2)
データフレームの中のカラムを中央値でビン分割する	pd.qcut(df[col], 2)
四分位数ごとに列を分割する	pd.qcut(ds, 4)
四分位数ごとにデータフレームの中の列を分割する	pd.qcut(df[col], 4)
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
四分位数で配列を分割する	pd.qcut(aArray, 4)
列によってデータフレームをソートする	df.sort_values(by=column)
データフレームを'A'列で並べる	df.sort_values(by='A')
表データを二つの列で並べ直す	df.sort_values(by=['A', 'B'])
データフレームを複数の列を用いてソートする	df.sort_values(by=column)
列で昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True)
昇順に'A'列によってデータフレームをソートする	df.sort_values(by='A', ascending=True)
データフレームを昇順に二つの列を用いて並べる	df.sort_values(by=['A', 'B'], ascending=True)
複数の列でデータフレームを小さい順にソートする	df.sort_values(by=column, ascending=True)
データフレームを列によってによって大きい順に並べる	df.sort_values(by=column, ascending=False)
降順に'A'列でによってデータフレームをソートする	df.sort_values(by='A', ascending=False)
降順に2つの列によってによってデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
データフレームを列名リストによってによって降順に並べ直す	df.sort_values(by=column, ascending=False)
列を用いてデータフレームをソートし、、更新する	df.sort_values(by=column, inplace=True)
破壊的にデータフレームを列でによって並べ直す	df.sort_values(by=column, inplace=True)
'A'列によってデータフレームをソートして更新する	df.sort_values(by='A', inplace=True)
データフレームを'A'列でによって破壊的にソートする	df.sort_values(by='A', inplace=True)
'A'列と'B'列でデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを二つの列によってで破壊的に整列する	df.sort_values(by=['A', 'B'], inplace=True)
複数の列によってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
データフレームを複数の列でで破壊的にソートする	df.sort_values(by=column, inplace=True)
昇順に列を用いてデータフレームをソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを列によって昇順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを'A'列によって昇順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームを'A'列で昇順に破壊的に並べる	df.sort_values(by='A', ascending=True, inplace=True)
昇順に２つの列によってデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
２つの列で破壊的に昇順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
列名リストで小さい順にデータフレームを整列し、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを複数の列を用いて破壊的に昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを'A'列によって降順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
降順にデータフレームを破壊的に２つの列によって整列する	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
破壊的に列名リストによって降順にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを列によってソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームを'A'列によって並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
データフレームを'A'列と'B'列によって並べ直し、、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
複数の列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームを列でソートして上位n件を取り出す	df.sort_values(columns).head(n)
データフレームを列でソートし、、下位n件を取り出す	df.sort_values(columns).tail(n)
データフレームを列によってソートして新しいインデックスを振り直す	df.sort_values(columns).reset_index()
データフレームを列によってソートして、行を振り直す	df.sort_values(columns).reset_index(drop=True)
データフレームを行を用いて並べる	df.sort_index()
インデックスによって小さい順にデータフレーム全体を並べる	df.sort_index(ascending=True)
データフレームをインデックスで降順でソートする	df.sort_index(ascending=False)
FIXME:カテゴリーデータを出現頻度順に並べる	df['A'].value_counts().sort_index().index
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
乱数を生成する	random.random()
最大値・最小値の範囲として一様な疑似乱数を算出する	random.uniform(最小値, 最大値)
正規分布として乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
平均値と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
配列から一つランダムに選ぶ	random.choice(iterable)
英文字から一つランダムに選ぶ	random.choice(string.ascii_uppercase)
シーケンスから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
列からn個、サンプリングする	random.sample(iterable, k=n)
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
前もって大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
前もって複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列を走査し正規表現にマッチするか確認する	re.search(pattern, s)
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
正規表現に文字列の先頭で大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
正規表現に文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
文字列を正規表現で分ける	re.split(pattern, s)
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
文字列を複数行対応としてパターンで分割する	re.split(pattern, s, flags=re.MULTILINE)
文字列の中の正規表現による全てのマッチを求める	re.findall(pattern, s)
文字列の中のASCII限定として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
文字列の中のケースを無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
文字列の中で大文字・小文字を無視して正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
文字列の中の複数行対応としてパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
文字列中のパターンを新しい文字列で置換する	re.sub(pattern, newsub, s)
空の集合を生成する	set()
列から集合	set(iterable)
シーケンスをセットに変換する	set(iterable)
セットにイテラブルの要素を全て追加する	aSet.update(iterable)
集合に列を追加する	aSet.update(iterable)
集合から値を取り除く	aSet.remove(element)
セットから全ての要素を除く	aSet.clear()
二つの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
集合から別のセットとの共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
二つの集合の差集合を使う	aSet.difference(aSet2)
セットの補集合	aSet.difference(aSet2)
要素はセットの要素か調べる	element in aSet
要素が集合に含まれる	element in aSet
要素が集合の要素に含まれないかどうか	element not in aSet
要素は集合に含まれないか調べる	element not in aSet
ふたつの関係が⊆か調べる	aSet.issubset(aSet2)
集合の全ての要素が別の集合に含まれるかどうか	aSet.issubset(aSet2)
真部分集合	aSet < aSet2
ふたつの関係が真スーパーセットか調べる	aSet > aSet2
上位集合もしくは等しいか	aSet > aSet2
ふたつの集合が集合と交わりを持たないか	aSet.isdisjoint(aSet2)
ふたつの集合が集合と互いに素	aSet.isdisjoint(aSet2)
ふたつの集合は互いに素か調べる	aSet.isdisjoint(aSet2)
集合の要素数	len(aSet)
集合が空でない	len(aSet) != 0
イテラブルのイミュータブルなセット	frozenset(iterable)
イテラブルをイミュータブルなセットに変換する	frozenset(iterable)
セットの変更不能版	frozenset(aSet)
集合をイミュータブルな集合に変換する	frozenset(aSet)
英字を使う	string.ascii_letters
小文字を全部使う	string.ascii_lowercase
アルファベットの大文字を見る	string.ascii_uppercase
十六進数字を全部見る	string.hexdigits
８進数字を全部求める	string.octdigits
句読点文字を全て見る	string.punctuation
空白文字を全て見る	string.whitespace
文字のASCIIコード	ord(ch)
文字列を空白で分割して、文字列リストにする	s.split()
文字列を空白で区切って、数列に変換する	map(int, s.split())
文字列を部分文字列で区切って文字列リストに変換する	s.split(sub)
部分文字列で文字列を分割する	s.split(sub)
文字列をカンマで分割して文字列リストに変換する	s.split(',')
カンマによって文字列を区切り、列挙する	s.split(',')
文字列をコロンによって区切って列挙する	s.split(':')
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
文字列を区切りで分割して、列挙する	s.split(sep)
改行によって文字列を区切る	s.splitlines()
文字列を空白で右から分割する	s.rsplit()
部分文字列で右から文字列を区切る	s.rsplit(sub)
部分文字列で文字列を二分し、先頭の文字列を使う	s.partition(sub)[0]
文字列を部分文字列で分けたときの最初の文字列	s.partition(sub)[0]
文字列を部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
文字列を最初の部分文字列で分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
文字列を最後の部分文字列で分割したときの前半の文字列	s.rpartition(sub)[0]
文字列を最後の部分文字列で二つに区切って後半の文字列を求める	s.rpartition(sub)[-1]
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
文字列を別の文字列によって置換する	s.replace(sub, newsub)
別の文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
別の文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
文字列から部分文字列を全て除去する	s.replace(sub, '')
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
文字列の両端から余分な空白を取り除く	s.strip()
文字列の最初の余分な空白を除去する	s.lstrip()
文字列の右端から余分な空白を除く	s.rstrip()
文字列の末尾から部分文字列を除く	s.rstrip(sub)
文字列の末尾からタブを取り除く	s.rstrip('\t')
文字列の右側から改行を除去する	s.rstrip('\n')
文字列の末尾から空白を取り除く	s.rstrip(' ')
文字列のケースを逆にする	s.swapcase()
文字列が文字列リストのいづれ	s in aStringList
文字列中に部分文字列が存在するか判定する	sub in s
文字列中に部分文字列がないか調べる	sub not in s
部分文字列を文字列の先頭から探す	s.find(sub)
文字列の開始位置先に部分文字列があるかどうか調べる	s.find(sub, start) != -1
文字列の開始位置以降に部分文字列が含まれないかどうか	s.find(sub, start) == -1
文字列の終了位置以前に部分文字列が含まれる	s.find(sub, 0, end) != -1
文字列の終了位置より前に部分文字列がないか	s.find(sub, 0, end) == -1
文字列の開始位置と終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	s.find(sub, start, end) == -1
文字列の開始位置からと終了位置までの間に部分文字列がないか調べる	s.find(sub, start, end) == -1
部分文字列を文字列の最後から探す	s.rfind(sub)
文字列リストをひとつの文字列にする	''.join(aStringList)
イテラブルを文字列リストに変換して空白で結合する	' '.join(map(str, iterable))
イテラブルを文字列に変換してカンマによってつなげる	','.join(map(str, iterable))
イテラブルを文字列リストに変換して、タブによって連結する	'\t'.join(map(str, iterable))
イテラブルを文字列に変換して、'改行でつなげる	'\n'.join(map(str, iterable))
リストを文字列リストに変換して部分文字列を使って連結する	sub.join(map(str, iterable))
文字列中の部分文字列の登場回数	s.count(sub)
文字列中に部分文字列がいくつか含まれるかカウントする	s.count(sub)
文字列の開始位置から終了位置までの範囲で部分文字列の登場を数える	s.count(sub, start, end)
部分文字列で部分文字列が開始するかどうか調べる	s.startswith(sub)
文字列の接頭辞が部分文字列かどうか調べる	s.startswith(sub)
文字列の開始位置以降が部分文字列で始まる	s.startswith(sub, start)
文字列が部分文字列で終わる	s.endswith(sub)
文字列の接頭辞から部分文字列を消す	s.removeprefix(sub)
部分文字列を文字列の末尾から取り除く	s.removesuffix(sub)
ファイル名がJSONファイルか	filename.endswith('.json')
文字列が小文字	s.islower()
文字列が全て数字	s.isdigit()
文字列が英字	s.isalpha()
文字列が全て英数字か判定する	s.isalnum()
文字列が全てASCII文字	s.isascii()
文字列が全て空白か調べる	s.isspace()
文字列は十進数字	s.isdecimal()
文字列は全て数値か	s.isnumeric()
文字列内にひとつでも大文字が含まれるか確認する	any(c.isupper() for c in s)
文字列内にひとつでも小文字が含まれるか確認する	any(c.islower() for c in s)
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
文字列内にアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
文字列内に空白がある	any(c.isspace() for c in s)
ひとつでもアスキー文字が文字列内にある	any(c.isascii() for c in s)
文字列中に非大文字が含まれるかどうか確認する	any(not c.isupper() for c in s)
文字列中にひとつでも非小文字があるかどうか調べる	any(not c.islower() for c in s)
文字列中にひとつでも非数字があるか調べる	any(not c.isdigit() for c in s)
ひとつでも非英字が文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
文字列中にひとつでも非英数字が含まれるか判定する	any(not c.isalnum() for c in s)
文字列中にひとつでも非空白が含まれるか確認する	any(not c.isspace() for c in s)
非アスキー文字が文字列中に含まれるか調べる	any(not c.isascii() for c in s)
文字列は全て識別子名	s.isidentifier()
文字列はPythonのキーワード	keyword.iskeyword(s)
文字列が全て印字できるか調べる	s.isprintable()
文字列がタイトル大文字小文字か調べる	s.istitle()
文字列をバイト列にする	s.encode(encoding='utf-8', errors='strict')
エンコーディングで文字列をバイト列にする	s.encode(encoding=encoding)
文字列の最後	s[-1]
二つの文字列は同じ	s == s2
二つの文字列が等しくない	s != s2
文字列が文字列より辞書順で前かどうか調べる	s < s2
文字列が文字列より辞書順で後か	s > s2
二つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
2つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
文字列が片仮名	('ァ' <= ch <= 'ン')
文字列が平仮名かどうか	('ぁ' <= ch <= 'ん')
文字列が漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
文字列内に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
文字列内に日本語があるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
カタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
シンボル計算ライブラリを使う	import sympy
文字列を記号にしてパラメータにする	z = sympy.Symbol(s)
数値のパラメータにnを代入する	e.subs(z, n)
方程式として数式のパラメータの解を求める	sympy.solve(e, z)
変数が0に近づく時、数式の極限値を求める	sympy.limit(e, z, 0)
変数がマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
数式のn階微分を行う	sympy.diff(e, z, n)
パラメータについて数式のインテグラルを行う	sympy.integrate(e, z)
数式を数値にする	float(e)
バイトオーダを使用する	sys.byteorder
プラットホームのエンコーディング	sys.getdefaultencoding()
再帰の上限を増やす	sys.setrecursionlimit(1000000)
プラットフォームの符号付き整数の最大値を調べる	sys.maxsize
文字コードの最大値	sys.maxunicode
環境はマック	sys.platform.startswith('darwin')
OSがLinux	sys.platform.startswith('linux')
環境がWindowsか調べる	sys.platform.startswith('win32')
Pythonパス	sys.path
既にロードされたモジュールのリスト	sys.modules
現在実行中の例外を情報を確認する	sys.exc_info()
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
実行時に標準出力がパイプ	not sys.stdout.isatty()
標準入力	sys.stdin
オプションで、標準エラーを用いる	file = sys.stderr
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
標準入力から改行なしで1行だけ読む	sys.stdin.readline().rstrip()
標準入力から1行分読み込んで改行を取り除く	sys.stdin.readline().rstrip()
実行をここで停止する	sys.exit()
プログラムの実行を正しく止める	sys.exit(0)
プログラムをエラーとして終了する	sys.exit(1)

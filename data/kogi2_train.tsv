year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
option: シャルトリューズ色を使う	color = 'chartreuse'
部分文字列か調べる	sub in s
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データを最大最小を用いてスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
現在のタイムスタンプ	int(time.time())
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
文字列中の部分文字列をカウントする	s.count(sub)
色付きの実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
棒グラフをラベンダーブラッシュ色を用いて描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
nがn2かどうか調べる	n == n2
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
日付データが何曜日か知る	aDate.weekday()
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
option: グラフの色をターコイズに設定する	color = 'turquoise'
データフレームの標本標準偏差	df.std()
数式のパラメータを数値で置き換える	e.subs(z, e2)
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
マップのキー一覧を得る	list(aDict)
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
データフレームのリストカラムの中央値を算出する	df[aList].median()
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
option: ナバホホワイト色を使用する	color = 'navajowhite'
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
nからn2の範囲	range(n, n2)
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
リストと配列の散布図に黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
JSON形式の文字列を読み込む	json.loads(jsonString)
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
option: グラフの色をタンに設定する	color = 'tan'
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
配列の累積積	np.cumprod(aArray)
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
オプションで、出力先を標準エラーに設定する	file = sys.stderr
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ガンマ関数	math.gamma(x)
グリッド線を赤くする	plt.grid(color='r')
nの桁数を求める	len(str(n))
リストの要素をソートする	sorted(aList)
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
データフレームから指定された列を抽出する	df[[column]]
データフレームの標準偏差	df.std()
二つの数値をプリントする	print(value, value2)
赤い実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
マッピングからキーで指定された項目をポップする	aDict.pop(key)
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
数値の符号を同じにする	math.copysign(x, x2)
option: 未入力値を先頭にする	na_position = 'first'
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
文字列を右トリムする	s.rstrip()
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
データフレームのリストカラムの未入力値を中央値に設定する	df[aList].fillna(df[aList].median())
option: シーグリーン色を使う	color = 'seagreen'
option: ベージュ色を用いる	color = 'beige'
ファイルパスを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
列を用いて昇順に破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
日付時刻データの分を使う	aDatetime.minute
option: フォントの色をハニーデューに設定する	color = 'honeydew'
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
'A'列を用いてでデータフレームを破壊的に並べ直す	df.sort_values(by='A', inplace=True)
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
グラフの色を濃くする	sns.set(pallete='deep')
文字列を末尾から空白で区切る	s.rsplit()
リストの個数	len(aList)
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームの列の中に日付データがあるか確認する	df[col].isin([value])
散布図のマーカーの大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
配列の差	aArray - aArray2
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
コーパスのバージョン	version = 'wcce2022-0.1'
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
配列の行ごとの合計値	np.sum(aArray, axis=1)
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
n個にデータフレームの中のカラムを等しい量になるようにビン分割する	pd.qcut(df[col], n)
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
実数が整数か調べる	x.is_integer()
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
データフレームのカラムの値を正規表現でまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
黄色色でヒストグラムを描画する	plt.hist(データ列, color='yellow')
n進数文字列を整数にする	int(s, n)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
イテラブルのコンビネーション	itertools.combinations(iterable, n)
モデルの残差を求める	目的変数 - model.predict(説明変数)
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
ファイルの入力ストリームを使う	open(filepath)
リストとリストについて散布図を描画し、、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
日付時刻データが何分か知る	aDatetime.minute
n進文字列を整数に変換する	int(s, n)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
列のユニークな値	ds.unique()
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
データ列の下位25%	ds.quantile(0.75)
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
入力ストリームを解放する	f.close()
データフレームの中の列をn個にビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データ列の中にがある	ds.isin([value])
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ヒストグラムをオリベドラブ色を使って描画する	plt.hist(データ列, color='olivedrab')
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
option: 色をダークオーキッドにセットする	color = 'darkorchid'
option: カデットブルー色を使う	color = 'cadetblue'
実数が有限	math.isfinite(x)
ヒストグラムを上限から下限までの区間で描画する	plt.hist(データ列, range=(start, end))
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
プロットを全般的に濃くする	sns.set(pallete='deep')
ランダムに一行をデータフレームから抽出する	df.sample()
正規表現モジュールをインポートする	import re
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
option: 複数行に対応する	flag = re.MULTILINE
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
円グラフを真円にする	plt.axis('equals')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
ファイル全体をリストとして読み込む	f.readlines()
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
グリッド線を白くする	plt.grid(color='w')
文字列を最初の部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
ヒストグラムの色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
データフレームの中の欠損値がある行を削除する	df.dropna()
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: 色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
option: マーカーを三角に変更する	marker = '^'
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
option: ダークスレートブルー色を使う	color = 'darkslateblue'
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームの中にあるの合計を数える	df.isin([value]).sum()
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
列をキーとして２つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
データ列をインポートする	import pandas as pd
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
折れ線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
列の値ごとにデータフレームを集約し、、列挙する	[(name, group) for name, group in df.groupby(column)]
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
nをn2分の一にする	n /= n2
実部と虚部から複素数を生成する	complex(x, y)
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
option: グラフの色を白に設定する	color = 'white'
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
行列の分散	np.var(aArray)
option: ブール型を使う	dtype = np.int32
データフレームの末尾	df.tail()
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームをインデックスを用いて昇順に並べ直す	df.sort_index(ascending=True)
ヒストグラムをダークカーキ色を用いて描画する	plt.hist(データ列, color='darkkhaki')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
option: グラフの色をオールドレースに指定する	color = 'oldlace'
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
nからn2までのスライス	slice(n, n2)
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
xとyの商と余りを同時に求める	divmod(x, y)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
オリベドラブ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
双方向キューの中に要素が含まれてる	element in deq
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列の中の未入力値の合計を数える	df[col].isna().sum()
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
データ列のNaNを平均値で埋める	ds.fillna(ds.mean())
空白文字を全部使う	string.whitespace
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
option: ライトグリーンにグラフの色を指定する	color = 'lightseagreen'
option: フォントの色をスノーに変更する	color = 'snow'
線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
option: ベージュに色をセットする	color = 'beige'
option: 欠損値も無視しない	dropna = True
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
ビン数nで配列をビン分割する	pd.cut(aArray, n)
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
辞書から計数器を生成する	collections.Counter(aDict)
配列とイテラブルの散布図を描画して、マーカーをクロスに変更する	plt.plot(データ列x, データ列y, marker='x')
予測結果の予測精度を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
配列の列ごとの平均値	np.mean(aArray, axis=0)
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
nを八進文字列に変換する	oct(n)[2:]
文字列中の文字を列挙する	list(s)
eの実数乗	math.exp(x)
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
クラスが名前付きタプル	issubclass(C, tuple)
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
カラムの正規分布に対する左右対称性	ds.kurt()
文字列を赤色にする	f'\033[31m{value}\033[0m'
タプルを反転する	reversed(aTuple)
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの列概要	df.info()
データフレームを関数の値でグループ化する	df.groupby(関数)
ヒストグラムの色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
最適な位置に凡例を表示する	plt.legend(loc='best')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
option: カーキ色を使う	color = 'khaki'
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
折れ線グラフに四角印を加える	plt.plot(データ列x, データ列y, marker='s')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
カウンタの項目一覧	aCounter.keys()
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
実数以上の最小の整数	math.ceil(x)
リストと配列の散布図をプロットし、、文字列という補足用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
コマンドの第一引数を知る	sys.argv[1]
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
文字列を部分文字列で分けたときの前半の文字列を使う	s.partition(sub)[0]
option: グラフの色を耐火レンガにする	color = 'firebrick'
スプリンググリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
実数が正の数か調べる	x > 0
数式を部分分数に展開する	sympy.apart(e)
データフレームのカラムの標本標準偏差	df[col].std()
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
オプションで、標準エラーに出力する	file = sys.stderr
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
実数の小数部	math.modf(x)[0]
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
実数を二乗する	x ** 2
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
Pandasで、エポック秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
方程式として数値の変数の解を算出する	sympy.solve(e, z)
スチールブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームを表示するとき、n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='grey')
オブジェクトがリストの要素でないか調べる	element not in aList
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ユニークな値を要素とするベクトル	np.unique(aArray)
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
日付データが何月か知る	aDate.month
ガンマ関数の値を求める	math.gamma(x)
option: 配列のデータ型を指定する	dtype = np.int8
option: 色をライトスチールブルーに設定する	color = 'lightsteelblue'
ファイルが存在するか調べる	os.path.exists(filepath)
二つの数値をタブで区切ってプリントする	print(value, value2, sep='\t')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: 色をライトブルーに変更する	color = 'lightblue'
配列の移り変わりを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: ネイビーを使用する	color = 'navy'
表を複数の列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
列を計数器にする	collections.Counter(iterable)
ヒストグラムの色をブラックに指定する	plt.hist(データ列, color='black')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
辞書上で項目名が未定義かどうか調べる	key not in aDict
四分位数でデータ列をビン分割する	pd.qcut(ds, 4)
ヒストグラムを黒くする	plt.hist(データ列, color='k')
文字列は組に含まれる	element in aTuple
配列の要素ごとの積	np.multiply(aArray, aArray2)
option: ロージーブラウン色を使う	color = 'rosybrown'
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: ライトグレー色を使用する	color = 'lightgray'
タプルをミュータブルにする	list(aTuple)
ダークオリーブグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
データフレームを列ごとにグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
リストとリストを連結する	aList + aList2
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
データ列の推移を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
option: 色を青緑に設定する	color = 'teal'
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
option: 最初のカラムをインデックスに設定する	index_col = 0
option: 暗い赤色を使う	color = 'darkred'
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
実数の仮数	math.frexp(x)[0]
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データ列の中にある文字列と日付データの合計を求める	ds.isin([value, value2]).sum()
オブジェクトはタプルクラスのインスタンスかどうか調べる	isinstance(obj, tuple)
option: チョコレート色を使う	color = 'chocolate'
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
データフレームのカラムを丸める	df[col].round()
無限大を使用する	math.inf
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
タプルの長さを見る	len(aTuple)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
散布図を黒い右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
プロットの全般的にカラーパレットを淡くする	sns.set(pallete='muted')
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: 昇順にする	ascending = True
フローラルホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
最大長nの両端キューを作る	collections.deque(maxlen=n)
option: 改行コードを動作環境依存に指定する	newline = None
リストにリストを追加して広げる	aList.extend(aList2)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
配列の次元を変形する	aArray.reshape(行数, 列数)
ハローワールドとプリントする	print('Hello World')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
リストのn番目以降の部分を得る	aList[n:]
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
nが一桁の数か調べる	0 <= n <= 9
レベッカパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
データ列が正規分布に従うか調べる	scipy.stats.shapiro(データ列)
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
配列をビン分割する	pd.cut(aArray, aList)
データフレームをグループ化しそれぞれの列に対し合計を計算する	df.groupby(column)[column2].sum()
タプルの中の最小値	min(aTuple)
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
カウンタの全数	aCounter.total()
文字列の左側からタブを取り除く	s.lstrip('\t')
データ列の値を正規表現patternでreplに置き換える	ds.replace(pattern, repl, regex=True)
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図に大バツマーカーを使用する	plt.scatter(データ列x, データ列y, marker='X')
実数の平方根	math.sqrt(x)
ナバホホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: バッファリングを無効にする	buffering = 0
データフレームを各列毎に集約し、、文字列というグループの大きさを計算する	df.groupby(column).size()[s]
nまでの偶整数列	list(range(2, n, 2))
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データフレームを複数の列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
グリッド線を黒くする	plt.grid(color='k')
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
アルファベットの大文字列	string.ascii_uppercase
実数のn乗して実数による余りを求める	pow(x, n, y)
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
縦棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
実数を十六進文字列に変換する	x.hex()
標準入力	sys.stdin
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
Pandasで文字列を日付データに変換する	pd.to_datetime(s)
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームの中の欠損値の合計を求める	df.isna().sum()
数値を赤色で出力する	print(f'\033[31m{value}\033[0m')
角度のラジアン	math.radians(degree)
データフレームのカラムが何時か見る	df[col].dt.hour
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
文字列を部分文字列で二分する	s.partition(sub)
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
option: グラフの色をライムに設定する	color = 'lime'
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
データフレームを各列毎に集約し、、列の最大値を計算する	df.groupby(column)[column2].max()
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: バイナリ書き込みモードに設定する	mode = 'wb'
文字列がタプルに含まれないかどうか調べる	element not in aTuple
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
散布図を白色を使って描画する	plt.scatter(データ列x, データ列y, color='white')
グレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='grey')
option: グラフの色をブラックに設定する	color = 'black'
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ファイルを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
グラフの凡例を表示する	plt.legend()
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: マーカーの大きさを変更する	markersize = 2.0
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
書式をargsを引数としてフォーマットする	formatText.format(*args)
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
乱数シードを初期化する	random.seed()
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
option: グラフの色をライトグリーンに指定する	color = 'lightgreen'
nをn2で割った余り	n % n2
プラットホームの名前	sys.platform
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データ列が何分か見る	ds.dt.minute
オブジェクトが属性を持つ	hasattr(obj, プロパティ名)
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームのカラムの曜日の名前を求める	df[col].dt.weekday_name
エクセルデータからデータフレームを読み込む	pd.read_excel(filename)
行列の行列積を求める	np.matmul(aArray, aArray2)
データフレームのカラムの値が未入力値	df[col].isna()
データフレームをCSVファイルでJSONLファイルに書き込む	df.to_csv(filename)
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
両端キューの先頭	deq[0]
文字列を最後の部分文字列で二つに区切って、最初の文字列を求める	s.rpartition(sub)[0]
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
イテラブルとイテラブルについて散布図を描画して、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列の中のASCII限定として正規表現による全マッチを見る	re.findall(pattern, s, flags=re.ASCI)
データフレームを'A'列の値によってグループ化する	df.groupby('A')
option: 四角マーカーを使う	marker = 's'
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
組を展開してプリントする	print(*aTuple)
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
option: シルバー色を使う	color = 'silver'
x軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: グリーンイエロー色を使う	color = 'greenyellow'
数値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
option: プラム色を使う	color = 'plum'
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
文字列の両端から余分な空白を除く	s.strip()
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
エラーを出力する	sys.stderr
折れ線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
整数nを十六進数文字列にする	hex(n)[2:]
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
タプルを引数として展開して表示する	print(*aTuple)
文字列中に非数字が含まれるか調べる	any(not c.isdigit() for c in s)
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
TSVファイルを読む	pd.read_csv(filename, sep='\t')
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
浮動小数点数を実数に乗算する	x * y
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
折れ線グラフの三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
日付データの年数	aDate.year
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: 改行コードを動作環境依存に設定する	newline = None
データフレームのNaNを中央値に設定する	df.fillna(df.median())
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
option: カーキ色を使用する	color = 'khaki'
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
リストを逆順にする	aList[::-1]
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
リストに文字列を追加する	aList.append(element)
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
nがn2と等しいか調べる	n == n2
リストを四分位数でビン分割する	pd.qcut(aList, 4)
option: 色をイエローグリーンに設定する	color = 'yellowgreen'
option: マーカーの色を青にする	markerfacecolor = 'blue'
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
RMSEを算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
赤色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
nが2で割り切れないか調べる	n % 2 == 1
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
日付データが金曜日か調べる	aDate.weekday() == 4
辞書をJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
日付時刻データからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
散布図の丸印を赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
浮動小数点数のn乗して実数による余り	pow(x, n, y)
nをn2で割った余りをnとする	n %= n2
データ列の未入力値を50パーセンタイルにセットする	ds.fillna(ds.median())
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
行列を2次元1行に変形する	aArray.reshape(1, -1)
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
要素ひとつのタプル	(element,)
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
整数nの十六進表現	hex(n)
カウンタ同士でユニオン演算する	aCounter | aCounter2
データフレームをJSONLファイルにBOM付きで書き込む	df.to_csv(filename, encoding='utf_8_sig')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: スレートブルー色を使用する	color = 'slateblue'
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
バイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
データフレームの各次元の大きさ	df.shape
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
option: グラフの色をハニーデューに設定する	color = 'honeydew'
レベッカパープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
二つの浮動小数点数が近似値かどうか調べる	math.isclose(x, x2)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
プログラムの実行を強制的に終了する	sys.exit()
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
文字列の接尾辞から部分文字列を消す	s.removesuffix(sub)
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
等しい量になるようにリストをビン数nでビン分割する	pd.qcut(aList, n)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
オプションで、標準エラーを出力にする	file = sys.stderr
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
耐火レンガ色でヒストグラムを描画する	plt.hist(データ列, color='firebrick')
配列の累積和	np.cumsum(aArray)
xが-9以上、9以下か確認する	-9 <= x <= 9
option: マーカーを右三角に変える	marker = '>'
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
バイトオーダを知る	sys.byteorder
配列を転置する	aArray.T
ふたつのリストのインターセクション	list(set(aList) & set(aList2))
散布図に黒い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを各列と列の組み合わせ毎にグループ化して合計を算出する	df.groupby([column, column2], as_index=False).sum()
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
ヒストグラムの色をプラムに指定する	plt.hist(データ列, color='plum')
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフの下三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
名前付きタプルを使う	import collections
データフレームの列の欠損値を中央値で埋める	df[col].fillna(df[col].median())
nの桁数	len(str(n))
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
部分文字列を文字列の接頭辞から除く	s.removeprefix(sub)
タイムスタンプデータが日付時刻データより前か	aDatetime < aDatetime2
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
配列の平均値	np.mean(aArray)
データフレームの列がxより小さい行を選択する	df[df[column] < x]
シーケンスに列を続ける	itertools.chain(iterable, iterable2)
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
マッピングを計数器に変換する	collections.Counter(aDict)
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
黄緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: グラフの色を赤に設定する	color = 'red'
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
オブジェクトは論理値クラスかテストする	isinstance(obj, bool)
option: グラフの色をオールドレースに変更する	color = 'oldlace'
スクリプトファイルの絶対パス	os.path.abspath(__file__)
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
option: インディアンレッドを使う	color = 'indianred'
option: ディムグレー色を使う	color = 'dimgrey'
nまたはn2	n or n2
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
日付時刻データは日付時刻データと同時	aDatetime == aDatetime2
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
アクアマリン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
本日が何曜日か知る	datetime.datetime.today().weekday()
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
カーキ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームのカラムはどの程度、分散しているか確認する	df[col].var()
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: グラフの色をピンクに設定する	color = 'pink'
aListn番目から要素をポップする	aList.pop(n)
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
標準出力を使用する	sys.stdout
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
option: グラフの色をクリムゾンに設定する	color = 'crimson'
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
組の平均	sum(aTuple)/len(aTuple)
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
縦棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データフレームを列ごとに集約してそれぞれのグループごとの分散を算出する	df.groupby(column).var()
整数nの二進表現	bin(n)
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
イテラブルからサンプリングする	random.sample(iterable)
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームのカラムのNaNを直後の値で埋める	df[col].fillna(method='bfill')
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
データフレームを小数点以下n桁で丸める	df.round(n)
棒グラフをライトイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
二点間のユークリッド距離を算出する	math.dist(point, point2)
要素が集合のメンバーでないか調べる	element not in aSet
option: ダークシアン色を用いる	color = 'darkcyan'
nがn2より小さいか調べる	n < n2
option: モカシンにグラフの色を設定する	color = 'moccasin'
option: ミディアムオーキッドを使用する	color = 'mediumorchid'
部分文字列が文字列の開始位置以降にある	s.find(sub, start) != -1
カウンタの項目のカウント	aCounter[element]
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
データフレームのNaNをモードに設定する	df.fillna(df.mode().iloc[0])
破線にヒストグラムの線種を設定する	plt.hist(データ列, linestyle='dashed')
折れ線グラフの色をゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='goldenrod')
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
実数の双曲線正接を求める	math.tanh(x)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
option: ライトグリーン色を使う	color = 'lightseagreen'
mathをインポートする	import math
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
option: 書き込み用にする	mode = 'w'
配列と配列について散布図を描いて、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
カラムを100の位で丸める	ds.round(-2)
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
グラフを明るくする	sns.set(pallete='bright')
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: 色の透明度を設定する	alpha = 0.5
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
データフレームのリストカラムをValueMapでまとめて置き換える	df[aList].replace(ValueMap)
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
横棒グラフを濃い青色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームを'A'列と'B'列によってグループ化し要約統計量を求める	df.groupby(['A', 'B']).describe()
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
散布図に右三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='>')
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
スレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
option: デピンク色を使う	color = 'deeppink'
ロバストな線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
option: グラフの色を青紫に設定する	color = 'violet'
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
文字列の最初	s[0]
データフレームのカラムは何年か見る	df[col].dt.year
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームをTSV形式でJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
文字列を全て小文字に変換する	s.casefold()
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
floatの最小値を求める	sys.float_info.min
データフレームの列の名前を付け直す	df.rename(columns={column: name})
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
イテラブルとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
ラジアンの角度	math.degrees(x)
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
ファイルのファイルサイズ	os.path.get_size(filepath)
グラフの用途をポスターに設定する	sns.set(context='poster')
ベクトルの演算をする	import numpy as np
パーセプトロンを使って回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データフレームの列の種類	df.info()
線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
ライムグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
実数に浮動小数点数を加算する	x + y
option: 三二ビット整数型を使う	dtype = np.int16
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
英字の大文字を全部求める	string.ascii_uppercase
タプルの値をソートする	sorted(aTuple)
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
リストの最初を除く	aList[1:]
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
十六進数文字列を整数に変換する	int(s, 16)
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
ハニーデュー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
青いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
数式をパラメータについて微分する	sympy.diff(e, z)
双方向キューのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
作画の背景色を暗くする	sns.set(style='darkgrid')
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
実数を十の位で丸める	round(x, -1)
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
nをn2倍にする	n *= n2
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
整数nが配列のどれかかどうか	n in aArray
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
リストの先頭を取り除く	aList[1:]
option: ミディアムブルー色を使う	color = 'mediumblue'
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
行列のスカラー倍	aArray * n
データフレームのカラムの欠損値を最頻値に増やす	df[col].fillna(df[col].mode().iloc[0])
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
整数nの二進表記	bin(n)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
要素が辞書の値に含まれていないか	element not in aDict.values()
option: 色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
'A'列でデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby('A')]
リストを青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
自然数の最大公約数	math.gcd(n, n2)
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
バリーウッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
データフレームの列と列の相関行列	df[[column, column2]].corr()
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
nとn2の排他的論理和	n ^ n2
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
option: 改行コードを動作環境依存にセットする	newline = None
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
option: 行を連番に変更する	index_col = None
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
option: レモンシフォン色を使う	color = 'lemonchiffon'
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
折れ線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
黒い△マーカーをイテラブルとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
文字列に変換してイテラブルを連結する	''.join(map(str, iterable))
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
xを文字列に変換する	str(x)
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
rgbの左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストにリストを追加する	aList.extend(aList2)
ダークシアンにヒストグラムの色を指定する	plt.hist(データ列, color='darkcyan')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
グラフを画面用に設定する	sns.set(context='notebook')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgray')
印字可能な文字を全部使う	string.printable
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
縦軸だけグリッド線	plt.grid(axis='y')
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
タプル中の文字列が最初に見つかる場所を探す	aTuple.index(element)
整数nの八進数文字列	oct(n)[2:]
リストのn番目に文字列を挿入する	aList.insert(n, element)
シアン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
現在の分数	datetime.date.today().minute
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
散布図を黒い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
整数nの二進文字列	bin(n)[2:]
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
グリッド線を青くする	plt.grid(color='b')
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
option: ライトイエロー色を使う	color = 'lightyellow'
3二ビット整数型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int16)
コマンド引数を列挙する	sys.argv[1:]
マッピングのキー一覧を得る	list(aDict)
フクシア色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
カラムの欠損値を直後の値で埋める	ds.fillna(method='bfill')
データフレームからランダムに抽出する	df.sample()
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
ファイルから1文字、読み込む	f.read(1)
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
option: 線の種類を破線に変更する	linestyle = 'dashed'
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
option: マーカーの色を変更する	markerfacecolor = '#800080'
縦棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
option: ダークオリーブグリーンにフォントの色を指定する	color = 'darkolivegreen'
データフレームの中で、列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
サドルブラウン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
タプルをn回、連結する	aTuple * n
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
青紫色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
データフレームを関数によってまとめたグループ	df.groupby(関数)
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
option: レベッカパープル色を使う	color = 'rebeccapurple'
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのリストカラムのNaNを直前の値に設定する	df[aList].fillna(method='ffill')
option: マゼンタ色を用いる	color = 'magenta'
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの未入力値を落とす	df.dropna()
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
データフレームのカラムを1000の位で丸める	df[col].round(-3)
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
折れ線グラフの丸印の線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
空のカウンタ	collections.Counter()
線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
数式を積分する	sympy.integrate(e)
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
リストとリストについて散布図を描画してポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
option: 整数型を使う	dtype = np.int
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
ブルーバイオレット色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
二つの浮動小数点数は十分に近い	math.isclose(x, x2)
現在が何時か知る	datetime.date.today().hour
縦軸の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
昇順にリストの要素をソートする	sorted(aList, reverse=False)
日付時刻データの日数	aDatetime.day
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
option: ライトグレー色を使う	color = 'lightgray'
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
option: 大文字・小文字を無視する	flag = re.IGNORECASE
データフレームから列を三つ選択する	df[[column, column2, column3]]
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
環境がリナックスか調べる	sys.platform.startswith('linux')
データ列のどの値が頻出か見る	ds.mode()
が名前付きタプルかどうか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: ターコイズ色を使う	color = 'turquoise'
横軸の目盛りを対数に変更する	plt.xscale('log')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
数に実数を掛ける	x * y
イテラブルを2回あわせたデカルト積を得る	itertools.product(iterable, repeat=2)
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
リストとリストについての散布図にバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: カデットブルー色を用いる	color = 'cadetblue'
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
文字を文字コードに変換する	ord(ch)
両端キューを要素を出す	deq.popleft()
リストのn番目の	aList[n]
データフレームを複数の列によってまとめた表	df.groupby(columns)
データフレームを100の位で四捨五入する	df.round(-2)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
文字列を白色にする	f'\033[37m{value}\033[0m'
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
オブジェクトの参照カウント	sys.getrefcount(obj)
文字列をシアンにする	f'\033[36m{value}\033[0m'
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
データフレームのカラムの尖度	df[col].skew()
option: ダークマゼンタ色を使う	color = 'darkmagenta'
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
option: グラフの色を紺に設定する	color = 'darkblue'
日付時刻データの秒数	aDatetime.second
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ペールグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
黒い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='k')
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
ロージーブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
文字列は文字列より辞書順で前か確認する	s < s2
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
option: グラフの色をライトグレーに設定する	color = 'lightgray'
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
イテラブルから重複なくn要素ランダムに選ぶ	random.sample(iterable, k=n)
文字列のn番目を使う	s[n]
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
グラフの全般的にカラーパレットを明るくする	sns.set(pallete='bright')
option: ダークスラテグレー色を使う	color = 'darkslategray'
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
辞書のキーの一覧	aDict.keys()
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
行列の列ごとの標準偏差	np.std(aArray, axis=0)
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
option: グラフの色を青に設定する	color = 'blue'
option: グラフの色をグリーンに設定する	color = 'green'
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
option: クリムゾンにグラフの色を設定する	color = 'crimson'
縦棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
紺色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
日付データの曜日を整数で使う	aDate.weekday()
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
プラム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
option: グラフの色を黄色にする	color = 'yellow'
線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
option: ライトスカイブルーを使う	color = 'lightskyblue'
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
リストと配列について散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
２つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
黒いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
データフレームを列でソートして新しいインデックスを加える	df.sort_values(columns).reset_index()
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
データ列の推移を赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
ディープスカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
日付時刻データが何曜日か知る	aDatetime.weekday()
数値を下線付きにする	f'\033[4m{value}\033[0m'
option: マーカーの色をブラックにする	markerfacecolor = 'black'
折れ線グラフをオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orchid')
文字列をセパレータで区切って、列挙する	s.split(sep)
データフレームを10の位で丸める	df.round(-1)
説明変数と目的変数としてモデルを学習する	model.fit(説明変数, 目的変数)
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
淡いピンク色色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
集合から別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
タプルをインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
option: パレットトルコイズ色を使う	color = 'paleturquoise'
赤い左三角マーカーをデータ列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c='r')
ターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
行列の行列積	np.matmul(aArray, aArray2)
データフレームを各列毎に集約して、列の合計を算出する	df.groupby(column)[column2].sum()
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
今日の年	datetime.datetime.today().year
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
option: 先頭の行をヘッダに設定する	header = 0
データフレームのリスト列を10の位で四捨五入して、整数にする	df[aList].round(-1).astype(int)
真スーパーセットか	aSet > aSet2
カウンタの項目を増やす	aCounter[element] += 1
２つのデータフレームを列'A'と列'B'をキーにして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
行列のデータ型	aArray.dtype()
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
カウンタをイテラブルをカウントして、更新する	aCounter.update(iterable)
ラインを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
カウンタをイテラブルで更新する	aCounter.update(iterable)
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
辞書のキーを要素に設定する	aDict[key] = element
データフレームのカラムの記述統計量	df[col].describe()
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
散布図を黒い三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
キューに文字列を積む	deq.append(element)
option: namesをカラムの名前に設定する	names = names
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
集合から何でもいいから一つ取り出す	aSet.pop()
データフレームの中のカラムをビン数nを用いてビン分割する	pd.cut(df[col], n)
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
カウンタから列をカウントして引く	aCounter.subtract(iterable)
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームのカラムは何秒か確認する	df[col].dt.second
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
option: フォントの色をホットピンクに設定する	color = 'hotpink'
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
カウンタの正の数のみ残す	+aCounter
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
0からN未満までの配列	np.arange(N)
標準入力を使う	sys.stdin
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
2つの変数を文字列で区切って出力する	print(value, value2, sep=s)
オブジェクトは辞書クラスかどうか調べる	isinstance(obj, dict)
オブジェクトのハッシュ値	hash(obj)
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームのリスト列の値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
辞書の浅いコピーを作る	aDict.copy()
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
折れ線グラフの右三角印の太さを設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
グラフを正方形にする	plt.axis('equals')
散布図を赤い下三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
３変数の最小値	min(x, y, z)
散布図を黒い四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ビン数nでデータ列をビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: ディムグレーを使う	color = 'dimgray'
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
1からnまでの整数列	list(range(1, n+1))
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: グリーンを使用する	color = 'green'
データフレームから最初の列を除く	df[df.columns[1:]]
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
複数のデータフレームを縦にくっつける	pd.concat([df, df2, df3], axis=0)
正弦の逆数	math.asin(x)
ゼロ埋めされた符号なし８ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.uint8)
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
option: タン色を使う	color = 'tan'
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
実数を整数で割った余り	x % y
辞書のコピー	dict(aDict)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
実数を切り下げる	math.floor(x)
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
配列の形状を見る	aArray.shape
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
xの小数点以下'1'桁までを出力する	print(':.1f'.format(x))
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
option: 区切り記号を使わない	sep = ''
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
表データの列をインデックスに設定する	df.set_index(column)
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
日付時刻データの日付	aDatetime.date()
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
散布図に菱形マーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
二つの関係が真部分集合	aSet < aSet2
数式の簡略化を行う	sympy.sympify(e)
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
辞書の全を空にする	aDict.clear()
nを切り捨てながら半分にする	n //= 2
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
option: 文字列をセパレータで用いる	sep = s
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
データフレームのstart行目からend行目まで取り出す	df[start:end]
リストの中の最小値	min(aList)
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
ドジャーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
正接	math.tan(x)
散布図を大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X')
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
実部と虚部から複素数	complex(x, y)
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
実数を実数で割った剰余	math.remainder(x, x2)
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
データ列の分	ds.dt.minute
タプルの末尾	aTuple[-1]
スラグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
データフレームからn行、サンプリングする	df.sample(n)
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
文字列を全て小文字に変換する	s.lower()
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
文字列のケースを入れ替える	s.swapcase()
三つの文字列を順にプリントする	print(value, value2, value3)
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
オブジェクトはバイト列か調べる	isinstance(obj, bytes)
option: マーカーをバツに変更する	marker = 'x'
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
option: グラフの色をベージュに設定する	color = 'beige'
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
イテラブルを両端キューに変換する	collections.deque(iterable)
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
横方向に二つのデータフレームをマージする	pd.merge(df, df2)
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
ダークシアンにヒストグラムの色を変更する	plt.hist(データ列, color='darkcyan')
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
ファイルをバイナリ書き込みモードで開いて]、fとする	f = open(filepath, mode='wb')
nの2進表記	bin(n)
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームのリストカラムの要約統計量	df[aList].describe()
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
小数点数の常用対数	math.log10(x)
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
文字列の接頭辞が部分文字列かどうか	s.startswith(sub)
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
マルーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
ふたつの辞書をマージする	aDict | aDict2
棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームのカラムの欠損値をxに指定する	df[col].fillna(x)
重複する行のみを抽出する	df[df.duplicated(keep=False)]
新しい線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression()
シーケンスをカウンタにする	collections.Counter(iterable)
データ列をヒストグラムにする	plt.hist(データ列)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
プログラムの実行を正しく終了する	sys.exit(0)
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
option: フォントの色をやわらかい青に指定する	color = 'cornflowerblue'
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: スラグレーを使う	color = 'slategrey'
２つのカウンタの共通する要素を算出する	aCounter & aCounter2
option: ダークバイオレット色を使う	color = 'darkviolet'
1からNまでの配列	np.arange(1, N+1)
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
数列を箱髭図にする	plt.boxplot(データ列)
数式を数値計算する	float(e)
散布図を茶色色として描画する	plt.scatter(データ列x, データ列y, color='brown')
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
グラフの凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
イテラブルのイミュータブルな集合	frozenset(iterable)
グラフの縦横比を等しくする	plt.axis('equals')
整数nの二進数文字列	bin(n)[2:]
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: 書き込みモードに設定する	mode = 'w'
空のタプル	()
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
配列は何次元か調べる	aArray.ndim
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
option: グラフの色をスチールブルーに指定する	color = 'steelblue'
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
イテラブル自身を2回あわせた直積	itertools.product(iterable, repeat=2)
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
折れ線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
データフレームの列の値がx以上の行を抽出する	df[df[column] >= x]
t-SNEとして濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
日付データが月曜日か調べる	aDate.weekday() == 0
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームの中で列の重複を見る	df.duplicated(subset=column)
何回まで再帰ができるかを	sys.getrecursionlimit()
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
赤い星マーカーをデータ列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='r')
option: グラフの色をオレンジに設定する	color = 'orange'
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
ファイルに文字列を書き込む	f.write(s)
グラフの横軸を対数に変更する	plt.xscale('log')
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
リストとリストの散布図を描画して左三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データ列の偏りを対数変換する	np.log(データ列)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
全ての句読点文字	string.punctuation
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
リストを引数として展開して表示する	print(*aList)
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
赤い一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
行列の列を選択する	aArray[:, 列番号]
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
x座標を対数に変更する	plt.xscale('log')
カウンタから辞書を引く	aCounter.subtract(aDict)
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームの欠損値が含まれる箇所に色をつける	df.style.highlight_null()
データフレームのカラムの中にある文字列の数をカウントする	df[col].isin([value]).sum()
option: 行列のデータ型を指定する	dtype = np.uint8
二つの文字列が等しくないか調べる	s != s2
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
データフレームのリスト列の中にある文字列の合計を数える	df[aList].isin([value]).sum()
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
option: 決定木の深さを制限する	maxdepth = n
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
青いヒストグラムを描画する	plt.hist(データ列, color='b')
実数のk進対数	math.log(x, k)
option: 追加モードに設定する	mode = 'a'
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
データフレームの重複する行を数える	df.duplicated().sum()
アイボリー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
折れ線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
複数行対応として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
昇順にリストの要素をソートする	sorted(aList, reverse=True)
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
列を用いてを用いてデータフレームを破壊的にソートする	df.sort_values(by=column, inplace=True)
リストの各値を関数に適用した結果でソートする	sorted(aList, key=func)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームの列の名前の一覧を使う	df.columns
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
リストを分割数nでビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
option: マーカーを下三角に変更する	marker = 'v'
option: セパレータをスラッシュにする	sep = '/'
データフレームの指定されたデータ型のカラム名を列挙する	df.select_dtypes(型).columns
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
マッピングのキーに対応した値	aDict.get(key)
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
文字列中の大文字を小文字に変換する	s.lower()
option: エンコーディングを文字コードtextに設定する	encoding = text
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ファイルを追加できるように文字列の示すエンコーディングでオープンする]	open(filepath, mode='a', encoding=s)
リストをナンバリングする	enumerate(aList)
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
option: フォントの色をゴールドに変更する	color = 'gold'
データ列の推移を色付きの点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ゼロ埋めされた符号なし８ビット整数型のベクトルを作る	np.zeros(要素数, dtype=np.uint8)
option: フォントの色をスラグレーに設定する	color = 'slategrey'
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
カウンタのそれぞれの項目を、そのカウントだけリストとして得る	aCounter.elements()
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームの各グループ毎の合計を算出する	df.groupby(column).sum()
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列の長さ	len(s)
イテラブルと配列についての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
データフレームの行と列をひっくり返す	df.T
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
パパイヤウィップ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
文字列がタプルの要素か調べる	element in aTuple
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
現在の再帰の最大回数を確認する	sys.getrecursionlimit()
文字列をn回繰り返すイテラブル	itertools.repeat(element, n)
実数を実数で割った余り	x % y
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームのn行目を抽出する	df.loc[n]
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
現在の年数	datetime.datetime.today().year
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
リストをビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: グラフの色をスノーに指定する	color = 'snow'
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
単回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
二つのリストの共通りストを計算する	list(set(aList) & set(aList2))
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
option: マルーン色を使う	color = 'maroon'
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
option: 改行コードを旧Macに設定する	newline = '\r'
データ列をカテゴリデータに変換する	ds.astype(object)
集合から全ての要素を取り除く	aSet.clear()
切片なしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
空文字	''
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
文字列を右から部分文字列で区切る	s.rsplit(sub)
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: グラフの色をダークブルーに設定する	color = 'darkblue'
特異値分解で多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
日付データが水曜日か調べる	aDate.weekday() == 2
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
データ列間のR2を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
部分集合か調べる	aSet.issubset(aSet2)
両端キューが空か調べる	len(deq) == 0
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
数値を両端キューに積む	deq.append(element)
数式の数値を求める	float(e)
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
オブジェクトはある型かどうか	isinstance(obj, クラス)
実数の逆正弦	math.asin(x)
表示可能な最大行数をnに変更する	pd.set_option('display.max_rows', n)
option: ビスク色を使う	color = 'bisque'
リストとイテラブルの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
散布図をミディアムターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
二つの文字列を辞書順で比較する	s < s2
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データ列をn個にビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
数列と数列についての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
year年month月の日付	datetime.date(year=year, month=month, day=1)
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
ファイルが存在しないか調べる	not os.path.exists(filepath)
タプルとタプルを連結する	aTuple + aTuple2
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
配列をn個に等間隔でビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの欠損値を最大値で補う	df.fillna(df.max())
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
option: グラフの色を黄色に設定する	color = 'yellow'
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
文字列がリストに含まれるか調べる	element in aList
両端キューに要素をエンキューする	deq.appendleft(element)
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
集合が空か調べる	len(aSet) == 0
nがn2以下か調べる	n <= n2
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
リストの出力を改行なしに行う	print(value, end='')
ふたつの集合がセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
文字列に日本語がある	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
option: ミディアムブルー色を用いる	color = 'mediumblue'
文字列がタプルの要素でないか調べる	element not in aTuple
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
xを整数に変換する	int(x)
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
オブジェクトはバイト列クラスか確認する	isinstance(obj, bytes)
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームの中の欠損値を削除する	df.dropna()
option: ミスティローズ色を使う	color = 'mistyrose'
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データ列の中の欠損値の合計を数える	ds.isna().sum()
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
ヒストグラムを小麦色色として描画する	plt.hist(データ列, color='wheat')
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
円プロットを時計回りにプロットする	plt.pie(データ列, startangle=90, counterclock=False)
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
列'A'と列'B'をキーとして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データ列の推移を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データ列の年	ds.dt.year
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
イテラブルを集合に追加更新する	aSet.update(iterable)
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
option: 星マーカーを描画する	marker = '*'
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
プラットホームはリナックスか調べる	sys.platform.startswith('linux')
option: グラフの種類を破線に変更する	linestyle = 'dashed'
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
棒グラフをダークシアン色として描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフをダークオーキッド色として描画する	plt.plot(データ列x, データ列y, color='darkorchid')
実数を切り上げて整数に変換する	math.ceil(x)
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
インデント幅nで、タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
折れ線グラフの色をダークグレーにセットする	plt.plot(データ列x, データ列y, color='darkgrey')
整数nはリストのどれかかどうか	n in aList
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
データフレームのリスト列の要約統計量	df[aList].describe()
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
縦棒グラフをプロットして、左寄せする	plt.bar(ラベル列, データ列, align='edge')
列によってデータフレームをグループ化して、それぞれのグループごとの合計を計算する	df.groupby(column).sum()
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームの列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
決定木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
実数を実数で整数除算する	x // y
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
直後の値でデータフレームのNaNを補う	df.fillna(method='bfill')
行列の行	aArray[行番号]
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームのリストカラムの分散	df[aList].var()
データフレームからランダムにn行を取り出す	df.sample(n)
データフレームを列でグループ化して、それぞれのグループ毎の分散を計算する	df.groupby(column).var()
データ列の中にいくつ日付データが含まれるかカウントする	ds.isin([value]).sum()
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
折れ線グラフに星印を加える	plt.plot(データ列x, データ列y, marker='*')
整数nがセットのどれかかどうか判定する	n in aSet
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
nがn2で割り切れるか調べる	n % n2 == 0
オブジェクトのフィールドの値を値に変更する	setattr(obj, プロパティ名, 値)
データフレームのn行まで抽出する	df[:n]
セパレータを用いて文字列を分割して、列挙する	s.split(sep)
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
マッピングに項目名ワード引数で更新する	aDict.update(**kwargs)
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
十六進数字を全部見る	string.hexdigits
散布図を丸印を使い、描画する	plt.scatter(データ列x, データ列y, marker='o')
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
タプルのキーを列挙する	list(aDict)
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: 切片を算出しない	fit_intercept = False
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
リストの長さを見る	len(aList)
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
データ列の折れ線グラフを描いて、色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
データフレームを関数によって集約し、列挙する	[(name, group) for name, group in df.groupby(関数)]
集合に要素を追加する	aSet.add(element)
rgbのポイントマーカーをリストとイテラブルについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
nかつn2	n and n2
散布図の上三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
集合が空でない	len(aSet) != 0
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
option: カデットブルーにグラフの色を指定する	color = 'cadetblue'
グラフのタイトルを設定する	plt.title('グラフの名称')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
二つのオブジェクトが同一参照か調べる	obj is obj2
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ビン数nを使って配列を分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: サーモン色を使う	color = 'salmon'
ファイルパスを追加モードを使って開く]	open(filepath, mode='a')
データフレームを'A'列によってまとめた表	df.groupby('A')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
カラムの中にいくつ欠損値があるか数える	ds.isna().sum()
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
確率的勾配降下として回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
実数のタンジェントを計算する	math.tan(x)
option: 線の種類を点線に設定する	linestyle = 'dotted'
option: コロンをセパレータで使う	sep = ':'
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
rgbの三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
option: スプリンググリーンを使う	color = 'springgreen'
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: ライトスレイグレー色を使う	color = 'lightslategray'
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
データフレームを列によってグループ化して、平均値を求める	df.groupby(column).mean()
xを浮動小数点数に変換する	float(x)
真上位集合かどうか	aSet > aSet2
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
option: 青紫色を使う	color = 'violet'
文字列を正規表現で分割する	re.split(pattern, s)
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのリストカラムを百の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
折れ線グラフの右三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: 丸マーカーを描画する	marker = 'o'
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
値をシアンで表示する	print(f'\033[36m{value}\033[0m')
リストの中の最大値	max(aList)
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
ヒストグラムをダークサーモン色を用いて描画する	plt.hist(データ列, color='darksalmon')
無限にカウントアップする	itertools.count()
列によってデータフレームを並べてNaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
option: 降順にする	ascending = False
赤い四角マーカーをイテラブルとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
散布図を赤い四角マーカーを使って描く	plt.plot(データ列x, データ列y, marker='s', c='r')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
プロットの凡例の場所を指定する	plt.legend(loc=(x, y))
行列の演算を行う	import numpy as np
データ列を小数点以下n桁で丸める	ds.round(n)
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
実数の絶対値	math.fabs(x)
データフレームのリストカラムの平均値	df[aList].mean()
データフレームを各カラムと列の組み合わせ毎にグループ化し、、分散を求める	df.groupby([column, column2], as_index=False).var()
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
四分位数でリストをビン分割する	pd.qcut(aList, 4)
n番目のシートをエクセルファイルファイルのデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
末尾から空白で文字列を区切る	s.rsplit()
列から複数個ランダムに選ぶ	random.choices(iterable, k=n)
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
リストとリストの散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
データフレームをグループ化しそれぞれの列に対し分散を求める	df.groupby(column)[column2].var()
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
option: ディープスカイブルーを使う	color = 'deepskyblue'
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
グラフの色を暗くする	sns.set(pallete='dark')
二数の最大値を計算する	max(x, y)
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームを列名リストで昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
数式の平方根を求める	sympy.sqrt(e)
osモジュールをインポートする	import os
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
実数の二乗	x ** 2
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
線グラフをピーチパフ色を用いて描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームを列の値によってグループ化し、それぞれのグループごとの最小値を求める	df.groupby(column).min()
点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
に箱ひげ図としてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
日付時刻データがタイムスタンプデータより前	aDatetime < aDatetime2
nが3の倍数か調べる	n % 3 == 0
散布図にrgbの左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
最大長nの両端キューを列から作る	collections.deque(iterable, maxlen=n)
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
既存の行列を元に全要素が0のベクトル	np.zeros_like(aArray)
ポスター用にグラフを設定する	sns.set(context='poster')
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: グラフの色をスレートブルーにする	color = 'slateblue'
グラフに水平方向の実線をつける	plt.axhline(y=0, linestyle='solid')
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
要素が全て1の配列	np.ones(要素数, dtype=np.int)
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
実数を千の位で四捨五入する	round(x, -3)
数列とリストの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
データ列の秒	ds.dt.second
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
ローングリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データ列の出現頻度を可視化する	plt.hist(データ列)
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t')
n個分キューの要素を右にローテンションする	deq.rotate(n)
複数の列によってデータフレームを整列してNaNを先頭にする	df.sort_values(by=column, na_position='first')
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
option: グラフの色をディムグレーにセットする	color = 'dimgrey'
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
二つの列の値によってデータフレームを集約して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
折れ線グラフの色を黄緑に設定する	plt.plot(データ列x, データ列y, color='chartreuse')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームのリストカラムの中央値	df[aList].median()
option: 追加モードに指定する	mode = 'a'
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
option: ダークグリーン色を使う	color = 'darkgreen'
文字コードを文字に変換する	chr(unicode)
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
実数の正接	math.tan(x)
dateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
ファイルパスを書き込み用に文字コードtextとしてオープンする]	open(filepath, mode='w', encoding=text)
グラフをポスター用に設定する	sns.set(context='poster')
option: フォントの色をゴーストホワイトに設定する	color = 'ghostwhite'
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
データフレームを表示するとき、表示できる最大行数をnに設定する	pd.set_option('display.max_rows', n)
セットをタプルにする	tuple(aSet)
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
折れ線グラフを半透明の実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
両端キューを空にする	deq.clear()
日付時刻データの曜日を整数で使う	aDatetime.weekday()
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
option: コーラルにグラフの色を指定する	color = 'coral'
option: オリーブを使う	color = 'olive'
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
option: コロンをセパレータで使用する	sep = ':'
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームを二つの列の値によって集約し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データフレームから列を一つ選択する	df[[column]]
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
行列の平均	np.mean(aArray)
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
文字列を右寄せにする	s.rjust(文字列幅)
データフレームのカラムのNaNを中央値で補う	df[col].fillna(df[col].median())
タプルの要素を逆順にする	aTuple[::-1]
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データ列のヒストグラムを描画する	plt.hist(データ列)
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
データフレームの列とカラムに重複があれば、マスクする	df.duplicated(subset=[column, column2])
タプルを逆順にする	aTuple[::-1]
数式を方程式として解く	sympy.solve(e)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
標準入力を得る	sys.stdin
新しい文字列で正規表現にマッチした文字列を置換する	re.sub(pattern, newsub, s)
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
方程式として数式の変数の解を求める	sympy.solve(e, z)
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
既存のファイルパスをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
文字列の開始位置先に部分文字列が含まれる	s.find(sub, start) != -1
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
データフレームを列の値ごとにグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
行列と同じ大きさの空の配列を初期化する	np.empty_like(aArray)
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
ファイル名がJSONファイルか確認する	filename.endswith('.json')
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データ列のMAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ふたつの集合の和集合	aSet.union(aSet2)
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	s.find(sub, start, end) == -1
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
日付時刻データは何日か知る	aDatetime.day
実数の複素数	complex(x)
辞書を複製する	dict(aDict)
ヒストグラムの色をミッドナイトブルーにセットする	plt.hist(データ列, color='midnightblue')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
平均線付き箱髭図を描く	plt.boxplot(データ列, meanline=True)
タプルの末尾からn番目以前の部分を得る	aTuple[:-n]
option: リネン色を使う	color = 'linen'
辞書のキーの値	aDict[key]
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
データフレームの列がxの行を抽出する	df[df[column] == x]
option: 青色を使う	color = 'blue'
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
散布図をrgbの大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
列とイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
データフレームがどの程度、分散しているか見る	df.var()
データフレームのリスト列の第二四分位数	df[aList].median()
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
オブジェクトを文字列に変換する	str(obj)
配列の標準偏差	np.std(aArray)
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
散布図の星印を赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
リストの末尾から要素をポップする	aList.pop()
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データ列の推移を折れ線グラフで図示する	plt.plot(range(len(データ列)), データ列)
ファイルを開いて]、読み込みストリームを使う	open(filepath, mode='r')
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: 三2ビット整数型を使う	dtype = np.int16
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
リストとイテラブルの散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
データフレームの欠損値を後の行の値で埋める	df.fillna(method='bfill')
カンマで文字列を区切り、、列挙する	s.split(',')
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
ファイル全体を行分割して読む	f.readlines()
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
文字列の右側から空白を取り除く	s.rstrip()
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
Pythonのバージョン	sys.version
リストと数列についての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
タンにヒストグラムの色を設定する	plt.hist(データ列, color='tan')
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
option: ミディアムブルーにフォントの色を設定する	color = 'mediumblue'
集合を変更不能に変換する	frozenset(aSet)
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
両端キューの先頭から要素を取り除く	deq.popleft()
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
句読点文字を全部使う	string.punctuation
データ列の各データが何回出現するか見る	ds.value_counts()
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
日付時刻データの月数	aDatetime.month
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
option: 左三角印を使う	marker = '<'
本日をタプルに変換する	datetime.datetime.today().timetuple()
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームをCSVを用いてJSONLファイルに書き込む	df.to_csv(filename)
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
等間隔でデータフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
辞書の項目数	len(aDict)
データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
データフレームの未入力値を最大値で置換する	df.fillna(df.max())
データフレームをエクセルファイルから読み込む	pd.read_excel(filename)
配列の分散	np.var(aArray)
ファイルを改行除外して一行ずつ読み込む	f.readline()
環境名を知る	sys.platform
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
両端キューの右に列の各要素を入れる	deq.extend(iterable)
データフレームを関数の値でグループ化し、記述統計量を算出する	df.groupby(関数).describe()
タプルの長さ	len(aTuple)
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
最大長のある両端キュー	collections.deque(maxlen=n)
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームが重複しているか調べる	df.duplicated()
nを十六進表現にする	hex(n)
リストと数列について散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームのカラムの欠損値を平均で補う	df[col].fillna(df[col].mean())
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
真上位集合か調べる	aSet > aSet2
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
データフレームのインデックスの一覧	df.index
最小値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].min())
整数nを半分にする	n //= 2
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの列の値がxより少ない行を抽出する	df[df[column] < x]
表示できる最大行数を変更する	pd.set_option('display.max_rows', n)
実数を百の位で丸める	round(x, -2)
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
データフレームを各列と列の組み合わせ毎にグループ化して平均値を求める	df.groupby([column, column2], as_index=False).mean()
空白文字を使う	string.whitespace
データフレームから型リストで指定されたデータ型の列を選択する	df.select_dtypes(include=typeList)
縦軸の目盛を表示しない	plt.yticks([])
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
変数について数式を積分する	sympy.integrate(e, z)
配列を平坦化する	aArray.flatten()
option: スラッシュをセパレータで使う	sep = '/'
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
データフレームのリストカラムの値が未入力値	df[aList].isna()
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
分子割る分母	fractions.Fraction(分子, 分母)
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
散布図をパールゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
文字列中にひとつでも非アスキー文字があるかテストする	any(not c.isascii() for c in s)
散布図でデータフレームの全カラムを可視化する	sns.pairplot(df)
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
カウンタ間で和集合演算する	aCounter | aCounter2
データフレームのカラムの要約統計量	df[col].describe()
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
データフレームのカラムを千の位で丸める	df[col].round(-3)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
データフレームのカラムの曜日数	df[col].dt.dayofweek
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
集合から要素を取り除く	aSet.remove(element)
数式の因数分解を行う	sympy.factor(e)
シーケンスとイテラブルの直積	itertools.product(iterable, iterable2)
option: フォレストグリーン色を使う	color = 'forestgreen'
データ列の変遷を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
シエナにヒストグラムの色をする	plt.hist(データ列, color='sienna')
データフレームを1000の位で丸める	df.round(-3)
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
シスル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
イテラブルを関数でフィルタする	map(func, iterable)
両端キューが空でないか調べる	len(deq) != 0
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
現在の秒を使う	datetime.date.today().second
Pandasで、データフレームのcollのエポック秒からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
日付時刻データが何日か知る	aDatetime.day
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
option: オリーブ色を使う	color = 'olive'
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
aListn番目から要素を取り出す	aList.pop(n)
日付時刻データの日を使う	aDatetime.day
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
オプションで、標準出力を用いる	file = sys.stdout
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
データフレームを丸めて、整数型にする	df.round().astype(int)
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
nを八進数リテラルにする	oct(n)
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
nをn2で割った結果の切り上げを求める	(n + n2 - 1) // n2
ライトスカイブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
option: グラフの色をスラグレーに設定する	color = 'slategray'
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
タプルをひとつ置きに取り出す	aTuple[::2]
nの三乗	n ** 3
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
コマンド引数の一覧を	sys.argv[1:]
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
イテラブルを累加する	itertools.accumulate(iterable)
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
option: 文字列の示すエンコーディングを使う	encoding = s
文字列を走査し、パターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
プラットホームがMacOSか確認する	sys.platform.startswith('darwin')
データ列を四捨五入して、整数型にする	ds.round().astype(int)
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
数式の変数に数式を代入する	e.subs(z, e2)
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
データ列を箱ひげ図にする	plt.boxplot(データ列)
グリッド線を黄色くする	plt.grid(color='y')
縦棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
変数を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
実数を万の位で丸める	round(x, -4)
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
option: 三角マーカーを描画する	marker = '^'
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
リストをnから順序付けする	enumerate(aList, start=n)
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
上限nの両端キューを作る	collections.deque(maxlen=n)
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームを'A'列でソートして、更新する	df.sort_values(by='A', inplace=True)
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
データフレームを各列毎に集約して列の合計を求める	df.groupby(column)[column2].sum()
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
変数を太文字にする	f'\033[1m{value}\033[0m'
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
option: △印を描画する	marker = '^'
マップに辞書の項目を更新する	aDict.update(aDict2)
線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
カウンタからゼロカウントを取り除く	+aCounter
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
日付データが金曜日	aDate.weekday() == 4
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
ペルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
現在が何分か知る	datetime.date.today().minute
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
散布図に▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
xが1、もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
option: 耐火レンガを使う	color = 'firebrick'
option: バイアスを計算しない	fit_intercept = False
nとn2の和	n + n2
リストとリストについて散布図を描画し、、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
整数nの八進文字列	oct(n)[2:]
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
散布図のクロス印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
改行する	print()
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
イテラブルを関数でフィルタする	filter(func, iterable)
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
変数を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
option: 星マーカーを加える	marker = '*'
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
option: 線の種類を破線に設定する	linestyle = 'dashed'
表データの重複する行数のマスクを使う	df.duplicated()
文字列からISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
日付データの月数を使う	aDate.month
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
横棒グラフをターコイズ色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
データフレームを配列に変換する	df.values
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
リストの全ての要素をクリアにする	aList.clear()
集合からエラーなく要素を取り除く	aSet.discard(element)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
option: ピーチパフ色を使う	color = 'peachpuff'
双方向キューを空にする	deq.clear()
データフレームのリスト列を千の位で丸める	df[aList].round(-3)
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
option: ハニーデュー色を使用する	color = 'honeydew'
option: グラフの色を貝殻に設定する	color = 'seashell'
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
横棒プロットをプロットして、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
オブジェクトのメモリビュー	memoryview(obj)
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
数を実数で割って、切り捨てる	x // y
文字列の右側から空白を取り除く	s.rstrip(' ')
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
二変数の最大値	max(x, y)
タプルの先頭の要素	aTuple[0]
option: グラフの色をコーラルに設定する	color = 'coral'
集合をイミュータブルに変換する	frozenset(aSet)
文字列中から部分文字列を探す	s.find(sub)
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
option: ダークグレー色を使う	color = 'darkgray'
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
文字列の両端から部分文字列を取り除く	s.strip(sub)
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
option: フクシアにフォントの色を設定する	color = 'fuchsia'
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
データフレームの行の名前を、nameからname2に付け直す	df.rename(index={name: name2})
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
データフレームから型の列を抽出する	df.select_dtypes(ty)
データフレームを各列と列の組み合わせ毎に集約し、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
実数が無限大か調べる	math.isinf(x)
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
文字列をエラーを無視してバイト列にする	s.encode(errors='ignore')
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
文字列を左寄せにする	s.ljust(文字列幅)
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
nがn2よりも大きいか調べる	n > n2
option: ダークシアグリーン色を使う	color = 'darkseagreen'
列によってデータフレームをソートする	df.sort_values(by=column)
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
option: グラフの種類を実線に設定する	linestyle = 'solid'
棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
マップのコピー	dict(aDict)
数式の変数にnを代入する	e.subs(z, n)
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
散布図の上三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
option: 線種を点線に変更する	linestyle = 'dotted'
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
列をリストに変換する	df[column].values.tolist()
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
実数を文字列に変換する	str(x)
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
列の値で欠損値を含めてデータフレームをグループ化する	df.groupby(column, dropna=False)
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
option: クリムゾン色を使う	color = 'crimson'
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
オブジェクトは整数クラス	isinstance(obj, int)
データ列の中に文字列があるか調べる	ds.isin([value])
データフレームのリストカラムを四捨五入する	df[aList].round()
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
散布図の三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
nが2で割り切れるか調べる	n % 2 == 0
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
x,yの複素数	complex(x, y)
Pandasでデータ列を日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
オレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
散布図の△印の色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
折れ線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームをヘッダを付けずにJSONLファイルに保存する	df.to_csv(filename, header=None)
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
リストとイテラブルについて散布図を描画して三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
色付きの一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
浮動小数点数を実数で整数除算する	x // y
数を十の位で四捨五入する	round(x, -1)
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
option: シーグリーンにフォントの色を指定する	color = 'seagreen'
要素はマッピングの値に含まれていないかどうか調べる	element not in aDict.values()
option: 右三角マーカーを使う	marker = '>'
option: 下三角マーカーを加える	marker = 'v'
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
データフレームを列によってソートして下の方n件を取り出す	df.sort_values(columns).tail(n)
nがn2の倍数でない	n % n2 != 0
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームの末尾n行を選択する	df.tail(n)
３整数の最大公約数	math.gcd(n, n2, n3)
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
option: 改行なし	end = ''
option: ダークオーキッドを使う	color = 'darkorchid'
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
データフレームの数値を小数点以下n桁で丸める	df.round(n)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
option: セパレータをカンマにする	sep = ','
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
リストとイテラブルについて散布図を描画してマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
Pandasで、データフレームのcollのUNIX時間からPandasの日付型にする	pd.to_datetime(df[col], unit='s', utc=True)
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
再帰の上限を上げる	sys.setrecursionlimit(1000000)
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
線形モデルの係数	model.coef_
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
文字列をバイト配列に変換する	bytearray(s)
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
タプルの末尾を取り除く	aTuple[:-1]
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
行列を横ベクトルに変形する	aArray.reshape(1, -1)
色付きの実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
2を底とする実数の対数	math.log2(x)
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
２点間のユークリッド距離	math.dist(point, point2)
グラフをデフォルトでイイ感じに設定する	sns.set()
日付時刻データが土曜日か判定する	aDatetime.weekday() == 5
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
option: 改行コードをWindowsに変更する	newline = '\r\n'
黒いバツマーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
文字列を空白で区切って、文字列リストに変換する	s.split()
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategray')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
辞書に辞書のエントリを加えて、更新する	aDict.update(aDict2)
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
タプルの最初の文字列を探す	aTuple.index(element)
rgbのダイアモンドマーカーを数列とデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームのカラムの秒	df[col].dt.second
option: セパレータを改行にする	sep = '\n'
ヒストグラムをフローラルホワイト色を用いて描画する	plt.hist(データ列, color='floralwhite')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
リストの先頭の要素	aList[0]
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
無限に数え上げるする	itertools.count()
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
ユニコードを文字に変換する	chr(unicode)
ビン数nを用いて配列を等しい量になるように分割する	pd.qcut(aArray, n)
改行で区切って二つの値を表示する	print(value, value2, sep='\n')
option: アイボリー色を使う	color = 'ivory'
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
日付時刻データの時間数	aDatetime.hour
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
データフレームがどの程度分散しているか確認する	df.var()
ヒストグラムをゴーストホワイト色として描画する	plt.hist(データ列, color='ghostwhite')
集合が空集合かどうか調べる	len(aSet) == 0
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
nをn2乗に増やす	n **= n2
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
空列	[]
ダークオレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
日付時刻データが何時か知る	aDatetime.hour
option: グラフの色をディムグレーに設定する	color = 'dimgray'
option: ダークカーキを使う	color = 'darkkhaki'
偽	False
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
ファイルパスをオープンして]、追加ストリームを使う	open(filepath, mode='a')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
文字列は全て数値	s.isnumeric()
option: シアン色を使う	color = 'cyan'
下三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
三変数の最も大きい値	max(x, y, z)
アルファベットの大文字を全部使う	string.ascii_uppercase
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
データ列の未入力値を中央値に設定する	ds.fillna(ds.median())
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
グリッド線	plt.grid(linewidth=3.0)
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
シルバー色でヒストグラムを描画する	plt.hist(データ列, color='silver')
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
リストをnからナンバリングする	enumerate(aList, start=n)
データフレームを二つの列を用いてによって破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
データフレームのカラムの中にいくつ未入力値が存在するかカウントする	df[col].isna().sum()
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
文字列の中のASCII限定として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
nxn2の２次元リスト	[[0] * n for _ in range(n2)]
両端キューをデキューする	deq.popleft()
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
データフレームのリストカラムの歪度を求める	df[aList].kurt()
ふたつの集合が集合と互いに素か	aSet.isdisjoint(aSet2)
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
双方向キュー中の値のインデックス	deq.index(element)
データフレームを丸める	df.round()
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
キューの末尾に文字列を追加する	deq.append(element)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
辞書のキーを列挙する	aDict.keys()
リストに文字列を加える	aList.append(element)
イテラブルを集合に変換する	set(iterable)
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
イテラブルとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
カウンタの正の数だけ残す	+aCounter
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データ列の時	ds.dt.hour
ベクトルの最小値を計算する	np.min(aArray)
データフレームを各列毎に集約して、列の標準偏差を計算する	df.groupby(column)[column2].std()
横棒グラフをプロットしてバーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームをインポートする	import pandas as pd
縦棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
双方向キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
非数値データを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ブルーバイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
クリムゾン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
MLPとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データ列が何秒か見る	ds.dt.second
option: 色をオレンジに指定する	color = 'orange'
nからn2までのstepごとによるスライス	slice(n, n2, step)
nかけるn2	n * n2
辞書に要素をキーとして加える	aDict[key] = element
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームのリストカラムの最頻値	df[aList].mode()
折れ線グラフの色をハニーデューに変更する	plt.plot(データ列x, データ列y, color='honeydew')
option: ポイントマーカーを用いる	marker = '.'
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
異なる列をキーとして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
整数nの十六進数文字列	hex(n)[2:]
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
数式の積分を求める	sympy.integrate(e)
連立方程式の解を求める	sympy.solve([e, e2])
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
データ列の折れ線グラフを描いてラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
リストを展開してプリントする	print(*aList)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
配列のスカラー倍	aArray * n
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
option: グラフの色をプラムに設定する	color = 'plum'
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
赤い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
左三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
数値の符号をコピーにする	math.copysign(x, x2)
実数の天井	math.ceil(x)
option: ダークサーモン色を使う	color = 'darksalmon'
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ベクトルを元にして全要素が1の配列を作る	np.ones_like(aArray)
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
option: 青紫を使う	color = 'violet'
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
文字列は全て十進数字か	s.isdecimal()
最後の項目を辞書からポップする	aDict.popitem()
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
nを2進表現にする	bin(n)
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
option: マーカーを大バツに変更する	marker = 'X'
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データフレームのどの値が頻出か見る	df.mode()
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
グラフの縦横比を同じする	plt.axis('equals')
データフレームから型のカラムを選択する	df.select_dtypes(ty)
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
オレンジレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
棒グラフをディープスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
行列の行列式	np.linalg.det(aArray)
タプルの末尾のn要素を取り除く	aTuple[:-n]
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
実数とyのノルム	math.hypot(x, y)
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
実測値を分類モデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
パラメータがマイナス無限大に近づく時の数式の極限値を算出する	sympy.limit(e, z, -oo)
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
option: ミントクリームにフォントの色を設定する	color = 'mintcream'
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
両端キューをリストに変換する	list(deq)
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
'A'列によって降順に破壊的にデータフレームを整列する	df.sort_values(by='A', ascending=False, inplace=True)
xが一桁の正の整数か	0 <= x <= 9
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
データフレームのカラムの中にが含まれるか調べる	df[col].isin([value])
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
本日の曜日を整数で求める	datetime.datetime.today().weekday()
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
option: 大バツマーカーを使う	marker = 'X'
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
タプルのn番目のの要素を使う	aTuple[n]
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
データ列とリストについての散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
ヒストグラムの色をミディアムブルーにセットする	plt.hist(データ列, color='mediumblue')
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームの末尾n行を抽出する	df.tail(n)
数列と配列についての散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データ列のpercent分位数	ds.quantile(percent/100)
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームの列を100の位で丸める	df[col].round(-2)
オブジェクトが関数か	callable(obj)
option: ナバホホワイト色を使う	color = 'navajowhite'
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
二進数文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データ列の第一四分位数	ds.quantile(0.25)
実数の正接の逆数	math.atan(x)
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
option: グラフの色を暗い赤に設定する	color = 'darkred'
変数を赤色にする	f'\033[31m{value}\033[0m'
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
option: 紺碧にグラフの色を設定する	color = 'azure'
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
列の文字列長を列として見る	ds.str.len()
option: エンコーディングをEUCに指定する	encoding = 'euc_jp'
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
itertoolsモジュールをインポートする	import itertools
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
オブジェクトが数値か調べる	isinstance(obj, (int,float))
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
option: 改行コードをUNIXに設定する	newline = '\n'
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
文字列を最後の部分文字列で二分し後半の文字列を使う	s.rpartition(sub)[-1]
option: グラフの色をホットピンクに設定する	color = 'hotpink'
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
整数nがタプルのどれかか調べる	n in aTuple
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
リストの散らばりを作図する	plt.scatter(データ列x, データ列y)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
データ列の月	ds.dt.month
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
配列をリストから作成する	np.array(aList)
グラフの使途をポスターに変更する	sns.set(context='poster')
プロットの名前を設定する	plt.title('グラフの名称')
タプルの要素をソートする	sorted(aTuple)
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
行列の内積を求める	np.dot(aArray, aArray2)
ASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
日付時刻データはタイムスタンプデータと同時か調べる	aDatetime == aDatetime2
キューが空であるか調べる	len(deq) == 0
エクセルデータファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
カウンタの最頻出な項目を求める	aCounter.most_common()[0]
数列の折れ線プロットをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: マーカーの色を白にする	markerfacecolor = 'white'
分類結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
リストとリストについての散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
実数の逆双曲線余弦	math.acosh(x)
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
折れ線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: グラフの色をマルーンに設定する	color = 'maroon'
ふたつの集合のユニオン	aSet.union(aSet2)
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
行列の列ごとの平均値	np.mean(aArray, axis=0)
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
文字列を走査し、正規表現にケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
複数の列の値で表データをグループ化し、要約統計量を求める	df.groupby(columns).describe()
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
２つのデータフレームをジョインする	pd.merge(df, df2)
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
アルファベットを全部使う	string.ascii_letters
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データ列の欠損値をxに設定する	ds.fillna(x)
数式の数値	float(e)
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
option: グラフの色をディープスカイブルーに指定する	color = 'deepskyblue'
ファイルとfilenameを結合する	os.path.join(filepath, filename)
日付データが月曜日か	aDate.weekday() == 0
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
option: ホットピンク色を使う	color = 'hotpink'
散布図を四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s')
リストをランダムにシャッフルする	random.shuffle(aList)
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線プロットの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
option: フォントの色をライムに設定する	color = 'lime'
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
カウンタを高頻出方から列挙する	aCounter.most_common()
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
平方根を計算する	math.sqrt(x)
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームを関数の値によってグループ化する	df.groupby(関数)
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
書き込み用にBOM付きでファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
データフレームのn行目をドロップして更新する	df.drop(n, axis=0, inplace=True)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
赤いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
option: マーカーを菱形に設定する	marker = 'D'
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
n割るn2を求める	n / n2
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
option: グラフの色をプラムにする	color = 'plum'
SDGとしてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
データフレームの中央値	df.median()
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
論文用にグラフを設定する	sns.set(context='paper')
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの中にあるの合計をカウントする	df.isin([value]).sum()
小麦色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
ビン数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
ロイヤルブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
データフレームのカラムが何分か調べる	df[col].dt.minute
ファイルを書き込みモードを用いてオープンする]	open(filepath, mode='w')
文字列は十進数字か	s.isdecimal()
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
option: フォントの色をオリーブにセットする	color = 'olive'
リストが空でないか	len(aList) != 0
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
Pandasで、文字列の数値時刻からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
kを底とする対数を求める	math.log(x, k)
実数の床	math.floor(x)
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
文字列リストを結合してひとつの文字列にする	''.join(aStringList)
黒い下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームを'A'列をキーにしてソートする	df.sort_values(by='A')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ファイルを開き]、追加ストリームを見る	open(filepath, mode='a')
xのハッシュ値	hash(x)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
文字列の開始位置以降に部分文字列が含まれないか	s.find(sub, start) == -1
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ヒストグラムをシエナ色を用いて描画する	plt.hist(データ列, color='sienna')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
横棒グラフをアイボリー色を用いて描画する	plt.barh(データ列x, データ列y, color='ivory')
データフレームのリスト列の中にと文字列があるか調べる	df[aList].isin([value, value2])
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
降順に2つの列によってでデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=False)
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームのインデックスがnの行を抽出する	df.loc[n]
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
折れ線グラフを半透明の破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
データ列の割合を円グラフを用いて可視化する	plt.pie(データ列, startangle=90)
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
フォーマットfmtとして文字列をタイムスタンプにする	pd.to_datetime(s, format=fmt)
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
実数が有限か調べる	math.isfinite(x)
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
文字列の左側から空白を取り除く	s.lstrip(' ')
n個の整数列	list(range(n))
本日の月数	datetime.datetime.today().month
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: インディゴ色を使用する	color = 'indigo'
空のチェーンマップ	collections.ChainMap()
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
タブを使う	'\t'
線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
option: ダークターコイズ色を使う	color = 'darkturquoise'
option: 改行しない	end = ''
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
データフレームのリストカラムの欠損値を前の行の値で埋める	df[aList].fillna(method='ffill')
散布図に赤い△印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
option: ダークオレンジ色を使う	color = 'darkorange'
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
文字列の両端から空白と改行を除く	s.strip()
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
配列とリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
nプラスn2	n + n2
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
標準エラーを	sys.stderr
文字列の末尾	s[-1]
ゼロ埋めされた論理値型の行列	np.zeros(要素数, dtype=np.int32)
ファイルをBOM付きで書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
にバイオリン図でデータフレームのカラムをプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
option: ゴールド色を使用する	color = 'gold'
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
ピアソン相関係数でデータフレームのリストカラムの相関行列	df[aList].corr(method='pearson')
option: グラフの色をペルーに設定する	color = 'peru'
タプルをn倍する	aTuple * n
配列の列ごとの合計値	np.sum(aArray, axis=0)
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
リストと配列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
カウンタを辞書で更新する	aCounter.update(aDict)
セットから要素を取り除く	aSet.remove(element)
標準エラーを使う	sys.stderr
option: グラフの色をフクシアに設定する	color = 'fuchsia'
オブジェクトのクラス	type(obj)
変数をスワップする	x, y = y, x
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
option: ポイントマーカーを描画する	marker = '.'
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ヒストグラムを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ケンドールの相関係数を算出する	scipy.stats.kendalltau(データ列, データ列2)
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
データ列とリストについて散布図を描画し、、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
黒い下三角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
イテラブルからベクトルを作る	np.array(iterable)
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
パーセプトロンとしてクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
データフレームを各列と列の組み合わせ毎にグループ化して最小値を算出する	df.groupby([column, column2], as_index=False).min()
紺碧色で線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
ラインを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームのリストカラムの値を正規表現で一度にreplに置換する	df[aList].replace(pattern, repl, regex=True)
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
中央値で配列を分割する	pd.qcut(aArray, 2)
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
タプルの先頭を捨てる	aTuple[1:]
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
Pandasで、エポック秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
ファイル名がテキストファイルか	filename.endswith('.txt')
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
回帰分析をサポートベクターマシンとしてする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
option: グラフの色をデピンクに設定する	color = 'deeppink'
データ列が何月か確認する	ds.dt.month
プログラムの実行を異常停止する	sys.exit(1)
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
ナバホホワイト色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームの列をヒストグラムにする	plt.hist(df[column])
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
データ列の推移を色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
リストのn番目のの値	aList[n]
データ列の中央値を求める	ds.median()
データフレームを見る	df.head()
集合にイテラブルを追加更新する	aSet.update(iterable)
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
nがn2で割り切れないか調べる	n % n2 != 0
ヒストグラムの色をライトスレイグレーにする	plt.hist(データ列, color='lightslategrey')
データフレームの第三四分位数	df.quantile(0.75)
option: ターコイズ色を用いる	color = 'turquoise'
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
空の両端キュー	collections.deque()
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームの列名の一覧を使う	df.columns
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
整数nを二進文字列に変換する	bin(n)[2:]
数式の変数を数式で置き換える	e.subs(z, e2)
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: 紺色を使う	color = 'darkblue'
リスト内の要素が全て真か調べる	all(aList)
カテゴリで色分けして、カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ダークカーキ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
リストを中央値でビン分割する	pd.qcut(aList, 2)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
option: ゴールデンロッド色を用いる	color = 'goldenrod'
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
コレクションを使う	import collections
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームの中の列を分割数nとしてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームを表示するとき、折り返しをオフに減らす	pd.set_option('expand_frame_repr', False)
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
文字列に日本語があるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
マッピングのキーとその値をペアとして取り出す	aDict.items()
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
折れ線グラフの大バツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
タブ	'\t'
anemptystring	''
イテラブルの長さnの順列	itertools.permutations(iterable, n)
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
文字列を走査し正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
2つのデータフレームを結合する	pd.merge(df, df2)
nullに等しい値	None
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
x座標の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
ひとつでも非小文字が文字列中に含まれる	any(not c.islower() for c in s)
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
option: 三角マーカーを使う	marker = '^'
散布図を淡いピンク色色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightpink')
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
リストの末尾を取り除く	aList[:-1]
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
オプションで、出力先を標準出力に設定する	file = sys.stdout
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
リストとリストの散布図を描画し、右三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
文字列をキャピタライズする	s.capitalize()
折れ線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームのカラムの中に日付データと文字列がいくつ存在するかカウントする	df[col].isin([value, value2]).sum()
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
リストが全て真かどうか調べる	all(aList)
実数を数で除する	x / y
現在処理中の例外を情報	sys.exc_info()
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
色名をからコードに変換する	matplotlib.colors.cnames[色名]
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
option: 読み込む行番号をnamesで指定する	usecols = names
青色で数値をプリントする	print(f'\033[34m{value}\033[0m')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
双方向キューのn番目のデータ	deq[n]
要素が集合に含まれないかどうか調べる	element not in aSet
option: 青にグラフの色を設定する	color = 'blue'
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
データ列と数列について散布図をプロットして、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
実数の逆双曲線正弦	math.asinh(x)
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
日付時刻データが日曜日	aDatetime.weekday() == 6
データフレームの未入力値をモードに設定する	df.fillna(df.mode().iloc[0])
0からnまでの整数列	list(range(n+1))
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
配列の形状	aArray.shape
双方向キューの要素を左にn個分ローテンションする	deq.rotate(-n)
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
明るくカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
オブジェクトがリストの要素か	element in aList
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
option: 配列のデータ型を指定する	dtype = np.int
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ふたつの関係が部分集合	aSet.issubset(aSet2)
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
日付時刻データが何秒か知る	aDatetime.second
散布図をロージーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ヒートマップを用いてクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データフレームのリストカラムの中に文字列と文字列が存在するか調べる	df[aList].isin([value, value2])
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームのカラムの平均値	df[col].mean()
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
x軸の目盛を非表示にする	plt.xticks([])
カウンタのキーとカウントを列挙する	aCounter.items()
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
データフレームのカラムの日	df[col].dt.day
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
本日が何年か知る	datetime.datetime.today().year
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ネイピア数	math.e
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データ列を中央値で分割する	pd.qcut(ds, 2)
データフレームを'A'列と'B'列によってで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームをカテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ケンドール相関係数で表データの列と列の相関行列	df[[column, column2]].corr(method='kendall')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
グリッドを破線にする	plt.grid(linestyle='dashed')
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
プロットをスライド用に設定する	sns.set(context='talk')
データ列の推移を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: フォントの色を黄緑にセットする	color = 'chartreuse'
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
スカイブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
一点鎖線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
数式を因数分解する	sympy.factor(e)
nをn2で割った剰余	n % n2
線グラフをマルーン色として描画する	plt.plot(データ列x, データ列y, color='maroon')
空の辞書	{}
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
組の最初	aTuple[0]
割合付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
黒い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
オブジェクトの属性を取り除く	delattr(obj, プロパティ名)
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データフレームのリスト列の相関行列ケンドール相関係数で	df[aList].corr(method='kendall')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
プロットのデータラベルの場所を(x,y)に設定する	plt.legend(loc=(x, y))
カーキにヒストグラムの色を指定する	plt.hist(データ列, color='khaki')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
文字列が全てアスキー文字か調べる	s.isascii()
データ列が正規分布かどうか仮説検定する	scipy.stats.shapiro(データ列)
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
表データをインポートする	import pandas as pd
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
option: 色をダークグレーにセットする	color = 'darkgrey'
データ列を中央値でビン分割する	pd.qcut(ds, 2)
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
データフレームのインデックスをリセットする	df.reset_index()
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='turquoise')
文字列から部分文字列を取り除く	s.replace(sub, '')
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
数列とリストについての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図のポイントマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
nにn2をかけた値をnに代入する	n *= n2
option: グラフの色をシアンに指定する	color = 'cyan'
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
文字列の中の正規表現による全てのマッチを見る	re.findall(pattern, s)
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
スクリプト名	sys.argv[0]
データフレームのカラムを十の位で丸めて、整数にする	df[col].round(-1).astype(int)
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をマゼンタに設定する	color = 'magenta'
日付時刻データが金曜日か確認する	aDatetime.weekday() == 4
nが負の数か調べる	n < 0
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
文字列が部分文字列で終わるか調べる	s.endswith(sub)
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
散布図の▽マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データ列と配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
xが-9以上、9以下か調べる	-9 <= x <= 9
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
データフレームの数値をまとめて丸める	df.round()
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
箱ひげ図をプロットして平均線を加える	plt.boxplot(データ列, meanline=True)
キューのn番目の要素	deq[n]
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムの色をゲインズボロにセットする	plt.hist(データ列, color='gainsboro')
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
nの三乗を求める	n ** 3
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームのカラムの中央値	df[col].median()
option: データ型としてブール型を用いる	dtype = np.int32
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
データ列の欠損値をメディアンで埋める	ds.fillna(ds.median())
グラフのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
データフレームを列でソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
方程式の解	sympy.solve(e)
文字列を走査し正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
変数について数式の積分を計算する	sympy.integrate(e, z)
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームを列の値ごとにグループ化して、グループごとの標準偏差を求める	df.groupby(column).std()
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
xでデータフレームのカラムの欠損値を埋める	df[col].fillna(x)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
eの乗数	math.exp(x)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
文字列を部分文字列で区切る	s.split(sub)
option: ペルーにフォントの色を設定する	color = 'peru'
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
改行なしに数値をプリントする	print(value, end='')
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
option: バイナリ書き込みモードを使用する	mode = 'wb'
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
ファイルをバイナリ書き込み用に開く]	open(filepath, mode='wb')
y座標の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
タプルを引数として展開してプリントする	print(*aTuple, sep=',')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
作画で用いるフォントを指定する	sns.set(font=フォント名)
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
リストとデータ列についての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
option: ネイビー色を使う	color = 'navy'
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
時間を使う	import time
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
データフレームのカラムの未入力値を中央値に指定する	df[col].fillna(df[col].median())
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフの丸マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
散布図のバツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
縦棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
マップから最後の項目をポップする	aDict.popitem()
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
表データをグループ化し、それぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
線形モデルの回帰変数	model.coef_
文字列の左側から部分文字列を消す	s.lstrip(sub)
データフレームの重複した行数のマスク	df.duplicated()
データフレームのstart行目からend行目まで抽出する	df[start:end]
オブジェクトがリストか調べる	isinstance(obj, list)
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
option: グラフの色をミントクリームに設定する	color = 'mintcream'
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
option: タブを分割記号で使う	sep = '\t'
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
データフレームのリスト列を千の位で四捨五入して整数にする	df[aList].round(-3).astype(int)
実数を実数で割る	x / y
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
nにn2を足して代入する	n += n2
option: 色をゲインズボロに変更する	color = 'gainsboro'
スラグレーにヒストグラムの色を変更する	plt.hist(データ列, color='slategrey')
タプルの要素を小さい方からソートする	sorted(aTuple, reverse=False)
リストの合計値	sum(aList)
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ヒストグラムをゴールド色を用いて描画する	plt.hist(データ列, color='gold')
双方向キューが空でないかどうか調べる	len(deq) != 0
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
データ列が何日か調べる	ds.dt.day
組の文字列が最初に見つかるインデックスを使う	aTuple.index(element)
データフレームの列がx以下のデータを取り出す	df[df[column] <= x]
線形回帰モデルの回帰変数	model.coef_
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
コマンド引数の一覧	sys.argv[1:]
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
シーケンスを文字列に変換して、空白を使って結合する	' '.join(map(str, iterable))
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図のポイント印の色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
散布図を赤い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
option: グラフの色を小麦色に指定する	color = 'wheat'
テンプレートをタプルで文字列整形する	formatText.format_map(aDict)
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
配列と数列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
整数LCMを算出する	math.lcm(n, n2)
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: アリスブルー色を使う	color = 'aliceblue'
文字列を最後の部分文字列で分割したときの前半の文字列	s.rpartition(sub)[0]
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
predicateFuncがTrueとなるイテラブルの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
辞書の値を列挙する	aDict.values()
データ列を百の位で丸める	ds.round(-2)
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
グラフの見栄えを綺麗にする	import seaborn as sns
文字列の開始位置から部分文字列を探す	s.find(sub, start)
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
キーが辞書に存在するか調べる	key not in aDict
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
option: 改行をセパレータで使う	sep = '\n'
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
rgbの丸マーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: ボックスチャートに平均を加える	showmeans = False
赤い三角マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
Pandasで、エポック秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
イテラブルを文字列リストに変換して、カンマで一つにする	','.join(map(str, iterable))
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
データフレームをインデックスを用いて昇順に整列する	df.sort_index(ascending=True)
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
リスト内の要素が全て真か	all(aList)
小数点数の余弦の逆数	math.acos(x)
貝殻色を使ってヒストグラムを描画する	plt.hist(データ列, color='seashell')
実数の余弦の逆数	math.acos(x)
文字列が全てアルファベットか調べる	s.isalpha()
文字列をコロンで区切って、列挙する	s.split(':')
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データ列と数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフをデピンク色を使って描画する	plt.plot(データ列x, データ列y, color='deeppink')
filepathにカレント作業ディレクトリをする	os.chdir(os.dirname(filepath))
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームを転置する	df.T
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
option: 白色を使う	color = 'white'
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: 読み込まない列番号をnamesで指定する	skiprows = names
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
グリッド線	plt.grid(alpha=0.5)
グラフで使える色名の一覧	matplotlib.colors.cnames
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
青い一点鎖線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
色付きの破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
リストとリストについて散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームの中に文字列があるか調べる	df.isin([value])
データフレームの列の文字列長を列として使う	df[col].str.len()
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
カウンタのユニークな項目を列挙する	list(aCounter)
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
文字列内にひとつでも英数字があるかどうか調べる	any(c.isalnum() for c in s)
散布図に赤い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: クロス印を用いる	marker = 'x'
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームを昇順に破壊的に'A'列によって並べ直す	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
キュー中の値のインデックス	deq.index(element)
両端キューのstart〜endの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
数値を黒色にする	f'\033[30m{value}\033[0m'
グラフの用途をスライドに設定する	sns.set(context='talk')
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
リストとイテラブルについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
中央値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].median())
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
整数個からk個取り出した時の順列の総数	math.perm(n, k)
数値を数値に変換する	float(e)
データフレームを各カラムと列の組み合わせ毎に集計して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
整数nが配列のどれかか調べる	n in aArray
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
nではない	not n
ラインを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
nをn2だけ左シフトする	n << n2
エクセルファイルファイルからを読み込む	pd.read_excel(filename)
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
散布図の下三角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
折れ線グラフをオリーブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olive')
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
文字列全体がパターンに複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
実数の小数点以下を丸める	round(x)
FIXME	np.linalg.eig(aArray)
データ列を折れ線グラフで図示する	plt.plot(データ列x, データ列y)
文字列は全て印字できる	s.isprintable()
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
option: アクア色を使う	color = 'aqua'
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
タプルのキーの値	aDict[key]
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: バイナリモードを使う	mode = 'rb'
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
文字列を式として評価する	eval(s)
ロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
ファイルパスから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
イテラブルから最大長nの双方向キューを作る	collections.deque(iterable, maxlen=n)
実数を整数に変換する	int(x)
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
データ列の最頻値	ds.mode()
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
８進数字を全部使う	string.octdigits
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
Pandasで、データ列のUNIX時間からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
ビン数nでデータ列をビニングする	pd.cut(ds, n)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
n割るn2の切り上げ	(n + n2 - 1) // n2
平均でデータフレームのリスト列の未入力値を補う	df[aList].fillna(df[aList].mean())
実数の双曲線正弦の逆数	math.asinh(x)
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
rgbの▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
散布図をrgbの星マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
２つのデータフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
データフレームの内で、カラムと列の重複を削除する	df.drop_duplicates(subset=column)
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
option: 文字コードをUTF8に変更する	encoding = 'utf-8'
option: パープル色を使用する	color = 'purple'
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
右三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='>')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
option: ローングリーン色を使う	color = 'lawngreen'
データフレームの数値をまとめて四捨五入する	df.round()
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームを'A'列でで降順にソートする	df.sort_values(by='A', ascending=False)
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
昇順にデータフレームを２つの列によって破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
t-SNEとして多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
配列を配列に変換する	np.array(iterable)
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
横棒グラフをペルー色を用いて描画する	plt.barh(データ列x, データ列y, color='peru')
文字列を文字リストに変換する	list(s)
データフレームを100の位で丸める	df.round(-2)
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
日付時刻データが何年か知る	aDatetime.year
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
グローバル変数の一覧	globals()
データフレームを各列と列の組み合わせ毎にグループ分けして、個数を求める	df.groupby([column, column2], as_index=False).count()
データフレームの列の空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
第二コマンド引数を知る	sys.argv[1]
本日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
n2がnより大きくかつn3より小さい	n < n2 and n2 < n3
三つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
データ列をインポートする	import pandas as pd
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
パラメータが無限大に近づく際の数値の極限値を算出する	sympy.limit(e, z, oo)
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
折れ線グラフの色を深紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
ふたつの集合の差	aSet.difference(aSet2)
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
真部分集合か調べる	aSet < aSet2
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
破壊的に重複をデータフレームから落とす	df.drop_duplicates(inplace=True)
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
リストの長さ	len(aList)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
配列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
現在のモジュール	sys.modules[__name__]
グラフの色を濃くする	sns.set(pallete='deep')
辞書をカウンタに変換する	collections.Counter(aDict)
黄色にヒストグラムの色を指定する	plt.hist(データ列, color='yellow')
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
まとめてデータ列をValueMapで置換する	ds.replace(ValueMap)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
option: グラフの色をオリーブに設定する	color = 'olive'
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
データフレームからカテゴリデータのカラムを取り出す	df.select_dtypes('object')
データフレームのリストカラムを100の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
棒グラフをライトスカイブルー色を使って描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
部分文字列が文字列の開始位置番目からと終了位置までの間に含まれないか調べる	s.find(sub, start, end) == -1
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
option: データ型を指定する	dtype = np.int16
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: 先頭のカラムをインデックスに設定する	index_col = 0
データフレームのリスト列の相関行列ケンドール順位相関係数を使ってを求める	df[aList].corr(method='kendall')
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
1からNまでの行列を作る	np.arange(1, N+1)
option: グラフの色をアイボリーに設定する	color = 'ivory'
両端キューのstart番目からend番目までの部分データ	collections.deque(itertools.islice(deq, start, end))
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
カウンタを高頻度方から列挙する	aCounter.most_common()
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
イテラブルを回数してカウンタを更新する	aCounter.update(iterable)
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
多次元データをSVDを用いて濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
パールゴールデンロッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: 星マーカーを使う	marker = '*'
本日が何月か知る	datetime.datetime.today().month
文字列をセパレータで区切って文字列リストに変換する	s.split(sub)
ファイルを文字列の示すエンコーディングで書き込み用に開く]	open(filepath, mode='w', encoding=s)
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ファイルからファイル名を使う	os.path.basename(filepath)
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
RANSACで回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
数式を数値に変換する	float(e)
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
文字列をセパレータで区切り、、列挙する	s.split(sep)
nを否定する	not n
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
rgbの星マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
プロットのx軸に名称を付ける	plt.xlabel('x軸ラベル')
実数の双曲線余弦の逆数	math.acosh(x)
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
ガンマ関数の値	math.gamma(x)
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
行列の列	aArray[:, 列番号]
option: ゴールデンロッド色を使う	color = 'goldenrod'
リストをn倍する	aList * n
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
赤いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
改行なしに二つの文字列をプリントする	print(value, value2, end='')
棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
長さnのリスト	[0] * n
線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ベクトル計算をする	import numpy as np
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ユーザから入力される	int(input())
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
Pythonパスにディレクトリを追加する	sys.path.append(dir)
リストにリストを追加して拡張する	aList.extend(aList2)
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームを２つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームの重複していない行のみ	df[not df.duplicated(keep=False)]
コマンドラインフラグの状態	sys.flags
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
スタックの左にリストの各データを順に追加する	deq.extendleft(iterable)
データフレームのカラムが何日か見る	df[col].dt.day
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
ライム色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
リストのn番目以降の部分を取り出す	aList[n:]
整数nの八進表現	oct(n)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
option: 左三角マーカーを描画する	marker = '<'
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
実数を切り上げて整数にする	math.ceil(x)
データフレームをグループ化し、それぞれの列に対し平均値を計算する	df.groupby(column)[column2].mean()
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
カウンタ同士で積集合演算する	aCounter & aCounter2
データフレームを各列と列の組み合わせ毎にグループ化し、合計を求める	df.groupby([column, column2], as_index=False).sum()
日付データの日数	aDate.day
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
タプルを昇順に並べる	sorted(aTuple, reverse=True)
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
組の最初の文字列を探す	aTuple.index(element)
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
UNIXコマンドtextを実行する	os.system(text)
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
文字列を全て小文字にする	s.lower()
昇順にデータフレームを'A'列によってソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
黒い三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
タプル内の要素が全て真か調べる	all(aTuple)
リストを引数として展開して出力する	print(*aList)
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの色をライトブルーにセットする	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフをトマト色を使って描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
浮動小数点数の最大値	sys.float_info.max
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
option: 改行コードをUNIXに変更する	newline = '\n'
option: ペルーを使う	color = 'peru'
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: ホットピンクに色を設定する	color = 'hotpink'
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
両端キューの上限	deq.maxlen
分類結果のPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
積み上げ横棒グラフをプロットする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
イテラブルとリストについての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
option: ペルー色を使う	color = 'peru'
option: バイナリモードに設定する	mode = 'rb'
nが5の倍数か調べる	n % 5 == 0
データフレームを列によってグループ化し、それぞれのグループごとの個数を求める	df.groupby(column).count()
両端キューをdequeue	deq.popleft()
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
option: やわらかい青色を使う	color = 'cornflowerblue'
データフレームの列がxより大きくx2より小さい行を選択する	df[(x < df[column]) & (df[column] < x2)]
ロードされたモジュールの一覧	sys.modules
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
辞書を浅くコピーする	dict(aDict)
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームの歪度	df.kurt()
線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
ダークバイオレット色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
タイムスタンプデータからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
0からnまでの整数列を作る	list(range(n+1))
データフレームの列をドロップして更新する	df.drop(column, axis=1, inplace=True)
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
集合をタプルに変換する	tuple(aSet)
横棒グラフをパウダーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='powderblue')
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='grey')
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームの文字列をNaNに変換する	df.replace(s, np.nan)
ファイルから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフのポイント印の色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
横軸の目盛を対数に変更する	plt.xscale('log')
データフレームの列と列の各列間の相関係数を計算する	df[[column, column2]].corr()
現在が水曜日	datetime.datetime.today().weekday() == 2
散布図としてデータフレームをグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
nullに等しい識別子	None
文字列の右側から改行を除く	s.rstrip('\n')
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
カテゴリで色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
カウンタの要素一覧	aCounter.keys()
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
option: シャルトリューズにグラフの色を設定する	color = 'chartreuse'
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
日付時刻データとタイムスタンプデータの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
自然数個のものからk個取り出した場合の並べ方	math.perm(n, k)
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
オリーブ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
縦棒プロットをプロットして、バーの横幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
改行せず２つのリストを出力する	print(value, value2, end='')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
タプルの最後のn要素を取り除く	aTuple[:-n]
グラフの見栄えを良くする	import seaborn as sns
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
ファイルを文字列の示すエンコーディングを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
イエローグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
折れ線グラフに△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
データフレームの未入力値が含まれる箇所に色を付ける	df.style.highlight_null()
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
一点鎖線を用いてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
列の値でデータフレームをまとめたグループ	df.groupby(column)
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
xを浮動小数点数型に変換する	float(x)
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
行列の累積和	np.cumsum(aArray)
数式の部分分数化を行う	sympy.apart(e)
配列が何のデータ型か調べる	aArray.dtype()
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
列の全順列	itertools.permutations(iterable)
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
option: グラフの色をビスクに設定する	color = 'bisque'
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
JSONを使う	import json
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフの下三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
サドルブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: サドルブラウン色を使う	color = 'saddlebrown'
日付データが日付データと同時か調べる	aDate == aDate2
棒グラフをリネン色を使って描画する	plt.bar(データ列x, データ列y, color='linen')
数列を箱髭図で描画する	plt.boxplot(データ列)
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字列は全て印字できるか調べる	s.isprintable()
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
八進文字列を整数に変換する	int(s, 8)
折れ線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
nからn2を引く	n - n2
双方向キューの末尾から要素を取り除く	deq.pop()
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
行列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
配列とリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
部分文字列が文字列の開始位置からと終了位置番目までの間にないか	s.find(sub, start, end) == -1
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
両端キューの先頭に要素を追加する	deq.appendleft(element)
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
リストをイミュータブルにする	tuple(aList)
リストとリストについての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
分子n分母mの分数を作成する	fractions.Fraction(numerator=n, denominator=m)
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データを最大最小値として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
折れ線グラフをミディアムスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ブルーバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
文字列を全て大文字に変換する	s.upper()
データフレームの要約統計量	df.describe()
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データフレームの数値を一度に小数点以下n桁で四捨五入する	df.round(n)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
ファイルを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
双曲線正弦の逆数	math.asinh(x)
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
散布図をポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.')
赤色でヒストグラムを描画する	plt.hist(データ列, color='red')
ヒストグラムを赤くする	plt.hist(データ列, color='r')
ヒストグラムの色をアンティークホワイトにセットする	plt.hist(データ列, color='antiquewhite')
データ列を使う	import pandas as pd
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームのカラムの月	df[col].dt.month
ベクトルの要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームのカラムの中にある文字列と文字列の数を数える	df[col].isin([value, value2]).sum()
option: ベージュ色を使う	color = 'beige'
データ列をビン数nでビン分割する	pd.cut(ds, n)
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
インプレースに両端キューの要素を反転する	deq.reverse()
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
散布図を黒い大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
グラフから目盛り線を消す	plt.grid(False)
データフレームのカラムの中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
実線に折れ線グラフを変更する	plt.plot(データ列x, データ列y, linestyle='solid')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
option: ダークレッドを使用する	color = 'darkred'
データフレームから指定された二つの列を抽出する	df[[column, column2]]
プラットホームがWindowsかどうか調べる	sys.platform.startswith('win32')
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
主成分分析を用いて濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
オブジェクトをイテラブルにする	iter(obj)
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
セットにリストの要素を全て追加する	aSet.update(iterable)
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
option: どの行もヘッダにしない	header = None
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
データフレームをサンプリングする	df.sample()
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
ライムグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
predicateFuncが真とならない列の要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
箱ひげ図でデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
データフレームを各列毎に分類して、列の平均値を求める	df.groupby(column)[column2].mean()
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
エンコーディング	sys.getdefaultencoding()
ダークシアグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='darkseagreen')
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
事前に正規表現をコンパイルする	re.compile(pattern)
文字列中の小文字を大文字に変換する	s.upper()
箱ひげ図を描画し、、平均を追加する	plt.boxplot(データ列, showmeans=True)
データ列をビン数nでビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列の曜日名	ds.dt.weekday_name
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
実数のn乗	pow(x, n)
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
option: オレンジ色を使う	color = 'orange'
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
セット＼集合	aSet.difference(aSet2)
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
項目名が辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: コーラル色を使う	color = 'coral'
リストと数列について散布図を描き、、マーカーを▼にセットする	plt.plot(データ列x, データ列y, marker='v')
両端キューの末尾	deq[-1]
本日の日付	datetime.date.today()
ポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ヒストグラムをミディアムスレートブルー色として描画する	plt.hist(データ列, color='mediumslateblue')
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
リストを縦軸リストをx軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
JSON形式の入力を辞書に変換する	json.load(fin)
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
書式fmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
辞書のキー一覧	list(aDict)
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
グラフで使用するフォントを指定する	sns.set(font=フォント名)
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
配列とリストについて散布図を描画して、マーカーを左三角にセットする	plt.plot(データ列x, データ列y, marker='<')
カウンタを多い順にリストとして得る	aCounter.most_common()
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
データフレームから重複した行を削除する	df.drop_duplicates()
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
'A'列の値によってデータフレームをグループ化し、要約統計量を算出する	df.groupby('A').describe()
折れ線グラフのクロス印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
文字列のケースを変換する	s.casefold()
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
オブジェクトのフィールドの値を変更する	setattr(obj, プロパティ名, 値)
データフレームのカラム名を指定された名前リストに置き換える	df.columns = columns
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
グリッド線	plt.grid(linestyle='--')
イテラブルの集合	set(iterable)
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: ライトスレイグレーを用いる	color = 'lightslategrey'
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
無限にnからカウントアップする	itertools.count(start=n)
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
コロンで文字列を区切って、列挙する	s.split(':')
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
option: グラフの種類を破線に設定する	linestyle = 'dashed'
データフレームをグループ化して、ヒストグラムとしてグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
浮動小数点数を小数点数で割った剰余を求める	math.remainder(x, x2)
明るく色をグラフの描画で使う	sns.set(pallete='bright')
実数の双曲線正弦	math.sinh(x)
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
タプルを逆さにする	reversed(aTuple)
ロードされたモジュールを列挙する	sys.modules
option: 文字コードtextを使う	encoding = text
データフレームのカラムの歪度	df[col].kurt()
option: フォントの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
option: 濃い青色を使う	color = 'darkblue'
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
プロットの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
二つのリストをコロンで区切って出力する	print(value, value2, sep=':')
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
標準出力を得る	sys.stdout
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
option: ライトブルー色を使う	color = 'lightblue'
実数を千の位で丸める	round(x, -3)
日付データが火曜日か調べる	aDate.weekday() == 1
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
円グラフを円にする	plt.axis('equals')
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
ファイル名がJSONファイルか調べる	filename.endswith('.json')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
データフレームの列が文字列で始まる行を選択する	df[df[column].str.startswith(s)]
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
列によってデータフレームをソートして、上位を取り出す	df.sort_values(columns).head(n)
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのリスト列の分散を求める	df[aList].var()
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームの未入力値を中央値で埋める	df.fillna(df.median())
option: 茶色色を使う	color = 'brown'
文字列がリストに含まれないか	element not in aList
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
データフレームのカラムを100の位で丸める	df[col].round(-2)
データフレームからカテゴリデータの列名の一覧	df.select_dtypes('object').columns
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ベクトルの最小値を求める	np.min(aArray)
オプションで、標準エラーを使う	file = sys.stderr
データフレームの母標準偏差	df.std(ddof=0)
ファイル全体を行単位で分割して読み込む	f.readlines()
両端キューのn番目に要素を挿入する	deq.insert(n, element)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
option: ディムグレー色を使う	color = 'dimgray'
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
今日が日曜日かどうか	datetime.datetime.today().weekday() == 6
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
グラフのパレットを暗くする	sns.set(pallete='dark')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
リストをタプルに変換する	tuple(aList)
データフレームのカラムの年	df[col].dt.year
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
正規表現にASCII限定として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
行列の値	aArray[行番号, 列番号]
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
日付時刻データをタプルに変換する	aDatetime.timetuple()
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
nをn2だけ右シフトする	n >> n2
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
十六進文字列を整数に変換する	int(s, 16)
ヒストグラムをシエナ色として描画する	plt.hist(データ列, color='sienna')
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
二つの変数をそれぞれ定義する	x, y = i, j
nがn2以上か	n >= n2
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をダークグレーに設定する	color = 'darkgray'
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
option: ダイアモンドマーカーを使う	marker = 'D'
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
二つの文字列は等しくない	s != s2
グラフに格子を入れる	plt.grid(True)
option: 下三角マーカーを使う	marker = 'v'
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
option: ディープスカイブルー色を使う	color = 'deepskyblue'
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
option: グラフの色を紺碧に設定する	color = 'azure'
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
多次元尺度構成法として濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
リストとリストについての散布図にrgbの三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列の接尾辞は部分文字列か確認する	s.endswith(sub)
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
ヒストグラムの色を紺にセットする	plt.hist(データ列, color='darkblue')
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
データフレームを破壊的に複数の列で降順に並べる	df.sort_values(by=column, ascending=False, inplace=True)
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
リストの文字列が最初に見つかるインデックス	aList.index(element)
文字列の先頭だけ大文字化する	s.capitalize()
ミディアムターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='mediumturquoise')
option: ナバホホワイト色を用いる	color = 'navajowhite'
配列の行ごとの合計	np.sum(aArray, axis=1)
文字列をセンタリングにする	s.center(文字列幅)
文字列の終了位置以前に部分文字列が存在するか調べる	s.find(sub, 0, end) != -1
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
option: スラグレー色を使う	color = 'slategray'
空白で最後から文字列を分割する	s.rsplit()
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: ゴーストホワイト色を使う	color = 'ghostwhite'
半透明の実線として線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
グラフをデフォルトでイイ感じに変更する	sns.set()
自然数の順列の総数	math.perm(n)
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
実数が整数か	x.is_integer()
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
実数の逆双曲線正接	math.atanh(x)
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ひとつでも非アルファベットが文字列中にあるかどうか調べる	any(not c.isalpha() for c in s)
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
プラム色を使ってヒストグラムを描画する	plt.hist(データ列, color='plum')
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
option: グラフの色をカーキに設定する	color = 'khaki'
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
列は正規分布からどれだけ、歪んでいるか見る	ds.kurt()
ファイルからフォルダ名を求める	os.path.dirname(filepath)
カウンタをリストに変換する	list(aCounter)
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
option: グラフの色をアクアに指定する	color = 'aqua'
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
タプルの項目数を見る	len(aDict)
数式を微分する	sympy.diff(e)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
option: 淡いピンク色色を使う	color = 'lightpink'
TSVファイルをデータフレームとして読む	pd.read_csv(filename, sep='\t')
option: コロンをセパレータで用いる	sep = ':'
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
文字列が文字列リストのいづれか調べる	s in aStringList
ひらがなを片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームから重複を削除する	df.drop_duplicates()
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
数式のn階微分を算出する	sympy.diff(e, z, n)
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
データ列の空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
option: グラフの色をブルーバイオレットに変更する	color = 'blueviolet'
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
両端キューの末尾から要素を取り除く	deq.pop()
データ列をインポートする	import pandas as pd
両端キューをクリアする	deq.clear()
折れ線グラフの色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
option: セパレータをコロンにする	sep = ':'
十六進数字を全部使う	string.hexdigits
二つのリストから辞書	dict(zip(aList, aList2))
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
配列のユニークな要素	np.unique(aArray)
データフレームの列の欠損値を50パーセンタイルに設定する	df[col].fillna(df[col].median())
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
イテラブルと数列について散布図を描画して、丸マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの値が未入力値か調べる	df.isna()
option: グラフの色をペールグリーンに指定する	color = 'palegreen'
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
2つの列によって昇順にデータフレームをソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
小数点以下の表示精度を設定する	pd.set_option('precision', n)
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの列の欠損値をxで置換する	df[col].fillna(x)
浮動小数点数を三乗する	x ** 3
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
時刻を用いる	import datetime
イテラブルからカウンタを作る	collections.Counter(iterable)
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
データ列が何分か調べる	ds.dt.minute
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを複数の列で昇順に並べ、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
黒いクロスマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
ふたつの集合は集合と互いに素か調べる	aSet.isdisjoint(aSet2)
セットの全ての要素が別の集合に含まれる	aSet.issubset(aSet2)
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームの列が正規分布からどの程度、尖っているか見る	df[col].skew()
単位行列	np.eye(行数, 列数)
半透明の点線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
n進数文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
散布図の右三角印を青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
要素ひとつのりスト	[element]
nが無限に続く数列	itertools.repeat(n)
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
option: グラフの色をレモンシフォンに変更する	color = 'lemonchiffon'
書き込みモードでファイルパスを開く]	open(filepath, mode='w')
要素∈集合	element in aSet
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
重複したデータを破壊的にデータフレームから落とす	df.drop_duplicates(inplace=True)
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
異なる列をキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ブラック色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
散布図でデータフレームを可視化して、カテゴリごとに色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ファイルから1バイト、読み込む	f.read(1)
二つの文字列は同じか調べる	s == s2
データフレームの列と列を落とす	df.drop([column, column2], axis=1)
データフレームを'A'列によって昇順に破壊的に並べ直す	df.sort_values(by='A', ascending=True, inplace=True)
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
双方向キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの色を暗い赤に指定する	plt.plot(データ列x, データ列y, color='darkred')
現在のミリ秒	int(time.time() * 1000)
データフレームを関数の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
バツ印を使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
option: モカシン色を使う	color = 'moccasin'
データ列がどの程度、分散しているか見る	ds.var()
文字列を部分文字列で二分し、後半の文字列を見る	s.partition(sub)[-1]
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
文字列を空白で区切って、整数のリストに変換する	map(int, s.split())
ふたつの辞書を合体する	aDict | aDict2
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
折れ線グラフでデータフレームのカラムを可視化する	plt.plot(df[column], df[column])
option: パウダーブルーを使う	color = 'powderblue'
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgray')
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
オブジェクトはタプルクラスか確認する	isinstance(obj, tuple)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
文字列TSVファイルからn番目のカラムを行としてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
変数名をキーとして、辞書	dict(name=element)
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
データフレームの列の値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
数式を変数についてn階微分する	sympy.diff(e, z, n)
二つのデータフレームを列をキーにして外部ジョインする	pd.merge(df, df2, on=column, how='outer')
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
option: グラフの色をモカシンに設定する	color = 'moccasin'
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
グリッド線	plt.grid(color='#800080')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
漢字が文字列中に含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームの指定された列を配列として抽出する	df[column].values
説明変数と目的変数として線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
データフレームのカーネル密度による分布図を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
集合から別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
ゼロ埋めされた三2ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
option: オリベドラブに色を設定する	color = 'olivedrab'
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
predicateFuncがTrueとなるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
文字列がリストの要素でないか	element not in aList
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
最大長を指定して、両端キュー	collections.deque(maxlen=n)
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
option: マーカーの色を赤にする	markerfacecolor = 'red'
辞書に辞書の項目を更新する	aDict.update(aDict2)
棒グラフをホワイト色で描画する	plt.bar(データ列x, データ列y, color='white')
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
タプルを展開してプリントする	print(*aTuple)
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
点線にヒストグラムのラインスタイルをセットする	plt.hist(データ列, linestyle='dotted')
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
正則化付き線形回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
オブジェクトは数値か調べる	isinstance(obj, (int,float))
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
データ列と数列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
整数nが配列のどれかかどうか調べる	n in aArray
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
散布図のバツ印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ファイルをバイナリモードとして開く]	open(filepath, mode='rb')
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームのstart行目からend行目までを抽出する	df[start:end]
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
指定した値としてデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームの列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
nがn2未満、またはn3以上か	n < n2 or n >= n3
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
データフレームのリストカラムの標本標準偏差	df[aList].std()
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
データフレームのリスト列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[aList].corr())
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
nが1、もしくは2か調べる	n == 1 or n == 2
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
実数の正弦	math.sin(x)
集合にシーケンスを追加更新する	aSet.update(iterable)
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
数式を簡単にする	sympy.sympify(e)
イテラブルから両端キューを作る	collections.deque(iterable)
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: セパレータをタブにする	sep = '\t'
カラムの尖度	ds.skew()
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
日付を使う	import datetime
option: モカシン色を使用する	color = 'moccasin'
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
文字列をASCIIコード列に変換する	[ord(ch) for ch in s]
逆順の両端キュー	reversed(deq)
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
二次元タプルをフラット化する	sum(aTuple)
未定値	None
グラフをスライドに設定する	sns.set(context='talk')
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: 先頭カラムを行に減らす	index_col = 0
グラフの縦軸を対数に変更する	plt.yscale('log')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
データ列の日	ds.dt.day
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
グラフの用途を論文に設定する	sns.set(context='paper')
見やすいグラフを描画する準備をする	import seaborn as sns
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
option: パパイヤウィップにフォントの色を設定する	color = 'papayawhip'
データフレームのカラムが何月か見る	df[col].dt.month
棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgray')
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
JSONフォーマットの文字列をデータにする	json.loads(jsonString)
グリッド線	plt.grid(linewidth=3.0)
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームのリストカラムの未入力値を直後の値に設定する	df[aList].fillna(method='bfill')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: セパレータを文字列にする	sep = s
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
文字列の両端から空白を取り除く	s.strip()
option: グラフの色をグレーに設定する	color = 'gray'
双方向キューの要素をインプレースに反転する	deq.reverse()
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
実数が負の数か確認する	x < 0
option: グラフの色をシルバーに設定する	color = 'silver'
句点文字を全て使う	string.punctuation
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
option: アクアマリン色を使用する	color = 'aquamarine'
option: 青緑色を使う	color = 'teal'
モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
両端キューの末尾に要素を追加する	deq.append(element)
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
列とイテラブルの直積	itertools.product(iterable, iterable2)
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
グリーンにヒストグラムの色を指定する	plt.hist(データ列, color='green')
データフレームの中で、カラムと列の重複を消す	df.drop_duplicates(subset=[column, column2])
データフレームの列名を付け直す	df.rename(columns={column: name})
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
システム時刻で乱数を初期化する	random.seed()
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
option: スレートブルー色を使う	color = 'slateblue'
縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
カテゴリ列で色付けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
イテラブルを変更不能な集合にする	frozenset(iterable)
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
Pandasでフォーマットfmtとしてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format=fmt)
データフレームの値がNaNかどうか調べる	df.isna()
データフレームを列名リストの値によってグループ化し、基本統計量を求める	df.groupby(columns).describe()
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
既存のベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
1行分標準入力から読む	sys.stdin.readline()
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの四角印の太さを設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
option: ラベンダー色を使う	color = 'lavender'
xを整数に変換する	int(x)
option: グラフの色をサーモンに設定する	color = 'salmon'
カラムの中にあるの合計を数える	ds.isin([value]).sum()
ファイルパスをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
option: 欠損値を先頭にする	na_position = 'first'
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: ブラックにフォントの色を変更する	color = 'black'
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
グラフを描画する準備をする	import matplotlib.pyplot as plt
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
データフレームのリストカラムの欠損値を直後の値に変更する	df[aList].fillna(method='bfill')
データフレームを千の位で丸める	df.round(-3)
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
サブ型か調べる	issubclass(サブクラス, クラス)
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
option: スプリンググリーン色を使う	color = 'springgreen'
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
ベクトルの列ごとの最小値	np.min(aArray, axis=0)
配列を変形する	aArray.reshape(行数, 列数)
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
0からnの範囲	range(n)
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
CSVファイルTSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
折れ線グラフの▲マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
青い一点鎖線としてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームのカラムは何月か見る	df[col].dt.month
nが5で割り切れるか調べる	n % 5 == 0
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
nがn2か調べる	n == n2
データフレームのカラムを整数に四捨五入する	df[col].round()
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
集合の浅いコピー	aSet.copy()
rgbの四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列が文字列より辞書順で後か調べる	s > s2
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
リストの末尾のn要素を取り除く	aList[:-n]
オブジェクトがリストに含まれない	element not in aList
グラフの縦軸のラベルをuntitledにする	plt.ylabel('y軸ラベル')
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
option: マーカーを四角に変更する	marker = 's'
黒い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ブルーバイオレット色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
辞書のキーに対応した値	aDict.get(key)
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
カラムの欠損値を最小値に設定する	ds.fillna(ds.min())
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームのpercent分位数を算出する	df.quantile(percent/100)
キーが辞書上で定義済みか調べる	key in aDict
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
データ列を箱ひげ図を用いて描画する	plt.boxplot(データ列)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの色をスノーに設定する	color = 'snow'
option: フォントの色をローングリーンに変更する	color = 'lawngreen'
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
データフレームの全カラムを散布図で図示する	sns.pairplot(df)
グラフの補助目盛を有効にする	plt.minorticks_on()
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
NaN	math.nan
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
numpyを使う	import numpy as np
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
表データを破壊的に列によってによってソートする	df.sort_values(by=column, inplace=True)
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
option: ライトスカイブルー色を使う	color = 'lightskyblue'
配列の最小値	np.min(aArray)
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
ロバストな単回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
キーが辞書に存在するか調べる	key in aDict
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
マッピングの項目名を要素に設定する	aDict[key] = element
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
文字列を黒色にする	f'\033[30m{value}\033[0m'
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
浮動小数点数の最小値	sys.float_info.min
実数を切り下げて整数にする	math.floor(x)
両端キューから最初の要素を取り除く	deq.remove(element)
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
表データから重複を削除する	df.drop_duplicates()
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
文字列中に部分文字列が含まれないか調べる	sub not in s
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
データフレームのリスト列の中にいくつ欠損値があるか数える	df[aList].isna().sum()
キーがマッピングに存在しない時要素を追加する	aDict.setdefault(key, element)
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームの列と列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
半透明の一点鎖線で数列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
小数点数を切り上げて整数に変換する	math.ceil(x)
プロットの中に枠なしの凡例を付ける	plt.legend(frameon=False)
option: グラフの色を小麦色に設定する	color = 'wheat'
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
nがn2以下かどうか	n <= n2
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
散布図の菱形印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
自然数の階乗	math.factorial(n)
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
本日の月数を使う	datetime.datetime.today().month
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
グラフの大きさをする	plt.figure(figsize=(横幅, 高さ))
データフレームを複数の列によってソートする	df.sort_values(by=column)
大きさnで配列とリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データ列とリストについて散布図を描画して、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
データフレームを'A'列によってソートする	df.sort_values(by='A')
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
日付時刻データの分数	aDatetime.minute
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
文字列が無限に繰り返すイテラブルを求める	itertools.repeat(element)
Pandasで、文字列のエポック秒からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
option: フォントの色をアクアにセットする	color = 'aqua'
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
イテラブルの値を両端キューの先頭に追加する	deq.extendleft(iterable)
辞書からキーの値かもしくは要素を得る	aDict.get(key, element)
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
文字列の右側からタブを取り除く	s.rstrip('\t')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
データフレームのn行以降抽出する	df[n:]
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
黒いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
サイコロと同じ乱数	random.randint(1, 6)
リストの最初のオブジェクトを探す	aList.index(element)
分類モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
オブジェクトがリストの要素かどうか調べる	element in aList
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
option: ミッドナイトブルー色を使う	color = 'midnightblue'
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
nがn2よりも小さいか調べる	n < n2
グラフの色を明るくする	sns.set(pallete='bright')
配列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
平均値付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データ列の一意な値の個数	ds.nunique()
日本語をグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
xが1もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
行列の演算をする	import numpy as np
データフレームの先頭	df.head()
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
２つのオブジェクトは同一かどうか	obj is obj2
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
要素が辞書の値として含まれているか調べる	element in aDict.values()
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
ガウス過程として回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
マップの浅いコピーを作る	aDict.copy()
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
標準入力から1行読み取る	input()
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図に赤い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
JSONフォーマットのファイル入力を読み込んでdataとする	data = json.load(fin)
集合が空集合	len(aSet) == 0
プロットの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
破壊的にデータフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
書き込みモードを用いてファイルをオープンして]fとする	f = open(filepath, mode='w')
プラットフォームのコードポイントの最大値	sys.maxunicode
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
縦棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
両端キューの中に要素が含まれてるか調べる	element in deq
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
文字列を二分する	s.partition(sep)
乱数シードをnで初期化する	random.seed(n)
エクセルファイルファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
option: フォントの色をライムにする	color = 'lime'
Pandasで、タイムスタンプ型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
カウンタの要素のカウント	aCounter[element]
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
両端キュー中の文字列の数をカウントする	deq.count(element)
既存のファイルをEUCとして追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
デピンク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
プロットの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
項目名が辞書上で未定義かどうか	key not in aDict
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
データフレームのリスト列の中にある文字列との合計をカウントする	df[aList].isin([value, value2]).sum()
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
データフレームの第一四分位数	df.quantile(0.25)
黒いグリッド線を引く	plt.grid(color='k')
option: スカイブルー色を使う	color = 'skyblue'
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
データフレームの列の中のNaNの合計を数える	df[col].isna().sum()
昇順にリストをソートする	sorted(aList, reverse=True)
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
日付時刻データが金曜日か	aDatetime.weekday() == 4
文字列の先頭から部分文字列を探す	s.find(sub)
タン色としてヒストグラムを描画する	plt.hist(データ列, color='tan')
nが無限に続くイテラブルを得る	itertools.repeat(n)
ダークサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: ダークオーキッド色を使用する	color = 'darkorchid'
折れ線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
棒グラフをブルーバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='blueviolet')
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
棒グラフをミディアムスプリンググリーン色を使って描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
オブジェクトがプロパティを持つかどうかテストする	hasattr(obj, プロパティ名)
０で全要素を初期化した32ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
option: ライトコーラルに色を変更する	color = 'lightcoral'
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ファイルをUTF8を用いてオープンする]	open(filepath, encoding='utf-8')
データ列のユニークな値の個数	ds.nunique()
データフレームのリストカラムを丸めて、整数にする	df[aList].round().astype(int)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
データフレームの列の各データ値の出現数	df[col].value_counts()
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
nからn2までの整数リスト	list(range(n, n2+1))
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームを各列毎に集計して、文字列というグループの個数を求める	df.groupby(column).size()[s]
実数に実数を加算する	x + y
ダークスラテグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
上位集合か調べる	aSet.issuperset(aSet2)
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
要素はセットの要素に含まれないか調べる	element not in aSet
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
グラフにグリッド線を入れる	plt.grid(True)
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
option: オレンジ色を使用する	color = 'orange'
整数nの8進表現	oct(n)
nが1、もしくは2か	n == 1 or n == 2
ビン数nでデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: グラフの色をミントクリームに変更する	color = 'mintcream'
両端キューの末尾に要素をつけ加える	deq.append(element)
ヒストグラムをコーラル色として描画する	plt.hist(データ列, color='coral')
半透明の実線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
option: どのカラムも行に設定しない	index_col = None
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
スレートブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
日付データが木曜日か調べる	aDate.weekday() == 3
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
nとkのコンビネーション	math.comb(n, k)
二進数文字列を整数に変換する	int(s, 2)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
option: 符号なし８ビット整数型を使う	dtype = np.uint8
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームの指定された三つの列だけ抽出する	df[[column, column2, column3]]
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
横軸の目盛を表示しない	plt.xticks([])
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
option: カーキにフォントの色を指定する	color = 'khaki'
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データ列を使う	import pandas as pd
数の２乗	x ** 2
option: 文字列を区切りで使う	sep = s
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
文字列モジュールをインポートする	import string
データフレームを複数の列でによって破壊的に並べ直す	df.sort_values(by=column, inplace=True)
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
配列とリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
option: EUCを使う	encoding = 'euc_jp'
リストの全要素をクリアにする	aList.clear()
オブジェクトはリストクラスか調べる	isinstance(obj, list)
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
部分的最小二乗法として回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
配列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの列をドロップする	df.drop(column, axis=1)
option: ライトスレイグレー色を使う	color = 'lightslategrey'
nが正の数か調べる	n > 0
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
整数nを十六進文字列に変換する	hex(n)[2:]
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
横方向に３つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
配列の要素ごとに加算する	aArray + aArray2
データフレームのカラムのどの値が頻出か確認する	df[col].mode()
配列から重複を除いた行列を作る	np.unique(aArray)
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
浮動小数点数を整数に変換する	int(x)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
縦棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームの中で、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
option: アクアマリンにグラフの色を指定する	color = 'aquamarine'
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
カラムが正規分布からどれだけ、尖っているか確認する	ds.skew()
散布図をrgbの右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストをビン数nでビン分割する	pd.cut(aList, n)
マゼンタ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
列の各データ値の出現数	df[col].value_counts()
シーケンスからn個、サンプリングする	random.sample(iterable, k=n)
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
実数を十六進表記の文字列に変換する	x.hex()
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
option: フォントの色をゲインズボロに指定する	color = 'gainsboro'
標準出力を使う	sys.stdout
option: 改行コードを旧Macにセットする	newline = '\r'
散布図のマーカーの大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
ヒートマップでクラス分類の予測精度を確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ヒストグラムを青くする	plt.hist(データ列, color='b')
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
文字列内にひとつでも小文字があるか確認する	any(c.islower() for c in s)
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
文字列リストを一つの文字列にする	''.join(map(str, iterable))
単位正方行列	np.identity(n)
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
option: ライトグリーン色を使用する	color = 'lightseagreen'
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
変数について数式の積分を求める	sympy.integrate(e, z)
データフレームを列名リストによってソートし、、更新する	df.sort_values(by=column, inplace=True)
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
option: ロイヤルブルー色を使う	color = 'royalblue'
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
文字列が正規表現にマッチさせる	re.match(pattern, s)
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
配列と数列についての散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図を白色として描画する	plt.scatter(データ列x, データ列y, color='white')
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
ゼロ埋めされた行列	np.zeros(行数, 列数)
seabornのデフォルトを適用する	sns.set()
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームの欠損値をモードで置換する	df.fillna(df.mode().iloc[0])
２つのリストからマップ	dict(zip(aList, aList2))
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
双方向キューの末尾の要素	deq[-1]
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
文字列がタイトル大文字小文字かテストする	s.istitle()
散布図を黒い左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<', c='k')
タイムスタンプデータとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
本日の曜日を整数で使う	datetime.datetime.today().weekday()
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
二つのカウンタの共通する要素	aCounter & aCounter2
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
データ列のユニークな要素数	ds.nunique()
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
ゼロ埋めした行列	np.zeros(要素数)
option: ライトイエローを使う	color = 'lightyellow'
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
ヒストグラムを貝殻色として描画する	plt.hist(データ列, color='seashell')
棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
リストのn番目からn2番目の部分	aList[n:n2]
option: バッファリングのサイズを設定する	buffering = 4096
整数nがリストのいづれか	n in aList
オブジェクトが整数かどうか	isinstance(obj, int)
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
ダークシアン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
縦棒グラフをミントクリーム色を使って描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: 線を太くする	linewidth = 3.0
ヒストグラムをやわらかい青色を使って描画する	plt.hist(データ列, color='cornflowerblue')
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
データフレームの指定された列名一覧の列を抽出する	df[columns]
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
ミディアムブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumblue')
赤い下三角マーカーをリストとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームの列のユニークな値の個数	df[col].nunique()
リストとリストについて散布図を描画し、、菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: 線の種類を実線に設定する	linestyle = 'solid'
option: ペールグリーン色を使う	color = 'palegreen'
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
データ列の文字列長を列として使う	ds.str.len()
nが何桁か	len(str(n))
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
スケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームの列とカラムのヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
文字の文字コードを使う	ord(ch)
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
数字を全部見る	string.digits
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
グラフを使用する	import matplotlib.pyplot as plt
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
配列とリストについての散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
xの小数点以下'3'桁までを出力する	print(':.3f'.format(x))
本日が何日か知る	datetime.datetime.today().day
option: パパイヤウィップ色を使う	color = 'papayawhip'
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
option: 赤色を使う	color = 'red'
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
option: 右三角マーカーを描画する	marker = '>'
青い実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
配列の次元数	aArray.ndim
代数計算を使う	import sympy
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
TSVファイルからSJISでCSVを読み込む	pd.read_csv(filename, encoding='shift_jis')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
オブジェクトをイテラブルに変換する	iter(obj)
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
入力ストリームを全部、読み込む	f.read()
現在の時間数	datetime.date.today().hour
実数以下の最大の整数	math.floor(x)
キューをポップする	deq.pop()
option: グラフの色をネイビーに設定する	color = 'navy'
文字列を積極的に小文字にする	s.casefold()
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
折れ線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
リストの要素を昇順にソートする	sorted(aList, reverse=True)
両端キューの要素をインプレースに反転する	deq.reverse()
グラフの背景色を白くする	sns.set(style='whitegrid')
低頻度な方からカウンタを列挙する	aCounter.most_common()[::-1]
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
ポイント印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
二つのデータフレームを横向きにくっつける	pd.concat([df, df2], axis=1)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
散布図の四角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームを二つの列によって昇順にソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データ列間の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
Pandasで、UNIX秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
nの二乗を算出する	n ** 2
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
プロットを論文用にセットする	sns.set(context='paper')
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
整数nを二進表現に変換する	bin(n)
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
データフレームをに箱ひげ図として描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
option: 色を淡い茶色に設定する	color = 'tan'
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
イテラブルを配列に変換する	np.array(iterable)
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
option: ピンク色を使う	color = 'pink'
上位集合もしくは等しいか調べる	aSet > aSet2
辞書順で文字列が文字列より後か	s > s2
クラスが名前付きタプルか調べる	issubclass(C, tuple)
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
option: エラーを無視するように設定する	errors = 'ignore'
option: ゴールド色を使う	color = 'gold'
配列とリストについての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
ダークスラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
両端キュー中の要素のインデックス	deq.index(element)
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
集合のイミュータブル版	frozenset(aSet)
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
option: グラフの色をモカシンに変更する	color = 'moccasin'
文字列をパターンによって置換する	re.sub(pattern, newsub, s)
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
タプル内の要素が全て真かどうか調べる	all(aTuple)
データフレームの列を目的変数にする	目的変数 = df['列名']
キューの大きさ	len(deq)
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームの列のNaNを最小値で埋める	df[col].fillna(df[col].min())
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
option: 破壊的に操作する	inplace = True
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムの色をゴールドに指定する	plt.hist(データ列, color='gold')
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
option: 説明変数を事前に正規化する	normalize = True
要素がセットの要素か調べる	element in aSet
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
二次元組をフラット化する	sum(aTuple)
文字列の右側から改行を取り除く	s.rstrip('\n')
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
ゼロ埋めされた８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
オブジェクトのプロパティの値を値に変更する	setattr(obj, プロパティ名, 値)
データフレームを列の値によってグループ化する	df.groupby(column)
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
グラフを画面に設定する	sns.set(context='notebook')
実数を三乗する	x ** 3
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
データフレームを列によって並べてインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
option: グラフの色をシエナに設定する	color = 'sienna'
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
日付時刻データが何月か知る	aDatetime.month
option: コーンズシルクにグラフの色を変更する	color = 'cornsilk'
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
データフレームをファイルでJSONLファイルに保存する	df.to_excel(filename)
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
散布図をバツ印で描画する	plt.scatter(データ列x, データ列y, marker='x')
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
最初のコマンド引数	sys.argv[1]
option: 黄色色を使う	color = 'yellow'
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
タプルをナンバリングする	enumerate(aTuple)
リストの折れ線グラフを描画して、カラーコードを用いて色を設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
ハニーデュー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
変数の値をスワップする	x, y = y, x
実数を小数点以下で丸める	round(x, n)
データフレームの重複を見る	df.duplicated()
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
option: ドジャーブルーにグラフの色を設定する	color = 'dodgerblue'
option: グラフの色を小麦色に変更する	color = 'wheat'
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
ポスターにプロットの用途を設定する	sns.set(context='poster')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
リストと配列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
表の末尾を見る	df.tail()
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
データフレームをJSONLファイルに保存する	df.to_excel(filename)
データフレームを列によってソートする	df.sort_values(by=column)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
真	True
predicateFuncが真とならないシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームのカラムが何秒か見る	df[col].dt.second
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ファイルのファイル名	os.path.basename(filepath)
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
文字列内にひとつでも空白が含まれるかどうか調べる	any(c.isspace() for c in s)
nとn2が等しいか調べる	n == n2
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
データフレームを'A'列と'B'列の値によってまとめたグループ	df.groupby(['A', 'B'])
アルファベットの小文字列	string.ascii_lowercase
ベクトルの和	aArray + aArray2
データフレームを'A'列の値によってグループ化し、列挙する	[(name, group) for name, group in df.groupby('A')]
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データ列のpercent分位数を求める	ds.quantile(percent/100)
ナバホホワイトにヒストグラムの色をする	plt.hist(データ列, color='navajowhite')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
option: ヘッダを自動的な連番に設定する	header = None
ASCII限定として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
二つの変数を同じ値にする	x = y = n
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データフレームの中にいくつ欠損値が存在するかカウントする	df.isna().sum()
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
集合＼集合	aSet.difference(aSet2)
横棒グラフをシエナ色を用いて描画する	plt.barh(データ列x, データ列y, color='sienna')
データフレームの文字列をNaNに変換する	df.replace(s, np.nan)
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
既にロードしたモジュールの一覧	sys.modules
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
ヒストグラムをシーグリーン色を用いて描画する	plt.hist(データ列, color='seagreen')
棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
文字の文字コード	ord(ch)
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのリストカラムの未入力値を最大値で補う	df[aList].fillna(df[aList].max())
イテラブルから重複を取り除く	set(iterable)
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
スピアマンの順位相関係数を使う	scipy.stats.spearmanr(データ列, データ列2)
文字列がリストの要素でないか調べる	element not in aList
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
リストの重複を取り除く	sorted(set(aList), key=aList.index)
リスト内の要素が少なくともひとつ真か調べる	any(aList)
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
入力ストリームからn文字読み込む	f.read(n)
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
データフレームの指定された列を配列に変換する	df[column].values
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ボックスチャートにラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列中に部分文字列が含まれるか調べる	sub in s
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
配列を等量で分割数nでビン分割する	pd.qcut(aArray, n)
綺麗なグラフを描画する準備をする	import seaborn as sns
データフレームのカラムの最頻値	df[col].mode()
文字列中の部分文字列の出現をカウントする	s.count(sub)
option: 白にグラフの色を設定する	color = 'white'
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
両端キュー中の要素の数を数える	deq.count(element)
データフレームのリスト列の欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
キーが辞書に存在する	key not in aDict
配列とイテラブルの散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
xを論理値に変換する	bool(x)
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
option: パールバイオレットレッドにグラフの色をする	color = 'palevioletred'
散布図に黒い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
文字列を空白で区切る	s.split()
二つの列で昇順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
リストの平均値	sum(aList)/len(aList)
データフレームの列で文字列が含まれないデータを取り出す	df[not df[column].str.contains(s)]
ファイルをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームの中に文字列と文字列が存在するか	df.isin([value, value2])
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
文字列を隔離する	sys.intern(s)
アークコサイン	math.acos(x)
文字列中の部分文字列の出現を数える	s.count(sub)
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
データ列の中に日付データがある	ds.isin([value])
nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
リストとイテラブルの散布図を描画して、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
ファイルを一行ずつ読み込む	f.readline()
option: グラフの色をラベンダーブラッシュにセットする	color = 'lavenderblush'
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
option: フォントの色をダークグレーに設定する	color = 'darkgray'
データフレームの各グループごとの個数	df.groupby(column).count()
数列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
データフレームのカラムの時	df[col].dt.hour
変数について数式の微分を行う	sympy.diff(e, z)
アイリスのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
行列の列ごとの分散	np.var(aArray, axis=0)
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
アイボリーにヒストグラムの色を変更する	plt.hist(データ列, color='ivory')
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
グラフを全般的に濃くする	sns.set(pallete='deep')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームの重複した行をマスクする	df.duplicated()
オブジェクトが関数か調べる	callable(obj)
箱ひげ図として数列を可視化する	plt.boxplot(データ列)
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
nがn2未満、またはn3以上かどうか判定する	n < n2 or n >= n3
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
改行なしに２つの文字列をプリントする	print(value, value2, end='')
行列式	np.linalg.det(aArray)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
配列とリストの散布図を描画して、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
文字列を黄色にする	f'\033[33m{value}\033[0m'
棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
リストとリストの散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの列をNaNも加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
数列とリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを昇順に列で整列する	df.sort_values(by=column, ascending=True)
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
逆順のキュー	reversed(deq)
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
データ列の平均値	ds.mean()
ダークゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
リストの最後	aList[-1]
横棒プロットの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
option: チョコレートにフォントの色を指定する	color = 'chocolate'
nとn2の論理和	n | n2
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
整数nがセットのどれかかどうか調べる	n in aSet
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
グリーンイエロー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
辞書の値として要素が含まれているかどうか確認する	element in aDict.values()
横棒グラフをダークオーキッド色として描画する	plt.barh(データ列x, データ列y, color='darkorchid')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
配列と配列について散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの菱形印の線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
辞書の全項目をクリアする	aDict.clear()
列の一覧	df.info()
小数点数のcosの逆数	math.acos(x)
棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
ユーザから入力される	input()
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
カンマで区切って二つのリストをプリントする	print(value, value2, sep=',')
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
option: 配列のデータ型を指定する	dtype = np.int32
タプルの最初を除く	aTuple[1:]
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
option: ライトスレイグレー色を使用する	color = 'lightslategray'
データフレームの先頭n行	df.head(n)
ダイアモンドマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
option: グレー色を使う	color = 'gray'
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
ファイルから書き込みストリームを開いて]fとする	f = open(filepath, mode='w')
リストとリストについて散布図を描画して、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
線グラフを暗い赤色を使って描画する	plt.plot(データ列x, データ列y, color='darkred')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
option: パウダーブルー色を使う	color = 'powderblue'
nとn2の値を足してnとする	n += n2
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
散布図をバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
表データを使う	import pandas as pd
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
右三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
全ての印字可能な文字	string.printable
JSONファイルのfをデータに変換する	json.load(fin)
データフレームの標本標準偏差を算出する	df.std()
配列を中央値でビン分割する	pd.qcut(aArray, 2)
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図を青色として描画する	plt.scatter(データ列x, データ列y, color='blue')
option: バツマーカーを描画する	marker = 'x'
ピアソンとしてデータフレームの相関行列	df.corr(method='pearson')
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
ひとつでも非数字が文字列中に含まれるか調べる	any(not c.isdigit() for c in s)
標準入力から1文字だけ読む	sys.stdin.read(1)
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
option: 暗い赤にグラフの色を設定する	color = 'darkred'
option: 印を右三角に変える	marker = '>'
option: フクシア色を使う	color = 'fuchsia'
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
エクセルファイルファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
文字列の中のケースを無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
リストの最初の文字列を探す	aList.index(element)
option: ライトスレイグレーを使う	color = 'lightslategrey'
大量のデータ列が正規分布に従うか調べる	scipy.stats.kstest(データ列, 'norm')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
kを底とする小数点数の対数を求める	math.log(x, k)
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データ列の中の欠損値の合計をカウントする	ds.isna().sum()
列を文字列リストに変換して、部分文字列によって連結する	sub.join(map(str, iterable))
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
option: フォントの色をゴールドに設定する	color = 'gold'
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームの中の列を分割数nで等量でビンニングする	pd.qcut(df[col], n)
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
カウンタの項目を列挙する	aCounter.keys()
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
折れ線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
数値を太文字で出力する	print(f'\033[1m{value}\033[0m')
option: ミディアムパープル色を使う	color = 'mediumpurple'
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
ヒストグラムの色をラベンダーに指定する	plt.hist(データ列, color='lavender')
双方向キューから最初の文字列を取り除く	deq.remove(element)
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
option: 左三角マーカーを使う	marker = '<'
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ベクトルにはいくつ要素があるか調べる	aArray.size
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
イテラブルの各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
nがn2より大きいか調べる	n > n2
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
スカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='skyblue')
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフを青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: シスル色を使う	color = 'thistle'
データフレームを関数によってまとめた表	df.groupby(関数)
データ列の曜日が何日目か見る	ds.dt.dayofweek
文字列はタイトル大文字小文字か調べる	s.istitle()
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
option: ライトブルーに色を設定する	color = 'lightblue'
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='teal')
現在の作業ディレクトリ	os.getcwd()
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
文字列がリストの要素か調べる	element in aList
データ列の欠損値を平均値で補う	ds.fillna(ds.mean())
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
黒い菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
xの小数点以下'2'桁まで出力する	print(':.2f'.format(x))
表データの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
乱数シードをnで固定する	random.seed(n)
行列の個数	aArray.size
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
ヒストグラムをブラック色を用いて描画する	plt.hist(データ列, color='black')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
白色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: 耐火レンガにグラフの色を変更する	color = 'firebrick'
スチールブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
option: シエナ色を使う	color = 'sienna'
ラインを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
折れ線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
２つのカウンタの共通する要素を求める	aCounter & aCounter2
線グラフをリネン色を用いて描画する	plt.plot(データ列x, データ列y, color='linen')
数式の部分分数化する	sympy.apart(e)
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
文字列が全て空白文字からなるか調べる	s.isspace()
グラフの見た目を綺麗にする	import seaborn as sns
データフレームの列の未入力値を直後の値に設定する	df[col].fillna(method='bfill')
option: ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
option: グラフの種類を点線にセットする	linestyle = 'dotted'
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
文字列が文字列リストに含まれるか調べる	s in aStringList
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
折れ線グラフの色をミディアムスレートブルーにセットする	plt.plot(データ列x, データ列y, color='mediumslateblue')
数列を折れ線グラフを用いて作図する	plt.plot(データ列x, データ列y)
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
データフレームを'A'列と'B'列でソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
データ列の値が欠損値か調べる	ds.isna()
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
文字列をトリムする	s.strip()
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
option: マーカーを右三角に変更する	marker = '>'
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
グリッドを点線にする	plt.grid(linestyle='dotted')
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの中にとが存在する	df.isin([value, value2])
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
option: 複素数型を使う	dtype = bool
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
原点から(実数,y)の距離	math.hypot(x, y)
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
データフレームのリスト列を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
nが-9以上、9以下か調べる	-9 <= n <= 9
文字列内にひとつでもアルファベットがある	any(c.isalpha() for c in s)
多次元データを特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
option: ライトコーラル色を使う	color = 'lightcoral'
最小値でデータ列の欠損値を置き換える	ds.fillna(ds.min())
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
双方向キューの最初から値を取り除く	deq.popleft()
両端キューのn番目	deq[n]
文字列を緑色にする	f'\033[32m{value}\033[0m'
オブジェクトが集合クラス	isinstance(obj, set)
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
本日の年数	datetime.datetime.today().year
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
コギーくんを使いたい	import kogi
辞書のエントリを列挙する	aDict.values()
文字列を置き換える	s.replace(sub, newsub)
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
スピアマン順位相関係数を用いてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
イテラブルをカウンタに変換する	collections.Counter(iterable)
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
実数の逆正接	math.atan(x)
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
option: スプリンググリーンを用いる	color = 'springgreen'
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
option: スチールブルー色を使う	color = 'steelblue'
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
空のガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
文字コードtextでファイルをオープンする]	open(filepath, encoding=text)
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
辞書の浅いコピーを作成する	aDict.copy()
データフレームのカラムの中にと日付データが含まれるか調べる	df[col].isin([value, value2])
テキストファイルファイル名がか調べる	filename.endswith('.txt')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
辞書の値の一覧	aDict.values()
データフレームのリストカラムを丸めて整数型にする	df[aList].round().astype(int)
データフレームの列がxでない行をフィルタする	df[df[column] == x]
option: データ型として８ビット整数型を使う	dtype = np.int8
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
列の値によってデータフレームをグループ化して、各グループごとの標準偏差を算出する	df.groupby(column).std()
配列とリストについての散布図にrgbの三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
オブジェクトのイテレータ	iter(obj)
タブで区切って二つの数値をプリントする	print(value, value2, sep='\t')
現在が火曜日	datetime.datetime.today().weekday() == 1
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
青い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
シーケンスを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ファイルパスをバイナリできるように開く]	open(filepath, mode='rb')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
三自然数の最小公倍数	math.lcm(n, n2, n3)
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムの色をパウダーブルーにする	plt.hist(データ列, color='powderblue')
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
データフレームのcollをフォーマットとしてdatetime64型にする	pd.to_datetime(df[col], format='%Y-%m-%d')
option: 四角マーカーを描画する	marker = 's'
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
カラムの中にと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
折れ線グラフを色付きの実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ヒストグラムを白くする	plt.hist(データ列, color='w')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
カラムの第一四分位数	ds.quantile(0.25)
最初のプログラムを書く	print('Hello World')
辞書から最後の項目をポップする	aDict.popitem()
タプルの中の最大値	max(aTuple)
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
フクシア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
option: フォントの色をビスクに設定する	color = 'bisque'
option: シーグリーンを使う	color = 'seagreen'
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
書き込み用にUTF8を使ってファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
実数の自然対数	math.log(x)
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
二つのオブジェクトが等しいか調べる	obj == obj2
変数を太文字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
実数のn乗して実数による余り	pow(x, n, y)
行列を平坦にする	aArray.flatten()
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データ列の未入力値を平均値にセットする	ds.fillna(ds.mean())
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
折れ線グラフの色を紺にセットする	plt.plot(データ列x, データ列y, color='darkblue')
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
option: ライトグレーを使用する	color = 'lightgray'
Pandasで文字列をPandasの日付型に変換する	pd.to_datetime(s)
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データ列を丸めて、整数型にする	ds.round().astype(int)
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
カウンタを多い順に列挙する	aCounter.most_common()
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
option: グラフの色をライトブルーに設定する	color = 'lightblue'
option: SJISを使う	encoding = 'shift_jis'
データ列の母標準偏差	ds.std(ddof=0)
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムの色をタンに変更する	plt.hist(データ列, color='tan')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
データフレームのリスト列の中に文字列がある	df[aList].isin([value])
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
nからn2までの整数列	list(range(n, n2+1))
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
小数点数以下の最大の整数	math.floor(x)
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
エラーなく集合から値を取り除く	aSet.discard(element)
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
タプルの先頭を取り除く	aTuple[1:]
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
ダークグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkgray')
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
nがn2か	n == n2
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
データフレームを列を用いて昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
整数nがタプルのどれかか	n in aTuple
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
キューの上限	deq.maxlen
折れ線グラフの三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
両端キューのn番目に数値を挿入する	deq.insert(n, element)
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
実数の双曲線正接	math.tanh(x)
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
列'A'と列'B'をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ヒストグラムをドジャーブルー色を用いて描画する	plt.hist(データ列, color='dodgerblue')
乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
タプルの最後	aTuple[-1]
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
nとn2の積	n * n2
イテラブルの要素を全て集合に追加する	aSet.update(iterable)
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
'A'列と'B'列によってデータフレームをグループ化する	df.groupby(['A', 'B'])
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
半透明の破線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
ヒストグラムの色をパウダーブルーにセットする	plt.hist(データ列, color='powderblue')
xが一桁の数かどうか	-9 <= x <= 9
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
タプルの項目名の一覧	aDict.keys()
データフレームから列名を複数指定して選択する	df[columns]
ヒストグラムをパールゴールデンロッド色として描画する	plt.hist(データ列, color='palegoldenrod')
シーケンスをイミュータブルな集合に変換する	frozenset(iterable)
データフレームのリストカラムを丸める	df[aList].round()
option: フォントの色を茶色に設定する	color = 'brown'
nをn2で割った剰余を求める	n % n2
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームを100の位で丸めて整数型にする	df.round(-2).astype(int)
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ブランチドアーモンド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
小麦色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
option: グラフの色をスラグレーに設定する	color = 'slategrey'
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
折れ線グラフを大バツ印を用いて描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
グラフで使うフォントを指定する	sns.set(font=フォント名)
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
x軸の目盛りを対数に変更する	plt.xscale('log')
データ列の中にある文字列と文字列の合計を求める	ds.isin([value, value2]).sum()
データフレームの列を折れ線グラフとして描画する	plt.plot(df[column], df[column])
オブジェクトのオブジェクト識別子	id(obj)
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ふたつの関係が上位集合もしくは等しい	aSet > aSet2
全要素を初期値で初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
度数分布図を二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
プラットホームはMacOSか調べる	sys.platform.startswith('darwin')
点線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
リストとリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
ヒストグラムを描画して、半透明化にする	plt.hist(データ列x, alpha=0.5)
デックの中に文字列が含まれてるかどうか調べる	element in deq
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
折れ線グラフに黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
自然数最小公倍数	math.lcm(n, n2)
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
データフレームの列を消し、、更新する	df.drop(column, axis=1, inplace=True)
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
表データをサンプリングする	df.sample()
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
nが奇数か調べる	n % 2 == 1
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
option: 印をポイントに設定する	marker = '.'
リストと配列について散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
実数の双曲線余弦	math.cosh(x)
データ列のユニークな値	ds.unique()
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
商と余りを同時に計算する	divmod(x, y)
option: 書き込みモードを使う	mode = 'w'
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
小数点数の双曲線正弦の逆数	math.asinh(x)
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
カウンタ同士で積集合	aCounter & aCounter2
nが偶数か調べる	n % 2 == 0
データ列の尖度	ds.skew()
リストとリストについて散布図を描画して左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
ダークグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
文字列が英数字か確認する	s.isalnum()
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
シルバー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
リストから文字列を取り除く	aList.remove(element)
文字列を青色にする	f'\033[34m{value}\033[0m'
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
option: オリベドラブ色を使う	color = 'olivedrab'
改行なしに文字列をプリントする	print(value, end='')
リストとリストについて散布図を描画し、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
クラス分類の正確さを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
数を小数点以下第一位で丸める	round(x, 1)
文字列は片仮名か調べる	('ァ' <= ch <= 'ン')
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
グラフをスライド用に設定する	sns.set(context='talk')
アルファベットの文字列	string.ascii_letters
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
棒グラフを淡いピンク色色を用いて描画する	plt.bar(データ列x, データ列y, color='lightpink')
nが一桁の数か調べる	-9 <= n <= 9
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
タプルのn番目の	aTuple[n]
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
option: グラフの色をアイボリーにセットする	color = 'ivory'
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
リストを反転する	reversed(aList)
キーがマッピングに存在するか調べる	key in aDict
option: コーンズシルク色を使う	color = 'cornsilk'
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
カラムの最大幅をnにする	pd.set_option('max_colwidth', n)
option: マーカーを左三角に変更する	marker = '<'
ヒストグラムを実線に変更する	plt.hist(データ列, linestyle='solid')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
折れ線グラフをターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
散布図をシスル色を用いて描画する	plt.scatter(データ列x, データ列y, color='thistle')
折れ線グラフの色をライトスチールブルーにセットする	plt.plot(データ列x, データ列y, color='lightsteelblue')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
標準入力から1行だけ読み込む	sys.stdin.readline()
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
nがn2で割り切れる	n % n2 == 0
列としてデータフレームをグループ化して、それぞれのグループの件数を知る	df.groupby(column).size()
平均値付き箱髭図を描く	plt.boxplot(データ列, showmeans=True)
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
option: セパレータを使わない	sep = ''
両端キューをタプルに変換する	tuple(deq)
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列を黄色化する	f'\033[33m{value}\033[0m'
ターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='turquoise')
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
新しいヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの未入力値を直前の値に設定する	df.fillna(method='ffill')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
二つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
列のNaNを最小値で埋める	ds.fillna(ds.min())
標準出力のバッファをフラッシュする	sys.stdout.flush()
オブジェクトが名前付きタプルか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
行列の行ごとの合計を使う	np.sum(aArray, axis=1)
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
文字列を最後の部分文字列で二分し、前半の文字列を見る	s.rpartition(sub)[0]
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
切片なしの回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
全ての十六進数字	string.hexdigits
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
両端キューの左側に要素を入れる	deq.appendleft(element)
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
nを二進数文字列にする	bin(n)[2:]
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
アンサンブル学習としてクラス分類を行う	sklearn.ensemble.VotingClassifier()
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
option: ライトサーモン色を使う	color = 'lightsalmon'
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列を太字にする	f'\033[1m{value}\033[0m'
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
データフレームのカラムの中に文字列と文字列がいくつあるかカウントする	df[col].isin([value, value2]).sum()
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
文字列の開始位置より後に部分文字列が含まれない	s.find(sub, start) == -1
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
切片なしの単回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
整数nを八進文字列に変換する	oct(n)[2:]
文字列中にひとつでも非英字が含まれる	any(not c.isalpha() for c in s)
データフレームの中にある日付データと文字列の合計を数える	df.isin([value, value2]).sum()
データフレームの指定された４列を抽出する	df[[column, column2, column3, column4]]
option: グラフの色をライトスカイブルーに指定する	color = 'lightskyblue'
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
文字列の無限イテラブル	itertools.repeat(element)
丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o')
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
整数型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int)
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
クラス分類の偽陽性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
行列の分散を計算する	np.var(aArray)
イテラブルとリストについて散布図をプロットし、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ファイルを読み込みモードとしてオープンする]	open(filepath, mode='r')
コマンドの第二引数	sys.argv[1]
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームから指定された列名一覧の列のみ抽出する	df[columns]
タプルの平均値	sum(aTuple)/len(aTuple)
全要素を０で初期化した行列	np.zeros(行数, 列数)
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
データフレームの列の中に存在する文字列の合計を数える	df[col].isin([value]).sum()
集合をイミュータブルなセットにする	frozenset(aSet)
文字列がリストに含まれないか調べる	element not in aList
ValueMapでデータフレームの値を一度に置き換える	df.replace(ValueMap)
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
データフレームを表示するとき、折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
列のコンビネーションを得る	itertools.combinations(iterable, n)
option: 欠損値は無視する	dropna = True
データ列を1000の位で丸める	ds.round(-3)
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
アンダーライン付きで文字列を表示する	print(f'\033[4m{value}\033[0m')
二つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
日付データが日付データより前か調べる	aDate < aDate2
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
文字列を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
データ列の欠損値を直後の値に指定する	ds.fillna(method='bfill')
等差数列から整数乱数を生成する	random.randrange(start, end, step)
異なる列をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
データフレームの欠損値をxに設定する	df.fillna(x)
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
双方向キューの末尾からデータを取り除く	deq.pop()
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列は全て十進数字か調べる	s.isdecimal()
nをn2だけ増加させる	n += n2
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
イテラブルを文字列に変換して、カンマで連結する	','.join(map(str, iterable))
行列の行ごとの最小値	np.min(aArray, axis=1)
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
データ列の月を使う	ds.dt.month
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
ヒストグラムを描いて、ビン数を設定する	plt.hist(データ列, bins=区関数)
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
データ列が何日か見る	ds.dt.day
リストとイテラブルについて散布図を描画して三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: バイナリモードにセットする	mode = 'rb'
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
実数に実数を掛ける	x * y
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
option: SJISを使用する	encoding = 'shift_jis'
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
配列とリストについて散布図を描画してその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
行列の要素ごとに加算する	aArray + aArray2
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
データ列が何曜日か見る	ds.dt.weekday_name
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
列にシーケンスを続ける	itertools.chain(iterable, iterable2)
縦棒グラフを描き、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
ピアソン相関係数としてデータフレームの相関行列	df.corr(method='pearson')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
オプションで、標準出力を出力にする	file = sys.stdout
データフレームの相関行列ケンドール相関係数でを計算する	df.corr(method='kendall')
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
rgbの左三角マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
▲マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^')
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
本日が金曜日	datetime.datetime.today().weekday() == 4
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: グリーン色を使う	color = 'green'
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
横棒グラフをゴーストホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームの最頻値	df.mode()
データフレームのカテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ライトゴールドロディイエロー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
nとkのコンビネーションを求める	math.comb(n, k)
タプルの先頭	aTuple[0]
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
nをn2だけ減少させる	n -= n2
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
組の平均値	sum(aTuple)/len(aTuple)
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
文字列を左トリムする	s.lstrip()
折れ線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
ライトグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
シーケンスを累加する	itertools.accumulate(iterable)
データフレームの重複した行を数える	df.duplicated().sum()
データ列をn個にビン分割する	pd.cut(ds, n)
option: カンマをセパレータで使う	sep = ','
データフレームからランダムに選択する	df.sample()
値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
y座標の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
データフレームの中の列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
赤い右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
整数nを八進表現にする	oct(n)
シーケンスに列を続けたイテラブル	itertools.chain(iterable, iterable2)
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
option: ハニーデュー色を使う	color = 'honeydew'
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
リストのn番目からn2番目までの部分	aList[n:n2]
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
option: 色を紺に指定する	color = 'darkblue'
option: 読み込みモードに設定する	mode = 'r'
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
行列の合計値	np.sum(aArray)
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
文字列全体をケースを無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
散布図をミディアムアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフのクロスマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: イエローグリーン色を使う	color = 'yellowgreen'
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
オブジェクトは文字列か調べる	isinstance(obj, str)
option: シアン色を用いる	color = 'cyan'
文字列が平仮名かテストする	('ぁ' <= ch <= 'ん')
現在の秒数	datetime.date.today().second
浮動小数点数のn乗	pow(x, n)
標準出力のバッファを強制表示する	sys.stdout.flush()
二つのオブジェクトは等しいか確認する	obj == obj2
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
ユニークな値を要素とする配列	np.unique(aArray)
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
カラーバーを付ける	plt.colorbar()
ファイル名がTSVファイルか判定する	filename.endswith('.tsv')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
タプルから項目名の値か、もしくは要素を得る	aDict.get(key, element)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
ベクトルの合計値	np.sum(aArray)
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
実数の指数	math.frexp(x)[1]
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
マップに項目名が存在するかどうか調べる	key not in aDict
文字列がタプルに含まれないか調べる	element not in aTuple
配列を平坦にする	aArray.flatten()
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
ファイルパスをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームのカラムの値が欠損値か調べる	df[col].isna()
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データ列の標本標準偏差	ds.std()
nわるn2	n / n2
乱数の行列	np.random.random((行数, 列数))
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
半透明の破線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
タン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
カラムの中に日付データと文字列が含まれるかどうか調べる	ds.isin([value, value2])
データフレームから列を二つ選択する	df[[column, column2]]
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
データ列の折れ線グラフを△印で描画する	plt.plot(データ列x, データ列y, marker='^')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ユーザの入力を整数として受け取る	int(input())
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
レモンシフォン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
実数の三乗	x ** 3
option: フォントの色をミディアムターコイズに指定する	color = 'mediumturquoise'
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
部分文字列で文字列を分けたときの後半の文字列	s.partition(sub)[-1]
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
2つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
リストとリストについて散布図を描いて、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
カウンタの上位を列挙する	aCounter.most_common(k)
オブジェクトがタプルの要素でないか調べる	element not in aTuple
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字コードに対応する文字	chr(unicode)
データフレームを列によってまとめたグループ	df.groupby(column)
リストをy軸、リストを横軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームを複数の列毎にグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
両端キューの右側の要素	deq[-1]
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
文字列の出力を改行なしに行う	print(value, end='')
リスト内の要素が少なくとも一つ真か調べる	any(aList)
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
リストと配列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
全要素を0で初期化した配列	np.zeros(要素数)
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
データ列とデータ列について散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのカラムのNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
n×n2	n * n2
自分自身をモジュールとして	sys.modules[__name__]
データフレームの欠損値をxで埋める	df.fillna(x)
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
データフレームの平均と信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
配列と数列についての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
3自然数のLCM	math.lcm(n, n2, n3)
option: ローングリーン色を用いる	color = 'lawngreen'
両端キューの大きさ	len(deq)
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
アルファベットの小文字を全部使う	string.ascii_lowercase
option: マーカーを星に変更する	marker = '*'
ヒストグラムをゴールデンロッド色として描画する	plt.hist(データ列, color='goldenrod')
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
数値を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
オブジェクトは整数クラスか調べる	isinstance(obj, int)
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
グラフの描画を見やすくする	import seaborn as sns
ふたつの集合の積集合	aSet.intersection(aSet2)
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
多次元データを多次元尺度構成法で濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
整数nがセットのどれかか調べる	n in aSet
option: シエナ色を使用する	color = 'sienna'
データ列とリストについての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
y軸の目盛を対数に変更する	plt.yscale('log')
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームのカラムがxより多くx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
データフレームを使用する	import pandas as pd
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
データ列の曜日は何日目か調べる	ds.dt.dayofweek
リストをひとつ置きに取り出す	aList[::2]
データフレームを列によってグループ分けして、それぞれのグループ毎の最大値を求める	df.groupby(column).max()
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
要素∉集合	element not in aSet
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
分類結果の分類精度を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
ゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: スラグレーに色を設定する	color = 'slategray'
数式の数値を計算する	float(e)
行列を平坦化する	aArray.flatten()
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームの列の名前を列挙する	df.columns
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
要素が集合に含まれないか調べる	element not in aSet
nから無限にカウントアップする	itertools.count(start=n)
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データフレームのn行以降を取り出す	df[n:]
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
列を等量で分割数nでビニングする	pd.qcut(ds, n)
データフレームの列をインデックスに設定する	df.set_index(column)
分子n分母mの有理数を用意する	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
やわらかい青にヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
データフレームのカラムの値が欠損値かどうか調べる	df[col].isna()
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
nからn2の値を引いてnに代入する	n -= n2
xを浮動小数点数にする	float(x)
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
濃いシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
最初の要素を両端キューから取り除く	deq.remove(element)
両端キューに要素をプッシュする	deq.append(element)
最初のコマンド引数を知る	sys.argv[1]
データ列を日付データに変換する	pd.to_datetime(ds)
散布図の菱形マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
赤いダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c='r')
カウンタをリセットする	aCounter.clear()
データフレームの重複した行だけ	df[df.duplicated(keep=False)]
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
データフレームからランダムにn行を抽出する	df.sample(n)
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列の先頭から空白を除く	s.lstrip()
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
文字列が全て数字か調べる	s.isdigit()
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
オブジェクトは文字列型か	isinstance(obj, str)
文字列は文字列より辞書順で前か調べる	s < s2
データフレームから重複した行を残さず、消す	df.drop_duplicates(keep=False)
option: グラフの色をオーキッドに設定する	color = 'orchid'
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
文字列は全て識別子名か調べる	s.isidentifier()
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ファイルを全部、読み込む	f.read()
実数の正弦の逆数	math.asin(x)
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
関数の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby(関数).describe()
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
散布図をアイボリー色を用いて描画する	plt.scatter(データ列x, データ列y, color='ivory')
行列の列ごとの最小値	np.min(aArray, axis=0)
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームの行を振り直す	df.reset_index()
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームのカラムの歪度を計算する	df[col].kurt()
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
データ列を1000の位で四捨五入する	ds.round(-3)
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
二次元リストをフラット化する	sum(aList)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
option: グレー色を使う	color = 'grey'
既存のファイルパスを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
散布図のマーカーを菱形にする	plt.scatter(データ列x, データ列y, marker='D')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
10を底とする実数の対数	math.log10(x)
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームを二つの列を用いてソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームのインデックスの名前を、nameからname2に付け直す	df.rename(index={name: name2})
データフレームのリストカラムの中に文字列と文字列がいくつ含まれるか数える	df[aList].isin([value, value2]).sum()
文字列中にひとつでも非空白が含まれるかどうか調べる	any(not c.isspace() for c in s)
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
option: 耐火レンガ色を使う	color = 'firebrick'
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: 色をスレートブルーに設定する	color = 'slateblue'
ラベンダーブラッシュ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図のポイントマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: バイナリ書き込み用に変更する	mode = 'wb'
ライトスレイグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
プロットにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
文字列中にひとつでも非小文字が含まれるか	any(not c.islower() for c in s)
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
シスル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
行列の次元数を求める	aArray.ndim
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
option: フォントの色をフォレストグリーンに設定する	color = 'forestgreen'
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
折れ線グラフを色付きの破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
sin	math.sin(x)
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
リストと配列について散布図を描画し、、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
タプルの先頭のn要素を取り除く	aTuple[n:]
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの中に文字列が含まれるかどうか調べる	df.isin([value])
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
辞書を階層化する	collections.ChainMap(aDict)
文字列から部分文字列を全て取り除く	s.replace(sub, '')
グラフの背景色を暗くする	sns.set(style='darkgrid')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
表データを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
変数を定義する	x = n
option: 配列のデータ型を指定する	dtype = np.int16
データフレームのデータ型一覧	df.dtypes
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
セットから別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
実行結果を青色にする	f'\033[34m{value}\033[0m'
option: ミディアムスレートブルーに色を設定する	color = 'mediumslateblue'
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
データフレームを形式としてJSONLファイルに保存する	df.to_excel(filename)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
二つの文字列は等しくないか調べる	s != s2
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
データフレームの行と列を入れ替える	df.T
Pandasで、データ列のUNIX時間から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームのリストカラムの未入力値を中央値に指定する	df[aList].fillna(df[aList].median())
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: トマト色を使う	color = 'tomato'
データフレームをグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ダークシアン色としてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
グリッドを実線にする	plt.grid(linestyle='solid')
MLPとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: ダークシアン色を使う	color = 'darkcyan'
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
丸マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
ファイルパスをSJISとして開く]	open(filepath, encoding='shift_jis')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
リストのn番目に文字列を差し込む	aList.insert(n, element)
浮動小数点数のハイパボリック・コサイン	math.cosh(x)
オブジェクトがタプルの要素か	element in aTuple
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
option: フォントの色をライトコーラルに設定する	color = 'lightcoral'
データ列の四分位を可視化する	plt.boxplot(データ列)
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
xを印字できる文字列にする	ascii(x)
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: インデックスを自動的な連番にする	index_col = None
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
文字列を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
配列から重複を除いた配列を作る	np.unique(aArray)
折れ線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
データフレームのデータ型の一覧	df.dtypes
グラフで使用する横軸のラベルを指定する	plt.xlabel('x軸ラベル')
横棒グラフをゲインズボロ色を使って描画する	plt.barh(データ列x, データ列y, color='gainsboro')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
グラフの色を淡くする	sns.set(pallete='muted')
データフレームの列の25パーセンタイルを求める	df[col].quantile(0.25)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
リストが空でないか調べる	len(aList) != 0
option: フォントの色を青緑に設定する	color = 'turquoise'
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
ファイルを開いて]、書き込みストリームを見る	open(filepath, mode='w')
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
リストの要素を逆順にする	aList[::-1]
データフレームの75パーセンタイル	df.quantile(0.75)
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
グラフで使用するカラーパレットを指定する	sns.set(pallete=パレット名)
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
ハローワールドをプリントする	print('Hello World')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームの指定された列をリストに変換する	df[column].values.tolist()
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
リストとリストについての散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
空白	' '
文字列内にひとつでも小文字が含まれるかどうか調べる	any(c.islower() for c in s)
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
オブジェクトのバイトサイズ	sys.getsizeof(obj)
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
配列の合計値	np.sum(aArray)
四角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
実数から実数を引く	x - y
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列は全て数値か調べる	s.isnumeric()
行列の列ごとの最大値を求める	np.max(aArray, axis=0)
option: ８ビット整数型を使う	dtype = np.int8
散布図の四角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムの色をマゼンタにする	plt.hist(データ列, color='magenta')
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
辞書のキーを列挙する	list(aDict)
ヒストグラムの色をイエローグリーンに指定する	plt.hist(データ列, color='yellowgreen')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
データ列の分散	ds.var()
データ列が何時か見る	ds.dt.hour
option: ASCII文字に限定する	flag = re.ASCII
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
キーが辞書上で未定義か調べる	key not in aDict
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
複数の列によってデータフレームをソートする	df.sort_values(by=column)
配列の要素数	aArray.size
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データ列を10の位で丸める	ds.round(-1)
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
ファイルからn文字、読み込む	f.read(n)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
日付データが日付データより後ろか調べる	aDate > aDate2
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
実数の二進対数	math.log2(x)
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
散布図のダイアモンドマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
実数の常用対数を求める	math.log10(x)
三変数の最小値	min(x, y, z)
カテゴリ別でグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
データフレームの列と列に重複があれば消す	df.drop_duplicates(subset=column)
線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
要素が集合に含まれるか調べる	element in aSet
リストの末尾のn要素を除く	aList[:-n]
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
データフレームを列名リストによってによって降順に並べる	df.sort_values(by=column, ascending=False)
二変数の最小値	min(x, y)
option: 配列のデータ型を指定する	dtype = np.uint8
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
モデルのバージョン	version = 'wcce2022-0.1'
モデルを学習する	model.fit(説明変数, 目的変数)
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
option: バリーウッド色を使う	color = 'burlywood'
データフレームを表示するとき表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
リストを配列に変換する	np.array(aList)
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
イテラブルの全順列	itertools.permutations(iterable)
nがn2の倍数か調べる	n % n2 == 0
書式を辞書でフォーマットする	formatText.format_map(aDict)
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
日付データが日付データより早いか	aDate < aDate2
データフレームのリスト列の欠損値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームからn行サンプリングする	df.sample(n)
リストから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
シーケンスを文字列に変換して、空白を用いて連結する	' '.join(map(str, iterable))
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
Pandasで、書式でデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format='%Y-%m-%d')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
ヒストグラムをミディアムシアグリーン色を用いて描画する	plt.hist(データ列, color='mediumseagreen')
実数を実数で割って、切り捨てる	x // y
データフレームのリストカラムの未入力値をxに設定する	df[aList].fillna(x)
リストを等しい量になるようにn個に分割する	pd.qcut(aList, n)
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
option: ダークオーキッド色を使う	color = 'darkorchid'
データフレームの中央値を算出する	df.median()
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
カラムの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
xが真か調べる	bool(x)
値∈集合	element in aSet
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: フォントの色をダークスレートブルーに設定する	color = 'darkslateblue'
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
リストのn番目からn2番目を取り出す	aList[n:n2]
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
nとn2の商	n / n2
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
列'A'と列'B'をキーにして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
色付きの一点鎖線を用いてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: コーンフラワーブルーを用いる	color = 'cornflowerblue'
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
行列の行ごとの分散	np.var(aArray, axis=1)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
整数nを十六進表現に変換する	hex(n)
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
option: 丸マーカーを使う	marker = 'o'
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
option: ドジャーブルー色を使う	color = 'dodgerblue'
配列の内積	np.dot(aArray, aArray2)
リストと数列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
option: インディゴ色を使う	color = 'indigo'
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
space	' '
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
エラーなくリストの文字列の位置を見る	aList.index(element) if element in aList else -1
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
リストの末尾	aList[-1]
オブジェクトは辞書	isinstance(obj, dict)
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
データフレームから列を２つ選択する	df[[column, column2]]
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
数値を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
カウンタの項目数	len(aCounter)
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
タプルの項目名を列挙する	list(aDict)
TSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
整数nが組の一つかどうか調べる	n in aTuple
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
データフレームの列の一覧	df.info()
オブジェクトは集合か調べる	isinstance(obj, set)
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
双方向キュー中の値の数をカウントする	deq.count(element)
グラフからグリッド線を消す	plt.grid(False)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
ユニークな値を要素とする行列	np.unique(aArray)
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
暗い赤色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
逆双曲線正弦を求める	math.asinh(x)
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
横軸の目盛を非表示にする	plt.xticks([])
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの下三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
KNNで回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
白いヒストグラムを描画する	plt.hist(データ列, color='w')
枠なしの凡例を入れる	plt.legend(frameon=False)
縦軸の目盛を対数に変更する	plt.yscale('log')
option: 値を置き換える	inplace = True
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
有理数の分子	q.numerator
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
第二コマンド引数	sys.argv[1]
データフレームを列でによって降順に並べ直す	df.sort_values(by=column, ascending=False)
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
主成分分析として濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームを複数の列で整列して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データ列の第三四分位数	ds.quantile(0.75)
サイコロ	random.randint(1, 6)
option: グラフの色をリネンに設定する	color = 'linen'
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
nが一桁の数かどうか確認する	-9 <= n <= 9
option: フォントの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
文字列を二分割する	s.partition(sep)
option: マーカーを丸に変更する	marker = 'o'
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
組の中の最大値を算出する	max(aTuple)
現在の時間	datetime.date.today().hour
二つの文字列を順にプリントする	print(value, value2)
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データ列を等量で分割数nでビン分割する	pd.qcut(ds, n)
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
n個にデータ列をビン分割する	pd.cut(ds, n)
現在が木曜日	datetime.datetime.today().weekday() == 3
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
nまでの偶整数リスト	list(range(2, n, 2))
option: 配列のデータ型を指定する	dtype = bool
マップをコピーする	aDict.copy()
配列をビニングする	pd.cut(aArray, aList)
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
実数の余弦	math.cos(x)
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
二進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
白いグリッド線を引く	plt.grid(color='w')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
オブジェクトをユーザ向けの文字列に変換する	str(obj)
ミントクリーム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
現在が何秒か知る	datetime.date.today().second
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
option: ダークオレンジ色を用いる	color = 'darkorange'
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
文字列がタプルに含まれるか調べる	element in aTuple
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
データフレームのリストカラムのpercent分位数を求める	df[aList].quantile(percent/100)
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
Pandasで、フォーマットでデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームを列によってグループ化して、グループの合計を算出する	df.groupby(column).sum()
データ列を丸める	ds.round()
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
option: 菱形マーカーを加える	marker = 'D'
option: オーキッド色を使う	color = 'orchid'
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
下線付きで数値をプリントする	print(f'\033[4m{value}\033[0m')
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
option: ヘッダをnamesに設定する	header = names
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
イテラブルから多重集合を生成する	collections.Counter(iterable)
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
折れ線グラフの印を三角印にする	plt.plot(データ列x, データ列y, marker='^')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
データフレームのカラムを100の位で四捨五入して整数型にする	df[col].round(-2).astype(int)
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
二つの文字列は等しいか調べる	s == s2
組の最後のn要素を取り除く	aTuple[:-n]
複数の列の値によってデータフレームをグループ分けする	df.groupby(columns)
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
既存のベクトルをベースに全要素が1の行列を作る	np.ones_like(aArray)
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
nが1、もしくは2	n == 1 or n == 2
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
数値を黄色で表示する	print(f'\033[33m{value}\033[0m')
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
散布図の▼印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
rgbの丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
タイムスタンプデータを浮動小数点数に変換する	aDatetime.timestamp()
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
option: 読み込まないフッタをnに設定する	skipfooter = n
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
rgbのダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
タプルの末尾を除く	aTuple[:-1]
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
インプレイスでデータフレームのn行目をドロップする	df.drop(n, axis=0, inplace=True)
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
縦棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
option: 改行コードをWindowsに設定する	newline = '\r\n'
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
リストの推移を点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
オブジェクトは浮動小数点数クラス	isinstance(obj, float)
実数が負の数か調べる	x < 0
ファイルパスを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データフレームの指定された列を抽出する	df[column]
ファイルをデータフレームとして読み込む	pd.read_excel(filename)
グラフを使う準備をする	import matplotlib.pyplot as plt
バイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
データフレームは正規分布からどの程度、歪んでいるか調べる	df.kurt()
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
グラフを論文用に設定する	sns.set(context='paper')
実数のハイパボリック・コサインの逆数	math.acosh(x)
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
実行結果を下線付き化する	f'\033[4m{value}\033[0m'
ベージュにヒストグラムの色を変更する	plt.hist(データ列, color='beige')
option: ブラック色を使う	color = 'black'
データフレームの尖度	df.skew()
データフレームを'A'列を用いて小さい順にソートする	df.sort_values(by='A', ascending=True)
配列を元に全要素が初期値の行列を作成する	np.full_like(aArray, 初期値)
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
配列をビン数nでビン分割する	pd.cut(aArray, n)
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
リストと配列についての散布図に赤い▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームに重複があるか見る	df.duplicated()
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
自然数の並べ方の総数	math.perm(n)
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
Pandasでフォーマットとして文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームのリストカラムの尖度	df[aList].skew()
半透明の実線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
部分文字列が文字列中に含まれない	sub not in s
散布図にrgbの△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: マーカーをダイアモンドに変更する	marker = 'D'
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
カテゴリ列で色分けして、データフレームをにバイオリン図でプロットする	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
日付データが月曜日か確認する	aDate.weekday() == 0
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: ライム色を使う	color = 'lime'
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
データフレームのカラムのどの値が頻出か見る	df[col].mode()
リストの先頭	aList[0]
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
option: ゲインズボロ色を使う	color = 'gainsboro'
nまでの奇整数列	list(range(1, n, 2))
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
データ列の要約統計量	ds.describe()
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームを各列と列の組み合わせ毎にグループ分けして、最大値を計算する	df.groupby([column, column2], as_index=False).max()
option: 色をミディアムブルーに設定する	color = 'mediumblue'
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
ヒストグラムを上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
nの無限数列	itertools.repeat(n)
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
折れ線グラフの色をダークスラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategray')
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
黒い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
第二引数で指定されたファイルの名前	sys.argv[1]
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームを複数の列ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
option: グラフの色をパープルに設定する	color = 'purple'
リストを複製する	aList.copy()
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
変数が0に近づくとき数式の極限値を求める	sympy.limit(e, z, 0)
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
タプルをnからナンバリングする	enumerate(aTuple, start=n)
列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのヒストグラムを横に並べてプロット化する	sns.displot(df, x='列名', col='カテゴリ名')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
新しい勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
マッピング上で項目名が定義済み	key in aDict
日付データが日曜日か	aDate.weekday() == 6
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
黄色いグリッド線を引く	plt.grid(color='y')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
nとkの組合せを求める	math.comb(n, k)
無限大	math.inf
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフの色をダークシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
option: マーカーをポイントに変更する	marker = '.'
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
ファイルをクローズする	f.close()
nがn2よりも大きいか	n > n2
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: グラフの色をデピンクに変更する	color = 'deeppink'
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
データフレームを使う	import pandas as pd
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
集合の全ての要素が別の集合に含まれる	aSet.issubset(aSet2)
ユーザが整数を入力する	int(input())
データフレームのリストカラムの中にある文字列の数をカウントする	df[aList].isin([value]).sum()
縦棒グラフをダークスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
日付時刻データが水曜日かテストする	aDatetime.weekday() == 2
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームを二つの列によって大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
option: 箱ひげ図に平均を加える	showmeans = False
option: BOM付きを使う	encoding = 'utf_8_sig'
リストと配列の散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
カテゴリで色分けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
行列が何のデータ型か調べる	aArray.dtype()
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
nにn2を加える	n + n2
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
配列の行ごとの平均値	np.mean(aArray, axis=1)
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
オプションで、標準出力を使う	file = sys.stdout
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
データフレームをグループ化し、それぞれの列に対し合計を計算する	df.groupby(column)[column2].sum()
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
辞書のキーとそのエントリを列挙する	aDict.items()
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
辞書をカウンタにする	collections.Counter(aDict)
カラムの中に文字列と文字列があるかどうか調べる	ds.isin([value, value2])
パウダーブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
本日が水曜日か	datetime.datetime.today().weekday() == 2
等差数列から乱数を生成する	random.randrange(start, end, step)
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
実数のn乗	x ** n
ファイル名がCSVファイル	filename.endswith('.csv')
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
日付データをタプルに変換する	aDate.timetuple()
変数を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームから最後の列を除く	df[df.columns[:-1]]
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
セパレータで文字列を分割して、文字列リストにする	s.split(sep)
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
データフレームの分散	df.var()
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
n割るn2を切り上げる	(n + n2 - 1) // n2
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
辞書をソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
文字列を最初の部分文字列で二つに分ける	s.partition(sub)
行列の標準偏差	np.std(aArray)
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
option: ダイアモンドマーカーを描画する	marker = 'D'
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ダイアモンド印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
日付データが日曜日か調べる	aDate.weekday() == 6
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
実数の整数部	math.modf(x)[1]
ホットピンク色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
標準出力をフラッシュする	sys.stdout.flush()
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
option: マゼンタ色を使う	color = 'magenta'
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
option: ライムグリーン色を使う	color = 'limegreen'
イテラブルから一つランダムに選ぶ	random.choice(iterable)
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
行列の列ごとの最大値	np.max(aArray, axis=0)
連立方程式を解く	sympy.solve([e, e2])
データフレームから最初の列を消す	df[df.columns[1:]]
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
JSONファイルファイル名が	filename.endswith('.json')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
散布図に黒い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
大文字・小文字を無視して文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
文字列が全て小文字か調べる	s.islower()
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
文字列が全て大文字か調べる	s.isupper()
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: バッファリングのサイズを変更する	buffering = 4096
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
列名リストによって小さい順にデータフレームを破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
Pandasで、フォーマットfmtを使って文字列を日付データにする	pd.to_datetime(s, format=fmt)
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
配列にはいくつ要素があるか調べる	aArray.size
天井を計算する	math.ceil(x)
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
タブを見る	'\t'
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
option: ライトゴールドロディイエローにグラフの色をセットする	color = 'lightgoldenrodyellow'
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
集合の補集合	aSet.difference(aSet2)
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
ファイルをBOM付きを用いてオープンする]	open(filepath, encoding='utf_8_sig')
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
リストとイテラブルについて散布図を描画して、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
実数とyの斜辺	math.hypot(x, y)
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
bとn2から成るペア	(n, n2)
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データ列を箱髭図にする	plt.boxplot(データ列)
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
option: ダークグレー色を使う	color = 'darkgrey'
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
円プロットをきれいな円にする	plt.axis('equals')
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
nをn2で割る	n / n2
データフレームのリストカラムの中にいくつ日付データがあるかカウントする	df[aList].isin([value]).sum()
プログラムの実行を異常終了する	sys.exit(1)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
イテラブルの推移を赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
y軸だけグリッド線	plt.grid(axis='y')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
各列毎にデータフレームを集約して列の平均値を求める	df.groupby(column)[column2].mean()
散布図をオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orchid')
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
入力ストリームから1文字、読む	f.read(1)
乱数で要素を埋めた配列	np.random.random(N)
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
真紅にヒストグラムの色を変更する	plt.hist(データ列, color='crimson')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
最大値でデータフレームのリスト列の欠損値を置換する	df[aList].fillna(df[aList].max())
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
代数計算を用いる	import sympy
文字列のn番目	s[n]
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
データフレームの中の欠損値の合計を数える	df.isna().sum()
データ列の未入力値を直後の値に設定する	ds.fillna(method='bfill')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
変数が無限大に近づく際の数値の極限値を求める	sympy.limit(e, z, oo)
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
空のリスト	[]
現在が何年か知る	datetime.datetime.today().year
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームから列を一つのみ選択する	df[[column]]
実線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
標準エラーを得る	sys.stderr
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
集合から任意の要素を取り出す	aSet.pop()
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームのn番目の行を選択する	df.loc[n]
リストのn番目の要素を削除する	del aList[n]
縦棒グラフをスノー色を用いて描画する	plt.bar(データ列x, データ列y, color='snow')
▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
双方向キューが空か調べる	len(deq) == 0
データフレームのn行より前を抽出する	df[:n]
option: ベクトルのデータ型を指定する	dtype = bool
option: 箱ひげ図を水平方向にする	vert = False
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
文字列がキーワード	keyword.iskeyword(s)
option: グラフの色をトマトに設定する	color = 'tomato'
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
数値を緑色にする	f'\033[32m{value}\033[0m'
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
二次元タプルをflattenする	sum(aTuple)
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: 文字列をセパレータで使う	sep = s
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
文字列リストを連結する	''.join(aStringList)
折れ線グラフの上三角印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
プロットを論文に設定する	sns.set(context='paper')
集合から全ての要素を除く	aSet.clear()
option: ブルーバイオレット色を使う	color = 'blueviolet'
折れ線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
リストと数列についての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
全ての８進数字	string.octdigits
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
集合が空でないか調べる	len(aSet) != 0
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
プロットを描く準備をする	import matplotlib.pyplot as plt
集合をリストに変換する	list(aSet)
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
赤いダイアモンドマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
リストの長さだけ繰り返す	range(len(aList))
option: マーカーの線幅を変更する	markeredgewidth = 2.5
疑似乱数を生成する	random.random()
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
データフレームのリストカラムの歪度	df[aList].kurt()
データ列を1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
option: データ型として複素数型を使う	dtype = bool
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
文字列をバイト列に変換する	bytes(s)
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
変数をシアンにする	f'\033[36m{value}\033[0m'
リストとリストの散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを降順に破壊的に二つの列で整列する	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データ列とイテラブルについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ラインを実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
option: フォントの色をオレンジに変更する	color = 'orange'
折れ線グラフの星マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
整数nの8進リテラル	oct(n)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
折れ線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
ミディアムアクアマリン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
辞書からキーの値	aDict.get(key)
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
棒グラフをアンティークホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフの色をサーモンにする	plt.plot(データ列x, データ列y, color='salmon')
リストの最後からn番目以前の要素を取り出す	aList[:-n]
▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
実数が負か調べる	x < 0
現在の再帰の最大回数	sys.getrecursionlimit()
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
文字列の末尾から部分文字列を探す	s.rfind(sub)
文字列の中の複数行対応として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
option: パウダーブルーにフォントの色を指定する	color = 'powderblue'
全要素を０で初期化した複素数型の行列を作成する	np.zeros(行数, 列数, dtype=bool)
データフレームの列の各データ値の出現数を求める	df[col].value_counts()
配列の推移を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
二進文字列を整数に変換する	int(s, 2)
データフレームのpercent分位数	df.quantile(percent/100)
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図をrgbのダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: グラフの色をミディアムスレートブルーに指定する	color = 'mediumslateblue'
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
日付時刻データが月曜日か	aDatetime.weekday() == 0
option: グラフの色をラベンダーに設定する	color = 'lavender'
ひとつでも非アスキー文字が文字列中にあるか調べる	any(not c.isascii() for c in s)
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
データフレームのカラムの正規分布に対する左右対称性	df[col].kurt()
データ列の中央値	ds.median()
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
二つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
ファイルを絶対パスに変換する	os.path.abspath(filepath)
シーケンスとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
オプションで、標準出力に出力する	file = sys.stdout
標準入力から1行だけ読む	sys.stdin.readline()
xが一桁の数か調べる	-9 <= x <= 9
数式の平方根を算出する	sympy.sqrt(e)
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームのカラムを散布図で可視化し、、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
文字列が全て小文字かテストする	s.islower()
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
リストとリストについて散布図を描画し、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
文字列の左端からタブを除去する	s.lstrip('\t')
option: グラフの色をアクアに設定する	color = 'aqua'
データフレームの指定されたカラムを配列として選択する	df[column].values
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: 改行の代わりに文字列を用いる	end = s
文字列の先頭	s[0]
文字列の先頭でパターンにマッチするか確認する	re.match(pattern, s)
横棒グラフの縦幅をセットする	plt.barh(ラベル列, データ列, width=0.5)
データフレームのカラムが何日か調べる	df[col].dt.day
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
Pandasで書式で文字列を日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
データフレームを'A'列と'B'列の値によってグループ化する	df.groupby(['A', 'B'])
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
option: マーカーを三角に設定する	marker = '^'
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
option: ゴールドを使う	color = 'gold'
横棒グラフをモカシン色を用いて描画する	plt.barh(データ列x, データ列y, color='moccasin')
実数が正の数	x > 0
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
option: 色をラベンダーに設定する	color = 'lavender'
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
文字列を最後の部分文字列で分割した場合の後半の文字列	s.rpartition(sub)[-1]
ヒストグラムをチョコレート色を用いて描画する	plt.hist(データ列, color='chocolate')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
折れ線グラフで数列の推移を可視化する	plt.plot(range(len(データ列)), データ列)
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
散布図の上三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
option: ポイントマーカーを使う	marker = '.'
赤い丸マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
配列とデータ列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
ダークオレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
数のn乗の実数剰余	pow(x, n, y)
文字列がリストに含まれるかどうか	element in aList
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
左にn個分デックの要素を輪番で回す	deq.rotate(-n)
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
実数の双曲線正接の逆数	math.atanh(x)
カウンタからゼロ出現回数を取り除く	+aCounter
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
nの十六進表記を使う	hex(n)
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
ファイルを追加できるように開く]	open(filepath, mode='a')
option: 読み込みモードを使う	mode = 'r'
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
option: 色をインディアンレッドに設定する	color = 'indianred'
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
三変数の最大値	max(x, y, z)
変数が0に近づく際の数値の極限値を求める	sympy.limit(e, z, 0)
配列の行ごとの最小値	np.min(aArray, axis=1)
option: ミディアムターコイズを使う	color = 'mediumturquoise'
option: レモンシフォンにグラフの色を設定する	color = 'lemonchiffon'
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
データフレームをインデックスで並べる	df.sort_index()
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
データフレームの欠損値を平均値にセットする	df.fillna(df.mean())
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
整数nのバイト長	(n.bit_length() + 7) // 8
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
nがn2以下または、n3以上かどうか確認する	n <= n2 or n >= n3
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
セットの補集合	aSet.difference(aSet2)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
データフレームのリストで指定されたカラムの相関行列	df[aList].corr()
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
データフレームのカラムを10の位で丸める	df[col].round(-1)
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
Pandasで、データフレームのカラムをdatetime64型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームの値をreplに正規表現でまとめて置き換える	df.replace(pattern, repl, regex=True)
既存のファイルを追加できるようにUTF8を用いてオープンする]	open(filepath, mode='a', encoding='utf-8')
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
nのn2乗	n ** n2
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
文字列をセパレータで区切って、列挙する	s.split(sub)
イテラブルのイミュータブルなセット	frozenset(iterable)
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
option: 色をフォレストグリーンに変更する	color = 'forestgreen'
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
実数がNaNか	math.isnan(x)
棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
option: スチールブルー色を使用する	color = 'steelblue'
実数を切り下げて整数に変換する	math.floor(x)
日付データが何日か知る	aDate.day
文字列をカンマで区切って、列挙する	s.split(',')
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
要素がセットに含まれない	element not in aSet
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
後の行の値でデータ列の欠損値を埋める	ds.fillna(method='bfill')
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
イテラブルを文字列に変換して、'改行で結合する	'\n'.join(map(str, iterable))
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: バツマーカーを用いる	marker = 'x'
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
データ列の曜日数	ds.dt.dayofweek
option: 大バツ印を使う	marker = 'X'
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
数式を変数について微分する	sympy.diff(e, z)
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
整数nのビット長	n.bit_length()
散布図に黒い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
配列の最大値	np.max(aArray)
数値を紫色で表示する	print(f'\033[35m{value}\033[0m')
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
データフレームのカラムを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
option: 下三角マーカーを用いる	marker = 'v'
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図の丸マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
n2分のn	n / n2
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
10を底とする対数を計算する	math.log10(x)
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
nマイナスn2	n - n2
部分文字列で文字列を分けたときの前半の文字列を取り出す	s.partition(sub)[0]
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
option: グラフの色をスラグレーに指定する	color = 'slategray'
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
データフレームとしてエクセルファイルファイルを読み込む	pd.read_excel(filename)
タプルのの一覧	aDict.values()
サブ型か確認する	issubclass(サブクラス, クラス)
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
ダークグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
全ての数字	string.digits
option: 追加用にセットする	mode = 'a'
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
xが1、もしくは2か調べる	x == 1 or x == 2
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
文字列を積極的に小文字に変換する	s.casefold()
データフレームを列でグループ化し、、列の要約統計量を求める	df.groupby(column).describe()[column2]
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
一点鎖線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列が文字列より辞書順で前か調べる	s < s2
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
option: ミッドナイトブルー色を使用する	color = 'midnightblue'
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
キューは空でないか調べる	len(deq) != 0
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
辞書のキーの値を得る	aDict[key]
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
散布図でデータフレームを可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
0からnまでのスライス	slice(n)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
縦棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
横棒グラフをスノー色として描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
option: 真紅色を使う	color = 'crimson'
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
暗い赤にヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
range関数の無限バージョン	itertools.count(start=n, step=step)
文字列をシンボルに変換する	sympy.Symbol(s)
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
データ列を100の位で丸める	ds.round(-2)
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
配列の各要素の積	np.multiply(aArray, aArray2)
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
モジュールを検索するパス	sys.path
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
綺麗なグラフを使う準備をする	import seaborn as sns
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
ミディアムパープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
option: フォントの色をグレーに設定する	color = 'grey'
option: UTF8を使う	encoding = 'utf-8'
nがn2以上か調べる	n >= n2
グラフの背景色を暗くする	sns.set(style='darkgrid')
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームのカラムのタイムゾーンを東京に設定する	df[col].tz_convert('Asia/Tokyo')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: ミディアムパープルを使う	color = 'mediumpurple'
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームからカテゴリデータのカラム名の一覧を求める	df.select_dtypes('object').columns
黒い星マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
L2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
'A'列でデータフレームをソートする	df.sort_values(by='A')
読み込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='r')
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
データフレームの先頭のカラム以外を説明変数にする	説明変数 = df[df.columns[1:]]
クラス分類の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームの平均値	df.mean()
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを表示するとき、最大列数を変更する	pd.set_option('display.max_columns', n)
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: ラインスタイルを一点鎖線に設定する	linestyle = 'dashbot'
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
部分文字列で文字列が終わる	s.endswith(sub)
option: インディアンレッド色を使う	color = 'indianred'
辞書をクリアする	aDict.clear()
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
二つのデータフレームを結合する	pd.merge(df, df2)
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
option: フォントの色をグリーンイエローに変更する	color = 'greenyellow'
データ列の欠損値をxで埋める	ds.fillna(x)
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
カンマで区切って2つの文字列を表示する	print(value, value2, sep=',')
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ロバストな線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
正規分布で疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
タプルからカウンタを作る	collections.Counter(aDict)
実数がNaNか調べる	math.isnan(x)
クラス分類をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
option: バイナリ書き込みモードを使う	mode = 'wb'
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
グリッド線	plt.grid(alpha=0.5)
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
既存のファイルを文字列の示すエンコーディングを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ファイルのディレクトリ名	os.path.dirname(filepath)
集合を空にする	aSet.clear()
乱数で要素を埋めた行列	np.random.random(N)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
8進文字列を整数に変換する	int(s, 8)
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
最頻値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].mode().iloc[0])
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
整数乱数のベクトルを作る	np.random.randint(開始値, 終了値, N)
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
要素が集合のメンバーか調べる	element in aSet
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
数式の微分を求める	sympy.diff(e)
カンマを用いて文字列を分割して、列挙する	s.split(',')
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
スクリプトの名前	sys.argv[0]
kを底とする実数の対数	math.log(x, k)
n個の要素があるリスト	[element] * n
データ列を正規表現で一度にreplに置き換える	ds.replace(pattern, repl, regex=True)
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
小数点数が無限大か調べる	math.isinf(x)
option: グラフの色をシアンに設定する	color = 'cyan'
Pythonパスの一覧	sys.path
JSON文字列を読み込む	json.loads(jsonString)
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: フォントの色を濃いシアンに設定する	color = 'darkcyan'
データフレームのカラムが正規分布からどの程度、歪んでいるか調べる	df[col].kurt()
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
カラムの欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
nをn2で整数除算する	n // n2
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
実数の常用対数	math.log10(x)
モードでカラムの欠損値を埋める	ds.fillna(ds.mode().iloc[0])
値をシアンでプリントする	print(f'\033[36m{value}\033[0m')
文字列の開始位置からと終了位置の間に部分文字列が存在するか調べる	s.find(sub, start, end) != -1
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
横軸だけグリッド線	plt.grid(axis='x')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
タプルを引数として展開して表示する	print(*aTuple, sep=',')
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: ドジャーブルー色を用いる	color = 'dodgerblue'
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
縦棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
nにn2をかけた値をnとする	n *= n2
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームをインデックスによって降順で並べる	df.sort_index(ascending=False)
ロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
rgbのダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
色付きの破線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
有理数を使う	import fractions
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
データフレームの中に文字列と文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
0からnまでの整数列を得る	list(range(n+1))
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
コマンドの第二引数を知る	sys.argv[1]
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの列のユニークな要素数を見る	df[col].nunique()
option: スラグレー色を使う	color = 'slategrey'
option: グラフの色を青緑に設定する	color = 'teal'
作画の背景色を暗くする	sns.set(style='darkgrid')
データフレームの指定されたカラムをリストとして抽出する	df[column].values.tolist()
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
option: フォントの色をホワイトスモークに設定する	color = 'whitesmoke'
データフレームから指定された二つの列を取り出す	df[[column, column2]]
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
黒い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ファイルをUTF8を使って書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
日付データが何年か知る	aDate.year
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームの列がどの程度、分散しているか確認する	df[col].var()
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ライトグリーン色を使う	color = 'lightgreen'
表データの中で、列に重複があるか確認する	df.duplicated(subset=column)
２つのデータフレームを横方向にマージする	pd.merge(df, df2)
K最近傍法として回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
マッピングを複製する	aDict.copy()
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
option: ライトシアン色を使う	color = 'lightcyan'
モデルを当てはめる	model.fit(説明変数, 目的変数)
データフレームを各列と列の組み合わせ毎に分類して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
スクリプトファイルと同じディレクトリのファイルのパスを求める	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
option: バツマーカーを使う	marker = 'x'
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ケンドール相関係数を用いてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
option: アクアを使用する	color = 'aqua'
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
ミントクリーム色としてヒストグラムを描画する	plt.hist(データ列, color='mintcream')
ValueMapで列をまとめて変更する	ds.replace(ValueMap)
日付データの月数	aDate.month
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
空行をプリントする	print()
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
データフレームの列がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: ライトスレイグレー色を用いる	color = 'lightslategray'
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームを複数の列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
配列の和	aArray + aArray2
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ミディアムスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumslateblue')
データフレームの各次元の大きさを見る	df.shape
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
option: 色を半透明にする	alpha = 0.5
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
xが-9以上9以下か調べる	-9 <= x <= 9
値を両端キューの先頭に付け加える	deq.appendleft(element)
option: 色をマゼンタに設定する	color = 'magenta'
折れ線グラフの右三角印の色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
右にn個分双方向キューの要素をローテンションする	deq.rotate(n)
データから名前付きタプルをインスタンス化する	C._make(パラメータ)
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ホワイトスモーク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
データフレームを二つの列を用いて並べ直して、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
数列とリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
カテゴリで色分けしてデータフレームをに箱ひげ図を用いて描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
データフレームを列でグループ化し、基本統計量を求める	df.groupby(column).describe()
ルートのチェーンマップ	collections.ChainMap()
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
辞書にキーワード引数として更新する	aDict.update(**kwargs)
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
option: アンティークホワイト色を使う	color = 'antiquewhite'
データフレームを昇順に'A'列によってソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
三つの変数を順にプリントする	print(value, value2, value3)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
数式を簡略にする	sympy.sympify(e)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
文字列をプリントする	print(value)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
nとn2の論理積	n & n2
既存のファイルをEUCを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データフレームをグループ化しそれぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
日付データが土曜日か調べる	aDate.weekday() == 5
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
キューに値をエンキューする	deq.appendleft(element)
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ファイルからの入力ストリームを使う	open(filepath)
option: 色を茶色に指定する	color = 'brown'
折れ線グラフの星印の大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
option: 読み込まないフッタをnにする	skipfooter = n
データフレームをJSONLファイルに保存する	df.to_csv(filename)
散布図を黒い星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c='k')
option: アクアマリン色を使う	color = 'aquamarine'
文字列を改行を用いて区切る	s.splitlines()
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
配列とリストについて散布図を描画し、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
整数個からk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
データフレームを複数の列によって小さい順に並べ直す	df.sort_values(by=column, ascending=True)
両端キューの最大長	deq.maxlen
データ列の推移を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: オーキッドを使う	color = 'orchid'
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
既存のファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
配列を2次元1行に変形する	aArray.reshape(1, -1)
データフレームを散布図で可視化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列の大文字と小文字を交換する	s.swapcase()
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
リストとイテラブルについてリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
option: オールドレース色を使う	color = 'oldlace'
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
英文字から1文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
正規表現を使う	import re
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
カウンタの最頻出な項目	aCounter.most_common()[0]
文字列をコロンで分割して列挙する	s.split(':')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
散布図を黄色色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellow')
カラムの中に含まれる日付データの合計を数える	ds.isin([value]).sum()
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
データフレームのカラムの中に文字列とがある	df[col].isin([value, value2])
辞書をコピーする	aDict.copy()
処理中の例外を情報を知る	sys.exc_info()
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
リストとリストについて散布図をプロットして、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
π	math.pi
option: エクセルファイルのシート名をnamesに設定する	sheet_name = names
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
書式を引数としてargsをフォーマットする	formatText.format(*args)
イテラブルから配列を作る	np.array(iterable)
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
数式を展開する	sympy.expand(e)
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
文字列の変数名を数式に変換する	sympy.Symbol(s)
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
グラフの用途を画面に設定する	sns.set(context='notebook')
nにn2をかける	n * n2
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
半透明の一点鎖線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
データラベルを表示する	plt.legend()
実行環境はウィンドウズか調べる	sys.platform.startswith('win32')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
option: どのカラムもインデックスに設定しない	index_col = None
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
本日の日付時刻	datetime.datetime.today()
棒グラフをコーンズシルク色を使って描画する	plt.bar(データ列x, データ列y, color='cornsilk')
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
xの絶対値	abs(x)
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
データフレームの列のNaNを直前の値で置換する	df[col].fillna(method='ffill')
グラフを表示する	plt.show()
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
カラムをキーとして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
データ列が正規分布からどれだけ、歪んでいるか見る	ds.kurt()
カウンタを辞書に変換する	dict(aCounter)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
ふたつの関係が真部分集合かどうか調べる	aSet < aSet2
カウンタを集合に変換する	set(aCounter)
リストをn回、連結する	aList * n
異なる列をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
散布図の四角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
線形モデルの切片	model.intercept_
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームを'A'列によってまとめたグループ	df.groupby('A')
線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
整数nの十六進文字列	hex(n)[2:]
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
option: 貝殻色を使う	color = 'seashell'
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
実数のn乗の実数剰余	pow(x, n, y)
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
リストの要素を昇順にソートする	sorted(aList, reverse=False)
プラットフォームの符号付き整数の最大値	sys.maxsize
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
配列をn個に等間隔でビン分割する	pd.cut(aArray, n)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
現在の時間を使う	datetime.date.today().hour
数式の展開を行う	sympy.expand(e)
グラフの色をパステル調にする	sns.set(pallete='pastel')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
nとn2の値を足してnに代入する	n += n2
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
文字列の右側から改行を除く	s.rstrip()
カウンタ間でユニオン	aCounter | aCounter2
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
option: グラフの色をチョコレートに設定する	color = 'chocolate'
option: 紺碧色を使う	color = 'azure'
ランダムにn行をデータフレームから抽出する	df.sample(n)
n番目のシートをエクセルファイルファイルの読む	pd.read_excel(filename, sheet_name=n)
配列とリストについての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: ダークバイオレット色を用いる	color = 'darkviolet'
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
2を底とする実数の対数を求める	math.log2(x)
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームの列のユニークな値	df[col].unique()
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
折れ線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
集合が空でないか	len(aSet) != 0
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データフレームを'A'列によってソートしてNaNを先頭にする	df.sort_values(by='A', na_position='first')
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
箱ひげ図を2つ並べて描画する	plt.boxplot([データ列, データ列])
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
リストにリストを加える	aList.extend(aList2)
二つの文字列が同じ	s == s2
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
option: オレンジレッド色を使う	color = 'orangered'
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
option: ライトグレー色を使う	color = 'lightgrey'
データフレームのカラムの中にある文字列との合計を数える	df[col].isin([value, value2]).sum()
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
文字列リストに列を変換して、タブでつなげる	'\t'.join(map(str, iterable))
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
ビスク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ファイルの絶対パス	os.path.abspath(filepath)
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
JSON形式の文字列をデータに変換する	json.loads(jsonString)
棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームのカラムが何分か見る	df[col].dt.minute
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
option: サンディーブラウンを使う	color = 'sandybrown'
折れ線グラフをライトグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lightgreen')
スピアマン相関係数としてデータフレームの相関行列	df.corr(method='spearman')
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
列によってデータフレームをグループ化する	df.groupby(column)
option: 下三角マーカーを描画する	marker = 'v'
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: グラフの色をパールゴールデンロッドにする	color = 'palegoldenrod'
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
option: 白にグラフの色を変更する	color = 'white'
標準入力から1行分読み込んで改行を取り除く	sys.stdin.readline().rstrip()
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
標準入力から1行だけ改行なしで読み込む	sys.stdin.readline().rstrip()
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
nをn2で割った余りをnに代入する	n %= n2
実数を小数点以下第一位で丸める	round(x, 1)
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
折れ線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームの中にいくつ文字列が存在するか求める	df.isin([value]).sum()
日付時刻データの年数	aDatetime.year
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
リストの末尾を除く	aList[:-1]
文字列の先頭でパターンにマッチするか調べる	re.match(pattern, s)
数列をヒストグラムにする	plt.hist(データ列)
日付時刻データが日曜日か	aDatetime.weekday() == 6
データフレームの列を削除する	df.drop(column, axis=1)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
floatの最大値を求める	sys.float_info.max
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
文字列の先頭でケースを無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
日付データからn分減らす	aDate - datetime.timedelta(minutes=n)
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
データ列が何年か見る	ds.dt.year
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
日付データをISO形式の文字列に変換する	aDate.isoformat()
回数を制限して新しい文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub, n)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
EUCとしてファイルをオープンする]	open(filepath, encoding='euc_jp')
両端キューをポップする	deq.pop()
option: ホワイトスモーク色を使う	color = 'whitesmoke'
折れ線グラフをオレンジレッド色を使って描画する	plt.plot(データ列x, データ列y, color='orangered')
タプルの末尾からn番目以前の要素を得る	aTuple[:-n]
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
Pandasのバージョンを見る	print(pd.__version__)
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの中で何行、重複するか見る	df.duplicated().sum()
option: 回帰木の深さを制限する	maxdepth = n
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
nとn2の差	n - n2
xが一桁の正の数か調べる	0 <= x <= 9
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
文字列を最後の部分文字列で二つに区切って、後半の文字列を使う	s.rpartition(sub)[-1]
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
option: フォントの色をコーンズシルクに変更する	color = 'cornsilk'
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
xの印字可能な文字列	ascii(x)
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
リストを引数として展開して表示する	print(*aList, sep=',')
リストから文字列と等しい最初の要素を除く	aList.remove(element)
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図のバツマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
行列の転置行列	aArray.T
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
上位集合	aSet.issuperset(aSet2)
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
カラムのNaNを平均値に設定する	ds.fillna(ds.mean())
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=column)
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
タプルのn番目以降の部分を取り出す	aTuple[n:]
本日の日付時刻	datetime.datetime.now()
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
二つのリストを文字列で区切ってプリントする	print(value, value2, sep=s)
option: サンディーブラウン色を使う	color = 'sandybrown'
黒い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
option: ホワイト色を使う	color = 'white'
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
リストとリストの散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームから重複した行を破壊的に削除する	df.drop_duplicates(inplace=True)
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ValueMapでデータフレームの列の値を置き換える	df[col].replace(ValueMap)
値は集合に含まれるか調べる	element in aSet
異なる列をキーにして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
縦棒グラフを描画し、、棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
正規表現に複数行対応として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
データフレームから先頭の列を除く	df[df.columns[1:]]
散布図に黒い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
改行	'\n'
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
nを切り捨てながらn2分の一にする	n //= n2
配列とリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
ヒストグラムをフクシア色を用いて描画する	plt.hist(データ列, color='fuchsia')
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
カウンタ間で積集合	aCounter & aCounter2
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
データ列を1000の位で四捨五入して、整数にする	ds.round(-3).astype(int)
線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
データフレームのリストカラムの中にあると文字列の合計を数える	df[aList].isin([value, value2]).sum()
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
緑色で文字列を表示する	print(f'\033[32m{value}\033[0m')
データフレームを各列毎にグループ化し、列の標準偏差を求める	df.groupby(column)[column2].std()
２次元リストをフラット化する	sum(aList)
ヒストグラムの色をアリスブルーにセットする	plt.hist(データ列, color='aliceblue')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
二つのデータフレームを異なる列をキーにして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
標準エラーを使用する	sys.stderr
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
option: 小麦色色を使う	color = 'wheat'
赤い実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データ列のNaNを直前の値で置き換える	ds.fillna(method='ffill')
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
三自然数の最大公約数	math.gcd(n, n2, n3)
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
実数の逆余弦	math.acos(x)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
赤いグリッド線を引く	plt.grid(color='r')
option: 色をクリムゾンに変更する	color = 'crimson'
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
二つのデータフレームを列'A'と列'B'をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: グラフの色をインディゴに設定する	color = 'indigo'
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
計算機イプシロン	sys.float_info.epsilon
ゼロ埋めされた配列	np.zeros(要素数)
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
タイムスタンプデータは日付時刻データより後ろ	aDatetime > aDatetime2
option: スノー色を使う	color = 'snow'
黒いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
グラフの描画で暗くパレットを使う	sns.set(pallete='dark')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
リストとリストの散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
カレント作業ディレクトリ	os.getcwd()
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
日付時刻データの時刻	aDatetime.time()
最後の部分文字列で文字列を二分する	s.rpartition(sub)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
イテラブルを文字列に変換して部分文字列で連結する	sub.join(map(str, iterable))
文字列を黒色化する	f'\033[30m{value}\033[0m'
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
カウンタのユニオン演算する	aCounter | aCounter2
データ列がどの程度分散しているか調べる	ds.var()
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
n個の数値イテラブル	range(n)
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
メディアンで列の欠損値を埋める	ds.fillna(ds.median())
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ヒストグラムをパウダーブルー色を用いて描画する	plt.hist(データ列, color='powderblue')
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データ列の曜日の名前	ds.dt.weekday_name
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
配列とリストの散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
組をひとつ飛ばしで取り出す	aTuple[::2]
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
タプルのn番目からn2番目までの部分	aTuple[n:n2]
option: グラフの色をシスルに設定する	color = 'thistle'
配列のデータ型	aArray.dtype()
辞書のキーとその値をペアとして取り出す	aDict.items()
赤い破線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
部分文字列で文字列の開始位置以降が開始するか調べる	s.startswith(sub, start)
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
option: タブをセパレータで使う	sep = '\t'
option: フローラルホワイト色を使う	color = 'floralwhite'
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ふたつの集合の差集合	aSet.difference(aSet2)
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
xをブール値にする	bool(x)
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
データ列間の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
データフレームを列をキーにして並べる	df.sort_values(by=column)
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
第一引数で指定されたファイルの名前	sys.argv[1]
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
辞書からキーで指定された項目をポップする	aDict.pop(key)
タプルをリストに変換する	list(aTuple)
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
アヤメのデータセットをロードする	sns.load_dataset('iris')
文字列をゼロ埋めする	s.zfill(文字列幅)
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
散布図に黒い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
整数nをn2分の一にする	n //= n2
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
リストが空	len(aList) == 0
ふたつの関係が上位集合もしくは等しいか	aSet > aSet2
棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
データ列の各データ値の出現数	ds.value_counts()
追加できるようにBOM付きで既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
option: グラフの色をダークグリーンにする	color = 'darkgreen'
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
option: 濃いシアンにグラフの色を設定する	color = 'darkcyan'
両端キューの長さを制限する	collections.deque(maxlen=n)
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
タプルのn番目からn2番目まで	aTuple[n:n2]
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
ボックスチャートを描画し、平均を追加する	plt.boxplot(データ列, showmeans=True)
データ列が何月か見る	ds.dt.month
整数nがリストのどれかか調べる	n in aList
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
文字列はPythonのキーワード	keyword.iskeyword(s)
カテゴリで色分けして、データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
行列をベースにして全要素が0の配列	np.zeros_like(aArray)
集合の濃度	len(aSet)
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
辞書に項目名が存在しているかどうか	key in aDict
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
データフレームのカラムの分	df[col].dt.minute
option: 追加モードを使う	mode = 'a'
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
rgbに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
文字列を最後の部分文字列で分割したときの前半の文字列を取り出す	s.rpartition(sub)[0]
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
xを文字列に変換してファイルに書き込む	f.write(str(x))
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
散布図の四角印を青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: 大バツマーカーを描画する	marker = 'X'
リストと配列について散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
辞書の値として要素は含まれているか調べる	element in aDict.values()
スラグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データフレームのリストカラムは正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
データフレームの先頭n行	df.head(n)
整数nを八進数文字列にする	oct(n)[2:]
カウンタ同士でユニオン	aCounter | aCounter2
青い菱形印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
赤い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
実数をn乗する	x ** n
集合をイミュータブルなセットに変換する	frozenset(aSet)
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
データ列を100の位で丸めて整数型にする	ds.round(-2).astype(int)
TSVファイルからCSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
表の列が文字列で始まらないデータを取り出す	df[not df[column].str.startswith(s)]
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
データ列の折れ線グラフを三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
option: インデックスを自動的な連番に設定する	index_col = None
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
実数を複素数に変換する	complex(x)
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
プログラムのファイルの名前	sys.argv[0]
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
option: 淡いピンク色に色を設定する	color = 'lightpink'
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
オブジェクトは論理値クラスのインスタンスか調べる	isinstance(obj, bool)
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
折れ線グラフの色をペルーにセットする	plt.plot(データ列x, データ列y, color='peru')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
折れ線グラフを青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
少ない順番にカウンタを列挙する	aCounter.most_common()[::-1]
nの二乗	n ** 2
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
マップからキーの値をエラーなく参照する	aDict.get(key, None)
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
MSDで多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームの重複する行数のマスクを使う	df.duplicated()
文字列中に部分文字列が存在するか確認する	sub in s
データフレームのリストカラムを千の位で丸めて整数にする	df[aList].round(-3).astype(int)
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
ヒストグラムの色をゴールドにする	plt.hist(データ列, color='gold')
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
印字を全部使う	string.printable
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
濃い青にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
配列の列ごとの平均を計算する	np.mean(aArray, axis=0)
データフレームをインデックスによってソートする	df.sort_index()
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
ふたつのリストの積集合	list(set(aList) & set(aList2))
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
数列と数列の散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
列の各データ値の出現数を求める	ds.value_counts()
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
サンディーブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
２つの辞書をネストする	collections.ChainMap(aDict, aDict2)
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
文字列を改行で区切る	s.splitlines()
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
シャルトリューズにヒストグラムの色をセットする	plt.hist(データ列, color='chartreuse')
データフレームをJSONLファイルにTSVファイルを用いて書き込む	df.to_csv(filename, sep='\t')
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
箱髭図でリストを可視化する	plt.boxplot(データ列)
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
predicateFuncがTrueとなる列の要素	itertools.takewhile(predicateFunc, iterable)
データフレームの行を範囲指定して抽出する	df[start:end]
二点間のユークリッド距離	math.dist(point, point2)
文字列を文字コード列に変換する	[ord(ch) for ch in s]
option: グラフの線の幅を3.0ポイントに設定する	linewidth = 3.0
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
option: グラフの色をマルーンに指定する	color = 'maroon'
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
散布図をrgbの左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
円周率	math.pi
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
option: グラフの種類を点線に設定する	linestyle = 'dotted'
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
シーケンスのコンビネーション	itertools.combinations(iterable, n)
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
変数を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームの値が欠損値か調べる	df.isna()
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: NaNを含める	dropna = True
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
リストと数列についての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームのカラムの分散	df[col].var()
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
グラフの目的を論文に設定する	sns.set(context='paper')
ミディアムバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
グラフの描画で色差別なくカラーパレットを用いる	sns.set(pallete='colorblind')
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
0から始まる無限の数列	itertools.count()
rangeの無限バージョン	itertools.count(start=n, step=step)
八進文字列を整数にする	int(s, 8)
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
リストと配列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
グラフ中のフォントを設定する	sns.set(font=フォント名)
行列の逆行列	np.linalg.inv(aArray)
year年の日付	datetime.date(year=year, month=1, day=1)
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
整数nを八進表現に変換する	oct(n)
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
データフレームのリスト列の相関行列	df[aList].corr()
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
点線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
ミディアムアクアマリン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームを列によってグループ化し、、それぞれのグループごとの個数を算出する	df.groupby(column).count()
青いグリッド線を引く	plt.grid(color='b')
試しに何か動かす	print('Hello World')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
option: ピーチパフを使う	color = 'peachpuff'
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
最大値としてデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
日付データからn週間分、減らす	aDate - datetime.timedelta(weeks=n)
辞書からカウンタを作る	collections.Counter(aDict)
データ列をビン分割する	pd.cut(ds, aList)
２つの値をスラッシュで区切って出力する	print(value, value2, sep='/')
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
行列の行ごとの平均値	np.mean(aArray, axis=1)
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームのカラムが正規分布からどれだけ、尖っているか見る	df[col].skew()
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
データフレームを複数の列によってで降順に整列する	df.sort_values(by=column, ascending=False)
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
文字列の最後	s[-1]
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
箱ひげ図でデータフレームの複数のカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
リストが空か調べる	len(aList) == 0
ヒストグラムの色を珊瑚にセットする	plt.hist(データ列, color='coral')
配列を2次元1列に変形する	aArray.reshape(-1, 1)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
現在処理中の例外を情報を調べる	sys.exc_info()
カラーバーを描画する	plt.colorbar()
浮動小数点数以下の最大の整数	math.floor(x)
データ列の偏りを平方根変換する	np.sqrt(データ列)
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
リスト中の文字列が最初に見つかるインデックス	aList.index(element)
色差別なくカラーパレットをグラフの描画で使用する	sns.set(pallete='colorblind')
パウダーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
ValueMapでデータフレームのカラムの値をまとめて置き換える	df[col].replace(ValueMap)
文字列をシンボルにしてパラメータにする	z = sympy.Symbol(s)
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
日付データと日付データの時間差	aDate - aDate2
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームをグループ化し、列に対し最大値を求める	df.groupby(column)[column2].max()
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
日付時刻データのタイムゾーン	aDatetime.timetz()
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームのリスト列の未入力値を平均値で埋める	df[aList].fillna(df[aList].mean())
文字列の中で大文字・小文字を無視して正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
option: 行列のデータ型を指定する	dtype = bool
印字可能な文字を全部見る	string.printable
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
縦棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
文字列が空白からなる	s.isspace()
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
組の先頭のn要素を除く	aTuple[n:]
新しいサポートベクター回帰モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
目盛り線	plt.grid(alpha=0.5)
文字列の接尾辞が部分文字列	s.endswith(sub)
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの線の種類を実線にセットする	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの相関行列スピアマン順位相関係数で	df.corr(method='spearman')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
0から始まる無限数列	itertools.count()
n個に等間隔で配列をビン分割する	pd.cut(aArray, n)
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
行列の行ごとの最大値	np.max(aArray, axis=1)
ピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
option: ダークスラテグレー色を用いる	color = 'darkslategray'
ライトサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='lightsalmon')
データフレームのn行目を削除する	df.drop(n, axis=0)
文字列が全て英数字か調べる	s.isalnum()
リストから配列を作る	np.array(aList)
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
有理数の分母	q.denominator
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
上限を指定して、双方向キューを作る	collections.deque(maxlen=n)
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
option: グラフの色をオールドレースに設定する	color = 'oldlace'
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
ダークサーモン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
横棒グラフをライトコーラル色を使って描画する	plt.barh(データ列x, データ列y, color='lightcoral')
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
データフレームのリストカラムの中にと文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
リストの先頭のn要素を取り除く	aList[n:]
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
リストを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
データ列の値は欠損値か調べる	ds.isna()
折れ線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
option: ミントクリーム色を使う	color = 'mintcream'
option: フォントの色をピンクに指定する	color = 'pink'
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategray'
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
ヘッダを付けずにJSONLファイルにデータフレームを書き込む	df.to_csv(filename, header=None)
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
正規表現に大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
option: 欠損値を含めない	dropna = True
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
タプルの合計値	sum(aTuple)
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
値∉集合	element not in aSet
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データ列の歪度	ds.kurt()
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
データ列の欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
２つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
option: パープル色を使う	color = 'purple'
ファイルをオープンする]	open(filepath)
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
n個の集まりからk個選ぶ方法	math.comb(n, k)
データ列を使う	import pandas as pd
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
カテゴリで色付けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
nの16進数表現を求める	hex(n)
数字を全部使う	string.digits
データフレームを二つの列を用いてで降順に整列する	df.sort_values(by=['A', 'B'], ascending=False)
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
データフレームを表示するときヘッダー行を右寄せに増やす	pd.set_option('colheader_justify', 'right')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
option: グラフの色を茶色に設定する	color = 'brown'
シーケンスの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
option: 色をコーラルに設定する	color = 'coral'
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
実数に実数を加える	x + y
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
Pandasで、データ列をフォーマットfmtでタイムスタンプに変換する	pd.to_datetime(ds, format=fmt)
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
option: n番目のカラムをインデックスに設定する	index_col = n
ダークグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
データフレームのリストカラムの中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
タプルが少なくともひとつ真か調べる	any(aTuple)
データフレームの列を丸める	df[col].round()
ファイルパスのセパレータ記号	os.sep
n番目のカラムをインデックスとしてCSVファイルTSVファイルを読み込む	pd.read_csv(filename, index_col=n)
データフレームから指定された三列だけ抽出する	df[[column, column2, column3]]
option: グラフの色をグレーに設定する	color = 'grey'
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
option: グラフを実線に設定する	linestyle = 'solid'
リストをビン分割する	pd.cut(aList, aList)
文字列の先頭から空白を消す	s.lstrip()
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
文字列が数字か	s.isdigit()
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
実数を切り上げる	math.ceil(x)
nを半分にする	n /= 2
集合を変更不能にする	frozenset(aSet)
文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームのリストカラムのNaNを直前の値で埋める	df[aList].fillna(method='ffill')
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
現在のローカルな日付時刻	datetime.datetime.today()
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームの列のNaNを直前の値で埋める	df[col].fillna(method='ffill')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
nが3で割り切れるか調べる	n % 3 == 0
データフレームのカラムのNaNをxに指定する	df[col].fillna(x)
データフレームの相関行列	df.corr()
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
nがn2の倍数でないか調べる	n % n2 != 0
昇順に複数の列でデータフレームを並べ直す	df.sort_values(by=column, ascending=True)
列によってデータフレームを集約して、それぞれのグループごとの最小値を算出する	df.groupby(column).min()
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
ペールグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
文字列はタイトルケースか調べる	s.istitle()
破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
Pandasのバージョンを表示する	print(pd.__version__)
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
リストの合計値を求める	sum(aList)
データフレームの列がxの行を取り出す	df[df[column] == x]
データ列の移り変わりを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
データフレームのカラムが何年か見る	df[col].dt.year
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
空の集合	set()
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: スカイブルーにグラフの色を変更する	color = 'skyblue'
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
有理数モジュールを使用する	import fractions
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
やわらかい青にヒストグラムの色を指定する	plt.hist(データ列, color='cornflowerblue')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
コマンドライン引数	sys.argv
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
縦棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
リストの各要素を関数に適用した結果で並べる	sorted(aList, key=func)
データフレームを列で集約して、列の要約統計量を計算する	df.groupby(column).describe()[column2]
全ての空白文字	string.whitespace
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データ列のNaNを直前の値に設定する	ds.fillna(method='ffill')
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
nの各桁の総和	sum(map(int, str(n)))
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ローングリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データ列と配列の散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームのカラムの文字列長を列として見る	df[col].str.len()
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色をゴールドに設定する	color = 'gold'
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
option: 淡いピンク色色を用いる	color = 'lightpink'
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
文字列の先頭から空白を取り除く	s.lstrip()
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの指定された二列だけ抽出する	df[[column, column2]]
データフレームを'A'列でソートして、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
二つのオブジェクトが同一かどうか調べる	obj is obj2
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
本日の日数	datetime.datetime.today().day
実線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
パラメータについて数式を積分する	sympy.integrate(e, z)
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ヒストグラムの色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
データフレームを2つの列でソートする	df.sort_values(by=['A', 'B'])
データフレームのカラムのNaNを直前の値に設定する	df[col].fillna(method='ffill')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
辞書のキーとその値を列挙する	aDict.items()
黒いバツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
配列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
未初期化の配列	np.empty(要素数, dtype=np.int)
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
散布図をパールゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
レモンシフォン色としてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
散布図をスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='skyblue')
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
option: ダークカーキ色を使う	color = 'darkkhaki'
イテラブルを文字列リストに変換してタブによって連結する	'\t'.join(map(str, iterable))
option: マーカーの色をライムにする	markerfacecolor = 'lime'
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
option: 読むシートの名前をnamesに設定する	sheet_name = names
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データ列の中にいくつ未入力値があるか数える	ds.isna().sum()
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
カラムの中のNaNの合計を数える	ds.isna().sum()
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')

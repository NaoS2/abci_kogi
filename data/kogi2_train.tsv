＜オプション＞グラフの色をパウダーブルーに設定する	color = 'powderblue'
ヒストグラムを描画して、その色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
日付時刻データにn分分加える	aDatetime + datetime.timedelta(minutes=n)
カラーバーを横向きに描く	plt.colorbar(orientation='horizontal')
折れ線グラフの下三角印を黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
データフレームの要約統計量	df.describe()
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
散布図に黒い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='k')
nかつn2	n and n2
ヒストグラムを描画して、その色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
リストとリストについての散布図を色差別ない色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
二数の最大値	max(x, y)
オブジェクトがリストクラスかどうか調べる	isinstance(obj, list)
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
組をn回、接続する	aTuple * n
＜オプション＞ライトグリーン色を使用する	color = 'lightseagreen'
白いヒストグラムを描画する	plt.hist(データ列, color='w')
ヒストグラムを描画して、その色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
両端キューの中に要素が含まれてる	element in deq
淡い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
ヒストグラムを描画して、その色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
ヒストグラムを描画して、その色を茶色に設定する	plt.hist(データ列, color='brown')
データフレームを列でグループ化してグループごとの合計を求める	df.groupby(column).sum()
データフレームの列の名前一覧で指定された列を消す	df.drop(columns, axis=1)
折れ線グラフを描画して、その色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
折れ線グラフの色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
データフレームを列によってソートしてインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
線グラフを描画して、その色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
文字列のケースを逆にする	s.swapcase()
リスト内の要素が少なくともひとつ真かどうか調べる	any(aList)
オブジェクトがあるクラスのインスタンスかどうか	isinstance(obj, クラス)
ひとつでも非空白が文字列中に含まれる	any(not c.isspace() for c in s)
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
カラーコードのダイアモンドマーカーを散布図に使う	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
配列の行列式を計算する	np.linalg.det(aArray)
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
文字列の先頭でケースを無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
＜オプション＞改行コードをWindowsに設定する	newline = '\r\n'
データフレームのカラムの値はNaNかどうか	df[col].isna()
暗いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
数式を数値に変換する	float(e)
タプルの文字列が最初に見つかる場所を探す	aTuple.index(element)
＜オプション＞ヘッダをnamesに設定する	header = names
折れ線グラフを描画して、その色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
データフレームを表示するとき表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
データフレームから列を三つ選択する	df[[column, column2, column3]]
文字列を大文字・小文字を無視してパターンで区切る	re.split(pattern, s, flags=re.IGNORECASE)
オブジェクトは整数クラスのインスタンス	isinstance(obj, int)
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ゼロ埋めされた配列を作る	np.zeros(要素数)
ヒストグラムを描画して、その色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
リストとリストの濃いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
ヒストグラムを描画して、色をリネンに設定する	plt.hist(データ列, color='linen')
文字列がタプルに含まれないか判定する	element not in aTuple
列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
＜オプション＞ライムを使う	color = 'lime'
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
変数を改行しないで表示する	print(value, end='')
日付時刻データをエポック秒にする	aDatetime.timestamp()
nとn2の論理積を計算する	n & n2
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
＜オプション＞グラフの色をダークシアンに設定する	color = 'darkcyan'
折れ線グラフの色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
折れ線グラフのダイアモンドマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームを列によって集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
＜オプション＞ダークスレートブルー色を使う	color = 'darkslateblue'
数列とデータ列についての散布図を重なりを見やすく濃い色を用いて描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
小文字列	string.ascii_lowercase
折れ線のアルファをalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
データ列を使う	import pandas as pd
今日が木曜日かテストする	datetime.datetime.today().weekday() == 3
青色のパステル調のを描く	plt.plot(xdata, ydata, linestyle='pastel', color='b')
ヒストグラムを描画して、色を紺碧にする	plt.hist(データ列, color='azure')
印字可能な文字を全部使う	string.printable
nからn2を引く	n - n2
ヒストグラムの色を黒くする	plt.hist(データ列, color='k')
全ての十六進数字	string.hexdigits
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
折れ線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
＜オプション＞レベッカパープル色を使う	color = 'rebeccapurple'
ロードされたモジュールの一覧	sys.modules
ファイルをオープンして]読み込みストリームを使う	open(filepath, mode='r')
データフレームのリストカラムの中の欠損値の合計をカウントする	df[aList].isna().sum()
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategray'
カラーコードの左三角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='<', c=rgb)
最大値・最小値の範囲として一様な疑似乱数	random.uniform(最小値, 最大値)
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
文字列の変数名を数式に変換する	sympy.Symbol(s)
散布図に赤いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='r')
折れ線グラフに大きさnの△印を描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフを描画して、その色をアイボリーに指定する	plt.plot(データ列, データ列2, color='ivory')
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
＜オプション＞色をアクアに設定する	color = 'aqua'
タプルの末尾の要素	aTuple[-1]
ヒストグラムを描画して、その色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
サイコロ	random.randint(1, 6)
リストとリストについて濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
列を集合にする	set(iterable)
＜オプション＞グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
文字列にイテラブルを変換して、カンマで連結する	','.join(map(str, iterable))
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
線グラフを描画して、色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
マッピングの全項目を消去する	aDict.clear()
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
データ列の下位25%	ds.quantile(0.75)
線グラフを描画して、その色をロイヤルブルーに変更する	plt.plot(データ列, データ列2, color='royalblue')
データフレームのリストカラムのNaNを後の行の値で補う	df[aList].fillna(method='bfill')
ヒストグラムの線のスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='deepskyblue')
＜オプション＞トマト色を使う	color = 'tomato'
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
オリベドラブにヒストグラムの色を変更する	plt.hist(データ列, color='olivedrab')
日付データが日付データより後ろ	aDate > aDate2
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
二つの集合の共通要素だけにする	aSet.intersection_update(aSet2)
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
散布図に黒い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
変数を黄色化する	f'\033[33m{value}\033[0m'
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
スチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='steelblue')
＜オプション＞グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
グラフの色を明るくする	sns.set(pallete='bright')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
データフレームのn行より前抽出する	df[:n]
リストとリストの折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
行列の逆行列を求める	np.linalg.inv(aArray)
折れ線グラフのダイアモンドマーカーを黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
ヒストグラムを描画してその色を青紫に設定する	plt.hist(データ列, color='violet')
疑似乱数を生成する	random.random()
リストと配列の散布図を描画して、色を明るいに変更する	plt.plot(xdata, ydata, c='bright')
space	' '
xが一桁の数かどうか調べる	-9 <= x <= 9
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
散布図にカラーコードのダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c=rgb)
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
カラーコードの四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
淡いグラフを数列とリストで描き、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='greenyellow')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkturquoise')
n個に配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
線グラフの色を青に設定する	plt.plot(データ列, データ列2, color='blue')
ライトサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsalmon')
＜オプション＞複数行に対応する	flag = re.MULTILINE
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
自然数の階乗を計算する	math.factorial(n)
文字列が文字列リストのいづれか調べる	s in aStringList
日付データをタプルに変換する	aDate.timetuple()
＜オプション＞グラフの種類を実線に設定する	linestyle = 'solid'
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
ヒストグラムを描画して、その色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
2を底とする実数の対数を算出する	math.log2(x)
＜オプション＞ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
組の末尾の要素	aTuple[-1]
パステル調の色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
リストの平均値	sum(aList)/len(aList)
正規表現をASCII限定として事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
リストとリストについて散布図を描画して、三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
ファイルにxを文字列に変換して書き込む	f.write(str(x))
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
二進文字列を整数に変換する	int(s, 2)
折れ線グラフの下三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
折れ線グラフに緑色の四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
辞書にキーワード引数で追加する	aDict.update(**kwargs)
文字列をASCIIコード列に変換する	[ord(ch) for ch in s]
＜オプション＞分割記号をカンマにする	sep = ','
文字列はキーワードか	keyword.iskeyword(s)
カウンタの各項目を、そのカウントだけ列挙する	aCounter.elements()
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
配列を元に全要素が0の配列	np.zeros_like(aArray)
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
JSONを使う	import json
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
＜オプション＞オレンジレッド色を使う	color = 'orangered'
キーが辞書上で定義済み	key in aDict
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームを列名リストによってで降順に並べ直す	df.sort_values(by=column, ascending=False)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
リストとリストについて散布図を描画し、、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
＜オプション＞ライトシアン色を使う	color = 'lightcyan'
行列の合計値	np.sum(aArray)
文字列中の文字を列挙する	list(s)
ヒストグラムを描画して、その色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
集合を空にする	aSet.clear()
データ列の欠損値をxに指定する	ds.fillna(x)
透明度alphaでリストとリストの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
オブジェクトは数値かどうか判定する	isinstance(obj, (int,float))
折れ線グラフを描画して、その色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
現在の時間数	datetime.date.today().hour
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
データフレームの中に文字列と文字列がある	df.isin([value, value2])
ヒストグラムの線のスタイルを点線にセットする	plt.hist(データ列, linestyle='dotted')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
折れ線グラフの色をシーグリーンに指定する	plt.plot(データ列, データ列2, color='seagreen')
データフレームのn行以降抽出する	df[n:]
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
タプルの最初のn要素を取り除く	aTuple[n:]
＜オプション＞ミディアムスプリンググリーンを使用する	color = 'mediumspringgreen'
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
空のカウンタ	collections.Counter()
カウンタ	collections.Counter()
配列とリストについて散布図を描画して、クロスマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
リストとリストについての散布図にクロスマーカーをプロットする	plt.plot(xdata, ydata, marker='x')
データフレームのn行より後ろ抽出する	df[n:]
明るいの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
折れ線グラフの色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
ヒストグラムを描画して、その色をオーキッドに設定する	plt.hist(データ列, color='orchid')
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgrey')
全要素を初期値で初期化された行列	np.full((行数, 列数), 初期値, dtype=np.int)
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
赤い明るいの折れ線を描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
整数nの二進表現	bin(n)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
データフレームからn行、サンプリングする	df.sample(n)
試しに何か動かしてみる	print('Hello World')
折れ線グラフの色を紺に変更する	plt.plot(データ列, データ列2, color='darkblue')
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
マッピングのコピーを作る	dict(aDict)
線グラフを描画して、その色をフクシアにする	plt.plot(データ列, データ列2, color='fuchsia')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
散布図に赤い下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='r')
Pandasで、データ列をフォーマットfmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
折れ線グラフの色をコーンズシルクにセットする	plt.plot(データ列, データ列2, color='cornsilk')
明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgray'
＜オプション＞グラフの色をマルーンに指定する	color = 'maroon'
ヒストグラムを描画してその色を青緑に指定する	plt.hist(データ列, color='teal')
折れ線グラフを描画して、その色をカーキに変更する	plt.plot(データ列, データ列2, color='khaki')
ヒストグラムを描画して、色をマゼンタに変更する	plt.hist(データ列, color='magenta')
折れ線グラフを描画して、色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
グラフで利用可能な色の一覧	matplotlib.colors.cnames
リストとリストについての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
モジュールを検索するパス	sys.path
文字列を下線付きにする	f'\033[4m{value}\033[0m'
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
文字列を走査し、正規表現にケースを無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
行列の行ごとの分散	np.var(aArray, axis=1)
ヒストグラムを描画して、その色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
ケンドール相関係数としてデータフレームの相関行列	df.corr(method='kendall')
折れ線グラフを描画して、色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
整数に変換する	int(x)
＜オプション＞グラフの色をネイビーに設定する	color = 'navy'
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
現在が日曜日か調べる	datetime.datetime.today().weekday() == 6
数列とリストの散布図に黒色のダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
データフレームのリストカラムの欠損値を第二四分位数にセットする	df[aList].fillna(df[aList].median())
カラーコードの大バツマーカーを使って散布図を描く	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
実数とyの斜辺	math.hypot(x, y)
最初のコマンド引数	sys.argv[1]
データフレームの中にある日付データと文字列の合計をカウントする	df.isin([value, value2]).sum()
ファイルからベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
アンティークホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='antiquewhite')
オブジェクトが論理値クラスか調べる	isinstance(obj, bool)
浮動小数点数のサインの逆数	math.asin(x)
データフレームの列の未入力値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
最初のプログラムを書く	print('Hello World')
白色の線グラフを描画する	plt.plot(データ列, データ列2, color='white')
nとn2の和	n + n2
三つのデータフレームを横にくっつける	pd.concat([df, df2, df3], axis=1)
リストとリストについて散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
ヒストグラムを描画して色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
マップに辞書の項目を更新する	aDict.update(aDict2)
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
文字コードに対応する文字	chr(unicode)
両端キュー中の要素の数を数える	deq.count(element)
文字列を空白で区切って、文字列リストに変換する	s.split()
＜オプション＞改行コードを動作環境依存に設定する	newline = None
＜オプション＞グラフの色をホットピンクに変更する	color = 'hotpink'
折れ線グラフに大バツマーカーを使う	plt.plot(データ列, データ列2, marker='X')
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
線グラフを描画して、その色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
列を用いてデータフレームを集計し、、それぞれのグループごとの件数を知る	df.groupby(column).size()
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
線グラフを描画して、その色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
ヒストグラムを描画して、その色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
棒グラフをプロットし、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムを描画して、その色をベージュに設定する	plt.hist(データ列, color='beige')
＜オプション＞マーカーを三角に変更する	marker = '^'
既存の配列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
折れ線グラフに線幅nの▲印を描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
実数の平方根を計算する	math.sqrt(x)
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
マッピングを浅く複製する	dict(aDict)
文字列の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
＜オプション＞色をダークシアグリーンに設定する	color = 'darkseagreen'
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
＜オプション＞ペールグリーン色を使う	color = 'palegreen'
折れ線グラフに星マーカーを使う	plt.plot(データ列, データ列2, marker='*')
何回まで再帰ができるかを	sys.getrecursionlimit()
ヒストグラムを描画して、その色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
重なりを見やすく散布図をパステル調の色のマーカーで描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
＜オプション＞三2ビット整数型を用いる	dtype = np.int16
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフを描画して、その色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
真部分集合かどうか調べる	aSet < aSet2
リストをひとつ置きに取り出す	aList[::2]
ミントクリーム色の線グラフを描画する	plt.plot(データ列, データ列2, color='mintcream')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
＜オプション＞ライトグレー色を使う	color = 'lightgray'
散布図をカラーコードの大バツマーカーで描く	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームをグループ化し各列に対し標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフを描画して、その色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
濃いの色を黒くする	plt.plot(xdata, ydata, linestyle='deep', color='k')
リストとリストについて散布図を描画して、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
ヒストグラムを描画して、その色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
数値の符号をコピーにする	math.copysign(x, x2)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
文字列は全て印字できるか調べる	s.isprintable()
線グラフを描画して、色をグレーに変更する	plt.plot(データ列, データ列2, color='grey')
＜オプション＞サーモン色を使う	color = 'salmon'
＜オプション＞グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
散布図を黒色のバツマーカーを使ってプロットする	plt.plot(xdata, ydata, marker='x', c='k')
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
小文字を全部使う	string.ascii_lowercase
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
列の欠損値を平均値に設定する	ds.fillna(ds.mean())
＜オプション＞カラムの名前を自動的な連番に設定する	header = None
暗いグラフをプロットし、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
ヒストグラムを描画して、その色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
グラフの中の縦軸のラベルをuntitledに設定する	plt.ylabel(untitled)
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
カラーコードのダイアモンドマーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c=rgb)
散布図に赤い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='r')
データフレームの列を消して更新する	df.drop(column, axis=1, inplace=True)
連立方程式の解を求める	sympy.solve([e, e2])
ファイル名がTSVファイルかどうか調べる	filename.endswith('.tsv')
折れ線グラフに赤い▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
紺碧色の線グラフを描画する	plt.plot(データ列, データ列2, color='azure')
数列とリストについて散布図をプロットして下三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='v', c=rgb)
配列と配列について破線グラフをプロットして、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
データフレームのインデックス名をまとめてnameからname2に付け直す	df.rename(index={name: name2})
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
グローバル変数の一覧を求める	globals()
日付時刻データが日曜日	aDatetime.weekday() == 6
オプションで、標準エラーを出力にする	file = sys.stderr
折れ線グラフにダイアモンドマーカーを使用する	plt.plot(データ列, データ列2, marker='D')
データフレームのカラムの中にある文字列の合計を求める	df[col].isin([value]).sum()
双方向キューが空か調べる	len(deq) == 0
キーが辞書にない場合要素を追加する	aDict.setdefault(key, element)
predicateFuncが真になる列の部分を取り出す	itertools.takewhile(predicateFunc, iterable)
ローングリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lawngreen')
配列とリストについて散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
自然数の階乗	math.factorial(n)
ヒストグラムを描画して、その色を紺に設定する	plt.hist(データ列, color='darkblue')
xの絶対値	abs(x)
データフレームを列によって整列して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
実数の2進対数	math.log2(x)
データフレームのリスト列の分散	df[aList].var()
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストについての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
タプルを展開してプリントする	print(*aTuple)
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
ヒストグラムを描画して、その色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
＜オプション＞ダークシアグリーンを使う	color = 'darkseagreen'
整数nを十六進文字列に変換する	hex(n)[2:]
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
Pythonのバージョン	sys.version
イテラブルをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
リストの中の最大値	max(aList)
数字を全部求める	string.digits
nとn2の商	n / n2
n個の要素があるリスト	[element] * n
データフレームの指定された二列を取り出す	df[[column, column2]]
折れ線グラフを描画して、その色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
折れ線グラフの印を三角にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフを描画して、その色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
ヒストグラムの色をドジャーブルーに変更する	plt.hist(データ列, color='dodgerblue')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
nをn2で整数除算する	n // n2
データフレームの中で、列と列の重複を消す	df.drop_duplicates(subset=column)
最大長nの両端キューを作る	collections.deque(maxlen=n)
黒い星印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
列を累加する	itertools.accumulate(iterable)
＜オプション＞スノー色を使う	color = 'snow'
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
＜オプション＞グラフの色を青紫に設定する	color = 'violet'
キーが辞書上で定義済みか調べる	key in aDict
無限大	math.inf
＜オプション＞欠損値は無視する	dropna = True
列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
テキストファイルファイル名がか調べる	filename.endswith('.txt')
データ列のユニークな要素	ds.unique()
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
追加できるようにBOM付きで既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
＜オプション＞グラフの色をライトブルーに変更する	color = 'lightblue'
オプションで、標準出力を使う	file = sys.stdout
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
ケンドール順位相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
リストとリストの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
ヒストグラムを描画して、その色を赤に設定する	plt.hist(データ列, color='red')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
イテラブルを両端キューに変換する	collections.deque(iterable)
xを文字列に変換する	str(x)
無限に数え上げるする	itertools.count()
＜オプション＞グラフの色をスカイブルーに設定する	color = 'skyblue'
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
データフレームを使う	import pandas as pd
ヒストグラムを描画して、その色をインディゴに設定する	plt.hist(データ列, color='indigo')
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
折れ線グラフの四角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
＜オプション＞アイボリー色を使う	color = 'ivory'
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
Pandasで文字列を日付データに変換する	pd.to_datetime(s)
ヒストグラムを描画して、色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
ヒストグラムを描画して、その色をペルーに指定する	plt.hist(データ列, color='peru')
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
タプルとタプルを連結する	aTuple + aTuple2
データ列を折れ線グラフに描画して、マーカーを▲にする	plt.plot(データ列, データ列2, marker='^')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
＜オプション＞ネイビー色を使う	color = 'navy'
プロット中の(x,y)の位置にデータラベルを入れる	plt.legend(loc=(x, y))
nがn2より大きいか調べる	n > n2
オブジェクトのフィールドの値を値に設定する	setattr(obj, プロパティ名, 値)
散布図をカラーコードの四角マーカーを用いてプロットする	plt.plot(xdata, ydata, marker='s', c=rgb)
＜オプション＞クリムゾン色を使う	color = 'crimson'
nからn2までのstepごとによるスライス	slice(n, n2, step)
＜オプション＞グラフの色をピーチパフに設定する	color = 'peachpuff'
イテラブルから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
配列とリストについて破線グラフを描いて、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
データフレームの指定された列をリストに変換する	df[column].values.tolist()
＜オプション＞スレートブルー色を使う	color = 'slateblue'
カウンタからシーケンスをカウントして引く	aCounter.subtract(iterable)
ファイルからファイル名を使う	os.path.basename(filepath)
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
色差別ないグラフの色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームのインデックスをリセットする	df.reset_index()
折れ線グラフを描画して、その色をオールドレースに指定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフに線幅nの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
＜オプション＞グラフの色をスチールブルーに設定する	color = 'steelblue'
日付データの日数	aDate.day
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
データフレームの欠損値をxで埋める	df.fillna(x)
小数点以下の表示精度を指定する	pd.set_option('precision', n)
データフレームを列の値で集約してそれぞれのグループの分散を求める	df.groupby(column).var()
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
＜オプション＞パールバイオレットレッドに色を変更する	color = 'palevioletred'
本日の日付時刻	datetime.datetime.now()
＜オプション＞色をミッドナイトブルーに指定する	color = 'midnightblue'
折れ線グラフを描画してその色をホットピンクにする	plt.plot(データ列, データ列2, color='hotpink')
＜オプション＞スプリンググリーン色を使う	color = 'springgreen'
＜オプション＞ベージュを使用する	color = 'beige'
浮動小数点数から実数を引く	x - y
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
整数nを十六進表現に変換する	hex(n)
折れ線グラフの色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
日付データをISO形式の文字列に変換する	aDate.isoformat()
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=n)
二つのデータフレームを横方向に合体させる	pd.concat([df, df2], axis=1)
データフレームの指定した名前リストの列だけ抽出する	df[columns]
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
ヒストグラムを描画して、その色をシルバーに指定する	plt.hist(データ列, color='silver')
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
ヒストグラムの描画し、、正規化する	plt.hist(データ列, density=True)
線グラフを描画して、その色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
数式を部分分数として展開する	sympy.apart(e)
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
データフレームを列でグループ化して、それぞれのグループ毎の件数を知る	df.groupby(column).size()
グラフの用途をスライドに設定する	sns.set(context='talk')
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
綺麗なグラフを描画する準備をする	import seaborn as sns
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
数式の変数に数式を代入する	e.subs(z, e2)
実数をn乗する	x ** n
データフレームを列名リストで昇順にソートする	df.sort_values(by=column, ascending=True)
明るいグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
＜オプション＞ゴーストホワイト色を使う	color = 'ghostwhite'
パステル調のの色を青くする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データフレームの欠損値がある箇所に色を付ける	df.style.highlight_null()
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
データ列の中に日付データとがいくつあるかカウントする	ds.isin([value, value2]).sum()
赤色で文字列をプリントする	print(f'\033[31m{value}\033[0m')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
ヒストグラムを描画して、その色をミスティローズにする	plt.hist(データ列, color='mistyrose')
日付時刻データの時刻	aDatetime.time()
日付データが水曜日か	aDate.weekday() == 2
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
貝殻色の線グラフを描画する	plt.plot(データ列, データ列2, color='seashell')
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
リストとリストについて散布図を描画してポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
整数nを八進表現に変換する	oct(n)
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
カラーコードのポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
多重集合をイテラブルから生成する	collections.Counter(iterable)
数式の簡略化を行う	sympy.sympify(e)
データフレームのカラムの標本標準偏差	df[col].std()
ファイル名のセパレータ記号を用いる	os.sep
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
文字列の右側から空白を取り除く	s.rstrip(' ')
グラフの描画で濃いカラーパレットを用いる	sns.set(pallete='deep')
ファイルを開き]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
実数を小数点以下で四捨五入する	round(x, n)
変数名をキーとして、マッピング	dict(name=element)
データフレームの歪度	df.kurt()
データフレームを列によって並べ直して、新しい行を加える	df.sort_values(columns).reset_index()
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
データフレームのカラムを1000の位で四捨五入して整数にする	df[col].round(-3).astype(int)
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
＜オプション＞左三角マーカーを描画する	marker = '<'
実数を切り下げて整数に変換する	math.floor(x)
現在が何秒か知る	datetime.date.today().second
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
＜オプション＞マーカーをバツに変更する	marker = 'x'
文字列の開始位置より後に部分文字列が含まれないか	s.find(sub, start) == -1
８進数字を全て見る	string.octdigits
代数計算を使う	import sympy
前の行の値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(method='ffill')
nが3の倍数か調べる	n % 3 == 0
折れ線グラフの色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
折れ線グラフを描画して、その色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
ヒストグラムを描画してその色を黄緑に変更する	plt.hist(データ列, color='chartreuse')
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
＜オプション＞青紫色を使う	color = 'violet'
＜オプション＞オレンジ色を使用する	color = 'orange'
＜オプション＞ダークマゼンタを使う	color = 'darkmagenta'
両端キューの先頭に要素を追加する	deq.appendleft(element)
ネイピア数	math.e
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
列の重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
＜オプション＞改行を分割記号で用いる	sep = '\n'
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
十六進数文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
ヒストグラムを描画して色をミディアムオーキッドにセットする	plt.hist(データ列, color='mediumorchid')
暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
実数の余弦の逆数	math.acos(x)
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
黒い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データ列を箱ヒゲ図にする	plt.boxplot(データ列)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategrey')
データフレームのカラムのタイムゾーンを文字列にする	df[col].tz_convert(s)
パステル調のの折れ線の線幅をnにする	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ふたつの集合の差集合	aSet.difference(aSet2)
両端キューの長さを制限する	collections.deque(maxlen=n)
リストとリストについて散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
データフレームのカラムの年	df[col].dt.year
パステル調のの線幅をnにセットする	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
配列とリストについて青色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
折れ線グラフにバツマーカーを使用する	plt.plot(データ列, データ列2, marker='x')
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
リストを引数として展開して表示する	print(*aList, sep=',')
折れ線グラフの色をスノーに変更する	plt.plot(データ列, データ列2, color='snow')
赤い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
日付時刻データの日付	aDatetime.date()
データ列の第一四分位数	ds.quantile(0.25)
＜オプション＞フローラルホワイト色を使う	color = 'floralwhite'
データ列を折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
色差別ないグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
ヒストグラムを描画して、その色をグレーに指定する	plt.hist(データ列, color='gray')
散布図にカラーコードの丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c=rgb)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
データフレームのカラムが何時か見る	df[col].dt.hour
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
集合からエラーなく要素を取り除く	aSet.discard(element)
データフレームの指定した列を選択する	df[column]
原点から(実数,y)の距離	math.hypot(x, y)
＜オプション＞△マーカーを描画する	marker = '^'
ヒストグラムを描画して、その色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
＜オプション＞ラベンダー色を使う	color = 'lavender'
列を配列として抽出する	df[column].values
リストとリストについて破線を描画し、、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
日付時刻データが何日か知る	aDatetime.day
折れ線グラフの色を黄緑に設定する	plt.plot(データ列, データ列2, color='chartreuse')
データフレームのカラムの中央値	df[col].median()
実数を浮動小数点数で	x // y
改行なしに文字列をプリントする	print(value, end='')
棒グラフの幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
二つの列を並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
データフレームを列名リストによってまとめたグループ	df.groupby(columns)
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
＜オプション＞ポイントマーカーを使う	marker = '.'
nが負の数か調べる	n < 0
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
＜オプション＞グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
ファイルパスをバイナリできるように開く]	open(filepath, mode='rb')
ヒストグラムを描画して色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
リストとリストについての散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
折れ線グラフを描画して、色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
itertoolsモジュールをインポートする	import itertools
＜オプション＞ミディアムターコイズ色を使う	color = 'mediumturquoise'
パステル調の色の折れ線を描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
リストと数列について散布図をプロットし、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
リストとリストの青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
＜オプション＞ライトブルー色を使う	color = 'lightblue'
青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
行列の演算をする	import numpy as np
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgray')
色差別ないの折れ線を配列とデータ列として描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
折れ線グラフを描画して、色を黒くする	plt.plot(データ列, データ列2, color='k')
二つのオブジェクトが等しいか調べる	obj == obj2
＜オプション＞グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
リストとリストの折れ線グラフを描画してuntitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
文字列の末尾を見る	s[-1]
ヒストグラムを描画して、その色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
リストをn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
辞書に要素をキーとして加える	aDict[key] = element
オブジェクトは論理値型	isinstance(obj, bool)
文字列を黒色にする	f'\033[30m{value}\033[0m'
文字列をフォーマットfmtで日付データに変換する	pd.to_datetime(s, format=fmt)
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
パステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データフレームのリストカラムの最頻値	df[aList].mode()
二つの文字列をタブで区切って表示する	print(value, value2, sep='\t')
配列をリストから作成する	np.array(aList)
日付データが何月か知る	aDate.month
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列の第三四分位数	ds.quantile(0.75)
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
浮動小数点数のn乗	pow(x, n)
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
＜オプション＞ベージュにグラフの色をセットする	color = 'beige'
＜オプション＞グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
行列の形状	aArray.shape
＜オプション＞セパレータを使わない	sep = ''
ヒストグラムを描画して、その色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
データフレームをJSONLファイルに保存する	df.to_excel(filename)
nがn2よりも大きいか調べる	n > n2
データフレームの列は正規分布からどの程度歪んでいるか調べる	df[col].kurt()
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
整数nが配列のいづれかか調べる	n in aArray
マッピングからカウンタを作成する	collections.Counter(aDict)
データフレームを表示するとき、表示可能な行数をnに設定する	pd.set_option('display.max_rows', n)
折れ線グラフに黄色い▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
折れ線グラフに黄色い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
文字列の中の複数行対応として正規表現による全マッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
＜オプション＞EUCを使う	encoding = 'euc_jp'
表データをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
データフレームのリストカラムを正規表現patternでまとめてreplに置換する	df[aList].replace(pattern, repl, regex=True)
＜オプション＞グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
辞書のキーを列挙する	aDict.keys()
プログラムのファイルの名前	sys.argv[0]
線グラフを描画して、色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
キーが辞書にある	key in aDict
＜オプション＞色をアンティークホワイトに設定する	color = 'antiquewhite'
青い▲マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
両端キューの順序をn個分右に輪番で回す	deq.rotate(n)
データフレームを'A'列と'B'列によって大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
＜オプション＞グラフの色を青緑に設定する	color = 'teal'
データフレームのリストカラムは正規分布からどの程度、尖っているか見る	df[aList].skew()
データ列とリストの散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
茶色色の線グラフを描画する	plt.plot(データ列, データ列2, color='brown')
データ列の曜日数	ds.dt.dayofweek
配列とリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データフレームのカラムの秒	df[col].dt.second
＜オプション＞ダークスレートブルーを使う	color = 'darkslateblue'
2つの列によってデータフレームをソートする	df.sort_values(by=['A', 'B'])
データフレームをグループ化しそれぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
文字列が全て小文字か調べる	s.islower()
文字列を最初の部分文字列で二つに区切って、最初の文字列を使う	s.partition(sub)[0]
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
列をイミュータブルなセットに変換する	frozenset(iterable)
データフレームの列の値がxでないデータを取り除く	df[df[column] == x]
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
プログラムの実行を強制的に終了する	sys.exit()
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
ヒストグラムを描画して、その色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
数式の積分を行う	sympy.integrate(e)
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフを描画して、その色をゴーストホワイトに変更する	plt.plot(データ列, データ列2, color='ghostwhite')
データ列を折れ線グラフに描画して、マーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
＜オプション＞グラフの色を赤にする	color = 'red'
折れ線グラフに黄色い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
書き込み用にEUCとしてファイルを開く]	open(filepath, mode='w', encoding='euc_jp')
折れ線グラフの星マーカーを黄色くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
イテラブルから重複を取り除く	set(iterable)
句読点文字を全部使う	string.punctuation
折れ線グラフの星マーカーを青くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
nがn2の倍数でないか調べる	n % n2 != 0
データフレームの相関行列ピアソン相関係数で	df.corr(method='pearson')
ヒストグラムを描画して色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
辞書をカウンタに変換する	collections.Counter(aDict)
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
行列の行列式	np.linalg.det(aArray)
データ列を折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
配列の累積和	np.cumsum(aArray)
マッピングから項目名の値か、もしくは要素を参照する	aDict.get(key, element)
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
二つの文字列は同じか調べる	s == s2
八進数字を全て使う	string.octdigits
nが5で割り切れるか調べる	n % 5 == 0
文字列を隔離する	sys.intern(s)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
ヒストグラムを描画して、その色をトマトに設定する	plt.hist(データ列, color='tomato')
ISO書式の文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
ヒストグラムを描画して、色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
データフレームを列によって並べて上位n件を取り出す	df.sort_values(columns).head(n)
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフを描画して、その色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
リストとデータ列の淡いグラフを描画し、色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
データ列のNaNをモードに設定する	ds.fillna(ds.mode().iloc[0])
折れ線グラフのスタイルを実線に設定する	plt.plot(データ列, データ列2, linestyle='solid')
データ列の中にいくつがあるか数える	ds.isin([value]).sum()
n×n2	n * n2
シーケンスを多重集合にする	collections.Counter(iterable)
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
ファイルを文字コードtextで書き込みできるように開く]	open(filepath, mode='w', encoding=text)
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
配列と配列についての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データ列を千の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
線グラフを描画して色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
nの八進文字列を求める	oct(n)[2:]
表データを使用する	import pandas as pd
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフを描画して、色を珊瑚に設定する	plt.plot(データ列, データ列2, color='coral')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
下位集合か調べる	aSet.issubset(aSet2)
自然数のGCDを計算する	math.gcd(n, n2)
黒色の丸マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='o', c='k')
赤い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
二つのオブジェクトが同一か	obj is obj2
二つの変数をコロンで区切って出力する	print(value, value2, sep=':')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
＜オプション＞色をスプリンググリーンに指定する	color = 'springgreen'
リストとリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
リストの要素をクリアにする	aList.clear()
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
リストとリストについてカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
nプラスn2	n + n2
＜オプション＞貝殻色を用いる	color = 'seashell'
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
配列の変化を折れ線グラフで描く	plt.plot(range(len(xdata)), xdata)
ヒストグラムを描画して、その色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データフレームを昇順に２つの列によってソートし、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
集合から全ての要素を取り除く	aSet.clear()
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
黒い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
ファイルパスを開き]、書き込みストリームを求める	open(filepath, mode='w')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
黒色の大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c='k')
列を出現回数してカウンタを更新する	aCounter.update(iterable)
パステル調のグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞読み込むシートの名前をnamesに設定する	sheet_name = names
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
自然数の順列の総数	math.perm(n)
にy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
データフレームを100の位で丸める	df.round(-2)
集合から何でもいいからひとつ除去する	aSet.pop()
リストとリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
＜オプション＞グラフの色をライトシアンに設定する	color = 'lightcyan'
ユーザから入力される	input()
配列の要素ごとに加算する	aArray + aArray2
＜オプション＞改行コードをUNIXに設定する	newline = '\n'
空の多重集合	collections.Counter()
日付時刻データが何秒か知る	aDatetime.second
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
現在の月数を使う	datetime.datetime.today().month
線グラフを描画して、その色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
＜オプション＞下三角マーカーを描画する	marker = 'v'
＜オプション＞色をロイヤルブルーに設定する	color = 'royalblue'
二つの変数をそれぞれ定義する	x, y = i, j
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
数値の変数を数式で置き換える	e.subs(z, e2)
イテラブルとイテラブルについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
集合をイミュータブルに変換する	frozenset(aSet)
ヒストグラムの色をパウダーブルーにする	plt.hist(データ列, color='powderblue')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
星マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='*')
データフレームを列によってソートし、、下位を取り出す	df.sort_values(columns).tail(n)
線グラフを描画して、その色をライトスチールブルーにセットする	plt.plot(データ列, データ列2, color='lightsteelblue')
整数個からk個取り出した時の並べ方の総数	math.perm(n, k)
データ列が何年か見る	ds.dt.year
＜オプション＞グラフの色をシルバーに設定する	color = 'silver'
折れ線グラフを描画してその色をシーグリーンに変更する	plt.plot(データ列, データ列2, color='seagreen')
淡い色で散布図をプロットする	plt.plot(xdata, ydata, c='muted')
線グラフを描画してその色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
リストとリストで濃いグラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
＜オプション＞ダークグリーン色を使用する	color = 'darkgreen'
プロットの背景色を暗くする	sns.set(style='darkgrid')
リストと配列の黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
リストとリストの黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
オブジェクトにプロパティがある	hasattr(obj, プロパティ名)
折れ線グラフを描画して、その色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
最大値・最小値の範囲で一様な疑似乱数を発生させる	random.uniform(最小値, 最大値)
パステル調のグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ビン数nのヒストグラムを描画する	plt.hist(データ列, bins=n)
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフの色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
ふたつの集合の和集合	aSet.union(aSet2)
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームのそれぞれのグループの個数	df.groupby(column).count()
折れ線グラフを描画して、色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
折れ線グラフを描画して、その色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
カラーバーをプロットする	plt.colorbar()
オプションで、標準エラーを使う	file = sys.stderr
分割数nでデータ列をビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのカラムの尖度	df[col].skew()
オレンジレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orangered')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
書き込みできるようにファイルパスをオープンする]	open(filepath, mode='w')
データフレームをグループ化し、それぞれの列に対し標準偏差を算出する	df.groupby(column)[column2].std()
配列をビン分割する	pd.cut(aArray, aList)
ファイルとfilenameを結合する	os.path.join(filepath, filename)
n進数文字列を整数にする	int(s, n)
タプルをn回結合する	aTuple * n
ファイルからの入力ストリームを使う	open(filepath)
ヒストグラムを描画して色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
折れ線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
にy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
タプルの要素数	len(aTuple)
折れ線グラフを描画して色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
1で全要素を初期化された行列を作る	np.ones(要素数, dtype=np.int)
UNIX秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ファイルをBOM付きで書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
コマンドの第一引数を知る	sys.argv[1]
折れ線グラフに描画して、印を星にする	plt.plot(データ列, データ列2, marker='*')
折れ線グラフを描画して、その色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
ヒストグラムを描画して、その色をタンに設定する	plt.hist(データ列, color='tan')
黒いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
イテラブルの集合を新規生成する	set(iterable)
データ列を折れ線グラフに描画して、マーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
データフレームの先頭n行を見る	df.head(n)
両端キュー中の文字列を数える	deq.count(element)
折れ線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='palevioletred')
＜オプション＞茶色を使う	color = 'brown'
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
折れ線グラフを描画して、その色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
＜オプション＞ラベンダーブラッシュ色を使う	color = 'lavenderblush'
＜オプション＞ライムグリーン色を使う	color = 'limegreen'
濃いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフを描画して、色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
データフレームのカラムの中に日付データと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
折れ線グラフの▲印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
イテラブルとイテラブルについての散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
データフレームの指定された列を抽出する	df[column]
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
最初の部分文字列で文字列を分割する	s.partition(sub)
リストとリストについての散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
折れ線グラフの右三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
浮動小数点数の余弦を求める	math.cos(x)
＜オプション＞グラフの色をサーモンに設定する	color = 'salmon'
実線ヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
データフレームの中の列を分割数nで分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのリストカラムの平均値	df[aList].mean()
データフレームのリスト列を正規表現でまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
整数の最大公約数を求める	math.gcd(n, n2)
カラーコードの星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
青いヒストグラムを描画する	plt.hist(データ列, color='b')
線グラフを描画して、色をミディアムスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='mediumspringgreen')
本日が何日か知る	datetime.datetime.today().day
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
リストとリストについて散布図を描画して、丸マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='o', c=rgb)
ヒストグラムを描画してその色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
データフレームの未入力値を直後の値に指定する	df.fillna(method='bfill')
集合の浅いコピー	aSet.copy()
ヒストグラムを描画して、その色をパープルに設定する	plt.hist(データ列, color='purple')
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
折れ線グラフの三角マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
折れ線グラフを描画して、その色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
線グラフを描画してその色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
＜オプション＞ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
イテラブルとリストについて黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
整数nを半分にする	n //= 2
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
ヒストグラムを描画して、その色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
新しい文字列でパターンにマッチした文字列を置き換える	re.sub(pattern, newsub, s)
xを浮動小数点数型に変換する	float(x)
折れ線グラフの色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
データフレームのカラムを百の位で丸めて、整数型にする	df[col].round(-2).astype(int)
イテラブルを配列に変換する	np.array(iterable)
データ列は正規分布からどれだけ、尖っているか見る	ds.skew()
淡いでデータ列についてのヒストグラムを描画する	plt.hist(xdata, color='muted')
日付時刻データの年数	aDatetime.year
データフレームのカラムが何年か見る	df[col].dt.year
折れ線グラフに緑色の大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
文字列の末尾	s[-1]
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
日付データが日曜日	aDate.weekday() == 6
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
分割数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
データフレームのそれぞれのグループ毎の最小値	df.groupby(column).min()
赤色の淡いの折れ線グラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームの列を百の位で丸めて整数型にする	df[col].round(-2).astype(int)
データ列が何月か見る	ds.dt.month
散布図に赤い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='r')
ヒストグラムを描画してその色をビスクに指定する	plt.hist(データ列, color='bisque')
＜オプション＞書き込みモードに設定する	mode = 'w'
ヒストグラムを描画して、色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
データフレームのカラムの曜日数	df[col].dt.dayofweek
リストをカンマ区切りで表示する	print(*aList, sep=',')
線グラフを描画して、その色をミディアムパープルに変更する	plt.plot(データ列, データ列2, color='mediumpurple')
＜オプション＞オリベドラブ色を使う	color = 'olivedrab'
＜オプション＞パールゴールデンロッド色を使う	color = 'palegoldenrod'
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
数式の展開を行う	sympy.expand(e)
データ列のどの値が最も現れるか見る	ds.mode()
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
数値の部分分数化を行う	sympy.apart(e)
ヒストグラムを描画して、その色をコーンフラワーブルーにセットする	plt.hist(データ列, color='cornflowerblue')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='midnightblue')
線グラフを描画して、その色をホワイトスモークに指定する	plt.plot(データ列, データ列2, color='whitesmoke')
濃いグラフを数列と配列を用いて描き、、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
文字列を区切りで分割して文字列リストに変換する	s.split(sep)
＜オプション＞スラグレー色を使う	color = 'slategrey'
Pythonパスの一覧	sys.path
再帰の上限を上げる	sys.setrecursionlimit(1000000)
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
折れ線グラフを描画してその色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
＜オプション＞ブール型を使う	dtype = np.int32
行列のスカラー倍	aArray * n
三変数の一番小さい値	max(x, y, z)
折れ線グラフを描画して、その色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
文字列モジュールをインポートする	import string
文字列がASCII文字	s.isascii()
ヒストグラムの線のスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
リストと配列について散布図を描画し、、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
カウンタのそれぞれの文字列を、その回数だけリストとして得る	aCounter.elements()
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
赤色の星マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='*', c='r')
線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
データフレームの中のNaNが存在する行を消す	df.dropna()
折れ線グラフを描画してその色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
Pandasで、フォーマットで文字列を日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
文字列をセンタリングにする	s.center(文字列幅)
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
リストをビン数nでビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
データ列と配列の淡いを描画して、色を青色に設定する	plt.plot(xdata, ydata, linestyle='muted', color='b')
部分集合か調べる	aSet.issubset(aSet2)
リストとデータ列について破線を描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
クリムゾン色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフを描画して、その色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
データフレームのリストカラムの歪度	df[aList].kurt()
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
＜オプション＞ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
カウンタをリストに変換する	list(aCounter)
デックに値をプッシュする	deq.append(element)
見やすいグラフを描画する準備をする	import seaborn as sns
リストとリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
kを底とする実数の対数	math.log(x, k)
＜オプション＞パールゴールデンロッドに色を設定する	color = 'palegoldenrod'
明るいグラフの色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
＜オプション＞フクシア色を使う	color = 'fuchsia'
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumorchid')
xとyの商と余りを同時に求める	divmod(x, y)
データフレームのカラムとカラムを折れ線グラフで描画する	plt.plot(df[col], df[col2])
カラーコードの丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームをサンプリングする	df.sample()
リストを色差別ない色のヒストグラムで描画する	plt.hist(xdata, color='colorblind')
最適な位置にデータラベルを入れる	plt.legend(loc='best')
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
＜オプション＞グラフの色をダークターコイズに設定する	color = 'darkturquoise'
組をリストに変換する	list(aTuple)
折れ線グラフを描画して、その色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
ヒストグラムを描画して、その色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
赤色の左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='r')
折れ線グラフの大バツマーカーのサイズをnに指定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
折れ線グラフの三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
スピアマン順位相関係数としてデータフレームの相関行列	df.corr(method='spearman')
十六進数字を全部見る	string.hexdigits
データフレームから数値データの列を取り出す	df.select_dtypes('number')
日付時刻データをタプルに変換する	aDatetime.timetuple()
集合をタプルに変換する	tuple(aSet)
ファイルが存在する	os.path.exists(filepath)
TSVファイルをヘッダを指定せず読む	pd.read_csv(filename, header=None)
オプションで、出力先を標準エラーに指定する	file = sys.stderr
ファイルを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
列を配列に変換する	np.array(iterable)
原点から(小数点数,y)の距離	math.hypot(x, y)
イテラブルから一つランダムに選ぶ	random.choice(iterable)
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
ヒストグラムを描画してその色をペルーに設定する	plt.hist(データ列, color='peru')
タプルの中の最大値	max(aTuple)
カウンタからゼロカウントを取り除く	+aCounter
データ列が何日か見る	ds.dt.day
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
折れ線グラフの下三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
＜オプション＞追加用に指定する	mode = 'a'
データ列とラベル列を指定して、積み上げ棒グラフを描く	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
破壊的にデータフレームを'A'列によってを用いてソートする	df.sort_values(by='A', inplace=True)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフの丸マーカーを緑色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
＜オプション＞パウダーブルー色を使う	color = 'powderblue'
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞赤色を使う	color = 'red'
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
ヒストグラムを描画して、その色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
破線の色をパステル調のに指定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
＜オプション＞右三角マーカーを描画する	marker = '>'
折れ線グラフを描画して、その色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
実数のハイパボリック・サイン	math.sinh(x)
データフレームを小数点以下n桁で丸める	df.round(n)
配列と配列の黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームのカラムの中に文字列と文字列が存在するか判定する	df[col].isin([value, value2])
データ列を10の位で丸める	ds.round(-1)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
▽マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='v')
改行なしに二つの文字列をプリントする	print(value, value2, end='')
イテラブルと配列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
表を'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
横棒グラフを描画して、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフの三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
文字列の中の複数行対応としてパターンによるすべてのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
＜オプション＞グラフの色をクリムゾンに設定する	color = 'crimson'
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
折れ線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
白にヒストグラムの色を設定する	plt.hist(データ列, color='white')
エポック秒のデータ列からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
グラフの見栄えを綺麗にする	import seaborn as sns
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
数値の出力を改行なしに行う	print(value, end='')
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
折れ線グラフのポイント印を黄色くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
ヒストグラムの透明度をxに設定する	plt.hist(データ列, alpha=x)
＜オプション＞リネンにグラフの色を設定する	color = 'linen'
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
オプションで、標準エラーに出力する	file = sys.stderr
グラフの色を暗くする	sns.set(pallete='dark')
配列と配列の散布図に△マーカーを描画する	plt.plot(xdata, ydata, marker='^')
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
文字列の右側から改行を取り除く	s.rstrip('\n')
両端キューの最大長	deq.maxlen
日付時刻データの分数	aDatetime.minute
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データフレームの欠損値を第二四分位数に設定する	df.fillna(df.median())
＜オプション＞ビスクにグラフの色を設定する	color = 'bisque'
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
ホットピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='hotpink')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
正弦を求める	math.sin(x)
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
日付データが月曜日かどうか調べる	aDate.weekday() == 0
＜オプション＞グラフの色をシスルに設定する	color = 'thistle'
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
配列の分散	np.var(aArray)
JSON形式の文字列を読み込む	json.loads(jsonString)
線グラフの色を淡いピンク色にする	plt.plot(データ列, データ列2, color='lightpink')
配列の最小値	np.min(aArray)
グラフに鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフに四角マーカーを使う	plt.plot(データ列, データ列2, marker='s')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
グラフの用途をポスターに設定する	sns.set(context='poster')
データフレームを２つの列で整列して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
＜オプション＞丸マーカーを描画する	marker = 'o'
ヒストグラムを描画してその色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
リストとデータ列についての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
折れ線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
全ての句読点文字	string.punctuation
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
＜オプション＞グラフの色をダークバイオレットに設定する	color = 'darkviolet'
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
イテラブルの全順列を計算する	itertools.permutations(iterable)
線グラフを描画して、色をシャルトリューズにする	plt.plot(データ列, データ列2, color='chartreuse')
数列と配列の折れ線グラフをuntitledとラベル付けしてプロットする	plt.plot(xdata, ydata, label=untitled)
＜オプション＞グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
ケンドール相関係数を用いてデータフレームのリストカラムの相関行列	df[aList].corr(method='kendall')
横棒グラフの幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
リストとリストについての散布図に黒色の右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
オブジェクトが関数か確認する	callable(obj)
データフレームのリスト列は正規分布からどの程度、尖っているか見る	df[aList].skew()
数列とデータ列について黒い明るいグラフをプロットする	plt.plot(xdata, ydata, linestyle='bright', color='k')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
実数の小数部	math.modf(x)[0]
numpyを使う	import numpy as np
イテラブルと配列の散布図にカラーコードの▲マーカーを描く	plt.plot(xdata, ydata, marker='^', c=rgb)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
折れ線グラフに黄色いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
データ列の曜日が何日目か見る	ds.dt.dayofweek
＜オプション＞オレンジレッド色を使用する	color = 'orangered'
文字列中から部分文字列を探す	s.find(sub)
データフレームの列をインデックスに設定する	df.set_index(column)
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
ビン数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を求める	df.groupby([column, column2], as_index=False).var()
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
値を黒色にする	f'\033[30m{value}\033[0m'
折れ線グラフの四角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
列'A'と列'B'をキーにして二つの表データを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
有理数モジュールを使う	import fractions
文字列の左側からタブを取り除く	s.lstrip('\t')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
データフレームの中で、列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
第二引数で指定されたファイルの名前	sys.argv[1]
黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
昨日の日付を見る	datetime.date.today() - datetime.timedelta(days=1)
データフレームの欠損値を平均に設定する	df.fillna(df.mean())
＜オプション＞ミディアムスレートブルー色を使う	color = 'mediumslateblue'
バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x')
文字列がカタカナか調べる	('ァ' <= ch <= 'ン')
要素一つのタプル	(element,)
二つの表データを縦方向に連結する	pd.concat([df, df2])
データフレームから重複を削除する	df.drop_duplicates()
nが奇数か調べる	n % 2 == 1
折れ線グラフの左三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
二つのデータフレームを列をキーにして内部ジョインする	pd.merge(df, df2, on=column, how='inner')
グラフの横軸にuntitledというラベルを付ける	plt.xlabel(untitled)
＜オプション＞ライトイエロー色を使う	color = 'lightyellow'
リストとリストの折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
データ列をビン数nでビン分割する	pd.cut(ds, n)
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
型が名前付きタプルか確認する	issubclass(C, tuple)
データ列を小数点以下n桁で四捨五入する	ds.round(n)
サイコロと同じ乱数	random.randint(1, 6)
辞書からキーの値	aDict.get(key)
折れ線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
実数のコサインの逆数	math.acos(x)
データフレームを２つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
線グラフを描画してその色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
色差別ないグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
ヒストグラムを描画してその色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
二次元タプルをflattenする	sum(aTuple)
リストと配列について散布図を描画して星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
データ列と配列について散布図を描画して、マーカーを▽に設定する	plt.plot(xdata, ydata, marker='v')
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
リストとリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
データ列と配列の散布図を描画し、、マーカーの色を濃いにセットする	plt.plot(xdata, ydata, c='deep')
＜オプション＞線種を一点鎖線に設定する	linestyle = 'dashbot'
折れ線グラフを描画してその色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
リストを小さい順に並べる	sorted(aList, reverse=False)
変数をシアンでプリントする	print(f'\033[36m{value}\033[0m')
＜オプション＞セパレータをスラッシュにする	sep = '/'
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
配列とリストの散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
マッピングの値として要素が含まれているか調べる	element in aDict.values()
データフレームの中で、列の重複を確認する	df.duplicated(subset=column)
カウンタ同士でインターセクション演算する	aCounter & aCounter2
イテラブルとリストについて散布図を描画し、、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
整数nの二進文字列	bin(n)[2:]
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
nから無限にカウントアップする	itertools.count(start=n)
タプルの中の最小値	min(aTuple)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
＜オプション＞左三角印を用いる	marker = '<'
＜オプション＞n番目のカラムをインデックスに設定する	index_col = n
リストとデータ列の散布図をプロットし、、バツマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='x', c=rgb)
＜オプション＞ナバホホワイトを用いる	color = 'navajowhite'
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
グラフの描画で明るいカラーパレットを使う	sns.set(pallete='bright')
＜オプション＞エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
ロージーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='rosybrown')
横棒グラフを描いて、棒の幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフを描画して、その色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategrey')
シーグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='seagreen')
実数の双曲線正接の逆数	math.atanh(x)
xが1、もしくは2か調べる	x == 1 or x == 2
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
配列とイテラブルについての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
データフレームの末尾n行を取り出す	df.tail(n)
オブジェクトはリストクラスかテストする	isinstance(obj, list)
タプルの末尾のn要素を除く	aTuple[:-n]
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
暗い色の折れ線グラフを描き、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
二つのデータフレームを結合する	pd.merge(df, df2)
リストの最初のn要素を除く	aList[n:]
リスト中の文字列が最初に見つかるインデックス	aList.index(element)
ヒストグラムの色をシスルにする	plt.hist(データ列, color='thistle')
実数の余弦	math.cos(x)
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
リストを順に出力する	print(*aList)
二つの文字列を順に表示する	print(value, value2)
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
2次元リストをflattenする	sum(aList)
ヒストグラムを描画して、その色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
パステル調のテーマをプロットの描画で使う	sns.set(pallete='pastel')
折れ線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
コードポイントの最大値	sys.maxunicode
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
両端キューのstart番目からend番目の部分値	collections.deque(itertools.islice(deq, start, end))
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
＜オプション＞ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
線幅nの折れ線グラフを描画する	plt.plot(xdata, ydata, linewidth=n)
実数がNaNか	math.isnan(x)
ヒストグラムを描画して、色を赤くする	plt.hist(データ列, color='r')
カウンタ同士で和集合演算する	aCounter | aCounter2
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
グラフの描画で濃いカラーパレットを使う	sns.set(pallete='deep')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
リストとリストについての散布図を重なりを見やすく明るい色を用いてプロットする	plt.plot(xdata, ydata, c='bright', alpha=0.5)
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
リストとデータ列のカラーコードのパステル調のを描く	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
文字列がキーワード	keyword.iskeyword(s)
折れ線グラフの色をインディゴに変更する	plt.plot(データ列, データ列2, color='indigo')
データフレームのカラムが何秒か見る	df[col].dt.second
ヒストグラムを描画して、その色を紺碧に指定する	plt.hist(データ列, color='azure')
ヒストグラムを描画して、色を白くする	plt.hist(データ列, color='w')
点線ヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
nとn2の値を足してnにする	n += n2
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
ヒストグラムを描画して、その色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='forestgreen')
折れ線グラフを描画してその色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
＜オプション＞カーキ色を使う	color = 'khaki'
＜オプション＞ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
タイムスタンプデータが金曜日かどうか調べる	aDatetime.weekday() == 4
タプルの先頭を捨てる	aTuple[1:]
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
データフレームの中の欠損値を消す	df.dropna()
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
ヒストグラムを描画して、その色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
スピアマンを使ってデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='spearman')
＜オプション＞グラフの色をパープルに設定する	color = 'purple'
ヒストグラムを描画して、その色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
＜オプション＞グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
リストとリストについて青い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
＜オプション＞ライトコーラルにグラフの色を設定する	color = 'lightcoral'
文字列に日本語が含まれるか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
折れ線グラフの上三角印を青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
折れ線グラフの色を紺に指定する	plt.plot(データ列, データ列2, color='darkblue')
データ列を折れ線グラフに描画して、マーカーをバツ印にする	plt.plot(データ列, データ列2, marker='x')
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgray')
キューの末尾にイテラブルの各値を追加する	deq.extend(iterable)
＜オプション＞オーキッドにグラフの色を設定する	color = 'orchid'
グラフにy=0の点線を設定する	plt.axhline(y=0, linestyle='dotted')
本日の日付	datetime.date.today()
データフレームの中に日付データが存在するか確認する	df.isin([value])
ヒストグラムを描画して、色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
＜オプション＞グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ゼロ埋めされた行列	np.zeros(行数, 列数)
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
淡い色のマーカーを散布図に使う	plt.plot(xdata, ydata, c='muted')
＜オプション＞グラフの色をダークターコイズに変更する	color = 'darkturquoise'
リストとリストを連結する	aList + aList2
両端キューに要素をエンキューする	deq.appendleft(element)
実数が無限大か調べる	math.isinf(x)
データ列とラベル列を指定して、積み上げ棒グラフを描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
グラフのサイズを設定する	plt.figure(figsize=(width, height))
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
データフレームを関数によってまとめたグループ	df.groupby(関数)
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
データフレームの欠損値を平均値に増やす	df.fillna(df.mean())
要素が集合のメンバーか調べる	element in aSet
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
データフレームを列で並べ直して、更新する	df.sort_values(by=column, inplace=True)
nがn2未満またはn3以上かどうか	n < n2 or n >= n3
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データ列をボックスチャートにする	plt.boxplot(データ列)
xが一桁の正の数か調べる	0 <= x <= 9
数式の因数分解を行う	sympy.factor(e)
配列とリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
nを否定する	not n
リストの先頭	aList[0]
文字列が文字列リストに含まれるか調べる	s in aStringList
リストの最初の文字列を探す	aList.index(element)
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
正規表現モジュールをインポートする	import re
＜オプション＞ライトスカイブルーにグラフの色を変更する	color = 'lightskyblue'
レベッカパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='rebeccapurple')
カラーバーを付ける	plt.colorbar()
ヒストグラムを描画して、その色をインディゴにセットする	plt.hist(データ列, color='indigo')
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
全ての印字可能な文字	string.printable
リストとリストの黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
オブジェクトをイテラブルに変換する	iter(obj)
データフレームの列の値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列, データ列2, marker='D')
全てのシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=None)
＜オプション＞グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
行列の行	aArray[行番号]
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
折れ線グラフのマーカーを星にする	plt.plot(データ列, データ列2, marker='*')
＜オプション＞ダークバイオレット色を使う	color = 'darkviolet'
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
折れ線グラフを描画して、その色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
実数を３乗する	x ** 3
整数nがセットのどれかか調べる	n in aSet
二変数の最小値	min(x, y)
＜オプション＞データ型を指定する	dtype = np.int
＜オプション＞シャルトリューズ色を使用する	color = 'chartreuse'
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
散布図に黒いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='k')
行列の列ごとの標準偏差	np.std(aArray, axis=0)
ファイル名がCSVファイル	filename.endswith('.csv')
カラーコードの星マーカーで散布図を描く	plt.plot(xdata, ydata, marker='*', c=rgb)
散布図にポイントマーカーを用いる	plt.plot(xdata, ydata, marker='.')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
配列の全要素の値を変更する	aArray[:, :] = 指定の値
折れ線グラフの三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
折れ線グラフに△マーカーを用いる	plt.plot(データ列, データ列2, marker='^')
ヒストグラムを描画して、色を青くする	plt.hist(データ列, color='b')
データフレームのカラムの第一四分位数を求める	df[col].quantile(0.25)
データフレームの重複を見る	df.duplicated()
プロットの用途を論文に設定する	sns.set(context='paper')
文字列の開始位置からと終了位置の範囲に部分文字列が含まれる	s.find(sub, start, end) != -1
リスト内の要素が少なくともひとつ真	any(aList)
グラフを使う準備をする	from sympy import N
棒グラフを描画して、グラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
折れ線グラフを描画してその色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
集合を変更不能なセットに変換する	frozenset(aSet)
数列とリストで濃いの折れ線グラフを描画し、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
＜オプション＞ゴールデンロッドを用いる	color = 'goldenrod'
リストの先頭のn要素を取り除く	aList[n:]
リストとリストについて散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
データフレームを'A'列を用いてソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
＜オプション＞符号なし８ビット整数型を使う	dtype = np.uint8
＜オプション＞チョコレート色を使用する	color = 'chocolate'
チョコレート色の線グラフを描画する	plt.plot(データ列, データ列2, color='chocolate')
マッピングのキー一覧	list(aDict)
＜オプション＞ターコイズ色を使う	color = 'turquoise'
データフレームを'A'列で昇順に並べる	df.sort_values(by='A', ascending=True)
xの絶対値を求める	abs(x)
オリベドラブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olivedrab')
折れ線グラフを描画して、色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
チョコレートにヒストグラムの色を変更する	plt.hist(データ列, color='chocolate')
文字列はタプルの要素	element in aTuple
カウンタを低頻出な方からリストとして得る	aCounter.most_common()[::-1]
リストとデータ列の濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
両端キューをタプルに変換する	tuple(deq)
ふたつの集合の和集合を求める	aSet.union(aSet2)
線グラフの色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
リストとリストの散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
配列の累積積	np.cumprod(aArray)
折れ線グラフの右三角印を赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
赤い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
濃い色のヒストグラムでリストをプロットする	plt.hist(xdata, color='deep')
グラフの中のフォントをfontNameに変更する	sns.set(font=fontName)
ヒストグラムを描画して色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
日付データが日付データと同時か調べる	aDate == aDate2
リストとリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
n個に等量でリストをビニングする	pd.qcut(aList, n)
実数が負の数か調べる	x < 0
破線の色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
散布図にカラーコードの四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c=rgb)
イテラブルとリストについて明るい色の折れ線グラフをプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
カラムの中の欠損値の合計をカウントする	ds.isna().sum()
赤い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='r')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
線グラフを描画して、色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
数式の平方根を求める	sympy.sqrt(e)
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
＜オプション＞暗い赤色を使用する	color = 'darkred'
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
JSON形式の文字列をデータに変換する	json.loads(jsonString)
データフレームの欠損値をxに設定する	df.fillna(x)
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
＜オプション＞大文字・小文字を無視する	flag = re.IGNORECASE
ヒストグラムを描画して、その色をネイビーに指定する	plt.hist(データ列, color='navy')
線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
＜オプション＞ミディアムターコイズを用いる	color = 'mediumturquoise'
マップに要素を項目名として加える	aDict[key] = element
双方向キューからポップする	deq.pop()
＜オプション＞グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
ライムグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='limegreen')
マップからキーの値	aDict.get(key)
等しい量になるようにデータフレームの中の列をn個に分割する	pd.qcut(df[col], n)
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
数値をキューの末尾に追加する	deq.append(element)
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
折れ線グラフを描画して、その色をライトコーラルにする	plt.plot(データ列, データ列2, color='lightcoral')
オプションで、標準出力に出力する	file = sys.stdout
リストと数列についての散布図に大バツマーカーを描く	plt.plot(xdata, ydata, marker='X')
データフレームの先頭n行	df.head(n)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
全要素を0で初期化された配列	np.zeros(要素数)
データフレームのリスト列の相関行列	df[aList].corr()
二つのデータフレームを縦方向につなぐ	pd.concat([df, df2])
Pandasで、データフレームのcollをフォーマットとして日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
保存するカンマ区切りのファイルの小数点以下の桁数を増やす	df.to_csv(filename, float_format='%.3f')
折れ線グラフに緑色のバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
明るいグラフを描き、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
両端キューをリストに変換する	list(deq)
エクセルファイルファイルをデータフレームとして読む	pd.read_excel(filename)
オリーブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olive')
＜オプション＞改行をセパレータで使う	sep = '\n'
整数nのバイト長	(n.bit_length() + 7) // 8
データフレームを'A'列と'B'列でソートする	df.sort_values(by=['A', 'B'])
データ列の年	ds.dt.year
ヒストグラムを描画して、その色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
データフレームのstart行目からend行目までを選ぶ	df[start:end]
＜オプション＞マーカーを△に変更する	marker = '^'
折れ線グラフを描画して、色を黄色くする	plt.plot(データ列, データ列2, color='y')
＜オプション＞グラフの色をアクアマリンに設定する	color = 'aquamarine'
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
文字列が数字か調べる	s.isdigit()
自然数の順列の総数を求める	math.perm(n)
リストとリストの折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
再帰が何回までできるかを調べる	sys.getrecursionlimit()
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
＜オプション＞欠損値も無視しない	dropna = True
イテラブルとデータ列について散布図を描画し、、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
ヒストグラムを描画してその色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
カウンタを多い順番にリストとして得る	aCounter.most_common()
整数が正の数か確認する	x > 0
データフレームのリストカラムの未入力値をメディアンに指定する	df[aList].fillna(df[aList].median())
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
文字列を左トリムする	s.lstrip()
カラムの中に日付データがあるか調べる	ds.isin([value])
線グラフの色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
グラフで使える色名の一覧	matplotlib.colors.cnames
リストのn番目以降の部分を取り出す	aList[n:]
リストをヒストグラムにする	plt.hist(aList)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームのリスト列の中に文字列が存在するかどうか調べる	df[aList].isin([value])
＜オプション＞シエナに色を変更する	color = 'sienna'
赤い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
配列とデータ列について黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフのポイントマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
２つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
データフレームの列を十の位で四捨五入する	df[col].round(-1)
珊瑚色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
ヒストグラムを描画して、その色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
横軸にuntitledという軸ラベルを設定する	plt.xlabel(untitled)
文字列の大文字小文字を変換する	s.casefold()
リスト内の要素が少なくともひとつ真か調べる	any(aList)
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
データフレームのカラムの中にいくつNaNが含まれるか数える	df[col].isna().sum()
折れ線グラフを描画してその色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
ヒストグラムを描画して、その色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
本日が何曜日か知る	datetime.datetime.today().weekday()
データフレームから型の列を抽出する	df.select_dtypes(ty)
データフレームのリスト列のpercentパーセンタイル	df[aList].quantile(percent/100)
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
n個分両端キューの順番を右にローテンションする	deq.rotate(n)
数列と数列の散布図をプロットし、、マーカーの色を色差別ないに指定する	plt.plot(xdata, ydata, c='colorblind')
＜オプション＞グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
線グラフの色をスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='springgreen')
整数nの八進文字列	oct(n)[2:]
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
＜オプション＞タン色を使う	color = 'tan'
データフレームを列の値によってグループ化する	df.groupby(column)
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
カウンタのユニークな項目を列挙する	list(aCounter)
ラジアンの角度	math.degrees(x)
文字列のカタカナを平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
イテラブルから配列を作る	np.array(iterable)
文字列の開始位置からと終了位置までの間に部分文字列が存在しないか調べる	s.find(sub, start, end) == -1
淡いの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
折れ線グラフを描画して、その色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
データフレームを各列と列の組み合わせ毎に集約して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
標準入力から1行分改行なしで読む	sys.stdin.readline().rstrip()
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
データ列をカテゴリデータに変換する	ds.astype(object)
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
八進文字列を整数に変換する	int(s, 8)
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
数字を全て見る	string.digits
文字列の開始位置以降に部分文字列が存在する	s.find(sub, start) != -1
グラフにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
データフレームのstart行目からend行目までを取り出す	df[start:end]
折れ線グラフのマーカーをクロスにする	plt.plot(データ列, データ列2, marker='x')
辞書の項目数	len(aDict)
要素が集合のメンバー	element in aSet
標準入力から1文字だけ読む	sys.stdin.read(1)
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
リスト内の要素が全て真か調べる	all(aList)
データ列の値が欠損値か調べる	ds.isna()
データフレームを２つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
文字列を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフの色をダークバイオレットに指定する	plt.plot(データ列, データ列2, color='darkviolet')
数式を簡単にする	sympy.sympify(e)
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
データフレームの列の値がxより大きくx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
データフレームの列の中にと日付データがあるか調べる	df[col].isin([value, value2])
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
プロットのカラーパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
折れ線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
リストとリストについて破線グラフをプロットし、、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
nがn2の倍数か調べる	n % n2 == 0
数式の変数を数式で置き換える	e.subs(z, e2)
黒い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
データフレームのカラムと列を削除する	df.drop([column, column2], axis=1)
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
折れ線グラフを描画して、その色をインディゴに指定する	plt.plot(データ列, データ列2, color='indigo')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
ターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
データ列を丸める	ds.round()
分子割る分母	fractions.Fraction(分子, 分母)
折れ線グラフを描画して、その色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
＜オプション＞色をシエナに設定する	color = 'sienna'
度数分布図の描いて、正規化する	plt.hist(データ列, density=True)
リストとリストについて破線グラフを描画して、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
＜オプション＞グラフの色をライトスレイグレーに変更する	color = 'lightslategrey'
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
グローバル変数の一覧	globals()
実行結果をマゼンタにする	f'\033[35m{value}\033[0m'
破線グラフの色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
文字列を空白で区切り、、列挙する	s.split()
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
startからendまで度数分布図にする	plt.hist(データ列, range=(start, end))
最適な位置に凡例を加える	plt.legend(loc='best')
数列とデータ列の散布図を描画して、星マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='*', c=rgb)
リストのn番目に文字列を挿入する	aList.insert(n, element)
グラフのカラーパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
色差別ない色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
データ列と数列について破線グラフを描画し、、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
Pandasで、データフレームのcollの数値時刻から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
色差別ない色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='colorblind')
マゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='magenta')
行列の行ごとの最小値	np.min(aArray, axis=1)
リストとリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データフレームの未入力値を最頻値に設定する	df.fillna(df.mode().iloc[0])
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
文字列中にひとつでも非小文字があるか	any(not c.islower() for c in s)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
折れ線グラフを描画して、その色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
データ列の中に存在する文字列との個数をカウントする	ds.isin([value, value2]).sum()
プラットホームの名前	sys.platform
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
無限に列を繰り返す	itertools.cycle(iterable)
＜オプション＞シーグリーン色を使う	color = 'seagreen'
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
配列とリストについての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
ライム色の線グラフを描画する	plt.plot(データ列, データ列2, color='lime')
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
折れ線グラフの色をナバホホワイトに変更する	plt.plot(データ列, データ列2, color='navajowhite')
８進数字を全部使う	string.octdigits
プラットホームはLinuxか判定する	sys.platform.startswith('linux')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
セットから別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
空のリスト	[]
＜オプション＞セパレータを文字列にする	sep = s
折れ線グラフを描画して色をダークバイオレットに変更する	plt.plot(データ列, データ列2, color='darkviolet')
辞書に辞書の項目を更新する	aDict.update(aDict2)
リストと配列の色差別ないを描画し、、色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
ユーザの入力を整数として受け取る	int(input())
データフレームから指定された４つの列を選ぶ	df[[column, column2, column3, column4]]
コマンドの第二引数を知る	sys.argv[1]
データフレームから重複する行を残さず、取り除く	df.drop_duplicates(keep=False)
＜オプション＞コロンを分割記号で用いる	sep = ':'
箱ひげ図を二つ並べる	plt.boxplot([データ列, データ列2])
二つのカウンタのいずれかに含まれる要素を算出する	aCounter | aCounter2
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
変数が0に近づくとき、数値の極限値を算出する	sympy.limit(e, z, 0)
データ列とリストの濃いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
データフレームの列が正規分布からどれだけ、尖っているか見る	df[col].skew()
実数の自然対数	math.log(x)
新しい文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
配列を元にして全要素が1の配列	np.ones_like(aArray)
2変数の最も大きい値を算出する	max(x, y)
＜オプション＞エンコーディングを文字列の示すエンコーディングに変更する	encoding = s
＜オプション＞色をライムに設定する	color = 'lime'
黒いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
黒いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
nが無限に続く数列	itertools.repeat(n)
文字列を空白で右から区切る	s.rsplit()
Pandasでエポック秒の文字列からdatetime64型にする	pd.to_datetime(s, unit='s', utc=True)
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
実数の逆双曲線正接	math.atanh(x)
文字列は識別子名か調べる	s.isidentifier()
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
配列とリストについて散布図をプロットして、マーカーを四角に変更する	plt.plot(xdata, ydata, marker='s')
折れ線グラフに緑色の三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
散布図に黒い▽マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
データフレームのカラムを10の位で丸める	df[col].round(-1)
リストとリストについて淡い色の折れ線グラフをプロットし、、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='muted')
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
十六進数字を全部使う	string.hexdigits
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
配列と配列の散布図にカラーコードの三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
データ列がどの程度、分散しているか見る	ds.var()
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
文字列を末尾から空白で区切る	s.rsplit()
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
＜オプション＞ライム色を使う	color = 'lime'
カラムの名前を列挙する	df.columns
折れ線グラフを描画して、色をシルバーにセットする	plt.plot(データ列, データ列2, color='silver')
配列の列ごとの合計値	np.sum(aArray, axis=0)
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
両端キューの要素をインプレースに反転する	deq.reverse()
＜オプション＞コーラル色を使う	color = 'coral'
表データから数値データだけ選択する	df.select_dtypes('number')
折れ線グラフの▲マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
散布図にポイントマーカーを使う	plt.plot(xdata, ydata, marker='.')
リストの文字列が最初に見つかるインデックス	aList.index(element)
空白文字を全部使う	string.whitespace
nが何桁か	len(str(n))
カウンタからマッピングを減らす	aCounter.subtract(aDict)
実数に実数を掛ける	x * y
＜オプション＞グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
散布図に丸マーカーを使う	plt.plot(xdata, ydata, marker='o')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
ヒストグラムを描画して、その色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
＜オプション＞青紫を使う	color = 'violet'
別の文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
リストとリストの暗いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフを描画して、その色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
ヒストグラムを描画して色をレベッカパープルにセットする	plt.hist(データ列, color='rebeccapurple')
＜オプション＞ダークシアンにグラフの色を設定する	color = 'darkcyan'
データ列を百の位で丸める	ds.round(-2)
nがn2より大きい	n > n2
データフレームを破壊的に'A'列によって降順にソートする	df.sort_values(by='A', ascending=False, inplace=True)
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列, データ列2, color='midnightblue')
日付時刻データにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
n割るn2の切り上げ	(n + n2 - 1) // n2
リストと配列の淡いグラフを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
＜オプション＞グラフの色をフクシアに変更する	color = 'fuchsia'
＜オプション＞ディムグレー色を使用する	color = 'dimgray'
Pandasで、dateStringを日付データにする	pd.to_datetime(dateString)
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
データフレームの列の欠損値を中央値に設定する	df[col].fillna(df[col].median())
＜オプション＞オリーブ色を使用する	color = 'olive'
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
ヒストグラムを描画して、透明度をxに設定する	plt.hist(データ列, alpha=x)
バリーウッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='burlywood')
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
リストをランダムにシャッフルする	random.shuffle(aList)
２つのリストからマップ	dict(zip(aList, aList2))
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
イテラブルの長さnの順列	itertools.permutations(iterable, n)
パラメータが無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, oo)
スタックのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフを描画して、その色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
データフレームを未入力値を含めて列で集計する	df.groupby(column, dropna=False)
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
＜オプション＞グラフの色をペールグリーンにセットする	color = 'palegreen'
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列, データ列2, marker='X')
ISO書式の文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの列の値がxより小さい行を取り出す	df[df[column] < x]
行列を2次元1列に変形する	aArray.reshape(-1, 1)
＜オプション＞ターコイズを使う	color = 'turquoise'
データフレームのカラムの値を正規表現でreplに置換する	df[col].replace(pattern, repl, regex=True)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
線グラフを描画して色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
0で全要素を初期化された配列	np.zeros(要素数)
データフレームのカラムの歪度	df[col].kurt()
データフレームのリストカラムの値をValueMapで一度に変更する	df[aList].replace(ValueMap)
nをn2倍にする	n *= n2
データフレームの相関行列	df.corr()
タプルの先頭を除く	aTuple[1:]
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
複数の列でデータフレームをソートする	df.sort_values(by=column)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
線グラフの色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightseagreen'
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumspringgreen')
文字列をカンマで区切って、列挙する	s.split(',')
ライトイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightyellow')
ユニークな値を要素とする配列を使う	np.unique(aArray)
両端キューのn番目	deq[n]
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumvioletred')
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
データフレームの列の各値の出現数	df[col].value_counts()
データフレームのリストカラムを十の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
赤いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
折れ線グラフのバツマーカーを青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームの列の中の欠損値の個数を数える	df[col].isna().sum()
オブジェクトがプロパティを持つか確認する	hasattr(obj, プロパティ名)
データフレームから重複する行を取り除い、、更新する	df.drop_duplicates(inplace=True)
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
ヒストグラムを描画して、色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
両端キュー中の文字列のインデックスを使う	deq.index(element)
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='royalblue')
本日が何年か知る	datetime.datetime.today().year
日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
ファイルがない	not os.path.exists(filepath)
複数のデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
配列をイテラブルから作る	np.array(iterable)
折れ線グラフを描画して、色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
文字を文字コードにする	ord(ch)
データフレームの未入力値をモードで埋める	df.fillna(df.mode().iloc[0])
ヒストグラムを描画して、その色をリネンにする	plt.hist(データ列, color='linen')
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
線グラフの色をダークカーキに変更する	plt.plot(データ列, データ列2, color='darkkhaki')
＜オプション＞先頭カラムをインデックスに設定する	index_col = 0
列をダミー変数にする	pd.get_dummies(iterable)
列の各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
ペールグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='palegreen')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
リストとリストの黒色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
＜オプション＞モカシン色を用いる	color = 'moccasin'
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
配列を平坦にする	aArray.flatten()
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v')
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
nまでの偶整数列	list(range(2, n, 2))
nとn2の論理積	n & n2
＜オプション＞グラフの色をミディアムブルーに設定する	color = 'mediumblue'
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
n個の整数列	list(range(n))
ヒストグラムを描画して、ビン数をnに変更する	plt.hist(データ列, bins=n)
折れ線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
棒の色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
文字列が組の要素でない	element not in aTuple
折れ線グラフの△印を緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
ミスティローズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mistyrose')
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
折れ線グラフのバツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
オブジェクトはリストクラスか調べる	isinstance(obj, list)
配列とリストの散布図を濃い色として描画する	plt.plot(xdata, ydata, c='deep')
日付時刻データの月数	aDatetime.month
暗い色のマーカーとして散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
文字列はリストの要素か調べる	element in aList
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームを列で降順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
列を文字列リストに変換してタブによって連結する	'\t'.join(map(str, iterable))
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
文字列を最後の部分文字列で分けた場合の前半の文字列	s.rpartition(sub)[0]
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
黒い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='k')
データフレームのリスト列のモード	df[aList].mode()
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
ヒストグラムを描画して、その色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
リストとリストについて破線を描画して、その色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
ヒストグラムを描画してその色をブラックに設定する	plt.hist(データ列, color='black')
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
散布図に右三角マーカーを使う	plt.plot(xdata, ydata, marker='>')
イテラブルと配列について散布図を描画して、マーカーを四角にセットする	plt.plot(xdata, ydata, marker='s')
データ列とリストについて黒い色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
＜オプション＞コーラルに色を指定する	color = 'coral'
折れ線グラフに黄色い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
散布図のマーカーの大きさを指定する	plt.scatter(xdata, ydata, s=n)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
OSがWindowsか調べる	sys.platform.startswith('win32')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
xを整数に変換する	int(x)
パステル調のの折れ線を描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞グラフの色をアリスブルーに設定する	color = 'aliceblue'
折れ線グラフを描画して、その色を小麦色にする	plt.plot(データ列, データ列2, color='wheat')
折れ線グラフにバツマーカーを使う	plt.plot(データ列, データ列2, marker='x')
ヒストグラムを描画してその色をインディゴに設定する	plt.hist(データ列, color='indigo')
ベクトルの差	aArray - aArray2
空白を使って文字列を区切る	s.split()
折れ線グラフを描画して、その色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
保存するCSVの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
濃い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
データ列を折れ線グラフに描画してマーカーを▽印にする	plt.plot(データ列, データ列2, marker='v')
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
ヒストグラムを描画してその色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
＜オプション＞グラフの色をダークグリーンに設定する	color = 'darkgreen'
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
データフレームの列を消す	df.drop(column, axis=1)
タプルからキーの値	aDict.get(key)
＜オプション＞ポイントマーカーを描画する	marker = '.'
データフレームを丸める	df.round()
ファイルを書き込みできるようにSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightgreen'
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
データフレームの値が欠損値	df.isna()
ゼロ埋めした論理値型の配列を作る	np.zeros(要素数, dtype=np.int32)
昇順にタプルの要素を並べ変える	sorted(aTuple, reverse=True)
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
文字列はタイトルケースか確認する	s.istitle()
線グラフの色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
重複していない行を抽出する	df[not df.duplicated(keep=False)]
リストとリストについて破線グラフを描画して、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
散布図に赤い大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c='r')
データフレームのリスト列のNaNを最大値に変更する	df[aList].fillna(df[aList].max())
要素が全て1の配列	np.ones(要素数, dtype=np.int)
データ列のpercent分位数	ds.quantile(percent/100)
ふたつの集合の積集合	aSet.intersection(aSet2)
事前に正規表現をコンパイルする	re.compile(pattern)
＜オプション＞アクアマリンを用いる	color = 'aquamarine'
xを印字できる文字列にする	ascii(x)
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
折れ線グラフに大きさnの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
データフレームのリストカラムの未入力値を最小値で補う	df[aList].fillna(df[aList].min())
＜オプション＞四角印を使う	marker = 's'
リストとイテラブルについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
グラフのサイズを横width縦heightに設定する	plt.figure(figsize=(width, height))
nをn2だけ増加させる	n += n2
nにn2をかけた値をnに代入する	n *= n2
データフレームのリストカラムの第二四分位数	df[aList].median()
リストとリストについて散布図を描いて、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
実数の絶対値	math.fabs(x)
線グラフを描画して、その色を紺碧に変更する	plt.plot(データ列, データ列2, color='azure')
＜オプション＞紺碧色を使う	color = 'azure'
三変数の最大値	max(x, y, z)
＜オプション＞グラフの色をダークオレンジに指定する	color = 'darkorange'
線グラフを描画して色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
リストとリストの青色の色差別ないをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
ヒストグラムを描画して、色をダークオリーブグリーンにセットする	plt.hist(データ列, color='darkolivegreen')
＜オプション＞どの行もヘッダにしない	header = None
日付時刻データの時間数	aDatetime.hour
濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep')
2つの変数を同じ値にする	x = y = n
表データを使う	import pandas as pd
辞書にキーがあるか	key in aDict
データフレームがどの程度、分散しているか確認する	df.var()
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
データフレームを'A'列を用いてで降順に並べ直す	df.sort_values(by='A', ascending=False)
データ列を折れ線グラフに描画して、マーカーを三角印にする	plt.plot(データ列, データ列2, marker='^')
カラーコードのバツマーカーをイテラブルとイテラブルについての散布図に描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
nが2で割り切れる	n % 2 == 0
データ列の未入力値を最大値で置換する	ds.fillna(ds.max())
ゲインズボロ色の線グラフを描画する	plt.plot(データ列, データ列2, color='gainsboro')
＜オプション＞線種を実線に設定する	linestyle = 'solid'
折れ線グラフを描画して、その色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
データ列の要約統計量	ds.describe()
データフレームのn行より後ろを抽出する	df[n:]
区間の数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
集合が空でないか	len(aSet) != 0
日付データが木曜日か調べる	aDate.weekday() == 3
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
本日をタプルに変換する	datetime.datetime.today().timetuple()
カラーコードのダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞下三角マーカーを加える	marker = 'v'
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
配列の累積和を計算する	np.cumsum(aArray)
散布図を黒色のポイントマーカーでプロットする	plt.plot(xdata, ydata, marker='.', c='k')
要素が集合の要素でない	element not in aSet
データフレームのカラムを10の位で丸めて整数型にする	df[col].round(-1).astype(int)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データ列の歪度	ds.kurt()
ファイルがあるかどうか調べる	os.path.exists(filepath)
折れ線グラフを描画してその色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
浮動小数点数を小数点第一位で丸める	round(x, 1)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
破線グラフの色を濃いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
xが-9以上、9以下か調べる	-9 <= x <= 9
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
浮動小数点数の三乗を求める	x ** 3
データフレームのカラムの未入力値を最大値で補う	df[col].fillna(df[col].max())
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
リストとリストの散布図を重なりを見やすく色差別ない色を用いて描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
データフレームのカラムの値をまとめてValueMapで変更する	df[col].replace(ValueMap)
青い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='b')
日付データと日付データの時間差を計算する	aDate - aDate2
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgray'
＜オプション＞ダークスラテグレー色を使用する	color = 'darkslategray'
＜オプション＞グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
要素が集合に含まれるか調べる	element in aSet
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
散布図に赤い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
リストが空でないか調べる	len(aList) != 0
サンディーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='sandybrown')
空のタプル	()
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
データフレームを列によってグループ分けし、、それぞれのグループの平均値を計算する	df.groupby(column).mean()
ヒストグラムを描画して、その色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
整数nの八進表現	oct(n)
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
＜オプション＞ミディアムブルーにグラフの色をセットする	color = 'mediumblue'
サドルブラウンにヒストグラムの色をする	plt.hist(データ列, color='saddlebrown')
ライトコーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcoral')
環境のバイトオーダを求める	sys.byteorder
＜オプション＞コロンをセパレータで使う	sep = ':'
グラフを使用する準備をする	from sympy import N
＜オプション＞ダークバイオレットに色を設定する	color = 'darkviolet'
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
文字列が部分文字列で終わる	s.endswith(sub)
グラフを淡くする	sns.set(pallete='muted')
＜オプション＞ビスク色を使用する	color = 'bisque'
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
文字列の末尾から部分文字列を探す	s.rfind(sub)
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
ヒートマップでデータフレームの列と列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
＜オプション＞茶色色を使う	color = 'brown'
事前に大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
文字列中にひとつでも非小文字があるか調べる	any(not c.islower() for c in s)
リストと配列の色差別ないをプロットしてその色を黒色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
xに棒グラフの幅をする	plt.bar(ラベル列, データ列, width=x)
折れ線グラフを描画して、その色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgrey')
実数の床	math.floor(x)
タプル内の要素が全て真か調べる	all(aTuple)
配列とリストのパステル調のをプロットして、色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフを描画して、色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
データフレームから指定された３つの列だけ抽出する	df[[column, column2, column3]]
nとn2が等しいかどうか調べる	n == n2
＜オプション＞グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
ファイルのファイルサイズ	os.path.get_size(filepath)
折れ線グラフのバツマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
ピーチパフ色の線グラフを描画する	plt.plot(データ列, データ列2, color='peachpuff')
データフレームの列がxの行を抽出する	df[df[column] == x]
データフレームの数値を小数点以下n桁で丸める	df.round(n)
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
散布図に赤い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='r')
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
データフレームのグループ毎の分散を算出する	df.groupby(column).var()
データフレームを'A'列でで降順にソートする	df.sort_values(by='A', ascending=False)
リストとリストについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
現在が何分か知る	datetime.date.today().minute
折れ線グラフを描画して、その色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
nが2で割り切れるか	n % 2 == 0
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
startからendの区間のヒストグラムを用いてリストを描画する	plt.hist(データ列, range=(start, end))
データフレームのインデックスがnの行を抽出する	df.loc[n]
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
散布図に濃い色のマーカーを使用する	plt.plot(xdata, ydata, c='deep')
オブジェクトは辞書か調べる	isinstance(obj, dict)
＜オプション＞グラフの色をスレートブルーに設定する	color = 'slateblue'
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
データフレームのリストカラムを十の位で四捨五入して整数型にする	df[aList].round(-1).astype(int)
文字列の接頭辞は部分文字列か	s.startswith(sub)
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
文字列をアンダーライン付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
パステル調の色のヒストグラムでデータ列を描画する	plt.hist(xdata, color='pastel')
配列とリストの黒色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
折れ線グラフを描画して、その色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
折れ線グラフを描画して、その色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
折れ線グラフの大バツ印を赤色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
二つの文字列が等しくないかどうか確認する	s != s2
列を文字列に変換して、部分文字列を使って連結する	sub.join(map(str, iterable))
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
＜オプション＞グラフの色をベージュに設定する	color = 'beige'
＜オプション＞グラフの色をシエナに設定する	color = 'sienna'
＜オプション＞マーカーを星に変更する	marker = '*'
ヒストグラムを描画して、その色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
ベクトルのユニークな要素を算出する	np.unique(aArray)
三整数のLCMを算出する	math.lcm(n, n2, n3)
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumslateblue')
整数nの8進表現	oct(n)
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
データフレームの列と列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
JSON形式の文字列を辞書にする	json.loads(jsonString)
折れ線グラフを描画して、その色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
辞書のキーとその値を列挙する	aDict.items()
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
文字列を部分文字列で二つに区切って後半の文字列を使う	s.partition(sub)[-1]
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
リストとリストの青い濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
カウンタの項目一覧	aCounter.keys()
データフレームのリストカラムを1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
データ列を折れ線グラフに描画して、マーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
破線グラフの色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
＜オプション＞線種を点線に設定する	linestyle = 'dotted'
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
上位集合もしくは等しいか	aSet > aSet2
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
昇順に列によってデータフレームをソートする	df.sort_values(by=column, ascending=True)
線グラフの色をチョコレートに指定する	plt.plot(データ列, データ列2, color='chocolate')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
データフレームのカラムの母標準偏差を求める	df[col].std(ddof=0)
ヒストグラムを描画してその色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
度数分布図をプロットする	plt.hist(データ列)
タプルの値を関数に適用した結果でソートする	sorted(aTuple, key=func)
線グラフを描画して色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
折れ線グラフに線幅nの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
文字列の開始位置と終了位置の間に部分文字列が存在するか	s.find(sub, start, end) != -1
配列とリストの散布図をプロットして、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
ヒストグラムを描画して、その色をカーキに設定する	plt.hist(データ列, color='khaki')
本日が水曜日	datetime.datetime.today().weekday() == 2
＜オプション＞エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
代数計算モジュールを使う	import sympy
最大長nの両端キューをシーケンスから作成する	collections.deque(iterable, maxlen=n)
リストの長さだけ繰り返す	range(len(aList))
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
＜オプション＞グラフの色をダークバイオレットに指定する	color = 'darkviolet'
xが一桁の正の数	0 <= x <= 9
x,yの複素数	complex(x, y)
＜オプション＞スラッシュをセパレータで使う	sep = '/'
赤い右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c='r')
第２引数で指定されたファイル名	sys.argv[1]
両端キューの先頭から要素を取り除く	deq.popleft()
＜オプション＞グラフの色をシルバーに指定する	color = 'silver'
＜オプション＞マーカーを大バツに変更する	marker = 'X'
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図を赤い左三角マーカーとして描画する	plt.plot(xdata, ydata, marker='<', c='r')
折れ線グラフを描画して、その色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
真	True
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
実数の正接の逆数	math.atan(x)
ライトシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcyan')
日付データの年数	aDate.year
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
点線に折れ線グラフのスタイルをセットする	plt.plot(データ列, データ列2, linestyle='dotted')
四角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='s')
データフレームの中の列を分割する	pd.cut(df[col], aList)
ミディアムスプリンググリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumspringgreen')
1からNまでの行列	np.arange(1, N+1)
実数以下の最大の整数	math.floor(x)
＜オプション＞グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
全要素を０で初期化された整数型の行列	np.zeros(行数, 列数, dtype=np.int)
赤い三角マーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='r')
＜オプション＞ラベンダーブラッシュにグラフの色を指定する	color = 'lavenderblush'
自然数の最大公約数	math.gcd(n, n2)
データ列とラベルを指定して縦棒グラフを描画する	plt.bar(ラベル列, データ列)
＜オプション＞レベッカパープルを使う	color = 'rebeccapurple'
0からnまでのスライス	slice(n)
ひとつ飛ばしでリストを取り出す	aList[::2]
＜オプション＞小麦色色を使う	color = 'wheat'
重なりを見やすく散布図を淡い色のマーカーでプロットする	plt.plot(xdata, ydata, c='muted', alpha=0.5)
黒い右三角マーカーを数列とリストの散布図にプロットする	plt.plot(xdata, ydata, marker='>', c='k')
パステル調のグラフの色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
＜オプション＞グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
＜オプション＞グラフの色をマゼンタに設定する	color = 'magenta'
線グラフを描画して、その色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
折れ線グラフを描画して、その色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
＜オプション＞三二ビット整数型を使う	dtype = np.int16
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
折れ線グラフのダイアモンドマーカーを緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
集合から要素を除く	aSet.remove(element)
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
文字列内にひとつでも空白があるか	any(c.isspace() for c in s)
折れ線グラフに大きさnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
文字列を部分文字列で区切る	s.split(sub)
＜オプション＞データ型を指定する	dtype = np.int8
ベクトルの要素ごとに加算する	aArray + aArray2
散布図を描画する	plt.scatter(xdata, ydata)
実数の小数点を四捨五入する	round(x)
データフレームの値をValueMapで一度に置き換える	df.replace(ValueMap)
リストとリストについて色差別ない色の折れ線グラフを描画して、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
淡い色のヒストグラムとしてリストを描く	plt.hist(xdata, color='muted')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
明るいの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
折れ線グラフを描画して、その色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
辞書を浅く複製する	dict(aDict)
データフレームの第三四分位数	df.quantile(0.75)
文字列を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
日付時刻データとタイムスタンプデータの時間差を算出する	aDatetime - aDatetime2
文字列は全て数値か調べる	s.isnumeric()
データフレームが重複しているか調べる	df.duplicated()
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
データ列のユニークな値の個数	ds.nunique()
ヒストグラムを描画して、その色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
線グラフを描画して、その色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
変数を黒色にする	f'\033[30m{value}\033[0m'
ファイルをバイナリ書き込みモードを用いてオープンして]fとする	f = open(filepath, mode='wb')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
両端キューに要素をプッシュする	deq.append(element)
データフレームから重複した行をドロップして、インプレイスする	df.drop_duplicates(inplace=True)
ファイルから1文字、読み込む	f.read(1)
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='grey')
黒い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフを描画してその色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
散布図にカラーコードの左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c=rgb)
辞書の値の一覧	aDict.values()
配列とリストについて散布図を描いて、マーカーを大バツに指定する	plt.plot(xdata, ydata, marker='X')
折れ線グラフにラベルを付ける	plt.plot(xdata, ydata, label=untitled)
左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<')
全要素を1で初期化された配列	np.ones(要素数, dtype=np.int)
＜オプション＞ライトコーラル色を使う	color = 'lightcoral'
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
＜オプション＞色をティールに設定する	color = 'teal'
折れ線グラフの色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
＜オプション＞ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
文字列を小文字にする	s.lower()
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームのカラムの未入力値を平均値で補う	df[col].fillna(df[col].mean())
＜オプション＞シエナ色を使う	color = 'sienna'
＜オプション＞グラフの色をコーラルに設定する	color = 'coral'
文字列を文字コード列に変換する	[ord(ch) for ch in s]
＜オプション＞ライトシアン色を使用する	color = 'lightcyan'
データフレームを各列毎にグループ化し、、文字列というグループを使う	df.groupby(column).get_group(s)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='red')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
nが一桁の数か調べる	-9 <= n <= 9
実数を十六進表記の文字列に変換する	x.hex()
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
実数に実数を加える	x + y
行列の列ごとの最大値	np.max(aArray, axis=0)
実数が正の数か調べる	x > 0
NULLに等しい値	None
濃い色のヒストグラムでリストを描画する	plt.hist(xdata, color='deep')
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
ライトグレーにヒストグラムの色をセットする	plt.hist(データ列, color='lightgray')
リストと配列の散布図を描画し、マーカーの色を色差別ないに指定する	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフを描画して、その色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
リストとリストについて散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
リストとリストについての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
＜オプション＞グラフの色をカーキに変更する	color = 'khaki'
カウンタの上位を列挙する	aCounter.most_common(k)
＜オプション＞グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
＜オプション＞グラフの色をグレーにセットする	color = 'grey'
整数nの八進表現を見る	oct(n)
整数nが配列のどれかか調べる	n in aArray
変数が0に近づく際、数式の極限値を計算する	sympy.limit(e, z, 0)
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
文字列が部分文字列で終わるか調べる	s.endswith(sub)
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
データフレームのカラムの未入力値を最小値で埋める	df[col].fillna(df[col].min())
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
線グラフを描画してその色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
＜オプション＞グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
＜オプション＞複素数型を使う	dtype = bool
データフレームを'A'列の値によってグループ化し、記述統計量を求める	df.groupby('A').describe()
＜オプション＞エラーを無視するように設定する	errors = 'ignore'
＜オプション＞シルバー色を使う	color = 'silver'
グラフの文字化けを防ぐ	sns.set(font='IPAexGothic')
リストとリストについての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフの色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
折れ線グラフに丸マーカーを使う	plt.plot(データ列, データ列2, marker='o')
＜オプション＞色をサンディーブラウンに設定する	color = 'sandybrown'
整数nが配列のどれかかどうか調べる	n in aArray
現在の再帰の最大回数	sys.getrecursionlimit()
文字列を黄色で表示する	print(f'\033[33m{value}\033[0m')
折れ線グラフのダイアモンドマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
折れ線グラフを破線に設定する	plt.plot(データ列, データ列2, linestyle='dashed')
オブジェクトのクラス	type(obj)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
両端キューが空かどうか調べる	len(deq) == 0
文字列の先頭から部分文字列を取り除く	s.removeprefix(sub)
リストのn番目のの要素	aList[n]
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
折れ線グラフの四角印を赤くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
エクセルファイル形式を用いてデータフレームをJSONLファイルに書き込む	df.to_excel(filename)
＜オプション＞バイナリモードを使う	mode = 'rb'
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
データフレームの列名を変更する	df.rename(columns={column: name})
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
折れ線グラフを実線で描画する	plt.plot(データ列, データ列2, linestyle='solid')
折れ線グラフに大きさnの菱形印を描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームから指定された４列のみ抽出する	df[[column, column2, column3, column4]]
データフレームの列の名前を列挙する	df.columns
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
Pandasで、フォーマットfmtでデータ列を日付データにする	pd.to_datetime(ds, format=fmt)
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
＜オプション＞色をブランチドアーモンドに設定する	color = 'blanchedalmond'
リストをn回、連結する	aList * n
書式を辞書でフォーマットする	formatText.format_map(aDict)
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
シスル色の線グラフを描画する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフの色を赤に変更する	plt.plot(データ列, データ列2, color='red')
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
文字列を緑色にする	f'\033[32m{value}\033[0m'
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
文字列を左寄せにする	s.ljust(文字列幅)
文字列内にひとつでも英数字があるか確認する	any(c.isalnum() for c in s)
日付データの月数	aDate.month
リストとデータ列として淡いの折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
辞書のキーの値を参照する	aDict[key]
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
赤色の色差別ないをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
線グラフを描画してその色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
リストとリストの黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
複素数型の０で全要素を初期化された行列を作る	np.zeros(行数, 列数, dtype=bool)
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
線幅nの星マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
数列とリストについて散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
nを半分にする	n /= 2
部分文字列で末尾から文字列を区切る	s.rsplit(sub)
リストと数列の明るいグラフをプロットし、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='b')
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
リストとリストの折れ線グラフを描画する	plt.plot(xdata, ydata)
折れ線グラフを描画して、その色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
ダークシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
文字列の右端から改行を取り除く	s.rstrip('\n')
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
変数について数値のインテグラルを算出する	sympy.integrate(e, z)
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフを描画して、その色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
ファイルパスから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
＜オプション＞シート名をnamesに設定する	sheet_name = names
＜オプション＞青を使う	color = 'blue'
文字列は全て識別子名かどうか	s.isidentifier()
nがn2以上か	n >= n2
データフレームの中にいくつ文字列が存在するか求める	df.isin([value]).sum()
データフレームの列と列の相関行列	df[[column, column2]].corr()
破線グラフの色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データフレームのカラムとカラムを折れ線を用いてプロットする	plt.plot(df[col], df[col2])
辞書をソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
1行だけ標準入力から改行を取り除いて読む	sys.stdin.readline().rstrip()
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
文字列を太字で表示できる文字列にする	f'\033[1m{value}\033[0m'
＜オプション＞四角マーカーを描画する	marker = 's'
折れ線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
色差別ない色で配列についてのヒストグラムをプロットする	plt.hist(xdata, color='colorblind')
折れ線グラフに大きさnの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markersize=n)
折れ線グラフを描画してその色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞オリーブ色を使う	color = 'olive'
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列はタプルに含まれるか調べる	element in aTuple
折れ線グラフを描画して、その色をダークシアグリーンに指定する	plt.plot(データ列, データ列2, color='darkseagreen')
浮動小数点数が負の数	x < 0
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
リストの先頭を取り除く	aList[1:]
リストを引数として展開して表示する	print(*aList)
列を関数でフィルタする	filter(func, iterable)
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
配列とリストについての散布図に赤色のバツマーカーをプロットする	plt.plot(xdata, ydata, marker='x', c='r')
数式の微分を求める	sympy.diff(e)
リストの末尾から要素をポップする	aList.pop()
値が集合のメンバーか調べる	element in aSet
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
全要素を０で初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
文字列がリストに含まれるか調べる	element in aList
散布図を赤色の下三角マーカーで描画する	plt.plot(xdata, ydata, marker='v', c='r')
マッピングにキーワード引数で追加する	aDict.update(**kwargs)
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
リストとリストについて散布図を描画する	plt.scatter(xdata, ydata)
書き込みできるように文字コードtextでファイルをオープンする]	open(filepath, mode='w', encoding=text)
要素をキューにプッシュする	deq.append(element)
リストとリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
＜オプション＞バッファリングを無効にする	buffering = 0
横棒グラフの色をカラーコードにセットする	plt.barh(ラベル列, データ列, color=rgb)
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列, データ列2, color='ghostwhite')
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
データ列の月	ds.dt.month
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データフレームを'A'列と'B'列の値でグループ化し、要約統計量を算出する	df.groupby(['A', 'B']).describe()
暗い赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
データ列とリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
淡い色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='muted')
nとn2のXORを求める	n ^ n2
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
2つのデータフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームのリスト列の中にとがいくつあるか数える	df[aList].isin([value, value2]).sum()
折れ線グラフを描画して、その色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
行列の転置行列	aArray.T
実数を百の位で丸める	round(x, -2)
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
文字列の先頭だけ大文字化する	s.capitalize()
プロットの用途をポスターにする	sns.set(context='poster')
0から始まる無限の整数リスト	itertools.count()
値を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
本日の曜日を整数で見る	datetime.datetime.today().weekday()
数列とデータ列について散布図を描き、、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
文字列の開始位置からと終了位置の間に部分文字列が存在するかどうか調べる	s.find(sub, start, end) != -1
10を底とする実数の対数	math.log10(x)
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
折れ線グラフに緑色の菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
イテラブルから重複なく、n個選ぶ	random.sample(iterable, k=n)
リストとデータ列を折れ線に描画する	plt.plot(xdata, ydata)
散布図を黒色のポイントマーカーとして描く	plt.plot(xdata, ydata, marker='.', c='k')
データフレームのリストカラムの要約統計量を求める	df[aList].describe()
データフレームの各次元の大きさを見る	df.shape
文字列の先頭から空白を取り除く	s.lstrip()
折れ線グラフを描画して、その色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
データフレームの列名を指定された列名リストに置き換える	df.columns = columns
ファイルからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
散布図に赤い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='r')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dodgerblue')
色差別ないグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
カラムの標準偏差を算出する	ds.std()
リストとリストについて破線グラフを描画して、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
グラフのカラーパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
数値の変数にnを代入する	e.subs(z, n)
黒い▽印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
データフレームをTSVファイルとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
パステル調の色で散布図を描画する	plt.plot(xdata, ydata, c='pastel')
文字列が全て空白文字か調べる	s.isspace()
集合に配列の要素を全て追加する	aSet.update(iterable)
ダイアモンドマーカーを散布図に使う	plt.plot(xdata, ydata, marker='D')
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
タプルとタプルを連結する	itertools.chain(iterable, iterable2)
アルファベットの小文字列	string.ascii_lowercase
データフレームから列を１つ選択する	df[[column]]
エクセルデータファイルをデータフレームとして読み込む	pd.read_excel(filename)
データフレームの中で列と列の重複を削除する	df.drop_duplicates(subset=column)
折れ線グラフを描画して、色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
オブジェクトがバイト列クラスか調べる	isinstance(obj, bytes)
データフレームの指定された列を配列として抽出する	df[column].values
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
散布図をカラーコードの上三角マーカーで描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
リストとリストの散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
淡いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='muted', color='r')
折れ線グラフを描画して、その色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
nがn2より小さいか	n < n2
データフレームを複数の列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
nがn2より小さいか調べる	n < n2
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
赤色の暗いの折れ線を描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ヒストグラムを描画して、その色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
散布図にカラーコードの四角マーカーを使用する	plt.plot(xdata, ydata, marker='s', c=rgb)
タイムスタンプをインポートする	import time
淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
折れ線グラフを描画して、その色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
赤い菱形マーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c='r')
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palevioletred')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
＜オプション＞ミディアムシアグリーンを用いる	color = 'mediumseagreen'
文字化けを防ぐ	sns.set(font='IPAexGothic')
変数を太字にする	f'\033[1m{value}\033[0m'
全要素を０で初期化された８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
折れ線グラフのポイント印の線幅をnに変更する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
部分文字列で文字列を分けたときの前半の文字列	s.partition(sub)[0]
カラーコードの星マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='*', c=rgb)
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
両端キューの末尾	deq[-1]
赤いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ヒストグラムを描画して、その色をマルーンに設定する	plt.hist(データ列, color='maroon')
散布図に赤い△マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
データフレームを関数の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフを描画して、その色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
折れ線グラフの▲印を赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
本日が何月か知る	datetime.datetime.today().month
データフレームとデータ列を横方向にくっつける	pd.concat([df, ds], axis=1)
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
＜オプション＞NaNも無視しない	dropna = True
＜オプション＞グラフの色をコーンズシルクに設定する	color = 'cornsilk'
行列の行ごとの平均値	np.mean(aArray, axis=1)
赤い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='r')
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
折れ線グラフを描画して、その色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
折れ線グラフを描画して、その色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategray')
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
折れ線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
折れ線グラフを描画して、その色を赤に設定する	plt.plot(データ列, データ列2, color='red')
＜オプション＞改行なし	end = ''
折れ線グラフを描画してその色をコーンズシルクに指定する	plt.plot(データ列, データ列2, color='cornsilk')
ファイルをオープンする]	open(filepath)
nをn2だけ右シフトする	n >> n2
＜オプション＞ミントクリーム色を使う	color = 'mintcream'
データフレームのn行目を削除する	df.drop(n, axis=0)
日付を使う	import datetime
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームの未入力値を最大値で埋める	df.fillna(df.max())
データ列の未入力値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
書き込み用にファイルパスをオープンする]	open(filepath, mode='w')
星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*')
文字列がリストに含まれる	element in aList
データフレームのカラムの中に存在する文字列と文字列の数をカウントする	df[col].isin([value, value2]).sum()
集合に要素を追加する	aSet.add(element)
文字列をエンコーディングでバイト列にする	s.encode(encoding=encoding)
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
配列とリストの散布図にカラーコードの右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c=rgb)
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
ヒストグラムを描画して、その色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
n番目のシートをエクセルファイルファイルのデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
＜オプション＞チョコレート色を使う	color = 'chocolate'
要素が集合のメンバーでないか調べる	element not in aSet
数式の数値を求める	float(e)
行列のデータ型	aArray.dtype()
リストを横軸にして、リストの変遷を描画する	plt.plot(range(len(xdata)), xdata)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
＜オプション＞左三角マーカーを使う	marker = '<'
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
２つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームのpercent分位数	df.quantile(percent/100)
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
リストとリストについて暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
折れ線グラフに左三角マーカーを使う	plt.plot(データ列, データ列2, marker='<')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
タイムスタンプデータの曜日を見る	aDatetime.weekday()
日付データの曜日を整数で使う	aDate.weekday()
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
startからendの間のヒストグラムを用いて数列を描く	plt.hist(データ列, range=(start, end))
オーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orchid')
カウンタ同士でユニオン演算する	aCounter | aCounter2
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
２つの列によってデータフレームを昇順に整列して、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
二つの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムを描画して、その色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
実数を整数に変換する	int(x)
＜オプション＞色をローングリーンに変更する	color = 'lawngreen'
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
リストとリストの折れ線グラフを描画して、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
リストとリストについて散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
文字列リストにイテラブルを変換して、'改行で連結する	'\n'.join(map(str, iterable))
ヒストグラムを描画してその色を白に設定する	plt.hist(データ列, color='white')
データフレームの分散	df.var()
テキストファイルファイル名がかどうか	filename.endswith('.txt')
イテラブルを文字列リストに変換して空白を用いて連結する	' '.join(map(str, iterable))
データ列と数列についての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
要素が集合に含まれないか調べる	element not in aSet
箱ひげ図を２つ並べて描画する	plt.boxplot([データ列, データ列2])
濃い色を用いてリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
折れ線グラフの色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
データフレームを列によってまとめたグループ	df.groupby(column)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
リストとデータ列についての散布図に赤い菱形マーカーを描く	plt.plot(xdata, ydata, marker='D', c='r')
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
空のチェーンマップ	collections.ChainMap()
横棒グラフを描画して、棒の幅をxに変更する	plt.barh(ラベル列, データ列, width=x)
配列のデータ型を計算する	aArray.dtype()
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
実数が整数か調べる	x.is_integer()
フローラルホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='floralwhite')
明るい色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='bright')
タプル上でキーが未定義か	key not in aDict
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
散布図に星マーカーを使う	plt.plot(xdata, ydata, marker='*')
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
折れ線グラフの▼印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
＜オプション＞グラフの色をゴールドに設定する	color = 'gold'
辞書からキーで指定された値をポップする	aDict.pop(key)
データフレームの列を四捨五入して、整数型にする	df[col].round().astype(int)
タプル内の要素が全て真	all(aTuple)
実数はNaNか調べる	math.isnan(x)
ファイルが存在しないか調べる	not os.path.exists(filepath)
データ列の中に含まれる日付データの合計を数える	ds.isin([value]).sum()
赤い大バツマーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
タプルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
ヒストグラムの色を白くする	plt.hist(データ列, color='w')
配列の標準偏差を求める	np.std(aArray)
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
＜オプション＞ミディアムパープル色を使う	color = 'mediumpurple'
折れ線グラフを描画して、その色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
ヒストグラムの色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
ピアソン相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
折れ線グラフに緑色の丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
乱数シードを初期化する	random.seed()
文字列がタプルの要素か調べる	element in aTuple
淡いグラフの色を赤くする	plt.plot(xdata, ydata, linestyle='muted', color='r')
nをn2で割った余りをnに代入する	n %= n2
＜オプション＞ヘッダを自動的な連番に設定する	header = None
データフレームの末尾n行を抽出する	df.tail(n)
辞書のキーの一覧	aDict.keys()
折れ線グラフの色をリネンに指定する	plt.plot(データ列, データ列2, color='linen')
＜オプション＞色をフローラルホワイトに変更する	color = 'floralwhite'
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
実数の平方根	math.sqrt(x)
線グラフを描画して、その色をトマトにセットする	plt.plot(データ列, データ列2, color='tomato')
リストとリストについての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
＜オプション＞ドジャーブルー色を使う	color = 'dodgerblue'
リストとイテラブルについて青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
＜オプション＞グラフの色をミディアムオーキッドにセットする	color = 'mediumorchid'
折れ線グラフを描画してその色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
＜オプション＞ピーチパフ色を使用する	color = 'peachpuff'
グラフの色を濃くする	sns.set(pallete='deep')
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
ヒストグラムを描画して、その色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
プロットの題名をuntitledに設定する	plt.title(untitled)
右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>')
バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='x')
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列, データ列2, marker='v')
リストとリストのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
現在の作業ディレクトリ	os.getcwd()
最小値でデータ列のNaNを置き換える	ds.fillna(ds.min())
ヒストグラムを描画して、その色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
ベクトルの形状	aArray.shape
日付データからn日を減らす	aDate - datetime.timedelta(days=n)
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
破線グラフの色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
散布図に黒い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='k')
折れ線グラフを描画して、色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
データフレームの重複する行を数える	df.duplicated().sum()
複数の列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
白い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='w')
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
データフレームを二つの列ごとにグループ化し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
横棒グラフの色をカラーコードに指定する	plt.barh(ラベル列, データ列, color=rgb)
タプルを番号付けする	enumerate(aTuple)
文字列がタプルに含まれるか調べる	element in aTuple
折れ線グラフの右三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
リストとリストについての散布図にカラーコードのクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムを描画して、その色をリネンに設定する	plt.hist(データ列, color='linen')
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
カウンタをマッピングで更新する	aCounter.update(aDict)
折れ線グラフに三角マーカーを使う	plt.plot(データ列, データ列2, marker='^')
実部と虚部から複素数	complex(x, y)
配列と配列のパステル調のグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
データ列の最頻値	ds.mode()
第2引数で指定されたファイル名	sys.argv[1]
折れ線グラフを描画して、その色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
折れ線グラフを描画して、その色をティールに変更する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフの色をライトグレーにする	plt.plot(データ列, データ列2, color='lightgray')
nが2で割り切れないか調べる	n % 2 == 1
線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
スクリプトファイルの絶対パス	os.path.abspath(__file__)
データ列を小数点以下n桁で丸める	ds.round(n)
折れ線グラフを描画して、その色をサンディーブラウンに指定する	plt.plot(データ列, データ列2, color='sandybrown')
ヒストグラムを描画して、その色をブラックに設定する	plt.hist(データ列, color='black')
実数の複素数	complex(x)
折れ線グラフを描画して、その色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgrey')
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
データ列のユニークな値	ds.unique()
実数を切り下げる	math.floor(x)
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
＜オプション＞降順にする	ascending = False
折れ線グラフを描画して、その色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
列の平均値	ds.mean()
暗いカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
行列の列ごとの分散	np.var(aArray, axis=0)
nが負の整数か調べる	n < 0
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
データ列を折れ線グラフに描画して、マーカーを右三角にする	plt.plot(データ列, データ列2, marker='>')
データフレームを破壊的に'A'列と'B'列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
リストとリストのパステル調のグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
ファイルをバイナリモードとしてオープンして]fとする	f = open(filepath, mode='rb')
折れ線グラフにバツ印を使う	plt.plot(データ列, データ列2, marker='x')
黒い明るいを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
データ列とリストの折れ線グラフを描画する	plt.plot(xdata, ydata)
ロードされたモジュールの一覧を知る	sys.modules
データ列とリストの散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
データフレームのカラムの分散	df[col].var()
オブジェクトのバイトサイズ	sys.getsizeof(obj)
点線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dotted')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
リストとイテラブルのカラーコードの色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
方程式として数値の変数の解を算出する	sympy.solve(e, z)
カウンタ同士でユニオンを求める	aCounter | aCounter2
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
＜オプション＞グラフの色をモカシンに設定する	color = 'moccasin'
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
nからn2の範囲	range(n, n2)
折れ線グラフの右三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列2])
一点鎖線に折れ線グラフのスタイルを変更する	plt.plot(データ列, データ列2, linestyle='dashbot')
暗いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
折れ線グラフのダイアモンドマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
０で全要素を初期化された８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
リストとリストで折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
配列とリストの散布図を描画して、菱形マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
シードをnで固定化する	random.seed(n)
データフレームの列の名前の一覧	df.columns
データフレームをグループ化し、列に対し合計を算出する	df.groupby(column)[column2].sum()
折れ線グラフの菱形マーカーを黄色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
破線グラフの色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
折れ線グラフを描画して、その色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
バイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='violet')
両端キューが空か調べる	len(deq) == 0
破線グラフの色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
線幅nの折れ線を描く	plt.plot(xdata, ydata, linewidth=n)
組をナンバリングする	enumerate(aTuple)
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
データフレームを1000の位で四捨五入して、整数にする	df.round(-3).astype(int)
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
マップの浅いコピーを新規生成する	aDict.copy()
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
文字列がリストの要素か調べる	element in aList
濃いシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
ヒストグラムを描画して、その色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
データフレームを関数の値によってグループ化する	df.groupby(関数)
データフレームのカラムがxより大きいデータを選ぶ	df[df[column] > x]
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データ列を丸めて、整数型にする	ds.round().astype(int)
行列のユニークな要素とその位置を算出する	u, indices = np.unique(aArray, return_index=True)
配列の形状	aArray.shape
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
TSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
空の辞書	{}
明るいグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
リストを濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
ファイルをオープンして]、バイナリストリームを求める	open(filepath, mode='rb')
ヒストグラムを描画して、その色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
＜オプション＞貝殻色を使う	color = 'seashell'
組の要素をソートする	sorted(aTuple)
集合が空でないか調べる	len(aSet) != 0
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
サーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='salmon')
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X')
＜オプション＞カデットブルー色を用いる	color = 'cadetblue'
複数列の散布図を一度に描画する	sns.pairplot(df[[column, column2, column3]])
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
パステル調のの折れ線グラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
散布図を赤い三角マーカーで描く	plt.plot(xdata, ydata, marker='^', c='r')
データフレームの尖度	df.skew()
配列とリストの濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
n番目のシートをエクセルファイルファイルからデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
＜オプション＞グラフの色をダークオーキッドに設定する	color = 'darkorchid'
ヒストグラムを描画して、その色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
タイムスタンプデータがタイムスタンプデータより先	aDatetime < aDatetime2
リストのn番目の値を削除する	del aList[n]
集合から全要素を取り除く	aSet.clear()
リストとリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
パステル調のを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
リストと配列の散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
現在が月曜日か調べる	datetime.datetime.today().weekday() == 0
折れ線グラフに大きさnの▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
昇順にデータフレーム全体をインデックスでソートする	df.sort_index(ascending=True)
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
日付データが土曜日か調べる	aDate.weekday() == 5
＜オプション＞色をライトイエローに設定する	color = 'lightyellow'
ヒストグラムを描画して、その色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
折れ線グラフを描画して、その色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
＜オプション＞サーモンにグラフの色を設定する	color = 'salmon'
＜オプション＞８ビット整数型を使う	dtype = np.int8
ヒストグラムを描画してその色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
リネン色の線グラフを描画する	plt.plot(データ列, データ列2, color='linen')
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
タイムスタンプデータからn分減らす	aDatetime - datetime.timedelta(minutes=n)
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
データフレームの内で列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
青い濃いをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='b')
nの八進文字列	oct(n)[2:]
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
部分文字列か調べる	sub in s
＜オプション＞バッファリングのサイズを設定する	buffering = 4096
現在のタイムスタンプ	int(time.time())
データフレームからランダムに抽出する	df.sample()
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
データ列を分割する	pd.cut(ds, aList)
両端キューの末尾に要素を追加する	deq.append(element)
＜オプション＞グラフの色をアクアに設定する	color = 'aqua'
プロットのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
データフレームを'A'列によって並べ直してNaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
集合にイテラブルを追加更新する	aSet.update(iterable)
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
全ての数字	string.digits
折れ線グラフのバツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumseagreen')
＜オプション＞マーカーを下三角に変更する	marker = 'v'
タプルの要素を小さい順にソートする	sorted(aTuple, reverse=True)
集合が空か調べる	len(aSet) == 0
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
平均値でデータ列の欠損値を補う	ds.fillna(ds.mean())
折れ線グラフを描画してその色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
タプルをナンバリングする	enumerate(aTuple)
0から始まる無限数列	itertools.count()
散布図に赤い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='r')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
1からnまでの整数列	list(range(1, n+1))
リストと配列についての散布図に黒色の大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
データフレームのカラムの欠損値を最頻値で補う	df[col].fillna(df[col].mode().iloc[0])
実数を小数点以下第一位で丸める	round(x, 1)
散布図に暗い色のマーカーを用いる	plt.plot(xdata, ydata, c='dark')
インディゴ色の線グラフを描画する	plt.plot(データ列, データ列2, color='indigo')
ふたつの集合が互いに素かどうか	aSet.isdisjoint(aSet2)
＜オプション＞イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
折れ線グラフの色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
実数の双曲線余弦	math.cosh(x)
ヒストグラムを描画して、その色をピンクに変更する	plt.hist(データ列, color='pink')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
二つのリストを改行で区切ってプリントする	print(value, value2, sep='\n')
文字列中に部分文字列が存在しないかどうか調べる	sub not in s
＜オプション＞グラフの色をバリーウッドに設定する	color = 'burlywood'
n行をデータフレームから重複を認めてランダムにサンプリングする	df.sample(n, replace=True)
＜オプション＞タブをセパレータで使う	sep = '\t'
散布図を黒いダイアモンドマーカーで描画する	plt.plot(xdata, ydata, marker='D', c='k')
文字列を黄色にする	f'\033[33m{value}\033[0m'
変数について数式の微分を行う	sympy.diff(e, z)
実行結果を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t')
文字列の無限イテラブル	itertools.repeat(element)
文字列から部分文字列を全て取り除く	s.replace(sub, '')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
折れ線グラフの三角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
平均値と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
SJISとしてファイルパスを開く]	open(filepath, encoding='shift_jis')
n2分のn	n / n2
リストとリストについて散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
＜オプション＞トマトを使う	color = 'tomato'
黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
リストを反転する	reversed(aList)
黄色色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellow')
ユーザが整数を入力する	int(input())
predicateFuncを適用したとき真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
折れ線グラフを描画して、その色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
ヒストグラムを描画して、色を黄色に設定する	plt.hist(データ列, color='yellow')
実数の整数部	math.modf(x)[1]
データフレームのカラムをヒストグラムとして可視化する	plt.hist(df[column])
線グラフの色を貝殻に指定する	plt.plot(データ列, データ列2, color='seashell')
文字列が全てアルファベット	s.isalpha()
文字列をセパレータで区切り、、列挙する	s.split(sep)
文字列が平仮名かどうか	('ぁ' <= ch <= 'ん')
線グラフを描画して色をサーモンにする	plt.plot(データ列, データ列2, color='salmon')
データフレームの第一四分位数	df.quantile(0.25)
データフレームを各列毎にグループ化して文字列というグループの個数を求める	df.groupby(column).size()[s]
nが正の数か調べる	n > 0
配列を転置する	aArray.T
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
要素が辞書の値に含まれていない	element not in aDict.values()
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
折れ線グラフの色を文字列に設定する	plt.plot(xdata, ydata, color=s)
グラフの背景色を暗くする	sns.set(style='darkgrid')
折れ線グラフを描画して、その色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
＜オプション＞ブラウン色を使う	color = 'brown'
折れ線グラフを描画して、その色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
折れ線グラフのポイントマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
双方向キューのサイズ	len(deq)
＜オプション＞グラフの色をカデットブルーに設定する	color = 'cadetblue'
データフレームを'A'列の値によってグループ化し、要約統計量を計算する	df.groupby('A').describe()
空文字	''
nわるn2	n / n2
折れ線グラフの色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
＜オプション＞ピンクにグラフの色を設定する	color = 'pink'
データ列の中に日付データと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
実数の指数	math.frexp(x)[1]
配列の行ごとの平均値	np.mean(aArray, axis=1)
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
ファイルパスをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
無限にカウントアップする	itertools.count()
折れ線グラフの色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
ポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.')
グラフの中のy軸にuntitledというラベルを付ける	plt.ylabel(untitled)
明るい色でヒストグラムを描画する	plt.hist(xdata, color='bright')
データフレームを列名リストによってソートし、、更新する	df.sort_values(by=column, inplace=True)
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
リストと配列の散布図を描画して、色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
リストとリストの散布図を描画して、その大きさをnに変更する	plt.scatter(xdata, ydata, s=n)
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフに線幅nのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
タプルの末尾を取り除く	aTuple[:-1]
線グラフを描画して、色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
整数nが組のどれかか調べる	n in aTuple
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
＜オプション＞グラフの色をオールドレースに設定する	color = 'oldlace'
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
文字列を文字リストに変換する	list(s)
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
＜オプション＞ダイアモンドマーカーを描画する	marker = 'D'
データフレームのカラムの中にいくつがあるかカウントする	df[col].isin([value]).sum()
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
イテラブルとリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
Pandasのバージョンを見る	print(pd.__version__)
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
ヒストグラムを描画して、その色をダークレッドに設定する	plt.hist(データ列, color='darkred')
列ごとにデータフレームをグループ化してそれぞれのグループごとの個数を計算する	df.groupby(column).count()
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
データフレームの正規分布に対する上下広がり	df.skew()
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
リストとイテラブルについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
柱状グラフを２つ並べてプロットする	plt.hist([データ列, データ列2], color=['b', 'r'])
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='paleturquoise')
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
データ列をビン分割する	pd.cut(ds, aList)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
＜オプション＞グラフの色をフクシアに設定する	color = 'fuchsia'
折れ線グラフの透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
ヒストグラムを描画して色をモカシンに設定する	plt.hist(データ列, color='moccasin')
nが無限に続くリストを求める	itertools.repeat(n)
＜オプション＞プラム色を使う	color = 'plum'
折れ線グラフを描画して色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
折れ線グラフを描画して、その色をミディアムバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='mediumvioletred')
青緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
読み込みモードでファイルをオープンして]fとする	f = open(filepath, mode='r')
ファイルからnバイト、読み込む	f.read(n)
実数を実数で割って、切り捨てる	x // y
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
リストとリストの散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
データフレームのリストカラムを1000の位で丸めて整数型にする	df[aList].round(-3).astype(int)
正接の逆数	math.atan(x)
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの数値をまとめて丸める	df.round()
実行環境がMacOSか調べる	sys.platform.startswith('darwin')
要素ひとつのりスト	[element]
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
空白文字を全部見る	string.whitespace
変数がマイナス無限大に近づく場合、数式の極限値を求める	sympy.limit(e, z, -oo)
要素が全て初期値の配列を作る	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategray')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
グラフの中のフォントをfontNameに設定する	sns.set(font=fontName)
リストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
nが-9以上、9以下か調べる	-9 <= n <= 9
データフレームから指定された列を抽出する	df[[column]]
filepathに現在のワーキングディレクトリを変更する	os.chdir(os.dirname(filepath))
＜オプション＞ライトコーラル色を使用する	color = 'lightcoral'
＜オプション＞グリーン色を使う	color = 'green'
イテラブルを文字列リストに変換して、'改行によって結合する	'\n'.join(map(str, iterable))
リストをビン数nとしてビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ファイルを絶対パスに変換する	os.path.abspath(filepath)
マルーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='maroon')
両端キューのn番目に要素を挿入する	deq.insert(n, element)
＜オプション＞グラフの色をブラックに設定する	color = 'black'
有理数を使う	import fractions
折り返しをオフに変更する	pd.set_option('expand_frame_repr', False)
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgreen')
＜オプション＞青色を使う	color = 'blue'
線グラフを描画して、色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
アルファベットの文字列	string.ascii_letters
リストを並べる	sorted(aList)
グラフの用途を画面に設定する	sns.set(context='notebook')
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
xでデータフレームの欠損値を埋める	df.fillna(x)
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ディレクトリを求める	os.getcwd()
グラフの用途を論文に設定する	sns.set(context='paper')
ふたつの集合の共通部分	aSet.intersection(aSet2)
折れ線グラフを描画して、その色をレベッカパープルに変更する	plt.plot(データ列, データ列2, color='rebeccapurple')
折れ線グラフを描画して色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
濃いの折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
predicateFuncが真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
折れ線グラフを描画して、その色をライトグレーにセットする	plt.plot(データ列, データ列2, color='lightgray')
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
データラベルの位置を指定する	plt.legend(loc=(x, y))
ベクトルのユニークな要素とその個数を算出する	u, counts = np.unique(aArray, return_counts=True)
折れ線グラフを描画して、色をダークレッドに設定する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフのラベルをuntitledに設定する	plt.plot(xdata, ydata, label=untitled)
＜オプション＞ミディアムシアグリーン色を使う	color = 'mediumseagreen'
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
＜オプション＞セパレータをタブにする	sep = '\t'
イテラブルからn個サンプリングする	random.sample(iterable, k=n)
散布図にカラーコードの三角マーカーを使用する	plt.plot(xdata, ydata, marker='^', c=rgb)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
＜オプション＞ダークオーキッド色を使う	color = 'darkorchid'
文字列を中央寄せにする	s.center(文字列幅)
データフレームを1000の位で四捨五入して整数型にする	df.round(-3).astype(int)
オブジェクトが浮動小数点数型か	isinstance(obj, float)
商と余りを同時に計算する	divmod(x, y)
ヒストグラムの色を青くする	plt.hist(データ列, color='b')
列によってで破壊的にデータフレームをソートする	df.sort_values(by=column, inplace=True)
小さい順に２つの列によってデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=True)
＜オプション＞カデットブルー色を使う	color = 'cadetblue'
文字列中に部分文字列が含まれるか調べる	sub in s
＜オプション＞ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
文字列を右トリムする	s.rstrip()
実数の双曲線正弦	math.sinh(x)
カラーコードの大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
オールドレース色の線グラフを描画する	plt.plot(データ列, データ列2, color='oldlace')
乱数シードをnで固定する	random.seed(n)
＜オプション＞グラフの色をロージーブラウンに設定する	color = 'rosybrown'
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
今日の年数を見る	datetime.datetime.today().year
淡い色の折れ線グラフを描画し、、その線幅をnにする	plt.plot(xdata, ydata, linewidth=n, color='muted')
eの実数乗	math.exp(x)
n割るn2を切り上げる	(n + n2 - 1) // n2
データ列とリストの折れ線を描いて、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
ヒストグラムを描画して、その色をシアンに設定する	plt.hist(データ列, color='cyan')
折れ線グラフを描画して、その色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
数値をパラメータについてn階微分する	sympy.diff(e, z, n)
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
折れ線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
コマンドラインフラグの状態を知る	sys.flags
文字列の開始位置から部分文字列を探す	s.find(sub, start)
＜オプション＞ダークグリーンを用いる	color = 'darkgreen'
ヒストグラムを描画して、その色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データフレームのカラムの欠損値をxにセットする	df[col].fillna(x)
全要素を０で初期化された三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
日付データの曜日を使う	aDate.weekday()
カラーコードのバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
上限のある両端キューを作る	collections.deque(maxlen=n)
浮動小数点数を文字列にする	str(x)
折れ線グラフのバツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
データフレームのカラムの母標準偏差を計算する	df[col].std(ddof=0)
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
数式を因数分解する	sympy.factor(e)
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
折れ線グラフのマーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
＜オプション＞ダークブルー色を使う	color = 'darkblue'
タプルをnからナンバリングする	enumerate(aTuple, start=n)
＜オプション＞SJISを使う	encoding = 'shift_jis'
データフレームを転置する	df.T
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
＜オプション＞グリーン色を使用する	color = 'green'
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
コレクションを使用する	import collections
文字列が文字列より辞書順で前か調べる	s < s2
折れ線グラフを描画して、その色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフの星印の大きさをnに変更する	plt.plot(データ列, データ列2, marker='*', markersize=n)
データフレームを列でソートして更新する	df.sort_values(by=column, inplace=True)
データフレームを列の値によって集計して、各グループごとの合計を計算する	df.groupby(column).sum()
＜オプション＞スラグレー色を使う	color = 'slategray'
浮動小数点数のタンジェントを求める	math.tan(x)
淡いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
＜オプション＞ミスティローズにグラフの色を変更する	color = 'mistyrose'
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategray')
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
プログラムのファイル名を知る	sys.argv[0]
配列についての柱状図を色差別ないで描く	plt.hist(xdata, color='colorblind')
カラムの中にと文字列が存在するかテストする	ds.isin([value, value2])
折れ線グラフを描画してその色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
辞書から多重集合を作る	collections.Counter(aDict)
2つの数値をコロンで区切ってプリントする	print(value, value2, sep=':')
数式を部分分数に展開する	sympy.apart(e)
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
リストとリストについて散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
大きい順にデータフレームを列名リストを用いてによって並べる	df.sort_values(by=column, ascending=False)
両端キュー中の要素のインデックス	deq.index(element)
散布図に黒色の下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
ヒストグラムを描画して、その色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
＜オプション＞デピンク色を使う	color = 'deeppink'
リストを明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
文字列の最後から部分文字列を取り除く	s.rstrip(sub)
行列の最小値	np.min(aArray)
データフレームのカラムの分	df[col].dt.minute
＜オプション＞グラフの色をミスティローズに設定する	color = 'mistyrose'
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
＜オプション＞昇順にする	ascending = True
データフレームの列を百の位で丸める	df[col].round(-2)
ヒストグラムを描画してその色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
＜オプション＞アクアマリン色を使用する	color = 'aquamarine'
ヒストグラムを二つ並べて描く	plt.hist([データ列, データ列2], color=['b', 'r'])
辞書をJSONフォーマットのインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データ列の値が未入力値か調べる	ds.isna()
タプルの項目名の一覧	aDict.keys()
＜オプション＞ダークシアン色を用いる	color = 'darkcyan'
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフを描画して、色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
'A'列によって小さい順に破壊的にデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフのポイントマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
データフレームを列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
淡いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
配列の差	aArray - aArray2
赤いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
折れ線グラフの色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
散布図にカラーコードのバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c=rgb)
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
タプルをリストに変換する	list(aTuple)
折れ線グラフのポイントマーカーの大きさをnにセットする	plt.plot(データ列, データ列2, marker='.', markersize=n)
カウンタを高頻出方から列挙する	aCounter.most_common()
パステル調の色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
2つの変数を順に表示する	print(value, value2)
＜オプション＞セパレータを改行にする	sep = '\n'
リストと配列についての散布図に黒い△マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
折れ線グラフの色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
書式としてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ファイルパスからの入力ストリームを求める	open(filepath)
青色の線グラフを描画する	plt.plot(データ列, データ列2, color='blue')
リストをイミュータブルにする	tuple(aList)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
ヒストグラムを描画して、色をカーキに設定する	plt.hist(データ列, color='khaki')
散布図に赤色のダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='r')
カラムの欠損値を中央値で補う	ds.fillna(ds.median())
折れ線グラフを描画して、その色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
＜オプション＞エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
データフレームから指定された三つの列のみ取り出す	df[[column, column2, column3]]
カラーコードの丸マーカーをデータ列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
代数計算を使用する	import sympy
リストをnからナンバリングする	enumerate(aList, start=n)
リストとリストの青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
右から文字列を部分文字列で区切る	s.rsplit(sub)
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
リストとデータ列についての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
ひとつでもアルファベットが文字列内に含まれるか確認する	any(c.isalpha() for c in s)
両端キューを空にする	deq.clear()
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
正規表現patternでまとめてデータフレームの値をreplに置き換える	df.replace(pattern, repl, regex=True)
＜オプション＞グラフの色を紺碧に設定する	color = 'azure'
二つのリストから辞書	dict(zip(aList, aList2))
リストをカウンタにする	collections.Counter(iterable)
数列と数列のカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
データフレームのカラムのメディアン	df[col].median()
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
ファイルをクローズする	f.close()
nが3で割り切れるか調べる	n % 3 == 0
数値を簡単化する	sympy.sympify(e)
＜オプション＞グラフの色をデピンクに設定する	color = 'deeppink'
データフレームのカラムを100の位で丸める	df[col].round(-2)
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
線グラフを描画してその色をブルーバイオレットに変更する	plt.plot(データ列, データ列2, color='blueviolet')
＜オプション＞マーカーを右三角に変更する	marker = '>'
数値をシアンで表示する	print(f'\033[36m{value}\033[0m')
列によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
ヒストグラムを描画して、その色をディープスカイブルーにセットする	plt.hist(データ列, color='deepskyblue')
黄色い四角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
nが偶数か調べる	n % 2 == 0
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
ヒストグラムを描画して、色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
最頻値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
カラーコードの左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
破線グラフの色をパステル調のに変更する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
列を累加したイテラブル	itertools.accumulate(iterable)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
ヒストグラムを描画して、その色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
＜オプション＞マゼンタ色を使う	color = 'magenta'
＜オプション＞パレットトルコイズ色を使う	color = 'paleturquoise'
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
nがn2の倍数	n % n2 == 0
句読点文字を使う	string.punctuation
＜オプション＞読み込まない列番号をnamesで指定する	skiprows = names
数列を暗い色のヒストグラムとして描く	plt.hist(xdata, color='dark')
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
データフレームのカラムが何日か見る	df[col].dt.day
データフレームからn番目の列を消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
文字列の先頭でパターンに大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの列の欠損値を前の値に設定する	df[col].fillna(method='ffill')
＜オプション＞グラフの色をグレーに設定する	color = 'gray'
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
nはn2かどうか	n == n2
折れ線グラフを描画してその色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
散布図に黒い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='k')
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
散布図を色差別ない色のマーカーで描く	plt.plot(xdata, ydata, c='colorblind')
黒色の淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
イテラブルとデータ列について暗い色の折れ線をプロットし、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
＜オプション＞ライトグリーン色を使う	color = 'lightseagreen'
＜オプション＞インディゴ色を使う	color = 'indigo'
文字列を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
二つのデータフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
ヒストグラムを描画して、その色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
グリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='green')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
＜オプション＞紺色を使う	color = 'darkblue'
折れ線グラフを一点鎖線で描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
散布図にバツマーカーを使う	plt.plot(xdata, ydata, marker='x')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
データフレームの行と列を入れ替える	df.T
プラットフォームのコードポイントの最大値	sys.maxunicode
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
＜オプション＞ブランチドアーモンド色を使う	color = 'blanchedalmond'
辞書から最後の項目をポップする	aDict.popitem()
折れ線グラフの色をシアンにする	plt.plot(データ列, データ列2, color='cyan')
黒い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='k')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
＜オプション＞グラフの色をライムグリーンに設定する	color = 'limegreen'
文字列リストをつなげる一つの文字列にする	''.join(aStringList)
列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
グラフで日本語を表示できるようにする	sns.set(font='IPAexGothic')
ヒストグラムを描画して、その色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
角度のラジアン	math.radians(degree)
データフレームを'A'列で小さい順にソートする	df.sort_values(by='A', ascending=True)
折れ線グラフを描画して、色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategray')
データ列と数列についての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
ユーザから入力される	int(input())
＜オプション＞ダークカーキ色を使う	color = 'darkkhaki'
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
配列から重複を除いた行列を作成する	np.unique(aArray)
イテラブルの全順列	itertools.permutations(iterable)
線グラフの色をオールドレースに変更する	plt.plot(データ列, データ列2, color='oldlace')
赤い上三角マーカーをデータ列とデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='r')
ヒストグラムを描画して、その色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
データ列を明るい色の柱状グラフで描画する	plt.hist(xdata, color='bright')
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
折れ線グラフに大きさnの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
ヒストグラムを描画して、色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
nからいつまでもカウントアップする	itertools.count(start=n)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
データ列とラベル列を指定して、横棒をプロットする	plt.barh(ラベル列, データ列)
＜オプション＞グラフの色をペールグリーンに設定する	color = 'palegreen'
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
ヒストグラムを描画して、その色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
タプルの要素をソートする	sorted(aTuple)
データフレームを正規表現でまとめて置き換える	df.replace(pattern, repl, regex=True)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
折れ線グラフを描画して、その色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
カラーコードの右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
データフレームの先頭	df.head()
部分文字列で部分文字列が始まるかどうか調べる	s.startswith(sub)
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
折れ線グラフを描画してその色を青に指定する	plt.plot(データ列, データ列2, color='blue')
列によってデータフレームを並べ直して、下位n件を取り出す	df.sort_values(columns).tail(n)
折れ線グラフを描画して、その色をパープルに変更する	plt.plot(データ列, データ列2, color='purple')
＜オプション＞符号なし８ビット整数型を用いる	dtype = np.uint8
＜オプション＞色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
リストとデータ列の折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
辞書の項目名一覧を参照する	list(aDict)
＜オプション＞ダイアモンドマーカーを使う	marker = 'D'
カウンタから辞書を引く	aCounter.subtract(aDict)
配列が何次元か	aArray.ndim
イテラブルとリストについての散布図を淡い色でプロットする	plt.plot(xdata, ydata, c='muted')
明るいグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='bright', color='k')
折れ線グラフのバツ印を青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
リストとリストについての散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
0からNまでの配列を作成する	np.arange(N)
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
プロットで使うx軸の軸名をuntitledに指定する	plt.xlabel(untitled)
ファイルからn文字、読み込む	f.read(n)
＜オプション＞ミッドナイトブルーに色を設定する	color = 'midnightblue'
タプルのn番目からn2番目までの部分	aTuple[n:n2]
赤い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
＜オプション＞丸マーカーを使う	marker = 'o'
nが一桁の数か調べる	0 <= n <= 9
行列の分散	np.var(aArray)
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
＜オプション＞グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
リストとリストで濃いグラフを描画して線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
ヒストグラムを描画して、その色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
タプルを引数として展開して表示する	print(*aTuple)
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
行列を転置する	aArray.T
淡いピンク色色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightpink')
散布図にカラーコードの下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフを描画して、色をミスティローズにする	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフを描画して、その色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
データ列のNaNを直後の値で埋める	ds.fillna(method='bfill')
度数分布図をstartからendまでの間で描く	plt.hist(データ列, range=(start, end))
文字列が文字列より辞書順で前かどうか調べる	s < s2
線グラフを描画して、その色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
文字列が正規表現にマッチさせる	re.match(pattern, s)
本日の日数を求める	datetime.datetime.today().day
全ての８進数字	string.octdigits
変数を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
xを整数に変換する	int(x)
日付データが月曜日か調べる	aDate.weekday() == 0
ヒストグラムを描画して、その色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
集合の補集合を使う	aSet.difference(aSet2)
ヒストグラムを描画して、その色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
小麦色色の線グラフを描画する	plt.plot(データ列, データ列2, color='wheat')
データフレームのカラムのどの値が頻出か見る	df[col].mode()
色差別ないの折れ線の線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
折れ線グラフに線幅nの菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
リストとイテラブルとして暗いを描画してその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
イテラブルとリストで折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
等差数列を配列に変換する	np.arange(開始値, 終端値, 等差)
黒色の右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
全要素を０で初期化された符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
実数を千の位で丸める	round(x, -3)
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
パターンに文字列全体を複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
＜オプション＞赤色を使用する	color = 'red'
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
キーがマップ上で未定義か	key not in aDict
データフレームの指定された列の名前一覧の列のみ選択する	df[columns]
＜オプション＞読み込みモードにセットする	mode = 'r'
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
ダークレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
散布図に赤色のバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
データフレームを複数の列でによって破壊的にソートする	df.sort_values(by=column, inplace=True)
文字列をキャピタライズする	s.capitalize()
青紫色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='violet')
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
＜オプション＞線幅をnに設定する	linewidth = n
タンジェント	math.tan(x)
折れ線グラフを描画して、その色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
文字列を積極的に小文字に変換する	s.casefold()
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームの未入力値を前の値に設定する	df.fillna(method='ffill')
データフレームを'A'列と'B'列によって降順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ヒストグラムを描画して色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
データ列とリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
文字列内に英字が含まれる	any(c.isalpha() for c in s)
散布図に明るい色のマーカーを使う	plt.plot(xdata, ydata, c='bright')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
＜オプション＞オールドレース色を使う	color = 'oldlace'
実数の二乗	x ** 2
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
＜オプション＞セパレータをカンマにする	sep = ','
リストをy座標、配列をx座標として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
リストと配列について青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
データ列は正規分布からどの程度、歪んでいるか調べる	ds.kurt()
リストを淡い色のヒストグラムで描画する	plt.hist(xdata, color='muted')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
データ列の時	ds.dt.hour
リストとリストの折れ線グラフを描画して、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
辞書から項目名の値をエラーなく見る	aDict.get(key, None)
配列とリストについて散布図を描画してマーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
折れ線グラフを描画して、その色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
＜オプション＞グラフの色をピンクに設定する	color = 'pink'
ヒストグラムを描画して、色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
＜オプション＞オーキッド色を使う	color = 'orchid'
空のキューを作る	collections.deque()
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
＜オプション＞欠損値を先頭にする	na_position = 'first'
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
＜オプション＞ピーチパフにグラフの色をする	color = 'peachpuff'
日付時刻データが火曜日か確認する	aDatetime.weekday() == 1
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
ヒストグラムの色をナバホホワイトにする	plt.hist(データ列, color='navajowhite')
ヒストグラムを描画して、その色をシルバーに設定する	plt.hist(データ列, color='silver')
リストとリストの散らばりを可視化する	plt.scatter(xdata, ydata)
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
折れ線グラフに緑色の左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
配列とリストの散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフの色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
赤い色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
＜オプション＞グラフの色をダークスラテグレーに指定する	color = 'darkslategray'
標準入力を得る	sys.stdin
ヒストグラムを描画して、その色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
JSONファイルのfをデータに変換する	json.load(fin)
散布図に黒い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
文字列を式として評価する	eval(s)
英文字から一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
散布図にカラーコードの星マーカーを使う	plt.plot(xdata, ydata, marker='*', c=rgb)
ヒストグラムを描画して、その色をオレンジに設定する	plt.hist(データ列, color='orange')
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
Pandasで、データ列のUNIX時間からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図に黒い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='k')
折れ線グラフの左三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
＜オプション＞アンティークホワイトを使う	color = 'antiquewhite'
ヒストグラムの色をダークレッドにする	plt.hist(データ列, color='darkred')
ラジアンの角度を求める	math.degrees(x)
リストとリストについて破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
ヒストグラムを描画する	plt.hist(データ列)
数値を双方向キューにエンキューする	deq.appendleft(element)
データフレームの列がxでない行をフィルタする	df[df[column] == x]
ヒストグラムを描画して、その色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
3つの文字列を順に出力する	print(value, value2, value3)
折れ線グラフを描画して、その色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
データフレームを列によって集約して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
実数が負の数かどうか調べる	x < 0
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
折れ線グラフのマーカーを右三角にする	plt.plot(データ列, データ列2, marker='>')
nを切り捨てながら半分にする	n //= 2
散布図に黒い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='k')
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
散布図に赤色の菱形マーカーを用いる	plt.plot(xdata, ydata, marker='D', c='r')
リストを配列にする	np.array(aList)
赤い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
＜オプション＞コーンフラワーブルー色を使う	color = 'cornflowerblue'
両端キューのstart番目からend番目までの部分値	collections.deque(itertools.islice(deq, start, end))
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
折れ線グラフを描画して、色を白くする	plt.plot(データ列, データ列2, color='w')
連立方程式を解く	sympy.solve([e, e2])
折れ線グラフに線幅nの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
リストの末尾	aList[-1]
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
全ての空白文字	string.whitespace
グラフのサイズを縦height横widthに設定する	plt.figure(figsize=(width, height))
配列を2次元1行に変形する	aArray.reshape(1, -1)
実数の逆双曲線正弦	math.asinh(x)
ミディアムブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumblue')
赤色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='r')
＜オプション＞改行を分割記号で使う	sep = '\n'
オブジェクトは集合クラスか調べる	isinstance(obj, set)
＜オプション＞ミッドナイトブルー色を用いる	color = 'midnightblue'
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategrey')
ヒストグラムを描画して、その色をシスルに設定する	plt.hist(データ列, color='thistle')
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
黒い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
データフレームのカラムの中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
パステル調のの折れ線を配列とリストで描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o')
異なるカラムをキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
＜オプション＞三角マーカーを使う	marker = '^'
黒い星マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='*', c='k')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフの星印を黄色くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
データフレームのカラムの欠損値を直前の値に指定する	df[col].fillna(method='ffill')
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
データフレームの列の種類	df.info()
リスト中の要素は全て真か	all(aList)
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
浮動小数点数の双曲線正接の逆数	math.atanh(x)
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
折れ線グラフを描画して、その色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
データフレームの各グループごとの分散	df.groupby(column).var()
配列とリストについて散布図を描画し、、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
＜オプション＞３二ビット整数型を用いる	dtype = np.int16
二つの実行結果を改行で区切ってプリントする	print(value, value2, sep='\n')
配列の標準偏差	np.std(aArray)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データフレームを行によって並べる	df.sort_index()
n番目のシートをエクセルデータファイルの読む	pd.read_excel(filename, sheet_name=n)
折れ線グラフの色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
＜オプション＞ディムグレーにグラフの色を設定する	color = 'dimgray'
データフレームを各カラムと列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
＜オプション＞文字列をセパレータで使う	sep = s
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
文字列を複数行対応としてパターンで分割する	re.split(pattern, s, flags=re.MULTILINE)
＜オプション＞グラフの色をミディアムパープルにする	color = 'mediumpurple'
両端キューの大きさ	len(deq)
＜オプション＞どの列もインデックスに設定しない	index_col = None
折れ線グラフを描画して、その色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
淡いグラフをリストと配列で描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
自然数個のものからk個取り出したときの並べ方を計算する	math.perm(n, k)
リストとリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
ヒストグラムを描画して、その色をライムに設定する	plt.hist(データ列, color='lime')
折れ線グラフの色を赤くする	plt.plot(データ列, データ列2, color='r')
＜オプション＞スラグレーにグラフの色を指定する	color = 'slategrey'
ヒストグラムを描画して、その色をスノーに設定する	plt.hist(データ列, color='snow')
配列から重複を除いた配列を作る	np.unique(aArray)
折れ線グラフのスタイルを破線に変更する	plt.plot(データ列, データ列2, linestyle='dashed')
分割数nで配列をビン分割する	pd.cut(aArray, n)
配列とリストについて暗いグラフを描画してその色を黒色に設定する	plt.plot(xdata, ydata, linestyle='dark', color='k')
＜オプション＞下三角マーカーを使う	marker = 'v'
ヒストグラムを描画して、その色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
両端キューのstart〜endの部分値を使う	collections.deque(itertools.islice(deq, start, end))
データ列の日を使う	ds.dt.day
線グラフを描画して、その色をミッドナイトブルーに指定する	plt.plot(データ列, データ列2, color='midnightblue')
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
実数が無限大か確認する	math.isinf(x)
オブジェクトが組の要素でない	element not in aTuple
折れ線グラフを描画して色をデピンクにセットする	plt.plot(データ列, データ列2, color='deeppink')
今日の月	datetime.datetime.today().month
文字列を改行で区切る	s.splitlines()
カウンタ間で共通部分演算する	aCounter & aCounter2
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
データフレームの欠損値を最小値で置換する	df.fillna(df.min())
データフレームを各列と列の組み合わせ毎に集約して、平均値を算出する	df.groupby([column, column2], as_index=False).mean()
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
ファイルパスのセパレータ記号	os.sep
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
＜オプション＞スレートブルーを使う	color = 'slateblue'
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列, データ列2, color='limegreen')
折れ線グラフのマーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
＜オプション＞追加モードを使う	mode = 'a'
大きさnでデータ列とリストについての散布図を描画する	plt.scatter(xdata, ydata, s=n)
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='grey')
カウンタ同士で積集合演算する	aCounter & aCounter2
＜オプション＞データ型を指定する	dtype = np.uint8
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategray'
中央値でデータフレームのNaNを埋める	df.fillna(df.median())
カラーコードの丸マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
折れ線グラフに緑色のクロス印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
折れ線グラフを描画して、その色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
ヒストグラムを描画して、その色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
小数点数は有限か	math.isfinite(x)
逆順の両端キュー	reversed(deq)
偽	False
折れ線グラフの菱形印を青色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
紺色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
ヒストグラムを描画して、その色をアリスブルーにセットする	plt.hist(データ列, color='aliceblue')
整数nを二進リテラルに変換する	bin(n)
ファイルからファイル名を取り出す	os.path.basename(filepath)
中央値で配列をビン分割する	pd.qcut(aArray, 2)
ヒストグラムを描画して、色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
折れ線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフの色をサドルブラウンにセットする	plt.plot(データ列, データ列2, color='saddlebrown')
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
辞書からカウンタを作る	collections.Counter(aDict)
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
配列をヒストグラムにする	plt.hist(aArray)
リストとデータ列の折れ線グラフを描画し、、色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
折れ線グラフの色をパープルにセットする	plt.plot(データ列, データ列2, color='purple')
リストの最後に要素を加える	aList.append(element)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumturquoise')
リストとリストについて散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
2つの列でデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
線グラフを描画して、その色をコーンフラワーブルーに変更する	plt.plot(データ列, データ列2, color='cornflowerblue')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslateblue')
データ列をヒストグラムにする	plt.hist(ds)
＜オプション＞ヘッダを自動的な連番に変更する	header = None
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
黒い左三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='<', c='k')
＜オプション＞グラフの色をライトコーラルに設定する	color = 'lightcoral'
イテラブルと配列の散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
データフレームの値をValueMapでまとめて置換する	df.replace(ValueMap)
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームの列の各値が何回出現するか見る	df[col].value_counts()
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
二つの文字列は等しくないか調べる	s != s2
数列とリストについての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
データフレームとデータ列を横向きに合体させる	pd.concat([df, ds], axis=1)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
折れ線グラフを描画して、色をライトコーラルに指定する	plt.plot(データ列, データ列2, color='lightcoral')
データフレームの列をヒストグラムにする	plt.hist(df[column])
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
＜オプション＞グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
＜オプション＞黄色に色を変更する	color = 'yellow'
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
実数を万の位で丸める	round(x, -4)
タン色の線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
日付時刻データが日付時刻データと同時か確認する	aDatetime == aDatetime2
ガンマ関数の値	math.gamma(x)
データフレームを列を用いて昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
暗いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
ヒストグラムを描画して、その色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
折れ線グラフに黄色い▽印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
配列の合計値を求める	np.sum(aArray)
リストから配列を作る	np.array(aList)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
＜オプション＞文字コードを文字コードtextに変更する	encoding = text
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
ヒストグラムを描画して色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
データフレームを1000の位で丸める	df.round(-3)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
ヒストグラムを描画して、その色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
三自然数のGCDを算出する	math.gcd(n, n2, n3)
実線グラフを描画する	plt.plot(データ列, データ列2, linestyle='solid')
データフレームの列をヒストグラムで可視化する	plt.hist(df[column])
部分文字列かどうか	sub in s
ヒストグラムを描画して、その色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
数式のパラメータの解を方程式として求める	sympy.solve(e, z)
コマンド引数を列挙する	sys.argv[1:]
散布図に黒いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='ghostwhite')
データフレームから重複した行を取り除く	df.drop_duplicates()
黒い▼マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
＜オプション＞ダークターコイズ色を使う	color = 'darkturquoise'
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
配列としてデータフレームの指定された列を抽出する	df[column].values
nを切り捨てながらn2分の一にする	n //= n2
辞書からキーで指定された項目をポップする	aDict.pop(key)
標準エラーを使う	sys.stderr
最初の要素を両端キューから取り除く	deq.remove(element)
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
線グラフを描画して、色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgrey'
重複した行	df[df.duplicated(keep=False)]
文字列の中でASCII限定としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
＜オプション＞ライトサーモン色を使う	color = 'lightsalmon'
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
ヒストグラムを描画して色をプラムに設定する	plt.hist(データ列, color='plum')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
numpyを使用する	import numpy as np
列の各値を双方向キューの最後に付け加える	deq.extend(iterable)
折れ線グラフを描画して、その色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
文字列をプリントする	print(value)
第２コマンド引数を確認する	sys.argv[1]
オプションで出力先を標準エラーに設定する	file = sys.stderr
リストとリストの散布図を描画し、、色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
ダークオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorchid')
リストとリストの折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
実数を二乗する	x ** 2
浮動小数点数の最小値	sys.float_info.min
アイボリー色の線グラフを描画する	plt.plot(データ列, データ列2, color='ivory')
ファイルパスを書き込みモードでオープンする]	open(filepath, mode='w')
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c='r')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
辞書のコピー	dict(aDict)
黒い三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
タプルを逆順にする	aTuple[::-1]
散布図に赤い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
折れ線グラフを描画して、その色をパパイヤウィップに変更する	plt.plot(データ列, データ列2, color='papayawhip')
列の値が欠損値	ds.isna()
＜オプション＞グラフの色をラベンダーに設定する	color = 'lavender'
折れ線グラフを描画してその色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
＜オプション＞グラフの色をローングリーンに設定する	color = 'lawngreen'
文字列を太字にする	f'\033[1m{value}\033[0m'
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
データフレームのカラムを正規表現patternで一度に置換する	df[col].replace(pattern, repl, regex=True)
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
ライムにヒストグラムの色を変更する	plt.hist(データ列, color='lime')
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ヒストグラムを描画してその色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
データフレームのn行まで抽出する	df[:n]
文字列中に日本語が含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
リストと数列の淡いグラフを描画してその色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
カラーコードの四角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
折れ線グラフを描画して、その色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
グラフをポスターに設定する	sns.set(context='poster')
＜オプション＞グラフの色をミントクリームに設定する	color = 'mintcream'
折れ線グラフを描画して、色を赤くする	plt.plot(データ列, データ列2, color='r')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkolivegreen')
タプルの最初の文字列を探す	aTuple.index(element)
日付時刻データの時刻を見る	aDatetime.hour
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
ひとつでも数字が文字列内にあるか調べる	any(c.isdigit() for c in s)
データフレームのリスト列が正規分布からどれだけ、歪んでいるか調べる	df[aList].kurt()
要素がセットに含まれるか確認する	element in aSet
イテラブルをカウンタに変換する	collections.Counter(iterable)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
散布図に淡い色のマーカーを使う	plt.plot(xdata, ydata, c='muted')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
＜オプション＞グラフの色をカーキに設定する	color = 'khaki'
ヒストグラムを描画して、その色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
＜オプション＞グラフの色をダークカーキに設定する	color = 'darkkhaki'
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
実数のk進対数	math.log(x, k)
n個にデータ列を等間隔でビン分割する	pd.cut(ds, n)
リストの全ての要素をクリアにする	aList.clear()
＜オプション＞読み込みモードを使う	mode = 'r'
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
カラーコードの左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
配列とリストについての散布図に赤い四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s', c='r')
折れ線グラフの丸マーカーを黒色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
リストの変化を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
浮動小数点数を実数で割って、切り捨てる	x // y
nとn2の積	n * n2
＜オプション＞グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
上位集合もしくは等しいか調べる	aSet > aSet2
ヒストグラムを描画して色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
文字列の先頭から余分な空白を取り除く	s.lstrip()
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
アルファベットの大文字列	string.ascii_uppercase
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
既存の行列をベースに全要素が0の配列	np.zeros_like(aArray)
タプルの合計値	sum(aTuple)
データフレームの値は未入力値	df.isna()
日付時刻データが何時か知る	aDatetime.hour
リストとリストについて散布図をプロットして、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
キーが辞書に存在するか調べる	key in aDict
文字列TSVファイルからカンマ区切りのファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
カラーコードのダイアモンドマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞色を真紅に設定する	color = 'crimson'
散布図に濃い色のマーカーを使う	plt.plot(xdata, ydata, c='deep')
表データを列をキーにして整列する	df.sort_values(by=column)
折れ線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
タプルの先頭を取り除く	aTuple[1:]
データフレームから列を二つ選択する	df[[column, column2]]
リストとリストについて散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
データフレームのカラムの欠損値をメディアンで埋める	df[col].fillna(df[col].median())
パステル調のグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
両端キューの先頭	deq[0]
折れ線グラフに緑色のダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
＜オプション＞読み込まないフッタをnに設定する	skipfooter = n
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
データフレームの列と列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
データフレームのリスト列の標本標準偏差	df[aList].std()
本日のタイムスタンプを使う	datetime.datetime.today()
リストと配列について散布図を描画し、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
ヒストグラムの色を黄色くする	plt.hist(データ列, color='y')
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
散布図にカラーコードの大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c=rgb)
ヒストグラムを描画して、その色を白に設定する	plt.hist(データ列, color='white')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
折れ線グラフを描画してその色をダークマゼンタに変更する	plt.plot(データ列, データ列2, color='darkmagenta')
アルファベットの小文字を全部使う	string.ascii_lowercase
リストとリストの明るいグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームを列でグループ化し、、列の要約統計量を求める	df.groupby(column).describe()[column2]
配列と配列の折れ線を透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞色をフォレストグリーンに変更する	color = 'forestgreen'
データフレームの欠損値が含まれる部分に色を付ける	df.style.highlight_null()
タプルの先頭の要素	aTuple[0]
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムを描画して、その色をコーラルに設定する	plt.hist(データ列, color='coral')
ヒストグラムを描画して、色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
データ列とラベルを指定して、棒を描画する	plt.bar(ラベル列, データ列)
＜オプション＞マゼンタにグラフの色を変更する	color = 'magenta'
＜オプション＞文字コードをUTF8に設定する	encoding = 'utf-8'
ファイルをバイナリ書き込み用にオープンして]fとする	f = open(filepath, mode='wb')
淡いの折れ線グラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
明るいグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
ヒストグラムの色をビスクにセットする	plt.hist(データ列, color='bisque')
文字列をゼロ埋めする	s.zfill(文字列幅)
ヒストグラムの色をターコイズに変更する	plt.hist(データ列, color='turquoise')
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
表データから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
文字列の先頭から空白を取り除く	s.lstrip(' ')
リストの個数だけ繰り返す	range(len(aList))
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
暗いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
リストとリストについて散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
ヒストグラムをパステル調の色でプロットする	plt.hist(xdata, color='pastel')
線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
折れ線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
現在の分数	datetime.date.today().minute
集合が空か判定する	len(aSet) == 0
プラットフォームの符号付き整数の最大値	sys.maxsize
データフレームの列と列の相関行列スピアマン相関係数でを求める	df[[column, column2]].corr(method='spearman')
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
ヒストグラムを描画して、色をシーグリーンにする	plt.hist(データ列, color='seagreen')
＜オプション＞グラフの色をダークグリーンに変更する	color = 'darkgreen'
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
リストとリストについて散布図を描画し、、三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='^', c=rgb)
ヒストグラムでカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
nマイナスn2	n - n2
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
中央値でデータフレームの列の未入力値を補う	df[col].fillna(df[col].median())
折れ線グラフを描画してその色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
＜オプション＞グラフの色をオレンジに設定する	color = 'orange'
'A'列でデータフレームを並べ、、更新する	df.sort_values(by='A', inplace=True)
マップの項目数	len(aDict)
折れ線グラフを描画して色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
＜オプション＞四角マーカーを使う	marker = 's'
変数について数式を積分する	sympy.integrate(e, z)
暗いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
散布図を黒い▲マーカーでプロットする	plt.plot(xdata, ydata, marker='^', c='k')
線グラフの色をドジャーブルーに変更する	plt.plot(データ列, データ列2, color='dodgerblue')
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
n÷n2を算出する	n / n2
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
折れ線グラフに線幅nのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
カラムの中にいくつ欠損値が存在するか数える	ds.isna().sum()
正規表現を事前にコンパイルする	re.compile(pattern)
モカシン色の線グラフを描画する	plt.plot(データ列, データ列2, color='moccasin')
リストとリストについてカラーコードの明るいを描く	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
＜オプション＞グラフの種類を破線に設定する	linestyle = 'dashed'
ヒストグラムを描画して、その色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
ヒストグラムを描画して、その色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
一方に含まれ他方に含まれない集合を使う	aSet.difference(aSet2)
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
印字可能な文字を使う	string.printable
＜オプション＞スチールブルー色を使う	color = 'steelblue'
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
タプルのn番目以降の要素を取り出す	aTuple[n:]
＜オプション＞オーキッドを用いる	color = 'orchid'
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategrey')
データフレームから列を一つ選択する	df[[column]]
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
黒い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
0からnの範囲	range(n)
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列, データ列2, color='darksalmon')
折れ線グラフに線幅nの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
データフレームをエクセルデータファイルでJSONLファイルに保存する	df.to_excel(filename)
＜オプション＞スチールブルーに色を設定する	color = 'steelblue'
折れ線グラフを描画して、その色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
線グラフを描画して、その色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
左三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='<')
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
折れ線グラフを描画して、その色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
データ列の各値が何回出現するか調べる	ds.value_counts()
ピアソンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
ヒストグラムの色を赤くする	plt.hist(データ列, color='r')
データ列をn個にビン分割する	pd.cut(ds, n)
Pandasでタイムスタンプ型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
データフレームがどの程度、分散しているか見る	df.var()
英字の小文字を全部使う	string.ascii_lowercase
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
リストと配列についての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
データフレームのカラムの曜日は何日目か見る	df[col].dt.dayofweek
二つのオブジェクトが同一参照か調べる	obj is obj2
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
＜オプション＞デピンク色を使用する	color = 'deeppink'
折れ線グラフを描画してその色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
データフレームの中の欠損値がある行を削除する	df.dropna()
リストとイテラブルについてカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
文字列の中の正規表現による全マッチを見る	re.findall(pattern, s)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
データフレームの末尾	df.tail()
集合から別のセットの要素を除去する	aSet.difference_update(aSet2)
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
データフレームをグループ化し、各列に対し平均値を求める	df.groupby(column)[column2].mean()
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
＜オプション＞オリーブを用いる	color = 'olive'
明るいの色をカラーコードにする	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
タプルのn番目の	aTuple[n]
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
プロットの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='mediumvioletred')
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
＜オプション＞バイナリモードに設定する	mode = 'rb'
オブジェクトは数値か調べる	isinstance(obj, (int,float))
データ列とラベルを指定して、縦棒グラフを描画する	plt.bar(ラベル列, データ列)
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
綺麗なグラフを使う準備をする	import seaborn as sns
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategrey')
データ列をインポートする	import pandas as pd
リストとリストのパステル調のグラフを描画して、その色を青くする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データフレームを二つの列によってソートし、、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
暗い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
列を四分位数でビン分割する	pd.qcut(ds, 4)
二つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
ヒストグラムを描画して、その色をターコイズに設定する	plt.hist(データ列, color='turquoise')
柱状図を描き、、半透明ににする	plt.hist(データ列, alpha=0.5)
データ列の曜日	ds.dt.weekday_name
表の列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
データ列を箱髭図で描画する	plt.boxplot(データ列)
ヒストグラムを描画して、色をスラグレーに設定する	plt.hist(データ列, color='slategray')
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
線グラフを描画して、その色をパールゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='palegoldenrod')
積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
ファイルをオープンして]書き込みストリームを使う	open(filepath, mode='w')
＜オプション＞マーカーをダイアモンドに変更する	marker = 'D'
データ列を使う	import pandas as pd
＜オプション＞パパイヤウィップに色を設定する	color = 'papayawhip'
黒い右三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='>', c='k')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
線グラフを描画して、その色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
赤色の丸マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='o', c='r')
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
行列の行列積	np.matmul(aArray, aArray2)
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
＜オプション＞グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
nにn2をかける	n * n2
リストとリストについての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
２つのオブジェクトが等しいか	obj == obj2
明るいパレットをグラフの描画で使用する	sns.set(pallete='bright')
＜オプション＞色をインディアンレッドに設定する	color = 'indianred'
赤い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
リストを累加する	itertools.accumulate(iterable)
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
カウンタの項目数	len(aCounter)
データ列を中央値でビン分割する	pd.qcut(ds, 2)
nが一桁の整数かどうか確認する	0 <= n <= 9
＜オプション＞グラフの色をライムに設定する	color = 'lime'
データ列とリストについての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
データフレームのリスト列がどの程度分散しているか調べる	df[aList].var()
リストにリストを追加して拡張する	aList.extend(aList2)
＜オプション＞グラフの色をマルーンに設定する	color = 'maroon'
キューから最初の値を取り除く	deq.remove(element)
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
リストを展開してプリントする	print(*aList)
ヒストグラムを描画して、色をベージュに変更する	plt.hist(データ列, color='beige')
複数の列を用いてデータフレームをソートする	df.sort_values(by=column)
リストとリストを用いて明るいの折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
折れ線グラフを描画して、その色をラベンダーブラッシュに指定する	plt.plot(データ列, データ列2, color='lavenderblush')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
データフレームからカテゴリデータの列を選択する	df.select_dtypes('object')
文字列の開始位置から終了位置の範囲で部分文字列の出現回数	s.count(sub, start, end)
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
＜オプション＞グラフの色をライトイエローにセットする	color = 'lightyellow'
データフレームのリスト列の未入力値を直後の値に設定する	df[aList].fillna(method='bfill')
ヒストグラムを描画して、その色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
部分文字列が文字列の終了位置より前にないか調べる	s.find(sub, 0, end) == -1
データフレームのn行目をドロップして更新する	df.drop(n, axis=0, inplace=True)
数式を変数について微分する	sympy.diff(e, z)
リストのヒストグラムを描画する	plt.hist(aList)
アヤメのデータセットをロードする	sns.load_dataset('iris')
二つの変数をタブで区切って表示する	print(value, value2, sep='\t')
折れ線グラフを描画して、その色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
実数がNaNか調べる	math.isnan(x)
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
折れ線グラフを描画して、色をパールゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='palegoldenrod')
淡いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
数式を浮動小数点数に変換する	float(e)
原点から点までの距離	math.hypot(x, y)
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
文字列をトリムする	s.strip()
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
＜オプション＞大バツ印を使う	marker = 'X'
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='blueviolet')
実数のk進対数を求める	math.log(x, k)
＜オプション＞黄色色を使う	color = 'yellow'
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
マップのキーを列挙する	list(aDict)
データフレームの列のユニークな値の個数	df[col].nunique()
リストとイテラブルについて散布図をプロットし、、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
データフレームのリストカラムの尖度	df[aList].skew()
データフレームをカンマ区切りのファイルから読み込む	pd.read_csv(filename, sep=',')
表を関数によってグループ化し記述統計量を求める	df.groupby(関数).describe()
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
ヒストグラムを描画して、その色をタンに変更する	plt.hist(データ列, color='tan')
最後の項目を辞書から取り出す	aDict.popitem()
ヒストグラムを描画して、その色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
表の列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
初期値で全要素を初期化された配列	np.full(要素数, 初期値, dtype=np.int)
文字列は全て十進数字	s.isdecimal()
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
折れ線グラフの△マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
折れ線グラフの左三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
配列とイテラブルについて濃い色の折れ線をプロットして、線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
＜オプション＞グラフの色をアクアに指定する	color = 'aqua'
タプルを逆順にする	reversed(aTuple)
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフを描画して、その色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
文字列が文字列より辞書順で後か調べる	s > s2
改行なしに2つの文字列をプリントする	print(value, value2, end='')
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
＜オプション＞改行しない	end = ''
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
データフレームを各列毎に集約し、、列の最大値を算出する	df.groupby(column)[column2].max()
集合に列の要素を全て追加する	aSet.update(iterable)
文字列中にひとつでも非アスキー文字が含まれるかどうか	any(not c.isascii() for c in s)
＜オプション＞パレットトルコイズを用いる	color = 'paleturquoise'
浮動小数点数に変換する	float(x)
nが1もしくは2、もしくは3に等しいか	n == 1 or n == 2 or n == 3
ファイルを追加モードでオープンする]	open(filepath, mode='a')
TSVからCSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
＜オプション＞エンコーディングをEUCに設定する	encoding = 'euc_jp'
カウンタの項目のカウント	aCounter[element]
バイナリ書き込みできるようにファイルを開く]	open(filepath, mode='wb')
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
追加できるようにファイルを文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
真上位集合か確認する	aSet > aSet2
＜オプション＞ダークオレンジにグラフの色を指定する	color = 'darkorange'
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
辞書のキーに対応した値	aDict.get(key)
＜オプション＞ピンクにグラフの色を変更する	color = 'pink'
折れ線グラフの下三角印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
デックの先頭から値を取り除く	deq.popleft()
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
データ列の尖度	ds.skew()
暗いグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
赤色の星マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='*', c='r')
文字列の大文字と小文字を交換する	s.swapcase()
ヒストグラムを描画して、その色をスチールブルーにセットする	plt.hist(データ列, color='steelblue')
データフレームを各列と列の組み合わせ毎に集約して、合計を求める	df.groupby([column, column2], as_index=False).sum()
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフのポイントマーカーを黄色くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
文字列が全て英数字か調べる	s.isalnum()
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
数列と配列としてパステル調のの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
データフレームの母標準偏差	df.std(ddof=0)
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
リストの合計値	sum(aList)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
双方向キュー中の数値のインデックスを求める	deq.index(element)
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
双方向キューの末尾に要素を付け加える	deq.append(element)
リストとリストの折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
リストの末尾を取り除く	aList[:-1]
＜オプション＞グラフの色をライトスレイグレーに変更する	color = 'lightslategray'
データ列の曜日の名前	ds.dt.weekday_name
部分文字列で文字列を区切る	s.split(sub)
グラフを画面用に設定する	sns.set(context='notebook')
文字列の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
数値の符号を同じにする	math.copysign(x, x2)
配列をヒストグラムで可視化する	plt.hist(aArray)
マップの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
＜オプション＞グラフの色をシーグリーンに設定する	color = 'seagreen'
＜オプション＞ダークマゼンタ色を用いる	color = 'darkmagenta'
文字列を置き換える	s.replace(sub, newsub)
線グラフを描画して、その色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
オブジェクトは集合クラス	isinstance(obj, set)
集合をリストに変換する	list(aSet)
２つのデータフレームを列をキーにして右結合する	pd.merge(df, df2, on=column, how='right')
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
浮動小数点数の最小値を計算する	sys.float_info.min
線グラフの色をシルバーに指定する	plt.plot(データ列, データ列2, color='silver')
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
二進数の文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
＜オプション＞ライトスチールブルー色を使う	color = 'lightsteelblue'
データフレームを100の位で四捨五入して整数にする	df.round(-2).astype(int)
破壊的に列でによってデータフレームをソートする	df.sort_values(by=column, inplace=True)
折れ線グラフを描画して、色をアクアマリンに変更する	plt.plot(データ列, データ列2, color='aquamarine')
行列間の要素ごとの最小公倍数を計算する	np.lcm(aArray, aArray2)
ヒストグラムを描画して、その色をプラムに設定する	plt.hist(データ列, color='plum')
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
＜オプション＞耐火レンガ色を使う	color = 'firebrick'
ダークオーキッドにヒストグラムの色をする	plt.hist(データ列, color='darkorchid')
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
実数の天井	math.ceil(x)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
リストが空でない	len(aList) != 0
16進文字列を整数にする	int(s, 16)
両端キューの末尾から要素を取り除く	deq.pop()
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
nまたはn2	n or n2
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
データフレームを二つの列によってで降順に並べ直す	df.sort_values(by=['A', 'B'], ascending=False)
ヒストグラムを描画して、色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
列を文字列に変換してカンマで結合する	','.join(map(str, iterable))
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
＜オプション＞ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
イテラブルの集合	set(iterable)
折れ線グラフの下三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
ふたつの集合の対称差を算出する	aSet.symmetric_difference(aSet2)
折れ線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
データフレームのデータ型の一覧	df.dtypes
ヒストグラムを描画して色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
リストとリストについての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
ヒストグラムを描画して、その色をアクアに設定する	plt.hist(データ列, color='aqua')
下線付きで変数を表示する	print(f'\033[4m{value}\033[0m')
浮動小数点数のn乗の実数剰余	pow(x, n, y)
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
黄色い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='y')
ファイルをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
データ列の平均値	ds.mean()
nをn2だけ左シフトする	n << n2
配列を元に全要素が1の配列	np.ones_like(aArray)
データフレームを十の位で四捨五入して、整数にする	df.round(-1).astype(int)
折れ線グラフの色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
リストに文字列を追加する	aList.append(element)
文字列を二分割する	s.partition(sep)
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
折れ線グラフの星マーカーを黒くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
コマンドの第一引数	sys.argv[1]
＜オプション＞ダークグレー色を使う	color = 'darkgrey'
カラーコードの丸マーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
nがn2以下もしくは、n3以上か	n <= n2 or n >= n3
リストとリストで暗いグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
変数名をキーとして、辞書	dict(name=element)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
データフレームの列の文字列長を列として使う	df[col].str.len()
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
データフレームからランダムにn行を抽出する	df.sample(n)
書式をargsを引数としてフォーマットする	formatText.format(*args)
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
二つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
要素が辞書の値として含まれているか調べる	element in aDict.values()
ヒストグラムを描画して、その色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列, データ列2, color='papayawhip')
データフレームを各列毎にグループ化し、列の個数を求める	df.groupby(column)[column2].count()
配列の度数分布図を描画する	plt.hist(aArray)
行列を平坦にする	aArray.flatten()
predicateFuncが真になるリストの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
＜オプション＞白色を使う	color = 'white'
グラフの色を色差別なくする	sns.set(pallete='colorblind')
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列, データ列2, color='antiquewhite')
文字列が全て空白文字からなるかどうか調べる	s.isspace()
赤いクロスマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
線グラフの色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
文字列をセパレータで区切って、列挙する	s.split(sep)
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
＜オプション＞グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
ヒストグラムを描画して、その色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
nが1、もしくは2か調べる	n == 1 or n == 2
リストとデータ列についてパステル調の色の折れ線を描画して、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
データフレームの中で何行、重複するか確認する	df.duplicated().sum()
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
データフレームの列の一覧	df.info()
辞書を階層化する	collections.ChainMap(aDict)
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
文字列はリストの要素か	element in aList
＜オプション＞ミディアムオーキッド色を使う	color = 'mediumorchid'
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
文字列の左側から空白を取り除く	s.lstrip(' ')
グラフのタイトルをuntitledに設定する	plt.title(untitled)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategray')
データフレームのカラムをPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
文字列を青色で表示できる文字列にする	f'\033[34m{value}\033[0m'
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
ヒストグラムを描画して、色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
正規表現を使う	import re
実数の小数点以下を丸める	round(x)
＜オプション＞文字コードtextを使う	encoding = text
データフレームを'A'列の値によってグループ化する	df.groupby('A')
kを底とする実数の対数を求める	math.log(x, k)
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
折れ線グラフを描画してその色をペルーに変更する	plt.plot(データ列, データ列2, color='peru')
濃いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
集合の補集合	aSet.difference(aSet2)
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
データフレームの中の欠損値の合計を数える	df.isna().sum()
データフレームを各列毎にグループ化して列の標準偏差を算出する	df.groupby(column)[column2].std()
タプルの要素を逆順にする	aTuple[::-1]
折れ線グラフに線幅nの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
折れ線グラフを描画して、その色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
＜オプション＞グラフの色をペルーに設定する	color = 'peru'
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
プログラムの実行を異常終了する	sys.exit(1)
データフレームを列名リストによって小さい順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
整数nのビット長	n.bit_length()
二つの変数を同じ値にする	x = y = n
折れ線グラフの丸マーカーを赤色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
＜オプション＞グラフの色をライトイエローに設定する	color = 'lightyellow'
データフレームの欠損値を直後の値で補う	df.fillna(method='bfill')
リストとリストについての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
カウンタを多い順に列挙する	aCounter.most_common()
実数のハイパボリック・コサインの逆数を算出する	math.acosh(x)
全要素を0で初期化した配列	np.zeros(要素数)
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
タプルの中の最大値を求める	max(aTuple)
線グラフの色をスチールブルーに指定する	plt.plot(データ列, データ列2, color='steelblue')
リストにリストを加えて広げる	aList.extend(aList2)
インデント付きでタプルを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
nがn2より大きいかどうか調べる	n > n2
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
グラフに凡例を入れる	plt.legend()
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
実数の絶対値を求める	math.fabs(x)
日付データが日付データより前か調べる	aDate < aDate2
折れ線グラフに線幅nのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データ列の中央値	ds.median()
ホワイト色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='white')
データ列を10の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
異なる列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
黄色いバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
標準入力から1行読み込む	sys.stdin.readline()
変数を赤色にする	f'\033[31m{value}\033[0m'
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
マッピングにマッピングの値を更新する	aDict.update(aDict2)
線グラフを描画して、その色をダークスラテグレーにセットする	plt.plot(データ列, データ列2, color='darkslategray')
プロットのパレットを淡くする	sns.set(pallete='muted')
配列をビン数nで等量でビン分割する	pd.qcut(aArray, n)
散布図を黒い星マーカーとして描く	plt.plot(xdata, ydata, marker='*', c='k')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列, データ列2, marker='D')
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列, データ列2, color='mistyrose')
グラフの背景色を暗くする	sns.set(style='darkgrid')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
ベージュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='beige')
＜オプション＞下三角マーカーを用いる	marker = 'v'
リストを縦軸、リストを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
折れ線グラフに緑色の右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
折れ線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
イテラブルを累加する	itertools.accumulate(iterable)
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
黒色のポイントマーカーを配列とリストの散布図に描く	plt.plot(xdata, ydata, marker='.', c='k')
ヒストグラムを描画してその色をスラグレーに指定する	plt.hist(データ列, color='slategray')
データフレームの列の欠損値を最大値で置換する	df[col].fillna(df[col].max())
折れ線グラフを描画して、その色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
辞書の項目名を要素に変更する	aDict[key] = element
整数nを八進表記にする	oct(n)
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
出力ストリームに文字列を書く	f.write(s)
折れ線グラフの星マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
リストの要素を昇順にソートする	sorted(aList, reverse=True)
文字列は全て数値	s.isnumeric()
データ列とラベル列を指定して、積み上げ棒を描く	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
＜オプション＞色をゴールドに指定する	color = 'gold'
赤い濃いの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
折れ線グラフのマーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
＜オプション＞グラフの色をパールバイオレットレッドに変更する	color = 'palevioletred'
前の値でデータフレームのNaNを補う	df.fillna(method='ffill')
タプル中の文字列が最初に見つかる場所を探す	aTuple.index(element)
＜オプション＞モカシン色を使う	color = 'moccasin'
データフレームのリストカラムの未入力値を最大値で埋める	df[aList].fillna(df[aList].max())
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
現在処理中の例外を情報	sys.exc_info()
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
データフレームが正規分布からどれだけ、歪んでいるか見る	df.kurt()
折れ線グラフの左三角印を黒色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
標準エラー	sys.stderr
文字列の末尾から改行を取り除く	s.rstrip('\n')
ハニーデューにヒストグラムの色を指定する	plt.hist(データ列, color='honeydew')
双方向キューのn番目に要素を差し込む	deq.insert(n, element)
配列を一次元にする	aArray.flatten()
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
文字列の左側からタブを消す	s.lstrip('\t')
ライトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightblue')
折れ線グラフを描画して、その色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
行列から重複を除いた配列を作る	np.unique(aArray)
数列とイテラブルの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
＜オプション＞ディムグレー色を使う	color = 'dimgray'
データ列の欠損値をxで埋める	ds.fillna(x)
シアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='cyan')
ヒストグラムを描画して、ビン数をnに設定する	plt.hist(データ列, bins=n)
リストとリストについて散布図を描いて、四角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='s', c=rgb)
散布図にカラーコードの右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c=rgb)
ヒストグラムを描画して、その色をラベンダーに設定する	plt.hist(データ列, color='lavender')
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
ダークカーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkkhaki')
＜オプション＞アクアマリン色を使う	color = 'aquamarine'
実数の双曲線余弦の逆数	math.acosh(x)
データフレームから型リストで指定されたデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
リストの要素を昇順にソートする	sorted(aList, reverse=False)
データフレームのカラムの要約統計量	df[col].describe()
リストを柱状図で可視化する	plt.hist(aList)
折れ線グラフに線幅nの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列, データ列2, color='orangered')
文字列のケースを入れ替える	s.swapcase()
リストの中の一番小さい値	min(aList)
行列の平均値を求める	np.mean(aArray)
文字列をシンボルに変換する	sympy.Symbol(s)
折れ線グラフを描画して、その色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
黒い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='k')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
配列とデータ列についての散布図を重なりを見やすくパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
データフレームのリストカラムの未入力値を中央値で補う	df[aList].fillna(df[aList].median())
グラフの見栄えを良くする	import seaborn as sns
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
配列と数列について散布図を描画してマーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
＜オプション＞グラフの色をトマトに設定する	color = 'tomato'
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
＜オプション＞ミッドナイトブルー色を使う	color = 'midnightblue'
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
インデックスでデータフレーム全体を小さい順にソートする	df.sort_index(ascending=True)
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
文字列のケースを変換する	s.casefold()
折れ線グラフを描画してその色をマルーンに指定する	plt.plot(データ列, データ列2, color='maroon')
関数の値ごとにデータフレームをグループ化し、、列挙する	[(name, group) for name, group in df.groupby(関数)]
線グラフを描画して、色をグレーに変更する	plt.plot(データ列, データ列2, color='gray')
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
グラフを色差別なくする	sns.set(pallete='colorblind')
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
文字列の開始位置と終了位置の間に部分文字列が存在する	s.find(sub, start, end) != -1
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
実数の正弦の逆数	math.asin(x)
標準入力から1行だけ読む	sys.stdin.readline()
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
リストと数列についての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
実数を複素数に変換する	complex(x)
イテラブルとイテラブルをzipする	itertools.zip_longest(iterable, iterable2)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
文字列が文字列リストに含まれるかテストする	s in aStringList
論文にプロットの目的を設定する	sns.set(context='paper')
データフレームの列のヒストグラムを描画する	plt.hist(df[column])
ファイルを文字列の示す文字コードを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列中の部分文字列を別の文字列に全部置き換える	s.replace(sub, newsub)
データフレームから最後の列を消す	df[df.columns[:-1]]
折れ線グラフのマーカーを下三角にする	plt.plot(データ列, データ列2, marker='v')
現在のミリ秒	int(time.time() * 1000)
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
＜オプション＞色をライトスチールブルーに設定する	color = 'lightsteelblue'
二点間のユークリッド距離を求める	math.dist(point, point2)
リストと数列についての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
オレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='orange')
オブジェクトが関数か調べる	callable(obj)
自然数の並べ方の総数	math.perm(n)
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
＜オプション＞パープル色を使う	color = 'purple'
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
＜オプション＞グラフの色をリネンに設定する	color = 'linen'
折れ線グラフを描画して、その色を紺にセットする	plt.plot(データ列, データ列2, color='darkblue')
＜オプション＞ディムグレーにグラフの色を指定する	color = 'dimgrey'
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkseagreen')
＜オプション＞グラフの色をライトブルーに設定する	color = 'lightblue'
文字列が全て数値か調べる	s.isnumeric()
＜オプション＞ビスク色を用いる	color = 'bisque'
データフレームを各列毎にグループ化して列の合計を計算する	df.groupby(column)[column2].sum()
データフレームから指定された２つの列のみ抽出する	df[[column, column2]]
リストと配列についての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
文字列を空白で区切る	s.split()
ヒストグラムの色をダークシアンにする	plt.hist(データ列, color='darkcyan')
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
nが1、もしくは2かどうか判定する	n == 1 or n == 2
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
複数のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
日付データが木曜日かどうか調べる	aDate.weekday() == 3
ヒストグラムを描画して、その色をライトブルーにセットする	plt.hist(データ列, color='lightblue')
＜オプション＞グラフの色をライトサーモンに設定する	color = 'lightsalmon'
実数の２乗	x ** 2
カラムはどの程度、分散しているか確認する	ds.var()
＜オプション＞スラグレーに色を変更する	color = 'slategray'
リストの末尾のn要素を取り除く	aList[:-n]
漢字が文字列に含まれるか	re.search('[\u4E00-\u9FD0]', s)
リストをパステル調の色のヒストグラムを使って描画する	plt.hist(xdata, color='pastel')
データフレームの値が欠損値か調べる	df.isna()
データフレームのstart行目からend行目まで抽出する	df[start:end]
平均値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mean())
コマンドの第２引数を確認する	sys.argv[1]
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
折れ線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
淡いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストの末尾から値を捨てる	aList.pop()
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='gray')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
線グラフの色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
文字列の先頭	s[0]
n回文字列を繰り返すイテラブル	itertools.repeat(element, n)
＜オプション＞スチールブルー色を用いる	color = 'steelblue'
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
データフレームの列の値がx以下のデータを抽出する	df[df[column] <= x]
配列と配列の散布図を描き、、マーカーをバツに変更する	plt.plot(xdata, ydata, marker='x')
ヒストグラムを描画して、色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
２つの文字列は等しいか調べる	s == s2
＜オプション＞マーカーをポイントに変更する	marker = '.'
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフの色をダーク・スラテグレーにセットする	plt.plot(データ列, データ列2, color='darkslategrey')
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
ヒストグラムを描画して、色をラベンダーに設定する	plt.hist(データ列, color='lavender')
ファイル全体を行単位で分割して読み込む	f.readlines()
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegoldenrod')
ゼロ埋めした８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
データフレームを列によってグループ化して、それぞれのグループごとの分散を算出する	df.groupby(column).var()
ヒストグラムを描画して、その色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
データフレームを'A'列で昇順に並べて更新する	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
文字列が全てアルファベットか調べる	s.isalpha()
データフレームを列によってソートする	df.sort_values(by=column)
リストとリストについての散布図に四角マーカーを描く	plt.plot(xdata, ydata, marker='s')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
グラフを描画する準備をする	from sympy import N
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
リストと配列の散布図を明るい色として描く	plt.plot(xdata, ydata, c='bright')
枠なしのデータラベルを入れる	plt.legend(frameon=False)
配列とリストについての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
行列の行ごとの最大値	np.max(aArray, axis=1)
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
折れ線グラフの右三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画してその色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
明るい色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='bright')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
ビスク色の線グラフを描画する	plt.plot(データ列, データ列2, color='bisque')
リストの要素を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
nが一桁の整数か調べる	0 <= n <= 9
最大値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].max())
year年の日付	datetime.date(year=year, month=1, day=1)
ヒストグラムを描画して色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
折れ線グラフに黄色いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
＜オプション＞色をマルーンに設定する	color = 'maroon'
三自然数の最小公倍数	math.lcm(n, n2, n3)
列からキューを生成する	collections.deque(iterable)
折れ線グラフの色を青くする	plt.plot(データ列, データ列2, color='b')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
文字列がタプルに含まれないか調べる	element not in aTuple
配列のスカラー倍	aArray * n
文字列を最初の部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
＜オプション＞インディゴに色を変更する	color = 'indigo'
全要素を1で初期化された行列	np.ones(行数, 列数, dtype=np.int)
赤色のポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='r')
環境はWindowsかどうか調べる	sys.platform.startswith('win32')
データフレームの列を削除して更新する	df.drop(column, axis=1, inplace=True)
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
ヒストグラムを描画して、その色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
＜オプション＞グラフの色を小麦色に設定する	color = 'wheat'
タプルをひとつ置きに取り出す	aTuple[::2]
＜オプション＞スラグレーにグラフの色を設定する	color = 'slategray'
＜オプション＞色をライトグレーに指定する	color = 'lightgray'
データフレームのカラムを整数に丸める	df[col].round()
anemptystring	''
配列とリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
データフレームを列を用いて昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
線グラフを描画して、その色をシエナに変更する	plt.plot(データ列, データ列2, color='sienna')
プロットの描画でパステル調のカラーパレットを使う	sns.set(pallete='pastel')
オブジェクトの大きさ	sys.getsizeof(obj)
散布図を赤い下三角マーカーで描画する	plt.plot(xdata, ydata, marker='v', c='r')
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
タブ	'\t'
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
＜オプション＞色をオールドレースに設定する	color = 'oldlace'
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
辞書の値に要素は含まれていないか調べる	element not in aDict.values()
filepathに現在の作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
＜オプション＞大バツマーカーを描画する	marker = 'X'
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
実数の床数	math.floor(x)
データフレームのカラムの種類	df.info()
アリスブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='aliceblue')
数列とリストのカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
変数を太字で出力する	print(f'\033[1m{value}\033[0m')
データフレームを'A'列によってソートする	df.sort_values(by='A')
折れ線グラフを描画して、その色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
データフレームの列の名前リストを使う	df.columns
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgray'
最初の列をデータフレームから除く	df[df.columns[1:]]
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
ヒストグラムをstartからendまでの範囲で描画する	plt.hist(データ列, range=(start, end))
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
nullに等しい値	None
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
赤い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
オブジェクトは整数型か	isinstance(obj, int)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
データフレームのn番目の行を選択する	df.loc[n]
濃い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
折れ線グラフの色をモカシンに変更する	plt.plot(データ列, データ列2, color='moccasin')
＜オプション＞読むシートの名前をnamesにセットする	sheet_name = names
データフレームのリスト列の欠損値を中央値で置き換える	df[aList].fillna(df[aList].median())
線グラフを描画して、その色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフのクロス印を緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
文字列中に部分文字列が含まれないか調べる	sub not in s
2つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
ダークオレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorange')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームを各列毎にグループ化して列の最大値を計算する	df.groupby(column)[column2].max()
文字列をカンマで分割して、列挙する	s.split(',')
散布図に色差別ない色のマーカーを用いる	plt.plot(xdata, ydata, c='colorblind')
リストを配列に変換する	np.array(aList)
試しに何か動かす	print('Hello World')
実数の双曲線正接	math.tanh(x)
ヒストグラムを描画してその色をベージュに設定する	plt.hist(データ列, color='beige')
グラフのデータラベルの場所を指定する	plt.legend(loc=(x, y))
＜オプション＞シャルトリューズ色を使う	color = 'chartreuse'
＜オプション＞ペルー色を使う	color = 'peru'
ヒストグラムを描画して、色をネイビーに設定する	plt.hist(データ列, color='navy')
線グラフを描画して、その色をホットピンクに変更する	plt.plot(データ列, データ列2, color='hotpink')
散布図にカラーコードのポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c=rgb)
全要素を０で初期化された行列	np.zeros(行数, 列数)
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
＜オプション＞ホワイトスモーク色を使う	color = 'whitesmoke'
ヒストグラムを描画して、その色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
＜オプション＞色をダークサーモンに設定する	color = 'darksalmon'
タプルを引数として展開して表示する	print(*aTuple, sep=',')
辞書のキー一覧	list(aDict)
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
実数の仮数	math.frexp(x)[0]
折れ線グラフの左三角印を黄色くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
本日は何曜日か知る	datetime.datetime.today().weekday()
リストをタプルに変換する	tuple(aList)
データ列の中にある日付データと文字列の合計を数える	ds.isin([value, value2]).sum()
線グラフの色をミディアムアクアマリンにセットする	plt.plot(データ列, データ列2, color='mediumaquamarine')
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データ列の日	ds.dt.day
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフに線幅nの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
データフレームをCSV形式でJSONLファイルに保存する	df.to_csv(filename)
散布図を重なりを見やすく色差別ない色で描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
棒グラフを積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
アンティークホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='antiquewhite')
リストをビン分割する	pd.cut(aList, aList)
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
明るい色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
データフレームの列を丸めて整数型にする	df[col].round().astype(int)
＜オプション＞ダークグレー色を使う	color = 'darkgray'
データ列とリストの散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
表データの中で、列の重複を確認する	df.duplicated(subset=column)
パステル調の色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='pastel')
Pandasで、フォーマットでデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームのリストカラムはどれだけ、分散しているか見る	df[aList].var()
マッピングのコピー	dict(aDict)
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
色差別ないグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
配列を縦軸、リストをx座標にして、折れ線を描画する	plt.plot(xdata, ydata)
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
散布図を赤い丸マーカーで描画する	plt.plot(xdata, ydata, marker='o', c='r')
文字列を白色で表示する	print(f'\033[37m{value}\033[0m')
データ列の標本標準偏差	ds.std()
イテラブルにイテラブルを続けたイテラブルを得る	itertools.chain(iterable, iterable2)
赤色のクロスマーカーをリストとリストの散布図に描画する	plt.plot(xdata, ydata, marker='x', c='r')
＜オプション＞グラフの色を淡いピンク色に設定する	color = 'lightpink'
等差数列を行列に変換する	np.arange(開始値, 終端値, 等差)
xのハッシュ値	hash(x)
リストとリストについての散布図に黒いバツマーカーをプロットする	plt.plot(xdata, ydata, marker='x', c='k')
＜オプション＞グラフの色をペルーに変更する	color = 'peru'
nがn2か調べる	n == n2
リストとリストについての散布図に菱形マーカーをプロットする	plt.plot(xdata, ydata, marker='D')
＜オプション＞インデックスを自動的な連番に設定する	index_col = None
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
＜オプション＞色をスチールブルーに設定する	color = 'steelblue'
要素∉集合	element not in aSet
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
＜オプション＞サドルブラウンを使う	color = 'saddlebrown'
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
折れ線グラフを点線で描画する	plt.plot(データ列, データ列2, linestyle='dotted')
三つの文字列を順にプリントする	print(value, value2, value3)
データフレームを各カラムと列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
リストとリストの色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
要素が集合に含まれない	element not in aSet
パステル調のの線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
要素を集合から取り除く	aSet.remove(element)
＜オプション＞暗い赤を使う	color = 'darkred'
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
折れ線グラフの色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
折れ線グラフを描画して、その色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
ヒストグラムを描画して、その色をオリーブにする	plt.hist(データ列, color='olive')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
＜オプション＞グラフの色をオリベドラブに設定する	color = 'olivedrab'
nからn2までのひとつ飛ばしの整数リストを作る	list(range(n, n2+1, 2))
折れ線グラフのマーカーを三角にする	plt.plot(データ列, データ列2, marker='^')
シャルトリューズにヒストグラムの色を指定する	plt.hist(データ列, color='chartreuse')
nが2で割り切れるか調べる	n % 2 == 0
実数を実数で割った剰余	math.remainder(x, x2)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
リストと配列について暗い色の折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
プログラムの実行を正しく終了する	sys.exit(0)
線グラフの色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
ビン数nでリストを等量で分割する	pd.qcut(aList, n)
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
リストと配列の暗いグラフを描画して、その色を青色に指定する	plt.plot(xdata, ydata, linestyle='dark', color='b')
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
折れ線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
データフレームのリスト列の空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
＜オプション＞マーカーを左三角に変更する	marker = '<'
＜オプション＞グラフの色をアリスブルーに指定する	color = 'aliceblue'
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
n2がn以上、かつ、n3以下かどうか調べる	n <= n2 and n2 <= n3
データ列とデータ列について色差別ない色の折れ線を描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
文字列を二分する	s.partition(sep)
濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
データ列の欠損値をxに変更する	ds.fillna(x)
整数nをn2分の一にする	n //= n2
＜オプション＞ASCII文字に限定する	flag = re.ASCII
破壊的に重複をデータフレームから削除する	df.drop_duplicates(inplace=True)
折れ線グラフに大きさnの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
データフレームのn行目を抽出する	df.loc[n]
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
分割数nとして配列をビン分割する	pd.cut(aArray, n)
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
データフレームのカラムからユニークな値を抽出しリスト化する	df[col].unique().tolist()
折れ線グラフの色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
折れ線グラフのダイアモンドマーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
リストとデータ列について散布図を描画し、、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
ヒストグラムの色をダークカーキにする	plt.hist(データ列, color='darkkhaki')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
散布図に黒い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='k')
グラフをスライド用に設定する	sns.set(context='talk')
カーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='khaki')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
バツマーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='x')
データフレームのリスト列の上位25%	df[aList].quantile(0.25)
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
折れ線グラフに黄色い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
xの小数点以下'2'桁まで出力する	print(':.2f'.format(x))
データフレームを各列毎にグループ化し、列の個数を計算する	df.groupby(column)[column2].count()
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
データフレームのカラムとカラムを折れ線グラフで描く	plt.plot(df[col], df[col2])
本日が木曜日か確認する	datetime.datetime.today().weekday() == 3
日付時刻データが何年か知る	aDatetime.year
＜オプション＞ライトグレーを使う	color = 'lightgrey'
現在の秒数	datetime.date.today().second
配列とリストの青色の色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
タプルの合計を求める	sum(aTuple)
折れ線グラフを描画して、その色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
赤い左三角マーカーをリストと数列についての散布図に描く	plt.plot(xdata, ydata, marker='<', c='r')
データフレームのリストカラムの分散	df[aList].var()
折れ線グラフの色をシルバーに指定する	plt.plot(データ列, データ列2, color='silver')
縦軸にuntitledというラベルを付ける	plt.ylabel(untitled)
実数の天井数	math.ceil(x)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
データフレームから破壊的に重複したデータを削除する	df.drop_duplicates(inplace=True)
配列を横軸と指定して、折れ線グラフを描く	plt.plot(range(len(xdata)), xdata)
リストとリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
濃い色の折れ線をプロットして、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフを描画して、その色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
配列とリストの破線グラフを描画してその色を淡いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
青い淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='b')
色差別ないの色をカラーコードにする	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
文字列中のパターンを新しい文字列として置き換える	re.sub(pattern, newsub, s)
データフレームの列の各データ値の出現数	df[col].value_counts()
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
文字列の終了位置より前に部分文字列が存在しない	s.find(sub, 0, end) == -1
カラーコードの左三角マーカーをリストと配列の散布図に描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームの中の列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームから重複した行を削除する	df.drop_duplicates()
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategrey'
データフレームのカラムの日	df[col].dt.day
＜オプション＞バツマーカーを使う	marker = 'x'
データフレームのカラムが正規分布からどの程度尖っているか確認する	df[col].skew()
散布図を暗い色のマーカーで重なりを見やすく描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
散布図にカラーコードの右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>', c=rgb)
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
カラーコードでリストとリストの折れ線を描画する	plt.plot(xdata, ydata, color=rgb)
新しい文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
n個にリストを等量でビン分割する	pd.qcut(aList, n)
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
ヒストグラムを描画して、色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
文字列をフォーマットで日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
四分位数で配列を分割する	pd.qcut(aArray, 4)
一点鎖線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムを描画して、その色を茶色に変更する	plt.hist(データ列, color='brown')
両端キューをdequeue	deq.popleft()
リストの変化を折れ線に描画する	plt.plot(range(len(xdata)), xdata)
折れ線グラフを描画して、色をプラムに指定する	plt.plot(データ列, データ列2, color='plum')
折れ線グラフの色を青に設定する	plt.plot(データ列, データ列2, color='blue')
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
実数で実数を割って、切り捨てる	x // y
リストの合計値を計算する	sum(aList)
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
データフレームを列名リストの値によってグループ化し、記述統計量を求める	df.groupby(columns).describe()
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
折れ線グラフに黄色い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
xの印字可能な文字列	ascii(x)
＜オプション＞ゴールド色を使う	color = 'gold'
ファイルパスを文字列の示す文字コードで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
データ列の欠損値をxに設定する	ds.fillna(x)
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
ヒストグラムを描画して、その色をシエナに設定する	plt.hist(データ列, color='sienna')
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
データ列の未入力値を直前の値で埋める	ds.fillna(method='ffill')
データフレームを複数の列で昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフに大きさnの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
＜オプション＞グラフの色をホットピンクに設定する	color = 'hotpink'
配列を2次元1列に変形する	aArray.reshape(-1, 1)
イテラブルのイミュータブルな集合	frozenset(iterable)
２数の最も小さい値	min(x, y)
配列の平均値	np.mean(aArray)
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
文字列を最後の部分文字列で分割したときの残りの文字列を使う	s.rpartition(sub)[-1]
カウンタの最も頻出な値を求める	aCounter.most_common()[0]
＜オプション＞グラフの色をライトグリーンに指定する	color = 'lightgreen'
ヒストグラムを描画して、その色を小麦色に設定する	plt.hist(データ列, color='wheat')
二次元リストをフラット化する	sum(aList)
標準出力を使う	sys.stdout
JSONLファイルにタブ区切りを用いてデータフレームを保存する	df.to_csv(filename, sep='\t')
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
プラム色の線グラフを描画する	plt.plot(データ列, データ列2, color='plum')
折れ線グラフの色をグレーに変更する	plt.plot(データ列, データ列2, color='gray')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
＜オプション＞グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データフレームの列の値がxより小さい行を抽出する	df[df[column] < x]
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
＜オプション＞三角マーカーを描画する	marker = '^'
データフレームの列の名前の一覧を使う	df.columns
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
部分文字列が文字列中に含まれるかどうか	sub in s
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
折れ線グラフを描画して、色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
＜オプション＞グリーンイエロー色を使う	color = 'greenyellow'
真上位集合か調べる	aSet > aSet2
リストとデータ列についての散布図を暗い色を使って描画する	plt.plot(xdata, ydata, c='dark')
配列のデータ型	aArray.dtype()
＜オプション＞プラムを使う	color = 'plum'
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
濃いでリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
分数を使う	import fractions
＜オプション＞グラフの色をライトグリーンに指定する	color = 'lightseagreen'
時間を使う	import time
スクリプトのファイルの名前を知る	sys.argv[0]
リストとリストについて淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
データフレームから型の列だけ取り出す	df.select_dtypes(ty)
リストと配列についての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
カウンタをイテラブルで更新する	aCounter.update(iterable)
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
グラフを全般的に明るくする	sns.set(pallete='bright')
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
折れ線グラフを描画して、その色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
自然数最小公倍数	math.lcm(n, n2)
明るいをリストと数列を用いて描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', color='r')
ビン数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
＜オプション＞グラフの色をデピンクにする	color = 'deeppink'
日付データが日曜日か	aDate.weekday() == 6
＜オプション＞ブラック色を使う	color = 'black'
リストを暗い色のヒストグラムで描画する	plt.hist(xdata, color='dark')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
日付時刻データが何曜日か知る	aDatetime.weekday()
データフレームのカラムが何月か見る	df[col].dt.month
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
＜オプション＞ダークシアグリーン色を使う	color = 'darkseagreen'
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
折れ線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
二つのデータフレームを列をキーにして外部結合する	pd.merge(df, df2, on=column, how='outer')
nはn2と等しいかテストする	n == n2
折れ線グラフの下三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
日付データの月	aDate.month
データフレームをJSONLファイルに保存する	df.to_csv(filename)
データフレームの標本標準偏差	df.std()
八進数の文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
赤色のクロスマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
データ列と配列の黒色のパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
列のユニークな要素数	ds.nunique()
暗い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
行列の値	aArray[行番号, 列番号]
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
折れ線グラフを描画して、その色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
実数の正接	math.tan(x)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
データ列の秒	ds.dt.second
グラフ中の(x,y)の位置に凡例を入れる	plt.legend(loc=(x, y))
n2がnより大きく、かつ、n3未満	n < n2 and n2 < n3
二つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
棒を描いて、棒の幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
データフレームを各列毎にグループ化して文字列という名前のグループを使う	df.groupby(column).get_group(s)
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
グラフを用いる準備をする	from sympy import N
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
黒い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
データフレームの行を範囲指定して抽出する	df[start:end]
要素∈集合	element in aSet
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
リストとリストについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
折れ線グラフの丸マーカーを黄色くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
データフレームの列で文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
リストとデータ列の青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
データ列をインポートする	import pandas as pd
列のコンビネーション	itertools.combinations(iterable, n)
辞書の全項目をクリアする	aDict.clear()
データフレームをインポートする	import pandas as pd
暗い色の折れ線を描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストのn番目の要素を削除する	del aList[n]
リストとリストの折れ線を描画して、アルファをalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞ピーチパフ色を使う	color = 'peachpuff'
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
ヒストグラムを描画してその色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
データフレームの上n行を調べる	df.head(n)
スクリプトファイルの絶対パスを求める	os.path.abspath(__file__)
nがn2で割り切れない	n % n2 != 0
淡い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='muted')
オブジェクトがタプルクラスのインスタンスか確認する	isinstance(obj, tuple)
プログラムの実行を正しく止める	sys.exit(0)
データフレームのカラムの中の未入力値の合計を数える	df[col].isna().sum()
year年month月の日付	datetime.date(year=year, month=month, day=1)
文字列をパターンによって置換する	re.sub(pattern, newsub, s)
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
方程式の解	sympy.solve(e)
バイトオーダを知る	sys.byteorder
折れ線グラフの左三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
データ列の中に日付データと文字列があるか調べる	ds.isin([value, value2])
nかけるn2	n * n2
＜オプション＞ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
＜オプション＞グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
折れ線グラフの色を黄色くする	plt.plot(データ列, データ列2, color='y')
数式の積分を求める	sympy.integrate(e)
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
配列の要素ごとの積	np.multiply(aArray, aArray2)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
散布図に黒い▲マーカーを使用する	plt.plot(xdata, ydata, marker='^', c='k')
線グラフを描画してその色をピーチパフに指定する	plt.plot(データ列, データ列2, color='peachpuff')
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
＜オプション＞シスル色を使う	color = 'thistle'
折れ線グラフを描画する	plt.plot(xdata, ydata)
データフレームのリスト列の歪度	df[aList].kurt()
折れ線グラフを描画して、色をピンクにセットする	plt.plot(データ列, データ列2, color='pink')
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
ひとつでも非アルファベットが文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
日付時刻データが何月か知る	aDatetime.month
文字列中にひとつでも非大文字が含まれるかどうか	any(not c.isupper() for c in s)
折れ線グラフを描画して、その色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データフレームをグループ化し各列に対し最小値を求める	df.groupby(column)[column2].min()
リストを色差別ない色のヒストグラムでプロットする	plt.hist(xdata, color='colorblind')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
折れ線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
折れ線グラフのスタイルを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
文字列の接頭辞は部分文字列かどうか調べる	s.startswith(sub)
nが一桁の整数	-9 <= n <= 9
nがn2で割り切れないか調べる	n % n2 != 0
データフレームを'A'列でソートし、、更新する	df.sort_values(by='A', inplace=True)
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
コーンズシルク色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornsilk')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
リストとリストについて破線グラフを描画して、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
ヒストグラムを描画して、その色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
グラフの名前を指定する	plt.title(untitled)
＜オプション＞エンコーディングを文字コードtextに設定する	encoding = text
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
ヒストグラムを描画して、その色をアンティークホワイトにセットする	plt.hist(データ列, color='antiquewhite')
線グラフを描画してその色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
nの二乗	n ** 2
線グラフの色をグリーンイエローに指定する	plt.plot(データ列, データ列2, color='greenyellow')
イテラブルからカウンタを作る	collections.Counter(iterable)
カウンタの項目数を求める	len(aCounter)
データ列を整数に丸める	ds.round()
暗いグラフを数列と配列で描画し、、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
2つの文字列が同じでないかどうか	s != s2
＜オプション＞グラフの色をシャルトリューズに設定する	color = 'chartreuse'
改行なしに二つの変数をプリントする	print(value, value2, end='')
数式の部分分数化を行う	sympy.apart(e)
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
＜オプション＞無視するフッタをnに設定する	skipfooter = n
＜オプション＞グラフの色をインディアンレッドに設定する	color = 'indianred'
長さnのリスト	[0] * n
両端キューをポップする	deq.pop()
＜オプション＞ディープスカイブルー色を用いる	color = 'deepskyblue'
文字列を最初の部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
ヒストグラムを描画して、その色を青紫に設定する	plt.hist(データ列, color='violet')
組の末尾を捨てる	aTuple[:-1]
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
データ列が何曜日か見る	ds.dt.weekday_name
文字コードを文字に変換する	chr(unicode)
カラムを丸める	ds.round()
ヒストグラムを描画して、その色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
リストを累積する	itertools.accumulate(iterable, operator.mul)
スタックの順を左にn個分ローテンションする	deq.rotate(-n)
アルファベットを全部使う	string.ascii_letters
リストとリストについての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
実数を浮動小数点数で除した余り	x % y
オブジェクトは集合クラスのインスタンスか	isinstance(obj, set)
リストをパステル調の色のヒストグラムで描画する	plt.hist(xdata, color='pastel')
データフレームを二つの列を用いて並べて、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
インプレイスでデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
本日の日付を使う	datetime.date.today()
データ列を分割数nでビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフの丸マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
＜オプション＞ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
文字の文字コード	ord(ch)
赤いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
日付データが水曜日か調べる	aDate.weekday() == 2
データフレームを列を用いてソートして新しいインデックスを加える	df.sort_values(columns).reset_index()
赤いダイアモンドマーカーをリストとデータ列についての散布図にプロットする	plt.plot(xdata, ydata, marker='D', c='r')
空の集合を作る	set()
黒い下三角マーカーをリストとリストの散布図に描く	plt.plot(xdata, ydata, marker='v', c='k')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
凡例をグラフに付ける	plt.legend()
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
要素が集合に含まれる	element in aSet
要素を双方向キューの最初から取り出す	deq.popleft()
行列の次元の数	aArray.ndim
カウンタの正の数のみ残す	+aCounter
等しい量になるように列をビン数nとしてビン分割する	pd.qcut(ds, n)
リストとリストについて散布図を描画して、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
データ列とリストの散布図をプロットして、文字列という凡例用のラベルをつける	plt.scatter(xdata, xdata, label=s)
折れ線グラフを描画して、その色を濃いシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
＜オプション＞ベージュ色を使う	color = 'beige'
データフレームを列によってグループ化して、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
環境のエンコーディングを使う	sys.getdefaultencoding()
整数nの十六進表現	hex(n)
＜オプション＞グラフの色を貝殻に設定する	color = 'seashell'
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
実数を十の位で丸める	round(x, -1)
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
ヒストグラムを描画して、その色をオリーブに設定する	plt.hist(データ列, color='olive')
折れ線グラフを描画して、色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
＜オプション＞グラフの種類を点線に設定する	linestyle = 'dotted'
データフレームを列によってグループ化して、それぞれのグループごとの最小値を算出する	df.groupby(column).min()
データ列のヒストグラムを描画する	plt.hist(ds)
配列の列ごとの平均値	np.mean(aArray, axis=0)
文字列をコロンで区切り、、列挙する	s.split(':')
データ列とラベル列を指定して横棒グラフを描く	plt.barh(ラベル列, データ列)
＜オプション＞シスルにグラフの色を設定する	color = 'thistle'
マッピングから項目名で指定された値をポップする	aDict.pop(key)
現在の時間	datetime.date.today().hour
グラフを論文用に設定する	sns.set(context='paper')
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列2])
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
二つの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
アクア色の線グラフを描画する	plt.plot(データ列, データ列2, color='aqua')
＜オプション＞先頭の行をヘッダに設定する	header = 0
折れ線グラフを描画して、色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
日付データが火曜日か調べる	aDate.weekday() == 1
数式を展開する	sympy.expand(e)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
両端キューから最初の要素を取り除く	deq.remove(element)
＜オプション＞グラフの色を紺に設定する	color = 'darkblue'
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
ファイルパスの区切り記号を使う	os.sep
パステル調のグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
＜オプション＞サドルブラウン色を使う	color = 'saddlebrown'
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
ファイルを全部、読み込む	f.read()
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
箱ひげ図を２つ並べる	plt.boxplot([データ列, データ列2])
ひとつでも大文字が文字列内に含まれるか調べる	any(c.isupper() for c in s)
＜オプション＞デピンクに色を設定する	color = 'deeppink'
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
ヒストグラムを描画して、その色を黄色に設定する	plt.hist(データ列, color='yellow')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
＜オプション＞色をリネンに変更する	color = 'linen'
データフレームのカラムが何分か見る	df[col].dt.minute
セットの全ての要素が別の集合に含まれる	aSet.issubset(aSet2)
四分位数ごとに列をビン分割する	pd.qcut(ds, 4)
折れ線グラフの色をペルーに指定する	plt.plot(データ列, データ列2, color='peru')
散布図を重なりを見やすく濃い色のマーカーで描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
データ列が何分か見る	ds.dt.minute
nがn2で割り切れるか調べる	n % n2 == 0
オブジェクトを文字列に変換する	str(obj)
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
実数を実数で割った余り	x % y
折れ線グラフを描画して、その色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
データフレームのリストカラムの欠損値を直後の値で置換する	df[aList].fillna(method='bfill')
淡いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
イテラブルを集合に変換する	set(iterable)
濃いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkmagenta')
折れ線グラフのスタイルを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
折れ線グラフを描画して、その色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
変数について数式の積分を求める	sympy.integrate(e, z)
ふたつの集合の対称差集合を計算する	aSet.symmetric_difference(aSet2)
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
文字列を右寄せにする	s.rjust(文字列幅)
文字列を全て大文字に変換する	s.upper()
日付時刻データが日付時刻データより遅い	aDatetime > aDatetime2
折れ線グラフにポイントマーカーを使う	plt.plot(データ列, データ列2, marker='.')
リストとリストについての散布図に赤いポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c='r')
異なるカラムをキーにして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ヒストグラムを描画して、その色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
ふたつの辞書を合体する	aDict | aDict2
＜オプション＞読み込む行番号をnamesで指定する	usecols = names
両端キューの先頭にイテラブルの値をつけ加える	deq.extendleft(iterable)
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
データフレームを'A'列によって集約して、列挙する	[(name, group) for name, group in df.groupby('A')]
nにn2を加える	n + n2
配列と列のデカルト積	itertools.product(iterable, iterable2)
データ列は何日か見る	ds.dt.day
リストをnから順番付けする	enumerate(aList, start=n)
整数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
リストを等しい量になるようにビン数nでビン分割する	pd.qcut(aList, n)
リストをビン数nでビン分割する	pd.cut(aList, n)
データ列をヒストグラムで可視化する	plt.hist(ds)
タプルの要素を昇順に並べ変える	sorted(aTuple, reverse=False)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
変数について数式を微分する	sympy.diff(e, z)
データフレームを列名リストによって整列してNaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフを描画してその色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
ヒストグラムを描画して、その色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムを描画して、その色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
replにデータ列の値を正規表現で一度に置き換える	ds.replace(pattern, repl, regex=True)
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavenderblush')
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
ヒストグラムを描画して、その色をマゼンタに設定する	plt.hist(データ列, color='magenta')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
実行結果を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームのカラムの未入力値をxで埋める	df[col].fillna(x)
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
二つのカウンタの共通する要素	aCounter & aCounter2
データフレームを列名リストによってまとめたグループを使う	df.groupby(columns)
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ファイルから1バイト、読み込む	f.read(1)
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
データ列を折れ線グラフに描画して、マーカーをポイント印にする	plt.plot(データ列, データ列2, marker='.')
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
折れ線グラフの色を珊瑚に変更する	plt.plot(データ列, データ列2, color='coral')
データフレームの列が文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
折れ線グラフを描画して、色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgrey')
三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
データフレームを関数によってグループ分けする	df.groupby(関数)
＜オプション＞暗い赤色を使う	color = 'darkred'
データ列とラベル列を指定して、横棒グラフを描画する	plt.barh(ラベル列, データ列)
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
タプルをミュータブルにする	list(aTuple)
最大長nの両端キューをリストから作る	collections.deque(iterable, maxlen=n)
日付時刻データの時刻	aDatetime.hour
ファイルからの読み込みストリームを使う	open(filepath)
日付時刻データにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
データ列をヒストグラムを用いて可視化する	plt.hist(ds)
n番目の列をインデックスとしてCSVファイルTSVファイルを読む	pd.read_csv(filename, index_col=n)
実数の双曲線正弦の逆数	math.asinh(x)
黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
昇順にリストの要素をソートする	sorted(aList, reverse=True)
タプルのキーを列挙する	aDict.keys()
文字列の最初から部分文字列を探す	s.find(sub)
日付データが日付データより後ろか調べる	aDate > aDate2
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
リストとリストとして淡いを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
本日は何年か知る	datetime.datetime.today().year
大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X')
データフレームのリストカラムの中にある日付データの数を数える	df[aList].isin([value]).sum()
xの小数点以下'4'桁まで表示する	print(':.4f'.format(x))
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
ヒストグラムを描画して、色をビスクに設定する	plt.hist(データ列, color='bisque')
＜オプション＞グラフの色を白に設定する	color = 'white'
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
数列とリストの散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームのカラムの欠損値を前の値で埋める	df[col].fillna(method='ffill')
三変数の最小値	min(x, y, z)
暗い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='dark')
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
明るい色の折れ線グラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
nが5の倍数か調べる	n % 5 == 0
リストとリストのカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
折れ線グラフを描画して、その色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
カウンタ同士でユニオン	aCounter | aCounter2
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
折れ線グラフに大きさnの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markersize=n)
折れ線グラフを描画して、その色をブラウンに設定する	plt.plot(データ列, データ列2, color='brown')
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
パステル調のグラフをリストとリストを用いて描画し、、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
浮動小数点数の最大値	sys.float_info.max
折れ線グラフの大バツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
＜オプション＞コーラル色を使用する	color = 'coral'
複数カラムの散布図を一度に描画する	sns.pairplot(df[[column, column2, column3]])
ヒストグラムを描画して、その色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
暗い色でヒストグラムを描く	plt.hist(xdata, color='dark')
青紫色の線グラフを描画する	plt.plot(データ列, データ列2, color='violet')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
配列とデータ列として明るいの折れ線グラフを描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データフレームのリストカラムの要約統計量	df[aList].describe()
リストと配列の散布図を明るい色として重なりを見やすく描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
＜オプション＞グラフの色をオーキッドに設定する	color = 'orchid'
＜オプション＞ナバホホワイト色を使う	color = 'navajowhite'
折れ線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
線グラフを描画して、その色をレベッカパープルに変更する	plt.plot(データ列, データ列2, color='rebeccapurple')
本日の日数	datetime.datetime.today().day
nのn2乗	n ** n2
ヒストグラムを描画して、その色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
＜オプション＞ライトイエローを使う	color = 'lightyellow'
リストとリストの明るいグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
黒いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
折れ線グラフに大きさnのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
＜オプション＞パープルにグラフの色を指定する	color = 'purple'
ファイルに文字列を書き込む	f.write(s)
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームの中の列を等間隔でn個に分割する	pd.cut(df[col], n)
＜オプション＞グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
データフレームのカラムを丸める	df[col].round()
カウンタをリストとして更新する	aCounter.update(iterable)
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
データ列とリストの散布図を重なりを見やすく色差別ない色として描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
データフレームのリストカラムの値がNaNか調べる	df[aList].isna()
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
＜オプション＞追加モードに設定する	mode = 'a'
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
ヒストグラムを描画して、その色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
ヒストグラムを描画してその色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
リストとリストについての散布図を濃い色を使って重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
リストが空か調べる	len(aList) == 0
データフレームを表示するとき、表示可能な行数をnにする	pd.set_option('display.max_rows', n)
ケンドールとしてデータフレームの相関行列	df.corr(method='kendall')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
配列の最小	np.min(aArray)
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
実数のn乗の実数剰余	pow(x, n, y)
フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
データ列を等しい量になるようにn個にビニングする	pd.qcut(ds, n)
リストを中央値でビン分割する	pd.qcut(aList, 2)
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
データフレームを２つの列で小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
リストとリストの色差別ないグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとイテラブルについての散布図にポイントマーカーを描く	plt.plot(xdata, ydata, marker='.')
数式を積分する	sympy.integrate(e)
キューをリストに変換する	list(deq)
折れ線グラフを描画して、その色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgrey')
ヒストグラムを描画して、色を青に指定する	plt.hist(データ列, color='blue')
カウンタの項目を増やす	aCounter[element] += 1
＜オプション＞シアン色を使う	color = 'cyan'
二つのデータフレームを横方向に一つにまとめる	pd.merge(df, df2)
折れ線グラフのマーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
追加モードでファイルを開く]	open(filepath, mode='a')
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
淡いグラフを数列とリストで描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
列'A'と列'B'をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
ヒストグラムを描画して、その色をグリーンに設定する	plt.hist(データ列, color='green')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
＜オプション＞グラフの色をオレンジレッドに設定する	color = 'orangered'
文字列を全て小文字にする	s.casefold()
ヒストグラムを描画して、その色をアイボリーに設定する	plt.hist(データ列, color='ivory')
第一引数で指定されたファイルの名前	sys.argv[1]
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
折れ線グラフに緑色の三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
nからn2までの整数列を作る	list(range(n, n2+1))
nの桁数	len(str(n))
xが一桁の数か調べる	-9 <= x <= 9
オブジェクトが浮動小数点数かどうか調べる	isinstance(obj, float)
データフレームに重複があるか見る	df.duplicated()
折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
実数の常用対数	math.log10(x)
ヒストグラムを描画して、その色を青紫に指定する	plt.hist(データ列, color='violet')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
データフレームを列ごとに集約し、、最大値を求める	df.groupby(column).max()
＜オプション＞グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
リストの要素を逆順にする	aList[::-1]
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
二つの浮動小数点数が十分に近い	math.isclose(x, x2)
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
2つのリストから辞書	dict(zip(aList, aList2))
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
＜オプション＞グレー色を使う	color = 'gray'
線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
空の集合	set()
折れ線グラフを描画して、その色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
nの三乗	n ** 3
両端キューの先頭を使う	deq[0]
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
データフレームを丸めて、整数型にする	df.round().astype(int)
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
大バツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='X')
＜オプション＞色をパウダーブルーに設定する	color = 'powderblue'
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を算出する	df.groupby([column, column2], as_index=False).mean()
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
色差別ない色として散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
ヒストグラムを描画して、その色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
折れ線グラフの色を白に指定する	plt.plot(データ列, データ列2, color='white')
ヒストグラムの色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
カラーバーを描画する	plt.colorbar()
折れ線グラフのラベルをuntitledに指定する	plt.plot(xdata, ydata, label=untitled)
配列の次元数	aArray.ndim
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
折れ線グラフを描画して、その色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
ヒストグラムを描画して、その色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
集合＼集合	aSet.difference(aSet2)
リストとリストのカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
＜オプション＞グラフの色をハニーデューに設定する	color = 'honeydew'
折れ線グラフを描画して、その色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
有理数の分子	q.numerator
リストとリストについて散布図を描いて、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
ダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
文字列の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
＜オプション＞グラフの色をホットピンクに指定する	color = 'hotpink'
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
散布図に△マーカーを用いる	plt.plot(xdata, ydata, marker='^')
データフレームをインデックスによってソートする	df.sort_index()
折れ線グラフに緑色の▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
文字列の開始位置から先に部分文字列がないかテストする	s.find(sub, start) == -1
色差別ないの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
データフレームの先頭n行	df.head(n)
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
空行をプリントする	print()
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
データ列を1000の位で丸める	ds.round(-3)
リストとリストについての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞グラフの色を耐火レンガに設定する	color = 'firebrick'
双方向キューの先頭に要素を追加する	deq.appendleft(element)
破線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
＜オプション＞シャルトリューズ色を用いる	color = 'chartreuse'
改行なしに変数を表示する	print(value, end='')
＜オプション＞ライトスレイグレーを使う	color = 'lightslategray'
自分自身をモジュールとして	sys.modules[__name__]
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
集合から任意の要素を取り出す	aSet.pop()
＜オプション＞マーカーを丸に変更する	marker = 'o'
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
辞書の値を列挙する	aDict.values()
パラメータについて数式の微分を行う	sympy.diff(e, z)
線グラフの色をライムに指定する	plt.plot(データ列, データ列2, color='lime')
n個の整数リスト	list(range(n))
データフレームのカラムの中に文字列と文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
双方向キューの最初の要素	deq[0]
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
グラフの色使いを暗くする	sns.set(pallete='dark')
赤い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
リストと配列について散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列, データ列2, color='blanchedalmond')
xでデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(x)
散布図に右三角マーカーを使用する	plt.plot(xdata, ydata, marker='>')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
値が集合に含まれない	element not in aSet
配列の行ごとの合計値	np.sum(aArray, axis=1)
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
nがn2以上か調べる	n >= n2
＜オプション＞グラフの色を暗い赤に設定する	color = 'darkred'
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linewidth=n)
リストとリストのカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
文字列の両端から部分文字列を取り除く	s.strip(sub)
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
ヒストグラムを描画してその色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
今日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
日付データが金曜日か調べる	aDate.weekday() == 4
ベクトルの内積	np.dot(aArray, aArray2)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
格子線をグラフに入れる	plt.grid(True)
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
＜オプション＞ライトグリーンを使う	color = 'lightgreen'
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
＜オプション＞色をオレンジに設定する	color = 'orange'
配列が何のデータ型か	aArray.dtype()
標準入力から1行読み取る	input()
ヒストグラムをプロットして、ビン数をnに指定する	plt.hist(データ列, bins=n)
nが3の倍数	n % 3 == 0
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
二次元タプルをフラット化する	sum(aTuple)
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
二つの文字列は等しいか	s == s2
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
nが5で割り切れるか確認する	n % 5 == 0
＜オプション＞グラフの色を黄色に設定する	color = 'yellow'
＜オプション＞エンコーディングをSJISに設定する	encoding = 'shift_jis'
横棒グラフを描画する	plt.barh(ラベル列, データ列)
nがn2以下か調べる	n <= n2
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
ヒストグラムの線のスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
折れ線グラフの上三角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
＜オプション＞ローングリーン色を使う	color = 'lawngreen'
数式の数値	float(e)
オブジェクトのオブジェクト識別子	id(obj)
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
折れ線グラフを描画して、色を濃い青に変更する	plt.plot(データ列, データ列2, color='darkblue')
高頻度方からカウンタを列挙する	aCounter.most_common()
リストとリストについて散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
実数の双曲線余弦の逆数を計算する	math.acosh(x)
データ列の中の欠損値の合計を数える	ds.isna().sum()
パステル調のの折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ミディアムオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumorchid')
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
折れ線グラフのスタイルを破線に設定する	plt.plot(データ列, データ列2, linestyle='dashed')
実数から実数を引く	x - y
散布図に赤いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='r')
データフレームのリストカラムの中にいくつ欠損値があるかカウントする	df[aList].isna().sum()
配列とリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
マッピングから項目名の値をエラーなく得る	aDict.get(key, None)
データフレームを破壊的に複数の列によって昇順に並べる	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列のユニークな値を確認する	df[col].unique()
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの色を黒くする	plt.plot(データ列, データ列2, color='k')
本日の月数	datetime.datetime.today().month
データフレームのリスト列の平均値	df[aList].mean()
＜オプション＞ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
標準入力を使う	sys.stdin
＜オプション＞▲印を描画する	marker = '^'
値を白色でプリントする	print(f'\033[37m{value}\033[0m')
グラフの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
折れ線グラフの丸マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
データフレームの中の欠損値を削除する	df.dropna()
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
＜オプション＞ダーク・スラテグレー色を使う	color = 'darkslategrey'
＜オプション＞グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
データフレームのカラムの欠損値を直後の値で置換する	df[col].fillna(method='bfill')
黒色の星マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='*', c='k')
データフレームからインプレイスで重複を削除する	df.drop_duplicates(inplace=True)
列を10の位で丸めて整数にする	ds.round(-1).astype(int)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
クラスのサブクラス	issubclass(サブクラス, クラス)
データフレームのグループごとの合計を求める	df.groupby(column).sum()
配列とリストについて散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
プロットのデータラベルの位置を(x,y)に設定する	plt.legend(loc=(x, y))
列の未入力値を最大値に設定する	ds.fillna(ds.max())
グラフの描画で淡いカラーパレットを使う	sns.set(pallete='muted')
リストの長さ	len(aList)
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列, データ列2, color='lightsalmon')
カラーコードの菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞サンディーブラウン色を使う	color = 'sandybrown'
日付データが日曜日か調べる	aDate.weekday() == 6
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
ガンマ関数	math.gamma(x)
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
行列の逆行列	np.linalg.inv(aArray)
グラフの描画を見やすくする	import seaborn as sns
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
データフレームのリスト列の中に文字列があるかどうか確認する	df[aList].isin([value])
実数から数を減ずる	x - y
黒い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
コマンド引数の一覧	sys.argv[1:]
文字列の中のパターンによるすべてのマッチを使う	re.findall(pattern, s)
＜オプション＞グラフの色をライトシアンにセットする	color = 'lightcyan'
＜オプション＞色を青緑に設定する	color = 'turquoise'
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
辞書をコピーする	aDict.copy()
行列の行ごとの標準偏差	np.std(aArray, axis=1)
文字列TSVファイルからn番目の列をインデックスにしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフを描画して、その色をバイオレットに指定する	plt.plot(データ列, データ列2, color='violet')
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
nとn2の値を足してnに代入する	n += n2
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
リストとデータ列についての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
日付時刻データをISO8601形式の文字列に変換する	aDatetime.isoformat()
データ列とリストについて濃い色の折れ線グラフを描いて線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='deep')
＜オプション＞バイナリ書き込みモードに設定する	mode = 'wb'
イテラブルと配列についての散布図に赤い四角マーカーを描く	plt.plot(xdata, ydata, marker='s', c='r')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
データフレームの中にがあるか調べる	df.isin([value])
＜オプション＞グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
折れ線グラフを描画して、その色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
ファイルを一行ずつ読む	f.readline()
ヒストグラムを描画して、その色を青に設定する	plt.hist(データ列, color='blue')
グラフのx軸にラベルをつける	plt.xlabel(untitled)
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
乱数シードをnで初期化する	random.seed(n)
折れ線グラフを描画して、その色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
文字列がリストに含まれないか調べる	element not in aList
2を底とする実数の対数	math.log2(x)
標準出力のバッファをフラッシュする	sys.stdout.flush()
折れ線グラフを描画して、その色をフォレストグリーンに指定する	plt.plot(データ列, データ列2, color='forestgreen')
実数のn乗	x ** n
タプルの全値を消去する	aDict.clear()
オブジェクトの参照カウント	sys.getrefcount(obj)
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
ヒストグラムの色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
Pandasで、データ列をタイムスタンプ型に変換する	pd.to_datetime(ds)
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
Pandasで文字列のエポック秒からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
実数を数で割った余り	x % y
折れ線グラフの丸印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
数列とリストの折れ線グラフを描画して、その色をカラーコードに指定する	plt.plot(xdata, ydata, color=rgb)
xが真か調べる	bool(x)
ラベンダー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavender')
下線付きで文字列をプリントする	print(f'\033[4m{value}\033[0m')
データフレームのリストカラムの値は欠損値か調べる	df[aList].isna()
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
マッピングの項目名の値	aDict[key]
日付時刻データの時間を使う	aDatetime.time()
折れ線グラフを描画して、その色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
エラーなく集合から要素を取り除く	aSet.discard(element)
実数を千の位で四捨五入する	round(x, -3)
明るい色の柱状図で配列を描画する	plt.hist(xdata, color='bright')
データフレームの中にいくつ日付データが含まれるか数える	df.isin([value]).sum()
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
組の各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
赤い三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
実数の逆正弦	math.asin(x)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
日付時刻データが月曜日	aDatetime.weekday() == 0
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
集合の全ての要素が別のセットに含まれるか調べる	aSet.issubset(aSet2)
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
グラフをポスター用に設定する	sns.set(context='poster')
＜オプション＞グラフの色を青に設定する	color = 'blue'
ヒストグラムを描画してその色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
データフレームのリストカラムの標本標準偏差	df[aList].std()
データフレームを表示するとき、小数点以下の表示精度をセットする	pd.set_option('precision', n)
要素を両端キューのn番目に差し込む	deq.insert(n, element)
線グラフの色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
タプルの先頭	aTuple[0]
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
ダークシアグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkseagreen')
データ列が何秒か見る	ds.dt.second
文字列がタイトル大文字小文字	s.istitle()
＜オプション＞namesをカラムの名前に設定する	names = names
列によってデータフレームをソートし、、行を振り直す	df.sort_values(columns).reset_index(drop=True)
ヒストグラムを描画して色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
リストとリストの散布図を描き、、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
両端キューをリストにする	list(deq)
暗いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='dark', color='r')
折れ線グラフを描画して、その色をライトスレイグレーにセットする	plt.plot(データ列, データ列2, color='lightslategrey')
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
osモジュールをインポートする	import os
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
実数を実数で整数除算する	x // y
列でデータフレームをグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
nとn2の差	n - n2
全要素を1で初期化された行列を初期化する	np.ones(行数, 列数, dtype=np.int)
ヒストグラムを描画してその色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
リストを文字列リストに変換して部分文字列で連結する	sub.join(map(str, iterable))
リストとリストについての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
二つの浮動小数点数が近似値か確認する	math.isclose(x, x2)
全要素を０で初期化されたブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
ヒストグラムを描画して、その色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
双方向キューの先頭に要素を入れる	deq.appendleft(element)
日付時刻データが水曜日か	aDatetime.weekday() == 2
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
整数nを二進数表現に変換する	bin(n)
＜オプション＞ミディアムシアグリーンを使う	color = 'mediumseagreen'
ヒストグラムを描画して、その色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
列を中央値でビン分割する	pd.qcut(ds, 2)
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
リストとリストについて黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
ヒストグラムの色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
二つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
パステル調のグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
破線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
集合のイミュータブル版	frozenset(aSet)
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
アクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='aquamarine')
n個の数値イテラブルを求める	range(n)
本日の日付時刻	datetime.datetime.today()
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
文字列の右側からタブを取り除く	s.rstrip('\t')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
未初期化の配列	np.empty(要素数, dtype=np.int)
折れ線グラフの色をグリーンに指定する	plt.plot(データ列, データ列2, color='green')
ヒストグラムを描画して、その色をピンクに設定する	plt.hist(データ列, color='pink')
＜オプション＞グラフの色をダークオレンジに設定する	color = 'darkorange'
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
タプルを反転する	reversed(aTuple)
実数の逆余弦	math.acos(x)
リストとデータ列についての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
＜オプション＞バイナリ書き込みモードを使う	mode = 'wb'
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
オブジェクトをn回繰り返すイテラブル	itertools.repeat(element, n)
タイムスタンプデータにn日分、加える	aDatetime + datetime.timedelta(days=n)
最大長を指定して、両端キュー	collections.deque(maxlen=n)
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
マッピングの項目を列挙する	aDict.values()
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
整数nはリストのどれか	n in aList
散布図に三角マーカーを使う	plt.plot(xdata, ydata, marker='^')
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
nまでの奇整数列	list(range(1, n, 2))
＜オプション＞カンマをセパレータで使う	sep = ','
データフレームのカラムの値が欠損値か調べる	df[col].isna()
折れ線グラフを描画して色を黒くする	plt.plot(データ列, データ列2, color='k')
＜オプション＞色をタンに変更する	color = 'tan'
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
nをn2分の一にする	n /= n2
リストを引数として展開して出力する	print(*aList)
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
リストと配列についての散布図に黒色の丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
predicateFuncが真となる列の要素を得る	itertools.takewhile(predicateFunc, iterable)
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
折れ線グラフを破線で描画する	plt.plot(データ列, データ列2, linestyle='dashed')
リストとリストについて散布図を描画して、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
データフレームを'A'列と'B'列でを用いて破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
キーがマップに存在しないとき、要素を追加する	aDict.setdefault(key, element)
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
データフレームをグループ化し、それぞれの列に対し最大値を算出する	df.groupby(column)[column2].max()
ヒストグラムを描画してその色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
データ列を折れ線グラフに描画してマーカーをポイント印にする	plt.plot(データ列, データ列2, marker='.')
辞書のキーを列挙する	list(aDict)
二点間のユークリッド距離	math.dist(point, point2)
文字列の開始位置番目からと終了位置までの範囲に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
折れ線グラフを描画して、色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
配列のヒストグラムを描画する	plt.hist(aArray)
グラフに鉛直方向の点線をつける	plt.axvline(x=0, linestyle='dotted')
整数nを八進文字列に変換する	oct(n)[2:]
＜オプション＞インディアンレッド色を使う	color = 'indianred'
真部分集合か調べる	aSet < aSet2
＜オプション＞マゼンタにグラフの色を設定する	color = 'magenta'
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ファイルパスの絶対パス	os.path.abspath(filepath)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列, データ列2, color='whitesmoke')
ヒストグラムを描画して、その色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
nにn2を足して代入する	n += n2
実数に浮動小数点数をかける	x * y
ヒストグラムを描画して、その色を貝殻に設定する	plt.hist(データ列, color='seashell')
＜オプション＞ダークスレートブルーにグラフの色を変更する	color = 'darkslateblue'
黒い下三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
等間隔で配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
文字列がタプルの要素でないか調べる	element not in aTuple
文字列の出力を改行なしに行う	print(value, end='')
0から始まる無限なリストを求める	itertools.count()
カウンタの最頻出な文字列	aCounter.most_common()[0]
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
日付データが何曜日か知る	aDate.weekday()
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
八進数文字列を整数に変換する	int(s, 8)
ピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='pink')
見やすいグラフを使用する準備をする	import seaborn as sns
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
＜オプション＞ブルーバイオレット色を使う	color = 'blueviolet'
データフレームのカラムの中に含まれる文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
折れ線グラフを描画して、その色をオレンジレッドに変更する	plt.plot(データ列, データ列2, color='orangered')
散布図に赤いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
散布図のマーカーの大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
辞書のキーの値	aDict[key]
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
カラムの値をValueMapで一度に置換する	ds.replace(ValueMap)
ヒストグラムを描画して、色を白に設定する	plt.hist(データ列, color='white')
折れ線グラフの丸印を赤色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
現在のモジュール	sys.modules[__name__]
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
タプルは少なくともひとつ真か	any(aTuple)
文字列の右側から部分文字列を除去する	s.rstrip(sub)
折れ線グラフの色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
＜オプション＞ミディアムブルー色を使う	color = 'mediumblue'
文字列に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
綺麗なプロットを使う準備をする	import seaborn as sns
xを浮動小数点数に変換する	float(x)
＜オプション＞ミディアムオーキッドにグラフの色を指定する	color = 'mediumorchid'
リストとリストの散布図を描いて右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
カウンタを集合に変換する	set(aCounter)
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
＜オプション＞グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
ヒストグラムを描画して、その色をサーモンに指定する	plt.hist(データ列, color='salmon')
実線に折れ線グラフを変更する	plt.plot(データ列, データ列2, linestyle='solid')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
黒い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
データフレームのリストカラムの未入力値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
有理数の分母	q.denominator
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
データフレームのカラムの平均値	df[col].mean()
折れ線グラフを描画して、色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
集合をイミュータブルなセットに変換する	frozenset(aSet)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
＜オプション＞クロスマーカーを使用する	marker = 'x'
ファイルのディレクトリ名	os.path.dirname(filepath)
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
デピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='deeppink')
データ列と配列の折れ線グラフを描き、、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
＜オプション＞リネン色を使う	color = 'linen'
リストとリストの青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
実数の正弦	math.sin(x)
折れ線グラフに大きさnのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
文字列中にひとつでも非英字があるか調べる	any(not c.isalpha() for c in s)
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
グラフの描画で色差別ないカラーパレットを使う	sns.set(pallete='colorblind')
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
コーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
nからn2までのスライス	slice(n, n2)
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
ダークサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darksalmon')
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
データフレームの中のカラムをn個にビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフに大きさnの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markersize=n)
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
カウンタをリストで更新する	aCounter.update(iterable)
棒グラフを描画する	plt.bar(ラベル列, データ列)
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
折れ線グラフの色をディープスカイブルーに指定する	plt.plot(データ列, データ列2, color='deepskyblue')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列, データ列2, marker='X')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフに黄色い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
リストをヒストグラムで可視化する	plt.hist(aList)
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
グラフにグリッド線を入れる	plt.grid(True)
直後の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='bfill')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
日付時刻データは何日か知る	aDatetime.day
ハローワールドとプリントする	print('Hello World')
文字列の大文字小文字をする	s.casefold()
線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
実数以上の最小の整数	math.ceil(x)
ファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
JSON文字列を辞書に変換する	json.loads(jsonString)
文字列を最後の部分文字列で二分し、後半の文字列を見る	s.rpartition(sub)[-1]
＜オプション＞グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
ダークバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkviolet')
文字列をカンマで区切って、文字列リストに変換する	s.split(',')
リストとしてデータフレームの指定された列を選択する	df[column].values.tolist()
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
三つの最も小さい値を求める	min(x, y, z)
データフレームの先頭を見る	df.head()
日付データの月数を求める	aDate.month
＜オプション＞オールドレースを用いる	color = 'oldlace'
リストにリストを追加する	aList.extend(aList2)
明るいグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
オブジェクトのイテレータ	iter(obj)
文字列を最後の部分文字列で二つに区切って、最初の文字列を使う	s.rpartition(sub)[0]
nを16進文字列に変換する	hex(n)[2:]
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
nが2で割り切れないか	n % 2 == 1
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
ヒストグラムを描画して、その色を珊瑚に設定する	plt.hist(データ列, color='coral')
nの無限リスト	itertools.repeat(n)
双方向キューに要素をエンキューする	deq.appendleft(element)
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
縦軸のラベルをuntitledに設定する	plt.ylabel(untitled)
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ファイルパスを文字列の示す文字コードとして書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
データフレームのカラムの欠損値を最小値にセットする	df[col].fillna(df[col].min())
整数nを二進文字列に変換する	bin(n)[2:]
データ列の文字列長を列として使う	ds.str.len()
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
ファイルをオープンして]、追加ストリームを求める	open(filepath, mode='a')
数列とリストの散布図を重なりを見やすく暗い色で描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
淡いの折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
浮動小数点数を十の位で丸める	round(x, -1)
データフレームのカラムをインデックスに設定する	df.set_index(column)
0からNまでの配列	np.arange(N)
ヒストグラムを描画して、その色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
プロットの中に枠なしの補足を付ける	plt.legend(frameon=False)
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
リストとリストについて破線グラフを描画して、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
黒色の四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
ファイルの拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
3変数の最も小さい値	min(x, y, z)
eの乗数	math.exp(x)
日付時刻データが何分か知る	aDatetime.minute
イエローグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellowgreen')
日付時刻データのタイムゾーン	aDatetime.timetz()
折れ線グラフを描画してその色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
データフレームの行の名前を、nameからname2に付け直す	df.rename(index={name: name2})
プロットのサイズを変更する	plt.figure(figsize=(width, height))
淡いの色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフの星マーカーを赤くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
＜オプション＞グラフの色をレモンシフォンにセットする	color = 'lemonchiffon'
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
行列の列	aArray[:, 列番号]
英字を使う	string.ascii_letters
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
データフレームのカラムのどの値が最も現れるか確認する	df[col].mode()
＜オプション＞グラフの色をチョコレートに設定する	color = 'chocolate'
リストとデータ列で明るいグラフを描画して、その線幅をnにする	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
浮動小数点数に浮動小数点数を掛ける	x * y
データ列を百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
表データの行を範囲指定して抽出する	df[start:end]
散布図に左三角マーカーを用いる	plt.plot(xdata, ydata, marker='<')
Pandasでエポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
明るい色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='bright')
＜オプション＞淡いピンク色色を使う	color = 'lightpink'
左三角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='<')
xを論理値に変換する	bool(x)
データフレームを表示するとき、表示する最大行数を増やす	pd.set_option('display.max_rows', n)
文字列の先頭から部分文字列を探す	s.find(sub)
数値の微分を算出する	sympy.diff(e)
パステル調のグラフの色を黒色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
逆正弦を求める	math.asin(x)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
nをn2乗に増やす	n **= n2
折れ線グラフを描画して、その色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
黒い菱形マーカーをデータ列と配列の散布図に描画する	plt.plot(xdata, ydata, marker='D', c='k')
ヒストグラムを描画してその色をミディアムスプリンググリーンにする	plt.hist(データ列, color='mediumspringgreen')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
文字列を白色にする	f'\033[37m{value}\033[0m'
xが1、もしくは2もしくは3に等しいかどうか	x == 1 or x == 2 or x == 3
折れ線グラフに大きさnのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞ハニーデュー色を使う	color = 'honeydew'
＜オプション＞グラフの色をスノーに設定する	color = 'snow'
ヒストグラムを描画して、色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
＜オプション＞ダークシアン色を使う	color = 'darkcyan'
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列, データ列2, color='lavender')
分割数nで配列をビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフを描く	plt.plot(xdata, ydata)
文字列から部分文字列を取り除く	s.replace(sub, '')
初期値で全要素を初期化された行列	np.full((行数, 列数), 初期値, dtype=np.int)
整数nが集合のどれかか判定する	n in aSet
＜オプション＞スカイブルー色を使う	color = 'skyblue'
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
＜オプション＞グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
ヒストグラムを描画して、その色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
ユニークな値を要素とする配列	np.unique(aArray)
キーがマッピングにあるかどうか調べる	key not in aDict
空白で文字列を区切って文字列リストに変換する	s.split()
＜オプション＞グラフの色をダークサーモンに設定する	color = 'darksalmon'
ヒストグラムの透明度をxに指定する	plt.hist(データ列, alpha=x)
折れ線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
＜オプション＞色をブルーバイオレットに設定する	color = 'blueviolet'
nからn2までの整数列	list(range(n, n2+1))
n番目のカラムをインデックスとしてCSVファイルTSVファイルを読み込む	pd.read_csv(filename, index_col=n)
＜オプション＞コロンを区切りで使う	sep = ':'
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
リストとリストの色差別ないグラフを描いて、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='gray')
セットが空か調べる	len(aSet) == 0
タプルが少なくとも一つ真か調べる	any(aTuple)
線グラフを描画して色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
aListn番目から要素をポップする	aList.pop(n)
ヒストグラムを描画して、その色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
データフレームを未入力値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
コマンドラインフラグの状態	sys.flags
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
ヒストグラムを描画して、その色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
＜オプション＞どの行もヘッダに設定しない	header = None
折れ線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
濃い色の折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
折れ線グラフの丸マーカーを黄色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
データ列とデータ列の暗いグラフを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
散布図に黒い菱形マーカーを用いる	plt.plot(xdata, ydata, marker='D', c='k')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
折れ線グラフを描画して、その色をミディアムブルーに変更する	plt.plot(データ列, データ列2, color='mediumblue')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
ユニコードを文字にする	chr(unicode)
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
＜オプション＞ダークオレンジ色を使う	color = 'darkorange'
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
濃いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
＜オプション＞マーカーを四角に変更する	marker = 's'
折れ線グラフに緑色の星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
＜オプション＞文字列の示すエンコーディングを使う	encoding = s
TSVからカンマ区切りのファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
集合から要素を取り除く	aSet.remove(element)
＜オプション＞グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
＜オプション＞線種を破線に設定する	linestyle = 'dashed'
スプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='springgreen')
＜オプション＞右三角マーカーを使う	marker = '>'
折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
データフレームを降順に列によってを用いてソートする	df.sort_values(by=column, ascending=False)
文字を文字コードに変換する	ord(ch)
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
データ列とリストについての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
データフレームから列名を複数指定して選択する	df[columns]
カウンタをセットに変換する	set(aCounter)
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
データ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフを描画して、その色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフを描画して、その色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
ヒストグラムを描画して、色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
＜オプション＞ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
＜オプション＞グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列を削除する	df.drop(column, axis=1)
データフレームのカラムの中に文字列があるか	df[col].isin([value])
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
＜オプション＞整数型を使う	dtype = np.int
データ列のpercentパーセンタイル	ds.quantile(percent/100)
＜オプション＞グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
折れ線グラフを描画して、その色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
複数カラムのヒストグラムを一度に描く	sns.pairplot(df[[column, column2, column3]])
＜オプション＞グラフの色をスノーに指定する	color = 'snow'
キーが辞書上で未定義か調べる	key not in aDict
スタックの要素をインプレースに逆に並べ直す	deq.reverse()
赤い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
データフレームの重複した行数のマスク	df.duplicated()
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
リストと数列についての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
＜オプション＞改行コードを旧Macに設定する	newline = '\r'
リストの先頭の要素	aList[0]
リストをタプルにする	tuple(aList)
カウンタのキーとカウントを列挙する	aCounter.items()
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
リスト内の要素が全て真か	all(aList)
列を文字列に変換してつなげる	''.join(map(str, iterable))
ダークバイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='darkviolet')
リストとリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフに緑色の下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
n2がn以上、かつn3以下か調べる	n <= n2 and n2 <= n3
＜オプション＞パールバイオレットレッド色を使う	color = 'palevioletred'
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
nとn2の論理和を計算する	n | n2
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
イテラブルを文字列リストに変換してタブによって連結する	'\t'.join(map(str, iterable))
配列とリストについて破線グラフを描画してその色を暗いにセットする	plt.plot(xdata, ydata, linestyle='dash', color='dark')
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
折れ線グラフを描画して、その色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
カウンタ同士で積集合	aCounter & aCounter2
データフレームを'A'列によって小さい順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
リストとリストの淡いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
ヒストグラムを描画して、その色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
カラムの名前を付けずにJSONLファイルにデータフレームを保存する	df.to_csv(filename, header=None)
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
明るい色でリストについての柱状図を描画する	plt.hist(xdata, color='bright')
リストを複製する	aList.copy()
＜オプション＞読み込みモードに設定する	mode = 'r'
データフレームとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
データフレームの中の欠損値を取り除く	df.dropna()
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s')
データフレームの列がx以上かつx2未満のデータを選択する	df[(x <= df[column]) & (df[column] < x2)]
ヒストグラムを描画して、その色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
折れ線グラフを描画して、色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
＜オプション＞カラムの名前をnamesに設定する	header = names
散布図を赤い四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c='r')
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
＜オプション＞ダークオリーブグリーン色を使う	color = 'darkolivegreen'
データフレームのインデックスの一覧	df.index
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
データ列の分散	ds.var()
グラフの中の縦軸のラベルをuntitledに指定する	plt.ylabel(untitled)
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
文字列を最後の部分文字列で二分し、前半の文字列を見る	s.rpartition(sub)[0]
データフレームを降順に列によってによってソートする	df.sort_values(by=column, ascending=False)
タプルの末尾	aTuple[-1]
ヒストグラムを描画して、その色をデピンクに設定する	plt.hist(データ列, color='deeppink')
変数をスワップする	x, y = y, x
濃いカラーパレットをプロットの描画で使う	sns.set(pallete='deep')
リストとリストについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
日付データが日付データより先	aDate < aDate2
rangeの無限バージョン	itertools.count(start=n, step=step)
実数を切り上げる	math.ceil(x)
データフレームの未入力値を前の行の値で置換する	df.fillna(method='ffill')
ヒストグラムを描画してその色をターコイズにセットする	plt.hist(データ列, color='turquoise')
黒色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
xに横棒グラフの幅を指定する	plt.barh(ラベル列, データ列, width=x)
データラベルをグラフ中の(x,y)の場所に入れる	plt.legend(loc=(x, y))
ヒストグラムを描画してその色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
整数nの十六進文字列	hex(n)[2:]
整数nがリストのどれかか調べる	n in aList
折れ線グラフを描画して、色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
リストとリストの折れ線を文字列の色でプロットする	plt.plot(xdata, ydata, color=s)
ふたつのリストの積集合	list(set(aList) & set(aList2))
ベクトルの各要素の最大公約数	np.gcd(aArray, aArray2)
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
＜オプション＞スラグレー色を使用する	color = 'slategrey'
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
折れ線グラフの下三角マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
線グラフの色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
ファイルの絶対パス	os.path.abspath(filepath)
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
2つの変数を文字列で区切って出力する	print(value, value2, sep=s)
データフレームをCSVファイルを使ってJSONLファイルに書き込む	df.to_csv(filename)
暗いグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
スレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slateblue')
シーケンスの組み合わせ	itertools.combinations(iterable, n)
棒グラフの色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
浮動小数点数に実数を加える	x + y
折れ線グラフにサイズnの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
データフレームから最初の列を除く	df[df.columns[1:]]
折れ線グラフを描画して、色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
年月日と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
ヒストグラムの色をアクアに変更する	plt.hist(データ列, color='aqua')
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
xが1もしくは2か	x == 1 or x == 2
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
散布図を四角マーカーで描画する	plt.plot(xdata, ydata, marker='s')
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
折れ線グラフを描画してその色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
文字列中の部分文字列の登場回数をカウントする	s.count(sub)
文字列を正規表現で分割する	re.split(pattern, s)
リストのn番目の	aList[n]
折れ線グラフを描画して、その色を赤に変更する	plt.plot(データ列, データ列2, color='red')
文字列は片仮名かどうか調べる	('ァ' <= ch <= 'ン')
リストとリストについて明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
n進文字列を整数に変換する	int(s, n)
文字列をバイト配列に変換する	bytearray(s)
折れ線グラフを描画して、その色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
＜オプション＞エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
データフレームの列のユニークな値	df[col].unique()
文字列中の部分文字列を文字列に置換する	s.replace(sub, newsub)
＜オプション＞改行コードを旧Macに変更する	newline = '\r'
＜オプション＞色をグリーンイエローに設定する	color = 'greenyellow'
集合にリストを追加更新する	aSet.update(iterable)
データフレームをタブ区切りとしてJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
項目名がタプルに存在するか判定する	key not in aDict
クラスは名前付きタプル	issubclass(C, tuple)
nの無限数列	itertools.repeat(n)
文字列の右側	s[-1]
データ列をインポートする	import pandas as pd
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
タプルのn番目以降の部分を取り出す	aTuple[n:]
明るい色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='bright')
データフレームを'A'列を用いて大きい順に破壊的に並べる	df.sort_values(by='A', ascending=False, inplace=True)
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
＜オプション＞ダークマゼンタ色を使う	color = 'darkmagenta'
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
折れ線グラフを描画して、その色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
リストと配列について破線グラフを描画し、色をパステル調のに変更する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
フクシア色の線グラフを描画する	plt.plot(データ列, データ列2, color='fuchsia')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
列'A'と列'B'をキーとして2つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
タイムスタンプデータの秒数を使う	aDatetime.second
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
辞書を浅くコピーする	dict(aDict)
折れ線グラフの色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
セットをイミュータブルなセットにする	frozenset(aSet)
リストの要素を昇順に並べる	sorted(aList, reverse=False)
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
オプションで、標準エラーを使用する	file = sys.stderr
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
リストの中の最小値	min(aList)
データフレームをグループ化し、各列に対し個数を計算する	df.groupby(column)[column2].count()
要素がマップの値として含まれている	element in aDict.values()
列の一覧	df.info()
折れ線グラフの左三角印を青色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
列でデータフレームをグループ化し、要約統計量を求める	df.groupby(column).describe()
＜オプション＞文字列を区切りで使う	sep = s
分割数nとしてデータフレームの中の列を等量でビン分割する	pd.qcut(df[col], n)
ヒストグラムを描画して、その色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
グラフの背景色を白くする	sns.set(style='whitegrid')
配列とリストについての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
＜オプション＞パパイヤウィップ色を使う	color = 'papayawhip'
データフレームのインデックス一覧	df.index
両端キューの中に要素が含まれてるか調べる	element in deq
データフレームを関数の値でグループ化する	df.groupby(関数)
リストとリストとして淡いを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
＜オプション＞グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
ゼロ埋めされた配列	np.zeros(要素数)
＜オプション＞フォレストグリーン色を使う	color = 'forestgreen'
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
リストとリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
オブジェクトの無限イテラブル	itertools.repeat(element)
折れ線グラフのポイントマーカーを緑色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
折れ線グラフの色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
キューを空にする	deq.clear()
リストとリストについての散布図を淡い色として描画する	plt.plot(xdata, ydata, c='muted')
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
＜オプション＞グラフの色をダークグリーンにセットする	color = 'darkgreen'
最適な位置に凡例を入れる	plt.legend(loc='best')
＜オプション＞グラフの色をロイヤルブルーに設定する	color = 'royalblue'
データフレームから型リストで指定したデータ型の列を取り出す	df.select_dtypes(include=typeList)
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフに描画してマーカーを星にする	plt.plot(データ列, データ列2, marker='*')
データフレームのリストカラムの中に文字列と文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
赤い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
折れ線グラフの星マーカーを緑色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
データ列を折れ線グラフに描画して、マーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
スカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='skyblue')
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
数式を変数についてn階微分する	sympy.diff(e, z, n)
データフレームの最頻値	df.mode()
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategrey'
リストと配列で色差別ないグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
リストの最後を使う	aList[-1]
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
グラフの色を全般的に濃くする	sns.set(pallete='deep')
データフレームの指定された列を配列に変換する	df[column].values
現在が何時か知る	datetime.date.today().hour
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
リストとリストの明るいグラフを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightskyblue')
数式の変数にnを代入する	e.subs(z, n)
折れ線グラフの丸マーカーを青くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
明るいの折れ線グラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
実数のcosを計算する	math.cos(x)
リストとリストについて散布図を描画して、上三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='^', c=rgb)
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
＜オプション＞グラフの色をアクアマリンにする	color = 'aquamarine'
列'A'と列'B'をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
predicateFuncがTrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
＜オプション＞改行の代わりに文字列を用いる	end = s
日付データが日付データより前か	aDate < aDate2
ひとつでも小文字が文字列内に含まれる	any(c.islower() for c in s)
＜オプション＞グラフの色をタンに設定する	color = 'tan'
折れ線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列, データ列2, marker='v')
＜オプション＞グラフの色をナバホホワイトに指定する	color = 'navajowhite'
＜オプション＞ディープスカイブルー色を使う	color = 'deepskyblue'
折れ線グラフを描画して、その色をアンティークホワイトに指定する	plt.plot(データ列, データ列2, color='antiquewhite')
データフレームを'A'列によってまとめたグループ	df.groupby('A')
折れ線グラフに黄色い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
シルバー色の線グラフを描画する	plt.plot(データ列, データ列2, color='silver')
文字列を全て小文字に変換する	s.lower()
ランダムにデータフレームから抽出する	df.sample()
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
辞書を浅くコピーする	aDict.copy()
＜オプション＞グラフの色をターコイズに設定する	color = 'turquoise'
折れ線グラフを描画して色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
集合が空集合でないか	len(aSet) != 0
データフレームのリスト列の値をValueMapでまとめて置換する	df[aList].replace(ValueMap)
折れ線グラフを描画して、その色を白に設定する	plt.plot(データ列, データ列2, color='white')
折れ線グラフを描画して、その色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
折れ線グラフを描画して、その色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
xが-9以上9以下	-9 <= x <= 9
既存のファイルをBOM付きで追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフのバツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
＜オプション＞ゲインズボロ色を使う	color = 'gainsboro'
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
データフレームを表示するとき、ヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
折れ線グラフを描画して、その色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
ヒストグラムを描画して、その色をラベンダーに変更する	plt.hist(データ列, color='lavender')
＜オプション＞オレンジ色を使う	color = 'orange'
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
データ列を折れ線グラフに描画して、マーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
２つのデータ列を並べて箱ヒゲ図にする	plt.boxplot([データ列, データ列2])
折れ線グラフのマーカーを四角にする	plt.plot(データ列, データ列2, marker='s')
データフレームを二つの列の値でグループ化する	df.groupby(['A', 'B'])
リストとリストについて散らばりを可視化する	plt.scatter(xdata, ydata)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの列の値がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
nがn2の倍数か	n % n2 == 0
線グラフの色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
文字列が全てアスキー文字か調べる	s.isascii()
リストとリストのパステル調のグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['A'].value_counts().sort_index().index
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
＜オプション＞グラフの色をライトグリーンにセットする	color = 'lightseagreen'
リストとリストについて散布図を描画して、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
シーケンスを配列に変換する	np.array(iterable)
データフレームの重複した行を数える	df.duplicated().sum()
＜オプション＞グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
組のn番目以降の部分を得る	aTuple[n:]
リストを四分位数ごとにビニングする	pd.qcut(aList, 4)
要素ひとつのタプル	(element,)
データ列の欠損値をxで補う	ds.fillna(x)
データフレームのリストカラムを整数に丸める	df[aList].round()
カラーコードの▲マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='^', c=rgb)
線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
単位行列	np.eye(行数, 列数)
最初の部分文字列で文字列を分割したときの残りの文字列	s.partition(sub)[-1]
カラーテーマを淡くする	sns.set(pallete='muted')
淡い色として柱状図を描画する	plt.hist(xdata, color='muted')
浮動小数点数の整数部	math.modf(x)[1]
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
破線グラフの色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
要素が両端キューの中に存在する	element in deq
折れ線グラフに大きさnの三角印を描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
＜オプション＞グラフの色を赤に設定する	color = 'red'
ヒストグラムを描画して、その色をビスクに設定する	plt.hist(データ列, color='bisque')
データフレームの未入力値を直後の値で埋める	df.fillna(method='bfill')
データフレームを複数の列によってソートする	df.sort_values(by=column)
ヒストグラムを描画して、その色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
ヒストグラムを描画して、その色をペルーに設定する	plt.hist(データ列, color='peru')
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
データフレームのカラムのNaNをモードに設定する	df[col].fillna(df[col].mode().iloc[0])
＜オプション＞イエローグリーン色を使う	color = 'yellowgreen'
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
第二コマンド引数	sys.argv[1]
等差数列から整数乱数を生成する	random.randrange(start, end, step)
日付データからn日分、引く	aDate - datetime.timedelta(days=n)
リストと数列の散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
＜オプション＞パープルにグラフの色をセットする	color = 'purple'
線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='turquoise')
データ列の各データが何回出現するか見る	ds.value_counts()
線グラフの色をカーキにする	plt.plot(データ列, データ列2, color='khaki')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
黒い大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
ファイルが存在するか調べる	os.path.exists(filepath)
▲マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
ヒストグラムを描画して色をアクアに設定する	plt.hist(データ列, color='aqua')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
日付時刻データの日付を使う	aDatetime.date()
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
行列の列ごとの最小値	np.min(aArray, axis=0)
方程式として数式の変数の解を求める	sympy.solve(e, z)
日付データと日付データの時間差	aDate - aDate2
データ列とリストについての散布図に下三角マーカーを描く	plt.plot(xdata, ydata, marker='v')
ファイルが存在しないか	not os.path.exists(filepath)
折れ線グラフに丸印を用いる	plt.plot(データ列, データ列2, marker='o')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームのカラム一覧を見る	df.info()
データ列を折れ線グラフに描画して、マーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
リストとデータ列について黒色の濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
色差別ないグラフをリストと数列で描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
デフォルトでグラフをいい感じに設定する	sns.set()
文字列は全て識別子名か調べる	s.isidentifier()
全要素を初期値で初期化された配列	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムを描画して、その色をサーモンに設定する	plt.hist(データ列, color='salmon')
コマンドライン引数	sys.argv
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
ヒストグラムを描画してその色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
0からnまでの整数列	list(range(n+1))
二つの集合がセットと互いに素か調べる	aSet.isdisjoint(aSet2)
赤い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフの三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
データ列を箱ひげ図にする	plt.boxplot(データ列)
実数を実数で割る	x / y
文字列は全て印字できるかどうか確認する	s.isprintable()
平均値でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].mean())
棒を描画する	plt.bar(ラベル列, データ列)
紺碧にヒストグラムの色をする	plt.hist(データ列, color='azure')
文字列がリストの要素でないか	element not in aList
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
整数nを二進表現に変換する	bin(n)
折れ線グラフを描画して、その色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
文字列のn番目	s[n]
データフレームのカラムの最頻値	df[col].mode()
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
透明度alphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
小数点数の二進対数	math.log2(x)
文字列内にひとつでもASCII文字があるか調べる	any(c.isascii() for c in s)
書式をマッピングでフォーマットする	formatText.format_map(aDict)
リストとデータ列の破線グラフをプロットして、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
＜オプション＞レモンシフォン色を使う	color = 'lemonchiffon'
数式を簡略にする	sympy.sympify(e)
濃いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
組の最初の文字列を探す	aTuple.index(element)
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
数列とリストについての散布図を重なりを見やすくパステル調の色で描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
配列の合計値	np.sum(aArray)
リストとリストの散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
真上位集合か判定する	aSet > aSet2
オプションで、標準出力を出力にする	file = sys.stdout
＜オプション＞四角印を加える	marker = 's'
複数の列によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
リストとイテラブルの青い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
グラフで使うx軸の軸名をuntitledに変更する	plt.xlabel(untitled)
線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列, データ列2, color='darkolivegreen')
データフレームのカラムのpercent分位数を計算する	df[col].quantile(percent/100)
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
＜オプション＞色をホワイトスモークに変更する	color = 'whitesmoke'
データフレームのどの値が頻出か見る	df.mode()
散布図に下三角マーカーを使う	plt.plot(xdata, ydata, marker='v')
ダークシアグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='darkseagreen')
ヒストグラムを描画して色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
＜オプション＞BOM付きを使う	encoding = 'utf_8_sig'
グラフの用途をスライドに変更する	sns.set(context='talk')
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()
プラットホームがLinuxか	sys.platform.startswith('linux')
スラッシュで区切って２つの変数をプリントする	print(value, value2, sep='/')
文字列がリストの要素でないか調べる	element not in aList
折れ線グラフに描画して、印を下三角印にする	plt.plot(データ列, データ列2, marker='v')
nが一桁の整数か調べる	-9 <= n <= 9
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
リストとリストについて相関を可視化する	plt.scatter(xdata, ydata)
ファイルを全部読み込む	f.read()
Pandasで、データフレームのcollをフォーマットfmtで日付データに変換する	pd.to_datetime(df[col], format=fmt)
データフレームを各列と列の組み合わせ毎にグループ化して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
文字列を空白で区切り、整数リストにする	map(int, s.split())
＜オプション＞アリスブルー色を使う	color = 'aliceblue'
＜オプション＞データ型を指定する	dtype = np.int16
＜オプション＞グレーを使う	color = 'grey'
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
リストとリストの黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
淡い色のヒストグラムとしてリストを描画する	plt.hist(xdata, color='muted')
折れ線グラフを描画して、その色をダークゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='darkgoldenrod')
ヒストグラムを描画してその色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
データフレームの列がxより大きくx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
データ列の度数分布図をプロットする	plt.hist(ds)
リストと数列として色差別ないを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
散布図に四角マーカーを使う	plt.plot(xdata, ydata, marker='s')
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
リストの要素をソートする	sorted(aList)
リストと配列についての散布図に黒い▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
ヒストグラムを描画して、その色をモカシンに設定する	plt.hist(データ列, color='moccasin')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
リストと配列について散布図を描いて、ポイントマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='.', c=rgb)
＜オプション＞ミディアムアクアマリンに色を設定する	color = 'mediumaquamarine'
ヒストグラムを描画して、その色を暗い赤に設定する	plt.hist(データ列, color='darkred')
nがn2と等しいか調べる	n == n2
ふたつの集合が集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
nをn2だけ減少させる	n -= n2
ヒストグラムを描画して、その色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
イテラブルから両端キューを作る	collections.deque(iterable)
データフレームのリストカラムの欠損値をxに指定する	df[aList].fillna(x)
折れ線グラフを描画して、その色を青に設定する	plt.plot(データ列, データ列2, color='blue')
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
リストとリストについての散布図に星マーカーを描く	plt.plot(xdata, ydata, marker='*')
線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='turquoise')
＜オプション＞星マーカーを使う	marker = '*'
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
カラーバーを水平で描く	plt.colorbar(orientation='horizontal')
散布図にパステル調の色のマーカーを使う	plt.plot(xdata, ydata, c='pastel')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
パウダーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='powderblue')
データフレームを各列毎に集計して、列の最小値を計算する	df.groupby(column)[column2].min()
本日の曜日を整数で使う	datetime.datetime.today().weekday()
八進文字列を整数にする	int(s, 8)
折れ線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
ベクトルの演算をする	import numpy as np
リストを横軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
明るい色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
文字列の開始位置以降が部分文字列で開始するか調べる	s.startswith(sub, start)
二つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
＜オプション＞グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
文字列はタイトルケースか調べる	s.istitle()
折れ線グラフの色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
改行する	print()
非大文字が文字列中に含まれるか	any(not c.isupper() for c in s)
整数nがタプルのどれかか調べる	n in aTuple
変数を定義する	x = n
既存の行列をベースにして全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
データ列の中にがあるか調べる	ds.isin([value])
＜オプション＞最初の行をカラムの名前に設定する	header = 0
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
シャルトリューズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='chartreuse')
＜オプション＞ダークサーモン色を使う	color = 'darksalmon'
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
折れ線グラフのバツマーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
グラフに凡例を文字列と文字列と付ける	plt.legend([s, s2])
色差別ないカラーパレットをグラフの描画で使用する	sns.set(pallete='colorblind')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
カラムの平均値を算出する	ds.mean()
明るいグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
＜オプション＞グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
タイムスタンプデータからn分、引く	aDatetime - datetime.timedelta(minutes=n)
文字列を全て小文字に変換する	s.casefold()
集合の濃度	len(aSet)
＜オプション＞グレーにグラフの色を変更する	color = 'gray'
ヒストグラムを描画して、その色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
日付時刻データがタイムスタンプデータと同時かどうか判定する	aDatetime == aDatetime2
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
散布図に色差別ない色のマーカーを使う	plt.plot(xdata, ydata, c='colorblind')
リストとリストで折れ線グラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
カウンタの全数	aCounter.total()
n2がnより大きく、かつn3より小さいか	n < n2 and n2 < n3
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
線グラフを描画して、その色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
折れ線グラフを描画して、色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
未定値	None
文字列が全て大文字か確認する	s.isupper()
改行	'\n'
折れ線グラフの色をオレンジに変更する	plt.plot(データ列, データ列2, color='orange')
イテラブルとイテラブルについてカラーコードの明るいグラフをプロットする	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
ベクトルの次元数	aArray.ndim
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
色差別ない色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
データ列を百の位で丸めて、整数型にする	ds.round(-2).astype(int)
データフレームのカラムのNaNを平均に変更する	df[col].fillna(df[col].mean())
標準入力から1文字分読む	sys.stdin.read(1)
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
折れ線グラフの四角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
Pandasで、文字列のUNIX秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
nをn2で割った余り	n % n2
＜オプション＞グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
＜オプション＞グラフの色をインディゴに設定する	color = 'indigo'
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
カウンタの項目をひとつ増やす	aCounter[element] += 1
折れ線グラフを描画して、色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
パステル調のの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データ列を使う	import pandas as pd
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
横向きに3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
文字列が全て小文字	s.islower()
データフレームを'A'列と'B'列によってまとめたグループ	df.groupby(['A', 'B'])
データフレームのカラムがどれだけ、分散しているか見る	df[col].var()
xを浮動小数点数に変換する	float(x)
文字列中の小文字を大文字に変換する	s.upper()
nはタプルのどれかか調べる	n in aTuple
一点鎖線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
カラーコードのバツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c=rgb)
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
黒い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
リストとリストについて散布図を描いて、その大きさをnに指定する	plt.scatter(xdata, ydata, s=n)
＜オプション＞色を小麦色に変更する	color = 'wheat'
データフレームのcollのUNIX時間からdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
暗いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データフレームの列の中に日付データがあるかどうか調べる	df[col].isin([value])
＜オプション＞パウダーブルーを使用する	color = 'powderblue'
文字列を表示する	print(value)
キューの先頭にリストの各要素を付け加える	deq.extendleft(iterable)
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
実数の三乗	x ** 3
ファイルパスのファイル名	os.path.basename(filepath)
＜オプション＞スプリンググリーン色を使用する	color = 'springgreen'
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
パラメータが無限大に近づく際数式の極限値を求める	sympy.limit(e, z, oo)
ヒストグラムを描画して、その色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
リストとデータ列について淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
棒を描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムを描画して、その色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
標準出力を得る	sys.stdout
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
折れ線グラフの大バツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
キューの最大長を見る	deq.maxlen
＜オプション＞ライトグレー色を使う	color = 'lightgrey'
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
ヒストグラムを描画して、その色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
リストとリストについての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームを２つの列によってグループ化する	df.groupby(['A', 'B'])
nをn2で割る	n / n2
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
数を十の位で丸める	round(x, -1)
淡い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='muted')
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
配列とリストについて散布図を描画して、マーカーをポイントに変更する	plt.plot(xdata, ydata, marker='.')
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
＜オプション＞UTF8を使う	encoding = 'utf-8'
折れ線グラフにサイズnの四角印を描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
列の値によって表をグループ分けして、グループ毎の平均値を計算する	df.groupby(column).mean()
SJISでJSONLファイルにデータフレームを書き込む	df.to_csv(filename, encoding='shift_jis')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
散布図を重なりを見やすく濃い色で描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
折れ線グラフを描画してその色をオレンジレッドに指定する	plt.plot(データ列, データ列2, color='orangered')
ヒストグラムを描画してその色を青緑に設定する	plt.hist(データ列, color='turquoise')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
＜オプション＞グラフの色をシアンに設定する	color = 'cyan'
＜オプション＞グラフの色をオリーブに設定する	color = 'olive'
配列と配列について散布図を描いて、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームのリストカラムを丸める	df[aList].round()
文字列でフォーマットして日付時刻データを文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
リストから文字列を取り除く	aList.remove(element)
データ列の中に文字列があるか調べる	ds.isin([value])
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフのバツマーカーのサイズをnに変更する	plt.plot(データ列, データ列2, marker='x', markersize=n)
数式を数値計算する	float(e)
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgrey')
シーケンスを無限に繰り返す	itertools.cycle(iterable)
エクセルファイルファイルからnという名前のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムの時	df[col].dt.hour
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
文字列が組に含まれる	element in aTuple
データフレームの列と列に重複があれば削除する	df.drop_duplicates(subset=[column, column2])
＜オプション＞ライトスカイブルー色を使う	color = 'lightskyblue'
Pandasのバージョンを表示する	print(pd.__version__)
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
NaN	math.nan
日付時刻データにn週間を加える	aDatetime + datetime.timedelta(weeks=n)
濃いグラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
ヒストグラムを描画して色をマルーンに変更する	plt.hist(データ列, color='maroon')
ファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
線グラフを描画してその色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
＜オプション＞グラフの色をアイボリーに設定する	color = 'ivory'
折れ線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
折れ線グラフを描画して、その色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
＜オプション＞グラフの色をオールドレースに変更する	color = 'oldlace'
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='grey')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
文字列中にひとつでも非数字が含まれる	any(not c.isdigit() for c in s)
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
二つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
データ列の母標準偏差	ds.std(ddof=0)
＜オプション＞サンディーブラウンにグラフの色を設定する	color = 'sandybrown'
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightseagreen')
ヒストグラムを描画して、色を黄色くする	plt.hist(データ列, color='y')
読み込み用にファイルをオープンして]、fとする	f = open(filepath, mode='r')
nとkのコンビネーション	math.comb(n, k)
ヒストグラムの色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
データフレームの中にあると日付データの数をカウントする	df.isin([value, value2]).sum()
リストとデータ列の散布図を描画してマーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
データフレームを見る	df.head()
リストとリストの折れ線グラフを描画して透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
青色の濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
両端キューをイテラブルから生成する	collections.deque(iterable)
折れ線グラフの大バツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
リストを縦軸データ列を横軸として、大きさnの散布図を描く	plt.scatter(xdata, ydata, s=n)
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
等差数列から乱数を生成する	random.randrange(start, end, step)
＜オプション＞グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
折れ線グラフを描画して、色をペールグリーンに指定する	plt.plot(データ列, データ列2, color='palegreen')
＜オプション＞ビスク色を使う	color = 'bisque'
＜オプション＞グラフの色をグレーに設定する	color = 'grey'
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
リストとリストについてカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
折れ線グラフに右三角印を用いる	plt.plot(データ列, データ列2, marker='>')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
タプルの末尾のn要素を取り除く	aTuple[:-n]
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフの四角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
黒色で変数を出力する	print(f'\033[30m{value}\033[0m')
データフレームの平均値	df.mean()
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
散布図に赤色の四角マーカーを使用する	plt.plot(xdata, ydata, marker='s', c='r')
nとn2の論理和	n | n2
単位正方行列	np.identity(N)
＜オプション＞先頭のカラムをインデックスに設定する	index_col = 0
データフレームの中央値	df.median()
折れ線グラフを描画して、その色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
データフレームの列の名前を付け直す	df.rename(columns={column: name})
コマンドの第一引数を確認する	sys.argv[1]
＜オプション＞ダークスラテグレーを用いる	color = 'darkslategray'
1からNまでの配列	np.arange(1, N+1)
折れ線グラフの大バツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
プロットの描画で色差別ない色を使う	sns.set(pallete='colorblind')
データフレームの中で何行、重複するか見る	df.duplicated().sum()
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
配列を平坦化する	aArray.flatten()
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
文字列をバイト列に変換する	bytes(s)
＜オプション＞ミスティローズ色を使う	color = 'mistyrose'
＜オプション＞グラフの色をグリーンイエローに設定する	color = 'greenyellow'
折れ線グラフを描画して、その色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
データフレームから指定された二つの列を抽出する	df[[column, column2]]
折れ線グラフを描画して、色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
データ列とラベルを指定して、棒を描く	plt.bar(ラベル列, データ列)
二つの文字列を辞書順で比較する	s < s2
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
文字列中にひとつでも非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
日付データが何年か知る	aDate.year
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
線グラフを描画して、その色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
データフレームのリスト列の中に日付データと文字列がある	df[aList].isin([value, value2])
n個の数値イテラブル	range(n)
リストを逆順にする	aList[::-1]
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
折れ線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
文字列を改行で分割する	s.splitlines()
nがn2の倍数でないか	n % n2 != 0
＜オプション＞８ビット整数型を使用する	dtype = np.int8
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
小文字を大文字にする	s.upper()
カラーコードの下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
パラメータがマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
データフレームから指定された列を選ぶ	df[[column]]
＜オプション＞色をグリーンイエローに変更する	color = 'greenyellow'
カウンタを辞書に変換する	dict(aCounter)
データフレームの重複した行をマスクする	df.duplicated()
配列とリストについての散布図に黒い左三角マーカーをプロットする	plt.plot(xdata, ydata, marker='<', c='k')
実数の逆正接を求める	math.atan(x)
ヒストグラムを描画してその色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
リストと配列のカラーコードの色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
ファイルを一行ずつ読み込む	f.readline()
2つのカウンタの共通する要素	aCounter & aCounter2
組と組を連結する	aTuple + aTuple2
折れ線グラフの▼印を黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
散布図に星マーカーを使用する	plt.plot(xdata, ydata, marker='*')
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
折れ線グラフを描画して、その色をパパイヤウィップに指定する	plt.plot(データ列, データ列2, color='papayawhip')
部分文字列が部分文字列で始まる	s.startswith(sub)
スピアマン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
UNIX時間をインポートする	import time
列をビンニングする	pd.cut(ds, aList)
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
折れ線グラフを描画して、その色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
UNIXコマンドtextを実行する	os.system(text)
＜オプション＞ダークスラテグレー色を使う	color = 'darkslategray'
リスト中の最初の文字列を探す	aList.index(element)
リストとリストで色差別ないの折れ線を描画して、線幅をnにセットする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
データフレームを表示するとき小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
UTF8として既存のファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
色差別ない色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
配列と数列について散布図を描画してマーカーの色を暗いに変更する	plt.plot(xdata, ydata, c='dark')
両端キューをデキューする	deq.popleft()
整数nを十六進数リテラルにする	hex(n)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategrey')
bとn2から成るペア	(n, n2)
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
配列の和	aArray + aArray2
３つの文字列をプリントする	print(value, value2, value3)
＜オプション＞値を置き換える	inplace = True
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
データフレームのリストカラムの欠損値をxで置換する	df[aList].fillna(x)
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
列によってデータフレームをグループ分けする	df.groupby(column)
文字列内にひとつでも小文字があるか判定する	any(c.islower() for c in s)
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
グラフの描画でパステル調のカラーパレットを使う	sns.set(pallete='pastel')
集合を組に変換する	tuple(aSet)
標準エラーを得る	sys.stderr
＜オプション＞ピンク色を使う	color = 'pink'
＜オプション＞インディゴにグラフの色を設定する	color = 'indigo'
＜オプション＞青緑色を使う	color = 'teal'
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
ブラック色の線グラフを描画する	plt.plot(データ列, データ列2, color='black')
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
データフレームの列を1000の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
数を整数に変換する	int(x)
色差別ない色のヒストグラムでリストをプロットする	plt.hist(xdata, color='colorblind')
データフレームをまとめて四捨五入する	df.round()
データ列を折れ線グラフに描画して、マーカーを菱形印にする	plt.plot(データ列, データ列2, marker='D')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
シエナ色の線グラフを描画する	plt.plot(データ列, データ列2, color='sienna')
データフレームからランダムに取り出す	df.sample()
折れ線グラフを描画して色を貝殻に変更する	plt.plot(データ列, データ列2, color='seashell')
組の値だけ出力する	print(*aTuple)
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
＜オプション＞マーカーを▲に変更する	marker = '^'
列の値ごとにデータフレームを集約して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
ヒストグラムを描画して、その色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
＜オプション＞アンティークホワイト色を使う	color = 'antiquewhite'
＜オプション＞ダークグレーにグラフの色を設定する	color = 'darkgrey'
文字列が全て数字か	s.isdigit()
文字列をシアン化する	f'\033[36m{value}\033[0m'
ダークグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgreen')
＜オプション＞グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
ヒストグラムを描画して、色を黒くする	plt.hist(データ列, color='k')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
＜オプション＞ダークグリーン色を使う	color = 'darkgreen'
部分文字列が文字列の終了位置以前にある	s.find(sub, 0, end) != -1
列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
カウンタを多い順番に列挙する	aCounter.most_common()
最小値でデータ列の欠損値を埋める	ds.fillna(ds.min())
ハニーデュー色の線グラフを描画する	plt.plot(データ列, データ列2, color='honeydew')
配列をビン数nでビン分割する	pd.cut(aArray, n)
ベクトルの要素ごとのアダマール積	np.multiply(aArray, aArray2)
＜オプション＞タンを使用する	color = 'tan'
ヒストグラムを描画して、その色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
本日の年数	datetime.datetime.today().year
折れ線グラフを描画して、その色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
グラフに凡例を文字列と文字列と入れる	plt.legend([s, s2])
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
折れ線グラフの色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
＜オプション＞スノーに色を設定する	color = 'snow'
＜オプション＞色をブラックに設定する	color = 'black'
nがn2以下、または、n3以上	n <= n2 or n >= n3
浮動小数点数で整数を除する	x / y
ヒストグラムを描画して、その色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
ファイル全体を行分割して読み込む	f.readlines()
xをブール値にする	bool(x)
ヒストグラムを描画して、その色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
データフレームの欠損値を最頻値に指定する	df.fillna(df.mode().iloc[0])
タプルをn回、連結する	aTuple * n
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgrey'
表データのリスト列の相関行列	df[aList].corr()
ファイルパスをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
データフレームのリストカラムの中央値	df[aList].median()
ベクトルの列ごとの最小を計算する	np.min(aArray, axis=0)
タプルの先頭のn要素を取り除く	aTuple[n:]
ヒストグラムを描画してその色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
散布図に赤色の大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='r')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
実数を切り上げて整数に変換する	math.ceil(x)
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsteelblue')
線グラフを描画して、その色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
折れ線グラフに黄色いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
データ列を100の位で丸める	ds.round(-2)
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgrey')
色差別ないグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
上位集合か調べる	aSet.issuperset(aSet2)
ヒストグラムを描画して、その色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
ヒストグラムを描画して、その色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
小さい順にリストの要素を並べる	sorted(aList, reverse=True)
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
折れ線グラフに黄色い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
文字列中の大文字を小文字に変換する	s.lower()
箱髭図を２つ並べる	plt.boxplot([データ列, データ列2])
データフレームのcollを書式fmtとして日付データに変換する	pd.to_datetime(df[col], format=fmt)
破線として折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
＜オプション＞ダーク・スラテグレーを使う	color = 'darkslategrey'
nではない	not n
マッピングのキーとそのエントリをペアとして取り出す	aDict.items()
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
折れ線グラフに緑色の四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
データフレームの列の文字列長を列として見る	df[col].str.len()
データ列とラベルを指定して、棒グラフを描画する	plt.bar(ラベル列, データ列)
リストとリストの暗いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgrey'
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
データフレームの中の列と列に重複があれば、取り除く	df.drop_duplicates(subset=column)
ヒストグラムを描画して、その色をライムグリーンにする	plt.hist(データ列, color='limegreen')
グラフで使うフォントをfontNameに指定する	sns.set(font=fontName)
小数点数が無限大か調べる	math.isinf(x)
配列の次元を変形する	aArray.reshape(行数, 列数)
折れ線グラフに緑色の大バツ印を描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
折れ線グラフの色を耐火レンガにする	plt.plot(データ列, データ列2, color='firebrick')
カウンタのユニオン演算する	aCounter | aCounter2
最頻値でカラムの未入力値を補う	ds.fillna(ds.mode().iloc[0])
両端キューの要素をn個分左にローテンションする	deq.rotate(-n)
データフレームのn行目を落とす	df.drop(n, axis=0)
カラーコードの下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c=rgb)
辞書の項目名とその値をペアとして取り出す	aDict.items()
データフレームのリスト列の尖度	df[aList].skew()
データフレームの中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
＜オプション＞ホットピンク色を使う	color = 'hotpink'
リストとリストについて散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
データ列のどの値が頻出か見る	ds.mode()
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgray')
リストとリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
線グラフを描画して、その色をミントクリームにセットする	plt.plot(データ列, データ列2, color='mintcream')
現在のローカルなタイムスタンプ	datetime.datetime.today()
Pandasでデータ列を日付データに変換する	pd.to_datetime(ds)
データフレームの中に文字列があるか調べる	df.isin([value])
＜オプション＞データ型を指定する	dtype = bool
データフレームを各列と列の組み合わせ毎に集約し、、最大値を算出する	df.groupby([column, column2], as_index=False).max()
＜オプション＞バツマーカーを描画する	marker = 'x'
ポイントマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='.')
＜オプション＞色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
グラフで日本語を使えるようにする	sns.set(font='IPAexGothic')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
＜オプション＞アクア色を使う	color = 'aqua'
ヒストグラムの線のスタイルを破線に設定する	plt.hist(データ列, linestyle='dashed')
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフの色をスカイブルーにセットする	plt.plot(データ列, データ列2, color='skyblue')
イテラブルとリストの暗いを描画し、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
線グラフの色をオリベドラブに指定する	plt.plot(データ列, データ列2, color='olivedrab')
浮動小数点数のn乗を求める	pow(x, n)
ヒストグラムを描画して、色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
＜オプション＞データ型を指定する	dtype = np.int32
文字列の長さ	len(s)
データフレームに重複があるか調べる	df.duplicated()
日付データは日付データと同時か	aDate == aDate2
ピンクにヒストグラムの色をセットする	plt.hist(データ列, color='pink')
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
実数を文字列に変換する	str(x)
＜オプション＞ロイヤルブルー色を使う	color = 'royalblue'
棒を描画して、xにグラフ幅を設定する	plt.bar(ラベル列, データ列, width=x)
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
文字列を部分文字列で二分する	s.partition(sub)
折れ線グラフを描画して、その色をコーンフラワーブルーにする	plt.plot(データ列, データ列2, color='cornflowerblue')
＜オプション＞グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
赤い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
折れ線グラフを描画してその色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
異なる列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
リストとデータ列の明るいグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
折れ線グラフを描画して、色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
イテラブルと列のデカルト積	itertools.product(iterable, iterable2)
折れ線グラフの色を白に設定する	plt.plot(データ列, データ列2, color='white')
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
濃いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
散布図に黒いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='k')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
リストの最後からn番目以前の部分を取り出す	aList[:-n]
二変数の最も小さい値を求める	min(x, y)
リストの長さnの順列	itertools.permutations(iterable, n)
nとn2が等しいか判定する	n == n2
線グラフを描画して、その色をミディアムブルーにセットする	plt.plot(データ列, データ列2, color='mediumblue')
時刻を使用する	import datetime
データ列の各データ値の出現数	ds.value_counts()
ポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.')
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
三自然数の最大公約数	math.gcd(n, n2, n3)
青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
明るいグラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', color='r')
トマト色の線グラフを描画する	plt.plot(データ列, データ列2, color='tomato')
タプルの長さ	len(aTuple)
文字列が無限に続くイテラブル	itertools.repeat(element)
２つのデータフレームを列をキーとして外部ジョインする	pd.merge(df, df2, on=column, how='outer')
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
実数を三乗する	x ** 3
折れ線グラフを描画して、その色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
＜オプション＞破壊的に操作する	inplace = True
データフレームのリストカラムの中にいくつ文字列が存在するか求める	df[aList].isin([value]).sum()
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
文字列をコロンで区切って、列挙する	s.split(':')
データフレームを列名リストを用いてソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
＜オプション＞グラフの色をゲインズボロに設定する	color = 'gainsboro'
ヒストグラムの色をパープルに変更する	plt.hist(データ列, color='purple')
今日が土曜日かどうか確認する	datetime.datetime.today().weekday() == 5
nがn2以上かどうかテストする	n >= n2
データフレームのNaNを最小値で補う	df.fillna(df.min())
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
nがn2よりも小さいか調べる	n < n2
日付データが何日か知る	aDate.day
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
線グラフの色をレモンシフォンに変更する	plt.plot(データ列, データ列2, color='lemonchiffon')
折れ線グラフを描画して、その色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
ファイルのファイル名	os.path.basename(filepath)
文字列を太字で表示する	print(f'\033[1m{value}\033[0m')
二つの文字列をカンマで区切って表示する	print(value, value2, sep=',')
データフレームのシェイプ	df.shape
データ列とリストのパステル調のグラフを描画してその色を青色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
辞書の浅いコピーを作る	aDict.copy()
データフレームを複数の列によって昇順に並べ直す	df.sort_values(by=column, ascending=True)
＜オプション＞グレー色を使う	color = 'grey'
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
データフレームのリスト列の中に含まれる文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
文字列は全て十進数字か調べる	s.isdecimal()
耐火レンガ色の線グラフを描画する	plt.plot(データ列, データ列2, color='firebrick')
データフレームを列でグループ化して、標準偏差を算出する	df.groupby(column).std()
コレクションを使う	import collections
＜オプション＞グラフの色をビスクに設定する	color = 'bisque'
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
文字列をシアンにする	f'\033[36m{value}\033[0m'
直前の値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(method='ffill')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
eの小数点数乗	math.exp(x)
横棒グラフの色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
プログラムを即座に終了する	sys.exit()
浮動小数点数を実数で	x // y
日付時刻データの秒数	aDatetime.second
フローラルホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='floralwhite')
リストとリストについて色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
複数の列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby(columns).describe()
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
リストとリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
ヒストグラムを描画して、その色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
両端キューの末尾の要素	deq[-1]
折れ線グラフを描画してその色をチョコレートに変更する	plt.plot(データ列, データ列2, color='chocolate')
表を'A'列で昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの星マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
実数のn乗	pow(x, n)
＜オプション＞セパレータをコロンにする	sep = ':'
データフレームのカラムのタイムゾーンを日本に指定する	df[col].tz_convert('Asia/Tokyo')
データ列とリストについての散布図を淡い色で重なりを見やすく描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
インディアンレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='indianred')
整数nはリストのいづれかか調べる	n in aList
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
ネイビー色の線グラフを描画する	plt.plot(データ列, データ列2, color='navy')
ストリームに文字列を書く	f.write(s)
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
2つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列, alpha=0.5)
オブジェクトのハッシュ値	hash(obj)
文字列中の部分文字列をカウントする	s.count(sub)
＜オプション＞青に色を設定する	color = 'blue'
オブジェクトがタプルクラスかどうか調べる	isinstance(obj, tuple)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
三自然数の最大公約数を求める	math.gcd(n, n2, n3)
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
オブジェクトの無限列	itertools.repeat(element)
プロットで使うフォントをfontNameに指定する	sns.set(font=fontName)
startからendまでヒストグラムにする	plt.hist(データ列, range=(start, end))
カラーコードの左三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
ヒストグラムを描画して、その色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
折れ線グラフを描画して、その色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
データフレームのカラムはどの程度分散しているか見る	df[col].var()
パステル調の色を用いて散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
ペールグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegreen')
パープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='purple')
リストとリストについての散布図を色差別ない色で描く	plt.plot(xdata, ydata, c='colorblind')
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
数列とリストの散布図を描画して、マーカーを▽に指定する	plt.plot(xdata, ydata, marker='v')
全要素を０で初期化された３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
小数点数の双曲線余弦	math.cosh(x)
データフレームを表示するとき、表示できる最大列数を増やす	pd.set_option('display.max_columns', n)
ヒストグラムを半透明にする	plt.hist(データ列, alpha=0.5)
平均でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mean())
表データを列ごとにグループ化して、個数を求める	df.groupby(column).count()
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
折れ線グラフに緑色のポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
＜オプション＞グラフの色を茶色に設定する	color = 'brown'
＜オプション＞色をディムグレーに設定する	color = 'dimgray'
線グラフを描画して、その色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
折れ線グラフに右三角マーカーを使う	plt.plot(データ列, データ列2, marker='>')
折れ線グラフを描画して、その色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
＜オプション＞ディムグレー色を使う	color = 'dimgrey'
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
列によってデータフレームを並べて、上の方n件を取り出す	df.sort_values(columns).head(n)
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
列から配列を作成する	np.array(iterable)
データフレームの中で、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
散布図にカラーコードの三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
リストをナンバリングする	enumerate(aList)
文字列が全て数字か調べる	s.isdigit()
カウンタを辞書で更新する	aCounter.update(aDict)
数列とリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
分子n分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
＜オプション＞ゴールデンロッド色を使う	color = 'goldenrod'
ヒストグラムを描画してその色を青緑に設定する	plt.hist(データ列, color='teal')
リストとリストを折れ線グラフで描画する	plt.plot(xdata, ydata)
カウンタ同士で和集合を計算する	aCounter | aCounter2
xが-9以上、9以下	-9 <= x <= 9
ファイルを読み込み用にオープンする]	open(filepath, mode='r')
データ列の分	ds.dt.minute
実数のn乗を計算する	x ** n
ヒストグラムを描画してその色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
実数のn乗して実数による余り	pow(x, n, y)
配列の内積	np.dot(aArray, aArray2)
明るい色でリストとイテラブルについての散布図を描画する	plt.plot(xdata, ydata, c='bright')
第一引数で指定したファイルの名前	sys.argv[1]
サブクラスか	issubclass(サブクラス, クラス)
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
折れ線グラフを描画して、その色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
イテラブルからサンプリングする	random.sample(iterable)
グラフの色を淡くする	sns.set(pallete='muted')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
データフレームを関数の値によってグループ化し記述統計量を求める	df.groupby(関数).describe()
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
＜オプション＞グラフの色を貝殻に指定する	color = 'seashell'
＜オプション＞グラフの色をタンに変更する	color = 'tan'
スノー色の線グラフを描画する	plt.plot(データ列, データ列2, color='snow')
インデント幅nで辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
線グラフを描画して、その色をアンティークホワイトに変更する	plt.plot(データ列, データ列2, color='antiquewhite')
数式の積分を算出する	sympy.integrate(e)
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
＜オプション＞書き込みモードを使う	mode = 'w'
＜オプション＞色をライトグレーに設定する	color = 'lightgray'
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
＜オプション＞グラフの色をスプリンググリーンに設定する	color = 'springgreen'
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
文字列の右側から空白を取り除く	s.rstrip()
ヒストグラムを描画して、その色をトマトに指定する	plt.hist(データ列, color='tomato')
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
文字列を空白で分割し、、整数リストに変換する	map(int, s.split())
散布図に左三角マーカーを使う	plt.plot(xdata, ydata, marker='<')
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
FIXME	np.linalg.eig(aArray)
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
＜オプション＞ライトスカイブルー色を使用する	color = 'lightskyblue'
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
イテラブルのコンビネーション	itertools.combinations(iterable, n)
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumaquamarine')
二変数の最大値	max(x, y)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
データ列が正規分布からどの程度尖っているか確認する	ds.skew()
文字列の中でケースを無視してパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
＜オプション＞星マーカーを描画する	marker = '*'
配列の最大値	np.max(aArray)
オブジェクトは整数クラスか調べる	isinstance(obj, int)
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
赤いパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームを配列に変換する	df.values
文字列を正規表現で分ける	re.split(pattern, s)
青い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
実数を小数点以下で丸める	round(x, n)
ファイルパスを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
nの各桁の総和	sum(map(int, str(n)))
リストを赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
深紅色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
配列とリストについての散布図に右三角マーカーを描く	plt.plot(xdata, ydata, marker='>')
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
データ列のNaNを最大値で埋める	ds.fillna(ds.max())
＜オプション＞マルーンを使う	color = 'maroon'
ふたつのマップを合体する	aDict | aDict2
散布図にダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D')
実数のアークタンジェント	math.atan(x)
nとn2が等しいか調べる	n == n2
空白	' '
実数が有限か調べる	math.isfinite(x)
散布図に大バツマーカーを使う	plt.plot(xdata, ydata, marker='X')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
サドルブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='saddlebrown')
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
数列と配列の青色のパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフに黄色い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
折れ線グラフを描画してその色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
＜オプション＞コーンズシルク色を使う	color = 'cornsilk'
＜オプション＞大バツマーカーを使う	marker = 'X'
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
タイムスタンプデータは何月か知る	aDatetime.month
＜オプション＞グラフの色をナバホホワイトに設定する	color = 'navajowhite'
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
＜オプション＞ダークグレーにグラフの色を設定する	color = 'darkgray'
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
辞書のキーを要素に設定する	aDict[key] = element
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
今日が月曜日か調べる	datetime.datetime.today().weekday() == 0
リストとリストで色差別ないを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
ヒストグラムを描画して、その色を青緑に設定する	plt.hist(データ列, color='teal')
新しいカウンタをイテラブルから準備する	collections.Counter(iterable)
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
折れ線グラフに線幅nの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
リストとリストのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
数列とリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
辞書から最後に追加したエントリをポップする	aDict.popitem()
散布図に暗い色のマーカーを使う	plt.plot(xdata, ydata, c='dark')
日付時刻データの日数	aDatetime.day
赤い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
ファイル全体をリストとして読む	f.readlines()
ヒストグラムを描画して、その色を紺碧に設定する	plt.hist(データ列, color='azure')
文字列が全て空白文字からなるか調べる	s.isspace()
nが無限に続く数列を得る	itertools.repeat(n)
カウンタの文字列のカウントを使う	aCounter[element]
文字列の末尾は部分文字列かどうか調べる	s.endswith(sub)
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
縦方向に3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
文字列をカンマで分割して、文字列リストにする	s.split(',')
システム時刻で乱数を初期化する	random.seed()
ベクトルの最大	np.max(aArray)
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
文字列をカンマによって分割して列挙する	s.split(',')
リストと配列についての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
折れ線グラフに緑色の左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
折れ線グラフを描画して、その色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
重なりを見やすく暗い色でリストと数列についての散布図を描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データ列を折れ線グラフに描画して、マーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
折れ線グラフに大きさnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
シーグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='seagreen')
文字列の両端から空白を取り除く	s.strip()
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
ベクトルの演算を行う	import numpy as np
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
リストとリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
折れ線グラフの右三角印の大きさをnに指定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
Pythonパスにディレクトリを追加する	sys.path.append(dir)
＜オプション＞ロージーブラウン色を使う	color = 'rosybrown'
データ列とリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
＜オプション＞スレートブルーにグラフの色を設定する	color = 'slateblue'
ヒストグラムを描画して、その色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
レモンシフォン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lemonchiffon')
折れ線グラフの色をライトグレーにする	plt.plot(データ列, データ列2, color='lightgrey')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
ヒストグラムを描画して、その色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
散布図を黒い左三角マーカーで描画する	plt.plot(xdata, ydata, marker='<', c='k')
＜オプション＞色をスカイブルーに指定する	color = 'skyblue'
数式を微分する	sympy.diff(e)
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
リストのn番目からn2番目までの部分	aList[n:n2]
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
実数の逆双曲線余弦	math.acosh(x)
＜オプション＞バリーウッド色を使う	color = 'burlywood'
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
ヒストグラムを描画して色を暗い赤に設定する	plt.hist(データ列, color='darkred')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
文字列中の部分文字列の出現をカウントする	s.count(sub)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
データフレームのリストカラムを100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
データフレームのカラムのモード	df[col].mode()
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
円周率	math.pi
データフレームを列によって並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
nとn2の排他的論理和	n ^ n2
nが-9以上、9以下か	-9 <= n <= 9
データフレームのカラムの月	df[col].dt.month
カンマで区切って二つの文字列を出力する	print(value, value2, sep=',')
配列と配列についての散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
散布図に赤い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='r')
データフレームのカラムのNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
＜オプション＞どのカラムもインデックスに設定しない	index_col = None
配列のユニークな要素	np.unique(aArray)
＜オプション＞ライトグリーン色を使う	color = 'lightgreen'
二つの文字列を順にプリントする	print(value, value2)
数字を全部使う	string.digits
リストとリストの濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
nからn2の値を引いてnに代入する	n -= n2
カラーコードの三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
折れ線グラフを描画して、その色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
データフレームを'A'列によってまとめたグループを求める	df.groupby('A')
mathをインポートする	import math
データフレームを各列毎に分類して、列の標準偏差を求める	df.groupby(column)[column2].std()
空列	[]
インデント幅nで、マッピングをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
nが1、もしくは2、もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
折れ線グラフを描画して、その色をダークオーキッドに変更する	plt.plot(データ列, データ列2, color='darkorchid')
平均と標準偏差から疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
ヒストグラムを描画して、その色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
データ列とラベルを指定して、縦棒グラフを描く	plt.bar(ラベル列, データ列)
文字列を区切りで分割して、列挙する	s.split(sep)
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
実行結果を紫色でプリントする	print(f'\033[35m{value}\033[0m')
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
辞書のキーとその値をペアとして取り出す	aDict.items()
横棒グラフを積み上げにする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
リストをn倍する	aList * n
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
データフレームの列が正規表現文字列にマッチしない行を取り出す	df[not df[column].str.match(s)]
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
カウンタの全数を使う	aCounter.total()
データフレームのリスト列の中に存在する文字列の合計を求める	df[aList].isin([value]).sum()
タプルをn倍する	aTuple * n
配列とデータ列の色差別ないグラフをプロットして、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
データフレームの列名を指定された名前リストに置き換える	df.columns = columns
カラムをキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
ゴールド色の線グラフを描画する	plt.plot(データ列, データ列2, color='gold')
＜オプション＞マルーン色を使う	color = 'maroon'
項目名が辞書上で定義済み	key in aDict
両端キューが空でないか調べる	len(deq) != 0
データフレームのリストカラムの欠損値を最小値で補う	df[aList].fillna(df[aList].min())
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
データ列とラベル列を指定して、積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
キーが辞書に存在するか調べる	key not in aDict
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
折れ線グラフを描画してその色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
リストとリストについて明るい色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
タプルの平均値	sum(aTuple)/len(aTuple)
データフレームを二つの列によって昇順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
文字列リストを連結する	''.join(aStringList)
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
エンコーディング	sys.getdefaultencoding()
＜オプション＞グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
変数をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
ヒストグラムを描画してその色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
折れ線グラフに黄色い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
カウンタを辞書として更新する	aCounter.update(aDict)
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
n×n2の２次元リストを得る	[[0] * n for _ in range(n2)]
折れ線グラフの色を白くする	plt.plot(データ列, データ列2, color='w')
データフレームから最後の列を除く	df[df.columns[:-1]]
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
計算機イプシロン	sys.float_info.epsilon
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
ヒストグラムを描画して、その色をゴールドに設定する	plt.hist(データ列, color='gold')
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
リストと数列について散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
中央値でデータフレームの中のカラムをビン分割する	pd.qcut(df[col], 2)
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列, データ列2, color='darkmagenta')
濃いの折れ線の線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
SJISでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
リストと配列の明るいグラフを描いて、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
表データをインポートする	import pandas as pd
折れ線グラフを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
エラーを出力する	sys.stderr
折れ線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
カウンタをリセットする	aCounter.clear()
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
オブジェクトがタプルに含まれないか調べる	element not in aTuple
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
データフレームを各列毎にグループ化し、、列の最小値を計算する	df.groupby(column)[column2].min()
データフレームの重複した行数を数える	df.duplicated().sum()
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
ナバホホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='navajowhite')
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
値をプリントする	print(value)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
＜オプション＞グラフの色をプラムに設定する	color = 'plum'
データフレームを２つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
グラフの中の縦軸にuntitledというラベルを付ける	plt.ylabel(untitled)
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
ヒストグラムを暗い色として描画する	plt.hist(xdata, color='dark')
seabornのデフォルトを適用する	sns.set()
＜オプション＞グラフの色を珊瑚に指定する	color = 'coral'
現在の再帰の上限	sys.getrecursionlimit()
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
リストとリストの破線グラフを描画し、、色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
nが5の倍数か	n % 5 == 0
グラフの色をパステル調にする	sns.set(pallete='pastel')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
バイナリモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='rb')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
折れ線グラフの色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
行列のユニークな要素を求める	np.unique(aArray)
列を分割数nとしてビン分割する	pd.cut(ds, n)
日付時刻データの曜日を整数で求める	aDatetime.weekday()
ペルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='peru')
列を等量でビン数nでビンニングする	pd.qcut(ds, n)
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
数式を方程式として解く	sympy.solve(e)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
オブジェクトのメモリビュー	memoryview(obj)
＜オプション＞丸マーカーを用いる	marker = 'o'
オプションで、出力先を標準出力に設定する	file = sys.stdout
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
折れ線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
データフレームを関数でまとめた表	df.groupby(関数)
データフレームのカラムの25パーセンタイル	df[col].quantile(0.25)
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
文字列を赤色にする	f'\033[31m{value}\033[0m'
疑似乱数を正規分布として生成する	random.normalvariate(mu=0.5, sigma=0.2)
整数個からk個取り出した場合の並べ方の総数	math.perm(n, k)
データ列を千の位で丸める	ds.round(-3)
データフレームのカラムが正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
ヒストグラムを描画して、その色をネイビーに設定する	plt.hist(データ列, color='navy')
黒いバツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
配列とリストとして濃いの折れ線グラフを描画して線幅をnにセットする	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
実数の二進対数	math.log2(x)
散布図にカラーコードの下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c=rgb)
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
リストとリストの淡いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
赤い星マーカーを配列と配列についての散布図に描画する	plt.plot(xdata, ydata, marker='*', c='r')
リストをy軸、データ列を横軸に設定して折れ線グラフを描画する	plt.plot(xdata, ydata)
パステル調のグラフをリストとリストを用いて描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
＜オプション＞グラフの色をグリーンに設定する	color = 'green'
実数の逆正接	math.atan(x)
アルファベットの大文字を全部使う	string.ascii_uppercase
文字列が全て大文字か調べる	s.isupper()
＜オプション＞グラフの色をオリーブにセットする	color = 'olive'
カウンタの最頻出な項目	aCounter.most_common()[0]
データフレームのリストカラムの中に存在する文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
グラフの横軸のラベルをuntitledに設定する	plt.xlabel(untitled)
リストとデータ列の折れ線グラフを描く	plt.plot(xdata, ydata)
スクリプトの名前	sys.argv[0]
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
＜オプション＞エンコーディングをUTF8に設定する	encoding = 'utf-8'
カウンタの項目を列挙する	aCounter.keys()
文字列を青色にする	f'\033[34m{value}\033[0m'
データ列の中にいくつ日付データが存在するか求める	ds.isin([value]).sum()
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
赤色の大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c='r')
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
パステル調の色を用いてリストについてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
十六進文字列を整数に変換する	int(s, 16)
データフレームの重複する行を抽出する	df[df.duplicated(keep=False)]
startからendの範囲のヒストグラムを用いてリストを描画する	plt.hist(データ列, range=(start, end))
データフレームを行によってソートする	df.sort_index()
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
ヒストグラムを描画してその色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
カデットブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cadetblue')
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
データフレームを10の位で丸める	df.round(-1)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='teal')
カラムの標本標準偏差	ds.std()
データ列が何時か見る	ds.dt.hour
空の両端キュー	collections.deque()
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
タイムスタンプデータの日数を使う	aDatetime.day
データフレームのカラムを1000の位で丸める	df[col].round(-3)
＜オプション＞パールバイオレットレッドを使う	color = 'palevioletred'

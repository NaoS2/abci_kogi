散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
データ列をインポートする	import pandas as pd
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
星マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='*')
option: ミディアムブルーを使用する	color = 'mediumblue'
データフレームをCSVとしてJSONLファイルに保存する	df.to_csv(filename)
配列と数列の散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列は片仮名かどうか判定する	('ァ' <= ch <= 'ン')
オーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
分子と分母から有理数を準備する	fractions.Fraction(分子, 分母)
option: グラフの色をマルーンに設定する	color = 'maroon'
柱状図でデータ列を描画する	plt.hist(データ列)
データフレームを四捨五入して、整数にする	df.round().astype(int)
データフレームの中の欠損値がある行を取り除く	df.dropna()
散布図の三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
要素を両端キューから取り除く	deq.remove(element)
プラットフォームの符号付き整数の最大値を調べる	sys.maxsize
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
小麦色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームを列によって整列する	df.sort_values(by=column)
日付時刻データが何月か知る	aDatetime.month
入力ストリームを一行ずつ読み込む	f.readline()
折れ線グラフの色をプラムに指定する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
八進数字を全部使う	string.octdigits
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
等間隔のベクトルを作る＼	np.arange(開始値, 終了値, 等差)
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームを各列とカラムの組み合わせ毎にグループ分けして合計を求める	df.groupby([column, column2], as_index=False).sum()
データフレームのメディアン	df.median()
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
実数を小数点以下第一位で丸める	round(x, 1)
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
option: 深さを制限する	maxdepth = n
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
組の中の最小値	min(aTuple)
データ列を等量でビン数nを用いて分割する	pd.qcut(ds, n)
数を百の位で丸める	round(x, -2)
option: 改行をセパレータで用いる	sep = '\n'
改行文字を使う	'\n'
データフレームの列の文字列が正規表現文字列にマッチしない行を選択する	df[not df[column].str.match(s)]
データフレームを列名リストを用いて昇順にソートし、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: グラフの色をやわらかい青に指定する	color = 'cornflowerblue'
実数を切り上げる	math.ceil(x)
文字列を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
データフレームを列で並べ、、新しいインデックスを加える	df.sort_values(columns).reset_index()
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
rgbのポイントマーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: 印を四角に変更する	marker = 's'
文字列全体がパターンに複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
ダークオレンジ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
数列とイテラブルについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
データフレームから型リストで指定したデータ型の列を抽出する	df.select_dtypes(include=typeList)
色付きの実線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
カラムを1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
シスル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
最大値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].max())
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
イテラブルにシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
データフレームのn行目を抽出する	df.loc[n]
双方向キュー中の要素をカウントする	deq.count(element)
カラーパレットを暗くする	sns.set(pallete='dark')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
option: イエローグリーン色を使う	color = 'yellowgreen'
コロンで区切って二つの文字列を表示する	print(value, value2, sep=':')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
nを切り捨てながらn2分の1にする	n //= n2
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
配列とリストの散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
整数nは集合の一つか調べる	n in aSet
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
'A'列を用いてによって破壊的にデータフレームをソートする	df.sort_values(by='A', inplace=True)
三自然数のLCM	math.lcm(n, n2, n3)
データフレームのリストカラムの中にいくつNaNが存在するか数える	df[aList].isna().sum()
nの無限な数列を得る	itertools.repeat(n)
整数nをn2分の1にする	n //= n2
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: サンディーブラウンにグラフの色を設定する	color = 'sandybrown'
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
x軸だけグリッド線	plt.grid(axis='x')
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in s)
ヒストグラムのビン数を変更する	plt.hist(データ列, bins=区関数)
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
option: ダークシアグリーンを用いる	color = 'darkseagreen'
プログラムの実行を即座に終了する	sys.exit()
プログラムの実行をエラーとして終了する	sys.exit(1)
辞書のキーの値	aDict[key]
文字列の開始位置より後に部分文字列が含まれない	s.find(sub, start) == -1
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
印字可能な文字を全部使う	string.printable
散布図の下三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
nの八進表現	oct(n)
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
赤い左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
マッピングのキーを要素に変更する	aDict[key] = element
データフレームのリスト列の文字列を未入力値にする	df[aList].replace(s, np.nan)
浮動小数点数の天井	math.ceil(x)
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
nまたはn2	n or n2
ダークサーモン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
縦棒グラフを描き、左寄せする	plt.bar(ラベル列, データ列, align='edge')
数列とデータ列の散布図をプロットして、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
データフレームの列の尖度を求める	df[col].skew()
option: ダークブルーを使用する	color = 'darkblue'
データフレームのカラムを1000の位で丸める	df[col].round(-3)
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ファイル全体をリストとして読み込む	f.readlines()
option: フォントの色をライトグレーに変更する	color = 'lightgrey'
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
option: バツ印を使用する	marker = 'x'
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
option: ホットピンクにフォントの色を設定する	color = 'hotpink'
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
縦棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
floatの最小値を求める	sys.float_info.min
ファイルパスの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
自然数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
n個にデータフレームの中の列を等量で分割する	pd.qcut(df[col], n)
データ列をreplに一度に正規表現patternで置換する	ds.replace(pattern, repl, regex=True)
option: 茶色色を用いる	color = 'brown'
データフレームのカラムを十の位で丸めて、整数型にする	df[col].round(-1).astype(int)
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データ列の中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
option: ポイントマーカーを使用する	marker = '.'
データフレームのカラムの中の未入力値の合計を求める	df[col].isna().sum()
リストの最初を除く	aList[1:]
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
表データを列でによって降順にソートする	df.sort_values(by=column, ascending=False)
データフレームの列の中に文字列と文字列がいくつ含まれるか数える	df[col].isin([value, value2]).sum()
option: フォントの色をゴールデンロッドにセットする	color = 'goldenrod'
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
２つの行列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
リネン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
データ列を十の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
nからn2の値を引いてnとする	n -= n2
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
分類結果の再現率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
変数を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
option: ダークバイオレット色を使う	color = 'darkviolet'
データフレームのNaNを削除する	df.dropna()
2ベクトル間のユークリッド距離を求める	math.dist(point, point2)
データ列は何日か確認する	ds.dt.day
option: ピンク色を使う	color = 'pink'
JSONLファイルにデータフレームを書き込む	df.to_excel(filename)
option: リネン色を使う	color = 'linen'
rgbの三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのカラムの時刻	df[col].dt.hour
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
クラス分類をSDGで行う	model = sklearn.linear_model.SGDClassifier()
データフレームから重複を削除する	df.drop_duplicates()
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ふたつの集合の共通部分を求める	aSet.intersection(aSet2)
床	math.floor(x)
横棒グラフをレベッカパープル色を使って描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
イテラブルの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
リストとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図をダークオリーブグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
グラフを綺麗にする	import seaborn as sns
赤いポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームの指定された２つの列を選択する	df[[column, column2]]
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
符号付き整数の最大値	sys.maxsize
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
文字列の中で複数行対応としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
ふたつの集合がセットと交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
リストと配列について散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
折れ線グラフを茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムをダークサーモン色を使って描画する	plt.hist(データ列, color='darksalmon')
回帰分析を勾配ブースティングとしてする	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色をシエナに変更する	plt.hist(データ列, color='sienna')
日付データからn週間分、減らす	aDate - datetime.timedelta(weeks=n)
行列の値を見る	aArray[行番号, 列番号]
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
散布図にクロスマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
空白文字を全て見る	string.whitespace
option: フォントの色をライトグリーンに設定する	color = 'lightseagreen'
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
日付時刻データの日数	aDatetime.day
データフレームのカラムを100の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='gray')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
両端キューのサイズを求める	len(deq)
新しいサポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
リストを番号付けする	enumerate(aList)
xの絶対値	abs(x)
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
ホワイトスモークにヒストグラムの色をセットする	plt.hist(データ列, color='whitesmoke')
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
最大値としてデータを正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データ列の未入力値を直前の値に設定する	ds.fillna(method='ffill')
数式を簡略化する	sympy.sympify(e)
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
データ列の変化を青い実線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
二次元組をflattenする	sum(aTuple)
真部分集合かどうか確認する	aSet < aSet2
リストとリストについて散布図を描き、、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字列の開始位置番目と終了位置番目の間に部分文字列がないか調べる	s.find(sub, start, end) == -1
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
日付時刻データと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
８進数字を見る	string.octdigits
イテラブルから重複なく、n個選ぶ	random.sample(iterable, k=n)
option: クロスマーカーを加える	marker = 'x'
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
マッピングにキーが存在するか調べる	key not in aDict
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
日付データが日曜日かどうか	aDate.weekday() == 6
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データ列の要約統計量	ds.describe()
データフレームのリストカラムの尖度を計算する	df[aList].skew()
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
option: シスル色を用いる	color = 'thistle'
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
列から1個ランダムに選ぶ	random.choice(iterable)
青いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
整数nの二進表現	bin(n)
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
文字列の左側からタブを除去する	s.lstrip('\t')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
option: ミディアムオーキッドを使用する	color = 'mediumorchid'
データフレームを'A'列の値によって分類する	df.groupby('A')
option: 整数型を用いる	dtype = np.int
書式をマッピングでフォーマットする	formatText.format_map(aDict)
最初のコマンド引数	sys.argv[1]
option: グラフの色をサドルブラウンに指定する	color = 'saddlebrown'
グリッド線を青くする	plt.grid(color='b')
両端キューの末尾にタプルの各要素をつけ加える	deq.extend(iterable)
逆行列	np.linalg.inv(aArray)
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
option: 色のアルファを設定する	alpha = 0.5
文字列の末尾から部分文字列を取り除く	s.removesuffix(sub)
中央値でリストをビン分割する	pd.qcut(aList, 2)
nが-9以上、9以下	-9 <= n <= 9
データフレームの列が正規分布からどの程度、歪んでいるか見る	df[col].kurt()
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
ファイルが存在するかテストする	os.path.exists(filepath)
棒グラフを深紅色を使って描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームのcollを書式fmtとして日付データに変換する	pd.to_datetime(df[col], format=fmt)
ベクトルの行列積	np.matmul(aArray, aArray2)
表データのインデックスがnの行を抽出する	df.loc[n]
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: 改行をセパレータで使う	sep = '\n'
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
ライトスレイグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ファイルがある	os.path.exists(filepath)
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
グラフをプロットする準備をする	import matplotlib.pyplot as plt
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
文字列が大文字か調べる	s.isupper()
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームを'A'列を用いて小さい順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: スラグレー色を使用する	color = 'slategrey'
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
リストとリストについて散布図を描いて、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
イテラブルの各要素に対してpredicateFuncがtrueであればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ポイントマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ピーチパフ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
赤い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ファイルからフォルダ名取り出す	os.path.dirname(filepath)
整数nの二進文字列を見る	bin(n)[2:]
折れ線グラフの上三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの三角印の色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
3変数の最小値	min(x, y, z)
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
データフレームのリスト列の欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
ロバストな線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
ランダムにn行を重複ありでデータフレームからサンプリングする	df.sample(n, replace=True)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
要素を両端キューの最初から取り除く	deq.popleft()
データフレームからカラムを一つだけ選択する	df[[column]]
線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
n行をデータフレームからランダムに抽出する	df.sample(n)
線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームを列でまとめたグループ	df.groupby(column)
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
データフレームの末尾	df.tail()
整数nを八進文字列にする	oct(n)[2:]
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
リストとデータ列の散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
プロットのフォントを日本語に設定する	sns.set(font='IPAexGothic')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
アリスブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームのそれぞれのグループごとの標準偏差を計算する	df.groupby(column).std()
列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby(column).describe()
xが-9以上9以下	-9 <= x <= 9
マッピングのキーの値を得る	aDict[key]
組のn番目の	aTuple[n]
rgbのポイントマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフを耐火レンガ色を用いて描画する	plt.plot(データ列x, データ列y, color='firebrick')
データ列を千の位で丸める	ds.round(-3)
nがn2より小さいか調べる	n < n2
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
列の一意な値の個数	df[col].nunique()
データフレームを２つの列によってで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
グラフのタイトルを指定する	plt.title('グラフの名称')
整数nがリストの一つか調べる	n in aList
列がどの程度、分散しているか確認する	ds.var()
エンコーディングで文字列をバイト列に変換する	s.encode(encoding=encoding)
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
文字列の末尾から部分文字列を探す	s.rfind(sub)
データ列が何分か見る	ds.dt.minute
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
データフレームのカラムを100の位で丸めて整数にする	df[col].round(-2).astype(int)
散布図を赤い星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
散布図の下三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの列を最初のカテゴリーを無視してダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
要素が集合のメンバーでないか調べる	element not in aSet
プラム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
データフレームを'A'列の値でグループ分けする	df.groupby('A')
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
疑似乱数	random.random()
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームを二つの列によって並べ直してNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
ひとつでも英数字が文字列内にあるか	any(c.isalnum() for c in s)
ケンドールとしてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
折れ線グラフの丸印の大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
データ列とリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
リストと配列についての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
nがn2以下、もしくは、n3以上かどうか調べる	n <= n2 or n >= n3
データ列の中に含まれる日付データの合計を数える	ds.isin([value]).sum()
ヒストグラムをライトグレー色を用いて描画する	plt.hist(データ列, color='lightgray')
黒いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
データ列の四分位を可視化する	plt.boxplot(データ列)
サドルブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
縦棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データ列の正規分布に対する左右対称性	ds.kurt()
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
折れ線グラフをネイビー色を用いて描画する	plt.plot(データ列x, データ列y, color='navy')
ヒストグラムを一点鎖線を用いて描く	plt.hist(データ列, linestyle='dashbot')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
ヒートマップとしてクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
前の行の値でデータ列の欠損値を埋める	ds.fillna(method='ffill')
データフレームの中のカラムをビン数nとして分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
option: ASCII文字に限定する	flag = re.ASCII
'A'列によってデータフレームを昇順に並べ直す	df.sort_values(by='A', ascending=True)
各列毎にデータフレームを集計して、列の合計を計算する	df.groupby(column)[column2].sum()
option: ミントクリーム色を使う	color = 'mintcream'
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ダークオーキッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
要素がセットのメンバー	element in aSet
プロットの色を濃くする	sns.set(pallete='deep')
正規表現を複数行対応として事前にコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列の中の複数行対応として正規表現による全マッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
実数を文字列に変換する	str(x)
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
黒い▲マーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
2つのデータフレームを縦方向につなぐ	pd.concat([df, df2])
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
option: 欠損値を先頭にする	na_position = 'first'
文字列の開始位置からと終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
日付データが水曜日かテストする	aDate.weekday() == 2
二つの集合に共通する要素からなる集合を見る	aSet.intersection(aSet2)
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
散布図をクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
リストの平均	sum(aList)/len(aList)
リストと配列についての散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
option: グラフの色をターコイズに変更する	color = 'turquoise'
1からnまでの整数列	list(range(1, n+1))
マップをコピーする	aDict.copy()
データフレームの末尾を見る	df.tail()
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
データフレームをTSVファイルとしてJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
データフレームをに箱ひげ図を用いてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
文字列が数字かどうか確認する	s.isdigit()
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
データフレームのカラムの中にいくつ未入力値が含まれるか数える	df[col].isna().sum()
option: ブルーバイオレット色を使う	color = 'blueviolet'
データフレームを各列と列の組み合わせ毎に分類して、分散を計算する	df.groupby([column, column2], as_index=False).var()
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
インデックスによってデータフレームをソートする	df.sort_index()
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
カーキにヒストグラムの色を指定する	plt.hist(データ列, color='khaki')
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
偽	False
リスト内の要素が少なくともひとつ真か調べる	any(aList)
文字列はリストの要素でない	element not in aList
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: トマト色を使う	color = 'tomato'
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームのリスト列の欠損値をメディアンに設定する	df[aList].fillna(df[aList].median())
データフレームのpercent分位数を算出する	df.quantile(percent/100)
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
グラフの中のy座標に説明を付ける	plt.ylabel('y軸ラベル')
折れ線グラフの四角印を青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
カウンタのユニークな項目を列挙する	list(aCounter)
データフレームのそれぞれのグループごとの最小値を求める	df.groupby(column).min()
カーネル密度による分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
プログラムの実行を正常に終了する	sys.exit(0)
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列が数字	s.isdigit()
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
ゼロ埋めされたベクトル	np.zeros(要素数)
ホワイトスモーク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
option: 丸マーカーを使う	marker = 'o'
データフレームの指定された三つの列を抽出する	df[[column, column2, column3]]
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
リストの最後からn番目以前の部分を抽出する	aList[:-n]
タプルを昇順にソートする	sorted(aTuple, reverse=False)
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
ひとつでも数字が文字列内にあるか	any(c.isdigit() for c in s)
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
配列のユニークな要素を求める	np.unique(aArray)
黒いクロス印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフの色をコーンフラワーブルーにする	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列が全て英数字かどうか確認する	s.isalnum()
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
文字列中の小文字を大文字に変換する	s.upper()
線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
option: 文字列の示すエンコーディングを使う	encoding = s
散布図の△マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: 三角印を使う	marker = '^'
アクア色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームのカラムのNaNを直前の値に設定する	df[col].fillna(method='ffill')
サポートベクターマシンとしてクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
英文字から１文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
散布図の大バツマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
カラムをキーにして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
上三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ガンマ関数を使う	math.gamma(x)
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
L1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
色名をからコードにする	matplotlib.colors.cnames[色名]
データフレームを'A'列でソートして、更新する	df.sort_values(by='A', inplace=True)
散布図の上三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: 色をブラックに設定する	color = 'black'
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
正規表現でまとめて列の値を置き換える	ds.replace(pattern, repl, regex=True)
データフレームを各列毎にグループ化して列の最大値を算出する	df.groupby(column)[column2].max()
文字列がタプルに含まれるか調べる	element in aTuple
nが2で割り切れないかどうか調べる	n % 2 == 1
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
リストとイテラブルの散布図を描画して、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
実数の三乗を求める	x ** 3
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t')
２次元リストの転置行列を使う	[list(x) for x in list(zip(*aList))]
数列の移り変わりを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: 三角マーカーを使用する	marker = '^'
リストを緑色で表示する	print(f'\033[32m{value}\033[0m')
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
文字列の中でASCII限定として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
文字列リストにシーケンスを変換してタブでつなげる	'\t'.join(map(str, iterable))
タプルのコピー	dict(aDict)
折れ線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
option: ダークサーモンにグラフの色を設定する	color = 'darksalmon'
自然数個のものからk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
文字列を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
Pandasで、データフレームのカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
シスル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
多次元データを特異値分解で濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
8進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
文字列TSVファイルからカンマ区切りのファイルをn番目のカラムを行として読む	pd.read_csv(filename, index_col=n)
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
option: サドルブラウンを用いる	color = 'saddlebrown'
option: グラフの色をライトスカイブルーに変更する	color = 'lightskyblue'
SVDで多次元データをパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
カラムの値は欠損値か調べる	ds.isna()
データフレームの列の文字列が文字列で終わる行を選択する	df[df[column].str.endswith(s)]
横棒グラフをペールグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='palegreen')
文字列の右側からタブを取り除く	s.rstrip('\t')
タプルを引数として展開して表示する	print(*aTuple, sep=',')
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
タイムスタンプデータの月	aDatetime.month
辞書を浅くコピーする	dict(aDict)
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
デフォルトのエンコーディングを知る	sys.getdefaultencoding()
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
３2ビット整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
二つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
文字コードtextでファイルを開く]	open(filepath, encoding=text)
option: フォントの色をオリーブに設定する	color = 'olive'
キーが辞書に存在するか調べる	key not in aDict
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
散布図の▼マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
赤い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームのリストカラムを10の位で四捨五入して、整数にする	df[aList].round(-1).astype(int)
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
option: マーカーの色を赤にする	markerfacecolor = 'red'
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
オブジェクトがある型のインスタンスか調べる	isinstance(obj, クラス)
スピアマン相関係数としてデータフレームのリストで指定された列の相関行列	df[aList].corr(method='spearman')
ヒストグラムの色をダークオレンジにセットする	plt.hist(データ列, color='darkorange')
データフレームの列がx、かつカラムがx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームをJSONLファイルに行を付けずに保存する	df.to_csv(filename, index=None)
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
大文字と小文字を交換する	s.swapcase()
データフレームのそれぞれのグループ毎の最小値	df.groupby(column).min()
オブジェクトの参照カウントを知る	sys.getrefcount(obj)
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
文字列の示すエンコーディングで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding=s)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
文字列がひらがなかどうか	('ぁ' <= ch <= 'ん')
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
積み上げ棒プロットを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームのリスト列の文字列を欠損値にする	df[aList].replace(s, np.nan)
バイアスなしの回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームのn行より後ろ選択する	df[n:]
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
データフレームの未入力値を直後の値に変更する	df.fillna(method='bfill')
データフレームのリストカラムを四捨五入する	df[aList].round()
データフレームを'A'列と'B'列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
文字列の開始位置以降に部分文字列が含まれない	s.find(sub, start) == -1
二つの集合の交わり	aSet.intersection(aSet2)
データフレームを列の値によってグループ化し、記述統計量を求める	df.groupby(column).describe()
rgbの三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列が全て空白	s.isspace()
option: アクアマリン色を用いる	color = 'aquamarine'
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
縦棒グラフをライムグリーン色として描画する	plt.bar(データ列x, データ列y, color='limegreen')
カラムのNaNを最小値で補う	ds.fillna(ds.min())
プログラムのファイル名	sys.argv[0]
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
n足すn2	n + n2
option: ダークスレートブルー色を使う	color = 'darkslateblue'
コーラル色を用いてヒストグラムを描画する	plt.hist(データ列, color='coral')
データフレームのNaNを最大値に設定する	df.fillna(df.max())
数列とリストについて散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
rgbのダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
集合を空にする	aSet.clear()
辞書からキーで指定された項目をポップする	aDict.pop(key)
項目名がタプルに存在しているか調べる	key not in aDict
横棒グラフを耐火レンガ色を用いて描画する	plt.barh(データ列x, データ列y, color='firebrick')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
カテゴリ列で色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
主成分分析として多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
折れ線グラフにクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
データ列は何分か確認する	ds.dt.minute
配列とイテラブルについて散布図を描画して、マーカーを▲に指定する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をシャルトリューズに指定する	color = 'chartreuse'
色付きの点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
クラス分類をロバスト推定で行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ヒストグラムの色をナバホホワイトにセットする	plt.hist(データ列, color='navajowhite')
赤い丸マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
整数nを8進文字列に変換する	oct(n)[2:]
クラス分類をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
折れ線グラフを描画してカラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームのリスト列の欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
出現頻度を可視化する	plt.hist(データ列)
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
行列の列ごとの分散	np.var(aArray, axis=0)
option: バリーウッドを使う	color = 'burlywood'
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: グラフの色をディムグレーに変更する	color = 'dimgray'
２次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
文字列のケースを整える	s.casefold()
ヒストグラムを描画する	plt.hist(データ列)
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
option: エンコーディングを文字コードtextに設定する	encoding = text
全要素を０で初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
JSONLファイルにデータフレームをエクセルデータ形式で保存する	df.to_excel(filename)
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
書き込むCSVファイルの小数点以下の桁数をする	df.to_csv(filename, float_format='%.3f')
n個の数値イテラブルを使う	range(n)
散布図をバリーウッド色を使って描画する	plt.scatter(データ列x, データ列y, color='burlywood')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
option: 菱形マーカーを用いる	marker = 'D'
option: ディープスカイブルー色を使用する	color = 'deepskyblue'
option: ライトシアン色を使用する	color = 'lightcyan'
option: 線を太くする	linewidth = 3.0
折れ線グラフに丸印を使う	plt.plot(データ列x, データ列y, marker='o')
横棒グラフをコーンフラワーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
ファイルをデータフレームとして読み込む	pd.read_excel(filename)
データフレームのリストカラムを千の位で四捨五入する	df[aList].round(-3)
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列の接尾辞が部分文字列かテストする	s.endswith(sub)
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
ブラック色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
クラス名は名前付きタプルか調べる	issubclass(C, tuple)
ファイル名がJSONファイルか	filename.endswith('.json')
データフレームの最初n行を確認する	df.head(n)
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
データフレームのcollをフォーマットfmtでPandasの日付型に変換する	pd.to_datetime(df[col], format=fmt)
タイムスタンプデータの時間を使う	aDatetime.hour
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
option: 黄色色を使用する	color = 'yellow'
option: フォントの色をダークオレンジに設定する	color = 'darkorange'
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
横棒グラフをダークシアグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
データフレームから指定された２列のみ選ぶ	df[[column, column2]]
オブジェクトがn回繰り返すイテラブル	itertools.repeat(element, n)
横棒グラフの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
散布図に星マーカーを加える	plt.scatter(データ列x, データ列y, marker='*')
プロットにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
実数とyのノルム	math.hypot(x, y)
タブ文字	'\t'
マゼンタで値をプリントする	print(f'\033[35m{value}\033[0m')
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
πを用いる	math.pi
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
辞書のコピー	dict(aDict)
棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
行列の行ごとの最小値	np.min(aArray, axis=1)
非数字が文字列中に含まれるか	any(not c.isdigit() for c in s)
Pandasで、データフレームのcollのUNIX秒からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
スラッシュで区切って二つの文字列をプリントする	print(value, value2, sep='/')
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
縦棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
縦棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図のポイント印の色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
文字列を空白で区切って文字列リストに変換する	s.split()
配列を元に全要素が0の配列	np.zeros_like(aArray)
option: ホットピンクを使う	color = 'hotpink'
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
n回の数値イテラブルを見る	range(n)
線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
文字列の長さ	len(s)
要素が集合のメンバーに含まれるかどうか	element in aSet
線の線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
データ列とリストについての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
ヒストグラムの色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
option: 色をダークオーキッドに設定する	color = 'darkorchid'
数のn乗の実数剰余	pow(x, n, y)
日付データが金曜日か調べる	aDate.weekday() == 4
xが一桁の正の整数か	0 <= x <= 9
直後の値でカラムの欠損値を埋める	ds.fillna(method='bfill')
データフレームのリスト列の中の欠損値の合計を数える	df[aList].isna().sum()
option: 青紫色を用いる	color = 'violet'
散布図の△マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
イテラブルの全順列を算出する	itertools.permutations(iterable)
最大長nのデックを作る	collections.deque(maxlen=n)
リストの推移を赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
x軸の目盛を表示しない	plt.xticks([])
新しいリッジ回帰とロッソ回帰のハイブリットモデルを準備する	model = sklearn.linear_model.ElasticNet()
2つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
実数を実数で割る	x / y
option: 菱形マーカーを使う	marker = 'D'
ダーク・スラテグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
数列と配列の散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
グラフをポスター用に変更する	sns.set(context='poster')
貝殻色としてヒストグラムを描画する	plt.hist(データ列, color='seashell')
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: オレンジレッドを用いる	color = 'orangered'
タプルの先頭を捨てる	aTuple[1:]
タプルをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
カラムの分散	ds.var()
データフレームのカラムをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
セットをイミュータブルに変換する	frozenset(aSet)
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
データフレームのカラムの曜日の名前を求める	df[col].dt.weekday_name
実数以上の最小の整数を求める	math.ceil(x)
回帰分析をアンサンブル学習でする	sklearn.ensemble.VotingRegressor()
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのリスト列の欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
折れ線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームのリストカラムの未入力値を最大値に設定する	df[aList].fillna(df[aList].max())
selectorsでマスクした列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
プロットに鉛直方向の実線を設定する	plt.axvline(x=0, linestyle='solid')
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
n番目の列をデータフレームから消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
日付時刻データが何秒か知る	aDatetime.second
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
棒グラフをサンディーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='sandybrown')
リストを太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ファイルをバイナリ書き込みモードを用いてオープンして]、fとする	f = open(filepath, mode='wb')
option: リネンを使う	color = 'linen'
ファイルパスを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
集合から全ての要素を除く	aSet.clear()
線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
Pandasで、データフレームのcollをフォーマットとしてPandasの日付型にする	pd.to_datetime(df[col], format='%Y-%m-%d')
現在の日数を見る	datetime.datetime.today().day
リストを等しい量になるようにビン数nでビン分割する	pd.qcut(aList, n)
現在の分数	datetime.date.today().minute
折れ線グラフの印を菱形にする	plt.plot(データ列x, データ列y, marker='D')
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
データフレームのカラムの未入力値をxに設定する	df[col].fillna(x)
タイムスタンプデータと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
セットを組に変換する	tuple(aSet)
option: グラフの色をダークグレーに指定する	color = 'darkgrey'
カウンタ同士で積集合	aCounter & aCounter2
作画の縦横比を等しくする	plt.axis('equals')
濃いシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
降順に'A'列ででデータフレームをソートする	df.sort_values(by='A', ascending=False)
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
PandasでPandasの日付型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
オプションで、出力先を標準エラーに設定する	file = sys.stderr
イテラブルを2回あわせたデカルト積を求める	itertools.product(iterable, repeat=2)
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
データフレームを列によって並べて下位n件を取り出す	df.sort_values(columns).tail(n)
日付時刻データにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
データ列の分を使う	ds.dt.minute
リストを下線付き化する	f'\033[4m{value}\033[0m'
２つのカウンタの共通する要素を求める	aCounter & aCounter2
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
リストをビン数nでビン分割する	pd.cut(aList, n)
ファイルを文字コードtextを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ヒストグラムの色をサーモンに指定する	plt.hist(データ列, color='salmon')
データフレームの列の欠損値を最小値で埋める	df[col].fillna(df[col].min())
浮動小数点数を浮動小数点数で除算して切り捨てる	x // y
線グラフを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: 色をスレートブルーに指定する	color = 'slateblue'
リストとリストについての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
リストを二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
option: フォントの色をライトゴールドロディイエローにする	color = 'lightgoldenrodyellow'
折れ線グラフの四角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
option: グラフの色をミントクリームに変更する	color = 'mintcream'
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
リストとリストについての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの列の欠損値を直後の値で置換する	df[col].fillna(method='bfill')
データ列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
イテラブルから両端キューを新規生成する	collections.deque(iterable)
赤いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
クラス分類の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
データ列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
現在の分数を使う	datetime.date.today().minute
option: グラフの色をカーキに設定する	color = 'khaki'
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ベクトルの行ごとの平均	np.mean(aArray, axis=1)
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
縦棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
ダークカーキ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
リストが空でないかどうか確認する	len(aList) != 0
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
３数の最大値	max(x, y, z)
データ列を指定した値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
折れ線グラフの色をオリベドラブに変更する	plt.plot(データ列x, データ列y, color='olivedrab')
棒グラフをリネン色を使って描画する	plt.bar(データ列x, データ列y, color='linen')
オブジェクトは論理値クラスか	isinstance(obj, bool)
Pandasで書式fmtとして文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
▽印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
集合から要素を除去する	aSet.remove(element)
ふたつのリストの積集合	list(set(aList) & set(aList2))
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列の示すエンコーディングでファイルパスをオープンする]	open(filepath, encoding=s)
折れ線グラフをペルー色を用いて描画する	plt.plot(データ列x, データ列y, color='peru')
n個に配列をビニングし、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ファイルをUTF8として書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
オーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='orchid')
ASCII限定としてパターンで文字列を区切る	re.split(pattern, s, flags=re.ASCI)
データフレームの列が正規分布からどの程度、尖っているか見る	df[col].skew()
サブクラスか調べる	issubclass(サブクラス, クラス)
x座標の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
リストとリストの散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームの欠損値を前の行の値にセットする	df.fillna(method='ffill')
真⊂	aSet < aSet2
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
パステル調にカラーパレットをグラフの描画で使う	sns.set(pallete='pastel')
文字列が大文字	s.isupper()
ダークグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='darkgreen')
散布図を赤いバツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
横棒グラフをコーンズシルク色を用いて描画する	plt.barh(データ列x, データ列y, color='cornsilk')
日付データが木曜日か	aDate.weekday() == 3
クラス分類の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ダーク・スラテグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: 色をシルバーに設定する	color = 'silver'
データフレームの中央値を求める	df.median()
シャルトリューズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データ列の中にが存在するか調べる	ds.isin([value])
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
option: グラフの色をサンディーブラウンに指定する	color = 'sandybrown'
データフレームのカラムはどの程度分散しているか見る	df[col].var()
要素をスタックの先頭から取り除く	deq.popleft()
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
パレットトルコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
文字列をトリムする	s.strip()
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
データフレームの列名を列挙する	df.columns
nが偶数かどうか	n % 2 == 0
ファイルパスが存在するかどうか	os.path.exists(filepath)
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
横棒グラフをオリーブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olive')
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
列をキーにして2つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
データフレームのカラムのタイムゾーンを東京に設定する	df[col].tz_convert('Asia/Tokyo')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
文字列内にアスキー文字が含まれる	any(c.isascii() for c in s)
今日をタプルにする	datetime.datetime.today().timetuple()
配列をシーケンスから作成する	np.array(iterable)
散布図のマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
文字のユニコードを求める	ord(ch)
散布図をシーグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='seagreen')
タイムスタンプデータの日数	aDatetime.day
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
第一引数で指定されたファイルの名前	sys.argv[1]
option: カデットブルー色を使う	color = 'cadetblue'
縦棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
n番目のシートをファイルからデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
データ列をビン数nでビン分割する	pd.cut(ds, n)
数列と配列についての散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
カラーバーを横向きに設定する	plt.colorbar(orientation='horizontal')
行列の計算を行う	import numpy as np
スライド用にグラフを設定する	sns.set(context='talk')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
イテラブルと数列についての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
多次元データをt-SNEとして淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: 線種を破線に指定する	linestyle = 'dashed'
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
キューが空か	len(deq) == 0
リストと数列の散布図を描いて、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
大バツマーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームのリストカラムの値はNaNか調べる	df[aList].isna()
両端キューの大きさ	len(deq)
データ列間の寄与率を求める	sklearn.metrics.r2_score(データ列, データ列2)
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
タプルの末尾を使う	aTuple[-1]
データフレームの中の欠損値がある行を落とす	df.dropna()
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
データフレームのカラムの時	df[col].dt.hour
リストとリストについての散布図にrgbの▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
nがn2以下または、n3以上か調べる	n <= n2 or n >= n3
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームを列によって並べ直して下位n件を取り出す	df.sort_values(columns).tail(n)
自然数の階乗	math.factorial(n)
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
リストをn個に等量でビン分割する	pd.qcut(aList, n)
カラムのpercent分位数を求める	ds.quantile(percent/100)
オブジェクトが集合	isinstance(obj, set)
オブジェクトのメモリビュー	memoryview(obj)
リストとリストについて散布図を描いてマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
縦棒グラフをパールゴールデンロッド色を使って描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
横棒グラフをミントクリーム色を用いて描画する	plt.barh(データ列x, データ列y, color='mintcream')
データフレームのstart行目からend行目まで取り出す	df[start:end]
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
耐火レンガ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
カラーバーを水平に描く	plt.colorbar(orientation='horizontal')
横棒グラフをダークグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgreen')
option: ブラックにグラフの色を設定する	color = 'black'
データフレームの列を十の位で丸める	df[col].round(-1)
最大列数を変更する	pd.set_option('display.max_columns', n)
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
ファイルを文字列の示すエンコーディングを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
ファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
option: クロス印を加える	marker = 'x'
配列の各要素のアダマール積を求める	np.multiply(aArray, aArray2)
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
浮動小数点数の逆正接	math.atan(x)
データ列をビン数nでビンニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
行列を一次元にする	aArray.flatten()
バイオレット色を用いてヒストグラムを描画する	plt.hist(データ列, color='violet')
データ列の未入力値を後の値に設定する	ds.fillna(method='bfill')
option: シーグリーンを使う	color = 'seagreen'
option: アクア色を使う	color = 'aqua'
部分文字列が部分文字列で開始するかどうか調べる	s.startswith(sub)
option: グラフの色をダークグレーに設定する	color = 'darkgray'
実数を実数で除する	x / y
確率的勾配降下でクラス分類をする	model = sklearn.linear_model.SGDClassifier()
キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
データ列の値が欠損値かどうか調べる	ds.isna()
option: ダークバイオレットにグラフの色を変更する	color = 'darkviolet'
option: シルバー色を使用する	color = 'silver'
文字列の開始位置以降が部分文字列で開始するかどうか確認する	s.startswith(sub, start)
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
カラムの第一四分位数を求める	ds.quantile(0.25)
改行で区切って二つの変数を出力する	print(value, value2, sep='\n')
データ列の中に日付データと日付データがいくつ存在するか求める	ds.isin([value, value2]).sum()
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
データフレームのリストカラムの中に文字列があるかどうか	df[aList].isin([value])
リストと配列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの色をRGBで変更する	plt.plot(データ列x, データ列y, color='#800080')
表データから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
色付きの実線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: ダークグリーンを使用する	color = 'darkgreen'
プラットホームがLinuxかどうか調べる	sys.platform.startswith('linux')
新しいガウス過程分類モデルを準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフの下三角印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ヒストグラムをタン色として描画する	plt.hist(データ列, color='tan')
新しい文字列として文字列中のパターンを置換する	re.sub(pattern, newsub, s)
数の値が整数か調べる	x.is_integer()
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
データフレームを'A'列と'B'列でによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフの上三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
シエナ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
マゼンタで文字列をプリントする	print(f'\033[35m{value}\033[0m')
二つの集合の差集合	aSet.difference(aSet2)
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
二つの列によってデータフレームをまとめた表	df.groupby(['A', 'B'])
カウンタから辞書を引く	aCounter.subtract(aDict)
ロージーブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
線形回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
縦棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: エンコーディングをBOM付きにする	encoding = 'utf_8_sig'
データフレームを百の位で丸めて、整数にする	df.round(-2).astype(int)
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
行列の要素ごとの積を求める	np.multiply(aArray, aArray2)
option: グラフの色をタンに指定する	color = 'tan'
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
プロットにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
ファイルのn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
option: プラム色を使う	color = 'plum'
日付データからn日分、減らす	aDate - datetime.timedelta(days=n)
n個にデータフレームの中のカラムをビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
イテラブルとリストについて散布図を描画し、マーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
昇順に二つの列でデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
列はどれだけ、分散しているか見る	ds.var()
nが5の倍数	n % 5 == 0
データフレームの列の文字列で文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
ホワイトスモーク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
分類モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
タプル中の文字列が最初に見つかるインデックス	aTuple.index(element)
データフレームを列名リストによってグループ化し、要約統計量を算出する	df.groupby(columns).describe()
データフレームを列によってソートし、、上位を取り出す	df.sort_values(columns).head(n)
文字列リストにイテラブルを変換して、空白で結合する	' '.join(map(str, iterable))
十六進文字列を整数に変換する	int(s, 16)
FIXME:カテゴリーデータを出現頻度順に並べる	df['A'].value_counts().sort_index().index
列を等しい量になるようにn個にビニングする	pd.qcut(ds, n)
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
数式の変数についてのn階微分を算出する	sympy.diff(e, z, n)
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データ列の折れ線グラフを四角印として描画する	plt.plot(データ列x, データ列y, marker='s')
データ列を10の位で丸める	ds.round(-1)
ヒストグラムをディムグレー色を使って描画する	plt.hist(データ列, color='dimgray')
ダークバイオレット色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
リストとリストの散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
実数の双曲線正弦の逆数を求める	math.asinh(x)
項目名がタプル上で定義されているか調べる	key in aDict
青い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: 暗い赤にグラフの色を指定する	color = 'darkred'
等差数列を行列に変換する	np.arange(開始値, 終了値, 等差)
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
aListn番目から値をポップする	aList.pop(n)
オブジェクトが浮動小数点数クラスのインスタンスかどうか調べる	isinstance(obj, float)
カテゴリでグループ化してデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
既存のファイルパスをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
文字列の終了位置より前に部分文字列が含まれるか	s.find(sub, 0, end) != -1
８ビット整数型の全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数, dtype=np.int8)
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
セット＼セット	aSet.difference(aSet2)
データフレームからn行をランダムに抽出する	df.sample(n)
列の値によってデータフレームをグループ化して、最大値を計算する	df.groupby(column).max()
グラフを画面用にセットする	sns.set(context='notebook')
リストとイテラブルについての散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
nがn2以下か	n <= n2
ミディアムオーキッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
散布図のマーカーの色を指定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
変数を太文字で出力する	print(f'\033[1m{value}\033[0m')
nの各桁の総和を求める	sum(map(int, str(n)))
配列と数列についての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
スクリプトファイルの絶対パス	os.path.abspath(__file__)
option: グラフの色をシエナに設定する	color = 'sienna'
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
リストをy座標、配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
整数nを八進文字列に変換する	oct(n)[2:]
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
option: フォントの色を淡いピンク色に変更する	color = 'lightpink'
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
option: 行列のデータ型を指定する	dtype = bool
ベクトルの列ごとの標準偏差	np.std(aArray, axis=0)
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
整数nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
横棒プロットの縦幅を指定する	plt.barh(ラベル列, データ列, width=0.5)
散布図の三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ビン数nでリストをビニングする	pd.cut(aList, n)
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
ゴーストホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
ブースティングを用いて回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
グレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ヒストグラムの色をネイビーに変更する	plt.hist(データ列, color='navy')
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
論文にグラフを指定する	sns.set(context='paper')
データフレームの列の値がx以上の行を抽出する	df[df[column] >= x]
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
散布図に黒い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
棒グラフをティール色として描画する	plt.bar(データ列x, データ列y, color='teal')
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
配列とリストの散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
データフレームのカラムの中にある文字列との合計を求める	df[col].isin([value, value2]).sum()
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
色付きの実線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
色付きの一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
タプルの最後を見る	aTuple[-1]
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームを複数の列で小さい順に並べ直して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
カウンタから最頻出な項目の件数を求める	aCounter.most_common()[1]
数値を双方向キューにプッシュする	deq.append(element)
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
nまでの偶整数リスト	list(range(2, n, 2))
データフレームを複数の列でを用いて破壊的にソートする	df.sort_values(by=column, inplace=True)
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
折れ線グラフのバツ印の色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: リネンにグラフの色を設定する	color = 'linen'
データ列の中にがあるか判定する	ds.isin([value])
ミディアムオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
配列を平坦化する	aArray.flatten()
データフレームのリスト列の25パーセンタイル	df[aList].quantile(0.25)
option: バイナリ書き込みモードを使用する	mode = 'wb'
n個にリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
赤い左三角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
リストは少なくともひとつ真か調べる	any(aList)
リストとリストの散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームをCSVから読み込む	pd.read_csv(filename, sep=',')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
カウンタ同士でインターセクション	aCounter & aCounter2
アクア色として線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
小数点数以上の最小の整数	math.ceil(x)
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
浮動小数点数の二進対数	math.log2(x)
イテラブルを累加した列を求める	itertools.accumulate(iterable)
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
整数nを十六進リテラルに変換する	hex(n)
浮動小数点数を実数で除算して、切り捨てる	x // y
データフレームの欠損値がある部分を	df.style.highlight_null()
数列とリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームの列の第一四分位数	df[col].quantile(0.25)
データフレームの列の名前を付け直す	df.rename(columns={column: name})
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列をフォーマットでPandasの日付型にする	pd.to_datetime(s, format='%Y-%m-%d')
シーケンスを文字列リストに変換して、空白を用いて結合する	' '.join(map(str, iterable))
option: マゼンタにグラフの色をする	color = 'magenta'
右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
データフレームから重複する行を残さず、削除する	df.drop_duplicates(keep=False)
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
rgbの大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを二つの列によってまとめたグループを求める	df.groupby(['A', 'B'])
ファイルが存在しない	not os.path.exists(filepath)
折れ線グラフを実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
赤い星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
要素はセットのメンバーでないかどうか調べる	element not in aSet
ダークシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
データ列の母標準偏差を求める	ds.std(ddof=0)
データ列の変遷を半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ペルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
ヒストグラムの色をアクアマリンにする	plt.hist(データ列, color='aquamarine')
黒い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
ファイル名がTSVファイルか確認する	filename.endswith('.tsv')
option: フォントの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
文字列の示すエンコーディングでファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
2つのオブジェクトが同一参照	obj is obj2
両端キューの中に要素が含まれてるかどうか調べる	element in deq
ファイルを書き込みできるようにUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
文字列の中でパターンにマッチした全文字列をリストにする	re.findall(pattern, s)
データフレームのカラムが正規分布からどれだけ尖っているか確認する	df[col].skew()
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないか調べる	s.find(sub, start, end) == -1
凡例の位置を指定する	plt.legend(loc=(x, y))
散布図に黒い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
nがn2で割り切れるかどうか調べる	n % n2 == 0
文字列中の部分文字列を文字列に置換する	s.replace(sub, newsub)
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
要素を両端キューの先頭に入れる	deq.appendleft(element)
データフレームの列と列の相関行列スピアマンで	df[[column, column2]].corr(method='spearman')
配列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
配列とリストについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
10を底とする浮動小数点数の対数を計算する	math.log10(x)
赤い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列の左端からタブを除く	s.lstrip('\t')
カラーバーを設定する	plt.colorbar()
文字列はタプルに含まれないか調べる	element not in aTuple
散布図をブランチドアーモンド色として描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
グラフの色調を全般的に明るくする	sns.set(pallete='bright')
データフレームのリストカラムの中に日付データとがいくつあるか数える	df[aList].isin([value, value2]).sum()
実数のコサインの逆数	math.acos(x)
配列と数列についての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
インプレースに両端キューの値を反転する	deq.reverse()
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
option: コーンズシルク色を使う	color = 'cornsilk'
option: パレットトルコイズに色を設定する	color = 'paleturquoise'
osモジュールをインポートする	import os
データフレームを'A'列によってまとめたグループを見る	df.groupby('A')
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
option: パパイヤウィップにフォントの色を指定する	color = 'papayawhip'
散布図を赤いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='r')
句読点文字を全部使う	string.punctuation
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
正則化付き単回帰分析を行う	model = sklearn.linear_model.ElasticNet()
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
再帰が何回までできるかを	sys.getrecursionlimit()
両端キューの最初	deq[0]
棒グラフをライトサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームの中で列に重複があるか見る	df.duplicated(subset=column)
n2がn以上かつ、n3以下か調べる	n <= n2 and n2 <= n3
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列リストを連結し、ひとつの文字列にする	''.join(map(str, iterable))
ファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データ列のNaNを最小値に設定する	ds.fillna(ds.min())
リストの中の最小値	min(aList)
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
ヒストグラムをクリムゾン色として描画する	plt.hist(データ列, color='crimson')
横棒グラフを珊瑚色で描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームからランダムに取り出す	df.sample()
折れ線グラフの大バツ印の色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
option: グラフの色をターコイズに指定する	color = 'turquoise'
乱数を正規分布で求める	random.normalvariate(mu=0.5, sigma=0.2)
2つの列によって昇順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
文字列をシンボルに変換する	sympy.Symbol(s)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
文字列を太文字にする	f'\033[1m{value}\033[0m'
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
二次元組をフラット化する	sum(aTuple)
ネイビー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
部分文字列が文字列中に含まれない	sub not in s
option: フォントの色をダークグレーに設定する	color = 'darkgrey'
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
タブ区切りのファイルからCSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
深紅色で線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
スタックの末尾に列の各要素を付け加える	deq.extend(iterable)
散布図をダークレッド色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
文字列のn番目を使う	s[n]
リストとリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
文字列内にひとつでも英数字が含まれるか確認する	any(c.isalnum() for c in s)
ValueMapでデータフレームのリストカラムを一度に変更する	df[aList].replace(ValueMap)
option: 色を貝殻に指定する	color = 'seashell'
option: 切片を算出しない	fit_intercept = False
nの二乗を求める	n ** 2
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
データ列の値が正規分布にしたがって発生する累積確率を算出する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
散布図を耐火レンガ色として描画する	plt.scatter(データ列x, データ列y, color='firebrick')
別の文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
データ列のメディアンを求める	ds.median()
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
横棒グラフをダークサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='darksalmon')
最大値・最小値の範囲を用いて一様な乱数を計算する	random.uniform(最小値, 最大値)
リストの集合を使う	set(iterable)
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
配列とリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ロイヤルブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
浮動小数点数を十の位で四捨五入する	round(x, -1)
タプルのn番目以降の部分を取り出す	aTuple[n:]
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
データフレームを列でグループ化し、、グループ毎の件数を知る	df.groupby(column).size()
ファイルを追加できるように開く]	open(filepath, mode='a')
今日は何日か知る	datetime.datetime.today().day
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
平均線付きボックスチャートを描く	plt.boxplot(データ列, meanline=True)
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
1からnまでの整数列を見る	list(range(1, n+1))
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
数値を簡単化する	sympy.sympify(e)
ふたつの関係が下位集合か判定する	aSet.issubset(aSet2)
自然数最小公倍数	math.lcm(n, n2)
折れ線グラフをラベンダー色を使って描画する	plt.plot(データ列x, データ列y, color='lavender')
option: 色をサンディーブラウンに設定する	color = 'sandybrown'
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
割合付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
色付きの点線を用いて数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
プログラムの実行を即座に止める	sys.exit()
横棒グラフを真紅色を用いて描画する	plt.barh(データ列x, データ列y, color='crimson')
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
文字列の示すエンコーディングを用いてファイルを開く]	open(filepath, encoding=s)
データフレームのcollのUNIX秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: フォントの色をライムグリーンに設定する	color = 'limegreen'
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
実数の値が整数か確認する	x.is_integer()
データフレームの欠損値をxで補う	df.fillna(x)
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
rgbの右三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
nにn2をかける	n * n2
文字列を最後の部分文字列で二分し、先頭の文字列を見る	s.rpartition(sub)[0]
option: 読み込まない列番号をnamesで指定する	skiprows = names
各グループ列ごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフをアクアマリン色を使って描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: レモンシフォン色を用いる	color = 'lemonchiffon'
キーで指定された項目をマップから取り出す	aDict.pop(key)
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
predicateFuncを適用したときTrueとならない列の要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
変数の出力を改行なしに行う	print(value, end='')
組の値を並べ変える	sorted(aTuple)
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
プロットに格子線を付ける	plt.grid(True)
０で全要素を初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
オブジェクトが関数か判定する	callable(obj)
横棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
ゼロ埋めされた複素数型の配列を作成する	np.zeros(要素数, dtype=bool)
データフレームの列がx以上のデータを抽出する	df[df[column] >= x]
昇順に破壊的にデータフレームを複数の列によって並べる	df.sort_values(by=column, ascending=True, inplace=True)
列によって表データをグループ化して、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
文字列は識別子名か調べる	s.isidentifier()
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
最大長を指定して、両端キューを作る	collections.deque(maxlen=n)
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ライトイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
オブジェクトはバイト列かどうか調べる	isinstance(obj, bytes)
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームを散布図でグラフ化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ラベル付きの円プロットをプロットする	plt.pie(データ列, startangle=90, labels=ラベル列)
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データ列の中に文字列があるか調べる	ds.isin([value])
棒グラフをパレットトルコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームを列によって並べて、下の方を取り出す	df.sort_values(columns).tail(n)
データフレームの列の欠損値を直前の値で埋める	df[col].fillna(method='ffill')
リストと数列についての散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図にrgbのダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='turquoise')
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
表データの列をダミー変数に変換する	pd.get_dummies(df[column])
リストが少なくともひとつ真か調べる	any(aList)
データフレームの中に文字列と文字列が含まれるか確認する	df.isin([value, value2])
折れ線グラフの△マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
option: 区切り記号を改行にする	sep = '\n'
破壊的にデータフレームを複数の列によってによってソートする	df.sort_values(by=column, inplace=True)
辞書のキーとその値をペアとして取り出す	aDict.items()
タプルの要素をソートする	sorted(aTuple)
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
プロットの色使いをパステル調にする	sns.set(pallete='pastel')
オブジェクトはリストかタプルかどうか判定する	isinstance(obj, (list)
散布図を黒い四角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: アンティークホワイト色を用いる	color = 'antiquewhite'
散布図をアンティークホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
タプルの最初の文字列を探す	aTuple.index(element)
option: グラフの色をペルーに設定する	color = 'peru'
カウンタの要素一覧	aCounter.keys()
配列の次元数	aArray.ndim
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
データフレームの列名一覧で指定された列を消す	df.drop(columns, axis=1)
散布図に▽マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
データフレームの列を10の位で丸める	df[col].round(-1)
文字列が文字列リストにあるかどうか調べる	s in aStringList
option: ミディアムバイオレットレッドを使用する	color = 'mediumvioletred'
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データフレーム全体をインデックスで降順で並べる	df.sort_index(ascending=False)
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
リストとイテラブルについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
データフレームを列によってグループ化して、それぞれのグループ毎の標準偏差を計算する	df.groupby(column).std()
option: 文字列を区切りで使う	sep = s
集合にイテラブルを追加更新する	aSet.update(iterable)
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
2つの列によってデータフレームを昇順にソートして更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
イテラブルを累加した列を得る	itertools.accumulate(iterable)
ディープスカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列をISO書式で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
２つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
散布図の四角印を赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
配列の要素数を求める	aArray.size
リストの変遷を青い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
JSONフォーマットのバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
文字のASCIIコード	ord(ch)
データフレームを二つの列の値によって集約する	df.groupby(['A', 'B'])
カウンタ同士で和集合演算する	aCounter | aCounter2
ゼロ埋めされたブール型のベクトル	np.zeros(要素数, dtype=np.int32)
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
正規分布で疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
option: 黄緑色を使う	color = 'chartreuse'
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
nが負の整数か調べる	n < 0
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフをティール色として描画する	plt.plot(データ列x, データ列y, color='teal')
浮動小数点数を百の位で四捨五入する	round(x, -2)
option: パウダーブルーを使う	color = 'powderblue'
ファイル名の区切り記号を調べる	os.sep
データフレームを複数の列によってまとめたグループを求める	df.groupby(columns)
ペールグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
nとn2のXOR	n ^ n2
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
双方向キューのn番目に要素を差し込む	deq.insert(n, element)
散布図をダイアモンド印を使って描画する	plt.scatter(データ列x, データ列y, marker='D')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの列名を指定した列の名前一覧に置き換える	df.columns = columns
ラインを一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データ列の一意な要素	ds.unique()
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
散布図を赤い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: レベッカパープルに色を設定する	color = 'rebeccapurple'
文字列がリストに含まれる	element in aList
色付きの点線でリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
行列の形状を変形する	aArray.reshape(行数, 列数)
値は集合の要素	element in aSet
データフレームの列がx、かつ列がx2である行を選ぶ	df[(df[column] == x) & (df[column2] == x2)]
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
リストと配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ガンマ関数の値を求める	math.gamma(x)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
データフレームを'A'列と'B'列の値でグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
空のリスト	[]
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
複数の列によってデータフレームをソートする	df.sort_values(by=column)
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
リストを横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
option: フォントの色をダークレッドにする	color = 'darkred'
横軸を対数に変更する	plt.xscale('log')
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
異なる列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
リストの個数	len(aList)
棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
TSVファイルをカラムの名前なしで読み込む	pd.read_csv(filename, header=None)
折れ線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
スチールブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データ列を指定した値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
文字列をセパレータで区切って列挙する	s.split(sep)
部分文字列を文字列の末尾から見つける	s.rfind(sub)
文字列を区切りで分割して、文字列リストにする	s.split(sep)
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
option: スチールブルーを用いる	color = 'steelblue'
カウンタから最も頻出の項目の件数	aCounter.most_common()[1]
文字列を白色で表示する	print(f'\033[37m{value}\033[0m')
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
改行なしで標準入力から1行分読み込む	sys.stdin.readline().rstrip()
n番目のシートをファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
変数が0に近づく場合、数式の極限値を算出する	sympy.limit(e, z, 0)
文字列がタプルの要素でないか調べる	element not in aTuple
データフレームから指定された三列を抽出する	df[[column, column2, column3]]
エラーなくリストのオブジェクトの位置を使う	aList.index(element) if element in aList else -1
実測値をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
最後から文字列を部分文字列で分割する	s.rsplit(sub)
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
option: ヘッダを自動的な連番に設定する	header = None
線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
option: シアンにフォントの色をセットする	color = 'cyan'
ピアソン相関係数でデータフレームのリストで指定されたカラムの相関行列	df[aList].corr(method='pearson')
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
散布図のダイアモンド印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
オプションで、出力先を標準出力に変更する	file = sys.stdout
CSVを読む	pd.read_csv(filename, sep=',')
単位行列	np.eye(行数, 列数)
配列をn個に等間隔でビン分割する	pd.cut(aArray, n)
predicateFuncが真になる列の部分	itertools.takewhile(predicateFunc, iterable)
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
説明変数と目的変数を用いて単回帰モデルを学習する	model.fit(説明変数, 目的変数)
JSONフォーマットの文字列を辞書に変換する	json.loads(jsonString)
両端キューのn番目	deq[n]
オーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームのリスト列の相関行列ピアソン相関係数で	df[aList].corr(method='pearson')
再帰の最大回数を知る	sys.getrecursionlimit()
nが負の数かどうか判定する	n < 0
オリーブにヒストグラムの色を変更する	plt.hist(データ列, color='olive')
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
セットが空集合か確認する	len(aSet) == 0
ロバスト推定で回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
整数の並べ方の総数を求める	math.perm(n)
折れ線グラフを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
日付データが木曜日かテストする	aDate.weekday() == 3
文字列が正規表現にマッチさせる	re.match(pattern, s)
ダークオレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
実線にヒストグラムを指定する	plt.hist(データ列, linestyle='solid')
option: 珊瑚色を使用する	color = 'coral'
データフレームを各列毎にグループ分けして、列の合計を計算する	df.groupby(column)[column2].sum()
文字コードtextとして書き込み用にファイルパスをオープンする]	open(filepath, mode='w', encoding=text)
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
option: フォントの色をダークシアンに変更する	color = 'darkcyan'
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
縦棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
セットの濃度	len(aSet)
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
1からnまでの整数リストを使う	list(range(1, n+1))
エラーなく辞書からキーの値を得る	aDict.get(key, None)
リストから配列を作る	np.array(aList)
option: グラフの色をオールドレースに設定する	color = 'oldlace'
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
部分文字列で文字列が終了するかどうか	s.endswith(sub)
データフレームの列の中にある文字列の合計を数える	df[col].isin([value]).sum()
配列とリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
サーモン色でヒストグラムを描画する	plt.hist(データ列, color='salmon')
浮動小数点数の双曲線余弦の逆数を求める	math.acosh(x)
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
日付データが日付データと同時か調べる	aDate == aDate2
配列の分散	np.var(aArray)
文字列中にひとつでも非大文字が含まれるか確認する	any(not c.isupper() for c in s)
昇順にタプルの要素を並べ変える	sorted(aTuple, reverse=False)
ファイルをオープンする]	open(filepath)
コロンで文字列を区切って、列挙する	s.split(':')
変数について数式を微分する	sympy.diff(e, z)
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
左三角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をライトサーモンに変更する	plt.plot(データ列x, データ列y, color='lightsalmon')
変数を青色化する	f'\033[34m{value}\033[0m'
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
三２ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int16)
文字列の終了位置より前に部分文字列がないかどうか確認する	s.find(sub, 0, end) == -1
文字列からISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列の示すエンコーディングとしてファイルを開く]	open(filepath, encoding=s)
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
ファイルを文字列の示すエンコーディングとして追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
option: グラフの色をターコイズに設定する	color = 'turquoise'
まとめてValueMapでデータフレームの値を変更する	df.replace(ValueMap)
赤い点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: 色をコーラルに指定する	color = 'coral'
JSON形式の文字列を読み込む	json.loads(jsonString)
文字列の右端から部分文字列を消す	s.rstrip(sub)
既存のファイルパスをBOM付きを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
実数が整数かどうか確認する	x.is_integer()
データフレームのカラムの欠損値を直前の値に変更する	df[col].fillna(method='ffill')
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
ライム色でヒストグラムを描画する	plt.hist(データ列, color='lime')
マッピングを階層化する	collections.ChainMap(aDict)
行列の列	aArray[:, 列番号]
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
列'A'と列'B'をキーとして二つの表データを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ミディアムターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームを２つの列によってを用いて破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
nをn2倍にする	n *= n2
マッピングをインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
縦棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームを複数の列で昇順にソートする	df.sort_values(by=column, ascending=True)
縦棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
グラフの色を濃くする	sns.set(pallete='deep')
棒グラフをプラム色を用いて描画する	plt.bar(データ列x, データ列y, color='plum')
option: 星マーカーを使う	marker = '*'
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
モカシン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
プロットの色を淡くする	sns.set(pallete='muted')
フローラルホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
リストをn倍する	aList * n
JSONフォーマットのファイル入力を読み込んで、dataとする	data = json.load(fin)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
整数の階乗を算出する	math.factorial(n)
グラフをデフォルトでいい感じに設定する	sns.set()
一点鎖線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: レモンシフォン色を使う	color = 'lemonchiffon'
データ列の値がNaNか調べる	ds.isna()
Pandasで文字列を書式で日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
線グラフの色をシルバーにする	plt.plot(データ列x, データ列y, color='silver')
option: ライトコーラル色を使う	color = 'lightcoral'
作画のx軸とy軸の比率を等しくする	plt.axis('equals')
コンビネーション	math.comb(n, k)
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
xでデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(x)
整数nをn2分の一にする	n //= n2
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
サーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
ベクトルの列	aArray[:, 列番号]
n番目のシートをエクセルファイルファイルからデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
乱数で要素を埋めた配列を作る	np.random.random(N)
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: グラフの色をシルバーに指定する	color = 'silver'
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
散らばりを図示する	plt.scatter(データ列x, データ列y)
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
ローングリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
列をリストとして抽出する	df[column].values.tolist()
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
option: オレンジレッドにグラフの色を変更する	color = 'orangered'
列によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
NULLに等しい識別子	None
データフレームを破壊的に昇順に複数の列で並べる	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
データフレームの二つのカラムを並べて箱ひげ図で描画する	plt.boxplot([df['カラム'], df['カラム']])
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t')
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
リストと数列の散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
カラーバーを付ける	plt.colorbar()
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
等量でビン数nで配列をビン分割する	pd.qcut(aArray, n)
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
標準出力の出力先がターミナル	sys.stdout.isatty()
配列のユニークな値を要素とする配列を求める	np.unique(aArray)
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
タイムスタンプデータが木曜日か	aDatetime.weekday() == 3
ヒートマップでデータフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
紺色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
出力ストリームを解放する	f.close()
タプルを並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームのリスト列の空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
文字列中にひとつでも非アスキー文字があるか確認する	any(not c.isascii() for c in s)
改行なしで1行分標準入力から読む	sys.stdin.readline().rstrip()
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ベクトルの列ごとの平均を求める	np.mean(aArray, axis=0)
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
再帰の上限を上げる	sys.setrecursionlimit(1000000)
マルーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
オプションで、出力先を標準出力に設定する	file = sys.stdout
折れ線グラフに赤いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
n回オブジェクトが繰り返すイテラブルを求める	itertools.repeat(element, n)
x軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
スピアマンの順位相関係数を計算する	scipy.stats.spearmanr(データ列, データ列2)
両端キューの末尾にイテラブルの各値を追加する	deq.extend(iterable)
文字列の最初の不要な空白を除く	s.lstrip()
データフレームを関数の値でグループ化し、要約統計量を計算する	df.groupby(関数).describe()
分類木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
標準入力から1文字だけ読み込む	sys.stdin.read(1)
EUCとして追加できるように既存のファイルパスを開く]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフのバツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
８進数字を全部使う	string.octdigits
option: グラフの色をインディゴに設定する	color = 'indigo'
ミディアムスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
重複していない行のみを選択する	df[not df.duplicated(keep=False)]
プログラムを正常に終了する	sys.exit(0)
区間から行列	np.linspace(最小値, 最大値, 要素数)
option: 色をモカシンにする	color = 'moccasin'
空のリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
文字列は全て印字できるかテストする	s.isprintable()
Pandasで、エポック秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームのNaNを最大値に指定する	df.fillna(df.max())
横棒グラフをブラウン色として描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームのリスト列の標本標準偏差	df[aList].std()
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
データ列のどの値が頻出か確認する	ds.mode()
ライム色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
散布図の三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: シスルに色を指定する	color = 'thistle'
タプルのキーを列挙する	list(aDict)
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
ダークオレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
クラス分類をブースティングでする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データフレームの列の中にいくつ欠損値が含まれるかカウントする	df[col].isna().sum()
マッピングの項目名を要素に設定する	aDict[key] = element
option: グラフの色を濃い青に指定する	color = 'darkblue'
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
読み込みモードでファイルをオープンする]	open(filepath, mode='r')
二つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
データ列の推移を赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
点線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dotted')
リストを下線付きにする	f'\033[4m{value}\033[0m'
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
連立方程式の解を求める	sympy.solve([e, e2])
リストとリストについての散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
ファイルが存在するか確認する	os.path.exists(filepath)
複数のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
パラメータがマイナス無限大に近づくとき数値の極限値を求める	sympy.limit(e, z, -oo)
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
データフレームのカラムの中にあると文字列の合計を数える	df[col].isin([value, value2]).sum()
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
カラムの中の欠損値の数を数える	ds.isna().sum()
option: フォントの色をゴーストホワイトに変更する	color = 'ghostwhite'
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
リストをリストを境界値として分割する	pd.cut(aList, aList)
イテラブルと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
小文字を使う	string.ascii_lowercase
列に列を続ける	itertools.chain(iterable, iterable2)
y軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
kを底とする実数の対数	math.log(x, k)
散布図を青紫色を用いて描画する	plt.scatter(データ列x, データ列y, color='violet')
破線に線グラフの線種を設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのカラムのNaNをxに設定する	df[col].fillna(x)
実行環境がリナックス	sys.platform.startswith('linux')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
xが1、もしくは2もしくは3に等しい	x == 1 or x == 2 or x == 3
文字のユニコード	ord(ch)
まとめてreplにデータフレームの値を正規表現patternで置き換える	df.replace(pattern, repl, regex=True)
散布図の星マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データ列が何曜日か見る	ds.dt.weekday_name
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
文字列を空白で区切る	s.split()
直後の値でデータ列の欠損値を補う	ds.fillna(method='bfill')
option: 読むシートの名前をnamesに指定する	sheet_name = names
重複した行を抽出する	df[df.duplicated(keep=False)]
オブジェクトのバイトサイズ	sys.getsizeof(obj)
Pandasで、文字列のUNIX秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
ミディアムスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
赤い破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
Pandasでデータフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
散布図をスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='springgreen')
グリッド線をグラフから消す	plt.grid(False)
散布図を黒いバツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
青紫色でヒストグラムを描画する	plt.hist(データ列, color='violet')
昇順にデータフレームを列を用いてソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのヒストグラムを縦横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
黒い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
グラフのx軸に説明をつける	plt.xlabel('x軸ラベル')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
グラフをポスター用に設定する	sns.set(context='poster')
既存のファイルパスをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
凡例を表示する	plt.legend()
データフレームを二つの列でグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
日付時刻データの時間	aDatetime.time()
JSONファイルのfをデータに変換する	json.load(fin)
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
年月日と時刻からタイムスタンプを生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームの中にある日付データと日付データの合計を数える	df.isin([value, value2]).sum()
散布図の下三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
書き込むCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
option: エンコーディングをSJISにセットする	encoding = 'shift_jis'
集合から何でもいいからひとつ取り出す	aSet.pop()
option: 複素数型を使う	dtype = bool
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームの列の値がxより大きくx2より少ない行を選ぶ	df[(x < df[column]) & (df[column] < x2)]
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
見やすいグラフを使う	import seaborn as sns
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームをインデックスを用いて小さい順にソートする	df.sort_index(ascending=True)
Pandasで、書式でデータフレームのcollをdatetime64型にする	pd.to_datetime(df[col], format='%Y-%m-%d')
ブランチドアーモンド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
表から最初のカラムを消す	df[df.columns[1:]]
横棒グラフをペルー色を用いて描画する	plt.barh(データ列x, データ列y, color='peru')
現在が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
文字列を部分文字列によって二つに分ける	s.partition(sub)
リストが空でない	len(aList) != 0
option: グラフの色をライトグレーに設定する	color = 'lightgray'
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
option: コーラルにグラフの色を設定する	color = 'coral'
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
浮動小数点数の余弦を求める	math.cos(x)
文字列を改行なしに表示する	print(value, end='')
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データ列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
変数がマイナス無限大に近づく時、数式の極限値を求める	sympy.limit(e, z, -oo)
棒グラフをサドルブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
四角マーカーを使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
ValueMapでデータフレームをまとめて変更する	df.replace(ValueMap)
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
エクセルデータをエクセルデータファイルから読み込む	pd.read_excel(filename)
データフレームを列によってグループ化して、グループ毎の標準偏差を求める	df.groupby(column).std()
データフレームを各列と列の組み合わせ毎にグループ分けして、最大値を求める	df.groupby([column, column2], as_index=False).max()
データフレームを各列と列の組み合わせ毎に集計して最大値を求める	df.groupby([column, column2], as_index=False).max()
リネンにヒストグラムの色を指定する	plt.hist(データ列, color='linen')
データフレームをTSVとしてJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
rgbの右三角マーカーをデータ列と配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
シルバー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
リストの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
文字列を部分文字列で二分する	s.partition(sub)
option: 改行なし	end = ''
オブジェクトのバイト長を知る	sys.getsizeof(obj)
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
データフレームで、列と列の重複をドロップする	df.drop_duplicates(subset=column)
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
2つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
スクリプトの名前	sys.argv[0]
表データを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
option: ミディアムブルーにグラフの色を設定する	color = 'mediumblue'
リストのn番目からn2番目の部分	aList[n:n2]
タン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
キーがマッピングに存在するか	key in aDict
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
文字列がひらがなかどうか調べる	('ぁ' <= ch <= 'ん')
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
プロットの全般的にカラーパレットを明るくする	sns.set(pallete='bright')
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
両端キューの先頭から要素を取り除く	deq.popleft()
新しいリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストとリストについての散布図に凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
棒グラフをミントクリーム色を使って描画する	plt.bar(データ列x, データ列y, color='mintcream')
フクシア色として線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
破壊的にデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
文字列は文字列より辞書順で前か確認する	s < s2
バイナリ書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='wb')
option: グラフの色をベージュに設定する	color = 'beige'
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームのリストカラムの中に含まれる文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
配列から重複を取り除く	set(iterable)
大文字を全て求める	string.ascii_uppercase
クラス分類の予測精度をヒートマップを用いて見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ヒストグラムの色をモカシンに指定する	plt.hist(データ列, color='moccasin')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
線形回帰モデルのバイアス	model.intercept_
データフレームのカラムの欠損値をモードに指定する	df[col].fillna(df[col].mode().iloc[0])
option: 文字列を区切りで使用する	sep = s
リストの最後からn番目以前の部分を取り出す	aList[:-n]
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームのリスト列のNaNをxで埋める	df[aList].fillna(x)
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
タイムスタンプデータの時間数	aDatetime.hour
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='gray')
データフレームのカラムの未入力値をメディアンに指定する	df[col].fillna(df[col].median())
タプルのセット	set(iterable)
イテラブルを累加する	itertools.accumulate(iterable)
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
オブジェクトは文字列クラスかどうか調べる	isinstance(obj, str)
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
データフレームの列の文字列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
点線にヒストグラムの線の種類をする	plt.hist(データ列, linestyle='dotted')
タイムスタンプデータにn日分、加算する	aDatetime + datetime.timedelta(days=n)
配列のデータ型	aArray.dtype()
前の行の値でデータフレームのリストカラムのNaNを置換する	df[aList].fillna(method='ffill')
Pandasで、データ列をフォーマットfmtを用いてタイムスタンプに変換する	pd.to_datetime(ds, format=fmt)
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
折れ線グラフの色をフクシアにセットする	plt.plot(データ列x, データ列y, color='fuchsia')
散布図をポイントマーカーを使ってプロットする	plt.plot(データ列x, データ列y, marker='.')
配列と配列について散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
ダイアモンドマーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
nが1、もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
データフレームの最後	df.tail()
本日の日付	datetime.date.today()
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
オプションで標準エラーを使う	file = sys.stderr
文字列の右端から部分文字列を除去する	s.rstrip(sub)
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
nがn2以上か調べる	n >= n2
数列とリストについての散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
option: グラフの色をライムにする	color = 'lime'
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
両端キューの末尾から要素を取り除く	deq.pop()
集合を更新不能なセットにする	frozenset(aSet)
スタックの順をn個分回転させる	deq.rotate(n)
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
実数に浮動小数点数を加算する	x + y
オブジェクトからプロパティを消す	delattr(obj, プロパティ名)
マルーンにヒストグラムの色をセットする	plt.hist(データ列, color='maroon')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
文字列を積極的に小文字にする	s.casefold()
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
データ列はどの程度、分散しているか見る	ds.var()
平均でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].mean())
カウンタからシーケンスを出現回数して引く	aCounter.subtract(iterable)
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
リスト内の要素が少なくとも一つ真	any(aList)
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
辞書のキーを要素に変更する	aDict[key] = element
ビン数nでデータ列を分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
カラーコードを用いて折れ線グラフの色をセットする	plt.plot(データ列x, データ列y, color='#800080')
ライトグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ベクトルの演算を行う	import numpy as np
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
線グラフの色をダークシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
リストをシアンでプリントする	print(f'\033[36m{value}\033[0m')
ダークサーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフの▼印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
xが1、もしくは2、もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
バイナリ書き込みモードを用いてファイルを開く]	open(filepath, mode='wb')
辞書を階層化する	collections.ChainMap(aDict)
option: ベージュ色を使う	color = 'beige'
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
ファイルをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
データフレームのカラムを散布図でグラフ化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
リストとリストについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をレベッカパープル色として描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
rgbのポイントマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
nがn2以下、または、n3以上かテストする	n <= n2 or n >= n3
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームを列で並べ直す	df.sort_values(by=column)
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
両端キューのstart番目からend番目の要素を使う	collections.deque(itertools.islice(deq, start, end))
線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategrey')
線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
前の値でデータ列の欠損値を埋める	ds.fillna(method='ffill')
ビン数を設定して柱状グラフを描く	plt.hist(データ列, bins=区関数)
列を1000の位で四捨五入する	ds.round(-3)
列を無限に繰り返す	itertools.cycle(iterable)
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
配列の行ごとの標準偏差	np.std(aArray, axis=1)
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
全要素を０で初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
ファイルを読み込み用に開いて]、fとする	f = open(filepath, mode='r')
イテラブルと列のデカルト積	itertools.product(iterable, iterable2)
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
オブジェクトは文字列	isinstance(obj, str)
折れ線グラフの△マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームを'A'列で昇順に並べて更新する	df.sort_values(by='A', ascending=True, inplace=True)
プロットの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
option: インディアンレッドにグラフの色を設定する	color = 'indianred'
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: グラフの色をブランチドアーモンドに変更する	color = 'blanchedalmond'
インディゴにヒストグラムの色を変更する	plt.hist(データ列, color='indigo')
マップにマップの項目を更新する	aDict.update(aDict2)
リストとリストについて散布図をプロットし、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフをビスク色を用いて描画する	plt.plot(データ列x, データ列y, color='bisque')
リストの四分位を可視化する	plt.boxplot(データ列)
anemptystring	''
year年month月の日付	datetime.date(year=year, month=month, day=1)
nがn2と等しいか判定する	n == n2
nとkの組合せ	math.comb(n, k)
ダークオレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='darkorange')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
タプルの項目名に対応した値	aDict.get(key)
線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
カラムを丸めて、整数にする	ds.round().astype(int)
n割るn2の切り上げ	(n + n2 - 1) // n2
実行時の標準出力の出力先がターミナルかどうか	sys.stdout.isatty()
リストとリストについての散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
データフレームのカラムの月を見る	df[col].dt.month
option: ペルーにフォントの色を設定する	color = 'peru'
実行結果を緑色で出力する	print(f'\033[32m{value}\033[0m')
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
option: ダークゴールデンロッドにグラフの色を指定する	color = 'darkgoldenrod'
データフレームの列がx未満のデータを抽出する	df[df[column] < x]
データフレームのリスト列の第一四分位数を計算する	df[aList].quantile(0.25)
行列の差を計算する	aArray - aArray2
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
実測値を重回帰モデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
ヒストグラムをライトイエロー色を用いて描画する	plt.hist(データ列, color='lightyellow')
辞書に項目名ワード引数で更新する	aDict.update(**kwargs)
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
カラムの欠損値を中央値で埋める	ds.fillna(ds.median())
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
文字列で区切って２つの数値をプリントする	print(value, value2, sep=s)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
実行結果をマゼンタ化する	f'\033[35m{value}\033[0m'
データ列を中央値でビン分割する	pd.qcut(ds, 2)
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
横棒グラフをライトグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgray')
ファイルが存在する	os.path.exists(filepath)
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
文字列が文字列より辞書順で後	s > s2
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
option: フォントの色をライトグリーンに設定する	color = 'lightgreen'
データフレームの中にある文字列と文字列の合計をカウントする	df.isin([value, value2]).sum()
ゴーストホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
数列と配列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
両端キューの長さを制限する	collections.deque(maxlen=n)
折れ線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
辞書順で２つの文字列を比較する	s < s2
文字列を大文字・小文字を無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
原点から(実数,y)の距離	math.hypot(x, y)
文字列を最後の部分文字列で分けたときの後半の文字列を使う	s.rpartition(sub)[-1]
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
predicateFuncが真とならないイテラブルの要素を求める	itertools.dropwhile(predicateFunc, iterable)
双方向キュー	collections.deque()
縦棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
縦棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o')
文字列をシンボル化して、パラメータにする	z = sympy.Symbol(s)
散布図の印を右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
ライトグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
Pandasでデータ列を日付データに変換する	pd.to_datetime(ds)
データフレームの最後n行を選択する	df.tail(n)
折れ線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
データフレームのカラムの記述統計量	df[col].describe()
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
リストをnから番号付けする	enumerate(aList, start=n)
マッピングを浅くコピーする	aDict.copy()
イテラブルの長さnの順列を求める	itertools.permutations(iterable, n)
散布図に三角印を使う	plt.scatter(データ列x, データ列y, marker='^')
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: グラフの色をスノーに指定する	color = 'snow'
オブジェクトが無限に繰り返す列を得る	itertools.repeat(element)
データフレームの中のカラムを四分位数ごとにビン分割する	pd.qcut(df[col], 4)
実数以下の最大の整数	math.floor(x)
option: 改行しない	end = ''
回帰分析をSDGでする	model = sklearn.linear_model.SGDRegressor()
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
タイムスタンプデータとタイムスタンプデータの時間差	aDatetime - aDatetime2
文字列を部分文字列で分割したときの後半の文字列を取り出す	s.partition(sub)[-1]
イテラブルを文字列リストに変換して、カンマで結合する	','.join(map(str, iterable))
リストの中の最大値	max(aList)
n2分のnを求める	n / n2
配列にはいくつ要素があるか調べる	aArray.size
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
カラムの欠損値を第二四分位数で埋める	ds.fillna(ds.median())
データフレームのリスト列の中に含まれる文字列の合計を求める	df[aList].isin([value]).sum()
整数を整数に変換する	int(x)
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
アルファベットが文字列内に含まれるかどうか調べる	any(c.isalpha() for c in s)
棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
nまでの奇整数列	list(range(1, n, 2))
日付時刻データが火曜日か	aDatetime.weekday() == 1
辞書のキーを要素に設定する	aDict[key] = element
データ列をn個にビンニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
黒い▼マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
option: グラフの色をマゼンタにセットする	color = 'magenta'
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームを列で集約して、それぞれのグループごとの最大値を算出する	df.groupby(column).max()
option: グラフの色をフォレストグリーンに変更する	color = 'forestgreen'
バリーウッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
ファイルをSJISを用いて開く]	open(filepath, encoding='shift_jis')
データフレームのリスト列の標本標準偏差を計算する	df[aList].std()
十六進数の文字列をバイナリにする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
最小値でデータ列の欠損値を埋める	ds.fillna(ds.min())
データフレームのリストカラムの欠損値を最大値で補う	df[aList].fillna(df[aList].max())
文字列内に小文字があるか調べる	any(c.islower() for c in s)
データフレームの列をNaNも加えてワンホット・ベクトルにする	pd.get_dummies(df[column], dummy_na=True)
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
Pandasで文字列をPandasの日付型にする	pd.to_datetime(s)
ビン数nでリストをビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
点線を使ってラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのリストカラムのNaNを中央値で埋める	df[aList].fillna(df[aList].median())
棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームの列の欠損値を50パーセンタイルに変更する	df[col].fillna(df[col].median())
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
キーが辞書に存在するか調べる	key in aDict
データフレームのカラムの中に存在する文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
データ列のヒストグラムを描画する	plt.hist(データ列)
リストとリストについての散布図に凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: グラフの色をホットピンクに設定する	color = 'hotpink'
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
n進数文字列を整数に変換する	int(s, n)
データフレームを列の値毎にグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
option: グラフの色をクリムゾンに指定する	color = 'crimson'
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
二つのデータフレームを横向きに一つにする	pd.merge(df, df2)
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
非空白が文字列中にあるかどうか調べる	any(not c.isspace() for c in s)
option: 大バツマーカーを描画する	marker = 'X'
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
散布図をダークグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
配列とリストの散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
黒い左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
最初の部分文字列で文字列を分けた時の残りの文字列	s.partition(sub)[-1]
SJISを用いてファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームの欠損値をxに設定する	df.fillna(x)
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: ８ビット整数型を使う	dtype = np.int8
数値の積分を計算する	sympy.integrate(e)
散布図に黒いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
option: ディープスカイブルーを使う	color = 'deepskyblue'
線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
option: ライトコーラルを使う	color = 'lightcoral'
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
折れ線グラフのマーカーを三角印にする	plt.plot(データ列x, データ列y, marker='^')
カテゴリで色分けして、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
綺麗なグラフを使う準備をする	import seaborn as sns
双方向キューの要素数	len(deq)
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
データフレームの重複を見る	df.duplicated()
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
空集合を使う	set()
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
散布図をコーンフラワーブルー色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
列をキーにして２つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
オブジェクトはリストクラスのインスタンスかどうか調べる	isinstance(obj, list)
配列と数列について散布図を描き、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
配列の行ごとの合計値を計算する	np.sum(aArray, axis=1)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
方程式の解	sympy.solve(e)
二つのオブジェクトは同一参照	obj is obj2
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
符号付きでnを長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
タプルの値を昇順にソートする	sorted(aTuple, reverse=True)
ヒストグラムをダークターコイズ色として描画する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの左三角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
色付きの破線でリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
ダークオーキッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
オブジェクトのバイトサイズを調べる	sys.getsizeof(obj)
辞書のキーとその項目を列挙する	aDict.items()
カラムを100の位で四捨五入する	ds.round(-2)
option: グラフの色を黄緑に設定する	color = 'chartreuse'
ファイルとfilenameを結合する	os.path.join(filepath, filename)
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
文字列を走査し、正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
データ列の値を正規表現patternでreplに置き換える	ds.replace(pattern, repl, regex=True)
折れ線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
実数に浮動小数点数を掛ける	x * y
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
データフレームのリスト列のNaNを最大値で埋める	df[aList].fillna(df[aList].max())
データフレームを'A'列でグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
デックの右に値を追加する	deq.append(element)
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
折れ線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
空白で末尾から文字列を区切る	s.rsplit()
データフレームのカラムの中の欠損値の合計をカウントする	df[col].isna().sum()
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
option: 読み込みモードに設定する	mode = 'r'
表データを'A'列と'B'列の値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
横棒グラフをミディアムスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
整数nを十六進文字列に変換する	hex(n)[2:]
数式の因数分解を行う	sympy.factor(e)
option: ナバホホワイト色を用いる	color = 'navajowhite'
赤い下三角マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='r')
シーケンスから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
散布図の星マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの未入力値をxに変更する	df.fillna(x)
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
リストの先頭	aList[0]
変数について数式の積分を計算する	sympy.integrate(e, z)
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
横棒グラフを濃いシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
棒グラフを濃いシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
代数計算を用いる	import sympy
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
データフレームの中の列をビン数nでビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのリストカラムの中にがあるか	df[aList].isin([value])
ロバスト推定を用いてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
数列を円グラフにする	plt.pie(データ列, startangle=90)
データフレームを各列と列の組み合わせ毎にグループ分けして、合計を求める	df.groupby([column, column2], as_index=False).sum()
双方向キューの先頭にシーケンスの各値を順に追加する	deq.extendleft(iterable)
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
データフレームのリストカラムの中に文字列と日付データがあるかどうか	df[aList].isin([value, value2])
部分文字列が文字列の開始位置からと終了位置までの間に含まれないか確認する	s.find(sub, start, end) == -1
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列が文字列より辞書順で前	s < s2
標準出力	sys.stdout
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
ファイルからバイナリストリームを開いて]fとする	f = open(filepath, mode='rb')
真	True
データフレームの指定された４列を選ぶ	df[[column, column2, column3, column4]]
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
区切りで文字列を区切り、、列挙する	s.split(sep)
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
列の各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
option: 青を使用する	color = 'blue'
折れ線グラフに凡例を付ける	plt.plot(データ列x, データ列y, label='ラベル')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
option: 三角マーカーを使う	marker = '^'
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
双方向キューに要素をenqueueする	deq.appendleft(element)
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
特異値分解としてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
xが1、もしくは2かどうか調べる	x == 1 or x == 2
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
明るくカラーパレットをグラフの描画で用いる	sns.set(pallete='bright')
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
棒グラフをゴールデンロッド色を使って描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
列の文字列長を列として見る	ds.str.len()
値を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
日付時刻データの時刻	aDatetime.time()
イテラブルと配列の散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
オブジェクトが名前付きタプルのインスタンスか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
タプルのn番目の	aTuple[n]
option: 色をロージーブラウンに指定する	color = 'rosybrown'
キーがマップに存在する	key not in aDict
折れ線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: グラフの色をミディアムスレートブルーにセットする	color = 'mediumslateblue'
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
プロットを画面用に変更する	sns.set(context='notebook')
option: カーキ色を用いる	color = 'khaki'
縦棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
リストを等量でビン数nとしてビニングする	pd.qcut(aList, n)
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
方程式として数式のパラメータの解を算出する	sympy.solve(e, z)
コマンドの第一引数を調べる	sys.argv[1]
散布図をスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slateblue')
ピアソンの積立相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
option: データ型を指定する	dtype = np.int32
パターンを事前にコンパイルする	re.compile(pattern)
折れ線グラフをスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='slateblue')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
二つのカウンタのいずれかに含まれるデータ	aCounter | aCounter2
オリベドラブ色としてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
JSONファイルの入力を辞書にする	json.load(fin)
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
nがリストのいづれかか確認する	n in aList
option: ミディアムブルーに色を指定する	color = 'mediumblue'
データフレームのn行まで抽出する	df[:n]
データフレームの列と列をドロップする	df.drop([column, column2], axis=1)
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgray')
分割数nでデータフレームの中の列をビンニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: カーキ色を使う	color = 'khaki'
データフレームの先頭n行	df.head(n)
データ列は正規分布からどの程度歪んでいるか確認する	ds.kurt()
データフレームの列を度数分布図にする	plt.hist(df[column])
二進対数を求める	math.log2(x)
タイムスタンプデータの時刻	aDatetime.time()
横棒グラフをオレンジ色を使って描画する	plt.barh(データ列x, データ列y, color='orange')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
紺色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
列でデータフレームを並べ直して更新する	df.sort_values(by=column, inplace=True)
グラフをいい感じに変更する	sns.set()
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
プロットの中のy軸にラベルを付ける	plt.ylabel('y軸ラベル')
散布図をシャルトリューズ色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
predicateFuncが真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
バイナリ書き込みモードでファイルを開く]	open(filepath, mode='wb')
色付きの点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームのリストカラムの欠損値を後の値に変更する	df[aList].fillna(method='bfill')
散布図に▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
カウンタ同士で積集合演算する	aCounter & aCounter2
カウンタのそれぞれの要素を、そのカウントだけ列挙する	aCounter.elements()
データフレームから重複したデータを削除する	df.drop_duplicates()
マッピングのキーとそのエントリをペアとして取り出す	aDict.items()
両端キューの中に値が含まれてるか確認する	element in deq
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
青い点線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
欠損値も加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
青緑色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
option: グラフの色をタンに設定する	color = 'tan'
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
カラムは正規分布からどの程度、尖っているか調べる	ds.skew()
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
プログラムを強制的に停止する	sys.exit()
赤い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
イテラブルとリストについて散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ハローワールドとプリントする	print('Hello World')
データ列は何月か確認する	ds.dt.month
option: ローングリーン色を使う	color = 'lawngreen'
リストをひとつ飛ばしで得る	aList[::2]
データフレームの列がxでない行をフィルタする	df[df[column] == x]
数字を全部見る	string.digits
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
小数点数の正弦の逆数を求める	math.asin(x)
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列x, データ列y, color='lightcoral')
option: スチールブルー色を使う	color = 'steelblue'
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームの列名を指定された列名リストに置き換える	df.columns = columns
データフレームの列と列の相関行列スピアマン相関係数で	df[[column, column2]].corr(method='spearman')
Pandasで、データ列の数値時刻から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
3つのデータフレームを縦方向にくっつける	pd.concat([df, df2, df3], axis=0)
PandasでUNIX秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
リストと数列について散布図を描画して、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
Pandasでデータフレームのカラムをdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
正規分布で乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
横棒グラフをミディアムオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データ列とイテラブルについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列はタイトルケースか	s.istitle()
リストのn番目に文字列を差し込む	aList.insert(n, element)
訓練データで分類モデルを学習する	model.fit(説明変数, 目的変数)
青い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
数式を部分分数として展開する	sympy.apart(e)
option: オリーブを使う	color = 'olive'
青い実線を使って線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
カウンタを低頻出な方からリストとして得る	aCounter.most_common()[::-1]
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
データフレームを各列と列の組み合わせ毎にグループ化して個数を求める	df.groupby([column, column2], as_index=False).count()
縦棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
日付時刻データが水曜日	aDatetime.weekday() == 2
option: 最初の列をインデックスに指定する	index_col = 0
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: 色をグリーンに変更する	color = 'green'
ファイルパスを追加できるように開く]	open(filepath, mode='a')
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
縦軸の目盛を表示しない	plt.yticks([])
列と列の重複を落とす	df.drop_duplicates(subset=[column, column2])
スピアマン相関係数でデータフレームのリストで指定されたカラムの相関行列	df[aList].corr(method='spearman')
マッピングの値に要素は含まれていないか調べる	element not in aDict.values()
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
オブジェクトのハッシュ値を計算する	hash(obj)
既存のファイルを追加できるように文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
数を十の位で丸める	round(x, -1)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
直後の値でデータフレームのリストカラムの未入力値を補う	df[aList].fillna(method='bfill')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームのリストカラムはどの程度、分散しているか確認する	df[aList].var()
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
等差数列から乱数を得る	random.randrange(start, end, step)
空白で文字列を分割する	s.split()
散布図をサドルブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
折れ線グラフのポイント印の色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
濃くカラーパレットをプロットの描画で使う	sns.set(pallete='deep')
データフレームのリストカラムの中に文字列とがあるかどうか調べる	df[aList].isin([value, value2])
整数nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
２つの値をカンマで区切って出力する	print(value, value2, sep=',')
データ列の推移を青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
リストの最初のn要素を取り除く	aList[n:]
データフレームのインデックスの名前をまとめて、nameからname2に変更する	df.rename(index={name: name2})
日付データは日付データより後ろ	aDate > aDate2
行列の行ごとの最大	np.max(aArray, axis=1)
非ASCII文字が文字列中に含まれるか調べる	any(not c.isascii() for c in s)
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
リストを赤色にする	f'\033[31m{value}\033[0m'
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
option: 右三角印を使う	marker = '>'
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
カウンタの積集合	aCounter & aCounter2
文字列がタプルに含まれる	element in aTuple
データ列の曜日名	ds.dt.weekday_name
データフレームを'A'列によって並べる	df.sort_values(by='A')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
列でデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True)
タプルの要素を逆順にする	aTuple[::-1]
データフレームから重複した行を残さず削除する	df.drop_duplicates(keep=False)
シエナ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
データフレームの列の一意な値の個数	df[col].nunique()
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
データフレームのリストカラムを正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
データフレームからカラムを1つだけ選択する	df[[column]]
データフレームを'A'列と'B'列によって昇順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームから1行だけ列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
サポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: オールドレース色を用いる	color = 'oldlace'
縦軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
丸マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
option: ライトコーラル色を使用する	color = 'lightcoral'
データフレームを各列毎に集約して、列の分散を求める	df.groupby(column)[column2].var()
データフレームを'A'列によって降順に破壊的に整列する	df.sort_values(by='A', ascending=False, inplace=True)
ユニークな値を要素とする配列を使う	np.unique(aArray)
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
option: グラフの種類を破線に指定する	linestyle = 'dashed'
ヒストグラムの色をサドルブラウンにセットする	plt.hist(データ列, color='saddlebrown')
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
マゼンタでリストを表示する	print(f'\033[35m{value}\033[0m')
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
集合をタプルに変換する	tuple(aSet)
ヒストグラムを点線に変更する	plt.hist(データ列, linestyle='dotted')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
ファイル名がテキストファイルかどうか調べる	filename.endswith('.txt')
データ列とリストについて散布図を描いて、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
リストと配列についての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ミディアムアクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumaquamarine')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームを'A'列によってグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
マッピングのキーとその値をペアとして取り出す	aDict.items()
option: コーンフラワーブルーを使用する	color = 'cornflowerblue'
折れ線グラフをモカシン色を使って描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフに四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
データフレームのリスト列の中の未入力値の数を数える	df[aList].isna().sum()
白いヒストグラムを描画する	plt.hist(データ列, color='w')
範囲から配列	np.linspace(最小値, 最大値, 要素数)
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: グラフの色をダークスレートブルーにセットする	color = 'darkslateblue'
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
nが1、もしくは2、もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
文字列の終了位置以前に部分文字列があるか	s.find(sub, 0, end) != -1
オレンジレッド色としてヒストグラムを描画する	plt.hist(データ列, color='orangered')
option: スチールブルーに色を設定する	color = 'steelblue'
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: 四角マーカーを使う	marker = 's'
方程式として数式の変数の解を算出する	sympy.solve(e, z)
データ列を正規表現patternでまとめてreplに置換する	ds.replace(pattern, repl, regex=True)
データフレームのカラムの中に存在する文字列の個数をカウントする	df[col].isin([value]).sum()
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
ふたつの集合の差を求める	aSet.difference(aSet2)
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
グラフで使うフォントを指定する	sns.set(font=フォント名)
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
補足の位置を(x,y)に設定する	plt.legend(loc=(x, y))
ニューラルネットで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
ファイルを開き]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
両端キューのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
オブジェクトは整数クラス	isinstance(obj, int)
データフレームの行をリセットする	df.reset_index()
文字列の末尾を使う	s[-1]
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
データフレームを列でまとめたグループを見る	df.groupby(column)
データフレームの未入力値を最頻値に指定する	df.fillna(df.mode().iloc[0])
option: グラフの色をスラグレーに変更する	color = 'slategray'
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
文字列の右端からタブを除去する	s.rstrip('\t')
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
リストのオブジェクトが最初に見つかるインデックス	aList.index(element)
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
線グラフを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
２つのデータフレームを列'A'と列'B'をキーとして内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
日付データの月数を使う	aDate.month
データフレームのカラムの中に文字列と文字列が存在するか	df[col].isin([value, value2])
xでデータフレームの未入力値を補う	df.fillna(x)
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
ファイルパスが存在しないかどうか調べる	not os.path.exists(filepath)
option: ライムグリーン色を使用する	color = 'limegreen'
二つの変数を順にプリントする	print(value, value2)
イエローグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
nが偶数か調べる	n % 2 == 0
表データを列でグループ化してそれぞれのグループの最大値を求める	df.groupby(column).max()
データフレームのカラムのNaNを直後の値に設定する	df[col].fillna(method='bfill')
option: スレートブルー色を使う	color = 'slateblue'
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
数列とリストについて散布図を描画し、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
配列を横棒プロットにする	plt.barh(ラベル列, データ列)
マッピングに別の辞書の項目を更新する	aDict.update(aDict2)
シスル色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategrey')
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
散布図を赤い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
グラフの縦軸を対数に変更する	plt.yscale('log')
option: グラフの色をダークオーキッドにする	color = 'darkorchid'
青い破線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
タイムスタンプデータは何日か知る	aDatetime.day
実数のk進対数を計算する	math.log(x, k)
データフレームの中のカラムを等量でn個にビン分割する	pd.qcut(df[col], n)
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
タプルをnから番号付けする	enumerate(aTuple, start=n)
データ列は何分か調べる	ds.dt.minute
散布図をインディアンレッド色として描画する	plt.scatter(データ列x, データ列y, color='indianred')
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
イテラブルをボックスチャートにする	plt.boxplot(データ列)
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
ファイルパスをBOM付きを用いて開く]	open(filepath, encoding='utf_8_sig')
数値を部分分数に展開する	sympy.apart(e)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
predicateFuncがTrueになるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
データ列の中に日付データがあるかどうか	ds.isin([value])
option: 右三角マーカーを描画する	marker = '>'
nがn2よりも小さい	n < n2
折れ線グラフの右三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
option: グラフの色をアクアマリンに変更する	color = 'aquamarine'
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
タプル内の要素は少なくとも一つ真	any(aTuple)
option: セパレータをタブにする	sep = '\t'
Pandasで、文字列をPandasの日付型に変換する	pd.to_datetime(s)
棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
文字列を部分文字列で分けたときの前半の文字列を取り出す	s.partition(sub)[0]
ファイルパスをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategray')
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
自然数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
プロット描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフをタン色を用いて描画する	plt.barh(データ列x, データ列y, color='tan')
データフレームを破壊的に列名リストによって昇順に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
FIXME	np.linalg.eig(aArray)
末尾から文字列を空白で区切る	s.rsplit()
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
リストの推移を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列を文字のリストにする	list(s)
折れ線グラフに△マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
データフレームを'A'列によってソートし、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
文字列を部分文字列で分けたときの最初の文字列	s.partition(sub)[0]
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データ列は何曜日か見る	ds.dt.weekday_name
棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
nの無限イテラブルを求める	itertools.repeat(n)
リストの中の一番大きい値	max(aList)
データフレームのリスト列の中に日付データが存在する	df[aList].isin([value])
option: ネイビーにグラフの色を設定する	color = 'navy'
データフレームのインデックスの一覧	df.index
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
散布図をミディアムバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
線形モデルの切片を使う	model.intercept_
ヒストグラムを破線でプロットする	plt.hist(データ列, linestyle='dashed')
データフレームのグループごとの標準偏差を計算する	df.groupby(column).std()
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
文字列のUNIX秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
データフレームのカラムのNaNを中央値に変更する	df[col].fillna(df[col].median())
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
nがn2未満、またはn3以上か	n < n2 or n >= n3
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
option: コーンズシルクに色を設定する	color = 'cornsilk'
八進文字列を整数にする	int(s, 8)
棒グラフをカデットブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cadetblue')
行列の転置行列を計算する	aArray.T
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
CSVファイルでデータフレームをJSONLファイルに書き込む	df.to_csv(filename)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
本日をタプルにする	datetime.datetime.today().timetuple()
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
ヒストグラムを珊瑚色を使って描画する	plt.hist(データ列, color='coral')
黄色でリストをプリントする	print(f'\033[33m{value}\033[0m')
文字列にシーケンスを変換して、カンマで連結する	','.join(map(str, iterable))
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームの欠損値を消す	df.dropna()
色付きの実線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
データフレームのリスト列の欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
JSONを使用する	import json
option: ピンクにグラフの色を設定する	color = 'pink'
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
二数の最小値を計算する	min(x, y)
部分文字列が文字列の開始位置先に含まれるか調べる	s.find(sub, start) != -1
n個の数値イテラブル	range(n)
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
データフレームのリストカラムの中にある文字列の合計をカウントする	df[aList].isin([value]).sum()
色付きの破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
xでデータフレームのNaNを補う	df.fillna(x)
オブジェクトはタプルクラスか	isinstance(obj, tuple)
集合から別の集合を全て除く	aSet.difference_update(aSet2)
データ列の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
文字列の開始位置から終了位置の範囲で部分文字列を数える	s.count(sub, start, end)
正規表現をコンパイルする	re.compile(pattern)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: ライトグリーン色を使用する	color = 'lightgreen'
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
カラムの欠損値をモードで補う	ds.fillna(ds.mode().iloc[0])
折れ線グラフを青い一点鎖線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
データフレームのリストカラムのメディアン	df[aList].median()
日付データをISO形式の文字列に変換する	aDate.isoformat()
デックの要素をn個分ローテンションする	deq.rotate(n)
文字列をカンマを用いて区切って、列挙する	s.split(',')
プロット中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
本日は何年か知る	datetime.datetime.today().year
線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
リストをn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
散布図をオリーブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olive')
データフレームのリスト列の欠損値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
変数を赤色にする	f'\033[31m{value}\033[0m'
双方向キューを要素を出す	deq.popleft()
数式を数値に変換する	float(e)
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
円グラフを時計回りにプロットする	plt.pie(データ列, startangle=90, counterclock=False)
簡単な説明の位置を(x,y)に変更する	plt.legend(loc=(x, y))
ひとつでもアルファベットが文字列内にあるかどうか調べる	any(c.isalpha() for c in s)
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
セットにイテラブルを追加更新する	aSet.update(iterable)
パターンで文字列を区切る	re.split(pattern, s)
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
散布図を淡い茶色色を使って描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームの列をヒストグラムでプロットする	plt.hist(df[column])
改行なしに二つの変数をプリントする	print(value, value2, end='')
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
'A'列によってによってデータフレームを降順に整列する	df.sort_values(by='A', ascending=False)
値を太字で表示する	print(f'\033[1m{value}\033[0m')
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストを白色でプリントする	print(f'\033[37m{value}\033[0m')
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
項目名が辞書に存在するか判定する	key not in aDict
リストの要素を取り除く	aList.clear()
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
タプルをnからナンバリングする	enumerate(aTuple, start=n)
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
現在が何秒か知る	datetime.date.today().second
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
変数が0に近づくときの数式の極限値を計算する	sympy.limit(e, z, 0)
二つのデータフレームを列'A'と列'B'をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='grey')
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
散布図の星印を青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: シアンにフォントの色を設定する	color = 'cyan'
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
配列のユニークな要素を計算する	np.unique(aArray)
クラス分類をアンサンブル学習として行う	sklearn.ensemble.VotingClassifier()
ダークスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
option: マーカーを菱形に変更する	marker = 'D'
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
ライム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
カウンタのユニークな項目をリストとして得る	list(aCounter)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
option: 色をインディアンレッドに変更する	color = 'indianred'
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
正規分布にしたがってデータ列の値が発生する累積確率を計算する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
リストとリストについて散布図を描画し、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの▲印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
データフレームのどの値が頻出か調べる	df.mode()
データ列の中にいくつ未入力値があるかカウントする	ds.isna().sum()
option: ハニーデューにグラフの色を設定する	color = 'honeydew'
三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='^')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
タイムスタンプデータを浮動小数点数にする	aDatetime.timestamp()
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
列をキーにして二つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
レモンシフォン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
８ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int8)
データフレームの列を百の位で丸める	df[col].round(-2)
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
データ列のNaNを平均値で補う	ds.fillna(ds.mean())
option: 最初の列を行に変更する	index_col = 0
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
多次元データを特異値分解としてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
折れ線グラフの色をパレットトルコイズにする	plt.plot(データ列x, データ列y, color='paleturquoise')
３つのデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
二つのオブジェクトが等しいか調べる	obj == obj2
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
折れ線グラフの▲印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列でフォーマットして本日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: ライトグレー色を使う	color = 'lightgray'
ヒストグラムの色を淡い茶色にする	plt.hist(データ列, color='tan')
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
データ列を1000の位で丸めて整数にする	ds.round(-3).astype(int)
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
nがn2か調べる	n == n2
データフレームのNaNを最小値で補う	df.fillna(df.min())
option: ペールグリーン色を使用する	color = 'palegreen'
文字列はタイトルケースか調べる	s.istitle()
ファイル名がテキストファイルか確認する	filename.endswith('.txt')
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
スカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームの列の値がxより大きいデータを抽出する	df[df[column] > x]
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
パールゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
グリッド線	plt.grid(linewidth=3.0)
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
プログラムの実行を強制的に止める	sys.exit()
option: 先頭の行をヘッダに指定する	header = 0
エクセルファイルファイルから全てのシートを読む	pd.read_excel(filename, sheet_name=None)
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
データフレームから重複した行を消す	df.drop_duplicates()
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
表データをグループ化し、各列に対し最小値を求める	df.groupby(column)[column2].min()
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
ダークゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkgoldenrod')
タプルの末尾のn要素を取り除く	aTuple[:-n]
線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
大文字・小文字を無視して文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
文字列からISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ハニーデュー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
ビスク色を用いてヒストグラムを描画する	plt.hist(データ列, color='bisque')
度数分布図を横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
両端キューのstart番目からendの部分要素を求める	collections.deque(itertools.islice(deq, start, end))
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データ列の中のNaNの数をカウントする	ds.isna().sum()
データフレームのリスト列の相関行列	df[aList].corr()
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
分類結果の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムを上限から下限の上限下限で描画する	plt.hist(データ列, range=(start, end))
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
データフレームの先頭n行	df.head(n)
青い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームのカラムの中に存在する文字列と文字列の合計を求める	df[col].isin([value, value2]).sum()
option: アクアマリン色を使う	color = 'aquamarine'
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
option: 真紅色を用いる	color = 'crimson'
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
タプルの各値を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
文字列をユニコード列に変換する	[ord(ch) for ch in s]
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
パラメータが無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
実数のn乗の実数剰余を算出する	pow(x, n, y)
配列とリストについて散布図を描画して三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの右三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
色付きの一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
オリーブ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをダークゴールデンロッド色を使って描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフに左三角印を加える	plt.plot(データ列x, データ列y, marker='<')
八進文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
option: ライトサーモンを用いる	color = 'lightsalmon'
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
ベクトルのユニークな要素とその個数を見る	u, counts = np.unique(aArray, return_counts=True)
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
黒い丸マーカーをリストとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図をダイアモンドマーカーを使って描画する	plt.scatter(データ列x, データ列y, marker='D')
プラットホームがLinuxか確認する	sys.platform.startswith('linux')
option: フローラルホワイトにフォントの色を変更する	color = 'floralwhite'
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
文字列内に空白があるか	any(c.isspace() for c in s)
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
文字の文字コードを使う	ord(ch)
作画のカラーテーマを指定する	sns.set(pallete=パレット名)
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
行列の転置行列	aArray.T
追加できるようにUTF8で既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf-8')
表データから重複する行を削除し、、入れ替える	df.drop_duplicates(inplace=True)
オブジェクトは整数か調べる	isinstance(obj, int)
数列を箱ひげ図で作図する	plt.boxplot(データ列)
オールドレースにヒストグラムの色を変更する	plt.hist(データ列, color='oldlace')
数列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: ブラックにグラフの色を指定する	color = 'black'
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
プラットホームがマックか調べる	sys.platform.startswith('darwin')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
こんにちは世界とプリントする	print('Hello World')
折れ線グラフの左三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
マッピングの値として要素は含まれているか判定する	element in aDict.values()
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
Pandasで、日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
option: 黄緑に色を設定する	color = 'chartreuse'
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
ファイル全体をリストにする	[s.strip() for s in f.readlines()]
列を用いてデータフレームをソートして、行を振り直す	df.sort_values(columns).reset_index(drop=True)
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
散布図の大バツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームを列名リストによってグループ化する	df.groupby(columns)
イテラブルとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
日付データが日付データより後ろか確認する	aDate > aDate2
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
横棒グラフをバイオレット色として描画する	plt.barh(データ列x, データ列y, color='violet')
列を文字列に変換してつなげる	''.join(map(str, iterable))
データフレームを各列と列の組み合わせ毎にグループ分けし、、最小値を求める	df.groupby([column, column2], as_index=False).min()
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
モデルを学習する	model.fit(説明変数, 目的変数)
データフレームのカラムが何年か見る	df[col].dt.year
第二引数で指定されたファイルの名前	sys.argv[1]
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
Pandasで、datetime64型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
nまでの奇整数リストを作る	list(range(1, n, 2))
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
y軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
日付データが木曜日か調べる	aDate.weekday() == 3
セットをイミュータブルなセットに変換する	frozenset(aSet)
リストとリストについての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
入力ストリームを全部読み込む	f.read()
タプルの末尾からn番目以前の部分を得る	aTuple[:-n]
整数nを八進表現にする	oct(n)
列をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
コロンで文字列を分割して、列挙する	s.split(':')
文字列が空白文字からなるか確認する	s.isspace()
からデータフレームを読み込む	pd.read_excel(filename)
マッピングのキーを列挙する	aDict.keys()
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
数列を箱ひげ図にする	plt.boxplot(データ列)
範囲を指定して整数乱数を得る	random.randint(最小値, 最大値)
二つの文字列が等しくないか	s != s2
データ列と数列の散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
TSVファイルとしてJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
横棒グラフをレモンシフォン色として描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
文字列の右側から空白を除く	s.rstrip()
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
文字列を部分文字列で区切る	s.split(sub)
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
データフレームを'A'列によって小さい順に破壊的に並べる	df.sort_values(by='A', ascending=True, inplace=True)
ISO8601の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
nがn2以下	n <= n2
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
データフレームのカラムは何年か見る	df[col].dt.year
JSONフォーマットの文字列をデータにする	json.loads(jsonString)
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
option: オリベドラブ色を使う	color = 'olivedrab'
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
nがn2と等しいか	n == n2
データフレームのリストカラムのpercentパーセンタイル	df[aList].quantile(percent/100)
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
縦棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフの色をオリベドラブにする	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
イテラブルとリストについて散布図を描いて、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
二つの文字列は大文字小文字を無視して同じか	s.casefold() == s2.casefold()
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
パパイヤウィップ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
２つの文字列は等しくないか調べる	s != s2
横棒グラフをダークバイオレット色として描画する	plt.barh(データ列x, データ列y, color='darkviolet')
option: 文字コードを文字列の示す文字コードに変更する	encoding = s
辞書のキーに対応した値	aDict.get(key)
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
表データをグループ化しそれぞれの列に対し合計を計算する	df.groupby(column)[column2].sum()
折れ線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategrey')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
変数がマイナス無限大に近づく時の数式の極限値を算出する	sympy.limit(e, z, -oo)
option: ビスク色を用いる	color = 'bisque'
本日が水曜日かどうか	datetime.datetime.today().weekday() == 2
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
グラフで使える色の一覧を使う	matplotlib.colors.cnames
赤いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
多次元データをt分布型確率的近傍埋め込み法を用いて淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームの列の名前一覧	df.columns
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
列名リストの値によってデータフレームをまとめた表	df.groupby(columns)
データフレームの未入力値を50パーセンタイルに指定する	df.fillna(df.median())
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
浮動小数点数の正弦	math.sin(x)
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒートマップを使って混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
辞書の内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
浮動小数点数がNaNか	math.isnan(x)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ファイルをBOM付きで追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
浮動小数点数が正かテストする	x > 0
縦棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
書き込みできるようにファイルパスを開く]	open(filepath, mode='w')
赤い一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
グリッド線	plt.grid(alpha=0.5)
折れ線グラフに菱形マーカーを加える	plt.plot(データ列x, データ列y, marker='D')
option: 色を赤に指定する	color = 'red'
マッピングをJSONフォーマットでファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
配列をn個に分割する	pd.cut(aArray, n)
折れ線グラフの色を耐火レンガにする	plt.plot(データ列x, データ列y, color='firebrick')
option: チョコレート色を使う	color = 'chocolate'
小数点数のハイパボリック・タンジェント	math.tanh(x)
線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
文字列の最初から空白を除去する	s.lstrip()
ユニコードに対応する文字を求める	chr(unicode)
データフレームのリストカラムの第一四分位数を計算する	df[aList].quantile(0.25)
文字列が小文字	s.islower()
option: フォントの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
データ列の分散	ds.var()
浮動小数点数の双曲線正接を求める	math.tanh(x)
グレーにヒストグラムの色を指定する	plt.hist(データ列, color='gray')
やわらかい青にヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
実行を正しく終了する	sys.exit(0)
ライトイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightyellow')
配列の要素ごとの積	np.multiply(aArray, aArray2)
２つの値をスラッシュで区切ってプリントする	print(value, value2, sep='/')
行列の行ごとの最大値	np.max(aArray, axis=1)
データフレームを列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
計数器を列から新規生成する	collections.Counter(iterable)
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
パターンによって文字列を置き換える	re.sub(pattern, newsub, s)
文字列を新しい文字列で全て置き換える	s.replace(sub, newsub)
EUCを用いてファイルパスをオープンする]	open(filepath, encoding='euc_jp')
目的変数を分類モデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
配列とリストについて散布図を描き、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
トマト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
n割るn2を切り上げる	(n + n2 - 1) // n2
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
変数を紫色で表示する	print(f'\033[35m{value}\033[0m')
リストを配列に変換する	np.array(iterable)
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
カテゴリ別で色分けして、データフレームをにバイオリン図として図示する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
正規表現に文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
改行で区切って二つの文字列を表示する	print(value, value2, sep='\n')
単回帰モデル訓練データとしてを学習する	model.fit(説明変数, 目的変数)
散布図をダークスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
文字列をセパレータを用いて区切って、列挙する	s.split(sep)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
option: タン色を使用する	color = 'tan'
データフレームを二つの列の値でグループ化し基本統計量を求める	df.groupby(['A', 'B']).describe()
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
option: 先頭のカラムをインデックスに設定する	index_col = 0
predicateFuncがtrueになるイテラブルの要素を得る	itertools.takewhile(predicateFunc, iterable)
ミディアムスプリンググリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
両端キュー中の値のインデックスを使う	deq.index(element)
データフレームの列の中に文字列が含まれるかどうか調べる	df[col].isin([value])
シルバー色でヒストグラムを描画する	plt.hist(データ列, color='silver')
行列の行ごとの平均	np.mean(aArray, axis=1)
縦棒グラフをゴールド色を用いて描画する	plt.bar(データ列x, データ列y, color='gold')
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
データフレームのリスト列を小数点以下n桁で四捨五入する	df[aList].round(n)
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
xが一桁の正の整数かどうか	0 <= x <= 9
辞書の値の一覧	aDict.values()
線形回帰モデルのバイアスを使う	model.intercept_
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
双方向キューの先頭に文字列をつけ加える	deq.appendleft(element)
列の各要素を双方向キューの末尾に追加する	deq.extend(iterable)
カデットブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
辞書にキーが存在していない場合、要素を追加する	aDict.setdefault(key, element)
ゴールド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
ファイルを文字コードtextを用いてオープンする]	open(filepath, encoding=text)
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: 印を左三角に変更する	marker = '<'
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
重複した行のみを取り出す	df[df.duplicated(keep=False)]
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
ファイルパスをEUCとして書き込みできるように開く]	open(filepath, mode='w', encoding='euc_jp')
タプル内の要素が少なくともひとつ真	any(aTuple)
標準入力から1文字だけ読む	sys.stdin.read(1)
データフレームを列名リストによってで破壊的にソートする	df.sort_values(by=column, inplace=True)
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
本日の日付を使う	datetime.date.today()
t分布型確率的近傍埋め込み法で多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームのリストカラムの中にある文字列と日付データの数を数える	df[aList].isin([value, value2]).sum()
ベクトルの列ごとの合計	np.sum(aArray, axis=0)
散布図のポイントマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
スクリプトの名前を調べる	sys.argv[0]
データフレームの未入力値がある箇所に色を付ける	df.style.highlight_null()
option: タンに色を設定する	color = 'tan'
折れ線グラフの丸マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフをミディアムターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
option: マゼンタに色を指定する	color = 'magenta'
文字列は漢字	('\u4E00' <= ch <= '\u9FD0')
ブルーバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
確率的勾配降下を用いて回帰分析をする	model = sklearn.linear_model.SGDRegressor()
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
データフレームのNaNを平均に設定する	df.fillna(df.mean())
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
日付時刻データは何曜日か知る	aDatetime.weekday()
乱数シードを初期化する	random.seed()
要素がセットのメンバーでないかどうか	element not in aSet
一点鎖線として配列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
追加モードを使ってファイルをオープンする]	open(filepath, mode='a')
グラフ中の(x,y)の位置に簡単な説明を表示する	plt.legend(loc=(x, y))
データフレームのリスト列の尖度	df[aList].skew()
option: フォントの色をダークグレーに指定する	color = 'darkgrey'
データフレームから1行だけカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
カウンタの最頻出な要素	aCounter.most_common()[0]
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームの重複していない行だけを取り出す	df[not df.duplicated(keep=False)]
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
データフレームを表示するとき、小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
全要素を初期値で初期化した行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
最大長のある両端キュー	collections.deque(maxlen=n)
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
オールドレース色として散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
配列と配列についての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
配列をn個にビン分割する	pd.cut(aArray, n)
数列と配列の散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
実行結果をシアンでプリントする	print(f'\033[36m{value}\033[0m')
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームが重複しているか調べる	df.duplicated()
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
データフレームのカラムが文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
貝殻色として線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
配列の合計	np.sum(aArray)
原点から点までの距離を求める	math.hypot(x, y)
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
データフレームの中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームを2つの列を用いて並べ直す	df.sort_values(by=['A', 'B'])
データフレームのカラムの中に文字列と文字列があるかどうか確認する	df[col].isin([value, value2])
SDGを用いて回帰分析をする	model = sklearn.linear_model.SGDRegressor()
データフレームのリストカラムの中にある文字列と文字列の数を数える	df[aList].isin([value, value2]).sum()
高頻出方からカウンタを列挙する	aCounter.most_common()
エラーなく集合から要素を取り除く	aSet.discard(element)
二変数の最も小さい値	min(x, y)
マッピングの値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
横棒グラフを淡いピンク色色を用いて描画する	plt.barh(データ列x, データ列y, color='lightpink')
Pandasでデータフレームのcollを日付データにする	pd.to_datetime(df[col])
nはタプルのどれか	n in aTuple
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
浮動小数点数の絶対値	math.fabs(x)
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
ヒストグラムの色を暗い赤にセットする	plt.hist(データ列, color='darkred')
行列をフラットにする	aArray.flatten()
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
ファイルからベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
option: フォントの色をマゼンタに設定する	color = 'magenta'
タブ区切りのファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
日付時刻データが何曜日か知る	aDatetime.weekday()
ボックスチャートを二つ並べてプロットする	plt.boxplot([データ列, データ列])
文字列はリストに含まれないか	element not in aList
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのカラムの中央値	df[col].median()
ライトサーモン色としてヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
３つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
パープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
rgbのバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
全要素を０で初期化した3二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
パターンを前もってASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
ヒストグラムをドジャーブルー色を用いて描画する	plt.hist(データ列, color='dodgerblue')
文字列を二分する	s.partition(sep)
散布図をライトイエロー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
リストの先頭を取り除く	aList[1:]
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
列と列の重複を削除する	df.drop_duplicates(subset=column)
文字列中に部分文字列がいくつか含まれるかカウントする	s.count(sub)
データフレームから列を４つのみ選択する	df[[column, column2, column3, column4]]
フォレストグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データ列とイテラブルについて散布図を描画して文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
全要素を0で初期化した配列を作成する	np.zeros(要素数)
データフレームを関数の値によってグループ化し要約統計量を求める	df.groupby(関数).describe()
分割数nを使ってデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ヒストグラムのスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
option: グラフの色をコーンフラワーブルーに変更する	color = 'cornflowerblue'
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
option: グラフの色をシーグリーンに指定する	color = 'seagreen'
option: グラフの色を青緑に設定する	color = 'teal'
モデルを当てはめる	model.fit(説明変数, 目的変数)
丸印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
2つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
データフレームの相関行列	df.corr()
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ピンク色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
データフレームのリストで指定した列の相関行列	df[aList].corr()
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
マッピングを浅く複製する	dict(aDict)
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
JSONLファイルにBOMを付けてデータフレームを書き込む	df.to_csv(filename, encoding='utf_8_sig')
タプル内の要素は全て真	all(aTuple)
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
黒い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
0で全要素を初期化した配列	np.zeros(要素数)
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
二つの文字列を順にプリントする	print(value, value2)
折れ線グラフの▽マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図にrgbの△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
本日の日数を見る	datetime.datetime.today().day
nとn2が等しい	n == n2
部分文字列で文字列を分けたときの最初の文字列	s.partition(sub)[0]
文字列は印字できる	s.isprintable()
リストを黒色にする	f'\033[30m{value}\033[0m'
両端キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
モデルの正確さを算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
nが正の整数	n > 0
線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategrey')
辞書から最後の値を取り出す	aDict.popitem()
オーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
数列とリストについて散布図を描いて、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
外れ値に強い単クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
辞書からキーの値か、もしくは要素を参照する	aDict.get(key, element)
ヒストグラムの色をダークレッドに変更する	plt.hist(データ列, color='darkred')
カウンタの項目のカウント	aCounter[element]
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
option: ゲインズボロ色を使う	color = 'gainsboro'
option: ヘッダをnamesに指定する	header = names
配列とリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図を赤い大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
option: ダークカーキを使う	color = 'darkkhaki'
折れ線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームのリストカラムのどの値が頻出か確認する	df[aList].mode()
シーケンスを累加する	itertools.accumulate(iterable)
option: どの列もインデックスに設定しない	index_col = None
異なる列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームのカラムの各データ値の出現数	df[col].value_counts()
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
option: 符号なし８ビット整数型を使う	dtype = np.uint8
列によってデータフレームをソートし、NaNを先頭にする	df.sort_values(by=column, na_position='first')
横棒グラフを濃い青色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
色付きの一点鎖線を用いてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
カラムの中にいくつ未入力値があるか求める	ds.isna().sum()
ファイルから読み込みストリームを開き]fとする	f = open(filepath, mode='r')
タプルのキーとその値をペアとして取り出す	aDict.items()
データフレームのリスト列の未入力値を中央値で埋める	df[aList].fillna(df[aList].median())
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
option: フォントの色をミディアムターコイズに指定する	color = 'mediumturquoise'
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
整数nがリストのどれかか確認する	n in aList
データフレームのリストカラムのNaNを最大値に設定する	df[aList].fillna(df[aList].max())
既存のファイルをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
データフレームのデータ型リスト	df.dtypes
グレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
データ列はどれだけ、分散しているか見る	ds.var()
ミントクリーム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
数列とリストの散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
集合の補集合	aSet.difference(aSet2)
散布図を赤い大バツマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヘッダを付けずにJSONLファイルにデータフレームを書き込む	df.to_csv(filename, header=None)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
nとn2の論理和を求める	n | n2
カウンタの最も頻出な項目	aCounter.most_common()[0]
本日が土曜日か	datetime.datetime.today().weekday() == 5
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
ふたつの集合に共通する要素からなる集合を算出する	aSet.intersection(aSet2)
数を３乗する	x ** 3
既にロードされたモジュールを列挙する	sys.modules
パールゴールデンロッドにヒストグラムの色を変更する	plt.hist(データ列, color='palegoldenrod')
最大値・最小値の範囲で一様な乱数を計算する	random.uniform(最小値, 最大値)
各列毎にデータフレームをグループ化して、列の個数を計算する	df.groupby(column)[column2].count()
配列の要素ごとに加算する	aArray + aArray2
散布図に丸印を加える	plt.scatter(データ列x, データ列y, marker='o')
option: ターコイズ色を使う	color = 'turquoise'
データフレームを複数の列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
逆順のスタック	reversed(deq)
ファイルにxを文字列に変換して書き込む	f.write(str(x))
イテラブルとリストについて散布図を描画し、、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
十六進数文字列を整数に変換する	int(s, 16)
自然対数の底	math.e
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
リッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
今日の曜日を使う	datetime.datetime.today().weekday()
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
⊆	aSet.issubset(aSet2)
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
データフレームを複数の列を用いてで破壊的に並べ直す	df.sort_values(by=column, inplace=True)
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
データフレームを列でグループ化して列の要約統計量を求める	df.groupby(column).describe()[column2]
データフレーム全体を行で整列する	df.sort_index()
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
黒い星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの列一覧	df.info()
option: 色をインディゴに設定する	color = 'indigo'
ライトスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
データフレームの中にいくつ日付データが含まれるか求める	df.isin([value]).sum()
線形回帰モデル教師データでを学習する	model.fit(説明変数, 目的変数)
破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
数列の移り変わりを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
グラフの横軸を対数に変更する	plt.xscale('log')
option: フォントの色をパールバイオレットレッドに設定する	color = 'palevioletred'
フクシア色を用いてヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
1行分改行なしに標準入力から読む	sys.stdin.readline().rstrip()
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
縦棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
ケンドールとしてデータフレームの相関行列を求める	df.corr(method='kendall')
nが配列のどれか	n in aArray
セットをリストにする	list(aSet)
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
行列の次元数を使う	aArray.ndim
ヒストグラムをブランチドアーモンド色を用いて描画する	plt.hist(データ列, color='blanchedalmond')
オブジェクトが浮動小数点数	isinstance(obj, float)
文字列内にひとつでも数字が含まれるかどうか調べる	any(c.isdigit() for c in s)
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
行列の行ごとの最大値を計算する	np.max(aArray, axis=1)
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
リストの各値を関数に適用した結果で並べる	sorted(aList, key=func)
後の行の値でデータフレームの列の欠損値を埋める	df[col].fillna(method='bfill')
双方向キューのstart番目からend番目の部分値	collections.deque(itertools.islice(deq, start, end))
列の重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
配列とデータ列についての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
回帰分析をアンサンブル学習として行う	sklearn.ensemble.VotingRegressor()
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
ヒストグラムを点線でプロットする	plt.hist(データ列, linestyle='dotted')
縦棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
散布図をrgbの丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
キーがタプル上で定義済みかどうか	key in aDict
中央値でデータフレームのリスト列の欠損値を補う	df[aList].fillna(df[aList].median())
フォレストグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームの欠損値を直前の値に減らす	df.fillna(method='ffill')
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
縦軸の目盛を非表示にする	plt.yticks([])
三つ並べてリストをヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
縦棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
デックをポップする	deq.pop()
変数をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
データ列の出現頻度を可視化する	plt.hist(データ列)
イテラブルと配列の散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
浮動小数点数の余弦を計算する	math.cos(x)
回帰モデルを作成する	model.fit(説明変数, 目的変数)
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ダークゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
二つのデータフレームを横方向に一つにする	pd.merge(df, df2)
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
option: ライトイエローを使う	color = 'lightyellow'
リストのオブジェクトが最初に見つかるインデックスを探す	aList.index(element)
文字列が全て識別子名か判定する	s.isidentifier()
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
ヒストグラムの色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
データフレームで何行、重複するか見る	df.duplicated().sum()
データフレームを関数の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(関数)]
option: ロイヤルブルー色を使う	color = 'royalblue'
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
リストのオブジェクトが最初に見つかるインデックスを求める	aList.index(element)
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
データフレームに重複があるか確認する	df.duplicated()
オプションで出力先を標準出力に変更する	file = sys.stdout
集合からエラーなく要素を取り除く	aSet.discard(element)
文字列の両端から部分文字列を取り除く	s.strip(sub)
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
数列の散布図を描く	plt.scatter(データ列x, データ列y)
option: SJISを使用する	encoding = 'shift_jis'
リストの中の最も小さい値を算出する	min(aList)
八進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
行列を変形する	aArray.reshape(行数, 列数)
データフレームを列によってグループ化し、、それぞれのグループごとの合計を算出する	df.groupby(column).sum()
n2がn以上、かつ、n3以下かテストする	n <= n2 and n2 <= n3
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
option: スラグレーを使う	color = 'slategrey'
ゼロ埋めされた論理値型のベクトルを初期化する	np.zeros(要素数, dtype=np.int32)
集合から別の集合の要素を除去する	aSet.difference_update(aSet2)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
現在の分を使う	datetime.date.today().minute
二次元リストをフラット化する	sum(aList)
全要素を０で初期化した三2ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
タプルが少なくともひとつ真か	any(aTuple)
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
option: パープルに色を設定する	color = 'purple'
データフレームのグループごとの分散	df.groupby(column).var()
リストとリストについて散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: グラフの色をデピンクに設定する	color = 'deeppink'
縦棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
オブジェクトは辞書クラスのインスタンス	isinstance(obj, dict)
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
グラフを描画する	import matplotlib.pyplot as plt
カウンタ間で和集合	aCounter | aCounter2
整数乱数のベクトル	np.random.randint(開始値, 終了値, N)
カウンタからゼロカウントを削除する	+aCounter
TSVファイルを読む	pd.read_csv(filename, sep='\t')
ケンドール相関係数でデータフレームのリストで指定されたカラムの相関行列	df[aList].corr(method='kendall')
データフレームを列でソートして、上位n件を取り出す	df.sort_values(columns).head(n)
バリーウッド色としてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
n進数文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
集合を空集合にする	aSet.clear()
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
赤い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
列の各値が何回出現するか見る	ds.value_counts()
表データを各列毎にグループ化し、文字列というグループの個数を求める	df.groupby(column).size()[s]
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
数列とリストの散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
表データの欠損値が存在する行を削除する	df.dropna()
データフレームから重複した行をドロップして、入れ替える	df.drop_duplicates(inplace=True)
データフレームのリストカラムの標本標準偏差	df[aList].std()
option: ダークマゼンタを使う	color = 'darkmagenta'
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
カウンタの項目を、その出現回数だけリストとして得る	aCounter.elements()
データフレームを列を用いて小さい順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
２つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
option: グラフの色をクリムゾンにセットする	color = 'crimson'
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
線グラフを濃い青色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
集合にタプルの要素を全て追加する	aSet.update(iterable)
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
エクセルファイルファイルでJSONLファイルにデータフレームを保存する	df.to_excel(filename)
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
データフレームのカラムが何月か見る	df[col].dt.month
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
二つの文字列をスラッシュで区切って表示する	print(value, value2, sep='/')
標準出力の出力先がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
何回まで再帰ができるかを調べる	sys.getrecursionlimit()
データ列のpercent分位数を求める	ds.quantile(percent/100)
リストをビン数nでビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
option: ピンクに色を設定する	color = 'pink'
ふたつの集合のユニオンを求める	aSet.union(aSet2)
データフレームのカラムの平均	df[col].mean()
折れ線グラフのクロス印を黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
辞書順で文字列が文字列より前か判定する	s < s2
2つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
オブジェクトのプロパティの値を求める	getattr(obj, プロパティ名)
暗くカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
リストをn個に分割する	pd.cut(aList, n)
option: グラフの色をシスルに設定する	color = 'thistle'
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
option: グラフの色をホワイトに設定する	color = 'white'
八進数文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームの列のNaNを後の行の値に設定する	df[col].fillna(method='bfill')
辞書の値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
option: マーカーを上三角に変更する	marker = '^'
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを各列と列の組み合わせ毎に集約し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
文字列の接頭辞は部分文字列か調べる	s.startswith(sub)
option: 線の種類を実線に設定する	linestyle = 'solid'
勾配ブースティングを使って回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
箱髭図として配列を描画する	plt.boxplot(データ列)
配列の相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
option: ライトブルーに色をセットする	color = 'lightblue'
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
文字列にイテラブルを変換して、空白で連結する	' '.join(map(str, iterable))
ヒストグラムの色をアクアに変更する	plt.hist(データ列, color='aqua')
データフレームを'A'列によってソートして更新する	df.sort_values(by='A', inplace=True)
整数個からk個取り出したときの並べ方の総数	math.perm(n, k)
リストとリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
実数が負の数か調べる	x < 0
タプルの最後	aTuple[-1]
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
ファイルをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: 星マーカーを使用する	marker = '*'
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームの中にと文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
グラフからグリッド線を消す	plt.grid(False)
複数の列によって破壊的に昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
Pandasで、データフレームのcollのUNIX時間から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
エポック秒をタイムスタンプにする	datetime.datetime.fromtimestamp(timestamp)
折れ線グラフを青緑色を用いて描画する	plt.plot(データ列x, データ列y, color='teal')
横棒グラフをレベッカパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: グラフの色をビスクにセットする	color = 'bisque'
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
マッピングをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
数列を縦棒グラフにする	plt.bar(ラベル列, データ列)
欠損値を含めてデータフレームを列の値で集約する	df.groupby(column, dropna=False)
線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgrey')
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
キーがマッピングに存在する	key not in aDict
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
線グラフを青い破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: グラフの色をシアンに設定する	color = 'cyan'
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
option: グラフの色を紺に設定する	color = 'darkblue'
データ列の中に存在するの数を数える	ds.isin([value]).sum()
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
データフレームを列で破壊的に昇順に並べる	df.sort_values(by=column, ascending=True, inplace=True)
表のシェイプを確認する	df.shape
タプル中の要素が全て真か調べる	all(aTuple)
Pandasでデータ列のUNIX秒からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
option: シルバー色を使う	color = 'silver'
nが1、もしくは2か調べる	n == 1 or n == 2
スタックの長さを制限する	collections.deque(maxlen=n)
線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
ユニコードに対応する文字	chr(unicode)
文字列を最後の部分文字列で分割したときの最初の文字列	s.rpartition(sub)[0]
ファイル名の区切り記号を使用する	os.sep
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
Pandasで、データ列をPandasの日付型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
真上位集合	aSet > aSet2
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
変数がマイナス無限大に近づくとき、数値の極限値を求める	sympy.limit(e, z, -oo)
リストと配列について散布図を描画して、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
パラメータが0に近づく際、数値の極限値を求める	sympy.limit(e, z, 0)
option: ライムグリーン色を使う	color = 'limegreen'
浮動小数点数に浮動小数点数を掛ける	x * y
列を丸めて整数型にする	ds.round().astype(int)
ひとつでも空白が文字列内に含まれるか	any(c.isspace() for c in s)
辞書の項目数	len(aDict)
バイトオーダを使う	sys.byteorder
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
ネイビー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
日付データが水曜日かどうか	aDate.weekday() == 2
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
散布図をデピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='deeppink')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
リストとリストの散布図に三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
option: 左三角マーカーを使う	marker = '<'
二つのデータフレームを列をキーにして左ジョインする	pd.merge(df, df2, on=column, how='left')
実数は非数	math.isnan(x)
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
要素はマッピングの値として含まれているか調べる	element in aDict.values()
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
option: ブラウンを使用する	color = 'brown'
オブジェクトにプロパティが存在するかどうか調べる	hasattr(obj, プロパティ名)
縦棒グラフを描画して、棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
八進数文字列を整数に変換する	int(s, 8)
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
ファイルから1バイト、読み込む	f.read(1)
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフを描く	plt.plot(データ列x, データ列y)
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
nからn2までのstepごとによるスライス	slice(n, n2, step)
縦棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
モカシン色としてヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データ列の各値の出現数	ds.value_counts()
散布図に菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
データフレームをカラムにグループ化し、、個数を求める	df.groupby(column).count()
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
リストをタプルに変換する	tuple(aList)
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
データフレームの値を正規表現patternでまとめてreplに置換する	df.replace(pattern, repl, regex=True)
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
配列を等量でビン数nを用いてビン分割する	pd.qcut(aArray, n)
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
赤い一点鎖線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
リストと配列についての散布図に黒い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームを複数の列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームのリスト列の欠損値を平均に変更する	df[aList].fillna(df[aList].mean())
Pandasで文字列をフォーマットfmtでタイムスタンプにする	pd.to_datetime(s, format=fmt)
漢字が文字列中に含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列が英数字かどうか	s.isalnum()
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
ヒストグラムをサドルブラウン色を用いて描画する	plt.hist(データ列, color='saddlebrown')
データ列のNaNをxに設定する	ds.fillna(x)
データ列の度数分布図を描画する	plt.hist(データ列)
マッピングのキー一覧	list(aDict)
リストをカンマ区切りで出力する	print(*aList, sep=',')
ヒストグラムの色をピーチパフに指定する	plt.hist(データ列, color='peachpuff')
イテラブルと列を連結する	itertools.chain(iterable, iterable2)
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
エクセルファイルファイルを読み込む	pd.read_excel(filename)
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
タプルの中の最大値	max(aTuple)
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
散布図の右三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの列がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
非数値データをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
日付データは日付データより早いかどうか調べる	aDate < aDate2
option: 色をゴーストホワイトに設定する	color = 'ghostwhite'
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
0から始まるn個の整数リストを作る	list(range(n))
値が双方向キューの中に含まれてる	element in deq
スノー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: クロス印を描画する	marker = 'x'
option: マーカーを右三角に変える	marker = '>'
n2がnより大きく、かつ、n3未満か	n < n2 and n2 < n3
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
eの実数乗	math.exp(x)
実行時の標準出力の出力先がターミナルか確認する	sys.stdout.isatty()
集合が空でないか	len(aSet) != 0
文字列が全て英数字か調べる	s.isalnum()
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
タプルの値を並べる	sorted(aTuple)
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ヒストグラムを白色として描画する	plt.hist(データ列, color='white')
線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
日付時刻データが水曜日か	aDatetime.weekday() == 2
配列と配列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
rgbの▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
数式を浮動小数点数に変換する	float(e)
組が全て真	all(aTuple)
プロットの使途をポスターに変更する	sns.set(context='poster')
データフレームを1000の位で四捨五入する	df.round(-3)
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
キーが辞書上で未定義かどうか確認する	key not in aDict
日付時刻データの時間数を使う	aDatetime.hour
データフレームの列を千の位で丸める	df[col].round(-3)
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
option: タブをセパレータで使う	sep = '\t'
実数を切り下げて整数に変換する	math.floor(x)
ファイルを文字列の示すエンコーディングで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
データフレームの中の列を四分位数ごとにビニングする	pd.qcut(df[col], 4)
y座標の目盛を表示しない	plt.yticks([])
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: フォントの色をレベッカパープルに設定する	color = 'rebeccapurple'
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
option: ゴールデンロッドを用いる	color = 'goldenrod'
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
画面にグラフをセットする	sns.set(context='notebook')
縦棒グラフを描画してバーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
セットから要素を全て除く	aSet.clear()
データフレームを小数点以下3桁までJSONLファイルに書き込む	df.to_csv(filename, float_format='%.3f')
文字列が平仮名か	('ぁ' <= ch <= 'ん')
タイムスタンプデータにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
エクセルファイルファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データフレームのリスト列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
文字列を白色化する	f'\033[37m{value}\033[0m'
縦棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: 色をアンティークホワイトに変更する	color = 'antiquewhite'
部分文字列が文字列の開始位置と終了位置の間に含まれるか	s.find(sub, start, end) != -1
配列のデータ型を求める	aArray.dtype()
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
カテゴリでグループ化してデータフレームのカーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのインデックスの一覧を求める	df.index
散布図に青い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
カウンタからイテラブルをカウントして減らす	aCounter.subtract(iterable)
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
プロットの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
グラフの描画で明るくパレットを用いる	sns.set(pallete='bright')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をミディアムオーキッドにする	plt.hist(データ列, color='mediumorchid')
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
ブースティングとしてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
option: マーカーの色をライムにする	markerfacecolor = 'lime'
日付時刻データをエポック秒にする	aDatetime.timestamp()
データフレームの列を1000の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
横棒グラフをスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='springgreen')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
棒グラフをダークレッド色を使って描画する	plt.bar(データ列x, データ列y, color='darkred')
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
タプルの値を逆順にする	aTuple[::-1]
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
データ列の中に文字列と文字列がいくつあるか求める	ds.isin([value, value2]).sum()
ダークオーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkorchid')
散布図をカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='khaki')
ダークブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データを最大値と最小値を用いて正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
イテラブルと配列について散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
整数を十六進表記の文字列に変換する	x.hex()
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
リスト中のオブジェクトが最初に見つかるインデックス	aList.index(element)
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
シスル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
集合のイミュータブル版	frozenset(aSet)
データフレームの第一四分位数	df.quantile(0.25)
データ列を閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
列の歪度	ds.kurt()
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
散布図を濃い青色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
実数の余弦の逆数	math.acos(x)
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
符号なしで整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
グラフのx座標に軸ラベルを付ける	plt.xlabel('x軸ラベル')
データ列の欠損値を後の行の値で補う	ds.fillna(method='bfill')
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
オブジェクトが属性を持つか調べる	hasattr(obj, プロパティ名)
赤い△マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
リストとリストの散布図にrgbの▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
横棒グラフをラベンダーブラッシュ色を使って描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
ゼロ埋めされた８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int8)
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
文字列のプレフィックスは部分文字列かどうか	s.startswith(sub)
ISO8601形式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: ラインスタイルを実線に指定する	linestyle = 'solid'
option: 色をダークスレートブルーにする	color = 'darkslateblue'
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
既存のファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
rgbの左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
散布図に△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
イテラブルを文字列に変換して、部分文字列によって結合する	sub.join(map(str, iterable))
option: コーンフラワーブルー色を使用する	color = 'cornflowerblue'
範囲を指定して整数乱数を発生させる	random.randint(最小値, 最大値)
行列から重複を除いた配列を作る	np.unique(aArray)
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, N)
文字列を部分文字列で区切り、列挙する	s.split(sub)
データフレームを表示するとき表示できる列数を減らす	pd.set_option('display.max_columns', n)
実数に実数を加える	x + y
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
ライトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
棒グラフをライトシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データフレームを複数の列によって並べる	df.sort_values(by=column)
辞書を並べ直してJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
nが一桁の数か調べる	0 <= n <= 9
表の列をインデックスに設定する	df.set_index(column)
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
文字列の開始位置以降に部分文字列が含まれるかどうか調べる	s.find(sub, start) != -1
黒い▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
実行環境のエンコーディング	sys.getdefaultencoding()
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
数字を全て使う	string.digits
黒い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
列によってデータフレームを並べてNaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
横棒グラフをダークゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
配列の列ごとの分散	np.var(aArray, axis=0)
プロットの簡単な説明の位置を指定する	plt.legend(loc=(x, y))
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをシエナ色として描画する	plt.hist(データ列, color='sienna')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
ファイルに文字列を書き込む	f.write(s)
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
イテラブルとリストリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
数式を微分する	sympy.diff(e)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
追加できるようにSJISで既存のファイルパスを開く]	open(filepath, mode='a', encoding='shift_jis')
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
０で全要素を初期化したブール型の行列を作成する	np.zeros(行数, 列数, dtype=np.int32)
淡い茶色色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
n割るn2	n / n2
列でデータフレームをグループ分けして、列の要約統計量を求める	df.groupby(column).describe()[column2]
データフレームを列名リストによって小さい順にソートする	df.sort_values(by=column, ascending=True)
ヒストグラムの色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
書き込み用にファイルを文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
数列と配列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
２つの整数最小公倍数	math.lcm(n, n2)
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
２つのデータフレームを列'A'と列'B'をキーとして外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
柱状グラフの範囲を設定する	plt.hist(データ列, range=(start, end))
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
option: △マーカーを描画する	marker = '^'
リストをアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
カウンタの上位を列挙する	aCounter.most_common(k)
折れ線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
データ列がどの程度、分散しているか確認する	ds.var()
最大値でデータを正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
散布図の四角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
xをブール値に変換する	bool(x)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
シエナ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
カウンタの項目数	len(aCounter)
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
タプルから最後に追加したエントリを取り出す	aDict.popitem()
データフレームから重複をインプレイスで削除する	df.drop_duplicates(inplace=True)
オブジェクトが属性を持つか	hasattr(obj, プロパティ名)
option: グラフの色をコーラルに変更する	color = 'coral'
主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
キューに要素を積む	deq.append(element)
範囲を指定して部分文字列を文字列の最後から探す	s.find(sub, start, end)
データフレームを二つの列によってソートし、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ライトブルーにヒストグラムの色を変更する	plt.hist(データ列, color='lightblue')
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
グラフに使う縦軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
線グラフの色をビスクにセットする	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムを一点鎖線で描く	plt.hist(データ列, linestyle='dashbot')
タプルのn番目のの要素	aTuple[n]
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
タプルが少なくともひとつ真か調べる	any(aTuple)
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
ファイルパスをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
イテラブルから集合を使う	set(iterable)
文字列中にひとつでも非空白が含まれるかどうか確認する	any(not c.isspace() for c in s)
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
ヒストグラムを複数並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
小数点数とyの斜辺	math.hypot(x, y)
実数が無限大	math.isinf(x)
データ列が何月か見る	ds.dt.month
ヒストグラムの色をオーキッドに指定する	plt.hist(データ列, color='orchid')
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
両端キューの順序を右にn個分回転させる	deq.rotate(n)
文字列は漢字かどうか	('\u4E00' <= ch <= '\u9FD0')
空のガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
新しい単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
縦棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
最適な場所に凡例を表示する	plt.legend(loc='best')
データフレームの相関行列ケンドール相関係数で	df.corr(method='kendall')
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ペルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
データフレームの中にと文字列がいくつあるか求める	df.isin([value, value2]).sum()
option: ナバホホワイトを使用する	color = 'navajowhite'
ライトイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームを'A'列と'B'列で昇順に並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
データフレームを列の値によってグループ化する	df.groupby(column)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
データフレームが正規分布からどれだけ尖っているか確認する	df.skew()
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
eの実数乗を算出する	math.exp(x)
キーがマッピングに存在しない時要素を追加する	aDict.setdefault(key, element)
正規化されたヒストグラムをプロットする	plt.hist(データ列, density=True)
ゼロ埋めされた符号なし８ビット整数型のベクトル	np.zeros(要素数, dtype=np.uint8)
option: マーカーを三角に指定する	marker = '^'
リスト内の要素が全て真か調べる	all(aList)
ファイルパスをオープンする]	open(filepath)
半透明の点線を使って配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの列の値がxである行を抽出する	df[df[column] == x]
実数の整数部	math.modf(x)[1]
ファイルパスを絶対パスに変換する	os.path.abspath(filepath)
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
複数の列でデータフレームを整列する	df.sort_values(by=column)
データフレームの列の値がxより小さい行を抽出する	df[df[column] < x]
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
option: 色をミディアムオーキッドに設定する	color = 'mediumorchid'
動作環境がリナックスか	sys.platform.startswith('linux')
イテラブルのイミュータブルな集合	frozenset(iterable)
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
option: バツマーカーを使う	marker = 'x'
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
データフレームの列の欠損値を中央値に設定する	df[col].fillna(df[col].median())
option: バイナリモードに指定する	mode = 'rb'
折れ線グラフのポイント印の太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
全ての句読点文字	string.punctuation
ファイル名がテキストファイルかどうか	filename.endswith('.txt')
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
プロット描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
レベッカパープル色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
最小値でデータ列のNaNを埋める	ds.fillna(ds.min())
option: 線の種類を破線に設定する	linestyle = 'dashed'
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
ホワイトスモーク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
nがn2より小さいか判定する	n < n2
option: 印の大きさを設定する	markersize = 2.0
折れ線グラフの色をサドルブラウンにセットする	plt.plot(データ列x, データ列y, color='saddlebrown')
折れ線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
キューの値をインプレースに反転する	deq.reverse()
文字列の開始位置と終了位置の間に部分文字列が存在するかどうか調べる	s.find(sub, start, end) != -1
データフレームのインデックス名を一度に、nameからname2に付け直す	df.rename(index={name: name2})
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
データ列が何曜日か調べる	ds.dt.weekday_name
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgray')
リストを境界値として列をビン分割する	pd.cut(ds, aList)
option: ターコイズ色を用いる	color = 'turquoise'
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
散布図に△マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
部分文字列で文字列が終わるか調べる	s.endswith(sub)
option: 文字コードを文字列の示すエンコーディングに指定する	encoding = s
rgbの丸マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームのリストカラムのNaNを最頻値にセットする	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのカラムの文字列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
最大長nの両端キューをイテラブルから生成する	collections.deque(iterable, maxlen=n)
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
文字列はタイトル大文字小文字か調べる	s.istitle()
option: ディープスカイブルー色を使う	color = 'deepskyblue'
データフレームのリストカラムの未入力値を第二四分位数に設定する	df[aList].fillna(df[aList].median())
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
ヒストグラムを耐火レンガ色を用いて描画する	plt.hist(データ列, color='firebrick')
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームのn行目を破壊的に消す	df.drop(n, axis=0, inplace=True)
英字の大文字列	string.ascii_uppercase
データフレームを列によってグループ化してそれぞれのグループごとの標準偏差を計算する	df.groupby(column).std()
option: スカイブルー色を使う	color = 'skyblue'
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフの色をゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='goldenrod')
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: モカシンを使う	color = 'moccasin'
ナバホホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームの欠損値をメディアンで埋める	df.fillna(df.median())
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
折れ線グラフに上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
実数の正弦を求める	math.sin(x)
重複ありでn行をランダムに表データからサンプリングする	df.sample(n, replace=True)
タプルの末尾を除く	aTuple[:-1]
標準入力から1行分読む	sys.stdin.readline()
カラムの欠損値を直後の値に指定する	ds.fillna(method='bfill')
文字列はPythonのキーワードかどうか調べる	keyword.iskeyword(s)
データフレームのリスト列の分散	df[aList].var()
オールドレース色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
縦棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
ベクトルの最大値	np.max(aArray)
option: 青紫色を使う	color = 'violet'
数式の変数にnを代入する	e.subs(z, n)
ダークターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
データフレームの列が文字列で始まらない行を選択する	df[not df[column].str.startswith(s)]
リストとリストについて散布図を描いてマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
マップから最後に追加したエントリを取り出す	aDict.popitem()
2つのリストから辞書	dict(zip(aList, aList2))
アヤメのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
値を黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
データフレームを各列毎にグループ分けし、、列の最小値を計算する	df.groupby(column)[column2].min()
option: パパイヤウィップにグラフの色を変更する	color = 'papayawhip'
16進数文字列を整数にする	int(s, 16)
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図をサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='salmon')
散布図に三角印を加える	plt.scatter(データ列x, データ列y, marker='^')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
コレクションを使う	import collections
マッピングをJSONフォーマットで出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
データ列の中に存在する文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
全要素を1で初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
オリベドラブ色を用いてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
データフレームのカラムのメディアンを求める	df[col].median()
平均値でデータ列の欠損値を埋める	ds.fillna(ds.mean())
自然数個からk個取り出した場合の順列の総数を求める	math.perm(n, k)
複数の列によってデータフレームをグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームのカラムを1000の位で丸めて整数にする	df[col].round(-3).astype(int)
表を各列と列の組み合わせ毎に集計して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
データフレームのカラムが何秒か調べる	df[col].dt.second
数を実数で割った余り	x % y
タプルを浅くコピーする	dict(aDict)
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムを紺色として描画する	plt.hist(データ列, color='darkblue')
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
option: ダークカーキを用いる	color = 'darkkhaki'
ヒストグラムをスプリンググリーン色を使って描画する	plt.hist(データ列, color='springgreen')
まとめて列をValueMapで置換する	ds.replace(ValueMap)
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
配列とリストの散布図にrgbの三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列をASCII限定としてパターンで区切る	re.split(pattern, s, flags=re.ASCI)
データフレームを列によってグループ化し、個数を算出する	df.groupby(column).count()
データフレームを列として集約して、それぞれのグループごとの件数を知る	df.groupby(column).size()
文字列の大きさ	len(s)
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
散布図の右三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームを各列と列の組み合わせ毎にグループ分けして、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
プロットの描画で濃く色を使用する	sns.set(pallete='deep')
ラベンダーにヒストグラムの色を指定する	plt.hist(データ列, color='lavender')
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームを破壊的に複数の列によってによってソートする	df.sort_values(by=column, inplace=True)
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
追加モードとしてファイルをオープンして]、fとする	f = open(filepath, mode='a')
データフレームのリストで指定されたカラムの相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
データフレームの中にと文字列が存在するかどうか調べる	df.isin([value, value2])
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
散布図にクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
回帰分析をアンサンブル学習を使ってする	sklearn.ensemble.VotingRegressor()
暗く色をプロットの描画で使う	sns.set(pallete='dark')
xを浮動小数点数にする	float(x)
option: グラフの色をラベンダーに指定する	color = 'lavender'
データフレームを関数の値でグループ化し、基本統計量を求める	df.groupby(関数).describe()
二つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
グラフのデザインをイイ感じに設定する	sns.set()
データフレームを列の値によってグループ化して、それぞれのグループごとの個数を算出する	df.groupby(column).count()
棒グラフをデピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームのカラムのNaNを最大値に指定する	df[col].fillna(df[col].max())
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
SJISでデータフレームをJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
散布図を黒いダイアモンドマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームからカテゴリデータを取り出す	df.select_dtypes('object')
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
空文字	''
散布図のマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
変数を水色にする	f'\033[36m{value}\033[0m'
作画で用いるフォントを指定する	sns.set(font=フォント名)
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
option: アイボリーを使用する	color = 'ivory'
option: ペルー色を使う	color = 'peru'
nはリストのどれかか調べる	n in aList
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列の最後の文字を使う	s[-1]
散布図を黄緑色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
実行中の例外を情報	sys.exc_info()
ファイルからエクセルデータを読み込む	pd.read_excel(filename)
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
Pandasで文字列のエポック秒からPandasの日付型にする	pd.to_datetime(s, unit='s', utc=True)
データフレームから列を二つのみ選択する	df[[column, column2]]
option: フォントの色をグレーに設定する	color = 'grey'
option: グラフの色を濃いシアンに設定する	color = 'darkcyan'
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
option: 青緑にフォントの色を変更する	color = 'teal'
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をブランチドアーモンドにセットする	color = 'blanchedalmond'
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
行列の列ごとの最小値	np.min(aArray, axis=0)
縦棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列で区切って二つの文字列をプリントする	print(value, value2, sep=s)
日付時刻データにn日分足す	aDatetime + datetime.timedelta(days=n)
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームを2つの列によって整列して、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
論文にプロットを変更する	sns.set(context='paper')
日付時刻データが日曜日かどうか	aDatetime.weekday() == 6
option: ライトスチールブルー色を用いる	color = 'lightsteelblue'
xの印字可能な文字列	ascii(x)
日付時刻データが金曜日か確認する	aDatetime.weekday() == 4
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
計算機イプシロンを計算する	sys.float_info.epsilon
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの色をシーグリーンにセットする	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフの菱形マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
マルーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='maroon')
タプルからキーの値か、もしくは要素を得る	aDict.get(key, element)
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
データ列とリストについての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
リストを赤色で出力する	print(f'\033[31m{value}\033[0m')
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
部分文字列が文字列の開始位置からと終了位置の範囲に含まれるか調べる	s.find(sub, start, end) != -1
グラフの全般的にカラーパレットをパステル調にする	sns.set(pallete='pastel')
文字列を最後の部分文字列で分けたときの前半の文字列を使う	s.rpartition(sub)[0]
グラフで使用するパレットを指定する	sns.set(pallete=パレット名)
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
整数nの十六進表現を使う	hex(n)
リストをビン数nとしてビニングし、、namesのラベルをつける	pd.cut(aList, n, labels=names)
インデックスを付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, index=None)
option: 色をシャルトリューズにする	color = 'chartreuse'
タイムスタンプデータの分	aDatetime.minute
ヒストグラムをティール色で描画する	plt.hist(データ列, color='teal')
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
ふたつの集合のユニオン	aSet.union(aSet2)
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
横棒グラフの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
正規分布による確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
データフレームの未入力値を最小値で置換する	df.fillna(df.min())
データ列と数列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
分割数nでデータフレームの中の列を分割する	pd.cut(df[col], n)
データフレームのカラムの月	df[col].dt.month
散布図をホットピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='hotpink')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
赤い星マーカーを数列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='r')
option: グラフを点線に変更する	linestyle = 'dotted'
ヒストグラムの色をアンティークホワイトに指定する	plt.hist(データ列, color='antiquewhite')
文字列がタプルに含まれないか調べる	element not in aTuple
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの行を取り出す	df[start:end]
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データ列が正規分布からどの程度歪んでいるか見る	ds.kurt()
コーパスのバージョン	version = 'wcce2022-0.1'
スクリプトファイルのディレクトリ名を使う	os.path.dirname(os.path.abspath(__file__))
リストと数列についての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストを等量でビン数nとしてビン分割する	pd.qcut(aList, n)
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
option: 色をライトグレーに設定する	color = 'lightgray'
文字列中の部分文字列の出現をカウントする	s.count(sub)
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
配列とリストの散布図を描画し、マーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
タプルの各要素を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
グラフで使う色を指定する	sns.set(pallete=パレット名)
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
空白で文字列を区切って、整数のリストに変換する	map(int, s.split())
散布図の菱形マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームの中の列と列に重複があれば消す	df.drop_duplicates(subset=column)
正規表現を大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
option: ゴールド色を用いる	color = 'gold'
option: 区切りをカンマにする	sep = ','
文字列の開始位置からと終了位置までの範囲に部分文字列が存在しないか確認する	s.find(sub, start, end) == -1
新しいヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームから重複したデータを削除し、更新する	df.drop_duplicates(inplace=True)
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
option: パールバイオレットレッドを用いる	color = 'palevioletred'
リストを黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
option: 改行の代わりに文字列を用いる	end = s
タプルをn回接続する	aTuple * n
辞書に項目名が存在するか調べる	key in aDict
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
辞書の項目名を列挙する	list(aDict)
マッピングのキー一覧を得る	list(aDict)
option: ライムグリーンを用いる	color = 'limegreen'
リストを中央値でビン分割する	pd.qcut(aList, 2)
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
文字列を空白によって区切って整数リストに変換する	map(int, s.split())
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
散布図のマーカーの大きさをnにセットする	plt.scatter(データ列x, データ列y, s=n)
ケンドールとしてデータフレームの相関行列	df.corr(method='kendall')
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列を最後の部分文字列で分けた時の最初の文字列	s.rpartition(sub)[0]
x軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
サドルブラウン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
まとめてreplにデータフレームのカラムの値を正規表現patternで置換する	df[col].replace(pattern, repl, regex=True)
option: エンコーディングを文字コードtextに指定する	encoding = text
nxn2の2次元リスト	[[0] * n for _ in range(n2)]
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
最初の部分文字列で文字列を分割した時の先頭の文字列	s.partition(sub)[0]
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
線グラフの色をダークレッドに変更する	plt.plot(データ列x, データ列y, color='darkred')
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
重回帰モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
線グラフをオレンジレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orangered')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: 色をやわらかい青に設定する	color = 'cornflowerblue'
表データを小数点以下n桁で丸める	df.round(n)
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
スタックから最初の値を取り除く	deq.remove(element)
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
表とデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
数列と数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
線グラフを点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted')
集合の濃度	len(aSet)
２つの整数の最大公約数	math.gcd(n, n2)
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
横棒グラフをライトサーモン色として描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
rgbのクロスマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: データ型として三二ビット整数型を使う	dtype = np.int16
リストとリストの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
文字列を赤色にする	f'\033[31m{value}\033[0m'
リストから文字列を取り除く	aList.remove(element)
データフレームを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: 改行を区切りで使用する	sep = '\n'
縦棒グラフをコーンフラワーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
nをn2で割った余り	n % n2
線形モデルの回帰変数	model.coef_
項目名が辞書上で未定義かどうか調べる	key not in aDict
nが奇数か調べる	n % 2 == 1
日付時刻データにn秒分足す	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
既存のファイルパスをUTF8を用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
文字列をケースを無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
option: グラフの色をコーンズシルクに変更する	color = 'cornsilk'
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
折れ線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
表データから型リストで指定されたデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
小数点数以下の最大の整数を計算する	math.floor(x)
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ファイルパスをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
リストから行列を作る	np.array(aList)
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
実数を小数点以下で丸める	round(x, n)
カテゴリに並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
文字列を赤色で表示する	print(f'\033[31m{value}\033[0m')
パーセント付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ファイルを改行除外して一行ずつ読み込む	f.readline()
ライム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
リストを縦軸リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフの▽印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
カテゴリでグループ化して、データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
イテラブルと数列についての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
option: バイナリ書き込み用に設定する	mode = 'wb'
オプションで出力先を標準出力に設定する	file = sys.stdout
実数の正弦の逆数を求める	math.asin(x)
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
英字を全部使う	string.ascii_letters
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
小数点数はNaNかどうか調べる	math.isnan(x)
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
列によってデータフレームをソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
回帰分析をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図のバツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
表を列で整列する	df.sort_values(by=column)
option: フォントの色をアクアに指定する	color = 'aqua'
rgbの星マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
図の縦横を変更する	plt.figure(figsize=(横幅, 高さ))
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: ダークスラテグレー色を使う	color = 'darkslategray'
赤い破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
ダークグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームの中の列を分割数nでビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
日付データが何曜日か知る	aDate.weekday()
イテラブルのイミュータブルな集合を生成する	frozenset(iterable)
データ列を書式fmtを用いて日付データに変換する	pd.to_datetime(ds, format=fmt)
青色で数値をプリントする	print(f'\033[34m{value}\033[0m')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
x軸の目盛りを対数に変更する	plt.xscale('log')
データフレームの列の分散	df[col].var()
半透明の実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
タプルの中の最も大きい値	max(aTuple)
文字列中にひとつでも非大文字が含まれる	any(not c.isupper() for c in s)
折れ線グラフの色を濃いシアンにセットする	plt.plot(データ列x, データ列y, color='darkcyan')
リストから一つランダムに選ぶ	random.choice(iterable)
データフレームを破壊的に昇順に列を用いて並べる	df.sort_values(by=column, ascending=True, inplace=True)
現在の曜日を整数で使う	datetime.datetime.today().weekday()
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームの列が正規表現文字列にマッチするデータを取り出す	df[df[column].str.match(s)]
エラーなくタプルから項目名の値を得る	aDict.get(key, None)
データフレームを二つの列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
列の値でデータフレームをグループ化して、各グループごとの合計を求める	df.groupby(column).sum()
mathを使用する	import math
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
カウンタをマッピングから作る	collections.Counter(aDict)
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
文字列を記号に変換する	sympy.Symbol(s)
Pythonパスを知る	sys.path
タプルの先頭	aTuple[0]
線形モデルの切片	model.intercept_
データフレームのリストカラムが正規分布からどの程度歪んでいるか確認する	df[aList].kurt()
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
折れ線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図を赤い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
nとn2が同じ値か調べる	n == n2
option: オールドレースにグラフの色を変更する	color = 'oldlace'
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
キューの末尾に列の各要素を追加する	deq.extend(iterable)
配列と数列の散布図をプロットして星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
▲マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
ハイパボリック・サインの逆数	math.asinh(x)
ボックスチャートを描画して平均線を加える	plt.boxplot(データ列, meanline=True)
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
整数nが配列のどれか	n in aArray
nからn2の範囲	range(n, n2)
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
t-SNEで多次元データを濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
配列とリストについての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
データフレームのカラムをValueMapで一度に変更する	df[col].replace(ValueMap)
横棒グラフをプロットして、バーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列が部分文字列で終了するか	s.endswith(sub)
整数nの二進文字列	bin(n)[2:]
日付データをタプルに変換する	aDate.timetuple()
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
文字列を白色にする	f'\033[37m{value}\033[0m'
本日が火曜日	datetime.datetime.today().weekday() == 1
データ列と配列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
nが偶数か確認する	n % 2 == 0
オブジェクトが辞書クラスのインスタンスか調べる	isinstance(obj, dict)
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
リストの先頭を捨てる	aList[1:]
nからn2までの整数列	list(range(n, n2+1))
２つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
横軸の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
日付時刻データは日付時刻データより後ろか調べる	aDatetime > aDatetime2
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームのn行以降取り出す	df[n:]
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフのポイント印の大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データフレームを各列毎にグループ分けして、列の標準偏差を算出する	df.groupby(column)[column2].std()
ヒストグラムでリストを可視化する	plt.hist(データ列)
nがn2かどうか	n == n2
列をキーにして２つのデータフレームを全ジョインする	pd.merge(df, df2, on=column, how='outer')
データ列のNaNを中央値で埋める	ds.fillna(ds.median())
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
列を四分位数でビン分割する	pd.qcut(ds, 4)
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
青い一点鎖線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
文字列を空白で分割し、、文字列リストに変換する	s.split()
線グラフを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列中に非空白があるか調べる	any(not c.isspace() for c in s)
ピアソン相関係数でデータフレームのリストカラムの相関行列	df[aList].corr(method='pearson')
データ列とリストについて散布図をプロットし、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
数列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
nが5で割り切れるかどうか調べる	n % 5 == 0
配列を分割数nでビンニングする	pd.cut(aArray, n)
option: フォントの色をグリーンイエローに設定する	color = 'greenyellow'
二つの列によってデータフレームをソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
データフレームをにバイオリン図を使って見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
縦軸だけ目盛線	plt.grid(axis='y')
既存の行列を元に全要素が1の配列を作成する	np.ones_like(aArray)
バリーウッドにヒストグラムの色を変更する	plt.hist(データ列, color='burlywood')
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
データフレームからn行サンプリングする	df.sample(n)
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
タブを求める	'\t'
データ列を10の位で四捨五入する	ds.round(-1)
文字列に変換してリストを連結する	''.join(map(str, iterable))
データフレームの値は欠損値かどうか確認する	df.isna()
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームを列の値でグループ化し、、それぞれのグループごとの分散を求める	df.groupby(column).var()
カーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
配列から重複を除いた行列を作る	np.unique(aArray)
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
２つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
散布図の星印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
文字列を右トリムする	s.rstrip()
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
双方向キューの先頭を使う	deq[0]
option: 色をダークグレーに設定する	color = 'darkgray'
リストとリストの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
折れ線グラフをダークマゼンタ色を使って描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのカラムの75パーセンタイル	df[col].quantile(0.75)
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームのカラムの未入力値をメディアンで埋める	df[col].fillna(df[col].median())
数式の数値	float(e)
横棒グラフをグリーンイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='greenyellow')
折れ線グラフのバツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
Pandasで、エポック秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームの中の列を等量でビン数nを使ってビン分割する	pd.qcut(df[col], n)
nがn2の倍数でないか	n % n2 != 0
シーケンスの要素を全て集合に追加する	aSet.update(iterable)
predicateFuncを適用したとき真になるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
全般的にカラーパレットを濃くする	sns.set(pallete='deep')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
データフレームの中の列をリストを境界値としてビニングする	pd.cut(df[col], aList)
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
列をn個にビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列をカンマで区切り、、文字列リストにする	s.split(',')
両端キューの中に要素が含まれてるか調べる	element in deq
リストのn番目のの要素	aList[n]
日付時刻データの秒数を使う	aDatetime.second
ターコイズ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
Pandasで、フォーマットとして文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
option: グラフの色をブラックに設定する	color = 'black'
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
nからn2までのひとつ飛ばしの整数列を得る	list(range(n, n2+1, 2))
標準入力を得る	sys.stdin
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
option: ポイントマーカーを描画する	marker = '.'
組のn番目以降の部分を取り出す	aTuple[n:]
文字列の開始位置以降が部分文字列で始まるかどうか調べる	s.startswith(sub, start)
データフレームの列を千の位で丸めて、整数型にする	df[col].round(-3).astype(int)
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
OSの名前	sys.platform
双方向キューの先頭にイテラブルの要素を追加する	deq.extendleft(iterable)
線グラフの線の種類を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
NaNも加えてデータフレームの列をダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフをカデットブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ライトスレイグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
破線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのカラムを丸める	df[col].round()
オブジェクトのクラスを調べる	type(obj)
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
縦棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
列名一覧	df.columns
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
リストをビン数nで分割する	pd.cut(aList, n)
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: 紺碧にグラフの色を設定する	color = 'azure'
黒い下三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
日付データが日付データと同時かテストする	aDate == aDate2
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
多重集合をイテラブルから作る	collections.Counter(iterable)
ゼロ埋めした整数型の配列	np.zeros(要素数, dtype=np.int)
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
文字列の開始位置より後に部分文字列が含まれないかどうか	s.find(sub, start) == -1
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
現在が月曜日かどうか	datetime.datetime.today().weekday() == 0
データフレームの母標準偏差	df.std(ddof=0)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
実数の仮数を求める	math.frexp(x)[0]
option: グラフの色をカーキに指定する	color = 'khaki'
タプルの個数を見る	len(aTuple)
オリベドラブにヒストグラムの色をセットする	plt.hist(データ列, color='olivedrab')
棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
データ列を小数点以下n桁で四捨五入する	ds.round(n)
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
散布図に△印を用いる	plt.scatter(データ列x, データ列y, marker='^')
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
標準出力の出力先がターミナルか確認する	os.isatty(sys.stdin.fileno())
リストの総和	sum(aList)
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
リストと配列の散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
散布図にrgbの星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームをグループ化し各列に対し合計を求める	df.groupby(column)[column2].sum()
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
直前の値でデータフレームの未入力値を置き換える	df.fillna(method='ffill')
目盛り線	plt.grid(linestyle='--')
nとkの組合せを求める	math.comb(n, k)
option: フォントの色をカーキに設定する	color = 'khaki'
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
黒い丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
ビン数nでデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
実線でリストの変化をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームを'A'列の値によってグループ化し、要約統計量を算出する	df.groupby('A').describe()
白色で変数をプリントする	print(f'\033[37m{value}\033[0m')
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
ライトグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
データフレームの欠損値を最頻値で補う	df.fillna(df.mode().iloc[0])
リストとリストリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
部分文字列で文字列を末尾から分割する	s.rsplit(sub)
データ列を100の位で丸めて、整数にする	ds.round(-2).astype(int)
option: タブを区切り記号で用いる	sep = '\t'
ライトスチールブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
二つのデータフレームを結合する	pd.merge(df, df2)
データ列の尖度	ds.skew()
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
文字列を大文字にする	s.upper()
ターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='turquoise')
今日が日曜日か調べる	datetime.datetime.today().weekday() == 6
黄色色でヒストグラムを描画する	plt.hist(データ列, color='yellow')
散布図をディープスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
スカイブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
option: タブをセパレータで使用する	sep = '\t'
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
option: ミディアムパープル色を使う	color = 'mediumpurple'
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
縦棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
Pandasで、文字列をタイムスタンプに変換する	pd.to_datetime(s)
文字列が識別子名か判定する	s.isidentifier()
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームを散布図で描画して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
赤い△マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
折れ線グラフの▽印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列をASCIIコード列に変換する	[ord(ch) for ch in s]
nが1もしくは2	n == 1 or n == 2
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
配列とリストについて散布図を描いて上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
nの十六進リテラルを使う	hex(n)
ヒストグラムの色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
エクセルファイルファイルから複数のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ベクトルの型	aArray.dtype()
十六進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
散布図の印を丸印にする	plt.scatter(データ列x, データ列y, marker='o')
nが1、もしくは2かどうか判定する	n == 1 or n == 2
ライトグレーにヒストグラムの色をする	plt.hist(データ列, color='lightgray')
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
データ列の中にある日付データと文字列の合計を求める	ds.isin([value, value2]).sum()
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
実行を正しく止める	sys.exit(0)
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
配列とリストについて散布図を描画してマーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
option: ミディアムブルー色を使う	color = 'mediumblue'
データフレーム全体を降順でインデックスによってソートする	df.sort_index(ascending=False)
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
文字列がタイトルケース	s.istitle()
データフレームを列の値によってグループ化して、個数を求める	df.groupby(column).count()
横棒プロットを描画する	plt.barh(ラベル列, データ列)
タプルをダミー変数に変換する	pd.get_dummies(iterable)
option: ゴーストホワイトにフォントの色を設定する	color = 'ghostwhite'
データフレームの各グループの個数	df.groupby(column).count()
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
nの無限イテラブル	itertools.repeat(n)
折れ線グラフの色をダークグレーにする	plt.plot(データ列x, データ列y, color='darkgray')
変数を青色で出力する	print(f'\033[34m{value}\033[0m')
バイトオーダを知る	sys.byteorder
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
アルファベットを求める	string.ascii_letters
データフレームを丸めて、整数型にする	df.round().astype(int)
option: トマトにグラフの色を設定する	color = 'tomato'
n個の集まりからk個選ぶ方法	math.comb(n, k)
両端キューの末尾	deq[-1]
データ列は何秒か見る	ds.dt.second
グリーンイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
ヒストグラムの線のスタイルを実線に変更する	plt.hist(データ列, linestyle='solid')
n個に配列を等量でビン分割する	pd.qcut(aArray, n)
カラムの欠損値を直後の値に設定する	ds.fillna(method='bfill')
データフレームのリストカラムのNaNを最大値で埋める	df[aList].fillna(df[aList].max())
折れ線グラフに丸印を使用する	plt.plot(データ列x, データ列y, marker='o')
両端キューのn番目に要素を挿入する	deq.insert(n, element)
データフレームのカラムの一覧を見る	df.info()
リストと配列の散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームを表示するとき、小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
タイムスタンプデータと日付時刻データの時間差を求める	aDatetime - aDatetime2
散布図に黒い▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
オブジェクトがリストの要素か調べる	element in aList
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
データフレームのカラムを百の位で丸める	df[col].round(-2)
折れ線グラフに星印を加える	plt.plot(データ列x, データ列y, marker='*')
回帰直線データフレームのカテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データ列の歪度を求める	ds.kurt()
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
回帰分析をK最近傍法で行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
option: グラフの色をミントクリームに指定する	color = 'mintcream'
イテラブルとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列が組に含まれないか	element not in aTuple
データフレームで、列と列の重複を見る	df.duplicated(subset=[column, column2])
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
option: シートの名前をnamesに設定する	sheet_name = names
二進文字列を整数にする	int(s, 2)
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
nのn2乗を計算する	n ** n2
行列の行列積	np.matmul(aArray, aArray2)
配列とリストについての散布図に黒い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
折れ線グラフをオリーブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフの色をダークオーキッドにする	plt.plot(データ列x, データ列y, color='darkorchid')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
データフレームの中にいくつが含まれるか数える	df.isin([value]).sum()
実数の符号を同じにする	math.copysign(x, x2)
シーケンスを行列にする	np.array(iterable)
データフレームを小さい順に複数の列によって並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
分割数nで配列をビン分割する	pd.cut(aArray, n)
xが一桁の数か	-9 <= x <= 9
ゲインズボロ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームのリストカラムの標本標準偏差を求める	df[aList].std()
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
データフレームの中で何行、重複するか見る	df.duplicated().sum()
データフレームの列の中に文字列があるかどうか確認する	df[col].isin([value])
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
実数の小数部	math.modf(x)[0]
カウンタのユニオン演算する	aCounter | aCounter2
イテラブルからn要素サンプリングする	random.sample(iterable, k=n)
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
nが2で割り切れないか調べる	n % 2 == 1
縦向きに複数のデータフレームをつなぐ	pd.concat([df, df2, df3], axis=0)
グラフにy=0の点線を設定する	plt.axhline(y=0, linestyle='dotted')
二つの集合がセットと互いに素かどうか確認する	aSet.isdisjoint(aSet2)
リストとイテラブルについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 色を淡い茶色に設定する	color = 'tan'
nの8進文字列	oct(n)[2:]
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
折れ線グラフに赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
オプションで、出力先を標準エラーに指定する	file = sys.stderr
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
棒グラフをライトブルー色を使って描画する	plt.bar(データ列x, データ列y, color='lightblue')
貝殻色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
整数nを十六進表現にする	hex(n)
日付時刻データがタイムスタンプデータと同時か確認する	aDatetime == aDatetime2
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
セットから別の集合を全て取り除く	aSet.difference_update(aSet2)
カラムを丸めて整数にする	ds.round().astype(int)
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
黒い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列は全て十進数字か	s.isdecimal()
イテラブルとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
まとめてデータフレームのリストカラムの値を正規表現で置き換える	df[aList].replace(pattern, repl, regex=True)
スクリプトファイルと同じフォルダのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ベクトルを平坦にする	aArray.flatten()
データフレームのリストカラムの未入力値を最大値に増やす	df[aList].fillna(df[aList].max())
PandasでUNIX秒のデータ列からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
データフレームの列を100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
散布図にrgbの上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
プロットで用いるフォントを指定する	sns.set(font=フォント名)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
自然数の順列の総数を求める	math.perm(n)
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
カウンタの要素一覧を使う	aCounter.keys()
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
大文字・小文字を無視してパターンで文字列を分ける	re.split(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をホワイトにする	plt.plot(データ列x, データ列y, color='white')
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
ヒストグラムをブランチドアーモンド色として描画する	plt.hist(データ列, color='blanchedalmond')
縦軸のキャプションをuntitledに設定する	plt.ylabel('y軸ラベル')
データ列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームを千の位で丸める	df.round(-3)
散布図の三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ヒストグラムを一点鎖線にする	plt.hist(データ列, linestyle='dashbot')
現在のタイムスタンプ	datetime.datetime.now()
棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームから列を３つだけ選択する	df[[column, column2, column3]]
散布図の▲印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのリストカラムの50パーセンタイル	df[aList].median()
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
表データからランダムに抽出する	df.sample()
ファイルパスからの入力ストリームを使う	open(filepath)
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
辞書から最後の項目をポップする	aDict.popitem()
option: グラフの色をライトコーラルに指定する	color = 'lightcoral'
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
Pythonインタプリタの実行ファイルの絶対パスを調べる	sys.executable
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
スプリンググリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
selectorsでマスクされたタプルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
色付きの点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
整数nの八進文字列	oct(n)[2:]
カーネル密度分布図を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: スラグレーを使う	color = 'slategray'
文字列を末尾から部分文字列で分割する	s.rsplit(sub)
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
ミディアムシアグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumseagreen')
パールバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
カラムの欠損値を最大値に設定する	ds.fillna(ds.max())
リストをn個に等しい量になるように分割する	pd.qcut(aList, n)
カラーパレットを濃くする	sns.set(pallete='deep')
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
JSON形式のファイルを読み込んで、dataとする	data = json.load(fin)
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
モデルの残差を算出する	目的変数 - model.predict(説明変数)
option: ダークオレンジ色を使用する	color = 'darkorange'
散布図を小麦色色を使って描画する	plt.scatter(データ列x, データ列y, color='wheat')
プロットにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
option: 左三角印を使う	marker = '<'
日付時刻データからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
ゼロ埋めされた行列	np.zeros(行数, 列数)
折れ線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
1行分標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
実数のn乗して浮動小数点数による余りを計算する	pow(x, n, y)
文字列の開始位置から終了位置までの範囲で部分文字列の出現	s.count(sub, start, end)
タイムスタンプデータが月曜日か	aDatetime.weekday() == 0
補足を加える	plt.legend(['凡例A', '凡例B'])
データフレームをインデックスによって並べる	df.sort_index()
プラットホームがWindows	sys.platform.startswith('win32')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=0)
ラインを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
範囲を指定して部分文字列を文字列の後ろから探す	s.find(sub, start, end)
変数について数値の積分を計算する	sympy.integrate(e, z)
印字できる文字を全部使う	string.printable
配列とリストについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフをアクア色を使って描画する	plt.plot(データ列x, データ列y, color='aqua')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
値∈セット	element in aSet
日付時刻データが日付時刻データより早い	aDatetime < aDatetime2
末尾から空白で文字列を分割する	s.rsplit()
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
predicateFuncが真となるイテラブルの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
文字列を双方向キューの末尾に追加する	deq.append(element)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
プログラムのファイル名を調べる	sys.argv[0]
ダークブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
デフォルトでグラフのデザインをいい感じに設定する	sns.set()
リストとイテラブルについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのリストカラムを十の位で丸めて整数にする	df[aList].round(-1).astype(int)
横棒グラフをロイヤルブルー色を使って描画する	plt.barh(データ列x, データ列y, color='royalblue')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
データ列とリストについての散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
カウンタの各項目をカウントだけ列挙する	aCounter.elements()
データフレームのカラムをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
option: ミスティローズにグラフの色を指定する	color = 'mistyrose'
特異値分解としてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: マーカーを菱形に設定する	marker = 'D'
折れ線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
文字列を変数にして変数にする	z = sympy.Symbol(s)
ライトスレイグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
文字列中に非英数字がある	any(not c.isalnum() for c in s)
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
リストとイテラブルについての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
昇順にデータフレームを2つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
nが一桁の数か	0 <= n <= 9
option: やわらかい青色を使う	color = 'cornflowerblue'
リストから文字列を除く	aList.remove(element)
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
スレートブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
option: マーカーを三角に変更する	marker = '^'
列の未入力値をxに設定する	ds.fillna(x)
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
グラフを色差別なくする	sns.set(pallete='colorblind')
1からnまでの整数リスト	list(range(1, n+1))
相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
option: グラフの色をパープルに変更する	color = 'purple'
option: オーキッドに色を変更する	color = 'orchid'
データフレームのカラムの欠損値をxに変更する	df[col].fillna(x)
値の出力を改行しないで行う	print(value, end='')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
要素一つのりストを作る	[element]
カーキ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
ファイルパスをバイナリモードで開く]	open(filepath, mode='rb')
option: 上三角マーカーを描画する	marker = '^'
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
縦棒グラフを黄色色を用いて描画する	plt.bar(データ列x, データ列y, color='yellow')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
多層パーセプトロンで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
列から両端キューを用意する	collections.deque(iterable)
ロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
実数の三乗	x ** 3
各列毎にデータフレームをグループ化し、、列の平均値を計算する	df.groupby(column)[column2].mean()
ミディアムパープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームのリストカラムの最頻値	df[aList].mode()
option: グラフの色を暗い赤に変更する	color = 'darkred'
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの列は正規分布からどの程度、歪んでいるか見る	df[col].kurt()
セットをイミュータブルな集合にする	frozenset(aSet)
オブジェクトは集合かどうか調べる	isinstance(obj, set)
文字列を最初の部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
相関を可視化する	plt.scatter(データ列x, データ列y)
データフレームから重複を認めてランダムにn行をサンプリングする	df.sample(n, replace=True)
配列と数列の散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
イテラブルを集合にする	set(iterable)
データ列の移り変わりを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
カウンタをマッピングで更新する	aCounter.update(aDict)
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
両端キューに値をプッシュする	deq.append(element)
グラフの縦軸を対数目盛に変更する	plt.yscale('log')
日付時刻データの日付を使う	aDatetime.date()
データフレームからインプレイスで重複を削除する	df.drop_duplicates(inplace=True)
連立方程式を解く	sympy.solve([e, e2])
パラメータが無限大に近づく時の数値の極限値を求める	sympy.limit(e, z, oo)
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
ライム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
組を引数として展開して出力する	print(*aTuple)
分割数nで配列をビニングする	pd.cut(aArray, n)
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
タプルの各値を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
配列と数列の散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列を黄色化する	f'\033[33m{value}\033[0m'
線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
ヒストグラムをスレートブルー色を用いて描画する	plt.hist(データ列, color='slateblue')
両端キューをタプルに変換する	tuple(deq)
折れ線グラフのダイアモンド印を赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
配列とリストの散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
レベッカパープルにヒストグラムの色を変更する	plt.hist(データ列, color='rebeccapurple')
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
データフレームの中に日付データと文字列がいくつあるか数える	df.isin([value, value2]).sum()
ライトゴールドロディイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
貝殻色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
'A'列の値によってデータフレームを集約する	df.groupby('A')
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
クロス印を用いるデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
３整数の最小公倍数	math.lcm(n, n2, n3)
折れ線グラフの左三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
グラフをスライドに変更する	sns.set(context='talk')
rgbのダイアモンドマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: グラフの種類を破線に設定する	linestyle = 'dashed'
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフの色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
表の列をドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
タプル中の最初の文字列を探す	aTuple.index(element)
option: フォントの色をパレットトルコイズに設定する	color = 'paleturquoise'
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
多次元データを多次元尺度構成法を用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームの列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
マッピングのコピーを作成する	aDict.copy()
線グラフをダークバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: 白色を使う	color = 'white'
nがセットのどれかかどうか調べる	n in aSet
折れ線グラフの色をラベンダーブラッシュにする	plt.plot(データ列x, データ列y, color='lavenderblush')
TSVをデータフレームとして読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
要素は辞書の値として含まれている	element in aDict.values()
文字列のプレフィックスが部分文字列	s.startswith(sub)
データフレームのn行目を削除して、更新する	df.drop(n, axis=0, inplace=True)
分類結果の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
オブジェクトが辞書型のインスタンスか	isinstance(obj, dict)
カウンタから列をカウントして減らす	aCounter.subtract(iterable)
option: ロージーブラウンを用いる	color = 'rosybrown'
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
実数から整数を引く	x - y
文字列中に部分文字列が存在しないか調べる	sub not in s
ミディアムオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumorchid')
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
エクセルデータファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
数列とリストについて散布図をプロットして、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
両端キューをリストにする	list(deq)
nからいつまでもカウントアップする	itertools.count(start=n)
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
要素がマップの値に含まれていないか	element not in aDict.values()
データフレームの列を整数に丸める	df[col].round()
カウンタの全数	aCounter.total()
二つの数値をカンマで区切ってプリントする	print(value, value2, sep=',')
回帰モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
散布図のクロス印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームを列毎に集約して標準偏差を計算する	df.groupby(column).std()
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
データ列を丸めて、整数型にする	ds.round().astype(int)
データフレームのリスト列は正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
ライトグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
点線に折れ線グラフを指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのカラムの要約統計量	df[col].describe()
option: 紺碧を使う	color = 'azure'
散布図をシスル色を用いて描画する	plt.scatter(データ列x, データ列y, color='thistle')
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
タプルの最初を捨てる	aTuple[1:]
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
option: ▼マーカーを加える	marker = 'v'
データフレームを各列毎にグループ化して列の標準偏差を計算する	df.groupby(column)[column2].std()
アクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
文字列の右端から改行を消す	s.rstrip('\n')
10を底とする対数を求める	math.log10(x)
ビン数nで列を分割する	pd.cut(ds, n)
半透明の点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列がタイトルケースかどうか調べる	s.istitle()
シスル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
データ列の秒を使う	ds.dt.second
リストと配列についての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームを'A'列によってグループ化し、基本統計量を求める	df.groupby('A').describe()
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
デフォルトのエンコーディング	sys.getdefaultencoding()
文字列を走査し、パターンに複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
色付きの点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データ列をn個に等間隔でビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
黄緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
nが5で割り切れるか判定する	n % 5 == 0
option: 色を青に設定する	color = 'blue'
線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
箱ヒゲ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
散布図を四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
'A'列で昇順にデータフレームを並べ直して、更新する	df.sort_values(by='A', ascending=True, inplace=True)
散布図に赤い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
リストの平均値を求める	sum(aList)/len(aList)
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
ダークターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
半透明の実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
青い一点鎖線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
両端キューの最初にイテラブルの各要素を順に追加する	deq.extendleft(iterable)
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
マップから項目名の値	aDict.get(key)
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ヒートマップでデータフレームのリスト列の相関行列をグラフ化する	sns.heatmap(df[aList].corr())
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: 星マーカーを描画する	marker = '*'
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
現在を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
標準入力を使う	sys.stdin
小数点数の逆双曲線余弦	math.acosh(x)
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームを'A'列と'B'列の値によってグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をやわらかい青にセットする	plt.hist(データ列, color='cornflowerblue')
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
Pandasで、タイムスタンプ型のデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
データ列の欠損値を直前の値で補う	ds.fillna(method='ffill')
予測結果の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
Pandasで、データ列をタイムスタンプ型に変換する	pd.to_datetime(ds)
配列とイテラブルの散布図を描いて、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
プロットの縦軸を対数に変更する	plt.yscale('log')
赤い大バツマーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
整数nがセットのひとつであるかどうか確認する	n in aSet
データフレームの列の各値が何回出現するか見る	df[col].value_counts()
option: 書き込みモードを使う	mode = 'w'
option: グラフの色をインディアンレッドに指定する	color = 'indianred'
nわるn2を算出する	n / n2
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
上限nの双方向キューを作成する	collections.deque(maxlen=n)
星印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
option: ホワイト色を使う	color = 'white'
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
rgbのポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
BOMを付けてデータフレームをJSONLファイルに書き込む	df.to_csv(filename, encoding='utf_8_sig')
ピアソン積率相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
線グラフをバリーウッド色を用いて描画する	plt.plot(データ列x, データ列y, color='burlywood')
整数を実数で割って、小数点以下を切り捨てる	x // y
シーケンスの重複コンビネーションを求める	itertools.combinations_with_replacement(iterable, n)
イテラブルの重複組み合せ	itertools.combinations_with_replacement(iterable, n)
データフレームの中に日付データと日付データがあるか調べる	df.isin([value, value2])
散布図にrgbの▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
nの三乗を求める	n ** 3
option: 印を▼に変更する	marker = 'v'
UTF8でファイルを開く]	open(filepath, encoding='utf-8')
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
配列の行ごとの平均を使う	np.mean(aArray, axis=1)
option: ライトシアン色を使う	color = 'lightcyan'
データフレームで、列と列の重複を取り除く	df.drop_duplicates(subset=[column, column2])
太字で文字列をプリントする	print(f'\033[1m{value}\033[0m')
データ列を分割数nでビン分割する	pd.cut(ds, n)
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
散布図をサンディーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
日付時刻データがタイムスタンプデータより先か調べる	aDatetime < aDatetime2
カテゴリで色分けしてデータフレームの全列の散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
数値をマゼンタにする	f'\033[35m{value}\033[0m'
リストとリストの散布図を描画して下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
option: 色をスプリンググリーンに変更する	color = 'springgreen'
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
配列と配列について散布図を描画して▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストとリストについて散布図を描画してクロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームのカラムは何秒か調べる	df[col].dt.second
直後の値でデータ列の未入力値を埋める	ds.fillna(method='bfill')
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
ライトサーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: フォントの色をシエナに指定する	color = 'sienna'
横棒グラフをマルーン色を用いて描画する	plt.barh(データ列x, データ列y, color='maroon')
Pandasで、データフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
データフレームのカラムの値をValueMapで一度に置き換える	df[col].replace(ValueMap)
option: グラフの色を青に指定する	color = 'blue'
データフレームの列で文字列が含まれるデータを選ぶ	df[df[column].str.contains(s)]
シーケンスをいつまでも繰り返す	itertools.cycle(iterable)
カラムの歪度を求める	ds.kurt()
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
文字列TSVファイルからCSVをn番目のカラムを行として読む	pd.read_csv(filename, index_col=n)
データフレームのカラムが何年か調べる	df[col].dt.year
option: グレーを使う	color = 'grey'
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
折れ線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
'A'列と'B'列でデータフレームをまとめたグループ	df.groupby(['A', 'B'])
赤色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
Pandasのバージョンを出力する	print(pd.__version__)
要素をスタックの末尾から取り出す	deq.pop()
nからstep間隔でいつまでも数え上げるする	itertools.count(start=n, step=step)
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
option: フォントの色をフクシアにセットする	color = 'fuchsia'
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図を深紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
非大文字が文字列中にあるか調べる	any(not c.isupper() for c in s)
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
ヒストグラムをミディアムパープル色を用いて描画する	plt.hist(データ列, color='mediumpurple')
実行結果を青色で出力する	print(f'\033[34m{value}\033[0m')
xを浮動小数点数型にする	float(x)
文字列が大文字か	s.isupper()
マッピングに要素を項目名として加える	aDict[key] = element
option: グラフの色をゴールドに設定する	color = 'gold'
option: フォントの色をライトシアンに指定する	color = 'lightcyan'
赤い星マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
列をn個にビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
option: 紺色を用いる	color = 'darkblue'
リストの長さ	len(aList)
レモンシフォン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: サンディーブラウンを使う	color = 'sandybrown'
データフレームを列によって小さい順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
辞書順で文字列が文字列より後	s > s2
データフレームのカラムが何分か確認する	df[col].dt.minute
カラムの中に文字列と文字列があるかテストする	ds.isin([value, value2])
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
データフレームを'A'列で並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
シーケンスから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
文字列を区切りを用いて区切って列挙する	s.split(sep)
折れ線グラフの大バツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データ列を分割数nとしてビン分割する	pd.cut(ds, n)
現在が月曜日か	datetime.datetime.today().weekday() == 0
データフレームのカラムの中に文字列と日付データが存在するか	df[col].isin([value, value2])
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
凡例をグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
データフレームからカテゴリデータの列を選択する	df.select_dtypes('object')
値が集合のメンバーかどうか確認する	element in aSet
小数点数が有限	math.isfinite(x)
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
浮動小数点数から実数を引く	x - y
タプル中の要素は全て真	all(aTuple)
リストの最後から要素をポップする	aList.pop()
縦棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
nとkのコンビネーション	math.comb(n, k)
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
データフレームの列がxより小さい行を選択する	df[df[column] < x]
文字列を部分文字列で二分し前半の文字列を見る	s.partition(sub)[0]
オーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='orchid')
カラムの中にある文字列と日付データの合計をカウントする	ds.isin([value, value2]).sum()
列'A'と列'B'をキーとして２つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
データ列が何分か調べる	ds.dt.minute
説明変数と目的変数で回帰モデルを学習する	model.fit(説明変数, 目的変数)
実数のルート	math.sqrt(x)
実数を浮動小数点数に加える	x + y
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
配列の合計値	np.sum(aArray)
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
スタックの先頭に要素を付け加える	deq.appendleft(element)
option: 分割記号を使わない	sep = ''
タプルを浅くコピーする	aDict.copy()
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: フォントの色をターコイズにする	color = 'turquoise'
ミディアムターコイズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
データフレームのリストカラムを丸めて整数型にする	df[aList].round().astype(int)
nがn2の倍数でないかどうか調べる	n % n2 != 0
散布図を赤い四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c='r')
半透明の点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
今日が土曜日か	datetime.datetime.today().weekday() == 5
データフレームの列の正規分布に対する左右対称性	df[col].kurt()
グラフのグリッドを白くする	sns.set(style='whitegrid')
イテラブルとイテラブルの散布図に黒い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
辞書順で文字列が文字列より前かどうか判定する	s < s2
option: グラフの色をダークターコイズに指定する	color = 'darkturquoise'
データ列の未入力値を最頻値に変更する	ds.fillna(ds.mode().iloc[0])
散布図を珊瑚色で描画する	plt.scatter(データ列x, データ列y, color='coral')
オリベドラブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフのバツ印の線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
文字列がカタカナか調べる	('ァ' <= ch <= 'ン')
線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
リストとデータ列についての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
データフレームを列の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームのカラムは何分か見る	df[col].dt.minute
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームを列の値ごとにグループ化して、それぞれのグループ毎の平均値を求める	df.groupby(column).mean()
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: フォントの色をスラグレーに設定する	color = 'slategray'
文字列が文字列リストに含まれるか	s in aStringList
xを浮動小数点数に変換する	float(x)
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
文字列を空白を用いて分割する	s.split()
option: 色をクリムゾンに設定する	color = 'crimson'
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
縦棒グラフをローングリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データ列の要約統計量を算出する	ds.describe()
複数の列によってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
縦棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
散布図の▲マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
既存の行列を元に全要素が0の配列	np.zeros_like(aArray)
データフレームの値は未入力値か調べる	df.isna()
配列が何次元か調べる	aArray.ndim
nがn2より大きいか確認する	n > n2
行列の列ごとの最大値を求める	np.max(aArray, axis=0)
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
表データの列がxより大きい行を取り出す	df[df[column] > x]
句点文字を使う	string.punctuation
実線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
赤い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
xの小数点以下'4'桁まで表示する	print(':.4f'.format(x))
データフレームの未入力値を平均値で置換する	df.fillna(df.mean())
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームの列の種類	df.info()
option: ダークターコイズを用いる	color = 'darkturquoise'
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
折れ線グラフの色をライトゴールドロディイエローにする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
現在の時間数	datetime.date.today().hour
option: ゴールドにグラフの色を設定する	color = 'gold'
option: 書き込みモードに設定する	mode = 'w'
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
平均でデータフレームのリストカラムの未入力値を埋める	df[aList].fillna(df[aList].mean())
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
本日が月曜日かどうか	datetime.datetime.today().weekday() == 0
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
２つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
二つの列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
タプルと列の直積を得る	itertools.product(iterable, iterable2)
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
リストから上限nの両端キューを作る	collections.deque(iterable, maxlen=n)
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
option: n番目の列を行に設定する	index_col = n
アルファベットの小文字を全部使う	string.ascii_lowercase
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
データフレームのリスト列の第一四分位数	df[aList].quantile(0.25)
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図に赤い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をサンディーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
タプルの要素だけプリントする	print(*aTuple)
小数点数のアークサイン	math.asin(x)
折れ線グラフのダイアモンドマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: ペルーを使用する	color = 'peru'
文字列をコロンで区切り、、列挙する	s.split(':')
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
ミッドナイトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
列をキーにして2つのデータフレームを結合する	pd.merge(df, df2, on=column)
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
クロスマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
暗い赤にヒストグラムの色をする	plt.hist(データ列, color='darkred')
option: フォントの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
ベージュ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: 区切りをタブにする	sep = '\t'
option: バイアスを計算しない	fit_intercept = False
option: コーンズシルク色を使用する	color = 'cornsilk'
カウンタのktopを列挙する	aCounter.most_common(k)
点線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
二つのカウンタの共通するデータを求める	aCounter & aCounter2
折れ線グラフをポイント印を用いる描画する	plt.plot(データ列x, データ列y, marker='.')
柱状図を二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
浮動小数点数に変換する	float(x)
２変数の最小値を求める	min(x, y)
nが5で割り切れるか確認する	n % 5 == 0
表データを複数の列ごとにグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
二つのカウンタの共通する要素を求める	aCounter & aCounter2
確率的勾配降下を使って回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
カテゴリ列に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
勾配ブースティング回帰木を準備する	model = sklearn.ensemble.GradientBoostingRegressor()
線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
日付データが日付データより先か	aDate < aDate2
オリベドラブ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
nからn2を引いてnに代入する	n -= n2
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
散布図のダイアモンドマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
データフレームのカラムを散布図で可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームを昇順に列名リストによってソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
キーがマッピング上で定義済み	key in aDict
n2がn以上かつ、n3以下	n <= n2 and n2 <= n3
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: ライトスチールブルーに色を変更する	color = 'lightsteelblue'
option: グリーンイエローを用いる	color = 'greenyellow'
折れ線グラフの色をパパイヤウィップにセットする	plt.plot(データ列x, データ列y, color='papayawhip')
ヒストグラムの色をブルーバイオレットに指定する	plt.hist(データ列, color='blueviolet')
ライトグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
プロットの描画で淡くパレットを使う	sns.set(pallete='muted')
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
セット＼集合	aSet.difference(aSet2)
０で全要素を初期化した行列	np.zeros(行数, 列数)
option: オリーブを用いる	color = 'olive'
三つの文字列を順に出力する	print(value, value2, value3)
グラフのパレットを指定する	sns.set(pallete=パレット名)
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
2つの文字列は同じ	s == s2
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームのリストカラムの中にと文字列が存在する	df[aList].isin([value, value2])
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
文字列を表示する	print(value)
option: ビスクにグラフの色を設定する	color = 'bisque'
浮動小数点数のn乗して実数による余りを求める	pow(x, n, y)
整数nがリストのどれかか	n in aList
ファイルの絶対パスを使う	os.path.abspath(filepath)
カテゴリ列でグループ化して、に箱ひげ図でデータフレームをプロット化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
タプルにキーが存在する	key in aDict
配列を縦棒グラフにする	plt.bar(ラベル列, データ列)
横方向に二つのデータフレームをくっつける	pd.concat([df, df2], axis=1)
日付データの日数を求める	aDate.day
ヒストグラムの色を青紫に変更する	plt.hist(データ列, color='violet')
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
ダークゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
まとめてデータフレームのカラムの名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
データフレームをエクセルデータから読み込む	pd.read_excel(filename)
データフレームを列名リストによって昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
ベクトルの値を変更する	aArray[行番号, 列番号] = 指定の値
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
option: 色をゴールドに設定する	color = 'gold'
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
option: 色をオリベドラブに変更する	color = 'olivedrab'
kを底とする対数	math.log(x, k)
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
関数によってデータフレームをまとめた表を使う	df.groupby(関数)
今日をタプルに変換する	datetime.datetime.today().timetuple()
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
日付時刻データが日付時刻データより前かどうか調べる	aDatetime < aDatetime2
ベージュ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
データフレームの最頻値を求める	df.mode()
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
折れ線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
カラムを四捨五入する	ds.round()
カウンタを作成する	collections.Counter()
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
文字列を黒色で表示する	print(f'\033[30m{value}\033[0m')
データフレームの列の欠損値を直後の値で埋める	df[col].fillna(method='bfill')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
ダークゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
インディアンレッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
データフレームの中のカラムを中央値で分割する	pd.qcut(df[col], 2)
文字列をコロンで区切って文字列リストに変換する	s.split(':')
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
各列毎にデータフレームを集約し、、列の合計を求める	df.groupby(column)[column2].sum()
データフレームのカラムの中にある文字列の合計をカウントする	df[col].isin([value]).sum()
データ列が正規分布に従うかどうか調べる	scipy.stats.shapiro(データ列)
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
最大値と最小値を使ってデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: フォントの色をシルバーに設定する	color = 'silver'
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームのカラムのタイムゾーンを文字列にする	df[col].tz_convert(s)
xが一桁の数	-9 <= x <= 9
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
散布図のダイアモンド印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
数列と配列についての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
option: ネイビー色を使用する	color = 'navy'
上限のある両端キュー	collections.deque(maxlen=n)
横棒グラフをダークブルー色を使って描画する	plt.barh(データ列x, データ列y, color='darkblue')
ミディアムシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
データフレームの中にいくつ未入力値が存在するかカウントする	df.isna().sum()
作画のフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ダークスラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ベクトルにはいくつ要素があるか調べる	aArray.size
降順に表データを破壊的に列名リストによってソートする	df.sort_values(by=column, ascending=False, inplace=True)
棒グラフをダークサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='darksalmon')
アリスブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
タイムスタンプデータからn日を減算する	aDatetime - datetime.timedelta(days=n)
タプルをミュータブルにする	list(aTuple)
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
折れ線グラフの下三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
option: 色をバリーウッドに設定する	color = 'burlywood'
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームのリストカラムの中にある日付データと文字列の数を数える	df[aList].isin([value, value2]).sum()
ホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: グラフの色をオールドレースに変更する	color = 'oldlace'
ライトコーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
大バツマーカーを使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
配列と数列について散布図を描いて、下三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
option: カーキにグラフの色を設定する	color = 'khaki'
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
nの8進文字列を使う	oct(n)[2:]
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
マッピング上でキーが未定義	key not in aDict
赤い破線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
データ列が何時か見る	ds.dt.hour
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
option: バイナリ書き込み用に変更する	mode = 'wb'
タプルをナンバリングする	enumerate(aTuple)
散布図に赤い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
データフレームの中にあるの数を求める	df.isin([value]).sum()
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
ビン数nとして列を分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: ロージーブラウン色を使用する	color = 'rosybrown'
平均値でデータフレームの欠損値を埋める	df.fillna(df.mean())
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
プロットにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
横棒プロットを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
Pandasで、フォーマットfmtを使ってデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
列を文字列リストに変換して、カンマによって連結する	','.join(map(str, iterable))
セットが空か調べる	len(aSet) == 0
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
配列をリストから作る	np.array(aList)
今日が日曜日か確認する	datetime.datetime.today().weekday() == 6
オブジェクトは論理値クラス	isinstance(obj, bool)
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
文字列の先頭から空白を除く	s.lstrip()
n番目のカラムを行としてCSVタブ区切りのファイルを読み込む	pd.read_csv(filename, index_col=n)
変数名をキーとして、辞書	dict(name=element)
実数の小数点以下を四捨五入する	round(x)
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
本日をタプルに変換する	datetime.datetime.today().timetuple()
回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
列'A'と列'B'をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
JSONLファイルにSJISでデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
データ列の時	ds.dt.hour
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
縦棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
二つの値をカンマで区切ってプリントする	print(value, value2, sep=',')
ミディアムスプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
値が集合に含まれないか判定する	element not in aSet
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
文字列にタプルを変換して、部分文字列によって連結する	sub.join(map(str, iterable))
データ列を千の位で丸めて、整数にする	ds.round(-3).astype(int)
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
ハニーデューにヒストグラムの色をする	plt.hist(データ列, color='honeydew')
色付きの破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
部分文字列で文字列の開始位置以降が始まるか	s.startswith(sub, start)
データフレームの中に存在する文字列と文字列の数を求める	df.isin([value, value2]).sum()
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームのリストカラムのNaNを最小値で埋める	df[aList].fillna(df[aList].min())
ゼロ埋めされたブール型の配列を作る	np.zeros(要素数, dtype=np.int32)
データフレームの欠損値をxで埋める	df.fillna(x)
文字列を部分文字列で分けた時の前半の文字列	s.partition(sub)[0]
日付時刻データの秒数	aDatetime.second
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
数列を円プロットにする	plt.pie(データ列, startangle=90)
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
リストのn番目からn2番目	aList[n:n2]
rgbの星マーカーを配列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
option: ライトグレーを使う	color = 'lightgrey'
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
度数分布図の上限下限を変更する	plt.hist(データ列, range=(start, end))
２つのデータフレームを異なる列をキーにして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
両端キュー中の値の位置	deq.index(element)
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
option: ライトブルーを使う	color = 'lightblue'
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: ミディアムオーキッドに色を設定する	color = 'mediumorchid'
二つの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
日付時刻データは日付時刻データより前か調べる	aDatetime < aDatetime2
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
リストとリストの散布図を描画してマーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
折れ線グラフとして数列を描画する	plt.plot(データ列x, データ列y)
散布図に黒い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
option: オリーブ色を用いる	color = 'olive'
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
部分文字列が文字列の開始位置からと終了位置の間にある	s.find(sub, start, end) != -1
最大値・最小値の範囲として一様な乱数を生成する	random.uniform(最小値, 最大値)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
乱数シードをnで固定する	random.seed(n)
実行結果を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
破壊的に'A'列によって小さい順にデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
実数を実数で整数除算する	x // y
カラムの未入力値を最大値で埋める	ds.fillna(ds.max())
nをn2で割った余りをnに代入する	n %= n2
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
データフレームの列の中にある文字列との合計を数える	df[col].isin([value, value2]).sum()
数列とイテラブルについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データ列が何日か確認する	ds.dt.day
option: 文字コードを文字コードtextに設定する	encoding = text
真⊂かどうか調べる	aSet < aSet2
ひとつでもアスキー文字が文字列内に含まれる	any(c.isascii() for c in s)
四角印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
nが3の倍数か判定する	n % 3 == 0
モカシン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
双方向キューのデータを反転する	deq.reverse()
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
回帰モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
数列とリストについての散布図に三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
十六進数字を見る	string.hexdigits
データフレームの空文字をNaNに変換しドロップする	df.replace('', np.nan).dropna()
散布図の上三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
option: グラフの色を真紅に設定する	color = 'crimson'
データ列は正規分布からどの程度尖っているか確認する	ds.skew()
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
ファイルパスを追加できるようにBOM付きでオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
option: オレンジ色を用いる	color = 'orange'
グラフの用途を画面に設定する	sns.set(context='notebook')
重回帰モデルの残差を計算する	目的変数 - model.predict(説明変数)
折れ線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
リストの平均値	sum(aList)/len(aList)
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
データフレームのカラムの欠損値を中央値に指定する	df[col].fillna(df[col].median())
ふたつの関係がスーパーセットかどうか調べる	aSet.issuperset(aSet2)
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
イテラブルとリストについて散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
有理数を使う	import fractions
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
データフレームのカラムの名前を変更する	df.rename(columns={column: name})
実数を整数で割る	x / y
文字列がリストに含まれないか調べる	element not in aList
文字列は全て識別子名かどうか調べる	s.isidentifier()
回帰分析をサポートベクターマシンとして行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
表データの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
nかけるn2	n * n2
3自然数のGCDを計算する	math.gcd(n, n2, n3)
折れ線グラフの左三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
青い実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ふたつの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
変数を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
双方向キューの最初から要素を削除する	deq.popleft()
散布図の丸マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
赤い一点鎖線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
option: オリベドラブにグラフの色をする	color = 'olivedrab'
青い実線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
文字列を部分文字列で二分し、残りの文字列を見る	s.partition(sub)[-1]
グラフの描画で色差別なく色を用いる	sns.set(pallete='colorblind')
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
色付きの一点鎖線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
変数がマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, -oo)
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
リストを中央値でビニングする	pd.qcut(aList, 2)
文字列に日本語が含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ビン数nとしてデータフレームの中の列をビン分割する	pd.cut(df[col], n)
option: ダークマゼンタ色を使用する	color = 'darkmagenta'
rgbの丸マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
配列の型	aArray.dtype()
データフレームを列によって小さい順にソートする	df.sort_values(by=column, ascending=True)
日付時刻データの分を使う	aDatetime.minute
空のロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
配列と数列についての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストのn番目の	aList[n]
タプルをインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
整数nを十六進数文字列に変換する	hex(n)[2:]
データフレームのカラムは何曜日か確認する	df[col].dt.weekday_name
赤い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
option: 色をサーモンに指定する	color = 'salmon'
折れ線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
データフレームから指定された３つの列を抽出する	df[[column, column2, column3]]
ヒストグラムの色をスノーに変更する	plt.hist(データ列, color='snow')
列のそれぞれを関数でフィルタする	map(func, iterable)
option: フォントの色をアイボリーに変更する	color = 'ivory'
16進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
ファイルを文字コードtextとして開く]	open(filepath, encoding=text)
要素は辞書の値に含まれていないか調べる	element not in aDict.values()
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
カウンタの項目の出現回数	aCounter[element]
option: 色をダークターコイズに設定する	color = 'darkturquoise'
線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列リストを結合する	''.join(aStringList)
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
カラム名リストをデータ型でフィルタする	df.select_dtypes(型).columns
PandasでdateStringを日付データに変換する	pd.to_datetime(dateString)
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームを破壊的に降順に複数の列によってソートする	df.sort_values(by=column, ascending=False, inplace=True)
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
棒グラフをダークグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgreen')
三つの文字列をプリントする	print(value, value2, value3)
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
カラムの一意な要素数	df[col].nunique()
リストとデータ列について散布図を描き、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
二変数の最小値	min(x, y)
箱ひげ図を描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: 読み込まないフッタをnに設定する	skipfooter = n
データフレームを表示するときカラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
プログラムを強制的に止める	sys.exit()
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムの色をオーキッドにセットする	plt.hist(データ列, color='orchid')
x座標の目盛の値を変更する	plt.xticks(目盛りの値リスト)
option: ダークオーキッド色を使う	color = 'darkorchid'
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
二つのデータフレームを異なるカラムをキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームをグループ化し、それぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
等差数列をベクトルにする	np.arange(開始値, 終了値, 等差)
行列の平均値	np.mean(aArray)
文字列が全て数値か調べる	s.isnumeric()
文字をユニコードに変換する	ord(ch)
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
双方向キューから指定した範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームの列の文字列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
ロバストな線形回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
option: フォントの色をグリーンイエローにセットする	color = 'greenyellow'
横棒グラフをダークシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkcyan')
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
等間隔でn個にリストを分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図の印を▼にする	plt.scatter(データ列x, データ列y, marker='v')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
配列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
二つのベクトルを縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
文字列をカンマで分割し、、列挙する	s.split(',')
イテラブルを文字列リストに変換して空白を用いて連結する	' '.join(map(str, iterable))
既存のファイルパスを追加できるようにEUCとしてオープンする]	open(filepath, mode='a', encoding='euc_jp')
双方向キューに要素をプッシュする	deq.append(element)
リストと配列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
珊瑚色でヒストグラムを描画する	plt.hist(データ列, color='coral')
セットが空集合か調べる	len(aSet) == 0
文字列をキャピタライズする	s.capitalize()
Pandasのバージョンを表示する	print(pd.__version__)
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ダークバイオレット色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
オブジェクトが属性を持つかどうか	hasattr(obj, プロパティ名)
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
n個の整数リスト	list(range(n))
SVDを行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
マップの項目名を要素に設定する	aDict[key] = element
データフレームの中でカラムに重複があるか調べる	df.duplicated(subset=column)
実数の自然対数を求める	math.log(x)
データフレームの列の欠損値を平均に増やす	df[col].fillna(df[col].mean())
ヒストグラムをシアン色として描画する	plt.hist(データ列, color='cyan')
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
列'A'と列'B'をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ヒストグラムをレモンシフォン色を用いて描画する	plt.hist(データ列, color='lemonchiffon')
文字列中のタブ文字をn個の空白にする	s.expandtabs(tabsize=n)
散布図の印を四角印にする	plt.scatter(データ列x, データ列y, marker='s')
データフレーム全体をインデックスでソートする	df.sort_index()
配列の累積積を求める	np.cumprod(aArray)
OSがWindowsかどうか調べる	sys.platform.startswith('win32')
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
要素は集合に含まれる	element in aSet
カラムの空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
目盛り線	plt.grid(linewidth=3.0)
環境はマックかどうか調べる	sys.platform.startswith('darwin')
データ列を柱状図にする	plt.hist(データ列)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図をミディアムスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
カテゴリ列で色付けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
辞書のの一覧を得る	aDict.values()
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
option: スキップするフッタをnにセットする	skipfooter = n
浮動小数点数の逆双曲線余弦	math.acosh(x)
xの小数点以下'5'桁までを出力する	print(':.5f'.format(x))
xの小数点以下'2'桁まで出力する	print(':.2f'.format(x))
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
２つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
n個分右に両端キューの順序を輪番で回す	deq.rotate(n)
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
データ列の最頻値	ds.mode()
文字列の中のASCII限定として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
色付きの一点鎖線として折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
リストとイテラブルについての散布図に黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列の標本標準偏差	ds.std()
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
整数nの二進数表記を求める	bin(n)
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームを列の値によって集計する	df.groupby(column)
配列の行ごとの分散を見る	np.var(aArray, axis=1)
n2がn以上、かつ、n3以下かどうか確認する	n <= n2 and n2 <= n3
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
実数がNaNか	math.isnan(x)
△印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ゼロ埋めしたブール型の配列	np.zeros(要素数, dtype=np.int32)
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
予測値とデータの離れ具合を図示する	sns.residplot(x='列名', y='列名', data=df)
散布図に黒い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列を最後の部分文字列で分けた場合の後半の文字列を取り出す	s.rpartition(sub)[-1]
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
option: データ型として論理値型を用いる	dtype = np.int32
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ひとつでも非アスキー文字が文字列中に含まれるか	any(not c.isascii() for c in s)
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
破壊的にデータフレームを'A'列によってで並べる	df.sort_values(by='A', inplace=True)
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
棒グラフを珊瑚色を使って描画する	plt.bar(データ列x, データ列y, color='coral')
文字列を最後の部分文字列で分割した場合の最初の文字列	s.rpartition(sub)[0]
濃いシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームとしてTSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
文字列の開始位置から終了位置の範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
データフレームのリストカラムのどの値が最も現れるか見る	df[aList].mode()
option: ダークターコイズ色を使う	color = 'darkturquoise'
双方向キュー中の要素の数をカウントする	deq.count(element)
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームを列名リストで整列する	df.sort_values(by=column)
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
リストを順番付けする	enumerate(aList)
列の各要素に対してpredicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームの中の列をn個に等間隔でビンニングする	pd.cut(df[col], n)
折れ線グラフをピーチパフ色を使って描画する	plt.plot(データ列x, データ列y, color='peachpuff')
実数のn乗して浮動小数点数による余りを求める	pow(x, n, y)
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
プロットを画面用に指定する	sns.set(context='notebook')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
タプル中の最初のオブジェクトを探す	aTuple.index(element)
リストとリストについて散布図をプロットして、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
データフレームを表示するとき、表示される行数を減らす	pd.set_option('display.max_rows', n)
文字列をカンマで分割して文字列リストに変換する	s.split(',')
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
nを十六進文字列にする	hex(n)[2:]
折れ線グラフの色を黄色にセットする	plt.plot(データ列x, データ列y, color='yellow')
データフレームを'A'列と'B'列で集約する	df.groupby(['A', 'B'])
シスルにヒストグラムの色を変更する	plt.hist(データ列, color='thistle')
折れ線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームのn行目を消して、入れ替える	df.drop(n, axis=0, inplace=True)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
列によってデータフレームをグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
option: フォントの色をライトグリーンに指定する	color = 'lightseagreen'
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
predicateFuncが真となる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
カラムの未入力値を中央値に設定する	ds.fillna(ds.median())
サポートベクター分類モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
平均値付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムと勾配ブースティングを用いて回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図を左三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='<')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
天井	math.ceil(x)
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームを列の値にグループ分けして、各グループの分散を求める	df.groupby(column).var()
線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
上三角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
option: 色をミディアムスレートブルーに指定する	color = 'mediumslateblue'
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
rgbのクロスマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
タプルのn番目のの値	aTuple[n]
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
リストとリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームの列の中に文字列があるか調べる	df[col].isin([value])
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
データ列の分散を求める	ds.var()
ヒストグラムをオールドレース色を用いて描画する	plt.hist(データ列, color='oldlace')
線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
nからn2の値を引いてnに代入する	n -= n2
散布図をバツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x')
データフレームは正規分布からどの程度歪んでいるか見る	df.kurt()
ダークグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
組の要素をソートする	sorted(aTuple)
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
option: バイオレット色を使用する	color = 'violet'
タプルが全て真	all(aTuple)
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
リストとリストについての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームのそれぞれのグループ毎の平均値	df.groupby(column).mean()
データフレームを10の位で丸める	df.round(-1)
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
タイムスタンプデータが土曜日か調べる	aDatetime.weekday() == 5
黒い上三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図のバツ印の大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
nがn2の倍数でないかどうか確認する	n % n2 != 0
実数に実数を加算する	x + y
数式を因数分解する	sympy.factor(e)
option: サーモンにフォントの色を変更する	color = 'salmon'
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
要素は集合に含まれるか調べる	element in aSet
データフレームから指定された二つの列だけ取り出す	df[[column, column2]]
シーケンスを文字列に変換して一つにする	''.join(map(str, iterable))
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
アルファベットの小文字列	string.ascii_lowercase
線グラフの色をダークバイオレットに指定する	plt.plot(データ列x, データ列y, color='darkviolet')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
赤い大バツマーカーをデータ列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図をダークブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ふたつの集合の差集合	aSet.difference(aSet2)
数列の変遷を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
既存のベクトルをベースにして全要素が初期値のベクトル	np.full_like(aArray, 初期値)
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
実数が無限大か確認する	math.isinf(x)
等差数列から整数乱数を算出する	random.randrange(start, end, step)
スノー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
青緑にヒストグラムの色をセットする	plt.hist(データ列, color='teal')
日付データの日を見る	aDate.day
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
データフレームからカテゴリデータの列名リストを求める	df.select_dtypes('object').columns
データ列の欠損値を最小値で補う	ds.fillna(ds.min())
横軸の目盛を対数に変更する	plt.xscale('log')
データ列の欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
リストが空かどうか	len(aList) == 0
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
文字列を黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
カウンタを辞書から作成する	collections.Counter(aDict)
タイムスタンプデータの曜日を整数で求める	aDatetime.weekday()
ミディアムパープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
文字列中に非空白が含まれるか調べる	any(not c.isspace() for c in s)
option: フォントの色をアイボリーに指定する	color = 'ivory'
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
リストからn個、サンプリングする	random.sample(iterable, k=n)
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
ベクトルの列ごとの分散を求める	np.var(aArray, axis=0)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
option: 印を右三角に変更する	marker = '>'
最大長を指定して両端キュー	collections.deque(maxlen=n)
配列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
部分文字列を安全に文字列の接頭辞から消す	s.removeprefix(sub)
t分布型確率的近傍埋め込み法で多次元データを濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフに青い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ふたつの集合はセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
散布図に赤い菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
option: グラフの色を青紫に指定する	color = 'violet'
データフレームのカラムの中にがある	df[col].isin([value])
nプラスn2	n + n2
データ列の値を一度にValueMapで置き換える	ds.replace(ValueMap)
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
グリッド線	plt.grid(color='#800080')
numpyを用いる	import numpy as np
文字列の先頭から空白を除去する	s.lstrip(' ')
'A'列によってデータフレームを並べ、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
青にヒストグラムの色を変更する	plt.hist(データ列, color='blue')
スカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
縦棒グラフをレベッカパープル色を使って描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
グラフ描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームを表示するとき、ヘッダー行を左寄せにセットする	pd.set_option('colheader_justify', 'left')
列の全順列を得る	itertools.permutations(iterable)
モードでデータフレームの未入力値を埋める	df.fillna(df.mode().iloc[0])
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
データフレームのカラムを小数点以下n桁で四捨五入する	df[col].round(n)
線グラフを赤い一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図の丸印を青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
オブジェクトのフィールドの値を求める	getattr(obj, プロパティ名)
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
複数行対応として正規表現で文字列を区切る	re.split(pattern, s, flags=re.MULTILINE)
ファイルからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
2つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
ヒストグラムを小麦色色を使って描画する	plt.hist(データ列, color='wheat')
option: アクアマリンに色を指定する	color = 'aquamarine'
データフレームを列の値によってグループ化して各グループごとの最小値を計算する	df.groupby(column).min()
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
データ列の偏りを対数変換する	np.log(データ列)
横棒グラフを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
散布図の丸印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: マーカーを四角に変更する	marker = 's'
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームの中の列を等しい量になるようにビン数nとしてビン分割する	pd.qcut(df[col], n)
データフレームを複数の列によって昇順に整列し、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: グラフの色をハニーデューにする	color = 'honeydew'
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
リストとリストについて散布図を描画して、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図をミディアムスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
option: 三２ビット整数型を使う	dtype = np.int16
option: フォントの色をミディアムブルーに設定する	color = 'mediumblue'
整数nがタプルのどれか	n in aTuple
赤い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
実数を十六進表記の文字列に変換する	x.hex()
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
文字列内に小文字が含まれるか	any(c.islower() for c in s)
rgbの下三角マーカーをデータ列とデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
文字列の右端からタブを除く	s.rstrip('\t')
最頻値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].mode().iloc[0])
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
浮動小数点数の最小値	sys.float_info.min
option: ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
2つの列でデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: グラフの色をシスルに指定する	color = 'thistle'
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
option: ライトサーモン色を用いる	color = 'lightsalmon'
文字列から部分文字列を全て除く	s.replace(sub, '')
スタックのn番目にデータを挿入する	deq.insert(n, element)
ヒストグラムを青緑色を使って描画する	plt.hist(データ列, color='teal')
貝殻色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
option: フォントの色をダークカーキに設定する	color = 'darkkhaki'
データフレームをグループ化しそれぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
二つのデータフレームを異なる列をキーにして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
データフレームをに箱ひげ図としてプロットする	sns.boxplot(x='カテゴリ列', y='列', data=df)
日付データが月曜日か調べる	aDate.weekday() == 0
データフレームのリストカラムの欠損値を最小値に変更する	df[aList].fillna(df[aList].min())
項目名で指定された項目を辞書からポップする	aDict.pop(key)
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
折れ線グラフをピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='pink')
散布図をダークシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
option: ライトグレー色を用いる	color = 'lightgrey'
列のイミュータブルなセットを生成する	frozenset(iterable)
option: 星印を使用する	marker = '*'
データフレームの行の名前の一覧	df.index
option: 色をオリーブに変更する	color = 'olive'
option: カンマを区切りで用いる	sep = ','
nがn2未満またはn3以上か判定する	n < n2 or n >= n3
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
破線としてヒストグラムを描く	plt.hist(データ列, linestyle='dashed')
シーケンスから両端キューを作る	collections.deque(iterable)
カウンタのユニークな値をリストとして得る	list(aCounter)
書き込み用にファイルパスをUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
option: 改行コードをWindowsに変更する	newline = '\r\n'
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
タイムスタンプデータからn日を減らす	aDatetime - datetime.timedelta(days=n)
異なるカラムをキーとして２つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図に菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
データフレームのカラムの25パーセンタイル	df[col].quantile(0.25)
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
折れ線グラフの丸印の線幅を指定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
レモンシフォンにヒストグラムの色を変更する	plt.hist(データ列, color='lemonchiffon')
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
ファイルを読む	pd.read_excel(filename)
浮動小数点数の三乗	x ** 3
option: ネイビーを使う	color = 'navy'
線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
配列をn個にビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
2変数の一番小さい値を計算する	max(x, y)
実数のkを底とする対数	math.log(x, k)
数列とリストについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
文字列をパターンによって置換する	re.sub(pattern, newsub, s)
最後の部分文字列で文字列を二分し前半の文字列を見る	s.rpartition(sub)[0]
データフレームのカラムの欠損値を最大値で置換する	df[col].fillna(df[col].max())
折れ線グラフに大バツ印を加える	plt.plot(データ列x, データ列y, marker='X')
散布図を黒いバツマーカーとして描く	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
データ列の推移を青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームを'A'列と'B'列で昇順に並べる	df.sort_values(by=['A', 'B'], ascending=True)
折れ線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
データフレームの列の25パーセンタイル	df[col].quantile(0.25)
破線にラインの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ASCII限定として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
option: グラフの色をスレートブルーに変更する	color = 'slateblue'
散布図の右三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
整数nが組のどれか	n in aTuple
ファイルを追加できるようにBOM付きを用いてオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
入力ストリームからn文字、読み込む	f.read(n)
データ列の中に含まれる文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
ネイビーにヒストグラムの色をする	plt.hist(データ列, color='navy')
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
シーケンスのイミュータブルな集合	frozenset(iterable)
データフレームの列の値がx以上のデータを抽出する	df[df[column] >= x]
option: パレットトルコイズを使う	color = 'paleturquoise'
紺色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
中央値でデータ列のNaNを置き換える	ds.fillna(ds.median())
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
オプションで、標準エラーを出力にする	file = sys.stderr
文字列中から部分文字列を探す	s.find(sub)
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
表データの各次元の大きさを見る	df.shape
要素ひとつのりスト	[element]
円グラフを真円にする	plt.axis('equals')
値を両端キューにスタックする	deq.append(element)
折れ線グラフに四角印を使用する	plt.plot(データ列x, データ列y, marker='s')
データフレームをJSONLファイルにBOM付きで書き込む	df.to_csv(filename, encoding='utf_8_sig')
散布図に赤いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図をオリベドラブ色として描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
散布図をミディアムアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='magenta')
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
イテラブルを文字列リストに変換して、空白を用いて一つにする	' '.join(map(str, iterable))
リストとリストについての散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
異なる列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームのカラムの中に文字列と文字列がいくつ含まれるかカウントする	df[col].isin([value, value2]).sum()
option: ブラック色を使用する	color = 'black'
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
箱ひげ図を２つ並べて描く	plt.boxplot([データ列, データ列])
リストとリストについての散布図に▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
半透明の破線でイテラブルの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
option: レベッカパープルにフォントの色を設定する	color = 'rebeccapurple'
データフレームからn番目のカラムを消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: サドルブラウンにグラフの色を変更する	color = 'saddlebrown'
option: 降順にする	ascending = False
formatのパターンを用いて文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ディープスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームの未入力値をメディアンに設定する	df.fillna(df.median())
散布図のクロスマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgray')
文字列はPythonのキーワードかどうか判定する	keyword.iskeyword(s)
リストの要素を逆順にする	aList[::-1]
リストの要素を昇順に並べる	sorted(aList, reverse=True)
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
プロットの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: フォレストグリーン色を使用する	color = 'forestgreen'
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
オブジェクトがタプルの要素でないかどうか調べる	element not in aTuple
折れ線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: 青緑色を使う	color = 'teal'
スタックをリストにする	list(deq)
option: スラグレー色を使う	color = 'slategray'
現在が木曜日か	datetime.datetime.today().weekday() == 3
データフレームの指定された列を選ぶ	df[column]
ファイルが存在するかどうか調べる	os.path.exists(filepath)
データフレームを列で並べて上位を取り出す	df.sort_values(columns).head(n)
データフレームを列によってソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
カウンタをイテラブルを出現回数して、更新する	aCounter.update(iterable)
折れ線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
最小値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].min())
ライトゴールドロディイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightgoldenrodyellow')
リストを逆順にする	aList[::-1]
青いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームのカラムの平均を算出する	df[col].mean()
文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
珊瑚色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
ライトブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
行列の累積和を求める	np.cumsum(aArray)
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
option: カンマを分割記号で使う	sep = ','
itertoolsモジュールをインポートする	import itertools
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
データフレームを1000の位で丸める	df.round(-3)
オブジェクトが名前付きタプルのインスタンスかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
既存のファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
option: バイナリ書き込みモードを使う	mode = 'wb'
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
option: グレーを使う	color = 'gray'
データフレームのカラムの欠損値を中央値で置換する	df[col].fillna(df[col].median())
左三角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
淡いピンク色色としてヒストグラムを描画する	plt.hist(データ列, color='lightpink')
降順に列でによってデータフレームを並べ直す	df.sort_values(by=column, ascending=False)
option: グラフの色をタンに変更する	color = 'tan'
散布図に▲マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
配列の形状を求める	aArray.shape
ファイルを追加モードとしてオープンして]、fとする	f = open(filepath, mode='a')
第二コマンド引数を知る	sys.argv[1]
タプルのn番目からn2番目までの部分を得る	aTuple[n:n2]
パラメータについて数式の微分を行う	sympy.diff(e, z)
赤いポイントマーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: バイナリ書き込みモードに設定する	mode = 'wb'
nとn2の排他的論理和	n ^ n2
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
現在処理中の例外を情報を調べる	sys.exc_info()
ヒストグラムをライトゴールドロディイエロー色を使って描画する	plt.hist(データ列, color='lightgoldenrodyellow')
文字列の終了位置より前に部分文字列が含まれる	s.find(sub, 0, end) != -1
文字列の先頭から空白やタブを取り除く	s.lstrip()
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
サーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
日本語が文字列に含まれるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
option: インデックスを自動的な連番にセットする	index_col = None
組の最初のn要素を取り除く	aTuple[n:]
組のn番目からn2番目までの部分を取り出す	aTuple[n:n2]
線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
option: アクアマリンにグラフの色を指定する	color = 'aquamarine'
折れ線グラフの色をダークシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
K最近傍法としてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
重回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
ミディアムスレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
文字列の開始位置からと終了位置の間に部分文字列が存在する	s.find(sub, start, end) != -1
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
本日が月曜日	datetime.datetime.today().weekday() == 0
データフレームのカラムを散布図で見て、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
折れ線グラフの▼印の線幅を設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ファイル名がテキストファイル	filename.endswith('.txt')
Pandasでデータフレームのcollをフォーマットfmtとしてタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
正規分布の累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームのリスト列の欠損値をxに設定する	df[aList].fillna(x)
辞書に辞書の項目を追加する	aDict.update(aDict2)
配列とリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
リストと数列の散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
option: パレットトルコイズにフォントの色を設定する	color = 'paleturquoise'
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
option: グラフの色をトマトに変更する	color = 'tomato'
オプションで、標準出力を使う	file = sys.stdout
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
図の大きさをセットする	plt.figure(figsize=(横幅, 高さ))
辞書順で文字列が文字列より前かどうか確認する	s < s2
両端キューに文字列をエンキューする	deq.appendleft(element)
ヒストグラムの色をミディアムパープルに変更する	plt.hist(データ列, color='mediumpurple')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
浮動小数点数の逆余弦	math.acos(x)
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
集合が空か調べる	len(aSet) == 0
option: フローラルホワイトにグラフの色を指定する	color = 'floralwhite'
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
色使いを全般的に濃くする	sns.set(pallete='deep')
NaNも加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
option: 色をスノーに変更する	color = 'snow'
ヒストグラムを上限から下限までの上限下限でプロットする	plt.hist(データ列, range=(start, end))
日付時刻データはタイムスタンプデータよりあとかどうか調べる	aDatetime > aDatetime2
データフレームを転置する	df.T
データフレームのリストカラムはどの程度、分散しているか見る	df[aList].var()
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
両端キューに要素をプッシュする	deq.append(element)
データフレームを各列毎にグループ化して、文字列という名前のグループを使う	df.groupby(column).get_group(s)
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
実数が有限か調べる	math.isfinite(x)
ダーク・スラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
整数nの2進数文字列	bin(n)[2:]
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームを列の値ごとにグループ化して、最小値を求める	df.groupby(column).min()
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: スカイブルーを用いる	color = 'skyblue'
黒い右三角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームから型リストで指定されたデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
小数点数の逆双曲線正接	math.atanh(x)
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
文字列リストにイテラブルを変換して部分文字列でつなげる	sub.join(map(str, iterable))
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
箱髭図にラベルを設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのリスト列を四捨五入して、整数型にする	df[aList].round().astype(int)
空のカウンタ	collections.Counter()
リストの値を小さい順に並べ直す	sorted(aList, reverse=False)
配列とリストについて散布図をプロットしてマーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
キーがマップ上で定義済みか調べる	key in aDict
文字列を走査しパターンにマッチするか調べる	re.search(pattern, s)
ミディアムターコイズ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: 最初の行をヘッダに変更する	header = 0
データフレームのカラムが何月か調べる	df[col].dt.month
長さnのリストを作る	[0] * n
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
2を底とする実数の対数を算出する	math.log2(x)
要素ひとつのタプル	(element,)
二つのリストの共通りストを使う	list(set(aList) & set(aList2))
折れ線グラフを暗い赤色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームの重複していない行のみを取り出す	df[not df.duplicated(keep=False)]
ヒストグラムの描画し、正規化する	plt.hist(データ列, density=True)
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
option: ライトグリーン色を使う	color = 'lightseagreen'
2つのデータ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
データ列の曜日数を使う	ds.dt.dayofweek
ユーザの入力を整数として受け取る	int(input())
ペルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
行列の行ごとの分散	np.var(aArray, axis=1)
折れ線グラフを描画して、色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
イテラブルから両端キューを作る	collections.deque(iterable)
nとn2のビット和を求める	n | n2
集合の要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
線グラフをディムグレー色を使って描画する	plt.plot(データ列x, データ列y, color='dimgrey')
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
折れ線グラフの▲印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
数値の微分を求める	sympy.diff(e)
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
列'A'と列'B'をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: グラフの色を黄色に設定する	color = 'yellow'
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
文字列内に大文字があるか	any(c.isupper() for c in s)
現在の作業ディレクトリを求める	os.getcwd()
黒い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
数値の変数に数式を代入する	e.subs(z, e2)
プラットホームの名前	sys.platform
option: ライトグレーを使う	color = 'lightgray'
データフレームの指定された列をリストに変換する	df[column].values.tolist()
ビン数nでデータ列をビン分割する	pd.cut(ds, n)
option: フォントの色をライトグリーンに変更する	color = 'lightseagreen'
文字列を全て小文字にする	s.casefold()
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
赤い点線としてリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームのカラムのNaNをxに変更する	df[col].fillna(x)
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームを列名リストによってソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
値を赤色にする	f'\033[31m{value}\033[0m'
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
option: ポイントマーカーを使う	marker = '.'
既存の行列を元にして全要素が1の配列	np.ones_like(aArray)
変数が0に近づくときの数値の極限値を求める	sympy.limit(e, z, 0)
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
nをn2だけ増加させる	n += n2
ファイルをバイナリ用に開いて]、fとする	f = open(filepath, mode='rb')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
リストと配列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
線形モデルの回帰変数を使う	model.coef_
色付きの一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
多い順にカウンタを列挙する	aCounter.most_common()
データフレームのリスト列を10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
データフレームをグループ化し、それぞれの列に対し個数を計算する	df.groupby(column)[column2].count()
カウンタからゼロカウントを取り除く	+aCounter
配列と同じ大きさの空のベクトルを作成する	np.empty_like(aArray)
ファイルをオープンして]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
大きさnでリストとリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
nとn2のビット積	n & n2
ハローワールドをプリントする	print('Hello World')
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
カテゴリ列で色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのリスト列の未入力値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
データ列の空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
縦棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
今日が土曜日	datetime.datetime.today().weekday() == 5
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
今日の日付時刻	datetime.datetime.today()
ブランチドアーモンド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
リストの先頭のn要素を取り除く	aList[n:]
option: グラフの色を青紫にする	color = 'violet'
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
代数計算を使う	import sympy
データ列の時刻を求める	ds.dt.hour
option: マルーン色を用いる	color = 'maroon'
最大長nの両端キューを作る	collections.deque(maxlen=n)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
折れ線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
option: ダークシアンを使う	color = 'darkcyan'
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
数列とリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列を最後から空白で分割する	s.rsplit()
データ列とリストについて散布図をプロットし、、三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightseagreen')
ディムグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームを四捨五入して整数型にする	df.round().astype(int)
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
全８進数字	string.octdigits
データフレームから指定された列名一覧の列だけ選択する	df[columns]
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
要素が辞書の値に含まれていない	element not in aDict.values()
リストと配列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: ロージーブラウンを使用する	color = 'rosybrown'
横棒グラフをダークスラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategray')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データ列のタイムゾーンを日本にする	ds.tz_convert('Asia/Tokyo')
文字列を太字化する	f'\033[1m{value}\033[0m'
option: 色をビスクに設定する	color = 'bisque'
option: ダークグリーン色を使う	color = 'darkgreen'
データフレームの列がx以上かつx2未満の行を選ぶ	df[(x <= df[column]) & (df[column] < x2)]
横棒プロットを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
青い点線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
句点文字を全部使う	string.punctuation
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=[column, column2])
配列を等量でビン数nで分割する	pd.qcut(aArray, n)
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
配列をビン数nとして分割する	pd.cut(aArray, n)
実行時に標準出力がパイプ	not sys.stdout.isatty()
データフレームを列によって昇順に並べる	df.sort_values(by=column, ascending=True)
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームのカラムが文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
フクシア色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
整数nを符号なしでバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
ラベンダーブラッシュ色でヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
ロージーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
文字列内に漢字が使われているかテストする	re.search('[\u4E00-\u9FD0]', s)
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
箱ヒゲ図を2つ並べて描画する	plt.boxplot([データ列, データ列])
部分文字列で文字列を二分する	s.partition(sub)
部分文字列が文字列中に存在するか調べる	sub in s
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
縦棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
八進数字を使う	string.octdigits
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームから型のカラムだけ取り出す	df.select_dtypes(ty)
データフレームのリスト列のpercent分位数	df[aList].quantile(percent/100)
ダークレッド色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
折れ線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームのカラムの中にいくつNaNがあるか数える	df[col].isna().sum()
option: スキップするフッタをnに設定する	skipfooter = n
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図をレモンシフォン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
散布図をタン色として描画する	plt.scatter(データ列x, データ列y, color='tan')
散布図に菱形マーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームが正規分布からどれだけ、尖っているか確認する	df.skew()
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
青い一点鎖線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフの▽印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
option: ダークオーキッド色を使用する	color = 'darkorchid'
Pandasで、フォーマットfmtとして文字列をタイムスタンプに変換する	pd.to_datetime(s, format=fmt)
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ヒストグラムをダークブルー色として描画する	plt.hist(データ列, color='darkblue')
パープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームの中のカラムをn個に分割する	pd.cut(df[col], n)
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームを複数の列によって小さい順に並べ直す	df.sort_values(by=column, ascending=True)
散布図に黒い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームを列の値としてグループ化し、、それぞれのグループ毎の件数を知る	df.groupby(column).size()
線グラフを破線にセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか判定する	s.find(sub, start, end) != -1
option: ホットピンクにグラフの色を指定する	color = 'hotpink'
オブジェクトの属性を値に設定する	setattr(obj, プロパティ名, 値)
rgbの左三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームの文字列をNaNにする	df.replace(s, np.nan)
option: セパレータを改行にする	sep = '\n'
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
日付データからn時間分、減らす	aDate - datetime.timedelta(hours=n)
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
実数の正弦の逆数	math.asin(x)
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
日付時刻データとタイムスタンプデータの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
MSDでパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
nがn2で割り切れるかどうか	n % n2 == 0
横棒グラフをスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='steelblue')
双方向キューの要素を左にn個分輪番で回す	deq.rotate(-n)
数字が文字列内にある	any(c.isdigit() for c in s)
option: グラフの色を赤に設定する	color = 'red'
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
縦軸の目盛を対数に変更する	plt.yscale('log')
option: サーモン色を使う	color = 'salmon'
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
データ列の中のNaNの個数を求める	ds.isna().sum()
タプルを小さい順に並べ変える	sorted(aTuple, reverse=False)
小数点数の床	math.floor(x)
文字列内にひとつでもASCII文字が含まれるか調べる	any(c.isascii() for c in s)
ライトスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ケンドールでデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='kendall')
ビン数nとしてデータフレームの中の列をビニングする	pd.cut(df[col], n)
option: ボックスチャートを横方向にする	vert = False
ファイル名がTSVファイル	filename.endswith('.tsv')
データフレームを二つの列によって集約する	df.groupby(['A', 'B'])
環境はMacOSかどうか調べる	sys.platform.startswith('darwin')
option: グラフの色を貝殻にする	color = 'seashell'
整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
散布図をポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.')
整数nが配列のどれかか調べる	n in aArray
option: 文字列をセパレータで使用する	sep = s
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
配列間の各要素の最大公約数	np.gcd(aArray, aArray2)
線グラフを色付きの破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色を濃いシアンに指定する	plt.hist(データ列, color='darkcyan')
折れ線グラフのバツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
プロットを全般的に暗くする	sns.set(pallete='dark')
データフレームのカラムを十の位で丸める	df[col].round(-1)
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
ビスク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
option: 平均を追記する	showmeans = False
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
データフレームのカラムが何秒か見る	df[col].dt.second
標準出力を使う	sys.stdout
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
サイコロ	random.randint(1, 6)
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
折れ線グラフのラインスタイルを破線に変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
変数が無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, oo)
ライトブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
アンティークホワイト色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: バイナリ用に変更する	mode = 'rb'
赤い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームを'A'列によってまとめた表	df.groupby('A')
option: ビスクを用いる	color = 'bisque'
PandasでUNIX時間のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: 書き込み用に指定する	mode = 'w'
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
Pandasでデータフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col])
option: マゼンタ色を用いる	color = 'magenta'
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*')
JSONLファイルにヘッダを付けずにデータフレームを保存する	df.to_csv(filename, header=None)
アークコサイン	math.acos(x)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを列で分類して、それぞれのグループごとの合計を算出する	df.groupby(column).sum()
データ列の移り変わりを折れ線プロットとして可視化する	plt.plot(range(len(データ列)), データ列)
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
日付データの月数	aDate.month
option: データ型として整数型を使用する	dtype = np.int
実数のハイパボリック・コサインの逆数	math.acosh(x)
散布図の▲マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームの未入力値を最大値で補う	df.fillna(df.max())
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
配列をリストを境界値としてビンニングする	pd.cut(aArray, aList)
回帰モデルを学習する	model.fit(説明変数, 目的変数)
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
option: 左三角印を使用する	marker = '<'
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
タブで区切って二つの値をプリントする	print(value, value2, sep='\t')
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
部分文字列が文字列中にないか調べる	sub not in s
option: グラフの色をチョコレートに設定する	color = 'chocolate'
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
タイムスタンプデータが日曜日かテストする	aDatetime.weekday() == 6
既存のファイルパスを追加できるようにBOM付きとしてオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
シーグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
散布図のダイアモンドマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
改行なしにリストを表示する	print(value, end='')
現在のUNIX時刻	int(time.time())
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
option: シアン色を使う	color = 'cyan'
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムをホワイトスモーク色を用いて描画する	plt.hist(データ列, color='whitesmoke')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
改行する	print()
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
行列の値	aArray[行番号, 列番号]
配列を等しい量になるようにビン数nとしてビニングする	pd.qcut(aArray, n)
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
データフレームの列の未入力値を平均値に設定する	df[col].fillna(df[col].mean())
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: マーカーの色をブラックにする	markerfacecolor = 'black'
ヒストグラムの色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフの菱形マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
EUCでファイルを開く]	open(filepath, encoding='euc_jp')
文字列中に部分文字列が含まれるか調べる	sub in s
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
ヒストグラムの色をオレンジレッドに変更する	plt.hist(データ列, color='orangered')
マッピングの項目名の値	aDict[key]
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
オプションで標準出力を用いる	file = sys.stdout
文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: ダークグレー色を使用する	color = 'darkgrey'
関数の値にデータフレームをグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(関数)]
上限nの両端キューを列から作る	collections.deque(iterable, maxlen=n)
ヒストグラムのビン数をする	plt.hist(データ列, bins=区関数)
データフレームの列名を列から文字列に変更する	df.rename(columns={column: name})
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
データフレームをグループ化し、列に対し合計を求める	df.groupby(column)[column2].sum()
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
パウダーブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='powderblue')
文字列の最初の文字	s[0]
オブジェクトが関数かどうか調べる	callable(obj)
初期値で全要素を初期化した行列	np.full(要素数, 初期値, dtype=np.int)
リストを太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データ列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
散布図に大バツ印を使う	plt.scatter(データ列x, データ列y, marker='X')
縦棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
クラス分類をニューラルネットで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームのカラムの文字列が文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
コーンズシルク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
イテラブルとリストについて散布図を描画して、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
長さnのリスト	[0] * n
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
option: 線の種類を破線に変更する	linestyle = 'dashed'
両端キュー中の値のインデックス	deq.index(element)
オブジェクトにプロパティがある	hasattr(obj, プロパティ名)
データフレームのリスト列の未入力値を平均値で埋める	df[aList].fillna(df[aList].mean())
カウンタを低頻度な方からリストとして得る	aCounter.most_common()[::-1]
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
赤い四角マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データ列を用いる	import pandas as pd
折れ線グラフの色をインディアンレッドにセットする	plt.plot(データ列x, データ列y, color='indianred')
文字列の変数名を数式に変換する	sympy.Symbol(s)
▽印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
2つの表データを列をキーにして外部結合する	pd.merge(df, df2, on=column, how='outer')
データフレームを複数の列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
リストの末尾にリストを追加して拡張する	aList.extend(aList2)
ゼロ埋めされたブール型の行列	np.zeros(要素数, dtype=np.int32)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
散布図を用いてデータフレームの全カラムを可視化する	sns.pairplot(df)
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
nの無限数列	itertools.repeat(n)
列をキーにして２つのデータフレームを結合する	pd.merge(df, df2, on=column)
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
nをn2だけ小さくする	n -= n2
データフレームを降順に破壊的に'A'列を用いてソートする	df.sort_values(by='A', ascending=False, inplace=True)
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームのリストカラムの欠損値を第二四分位数に変更する	df[aList].fillna(df[aList].median())
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
暗くカラーパレットをグラフの描画で用いる	sns.set(pallete='dark')
追加モードとしてファイルパスをオープンする]	open(filepath, mode='a')
リストとリストについて散布図を描いて、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
実数のサインの逆数	math.asin(x)
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列がxの行を選ぶ	df[df[column] == x]
option: グラフの色をライトブルーに設定する	color = 'lightblue'
横棒グラフをライム色として描画する	plt.barh(データ列x, データ列y, color='lime')
グラフの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
文字列中のカタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
EUCでファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
カウンタからタプルをカウントして引く	aCounter.subtract(iterable)
option: ダークバイオレット色を用いる	color = 'darkviolet'
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
文字列が文字列リストに含まれる	s in aStringList
入力ストリーム全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
日付データが木曜日	aDate.weekday() == 3
散布図のマーカーを菱形印にする	plt.scatter(データ列x, データ列y, marker='D')
アンティークホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
折れ線グラフとしてデータ列を描画する	plt.plot(データ列x, データ列y)
データフレームから型の列のみ選択する	df.select_dtypes(ty)
整数nを十六進数表現に変換する	hex(n)
option: 色を半透明にする	alpha = 0.5
数列と数列について散布図を描いて大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
辞書からキーの値	aDict.get(key)
xの小数点以下'4'桁の文字列にする	':.4f'.format(x)
ライトコーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
ダークマゼンタにヒストグラムの色をする	plt.hist(データ列, color='darkmagenta')
option: 決定木の深さを制限する	maxdepth = n
option: ブラウン色を使う	color = 'brown'
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
黒い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ダークバイオレット色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームのリストカラムの第一四分位数を求める	df[aList].quantile(0.25)
文字列を最後の部分文字列で分けた時の後半の文字列	s.rpartition(sub)[-1]
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
勾配ブースティングを使ってクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
直前の値でデータフレームのNaNを埋める	df.fillna(method='ffill')
表データの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
実数を浮動小数点数で整数除算する	x // y
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
再帰の上限を増やす	sys.setrecursionlimit(1000000)
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
予測データのコンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
タプルのn番目からn2番目の部分	aTuple[n:n2]
文字列内に英数字がある	any(c.isalnum() for c in s)
今日の年数	datetime.datetime.today().year
データフレームのリストカラムの要約統計量	df[aList].describe()
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
ふたつの関係が真部分集合か調べる	aSet < aSet2
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
オブジェクトのオブジェクト識別子	id(obj)
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
データフレームを関数の値で集計して、列挙する	[(name, group) for name, group in df.groupby(関数)]
散布図の菱形印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
リストと配列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: ダークシアン色を使う	color = 'darkcyan'
データ列がどれだけ、分散しているか見る	ds.var()
option: マーカーの線幅を変える	markeredgewidth = 2.5
オプションで標準エラーを使用する	file = sys.stderr
マッピングにキーワード引数で更新する	aDict.update(**kwargs)
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
実行時の標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
読み込みできるようにファイルパスをオープンする]	open(filepath, mode='r')
文字列を右寄せにする	s.rjust(文字列幅)
枠なしの簡単な説明を入れる	plt.legend(frameon=False)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームの重複した行を数える	df.duplicated().sum()
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
文字列をセパレータによって区切る	s.split(sub)
オールドレース色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
JSONファイルのファイル入力を読み込んでdataとする	data = json.load(fin)
K最近傍法で回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
データフレームの二つの列を並べてボックスチャートで可視化する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
実数の正接の逆数を求める	math.atan(x)
日付データが日付データと同時か	aDate == aDate2
文字列を黄色で出力する	print(f'\033[33m{value}\033[0m')
３自然数のGCD	math.gcd(n, n2, n3)
タイムスタンプデータにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
折れ線グラフの△マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
箱髭図を二つ並べて描画する	plt.boxplot([データ列, データ列])
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
リストとデータ列についての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ミディアムターコイズ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ヒストグラムを白くする	plt.hist(データ列, color='w')
データフレームのカラムが何月か確認する	df[col].dt.month
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
パーセント付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データ列をビニングする	pd.cut(ds, aList)
数式の数値を求める	float(e)
赤い三角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
数式のパラメータを数式で置き換える	e.subs(z, e2)
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
円グラフを用いて数列の割合を描画する	plt.pie(データ列, startangle=90)
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
タプルのコピーを作る	aDict.copy()
線グラフをハニーデュー色を用いて描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
エンディアンを知る	sys.byteorder
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
データ列のタイムゾーンを東京に変更する	ds.tz_convert('Asia/Tokyo')
option: オレンジに色を設定する	color = 'orange'
ヒストグラムでデータ列を作図する	plt.hist(データ列)
文字列をカンマで区切り、、文字列リストに変換する	s.split(',')
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
データフレームを'A'列を用いて大きい順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
最大値・最小値の範囲で一様な乱数を生成する	random.uniform(最小値, 最大値)
縦棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
アークサイン	math.asin(x)
等間隔でn個にリストを分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの２つのカラムを並べて箱髭図で描画する	plt.boxplot([df['カラム'], df['カラム']])
事前に大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
カウンタをシーケンスで更新する	aCounter.update(iterable)
データフレームのカラムが何時か見る	df[col].dt.hour
数列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
Pandasで、書式としてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
行列の最大	np.max(aArray)
オブジェクトに属性が存在するか	hasattr(obj, プロパティ名)
グラフの見栄えを良くする	import seaborn as sns
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
書式をargsを引数としてフォーマットする	formatText.format(*args)
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
カウンタの最も頻出の項目を計算する	aCounter.most_common()[0]
データフレームの列と列の相関行列を計算する	df[[column, column2]].corr()
ヒートマップとしてデータフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
option: ダークバイオレットを使う	color = 'darkviolet'
option: フクシアにグラフの色を変更する	color = 'fuchsia'
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
グラフのパレットを全般的にパステル調にする	sns.set(pallete='pastel')
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
0からnまでの整数列を作る	list(range(n+1))
配列と配列についての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームを昇順に行によってソートする	df.sort_index(ascending=True)
散布図のマーカーを菱形にする	plt.scatter(データ列x, データ列y, marker='D')
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
データ列の折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
縦棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
最初のカテゴリーを無視し、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
配列の行ごとの平均値を求める	np.mean(aArray, axis=1)
ダーク・スラテグレー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
オブジェクトは組の要素か調べる	element in aTuple
xが一桁の整数か確認する	-9 <= x <= 9
データフレームのn行以降を選択する	df[n:]
option: 淡いピンク色にグラフの色を設定する	color = 'lightpink'
小数点以下3桁までデータフレームをJSONLファイルに書き込む	df.to_csv(filename, float_format='%.3f')
小数点数の余弦の逆数	math.acos(x)
多次元データをMSDとして濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
グラフで使う縦軸の名前をuntitledに指定する	plt.ylabel('y軸ラベル')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームを列によって並べて新しいインデックスを加える	df.sort_values(columns).reset_index()
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
option: ゴールドを使う	color = 'gold'
濃い青色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: ナバホホワイト色を使う	color = 'navajowhite'
最大長nの両端キューを生成する	collections.deque(maxlen=n)
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
formatのパターンで文字列からタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
リストとリストについて散布図を描き、、マーカーを▽に変更する	plt.plot(データ列x, データ列y, marker='v')
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
データフレームを列の値でまとめたグループ	df.groupby(column)
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
オブジェクトがバイト列か	isinstance(obj, bytes)
実数の３乗を求める	x ** 3
列名リストをデータ型でフィルタする	df.select_dtypes(型).columns
option: 青紫を使用する	color = 'violet'
グリッド線	plt.grid(linewidth=3.0)
列によってデータフレームをソートし、、下位n件を取り出す	df.sort_values(columns).tail(n)
ファイル全体を行単位で分割して読み込む	f.readlines()
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
折れ線グラフの色をアリスブルーに指定する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームを各カラム毎にグループ化し、、列の平均値を算出する	df.groupby(column)[column2].mean()
折れ線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
実行時の標準出力の出力先がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
データフレームの中にいくつ日付データが存在するかカウントする	df.isin([value]).sum()
棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
青紫色として散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
アリスブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
文字列を最後の部分文字列で二分割する	s.rpartition(sub)
要素を両端キューの末尾から削除する	deq.pop()
マッピングのの一覧を得る	aDict.values()
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
切片なしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
動作環境がウィンドウズか	sys.platform.startswith('win32')
昇順にリストの値をソートする	sorted(aList, reverse=False)
実数を十の位で丸める	round(x, -1)
数に浮動小数点数を加算する	x + y
ベクトルの列ごとの最大値	np.max(aArray, axis=0)
プロットを画像ファイルとして保存する	plt.savefig('foo.png')
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
option: namesを列の名前に変更する	names = names
option: ダークシアグリーン色を使用する	color = 'darkseagreen'
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
ケンドール相関係数でデータフレームのリストカラムの相関行列を求める	df[aList].corr(method='kendall')
文字列が全て空白からなる	s.isspace()
データフレームを各列毎に集約して、列の最小値を求める	df.groupby(column)[column2].min()
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
パラメータについて数値の積分を計算する	sympy.integrate(e, z)
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
最適な位置にデータラベルを表示する	plt.legend(loc='best')
多次元データをt-SNEを用いてパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
nをn2だけ右シフトする	n >> n2
全要素を初期値で初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
実数の複素数	complex(x)
エンコーディング	sys.getdefaultencoding()
ファイルパスを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
横棒グラフをアリスブルー色として描画する	plt.barh(データ列x, データ列y, color='aliceblue')
等量でデータフレームの中の列を分割数nでビン分割する	pd.qcut(df[col], n)
データ列を四分位数ごとに分割する	pd.qcut(ds, 4)
現在のタイムスタンプ	datetime.datetime.today()
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
option: マーカーを下三角に変更する	marker = 'v'
predicateFuncを適用したとき真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
Pandasでフォーマットfmtでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format=fmt)
ファイルをSJISで書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
ふたつの集合の和集合	aSet.union(aSet2)
折れ線グラフの線のスタイルを点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのモードを算出する	df.mode()
データフレームを表示するとき折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
ベクトルの標準偏差を求める	np.std(aArray)
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
黒い星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: 貝殻色を使用する	color = 'seashell'
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
列を累積する	itertools.accumulate(iterable, operator.mul)
点間のユークリッド距離	math.dist(point, point2)
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
破壊的にデータフレームを昇順に'A'列によって並べる	df.sort_values(by='A', ascending=True, inplace=True)
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
option: クリムゾン色を使う	color = 'crimson'
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データ列とリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をスプリンググリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='springgreen')
青い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
option: ライトブルーにグラフの色を設定する	color = 'lightblue'
散布図の三角印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
日付データにn日分、足す	aDate + datetime.timedelta(days=n)
線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを列によって並べ直して、新しいインデックスを加える	df.sort_values(columns).reset_index()
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
組の先頭	aTuple[0]
データフレームの中で、列と列の重複をドロップする	df.drop_duplicates(subset=column)
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
整数nを二進表現に変換する	bin(n)
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
文字列中にひとつでも非小文字が含まれるかどうか	any(not c.islower() for c in s)
文字列をISO書式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
日付データと日付データの時間差を計算する	aDate - aDate2
線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
リストをビン数nを用いて等量でビン分割する	pd.qcut(aList, n)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
データ列の散らばりを描画する	plt.scatter(データ列x, データ列y)
線形モデルのバイアスを求める	model.intercept_
横棒グラフを小麦色色を使って描画する	plt.barh(データ列x, データ列y, color='wheat')
ライムグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
配列とリストの散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
option: グラフの色をダークシアグリーンにする	color = 'darkseagreen'
nの無限リスト	itertools.repeat(n)
黄色いグリッド線を引く	plt.grid(color='y')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
データフレームのカラムを丸めて、整数にする	df[col].round().astype(int)
カウンタをリストに変換する	list(aCounter)
リストが空でないか確認する	len(aList) != 0
棒グラフをインディアンレッド色を使って描画する	plt.bar(データ列x, データ列y, color='indianred')
実数の逆余弦を計算する	math.acos(x)
横棒グラフを描画し、棒の幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
リストの要素を並べ変える	sorted(aList)
組をリストに変換する	list(aTuple)
行列の列ごとの最大値を計算する	np.max(aArray, axis=0)
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
option: バリーウッド色を使う	color = 'burlywood'
ヒストグラムの色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
データフレームのリストカラムを丸めて、整数にする	df[aList].round().astype(int)
rgbの四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの中のカラムをn個にビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ファイルを絶対パスに変換する	os.path.abspath(filepath)
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
配列をフラットにする	aArray.flatten()
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
組をソートする	sorted(aTuple)
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームを各列と列の組み合わせ毎に集約し、、個数を算出する	df.groupby([column, column2], as_index=False).count()
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
実数が正の数かどうか	x > 0
年月日と時間から日付時刻を新規生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
バリーウッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
予測結果の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
双方向キューのn番目の要素	deq[n]
リストとしてデータフレームの指定された列を取り出す	df[column].values.tolist()
リストとリストの散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
列の値でデータフレームをまとめたグループ	df.groupby(column)
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
最大値でデータフレームの列のNaNを埋める	df[col].fillna(df[col].max())
時間を用いる	import time
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
最大最小値を用いて標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
集合から要素を取り除く	aSet.remove(element)
棒グラフをアクア色を用いて描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームのカラムのNaNをxで補う	df[col].fillna(x)
option: 印の大きさを変える	markersize = 2.0
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
両端キュー中の文字列の出現数をカウントする	deq.count(element)
リストをセットに変換する	set(iterable)
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
nが3の倍数か	n % 3 == 0
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
イテラブルとしてカウンタを更新する	aCounter.update(iterable)
浮動小数点数に浮動小数点数をかける	x * y
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
両端キュー中の要素の数を数える	deq.count(element)
表データを各列毎に集約し、、文字列というグループを使う	df.groupby(column).get_group(s)
配列をビン数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: 印を菱形に変える	marker = 'D'
グリッド線をプロットから消す	plt.grid(False)
実行結果を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
折れ線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
折れ線グラフを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
カラムの中に存在する文字列の合計を数える	ds.isin([value]).sum()
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームからカテゴリデータの列名リストを使う	df.select_dtypes('object').columns
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフをティール色を使って描画する	plt.plot(データ列x, データ列y, color='teal')
文字列の右端から改行を取り除く	s.rstrip('\n')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
シーケンスに列を続ける	itertools.chain(iterable, iterable2)
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
二つの集合に共通する要素からなる集合を使う	aSet.intersection(aSet2)
表を各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
列'A'と列'B'をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームからn番目のカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
ロバストな単回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
ヒストグラムを深紅色で描画する	plt.hist(データ列, color='crimson')
辞書の全項目を空にする	aDict.clear()
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
タプルを引数として展開して出力する	print(*aTuple)
n個分両端キューの要素を左にローテンションする	deq.rotate(-n)
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
２つのリストを文字列で区切ってプリントする	print(value, value2, sep=s)
0から始まる無限イテラブル	itertools.count()
イテラブルの要素を全て集合に追加する	aSet.update(iterable)
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
折れ線グラフの星マーカーの色を変える	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ヒストグラムの色をプラムに変更する	plt.hist(データ列, color='plum')
アクア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
日付時刻データからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
ダークシアン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
配列の列ごとの最大値	np.max(aArray, axis=0)
複数の列によって破壊的にデータフレームを降順にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームのリスト列の欠損値を中央値で補う	df[aList].fillna(df[aList].median())
JSONLファイルにデータフレームを保存する	df.to_csv(filename)
日付時刻データの月	aDatetime.month
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
集合から任意の要素を取り除く	aSet.pop()
ふたつの集合のいずれか一方だけの集合を使う	aSet.symmetric_difference(aSet2)
切り上げて整数に変換する	math.ceil(x)
多次元尺度構成法で多次元データをパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
セットが空集合	len(aSet) == 0
リストの要素を並べる	sorted(aList)
横棒グラフの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
文字列がタプルの要素か調べる	element in aTuple
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
文字列からformatのパターンを用いて日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ファイルから読み込みストリームを開き]、fとする	f = open(filepath, mode='r')
ダークブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
ダークカーキ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
nが2で割り切れるかどうか	n % 2 == 0
シーケンスから最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
オプションで、標準エラーを使用する	file = sys.stderr
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
タイムスタンプデータが日付時刻データと同時	aDatetime == aDatetime2
方程式の解を計算する	sympy.solve(e)
自然数個からk個取り出したときの順列の総数を求める	math.perm(n, k)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
線グラフの色を青にセットする	plt.plot(データ列x, データ列y, color='blue')
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
横棒プロットを描画し、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
エラーなく辞書からキーの値を参照する	aDict.get(key, None)
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
nがn2より大きい	n > n2
ダークシアグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ヒストグラムの色をレモンシフォンにする	plt.hist(データ列, color='lemonchiffon')
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
プロットにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
イテラブルとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
ヒストグラムのプロットして、正規化する	plt.hist(データ列, density=True)
データフレームを各列と列の組み合わせ毎に集約して合計を計算する	df.groupby([column, column2], as_index=False).sum()
折れ線グラフに右三角印を加える	plt.plot(データ列x, データ列y, marker='>')
rgbのポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
バリーウッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
列名リストによってでデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
文字コードを文字に変換する	chr(unicode)
option: チョコレートに色を設定する	color = 'chocolate'
散布図に菱形印を使用する	plt.scatter(データ列x, データ列y, marker='D')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: アイボリー色を使う	color = 'ivory'
実行環境がWindowsかどうか判定する	sys.platform.startswith('win32')
分割数nでデータフレームの中の列を分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
四角印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
レモンシフォン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
整数nの16進リテラルを見る	hex(n)
option: グラフの色をライトグレーにする	color = 'lightgrey'
リストを三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
折れ線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
ファイルパスから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
散布図の四角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの列の標本標準偏差を算出する	df[col].std()
データ列をリストを境界値としてビンニングする	pd.cut(ds, aList)
散布図の四角印の色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
イテラブルにシーケンスを続ける	itertools.chain(iterable, iterable2)
データフレームを各列毎にグループ化し、、文字列というグループを使う	df.groupby(column).get_group(s)
option: 色をアクアに設定する	color = 'aqua'
'A'列を用いてデータフレームを昇順に並べ直す	df.sort_values(by='A', ascending=True)
マップのキーに対応した値	aDict.get(key)
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムをシルバー色として描画する	plt.hist(データ列, color='silver')
データ列が何曜日か確認する	ds.dt.weekday_name
データフレーム全体をインデックスを用いて降順でソートする	df.sort_index(ascending=False)
ベクトルの行ごとの最小	np.min(aArray, axis=1)
option: アンティークホワイトに色を指定する	color = 'antiquewhite'
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームから末尾の列を消す	df[df.columns[:-1]]
整数nの八進数表現	oct(n)
実数が正の数か調べる	x > 0
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
縦棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
線形回帰データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
数値を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
行列の要素ごとの積	np.multiply(aArray, aArray2)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
リストの末尾	aList[-1]
型のサブクラスかどうか	issubclass(サブクラス, クラス)
タプルに項目名が存在しないとき要素を追加する	aDict.setdefault(key, element)
折れ線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ファイルパスを読み込みモードで開いて]、fとする	f = open(filepath, mode='r')
データフレームのカラムが何分か見る	df[col].dt.minute
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
ピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
線グラフをイエローグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
リストとシーケンスをチェインする	itertools.chain(iterable, iterable2)
t-SNEとして多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
文字列を代数計算の変数に変換する	sympy.Symbol(s)
データフレームを'A'列によってグループ化する	df.groupby('A')
辞書順で文字列が文字列より前	s < s2
option: ▼マーカーを描画する	marker = 'v'
出現頻度を描画する	plt.hist(データ列)
折れ線グラフの色をミディアムパープルに指定する	plt.plot(データ列x, データ列y, color='mediumpurple')
グラフの目的をポスターに設定する	sns.set(context='poster')
折れ線グラフのポイント印の色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
実数のサインの逆数を算出する	math.asin(x)
rgbの左三角マーカーをデータ列と数列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
昇順に組の要素をソートする	sorted(aTuple, reverse=False)
データフレームを列の値でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
回帰モデルを新規作成する	model.fit(説明変数, 目的変数)
配列を分割数nでビン分割する	pd.cut(aArray, n)
データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
ダークサーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
実数の二乗を算出する	x ** 2
黄緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
書き込みモードでファイルをオープンする]	open(filepath, mode='w')
棒グラフをダークスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
疑似乱数を正規分布で算出する	random.normalvariate(mu=0.5, sigma=0.2)
リストと配列について散布図を描き、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
四角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
データ列のどの値が頻出か調べる	ds.mode()
option: グラフの色をシエナに変更する	color = 'sienna'
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
部分文字列で末尾から文字列を区切る	s.rsplit(sub)
データ列を十の位で四捨五入する	ds.round(-1)
データフレームを列によってグループ化してそれぞれのグループごとの最小値を計算する	df.groupby(column).min()
データフレームのカラムを折れ線グラフで可視化する	plt.plot(df[column], df[column])
縦棒グラフをデピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='deeppink')
縦棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
標準出力がパイプ	not sys.stdout.isatty()
nが正の数か調べる	n > 0
CSVTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
オプションで出力先をファイルに変更する	file = sys.open(filename, 'w')
option: スレートブルーを使用する	color = 'slateblue'
２つのオブジェクトは同一か調べる	obj is obj2
データ列の離れ具合を図示する	sns.residplot(x=データ列, y=データ列)
バイナリ書き込みモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='wb')
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
縦棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームのリストカラムを1000の位で丸めて整数型にする	df[aList].round(-3).astype(int)
グラフの用途をスライドに設定する	sns.set(context='talk')
nからn2までのひとつ飛ばしの整数リストを作る	list(range(n, n2+1, 2))
リストとリストについての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ローングリーン色を用いる	color = 'lawngreen'
ナバホホワイトにヒストグラムの色をする	plt.hist(データ列, color='navajowhite')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
データフレームの列名リストで指定された列をドロップする	df.drop(columns, axis=1)
ホワイトスモーク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
文字列TSVファイルからカンマ区切りのファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データ列をビン分割する	pd.cut(ds, aList)
半透明の点線でイテラブルの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ライトブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
配列とデータ列の散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
マップのキーを列挙する	list(aDict)
n2がnより大きく、かつn3未満	n < n2 and n2 < n3
折れ線グラフの色をネイビーにセットする	plt.plot(データ列x, データ列y, color='navy')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
配列と数列の散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データ列の曜日数を求める	ds.dt.dayofweek
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
データフレームを'A'列と'B'列によって並べる	df.sort_values(by=['A', 'B'])
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
フォーマットとして文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
本日の月	datetime.datetime.today().month
option: フォントの色をパウダーブルーに設定する	color = 'powderblue'
文字列中にひとつでも非ASCII文字が含まれるか	any(not c.isascii() for c in s)
データフレームのリストカラムの中に文字列と文字列が含まれるか調べる	df[aList].isin([value, value2])
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
データフレームを'A'列を用いてで破壊的にソートする	df.sort_values(by='A', inplace=True)
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
rgbの星マーカーを配列とリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストの値を昇順にソートする	sorted(aList, reverse=False)
year年month月day日hour時のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームを表示するとき、最大行数を減らす	pd.set_option('display.max_rows', n)
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
試しに何か動かしてみる	print('Hello World')
nが2で割り切れるかどうか調べる	n % 2 == 0
タイムスタンプデータが木曜日かどうか調べる	aDatetime.weekday() == 3
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
option: フォントの色をリネンに設定する	color = 'linen'
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
文字列の開始位置番目と終了位置番目の間に部分文字列がないか確認する	s.find(sub, start, end) == -1
option: フローラルホワイト色を用いる	color = 'floralwhite'
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
option: 区切りをスラッシュにする	sep = '/'
リストにオブジェクトを加える	aList.append(element)
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
商と余りを同時に算出する	divmod(x, y)
散布図を黄緑色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームの第二四分位数	df.median()
タプルをひとつ置きに取り出す	aTuple[::2]
表を昇順に二つの列によって並べ直して、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームを'A'列によって大きい順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
棒グラフをシエナ色を用いて描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームの列と列の相関行列	df[[column, column2]].corr()
Pandasで日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
値がセットに含まれないかどうか調べる	element not in aSet
列でデータフレームをまとめたグループ	df.groupby(column)
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='grey')
データフレームのリスト列を十の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
データ列とリストについて散布図を描き、、右三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
データフレームの未入力値を最大値で置換する	df.fillna(df.max())
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
セットに列の要素を全て追加する	aSet.update(iterable)
option: 貝殻にフォントの色を指定する	color = 'seashell'
データフレームの列の要約統計量	df[col].describe()
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
カウンタのユニオンを算出する	aCounter | aCounter2
ヒストグラムのビンを指定する	plt.hist(データ列, bins=区関数)
データフレームのリストカラムの中にあるの合計を求める	df[aList].isin([value]).sum()
日付データが月曜日	aDate.weekday() == 0
データフレームのリスト列の中にいくつ欠損値が含まれるか数える	df[aList].isna().sum()
空の勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
2進文字列を整数にする	int(s, 2)
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
青い点線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
プロットの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
散布図のダイアモンドマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
シーケンスから重複を取り除く	set(iterable)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
折れ線グラフをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
整数nを8進文字列にする	oct(n)[2:]
棒グラフを白色を使って描画する	plt.bar(データ列x, データ列y, color='white')
カウンタを多い順番に列挙する	aCounter.most_common()
ファイルを開いて]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
数字を全部求める	string.digits
データフレームのカラムの標本標準偏差	df[col].std()
文字列を中央寄せする	s.center(文字列幅)
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
ファイルを全部、読む	f.read()
データフレームのグループ毎の分散	df.groupby(column).var()
実数を浮動小数点数で割って切り捨てる	x // y
option: 色をディムグレーに設定する	color = 'dimgray'
配列のヒストグラムをプロットする	plt.hist(データ列)
option: フォントの色をラベンダーに設定する	color = 'lavender'
データフレームから重複を残さず落とす	df.drop_duplicates(keep=False)
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
カウンタの正の数のみ残す	+aCounter
option: フォントの色をデピンクに設定する	color = 'deeppink'
文字の文字コード	ord(ch)
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
インディアンレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='indianred')
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
イテラブルとリストリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームのカラムの曜日が何日目か確認する	df[col].dt.dayofweek
四角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
タプルの文字列が最初に見つかる位置を求める	aTuple.index(element)
カデットブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データ列の変化を色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
ミディアムブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
ベクトルと同じ大きさの空配列を作成する	np.empty_like(aArray)
パープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
ヒストグラムをティール色として描画する	plt.hist(データ列, color='teal')
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
ヒストグラムをミスティローズ色を使って描画する	plt.hist(データ列, color='mistyrose')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
棒グラフの色をrgbに指定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
折れ線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
シーケンスをカウントして、カウンタを更新する	aCounter.update(iterable)
両端キュー中の要素を数える	deq.count(element)
タプルの先頭の値	aTuple[0]
実行結果を白色化する	f'\033[37m{value}\033[0m'
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
カウンタ間でユニオン	aCounter | aCounter2
要素を双方向キューにエンキューする	deq.appendleft(element)
リストとリストについて散布図を描画して、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
データフレームの先頭のカラム以外を説明変数にする	説明変数 = df[df.columns[1:]]
データフレームを各列と列の組み合わせ毎にグループ化して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
折れ線グラフのポイントマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
棒グラフをダークシアン色を使って描画する	plt.bar(データ列x, データ列y, color='darkcyan')
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームからインプレイスで重複した行を削除する	df.drop_duplicates(inplace=True)
ビスク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
ゼロ埋めした８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
Pandasで、文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
タプルを展開してプリントする	print(*aTuple)
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
原点から(浮動小数点数,y)の距離	math.hypot(x, y)
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
散布図をライトスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
nが一桁の整数か調べる	-9 <= n <= 9
データフレームを表示するとき、データフレームをn列まで表示されるようにする	pd.set_option('display.max_columns', n)
リストとイテラブルについての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
データ列の欠損値を最頻値で置換する	ds.fillna(ds.mode().iloc[0])
正規表現を事前に大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
表から重複を残さず削除する	df.drop_duplicates(keep=False)
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
アルファベットを全て見る	string.ascii_letters
棒グラフをペールグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='palegreen')
n2分のn	n / n2
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
紺にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
▼印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
縦棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
散布図をバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
８ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int8)
オブジェクトはタプルの要素か調べる	element in aTuple
セットにシーケンスを追加更新する	aSet.update(iterable)
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
PLSで回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
ValueMapでまとめてデータ列を置き換える	ds.replace(ValueMap)
行列は何次元か調べる	aArray.ndim
等差数列から整数乱数を求める	random.randrange(start, end, step)
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
実数を小数点第一位で四捨五入する	round(x, 1)
新しいガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
文字列は十進数字か調べる	s.isdecimal()
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
ファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
リストとデータ列について散布図を描いて、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='gray')
データ列の中にがある	ds.isin([value])
ファイルを開き]、読み込みストリームを求める	open(filepath, mode='r')
文字列が全て空白文字	s.isspace()
ふたつの集合がセットと交わりを持たない	aSet.isdisjoint(aSet2)
ヒストグラムのラインスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
rgbの三角マーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t')
データフレームから指定された列のみ抽出する	df[[column]]
option: パウダーブルーを用いる	color = 'powderblue'
整数の並べ方の総数	math.perm(n)
option: ロイヤルブルーを用いる	color = 'royalblue'
スラグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
データフレームを各列毎に分類し、、列の標準偏差を求める	df.groupby(column)[column2].std()
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
データフレームを列を用いて昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
標準入力から1行分読み込む	sys.stdin.readline()
現在の分を見る	datetime.date.today().minute
データ列が何日か調べる	ds.dt.day
コーンズシルク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームを表示するとき、表示する列数を増やす	pd.set_option('display.max_columns', n)
リストを中央値でビンニングする	pd.qcut(aList, 2)
イテラブルと数列の散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
リストとリストの散布図を描画して、マーカーを▽に指定する	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの太さを変更する	markeredgewidth = 2.5
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
リスト内の要素が少なくともひとつ真か	any(aList)
日付時刻データをタプルに変換する	aDatetime.timetuple()
データフレームの列の文字列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
散布図に三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
option: グラフの色をパープルに指定する	color = 'purple'
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
option: ライトスレイグレーを使う	color = 'lightslategray'
配列をビン数nとして分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
文字列がPythonのキーワード	keyword.iskeyword(s)
本日の年数を使う	datetime.datetime.today().year
データフレームのNaNをxにする	df.fillna(x)
黄緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
シーケンスのそれぞれを関数でフィルタする	filter(func, iterable)
二つの変数を順に出力する	print(value, value2)
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
rgbのダイアモンドマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストと数列について散布図を描いて、クロスマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
データフレームのカラムの未入力値をxに変更する	df[col].fillna(x)
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
xでデータフレームのリスト列のNaNを埋める	df[aList].fillna(x)
リストとリストについての散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
クラス分類を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingClassifier()
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
データフレームを各列と列の組み合わせ毎に集約し、平均値を求める	df.groupby([column, column2], as_index=False).mean()
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
サンディーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='sandybrown')
データフレームのカラムの尖度	df[col].skew()
セットを変更不能に変換する	frozenset(aSet)
データフレーム全体をインデックスによって小さい順に整列する	df.sort_index(ascending=True)
option: グラフの線の幅を3.0ポイントに設定する	linewidth = 3.0
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
バリーウッド色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
PLSを使って回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
オプションで、出力先を標準出力に指定する	file = sys.stdout
ファイルの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
リストと数列の散布図を描画して、文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
データフレームのカラムの曜日名	df[col].dt.weekday_name
横棒グラフをライムグリーン色として描画する	plt.barh(データ列x, データ列y, color='limegreen')
空の双方向キュー	collections.deque()
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
セットが空集合でないかどうか判定する	len(aSet) != 0
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
浮動小数点数を実数から引く	x - y
データフレームの各次元の大きさを確認する	df.shape
棒グラフをパレットトルコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
文字列を空白で区切って、文字列リストに変換する	s.split()
データフレームの列の平均を求める	df[col].mean()
文字列の先頭でパターンに複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
リストの重複を除く	sorted(set(aList), key=aList.index)
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
項目名がマップに存在していないとき、要素を追加する	aDict.setdefault(key, element)
実数の正接を算出する	math.tan(x)
option: フォントの色をパープルに設定する	color = 'purple'
ヒストグラムをブラック色を使って描画する	plt.hist(データ列, color='black')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
浮動小数点数に実数を加える	x + y
データ列のNaNをxで埋める	ds.fillna(x)
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ファイルが存在するか調べる	os.path.exists(filepath)
タイムスタンプデータの年数を見る	aDatetime.year
浮動小数点数の3乗	x ** 3
散布図の▲印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: ダークグレーを使う	color = 'darkgray'
データフレームを複数の列によってで降順にソートする	df.sort_values(by=column, ascending=False)
目盛り線	plt.grid(alpha=0.5)
二つの集合のいずれか一方だけの集合を使う	aSet.symmetric_difference(aSet2)
折れ線グラフの△印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームのリストカラムの中にいくつ欠損値があるかカウントする	df[aList].isna().sum()
辞書から項目名の値	aDict.get(key)
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
黄緑色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムをやわらかい青色を用いて描画する	plt.hist(データ列, color='cornflowerblue')
整数nを二進数文字列に変換する	bin(n)[2:]
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
リストを縦棒プロットにする	plt.bar(ラベル列, データ列)
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
下線付きで文字列をプリントする	print(f'\033[4m{value}\033[0m')
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
データフレームのカラムを10の位で四捨五入して整数型にする	df[col].round(-1).astype(int)
データフレームの欠損値を第二四分位数で置き換える	df.fillna(df.median())
線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
文字列がタイトル大文字小文字	s.istitle()
円グラフとしてリストの割合を可視化する	plt.pie(データ列, startangle=90)
文字列が全て英数字かどうか	s.isalnum()
カテゴリ別で色付けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
option: 青緑を使う	color = 'teal'
２つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
タイムスタンプデータからn秒分減らす	aDatetime - datetime.timedelta(seconds=n)
プロットのx軸とy軸の比率を等しくする	plt.axis('equals')
option: インディアンレッド色を使う	color = 'indianred'
option: 追加モードにセットする	mode = 'a'
パレットを濃くする	sns.set(pallete='deep')
nがn2以上か確認する	n >= n2
空のセット	set()
折れ線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
簡単な説明の位置を指定する	plt.legend(loc=(x, y))
イテラブルとデータ列の散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
イテラブル自身の長さnの順列	itertools.permutations(iterable, n)
データフレームの列の値がx未満のデータを取り出す	df[df[column] < x]
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
表データを使う	import pandas as pd
文字列がリストの要素か調べる	element in aList
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ホットピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
スピアマン相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='spearman')
データフレームを関数によってまとめたグループ	df.groupby(関数)
正方単位行列	np.identity(n)
データフレームをJSONLファイルに保存する	df.to_csv(filename)
リストを反転する	reversed(aList)
データフレームの中央値	df.median()
nがn2で割り切れないか調べる	n % n2 != 0
実数のハイパボリック・サイン	math.sinh(x)
データ列の未入力値を平均値に設定する	ds.fillna(ds.mean())
配列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
option: 読み込む行番号をnamesで指定する	usecols = names
オブジェクトが関数	callable(obj)
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームを２つの列で昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: 線の種類を点線に設定する	linestyle = 'dotted'
ファイルのファイル名を使う	os.path.basename(filepath)
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
グラフに水平方向の点線をつける	plt.axhline(y=0, linestyle='dotted')
ライトグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
年月日と時間からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
マッピングの項目名の一覧	aDict.keys()
データフレームの内の欠損値を削除する	df.dropna()
データフレームから重複するデータを削除する	df.drop_duplicates()
データフレームを配列に変換する	df.values
各列毎にデータフレームを集約して、列の標準偏差を計算する	df.groupby(column)[column2].std()
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データ列の欠損値を最小値に増やす	ds.fillna(ds.min())
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
option: ブルーバイオレットを使用する	color = 'blueviolet'
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
カラーマップとしてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
数列とリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームの列の値がxの行を取り出す	df[df[column] == x]
ヒストグラムをタン色を用いて描画する	plt.hist(データ列, color='tan')
グラフの中に枠なしの凡例を付ける	plt.legend(frameon=False)
文字列が全てアルファベットか調べる	s.isalpha()
文字列の無限イテラブルを求める	itertools.repeat(element)
データフレームの中にいくつ未入力値があるか数える	df.isna().sum()
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 色をミディアムオーキッドに指定する	color = 'mediumorchid'
リストとリストについて散布図をプロットして、右三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
整数nが配列のいづれかか判定する	n in aArray
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
折れ線グラフを色付きの点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgray')
ヒストグラムをフクシア色を用いて描画する	plt.hist(データ列, color='fuchsia')
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
散布図を赤い大バツマーカーとして描く	plt.plot(データ列x, データ列y, marker='X', c='r')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
文字列を区切りで区切って、文字列リストに変換する	s.split(sub)
xが真	bool(x)
配列とリストの散布図に▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
カウンタを高頻度方から列挙する	aCounter.most_common()
日付時刻データの時間数	aDatetime.hour
黒い左三角マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
n×n2の2次元リストを作る	[[0] * n for _ in range(n2)]
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
キューの最大長	deq.maxlen
ヒストグラムの色を小麦色にセットする	plt.hist(データ列, color='wheat')
option: グラフの色をダークシアグリーンにセットする	color = 'darkseagreen'
ファイルを開き]バイナリ書き込みストリームを求める	open(filepath, mode='wb')
散布図の下三角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
行列のデータ型を計算する	aArray.dtype()
リストと配列について散布図を描き、、三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
三変数の最小値	min(x, y, z)
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームの列を10の位で丸めて整数にする	df[col].round(-1).astype(int)
直前の値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(method='ffill')
ラベンダーブラッシュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
散布図のマーカーの線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
読み込みできるようにファイルパスを開く]	open(filepath, mode='r')
実数の逆正弦	math.asin(x)
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
半透明の実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
データフレームのカラムの歪度	df[col].kurt()
折れ線グラフの印を丸印にする	plt.plot(データ列x, データ列y, marker='o')
線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
シーケンスから重複なく、n個選ぶ	random.sample(iterable, k=n)
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
折れ線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
改行しないで変数を表示する	print(value, end='')
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategray'
線形回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
列によってで降順にデータフレームをソートする	df.sort_values(by=column, ascending=False)
ユニークな値を要素とするベクトル	np.unique(aArray)
データフレームのリスト列の欠損値を平均値で補う	df[aList].fillna(df[aList].mean())
option: イエローグリーン色を使用する	color = 'yellowgreen'
ロードされたモジュールの一覧	sys.modules
日付データが土曜日か確認する	aDate.weekday() == 5
列は正規分布からどれだけ、歪んでいるか調べる	ds.kurt()
ヒストグラムの色をダークサーモンにセットする	plt.hist(データ列, color='darksalmon')
データフレームの列の未入力値をメディアンで埋める	df[col].fillna(df[col].median())
文字列は全て十進数字か調べる	s.isdecimal()
nの無限な数列	itertools.repeat(n)
棒グラフを青紫色として描画する	plt.bar(データ列x, データ列y, color='violet')
線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
折れ線グラフをフォレストグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='forestgreen')
日付時刻データの曜日を見る	aDatetime.weekday()
シルバー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
データ列をビン数nで分割する	pd.cut(ds, n)
option: 小麦色を使う	color = 'wheat'
破線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashed')
Pandasで、データ列をタイムスタンプにする	pd.to_datetime(ds)
ヒストグラムを破線を用いて描画する	plt.hist(データ列, linestyle='dashed')
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームの中に日付データがあるかどうか	df.isin([value])
フォレストグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
正弦	math.sin(x)
ストリームにxを文字列に変換して書き込む	f.write(str(x))
ヒストグラムを描いて、ビン数を指定する	plt.hist(データ列, bins=区関数)
ヒストグラムの色をダークブルーに変更する	plt.hist(データ列, color='darkblue')
二変数の最も大きい値	max(x, y)
option: フォントの色をゴーストホワイトに設定する	color = 'ghostwhite'
整数nの16進文字列	hex(n)[2:]
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
両端キューの中に値は含まれてる	element in deq
色付きの点線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
option: パールゴールデンロッド色を用いる	color = 'palegoldenrod'
option: マーカーを丸に設定する	marker = 'o'
データ列を箱髭図として描画する	plt.boxplot(データ列)
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
配列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: グラフを破線にする	linestyle = 'dashed'
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
自然対数を計算する	math.log(x)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
折れ線グラフの色をビスクにセットする	plt.plot(データ列x, データ列y, color='bisque')
実数から浮動小数点数を引く	x - y
option: グラフの色をパープルに設定する	color = 'purple'
mathを用いる	import math
日付データをISO8601形式の文字列にする	aDate.isoformat()
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
option: フォントの色をインディゴに設定する	color = 'indigo'
数式を簡略にする	sympy.sympify(e)
ロバストな線形分類器を用意する	model = sklearn.linear_model.HuberClassifier()
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
カウンタ間で積集合	aCounter & aCounter2
小数点数の仮数を計算する	math.frexp(x)[0]
散布図の▼マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのリストカラムがどの程度、分散しているか確認する	df[aList].var()
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
データフレームの行を条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
データフレームの列の第三四分位数	df[col].quantile(0.75)
データフレームのそれぞれのグループ毎の合計を求める	df.groupby(column).sum()
文字列を最後の部分文字列で二つに分ける	s.rpartition(sub)
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
ミディアムオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ヒストグラムを濃いシアン色で描画する	plt.hist(データ列, color='darkcyan')
データフレームを'A'列で昇順にソートする	df.sort_values(by='A', ascending=True)
文字列の開始位置からと終了位置の間に部分文字列がある	s.find(sub, start, end) != -1
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
双方向キューは空かどうか調べる	len(deq) == 0
リストとリストについて散布図をプロットして、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
t-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームを各列毎に集約し、列の平均値を算出する	df.groupby(column)[column2].mean()
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
青い破線を使って線を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
現在が日曜日	datetime.datetime.today().weekday() == 6
ファイルをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
データフレームのカラム名を指定された列名リストに置き換える	df.columns = columns
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
集合をイミュータブルにする	frozenset(aSet)
オブジェクトは集合クラス	isinstance(obj, set)
データフレームのリストカラムの相関行列スピアマン相関係数で	df[aList].corr(method='spearman')
シエナ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
オブジェクトがリストかタプルか	isinstance(obj, (list)
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
複数のリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
正則化付き線形モデルを準備する	model = sklearn.linear_model.ElasticNet()
option: ディムグレー色を使う	color = 'dimgrey'
データ列の時刻	ds.dt.hour
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームを列でソートし、上位n件を取り出す	df.sort_values(columns).head(n)
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
タイムスタンプデータのタイムゾーン	aDatetime.timetz()
破壊的に列を用いて降順にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
キューに値をスタックする	deq.append(element)
option: ミディアムブルー色を用いる	color = 'mediumblue'
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
データフレームのカラムの標本標準偏差を求める	df[col].std()
書き込みできるようにBOM付きとしてファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
オブジェクトはバイト列か調べる	isinstance(obj, bytes)
データフレームを'A'列で並べ、、更新する	df.sort_values(by='A', inplace=True)
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ふたつの集合の積集合を求める	aSet.intersection(aSet2)
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
イテラブルのイミュータブルな集合を作成する	frozenset(iterable)
リストを２つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームの中の欠損値をドロップする	df.dropna()
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
データ列の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ヒストグラムをオレンジレッド色を用いて描画する	plt.hist(データ列, color='orangered')
option: ライムを使う	color = 'lime'
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
データをL2ノルムを用いて正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
ブースティングとして回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
データフレームの最初n行	df.head(n)
nから無限に数え上げるする	itertools.count(start=n)
データフレームを列によってソートし、、下位n件を取り出す	df.sort_values(columns).tail(n)
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
日付データからn秒分引く	aDate - datetime.timedelta(seconds=n)
option: グラフの色をハニーデューに設定する	color = 'honeydew'
ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
スノーにヒストグラムの色を変更する	plt.hist(データ列, color='snow')
データフレームから指定された３列を取り出す	df[[column, column2, column3]]
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データフレームの列の中央値を計算する	df[col].median()
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
折れ線グラフに星印を用いる	plt.plot(データ列x, データ列y, marker='*')
横棒グラフを描画し、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列が片仮名かどうか	('ァ' <= ch <= 'ン')
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
縦棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
タブ文字を使う	'\t'
辞書の項目名を要素に変更する	aDict[key] = element
ファイルパスのセパレータ記号を見る	os.sep
行列の標準偏差	np.std(aArray)
ふたつの関係が真上位集合か調べる	aSet > aSet2
折れ線グラフにクロス印を使う	plt.plot(データ列x, データ列y, marker='x')
データフレームのリストカラムの正規分布に対する上下広がりを求める	df[aList].skew()
データフレームから最後の列を除く	df[df.columns[:-1]]
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
カラムのどの値が頻出か見る	ds.mode()
黒い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
option: グレー色を用いる	color = 'grey'
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
タプルの要素を昇順に並べる	sorted(aTuple, reverse=False)
ロージーブラウン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
option: 小麦色に色を設定する	color = 'wheat'
暗い赤にヒストグラムの色をセットする	plt.hist(データ列, color='darkred')
タイムスタンプデータが火曜日か判定する	aDatetime.weekday() == 1
縦棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
ラベンダーブラッシュ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
アリスブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
シーケンスを配列にする	np.array(iterable)
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
データフレームのリストカラムを100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
三つの最大値を算出する	max(x, y, z)
折れ線グラフをダークグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkgreen')
イテラブルを集合に変換する	set(iterable)
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategrey')
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
モデルの残差を計算する	目的変数 - model.predict(説明変数)
半透明の一点鎖線としてデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームを各列とカラムの組み合わせ毎にグループ化して、最大値を算出する	df.groupby([column, column2], as_index=False).max()
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
散布図を星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*')
サポートベクトル分類器を用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのリストで指定された列の相関行列ピアソン相関係数でを求める	df[aList].corr(method='pearson')
オブジェクトのクラス	type(obj)
横棒グラフをパールバイオレットレッド色を使って描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ファイル名がCSVファイル	filename.endswith('.csv')
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
nがn2よりも大きいか確認する	n > n2
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
アンサンブル学習としてクラス分類を行う	sklearn.ensemble.VotingClassifier()
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
黒いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
オブジェクトが数値か調べる	isinstance(obj, (int,float))
▼マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
option: スラグレーにグラフの色を設定する	color = 'slategrey'
マッピングを階層化マップにする	collections.ChainMap(aDict)
部分的最小二乗法として回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
ヒストグラムをロージーブラウン色を用いて描画する	plt.hist(データ列, color='rosybrown')
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
文字列を走査しパターンにマッチするか確認する	re.search(pattern, s)
縦棒グラフを描画し、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
グラフの使途をポスターに指定する	sns.set(context='poster')
散布図を赤いポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
黒い三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: 色をライムに設定する	color = 'lime'
一点鎖線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
線グラフの色をスノーにセットする	plt.plot(データ列x, データ列y, color='snow')
線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
オブジェクトは辞書型か調べる	isinstance(obj, dict)
データフレームを'A'列でによって大きい順に並べ直す	df.sort_values(by='A', ascending=False)
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
辞書をソートしてJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
データフレームを各列と列の組み合わせ毎に分類し、、分散を求める	df.groupby([column, column2], as_index=False).var()
Pandasで、datetime64型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
option: 文字コードを文字列の示すエンコーディングに変更する	encoding = s
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
option: マゼンタにグラフの色を設定する	color = 'magenta'
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
イテラブルと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
ファイルをバイナリできるように開く]	open(filepath, mode='rb')
データフレームのカラムと列の相関行列	df[[column, column2]].corr()
タプルの文字列が最初に見つかる位置	aTuple.index(element)
行列の列ごとの最大値	np.max(aArray, axis=0)
ロバストな線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
文字列を最後から空白で区切る	s.rsplit()
エクセルデータファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
サポートベクター回帰モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
バイアスなしの線形モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ヒストグラムの色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
入力ストリームからn文字、読む	f.read(n)
リストの要素を昇順に並べる	sorted(aList, reverse=False)
データラベルを最適な位置に表示する	plt.legend(loc='best')
データフレームを列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
predicateFuncがTrueとなるイテラブルの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
範囲指定してデータフレームの行を選択する	df[start:end]
セットにイテラブルの要素を全て追加する	aSet.update(iterable)
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
option: スプリンググリーン色を使う	color = 'springgreen'
イテラブルの長さnの順列	itertools.permutations(iterable, n)
データフレームのカラムを四捨五入する	df[col].round()
文字列はカタカナか調べる	('ァ' <= ch <= 'ン')
データフレームのn行以降抽出する	df[n:]
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
option: ラベンダーにフォントの色を設定する	color = 'lavender'
ネイピア数	math.e
データフレームの列と列の相関行列をヒートマップとして描画する	sns.heatmap(df[[column, column2]].corr())
option: グラフの線の種類を破線に指定する	linestyle = 'dashed'
リストの全ての要素をクリアにする	aList.clear()
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
オレンジ色を用いてヒストグラムを描画する	plt.hist(データ列, color='orange')
百分率付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ペルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='peru')
カウンタ間で積集合演算する	aCounter & aCounter2
折れ線グラフをミスティローズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mistyrose')
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
データフレームのリストカラムの欠損値を平均値で補う	df[aList].fillna(df[aList].mean())
カウンタをシーケンスをカウントして、更新する	aCounter.update(iterable)
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
ダークオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
実行結果を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
列をカテゴリデータにする	ds.astype(object)
option: アリスブルーを使う	color = 'aliceblue'
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
浮動小数点数は有限	math.isfinite(x)
ダークスレートブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
書式を辞書でフォーマットする	formatText.format_map(aDict)
データフレームの先頭を見る	df.head()
セットのすべての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
TSVファイルからCSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームのカラムを文字列にリネームする	df.rename(columns={column: name})
部分文字列で文字列を分けたときの後半の文字列	s.partition(sub)[-1]
複数行対応としてあらかじめ正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームの最後n行を選ぶ	df.tail(n)
二つのオブジェクトが同一	obj is obj2
列'A'と列'B'をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
データフレームのリスト列の未入力値を後の行の値に設定する	df[aList].fillna(method='bfill')
線グラフの色をやわらかい青に指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
日付データと日付データの時間差	aDate - aDate2
二つの浮動小数点数は十分に近い	math.isclose(x, x2)
セットの濃度を求める	len(aSet)
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
シーグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='seagreen')
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
部分文字列が部分文字列で開始するか調べる	s.startswith(sub)
データ列の折れ線グラフを▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
リストを黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
数列と配列について散布図をプロットして、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
組の最後からn番目以前の部分を取り出す	aTuple[:-n]
セットが空集合でないか調べる	len(aSet) != 0
ボックスチャートでリストを可視化する	plt.boxplot(データ列)
クラス分類の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
文字列の両端から余分な空白を除く	s.strip()
折れ線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
二つの文字列が等しくないかどうか	s != s2
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
ひとつでも非英数字が文字列中にあるか調べる	any(not c.isalnum() for c in s)
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
正規表現patternでまとめてカラムの値を置き換える	ds.replace(pattern, repl, regex=True)
マップの値として要素は含まれているかどうか確認する	element in aDict.values()
追加モードを用いてファイルをオープンして]fとする	f = open(filepath, mode='a')
ミスティローズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームのカラムの曜日数を使う	df[col].dt.dayofweek
リストとリストについて散布図を描画してその大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
データフレームを散布図でグラフ化して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームの中にいくつNaNがあるか数える	df.isna().sum()
文字列の示すエンコーディングを用いて追加できるようにファイルをオープンする]	open(filepath, mode='a', encoding=s)
列をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
日付データが火曜日か調べる	aDate.weekday() == 1
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームを'A'列の値によってまとめた表	df.groupby('A')
データフレームのカラムの中にと文字列がいくつあるかカウントする	df[col].isin([value, value2]).sum()
ダークグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategray')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
文字列のサフィックスが部分文字列か調べる	s.endswith(sub)
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
昇順に破壊的に列によってデータフレームを並べる	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
ヒストグラムをミッドナイトブルー色を使って描画する	plt.hist(データ列, color='midnightblue')
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
データフレームのリスト列の標本標準偏差を求める	df[aList].std()
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
シーグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
行列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームを二つの列によって大きい順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームを列名リストの値でグループ化し、記述統計量を計算する	df.groupby(columns).describe()
二変数の最大値を計算する	max(x, y)
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
実数の値が整数か調べる	x.is_integer()
文字列を部分文字列で分けた場合の残りの文字列	s.partition(sub)[-1]
散布図のダイアモンド印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データを最大値と最小値を用いて正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: 色をミディアムスレートブルーにセットする	color = 'mediumslateblue'
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
書き込み用にファイルをSJISとしてオープンする]	open(filepath, mode='w', encoding='shift_jis')
option: ディムグレーを使う	color = 'dimgray'
option: 丸マーカーを描画する	marker = 'o'
データフレームをタブ区切りとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
リストを昇順に並べ変える	sorted(aList, reverse=True)
option: タブを区切りで使う	sep = '\t'
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
実数に実数を掛ける	x * y
オブジェクトは論理値	isinstance(obj, bool)
データフレームからカテゴリデータのカラムのみ抽出する	df.select_dtypes('object')
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームのリスト列の空文字を未入力値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
L1ノルムとして正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
xが真か調べる	bool(x)
四角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
option: グラフの色を淡いピンク色に変更する	color = 'lightpink'
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
文字列を空白で区切り、、数列に変換する	map(int, s.split())
追加できるようにEUCでファイルをオープンする]	open(filepath, mode='a', encoding='euc_jp')
赤いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
複数行対応として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
折れ線グラフに丸マーカーを加える	plt.plot(データ列x, データ列y, marker='o')
データフレームの中に日付データがある	df.isin([value])
ヒストグラムの色をダークオーキッドにセットする	plt.hist(データ列, color='darkorchid')
やわらかい青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
マップの浅いコピーを生成する	aDict.copy()
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
nをn2で割る	n / n2
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
文字列内に英字がある	any(c.isalpha() for c in s)
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
実数の逆余弦	math.acos(x)
折れ線グラフの色をダークシアンにセットする	plt.plot(データ列x, データ列y, color='darkcyan')
実行結果を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
二つの変数を文字列で区切ってプリントする	print(value, value2, sep=s)
辞書の項目名一覧	list(aDict)
グラフの中の縦軸にキャプションを付ける	plt.ylabel('y軸ラベル')
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
文字列が平仮名かテストする	('ぁ' <= ch <= 'ん')
日付時刻データが日付時刻データと同時かどうか調べる	aDatetime == aDatetime2
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
デピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
リストとリストの散布図に黒い▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
リストとリストについての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストにシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
option: フォントの色をオレンジに指定する	color = 'orange'
リストの値をソートする	sorted(aList)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
複数の列の値によってデータフレームをグループ化する	df.groupby(columns)
データフレームのリストカラムの歪度	df[aList].kurt()
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
option: フォントの色をダークカーキに変更する	color = 'darkkhaki'
option: ロージーブラウンにフォントの色を指定する	color = 'rosybrown'
縦棒グラフをライトスレイグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
本日が水曜日か確認する	datetime.datetime.today().weekday() == 2
目的変数をモデルの予測値と対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
2つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームの先頭n行を抽出する	df.head(n)
回帰モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
文字列から部分文字列を全て消す	s.replace(sub, '')
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
動作環境名	sys.platform
データフレームのリストカラムのNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
変数名をキーとしてマップ	dict(name=element)
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
散布図をグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームのリストカラムの未入力値を直後の値に設定する	df[aList].fillna(method='bfill')
option: ダーク・スラテグレー色を使用する	color = 'darkslategrey'
データフレームを列によって分類し、グループの合計を算出する	df.groupby(column).sum()
最初のカテゴリーを除外し、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
２つのデータフレームを縦方向に連結する	pd.concat([df, df2])
文字列のケースを変換する	s.casefold()
1からNまでの配列	np.arange(1, N+1)
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
実数の平方根	math.sqrt(x)
標準エラーを用いる	sys.stderr
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
データフレームの中に存在する文字列と日付データの合計を数える	df.isin([value, value2]).sum()
日付時刻データが日付時刻データより前かどうか確認する	aDatetime < aDatetime2
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
タプルの長さを使う	len(aTuple)
データフレームを破壊的に'A'列を用いて昇順にソートする	df.sort_values(by='A', ascending=True, inplace=True)
線を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ポイント印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データ列のエポック秒からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列の曜日を見る	ds.dt.weekday_name
カテゴリ列で色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームの中にいくつ欠損値があるか求める	df.isna().sum()
データフレームのカラムが何時か調べる	df[col].dt.hour
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
タプルをひとつ飛ばしで取り出す	aTuple[::2]
データを最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
0で全要素を初期化した行列	np.zeros(要素数)
タプルを順序付けする	enumerate(aTuple)
線グラフの色をダークオレンジにする	plt.plot(データ列x, データ列y, color='darkorange')
両端キューが空かどうか調べる	len(deq) == 0
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
option: バイナリ書き込みモードに変更する	mode = 'wb'
データフレームを各カラムと列の組み合わせ毎に集約して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
n個にデータフレームの中の列を等しい量になるようにビン分割する	pd.qcut(df[col], n)
option: 青緑にグラフの色を設定する	color = 'teal'
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフを淡い茶色色として描画する	plt.plot(データ列x, データ列y, color='tan')
シーケンスの長さnの順列	itertools.permutations(iterable, n)
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
行列の分散	np.var(aArray)
データ列の欠損値をxにセットする	ds.fillna(x)
ヒストグラムの色をミディアムスレートブルーにセットする	plt.hist(データ列, color='mediumslateblue')
辞書の項目名を要素に設定する	aDict[key] = element
option: フォントの色をオールドレースに設定する	color = 'oldlace'
最頻値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
スカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
リストとリストについての散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
リストとリストについての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
ゼロ埋めした行列	np.zeros(行数, 列数)
二つのベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: 色をオリベドラブにセットする	color = 'olivedrab'
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
シルバー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
行列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
xの小数点以下'4'桁まで出力する	print(':.4f'.format(x))
散布図のポイント印の太さを変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
分割数nでリストをビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
コーンズシルクにヒストグラムの色を指定する	plt.hist(データ列, color='cornsilk')
項目名ワード引数としてタプルに追加する	aDict.update(**kwargs)
nがタプルのどれか	n in aTuple
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
双方向キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
配列を中央値で分割する	pd.qcut(aArray, 2)
菱形印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
リストとリストについての散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
コーンフラワーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
実数を実数で割って、切り捨てる	x // y
文字列はタイトルケースかどうか調べる	s.istitle()
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
グレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームをグループ化し、各列に対し平均値を求める	df.groupby(column)[column2].mean()
データフレームを２つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
プラットホームがリナックス	sys.platform.startswith('linux')
全ての８進数字	string.octdigits
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
option: グラフの色をリネンに指定する	color = 'linen'
データフレームの列を1000の位で四捨五入して整数型にする	df[col].round(-3).astype(int)
変数をプリントする	print(value)
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
コーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
プロットをポスターに設定する	sns.set(context='poster')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
ミスティローズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
折れ線グラフのマーカーを上三角印にする	plt.plot(データ列x, データ列y, marker='^')
日付データは日付データより前か調べる	aDate < aDate2
リストの先頭の値	aList[0]
綺麗なグラフを使用する準備をする	import seaborn as sns
ヒストグラムをライトサーモン色を用いて描画する	plt.hist(データ列, color='lightsalmon')
カウンタのそれぞれの項目を、その出現回数だけ列挙する	aCounter.elements()
カウンタのキーとカウントをリストとして得る	aCounter.items()
色付きの一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームから重複する行をドロップして、インプレイスする	df.drop_duplicates(inplace=True)
昇順にタプルの要素を並べ直す	sorted(aTuple, reverse=True)
変数をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
折れ線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームからインプレイスで重複をドロップする	df.drop_duplicates(inplace=True)
データ列の変遷を色付きの破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ファイルからnという名前のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データフレーム全体をインデックスで降順でソートする	df.sort_index(ascending=False)
タプルの末尾のn要素を除く	aTuple[:-n]
ゴールデンロッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのカラムの欠損値を最小値で置換する	df[col].fillna(df[col].min())
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
パラメータについて数式の積分を計算する	sympy.integrate(e, z)
Pandasで、文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
ゲインズボロ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: 読み込むシートの名前をnamesに変更する	sheet_name = names
改行なしに文字列をプリントする	print(value, end='')
ダークオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームを複数の列によって降順に破壊的に整列する	df.sort_values(by=column, ascending=False, inplace=True)
日付時刻データが金曜日	aDatetime.weekday() == 4
配列の累積和を計算する	np.cumsum(aArray)
辞書のキーとその値を列挙する	aDict.items()
リストとリストの散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
散布図をオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='orange')
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
文字列を走査し、パターンにマッチするか調べる	re.search(pattern, s)
辞書の全項目をクリアする	aDict.clear()
リストをn回、接続する	aList * n
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
option: 色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
タイムスタンプデータをエポック秒にする	aDatetime.timestamp()
全要素を０で初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
要素一つのりスト	[element]
ファイルからファイル名を求める	os.path.basename(filepath)
option: 右三角マーカーを加える	marker = '>'
nとn2が等しいか調べる	n == n2
nとn2の値を足してnに代入する	n += n2
線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
散布図を黒いダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
縦棒グラフをプロットし、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
星印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
改行を見る	'\n'
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
リストのすべての要素を消去する	aList.clear()
データフレームをグループ化して、ヒストグラムとしてグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
リストと数列の散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
棒グラフをアンティークホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
両端キューのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
ヒストグラムの色をダークシアグリーンにする	plt.hist(データ列, color='darkseagreen')
複数の列で昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True)
データフレームを列名リストによって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
リストと配列について散布図を描画し、、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストを白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
option: 大バツ印を使用する	marker = 'X'
縦棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付データを文字列を用いてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
折れ線グラフのバツ印の大きさを指定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
双方向キューが空でないかどうか調べる	len(deq) != 0
データフレームを列でグループ化し、要約統計量を求める	df.groupby(column).describe()
データフレームを'A'列でまとめた表を見る	df.groupby('A')
二つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
文字列を文字リストに変換する	list(s)
グラフを使う準備をする	import matplotlib.pyplot as plt
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
破線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームのリストカラムの中にいくつ日付データがあるかカウントする	df[aList].isin([value]).sum()
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの▽マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
今日の曜日を整数で使う	datetime.datetime.today().weekday()
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
mathをインポートする	import math
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
表データをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
バイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
ヒストグラムの色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
option: グラフの色を暗い赤に指定する	color = 'darkred'
リストの末尾を除く	aList[:-1]
JSONフォーマットのfをデータに変換する	json.load(fin)
グラフの使途を論文に設定する	sns.set(context='paper')
option: ラインスタイルを破線に指定する	linestyle = 'dashed'
線を赤い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
まとめてデータフレームのリストカラムをValueMapで置き換える	df[aList].replace(ValueMap)
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
コーンズシルク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームをファイルでJSONLファイルに保存する	df.to_excel(filename)
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
日付時刻データの分数	aDatetime.minute
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
双方向キューの末尾に要素を追加する	deq.append(element)
データフレームの欠損値を後の行の値で補う	df.fillna(method='bfill')
文字列の先頭から部分文字列を除去する	s.removeprefix(sub)
線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
クロスマーカーを用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
データフレームのn行目を削除する	df.drop(n, axis=0)
リストとリストについて散布図を描いて、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
辞書の値の一覧を見る	aDict.values()
データ列の欠損値をxに設定する	ds.fillna(x)
黒い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
option: 線を細くする	linewidth = 3.0
リストとリストについて散布図をプロットし、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
リストと数列の散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色をダークレッドに設定する	plt.hist(データ列, color='darkred')
データ列のNaNを最頻値に変更する	ds.fillna(ds.mode().iloc[0])
文字列の先頭から空白を除く	s.lstrip(' ')
nかけるn2を計算する	n * n2
配列の内積	np.dot(aArray, aArray2)
データフレームを各列とカラムの組み合わせ毎にグループ化し、、標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
filepathにカレント作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
縦棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
黒い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データ列を百の位で丸める	ds.round(-2)
列の欠損値を最小値に設定する	ds.fillna(ds.min())
option: 線の幅を3.0ポイントにする	linewidth = 3.0
データフレームのそれぞれのグループごとの平均値を算出する	df.groupby(column).mean()
最大最小値を使ってスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
リストと配列の散布図を描き、、右三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
２つの文字列は同じか調べる	s == s2
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
クラス分類をアンサンブル学習で行う	sklearn.ensemble.VotingClassifier()
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
データ列の欠損値をxに変更する	ds.fillna(x)
データフレームのカラムの中に存在する日付データの合計を数える	df[col].isin([value]).sum()
縦棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
文字列としてイテラブルを一つにする	''.join(map(str, iterable))
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
線形回帰モデルを作る	model.fit(説明変数, 目的変数)
JSONファイルのファイルを辞書に変換する	json.load(fin)
小数点数を実数で割った剰余	math.remainder(x, x2)
セットを変更不能なセットに変換する	frozenset(aSet)
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
セットに列を追加更新する	aSet.update(iterable)
列'A'と列'B'をキーとして２つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
配列のユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
浮動小数点数の天井を算出する	math.ceil(x)
最小値でデータ列のNaNを補う	ds.fillna(ds.min())
ヒストグラムの色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データ列とリストについて散布図をプロットして星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
追加できるように既存のファイルをEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
組の末尾のn要素を取り除く	aTuple[:-n]
option: ミディアムパープルにグラフの色を指定する	color = 'mediumpurple'
データ列の推移を半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
後の値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(method='bfill')
折れ線グラフをアンティークホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
菱形マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
自然数の階乗を計算する	math.factorial(n)
実数が有限か	math.isfinite(x)
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: グラフの色をスチールブルーに変更する	color = 'steelblue'
異なる列をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
BOM付きでファイルをオープンする]	open(filepath, encoding='utf_8_sig')
データフレームのカラムの中の欠損値の数を数える	df[col].isna().sum()
ファイルパスをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
二つのデータフレームを横向きにくっつける	pd.concat([df, df2], axis=1)
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
文字列はリストに含まれないか調べる	element not in aList
option: サーモンを使う	color = 'salmon'
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
option: アクアマリンを用いる	color = 'aquamarine'
Pandasで、フォーマットとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
n進文字列をバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
データフレームから列を二つ選択する	df[[column, column2]]
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
インプレースに両端キューの要素を逆順にする	deq.reverse()
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
正規分布による累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='palevioletred')
ファイルからファイル名を取り出す	os.path.basename(filepath)
オブジェクトの属性の値	getattr(obj, プロパティ名)
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
ベクトルの演算をする	import numpy as np
リストからカウンタを作る	collections.Counter(iterable)
データフレームのNaNを直前の値で補う	df.fillna(method='ffill')
茶色色を用いてヒストグラムを描画する	plt.hist(データ列, color='brown')
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームからランダムにn行を選択する	df.sample(n)
縦棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
データ列を使う	import pandas as pd
文字列の中の複数行対応としてパターンによるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフの色を茶色に指定する	plt.plot(データ列x, データ列y, color='brown')
パープル色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightgreen')
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
option: ダークマゼンタ色を使う	color = 'darkmagenta'
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
データフレームの数値をまとめて小数点以下n桁で四捨五入する	df.round(n)
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
小麦色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
出力ストリームから1文字読み込む	f.read(1)
データを最大最小値でスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
横棒グラフをライトスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの２つの列を並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
ValueMapでデータ列をまとめて置き換える	ds.replace(ValueMap)
リストと配列について散布図を描き、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
リストを縦軸配列を横軸として大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
データフレームの行を範囲指定して選ぶ	df[start:end]
文字列の無限なイテラブルを求める	itertools.repeat(element)
option: グリーンにグラフの色を設定する	color = 'green'
整数nを半分にする	n //= 2
データフレームの指定された三つの列のみ抽出する	df[[column, column2, column3]]
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: ▽マーカーを描画する	marker = 'v'
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
カテゴリ別で色分けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
配列と数列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
JSON形式のファイルを辞書に変換する	json.load(fin)
グラフの使途をポスターに変更する	sns.set(context='poster')
文字列のエポック秒からタイムスタンプにする	pd.to_datetime(s, unit='s', utc=True)
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
全ての十六進数字	string.hexdigits
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
実数を万の位で丸める	round(x, -4)
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
浮動小数点数を十六進表記の文字列に変換する	x.hex()
ファイルを文字列の示す文字コードでオープンする]	open(filepath, encoding=s)
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
シャルトリューズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: 色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
文字列から部分文字列を全て取り除く	s.replace(sub, '')
データフレームの累積分布を描く	sns.ecdfplot(x='列名', data=df)
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
折れ線グラフを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
黒い上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
ダークカーキ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームの列の値がxでない行を取り除く	df[df[column] == x]
配列とリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
リストとリストの散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのカラムが文字列で終わる行を選択する	df[df[column].str.endswith(s)]
文字列を小文字にする	s.lower()
データ列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
リストをひとつ置きに取り出す	aList[::2]
横棒グラフをアクア色を用いて描画する	plt.barh(データ列x, データ列y, color='aqua')
データフレームの列と列の相関行列をヒートマップとしてグラフ化する	sns.heatmap(df[[column, column2]].corr())
実数のtanの逆数を算出する	math.atan(x)
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
一方に含まれ他方に含まれない集合を求める	aSet.difference(aSet2)
リストとデータ列について散布図をプロットし、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: ミディアムターコイズにフォントの色を設定する	color = 'mediumturquoise'
線グラフの色を青に指定する	plt.plot(データ列x, データ列y, color='blue')
線グラフの色をスラグレーにする	plt.plot(データ列x, データ列y, color='slategrey')
半透明の点線で配列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
数を小数点以下第一位で四捨五入する	round(x, 1)
option: ▽マーカーを用いる	marker = 'v'
列名リストでを用いてデータフレームを大きい順に並べる	df.sort_values(by=column, ascending=False)
疑似乱数を生成する	random.random()
散布図のポイント印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
option: ライトスチールブルーにグラフの色を指定する	color = 'lightsteelblue'
十六進数字を全部見る	string.hexdigits
t分布型確率的近傍埋め込み法で濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: 色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフを色付きの実線を使って描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
グラフの横軸を対数目盛に変更する	plt.xscale('log')
Pandasでフォーマットとしてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームの値が欠損値か調べる	df.isna()
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
折れ線グラフのダイアモンドマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
混同行列を計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
JSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
データフレームから一行をランダムに抽出する	df.sample()
option: バッファのサイズを設定する	buffering = 4096
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
ひらがなを片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
option: グラフを点線にする	linestyle = 'dotted'
折れ線グラフの色をブラックにセットする	plt.plot(データ列x, データ列y, color='black')
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
option: コーラルを用いる	color = 'coral'
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
カテゴリで色分けして、データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
ヒストグラムの色を真紅に指定する	plt.hist(データ列, color='crimson')
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
菱形マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
最大値でデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
2を底とする実数の対数	math.log2(x)
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
2進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
新しいロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
オブジェクトに属性が存在するかどうか調べる	hasattr(obj, プロパティ名)
データフレームのカラムが正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
散布図の大バツ印を赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
オブジェクトが無限に続くイテラブル	itertools.repeat(element)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
グラフの使途をスライドに設定する	sns.set(context='talk')
文字列の先頭からタブを除く	s.lstrip('\t')
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
データフレームの相関行列をヒートマップを使ってグラフ化する	sns.heatmap(df.corr())
シーケンスから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
predicateFuncが真になる列の要素を求める	itertools.takewhile(predicateFunc, iterable)
バギングでクラス分類をする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのデータ型の一覧	df.dtypes
JSON形式の文字列をロードする	json.loads(jsonString)
文字列全体がパターンに複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
文字列が文字列より辞書順で前かどうか調べる	s < s2
データフレームの尖度を求める	df.skew()
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
リストの重複を取り除く	sorted(set(aList), key=aList.index)
データフレームのカラムの欠損値を平均値にセットする	df[col].fillna(df[col].mean())
option: 箱ヒゲ図を横向きにする	vert = False
データフレームのカラムの年	df[col].dt.year
黄色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームのリストカラムの未入力値を中央値で埋める	df[aList].fillna(df[aList].median())
列によってデータフレームをグループ化して、それぞれのグループごとの平均値を計算する	df.groupby(column).mean()
シーケンスとイテラブルを連結する	itertools.chain(iterable, iterable2)
データ列の中に日付データが存在するかどうか確認する	ds.isin([value])
文字列をエンコーディングによってバイト列に変換する	s.encode(encoding=encoding)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
行列を元に全要素が0のベクトル	np.zeros_like(aArray)
リストからオブジェクトを除く	aList.remove(element)
Pandasで、UNIX秒のデータ列からPandasの日付型にする	pd.to_datetime(ds, unit='s', utc=True)
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
原点から点までの距離	math.hypot(x, y)
部分文字列で文字列の開始位置以降が始まるかテストする	s.startswith(sub, start)
日付時刻データの年を使う	aDatetime.year
逆順の両端キュー	reversed(deq)
列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
コーンズシルク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
文字列がリストの要素でない	element not in aList
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
スライドにグラフの目的を設定する	sns.set(context='talk')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
文字列を全て小文字に変換する	s.casefold()
オブジェクトは集合クラスか	isinstance(obj, set)
データフレームのカラムの値を正規表現patternで一度にreplに置き換える	df[col].replace(pattern, repl, regex=True)
option: 線種を点線に設定する	linestyle = 'dotted'
ファイルを書き込みモードを用いてオープンして]fとする	f = open(filepath, mode='w')
イテラブルをヒストグラムにする	plt.hist(データ列)
折れ線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
黒い大バツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームのリスト列の未入力値を最大値に設定する	df[aList].fillna(df[aList].max())
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
option: ライトグリーン色を用いる	color = 'lightgreen'
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
オプションで、ファイルを使用する	file = sys.open(filename, 'w')
option: ライトコーラルを使用する	color = 'lightcoral'
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
散布図を白色を用いて描画する	plt.scatter(データ列x, データ列y, color='white')
ダークシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
リストをリストを境界値としてビニングする	pd.cut(aList, aList)
箱髭図でデータ列を可視化する	plt.boxplot(データ列)
イテラブルを無限に繰り返す	itertools.cycle(iterable)
線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
要素ひとつの組を得る	(element,)
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
option: 四角印を使う	marker = 's'
option: オレンジレッドにフォントの色を設定する	color = 'orangered'
ファイルパスからストリームを読み込みfileとする	file = open(filepath)
データフレームの中で列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
折れ線グラフをライトスレイグレー色を使って描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
散布図の大バツ印の色を指定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
散布図に丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
option: 耐火レンガにグラフの色を設定する	color = 'firebrick'
整数nを16進表記にする	hex(n)
▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームからカテゴリデータの列だけ選択する	df.select_dtypes('object')
等間隔の行列	np.arange(開始値, 終了値, 等差)
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームのn行目まで抽出する	df[:n]
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データ列をカテゴリデータに変換する	ds.astype(object)
option: レベッカパープル色を使う	color = 'rebeccapurple'
option: 色のアルファを変更する	alpha = 0.5
イテラブルとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
nをn2で整数除算する	n // n2
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
文字列の左端の空白を除去する	s.lstrip()
散布図を赤い△マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
リストとデータ列の散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの▽マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
浮動小数点数の２乗	x ** 2
最大最小から配列を作る	np.linspace(最小値, 最大値, 要素数)
nがn2以下か調べる	n <= n2
スピアマン相関係数でデータフレームの相関行列を算出する	df.corr(method='spearman')
データフレームのカラムの欠損値を最大値に指定する	df[col].fillna(df[col].max())
データ列の一意な値の個数	ds.nunique()
二ベクトル間のユークリッド距離を求める	math.dist(point, point2)
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
option: フォントの色をライトスカイブルーに指定する	color = 'lightskyblue'
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフをバツ印を用いる描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームのカラムはどれだけ分散しているか見る	df[col].var()
２次元タプルをフラット化する	sum(aTuple)
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
データフレームのリスト列の中にいくつNaNが含まれるか数える	df[aList].isna().sum()
option: 三角マーカーを描画する	marker = '^'
配列とリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列の示すエンコーディングで書き込み用にファイルパスを開く]	open(filepath, mode='w', encoding=s)
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgrey')
縦軸の目盛りを非表示にする	plt.yticks([])
データ列の推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
アルファベットの大文字列	string.ascii_uppercase
Pandasで、書式fmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
データフレームの中に文字列があるか調べる	df.isin([value])
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図に菱形マーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
辞書の項目名の一覧を得る	aDict.keys()
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームを'A'列の値でグループ分けして、列挙する	[(name, group) for name, group in df.groupby('A')]
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
ゴーストホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
文字列が片仮名か判定する	('ァ' <= ch <= 'ン')
日付データにn週間を加える	aDate + datetime.timedelta(weeks=n)
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
昇順にデータフレームを複数の列によって破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムの色をダークゴールデンロッドにセットする	plt.hist(データ列, color='darkgoldenrod')
SJISでTSVを読み込む	pd.read_csv(filename, encoding='shift_jis')
オブジェクトの属性の値を指定する	setattr(obj, プロパティ名, 値)
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
データフレームのcollのUNIX秒からdatetime64型にする	pd.to_datetime(df[col], unit='s', utc=True)
組をリストにする	list(aTuple)
単位正方行列	np.identity(n)
リストを等間隔でn個にビニングする	pd.cut(aList, n)
フローラルホワイト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
散布図をブルーバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
現在の時刻	datetime.date.today().hour
データフレームの列をインデックスに設定する	df.set_index(column)
オブジェクトのクラスを使う	type(obj)
option: カラムの名前をnamesに設定する	header = names
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
リストとリストについての散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
ファイルをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
両端キューの要素数を算出する	len(deq)
折れ線グラフのバツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
数値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
文字列のプレフィックスから部分文字列を取り除く	s.removeprefix(sub)
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
空白文字を使う	string.whitespace
リストとリストの散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
option: ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
データ列とリストの散布図を描画して、ポイントマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データ列の一意な値	ds.unique()
部分文字列が文字列の開始位置以降にないか調べる	s.find(sub, start) == -1
全要素を０で初期化した三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
データフレームのカラムのモード	df[col].mode()
文字列をコロンで分割して、文字列リストにする	s.split(':')
縦棒グラフをパウダーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='powderblue')
小数点数を切り上げて整数にする	math.ceil(x)
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
散布図をrgbの三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
文字列を変数にする	sympy.Symbol(s)
直前の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
グラフのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
2つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
既存のファイルをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
小数点数を切り下げる	math.floor(x)
データ列とリストについて散布図を描画し、、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
コンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
切片なしの回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
空の線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
シエナ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
ファイルパスを文字コードtextで書き込み用に開く]	open(filepath, mode='w', encoding=text)
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
option: グラフの色をホットピンクに指定する	color = 'hotpink'
文字のASCIIコードを使う	ord(ch)
イテラブルの要素を集合に追加する	aSet.update(iterable)
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
nの三乗	n ** 3
正規表現に複数行対応として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
保存するカンマ区切りのファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
黒いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ダイアモンド印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
タプルの合計値	sum(aTuple)
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
変数名をキーとしてマッピング	dict(name=element)
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
グラフを描く準備をする	import matplotlib.pyplot as plt
'A'列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby('A').describe()
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
データフレームの各グループごとの個数	df.groupby(column).count()
小数点数が無限大	math.isinf(x)
今日が月曜日か	datetime.datetime.today().weekday() == 0
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
マップの値数	len(aDict)
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
整数個のものからk個取り出したときの並べ方	math.perm(n, k)
回帰分析をランダム性を追加したランダムフォレストでする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
折れ線グラフのダイアモンドマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
既存のベクトルをベースにして全要素が0の配列	np.zeros_like(aArray)
配列の個数を求める	aArray.size
データフレームのリスト列の値をまとめて正規表現でreplに置き換える	df[aList].replace(pattern, repl, regex=True)
データ列のNaNを後の行の値で補う	ds.fillna(method='bfill')
リストの先頭を求める	aList[0]
イエローグリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
文字列が部分文字列で終わるか調べる	s.endswith(sub)
集合から別のセットとの共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
平均でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].mean())
数式の積分を計算する	sympy.integrate(e)
データフレームをTSVでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
スカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='skyblue')
データフレームのカラムの平均値	df[col].mean()
外れ値に強い線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
オブジェクトひとつのタプル	(element,)
グラフに被らない位置にデータラベルを表示する	plt.legend(loc='best')
文字列に変換してリストをつなげる	''.join(map(str, iterable))
横棒グラフをラベンダー色として描画する	plt.barh(データ列x, データ列y, color='lavender')
イテラブルとリストについて散布図をプロットして、マーカーを上三角に変更する	plt.plot(データ列x, データ列y, marker='^')
プロットのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
JSONLファイルにBOM付きでデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
ホットピンク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
データフレームを２つの列の値によって分類する	df.groupby(['A', 'B'])
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
プロットに凡例を加える	plt.legend(['凡例A', '凡例B'])
分類結果のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
タプル中の文字列が最初に見つかるインデックスを使う	aTuple.index(element)
リストとイテラブルについて散布図を描画してダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
50パーセンタイルでデータ列の欠損値を補う	ds.fillna(ds.median())
折れ線グラフをアンティークホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
チョコレート色を用いてヒストグラムを描画する	plt.hist(データ列, color='chocolate')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
文字列を中央寄せにする	s.center(文字列幅)
ピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
文字列の先頭でパターンにケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
option: 無視するフッタをnに減らす	skipfooter = n
データフレームのリスト列の未入力値を最小値で埋める	df[aList].fillna(df[aList].min())
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='gray')
nがn2以下、もしくは、n3以上か調べる	n <= n2 or n >= n3
両端キューの末尾に要素を追加する	deq.append(element)
実測値をモデルの予測値と対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
二つの文字列は等しくないか調べる	s != s2
タプルと列をzipする	itertools.zip_longest(iterable, iterable2)
プロットのx軸とy軸の比率を同じする	plt.axis('equals')
書き込むCSVの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
データフレームを二つのカラムによって大きい順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: グラフの色をダークオーキッドに変更する	color = 'darkorchid'
nがn2以上	n >= n2
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgray')
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
前もってパターンを複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データ列のユニークな値	ds.unique()
横方向に2つのデータフレームをマージする	pd.merge(df, df2)
データ列を100の位で丸める	ds.round(-2)
nを切り捨てながらn2分の一にする	n //= n2
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームの列のユニークな値の個数を見る	df[col].nunique()
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
文字列は全て数値かどうか	s.isnumeric()
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
option: マーカーの色を青にする	markerfacecolor = 'blue'
配列を等しい量になるようにn個にビニングする	pd.qcut(aArray, n)
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
xが-9以上9以下か	-9 <= x <= 9
主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
リストと数列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
整数nの8進表記	oct(n)
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
非数	math.nan
直前の値でデータフレームのリスト列の欠損値を補う	df[aList].fillna(method='ffill')
正弦を求める	math.sin(x)
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
文字列を走査し、正規表現にマッチするか調べる	re.search(pattern, s)
ファイルからの入力ストリームを見る	open(filepath)
option: NaNも無視しない	dropna = True
データフレームのカラムの中にいくつがあるかカウントする	df[col].isin([value]).sum()
折れ線グラフの三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='grey')
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
折れ線グラフに右三角印を用いる	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
散布図を黒い丸マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームを各列毎にグループ化して文字列という名前のグループを使う	df.groupby(column).get_group(s)
option: グラフの色をスラグレーに設定する	color = 'slategray'
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
predicateFuncが真になるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
ホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='white')
線グラフを一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
等量でビン数nでデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: フォントの色をダーク・スラテグレーにする	color = 'darkslategrey'
option: フォレストグリーン色を使う	color = 'forestgreen'
横棒グラフをバイオレット色で描画する	plt.barh(データ列x, データ列y, color='violet')
両端キューに要素をenqueueする	deq.appendleft(element)
データ列の欠損値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
シーケンスから一つランダムに選ぶ	random.choice(iterable)
プロットを使う	import matplotlib.pyplot as plt
辞書のエントリ数を得る	len(aDict)
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
散布図の△マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
漢字が文字列に含まれるか	re.search('[\u4E00-\u9FD0]', s)
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
日付データが土曜日か	aDate.weekday() == 5
コマンドの第二引数を知る	sys.argv[1]
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
データ列を100の位で四捨五入する	ds.round(-2)
セットから別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
配列の累積積	np.cumprod(aArray)
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
nの二進表記	bin(n)
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
正規分布による累積分布関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ダークバイオレット色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
2つのオブジェクトは同じか確認する	obj is obj2
列をイミュータブルなセットに変換する	frozenset(iterable)
rgbの▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
リストを行列に変換する	np.array(aList)
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
シーケンスからカウンタを準備する	collections.Counter(iterable)
ヒストグラムの色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
書き込みモードとしてファイルをオープンして]fとする	f = open(filepath, mode='w')
リストの最後を取り除く	aList[:-1]
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
プログラムのファイルの名前を調べる	sys.argv[0]
双方向キューの末尾から要素を削除する	deq.pop()
未初期化の配列	np.empty(要素数, dtype=np.int)
option: ゲインズボロに色をする	color = 'gainsboro'
ユーザから入力される	input()
整数nの十六進数文字列を見る	hex(n)[2:]
データフレームの指定された列を取り出す	df[column]
データフレームの全カラムを散布図としてプロット化する	sns.pairplot(df)
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
option: 文字列をセパレータで用いる	sep = s
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
スタックの末尾にイテラブルの各要素を順に追加する	deq.extend(iterable)
赤いポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
散布図をrgbの星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームのリストカラムのNaNを後の値に設定する	df[aList].fillna(method='bfill')
データフレームの列の欠損値をモードで埋める	df[col].fillna(df[col].mode().iloc[0])
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
ダークターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレーム全体を行によって昇順に並べる	df.sort_index(ascending=True)
折れ線グラフの▲マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列が空白文字からなるか調べる	s.isspace()
option: フォントの色をビスクに設定する	color = 'bisque'
option: 印を四角に変える	marker = 's'
リストを累加する	itertools.accumulate(iterable)
カウンタの最頻出な項目を計算する	aCounter.most_common()[0]
実数の絶対値	math.fabs(x)
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
両端キューの左にイテラブルの値を入れる	deq.extendleft(iterable)
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
両端キューをポップする	deq.pop()
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
option: ゴールド色を使う	color = 'gold'
実線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid')
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: ダークカーキ色を使う	color = 'darkkhaki'
リストの平均値を算出する	sum(aList)/len(aList)
棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
配列と数列について散布図を描画して左三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
２つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
カラムの中にいくつ文字列があるかカウントする	ds.isin([value]).sum()
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
nとn2の和	n + n2
耐火レンガ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
ターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
既存の配列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
ヒストグラムの色をラベンダーに指定する	plt.hist(データ列, color='lavender')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
データ列の月	ds.dt.month
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
文字列が全て空白文字からなるか調べる	s.isspace()
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
データフレームのリスト列を百の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
折れ線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
浮動小数点数を切り上げて整数に変換する	math.ceil(x)
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
データから名前付きタプルをインスタンス化する	C._make(パラメータ)
文字列をカンマで区切り、、列挙する	s.split(',')
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームの値を正規表現patternでまとめて置き換える	df.replace(pattern, repl, regex=True)
option: ミディアムスレートブルーにグラフの色を指定する	color = 'mediumslateblue'
整数nは組のいづれかか	n in aTuple
スカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
スピアマン順位相関係数でデータフレームの相関行列	df.corr(method='spearman')
option: 色をミディアムブルーに設定する	color = 'mediumblue'
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
データフレームを各列と列の組み合わせ毎に集約して、個数を計算する	df.groupby([column, column2], as_index=False).count()
破線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 色をダークマゼンタに設定する	color = 'darkmagenta'
折れ線グラフの▲マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
線グラフを色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームのカラムの各データが何回出現するか見る	df[col].value_counts()
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
リストとリストについて散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
縦に二つのデータフレームを連結する	pd.concat([df, df2], axis=0)
データフレームのn番目の行を抽出する	df.loc[n]
option: ダイアモンド印を加える	marker = 'D'
Pandasで、UNIX時間のデータフレームのcollからPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
ベクトル間の各要素の最大公約数	np.gcd(aArray, aArray2)
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームを２つの列によってグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
実数の角度	math.degrees(x)
データフレームを列を用いて並べて、下位n件を取り出す	df.sort_values(columns).tail(n)
データ列の中に日付データと日付データがあるか調べる	ds.isin([value, value2])
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
切片なしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
カテゴリ列で色分けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
nが1もしくは2か調べる	n == 1 or n == 2
option: グラフの線の種類を破線に変更する	linestyle = 'dashed'
x軸の目盛りを表示しない	plt.xticks([])
折れ線グラフの▽印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
日付時刻データが日曜日か	aDatetime.weekday() == 6
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
リストの変化を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
パレットトルコイズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
nの桁数を求める	len(str(n))
ファイルパスを読み込みできるように開く]	open(filepath, mode='r')
黒い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの中のNaNを落とす	df.dropna()
数値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
ヒストグラムの色をシャルトリューズに指定する	plt.hist(データ列, color='chartreuse')
option: ライトスレイグレー色を使用する	color = 'lightslategray'
イテラブルを多重集合に変換する	collections.Counter(iterable)
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
現在の再帰の最大回数	sys.getrecursionlimit()
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
散布図の菱形マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: クリムゾンを用いる	color = 'crimson'
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
セットの要素数	len(aSet)
データフレームを複数の列の値で集約する	df.groupby(columns)
オブジェクトは浮動小数点数型かどうか調べる	isinstance(obj, float)
折れ線グラフを色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
赤色を用いてヒストグラムを描画する	plt.hist(データ列, color='red')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
数式をパラメータについて微分する	sympy.diff(e, z)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
実数の二乗を計算する	x ** 2
折れ線グラフの色をライトブルーにする	plt.plot(データ列x, データ列y, color='lightblue')
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
リストの合計を求める	sum(aList)
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
赤い星マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
2つの文字列は同じでないか調べる	s != s2
ふたつの集合はセットと互いに素かどうか調べる	aSet.isdisjoint(aSet2)
リストの要素を昇順にソートする	sorted(aList, reverse=True)
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームの列名を付け直す	df.rename(columns={column: name})
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
タプルとタプルを結合する	aTuple + aTuple2
行列の行ごとの最小値を算出する	np.min(aArray, axis=1)
行列の和を計算する	aArray + aArray2
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームの列を柱状グラフにする	plt.hist(df[column])
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
配列は何次元か調べる	aArray.ndim
nの無限の整数リスト	itertools.repeat(n)
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
棒グラフをロージーブラウン色を使って描画する	plt.bar(データ列x, データ列y, color='rosybrown')
横棒グラフをインディアンレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='indianred')
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
入力ストリームを全部、読み込む	f.read()
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
散布図にrgbの上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
データフレームの列のユニークな要素を見る	df[col].unique()
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
xが1もしくは2かどうか調べる	x == 1 or x == 2
nがn2の倍数でないか判定する	n % n2 != 0
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
ピーチパフ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームから型リストデータ型の列のみ選択する	df.select_dtypes(include=typeList)
全要素を1で初期化したベクトルを作る	np.ones(要素数, dtype=np.int)
実数の余弦	math.cos(x)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
黒い上三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
現在が木曜日	datetime.datetime.today().weekday() == 3
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
カウンタの最も頻出な要素を求める	aCounter.most_common()[0]
組と組を結合する	aTuple + aTuple2
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
組と組を連結する	aTuple + aTuple2
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームのリストカラムの欠損値を最小値に指定する	df[aList].fillna(df[aList].min())
ムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
ファイルを書き込みモードとしてオープンして]fとする	f = open(filepath, mode='w')
ストリーム全体を行単位で分割して読み込む	f.readlines()
option: セパレータをカンマにする	sep = ','
データフレームを二つのカラムによってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
折れ線グラフの色をダークターコイズに指定する	plt.plot(データ列x, データ列y, color='darkturquoise')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
データ列を箱ひげ図でプロットする	plt.boxplot(データ列)
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
データフレームの列の値がx以上かつx2未満の行を選ぶ	df[(x <= df[column]) & (df[column] < x2)]
option: トマトを使用する	color = 'tomato'
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
タプルを反転する	reversed(aTuple)
横棒グラフをダークマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
オプションでファイルを出力先にする	file = sys.open(filename, 'w')
文字列中に非大文字があるかどうか調べる	any(not c.isupper() for c in s)
リストを緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
option: 色をフォレストグリーンに設定する	color = 'forestgreen'
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
平均と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
データフレームの指定された列名リストの列だけ選択する	df[columns]
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
値が集合のメンバーでないかテストする	element not in aSet
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
標準入力から1行読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
option: フォントの色をローングリーンにセットする	color = 'lawngreen'
列の文字列を未入力値に変換する	ds.replace(s, np.nan)
列から複数個、ランダムに選ぶ	random.choices(iterable, k=n)
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
文字列を正規表現で分割する	re.split(pattern, s)
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列が識別子名か	s.isidentifier()
ライトコーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
データで分類モデルを学習する	model.fit(説明変数, 目的変数)
組をnから順序付けする	enumerate(aTuple, start=n)
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
棒グラフをライムグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: グラフの色をダークシアグリーンに指定する	color = 'darkseagreen'
ダークレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
散布図を白色として描画する	plt.scatter(データ列x, データ列y, color='white')
縦軸の目盛の値を変更する	plt.yticks(目盛りの値リスト)
グラフを画面に設定する	sns.set(context='notebook')
タイムスタンプデータが日曜日かどうか調べる	aDatetime.weekday() == 6
要素が全て1の配列	np.ones(要素数, dtype=np.int)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
変数の値を入れ替える	x, y = y, x
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
option: ピーチパフを用いる	color = 'peachpuff'
カラムの文字列を未入力値に変換する	ds.replace(s, np.nan)
表を各列と列の組み合わせ毎にグループ化し、、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データフレームを列で集約して、列の要約統計量を求める	df.groupby(column).describe()[column2]
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
option: グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
辞書をカウンタに変換する	collections.Counter(aDict)
option: グリーン色を使う	color = 'green'
赤い実線として数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ファイルを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
配列が何のデータ型か調べる	aArray.dtype()
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
データフレームのリストカラムのNaNを前の行の値に設定する	df[aList].fillna(method='ffill')
実数が負の数かどうか調べる	x < 0
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
表データのstart行目からend行目まで抽出する	df[start:end]
パパイヤウィップ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ヒストグラムをインディゴ色を用いて描画する	plt.hist(データ列, color='indigo')
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
option: レモンシフォンに色を設定する	color = 'lemonchiffon'
折れ線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
タプルを番号付けする	enumerate(aTuple)
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームの数値をまとめて丸める	df.round()
データフレームのカラムのNaNを最頻値に増やす	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
配列の累積積を計算する	np.cumprod(aArray)
オブジェクトがプロパティを持つかどうか	hasattr(obj, プロパティ名)
データ列の散布を可視化する	plt.scatter(データ列x, データ列y)
1行だけ標準入力から改行を取り除いて読み込む	sys.stdin.readline().rstrip()
ヒストグラムの色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データ列のどの値が頻出か見る	ds.mode()
カウンタを辞書として更新する	aCounter.update(aDict)
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
標準出力を	sys.stdout
リストにリストを加えて広げる	aList.extend(aList2)
線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
黒いクロスマーカーを配列と数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
黒い左三角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c='k')
数値の出力を改行せず行う	print(value, end='')
option: パープル色を使う	color = 'purple'
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
分子割る分母	fractions.Fraction(分子, 分母)
ミディアムバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
リストと配列の散布図を描画してマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データフレームの中のカラムをn個にビニングし、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列を空白を使って区切る	s.split()
回帰分析を多層パーセプトロンで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
折れ線グラフの色をフォレストグリーンにセットする	plt.plot(データ列x, データ列y, color='forestgreen')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
option: マゼンタ色を使う	color = 'magenta'
文字列を部分文字列で分割したときの最初の文字列	s.partition(sub)[0]
二つの関係が真⊂か	aSet < aSet2
ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
レベッカパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
折れ線グラフを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
黒いグリッド線を引く	plt.grid(color='k')
データフレームの列の歪度を求める	df[col].kurt()
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
リストとリストについて散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのカラムの名前を列から文字列に付け直す	df.rename(columns={column: name})
ロイヤルブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
折れ線グラフをターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
イテラブルとシーケンスの直積	itertools.product(iterable, iterable2)
文字列が文字列より辞書順で前か	s < s2
option: エラーがあるとき、例外を発生させる	errors = 'strict'
グラフの中の日本語表示を利用可能にする	sns.set(font='IPAexGothic')
文字列は印字できるか調べる	s.isprintable()
正規分布による累積分布関数の逆関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図に大バツ印を加える	plt.scatter(データ列x, データ列y, marker='X')
ミディアムアクアマリンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumaquamarine')
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
日本語が文字列にあるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
option: 耐火レンガにフォントの色を設定する	color = 'firebrick'
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
アルファベットの大文字を全部使う	string.ascii_uppercase
Pandasでフォーマットfmtとしてデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col], format=fmt)
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
折れ線グラフを青色を用いて描画する	plt.plot(データ列x, データ列y, color='blue')
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
乱数生成系列をnで初期化する	random.seed(n)
整数nの8進数表現	oct(n)
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
データフレームのn行より後ろ抽出する	df[n:]
オプションで、標準出力に出力する	file = sys.stdout
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
数値を緑色で出力する	print(f'\033[32m{value}\033[0m')
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
集合の補集合を使う	aSet.difference(aSet2)
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスにして読む	pd.read_csv(filename, index_col=n)
データフレームを降順に破壊的に'A'列によって並べる	df.sort_values(by='A', ascending=False, inplace=True)
option: ダークシアグリーンを使用する	color = 'darkseagreen'
数式の変数を数式で置き換える	e.subs(z, e2)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
入力ストリーム全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームが重複しているか判定する	df.duplicated()
ピアソンを使ってデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
データ列の標準偏差	ds.std()
表から指定された４つの列を取り出す	df[[column, column2, column3, column4]]
1からnまでの整数列を作る	list(range(1, n+1))
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
リストとリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
文字列が全てアルファベットかどうか判定する	s.isalpha()
データフレームをCSVファイルを用いてJSONLファイルに保存する	df.to_csv(filename)
行列を転置する	aArray.T
昇順に二つの列によってデータフレームを並べ直して更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
現在の分数を求める	datetime.date.today().minute
英字を全て使う	string.ascii_letters
タイムスタンプデータの曜日を使う	aDatetime.weekday()
度数分布図のビン数を設定する	plt.hist(データ列, bins=区関数)
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
行列の差	aArray - aArray2
二つの変数をそれぞれ定義する	x, y = i, j
ミディアムスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームのカラムの欠損値をxで補う	df[col].fillna(x)
パープル色としてヒストグラムを描画する	plt.hist(データ列, color='purple')
両端キューのstart番目からend番目までの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
スチールブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
データフレームを2つの列を用いて昇順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
要素∈集合	element in aSet
二つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
多次元尺度構成法で多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データフレームのカラムの未入力値を最小値に設定する	df[col].fillna(df[col].min())
option: ブラックにフォントの色をセットする	color = 'black'
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
本日が何曜日か知る	datetime.datetime.today().weekday()
リストと配列の散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
rgbの大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: フォントの色をライトイエローに設定する	color = 'lightyellow'
分類結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
二つの最大値を算出する	max(x, y)
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームを降順に二つの列によってでソートする	df.sort_values(by=['A', 'B'], ascending=False)
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
全要素を０で初期化した符号なし８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.uint8)
データフレームの列の欠損値を平均値で埋める	df[col].fillna(df[col].mean())
データフレームのn行より後ろを抽出する	df[n:]
プロットにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
Pandasで、UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
文字列を走査し、パターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
線グラフを青紫色を用いて描画する	plt.plot(データ列x, データ列y, color='violet')
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
ASCII限定として正規表現をあらかじめコンパイルする	re.compile(pattern, flag=re.ASCI)
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
option: カーキを用いる	color = 'khaki'
タブ区切りのファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
カラーバーを描画する	plt.colorbar()
Pandasで、Pandasの日付型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='teal')
オブジェクトがタプルに含まれるか	element in aTuple
タイムスタンプデータからn週間分減らす	aDatetime - datetime.timedelta(weeks=n)
データフレームのインデックス名を、nameからname2に変更する	df.rename(index={name: name2})
プラットフォームの文字コードの最大値	sys.maxunicode
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
変数が0に近づくとき、数式の極限値を求める	sympy.limit(e, z, 0)
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
キュー中の値の数を数える	deq.count(element)
ライトスレイグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightslategray')
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの中のNaNを消す	df.dropna()
データ列の日を求める	ds.dt.day
キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
複数の列によってデータフレームをまとめたグループを使う	df.groupby(columns)
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
データフレームの列を丸める	df[col].round()
大きい順に列名リストを用いてによってデータフレームをソートする	df.sort_values(by=column, ascending=False)
option: エンコーディングをEUCに指定する	encoding = 'euc_jp'
折れ線グラフに赤い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
横棒グラフを白色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
列にイテラブルを続けた列	itertools.chain(iterable, iterable2)
nが3で割り切れるかどうか調べる	n % 3 == 0
ミディアムオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
シーケンスを両端キューにする	collections.deque(iterable)
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
赤色としてヒストグラムを描画する	plt.hist(データ列, color='red')
ホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
エクセルファイルファイルからを読み込む	pd.read_excel(filename)
データフレームのリスト列のpercent分位数を求める	df[aList].quantile(percent/100)
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgreen')
リストの要素を昇順に並べ直す	sorted(aList, reverse=False)
ヒストグラムの色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
グラフのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
CSVファイルをデータフレームとして読む	pd.read_csv(filename, sep=',')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
ファイルから1文字、読み込む	f.read(1)
データフレームをにバイオリン図を用いて描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
横棒グラフを黄緑色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
ラインを半透明の破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストと配列の散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
データフレームのカラムをカテゴリに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
リストの合計値を計算する	sum(aList)
n個の整数列を作る	list(range(n))
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
折れ線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
二つのリストから辞書を作る	dict(zip(aList, aList2))
シーケンスから配列を作る	np.array(iterable)
option: グラフの色をグリーンに指定する	color = 'green'
文字列を改行を用いて区切る	s.splitlines()
リストと配列についての散布図に黒い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
リストとイテラブルについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列がリストに含まれるかどうかテストする	element in aList
option: 文字コードtextを使う	encoding = text
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
配列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
データフレームのカラムを千の位で四捨五入して整数にする	df[col].round(-3).astype(int)
パラメータがマイナス無限大に近づくときの数式の極限値を算出する	sympy.limit(e, z, -oo)
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームの中の列と列に重複があれば、ドロップする	df.drop_duplicates(subset=column)
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
nが偶数か判定する	n % 2 == 0
列のNaNを直前の値に設定する	ds.fillna(method='ffill')
配列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームの中の列をビン数nでビンニングする	pd.cut(df[col], n)
n2がnより大きくかつ、n3未満	n < n2 and n2 < n3
小さい順にデータフレームを列によって整列する	df.sort_values(by=column, ascending=True)
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
aListn番目から要素をポップする	aList.pop(n)
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
コマンド引数のリストを得る	sys.argv[1:]
折れ線グラフの星マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームをJSONLファイルにエクセルデータファイルを用いて保存する	df.to_excel(filename)
部分的最小二乗法を用いて回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
nがn2より大きいか判定する	n > n2
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームを列で並べ直して行を振り直す	df.sort_values(columns).reset_index(drop=True)
データフレームを関数によってグループ分けする	df.groupby(関数)
2つのデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
折れ線グラフを色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
nを八進数表現にする	oct(n)
正規表現patternでデータフレームの列をまとめて置換する	df[col].replace(pattern, repl, regex=True)
option: フォントの色をディープスカイブルーに設定する	color = 'deepskyblue'
クラス分類の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
タプルの項目名の値	aDict[key]
実数を整数に変換する	int(x)
option: ブルーバイオレットにグラフの色をセットする	color = 'blueviolet'
環境がMacOSか	sys.platform.startswith('darwin')
option: グラフの色を紺に指定する	color = 'darkblue'
空文字を使う	''
散布図のバツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
既存の配列を元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
リストとリストについての散布図にrgbの下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列の数値時刻から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
赤い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
option: ブラウンにフォントの色を指定する	color = 'brown'
文字列が全て大文字か調べる	s.isupper()
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データ列と数列について散布図を描画してマーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
リストの要素を昇順にソートする	sorted(aList, reverse=False)
TSVをヘッダを指定せず読む	pd.read_csv(filename, header=None)
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
列をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
データ列の偏りを平方根する	np.sqrt(データ列)
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
リストを両端キューにする	collections.deque(iterable)
タプルの中の最大値を求める	max(aTuple)
カウントプロットをプロットする	sns.countplot(x='列名', data=df)
カウンタの全数を求める	aCounter.total()
データフレームの欠損値を平均で埋める	df.fillna(df.mean())
エクセルファイルファイルからnという名前のシートを読み込む	pd.read_excel(filename, sheet_name=n)
リストをnから順序付けする	enumerate(aList, start=n)
CSVファイルTSVをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
option: 紺碧にフォントの色を変更する	color = 'azure'
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
実数の仮数部を求める	math.frexp(x)[0]
year年month月day日hour時をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour)
スタックは空であるか	len(deq) == 0
option: サンディーブラウンに色を指定する	color = 'sandybrown'
3つの文字列を出力する	print(value, value2, value3)
データフレームの列を削除し、、インプレイスする	df.drop(column, axis=1, inplace=True)
option: グラフの色をミッドナイトブルーに変更する	color = 'midnightblue'
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
カテゴリ別で色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの列の文字列長を列として見る	df[col].str.len()
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
オプションで、標準エラーに出力する	file = sys.stderr
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
数列と配列の散布図を描画して星マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
組を反転する	reversed(aTuple)
オブジェクトは整数か	isinstance(obj, int)
白色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
縦棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフの▽印を青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: ペルーを用いる	color = 'peru'
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
データフレームをに箱ひげ図を用いて見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの中の列をn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのカラムを散布図で見る	sns.scatterplot(data=df, x='列名', y='列名')
イテラブルをカウンタに変換する	collections.Counter(iterable)
空白が文字列内に含まれるか確認する	any(c.isspace() for c in s)
0からN未満までの配列を作る	np.arange(N)
データ列を円グラフにする	plt.pie(データ列, startangle=90)
線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ライトサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='lightsalmon')
散布図を黒い菱形マーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='k')
日付時刻データの日付	aDatetime.date()
データフレームの列を消し、、入れ替える	df.drop(column, axis=1, inplace=True)
マッピングをチェーンマップにする	collections.ChainMap(aDict)
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
option: 珊瑚色を使う	color = 'coral'
カウンタのキーと出現回数をリストとして得る	aCounter.items()
要素は集合に含まれない	element not in aSet
部分文字列が文字列の開始位置番目からと終了位置までの間に含まれない	s.find(sub, start, end) == -1
データフレームが正規分布からどの程度、歪んでいるか調べる	df.kurt()
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
nとn2のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
option: グラフを点線に設定する	linestyle = 'dotted'
データフレームの2つのカラムを並べて箱ひげ図で描画する	plt.boxplot([df['カラム'], df['カラム']])
ヒストグラムの色をオールドレースにセットする	plt.hist(データ列, color='oldlace')
option: バッファのサイズを小さくする	buffering = 4096
空白によって文字列を区切る	s.split()
predicateFuncが真になる列の要素	itertools.dropwhile(predicateFunc, iterable)
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
大きさnで配列と配列についての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: 文字列の示す文字コードを使う	encoding = s
文字列を部分文字列で二分し、前半の文字列を見る	s.partition(sub)[0]
option: ゴールデンロッド色を用いる	color = 'goldenrod'
nullに等しい値	None
データフレームのカラムの欠損値を直前の値で補う	df[col].fillna(method='ffill')
色付きの破線としてイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
まとめてValueMapでデータフレームの列の値を置き換える	df[col].replace(ValueMap)
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
データフレームの行の一覧を求める	df.index
データ列の25パーセンタイルを求める	ds.quantile(0.25)
赤い下三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
シーケンスとシーケンスのデカルト積	itertools.product(iterable, iterable2)
線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ダークグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
日付時刻データが何時か知る	aDatetime.hour
線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
option: 紺色を使う	color = 'darkblue'
タプルを昇順に並べ変える	sorted(aTuple, reverse=True)
文字列の先頭が部分文字列かどうか	s.startswith(sub)
シードをnで固定する	random.seed(n)
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
マップのコピー	dict(aDict)
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
各列毎にデータフレームをグループ分けして、列の最大値を求める	df.groupby(column)[column2].max()
最後の部分文字列で文字列を二分する	s.rpartition(sub)
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
値を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
ゼロ埋めした複素数型の配列を作る	np.zeros(要素数, dtype=bool)
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
青い点線で数列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームの列の中にいくつ欠損値があるか数える	df[col].isna().sum()
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
現在を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
データフレームを丸める	df.round()
配列とリストについての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフをライトゴールドロディイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
数式の数値を計算する	float(e)
リストと配列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストを縦軸リストを横軸として大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
nが2で割り切れるか	n % 2 == 0
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
option: グラフの線種を点線に変更する	linestyle = 'dotted'
データフレームの信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
モカシンにヒストグラムの色をセットする	plt.hist(データ列, color='moccasin')
列から一つランダムに選ぶ	random.choice(iterable)
リストとリストの散布図をプロットし、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
今日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
円グラフとして数列の割合を可視化する	plt.pie(データ列, startangle=90)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか調べる	s.count(sub, start, end)
データフレームのリスト列のNaNを直前の値で補う	df[aList].fillna(method='ffill')
横棒グラフをシーグリーン色として描画する	plt.barh(データ列x, データ列y, color='seagreen')
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
改行で区切って２つの実行結果を表示する	print(value, value2, sep='\n')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
複数行対応としてあらかじめパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
数式の微分を求める	sympy.diff(e)
区間から配列	np.linspace(最小値, 最大値, 要素数)
option: どの列もインデックスにしない	index_col = None
文字列中にひとつでも非空白があるか	any(not c.isspace() for c in s)
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: 大バツ印を使う	marker = 'X'
配列とリストについての散布図にrgbの四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの欠損値を落とす	df.dropna()
度数分布図を三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
破壊的に列名リストでによってデータフレームを整列する	df.sort_values(by=column, inplace=True)
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
文字列の最初から部分文字列を除去する	s.lstrip(sub)
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
棒グラフをベージュ色を用いて描画する	plt.bar(データ列x, データ列y, color='beige')
文字列中に非アルファベットが含まれるかどうか判定する	any(not c.isalpha() for c in s)
データフレームの欠損値が含まれる箇所に色をつける	df.style.highlight_null()
データフレームを各列と列の組み合わせ毎に集約して、個数を求める	df.groupby([column, column2], as_index=False).count()
円周率を使う	math.pi
rgbの大バツマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
柱状図を描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
リストのそれぞれを関数でフィルタする	map(func, iterable)
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
データフレームの列の各データ値の出現回数	df[col].value_counts()
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
深紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームをインデックスによって昇順に並べる	df.sort_index(ascending=True)
数列と配列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフを白色として描画する	plt.plot(データ列x, データ列y, color='white')
option: グリーンにフォントの色を設定する	color = 'green'
JSON形式の文字列をデータにする	json.loads(jsonString)
紺碧色として散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
タプルの値だけプリントする	print(*aTuple)
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
乱数で要素を埋めた配列	np.random.random(N)
タプルをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
降順にデータフレームを複数の列によってでソートする	df.sort_values(by=column, ascending=False)
漢字が文字列に使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
日付時刻データの時刻を使う	aDatetime.time()
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
縦棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
option: n番目のカラムをインデックスに設定する	index_col = n
両端キューに要素をエンキューする	deq.appendleft(element)
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
option: プラム色を使用する	color = 'plum'
等量でビン数nとしてデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
ふたつの集合の積集合	aSet.intersection(aSet2)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
データフレームのリスト列の中に文字列と文字列が存在するかどうか調べる	df[aList].isin([value, value2])
データ列と配列についての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームのカラムの値は未入力値か調べる	df[col].isna()
文字列が全て印字できる	s.isprintable()
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
データフレームのカラムは何日か調べる	df[col].dt.day
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
option: 色をハニーデューにセットする	color = 'honeydew'
配列をビン分割する	pd.cut(aArray, aList)
両端キューの中に値は含まれてるかどうか調べる	element in deq
オブジェクトが浮動小数点数クラス	isinstance(obj, float)
MSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データ列を用いる	import pandas as pd
文字列が全て数字かどうか調べる	s.isdigit()
nが一桁の整数	-9 <= n <= 9
横棒グラフをモカシン色を用いて描画する	plt.barh(データ列x, データ列y, color='moccasin')
カウンタの値を増やす	aCounter[element] += 1
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
option: グラフの種類を実線に変更する	linestyle = 'solid'
2数の最小値	min(x, y)
文字列の両端から部分文字列を除く	s.strip(sub)
浮動小数点数の二乗	x ** 2
option: ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
コロンで区切って二つの数値をプリントする	print(value, value2, sep=':')
データフレームの列の一意な値を調べる	df[col].unique()
データフレームの内の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
option: ヘッダをnamesに設定する	header = names
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
option: ティール色を用いる	color = 'teal'
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
棒グラフの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
数式を簡単にする	sympy.sympify(e)
データフレームの中の列と列に重複があればドロップする	df.drop_duplicates(subset=column)
データフレームから列名を複数指定して選択する	df[columns]
ビン数nとしてデータフレームの中の列を分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの列の中にある文字列と日付データの合計を数える	df[col].isin([value, value2]).sum()
多層パーセプトロンを用いて回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
文字列のn番目	s[n]
ファイル名がJSONファイル	filename.endswith('.json')
棒グラフをシャルトリューズ色を用いて描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
両端キューのデータを左にn個分ローテンションする	deq.rotate(-n)
ヒストグラムを紺色を用いて描画する	plt.hist(データ列, color='darkblue')
ピアソン相関係数を用いてデータフレームの相関行列を計算する	df.corr(method='pearson')
データフレームのカラムの最頻値	df[col].mode()
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
散布図をライトイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データ列のエポック秒からPandasの日付型にする	pd.to_datetime(ds, unit='s', utc=True)
ラベンダーブラッシュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
option: 色を暗い赤に変更する	color = 'darkred'
プロットを色差別なくする	sns.set(pallete='colorblind')
両端キューをdequeue	deq.popleft()
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
キューの最後の要素を使う	deq[-1]
イテラブルを文字列リストに変換して空白によってつなげる	' '.join(map(str, iterable))
option: エラーを無視するように設定する	errors = 'ignore'
option: シアン色を用いる	color = 'cyan'
ポイント印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ベクトルから重複を除いた配列を作る	np.unique(aArray)
リストとリストについて散布図をプロットし、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
行を付けずにデータフレームをJSONLファイルに書き込む	df.to_csv(filename, index=None)
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
データ列をインポートする	import pandas as pd
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
option: スノーを使用する	color = 'snow'
nをn2で結果の切り上げ	(n + n2 - 1) // n2
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
データ列の秒	ds.dt.second
nが負の数か	n < 0
赤い四角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
nが偶数かどうか調べる	n % 2 == 0
二点間のユークリッド距離	math.dist(point, point2)
t-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
JSONLファイルにデータフレームをインデックスを付けずに書き込む	df.to_csv(filename, index=None)
nというシートをエクセルファイルファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
数値をキューにエンキューする	deq.appendleft(element)
データフレームから型の列だけ取り出す	df.select_dtypes(ty)
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
半透明の破線としてイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: ナバホホワイトにフォントの色をセットする	color = 'navajowhite'
カウンタの∩演算する	aCounter & aCounter2
折れ線グラフの菱形マーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
マッピングから最後のエントリを取り出す	aDict.popitem()
要素ひとつのタプルを得る	(element,)
赤い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: 最初の行をカラムの名前に設定する	header = 0
横棒グラフをクリムゾン色を用いて描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームの各列間の相関係数を求める	df.corr()
option: パレットトルコイズ色を使う	color = 'paleturquoise'
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
両端キューの大きさを求める	len(deq)
ファイルからのストリームを求める	open(filepath)
タプルの平均値	sum(aTuple)/len(aTuple)
折れ線グラフの四角印の色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
ふたつの関係が真上位集合か	aSet > aSet2
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
青い一点鎖線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: レモンシフォンにグラフの色を変更する	color = 'lemonchiffon'
xを論理値に変換する	bool(x)
小数点数は無限大か調べる	math.isinf(x)
オブジェクトはバイト列	isinstance(obj, bytes)
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
option: ライムにグラフの色を設定する	color = 'lime'
イテラブルをセットに変換する	set(iterable)
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
コマンドの第２引数	sys.argv[1]
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
option: アクアにグラフの色を設定する	color = 'aqua'
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
文字列を左寄せにする	s.ljust(文字列幅)
タプルの末尾からn番目以前の部分を抽出する	aTuple[:-n]
データフレームから数値データのみ抽出する	df.select_dtypes('number')
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
option: マルーンを使う	color = 'maroon'
二つのリストをコロンで区切って出力する	print(value, value2, sep=':')
option: エラーを無視するようにする	errors = 'ignore'
データフレームから列を２つ選択する	df[[column, column2]]
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
option: 文字列を改行の代わりに用いる	end = s
縦軸だけ目盛り線	plt.grid(axis='y')
イテラブルを２つ並べて柱状図にする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームを列によって集計する	df.groupby(column)
文字列のプレフィックスが部分文字列か調べる	s.startswith(sub)
一度にデータフレームのリストカラムの値を正規表現patternでreplに置換する	df[aList].replace(pattern, repl, regex=True)
グラフで利用可能な色の一覧を求める	matplotlib.colors.cnames
データ列のヒストグラムをプロットする	plt.hist(データ列)
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
option: インディアンレッドにグラフの色を指定する	color = 'indianred'
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
マッピング上で項目名が定義されていない	key not in aDict
option: フォントの色をラベンダーに変更する	color = 'lavender'
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
表示する列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
文字をASCIIコードにする	ord(ch)
最初の値を双方向キューから取り除く	deq.remove(element)
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
行列を元に全要素が0の配列	np.zeros_like(aArray)
小数点数の逆双曲線正弦を算出する	math.asinh(x)
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
青色として線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
最小値でカラムの欠損値を埋める	ds.fillna(ds.min())
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
option: ロイヤルブルーにフォントの色を設定する	color = 'royalblue'
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
文字列を最後の部分文字列で二つに区切って前半の文字列を使う	s.rpartition(sub)[0]
option: ダークスラテグレーを使う	color = 'darkslategray'
改行で文字列を区切る	s.splitlines()
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
棒グラフをライトグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
多層パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
データフレームのリストカラムの未入力値を直前の値に指定する	df[aList].fillna(method='ffill')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
データフレームで、列に重複があるか調べる	df.duplicated(subset=column)
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
文字列を紫色にする	f'\033[35m{value}\033[0m'
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
二つの集合が互いに素か確認する	aSet.isdisjoint(aSet2)
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
rgbの下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列がリストに含まれない	element not in aList
本日の日付を見る	datetime.date.today()
rgbの△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
文字列の左端	s[0]
赤い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: 色をライトスレイグレーに変更する	color = 'lightslategray'
n足すn2を求める	n + n2
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
プロットの背景色を暗くする	sns.set(style='darkgrid')
データフレームから重複したデータを残さず消す	df.drop_duplicates(keep=False)
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
nが5で割り切れるか調べる	n % 5 == 0
折れ線グラフの色をクリムゾンに指定する	plt.plot(データ列x, データ列y, color='crimson')
グラフの背景色を白くする	sns.set(style='whitegrid')
y軸だけ目盛線	plt.grid(axis='y')
赤い三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
プロットで使用する横軸に名前を付ける	plt.xlabel('x軸ラベル')
辞書の浅いコピーを作る	aDict.copy()
文字列を文字のリストに変換する	list(s)
双方向キュー中の要素の数を数える	deq.count(element)
文字列がタプルの要素か	element in aTuple
カウンタを辞書に変換する	dict(aCounter)
イテラブルのイミュータブルなセットを作る	frozenset(iterable)
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
option: グラフの色をシルバーに変更する	color = 'silver'
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
データフレームの列の一覧	df.info()
印字を使う	string.printable
データ列の欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
カデットブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
横棒グラフをフローラルホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='floralwhite')
半透明の点線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
カラムの要約統計量	ds.describe()
暗い赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
オブジェクトの属性の値を値に変更する	setattr(obj, プロパティ名, 値)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
二つの集合が互いに素かどうか調べる	aSet.isdisjoint(aSet2)
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームを表示するとき、最大行数をnにセットする	pd.set_option('display.max_rows', n)
シーケンスを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
平均値でカラムの未入力値を埋める	ds.fillna(ds.mean())
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
耐火レンガ色でヒストグラムを描画する	plt.hist(データ列, color='firebrick')
ヒストグラムの色をライトゴールドロディイエローにセットする	plt.hist(データ列, color='lightgoldenrodyellow')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームから列を一つ選択する	df[[column]]
option: パールバイオレットレッドを使用する	color = 'palevioletred'
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
リストとリストについての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
改行なしに２つの文字列をプリントする	print(value, value2, end='')
option: グラフの種類を実線に設定する	linestyle = 'solid'
二つの浮動小数点数が十分に近いか確認する	math.isclose(x, x2)
option: 線の幅を3.0ポイントに指定する	linewidth = 3.0
nが負の数か確認する	n < 0
日付データは日付データより遅いかどうか	aDate > aDate2
nが一桁の数か調べる	-9 <= n <= 9
棒グラフをダークカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
キーがマップ上でまだ定義されていないか調べる	key not in aDict
option: 色をダークカーキにセットする	color = 'darkkhaki'
SDGでクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
整数nがセットのどれかか	n in aSet
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
無限にnからカウントアップする	itertools.count(start=n)
option: フォントの色を耐火レンガにセットする	color = 'firebrick'
データ列とリストについての散布図に黒い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
option: マーカーをポイントに設定する	marker = '.'
ミッドナイトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
データフレームを列で小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
要素がタプルの値に含まれていないかどうか調べる	element not in aDict.values()
option: グラフの色をグレーにセットする	color = 'gray'
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
整数nを八進数表現に変換する	oct(n)
代数計算モジュールを用いる	import sympy
横棒グラフをラベンダーブラッシュ色を用いて描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
eの実数乗を求める	math.exp(x)
配列を等量でビン数nでビニングする	pd.qcut(aArray, n)
両端キューの先頭に要素を追加する	deq.appendleft(element)
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
項目名が辞書に存在していない時、要素を追加する	aDict.setdefault(key, element)
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
赤い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データ列の中に文字列とがある	ds.isin([value, value2])
nが3の倍数か調べる	n % 3 == 0
オブジェクトは数値	isinstance(obj, (int,float))
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
散布図をダイアモンドマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームから指定された列を抽出する	df[[column]]
TSVファイルをヘッダを指定せず読む	pd.read_csv(filename, header=None)
箱ひげ図に簡単な説明を設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
▼印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
実数のタンジェントを求める	math.tan(x)
散布図にクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
色を全般的に明るくする	sns.set(pallete='bright')
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ランタイムの再帰の最大回数	sys.getrecursionlimit()
option: チョコレートにグラフの色を設定する	color = 'chocolate'
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
nが一桁の数かどうか調べる	0 <= n <= 9
辞書から項目名の値をエラーなく参照する	aDict.get(key, None)
マッピングからキーで指定した値を取り出す	aDict.pop(key)
混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
スピアマン順位相関係数でデータフレームのリストカラムの相関行列を求める	df[aList].corr(method='spearman')
二つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームを小さい順に列名リストでソートする	df.sort_values(by=column, ascending=True)
データフレームを整数に丸める	df.round()
ヒストグラムを淡い茶色色で描画する	plt.hist(データ列, color='tan')
固有値分解の準備をする	model = sklearn.decomposition.PCA(n_components=n)
標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
n進文字列を整数に変換する	int(s, n)
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
実数の天井数	math.ceil(x)
n個に列をビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
複数行対応として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
変数を水色化する	f'\033[36m{value}\033[0m'
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
データフレームの列の最頻値を求める	df[col].mode()
タプルを引数として展開してプリントする	print(*aTuple)
option: 下三角印を使う	marker = 'v'
キーが辞書上で定義済みか調べる	key in aDict
今日が月曜日か確認する	datetime.datetime.today().weekday() == 0
実行結果をプリントする	print(value)
データフレームの欠損値を第二四分位数に指定する	df.fillna(df.median())
三二ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int16)
option: ライトスカイブルー色を使う	color = 'lightskyblue'
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームの列がどの程度、分散しているか見る	df[col].var()
列から双方向キューを準備する	collections.deque(iterable)
option: 印をポイントに設定する	marker = '.'
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データ列のNaNをxで置き換える	ds.fillna(x)
ミントクリーム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの各グループごとの合計を求める	df.groupby(column).sum()
option: ライトイエロー色を使う	color = 'lightyellow'
ファイルパスからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
青い点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列中に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
縦棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームを'A'列によって並べ直して、更新する	df.sort_values(by='A', inplace=True)
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
日付データからn分、引く	aDate - datetime.timedelta(minutes=n)
昇順に２つの列でデータフレームをソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ファイルをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
ベクトルの要素数	aArray.size
option: グラフの色をライトゴールドロディイエローに指定する	color = 'lightgoldenrodyellow'
散布図をミディアムスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
2つの列で表を分類する	df.groupby(['A', 'B'])
option: 茶色色を使用する	color = 'brown'
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
コーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ユニークな要素ごとの頻度を求める	np.unique(aArray, return_counts=True)
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
リストを引数として展開して表示する	print(*aList)
nではない	not n
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
商と余りを同時に求める	divmod(x, y)
プラムにヒストグラムの色を指定する	plt.hist(データ列, color='plum')
option: グラフの色をチョコレートに指定する	color = 'chocolate'
二つのカラムによって大きい順にデータフレームを破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
nの八進文字列	oct(n)[2:]
辞書に別の辞書の値を追加する	aDict.update(aDict2)
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
データフレームの中にいくつ文字列があるかカウントする	df.isin([value]).sum()
nxn2の２次元リストを作る	[[0] * n for _ in range(n2)]
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
二つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
横棒グラフをダークシアン色を使って描画する	plt.barh(データ列x, データ列y, color='darkcyan')
パラメータについて数式をn階微分する	sympy.diff(e, z, n)
rgbの丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
凡例をプロットに被らない位置に表示する	plt.legend(loc='best')
配列をn個にビンニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
ファイルからnというシートを読み込む	pd.read_excel(filename, sheet_name=n)
実数が整数かどうか調べる	x.is_integer()
縦棒グラフをネイビー色を用いて描画する	plt.bar(データ列x, データ列y, color='navy')
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
赤い実線として折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
ディレクトリを使う	os.getcwd()
オブジェクトのフィールドの値を値に設定する	setattr(obj, プロパティ名, 値)
本日の日付時刻	datetime.datetime.now()
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
８ビット整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ヒストグラムをミディアムパープル色を使って描画する	plt.hist(データ列, color='mediumpurple')
データフレームの列の名前の一覧を使う	df.columns
横棒グラフをレモンシフォン色を用いて描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
ターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
ライトグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの分散	df.var()
ディレクトリをPythonパスに追加する	sys.path.append(dir)
文字列が平仮名	('ぁ' <= ch <= 'ん')
データフレームのカラムのNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
出力ストリームを全て読み込む	f.read()
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
eの乗数	math.exp(x)
折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
文字列を最後の部分文字列で二つに区切って、後半の文字列を使う	s.rpartition(sub)[-1]
折れ線グラフでデータフレームの列を図示する	plt.plot(df[column], df[column])
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
2つのデータフレームを横向きにつなぐ	pd.concat([df, df2], axis=1)
一度にデータフレームを正規表現でreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームのカラムをヒストグラムとして描く	plt.hist(df[column])
データフレームの欠損値を平均値に指定する	df.fillna(df.mean())
全要素を0で初期化したベクトル	np.zeros(要素数)
文字コードtextで追加できるようにファイルパスをオープンする]	open(filepath, mode='a', encoding=text)
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
数値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
t-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
シーケンスを文字列リストに変換して空白で連結する	' '.join(map(str, iterable))
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
option: グラフの色を耐火レンガに変更する	color = 'firebrick'
ヒストグラムの色をライムグリーンにセットする	plt.hist(データ列, color='limegreen')
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
日付時刻データの月数	aDatetime.month
option: サーモン色を用いる	color = 'salmon'
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
自分自身をモジュールとして	sys.modules[__name__]
グラフで用いるフォントを指定する	sns.set(font=フォント名)
ふたつの集合が集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
散布図に黒い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='k')
マッピングからキーの値か、もしくは要素を見る	aDict.get(key, element)
配列の行ごとの合計を求める	np.sum(aArray, axis=1)
option: フォントの色をシアンにセットする	color = 'cyan'
配列の比率を円プロットで可視化する	plt.pie(データ列, startangle=90)
カウンタを辞書で更新する	aCounter.update(aDict)
データ列の日	ds.dt.day
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
部分文字列が部分文字列で開始するか	s.startswith(sub)
浮動小数点数の余弦の逆数	math.acos(x)
キューのstart〜endの部分値を求める	collections.deque(itertools.islice(deq, start, end))
y座標の目盛を非表示にする	plt.yticks([])
散布図の下三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
赤い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
特異値分解を使って淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
複数の列によってによって破壊的にデータフレームをソートする	df.sort_values(by=column, inplace=True)
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
イテラブル自身を2回あわせた直積	itertools.product(iterable, repeat=2)
シーグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
キューをイテラブルから用意する	collections.deque(iterable)
マルーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
オブジェクトが辞書クラスかテストする	isinstance(obj, dict)
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
二つのオブジェクトが同一参照か調べる	obj is obj2
option: スチールブルーを使用する	color = 'steelblue'
データフレームをJSONLファイルにカラムの名前を付けずに保存する	df.to_csv(filename, header=None)
option: シーグリーン色を用いる	color = 'seagreen'
線グラフの色を紺にセットする	plt.plot(データ列x, データ列y, color='darkblue')
データ列の中に文字列と文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
option: 黄色色を使う	color = 'yellow'
列の名前の一覧	df.columns
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムの色をダーク・スラテグレーに変更する	plt.hist(データ列, color='darkslategrey')
赤い四角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
option: マーカーの大きさを設定する	markersize = 2.0
多次元データを主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データ列の各データが何回出現するか見る	ds.value_counts()
データフレームの欠損値を最小値で置き換える	df.fillna(df.min())
タプル中の要素が少なくともひとつ真か調べる	any(aTuple)
小数点数のsinを求める	math.sin(x)
集合から別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
文字列をバイト列に変換する	bytes(s)
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
option: クリムゾン色を用いる	color = 'crimson'
両端キューから最初の要素を取り除く	deq.remove(element)
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
ベクトルの行列積を算出する	np.matmul(aArray, aArray2)
option: オーキッド色を使う	color = 'orchid'
配列とリストについての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
黒い右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームを二つの列で降順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
イテラブルと数列の散布図を描画してマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
散布図を濃い青色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ダークスラテグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
折れ線グラフの左三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: カンマを区切り記号で使う	sep = ','
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
データ列の偏りを対数する	np.log(データ列)
列概要	df.info()
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
カラムが正規分布からどの程度、歪んでいるか見る	ds.kurt()
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
リストと数列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
折れ線グラフのマーカーをクロス印にする	plt.plot(データ列x, データ列y, marker='x')
作画の色を指定する	sns.set(pallete=パレット名)
ヒストグラムの色をダークシアンにする	plt.hist(データ列, color='darkcyan')
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
円グラフを用いて配列の割合を可視化する	plt.pie(データ列, startangle=90)
文字列の開始位置番目からと終了位置までの間に部分文字列がないかどうか確認する	s.find(sub, start, end) == -1
マップを浅くコピーする	aDict.copy()
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームを散布図で図示して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
カラムを丸めて、整数型にする	ds.round().astype(int)
二つのリストの積集合	list(set(aList) & set(aList2))
行列間の各要素の最大公約数	np.gcd(aArray, aArray2)
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
集合に要素を追加する	aSet.add(element)
重複する行のみ	df[df.duplicated(keep=False)]
ターコイズにヒストグラムの色をセットする	plt.hist(データ列, color='turquoise')
リストの全ての要素を取り除く	aList.clear()
折れ線グラフのダイアモンド印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ヒストグラムを紺碧色を使って描画する	plt.hist(データ列, color='azure')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
option: パパイヤウィップ色を使用する	color = 'papayawhip'
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
双方向キューの長さを制限する	collections.deque(maxlen=n)
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
データフレームのカラムの中に存在する日付データの合計をカウントする	df[col].isin([value]).sum()
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
タイムスタンプデータからn日分、減らす	aDatetime - datetime.timedelta(days=n)
データ列の曜日が何日目か見る	ds.dt.dayofweek
日付データが日付データより前か調べる	aDate < aDate2
リストとリストについて散布図をプロットして、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームのカラムが何時か確認する	df[col].dt.hour
要素は集合のメンバー	element in aSet
データ列の未入力値を最小値に指定する	ds.fillna(ds.min())
文字列を最初の部分文字列で二分し、前半の文字列を求める	s.partition(sub)[0]
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
横棒グラフをライムグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='limegreen')
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 色をライトグレーに指定する	color = 'lightgrey'
option: 分割記号をコロンにする	sep = ':'
本日が木曜日	datetime.datetime.today().weekday() == 3
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
オブジェクトが関数か調べる	callable(obj)
実線でヒストグラムをプロットする	plt.hist(データ列, linestyle='solid')
option: ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
ミディアムブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
ダークサーモンにヒストグラムの色をセットする	plt.hist(データ列, color='darksalmon')
データフレームのインデックスがnの行を取り出す	df.loc[n]
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
プロットの見栄えをデフォルトでいい感じにする	sns.set()
実線としてヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
等量でデータフレームの中の列をn個にビニングする	pd.qcut(df[col], n)
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
グラフのデータラベルの位置を(x,y)に設定する	plt.legend(loc=(x, y))
ボックスチャートを描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
グラフで利用可能な色名の一覧を知る	matplotlib.colors.cnames
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ラベンダーブラッシュにヒストグラムの色を変更する	plt.hist(データ列, color='lavenderblush')
データフレームのリスト列の中に日付データが存在するか調べる	df[aList].isin([value])
ファイルにxを文字列にして書き込む	f.write(str(x))
カテゴリで色付けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: ラベンダー色を使う	color = 'lavender'
'A'列と'B'列によってによって大きい順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
データ列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのリスト列の未入力値をxで補う	df[aList].fillna(x)
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ゼロ埋めされた配列を作成する	np.zeros(要素数)
散布図の下三角印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
option: グラフの色をシルバーに設定する	color = 'silver'
プロットに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
ふたつの関係がスーパーセットもしくは等しいか調べる	aSet > aSet2
option: 色をライトブルーにする	color = 'lightblue'
option: ヘッダを連番に増やす	header = None
option: グラフの色をミスティローズに指定する	color = 'mistyrose'
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
イエローグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='yellowgreen')
日付時刻データを数値に変換する	aDatetime.timestamp()
縦棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
マッピングに要素をキーとして加える	aDict[key] = element
グラフで使うタイトルを設定する	plt.title('グラフの名称')
イエローグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
option: namesをカラムの名前に変更する	names = names
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
部分文字列が文字列の開始位置と終了位置の間に存在する	s.find(sub, start, end) != -1
列'A'と列'B'をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
組中の要素は少なくともひとつ真か調べる	any(aTuple)
データフレームの列の各データ値の出現回数を求める	df[col].value_counts()
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
ファイルをバイナリモードで開く]	open(filepath, mode='rb')
option: グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
両端キューの要素をインプレースに反転する	deq.reverse()
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
エラーなくマッピングからキーの値を得る	aDict.get(key, None)
八進文字列を整数に変換する	int(s, 8)
実数を切り下げる	math.floor(x)
option: ライトスチールブルーにグラフの色を変更する	color = 'lightsteelblue'
ペアリストpairsからカウンタを用意する	collections.Counter(dict(pairs))
改行せずに２つの数値をプリントする	print(value, value2, end='')
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームの先頭n行を調べる	df.head(n)
スケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
折れ線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームから破壊的に重複する行を削除する	df.drop_duplicates(inplace=True)
符号なし８ビット整数型のゼロ埋めされた行列を作る	np.zeros(要素数, dtype=np.uint8)
列によってデータフレームをまとめたグループ	df.groupby(column)
option: サーモン色を使用する	color = 'salmon'
データフレームを列で並べる	df.sort_values(by=column)
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
日付データが日付データより後ろか	aDate > aDate2
キーが辞書に存在するかどうか確認する	key not in aDict
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
二つの文字列は同じか調べる	s == s2
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
イテラブルのイミュータブルな集合を見る	frozenset(iterable)
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
ゼロ埋めされた配列を作る	np.zeros(要素数)
整数nの二進リテラル	bin(n)
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
グラフにグリッド線を入れる	plt.grid(True)
データフレームから指定した列の名前一覧の列のみ抽出する	df[columns]
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
実数の２乗を求める	x ** 2
データフレームの歪度	df.kurt()
文字列を青色にする	f'\033[34m{value}\033[0m'
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
二つの関係が上位集合かどうか	aSet.issuperset(aSet2)
ヒストグラムの色をグリーンにする	plt.hist(データ列, color='green')
リストにリストを追加する	aList.extend(aList2)
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
線グラフの色をホワイトにする	plt.plot(データ列x, データ列y, color='white')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
列で欠損値を含めて表データをグループ化する	df.groupby(column, dropna=False)
イテラブルとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
rgbの四角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
自然数の最大公約数	math.gcd(n, n2)
文字列中のタブ文字をn個の空白に置き換える	s.expandtabs(tabsize=n)
重複した行のみを選択する	df[df.duplicated(keep=False)]
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
実数以下の最大の整数を求める	math.floor(x)
双方向キューの要素を左にn個分回転させる	deq.rotate(-n)
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
データフレームの列の値がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
散布図を上三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
二つ並べてヒストグラムを描く	plt.hist([データ列, データ列], color=['b', 'r'])
option: フォントの色をアリスブルーに指定する	color = 'aliceblue'
キューをポップする	deq.pop()
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列をシンボル化してパラメータにする	z = sympy.Symbol(s)
縦方向に二つのデータフレームをくっつける	pd.concat([df, df2])
色付きの破線として線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
カラムの中に含まれる日付データと文字列の個数を求める	ds.isin([value, value2]).sum()
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
オブジェクトはリストかどうか	isinstance(obj, list)
３つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
y座標のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
実数がNaNか調べる	math.isnan(x)
ダーク・スラテグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ナバホホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
破線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dashed')
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
データフレームのそれぞれのグループ毎の個数	df.groupby(column).count()
サポートベクトル分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図をベージュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='beige')
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームを破壊的に'A'列でで整列する	df.sort_values(by='A', inplace=True)
ベクトルの形状	aArray.shape
線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
配列を等間隔でn個にビニングする	pd.cut(aArray, n)
シーグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
CSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
オーキッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
乱数のベクトル	np.random.random(N)
文字列がn回繰り返す列	itertools.repeat(element, n)
データフレームのカラムのどの値が最も現れるか見る	df[col].mode()
特異値分解で多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
マップのキー一覧	list(aDict)
データ列の中の未入力値の個数を数える	ds.isna().sum()
データフレームのNaNを最頻値で補う	df.fillna(df.mode().iloc[0])
タブ区切りとしてJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
データフレームを２つの列によって小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列の最初を使う	s[0]
option: ミディアムパープルを使う	color = 'mediumpurple'
散布図のバツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
小さい順にリストの要素をソートする	sorted(aList, reverse=False)
有理数の分子	q.numerator
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
ゲインズボロ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
option: 濃いシアン色を使う	color = 'darkcyan'
辞書の項目名と値を入れ替える	{v: k for k, v in aDict.items()}
値が集合に含まれない	element not in aSet
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
文字列中から部分文字列を見つける	s.find(sub)
数値を下線付きにする	f'\033[4m{value}\033[0m'
データフレームの中で列と列の重複を見る	df.duplicated(subset=[column, column2])
文字列をコロンで区切り、列挙する	s.split(':')
多次元データをt-SNEを用いて淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームの列を行に設定する	df.set_index(column)
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
アンサンブル学習を使って回帰分析を行う	sklearn.ensemble.VotingRegressor()
グラフのx軸を対数目盛に変更する	plt.xscale('log')
コーンフラワーブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
列を文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
データフレームの最頻値	df.mode()
縦棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: グラフの色をオーキッドに指定する	color = 'orchid'
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
option: 色をラベンダーに指定する	color = 'lavender'
度数分布図の区間を設定する	plt.hist(データ列, range=(start, end))
正規表現で文字列を分割する	re.split(pattern, s)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
横棒グラフをミディアムスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
実数の正接の逆数	math.atan(x)
データフレームを２つの列を用いて昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
rgbの▼マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の接頭辞が部分文字列かどうか確認する	s.startswith(sub)
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
option: ライトグリーンを使用する	color = 'lightgreen'
nとn2の論理和	n | n2
option: カデットブルーにグラフの色を設定する	color = 'cadetblue'
グラフの描画で暗く色を使用する	sns.set(pallete='dark')
書き込みモードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='w')
複数の列でデータフレームを整列して、更新する	df.sort_values(by=column, inplace=True)
option: グラフの色をライトコーラルにセットする	color = 'lightcoral'
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ベクトルのユニークな値を要素とするベクトル	np.unique(aArray)
ヒストグラムのビンの数を設定する	plt.hist(データ列, bins=区関数)
データ列の各データ値の出現数	ds.value_counts()
線グラフをミディアムスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
折れ線グラフの四角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
リストのn番目を削除する	del aList[n]
カウンタの積集合演算する	aCounter & aCounter2
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
折れ線グラフを青色を使って描画する	plt.plot(データ列x, データ列y, color='blue')
等差数列から整数乱数を生成する	random.randrange(start, end, step)
散布図を黒いポイントマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
正規表現をASCII限定として事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
BOM付きで追加できるようにファイルを開く]	open(filepath, mode='a', encoding='utf_8_sig')
option: グラフの色をゴールドに指定する	color = 'gold'
文字列を黒色にする	f'\033[30m{value}\033[0m'
折れ線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストとリストについて散布図を描いてマーカーを△に指定する	plt.plot(データ列x, データ列y, marker='^')
実数の双曲線正接の逆数を求める	math.atanh(x)
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
昇順にリストの要素を並べる	sorted(aList, reverse=False)
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
タプルの先頭のn要素を取り除く	aTuple[n:]
データ列の移り変わりを折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
リストと配列について散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
文字列の中の正規表現によるマッチを見る	re.findall(pattern, s)
データフレームのカラムの標準偏差を計算する	df[col].std()
空白で文字列を分割して整数列に変換する	map(int, s.split())
二つのデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
散布図をダーク・スラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
数で実数を割って小数点以下を切り捨てる	x // y
2つのデータフレームを結合する	pd.merge(df, df2)
データフレームのリストカラムの尖度	df[aList].skew()
線グラフを黄緑色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
符号付きでnを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
作画の縦横の比率を等しくする	plt.axis('equals')
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
データフレームを各列毎にグループ分けして、文字列というグループを見る	df.groupby(column).get_group(s)
昇順に'A'列と'B'列によってデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=True)
option: 色をダークグレーにセットする	color = 'darkgray'
空列	[]
データフレームのNaNを後の行の値に設定する	df.fillna(method='bfill')
文字列を最後の部分文字列で分けたときの後半の文字列を見る	s.rpartition(sub)[-1]
赤い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
option: グラフの色を耐火レンガに指定する	color = 'firebrick'
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
イテラブルを更新不能なセットにする	frozenset(iterable)
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
黒い三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
スノー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
スピアマン順位相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
配列とデータ列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを'A'列と'B'列ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
リストの値のみ表示する	print(*aList)
option: クロスマーカーを使用する	marker = 'x'
データフレームを'A'列によって小さい順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
実行結果を太字でプリントする	print(f'\033[1m{value}\033[0m')
書き込み用にBOM付きでファイルを開く]	open(filepath, mode='w', encoding='utf_8_sig')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
データフレームを各列と列の組み合わせ毎に集計して、最大値を求める	df.groupby([column, column2], as_index=False).max()
option: 大バツマーカーを加える	marker = 'X'
データフレームのカラムの中にいくつが含まれるかカウントする	df[col].isin([value]).sum()
nからn2までの整数列を見る	list(range(n, n2+1))
プラットホームのエンディアンを調べる	sys.byteorder
列を配列として取り出す	df[column].values
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
白色で文字列を表示する	print(f'\033[37m{value}\033[0m')
ファイルパスをバイナリモードで開いて]、fとする	f = open(filepath, mode='rb')
実数を実数で割った剰余	math.remainder(x, x2)
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
数列とイテラブルの散布図を描いて、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
option: オーキッド色を用いる	color = 'orchid'
ヒストグラムの色を青緑にセットする	plt.hist(データ列, color='turquoise')
行列の最小値	np.min(aArray)
リストとリストについて散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
データフレームを散布図でプロット化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
標準入力から1行だけ読み込む	sys.stdin.readline()
データフレームのリストカラムのモードを求める	df[aList].mode()
タイムスタンプデータが水曜日かどうか	aDatetime.weekday() == 2
本日が何月か知る	datetime.datetime.today().month
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
配列と配列について散布図をプロットして、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを'A'列でまとめたグループを使う	df.groupby('A')
ロージーブラウン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
文字列TSVファイルからn番目のカラムをインデックスとしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
バイオレット色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
折れ線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
実数の天井	math.ceil(x)
リストと数列についての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
配列と数列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
列'A'と列'B'をキーとして二つの表を左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
小文字を全部見る	string.ascii_lowercase
カラムの未入力値を平均値で補う	ds.fillna(ds.mean())
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
３数の最も大きい値	max(x, y, z)
横棒グラフを描画して、棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
ヒストグラムをアイボリー色を用いて描画する	plt.hist(データ列, color='ivory')
リストの折れ線グラフを描画してカラーコードとして色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データ列を等間隔でn個に分割する	pd.cut(ds, n)
ヒストグラムの色をアイボリーに指定する	plt.hist(データ列, color='ivory')
リストとリストについての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
箱ひげ図でデータ列を描画する	plt.boxplot(データ列)
文字列の末尾	s[-1]
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
標準出力を用いる	sys.stdout
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
日付データが火曜日か	aDate.weekday() == 1
実数が有限	math.isfinite(x)
ベクトルのユニークな値を要素とする配列	np.unique(aArray)
option: 紺色を使用する	color = 'darkblue'
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
データフレームのカラムの曜日が何日目か調べる	df[col].dt.dayofweek
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームを列でグループ化し、、グループごとの件数を知る	df.groupby(column).size()
辞書から項目名で指定された項目をポップする	aDict.pop(key)
ブランチドアーモンド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
スタッキングで回帰分析をする	sklearn.ensemble.StackingRegressor()
ファイルの拡張子を求める	os.path.splitext(filepath)[1].lstrip('.')
プログラムの実行を正しく終える	sys.exit(0)
折れ線グラフの色をライトスレイグレーにする	plt.plot(データ列x, データ列y, color='lightslategray')
ヒストグラムをダークターコイズ色を使って描画する	plt.hist(データ列, color='darkturquoise')
カウンタのユニークな要素をリストとして得る	list(aCounter)
折れ線グラフをコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='coral')
option: ダークオレンジに色を指定する	color = 'darkorange'
イテラブルと配列の散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図に▼印を使用する	plt.scatter(データ列x, データ列y, marker='v')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
データフレームは正規分布からどれだけ、尖っているか見る	df.skew()
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
データ列の平均値を求める	ds.mean()
印字できる文字を全て使う	string.printable
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
データ列の中央値	ds.median()
ラベンダー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
オブジェクトが集合クラスか調べる	isinstance(obj, set)
2つのデータフレームをジョインする	pd.merge(df, df2)
折れ線グラフの色をシアンにする	plt.plot(データ列x, データ列y, color='cyan')
nの二乗	n ** 2
句読点文字を全部見る	string.punctuation
日付時刻データにn時間を加える	aDatetime + datetime.timedelta(hours=n)
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
表データの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
データフレームの列を最初のカテゴリーを除外し、ダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
option: フォントの色を黄色に変更する	color = 'yellow'
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
rgbの三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
整数nの十六進文字列	hex(n)[2:]
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
ライトスカイブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
横棒グラフをダークマゼンタ色を使って描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
連番の行列の自動作成する	np.arange(開始値, 終了値, 等差)
折れ線グラフをライトシアン色を使って描画する	plt.plot(データ列x, データ列y, color='lightcyan')
二つの整数最小公倍数	math.lcm(n, n2)
リストをn個にビン分割する	pd.cut(aList, n)
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
クロス印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
散布図のマーカーを▲印にする	plt.scatter(データ列x, データ列y, marker='^')
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
year年month月day日hour時minute分のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
折れ線グラフをダークシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
列でデータフレームをグループ分けして、合計を求める	df.groupby(column).sum()
データフレームの指定された列の名前一覧の列のみ抽出する	df[columns]
折れ線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
列を文字列リストに変換して、タブを用いて結合する	'\t'.join(map(str, iterable))
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
文字列の最初から空白やタブを除く	s.lstrip()
カウンタからシーケンスをカウントして引く	aCounter.subtract(iterable)
option: ゴーストホワイト色を使う	color = 'ghostwhite'
イテラブルとデータ列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
リストをボックスチャートで描画する	plt.boxplot(データ列)
列のコンビネーション	itertools.combinations(iterable, n)
nがn2の倍数	n % n2 == 0
オブジェクトのオブジェクト識別子を求める	id(obj)
数列の変化を半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
集合＼集合	aSet.difference(aSet2)
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
データフレームを二つの列でソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
下位集合かどうか調べる	aSet.issubset(aSet2)
リストの先頭の要素	aList[0]
nで乱数生成系列を初期化する	random.seed(n)
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
グリッドを実線にする	plt.grid(linestyle='solid')
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列はキーワードかどうか調べる	keyword.iskeyword(s)
ヒストグラムを実線を用いて描く	plt.hist(データ列, linestyle='solid')
集合から全要素を取り除く	aSet.clear()
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
オブジェクトは論理値型のインスタンスかどうか調べる	isinstance(obj, bool)
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
オプションでファイルを使用する	file = sys.open(filename, 'w')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
データフレームを2つの列によって昇順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: 深紅色を使う	color = 'crimson'
淡いピンク色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの各グループごとの分散を求める	df.groupby(column).var()
データ列を箱ヒゲ図で描く	plt.boxplot(データ列)
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
行列の累積積を求める	np.cumprod(aArray)
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
配列の行ごとの平均値	np.mean(aArray, axis=1)
データフレームの列の欠損値を平均で埋める	df[col].fillna(df[col].mean())
option: フォントの色をホットピンクに設定する	color = 'hotpink'
リストの最後から要素を取り除く	aList.pop()
ダークゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
リストの散らばりを可視化する	plt.scatter(データ列x, データ列y)
データフレームのカラムのNaNを最大値で補う	df[col].fillna(df[col].max())
データフレームの欠損値を直後の値に減らす	df.fillna(method='bfill')
疑似乱数を発生させる	random.random()
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
空白が文字列内に含まれるかどうか調べる	any(c.isspace() for c in s)
変数を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
箱ヒゲ図でデータ列を描画する	plt.boxplot(データ列)
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
集合の補集合を計算する	aSet.difference(aSet2)
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームを列でで大きい順にソートする	df.sort_values(by=column, ascending=False)
半透明の点線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列をファイルに書く	f.write(s)
ダークレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの▽マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
リストとリストについての散布図に凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
option: グラフの色をミントクリームにセットする	color = 'mintcream'
ヒストグラムをシアン色を使って描画する	plt.hist(データ列, color='cyan')
最頻値でデータフレームのNaNを補う	df.fillna(df.mode().iloc[0])
文字列中の部分文字列を別の文字列に置換する	s.replace(sub, newsub)
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの列がリストに含まれる行を選択する	df[df[column].isin(aList)]
シアン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
リストとリストについて散布図を描き、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
表データを複数の列によってソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
'A'列によって破壊的にデータフレームを昇順に整列する	df.sort_values(by='A', ascending=True, inplace=True)
Pandasで、文字列を書式で日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
折れ線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
縦棒プロットを描画し、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
縦棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
サブセットか調べる	aSet.issubset(aSet2)
文字列の最初	s[0]
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
リストを展開してプリントする	print(*aList)
option: 色をオリーブに設定する	color = 'olive'
オブジェクトはリストかタプルか	isinstance(obj, (list)
option: 珊瑚を使う	color = 'coral'
要素が辞書の値として含まれているか調べる	element in aDict.values()
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
折れ線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
スピアマン相関係数としてデータフレームのリストで指定した列の相関行列	df[aList].corr(method='spearman')
Pandasで文字列をフォーマットでPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
データフレームを各列毎にグループ化して列の最小値を求める	df.groupby(column)[column2].min()
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
option: フォントの色をオレンジレッドに変更する	color = 'orangered'
文字列を走査し、パターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
線グラフの色をラベンダーにセットする	plt.plot(データ列x, データ列y, color='lavender')
棒グラフの横幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
行列の演算をする	import numpy as np
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
最後から文字列を部分文字列で区切る	s.rsplit(sub)
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
タプルをn倍する	aTuple * n
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
グラフを正方形にする	plt.axis('equals')
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
文字列を青色化する	f'\033[34m{value}\033[0m'
プロットで使うフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
option: BOM付きを使う	encoding = 'utf_8_sig'
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
JSONフォーマットの文字列をロードする	json.loads(jsonString)
部分文字列を文字列の末尾から探す	s.rfind(sub)
数列の散布図を描画する	plt.scatter(データ列x, データ列y)
多次元データを主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
綺麗なグラフを描画する準備をする	import seaborn as sns
オブジェクトは文字列か	isinstance(obj, str)
rgbの丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
配列を2次元1列に変形する	aArray.reshape(-1, 1)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの星マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
集合から別の集合との共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
データフレームを'A'列ごとに分類して、列挙する	[(name, group) for name, group in df.groupby('A')]
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ダークマゼンタ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームの中のカラムをn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
整数nを16進表記に変換する	hex(n)
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
オリベドラブ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ファイルパスの絶対ファイルパスを使う	os.path.abspath(filepath)
データフレームのn行目をドロップして、インプレイスする	df.drop(n, axis=0, inplace=True)
データフレームのn行目まで取り出す	df[:n]
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
ロイヤルブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
二つのカウンタの共通する要素	aCounter & aCounter2
データフレームの列のユニークな要素数	df[col].nunique()
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームを２つの列によってで降順に並べ直す	df.sort_values(by=['A', 'B'], ascending=False)
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
'A'列と'B'列を用いてデータフレームを並べて、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
文字列の無限な列	itertools.repeat(element)
数を万の位で丸める	round(x, -4)
タプル中の要素が少なくともひとつ真かどうか調べる	any(aTuple)
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
データフレームのグループ毎の個数	df.groupby(column).count()
整数nが配列のどれかかどうか調べる	n in aArray
データフレームのカラムを100の位で丸めて、整数にする	df[col].round(-2).astype(int)
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
整数nの八進表記	oct(n)
折れ線グラフの色をライトシアンにセットする	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームをグループ化し、それぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
データフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
文字列を黄色で表示できる文字列にする	f'\033[33m{value}\033[0m'
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
データフレームを列によってグループ化し、、各グループごとの平均値を算出する	df.groupby(column).mean()
青い破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: フォントの色をイエローグリーンに設定する	color = 'yellowgreen'
文字列を最後の部分文字列で分割した時の前半の文字列	s.rpartition(sub)[0]
option: マーカーをポイントに変更する	marker = '.'
option: グラフの色をダークサーモンに変更する	color = 'darksalmon'
整数nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
option: グラフの色をグリーンにする	color = 'green'
データフレームから指定された列を選択する	df[[column]]
option: グラフの色を紺碧に指定する	color = 'azure'
ヒストグラムを茶色色を用いて描画する	plt.hist(データ列, color='brown')
棒グラフをサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='salmon')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
散布図の四角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
option: バツ印を使う	marker = 'x'
option: フォントの色をプラムに設定する	color = 'plum'
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
ブースティングを使って回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
折れ線グラフのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
バイナリ書き込み用にファイルパスをオープンして]、fとする	f = open(filepath, mode='wb')
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
シルバー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
文字列が文字列より辞書順で後か	s > s2
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
リストを太字でプリントする	print(f'\033[1m{value}\033[0m')
グラフの中の縦軸に軸名を付ける	plt.ylabel('y軸ラベル')
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
淡いピンク色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
文字列をユニコード列にする	[ord(ch) for ch in s]
表データの列名リストで指定された列を落とす	df.drop(columns, axis=1)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: ライトグリーン色を用いる	color = 'lightseagreen'
option: ダイアモンドマーカーを描画する	marker = 'D'
データフレームのリスト列が正規分布からどの程度、歪んでいるか確認する	df[aList].kurt()
rgbの▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムの色をインディゴにセットする	plt.hist(データ列, color='indigo')
option: モカシンにグラフの色を設定する	color = 'moccasin'
0から始まるn個の整数リスト	list(range(n))
散布図のダイアモンドマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
2変数の最小値	min(x, y)
option: タン色を用いる	color = 'tan'
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
option: グラフの色をミスティローズに変更する	color = 'mistyrose'
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストについての散布図にrgbの三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの指定された列を抽出する	df[column]
データフレームを関数でまとめたグループを見る	df.groupby(関数)
文字列を空白によって分割して、整数のリストに変換する	map(int, s.split())
グラフの色を淡くする	sns.set(pallete='muted')
新しいサポートベクター分類モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
y軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
ユニコードを文字に変換する	chr(unicode)
オブジェクトはリストクラスのインスタンスか判定する	isinstance(obj, list)
option: ミディアムブルーに色を設定する	color = 'mediumblue'
折れ線グラフの色をバリーウッドに変更する	plt.plot(データ列x, データ列y, color='burlywood')
散布図のバツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
整数nの二進数表記	bin(n)
折れ線グラフのポイント印を赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
線グラフをミディアムターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
双曲線正弦の逆数	math.asinh(x)
新しいサポートベクター回帰モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
両端キューの左に値を追加する	deq.appendleft(element)
option: ダークオーキッドにグラフの色を変更する	color = 'darkorchid'
option: グラフの色をコーラルに設定する	color = 'coral'
文字列をセンタリングにする	s.center(文字列幅)
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
option: 配列のデータ型を指定する	dtype = np.int
２つのデータフレームを横方向にマージする	pd.merge(df, df2)
折れ線グラフをオールドレース色を使って描画する	plt.plot(データ列x, データ列y, color='oldlace')
常用対数	math.log10(x)
データフレームのリストカラムの未入力値を平均に設定する	df[aList].fillna(df[aList].mean())
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
イテラブルを文字列リストに変換してカンマによって連結する	','.join(map(str, iterable))
ロージーブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図のダイアモンド印を黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
タプルの先頭を除く	aTuple[1:]
青い一点鎖線を用いてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの列のどの値が最も現れるか調べる	df[col].mode()
nを16進文字列に変換する	hex(n)[2:]
option: どのカラムもインデックスにしない	index_col = None
n＋n2	n + n2
SJISでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
キュー中の要素のインデックス	deq.index(element)
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
データフレームから指定された名前リストの列だけ取り出す	df[columns]
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
データフレームを破壊的に昇順に'A'列と'B'列によってソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
実数を切り下げて整数にする	math.floor(x)
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
リストに文字列を追加する	aList.append(element)
日付時刻データの分	aDatetime.minute
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
リストを境界値としてデータ列を分割する	pd.cut(ds, aList)
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
カウンタをイテラブルとして更新する	aCounter.update(iterable)
データフレームのカラムを1000の位で四捨五入する	df[col].round(-3)
option: 改行を区切りで用いる	sep = '\n'
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
実数を切り上げて整数に変換する	math.ceil(x)
2つの表を結合する	pd.merge(df, df2)
縦棒プロットを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図の▽印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
文字列内に数字が含まれるか	any(c.isdigit() for c in s)
データフレームがどの程度分散しているか確認する	df.var()
option: グラフの色をライトグレーに指定する	color = 'lightgray'
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
データフレームを二つの列によってまとめたグループを使う	df.groupby(['A', 'B'])
データフレームを複数の列の値によって集約し、列挙する	[(name, group) for name, group in df.groupby(columns)]
折れ線グラフのクロスマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列は全て十進数字かどうか調べる	s.isdecimal()
データフレームを列の値によってグループ分けしてグループごとの最小値を求める	df.groupby(column).min()
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
文字列が組の要素か調べる	element in aTuple
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
グラフの描画で暗くカラーパレットを使用する	sns.set(pallete='dark')
区切りで文字列を分割し、、文字列リストにする	s.split(sep)
列を小数点以下n桁で四捨五入する	ds.round(n)
折れ線グラフを色付きの破線を使って描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
オブジェクトが整数クラスのインスタンスかどうか調べる	isinstance(obj, int)
文字列が小文字かどうか調べる	s.islower()
ゴーストホワイト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームを列によってまとめたグループ	df.groupby(column)
option: ピンクにフォントの色を設定する	color = 'pink'
二次元タプルをフラット化する	sum(aTuple)
変数を改行なしにプリントする	print(value, end='')
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
オーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
formatのパターンとして文字列から日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
３変数の最も大きい値	max(x, y, z)
グラフの縦横の比率を同じする	plt.axis('equals')
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
xが一桁の正の数	0 <= x <= 9
option: 文字コードをUTF8にセットする	encoding = 'utf-8'
スピアマンでデータフレームのリストで指定されたカラムの相関行列	df[aList].corr(method='spearman')
nがn2か	n == n2
ファイルを開いて]読み込みストリームを使う	open(filepath, mode='r')
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: ヘッダをnamesに変更する	header = names
文字列の末尾の文字	s[-1]
ホットピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
オブジェクトの種類を見る	type(obj)
空のリストを得る	[]
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
TSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
option: エラーがあるとき、例外を発生させるようにセットする	errors = 'strict'
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
散布図をrgbの右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
カテゴリ別でグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
マッピングをコピーする	aDict.copy()
option: 改行コードを旧Macに設定する	newline = '\r'
実数のアークタンジェントを求める	math.atan(x)
stringをインポートする	import string
八進文字列をbytesizeバイトのバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
データ列の欠損値を直前の値にする	ds.fillna(method='ffill')
線グラフをレベッカパープル色を使って描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: グラフの色を青紫に設定する	color = 'violet'
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: ゴーストホワイトを使う	color = 'ghostwhite'
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
データフレームの列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
各カテゴリごとにデータフレームの棒プロットを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
小数点数の逆正接	math.atan(x)
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
複数の列によってデータフレームをソートし、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
option: ダークレッドを使う	color = 'darkred'
ひとつでも非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in s)
データフレームのリストカラムの尖度を求める	df[aList].skew()
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの欠損値をメディアンに設定する	df.fillna(df.median())
配列の全要素の値を変更する	aArray[:, :] = 指定の値
データ列の平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
文字列の中で複数行対応として正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
文字列を書式fmtで日付データに変換する	pd.to_datetime(s, format=fmt)
スピアマン相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
オブジェクトはリストか	isinstance(obj, list)
ビン数nで列をビニングする	pd.cut(ds, n)
space	' '
データフレームのヒストグラムを横に並べて図示する	sns.displot(df, x='列名', col='カテゴリ名')
２つの浮動小数点数が近似値	math.isclose(x, x2)
散布図をゴーストホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
標準エラー	sys.stderr
データフレームのカラムの中にいくつ日付データが含まれるか求める	df[col].isin([value]).sum()
option: 先頭のカラムを行にする	index_col = 0
0からN未満までの配列	np.arange(N)
2進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
一度にデータフレームのリストカラムの値を正規表現で変更する	df[aList].replace(pattern, repl, regex=True)
文字列がタプルに含まれるか判定する	element in aTuple
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
ゼロ埋めされた配列	np.zeros(要素数)
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
コマンドの第一引数を知る	sys.argv[1]
線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図をライトコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームのヒストグラムを横に並べて描画する	sns.displot(df, x='列名', col='カテゴリ名')
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
散布図をブルーバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
JSONLファイルにデータフレームを形式で保存する	df.to_excel(filename)
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
数値を白色でプリントする	print(f'\033[37m{value}\033[0m')
ヒストグラムの色をアンティークホワイトにする	plt.hist(データ列, color='antiquewhite')
辞書の項目名とその値を列挙する	aDict.items()
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
データフレームの正規分布に対する上下広がりを求める	df.skew()
双方向キューの左	deq[0]
nがn2以下かどうか調べる	n <= n2
二つの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
赤い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: バッファリングのサイズを指定する	buffering = 4096
データ列とイテラブルについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
方程式として数式の変数の解を求める	sympy.solve(e, z)
ヒストグラムを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
両端キューの先頭から値を取り出す	deq.popleft()
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
配列の最大値	np.max(aArray)
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
データフレームの列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
リストにリストを追加して広げる	aList.extend(aList2)
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
ダークゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
タプルをn回、連結する	aTuple * n
ヒストグラムをゴールド色を用いて描画する	plt.hist(データ列, color='gold')
実数の常用対数を求める	math.log10(x)
文字列の左側から部分文字列を探す	s.find(sub)
データフレームのリストカラムの要約統計量を求める	df[aList].describe()
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
カラムの75パーセンタイル	ds.quantile(0.75)
データフレームを関数の値によってグループ化する	df.groupby(関数)
nが5の倍数かどうか確認する	n % 5 == 0
表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
赤い実線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
欠損値も加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
組をひとつ置きに抽出する	aTuple[::2]
nullに等しいもの	None
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
マップからキーの値	aDict.get(key)
データフレームを複数の列の値によってグループ化し要約統計量を計算する	df.groupby(columns).describe()
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: グラフの色をダークカーキに指定する	color = 'darkkhaki'
実数のk進対数を算出する	math.log(x, k)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフをディープスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
回帰分析をスタッキングでする	sklearn.ensemble.StackingRegressor()
組を引数として展開して表示する	print(*aTuple)
数値を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
nがn2の倍数か調べる	n % n2 == 0
データフレームのリスト列の中にいくつ文字列があるか求める	df[aList].isin([value]).sum()
アンサンブル学習で回帰分析をする	sklearn.ensemble.VotingRegressor()
year年day月をタイムスタンプにする	datetime.datetime(year=year, month=month, day=1)
横棒グラフを淡い茶色色で描画する	plt.barh(データ列x, データ列y, color='tan')
散布図でデータフレームの全カラムを可視化する	sns.pairplot(df)
今日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
データフレームのリストカラムの基本統計量を計算する	df[aList].describe()
列の集合	set(iterable)
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
option: ライトシアンにグラフの色を設定する	color = 'lightcyan'
option: ダークサーモンを使う	color = 'darksalmon'
データフレームの行列をひっくり返す	df.T
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
オブジェクトが名前付きタプルか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
黄緑色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
タプルのn番目以降の部分を抽出する	aTuple[n:]
散布図の左三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
リストとイテラブルについて散布図を描き、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
日付データが水曜日か調べる	aDate.weekday() == 2
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
option: グレー色を使用する	color = 'grey'
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
Pandasで、データ列のUNIX秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
数値を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
要素が辞書の値に含まれていないかどうか確認する	element not in aDict.values()
option: ロージーブラウン色を使う	color = 'rosybrown'
データフレームから指定された3つの列だけ抽出する	df[[column, column2, column3]]
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
配列をn個に等量でビン分割する	pd.qcut(aArray, n)
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
グラフの目的を画面に設定する	sns.set(context='notebook')
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
双方向キューの末尾を見る	deq[-1]
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
部分文字列を文字列の先頭から消す	s.removeprefix(sub)
データフレームを破壊的に'A'列を用いてを用いて整列する	df.sort_values(by='A', inplace=True)
データフレームを表示するときn行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
データフレームを列で昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
非英数字が文字列中に含まれる	any(not c.isalnum() for c in s)
分子n、分母mの有理数を用意する	fractions.Fraction(numerator=n, denominator=m)
データフレームをJSONLファイルにBOMを付けて書き込む	df.to_csv(filename, encoding='utf_8_sig')
option: 丸マーカーを使用する	marker = 'o'
データフレームをグループ化し、各列に対し最大値を計算する	df.groupby(column)[column2].max()
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
文字列をコロンによって区切って、列挙する	s.split(':')
データ列とリストについて散布図をプロットし、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色をライムにセットする	plt.hist(データ列, color='lime')
カラムの文字列を未入力値に変換する	ds.replace(s, np.nan)
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
実数の逆正接	math.atan(x)
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
文字列の開始位置以降に部分文字列があるか調べる	s.find(sub, start) != -1
文字列の最初だけ大文字化する	s.capitalize()
ピアソンでデータフレームのリスト列の相関行列を求める	df[aList].corr(method='pearson')
データ列は正規分布からどの程度、尖っているか見る	ds.skew()
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
グラフの中の縦軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
本日の月数	datetime.datetime.today().month
year年の日付	datetime.date(year=year, month=1, day=1)
配列と数列について散布図を描いて、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
浮動小数点数の指数を求める	math.frexp(x)[1]
散布図に黒い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: フォントの色をグレーに変更する	color = 'grey'
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
配列とリストについて散布図を描いて、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データ列を百の位で丸めて、整数型にする	ds.round(-2).astype(int)
rgbに横棒プロットの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
カデットブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
プラットホームがLinuxか	sys.platform.startswith('linux')
クラスが名前付きタプル	issubclass(C, tuple)
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
文字列を部分文字列で二分し前半の文字列を求める	s.partition(sub)[0]
シーケンスを周期的に繰り返す	itertools.cycle(iterable)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
折れ線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームから重複する行を残さず、落とす	df.drop_duplicates(keep=False)
半透明の一点鎖線を使ってデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
実数の双曲線正接	math.tanh(x)
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフの▽マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
線形回帰モデルの回帰変数を使う	model.coef_
スタッキングとして回帰分析をする	sklearn.ensemble.StackingRegressor()
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
ファイルを追加モードを用いてオープンする]	open(filepath, mode='a')
カラムの標準偏差	ds.std()
option: グラフの色をアイボリーに設定する	color = 'ivory'
数式の簡略化を行う	sympy.sympify(e)
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
最大値でデータフレームのリストカラムの未入力値を埋める	df[aList].fillna(df[aList].max())
黒いダイアモンドマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
行列の値を使う	aArray[行番号, 列番号]
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
option: データ型を指定する	dtype = np.int8
数値の符号を同じにする	math.copysign(x, x2)
文字列が全て数字か調べる	s.isdigit()
データフレームのリストカラムの中に文字列と日付データが存在するか判定する	df[aList].isin([value, value2])
option: 小麦色にフォントの色を設定する	color = 'wheat'
option: マーカーを左三角に変える	marker = '<'
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
キューの末尾に要素を追加する	deq.append(element)
ひとつでも数字が文字列内に含まれるか調べる	any(c.isdigit() for c in s)
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームのカウントプロットを描く	sns.countplot(x='列名', data=df)
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
濃い青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
書き込み用に文字コードtextでファイルをオープンする]	open(filepath, mode='w', encoding=text)
集合から別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
カウンタから最頻出の項目の件数を計算する	aCounter.most_common()[1]
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームで何行重複するか見る	df.duplicated().sum()
２つの文字列は等しいかどうか	s == s2
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
ファイルからファイル名を使う	os.path.basename(filepath)
データフレームの最初n行	df.head(n)
データフレームを'A'列で小さい順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
ラベンダーブラッシュ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
部分文字列が文字列の開始位置より後に存在する	s.find(sub, start) != -1
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
データ列の要約統計量を計算する	ds.describe()
nがタプルのひとつ	n in aTuple
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
データフレームを'A'列と'B'列によって昇順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
option: グラフの色をネイビーに設定する	color = 'navy'
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
書き込みモードを使ってファイルパスをオープンして]、fとする	f = open(filepath, mode='w')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
文字列を文字コード列に変換する	[ord(ch) for ch in s]
ラインを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームのリスト列のNaNを直後の値に設定する	df[aList].fillna(method='bfill')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
すべてのシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=None)
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
組の最後のn要素を捨てる	aTuple[:-n]
option: ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
ホワイトスモーク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
nが負の数	n < 0
プログラムを強制的に終了する	sys.exit()
行列にはいくつ要素が含まれるか調べる	aArray.size
線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図をチョコレート色を用いて描画する	plt.scatter(データ列x, データ列y, color='chocolate')
折れ線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
組の末尾	aTuple[-1]
日付時刻データが木曜日かどうか	aDatetime.weekday() == 3
L1ノルムでデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
非数値データ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
入力ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
右三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
データフレームからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
option: 右三角マーカーを使う	marker = '>'
データフレームのリスト列を1000の位で四捨五入して、整数にする	df[aList].round(-3).astype(int)
読み込みモードでファイルパスをオープンする]	open(filepath, mode='r')
星マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
列からn個、ランダムに選ぶ	random.choices(iterable, k=n)
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
option: 茶色色を使う	color = 'brown'
折れ線グラフのポイントマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: 印を下三角に変更する	marker = 'v'
データフレームを列によってグループ化して、それぞれのグループの最小値を求める	df.groupby(column).min()
Pandasのバージョンを確認する	print(pd.__version__)
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームのカラムがどれだけ、分散しているか調べる	df[col].var()
データフレームを行によって昇順にソートする	df.sort_index(ascending=True)
データフレームの列を百の位で四捨五入して整数型にする	df[col].round(-2).astype(int)
データフレームのリスト列の相関行列スピアマン順位相関係数で	df[aList].corr(method='spearman')
線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
現在のエポック	int(time.time())
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
データフレームの中に文字列が存在するか確認する	df.isin([value])
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
option: ハニーデュー色を用いる	color = 'honeydew'
ファイルをオープンして]書き込みストリームを使う	open(filepath, mode='w')
データフレームのカラムの欠損値を前の行の値で埋める	df[col].fillna(method='ffill')
最大値・最小値の範囲で一様な乱数を発生させる	random.uniform(最小値, 最大値)
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
文字列を最後の部分文字列で分割したときの最初の文字列を使う	s.rpartition(sub)[0]
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
オブジェクトがバイト列型か調べる	isinstance(obj, bytes)
ヒストグラムをカーキ色を使って描画する	plt.hist(データ列, color='khaki')
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
オーキッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
データ列の未入力値を前の値で置き換える	ds.fillna(method='ffill')
追加できるように既存のファイルをBOM付きでオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
要素は集合のメンバーでないか調べる	element not in aSet
データフレームを各列毎に集約し、列の分散を求める	df.groupby(column)[column2].var()
データ列の75パーセンタイル	ds.quantile(0.75)
データフレームを列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
全ての空白文字	string.whitespace
作画のフォントを日本語表示にセットする	sns.set(font='IPAexGothic')
リストとデータ列について散布図を描画して菱形マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ファイルを追加モードとしてオープンする]	open(filepath, mode='a')
リストとリストの散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
文字列は文字列より辞書順で後か調べる	s > s2
ファイルパスから拡張子付きのファイル名を使う	os.path.basename(filepath)
option: 配列のデータ型を指定する	dtype = np.int16
処理中の例外を情報を知る	sys.exc_info()
小数点数の平方根を算出する	math.sqrt(x)
xが一桁の正の数か調べる	0 <= x <= 9
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
option: ダークグレーにグラフの色を設定する	color = 'darkgrey'
文字列が全て大文字かテストする	s.isupper()
実数の双曲線正弦を求める	math.sinh(x)
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
整数に浮動小数点数を加える	x + y
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
データフレームのカラムの各値の出現数	df[col].value_counts()
option: ベージュに色を設定する	color = 'beige'
ロードされたモジュールのリスト	sys.modules
数列とリストについて散布図を描いて、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をコーラルに指定する	plt.hist(データ列, color='coral')
option: 印をダイアモンドに設定する	marker = 'D'
カラムの欠損値を平均で補う	ds.fillna(ds.mean())
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
コードポイントの最大値	sys.maxunicode
複数横に並べてヒストグラムを描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
カラムを整数に四捨五入する	ds.round()
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
データフレームの欠損値がある行を削除する	df.dropna()
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
データフレームを列を用いてソートしてインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
option: ラインスタイルを点線に設定する	linestyle = 'dotted'
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
項目名が辞書上で定義されている	key in aDict
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
ヒストグラムの色をグリーンに変更する	plt.hist(データ列, color='green')
ヒストグラムをミディアムバイオレットレッド色を用いて描画する	plt.hist(データ列, color='mediumvioletred')
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列を最後の部分文字列で二つに区切って、残りの文字列を使う	s.rpartition(sub)[-1]
option: クリムゾン色を使用する	color = 'crimson'
二つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
半透明の実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームを列によってソートする	df.sort_values(by=column)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
xが一桁の正の整数か調べる	0 <= x <= 9
データフレームのカラムを破壊的にドロップする	df.drop(column, axis=1, inplace=True)
多次元尺度構成法を用いて濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
文字列をカンマで区切って、列挙する	s.split(',')
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
リストとリストの散布図を描画してマーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの色をチョコレートにセットする	plt.hist(データ列, color='chocolate')
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
数列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
テンプレートをargsを引数として文字列整形する	formatText.format(*args)
列によってデータフレームをグループ化して最小値を計算する	df.groupby(column).min()
リストのn番目からn2番目まで	aList[n:n2]
散布図をライトグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgray')
折れ線グラフの色をスカイブルーにセットする	plt.plot(データ列x, データ列y, color='skyblue')
グラフに格子を入れる	plt.grid(True)
データフレームをグループ化し、各列に対し個数を計算する	df.groupby(column)[column2].count()
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームの列の欠損値を平均値に設定する	df[col].fillna(df[col].mean())
データフレームの列の値がxかつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
option: コロンを区切りで用いる	sep = ':'
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
データフレームの平均値を算出する	df.mean()
赤い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
赤い四角マーカーをリストとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームを'A'列によって並べ直し、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
縦棒グラフを描き、、棒の幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
指定した値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図をピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='pink')
ポスターにプロットの使途を設定する	sns.set(context='poster')
ヒストグラムをフローラルホワイト色を使って描画する	plt.hist(データ列, color='floralwhite')
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
リストを水色で表示できる文字列にする	f'\033[36m{value}\033[0m'
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
横棒グラフをビスク色を用いて描画する	plt.barh(データ列x, データ列y, color='bisque')
CSVファイルTSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
パラメータが無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, oo)
タプルの中の最小値を算出する	min(aTuple)
Pandasで、書式fmtとしてデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
n進文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
データ列のNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
大量のデータ列が正規分布かどうか仮説検定する	scipy.stats.kstest(データ列, 'norm')
変数が無限大に近づく際の数式の極限値を計算する	sympy.limit(e, z, oo)
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
横棒グラフをモカシン色を使って描画する	plt.barh(データ列x, データ列y, color='moccasin')
度数分布図を描画し合計を1にする	plt.hist(データ列, density=True)
データ列間の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データ列が何秒か見る	ds.dt.second
文字列が全て大文字か	s.isupper()
option: 色をアクアマリンに変更する	color = 'aquamarine'
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
option: フォントの色をトマトに設定する	color = 'tomato'
表データを複数の列で昇順にソートする	df.sort_values(by=column, ascending=True)
破線にヒストグラムのラインスタイルを変更する	plt.hist(データ列, linestyle='dashed')
option: オレンジ色を使う	color = 'orange'
JSON形式の文字列をデータに変換する	json.loads(jsonString)
文字列の中のパターンによるマッチを使う	re.findall(pattern, s)
ベクトルの列ごとの平均	np.mean(aArray, axis=0)
今日の月数	datetime.datetime.today().month
データフレームをグループ化して、ヒストグラムを用いて図示する	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
リストのn番目以降の要素を得る	aList[n:]
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
ロバストな線形モデルを作る	model = sklearn.linear_model.HuberRegressor()
文字列の大文字小文字をする	s.casefold()
実数の双曲線余弦	math.cosh(x)
predicateFuncを適用したときTrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
日付データが日付データよりあとかどうか判定する	aDate > aDate2
赤い星マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
ファイルパスをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
データ列をカテゴリデータにする	ds.astype(object)
赤い点線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
オプションで、出力先を標準エラーに変更する	file = sys.stderr
グラフの目的を画面に変更する	sns.set(context='notebook')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
ヒストグラムをミスティローズ色を用いて描画する	plt.hist(データ列, color='mistyrose')
データフレームのリスト列の中に日付データが存在するかどうか調べる	df[aList].isin([value])
色付きの一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
文字列が全て十進数字か調べる	s.isdecimal()
nを切り捨てながら半分にする	n //= 2
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
複数のデータ列を箱髭図にする	plt.boxplot([データ列, データ列])
rangeの無限バージョン	itertools.count(start=n, step=step)
出力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
JSONを使う	import json
option: 色をミスティローズに設定する	color = 'mistyrose'
option: グラフの色をアイボリーに変更する	color = 'ivory'
データフレームをJSONLファイルにタブ区切りで保存する	df.to_csv(filename, sep='\t')
nが3で割り切れるか調べる	n % 3 == 0
データフレームを各列毎にグループ分けして列の最小値を求める	df.groupby(column)[column2].min()
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
列によって破壊的に大きい順にデータフレームを並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
複数のデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
データフレームから数値データの列だけ抽出する	df.select_dtypes('number')
配列とイテラブルについて散布図を描画して、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
列自身を2回あわせた直積を得る	itertools.product(iterable, repeat=2)
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
カテゴリで色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
整数nがタプルのどれかか調べる	n in aTuple
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
マッピングの値も複製する	{k: copy.copy(v) for k, v in aDict.items()}
nを2進数表現に変換する	bin(n)
スーパーセットかテストする	aSet.issuperset(aSet2)
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
カラムの未入力値を平均値に設定する	ds.fillna(ds.mean())
パターンにASCII限定として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
イテラブルとデータ列の散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストとリストについての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
キューの要素を右にn個分ローテンションする	deq.rotate(n)
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
折れ線グラフをブラック色を用いて描画する	plt.plot(データ列x, データ列y, color='black')
行列の平均	np.mean(aArray)
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
option: 丸印を使う	marker = 'o'
値を下線付きで表示する	print(f'\033[4m{value}\033[0m')
縦棒グラフをプロットして、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
option: グラフの色をシスルに変更する	color = 'thistle'
データフレームのリストカラムのNaNをxで埋める	df[aList].fillna(x)
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
整数nを2進文字列に変換する	bin(n)[2:]
全ての数字	string.digits
データフレームのリストカラムの平均値	df[aList].mean()
データフレームから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
日付時刻データにn週間を加える	aDatetime + datetime.timedelta(weeks=n)
0からnまでのスライス	slice(n)
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を計算する	df.groupby([column, column2], as_index=False).var()
整数nがリストのどれかか調べる	n in aList
データフレームを表示するとき小数点以下の表示精度をする	pd.set_option('precision', n)
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
データフレームのリストで指定した列の各列間の相関係数	df[aList].corr()
xを整数に変換する	int(x)
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
折れ線グラフの色をダークスレートブルーにする	plt.plot(データ列x, データ列y, color='darkslateblue')
option: ディープスカイブルーにフォントの色を設定する	color = 'deepskyblue'
文字列の開始位置から終了位置の範囲で部分文字列の登場をカウントする	s.count(sub, start, end)
ファイルを改行除外して一行ずつ読む	f.readline()
グラフの縦横比を等しくする	plt.axis('equals')
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
実行結果をマゼンタにする	f'\033[35m{value}\033[0m'
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
縦軸だけグリッド線	plt.grid(axis='y')
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
グラフで使うフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
棒グラフを青色を用いて描画する	plt.bar(データ列x, データ列y, color='blue')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
CSVTSVをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
簡単な説明を追記する	plt.legend(['凡例A', '凡例B'])
クラスが名前付きタプルか確認する	issubclass(C, tuple)
青いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームを'A'列の値によってグループ化し、記述統計量を算出する	df.groupby('A').describe()
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
変数を紫色にする	f'\033[35m{value}\033[0m'
ヒストグラムをライトスカイブルー色を用いて描画する	plt.hist(データ列, color='lightskyblue')
散布図を紺碧色を用いて描画する	plt.scatter(データ列x, データ列y, color='azure')
スチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
実数を実数で割った余り	x % y
リストとリストについて散布図を描いて、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
実数を実数で除算した余り	x % y
小麦色色を使ってヒストグラムを描画する	plt.hist(データ列, color='wheat')
数値の簡略化を行う	sympy.sympify(e)
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
データフレームを列によって並べて、新しい行を加える	df.sort_values(columns).reset_index()
option: ホワイトスモーク色を使う	color = 'whitesmoke'
線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
データフレームのカラムの値がxより大きい行を抽出する	df[df[column] > x]
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
実数の３乗を算出する	x ** 3
データフレームを表示するとき列の最大幅をnに変更する	pd.set_option('max_colwidth', n)
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
二つの列の値ごとにデータフレームを集計して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームをインデックスによってソートする	df.sort_index()
データフレームから数値データだけ抽出する	df.select_dtypes('number')
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームのカラムの中に日付データと文字列があるかどうか調べる	df[col].isin([value, value2])
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
データ列とリストについて散布図をプロットし、文字列という短い説明用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
ミディアムターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
クラスは名前付きタプルかどうか調べる	issubclass(C, tuple)
線グラフの色をアリスブルーにセットする	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームの重複した行をマスクする	df.duplicated()
文字列の最後から部分文字列を探す	s.rfind(sub)
線グラフの色をライトコーラルにセットする	plt.plot(データ列x, データ列y, color='lightcoral')
散布図の大バツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
表で、列に重複があるか調べる	df.duplicated(subset=column)
方程式として数値を解く	sympy.solve(e)
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: フォントの色をフクシアに設定する	color = 'fuchsia'
イテラブルとリストの散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
列をキーとして2つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
小数点数を切り下げて整数に変換する	math.floor(x)
ポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.')
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
rgbのバツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
イテラブルの長さnの順列を計算する	itertools.permutations(iterable, n)
回帰分析をRANSACでする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ヒストグラムをロイヤルブルー色として描画する	plt.hist(データ列, color='royalblue')
折れ線グラフの色を白にする	plt.plot(データ列x, データ列y, color='white')
右三角マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
文字列リストにシーケンスを変換して、タブでつなげる	'\t'.join(map(str, iterable))
回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
option: グレーを用いる	color = 'gray'
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
文字列はタプルの要素か調べる	element in aTuple
散布図のバツ印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
両端キュー中の要素のインデックス	deq.index(element)
データ列とリストについての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
文字列は数値か確認する	s.isnumeric()
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
組とタプルを連結する	aTuple + aTuple2
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
改行なしに数値を出力する	print(value, end='')
カレント作業ディレクトリ	os.getcwd()
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
数式を変数についてn階微分する	sympy.diff(e, z, n)
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
カテゴリで色付けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
横棒グラフをミディアムシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
見やすいグラフを描画する	import seaborn as sns
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
偽陽性を避けたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
データフレームを列でグループ化し、、列の要約統計量を算出する	df.groupby(column).describe()[column2]
option: コロンを区切り記号で使う	sep = ':'
option: オールドレースにグラフの色を設定する	color = 'oldlace'
ファイルを書き込み用にオープンする]	open(filepath, mode='w')
アルファベットが文字列内にあるかどうか調べる	any(c.isalpha() for c in s)
二つのデータフレームを横方向につなぐ	pd.concat([df, df2], axis=1)
10を底とする対数	math.log10(x)
タプルを文字列リストに変換して部分文字列によって一つにする	sub.join(map(str, iterable))
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
aListn番目から要素を取り除く	aList.pop(n)
option: ネイビー色を用いる	color = 'navy'
予測結果の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
横棒グラフをブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
散布図に赤い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
半透明の点線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
シルバー色を使ってヒストグラムを描画する	plt.hist(データ列, color='silver')
プログラムの実行を異常終了する	sys.exit(1)
標準入力	sys.stdin
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
既存のファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
両端キューの値をインプレースに逆順にする	deq.reverse()
両端キューに文字列をenqueueする	deq.appendleft(element)
文字列を最初の部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
リストをy軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームのカラム名を列から文字列に付け直す	df.rename(columns={column: name})
プロットの描画で濃くパレットを使う	sns.set(pallete='deep')
線の線種を一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの列を折れ線グラフとして可視化する	plt.plot(df[column], df[column])
表データを各列と列の組み合わせ毎にグループ化し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
実数で実数を整数除算する	x // y
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
バイナリ書き込みモードでファイルをオープンする]	open(filepath, mode='wb')
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
折れ線グラフの下三角印を青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
selectorsでマスクされたリストの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームの中の列をn個に分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのカラムを100の位で丸める	df[col].round(-2)
option: 読み込みモードに指定する	mode = 'r'
リストをビン数nを使ってビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
データ列と配列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
二進数文字列を整数にする	int(s, 2)
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
浮動小数点数で数を割る	x / y
データフレームの列の欠損値を後の行の値に指定する	df[col].fillna(method='bfill')
タプルの合計を算出する	sum(aTuple)
組の値を昇順に並べる	sorted(aTuple, reverse=True)
rgbの下三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
列の各データは何回出現するか見る	df[col].value_counts()
淡くカラーパレットをグラフの描画で使う	sns.set(pallete='muted')
データフレームのリストカラムが正規分布からどの程度、尖っているか確認する	df[aList].skew()
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
非数字が文字列中にあるかどうか調べる	any(not c.isdigit() for c in s)
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
逆正接	math.atan(x)
nにn2をかけた値をnに代入する	n *= n2
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図のマーカーをポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
カンマで区切って2つの数値を出力する	print(value, value2, sep=',')
option: フォントの色をブラウンにセットする	color = 'brown'
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
リストの値を関数に適用した結果で並べ変える	sorted(aList, key=func)
数式の部分分数化する	sympy.apart(e)
option: コーンズシルクにグラフの色を指定する	color = 'cornsilk'
デフォルトを適用する	sns.set()
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームのカラムの文字列をNaNにする	df[col].replace(s, np.nan)
整数nを二進文字列に変換する	bin(n)[2:]
option: n番目のカラムを行に設定する	index_col = n
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
データフレームの相関行列ピアソン相関係数として	df.corr(method='pearson')
データフレームをグループ化し、それぞれの列に対し個数を算出する	df.groupby(column)[column2].count()
日付データが火曜日かどうか確認する	aDate.weekday() == 1
リストとリストについて散布図を描いて、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの▼印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図の▽マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
列'A'と列'B'をキーとして２つの表データを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
カウンタの最頻出な項目	aCounter.most_common()[0]
グラフを淡くする	sns.set(pallete='muted')
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
列の欠損値をxで補う	ds.fillna(x)
データ列の折れ線グラフを三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
ファイルをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
リスト内の要素が全て真	all(aList)
JSONファイルのファイルを読み込んで、dataとする	data = json.load(fin)
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
折れ線グラフの色をコーンズシルクにセットする	plt.plot(データ列x, データ列y, color='cornsilk')
パールゴールデンロッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
nとn2の積を計算する	n * n2
リネン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
option: バッファのサイズを大きくする	buffering = 4096
日付データが水曜日かどうか調べる	aDate.weekday() == 2
ライトスカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
散布図の丸マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
nを二進文字列にする	bin(n)[2:]
各列毎にデータフレームを集計して、列の合計を求める	df.groupby(column)[column2].sum()
セットの全ての要素が別の集合に含まれるか	aSet.issubset(aSet2)
SDGとして回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
表データの指定された列を抽出する	df[column]
シアン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
ヒストグラムを一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
書式をタプルで文字列整形する	formatText.format_map(aDict)
二進文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データフレームのカラムの欠損値を前の行の値に設定する	df[col].fillna(method='ffill')
文字列の左側から空白を除く	s.lstrip(' ')
データフレームを複数の列の値によってまとめたグループ	df.groupby(columns)
データフレームを列によってグループ化して分散を求める	df.groupby(column).var()
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
データフレームを百の位で四捨五入して、整数にする	df.round(-2).astype(int)
ホワイトスモーク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
グラフから目盛り線を消す	plt.grid(False)
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
リネン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
オブジェクトはリストに含まれる	element in aList
実数の整数部を求める	math.modf(x)[1]
二つの変数を同じ値にする	x = y = n
データ列の年	ds.dt.year
option: マルーンにグラフの色を変更する	color = 'maroon'
option: マルーンにグラフの色を設定する	color = 'maroon'
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
列'A'と列'B'をキーとして二つの表データを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
双方向キューをタプルに変換する	tuple(deq)
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
データ列と配列についての散布図に文字列という簡単な説明用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
データフレームを二つの列の値でグループ分けする	df.groupby(['A', 'B'])
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
空のロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
有理数モジュールを使用する	import fractions
ヒストグラムの色をダークターコイズにする	plt.hist(データ列, color='darkturquoise')
散布図を黒い▲マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c='k')
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
行によって降順でデータフレーム全体を並べる	df.sort_index(ascending=False)
データフレームの行名をまとめて、nameからname2に変更する	df.rename(index={name: name2})
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: 読み込みモードを使う	mode = 'r'
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
集合が空でないか調べる	len(aSet) != 0
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
データフレームを破壊的に昇順に二つの列によってソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
青い点線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
配列の折れ線グラフをプロットしてラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
データフレームのNaNを前の行の値に設定する	df.fillna(method='ffill')
データフレームから重複した行を落とす	df.drop_duplicates()
xを実数に変換する	float(x)
文字列をアンダーライン付きで表示できる文字列にする	f'\033[4m{value}\033[0m'
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
n個にデータ列を等間隔でビン分割する	pd.cut(ds, n)
ファイルからストリームを読み込みfileとする	file = open(filepath)
箱ひげ図を横に並べてプロットする	plt.boxplot([データ列, データ列])
ファイルパスをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
データフレームの未入力値を最小値に設定する	df.fillna(df.min())
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームの列がx以下のデータを取り出す	df[df[column] <= x]
option: シーグリーンを用いる	color = 'seagreen'
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
平均値付き箱髭図を描く	plt.boxplot(データ列, showmeans=True)
カラムのNaNを直後の値に指定する	ds.fillna(method='bfill')
確率的勾配降下を用いてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
データフレームのリストカラムの中に含まれると文字列の合計を求める	df[aList].isin([value, value2]).sum()
データフレームのリスト列の値を正規表現patternでまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
縦棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを各列と列の組み合わせ毎にグループ化し、合計を求める	df.groupby([column, column2], as_index=False).sum()
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
グラフのデザインをよくする	import seaborn as sns
等量で列を分割数nとして分割する	pd.qcut(ds, n)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
散布図をrgbの四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
カウンタの文字列をリストとして得る	aCounter.keys()
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
データフレームの列は正規分布からどの程度、尖っているか確認する	df[col].skew()
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
option: マーカーの線幅を変更する	markeredgewidth = 2.5
２つのデータフレームを縦に連結する	pd.concat([df, df2], axis=0)
プログラムの実行を強制的に終了する	sys.exit()
散布図を黒い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
mathモジュールを使う	import math
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
行列の行ごとの分散を計算する	np.var(aArray, axis=1)
Pandasで、UNIX時間の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
option: グラフの色をライムに変更する	color = 'lime'
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
日付時刻データが木曜日	aDatetime.weekday() == 3
全八進数字	string.octdigits
データフレームのカラムの中の欠損値の数を求める	df[col].isna().sum()
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
EUCでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
横棒グラフをブランチドアーモンド色を使って描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: スラッシュを区切りで用いる	sep = '/'
配列とデータ列についての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
度数分布図を上限から下限の区間でプロットする	plt.hist(データ列, range=(start, end))
主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
実数のn乗の浮動小数点数剰余	pow(x, n, y)
横棒グラフをグレー色を使って描画する	plt.barh(データ列x, データ列y, color='grey')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
データフレームを各列毎にグループ化して列の合計を求める	df.groupby(column)[column2].sum()
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
二つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
散布図のダイアモンド印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: マーカーの色を変更する	markerfacecolor = '#800080'
ヒストグラムの色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
option: ペールグリーン色を用いる	color = 'palegreen'
アクアマリン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームを列でグループ分けして列の要約統計量を求める	df.groupby(column).describe()[column2]
赤い実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 色の透明度を設定する	alpha = 0.5
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
ふたつの集合が共通の要素を持たないか確認する	aSet.isdisjoint(aSet2)
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
小数点数の常用対数	math.log10(x)
データフレームを'A'列と'B'列によってソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
nにn2を加える	n + n2
ヒストグラムの色を暗い赤に変更する	plt.hist(データ列, color='darkred')
データフレームのリストカラムのNaNをxで補う	df[aList].fillna(x)
最小値でデータフレームのNaNを埋める	df.fillna(df.min())
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
文字列がPythonのキーワードかどうか調べる	keyword.iskeyword(s)
データフレームの相関行列スピアマンで	df.corr(method='spearman')
文字列中に部分文字列が存在するか調べる	sub in s
オブジェクトがタプルの要素でないか調べる	element not in aTuple
プラットホームはMacOSかどうか	sys.platform.startswith('darwin')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
x座標の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
要素が集合に含まれないかどうか調べる	element not in aSet
最後の部分文字列で文字列を分けた場合の最初の文字列を見る	s.rpartition(sub)[0]
データフレームのヒストグラム付き散布図を描く	sns.jointplot(x='列名', y='列名', data=df)
浮動小数点数を二乗する	x ** 2
Pandasで、データ列をPandasの日付型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
列'A'と列'B'をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
Pandasでデータフレームのcollを書式fmtでタイムスタンプにする	pd.to_datetime(df[col], format=fmt)
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
option: グラフを実線に設定する	linestyle = 'solid'
文字列中にひとつでも非空白がある	any(not c.isspace() for c in s)
データフレームのリスト列が正規分布からどの程度尖っているか調べる	df[aList].skew()
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
option: グラフの種類を実線に指定する	linestyle = 'solid'
option: 右三角マーカーを用いる	marker = '>'
配列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ピーチパフ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
リストとリストについての散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
項目名が辞書上で未定義か	key not in aDict
option: ミディアムパープル色を用いる	color = 'mediumpurple'
複数行対応として文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
イエローグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
多次元データを多次元尺度構成法として淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: デピンク色を使用する	color = 'deeppink'
ヒストグラムの色を淡い茶色に指定する	plt.hist(データ列, color='tan')
カウンタを少ない順番にリストとして得る	aCounter.most_common()[::-1]
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
option: 淡い茶色を使う	color = 'tan'
本日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
データフレームのリストカラムの分散を求める	df[aList].var()
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
文字列の中でケースを無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
小数点数の正弦の逆数	math.asin(x)
option: 書き込みモードに指定する	mode = 'w'
クラス分類をよりランダムなランダムフォレストでする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
リストとイテラブルの散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームの未入力値を最頻値で埋める	df.fillna(df.mode().iloc[0])
データ列を箱髭図にする	plt.boxplot(データ列)
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
ブラックにヒストグラムの色を指定する	plt.hist(データ列, color='black')
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ひとつでも非英字が文字列中に含まれるか確認する	any(not c.isalpha() for c in s)
グラフの色調を全般的に濃くする	sns.set(pallete='deep')
表データの列がリストに含まれるデータを取り出す	df[df[column].isin(aList)]
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームを'A'列によってによって大きい順にソートする	df.sort_values(by='A', ascending=False)
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
赤い一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムの色を赤にする	plt.hist(データ列, color='red')
n個に等量でデータフレームの中の列を分割する	pd.qcut(df[col], n)
線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
数値の平方根を計算する	sympy.sqrt(e)
文字列中の正規表現を新しい文字列を用いて置換する	re.sub(pattern, newsub, s)
option: スプリンググリーンを使う	color = 'springgreen'
折れ線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
二つの変数をコロンで区切って出力する	print(value, value2, sep=':')
option: クロスマーカーを描画する	marker = 'x'
データフレームの相関行列ケンドール順位相関係数で	df.corr(method='kendall')
整数nを2進リテラルに変換する	bin(n)
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
２つの表を異なる列をキーにして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
両端キューの左	deq[0]
２つの文字列を辞書順で比較する	s < s2
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
赤いポイントマーカーを配列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c='r')
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
データフレームを表示するとき、表示可能な列数を変更する	pd.set_option('display.max_columns', n)
日付時刻データは日付時刻データより後ろ	aDatetime > aDatetime2
option: シエナを使う	color = 'sienna'
折れ線グラフを赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームのカラムのNaNを平均値で埋める	df[col].fillna(df[col].mean())
option: グラフの色をスノーに設定する	color = 'snow'
棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
線グラフの色をカーキにセットする	plt.plot(データ列x, データ列y, color='khaki')
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
ダークマゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
折れ線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
数値を太文字で表示する	print(f'\033[1m{value}\033[0m')
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
ファイルからn文字、読み込む	f.read(n)
散布図をスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='skyblue')
option: ミッドナイトブルー色を使う	color = 'midnightblue'
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームの値が未入力値かどうか	df.isna()
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
データフレームをJSONLファイルにTSVファイルとして書き込む	df.to_csv(filename, sep='\t')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
両端キュー中の要素のインデックスを求める	deq.index(element)
日付データが木曜日かどうか調べる	aDate.weekday() == 3
赤いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
パターンを大文字・小文字を無視してあらかじめコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムの中にある文字列の個数をカウントする	df[col].isin([value]).sum()
列の各データ値の出現数を求める	df[col].value_counts()
option: フォントの色をダークグリーンに設定する	color = 'darkgreen'
行列の列ごとの最小	np.min(aArray, axis=0)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
データ列の中にある文字列の数をカウントする	ds.isin([value]).sum()
部分文字列を文字列のプレフィックスから除去する	s.removeprefix(sub)
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
Pandasで、書式を用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
配列とデータ列について散布図を描画し、、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
棒グラフをスラグレー色を使って描画する	plt.bar(データ列x, データ列y, color='slategrey')
オブジェクトは整数クラスか	isinstance(obj, int)
option: グラフの種類を点線に設定する	linestyle = 'dotted'
option: グラフの線種を実線に指定する	linestyle = 'solid'
データ列の欠損値を最大値で置換する	ds.fillna(ds.max())
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
ロイヤルブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
option: フォントの色をフォレストグリーンにする	color = 'forestgreen'
青緑色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
文字列中の部分文字列を文字列に全て置き換える	s.replace(sub, newsub)
何か試しに動かす	print('Hello World')
色付きの破線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームのカラムを10の位で丸める	df[col].round(-1)
空の回帰木モデルを作成する	model = sklearn.tree.DecisionTreeRegressor()
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
折れ線グラフの四角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
散布図としてデータフレームの全列を可視化する	sns.pairplot(df)
データフレームのNaNを直前の値で置換する	df.fillna(method='ffill')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
２つのデータ列の散布図として残差を描く	sns.residplot(x=データ列, y=データ列)
集合から要素を除く	aSet.remove(element)
実数が正か	x > 0
t-SNEとして淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
option: ダークブルーを使う	color = 'darkblue'
グラフにグリッド線を付ける	plt.grid(True)
カウンタの文字列一覧を使う	aCounter.keys()
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列をセパレータで区切って、列挙する	s.split(sep)
下線付きで数値を表示する	print(f'\033[4m{value}\033[0m')
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
半透明の破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
縦軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
option: ライトグリーンを使う	color = 'lightgreen'
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
数列とリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムをフローラルホワイト色を用いて描画する	plt.hist(データ列, color='floralwhite')
リストの先頭を使う	aList[0]
データフレームの行を範囲指定して抽出する	df[start:end]
option: グラフの線種を点線にセットする	linestyle = 'dotted'
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
プロットで使う題名を指定する	plt.title('グラフの名称')
キューのn番目の要素	deq[n]
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
文字列タブ区切りのファイルからカンマ区切りのファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
変数を黒色で出力する	print(f'\033[30m{value}\033[0m')
データフレームのカラムの欠損値を最小値で補う	df[col].fillna(df[col].min())
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
実数のk進対数	math.log(x, k)
データフレームが正規分布からどれだけ歪んでいるか見る	df.kurt()
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームの欠損値を最小値に減らす	df.fillna(df.min())
三つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
オブジェクトがリストの要素	element in aList
タプルの要素を並べる	sorted(aTuple)
データフレームの欠損値を直後の値に指定する	df.fillna(method='bfill')
逆余弦を求める	math.acos(x)
折れ線グラフの菱形マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
オブジェクトのハッシュ値	hash(obj)
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
行列の逆行列	np.linalg.inv(aArray)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
線グラフのラインスタイルを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データ列が何月か調べる	ds.dt.month
外れ値に強い単回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
カーキ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
プログラムをここで終える	sys.exit()
JSONLファイルにタブ区切りでデータフレームを保存する	df.to_csv(filename, sep='\t')
線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
名前付きタプルを使用する	import collections
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
グラフを明るくする	sns.set(pallete='bright')
リストを複製する	aList.copy()
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
集合にリストを追加更新する	aSet.update(iterable)
ポイントマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
文字列が全て大文字かどうか調べる	s.isupper()
option: グラフの色を深紅に設定する	color = 'crimson'
option: グラフの色をフォレストグリーンにする	color = 'forestgreen'
日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
破線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
二つの数値を順にプリントする	print(value, value2)
ファイルがあるか確認する	os.path.exists(filepath)
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
変数をアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
配列をビンニングする	pd.cut(aArray, aList)
数のn乗	x ** n
散布図の△マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
option: ライトシアンに色をする	color = 'lightcyan'
データ列の時刻を使う	ds.dt.hour
ラインを色付きの破線を使って描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: どの行もヘッダにしない	header = None
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
nまでの偶整数列	list(range(2, n, 2))
データフレームを列によって整列して、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
現在が何時か知る	datetime.date.today().hour
文字列を走査し正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
タン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
黒いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
日付データが月曜日かどうか調べる	aDate.weekday() == 0
データフレームのカラムの空文字を未入力値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
option: 右三角印を加える	marker = '>'
option: グラフの色をリネンに変更する	color = 'linen'
列のNaNを平均に設定する	ds.fillna(ds.mean())
複数のデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
ミディアムブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
リストを分割数nでビニングし、、namesのラベルをつける	pd.cut(aList, n, labels=names)
キューの末尾にイテラブルの各値を追加する	deq.extend(iterable)
符号付きで整数nを長さn2のバイナリにする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームを2つの列でまとめたグループ	df.groupby(['A', 'B'])
option: スラッシュをセパレータで使用する	sep = '/'
文字列は漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
横棒グラフをダークゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
赤いダイアモンドマーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
線グラフの色をハニーデューに変更する	plt.plot(データ列x, データ列y, color='honeydew')
option: グラフの色をトマトに設定する	color = 'tomato'
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
カラムが正規分布からどの程度、歪んでいるか確認する	ds.kurt()
両端キューが空か調べる	len(deq) == 0
nが集合のどれかか	n in aSet
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームを複数の列をキーにしてソートする	df.sort_values(by=column)
０で全要素を初期化した行列を作る	np.zeros(行数, 列数)
ロイヤルブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: グラフの色をオーキッドに変更する	color = 'orchid'
表の列の値がxでない行を消す	df[df[column] == x]
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
折れ線グラフの▼マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
データフレームの中の欠損値の数を数える	df.isna().sum()
書き込みモードとしてファイルを開く]	open(filepath, mode='w')
空集合	set()
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
データフレームのリスト列の平均値	df[aList].mean()
プラットホームがWindowsかどうか調べる	sys.platform.startswith('win32')
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
CSVファイルファイル名がかどうか調べる	filename.endswith('.csv')
グリッド線を黄色くする	plt.grid(color='y')
黒い右三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
nの二進文字列	bin(n)[2:]
文字列が全て英数字か	s.isalnum()
リストを配列にする	np.array(aList)
タイムスタンプデータの分数	aDatetime.minute
データフレームがどの程度、分散しているか見る	df.var()
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
マップの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
小数点数の仮数を算出する	math.frexp(x)[0]
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
タイムスタンプデータからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
option: △マーカーを使う	marker = '^'
ヒストグラムの色をブランチドアーモンドにセットする	plt.hist(データ列, color='blanchedalmond')
辞書のキーの一覧	aDict.keys()
ふたつの関係が⊆か調べる	aSet.issubset(aSet2)
重複する行	df[df.duplicated(keep=False)]
最適な位置に凡例を表示する	plt.legend(loc='best')
日付データにn週間分、足す	aDate + datetime.timedelta(weeks=n)
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
データフレームのリストカラムの未入力値を最大値で置換する	df[aList].fillna(df[aList].max())
グリッドを破線にする	plt.grid(linestyle='dashed')
配列の要素数	aArray.size
オブジェクトはリストクラスのインスタンス	isinstance(obj, list)
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
縦棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
スカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
リストをnからナンバリングする	enumerate(aList, start=n)
データフレームのカラムの中にと日付データがいくつ存在するか数える	df[col].isin([value, value2]).sum()
ファイルをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
上位集合もしくは等しいかどうか調べる	aSet > aSet2
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
列名リストによってデータフレームをまとめたグループ	df.groupby(columns)
行列の列ごとの合計値	np.sum(aArray, axis=0)
option: 印の色を変更する	markerfacecolor = '#800080'
リストとイテラブルについて散布図を描いて、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: 読み込むシートの名前をnamesに減らす	sheet_name = names
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
折れ線グラフの左三角印の太さを設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
柱状グラフを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
モジュールを検索するパスにを追加する	sys.path.append(dir)
option: スチールブルー色を用いる	color = 'steelblue'
キューは空	len(deq) == 0
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
オブジェクトはリストに含まれるか	element in aList
データフレームを2つの列によってソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
折れ線グラフの大バツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 先頭の行をヘッダに減らす	header = 0
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
データフレームを列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
散布図の上三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
要素をキューの末尾に入れる	deq.append(element)
列のユニークな値を確認する	df[col].unique()
空白文字を見る	string.whitespace
モジュールを検索するパス	sys.path
データ列の値をValueMapでまとめて変更する	ds.replace(ValueMap)
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームをグループ化して、ヒストグラムで描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
等しい量になるようにn個に配列を分割する	pd.qcut(aArray, n)
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
線グラフをダークオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームを列名リストで並べて、更新する	df.sort_values(by=column, inplace=True)
データフレームが重複している	df.duplicated()
データフレームのカーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
回帰分析をRANSACとして行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
option: ハニーデューを使用する	color = 'honeydew'
データフレームを各列毎に集約して文字列というグループを使う	df.groupby(column).get_group(s)
ヒストグラムをライトグレー色を使って描画する	plt.hist(データ列, color='lightgray')
両端キューの順序を左にn個分輪番で回す	deq.rotate(-n)
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの正規分布に対する上下広がり	df.skew()
option: グラフの色をダークマゼンタに指定する	color = 'darkmagenta'
異なる列をキーとして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
rgbの左三角マーカーを数列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: ネイビー色を使う	color = 'navy'
ヒストグラムをオーキッド色を用いて描画する	plt.hist(データ列, color='orchid')
データフレームの列の中央値	df[col].median()
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
散布図にrgbの▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
データフレームを列によって分類してグループごとの分散を計算する	df.groupby(column).var()
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: 耐火レンガ色を使う	color = 'firebrick'
エクセルファイルファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムのどの値が頻出か確認する	df[col].mode()
リストに要素を追加する	aList.append(element)
文字列中に部分文字列が含まれるか	sub in s
データフレームをグループ化して、ヒストグラムを用いてプロット化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
横棒グラフを描き、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
文字列を区切り記号で分割する	s.split(sub)
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
実数を数で除する	x / y
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
文字列の中のASCII限定として正規表現によるマッチを求める	re.findall(pattern, s, flags=re.ASCI)
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
パールバイオレットレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
追加できるように文字コードtextで既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
モデルをあてはめる	model.fit(説明変数, 目的変数)
黒い△マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームのリスト列はどれだけ、分散しているか調べる	df[aList].var()
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
option: グラフの色をライトグリーンに指定する	color = 'lightgreen'
列の文字列を欠損値にする	ds.replace(s, np.nan)
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
図の縦横を指定する	plt.figure(figsize=(横幅, 高さ))
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
縦棒グラフをオレンジレッド色を使って描画する	plt.bar(データ列x, データ列y, color='orangered')
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
昇順にデータフレームを'A'列で並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
配列の標準偏差を使う	np.std(aArray)
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
ビン数nで配列を分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームがどれだけ分散しているか見る	df.var()
線グラフの線のスタイルを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
双方向キューの順番をn個分回転させる	deq.rotate(n)
ファイルパスからストリームを読み込んでfileとする	file = open(filepath)
散布図を描画する	plt.scatter(データ列x, データ列y)
横棒グラフを赤色として描画する	plt.barh(データ列x, データ列y, color='red')
option: ラベンダー色を用いる	color = 'lavender'
日付データが日曜日か調べる	aDate.weekday() == 6
線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
データフレームの中の欠損値がある行を削除する	df.dropna()
散布図のポイントマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
日付データからn秒分減算する	aDate - datetime.timedelta(seconds=n)
縦棒プロットを描画する	plt.bar(ラベル列, データ列)
折れ線グラフを貝殻色を使って描画する	plt.plot(データ列x, データ列y, color='seashell')
線グラフをライムグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームの行名をnameからname2に変更する	df.rename(index={name: name2})
データフレームの列のユニークな値	df[col].unique()
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
ディムグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
折れ線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
option: パパイヤウィップ色を使う	color = 'papayawhip'
スタッキングとしてクラス分類をする	sklearn.ensemble.StackingClassifier()
nがn2以下か確認する	n <= n2
降順に列によって破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを２つの列でソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
最大値でデータ列のNaNを補う	ds.fillna(ds.max())
時刻を使用する	import datetime
ふたつの集合がセットと互いに素か調べる	aSet.isdisjoint(aSet2)
データフレームのNaNを平均値で埋める	df.fillna(df.mean())
データフレームの各グループ毎の平均値	df.groupby(column).mean()
リネン色でヒストグラムを描画する	plt.hist(データ列, color='linen')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
散布図を▲印を使用して描画する	plt.scatter(データ列x, データ列y, marker='^')
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
データフレームを複数の列によってグループ化する	df.groupby(columns)
カウンタ間で積集合を算出する	aCounter & aCounter2
option: エクセルファイルのシート名をnamesにセットする	sheet_name = names
散布図を赤い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
グラフの補助目盛を有効にする	plt.minorticks_on()
オプションで、標準出力を出力先にする	file = sys.stdout
カラムの未入力値を直前の値で埋める	ds.fillna(method='ffill')
リスト中の要素が少なくともひとつ真か	any(aList)
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
カウンタ間でインターセクション	aCounter & aCounter2
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
データ列を書式を用いて日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
横方向に複数のデータフレームを一つにする	pd.concat([df, df2, df3], axis=1)
スタックの要素を左にn個分回転させる	deq.rotate(-n)
セットをタプルに変換する	tuple(aSet)
option: 配列のデータ型を指定する	dtype = bool
データフレームの列と列の相関行列ケンドール順位相関係数として	df[[column, column2]].corr(method='kendall')
データフレームを各列毎にグループ化し、、列の個数を算出する	df.groupby(column)[column2].count()
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
数値を緑色化する	f'\033[32m{value}\033[0m'
列から配列を作る	np.array(iterable)
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
小数点数のサインの逆数	math.asin(x)
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
データフレームを関数の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
列毎にデータフレームをグループ化して、各グループの最小値を算出する	df.groupby(column).min()
列名の一覧を使う	df.columns
Pandasで、書式fmtでデータ列を日付データにする	pd.to_datetime(ds, format=fmt)
データフレームの複数の列を並べて箱ひげ図として可視化する	plt.boxplot([df['カラム'], df['カラム']])
文字列を最後の部分文字列で二分する	s.rpartition(sub)
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
変数が無限大に近づく時数式の極限値を求める	sympy.limit(e, z, oo)
データフレームのn行目以降選ぶ	df[n:]
option: グラフの色をベージュにセットする	color = 'beige'
ファイルパスを開く]	open(filepath)
散布図の▽マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
キーがマッピング上で未定義かどうか調べる	key not in aDict
ベクトルの標準偏差	np.std(aArray)
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
青い破線を用いて配列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
中央値でデータフレームの中の列を分割する	pd.qcut(df[col], 2)
折れ線グラフに三角印を加える	plt.plot(データ列x, データ列y, marker='^')
データフレームのリストで指定された列の各列間の相関係数を算出する	df[aList].corr()
option: ディムグレー色を使う	color = 'dimgray'
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
乱数を求める	random.random()
キューに要素をエンキューする	deq.appendleft(element)
整数nの十六進数表記	hex(n)
データフレームのリストカラムの中にいくつ欠損値が存在するか数える	df[aList].isna().sum()
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
青紫色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
リストとリストについて散布図をプロットして、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データフレームのカラムの中に文字列と文字列がいくつあるかカウントする	df[col].isin([value, value2]).sum()
カテゴリ列でグループ化して、データフレームをにバイオリン図を使って可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
アルファベットを全部使う	string.ascii_letters
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
列をキーにして2つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
リストから重複を除去する	sorted(set(aList), key=aList.index)
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
実数の天井数を計算する	math.ceil(x)
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
縦棒グラフを描画して、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列がリストの要素でないか	element not in aList
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームの列を破壊的にドロップする	df.drop(column, axis=1, inplace=True)
プロットの色を全般的に暗くする	sns.set(pallete='dark')
オプションでファイルを出力にする	file = sys.open(filename, 'w')
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
x軸の目盛を非表示にする	plt.xticks([])
箱ひげ図で数列を可視化する	plt.boxplot(データ列)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
線を赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
リストを四分位数でビン分割する	pd.qcut(aList, 4)
option: 色を赤に設定する	color = 'red'
option: レモンシフォンを使う	color = 'lemonchiffon'
OSがマックか	sys.platform.startswith('darwin')
線グラフをチョコレート色を用いて描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: カンマをセパレータで使う	sep = ','
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
データフレームを表示するとき、折り返しを無効に変更する	pd.set_option('expand_frame_repr', False)
プロットの色テーマを全般的にパステル調にする	sns.set(pallete='pastel')
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
nがn2未満、もしくはn3以上か調べる	n < n2 or n >= n3
配列のスカラー倍を求める	aArray * n
折れ線グラフを描画し、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
option: フォントの色を黄色に設定する	color = 'yellow'
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ピアソン相関係数を使ってデータフレームの相関行列	df.corr(method='pearson')
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
タプルのキーを列挙する	aDict.keys()
要素はセットのメンバーかどうか	element in aSet
option: マーカーの大きさを指定する	markersize = 2.0
２つの実行結果を順に表示する	print(value, value2)
プラットフォームの整数の最大値	sys.maxsize
データフレームの第三四分位数	df.quantile(0.75)
データ列をn個にビニングし、、namesのラベルをつける	pd.cut(ds, n, labels=names)
あらかじめASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
散布図のクロスマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームを表示するとき、表示可能な行数をnに変更する	pd.set_option('display.max_rows', n)
リストと配列の散布図を描画して、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ドジャーブルー色を使用する	color = 'dodgerblue'
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
データフレームの列の中にいくつ文字列があるか数える	df[col].isin([value]).sum()
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
赤い下三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
組の各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
列の値によってデータフレームを集約する	df.groupby(column)
数式のパラメータにnを代入する	e.subs(z, n)
数を百の位で四捨五入する	round(x, -2)
スピアマン相関係数を用いてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
線グラフの色をアリスブルーにする	plt.plot(データ列x, データ列y, color='aliceblue')
散布図のバツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
横棒グラフを描き、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
プロットに使う横軸のラベルをする	plt.xlabel('x軸ラベル')
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
数列とリストについての散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのカラムは正規分布からどの程度、尖っているか調べる	df[col].skew()
二つの浮動小数点数は十分に近いか確認する	math.isclose(x, x2)
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
0からnの範囲で	range(n)
棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームから1行だけ列を消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
イテラブルを文字列に変換して、カンマで連結する	','.join(map(str, iterable))
文字列を空白で末尾から分割する	s.rsplit()
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
配列とリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
各列毎にデータフレームを集約して、列の分散を求める	df.groupby(column)[column2].var()
文字列が全て小文字かどうか調べる	s.islower()
オブジェクトは数値か調べる	isinstance(obj, (int,float))
データフレームを表示するとき、列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
二つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
ファイルから1バイト読む	f.read(1)
コーンフラワーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
カラムの中にいくつ日付データが存在するか数える	ds.isin([value]).sum()
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
option: namesをカラムの名前に設定する	names = names
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ファイルを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
行列間の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
option: グラフの色をブルーバイオレットに変更する	color = 'blueviolet'
折れ線グラフの色をシーグリーンにする	plt.plot(データ列x, データ列y, color='seagreen')
数式のパラメータについてのn階微分を計算する	sympy.diff(e, z, n)
カラーパレットをパステル調にする	sns.set(pallete='pastel')
赤い三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
プロットにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
棒グラフをライトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
データフレームの列を各グループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
nをn2で割った余りをnとする	n %= n2
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
マップの値数を見る	len(aDict)
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
綺麗なグラフを用いる準備をする	import seaborn as sns
データフレームを表示するとき表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
柱状グラフをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
多次元データを特異値分解としてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
nを半分にする	n /= 2
データ列とリストについて散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
散布図に黒いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
リストと配列について散布図を描画し、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの下三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
MSDを用いて淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームのカラムの曜日数	df[col].dt.dayofweek
配列とリストについて散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
グラフに鉛直方向の点線をつける	plt.axvline(x=0, linestyle='dotted')
ダークサーモン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームを'A'列の値によってグループ化する	df.groupby('A')
値をアンダーライン付きにする	f'\033[4m{value}\033[0m'
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
イテラブルから新しい計数器を生成する	collections.Counter(iterable)
マッピングに別のマッピングの値を更新する	aDict.update(aDict2)
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
最小値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].min())
カンマ区切りのファイルを読み込む	pd.read_csv(filename, sep=',')
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
列名を列挙する	df.columns
異なる列をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
nかつn2	n and n2
文字列を区切りで区切って、列挙する	s.split(sep)
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
前もってケースを無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
分子n、分母mの有理数を準備する	fractions.Fraction(numerator=n, denominator=m)
列の長さを制限する	collections.deque(iterable, maxlen=n)
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
カウンタの項目一覧	aCounter.keys()
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームのカラムの時を使う	df[col].dt.hour
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ファイルパスをBOM付きを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
2つのデータフレームを縦向きに合体させる	pd.concat([df, df2], axis=0)
タプルの最後を取り除く	aTuple[:-1]
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
nとn2の和を算出する	n + n2
文字列中にひとつでも非英数字がある	any(not c.isalnum() for c in s)
ライトグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
乱数の行列	np.random.random((行数, 列数))
option: ブール型を用いる	dtype = np.int32
option: インディアンレッド色を用いる	color = 'indianred'
データフレームを百の位で丸めて整数型にする	df.round(-2).astype(int)
n2がnより大きくかつn3より小さい	n < n2 and n2 < n3
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
双方向キューの最後の要素	deq[-1]
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列に漢字があるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
リストを文字列として連結する	''.join(map(str, iterable))
ファイルを全部、読み込む	f.read()
エラーなくリストの文字列の位置を見る	aList.index(element) if element in aList else -1
空のロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
組の個数	len(aTuple)
列を計数器にする	collections.Counter(iterable)
変数を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
データフレームのカラムの欠損値を後の値で埋める	df[col].fillna(method='bfill')
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
nとn2のビット和を計算する	n | n2
TSVファイルから文字化けしないようにCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
昇順にリストをソートする	sorted(aList, reverse=False)
縦棒グラフをインディゴ色を使って描画する	plt.bar(データ列x, データ列y, color='indigo')
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
変数について数式の微分を計算する	sympy.diff(e, z)
正規分布に基づく確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
辞書をコピーする	aDict.copy()
組をリバースする	reversed(aTuple)
２点間のユークリッド距離を求める	math.dist(point, point2)
両端キューをタプルにする	tuple(deq)
辞書のキーを列挙する	aDict.keys()
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
配列とリストの散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ランダムにデータフレームから取り出す	df.sample()
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
文字列を部分文字列で二分し、最初の文字列を見る	s.partition(sub)[0]
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
タプルを階層化する	collections.ChainMap(aDict)
棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
グラフの描画を見やすくする	import seaborn as sns
文字列を後ろから部分文字列で区切る	s.rsplit(sub)
データフレームで、列の重複を見る	df.duplicated(subset=column)
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
データフレームを複数の列によってグループ化し要約統計量を求める	df.groupby(columns).describe()
データ列とリストの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タプルの最初のn要素を捨てる	aTuple[n:]
実数を千の位で丸める	round(x, -3)
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
ベクトルを元にして全要素が初期値の行列を作る	np.full_like(aArray, 初期値)
グリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
カラムの欠損値を中央値に設定する	ds.fillna(ds.median())
データフレームで、列と列の重複を消す	df.drop_duplicates(subset=column)
セットの浅いコピー	aSet.copy()
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
配列とリストについて散布図を描画し、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
変数について数式の微分を行う	sympy.diff(e, z)
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの列を削除する	df.drop(column, axis=1)
データフレームの列名一覧で指定された列を落とす	df.drop(columns, axis=1)
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図に▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
ハイパボリック・コサインの逆数	math.acosh(x)
日付データが何日か知る	aDate.day
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
実行結果を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
文字列を新しい文字列で全部置き換える	s.replace(sub, newsub)
イテラブルをダミー変数にする	pd.get_dummies(iterable)
現在のモジュールを得る	sys.modules[__name__]
実数の双曲線正接の逆数を計算する	math.atanh(x)
パラメータについて数式の微分を求める	sympy.diff(e, z)
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
空集合を生成する	set()
折れ線グラフの△マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
xの小数点以下'1'桁まで出力する	print(':.1f'.format(x))
小数点数の余弦の逆数を求める	math.acos(x)
ヒストグラムをグリーン色を用いて描画する	plt.hist(データ列, color='green')
タイムスタンプデータからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
ユーザが整数を入力する	int(input())
カウンタの要素を増やす	aCounter[element] += 1
整数乱数の配列	np.random.randint(開始値, 終了値, N)
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
データ列が正規分布か調べる	scipy.stats.shapiro(データ列)
文字列中の文字を列挙する	list(s)
二つのデータ列を箱髭図にする	plt.boxplot([データ列, データ列])
浮動小数点数を小数点以下で丸める	round(x, n)
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
データフレームの未入力値を前の値に設定する	df.fillna(method='ffill')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
現在が火曜日	datetime.datetime.today().weekday() == 1
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
グラフの用途を画面に変更する	sns.set(context='notebook')
ライトスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
柱状グラフを描き、、ビンの数を指定する	plt.hist(データ列, bins=区関数)
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
データフレームのカラムの歪度を求める	df[col].kurt()
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
リストにリストを追加して拡張する	aList.extend(aList2)
データフレームのリストカラムの下位25%	df[aList].quantile(0.75)
データ列のNaNを後の行の値にする	ds.fillna(method='bfill')
実数の双曲線正弦を計算する	math.sinh(x)
非空白が文字列中に含まれる	any(not c.isspace() for c in s)
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
グラフの中の縦軸に説明をつける	plt.ylabel('y軸ラベル')
シエナ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
折れ線グラフの下三角印の色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: 欠損値を含めない	dropna = True
option: データ型としてブール型を使用する	dtype = np.int32
データフレームの列の第二四分位数を求める	df[col].median()
セットのすべての要素が別のセットに含まれるか調べる	aSet.issubset(aSet2)
折れ線グラフをブラック色を使って描画する	plt.plot(データ列x, データ列y, color='black')
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
降順に2つのカラムによってでデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
数を整数にする	int(x)
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
option: マーカーを丸に変更する	marker = 'o'
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
データフレームの指定したデータ型のカラム名を列挙する	df.select_dtypes(型).columns
option: どの行もカラムの名前に設定しない	header = None
縦棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
赤い一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
アクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
文字列の最初を見る	s[0]
データフレームの中の列を等間隔でn個に分割する	pd.cut(df[col], n)
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
折れ線グラフをレモンシフォン色を使って描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームを表示するとき、小数点以下の表示精度をn桁にする	pd.set_option('precision', n)
縦棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
option: 改行するの代わりに文字列を用いる	end = s
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
rgbのダイアモンドマーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの中にいくつ欠損値が存在するか求める	df.isna().sum()
配列の次元の数を求める	aArray.ndim
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの列の文字列長を列として使う	df[col].str.len()
カラムの欠損値をxで埋める	ds.fillna(x)
線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームの中で、列とカラムの重複を削除する	df.drop_duplicates(subset=[column, column2])
'A'列によってデータフレームを並べて、更新する	df.sort_values(by='A', inplace=True)
データフレームを列の値によってグループ化し要約統計量を計算する	df.groupby(column).describe()
四角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
文字列が識別子名か調べる	s.isidentifier()
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
最大最小を使って揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
横向きに3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
表データを各列と列の組み合わせ毎にグループ化し、、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データフレームのリスト列の値は欠損値か調べる	df[aList].isna()
タブ	'\t'
データフレームのリスト列の母標準偏差を求める	df[aList].std(ddof=0)
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのカラムのどの値が頻出か調べる	df[col].mode()
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
２つのカラムの値でデータフレームを集約する	df.groupby(['A', 'B'])
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
option: スラッシュをセパレータで使う	sep = '/'
データフレームを列でグループ化し、、それぞれのグループごとの分散を求める	df.groupby(column).var()
事前に正規表現をコンパイルする	re.compile(pattern)
option: 濃いシアンにグラフの色を設定する	color = 'darkcyan'
nがn2より大きいかどうか確認する	n > n2
実行結果を黄色でプリントする	print(f'\033[33m{value}\033[0m')
余弦	math.cos(x)
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
option: グレー色を用いる	color = 'gray'
リストの最後の値	aList[-1]
option: フォントの色をコーンズシルクに設定する	color = 'cornsilk'
option: ドジャーブルーにグラフの色を設定する	color = 'dodgerblue'
文字列の中でASCII限定としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
x,y,zをそれぞれn,n2,n3にする	x, y, z = n, n2, n3
クリムゾン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
空の組	()
リストとリストについて散布図を描画してマーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
データフレームのメディアンを算出する	df.median()
ヒストグラムの色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムをゲインズボロ色を用いて描画する	plt.hist(データ列, color='gainsboro')
黒い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
等量で分割数nを用いてデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ティールにヒストグラムの色を変更する	plt.hist(データ列, color='teal')
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
リストとリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのカラムを整数に四捨五入する	df[col].round()
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
文字列の中の正規表現によるすべてのマッチを見る	re.findall(pattern, s)
文字列の右端から空白を除く	s.rstrip()
トマトにヒストグラムの色を設定する	plt.hist(データ列, color='tomato')
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
カテゴリで色分けしてデータフレームをにバイオリン図を用いて可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
オブジェクトがリストクラスかどうか調べる	isinstance(obj, list)
横棒グラフの縦幅を指定する	plt.barh(ラベル列, データ列, width=0.5)
option: 色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
配列と数列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
複数行対応として正規表現で文字列を分ける	re.split(pattern, s, flags=re.MULTILINE)
グラフで使用するタイトルを変更する	plt.title('グラフの名称')
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
要素一つの組	(element,)
現在の作業ディレクトリ	os.getcwd()
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
option: 四角マーカーを使用する	marker = 's'
データフレームのリストカラムの中の欠損値の合計をカウントする	df[aList].isna().sum()
rgbに棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
アンティークホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
三変数の最大値	max(x, y, z)
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
フォレストグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームの重複した行数のマスク	df.duplicated()
ダークオーキッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
文字列のエポック秒からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
行列の行ごとの標準偏差を算出する	np.std(aArray, axis=1)
nを否定する	not n
両端キューのn番目に値を差し込む	deq.insert(n, element)
データフレームの欠損値を後の行の値にセットする	df.fillna(method='bfill')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
散布図をライトサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
データフレームのカラムの値が未入力値かどうか調べる	df[col].isna()
リネン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
辞書のキー一覧	list(aDict)
リストとデータ列の散布図を描画し、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
nが1、もしくは2か確認する	n == 1 or n == 2
日付データの日数	aDate.day
ガンマ関数	math.gamma(x)
nが1、もしくは2か	n == 1 or n == 2
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
オブジェクトは浮動小数点数クラスか確認する	isinstance(obj, float)
データ列を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
アクアマリン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームを列でで破壊的にソートする	df.sort_values(by=column, inplace=True)
行列の最大値	np.max(aArray)
横棒グラフを描く	plt.barh(ラベル列, データ列)
option: グラフの色をダークグリーンに変更する	color = 'darkgreen'
option: ライトスカイブルーを使う	color = 'lightskyblue'
空のロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
青い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
現在は何月か知る	datetime.datetime.today().month
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
タプルの最後からn番目以前の部分を取り出す	aTuple[:-n]
散布図のダイアモンド印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
線グラフを赤い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
文字列からISO8601で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
異なるカラムをキーにして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
標準入力から1行だけ改行を取り除いて読む	sys.stdin.readline().rstrip()
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
ファイルに文字列を書く	f.write(s)
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
配列とイテラブルの散布図を描いてその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ファイルパスを文字コードtextでオープンする]	open(filepath, encoding=text)
折れ線グラフの色をアイボリーに変更する	plt.plot(データ列x, データ列y, color='ivory')
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
横棒グラフをハニーデュー色を用いて描画する	plt.barh(データ列x, データ列y, color='honeydew')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないかどうか調べる	s.find(sub, start, end) == -1
異なる列をキーにして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
リストとデータ列についての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列でフォーマットして現在を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームを'A'列によってまとめたグループ	df.groupby('A')
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
変数を定義する	x = n
縦棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
浮動小数点数の最大値	sys.float_info.max
predicateFuncがTrueとならないタプルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
ブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ヒストグラムをライトイエロー色を使って描画する	plt.hist(データ列, color='lightyellow')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
グリッド線を白くする	plt.grid(color='w')
文字列が全て小文字か調べる	s.islower()
データフレームから型型の列を抽出する	df.select_dtypes(ty)
文字列を区切りで分割して、文字列リストにする	s.split(sub)
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
散布図の三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: フォントの色を紺碧に変更する	color = 'azure'
データフレームを各列毎にグループ化して文字列というグループの個数を求める	df.groupby(column).size()[s]
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフにラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
キューを空にする	deq.clear()
ルートの階層化マップを作る	collections.ChainMap()
カテゴリで色分けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
配列を平坦にする	aArray.flatten()
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
option: フォントの色をスラグレーに変更する	color = 'slategrey'
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
option: コーンズシルクを用いる	color = 'cornsilk'
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: ドジャーブルーにグラフの色を変更する	color = 'dodgerblue'
実数を数で割って、小数点以下を切り捨てる	x // y
データフレームの列の文字列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
データフレームのリスト列を100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
赤いバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列が無限に繰り返す列	itertools.repeat(element)
文字列は組の要素か	element in aTuple
赤い破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフの色をプラムにする	plt.plot(データ列x, データ列y, color='plum')
ヒストグラムをミントクリーム色を用いて描画する	plt.hist(データ列, color='mintcream')
データ列のパーセンタイルを可視化する	plt.boxplot(データ列)
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
実数の二進対数	math.log2(x)
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
プロットをスライド用に設定する	sns.set(context='talk')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
タプルをn回連結する	aTuple * n
散布図の印の線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
標準出力のバッファをフラッシュする	sys.stdout.flush()
全要素を1で初期化した行列を初期化する	np.ones(要素数, dtype=np.int)
混同行列をヒートマップとして確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
クラス分類を確率的勾配降下でする	model = sklearn.linear_model.SGDClassifier()
まとめてValueMapでデータフレームのリスト列の値を置き換える	df[aList].replace(ValueMap)
データフレームを各カテゴリに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
配列とデータ列の散布図を描画して、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームを列を用いて集計して、それぞれのグループごとの件数を知る	df.groupby(column).size()
option: マーカーをクロスに変える	marker = 'x'
TSVからCSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
横棒グラフを描画する	plt.barh(ラベル列, データ列)
シーグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: 文字コードtextを用いる	encoding = text
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
配列をベースに全要素が1の行列	np.ones_like(aArray)
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
option: 色をシエナに設定する	color = 'sienna'
16進文字列を整数に変換する	int(s, 16)
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
マップのキーを要素に変更する	aDict[key] = element
ヒストグラムをパパイヤウィップ色を使って描画する	plt.hist(データ列, color='papayawhip')
紺色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
文字列の出力を改行せず行う	print(value, end='')
データフレームのカラムがx以上の行を選択する	df[df[column] >= x]
試しに何か動かす	print('Hello World')
シアンにヒストグラムの色を指定する	plt.hist(データ列, color='cyan')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
PandasでデータフレームのcollのUNIX秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
数字を全て見る	string.digits
空のヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
ヒストグラムの色をダークグレーにセットする	plt.hist(データ列, color='darkgray')
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
辞書から最後の値をポップする	aDict.popitem()
双方向キューの最後に値を追加する	deq.append(element)
配列のユニークな値を要素とするベクトル	np.unique(aArray)
折れ線グラフをロージーブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='rosybrown')
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ヒストグラムの色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
列をダミー変数に変換する	pd.get_dummies(iterable)
方程式の解を算出する	sympy.solve(e)
データフレームからカテゴリデータのカラムを抽出する	df.select_dtypes('object')
ファイルから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
プロットの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
nが偶数	n % 2 == 0
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
データ列をタイムスタンプに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームの相関行列スピアマン相関係数として	df.corr(method='spearman')
データフレームのひとつの列のみ説明変数にする	説明変数 = df[['列名']]
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
データフレームの列と列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
MSDとして濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
タプルをチェーンマップに変換する	collections.ChainMap(aDict)
データフレームの列がxより少ない行を抽出する	df[df[column] < x]
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームの列の欠損値をxで埋める	df[col].fillna(x)
リストをランダムにシャッフルする	random.shuffle(aList)
散布図にrgbの四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームをインデックスで降順で並べる	df.sort_index(ascending=False)
折れ線グラフの▼マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
データフレームのリストカラムの欠損値を中央値で置換する	df[aList].fillna(df[aList].median())
option: ダイアモンドマーカーを用いる	marker = 'D'
データフレームを列でグループ化し、、列の要約統計量を計算する	df.groupby(column).describe()[column2]
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
本日が水曜日	datetime.datetime.today().weekday() == 2
option: 色をミッドナイトブルーに設定する	color = 'midnightblue'
部分文字列が文字列の終了位置より前に存在しないか	s.find(sub, 0, end) == -1
ロバストな単回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
NaNを含めてデータフレームを列の値でグループ化する	df.groupby(column, dropna=False)
少ない方からカウンタを列挙する	aCounter.most_common()[::-1]
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
グラフ中のフォントを設定する	sns.set(font=フォント名)
eの浮動小数点数乗	math.exp(x)
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
オブジェクトが集合か調べる	isinstance(obj, set)
集合の更新不能版	frozenset(aSet)
データフレームのカラムをドロップして、更新する	df.drop(column, axis=1, inplace=True)
縦棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
散布図をミッドナイトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
コマンド引数を列挙する	sys.argv[1:]
データフレームの列を百の位で丸めて、整数型にする	df[col].round(-2).astype(int)
文字列をプリントする	print(value)
option: 線種を実線に設定する	linestyle = 'solid'
上位集合もしくは等しいかどうか	aSet > aSet2
前もって正規表現をコンパイルする	re.compile(pattern)
データ列を10の位で四捨五入して、整数にする	ds.round(-1).astype(int)
option: グラフの色をライトサーモンに変更する	color = 'lightsalmon'
ゼロ埋めされた行列を作る	np.zeros(要素数)
文字列に日本語があるかどうか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
配列を元に全要素が1の行列を作る	np.ones_like(aArray)
無限に列を繰り返す	itertools.cycle(iterable)
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
ダークグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkgreen')
nが3の倍数かどうか調べる	n % 3 == 0
横棒グラフをオリーブ色を使って描画する	plt.barh(データ列x, データ列y, color='olive')
ヒストグラムとしてデータ列を可視化する	plt.hist(データ列)
データ列のタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: フローラルホワイト色を使う	color = 'floralwhite'
シーケンスの各要素を両端キューの最初につけ加える	deq.extendleft(iterable)
データフレームを各列毎に集約して列の最小値を計算する	df.groupby(column)[column2].min()
データ列は何時か確認する	ds.dt.hour
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
数式の平方根を求める	sympy.sqrt(e)
リストとリストについて散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ロージーブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
リストとリストについて散布図を描画してマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
シーケンスをイミュータブルなセットに変換する	frozenset(iterable)
横棒グラフを暗い赤色を用いて描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
データフレームは正規分布からどれだけ尖っているか見る	df.skew()
シーケンスを文字列に変換して結合する	''.join(map(str, iterable))
一点鎖線を用いてヒストグラムを描く	plt.hist(データ列, linestyle='dashbot')
クラスのサブ型か確認する	issubclass(サブクラス, クラス)
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ひとつでも数字が文字列内にあるかどうか調べる	any(c.isdigit() for c in s)
空のチェーンマップ	collections.ChainMap()
カラムの中にと文字列が存在する	ds.isin([value, value2])
リストをカウントしてカウンタから引く	aCounter.subtract(iterable)
行列式	np.linalg.det(aArray)
実数の仮数	math.frexp(x)[0]
ふたつの集合の共通要素だけにする	aSet.intersection_update(aSet2)
スタックのn番目に要素を差し込む	deq.insert(n, element)
２つの最小値を求める	min(x, y)
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
データフレームの数値を一度に小数点以下n桁で丸める	df.round(n)
タプルのキーの値を得る	aDict[key]
イテラブルの各要素を両端キューの末尾に付け加える	deq.extend(iterable)
縦棒グラフをダークゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
双方向キューは空でないか調べる	len(deq) != 0
棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
最大列数を減らす	pd.set_option('display.max_columns', n)
データフレームを'A'列を用いて降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
データ列は何年か確認する	ds.dt.year
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
リストとイテラブルについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
複数の列の値によってデータフレームをグループ化し、基本統計量を求める	df.groupby(columns).describe()
ファイルの読み込みストリームを使う	open(filepath)
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
KNNでクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
要素を両端キューの先頭から取り除く	deq.popleft()
option: ダークスレートブルーを使用する	color = 'darkslateblue'
option: 印を四角に指定する	marker = 's'
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
オーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='orchid')
文字列中に部分文字列がある	sub in s
配列の列ごとの最小値を求める	np.min(aArray, axis=0)
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ファイルを読み込み用にオープンして]fとする	f = open(filepath, mode='r')
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
青いグリッド線を引く	plt.grid(color='b')
データフレームの中の列をビン数nを用いてビン分割する	pd.cut(df[col], n)
option: バイアスを算出しない	fit_intercept = False
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
option: ダークグレーにグラフの色を変更する	color = 'darkgray'
データフレームのリストカラムは正規分布からどの程度、尖っているか調べる	df[aList].skew()
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをインディゴ色を使って描画する	plt.hist(データ列, color='indigo')
リストから文字列と等しい最初の要素を捨てる	aList.remove(element)
リストの変遷を半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: フォントの色をスプリンググリーンにセットする	color = 'springgreen'
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
柱状図を描画し、合計を1にする	plt.hist(データ列, density=True)
カテゴリで色分けして、データフレームをにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを複数の列を用いて小さい順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームの先頭	df.head()
線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: タブを分割記号で使用する	sep = '\t'
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
プロットのグリッドを暗くする	sns.set(style='darkgrid')
モジュールとして自分自身を	sys.modules[__name__]
列を周期的に繰り返す	itertools.cycle(iterable)
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
文字列を黒色化する	f'\033[30m{value}\033[0m'
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
リストとデータ列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
散布図をダークマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
リストとイテラブルについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
日付データの曜日を使う	aDate.weekday()
文字列を走査し正規表現にケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
有理数をインポートする	import fractions
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
スクリプトファイルのパス	os.path.abspath(__file__)
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
50パーセンタイルでデータフレームのリストカラムの欠損値を置換する	df[aList].fillna(df[aList].median())
データフレームの列を落とす	df.drop(column, axis=1)
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
グラフの色テーマを暗くする	sns.set(pallete='dark')
データフレームの未入力値が含まれる箇所に色をつける	df.style.highlight_null()
一方に含まれ、他方に含まれない集合を使う	aSet.difference(aSet2)
日付データが月曜日かどうか	aDate.weekday() == 0
標準出力をフラッシュする	sys.stdout.flush()
散布図の丸印の太さを指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
リストを順に出力する	print(*aList)
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
新しい線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression()
ひとつでも非数字が文字列中に含まれるか	any(not c.isdigit() for c in s)
スラグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
option: namesをカラム名に設定する	names = names
option: グラフの色をラベンダーに設定する	color = 'lavender'
データ列を100の位で丸めて整数型にする	ds.round(-2).astype(int)
データ列のNaNを最頻値で埋める	ds.fillna(ds.mode().iloc[0])
データフレームを列名リストによってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
option: マーカーの色を指定する	markerfacecolor = '#800080'
線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ポイント印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ハニーデューにヒストグラムの色を変更する	plt.hist(データ列, color='honeydew')
データフレームから指定された４列を抽出する	df[[column, column2, column3, column4]]
データフレームのNaNを中央値で補う	df.fillna(df.median())
リストを箱ひげ図にする	plt.boxplot(データ列)
オブジェクトのバイト長	sys.getsizeof(obj)
nが一桁の整数かどうか確認する	-9 <= n <= 9
nがリストのどれか	n in aList
散布図をライトシアン色として描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
データフレームの列の値がx以上の行を選ぶ	df[df[column] >= x]
降順でデータフレームを行を用いてソートする	df.sort_index(ascending=False)
折れ線グラフの四角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
値∉集合	element not in aSet
データフレームを列名リストでによって降順に並べる	df.sort_values(by=column, ascending=False)
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
オリーブ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームのカラムの中に日付データが存在する	df[col].isin([value])
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
option: ローングリーン色を使用する	color = 'lawngreen'
ヒストグラムの色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームからランダムに抽出する	df.sample()
nをn2で割ったモジュロ	n % n2
マップ上で項目名が定義済みか調べる	key in aDict
データフレームの列が文字列が含まれる行を選択する	df[df[column].str.contains(s)]
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
ピアソンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
データフレームの列の欠損値を最小値に設定する	df[col].fillna(df[col].min())
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
文字列中に部分文字列がないかどうか調べる	sub not in s
折れ線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
数値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
option: フォントの色をペルーに設定する	color = 'peru'
n回文字列が繰り返すイテラブルを得る	itertools.repeat(element, n)
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
破線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
データ列とデータ列について散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームは正規分布からどの程度尖っているか見る	df.skew()
カウンタ同士で交わり演算する	aCounter & aCounter2
データフレームのカラムをカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
辞書を階層化マップに変換する	collections.ChainMap(aDict)
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
データフレームの列の値をValueMapでまとめて置換する	df[col].replace(ValueMap)
最初のカラムをデータフレームから除く	df[df.columns[1:]]
n＋n2を求める	n + n2
列の要素を両端キューの最初に追加する	deq.extendleft(iterable)
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
グラフの色を指定する	sns.set(pallete=パレット名)
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
ファイル名の区切り記号	os.sep
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
データ列をインポートする	import pandas as pd
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
文字列中に非小文字があるか	any(not c.islower() for c in s)
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
配列と数列の散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
色を暗くする	sns.set(pallete='dark')
ミディアムアクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
オブジェクトは関数か	callable(obj)
小さい順に'A'列によってデータフレームをソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームを列の値で集約する	df.groupby(column)
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
実数の小数点を丸める	round(x)
タブ区切りを用いてJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
option: ドジャーブルーを使う	color = 'dodgerblue'
乱数で要素を埋めた行列	np.random.random(N)
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
タイムスタンプデータの時刻を使う	aDatetime.time()
二つのデータフレームを列をキーにして外部結合する	pd.merge(df, df2, on=column, how='outer')
実数のサイン	math.sin(x)
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
配列とリストの散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
第二引数のファイルの名前	sys.argv[1]
実線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='solid')
グラフからグリッド線を表示しない	plt.grid(False)
実数のn乗を求める	pow(x, n)
文字列中に部分文字列が含まれる	sub in s
アヤメのデータセットをロードする	sns.load_dataset('iris')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
非英数字が文字列中に含まれるかどうか調べる	any(not c.isalnum() for c in s)
タプルの末尾からn番目以前の要素を抽出する	aTuple[:-n]
リストとリストの散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
文字列を改行で分割し、文字列リストにする	s.splitlines()
線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
散布図に▲マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
データフレームの列が文字列で始まるデータを取り出す	df[df[column].str.startswith(s)]
実線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを昇順に列によってソートし、更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列全体が正規表現にケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ファイルからの入力ストリームを使う	open(filepath)
散布図をスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='skyblue')
イテラブルを配列にする	np.array(iterable)
option: インデックスを自動的な連番に指定する	index_col = None
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
整数nの十六進表記	hex(n)
配列を変形する	aArray.reshape(行数, 列数)
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
データ列の日にち	ds.dt.day
文字列内に英数字が含まれるか調べる	any(c.isalnum() for c in s)
文字列の中のASCII限定としてパターンによるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列を部分文字列で分けたときの前半の文字列を見る	s.partition(sub)[0]
単位正方行列を作成する	np.identity(n)
ライトイエロー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
プログラムの実行を正しく終了する	sys.exit(0)
文字列リストを連結する	''.join(aStringList)
タプルの末尾を取り除く	aTuple[:-1]
データフレームのカラムの未入力値を平均に設定する	df[col].fillna(df[col].mean())
ファイルパスからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
棒グラフをレベッカパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームのリスト列の第二四分位数	df[aList].median()
ヒストグラムをホワイト色を用いて描画する	plt.hist(データ列, color='white')
赤い一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
配列とリストの散布図を描画して、マーカーを▼に変更する	plt.plot(データ列x, データ列y, marker='v')
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
フローラルホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
option: パールバイオレットレッド色を使用する	color = 'palevioletred'
横棒グラフをダークオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkorchid')
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: グラフの色を黄緑にセットする	color = 'chartreuse'
データフレームのカラムの値を正規表現でまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
n2がnより大きく、かつ、n3未満かどうか調べる	n < n2 and n2 < n3
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
２つの変数を同じ値にする	x = y = n
文字列の無限イテラブル	itertools.repeat(element)
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列x, データ列y, color='lavender')
散布図の▲印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
最初の列をデータフレームから消す	df[df.columns[1:]]
文字列を最初の部分文字列によって二つに分ける	s.partition(sub)
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれないか判定する	s.find(sub, start, end) == -1
データ列の折れ線グラフを描画し、、色をRGBでセットする	plt.plot(データ列x, データ列y, color='#800080')
横軸のラベルを設定する	plt.xlabel('x軸ラベル')
グラフのフォントを日本語表示にする	sns.set(font='IPAexGothic')
option: 色をチョコレートに設定する	color = 'chocolate'
オブジェクトは整数型	isinstance(obj, int)
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
リストをビン分割する	pd.cut(aList, aList)
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
横棒グラフをライトサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
実数に実数を足す	x + y
大きい順に列によってデータフレームを破壊的に整列する	df.sort_values(by=column, ascending=False, inplace=True)
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
双方向キューから最初の値を取り出す	deq.remove(element)
グラフのx軸を対数に変更する	plt.xscale('log')
option: タブを区切りで使用する	sep = '\t'
Pandasで、UNIX秒のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
列'A'と列'B'をキーにして２つのデータフレームを全ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
暗い赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
option: 色をライトサーモンにする	color = 'lightsalmon'
データフレームのカラムを散布図として図示する	sns.scatterplot(data=df, x='列名', y='列名')
文字列を空白で区切り、、文字列リストに変換する	s.split()
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
関数の値によってデータフレームを集約する	df.groupby(関数)
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
重複をデータフレームからインプレイスで削除する	df.drop_duplicates(inplace=True)
2つのリストをタブで区切ってプリントする	print(value, value2, sep='\t')
上三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^')
真サブセットか確認する	aSet < aSet2
配列と配列についての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストと配列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
切片なしの線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
RANSACで回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ラインを半透明の一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図を黒い▼マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をミスティローズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
option: アリスブルーにグラフの色を変更する	color = 'aliceblue'
本日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームから列を三つ選択する	df[[column, column2, column3]]
リストとイテラブルについての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
初期値で全要素を初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
マッピングの値の一覧	aDict.values()
カラムでデータフレームをグループ化して、各グループごとの件数を知る	df.groupby(column).size()
辞書の値を列挙する	aDict.values()
整数nを十六進数表記に変換する	hex(n)
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
折れ線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: 説明変数を事前に正規化する	normalize = True
ヒストグラムをパールゴールデンロッド色を用いて描画する	plt.hist(データ列, color='palegoldenrod')
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
浮動小数点数のn乗	pow(x, n)
option: パールバイオレットレッドを使う	color = 'palevioletred'
縦棒グラフを描いて、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
小数点数のcosの逆数	math.acos(x)
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
タイムスタンプデータが火曜日か調べる	aDatetime.weekday() == 1
散布図を丸マーカーを用いる描画する	plt.scatter(データ列x, データ列y, marker='o')
赤いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
行列を横ベクトルに変形する	aArray.reshape(1, -1)
イテラブルを円グラフにする	plt.pie(データ列, startangle=90)
列のメディアン	ds.median()
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
データ列とイテラブルの散布図を描いて、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームの値はNaN	df.isna()
赤い一点鎖線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
リストの文字列の位置をエラーなく求める	aList.index(element) if element in aList else -1
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
option: レベッカパープルを使用する	color = 'rebeccapurple'
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
散布図の星マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
イテラブルをイミュータブルな集合にする	frozenset(iterable)
散布図にポイント印を用いる	plt.scatter(データ列x, データ列y, marker='.')
データフレームのカラムの欠損値を平均値に減らす	df[col].fillna(df[col].mean())
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
rgbのバツマーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
列の正規分布に対する左右対称性	ds.kurt()
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
データ列を箱ひげ図にする	plt.boxplot(データ列)
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
折れ線グラフの色をブラウンに指定する	plt.plot(データ列x, データ列y, color='brown')
FIXME:カテゴリーデータを出現頻度順に整列する	df['A'].value_counts().sort_index().index
オブジェクトが浮動小数点数クラスか調べる	isinstance(obj, float)
散布図に赤い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフをティール色で描画する	plt.barh(データ列x, データ列y, color='teal')
カウンタ同士でユニオン	aCounter | aCounter2
ミディアムスレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
横棒グラフをホワイト色として描画する	plt.barh(データ列x, データ列y, color='white')
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
option: パパイヤウィップを使う	color = 'papayawhip'
データフレームのリストで指定されたカラムの相関行列ケンドール相関係数で	df[aList].corr(method='kendall')
行列の次元数を求める	aArray.ndim
option: サーモンを使用する	color = 'salmon'
スラグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
全ての印字可能な文字	string.printable
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
option: オレンジレッド色を使う	color = 'orangered'
option: ミスティローズ色を使う	color = 'mistyrose'
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategray')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
シアン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
ロージーブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
option: フォントの色をクリムゾンに設定する	color = 'crimson'
データフレームの列がx以下の行を取り出す	df[df[column] <= x]
書式としてデータ列をdatetime64型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
オブジェクトは論理値かどうか	isinstance(obj, bool)
ヒストグラムをコーラル色として描画する	plt.hist(データ列, color='coral')
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
行列の転置行列を求める	aArray.T
カラーバーを水平で描く	plt.colorbar(orientation='horizontal')
やわらかい青色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
データフレームの内で、列の重複を見る	df.duplicated(subset=column)
データフレームを列名リストによってソートして更新する	df.sort_values(by=column, inplace=True)
文字列の接尾辞から部分文字列を除去する	s.removesuffix(sub)
横棒グラフをクリムゾン色を使って描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームの中にあるの合計をカウントする	df.isin([value]).sum()
横棒グラフをダークサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='darksalmon')
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームのグループ毎の標準偏差	df.groupby(column).std()
文字列は漢字か	('\u4E00' <= ch <= '\u9FD0')
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
TSVから文字化けしないようにCSVファイルを読む	pd.read_csv(filename, encoding='shift_jis')
ファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
タプルの最初を使う	aTuple[0]
option: ダークシアン色を使用する	color = 'darkcyan'
要素が辞書の値として含まれているかどうか	element in aDict.values()
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
option: グラフの色をパープルにする	color = 'purple'
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: グラフの色をリネンに設定する	color = 'linen'
青い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
表データを各列毎にグループ化して、列の平均値を算出する	df.groupby(column)[column2].mean()
文字列をカンマで区切って列挙する	s.split(',')
クラス分類のPPVを計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ヒストグラムをアクアマリン色を用いて描画する	plt.hist(データ列, color='aquamarine')
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
option: バッファリングのサイズを設定する	buffering = 4096
横棒グラフを描画して棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
TSVファイルファイル名がか	filename.endswith('.tsv')
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
option: ミディアムスレートブルー色を使用する	color = 'mediumslateblue'
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
数列の変遷を赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ヒストグラムを赤くする	plt.hist(データ列, color='r')
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
コーンフラワーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
変数名を項目名として、辞書	dict(name=element)
全ての句点文字	string.punctuation
三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データ列を箱ひげ図で可視化する	plt.boxplot(データ列)
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
文字列がタプルに含まれないか	element not in aTuple
イテラブルを関数でフィルタする	filter(func, iterable)
カラーパレットを明るくする	sns.set(pallete='bright')
文字列を大文字・小文字を無視してパターンで区切る	re.split(pattern, s, flags=re.IGNORECASE)
year年のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
折れ線グラフの下三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データ列の欠損値を平均で埋める	ds.fillna(ds.mean())
日付時刻データと日付時刻データの時間差を秒で算出する	(aDatetime - aDatetime2).total_seconds()
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
パールバイオレットレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: フォントの色をシアンに変更する	color = 'cyan'
ヒストグラムの色をデピンクにセットする	plt.hist(データ列, color='deeppink')
最大最小として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
データ列をボックスチャートとして描く	plt.boxplot(データ列)
リストと数列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームの未入力値を後の行の値で補う	df.fillna(method='bfill')
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
リストと配列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
option: データ型を指定する	dtype = bool
データフレームの各グループごとの合計	df.groupby(column).sum()
xが真かどうか調べる	bool(x)
データフレームのリストカラムを1000の位で丸めて、整数にする	df[aList].round(-3).astype(int)
散布図の印を▽にする	plt.scatter(データ列x, データ列y, marker='v')
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
散布図を右三角印を用いる描画する	plt.scatter(データ列x, データ列y, marker='>')
'A'列を用いてデータフレームを並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
カーキ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
整数の順列の総数	math.perm(n)
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
複素数	complex(x, y)
スクリプトファイルのディレクトリ名を見る	os.path.dirname(os.path.abspath(__file__))
正規分布に基づくパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
二つのカウンタのいずれかに含まれる値を算出する	aCounter | aCounter2
ヒストグラムの範囲を変更する	plt.hist(データ列, range=(start, end))
セットに要素を追加する	aSet.add(element)
行列の行列式	np.linalg.det(aArray)
データフレームを列名リストの値でまとめたグループを見る	df.groupby(columns)
イテラブルの各要素に対して、predicateFuncがtrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
文字列の後ろ	s[-1]
折れ線グラフの大バツ印の色を指定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ヒストグラムをダークゴールデンロッド色を用いて描画する	plt.hist(データ列, color='darkgoldenrod')
イテラブルを配列に変換する	np.array(iterable)
option: グラフの色を紺碧に変更する	color = 'azure'
リストの値を昇順にソートする	sorted(aList, reverse=True)
棒グラフを赤色を用いて描画する	plt.bar(データ列x, データ列y, color='red')
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
文字列の先頭から部分文字列を見つける	s.find(sub)
作画で用いるフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
option: グラフの色を紺碧に設定する	color = 'azure'
option: ペールグリーンにフォントの色を設定する	color = 'palegreen'
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
折れ線グラフを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームのリスト列を100の位で四捨五入する	df[aList].round(-2)
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
行列と同じ大きさの空配列を作成する	np.empty_like(aArray)
option: グラフの種類を点線に変更する	linestyle = 'dotted'
データフレームの名前リストで指定された列を削除する	df.drop(columns, axis=1)
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データフレームをでJSONLファイルに保存する	df.to_excel(filename)
データフレームを列によって整列して、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
二変数の最大値	max(x, y)
最初の列を表から除く	df[df.columns[1:]]
散布図にrgbの左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
線グラフをモカシン色を用いて描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフの星マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
x軸だけ目盛り線	plt.grid(axis='x')
最大値・最小値の範囲として一様な疑似乱数	random.uniform(最小値, 最大値)
カタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
リストとリストについての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
option: 色をピーチパフに設定する	color = 'peachpuff'
0からnまでの整数列	list(range(n+1))
グラフのx軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
メディアンでデータフレームの欠損値を埋める	df.fillna(df.median())
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ディープスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
カウンタをセットに変換する	set(aCounter)
カデットブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
文字列は文字列より辞書順で前かどうか	s < s2
折れ線グラフの色をイエローグリーンにセットする	plt.plot(データ列x, データ列y, color='yellowgreen')
ファイルを書き込み用に開いて]fとする	f = open(filepath, mode='w')
データフレームのリスト列の値はNaNか調べる	df[aList].isna()
折れ線グラフの大バツマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
ダークシアグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ディープスカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='deepskyblue')
リストの末尾から要素を取り出す	aList.pop()
データフレームをグループ化し、各列に対し分散を求める	df.groupby(column)[column2].var()
折れ線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ヒストグラムをゴールド色を使って描画する	plt.hist(データ列, color='gold')
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を求める	df.groupby([column, column2], as_index=False).var()
ファイルパスを書き込みモードでオープンする]	open(filepath, mode='w')
nが5の倍数か調べる	n % 5 == 0
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
縦棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
イテラブルとリストについて散布図を描き、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
列によってデータフレームを並べ、、更新する	df.sort_values(by=column, inplace=True)
グラフを描画する準備をする	import matplotlib.pyplot as plt
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
散布図を左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
データ列の折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムを上限から下限の範囲で描く	plt.hist(データ列, range=(start, end))
文字列の右側から改行を除く	s.rstrip('\n')
散布図のマーカーの大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
書式fmtでデータ列を日付データにする	pd.to_datetime(ds, format=fmt)
option: スラグレー色を使う	color = 'slategrey'
CSVファイルTSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
オブジェクトの属性の値を値に指定する	setattr(obj, プロパティ名, 値)
オブジェクトがバイト列クラスか調べる	isinstance(obj, bytes)
大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
変数について数式を積分する	sympy.integrate(e, z)
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
nがn2以下、またはn3以上かどうか調べる	n <= n2 or n >= n3
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
option: 改行コードをWindowsに設定する	newline = '\r\n'
option: フォントの色を白にセットする	color = 'white'
データフレームから重複したデータをドロップして更新する	df.drop_duplicates(inplace=True)
表示する列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
文字列を全て小文字にする	s.lower()
option: ゲインズボロにグラフの色を変更する	color = 'gainsboro'
マップの値を列挙する	aDict.values()
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
縦棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
項目名がマッピングにないとき、要素を追加する	aDict.setdefault(key, element)
0からN未満までの行列	np.arange(N)
タプルをリストに変換する	list(aTuple)
データフレームのリストカラムの相関行列スピアマン相関係数でを求める	df[aList].corr(method='spearman')
線グラフの色をローングリーンにする	plt.plot(データ列x, データ列y, color='lawngreen')
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データフレームを各列毎にグループ化し、列の分散を求める	df.groupby(column)[column2].var()
データフレームの中にある文字列との合計を数える	df.isin([value, value2]).sum()
ターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
ファイルが存在しないか	not os.path.exists(filepath)
新しいサポートベクトル分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
データフレームの25パーセンタイルを求める	df.quantile(0.25)
散布図をダークレッド色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
option: 配列のデータ型を指定する	dtype = np.uint8
データフレームの列が文字列で終わる行を選択する	df[df[column].str.endswith(s)]
numpyを入れる	import numpy as np
データフレームのcollのエポック秒からdatetime64型にする	pd.to_datetime(df[col], unit='s', utc=True)
データフレームの指定された列をリストにする	df[column].values.tolist()
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
1からNまでのベクトル	np.arange(1, N+1)
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
タイムスタンプデータの日付	aDatetime.date()
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
データフレームのリストカラムの中にある日付データの合計を数える	df[aList].isin([value]).sum()
イテラブルから重複を取り除く	set(iterable)
データフレームを表示するとき表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
実行結果を黄色で出力する	print(f'\033[33m{value}\033[0m')
最初のカテゴリーを除いてデータフレームのカラムをダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
xが一桁の整数	-9 <= x <= 9
0から始まるn個の整数列	list(range(n))
日付時刻データの月数を使う	aDatetime.month
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
散布図を赤い右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
option: グラフの色をピーチパフにする	color = 'peachpuff'
折れ線グラフの星マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
多次元データを主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
２つの列によってデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
整数nを二進表現にする	bin(n)
グラフで使う色テーマを指定する	sns.set(pallete=パレット名)
円グラフで数列のパーセントを可視化する	plt.pie(データ列, startangle=90)
データフレームのリストカラムの各列間の相関係数	df[aList].corr()
SJISとして追加できるようにファイルパスを開く]	open(filepath, mode='a', encoding='shift_jis')
表データの各グループ毎の平均値	df.groupby(column).mean()
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
数が正かどうか調べる	x > 0
データフレームの列をヒストグラムを用いて描く	plt.hist(df[column])
データフレームのリストカラムの平均	df[aList].mean()
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
サポートベクターマシンを用いて回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームから列を１つだけ選択する	df[[column]]
チョコレート色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
散布図のクロス印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
散布図の丸印の線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
イテラブルと配列について散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
グラフに使うx座標のラベルを指定する	plt.xlabel('x軸ラベル')
ゼロ埋めされた行列	np.zeros(要素数)
両端キューのn番目に要素を差し込む	deq.insert(n, element)
ダークブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
サドルブラウン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
データフレームのカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: インデックスを連番に設定する	index_col = None
最頻値でデータフレームのリストカラムの欠損値を置換する	df[aList].fillna(df[aList].mode().iloc[0])
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
xのハッシュ値を求める	hash(x)
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
データフレームを各列毎にグループ化して列の合計を算出する	df.groupby(column)[column2].sum()
要素が集合に含まれないか調べる	element not in aSet
option: バッファリングを無効にする	buffering = 0
メディアンでデータフレームのカラムの欠損値を置換する	df[col].fillna(df[col].median())
箱ひげ図でデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
nからn2の範囲で	range(n, n2)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
多次元データをMSDで淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
グラフの色テーマを明るくする	sns.set(pallete='bright')
折れ線グラフの色を暗い赤に指定する	plt.plot(データ列x, データ列y, color='darkred')
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
数式の数値を算出する	float(e)
データフレームの列をヒストグラムにする	plt.hist(df[column])
破壊的に昇順に二つの列によってデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列を部分文字列で分割する	s.split(sub)
データフレームの列の文字列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
データフレームを各列毎にグループ化して列の標準偏差を求める	df.groupby(column)[column2].std()
イテラブルからサンプリングする	random.sample(iterable)
２つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: n番目のカラムをインデックスに指定する	index_col = n
option: 印を丸に変更する	marker = 'o'
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
option: アンティークホワイトにグラフの色を設定する	color = 'antiquewhite'
大文字を小文字に変換する	s.lower()
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
option: グラフの色をプラムに設定する	color = 'plum'
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
文字列中の正規表現を新しい文字列として置き換える	re.sub(pattern, newsub, s)
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
表データを関数の値によってグループ分けする	df.groupby(関数)
データフレームをに箱ひげ図を用いてプロット化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
配列とリストについて散布図を描画して、▲マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
多次元尺度構成法で多次元データを濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
新しいリッジ回帰モデルを準備する	model = sklearn.linear_model.Ridge(alpha=正則化項)
赤い菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
箱ひげ図としてデータ列を作図する	plt.boxplot(データ列)
データフレームのリスト列のNaNを最小値に変更する	df[aList].fillna(df[aList].min())
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
データフレームのリスト列の最頻値	df[aList].mode()
option: スレートブルー色を用いる	color = 'slateblue'
▲印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
組中のオブジェクトが最初に見つかるインデックスを探す	aTuple.index(element)
イテラブルとリストについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
ベクトルの行ごとの合計値を計算する	np.sum(aArray, axis=1)
カウンタのそれぞれの項目をカウントだけリストとして得る	aCounter.elements()
データ列が何日か見る	ds.dt.day
青い点線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
nがn2よりも小さいか確認する	n < n2
データ列の折れ線グラフを▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームを表示するとき、行数を変更する	pd.set_option('display.max_rows', n)
option: コーラルを使用する	color = 'coral'
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
タプルを展開して表示する	print(*aTuple)
文字列を最初の部分文字列で二分し、後半の文字列を見る	s.partition(sub)[-1]
日付データが何年か知る	aDate.year
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
インディアンレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ひとつでも空白が文字列内にあるか	any(c.isspace() for c in s)
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
日付時刻データと日付時刻データの時間差を算出する	aDatetime - aDatetime2
数式を変数について微分する	sympy.diff(e, z)
ライトブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
文字列の開始位置より後に部分文字列が存在しないかどうか調べる	s.find(sub, start) == -1
ISO書式の文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: カンマを区切りで使う	sep = ','
切り下げて整数にする	math.floor(x)
２つの列でデータフレームを並べて、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
日本語をグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
折れ線グラフの色をコーラルに変更する	plt.plot(データ列x, データ列y, color='coral')
データフレームを列によってグループ化して各グループの分散を算出する	df.groupby(column).var()
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
バイナリモードでファイルをオープンして]fとする	f = open(filepath, mode='rb')
データ列の平均	ds.mean()
正規表現に文字列全体をケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ゼロ埋めした３二ビット整数型のベクトルを作る	np.zeros(要素数, dtype=np.int16)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
データフレームのリスト列を千の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
ライトサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
プラムにヒストグラムの色を変更する	plt.hist(データ列, color='plum')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
配列の列ごとの最小を計算する	np.min(aArray, axis=0)
ライムグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: グラフの色をピーチパフにセットする	color = 'peachpuff'
文字列のケースを入れ替える	s.swapcase()
リストと配列についての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
option: グラフの色をパウダーブルーに変更する	color = 'powderblue'
nーn2	n - n2
option: 色をタンに設定する	color = 'tan'
横棒グラフをマゼンタ色を使って描画する	plt.barh(データ列x, データ列y, color='magenta')
赤い丸マーカーをリストとイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームを'A'列でソートする	df.sort_values(by='A')
option: 色をバイオレットにセットする	color = 'violet'
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
option: 暗い赤を用いる	color = 'darkred'
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
グラフの横軸にキャプションを付ける	plt.xlabel('x軸ラベル')
今日のローカルな日付	datetime.date.today()
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
リストを小さい方からソートする	sorted(aList, reverse=True)
グラフの縦横の比率を等しくする	plt.axis('equals')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
xが1もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
オブジェクトが組の要素でない	element not in aTuple
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
文字列をバイト配列に変換する	bytearray(s)
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
集合の全要素が別のセットに含まれるか調べる	aSet.issubset(aSet2)
文字列は片仮名か調べる	('ァ' <= ch <= 'ン')
option: 色をペールグリーンに設定する	color = 'palegreen'
プラットホームはリナックスか	sys.platform.startswith('linux')
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
数値を黄色化する	f'\033[33m{value}\033[0m'
教師データを用いてモデルを学習する	model.fit(説明変数, 目的変数)
パレットトルコイズ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
浮動小数点数を実数で割った余り	x % y
ビスクにヒストグラムの色を指定する	plt.hist(データ列, color='bisque')
JSONフォーマットのファイル入力を辞書に変換する	json.load(fin)
option: フクシア色を用いる	color = 'fuchsia'
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
多次元データを主成分分析として濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
縦棒グラフを青紫色として描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームの列を破壊的に消す	df.drop(column, axis=1, inplace=True)
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
日付データにn秒分、足す	aDate + datetime.timedelta(seconds=n)
白いグリッド線を引く	plt.grid(color='w')
線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ダークオレンジ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
ヒストグラムにカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
折れ線グラフのポイント印を赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
データ列を中央値で分割する	pd.qcut(ds, 2)
三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
プラム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
ユニークな値を要素とする配列	np.unique(aArray)
オブジェクトのクラスを見る	type(obj)
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
両端キューを空にする	deq.clear()
日付データが火曜日	aDate.weekday() == 1
列を2回あわせた直積	itertools.product(iterable, repeat=2)
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
option: 小麦色色を使う	color = 'wheat'
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
option: 色をシアンに設定する	color = 'cyan'
空のセットを使う	set()
eの乗数を求める	math.exp(x)
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
シーケンスをベクトルに変換する	np.array(iterable)
赤い実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
タプルの要素を小さい順にソートする	sorted(aTuple, reverse=True)
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
nとn2の商	n / n2
折れ線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
折れ線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
イテラブルのイミュータブルな集合を使う	frozenset(iterable)
データフレームをグループ化し各列に対し最大値を計算する	df.groupby(column)[column2].max()
現在のモジュール	sys.modules[__name__]
主成分分析を使って濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
散布図の左三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
リストとリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのリストカラムの空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
コマンドフラグの状態	sys.flags
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
中央値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].median())
option: 淡い茶色に色を設定する	color = 'tan'
昇順にデータフレームを'A'列と'B'列によってソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: ゲインズボロ色を用いる	color = 'gainsboro'
データフレームの指定されたカラムを配列に変換する	df[column].values
折れ線グラフの色をシスルにセットする	plt.plot(データ列x, データ列y, color='thistle')
菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ヒストグラムをスカイブルー色を使って描画する	plt.hist(データ列, color='skyblue')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
データフレームのリスト列の中央値	df[aList].median()
３変数の最小値	min(x, y, z)
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
本日が土曜日	datetime.datetime.today().weekday() == 5
配列とイテラブルについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ピーチパフ色を使う	color = 'peachpuff'
最大最小値でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ファイルから1文字、読む	f.read(1)
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
文字列の最後	s[-1]
Pandasで書式fmtを使ってデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
中央値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].median())
散布図に赤い△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
双方向キューの中に要素が含まれてるか調べる	element in deq
n引くn2	n - n2
タプルの全エントリをクリアする	aDict.clear()
等しい量になるようにリストをビン数nを用いてビンニングする	pd.qcut(aList, n)
'A'列の値ごとにデータフレームを分類して、列挙する	[(name, group) for name, group in df.groupby('A')]
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
option: シアンにグラフの色を指定する	color = 'cyan'
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
配列を円グラフにする	plt.pie(データ列, startangle=90)
改行なしに二つの実行結果を表示する	print(value, value2, end='')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
データフレームのリストカラムの欠損値を平均値に指定する	df[aList].fillna(df[aList].mean())
イテラブルとリストについて散布図を描いて、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
文字列がリストの要素でないかどうか	element not in aList
データフレームのカラムのどの値が頻出か見る	df[col].mode()
散布図に赤いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
実数を複素数に変換する	complex(x)
option: バイナリモードに設定する	mode = 'rb'
日付時刻データからn分減らす	aDatetime - datetime.timedelta(minutes=n)
イテラブルと列の直積	itertools.product(iterable, iterable2)
option: フォントの色を青紫に変更する	color = 'violet'
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
データ列をValueMapで置換する	ds.replace(ValueMap)
データフレームの列をカテゴリデータにする	df[col].astype(object)
ヒストグラムを黄色色を用いて描画する	plt.hist(データ列, color='yellow')
棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ラベンダー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
ヒストグラムをピンク色を使って描画する	plt.hist(データ列, color='pink')
文字列が全て数字か	s.isdigit()
option: グリーンを使う	color = 'green'
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
箱髭図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
実数のn乗して数による余り	pow(x, n, y)
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
二つのデータフレームを列をキーとして内部ジョインする	pd.merge(df, df2, on=column, how='inner')
線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
文字列はタイトルケース	s.istitle()
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
棒グラフをオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='orange')
平均線付きボックスチャートを描画する	plt.boxplot(データ列, meanline=True)
タプルのキー一覧	list(aDict)
折れ線グラフのバツマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
英字の大文字を全部見る	string.ascii_uppercase
リストの末尾を使う	aList[-1]
現在が何曜日か知る	datetime.datetime.today().weekday()
プロットの描画で淡く色を使用する	sns.set(pallete='muted')
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
マッピングからキーの値か、もしくは要素を得る	aDict.get(key, element)
カウンタのキーをひとつ増やす	aCounter[element] += 1
ヒートマップでデータフレームのリストで指定されたカラムの相関行列を描画する	sns.heatmap(df[aList].corr())
文字列リストにイテラブルを変換して、部分文字列で連結する	sub.join(map(str, iterable))
データ列の折れ線プロットを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
列を集合に追加更新する	aSet.update(iterable)
グラフを論文用に変更する	sns.set(context='paper')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ダークターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
横棒プロットの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
勾配ブースティングを用いて回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームを小さい順に破壊的に'A'列と'B'列を用いてソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
プロットの見栄えをいい感じに設定する	sns.set()
新しいガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
文字列が文字列リストにある	s in aStringList
option: シャルトリューズ色を使う	color = 'chartreuse'
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか確認する	df[aList].kurt()
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
イテラブルから多重集合を作成する	collections.Counter(iterable)
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
散布図のマーカーを三角印にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームの列の文字列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
平均と分散でデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
配列の最大値を計算する	np.max(aArray)
茶色色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームを使用する	import pandas as pd
連立方程式の解を計算する	sympy.solve([e, e2])
option: バイナリモードを使用する	mode = 'rb'
無限にカウントアップする	itertools.count()
横棒プロットを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
文字列が数値かどうか調べる	s.isnumeric()
折れ線グラフをホワイト色として描画する	plt.plot(データ列x, データ列y, color='white')
浮動小数点数を複素数にする	complex(x)
折れ線グラフをラベンダーブラッシュ色を用いて描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
小数点数の逆正弦	math.asin(x)
文字列を左トリムする	s.lstrip()
nがn2以上か	n >= n2
小さい順にデータフレームを'A'列によってソートする	df.sort_values(by='A', ascending=True)
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
ISO書式の文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
項目名がマップに存在するかどうか調べる	key not in aDict
浮動小数点数に数を加算する	x + y
カラムを千の位で丸めて、整数にする	ds.round(-3).astype(int)
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
option: 色をオールドレースに変更する	color = 'oldlace'
ミディアムスプリンググリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列中にひとつでも非大文字が含まれるか	any(not c.isupper() for c in s)
xが-9以上9以下か調べる	-9 <= x <= 9
0から始まる無限リスト	itertools.count()
▲印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
最初のプログラムを書く	print('Hello World')
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
学習データのバージョンを知る	version = 'wcce2022-0.1'
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
表データの指定されたカラムを配列として抽出する	df[column].values
二つのデータフレームを列'A'と列'B'をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
各列毎にデータフレームをグループ化し、、列の個数を求める	df.groupby(column)[column2].count()
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
predicateFuncが真とならないイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
辞書からカウンタを作る	collections.Counter(aDict)
データフレームのカラムのNaNを直後の値で埋める	df[col].fillna(method='bfill')
データフレームを表示するとき折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
キューをリストに変換する	list(deq)
整数個からk個取り出した場合の順列の総数	math.perm(n, k)
リストと配列について散布図を描画して、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
ケンドール相関係数としてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='kendall')
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
配列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
Pandasで、数値時刻のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
エンコーディングを調べる	sys.getdefaultencoding()
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
データフレームを列名リストに集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームから指定されたデータ型のカラム名の一覧	df.select_dtypes(型).columns
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
実数とyの斜辺を求める	math.hypot(x, y)
散布図の丸印を赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
2つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
L2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ダークシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
改行なしに2つの文字列を出力する	print(value, value2, end='')
option: グラフの色をオレンジに設定する	color = 'orange'
小数点以下3桁までデータフレームをJSONLファイルに保存する	df.to_csv(filename, float_format='%.3f')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
日付データの月を求める	aDate.month
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
データフレームを昇順に２つの列で整列する	df.sort_values(by=['A', 'B'], ascending=True)
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
集合をイミュータブルに変換する	frozenset(aSet)
option: ダークグレーにフォントの色を変更する	color = 'darkgrey'
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
データフレームのカラムの曜日	df[col].dt.weekday_name
データフレームを各列毎に分類して、列の平均値を求める	df.groupby(column)[column2].mean()
キューに要素をプッシュする	deq.append(element)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
ダークオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
ヒストグラムの色を黄緑に指定する	plt.hist(データ列, color='chartreuse')
多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
エラーなくセットから要素を除く	aSet.discard(element)
オブジェクトのフィールドを削除する	delattr(obj, プロパティ名)
線グラフの色をサンディーブラウンにする	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
0から始まる無限な数列を得る	itertools.count()
データフレームのカラムを1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
データ列をn個にビン分割する	pd.cut(ds, n)
列を文字列リストに変換して、タブで一つにする	'\t'.join(map(str, iterable))
プロットに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
列のNaNを直後の値で埋める	ds.fillna(method='bfill')
データフレームの列の中にいくつが存在するか数える	df[col].isin([value]).sum()
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
行列が何のデータ型か調べる	aArray.dtype()
縦棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
データ列の値を正規表現patternでreplに置換する	ds.replace(pattern, repl, regex=True)
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
二つの列によってデータフレームをまとめたグループ	df.groupby(['A', 'B'])
データフレームの数値を一度に丸める	df.round()
変数を黄色にする	f'\033[33m{value}\033[0m'
横棒グラフをプラム色を使って描画する	plt.barh(データ列x, データ列y, color='plum')
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
エクセルデータファイルのn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
データ列とリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
データ列の50パーセンタイル	ds.median()
データ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
option: ロイヤルブルーにグラフの色を指定する	color = 'royalblue'
両端キューが空	len(deq) == 0
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
日付データが日付データより前か確認する	aDate < aDate2
降順にデータフレームを二つの列によって破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
リストを縦軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームの列と列のヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
rgbに横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
折れ線グラフに黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データ列のpercentパーセンタイル	ds.quantile(percent/100)
文字列の両端から空白と改行を取り除く	s.strip()
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームを列の値でNaNを含めて集約する	df.groupby(column, dropna=False)
縦軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
option: カーキ色を使用する	color = 'khaki'
散布図をペールグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='palegreen')
列をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
nが一桁の整数か	-9 <= n <= 9
文字列モジュールをインポートする	import string
ヒストグラムの色をライトスチールブルーにセットする	plt.hist(データ列, color='lightsteelblue')
切片なしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
アルファベットの文字列	string.ascii_letters
インタプリタの再帰の最大回数を調べる	sys.getrecursionlimit()
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
データ列の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
リストの最後にリストを加える	aList.extend(aList2)
文字列をカンマで区切り、列挙する	s.split(',')
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
最大最小から行列	np.linspace(最小値, 最大値, 要素数)
青い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
バイナリ書き込み用にファイルパスをオープンする]	open(filepath, mode='wb')
グリッドの線スタイルを点線に変更する	plt.grid(linestyle='dotted')
predicateFuncがTrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ライトシアン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
option: モカシン色を使用する	color = 'moccasin'
アクア色でヒストグラムを描画する	plt.hist(データ列, color='aqua')
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
整数nを2進表現にする	bin(n)
折れ線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームを複数の列によって小さい順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
イテラブルと列をチェインする	itertools.chain(iterable, iterable2)
データ列の欠損値をxで埋める	ds.fillna(x)
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
プロットを明るくする	sns.set(pallete='bright')
プロットの色を色差別なくする	sns.set(pallete='colorblind')
一点鎖線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ミディアムオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データ列とリストについての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
２つのリストをスラッシュで区切ってプリントする	print(value, value2, sep='/')
正規表現に文字列の先頭で大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
ディムグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データ列の変化を赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームの指定された列名一覧の列を抽出する	df[columns]
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
辞書からカウンタを用意する	collections.Counter(aDict)
データフレームのリストカラムを小数点以下n桁で四捨五入する	df[aList].round(n)
部分文字列を文字列の後ろから探す	s.rfind(sub)
ひとつ飛ばしでタプルを取り出す	aTuple[::2]
rgbの左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
nがリストのどれかかどうか	n in aList
部分文字列が文字列中に含まれないか調べる	sub not in s
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
イテラブルと列をペア化する	itertools.zip_longest(iterable, iterable2)
散布図のクロス印の線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
点線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
配列の累積和を求める	np.cumsum(aArray)
option: フォントの色をダークオリーブグリーンにする	color = 'darkolivegreen'
ケースを無視して文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
サーモン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: スタイルを一点鎖線に設定する	linestyle = 'dashbot'
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームの列とカラムの相関行列	df[[column, column2]].corr()
最大値・最小値で乱数を計算する	random.randint(最小値, 最大値)
データフレームを二つの列でグループ化し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
散布図をフローラルホワイト色として描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
データフレームを各列毎にグループ化し、列の平均値を計算する	df.groupby(column)[column2].mean()
データフレームのNaNをxに変更する	df.fillna(x)
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
nがn2よりも大きいかどうか調べる	n > n2
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: マーカーを星に指定する	marker = '*'
option: 欠損値は無視する	dropna = True
グラフで使える色の一覧を知る	matplotlib.colors.cnames
文字列の終了位置より前に部分文字列が存在するか調べる	s.find(sub, 0, end) != -1
option: マーカーを左三角に変更する	marker = '<'
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
マッピングの項目名とその値を列挙する	aDict.items()
データフレームのヒストグラムを横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名')
書き込むCSVファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
組のn番目以降の部分を抽出する	aTuple[n:]
三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
列によってデータフレームをソートして、新しい行を振り直す	df.sort_values(columns).reset_index()
データフレームを表示するとき、小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
カウンタから最頻出な項目の件数を算出する	aCounter.most_common()[1]
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
カラムの欠損値を直前の値に設定する	ds.fillna(method='ffill')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
データフレームの指定された４列だけ抽出する	df[[column, column2, column3, column4]]
オブジェクトにフィールドが存在するか	hasattr(obj, プロパティ名)
変数が無限大に近づく場合、数式の極限値を求める	sympy.limit(e, z, oo)
表データの列と列のヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
option: フォントの色を赤に設定する	color = 'red'
列の中にいくつ欠損値が存在するかカウントする	ds.isna().sum()
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
算術計算ライブラリをインポートする	import math
リストとリストを接続する	aList + aList2
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
散布図に四角印を用いる	plt.scatter(データ列x, データ列y, marker='s')
日付データが金曜日か確認する	aDate.weekday() == 4
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
カラムはどれだけ、分散しているか調べる	ds.var()
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムと勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ロバストな単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
nがn2で割り切れる	n % n2 == 0
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
赤いダイアモンドマーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: グラフの色をミントクリームに設定する	color = 'mintcream'
折れ線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列x, データ列y, color='blanchedalmond')
列のどの値が頻出か確認する	ds.mode()
リネン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
横棒グラフをアンティークホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
データフレームを表示するとき、表示する行数をnに設定する	pd.set_option('display.max_rows', n)
リストが空か調べる	len(aList) == 0
マッピングから最後の値をポップする	aDict.popitem()
option: ライトイエローにフォントの色を設定する	color = 'lightyellow'
モジュールとして自分自身をを得る	sys.modules[__name__]
文字列を新しい文字列によって全て置き換える	s.replace(sub, newsub)
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
アルファベットが文字列内に含まれるか調べる	any(c.isalpha() for c in s)
整数nの二進数表現を見る	bin(n)
グラフの描画でパステル調に色を使用する	sns.set(pallete='pastel')
ファイルのフォルダ名を使う	os.path.dirname(filepath)
データフレームのカラムが何日か見る	df[col].dt.day
option: マーカーを右三角に変更する	marker = '>'
マッピングを階層化マップに変換する	collections.ChainMap(aDict)
文字列の中でパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s)
リストの最初	aList[0]
折れ線グラフに凡例をつける	plt.plot(データ列x, データ列y, label='ラベル')
要素が集合に含まれるか調べる	element in aSet
データフレームの内で、列に重複があるか見る	df.duplicated(subset=column)
データフレームのstart行目からend行目まで抽出する	df[start:end]
データフレームを列名リストの値によってまとめたグループ	df.groupby(columns)
ファイルのファイル名	os.path.basename(filepath)
データフレームのカラムを千の位で丸めて整数型にする	df[col].round(-3).astype(int)
両端キューの最後のデータ	deq[-1]
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
配列と数列についての散布図に▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
ペールグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
option: ブランチドアーモンドを使う	color = 'blanchedalmond'
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
白色で実行結果を表示する	print(f'\033[37m{value}\033[0m')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
option: グリーンイエロー色を使う	color = 'greenyellow'
オーキッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
読み込みモードでファイルパスを開いて]fとする	f = open(filepath, mode='r')
折れ線グラフに青い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
線形回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームのリスト列の中に文字列がある	df[aList].isin([value])
データフレームの列が正規分布からどの程度尖っているか見る	df[col].skew()
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
文字列は数値	s.isnumeric()
列を累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
option: 線の種類を実線に変更する	linestyle = 'solid'
カウンタの要素数を見る	len(aCounter)
option: シエナ色を使用する	color = 'sienna'
データフレームの列のユニークな値の個数	df[col].nunique()
文字列の中の複数行対応として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
引数から名前付きタプルをインスタンス化する	C._make(パラメータ)
双方向キューから最初の要素を取り除く	deq.remove(element)
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
option: やわらかい青を使用する	color = 'cornflowerblue'
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
縦棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: 印を大バツに変える	marker = 'X'
データフレームを関数の値によってまとめたグループ	df.groupby(関数)
データフレームの中の欠損値を削除する	df.dropna()
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
文字列を部分文字列で分割して文字列リストに変換する	s.split(sub)
データフレームのカラムのNaNをメディアンに設定する	df[col].fillna(df[col].median())
列によってデータフレームを並べて更新する	df.sort_values(by=column, inplace=True)
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
option: 未入力値を含めない	dropna = True
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
option: グラフの色を白に設定する	color = 'white'
y座標の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
両端キューが空でないか調べる	len(deq) != 0
日付時刻データをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
散布図を赤い下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='r')
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
データフレームの列がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
ベクトルの行ごとの標準偏差	np.std(aArray, axis=1)
配列の変遷を色付きの実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図をオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orchid')
文字列の先頭で正規表現にASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
小数点数が無限大か調べる	math.isinf(x)
リストと数列についての散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームからn行、サンプリングする	df.sample(n)
縦棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
オブジェクトが浮動小数点数か調べる	isinstance(obj, float)
折れ線グラフの色をダークオリーブグリーンにセットする	plt.plot(データ列x, データ列y, color='darkolivegreen')
モデルの正確さを計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
文字列の大文字と小文字を逆にする	s.swapcase()
データフレームはどれだけ、分散しているか見る	df.var()
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
option: EUCを用いる	encoding = 'euc_jp'
数のn乗の実数剰余を算出する	pow(x, n, y)
辞書の項目名に対応した値	aDict.get(key)
文字列の左側から空白を取り除く	s.lstrip(' ')
データフレームのNaNがある部分に色を付ける	df.style.highlight_null()
option: 文字列をセパレータで使う	sep = s
xの小数点以下'2'桁まで表示する	print(':.2f'.format(x))
文字列を隔離する	sys.intern(s)
オリーブ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
黄色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
正規表現モジュールをインポートする	import re
日付データが金曜日	aDate.weekday() == 4
リストと数列についての散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの未入力値が含まれる箇所に	df.style.highlight_null()
データフレームをValueMapで一度に置換する	df.replace(ValueMap)
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
折れ線グラフをミディアムシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
棒グラフをゴールド色を使って描画する	plt.bar(データ列x, データ列y, color='gold')
ダークオリーブグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
ビン数nで配列を等量で分割する	pd.qcut(aArray, n)
option: 印を左三角に指定する	marker = '<'
実行結果を水色にする	f'\033[36m{value}\033[0m'
ラジアンの角度	math.degrees(x)
option: オールドレース色を使う	color = 'oldlace'
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: 星印を使う	marker = '*'
集合からエラーなく要素を除去する	aSet.discard(element)
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
アイボリー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
データ列の中に存在する文字列の合計を数える	ds.isin([value]).sum()
データフレームのカラムの欠損値を直前の値に指定する	df[col].fillna(method='ffill')
データフレームを各列毎に集計し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
小数点以下の表示精度を設定する	pd.set_option('precision', n)
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
option: アンティークホワイト色を使用する	color = 'antiquewhite'
文字列内にひとつでも大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
option: フォントの色を暗い赤に指定する	color = 'darkred'
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
整数nの八進表現を見る	oct(n)
データフレームのリストカラムの欠損値を直前の値にセットする	df[aList].fillna(method='ffill')
多次元データをMSDで淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ホットピンクにヒストグラムの色を指定する	plt.hist(データ列, color='hotpink')
データフレームのリストカラムの欠損値を平均に設定する	df[aList].fillna(df[aList].mean())
点線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
option: シアンを使う	color = 'cyan'
折れ線グラフのポイント印の大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
データ列の曜日の名前	ds.dt.weekday_name
リストとデータ列の散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
データ列間の決定係数を算出する	sklearn.metrics.r2_score(データ列, データ列2)
データフレームのカラムの中に文字列が存在するか調べる	df[col].isin([value])
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
データフレームを各列毎にグループ化し、、列の合計を計算する	df.groupby(column)[column2].sum()
ヒストグラムをナバホホワイト色として描画する	plt.hist(データ列, color='navajowhite')
rgbのバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
日付時刻データの年数	aDatetime.year
リストと数列について散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
アルファベットの小文字を全部求める	string.ascii_lowercase
実数とyの斜辺	math.hypot(x, y)
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
配列の列ごとの合計値	np.sum(aArray, axis=0)
文字列の終了位置より前に部分文字列が含まれないかどうか調べる	s.find(sub, 0, end) == -1
ターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
二つのリストから辞書	dict(zip(aList, aList2))
サドルブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='saddlebrown')
散布図の▼マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
option: ダークカーキに色を設定する	color = 'darkkhaki'
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ヒストグラムをシスル色を使って描画する	plt.hist(データ列, color='thistle')
辞書を浅く複製する	dict(aDict)
文字列の開始位置より後に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
円プロットを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
３自然数の最大公約数	math.gcd(n, n2, n3)
縦棒プロットをプロットしてラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
クラス分類をRANSACを用いてする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのインデックスがnの行を選択する	df.loc[n]
ヒストグラムをアリスブルー色を使って描画する	plt.hist(データ列, color='aliceblue')
ユニコードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
シーケンスから配列を作成する	np.array(iterable)
predicateFuncが真となるリストの要素	itertools.dropwhile(predicateFunc, iterable)
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
横棒グラフをシャルトリューズ色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
y座標の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
ファイルパスのファイル名	os.path.basename(filepath)
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
リストと数列についての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームのNaNを最小値に設定する	df.fillna(df.min())
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
複数の列の値によってデータフレームをグループ化し記述統計量を求める	df.groupby(columns).describe()
配列と配列について散布図をプロットし、、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
グラフの色を全般的に暗くする	sns.set(pallete='dark')
データフレームのリスト列の中にが存在する	df[aList].isin([value])
赤いグリッド線を引く	plt.grid(color='r')
nがn2で割り切れないか確認する	n % n2 != 0
リストとリストについて散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列の右端から改行を除く	s.rstrip('\n')
折れ線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
オブジェクトが無限に繰り返す列	itertools.repeat(element)
option: グラフの色をピーチパフに指定する	color = 'peachpuff'
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ロバストな重回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
2つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
散布図の丸印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームから列を三つだけ選択する	df[[column, column2, column3]]
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: フォントの色をネイビーに指定する	color = 'navy'
二つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフにクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
リストからベクトルを作成する	np.array(aList)
線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームのリスト列の欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
辞書に項目名が存在しているか調べる	key in aDict
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームの列を並べて箱ヒゲ図にする	plt.boxplot([df['カラム'], df['カラム']])
option: グラフの色を白に変更する	color = 'white'
ポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.')
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの中にと文字列が含まれる	df.isin([value, value2])
option: 平均を加える	showmeans = False
双方向キュー中の値のインデックスを使う	deq.index(element)
タプルは全て真か判定する	all(aTuple)
棒グラフをダークグレー色を使って描画する	plt.bar(データ列x, データ列y, color='darkgray')
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
グラフの縦横を指定する	plt.figure(figsize=(横幅, 高さ))
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
回帰分析をSDGで行う	model = sklearn.linear_model.SGDRegressor()
option: グラフの色をオーキッドに設定する	color = 'orchid'
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
プロットの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
データフレームのリスト列の中の欠損値の合計をカウントする	df[aList].isna().sum()
ファイルパスのファイル名を見る	os.path.basename(filepath)
コマンドラインフラグの状態	sys.flags
'A'列によってで表データを降順に並べ直す	df.sort_values(by='A', ascending=False)
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
データフレームを列によって降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
改行で文字列を区切り、文字列リストに変換する	s.splitlines()
option: オーキッドにグラフの色を設定する	color = 'orchid'
折れ線グラフをミディアムシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
nが正の整数か調べる	n > 0
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
データフレームの列と列の各列間の相関係数を算出する	df[[column, column2]].corr()
実数の小数点以下を丸める	round(x)
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
辞書に辞書の項目を更新する	aDict.update(aDict2)
棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
空白文字	' '
線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
ヒストグラムをネイビー色を使って描画する	plt.hist(データ列, color='navy')
コーパスのバージョンを知る	version = 'wcce2022-0.1'
カウンタのKトップを列挙する	aCounter.most_common(k)
既存の配列をベースに全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
イテラブルを文字列リストに変換して'改行で連結する	'\n'.join(map(str, iterable))
実数が無限大か調べる	math.isinf(x)
リストの最後から要素を取り出す	aList.pop()
散布図の下三角印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
変数を青色で表示できる文字列にする	f'\033[34m{value}\033[0m'
データ列とリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
最初のカテゴリーを無視してデータフレームの列をダミー変数にする	pd.get_dummies(df[column], drop_first=True)
リストと配列について散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
シーケンスを累加したイテラブルを求める	itertools.accumulate(iterable)
行列の列ごとの平均値を計算する	np.mean(aArray, axis=0)
option: フォントの色をゴールデンロッドに設定する	color = 'goldenrod'
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームを列によってグループ化してそれぞれのグループ毎の最大値を計算する	df.groupby(column).max()
ファイルパスを読み込みモードでオープンする]	open(filepath, mode='r')
グラフに補足を追記する	plt.legend(['凡例A', '凡例B'])
ディムグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: 白を使う	color = 'white'
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
カラムの分散を求める	ds.var()
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
線グラフの色をロージーブラウンに指定する	plt.plot(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
リストをn回、結合する	aList * n
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームは正規分布からどれだけ、歪んでいるか見る	df.kurt()
option: 色をデピンクにセットする	color = 'deeppink'
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
データフレームの上n行	df.head(n)
データフレームのそれぞれのグループの最大値	df.groupby(column).max()
ファイルパスのセパレータ記号を使用する	os.sep
データフレームを関数でまとめたグループ	df.groupby(関数)
２変数の最大値	max(x, y)
データフレームのカラムの中にと文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
散布図の△印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
option: ホワイトスモークにフォントの色を設定する	color = 'whitesmoke'
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
日付時刻データが火曜日	aDatetime.weekday() == 1
カタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
イテラブルをカウンタにする	collections.Counter(iterable)
折れ線グラフを三角印を使用して描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムと勾配ブースティングでクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
ナバホホワイト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
日付データの年数	aDate.year
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのリストカラムの中にと文字列が存在するか調べる	df[aList].isin([value, value2])
NULLに等しい値	None
データフレームから破壊的に重複したデータを削除する	df.drop_duplicates(inplace=True)
折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
option: グラフの色をミディアムオーキッドに変更する	color = 'mediumorchid'
データ列の欠損値を第二四分位数で埋める	ds.fillna(ds.median())
スタックの最後に要素を追加する	deq.append(element)
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
カテゴリ列で色付けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
本日の日付時刻	datetime.datetime.today()
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
二つのカウンタのいずれかに含まれる値	aCounter | aCounter2
文字列をUTF8でバイト列にする	s.encode(encoding='utf-8', errors='strict')
レベッカパープル色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
リストとリストについての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
実数は無限大か調べる	math.isinf(x)
option: マーカーを丸に指定する	marker = 'o'
散布図の右三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データ列を四捨五入する	ds.round()
JSONファイルの入力を辞書に変換する	json.load(fin)
オレンジレッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
等量で分割数nで配列をビン分割する	pd.qcut(aArray, n)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
まとめてreplにデータフレームの値を正規表現で変更する	df.replace(pattern, repl, regex=True)
データフレームをグループ化し、列に対し最小値を求める	df.groupby(column)[column2].min()
リストとリストについて散布図を描いて、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: データ型としてブール型を用いる	dtype = np.int32
データフレームのカラムのNaNを最小値に変更する	df[col].fillna(df[col].min())
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
列の中にいくつ欠損値があるか求める	ds.isna().sum()
数列と配列について散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
辞書をインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのカラムの日を使う	df[col].dt.day
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
配列の差を求める	aArray - aArray2
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
Pandasのバージョンを見る	print(pd.__version__)
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
現在の月数	datetime.datetime.today().month
option: アクアに色を設定する	color = 'aqua'
赤い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
ヒストグラムをゴールデンロッド色として描画する	plt.hist(データ列, color='goldenrod')
データフレームの列のどの値が最も現れるか見る	df[col].mode()
データフレームをインデックスで昇順にソートする	df.sort_index(ascending=True)
横棒グラフをオレンジ色として描画する	plt.barh(データ列x, データ列y, color='orange')
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
水色で数値を表示する	print(f'\033[36m{value}\033[0m')
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
改行	'\n'
実数の双曲線正接の逆数	math.atanh(x)
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
列とイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
option: 改行コードを動作環境依存に変更する	newline = None
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
option: 淡い茶色色を用いる	color = 'tan'
リストとリストについて散布図を描画し、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
イテラブルとデータ列について散布図を描画してマーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
安全に文字列の接尾辞から部分文字列を除く	s.removesuffix(sub)
文字列はPythonのキーワード	keyword.iskeyword(s)
コーンズシルクにヒストグラムの色を変更する	plt.hist(データ列, color='cornsilk')
双方向キューのデータを逆に並べ直す	deq.reverse()
x,yの複素数	complex(x, y)
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
データフレームの列の要約統計量を計算する	df[col].describe()
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
イテラブルからベクトルを作る	np.array(iterable)
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
数値をパラメータについて微分する	sympy.diff(e, z)
データフレームのNaNを直後の値で埋める	df.fillna(method='bfill')
文字列全体が正規表現に大文字・小文字を無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
黒いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: グラフの色をグレーに設定する	color = 'grey'
データフレームから型リストデータ型の列を抽出する	df.select_dtypes(include=typeList)
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
プロットの全般的にパレットを色差別なくする	sns.set(pallete='colorblind')
option: 改行コードをUNIXに設定する	newline = '\n'
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
二つの数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
リストとリストの散布図をプロットして左三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: ミディアムターコイズを使う	color = 'mediumturquoise'
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
配列と配列についての散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームの文字列をNaNにする	df.replace(s, np.nan)
新しいロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
カテゴリで色分けして、データフレームの全列の散布図をプロットする	sns.pairplot(df, hue='カテゴリ列')
インディアンレッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
十六進数文字列をbytesizeバイトのバイナリにする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
赤い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
紺色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームを二つの列によって整列して更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: 箱髭図を水平方向にする	vert = False
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
二つの文字列を表示する	print(value, value2)
組のn番目からn2番目まで	aTuple[n:n2]
線グラフの色をピンクに変更する	plt.plot(データ列x, データ列y, color='pink')
変数がマイナス無限大に近づくとき数式の極限値を算出する	sympy.limit(e, z, -oo)
ダークグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ヒストグラムの色をミントクリームにセットする	plt.hist(データ列, color='mintcream')
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
数式を展開する	sympy.expand(e)
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
ケンドール相関係数でデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='kendall')
ヒストグラムを用いてデータ列を描画する	plt.hist(データ列)
データフレームのどの値が頻出か見る	df.mode()
散布図を丸印で描画する	plt.scatter(データ列x, データ列y, marker='o')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
データフレームを表示するとき、表示できる最大行数を増やす	pd.set_option('display.max_rows', n)
文字列を空白で分割して文字列リストにする	s.split()
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
データフレームのカラムの中にいくつ欠損値が含まれるか数える	df[col].isna().sum()
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
データ列は何年か見る	ds.dt.year
nがn2未満もしくはn3以上か調べる	n < n2 or n >= n3
データフレームの列のpercent分位数を求める	df[col].quantile(percent/100)
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
いつまでもnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
データフレームのn行目を取り除く	df.drop(n, axis=0)
棒プロットの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
イテラブルを文字列に変換して部分文字列で結合する	sub.join(map(str, iterable))
ディープスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
折れ線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
文字列中にひとつでも非アルファベットが含まれるか確認する	any(not c.isalpha() for c in s)
破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
縦棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
両端キューの先頭	deq[0]
散布図に黒い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列がカタカナ	('ァ' <= ch <= 'ン')
データ列の一意な要素数	ds.nunique()
実数のn乗して実数による余り	pow(x, n, y)
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
数列とリストの散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ファイルのファイルサイズ	os.path.get_size(filepath)
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
列の集合を作成する	set(iterable)
辞書の値に要素が含まれていないか調べる	element not in aDict.values()
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: 色をコーラルにする	color = 'coral'
分類モデルをあてはめる	model.fit(説明変数, 目的変数)
デックのn番目を使う	deq[n]
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
折れ線グラフに黒い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列の右側から部分文字列を除く	s.rstrip(sub)
赤い点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データ列が何年か見る	ds.dt.year
列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
データフレームのカラムの値を正規表現patternでreplに置換する	df[col].replace(pattern, repl, regex=True)
整数nがセットのどれか	n in aSet
パターンを事前に複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ひとつでも小文字が文字列内に含まれるか調べる	any(c.islower() for c in s)
列によってデータフレームを整列する	df.sort_values(by=column)
英文字から一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
グループ化してデータフレームの散布図を横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
option: エンコーディングをUTF8に変更する	encoding = 'utf-8'
ファイルを開き]、書き込みストリームを見る	open(filepath, mode='w')
カウンタを少ない方から列挙する	aCounter.most_common()[::-1]
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
アルファベットの小文字を全て使う	string.ascii_lowercase
折れ線グラフの右三角印を赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
option: マーカーの色を変える	markerfacecolor = '#800080'
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
英文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
紺碧色で線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
マッピングの項目数	len(aDict)
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
option: フォントの色を耐火レンガに指定する	color = 'firebrick'
nが奇数	n % 2 == 1
散布図をアイボリー色を用いて描画する	plt.scatter(データ列x, データ列y, color='ivory')
データフレームを'A'列によって並べ、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
option: 上三角印を描画する	marker = '^'
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データ列の折れ線プロットをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
ピンク色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
グラフを画面用に設定する	sns.set(context='notebook')
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
キューの上限	deq.maxlen
カウンタの文字列のカウントを使う	aCounter[element]
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
リストとリストについての散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
最小値でデータフレームの未入力値を埋める	df.fillna(df.min())
option: 色のアルファ値を設定する	alpha = 0.5
日付時刻データが日曜日か確認する	aDatetime.weekday() == 6
nを二進表現に変換する	bin(n)
３つ並べてリストをヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ファイルから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
オリベドラブ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームのカラムのNaNを第二四分位数に指定する	df[col].fillna(df[col].median())
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
折れ線グラフでデータ列の変化を作図する	plt.plot(range(len(データ列)), データ列)
ミントクリーム色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
折れ線グラフを点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: 3二ビット整数型を用いる	dtype = np.int16
nを八進リテラルにする	oct(n)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
変数を緑色にする	f'\033[32m{value}\033[0m'
t-SNEとして多次元データを淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ISO8601の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
セパレータで文字列を分割して、文字列リストに変換する	s.split(sep)
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: 色をダークスラテグレーに設定する	color = 'darkslategray'
折れ線グラフの色をホットピンクにする	plt.plot(データ列x, データ列y, color='hotpink')
空セット	set()
集合に列を追加する	aSet.update(iterable)
黒いポイントマーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c='k')
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
列によってによってデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
数式を方程式として解く	sympy.solve(e)
横棒グラフをミディアムシアグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ルートのチェーンマップ	collections.ChainMap()
縦棒グラフをドジャーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムの色をネイビーにセットする	plt.hist(データ列, color='navy')
改行を使って文字列を分割する	s.splitlines()
二つのデータフレームをジョインする	pd.merge(df, df2)
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
システム時刻で乱数を初期化する	random.seed()
ファイルからエクセルファイルを読み込む	pd.read_excel(filename)
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
リストを分割数nでビン分割する	pd.cut(aList, n)
文字列の右側から部分文字列を除く	s.removesuffix(sub)
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
配列とリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
option: ブラック色を使う	color = 'black'
option: フォントの色をダークスレートブルーに設定する	color = 'darkslateblue'
数値を変数について微分する	sympy.diff(e, z)
nが何桁か	len(str(n))
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
ヒストグラムを破線にセットする	plt.hist(データ列, linestyle='dashed')
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
散布図に黒い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='k')
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
データフレームを欠損値を含めて列でグループ化する	df.groupby(column, dropna=False)
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
グラフの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
リスト内の要素は全て真	all(aList)
データ列の変化を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
リストと数列について散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
タイムスタンプデータは日付時刻データより後ろか	aDatetime > aDatetime2
リストとリストについての散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
横棒グラフをナバホホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='navajowhite')
option: 書き込み用に設定する	mode = 'w'
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategrey')
実数をn乗する	x ** n
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
データフレームの各次元の大きさを見る	df.shape
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
カウンタの∪演算する	aCounter | aCounter2
散布図を青色を用いて描画する	plt.scatter(データ列x, データ列y, color='blue')
option: フォントの色をスレートブルーに設定する	color = 'slateblue'
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategray')
棒グラフをフクシア色を用いて描画する	plt.bar(データ列x, データ列y, color='fuchsia')
暗い赤色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データ列の中に存在する文字列と文字列の合計を求める	ds.isin([value, value2]).sum()
大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X')
データフレームのカラムの未入力値を平均値に増やす	df[col].fillna(df[col].mean())
データフレームのカラムのNaNを最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
オプションで、標準出力を出力にする	file = sys.stdout
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
散布図に黒いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
パールバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
プロットの背景色を白くする	sns.set(style='whitegrid')
option: 分類木の最大深さを変更する	maxdepth = n
データフレームの列の欠損値を最大値に設定する	df[col].fillna(df[col].max())
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
散布図のバツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
最大長nの双方向キューを作る	collections.deque(maxlen=n)
散布図を赤い丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
オブジェクトがタプルクラスのインスタンスかどうか調べる	isinstance(obj, tuple)
散布図でデータフレームを可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: ターコイズに色を変更する	color = 'turquoise'
データフレームの値をValueMapでまとめて変更する	df.replace(ValueMap)
オリベドラブ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
カウンタの最頻出の文字列	aCounter.most_common()[0]
今日が火曜日か確認する	datetime.datetime.today().weekday() == 1
最後に追加した項目をマッピングからポップする	aDict.popitem()
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
符号付きでnをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
折れ線グラフに左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
文字列の両端から空白を取り除く	s.strip()
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
二つのカウンタの共通する値	aCounter & aCounter2
散布図の印をクロスにする	plt.scatter(データ列x, データ列y, marker='x')
カテゴリで色付けしてに箱ひげ図を用いてデータフレームを見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフを半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
rgbのダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
多次元データを特異値分解を用いて淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
リストとリストについての散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームの各グループごとの標準偏差	df.groupby(column).std()
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
カウンタの正の数だけ残す	+aCounter
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
線グラフをレモンシフォン色を用いて描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線プロットの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
y軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
散布図を赤いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
リストと配列について散布図を描画して、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
折れ線グラフに黒い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
実数から実数を引く	x - y
文字列が全て英字	s.isalpha()
青緑色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
option: スラッシュを区切りで使用する	sep = '/'
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
文字列の先頭から空白を取り除く	s.lstrip()
文字列を全て小文字に変換する	s.lower()
多重集合をシーケンスから作る	collections.Counter(iterable)
カラムの中に文字列と文字列があるか調べる	ds.isin([value, value2])
折れ線グラフの色をフクシアにする	plt.plot(データ列x, データ列y, color='fuchsia')
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
組をひとつ飛ばしで得る	aTuple[::2]
ファイルパスをオープンして]、追加ストリームを求める	open(filepath, mode='a')
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
リストとイテラブルについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
文字列中の小文字を大文字にする	s.upper()
多次元データを特異値分解を用いて淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
変数について数値のインテグラルを計算する	sympy.integrate(e, z)
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
リストのn番目以降の要素を取り出す	aList[n:]
option: マーカーの色をタンにする	markerfacecolor = 'tan'
タプルの項目名の一覧	aDict.keys()
データフレームのリスト列のNaNを最小値に設定する	df[aList].fillna(df[aList].min())
中央値でデータ列の欠損値を埋める	ds.fillna(ds.median())
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
文字列が部分文字列で終了するか調べる	s.endswith(sub)
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
ゴールド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームのカラムで文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
option: 色をスレートブルーに設定する	color = 'slateblue'
データフレームの75パーセンタイル	df.quantile(0.75)
縦棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: 黄緑を使う	color = 'chartreuse'
列をビン分割する	pd.cut(ds, aList)
option: ダークターコイズを使う	color = 'darkturquoise'
ファイルを書き込み用にUTF8を使って開く]	open(filepath, mode='w', encoding='utf-8')
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
データフレームをインポートする	import pandas as pd
ヒストグラムを濃いシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
変数を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
グラフをスライド用に設定する	sns.set(context='talk')
最初のカテゴリーを除いてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
棒グラフをライム色を用いて描画する	plt.bar(データ列x, データ列y, color='lime')
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
option: インディゴを使う	color = 'indigo'
データ列のモード	ds.mode()
数値を黒色にする	f'\033[30m{value}\033[0m'
綺麗なグラフを使用する	import seaborn as sns
データフレームのそれぞれのグループごとの合計を算出する	df.groupby(column).sum()
option: フォントの色をライトグリーンに指定する	color = 'lightgreen'
データフレームのカラムをグループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームの行と列を入れ替える	df.T
縦棒グラフをブランチドアーモンド色を用いて描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
配列とリストの散布図を描画して、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
データ列の折れ線グラフを四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
双方向キュー中の値の数を数える	deq.count(element)
イテラブルから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
配列を2次元1行に変形する	aArray.reshape(1, -1)
option: バイオレット色を使う	color = 'violet'
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
組中の文字列が最初に見つかるインデックスを求める	aTuple.index(element)
データ列の推移を赤い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフの▲マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
'A'列と'B'列によってデータフレームをグループ化し基本統計量を求める	df.groupby(['A', 'B']).describe()
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
データ列の各値が何回出現するか見る	ds.value_counts()
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
既存の行列をベースに全要素が1のベクトル	np.ones_like(aArray)
ナバホホワイトにヒストグラムの色をセットする	plt.hist(データ列, color='navajowhite')
ベクトルの個数を求める	aArray.size
新しい文字列で文字列中のパターンを置き換える	re.sub(pattern, newsub, s)
項目名が辞書に存在するか	key in aDict
二つのオブジェクトは等しい	obj == obj2
文字列の中で大文字・小文字を無視してパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの全カラムを散布図として可視化する	sns.pairplot(df)
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図をシルバー色として描画する	plt.scatter(データ列x, データ列y, color='silver')
線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
表データをインポートする	import pandas as pd
配列から重複を除いた配列を作る	np.unique(aArray)
列の各値が何回出現するか見る	df[col].value_counts()
データフレームを使う	import pandas as pd
カテゴリ列でグループ化して、データフレームの全列の相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
散布図をグリーンイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
平均値と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
リストにリストを追加し、拡張する	aList.extend(aList2)
ライトスレイグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
L1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ヒストグラムを暗い赤色を用いて描画する	plt.hist(データ列, color='darkred')
上位集合	aSet.issuperset(aSet2)
文字列を部分文字列で区切って文字列リストに変換する	s.split(sub)
スラグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
分類モデルの分類精度を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
縦棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
黒い星マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームを列によって小さい順に整列し、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
データフレームのリストカラムの中にいくつ日付データがあるか数える	df[aList].isin([value]).sum()
プロットの描画で色差別なくカラーパレットを用いる	sns.set(pallete='colorblind')
ペルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
箱ひげ図をプロットして平均値を追加する	plt.boxplot(データ列, showmeans=True)
CSVTSVファイルをn番目の列をインデックスにして読み込む	pd.read_csv(filename, index_col=n)
２つの数値をコロンで区切って表示する	print(value, value2, sep=':')
option: パールゴールデンロッドに色を指定する	color = 'palegoldenrod'
文字列の終了位置以前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
パールゴールデンロッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
オブジェクトの参照カウント	sys.getrefcount(obj)
線グラフの色をダークシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
表から型だけ抽出する	df.select_dtypes(ty)
書き込みできるようにファイルをBOM付きで開く]	open(filepath, mode='w', encoding='utf_8_sig')
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
デックのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
オブジェクトはリストの要素	element in aList
データフレームのインデックス一覧を使う	df.index
文字列を末尾から空白で区切る	s.rsplit()
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームのカラムの中に文字列と日付データがある	df[col].isin([value, value2])
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
option: ライトグレー色を用いる	color = 'lightgray'
option: ▲マーカーを加える	marker = '^'
option: 色をカーキに変更する	color = 'khaki'
option: 改行をセパレータで使用する	sep = '\n'
散布図を下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v')
アンティークホワイト色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をブルーバイオレットにセットする	plt.hist(データ列, color='blueviolet')
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
option: エンコーディングをEUCにセットする	encoding = 'euc_jp'
複素数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=bool)
配列と配列の散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
データフレームの列の値がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データ列のNaNを最大値にセットする	ds.fillna(ds.max())
空のタプル	()
ファイルパスをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームの列を丸めて、整数型にする	df[col].round().astype(int)
データフレームのカラムの値は欠損値か	df[col].isna()
数列と数列について散布図を描画して、マーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
格子線をグラフから消す	plt.grid(False)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
ヒストグラムを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームから重複した行を破壊的にドロップする	df.drop_duplicates(inplace=True)
小数点数の小数部	math.modf(x)[0]
Pandasでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds)
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
Pandasでデータ列を日付データにする	pd.to_datetime(ds)
データフレームの列の中に文字列があるかどうか	df[col].isin([value])
線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
nが2で割り切れない	n % 2 == 1
折れ線グラフを青い一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
スプリンググリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの中に文字列が存在するか調べる	df.isin([value])
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
空のガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
range関数の無限バージョン	itertools.count(start=n, step=step)
赤い実線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
リストと配列について散布図を描いて、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
数列とリストについて散布図をプロットし、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストとリストの散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ライトコーラル色としてヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームからカラムを二つ選択する	df[[column, column2]]
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
タプルをn回、結合する	aTuple * n
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
日付時刻データが何日か知る	aDatetime.day
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
最小値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].min())
キューの上限長	deq.maxlen
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームを各列毎にグループ化し、文字列というグループの個数を計算する	df.groupby(column).size()[s]
nを2進数リテラルに変換する	bin(n)
散布図の上三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: ダークグレーを使う	color = 'darkgrey'
option: 色をグリーンに設定する	color = 'green'
データをL1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データ列の各値の出現回数	ds.value_counts()
日付時刻データがタイムスタンプデータと同時	aDatetime == aDatetime2
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
実数の指数を計算する	math.frexp(x)[1]
option: シエナ色を使う	color = 'sienna'
スノー色を使ってヒストグラムを描画する	plt.hist(データ列, color='snow')
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
文字列の左端から空白を取り除く	s.lstrip(' ')
n×n2の二次元リストを得る	[[0] * n for _ in range(n2)]
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
折れ線グラフの色をライトイエローにする	plt.plot(データ列x, データ列y, color='lightyellow')
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
option: ライトグリーンに色を設定する	color = 'lightgreen'
データ列の値が欠損値か調べる	ds.isna()
文字列を赤色で出力する	print(f'\033[31m{value}\033[0m')
散布図の右三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
文字列の左側から部分文字列を見つける	s.find(sub)
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
文字列を空白で区切って、列挙する	s.split()
データフレームのリストカラムの未入力値を平均で埋める	df[aList].fillna(df[aList].mean())
タイムスタンプデータからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
タプルをn回加える	aTuple * n
option: 貝殻を用いる	color = 'seashell'
option: グラフの色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
縦軸を対数目盛に変更する	plt.yscale('log')
rgbの左三角マーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
スチールブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるかカウントする	s.count(sub, start, end)
イテラブルを両端キューに変換する	collections.deque(iterable)
データフレームを列名リストによってで大きい順にソートする	df.sort_values(by=column, ascending=False)
PandasでUNIX秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: UTF8を用いる	encoding = 'utf-8'
データフレームをグループ化し、それぞれの列に対し標準偏差を算出する	df.groupby(column)[column2].std()
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
データフレームのヒストグラムを縦横に並べて、プロット化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
破壊的にデータフレームのn行目を消す	df.drop(n, axis=0, inplace=True)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
タプルが少なくともひとつ真かどうか判定する	any(aTuple)
データフレームを列によって並べて、上の方n件を取り出す	df.sort_values(columns).head(n)
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
データフレームの列がxより多くx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
折れ線グラフの色をパウダーブルーにセットする	plt.plot(データ列x, データ列y, color='powderblue')
option: 三２ビット整数型を用いる	dtype = np.int16
ファイルパスをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
文字列を置き換える	s.replace(sub, newsub)
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
option: グラフの色をグレーに指定する	color = 'gray'
カウンタを辞書から作る	collections.Counter(aDict)
縦棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
データフレームの中で列と列の重複を削除する	df.drop_duplicates(subset=column)
option: フォントの色をアリスブルーに設定する	color = 'aliceblue'
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
カウンタの全出現回数を見る	aCounter.total()
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
要素を集合から取り除く	aSet.remove(element)
列の値によってデータフレームをグループ化する	df.groupby(column)
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
nとn2の差	n - n2
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: ゲインズボロ色を使用する	color = 'gainsboro'
ベクトル演算をする	import numpy as np
タイムスタンプデータからn週間を減らす	aDatetime - datetime.timedelta(weeks=n)
option: ダークゴールデンロッドに色を設定する	color = 'darkgoldenrod'
ファイルを開いて]バイナリ書き込みストリームを見る	open(filepath, mode='wb')
横棒グラフを貝殻色として描画する	plt.barh(データ列x, データ列y, color='seashell')
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
ボックスチャートを描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
x座標の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
nからn2までの整数列を使う	list(range(n, n2+1))
主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
データフレームを表示するとき表示可能な列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
ケンドール順位相関係数としてデータフレームのリストで指定された列の相関行列	df[aList].corr(method='kendall')
正規表現に文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
option: ロイヤルブルーにフォントの色を変更する	color = 'royalblue'
最大最小として正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
３つのデータフレームを横に連結する	pd.concat([df, df2, df3], axis=1)
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
異なる列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
ハニーデュー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
option: ダークシアグリーン色を使う	color = 'darkseagreen'
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
色をパステル調にする	sns.set(pallete='pastel')
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
変数をアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
横棒グラフを黄緑色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
xの絶対値を計算する	abs(x)
option: データ型を指定する	dtype = np.uint8
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
浮動小数点数を実数から減ずる	x - y
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
Pandasで、エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
リストが空でないか調べる	len(aList) != 0
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
縦棒グラフをライムグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームのリストカラムを100の位で四捨五入する	df[aList].round(-2)
option: グラフの色をライムグリーンにセットする	color = 'limegreen'
n2がn以上、かつn3以下か判定する	n <= n2 and n2 <= n3
option: ライトスレイグレー色を使う	color = 'lightslategrey'
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
option: アイボリー色を用いる	color = 'ivory'
ヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
イテラブルを文字列リストに変換して、'改行で結合する	'\n'.join(map(str, iterable))
列'A'と列'B'をキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データ列の変化を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データ列の値がNaNか	ds.isna()
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームの列をドロップする	df.drop(column, axis=1)
floatの最大値	sys.float_info.max
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
データ列のNaNを直前の値に設定する	ds.fillna(method='ffill')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
アイボリー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
プラットホームがリナックスか調べる	sys.platform.startswith('linux')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
日付時刻データが何分か知る	aDatetime.minute
nが-9以上9以下か調べる	-9 <= n <= 9
option: コーラル色を使う	color = 'coral'
茶色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
点線でイテラブルの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの各次元のサイズを見る	df.shape
seabornのデフォルトを適用する	sns.set()
カーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
文字列中にひとつでも非英字があるか調べる	any(not c.isalpha() for c in s)
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
rgbのクロスマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ピンクにグラフの色をする	color = 'pink'
第一引数のファイル名	sys.argv[1]
サイコロと同じ乱数	random.randint(1, 6)
文字列をセパレータを用いて区切る	s.split(sub)
option: チョコレートを使う	color = 'chocolate'
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ゲインズボロ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
タイムスタンプデータの月数	aDatetime.month
最大長nのキューをイテラブルから用意する	collections.deque(iterable, maxlen=n)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
散布図の印の色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームを関数の値によってまとめたグループを使う	df.groupby(関数)
黒い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
rgbの大バツマーカーをイテラブルと配列の散布図に描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ファイルを開いて]書き込みストリームを使う	open(filepath, mode='w')
タプルを展開して出力する	print(*aTuple)
空の集合	set()
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
数字を全部使う	string.digits
表データを列によってグループ化して、それぞれのグループ毎の分散を求める	df.groupby(column).var()
実行結果を赤色でプリントする	print(f'\033[31m{value}\033[0m')
option: グラフの色をライムに設定する	color = 'lime'
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
データ列の分	ds.dt.minute
データ列の変遷を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
データ列を２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
縦棒グラフを描画し、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
カウンタのそれぞれの項目をカウントだけ列挙する	aCounter.elements()
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
全要素を0で初期化したベクトルを作る	np.zeros(要素数)
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
option: フォントの色をダークシアグリーンに指定する	color = 'darkseagreen'
線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
nのビット長を見る	n.bit_length()
データ列の偏りを平方根変換する	np.sqrt(データ列)
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
プロットの用途を画面に設定する	sns.set(context='notebook')
データフレームをTSVから読む	pd.read_csv(filename, sep='\t')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
値が双方向キューの中に含まれてるかどうか	element in deq
nとn2の商を算出する	n / n2
書き込みできるようにファイルを文字列の示すエンコーディングで開く]	open(filepath, mode='w', encoding=s)
データフレームの列を丸めて、整数にする	df[col].round().astype(int)
折れ線グラフの色をベージュにセットする	plt.plot(データ列x, データ列y, color='beige')
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフでデータ列を描画する	plt.plot(データ列x, データ列y)
文字列を部分文字列で二つに区切って、後半の文字列を使う	s.partition(sub)[-1]
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
データ列を千の位で丸めて整数型にする	ds.round(-3).astype(int)
要素が集合のメンバーか	element in aSet
データ列のユニークな要素数	ds.nunique()
イテラブルを更新不能な集合に変換する	frozenset(iterable)
配列を四分位数で分割する	pd.qcut(aArray, 4)
グラフのデータラベルの場所を指定する	plt.legend(loc=(x, y))
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
配列をビン数nを用いてビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフに丸印を用いる	plt.plot(データ列x, データ列y, marker='o')
nが1もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
ヒストグラムを青紫色を使って描画する	plt.hist(データ列, color='violet')
データフレームの中にとがいくつ存在するか数える	df.isin([value, value2]).sum()
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategray')
データ列の25パーセンタイル	ds.quantile(0.25)
option: セパレータを使わない	sep = ''
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データ列は何秒か確認する	ds.dt.second
双方向キューの最初に要素を入れる	deq.appendleft(element)
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
辞書に別の辞書の項目を更新する	aDict.update(aDict2)
散布図を四角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='s')
色付きの実線で配列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
オブジェクトはある型のインスタンス	isinstance(obj, クラス)
option: グラフの色をディムグレーに指定する	color = 'dimgray'
データフレームを表示するとき表示可能な行数を変更する	pd.set_option('display.max_rows', n)
小数点数の正接の逆数	math.atan(x)
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
実数を実数から引く	x - y
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
半透明の破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
配列とリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ラインを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムをビン数を設定してプロットする	plt.hist(データ列, bins=区関数)
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
現在の日数	datetime.datetime.today().day
nが負の数か調べる	n < 0
データフレームの列の名前の一覧	df.columns
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
赤い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームとデータフレームの列を連結する	pd.concat([df, ds], axis=1)
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームを'A'列と'B'列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: ライトシアンを使う	color = 'lightcyan'
ファイルをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
データフレームを各列と列の組み合わせ毎に集約し、、最小値を計算する	df.groupby([column, column2], as_index=False).min()
線グラフをペールグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='palegreen')
シーケンスのコンビネーション	itertools.combinations(iterable, n)
関数によってデータフレームをグループ化する	df.groupby(関数)
option: 貝殻色を用いる	color = 'seashell'
追加モードでファイルをオープンして]fとする	f = open(filepath, mode='a')
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
新しい部分的最小二乗回帰モデルを準備する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: ライム色を使う	color = 'lime'
データフレームのリストカラムを10の位で丸めて、整数にする	df[aList].round(-1).astype(int)
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
オブジェクトは浮動小数点数型か	isinstance(obj, float)
横棒グラフをターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='turquoise')
タイムスタンプデータが何時か知る	aDatetime.hour
option: ダークシアンを使用する	color = 'darkcyan'
データフレームのリストカラムのどの値が頻出か調べる	df[aList].mode()
文字列の左側からタブを消す	s.lstrip('\t')
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
ヒストグラムを描いてビンを設定する	plt.hist(データ列, bins=区関数)
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
option: ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
option: グラフの色を小麦色に設定する	color = 'wheat'
ファイルを読み込み用にオープンする]	open(filepath, mode='r')
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
リストとリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: ダークサーモンを用いる	color = 'darksalmon'
棒グラフを小麦色色を用いて描画する	plt.bar(データ列x, データ列y, color='wheat')
辞書の全エントリをクリアする	aDict.clear()
線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列中の部分文字列をカウントする	s.count(sub)
データフレームの列がx以上かつx2未満の行を選択する	df[(x <= df[column]) & (df[column] < x2)]
双方向キューの要素を右にn個分輪番で回す	deq.rotate(n)
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
データフレームの列を折れ線グラフで描画する	plt.plot(df[column], df[column])
キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
ファイルがない	not os.path.exists(filepath)
option: グラフの色をダークグレーに変更する	color = 'darkgrey'
option: アリスブルー色を使う	color = 'aliceblue'
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
データフレームを各列毎に集約し、、列の標準偏差を求める	df.groupby(column)[column2].std()
option: グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
文字列が組の要素でない	element not in aTuple
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
データフレームを'A'列によってソートする	df.sort_values(by='A')
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
タプルの先頭を取り除く	aTuple[1:]
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ファイルをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
散布図の大バツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
日付時刻データは日付時刻データより前かどうか確認する	aDatetime < aDatetime2
option: ローングリーンにグラフの色を指定する	color = 'lawngreen'
折れ線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategray')
二つのオブジェクトが等しいかテストする	obj == obj2
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
縦棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
文字列中の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
nがn2より大きいか調べる	n > n2
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
xが一桁の数か調べる	-9 <= x <= 9
option: 箱ひげ図を水平方向にする	vert = False
ラベンダーブラッシュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
正規表現を使う	import re
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
リストとリストについての散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
整数nが配列のいづれか	n in aArray
線グラフの色をマゼンタにセットする	plt.plot(データ列x, データ列y, color='magenta')
文字列を黄色で表示する	print(f'\033[33m{value}\033[0m')
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
データフレームを列によって分類して、それぞれのグループごとの平均値を計算する	df.groupby(column).mean()
カウンタのそれぞれの要素をカウントだけ列挙する	aCounter.elements()
配列と配列について散布図を描画してその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
グラフの見栄えをデフォルトでイイ感じに設定する	sns.set()
折れ線グラフに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
文字列の先頭の文字	s[0]
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームの列が文字列で終わる行を選ぶ	df[df[column].str.endswith(s)]
二つのデータフレームを異なる列をキーにして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームを表示するとき、表示できる最大行数をnに減らす	pd.set_option('display.max_rows', n)
散布図をプラム色を用いて描画する	plt.scatter(データ列x, データ列y, color='plum')
線グラフをダークゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
マッピングからキーの値をエラーなく参照する	aDict.get(key, None)
タプルを順番付けする	enumerate(aTuple)
オブジェクトのメモリビューを使う	memoryview(obj)
二つのデータフレームを異なる列をキーにして外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
切片なしの回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
文字列の開始位置から終了位置までの範囲で部分文字列の出現を数える	s.count(sub, start, end)
変数を太字で表示する	print(f'\033[1m{value}\033[0m')
xのハッシュ値を計算する	hash(x)
横棒グラフをブルーバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='blueviolet')
文字列を空白で区切って文字列リストにする	s.split()
データフレームを確認する	df.head()
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
表データを列名リストで降順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
最頻値でデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].mode().iloc[0])
option: 色をディムグレーに指定する	color = 'dimgray'
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
関数の値によってデータフレームをグループ化し、列挙する	[(name, group) for name, group in df.groupby(関数)]
RANSACとしてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
リストとリストの散布図を描画し、、マーカーを▼に変更する	plt.plot(データ列x, データ列y, marker='v')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
部分文字列が部分文字列で開始する	s.startswith(sub)
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ガンマ関数の値	math.gamma(x)
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
商と余りを同時に計算する	divmod(x, y)
散布図をミディアムバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
二つの辞書をネストする	collections.ChainMap(aDict, aDict2)
辞書の値として要素が含まれているか調べる	element in aDict.values()
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
作画で使うフォントを指定する	sns.set(font=フォント名)
イテラブルから行列を作る	np.array(iterable)
リストと数列についての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列を改行せずにプリントする	print(value, end='')
データフレームの平均値	df.mean()
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
文字列がいつまでも繰り返す列	itertools.repeat(element)
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームの列の値がxより大きい行を抽出する	df[df[column] > x]
option: ターコイズにグラフの色を設定する	color = 'turquoise'
実数を三乗する	x ** 3
データフレームのカラムがxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
nとn2のシートをエクセルデータファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
オブジェクトは浮動小数点数クラスのインスタンスか調べる	isinstance(obj, float)
option: SJISを使う	encoding = 'shift_jis'
トマト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
文字列を別の文字列で全部置き換える	s.replace(sub, newsub)
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
スプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
浮動小数点数を実数で割って切り捨てる	x // y
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
グラフで使える色名の一覧	matplotlib.colors.cnames
データフレームのカラムを百の位で四捨五入する	df[col].round(-2)
リストを2回あわせた直積	itertools.product(iterable, repeat=2)
散布図の▲印の色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
全要素を1で初期化したベクトル	np.ones(要素数, dtype=np.int)
折れ線グラフに簡単な説明を設定する	plt.plot(データ列x, データ列y, label='ラベル')
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
赤い▼マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ヒストグラムをプラム色を用いて描画する	plt.hist(データ列, color='plum')
数式を簡単化する	sympy.sympify(e)
折れ線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
列にリストを続けたイテラブル	itertools.chain(iterable, iterable2)
option: 上三角マーカーを使う	marker = '^'
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームのカラムの空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
列'A'と列'B'をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
文字コードtextを用いてファイルをオープンする]	open(filepath, encoding=text)
データ列を10の位で丸めて、整数にする	ds.round(-1).astype(int)
カテゴリでグループ化して、に箱ひげ図でデータフレームを見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
配列の差	aArray - aArray2
リストとデータ列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
棒グラフをシルバー色を用いて描画する	plt.bar(データ列x, データ列y, color='silver')
日付データが日付データと同時かどうか確認する	aDate == aDate2
option: 色をアリスブルーに設定する	color = 'aliceblue'
タプルの要素を昇順に並べ直す	sorted(aTuple, reverse=True)
Pandasでデータ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームのカラムの欠損値を最小値に変更する	df[col].fillna(df[col].min())
オレンジ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
リストと数列の散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームを列によってソートし、、行を振り直す	df.sort_values(columns).reset_index(drop=True)
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
xを浮動小数点数に変換する	float(x)
n個に等間隔でデータ列をビン分割する	pd.cut(ds, n)
ファイルをEUCを使って書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
ボックスチャートをプロットして、平均値を加える	plt.boxplot(データ列, showmeans=True)
データフレームの列をグループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
nがn2よりも大きいか調べる	n > n2
option: セパレータをコロンにする	sep = ':'
リストの要素を小さい順にソートする	sorted(aList, reverse=True)
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
リストとイテラブルの散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
option: 色をナバホホワイトに設定する	color = 'navajowhite'
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
プロットの凡例を表示する	plt.legend()
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフの色をミディアムスレートブルーにする	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: 色を紺に指定する	color = 'darkblue'
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
ブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ベクトルの差を求める	aArray - aArray2
正則化付き回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
自然数の階乗を算出する	math.factorial(n)
列をイミュータブルなセットにする	frozenset(iterable)
スカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
オブジェクトは数値か	isinstance(obj, (int,float))
部分文字列が文字列の開始位置以降に含まれないかどうか	s.find(sub, start) == -1
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームから破壊的に重複した行を落とす	df.drop_duplicates(inplace=True)
列とカラムの重複をドロップする	df.drop_duplicates(subset=[column, column2])
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
データフレームのカラムを正規表現patternでまとめてreplに変更する	df[col].replace(pattern, repl, regex=True)
新しいロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
追加できるように文字コードtextを用いて既存のファイルを開く]	open(filepath, mode='a', encoding=text)
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
折れ線グラフの丸マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
列でデータフレームを並べて、下位n件を取り出す	df.sort_values(columns).tail(n)
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
散布図を黒い左三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
オプションで標準エラーを出力にする	file = sys.stderr
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
ピアソン相関係数でデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='pearson')
列'A'と列'B'をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
キーがマッピングにない場合要素を追加する	aDict.setdefault(key, element)
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
本日の日数	datetime.datetime.today().day
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
２つのデータフレームを列'A'と列'B'をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
棒グラフをロージーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='rosybrown')
シーケンスを文字列に変換して空白によって一つにする	' '.join(map(str, iterable))
パラメータについて数式のインテグラルを計算する	sympy.integrate(e, z)
タプルの最初のオブジェクトを探す	aTuple.index(element)
実行結果を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
青い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
パウダーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
option: 色をオーキッドに設定する	color = 'orchid'
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字列をコロンで区切って、列挙する	s.split(':')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの色をドジャーブルーにセットする	plt.plot(データ列x, データ列y, color='dodgerblue')
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ミッドナイトブルー色としてヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
ベクトルのユニークな要素を求める	np.unique(aArray)
全ての印字	string.printable
日付時刻データが月曜日	aDatetime.weekday() == 0
文字列リストを結合してひとつの文字列にする	''.join(aStringList)
option: ハニーデュー色を使う	color = 'honeydew'
option: グラフの色をライトシアンに指定する	color = 'lightcyan'
辞書を改行付きで文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
要素が集合のメンバーか調べる	element in aSet
ヒストグラムの色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
変数を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
option: グラフの色をシスルにする	color = 'thistle'
プラットフォームの符号付き整数の最大値	sys.maxsize
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームの全カラムを散布図でグラフ化する	sns.pairplot(df)
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
列を千の位で四捨五入する	ds.round(-3)
最大最小としてデータをスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
双曲線余弦の逆数	math.acosh(x)
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
正規化された柱状図を描く	plt.hist(データ列, density=True)
データフレームの値がNaNかテストする	df.isna()
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
文字列の最後から改行を取り除く	s.rstrip('\n')
データフレームを破壊的に昇順に列によってソートする	df.sort_values(by=column, ascending=True, inplace=True)
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
赤い実線としてラインを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
前の行の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
配列をビン数nとしてビン分割する	pd.cut(aArray, n)
プラットホームのエンコーディングを調べる	sys.getdefaultencoding()
標準出力のバッファを即時表示する	sys.stdout.flush()
青紫色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
実数のハイパボリック・コサイン	math.cosh(x)
逆双曲線余弦を求める	math.acosh(x)
折れ線グラフの色をダークマゼンタにセットする	plt.plot(データ列x, データ列y, color='darkmagenta')
PandasでUNIX時間のデータフレームのcollからPandasの日付型にする	pd.to_datetime(df[col], unit='s', utc=True)
nがn2かどうか調べる	n == n2
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
折れ線グラフの星マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
最大長を指定して双方向キュー	collections.deque(maxlen=n)
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
nが5で割り切れるかどうか	n % 5 == 0
JSONLファイルにカラムの名前を付けずにデータフレームを書き込む	df.to_csv(filename, header=None)
データフレームのn行目をドロップする	df.drop(n, axis=0)
option: フォントの色をコーンズシルクにする	color = 'cornsilk'
数列とリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
カラムの中に文字列とがいくつあるか数える	ds.isin([value, value2]).sum()
実数を二乗する	x ** 2
データフレームを列名リストによってソートし、更新する	df.sort_values(by=column, inplace=True)
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
データフレームの全カラムを散布図で見る	sns.pairplot(df)
データ列を使う	import pandas as pd
整数nをバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
散布図に赤いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
文字列の末尾から部分文字列を取り除く	s.rstrip(sub)
データフレームをグループ化して、ヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
横棒プロットを描画し、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
実数の二乗	x ** 2
棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
散布図を黒いポイントマーカーを用いて描く	plt.plot(データ列x, データ列y, marker='.', c='k')
縦棒グラフをクリムゾン色を用いて描画する	plt.bar(データ列x, データ列y, color='crimson')
散布図に黒い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
バイアスなしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
グラフの背景色を暗くする	sns.set(style='darkgrid')
データ列がどの程度、分散しているか見る	ds.var()
単回帰モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ふたつの集合の∩	aSet.intersection(aSet2)
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
行列の合計値	np.sum(aArray)
option: ビスク色を使う	color = 'bisque'
イテラブルから配列を作る	np.array(iterable)
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
データフレームを正規表現で一度にreplに置き換える	df.replace(pattern, repl, regex=True)
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
タンジェントを求める	math.tan(x)
データ列の未入力値を平均値に変更する	ds.fillna(ds.mean())
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
option: パープル色を用いる	color = 'purple'
項目名がマッピングに存在する	key in aDict
ペアリストpairsからカウンタを新規生成する	collections.Counter(dict(pairs))
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
nが2で割り切れるか判定する	n % 2 == 0
nがn2よりも小さいか判定する	n < n2
スタックをデキューする	deq.popleft()
リストと数列の散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
option: スノーを用いる	color = 'snow'
タプルの中の最小値を計算する	min(aTuple)
黒いダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
実数の床を算出する	math.floor(x)
分子と分母から有理数を新規生成する	fractions.Fraction(分子, 分母)
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
配列をn個にビンニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
要素ひとつのりストを作る	[element]
日付データの月数を見る	aDate.month
ふたつの集合の交わりを求める	aSet.intersection(aSet2)
ゼロ埋めされた複素数型の行列を作成する	np.zeros(要素数, dtype=bool)
データフレームのリストカラムの最頻値を求める	df[aList].mode()
文字列が組に含まれるかどうか調べる	element in aTuple
昇順にタプルの要素をソートする	sorted(aTuple, reverse=False)
度数分布図を上限から下限の上限下限で描画する	plt.hist(データ列, range=(start, end))
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
データフレームの列を散布図として見る	sns.scatterplot(data=df, x='列名', y='列名')
option: スラグレーにグラフの色を設定する	color = 'slategray'
option: グラフの色をグレーに設定する	color = 'gray'
データフレームの未入力値を最頻値に減らす	df.fillna(df.mode().iloc[0])
サーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
全要素を０で初期化した複素数型の行列を作成する	np.zeros(行数, 列数, dtype=bool)
ホットピンク色としてヒストグラムを描画する	plt.hist(データ列, color='hotpink')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
赤い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ふたつの集合の∪	aSet.union(aSet2)
実数のcosの逆数	math.acos(x)
日付データからn秒を減らす	aDate - datetime.timedelta(seconds=n)
グラフをプレゼン用に設定する	sns.set(context='talk')
キューの要素をn個分右にローテンションする	deq.rotate(n)
文字列がタプルに含まれない	element not in aTuple
一度にValueMapでデータ列の値を変更する	ds.replace(ValueMap)
nのビット長	n.bit_length()
データフレームから破壊的に重複した行を消す	df.drop_duplicates(inplace=True)
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
グラフに鉛直方向の実線をつける	plt.axvline(x=0, linestyle='solid')
クラスのサブクラスか確認する	issubclass(サブクラス, クラス)
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ヒストグラムをライトグリーン色を使って描画する	plt.hist(データ列, color='lightgreen')
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
三自然数の最小公倍数	math.lcm(n, n2, n3)
データフレームを複数の列を用いてソートして、更新する	df.sort_values(by=column, inplace=True)
散布図をrgbの星マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
nがn2かテストする	n == n2
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
散布図を淡い茶色色を用いて描画する	plt.scatter(データ列x, データ列y, color='tan')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
オブジェクトのイテレータ	iter(obj)
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
データフレームを列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
option: 淡いピンク色色を使う	color = 'lightpink'
リストを折れ線グラフとして作図する	plt.plot(データ列x, データ列y)
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
リストのn番目からn2番目までの部分	aList[n:n2]
カテゴリで色分けしてデータフレームの全列の相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
折れ線グラフの▲マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: ライトグレーにグラフの色を設定する	color = 'lightgrey'
ケンドールを使ってデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図を黒いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
列をリストに変換する	df[column].values.tolist()
散布図をrgbのバツマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
実数が非数	math.isnan(x)
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームの欠損値を直後の値で置換する	df.fillna(method='bfill')
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
カラムの中央値	ds.median()
n個にリストを等しい量になるように分割する	pd.qcut(aList, n)
文字列が漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
チョコレート色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
コマンドライン引数	sys.argv
データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
サポートベクトル分類モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
データ列の離れ具合をグラフ化する	sns.residplot(x=データ列, y=データ列)
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
行列のデータ型	aArray.dtype()
ビン数nでリストを分割する	pd.cut(aList, n)
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
部分文字列か	sub in s
横棒グラフをカデットブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cadetblue')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
カラムの未入力値を最大値に設定する	ds.fillna(ds.max())
ファイルパスを文字コードtextを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
option: サーモンにグラフの色を設定する	color = 'salmon'
文字列リストに配列を変換して、部分文字列で連結する	sub.join(map(str, iterable))
文字列を部分文字列で区切り、、文字列リストに変換する	s.split(sub)
rgbの右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
列をリストにする	df[column].values.tolist()
n個の数値イテラブルを求める	range(n)
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
ASCII限定として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
n個の文字列があるリスト	[element] * n
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
option: グレーにグラフの色を設定する	color = 'grey'
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図を赤いダイアモンドマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
nを8進数文字列に変換する	oct(n)[2:]
option: コーンズシルク色を用いる	color = 'cornsilk'
option: グレーに色を指定する	color = 'grey'
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
データ列の中に文字列が存在するか調べる	ds.isin([value])
プロットの中に枠なしの凡例を付ける	plt.legend(frameon=False)
マルーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
床を計算する	math.floor(x)
TSVファイルでデータフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='grey')
分類モデルのアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
option: 印の色を変える	markerfacecolor = '#800080'
デフォルトスタイルを適用する	sns.set()
データフレームの行を範囲指定して取り出す	df[start:end]
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
Pandasで、データフレームのcollをdatetime64型にする	pd.to_datetime(df[col])
部分文字列で文字列の開始位置以降が始まるかどうか調べる	s.startswith(sub, start)
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
日付データが日付データより前か	aDate < aDate2
option: 色をダークシアグリーンに指定する	color = 'darkseagreen'
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
日付データの曜日を整数で使う	aDate.weekday()
データフレームを列によってグループ化して、それぞれのグループの最大値を求める	df.groupby(column).max()
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
ダークレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
オブジェクトが型かどうか	isinstance(obj, クラス)
縦棒グラフをダークシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
文字列を区切りで分割し、、列挙する	s.split(sep)
option: セパレータをスラッシュにする	sep = '/'
nとkのnCkを計算する	math.comb(n, k)
黒い▼マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: namesを列の名前に設定する	names = names
ラインを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフの色をリネンにセットする	plt.plot(データ列x, データ列y, color='linen')
文字列TSVからCSVファイルをn番目の列をインデックスにして読み込む	pd.read_csv(filename, index_col=n)
棒グラフをライトスレイグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームを'A'列と'B'列によってで破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
文字列がリストの要素かどうか調べる	element in aList
カウンタの項目のカウントを使う	aCounter[element]
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
等しい量になるようにデータ列を分割数nとしてビン分割する	pd.qcut(ds, n)
nilに等しい識別子	None
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データ列の折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
変数を白色にする	f'\033[37m{value}\033[0m'
文字列の示すエンコーディングを用いてファイルをオープンする]	open(filepath, encoding=s)
実数の指数	math.frexp(x)[1]
折れ線グラフの色をアクアにセットする	plt.plot(データ列x, データ列y, color='aqua')
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
文字列を改行で区切る	s.splitlines()
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
縦棒グラフをインディゴ色を用いて描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームをグループ化し各列に対し分散を求める	df.groupby(column)[column2].var()
文字列がアスキー文字	s.isascii()
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
データフレームの中の欠損値が存在する行を消す	df.dropna()
クラス分類の真陽性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
集合から任意の要素を取り出す	aSet.pop()
リストが空かどうか調べる	len(aList) == 0
option: 下三角印を描画する	marker = 'v'
赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
データフレームを'A'列で大きい順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
折れ線グラフの印を左三角にする	plt.plot(データ列x, データ列y, marker='<')
ファイルパスが存在するか	os.path.exists(filepath)
ヒストグラムを実線を用いてプロットする	plt.hist(データ列, linestyle='solid')
リストをベクトルに変換する	np.array(aList)
散布図をゲインズボロ色を使って描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
xの小数点以下'5'桁までを表示する	print(':.5f'.format(x))
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
データフレームのカラムの秒	df[col].dt.second
データ列を使う	import pandas as pd
option: ライトブルー色を使う	color = 'lightblue'
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
折れ線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
列とタプルをペアリングする	itertools.zip_longest(iterable, iterable2)
CSVタブ区切りのファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
組を小さい順に並べ変える	sorted(aTuple, reverse=True)
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームを列によってソートし、、上の方n件を取り出す	df.sort_values(columns).head(n)
データフレームを関数の値によって集約し、、列挙する	[(name, group) for name, group in df.groupby(関数)]
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
グラフの描画を綺麗にする	import seaborn as sns
オリーブ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
正規表現patternでデータフレームのカラムを置換する	df[col].replace(pattern, repl, regex=True)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
データフレームのリスト列がどれだけ、分散しているか確認する	df[aList].var()
小数点数のコサインの逆数	math.acos(x)
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
データフレームのn行まで選択する	df[:n]
日付時刻データが金曜日かどうか調べる	aDatetime.weekday() == 4
n÷n2を計算する	n / n2
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
option: サンディーブラウン色を使う	color = 'sandybrown'
正規表現patternでデータフレームのリストカラムの値を一度に置き換える	df[aList].replace(pattern, repl, regex=True)
ファイルパスをUTF8として書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
データフレームを表示するとき、列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
散布図に黒い上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
実数のcos	math.cos(x)
散布図をrgbの下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列を改行で区切り文字列リストに変換する	s.splitlines()
文字を文字コードに変換する	ord(ch)
文字列の先頭の空白を取り除く	s.lstrip()
棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームをグループ化し、各列に対し合計を計算する	df.groupby(column)[column2].sum()
横棒グラフを描いて下寄せする	plt.barh(ラベル列, データ列, align='edge')
option: 色をライムに指定する	color = 'lime'
Pandasで、文字列をPandasの日付型にする	pd.to_datetime(s)
ピアソンの相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
オレンジレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームのカラムの文字列長を列として見る	df[col].str.len()
グラフで使用するフォントを指定する	sns.set(font=フォント名)
option: シルバーにグラフの色を設定する	color = 'silver'
リストの要素をソートする	sorted(aList)
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
カテゴリ別で色分けして、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
左三角印を使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
ミディアムブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumblue')
タプルの中の最小値	min(aTuple)
データ列の折れ線グラフを三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をダークレッドに設定する	color = 'darkred'
リストとイテラブルの散布図を描画し、菱形マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
赤い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
横棒グラフをサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='salmon')
数列とリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
２つのデータフレームを列をキーにして内部結合する	pd.merge(df, df2, on=column, how='inner')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
数が正の数かどうか判定する	x > 0
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
分類モデルの残差を計算する	目的変数 - model.predict(説明変数)
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
option: 暗い赤色を用いる	color = 'darkred'
カラーパレットを淡くする	sns.set(pallete='muted')
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
スタックのサイズ	len(deq)
棒グラフをスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='slateblue')
predicateFuncがTrueとなるリストの要素を求める	itertools.takewhile(predicateFunc, iterable)
文字列はタプルの要素でない	element not in aTuple
option: マーカーを星に設定する	marker = '*'
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームのpercentパーセンタイルを算出する	df.quantile(percent/100)
三数の最小値	min(x, y, z)
プログラムの実行を正しく停止する	sys.exit(0)
option: 複素数型を使用する	dtype = bool
整数nが配列のいづれかかどうか調べる	n in aArray
横棒グラフをライトスレイグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
スピアマンでデータフレームの相関行列を計算する	df.corr(method='spearman')
グリーンイエローにヒストグラムの色を変更する	plt.hist(データ列, color='greenyellow')
文字列を黄色にする	f'\033[33m{value}\033[0m'
バイナリ書き込みモードでファイルパスをオープンする]	open(filepath, mode='wb')
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
Pythonパスのリストを知る	sys.path
折れ線グラフの三角印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列内にひとつでも英数字があるか	any(c.isalnum() for c in s)
文字列が文字列リストのいづれかどうか調べる	s in aStringList
縦棒グラフをコーンズシルク色を使って描画する	plt.bar(データ列x, データ列y, color='cornsilk')
浮動小数点数を十六進文字列に変換する	x.hex()
データ列の値が正規分布にしたがって発生する確率を使う	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームのカラムを10の位で四捨五入して、整数型にする	df[col].round(-1).astype(int)
データ列を折れ線グラフで図示する	plt.plot(データ列x, データ列y)
データフレームから指定された二つの列を抽出する	df[[column, column2]]
符号付きで整数nをバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
文字列の末尾からタブを消す	s.rstrip('\t')
3つのリストを順にプリントする	print(value, value2, value3)
option: ライトグレー色を使う	color = 'lightgrey'
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームの各次元の大きさを調べる	df.shape
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
プロットに目盛り線を入れる	plt.grid(True)
データフレームのカラムの欠損値をモードに設定する	df[col].fillna(df[col].mode().iloc[0])
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
散布図をrgbのダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
option: ビスク色を使用する	color = 'bisque'
クリムゾン色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
文字列の開始位置以降に部分文字列が存在しない	s.find(sub, start) == -1
データフレームのカラムの日	df[col].dt.day
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
バイナリできるようにファイルを開く]	open(filepath, mode='rb')
実数を十六進文字列に変換する	x.hex()
nがn2	n == n2
配列と数列について散布図を描画してマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
三つの変数をプリントする	print(value, value2, value3)
データフレームから数値データのカラムだけ取り出す	df.select_dtypes('number')
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
データ列の移り変わりを半透明の実線を使って描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図の右三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
オブジェクトがあるクラスのインスタンスかどうか調べる	isinstance(obj, クラス)
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
option: ライトスチールブルー色を使用する	color = 'lightsteelblue'
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
集合から全ての要素を消す	aSet.clear()
二つの集合の和集合	aSet.union(aSet2)
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
データ列が正規分布かどうか仮説検定する	scipy.stats.shapiro(データ列)
option: 先頭の行をヘッダに設定する	header = 0
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームを各列毎にグループ化して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
タイムスタンプデータからn分減算する	aDatetime - datetime.timedelta(minutes=n)
双方向キューは空でないか	len(deq) != 0
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
nをn2で割った結果の切り上げを求める	(n + n2 - 1) // n2
リストとリストの散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
カテゴリでグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
rgbの▲マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
アイリスのデータセットをロードする	sns.load_dataset('iris')
要素がセットのメンバーでないか調べる	element not in aSet
浮動小数点数を実数で整数除算する	x // y
プロットの大きさをセットする	plt.figure(figsize=(横幅, 高さ))
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
'A'列でデータフレームをまとめたグループ	df.groupby('A')
option: ミディアムアクアマリンに色を設定する	color = 'mediumaquamarine'
列によってデータフレームをソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折り返しをオフに減らす	pd.set_option('expand_frame_repr', False)
データフレームから一番右側の列を除く	df[df.columns[:-1]]
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
折れ線グラフの色をクリムゾンにする	plt.plot(データ列x, データ列y, color='crimson')
タプルの総和	sum(aTuple)
データフレームの行を振り直す	df.reset_index()
異なるカラムをキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
数式処理を使う	import sympy
異なるカラムをキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
菱形マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: グラフの色をライトイエローに指定する	color = 'lightyellow'
Pandasで、UNIX秒の文字列からdatetime64型にする	pd.to_datetime(s, unit='s', utc=True)
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
整数nが組のどれかか調べる	n in aTuple
散布図をクリムゾン色を用いて描画する	plt.scatter(データ列x, データ列y, color='crimson')
配列を転置する	aArray.T
option: ブルーバイオレットにグラフの色を変更する	color = 'blueviolet'
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
option: 印を丸に設定する	marker = 'o'
配列と配列についての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ゼロ埋めされた複素数型の行列	np.zeros(要素数, dtype=bool)
実数の双曲線正弦の逆数	math.asinh(x)
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
データ列のユニークな値の個数	ds.nunique()
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
▼マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
双方向キューの最初から値を取り除く	deq.popleft()
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
データフレームのリスト列がどの程度、分散しているか見る	df[aList].var()
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
標準出力を即時表示する	sys.stdout.flush()
折れ線グラフの下三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ファイルをオープンして]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームのカラムの中に文字列と文字列がいくつ存在するかカウントする	df[col].isin([value, value2]).sum()
マッピングから項目名で指定された項目を取り出す	aDict.pop(key)
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
データフレームからn行ランダムサンプリングする	df.sample(n)
文字列を青色で表示する	print(f'\033[34m{value}\033[0m')
線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
列を十の位で丸める	ds.round(-1)
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
縦棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームのカラムの欠損値を直後の値に指定する	df[col].fillna(method='bfill')
option: 色をダーク・スラテグレーにする	color = 'darkslategrey'
散布図をrgbのダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
option: エラーを無視する	errors = 'ignore'
データフレームの中の列と列に重複があれば、落とす	df.drop_duplicates(subset=[column, column2])
変数名をキーとして、マップを作成する	dict(name=element)
データフレームのカラムのユニークな値	df[col].unique()
本日のタイムスタンプ	datetime.datetime.today()
異なるカラムをキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
２つのデータフレームを列をキーにして右結合する	pd.merge(df, df2, on=column, how='right')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
ネイピア数を使用する	math.e
データ列とデータ列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付データが日付データと同時かどうか調べる	aDate == aDate2
データフレームのカラムの中にいくつ日付データがあるか数える	df[col].isin([value]).sum()
データフレームを各列毎に集計して、列の最大値を計算する	df.groupby(column)[column2].max()
正規分布による累積分布関数の逆関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データを最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
文字列中のひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
平均値と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
option: 大バツマーカーを使う	marker = 'X'
データ列の平均値	ds.mean()
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図を右三角印を使って描画する	plt.scatter(データ列x, データ列y, marker='>')
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
整数nが配列のどれかか	n in aArray
イテラブルとデータ列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
配列から重複を除いたベクトルを作る	np.unique(aArray)
データフレームをカラム毎に集計し、、それぞれのグループごとの合計を求める	df.groupby(column).sum()
二進文字列を整数に変換する	int(s, 2)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
option: マーカーをダイアモンドに変える	marker = 'D'
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
二つの浮動小数点数は十分に近いかどうか調べる	math.isclose(x, x2)
日付時刻データが日付時刻データより前か	aDatetime < aDatetime2
縦棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
ベクトルの列ごとの合計を計算する	np.sum(aArray, axis=0)
文字列を最後の部分文字列によって二分する	s.rpartition(sub)
エラーなくマップからキーの値を参照する	aDict.get(key, None)
ライトシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
折れ線グラフの色をタンに指定する	plt.plot(データ列x, データ列y, color='tan')
既存の行列を元に全要素が0の行列	np.zeros_like(aArray)
線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
コーンフラワーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
計算機イプシロン	sys.float_info.epsilon
データフレームから指定した４列のみ選択する	df[[column, column2, column3, column4]]
リストを分割数nを用いてビン分割する	pd.cut(aList, n)
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
option: ディムグレーを用いる	color = 'dimgray'
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
縦棒グラフをゴールド色を使って描画する	plt.bar(データ列x, データ列y, color='gold')
二進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
キューから最初の値を取り除く	deq.remove(element)
nが1、もしくは2もしくは3に等しいか	n == 1 or n == 2 or n == 3
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
プログラムの実行をここで止める	sys.exit()
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
JSONLファイルにデータフレームを小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
データフレームをサンプリングする	df.sample()
タプルの浅いコピーを生成する	aDict.copy()
option: ▼マーカーを使う	marker = 'v'
ふたつの集合は互いに素かどうか調べる	aSet.isdisjoint(aSet2)
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
リストとリストの散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
平均値付き箱髭図を描画する	plt.boxplot(データ列, showmeans=True)
線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
データフレームのn行目を取り出す	df.loc[n]
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
データフレームの列が正規表現文字列にマッチしない行を選択する	df[not df[column].str.match(s)]
セットを空集合にする	aSet.clear()
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
Pandasでエポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
数式の変数に数式を代入する	e.subs(z, e2)
二つの集合は集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
既存のベクトルを元に全要素が1のベクトル	np.ones_like(aArray)
データ列の移り変わりを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
二つのオブジェクトは同一参照かどうか調べる	obj is obj2
配列とデータ列の散布図に黒いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
日付時刻データが水曜日か確認する	aDatetime.weekday() == 2
実線としてイテラブルの変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
行列と同じ大きさの空配列を作る	np.empty_like(aArray)
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
変数を黒色にする	f'\033[30m{value}\033[0m'
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
組のn番目からn2番目までの部分	aTuple[n:n2]
option: 色をダークスレートブルーに設定する	color = 'darkslateblue'
データフレームの中に日付データと文字列があるか調べる	df.isin([value, value2])
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
カウンタ同士で∪演算する	aCounter | aCounter2
折れ線グラフをスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='slateblue')
第二引数のファイル名	sys.argv[1]
データフレームを'A'列と'B'列によってソートする	df.sort_values(by=['A', 'B'])
option: モカシン色を使う	color = 'moccasin'
赤い点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列を最後の部分文字列で二つに区切って、残りの文字列を求める	s.rpartition(sub)[-1]
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
データフレームに重複があるか見る	df.duplicated()
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
データフレームをインデックスによって降順で整列する	df.sort_index(ascending=False)
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
標準入力から1行読み取る	input()
数列とリストについて散布図を描画して、マーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
日付時刻データは日付時刻データより前	aDatetime < aDatetime2
要素は集合のメンバーでないかどうか確認する	element not in aSet
カラムの値が欠損値かどうか調べる	ds.isna()
データフレームのカラムの中のNaNの合計を求める	df[col].isna().sum()
データ列を100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
option: グラフの色をピンクに設定する	color = 'pink'
線グラフの色をダークスレートブルーにセットする	plt.plot(データ列x, データ列y, color='darkslateblue')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
本日は何月か知る	datetime.datetime.today().month
データフレームのグループごとの最小値を算出する	df.groupby(column).min()
データ列のpercent分位数	ds.quantile(percent/100)
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
双方向キューの末尾を使う	deq[-1]
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
option: グラフの色をロイヤルブルーに指定する	color = 'royalblue'
データフレームを列ごとにグループ化して分散を計算する	df.groupby(column).var()
rgbの▲マーカーをデータ列と配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: タン色を使う	color = 'tan'
リストを引数として展開して表示する	print(*aList, sep=',')
正規分布で乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
データフレームからカラムを３つだけ選択する	df[[column, column2, column3]]
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームのリストカラムが正規分布からどの程度尖っているか見る	df[aList].skew()
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightgreen')
データフレームを二つの列によって昇順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
スレートブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
コーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
エクセルデータファイルからnとn2のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
option: 色を紺に設定する	color = 'darkblue'
nが-9以上、9以下か調べる	-9 <= n <= 9
シーケンスにリストを続ける	itertools.chain(iterable, iterable2)
データフレームのリストカラムの中にと文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
グラフのカラーテーマを濃くする	sns.set(pallete='deep')
リストとリストについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
データフレームの中の列をリストを境界値としてビンニングする	pd.cut(df[col], aList)
横棒グラフをコーンフラワーブルー色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
紺碧にヒストグラムの色を変更する	plt.hist(データ列, color='azure')
データフレームをグループ化し、列に対し分散を算出する	df.groupby(column)[column2].var()
データフレームのcollをフォーマットfmtを用いて日付データにする	pd.to_datetime(df[col], format=fmt)
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
データフレームとデータ列を横方向にくっつける	pd.concat([df, ds], axis=1)
キューをdequeue	deq.popleft()
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データ列の出現頻度を作図する	plt.hist(データ列)
タプルの末尾のn要素を捨てる	aTuple[:-n]
データフレームから先頭の列を消す	df[df.columns[1:]]
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
nとn2が等しいかどうか調べる	n == n2
データフレームの列と列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
モードでデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].mode().iloc[0])
実数の指数を算出する	math.frexp(x)[1]
線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
数式を数値にする	float(e)
データフレームの欠損値を平均値で補う	df.fillna(df.mean())
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレーム全体をインデックスで昇順に整列する	df.sort_index(ascending=True)
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
プロットを描画する準備をする	import matplotlib.pyplot as plt
ふたつの集合の共通部分	aSet.intersection(aSet2)
データ列の日を使う	ds.dt.day
リストの末尾のn要素を除く	aList[:-n]
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
nが5で割り切れるか	n % 5 == 0
実部と虚部から複素数	complex(x, y)
最大値でデータフレームのリストカラムのNaNを補う	df[aList].fillna(df[aList].max())
ヒストグラムを２つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
オブジェクトは整数かどうか調べる	isinstance(obj, int)
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの色をミントクリームにする	plt.plot(データ列x, データ列y, color='mintcream')
実数の逆双曲線正弦	math.asinh(x)
配列とリストについて散布図を描画し、バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
配列とイテラブルについて散布図を描画して、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
ヒストグラムのスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
折れ線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームのリストカラムの欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
シャルトリューズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()//60
predicateFuncを適用したときTrueとなるイテラブルの部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
ネイビー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
行列の列ごとの平均	np.mean(aArray, axis=0)
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
UNIXコマンドtextを実行する	os.system(text)
データ列をボックスチャートにする	plt.boxplot(データ列)
組内の要素は全て真か調べる	all(aTuple)
列の値によってデータフレームをグループ化し、要約統計量を算出する	df.groupby(column).describe()
リスト中の要素は全て真か調べる	all(aList)
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
二進数文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データフレームのリストカラムの中央値	df[aList].median()
ふたつの集合の対称差を使う	aSet.symmetric_difference(aSet2)
シンボル計算ライブラリを使う	import sympy
predicateFuncがtrueとなるシーケンスの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
ベクトルのユニークな要素	np.unique(aArray)
nがn2の倍数でないか調べる	n % n2 != 0
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
ファイルを書き込みモードを使ってオープンして]fとする	f = open(filepath, mode='w')
散布図を黒い左三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
行列の行ごとの平均値	np.mean(aArray, axis=1)
データ列の中にある文字列の数を数える	ds.isin([value]).sum()
全要素を初期値で初期化したベクトルを作る	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムの色をラベンダーにセットする	plt.hist(データ列, color='lavender')
改行なしに数値をプリントする	print(value, end='')
データ列の中にいくつ未入力値があるか数える	ds.isna().sum()
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
時間を使う	import time
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
データ列を正規表現patternでreplに置き換える	ds.replace(pattern, repl, regex=True)
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: フォントの色をイエローグリーンに変更する	color = 'yellowgreen'
オールドレース色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
行列の列を選択する	aArray[:, 列番号]
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
折れ線グラフの左三角印の線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフのマーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
ゼロ埋めした３二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
option: フクシア色を使用する	color = 'fuchsia'
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
option: 改行コードを動作環境依存に設定する	newline = None
option: ダークグレー色を使う	color = 'darkgrey'
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
文字列は全て識別子名か調べる	s.isidentifier()
プロットの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
ダークオリーブグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: 改行コードをUNIXに変更する	newline = '\n'
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
タイムスタンプデータからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
二つのオブジェクトが等しいか判定する	obj == obj2
データフレームを'A'列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby('A')]
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
option: グラフの色を青に設定する	color = 'blue'
組の末尾を見る	aTuple[-1]
データフレームのカラムが正規分布からどの程度尖っているか確認する	df[col].skew()
スレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='slateblue')
ライトゴールドロディイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームの列の値がx以下の行を選択する	df[df[column] <= x]
散布図に大バツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='X')
option: ダーク・スラテグレー色を用いる	color = 'darkslategrey'
option: フォントの色をミディアムターコイズに設定する	color = 'mediumturquoise'
辞書にキーが存在する	key in aDict
配列と同じ大きさの空配列を初期化する	np.empty_like(aArray)
棒グラフをスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='skyblue')
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
PandasでdateStringを日付データにする	pd.to_datetime(dateString)
折れ線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
文字列の開始位置からと終了位置までの間に部分文字列が含まれない	s.find(sub, start, end) == -1
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
ヒストグラムをダークスレートブルー色として描画する	plt.hist(データ列, color='darkslateblue')
データフレームの中の未入力値がある行を削除する	df.dropna()
データフレームの指定した3列を選ぶ	df[[column, column2, column3]]
データフレームのカラムの標本標準偏差を計算する	df[col].std()
イテラブルと配列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: モカシンを用いる	color = 'moccasin'
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
ライトブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
2つの文字列が同じか調べる	s == s2
データ列の値がNaN	ds.isna()
オブジェクトの種類	type(obj)
グラフの見栄えをよくする	import seaborn as sns
線グラフの色をシスルに指定する	plt.plot(データ列x, データ列y, color='thistle')
追加モードでファイルをオープンして]、fとする	f = open(filepath, mode='a')
option: ベクトルのデータ型を指定する	dtype = np.int
データフレームを表示するとき最大行数をnに設定する	pd.set_option('display.max_rows', n)
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
折れ線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
JSONLファイルにデータフレームをヘッダを付けずに保存する	df.to_csv(filename, header=None)
データフレームの中に文字列と文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
オブジェクトのオブジェクト識別子を使う	id(obj)
配列とリストについて散布図を描画してダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
rgbの▽マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: マーカーをダイアモンドに変更する	marker = 'D'
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
データフレームのリストカラムの最頻値を計算する	df[aList].mode()
文字列の左側から部分文字列を消す	s.lstrip(sub)
option: ラインスタイルを実線に設定する	linestyle = 'solid'
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: アイボリーを用いる	color = 'ivory'
キュー中の要素のインデックスを使う	deq.index(element)
ValueMapでデータフレームの値をまとめて置き換える	df.replace(ValueMap)
オブジェクトが辞書クラスか	isinstance(obj, dict)
オブジェクトを文字列に変換する	str(obj)
シーケンスとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
実線としてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ゴールデンロッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
文字列が空白からなるか調べる	s.isspace()
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
option: 色をアクアマリンに設定する	color = 'aquamarine'
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データ列の正規分布に対する上下広がり	ds.skew()
柱状グラフを複数並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
1文字標準入力から読む	sys.stdin.read(1)
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
インディアンレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
折れ線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列の左側から空白を除去する	s.lstrip(' ')
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
リストと配列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
option: カデットブルー色を用いる	color = 'cadetblue'
nが5で割り切れる	n % 5 == 0
散布図の▼印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
列からn個サンプリングする	random.sample(iterable, k=n)
データ列の値が正規分布にしたがって発生する確率を算出する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
nを八進文字列に変換する	oct(n)[2:]
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
今日をISO書式の文字列にする	datetime.datetime.today().isoformat()
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
列によってデータフレームを並べて、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
データフレームの全カラムの散らばりをグラフ化する	sns.pairplot(df)
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ヒストグラムと勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
ふたつの関係が上位集合もしくは等しいかどうか調べる	aSet > aSet2
ダークグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
文字列を部分文字列によって二分する	s.partition(sub)
レモンシフォン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
2を底とする実数の対数を求める	math.log2(x)
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
文字列を最初の部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
option: ピンクにグラフの色を指定する	color = 'pink'
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
nの桁数	len(str(n))
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
行列の形を求める	aArray.shape
赤い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
日付データが日曜日か確認する	aDate.weekday() == 6
数列の推移を点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
リストとリストについての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
縦棒グラフをプロットして、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
配列の和	aArray + aArray2
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
バイナリ書き込みできるようにファイルをオープンする]	open(filepath, mode='wb')
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
データフレームを列名リストで並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
rgbのポイントマーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
上限を指定して、両端キュー	collections.deque(maxlen=n)
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
rgbのポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
三つ並べてヒストグラムを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
グラフを用いる準備をする	import matplotlib.pyplot as plt
折れ線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategrey')
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
カウンタをマッピングを用いて更新する	aCounter.update(aDict)
実数のハイパボリック・タンジェント	math.tanh(x)
ケンドール相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
集合の浅いコピー	aSet.copy()
表データの中で列と列に重複があるか見る	df.duplicated(subset=[column, column2])
配列とリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
二つのオブジェクトは同一参照か調べる	obj is obj2
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ローングリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
今日が日曜日か	datetime.datetime.today().weekday() == 6
日付データの日数を使う	aDate.day
ピアソンとしてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
列と列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
淡いピンク色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
折れ線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームのリスト列が正規分布からどれだけ、尖っているか調べる	df[aList].skew()
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ファイルパスをSJISで書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
複素数を計算する	complex(x, y)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
データフレームをグループ化し、それぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
ファイル名がJSONファイルか調べる	filename.endswith('.json')
option: ▲印を描画する	marker = '^'
nマイナスn2	n - n2
nが負の整数かどうか調べる	n < 0
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
大文字を全て使う	string.ascii_uppercase
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
正則化付き単回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: グラフの色をミディアムパープルに変更する	color = 'mediumpurple'
ゴールド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
値が集合に含まれないかどうか	element not in aSet
option: インディゴ色を使う	color = 'indigo'
にバイオリン図を用いてデータフレームの列を可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
二つ並べてリストをヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
クラス分類の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
耐火レンガ色としてヒストグラムを描画する	plt.hist(データ列, color='firebrick')
データ列の文字列長を列として見る	ds.str.len()
パラメータが無限大に近づく場合の数式の極限値を求める	sympy.limit(e, z, oo)
option: 色をゴールドに指定する	color = 'gold'
線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
option: シーグリーン色を使用する	color = 'seagreen'
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
ティール色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
標準入力から改行なしに1行分読む	sys.stdin.readline().rstrip()
日付データが何月か知る	aDate.month
リストとリストについての散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームを各列毎にグループ化し、、列の平均値を計算する	df.groupby(column)[column2].mean()
折れ線グラフを青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
カラムの未入力値を最小値で埋める	ds.fillna(ds.min())
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
実数を3乗する	x ** 3
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
nから無限にカウントアップする	itertools.count(start=n)
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
破壊的に重複したデータをデータフレームから落とす	df.drop_duplicates(inplace=True)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
標準エラーを	sys.stderr
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='turquoise')
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
文字列を全て大文字に変換する	s.upper()
列の値毎にデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
option: ライトサーモン色を使う	color = 'lightsalmon'
データフレームの中に日付データと日付データがいくつあるかカウントする	df.isin([value, value2]).sum()
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
黒いポイントマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: フォントの色をシアンに設定する	color = 'cyan'
列を配列に変換する	df[column].values
赤い破線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
リストのn番目の要素を削除する	del aList[n]
日付データは日付データより遅いか調べる	aDate > aDate2
ホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
NaN	math.nan
TSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームから型の列を抽出する	df.select_dtypes(ty)
クラス分類のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
多次元データを多次元尺度構成法として濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
nとn2が同じ値かどうか確認する	n == n2
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
プラム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
文字列中に部分文字列が含まれないか調べる	sub not in s
option: ホットピンク色を使う	color = 'hotpink'
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
rgbの丸マーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ファイルを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
タイムスタンプデータにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
三つの文字列を順にプリントする	print(value, value2, value3)
PandasでデータフレームのcollをフォーマットでPandasの日付型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
実行結果をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
タプルを小さい方からソートする	sorted(aTuple, reverse=True)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームから型リストで指定されたデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
全要素を０で初期化した行列	np.zeros(行数, 列数)
縦棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフの三角印を赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in s)
回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
表データからn行サンプリングする	df.sample(n)
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
カラーバーを横向きでプロットする	plt.colorbar(orientation='horizontal')
データフレームのリストカラムの中の未入力値の合計を数える	df[aList].isna().sum()
配列の分散を求める	np.var(aArray)
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
データフレームを'A'列の値によってグループ化し、要約統計量を計算する	df.groupby('A').describe()
列名リストでによって大きい順にデータフレームを並べ直す	df.sort_values(by=column, ascending=False)
データフレームのカラムの名前の一覧を使う	df.columns
文字コードtextでファイルをオープンする]	open(filepath, encoding=text)
year年day月を日付時刻にする	datetime.datetime(year=year, month=month, day=1)
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームのリスト列の母標準偏差	df[aList].std(ddof=0)
データ列の値が欠損値	ds.isna()
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームの列がxの行を抽出する	df[df[column] == x]
データフレームを'A'列の値によってグループ化し、記述統計量を求める	df.groupby('A').describe()
カウンタの項目数を使う	len(aCounter)
option: 三角印を加える	marker = '^'
値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
本日が金曜日か	datetime.datetime.today().weekday() == 4
データ列のタイムゾーンを文字列に指定する	ds.tz_convert(s)
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
点線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
バイトオーダを確める	sys.byteorder
タプルの長さ	len(aTuple)
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームを複数の列で大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームから一番左側の列を消す	df[df.columns[1:]]
リストと数列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
集合が空でないかどうか調べる	len(aSet) != 0
カウンタ同士でユニオン演算する	aCounter | aCounter2
文字列が文字列より辞書順で前か調べる	s < s2
option: コーラル色を用いる	color = 'coral'
カウンタから列を出現回数して減らす	aCounter.subtract(iterable)
二つの文字列を改行せず表示する	print(value, value2, end='')
イテラブルと配列をチェインする	itertools.chain(iterable, iterable2)
折れ線グラフの色をブランチドアーモンドにする	plt.plot(データ列x, データ列y, color='blanchedalmond')
リストと配列の散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
二つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
文字列の先頭から部分文字列を探す	s.find(sub)
n個に等間隔で配列を分割する	pd.cut(aArray, n)
データフレームをJSONLファイルにBOMを付けて保存する	df.to_csv(filename, encoding='utf_8_sig')
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
プロットをPNGファイルとして保存する	plt.savefig('foo.png')
ヒストグラムをスノー色を使って描画する	plt.hist(データ列, color='snow')
データフレームのデータ型の一覧を使う	df.dtypes
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
option: ライム色を使用する	color = 'lime'
文字列のケースを逆にする	s.swapcase()
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
イテラブルからn要素、サンプリングする	random.sample(iterable, k=n)
分割数nで等しい量になるように列をビン分割する	pd.qcut(ds, n)
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
option: ライトスカイブルー色を使用する	color = 'lightskyblue'
filepathにワーキングディレクトリを変更する	os.chdir(os.dirname(filepath))
option: スチールブルーを使う	color = 'steelblue'
散布図をコーンフラワーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
カテゴリで色分けして、データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図を黒い丸マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
カウンタの項目を増やす	aCounter[element] += 1
データフレームをタブ区切りでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
ファイルパスから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
数列とイテラブルについての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
カラムを小数点以下n桁で四捨五入する	ds.round(n)
データフレームを表示するとき小数点以下の表示精度を指定する	pd.set_option('precision', n)
データフレームの列を散布図としてプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
文字列をカンマで分割して列挙する	s.split(',')
'A'列によってデータフレームをまとめた表	df.groupby('A')
ASCII限定として正規表現を事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
year年month月day日hour時を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームを二つの列の値でグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
スペクトル分解を行う	model = sklearn.decomposition.PCA(n_components=n)
赤い左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: フローラルホワイトを使う	color = 'floralwhite'
空の辞書を作成する	{}
ヒストグラムの色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
実行結果を水色でプリントできる文字列にする	f'\033[36m{value}\033[0m'
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
折れ線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
データフレームから重複したデータをドロップして、更新する	df.drop_duplicates(inplace=True)
データフレームのカラムが何曜日か確認する	df[col].dt.weekday_name
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
データフレームのカラムの分散を求める	df[col].var()
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=column)
ヒートマップを使ってクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: ダークオレンジ色を使う	color = 'darkorange'
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームをから読み込む	pd.read_excel(filename)
線グラフを赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
数式を部分分数に展開する	sympy.apart(e)
両端キューをデキューする	deq.popleft()
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
option: グラフの色をダークターコイズに変更する	color = 'darkturquoise'
リストから文字列と等しい最初の要素を除く	aList.remove(element)
グローバル変数の一覧	globals()
option: エンコーディングを文字列の示すエンコーディングに変更する	encoding = s
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
グラフに使用するフォントを指定する	sns.set(font=フォント名)
プロットから格子を消す	plt.grid(False)
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
2つのデータフレームを横向きに一つにする	pd.merge(df, df2)
ゴーストホワイト色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
シンボル計算を使う	import sympy
数列とリストの散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
3自然数の最大公約数	math.gcd(n, n2, n3)
ファイルをUTF8で開く]	open(filepath, encoding='utf-8')
option: ダークレッドにグラフの色を変更する	color = 'darkred'
グラフの凡例を表示する	plt.legend()
折れ線グラフの▲マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
データフレームを各列毎にグループ化し、、列の最大値を計算する	df.groupby(column)[column2].max()
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
EUCでファイルをオープンする]	open(filepath, encoding='euc_jp')
四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ヒストグラムの色をオールドレースに変更する	plt.hist(データ列, color='oldlace')
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
配列の累積和	np.cumsum(aArray)
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
リストとイテラブルの直積	itertools.product(iterable, iterable2)
一点鎖線としてリストの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
２つのリストから辞書	dict(zip(aList, aList2))
列とシーケンスを連結する	itertools.chain(iterable, iterable2)
データフレームの指定された列を配列として抽出する	df[column].values
rgbの四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストを等量でビン数nを用いてビン分割する	pd.qcut(aList, n)
プロットを正方形にする	plt.axis('equals')
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図をライトサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
option: ミディアムシアグリーンにグラフの色を設定する	color = 'mediumseagreen'
グラフに用いる横軸に説明を付ける	plt.xlabel('x軸ラベル')
リストにリストを展開する	aList.extend(aList2)
列のNaNを直後の値に指定する	ds.fillna(method='bfill')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
横棒グラフをパールバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
散布図に左三角印を加える	plt.scatter(データ列x, データ列y, marker='<')
nがn2で割り切れるか	n % n2 == 0
リストと数列の散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
option: イエローグリーンを使う	color = 'yellowgreen'
正規表現を前もってコンパイルする	re.compile(pattern)
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
データフレームの行を範囲指定して選択する	df[start:end]
データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ヒートマップでデータフレームのリスト列の相関行列を描画する	sns.heatmap(df[aList].corr())
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
実数の天井を求める	math.ceil(x)
データフレームのリスト列を丸めて、整数型にする	df[aList].round().astype(int)
各列毎にデータフレームをグループ化して、列の個数を算出する	df.groupby(column)[column2].count()
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
ダークシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
２次元リストをフラット化する	sum(aList)
折れ線グラフを青い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
表データからランダムに一行を取り出す	df.sample()
データフレームを'A'列でまとめた表	df.groupby('A')
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
青い破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: グラフの色をミディアムパープルにセットする	color = 'mediumpurple'
nマイナスn2を求める	n - n2
option: 色をシャルトリューズに変更する	color = 'chartreuse'
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームのリスト列の文字列をNaNに変換する	df[aList].replace(s, np.nan)
配列とリストについての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ミディアムオーキッドにヒストグラムの色をセットする	plt.hist(データ列, color='mediumorchid')
データフレームをグループ化し、列に対し標準偏差を計算する	df.groupby(column)[column2].std()
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
新しい重回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
目盛り線	plt.grid(alpha=0.5)
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
縦棒グラフをダークカーキ色を使って描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
小数点以下をn桁に指定する	pd.set_option('precision', n)
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
赤い一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
マゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
値を下線付き化する	f'\033[4m{value}\033[0m'
折れ線グラフをバリーウッド色を用いて描画する	plt.plot(データ列x, データ列y, color='burlywood')
Pandasで、エポック秒のデータフレームのcollからタイムスタンプ型にする	pd.to_datetime(df[col], unit='s', utc=True)
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームが正規分布からどれだけ、歪んでいるか確認する	df.kurt()
プログラムのファイルの名前を知る	sys.argv[0]
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームを列ごとにグループ化し、個数を計算する	df.groupby(column).count()
nとn2の値を足してnとする	n += n2
散布図の左三角印を赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームのリスト列の欠損値を前の行の値で置き換える	df[aList].fillna(method='ffill')
バイナリ書き込みモードとしてファイルをオープンする]	open(filepath, mode='wb')
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
CSVファイルファイル名が	filename.endswith('.csv')
グラフのインチをセットする	plt.figure(figsize=(横幅, 高さ))
グレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
option: サドルブラウン色を用いる	color = 'saddlebrown'
両端キューが空か	len(deq) == 0
変数を青色でプリントする	print(f'\033[34m{value}\033[0m')
集合から別の集合の要素を取り除く	aSet.difference_update(aSet2)
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ボックスチャートを二つ並べて描く	plt.boxplot([データ列, データ列])
nを切り捨てながらn2分の１にする	n //= n2
四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
キーがタプルにないとき、要素を追加する	aDict.setdefault(key, element)
折れ線グラフを色付きの点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームをインデックスでソートする	df.sort_index()
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
データフレームのリスト列の中にある文字列の数を数える	df[aList].isin([value]).sum()
折れ線グラフに下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
データ列の未入力値を中央値に設定する	ds.fillna(ds.median())
option: 色を赤にする	color = 'red'
データフレームを見る	df.head()
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図に青い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: カデットブルーに色を設定する	color = 'cadetblue'
n進数文字列をバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
整数nの2進表現	bin(n)
数式のパラメータに数式を代入する	e.subs(z, e2)
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームの列の文字列で文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
縦棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームの内のNaNが存在する行を削除する	df.dropna()
ヒストグラムの色を小麦色にする	plt.hist(データ列, color='wheat')
オレンジにヒストグラムの色を変更する	plt.hist(データ列, color='orange')
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
横棒グラフを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
nが配列のどれかか調べる	n in aArray
標準エラーを使う	sys.stderr
タプルの中の最小値を求める	min(aTuple)
現在が何分か知る	datetime.date.today().minute
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
要素がマップの値として含まれているか調べる	element in aDict.values()
option: グラフの色をダークブルーに設定する	color = 'darkblue'
グラフの簡単な説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
データフレームを各列毎にグループ化し、、文字列というグループを求める	df.groupby(column).get_group(s)
データフレームのカラムの欠損値を後の行の値で補う	df[col].fillna(method='bfill')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
マッピングから多重集合を生成する	collections.Counter(aDict)
散布図に黒い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
折れ線グラフの色をデピンクに変更する	plt.plot(データ列x, データ列y, color='deeppink')
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategrey')
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームを'A'列でによって降順にソートする	df.sort_values(by='A', ascending=False)
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
ヒストグラムをライトブルー色を用いて描画する	plt.hist(データ列, color='lightblue')
ライトイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームの重複する行数のマスク	df.duplicated()
値をシアンで出力する	print(f'\033[36m{value}\033[0m')
列の欠損値を第二四分位数で埋める	ds.fillna(ds.median())
データフレームのNaNを前の値に増やす	df.fillna(method='ffill')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: 小麦色色を使用する	color = 'wheat'
数列を縦軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
n2がnより大きくかつ、n3未満か調べる	n < n2 and n2 < n3
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
オブジェクトがリストかタプルか調べる	isinstance(obj, (list)
文字列の中のASCII限定として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列が文字列リストに含まれるか調べる	s in aStringList
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
n掛けるn2を計算する	n * n2
ラインの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: データ型として複素数型を使う	dtype = bool
線グラフをスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='skyblue')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
正規表現に文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームのカラムのNaNを最小値に設定する	df[col].fillna(df[col].min())
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
option: フォントの色をライトスレイグレーに指定する	color = 'lightslategrey'
リストを下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
分類結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
マップの項目名とその項目を列挙する	aDict.items()
rgbの大バツマーカーを配列と数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
空白が文字列内に含まれる	any(c.isspace() for c in s)
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ユニコードを文字にする	chr(unicode)
リストを白色にする	f'\033[37m{value}\033[0m'
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
四角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
文字列がひらがなか調べる	('ぁ' <= ch <= 'ん')
xが-9以上、9以下か調べる	-9 <= x <= 9
リストと数列について散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
八進文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
文字列の先頭が部分文字列かどうか調べる	s.startswith(sub)
縦棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
配列とデータ列について散布図をプロットし、、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
最後の部分文字列で文字列を二分し前半の文字列を求める	s.rpartition(sub)[0]
0から始まる無限な整数リストを得る	itertools.count()
データ列の折れ線グラフを描画し、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
列名リストを用いてを用いて破壊的にデータフレームをソートする	df.sort_values(by=column, inplace=True)
実数が整数	x.is_integer()
nが1、もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
二つのリストの積集合を求める	list(set(aList) & set(aList2))
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
ダークマゼンタ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
逆双曲線余弦	math.acosh(x)
リストとリストの散布図を描いて、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
カデットブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データ列の移り変わりを青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ゴーストホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
整数の複素数	complex(x)
行列と同じ大きさの空の配列を初期化する	np.empty_like(aArray)
option: サンディーブラウン色を使用する	color = 'sandybrown'
浮動小数点数の双曲線余弦の逆数	math.acosh(x)
行列の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
横棒グラフをロージーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='rosybrown')
イテラブルとリストについての散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
縦棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
リストとデータ列についての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
コーンフラワーブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
実数とyのノルムを求める	math.hypot(x, y)
折れ線グラフの色をシエナにする	plt.plot(データ列x, データ列y, color='sienna')
ベクトルの累積和	np.cumsum(aArray)
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
散布図にrgbの下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
二つの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
集合が空集合でないかどうか調べる	len(aSet) != 0
option: 紺碧色を使う	color = 'azure'
大バツ印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
列から両端キューを作る	collections.deque(iterable)
色付きの点線を用いて折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
データ列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
列名リストの値でデータフレームをグループ化し、基本統計量を求める	df.groupby(columns).describe()
文字列はタイトル大文字小文字かどうか	s.istitle()
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
ボックスチャートに簡単な説明を設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
オブジェクトのバイトサイズを知る	sys.getsizeof(obj)
option: 区切り記号を使わない	sep = ''
菱形印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームをまとめて四捨五入する	df.round()
リストと配列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
辞書をインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
スラグレーにヒストグラムの色を変更する	plt.hist(データ列, color='slategray')
文字列を空白によって区切る	s.split()
マップの項目名の値	aDict[key]
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
option: パウダーブルー色を用いる	color = 'powderblue'
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
データ列を十の位で丸める	ds.round(-1)
データ列がどれだけ、分散しているか調べる	ds.var()
データ列が何時か確認する	ds.dt.hour
今日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
ヒートマップを用いてクラス分類の予測精度を確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ファイルを一行ずつ読み込む	f.readline()
リストの文字列が最初に見つかるインデックス	aList.index(element)
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
ベクトルを一次元化する	aArray.flatten()
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
双方向キューを空にする	deq.clear()
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
現在の時間	datetime.date.today().hour
プログラムの実行をエラーとして終える	sys.exit(1)
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: グラフの色をスレートブルーに指定する	color = 'slateblue'
データフレームを'A'列と'B'列を用いて降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
真上位集合かどうか調べる	aSet > aSet2
ひとつ置きにタプルを得る	aTuple[::2]
文字列をコロンで分割して文字列リストにする	s.split(':')
等量でn個にデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
文字列が文字列より辞書順で後か調べる	s > s2
フォーマットfmtで文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
文字列が文字列リストのいづれか調べる	s in aStringList
黒いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
線グラフをダークサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
ダークバイオレット色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
日付データにn週間分加える	aDate + datetime.timedelta(weeks=n)
ベクトルは何次元か調べる	aArray.ndim
折れ線グラフの右三角印を黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
データフレームの全列の相関を可視化する	sns.pairplot(df)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
データフレームとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
折れ線グラフの上三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: オリベドラブ色を使用する	color = 'olivedrab'
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
等量でデータ列をn個にビン分割する	pd.qcut(ds, n)
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
option: ミディアムスプリンググリーンを用いる	color = 'mediumspringgreen'
カーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
イエローグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
クリムゾン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフにダイアモンド印を使う	plt.plot(データ列x, データ列y, marker='D')
option: グラフの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
棒グラフをイエローグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
リストとイテラブルの散布図を描画して、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
配列と同じ大きさの空の配列を作成する	np.empty_like(aArray)
新しい文字列で文字列を全て置き換える	s.replace(sub, newsub)
データフレームを複数の列でソートする	df.sort_values(by=column)
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームを列によってグループ化し、、それぞれのグループ毎の最大値を計算する	df.groupby(column).max()
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
整数の順列の総数を算出する	math.perm(n)
散布図をスノー色を使って描画する	plt.scatter(データ列x, データ列y, color='snow')
指定した値でデータ列をバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
折れ線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
nがn2未満、もしくはn3以上か判定する	n < n2 or n >= n3
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
横棒グラフをブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='brown')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
option: 色をオレンジレッドに変更する	color = 'orangered'
データフレームのリスト列の欠損値をモードに増やす	df[aList].fillna(df[aList].mode().iloc[0])
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
集合をリストに変換する	list(aSet)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
データフレームから重複するデータを残さず、削除する	df.drop_duplicates(keep=False)
JSON形式の入力ストリームを読み込んで、dataとする	data = json.load(fin)
カウンタ同士でユニオンを計算する	aCounter | aCounter2
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
オブジェクトのプロパティを消す	delattr(obj, プロパティ名)
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
ファイルからストリームを開いて]、fileとする	file = open(filepath)
データ列の母標準偏差	ds.std(ddof=0)
データフレームを列をキーにして並べ直す	df.sort_values(by=column)
横棒グラフをブラウン色で描画する	plt.barh(データ列x, データ列y, color='brown')
option: ターコイズにフォントの色を設定する	color = 'turquoise'
平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
色付きの一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
ヒストグラムの色をカデットブルーにセットする	plt.hist(データ列, color='cadetblue')
グラフの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
データフレームを'A'列と'B'列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
カウンタからゼロ出現回数を削除する	+aCounter
option: リネンにフォントの色を設定する	color = 'linen'
線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
n行を表からランダムに重複ありでサンプリングする	df.sample(n, replace=True)
データフレームのカラムの尖度を求める	df[col].skew()
ダークマゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
タプルの末尾	aTuple[-1]
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
データフレームの列と列の各列間の相関係数を計算する	df[[column, column2]].corr()
散布図に四角印を使う	plt.scatter(データ列x, データ列y, marker='s')
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
組の先頭の要素を見る	aTuple[0]
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
オブジェクトは文字列クラスか	isinstance(obj, str)
線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
タプルとイテラブルの直積	itertools.product(iterable, iterable2)
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategrey')
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
データフレームを'A'列と'B'列でで大きい順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
散布図をダークグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
自然数の最大公約数を算出する	math.gcd(n, n2)
実数のsin	math.sin(x)
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
計数器を辞書から作る	collections.Counter(aDict)
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
度数分布図の描き、、正規化する	plt.hist(データ列, density=True)
リストとリストについての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
円グラフをきれいな円にする	plt.axis('equals')
イテラブルから計数器を作成する	collections.Counter(iterable)
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
半透明の点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
リストを展開して表示する	print(*aList)
配列とリストについて散布図を描画して、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームのリストカラムの欠損値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
文字列の後ろからタブを取り除く	s.rstrip('\t')
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
列の値でデータフレームをグループ分けして、各グループの平均値を算出する	df.groupby(column).mean()
option: ミスティローズを使う	color = 'mistyrose'
二つ並べてリストを箱髭図にする	plt.boxplot([データ列, データ列])
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
カウンタの文字列数	len(aCounter)
グラフの色を暗くする	sns.set(pallete='dark')
散布図をネイビー色を用いて描画する	plt.scatter(データ列x, データ列y, color='navy')
option: コロンをセパレータで使う	sep = ':'
文字列中にひとつでも非数字があるかどうか調べる	any(not c.isdigit() for c in s)
データフレームで列に重複があるか見る	df.duplicated(subset=column)
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
マッピングのの一覧	aDict.values()
イテラブルと数列について散布図を描き、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
散布図をモカシン色を使って描画する	plt.scatter(データ列x, データ列y, color='moccasin')
モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
オリーブ色としてヒストグラムを描画する	plt.hist(データ列, color='olive')
散布図の丸マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
データフレームのリストカラムの正規分布に対する左右対称性	df[aList].kurt()
リストをひとつ飛ばしで取り出す	aList[::2]
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
文字列を改行を使って区切る	s.splitlines()
ファイル全体を行分割して読む	f.readlines()
未定値	None
カラムの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
n個の要素があるリスト	[element] * n
要素がセットの要素かどうか調べる	element in aSet
option: ミッドナイトブルーにグラフの色を指定する	color = 'midnightblue'
数列とリストについて散布図を描画して、文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
option: アンティークホワイトを使う	color = 'antiquewhite'
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
文字列が数字か	s.isdigit()
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのリスト列の欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
ラインを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
辞書をコピーする	dict(aDict)
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
３つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
最大長nの両端キューをイテラブルから準備する	collections.deque(iterable, maxlen=n)
線グラフを色付きの破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
キューの要素をインプレースに反転する	deq.reverse()
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
文字列を右から部分文字列で区切る	s.rsplit(sub)
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
ファイルを一行ずつ読む	f.readline()
nをn2だけ減少させる	n -= n2
option: 紺碧色を使用する	color = 'azure'
データフレームのカラムの値をValueMapでまとめて変更する	df[col].replace(ValueMap)
タプルをカンマ区切りでプリントする	print(*aTuple, sep=',')
集合から全ての要素を取り除く	aSet.clear()
行列の列ごとの分散を計算する	np.var(aArray, axis=0)
option: 色をライトグリーンに設定する	color = 'lightseagreen'
2つの文字列を改行なしに表示する	print(value, value2, end='')
配列の次元を変形する	aArray.reshape(行数, 列数)
現在処理中の例外を情報	sys.exc_info()
両端キューのn番目を見る	deq[n]
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
データフレームのリストカラムの未入力値を直前の値で置換する	df[aList].fillna(method='ffill')
データフレームのリスト列の欠損値を最頻値にセットする	df[aList].fillna(df[aList].mode().iloc[0])
多次元データをt-SNEとしてパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
文字列の右側から改行を取り除く	s.rstrip()
データフレームのカラムの中にいくつ欠損値が含まれるかカウントする	df[col].isna().sum()
折れ線グラフの▼印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
集合をリストにする	list(aSet)
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データフレームのリストカラムの正規分布に対する左右対称性を算出する	df[aList].kurt()
データフレームの列のユニークな要素	df[col].unique()
データフレームから重複した行を削除する	df.drop_duplicates()
数列とリストについて散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
パールゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
縦棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
option: グラフの色をサーモンに設定する	color = 'salmon'
option: 値を置き換える	inplace = True
プロットを使う準備をする	import matplotlib.pyplot as plt
リストを引数として展開してプリントする	print(*aList)
Pandasで、フォーマットとしてデータフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col], format='%Y-%m-%d')
二数の最大値を算出する	max(x, y)
グラフの色をパステル調にする	sns.set(pallete='pastel')
等間隔で配列をn個にビン分割する	pd.cut(aArray, n)
option: ダークシアグリーンにフォントの色を指定する	color = 'darkseagreen'
ヒストグラムの色をミディアムパープルにする	plt.hist(データ列, color='mediumpurple')
折れ線グラフの色をゴールドにセットする	plt.plot(データ列x, データ列y, color='gold')
データフレームのリスト列の中に文字列があるか調べる	df[aList].isin([value])
線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
日付時刻データの年	aDatetime.year
二つの集合は互いに素	aSet.isdisjoint(aSet2)
option: フォントの色をチョコレートに指定する	color = 'chocolate'
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
破壊的にデータフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
イテラブルの全順列を得る	itertools.permutations(iterable)
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
赤い左三角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
赤い点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
MLPでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
要素がセットに含まれるかどうか調べる	element in aSet
リストとイテラブルについて散布図を描画して、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
コレクションを用いる	import collections
右三角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
実数を２乗する	x ** 2
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
行列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
折れ線グラフに下三角印を加える	plt.plot(データ列x, データ列y, marker='v')
ライトスチールブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
カテゴリ列で色付けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
横に並べてボックスチャートを描画する	plt.boxplot([データ列, データ列])
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
辞書の項目名とその値をペアとして取り出す	aDict.items()
リストをイミュータブルにする	tuple(aList)
双方向キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
t-SNEを用いて淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データ列の中にが含まれるか調べる	ds.isin([value])
データフレームを二つの列によって降順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
黒い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列の開始位置番目と終了位置番目の間に部分文字列がない	s.find(sub, start, end) == -1
線グラフの色をライトサーモンにする	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をティールに指定する	plt.plot(データ列x, データ列y, color='teal')
データ列の推移を半透明の一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
option: ゴールドに色を設定する	color = 'gold'
カラムをValueMapでまとめて置換する	ds.replace(ValueMap)
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
カンマで区切って二つの数値をプリントする	print(value, value2, sep=',')
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
シエナ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
データフレームのカラムの値をValueMapで一度に置換する	df[col].replace(ValueMap)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
パールゴールデンロッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
文字列中にひとつでも非アスキー文字があるか	any(not c.isascii() for c in s)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
データフレームから指定された二つの列のみ抽出する	df[[column, column2]]
イテラブルとリストについての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の無限列を求める	itertools.repeat(element)
数値をキューの最初に入れる	deq.appendleft(element)
option: 下三角マーカーを描画する	marker = 'v'
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
データフレームから指定された2列を抽出する	df[[column, column2]]
option: 3二ビット整数型を使う	dtype = np.int16
データフレームの中のカラムを等量でビン数nを使って分割する	pd.qcut(df[col], n)
タブで区切って２つの値を出力する	print(value, value2, sep='\t')
折れ線グラフの四角印の色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
表をグループ化し各列に対し分散を計算する	df.groupby(column)[column2].var()
ファイルからベースファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
データフレームの列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
ヒストグラムの色をホットピンクにセットする	plt.hist(データ列, color='hotpink')
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ヒストグラムの色を紺碧にする	plt.hist(データ列, color='azure')
カーキ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
最大値・最小値の範囲を用いて一様な乱数	random.uniform(最小値, 最大値)
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: フクシア色を使う	color = 'fuchsia'
データフレームのカラムをにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図の星マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
双方向キューの最初に要素を付け加える	deq.appendleft(element)
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
複素数を求める	complex(x, y)
データフレームの中で、列と列の重複を調べる	df.duplicated(subset=[column, column2])
カテゴリで色分けして、にバイオリン図としてデータフレームを見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフを紺色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
文字列中の正規表現を新しい文字列で置換する	re.sub(pattern, newsub, s)
データフレームを列ごとにグループ化して、それぞれのグループの分散を計算する	df.groupby(column).var()
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
リストを紫色で表示できる文字列に変換する	f'\033[35m{value}\033[0m'
縦棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
文字列中に非アルファベットが含まれるか確認する	any(not c.isalpha() for c in s)
option: ピンクに色を変更する	color = 'pink'
棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
option: 紺碧を用いる	color = 'azure'
配列としてデータフレームの指定された列を選択する	df[column].values
option: アリスブルー色を使用する	color = 'aliceblue'
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
折れ線グラフを描き、、色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
データフレームを100の位で丸める	df.round(-2)
箱ひげ図で数列を描く	plt.boxplot(データ列)
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
列から最大長nの双方向キューを作る	collections.deque(iterable, maxlen=n)
グラフの描画で暗くパレットを使う	sns.set(pallete='dark')
数列とリストについての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームのリスト列の第一四分位数を求める	df[aList].quantile(0.25)
シーグリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='seagreen')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
折れ線グラフをオーキッド色を使って描画する	plt.plot(データ列x, データ列y, color='orchid')
リストと数列の散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: マーカーを▲に変更する	marker = '^'
昇順にデータフレームを'A'列によって並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
デックの要素を左にn個分輪番で回す	deq.rotate(-n)
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
option: グラフの色を青緑に指定する	color = 'teal'
プロットの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
三二ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
ダークブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategrey'
プログラムのファイルの名前	sys.argv[0]
配列のスカラー倍	aArray * n
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
整数nがセットのどれかか調べる	n in aSet
格子をグラフに入れる	plt.grid(True)
ヒストグラムの色をライムに変更する	plt.hist(データ列, color='lime')
ベクトルの各要素の最小公倍数	np.lcm(aArray, aArray2)
y座標を対数目盛に変更する	plt.yscale('log')
データフレームを二つの列を用いてソートする	df.sort_values(by=['A', 'B'])
option: ダークマゼンタを用いる	color = 'darkmagenta'
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
上位集合か調べる	aSet.issuperset(aSet2)
配列とリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
集合が空集合か	len(aSet) == 0
昇順にデータフレームを複数の列によってソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
ダークシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームの中に存在する日付データの数を数える	df.isin([value]).sum()
クラス分類をK最近傍法を用いて行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
横棒グラフを濃い青色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: グラフの色をディムグレーに設定する	color = 'dimgray'
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
配列と数列についての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: 色をモカシンに変更する	color = 'moccasin'
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームを複数の列の値でグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
option: マゼンタを使う	color = 'magenta'
データフレームを各列毎にグループ化し、、列の個数を求める	df.groupby(column)[column2].count()
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
折れ線グラフの色をシアンにセットする	plt.plot(データ列x, データ列y, color='cyan')
十六進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: 色をライトスレイグレーに設定する	color = 'lightslategray'
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
散布図に下三角印を加える	plt.scatter(データ列x, データ列y, marker='v')
クラス分類の偽陰性を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ダークスラテグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームを使う	import pandas as pd
ダークスラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
散布図に赤い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
ダークシアン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
配列をビン数nでビン分割する	pd.cut(aArray, n)
列の中に文字列と文字列があるかどうか調べる	ds.isin([value, value2])
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
組をnから番号付けする	enumerate(aTuple, start=n)
ファイルのベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
書式を辞書で文字列整形する	formatText.format_map(aDict)
データフレームから型リストで指定されたデータ型のカラムを抽出する	df.select_dtypes(include=typeList)
xが一桁の正の整数	0 <= x <= 9
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
TSVをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
データフレームのカラムのタイムゾーンを日本に指定する	df[col].tz_convert('Asia/Tokyo')
プロットの描画でパステル調にカラーパレットを使用する	sns.set(pallete='pastel')
部分文字列で部分文字列が開始する	s.startswith(sub)
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
x軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
データフレームを列名リストの値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
二つの表を縦方向に連結する	pd.concat([df, df2])
フォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームの行の一覧	df.index
リストの最初の文字列を探す	aList.index(element)
横棒グラフをコーンズシルク色として描画する	plt.barh(データ列x, データ列y, color='cornsilk')
option: グラフの色を黄色に指定する	color = 'yellow'
散布図をティール色で描画する	plt.scatter(データ列x, データ列y, color='teal')
n個にリストを分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
リストとリストの散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームのリストカラムのNaNをモードに変更する	df[aList].fillna(df[aList].mode().iloc[0])
第一引数で指定されたファイル名	sys.argv[1]
option: ライトスレイグレー色を使う	color = 'lightslategray'
データフレームを整数に丸める	df.round()
option: セパレータを文字列にする	sep = s
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
両端キューのn番目を使う	deq[n]
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
option: グラフの色をサドルブラウンにする	color = 'saddlebrown'
option: グラフの色をスラグレーに設定する	color = 'slategrey'
ロージーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='rosybrown')
列からサンプリングする	random.sample(iterable)
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
タブを使う	'\t'
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
列と列の直積	itertools.product(iterable, iterable2)
棒グラフを黄色色を用いて描画する	plt.bar(データ列x, データ列y, color='yellow')
文字列を緑色にする	f'\033[32m{value}\033[0m'
option: グラフの色を暗い赤に設定する	color = 'darkred'
線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列中の大文字を小文字に変換する	s.lower()
nにn2を足して代入する	n += n2
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
グリーンイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
縦棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
双方向キューの上限長	deq.maxlen
option: オレンジ色を使用する	color = 'orange'
クリムゾンにヒストグラムの色を指定する	plt.hist(データ列, color='crimson')
列からn個ランダムに選ぶ	random.choices(iterable, k=n)
スカイブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
折れ線グラフに黒い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
option: 三角印を描画する	marker = '^'
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
option: インディアンレッドに色を変更する	color = 'indianred'
円グラフでリストのパーセントを可視化する	plt.pie(データ列, startangle=90)
箱ヒゲ図を描画し、、平均を加える	plt.boxplot(データ列, showmeans=True)
グラフの横軸にラベルをつける	plt.xlabel('x軸ラベル')
配列と数列の散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
モデルの残差を求める	目的変数 - model.predict(説明変数)
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
整数nがリストのいづれか	n in aList
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
option: 回帰木の深さを制限する	maxdepth = n
スクリプトファイルと同じフォルダのファイルのパスを求める	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
nがn2で割り切れないか	n % n2 != 0
グラフのx軸にラベルを付ける	plt.xlabel('x軸ラベル')
リストの合計を計算する	sum(aList)
関数の値によって表データをグループ化する	df.groupby(関数)
ひとつでも非アルファベットが文字列中に含まれる	any(not c.isalpha() for c in s)
データ列は何曜日か確認する	ds.dt.weekday_name
文字列リストに列を変換してタブで連結する	'\t'.join(map(str, iterable))
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
option: リネンにグラフの色を指定する	color = 'linen'
折れ線グラフの△マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ファイルを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
データフレームの中でカラムの重複を見る	df.duplicated(subset=column)
カウンタから辞書を減らす	aCounter.subtract(aDict)
データフレームの列のNaNを直後の値に設定する	df[col].fillna(method='bfill')
白色を用いてヒストグラムを描画する	plt.hist(データ列, color='white')
リストのパーセンタイルを描画する	plt.boxplot(データ列)
線形回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 書き込みモードにセットする	mode = 'w'
整数nの八進表現を使う	oct(n)
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
横棒グラフをダークターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
カラムのユニークな値	df[col].unique()
折れ線グラフの色をマゼンタにセットする	plt.plot(データ列x, データ列y, color='magenta')
バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
マッピングの浅いコピーを作成する	aDict.copy()
縦棒グラフを描く	plt.bar(ラベル列, データ列)
横軸の目盛りに文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
赤いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
データフレームが正規分布からどの程度、尖っているか確認する	df.skew()
配列とリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのカラムを十の位で丸めて整数にする	df[col].round(-1).astype(int)
列をイミュータブルな集合に変換する	frozenset(iterable)
辞書のキーを列挙する	list(aDict)
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
文字列は全て印字できるか調べる	s.isprintable()
データフレームのリスト列の歪度	df[aList].kurt()
赤い一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ダークターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
表示可能な列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
青い点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列の大文字小文字を変換する	s.casefold()
リストの最初のオブジェクトを探す	aList.index(element)
option: ラベンダーにグラフの色を設定する	color = 'lavender'
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
タプルから集合	set(iterable)
セットにシーケンスの要素を追加する	aSet.update(iterable)
赤いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
折れ線グラフの色をミディアムブルーにセットする	plt.plot(データ列x, データ列y, color='mediumblue')
rgbの丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カラムがどの程度分散しているか見る	ds.var()
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
列のユニークな値	ds.unique()
データフレームの欠損値が含まれる部分に色をつける	df.style.highlight_null()
双方向キューの左から要素を取り除く	deq.popleft()
スラグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームを列名リストによってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(columns)]
棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
Pandasで、dateStringをタイムスタンプ型にする	pd.to_datetime(dateString)
option: ポイントマーカーを加える	marker = '.'
オブジェクトは論理値クラスのインスタンス	isinstance(obj, bool)
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
折れ線グラフの上三角印を青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
文字列の出力を改行なしに行う	print(value, end='')
ダークグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
数値の符号をコピーにする	math.copysign(x, x2)
データ列の折れ線グラフを描画し、色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
等量でn個にデータ列を分割する	pd.qcut(ds, n)
option: 印を右三角に指定する	marker = '>'
実数の床数	math.floor(x)
option: ゴールデンロッド色を使う	color = 'goldenrod'
第2引数で指定されたファイル名	sys.argv[1]
データフレームを各列毎にグループ化し、、列の最小値を求める	df.groupby(column)[column2].min()
option: グリーンイエローにグラフの色を設定する	color = 'greenyellow'
ダークシアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
ライムグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
ヒストグラムの色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
箱髭図としてデータフレームの二つの列を並べて描画する	plt.boxplot([df['カラム'], df['カラム']])
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
option: 菱形印を使用する	marker = 'D'
文字列の中のケースを無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
縦棒グラフをパウダーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='powderblue')
データを最大最小値として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームを各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
コマンドの第二引数を確認する	sys.argv[1]
日付データが土曜日	aDate.weekday() == 5
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
数値を変数についてn階微分する	sympy.diff(e, z, n)
ヒストグラムをダークグリーン色として描画する	plt.hist(データ列, color='darkgreen')
ファイルパスを文字列の示す文字コードで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
データフレームの中の欠損値の合計を数える	df.isna().sum()
赤い三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
文字列内にひとつでもアスキー文字があるか調べる	any(c.isascii() for c in s)
Pandasで、文字列を書式fmtで日付データに変換する	pd.to_datetime(s, format=fmt)
リストをひとつ置きに抽出する	aList[::2]
正規分布を用いて疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
ヒストグラムの色をリネンにする	plt.hist(データ列, color='linen')
折れ線グラフのクロス印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
0で全要素を初期化したベクトル	np.zeros(要素数)
タプルの全値をクリアする	aDict.clear()
nが一桁の整数か	0 <= n <= 9
データフレームの未入力値を直後の値で埋める	df.fillna(method='bfill')
10を底とする浮動小数点数の対数	math.log10(x)
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
グラフの目的をプレゼンに設定する	sns.set(context='talk')
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
いつまでもnからカウントダウンする	itertools.count(start=n, step=-1)
年月日と時間から日付時刻を作成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
バイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームを'A'列でで降順にソートする	df.sort_values(by='A', ascending=False)
特異値分解として淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
未初期化の行列	np.empty(要素数, dtype=np.int)
JSON文字列を辞書に変換する	json.loads(jsonString)
線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
タプルの最初を取り除く	aTuple[1:]
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
双方向キューからポップする	deq.pop()
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
option: フォントの色をミントクリームに設定する	color = 'mintcream'
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームのそれぞれのグループの平均値	df.groupby(column).mean()
データフレームの値がNaN	df.isna()
オブジェクトは整数クラスか調べる	isinstance(obj, int)
rgbの左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
文字列を別の文字列を用いて全て置き換える	s.replace(sub, newsub)
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
データフレームを列の値でグループ化し、記述統計量を計算する	df.groupby(column).describe()
折れ線グラフの星マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
ファイルをBOM付きを使って開く]	open(filepath, encoding='utf_8_sig')
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
ターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='turquoise')
アルファベットを使う	string.ascii_letters
クラス分類をガウス過程を使って行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
縦棒グラフをターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='turquoise')
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
エクセルデータファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ヒートマップでデータフレームの列と列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
変数を白色でプリントする	print(f'\033[37m{value}\033[0m')
半透明の実線としてデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図にダイアモンド印を加える	plt.scatter(データ列x, データ列y, marker='D')
マップから最後に追加した項目を取り出す	aDict.popitem()
セットから要素を全て消す	aSet.clear()
ゴーストホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='ghostwhite')
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
option: 色をゴールデンロッドに変更する	color = 'goldenrod'
ビン数を設定してヒストグラムをプロットする	plt.hist(データ列, bins=区関数)
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
データフレームの列の文字列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
線グラフの色をライトスカイブルーに変更する	plt.plot(データ列x, データ列y, color='lightskyblue')
横棒グラフをスチールブルー色を使って描画する	plt.barh(データ列x, データ列y, color='steelblue')
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
エクセルファイルファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
データ列の散らばりを作図する	plt.scatter(データ列x, データ列y)
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: ダークグレーを使用する	color = 'darkgray'
データ列の曜日の名前を見る	ds.dt.weekday_name
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
配列をn個に等間隔で分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
タプルから項目名の値かもしくは要素を得る	aDict.get(key, element)
データフレームを各カラム毎に集約して列の個数を計算する	df.groupby(column)[column2].count()
列の各値が何回出現するか確認する	ds.value_counts()
データを最大値を用いて正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
option: グラフの色をマゼンタに設定する	color = 'magenta'
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
nのn2乗	n ** n2
nが集合のどれかか調べる	n in aSet
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
リスト中の要素が全て真か調べる	all(aList)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
xとyの商と余りを同時に求める	divmod(x, y)
列を分割数nで等量でビン分割する	pd.qcut(ds, n)
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
ピーチパフ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
リストの文字列が最初に見つかる場所を探す	aList.index(element)
散布図をローングリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームのリストカラムの値が未入力値	df[aList].isna()
２次元タプルをflattenする	sum(aTuple)
option: フォントの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
option: ダークターコイズを使用する	color = 'darkturquoise'
データフレームのリスト列の中にいくつがあるか数える	df[aList].isin([value]).sum()
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
データフレームを降順でインデックスによってソートする	df.sort_index(ascending=False)
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
実数を千の位で四捨五入する	round(x, -3)
組の先頭を除く	aTuple[1:]
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
スチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='steelblue')
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームのリスト列の欠損値をxに指定する	df[aList].fillna(x)
文字列中の部分文字列の登場	s.count(sub)
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
nがn2より小さい	n < n2
option: エラーを無視するようにセットする	errors = 'ignore'
表データの列がxより少ないデータを抽出する	df[df[column] < x]
キーが辞書上で未定義か調べる	key not in aDict
黒い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
JSON形式のファイル入力を辞書に変換する	json.load(fin)
変数について数式の積分を求める	sympy.integrate(e, z)
リストとリストを結合する	aList + aList2
ファイルからを読み込む	pd.read_excel(filename)
実数以上の最小の整数	math.ceil(x)
イテラブルのコンビネーション	itertools.combinations(iterable, n)
線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームのリスト列を整数に丸める	df[aList].round()
散布図をペルー色として描画する	plt.scatter(データ列x, データ列y, color='peru')
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
縦横比を等しくする	plt.axis('equals')
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
ミディアムパープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
配列としてデータフレームの指定した列を取り出す	df[column].values
日付時刻データが何年か知る	aDatetime.year
データフレームのカラムの正規分布に対する上下広がり	df[col].skew()
表の各グループごとの標準偏差	df.groupby(column).std()
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
処理中の例外を情報	sys.exc_info()
データフレームを列を用いて並べ直し、、下の方n件を取り出す	df.sort_values(columns).tail(n)
オールドレース色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
カウンタを列を出現回数して、更新する	aCounter.update(iterable)
横棒プロットをプロットして、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
タプルの先頭のn要素を除く	aTuple[n:]
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
標準エラーを得る	sys.stderr
ベージュ色としてヒストグラムを描画する	plt.hist(データ列, color='beige')
xを印字できる文字列にする	ascii(x)
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ネイビー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
列からn個、サンプリングする	random.sample(iterable, k=n)
列をカウンタにする	collections.Counter(iterable)
主成分分析として多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
論文用にグラフを設定する	sns.set(context='paper')
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
option: グラフの色を小麦色に変更する	color = 'wheat'
散布図をrgbの右三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフに▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
データフレームのリストカラムの中に文字列と文字列が存在するか調べる	df[aList].isin([value, value2])
実行結果を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
散布図のポイント印の太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
赤い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
組中の文字列が最初に見つかるインデックス	aTuple.index(element)
文字列の先頭でパターンに大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
折れ線グラフの色をバイオレットに指定する	plt.plot(データ列x, データ列y, color='violet')
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
列でデータフレームをグループ化し、それぞれのグループごとの標準偏差を計算する	df.groupby(column).std()
エラーを出力する	sys.stderr
データフレームのリスト列が正規分布からどの程度尖っているか見る	df[aList].skew()
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフの△マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
表データを使用する	import pandas as pd
実行結果を緑色でプリントする	print(f'\033[32m{value}\033[0m')
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
現在は何年か知る	datetime.datetime.today().year
折れ線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
逆順の双方向キュー	reversed(deq)
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: 未入力値を先頭にする	na_position = 'first'
2つの整数の最大公約数	math.gcd(n, n2)
配列の行ごとの合計値	np.sum(aArray, axis=1)
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
数式の変数の解を方程式として求める	sympy.solve(e, z)
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
真部分集合	aSet < aSet2
エクセルファイルファイルからnという名前のシートを読む	pd.read_excel(filename, sheet_name=n)
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
折れ線グラフをラベンダー色を用いて描画する	plt.plot(データ列x, データ列y, color='lavender')
リストとリストについて散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
ライトイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
等差数列を行列にする	np.arange(開始値, 終了値, 等差)
option: グラフの色をライトスカイブルーに指定する	color = 'lightskyblue'
列の各データが何回出現するか調べる	ds.value_counts()
グラフのグリッドを暗くする	sns.set(style='darkgrid')
イテラブルをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
データ列の推移を赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
1文字だけ標準入力から読み込む	sys.stdin.read(1)
データ列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
ダークスラテグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図に下三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
時刻を使う	import datetime
オブジェクトの無限な列	itertools.repeat(element)
option: ダークグレー色を用いる	color = 'darkgray'
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
option: フォントの色をサーモンに設定する	color = 'salmon'
option: グラフの色をモカシンに設定する	color = 'moccasin'
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
パールバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
リストをナンバリングする	enumerate(aList)
漢字が文字列に含まれるか確認する	re.search('[\u4E00-\u9FD0]', s)
カテゴリ列で色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
ゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
マッピングをJSON形式のインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
option: フォントの色をリネンに指定する	color = 'linen'
xを整数に変換する	int(x)
文字列を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
データフレームがどの程度、分散しているか調べる	df.var()
データフレームからn行をランダムに重複ありでサンプリングする	df.sample(n, replace=True)
リストのn番目からn2番目の部分を取り出す	aList[n:n2]
option: グラフの色をゴールデンロッドに変更する	color = 'goldenrod'
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
配列とデータ列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
タイムスタンプデータがタイムスタンプデータより前か調べる	aDatetime < aDatetime2
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
散布図のクロスマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データ列のNaNを直前の値で補う	ds.fillna(method='ffill')
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
オブジェクトをイテラブルに変換する	iter(obj)
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
自然数LCM	math.lcm(n, n2)
xの小数点以下'1'桁まで表示する	print(':.1f'.format(x))
データフレームを10の位で丸めて整数にする	df.round(-1).astype(int)
ファイルパスをSJISで開く]	open(filepath, encoding='shift_jis')
データフレームを各列と列の組み合わせ毎に集計して、最小値を求める	df.groupby([column, column2], as_index=False).min()
配列をダミー変数に変換する	pd.get_dummies(iterable)
実行結果を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
xが一桁の整数かどうか調べる	-9 <= x <= 9
x,yの複素数を算出する	complex(x, y)
リストの出力を改行なしに行う	print(value, end='')
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
リストとデータ列についての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
折れ線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
行列の行ごとの分散を使う	np.var(aArray, axis=1)
最大値・最小値として整数乱数を発生させる	random.randint(最小値, 最大値)
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
日付データが日付データと同時	aDate == aDate2
オールドレース色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームの列のNaNを中央値で埋める	df[col].fillna(df[col].median())
データフレームをJSONLファイルにヘッダを付けずに書き込む	df.to_csv(filename, header=None)
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
実数の正弦	math.sin(x)
配列の形状	aArray.shape
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
列の各要素を関数でフィルタする	map(func, iterable)
タプルにキーワード引数で更新する	aDict.update(**kwargs)
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
ヒストグラムをスカイブルー色を用いて描画する	plt.hist(データ列, color='skyblue')
ひとつでも大文字が文字列内に含まれる	any(c.isupper() for c in s)
ヒストグラムの色をミディアムスレートブルーに指定する	plt.hist(データ列, color='mediumslateblue')
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
柱状図の範囲を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
項目名で指定された項目をマッピングからポップする	aDict.pop(key)
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
データフレームを列によってまとめた表	df.groupby(column)
ふたつの集合のインターセクションのみに更新する	aSet.intersection_update(aSet2)
インデント幅nで辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
SVDを用いて淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
option: フォントの色をグレーに指定する	color = 'gray'
非数を用いる	math.nan
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
多次元データをMSDでパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ベクトルの最小値	np.min(aArray)
折れ線グラフをブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データ列のNaNを平均値で埋める	ds.fillna(ds.mean())
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
プロットの補助目盛を有効にする	plt.minorticks_on()
numpyを使う	import numpy as np
データフレームの行と列をひっくり返す	df.T
多次元データをSVDでパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
文字列を最後の部分文字列で二分し、残りの文字列を使う	s.rpartition(sub)[-1]
option: ダークグリーン色を用いる	color = 'darkgreen'
2つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
ティール色でヒストグラムを描画する	plt.hist(データ列, color='teal')
日付データが日付データより後ろか調べる	aDate > aDate2
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
データフレームのリストカラムの値は欠損値か	df[aList].isna()
文字列が空白かテストする	s.isspace()
日付データと日付データの時間差を算出する	aDate - aDate2
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
データフレームのカラムは何年か調べる	df[col].dt.year
値が集合の要素でないか調べる	element not in aSet
データ列を対数変換する	np.log(データ列)
変数の出力を改行せずに行う	print(value, end='')
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
黒い下三角マーカーをデータ列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームを列毎にグループ化してそれぞれのグループの標準偏差を計算する	df.groupby(column).std()
グループ化してデータフレームの散布図を縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
データ列の曜日数	ds.dt.dayofweek
追加できるように既存のファイルパスをEUCとしてオープンする]	open(filepath, mode='a', encoding='euc_jp')
リストとリストについて散布図をプロットしてマーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
データフレームの内で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
エンコーディングを確認する	sys.getdefaultencoding()
第一コマンド引数	sys.argv[1]
option: デピンク色を使う	color = 'deeppink'
線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
二進対数	math.log2(x)
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
データ列と配列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
散布図の星印を黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
散布図に左三角印を用いる	plt.scatter(データ列x, データ列y, marker='<')
データフレームの値が欠損値か確認する	df.isna()
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ヒストグラムをオレンジレッド色を使って描画する	plt.hist(データ列, color='orangered')
option: マーカーを▼に指定する	marker = 'v'
日付を使用する	import datetime
イテラブルと数列について散布図を描いて、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
rgbの下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームの列の欠損値をメディアンに設定する	df[col].fillna(df[col].median())
散布図の左三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
データフレームのリストカラムの中に日付データと日付データがいくつあるか求める	df[aList].isin([value, value2]).sum()
ミスティローズにヒストグラムの色を指定する	plt.hist(データ列, color='mistyrose')
セットが空でない	len(aSet) != 0
散布図のポイントマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
タプル内の要素が全て真か調べる	all(aTuple)
折れ線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
書式fmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
表示可能な行数を変更する	pd.set_option('display.max_rows', n)
自然数の最大公約数を求める	math.gcd(n, n2)
ヒートマップとして表のリストで指定された列の相関行列を描画する	sns.heatmap(df[aList].corr())
散布図にrgbのクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
配列から重複を除いた配列を作成する	np.unique(aArray)
散布図にバツ印を用いる	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
リストと配列についての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
option: シスル色を使う	color = 'thistle'
本日の日付時刻を使う	datetime.datetime.today()
組内の要素が全て真	all(aTuple)
リストの値をクリアにする	aList.clear()
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
緑色で変数をプリントする	print(f'\033[32m{value}\033[0m')
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ダークスレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslateblue')
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
浮動小数点数のルート	math.sqrt(x)
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
二つの浮動小数点数が十分に近いかどうか調べる	math.isclose(x, x2)
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
文字列に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
オブジェクトは辞書クラスのインスタンスか判定する	isinstance(obj, dict)
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームから列を三つのみ選択する	df[[column, column2, column3]]
縦棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
散布図をダイアモンド印で描画する	plt.scatter(データ列x, データ列y, marker='D')
nがn2で割り切れないかどうか確認する	n % n2 != 0
ヒストグラムの色をベージュに指定する	plt.hist(データ列, color='beige')
線グラフを青い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データ列の第一四分位数を求める	ds.quantile(0.25)
数値をシアンにする	f'\033[36m{value}\033[0m'
文字列の左端から空白を除く	s.lstrip(' ')
データフレームの数値を整数に丸める	df.round()
データフレームのカラムの正規分布に対する左右対称性	df[col].kurt()
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
文字列を小文字にする	s.casefold()
ピアソンでデータフレームのリストで指定されたカラムの相関行列を求める	df[aList].corr(method='pearson')
グリッドを点線にする	plt.grid(linestyle='dotted')
SJISでファイルをオープンする]	open(filepath, encoding='shift_jis')
option: 色をカデットブルーに変更する	color = 'cadetblue'
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームの全カラムの相関を描画する	sns.pairplot(df)
切片なしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
nからn2を引く	n - n2
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
二つの列でデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
ゼロ埋めされた符号なし８ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.uint8)
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
オプションで標準出力を使う	file = sys.stdout
option: オーキッド色を使用する	color = 'orchid'
プロットの使途を画面に設定する	sns.set(context='notebook')
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データフレームのリストカラムの中にと文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
横軸だけ目盛線	plt.grid(axis='x')
グラフの色を明るくする	sns.set(pallete='bright')
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
リストを昇順に並べる	sorted(aList, reverse=True)
コマンドの第二引数を確める	sys.argv[1]
ラベンダー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
option: バリーウッド色を使用する	color = 'burlywood'
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
文字列中にひとつでも非大文字があるか調べる	any(not c.isupper() for c in s)
パールバイオレットレッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
オプションで出力先を標準エラーに変更する	file = sys.stderr
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
スチールブルーにヒストグラムの色をセットする	plt.hist(データ列, color='steelblue')
データフレームを各列と列の組み合わせ毎にグループ化して平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームを各列毎にグループ化し、列の最小値を求める	df.groupby(column)[column2].min()
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
シーケンスを集合に追加更新する	aSet.update(iterable)
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
平方根	math.sqrt(x)
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
数値をシアンで出力する	print(f'\033[36m{value}\033[0m')
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
組の要素を逆順にする	aTuple[::-1]
データフレームの列が正規表現文字列にマッチする行を選ぶ	df[df[column].str.match(s)]
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
option: サドルブラウンを使用する	color = 'saddlebrown'
二つの集合の∪を求める	aSet.union(aSet2)
浮動小数点数が負の数か調べる	x < 0
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
散布図を黒い四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
データフレームを列によって並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
nがn2以下かどうか確認する	n <= n2
option: グラフの色をホワイトスモークに変更する	color = 'whitesmoke'
データフレームを列によって並べて、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
両端キューは空でない	len(deq) != 0
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
データ列のNaNを中央値にする	ds.fillna(ds.median())
文字列が全て識別子名か調べる	s.isidentifier()
グラフのタイトルを設定する	plt.title('グラフの名称')
文字列内にひとつでもアルファベットが含まれるかどうか	any(c.isalpha() for c in s)
option: 印を△に変える	marker = '^'
散布図をゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
オブジェクトはリスト型か調べる	isinstance(obj, list)
配列をヒストグラムで可視化する	plt.hist(データ列)
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
データフレームのリストカラムのどの値が最も現れるか確認する	df[aList].mode()
グラフの色を全般的に淡くする	sns.set(pallete='muted')
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
辞書に項目名ワード引数を用いて追加する	aDict.update(**kwargs)
折れ線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
option: 色をダークスレートブルーに指定する	color = 'darkslateblue'
画面用にプロットを設定する	sns.set(context='notebook')
option: グラフの色を茶色に設定する	color = 'brown'
実数の2乗を求める	x ** 2
ヒストグラムの色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
データフレームのカラムのNaNを直前の値に指定する	df[col].fillna(method='ffill')
'A'列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby('A').describe()
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
辞書を計数器に変換する	collections.Counter(aDict)
リスト中の文字列が最初に見つかる場所	aList.index(element)
ダークスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図をビスク色を用いて描画する	plt.scatter(データ列x, データ列y, color='bisque')
リストと配列について散布図を描画してマーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: アクアマリンを使う	color = 'aquamarine'
タプルからカウンタを用意する	collections.Counter(aDict)
データフレームのデータ型のリストを求める	df.dtypes
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
出力ストリームから1文字、読み込む	f.read(1)
option: フォントの色を小麦色に設定する	color = 'wheat'
データフレームを複数の列によってソートする	df.sort_values(by=column)
リストの合計値	sum(aList)
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
0からnの範囲	range(n)
オブジェクトはあるクラスか調べる	isinstance(obj, クラス)
散布図の菱形マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
セパレータで文字列を区切って、文字列リストにする	s.split(sub)
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
データ列の第三四分位数	ds.quantile(0.75)
option: フォントの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
option: マーカーをバツに変更する	marker = 'x'
実数を実数で割った剰余を算出する	math.remainder(x, x2)
option: インデックスを自動的な連番に増やす	index_col = None
option: 符号なし８ビット整数型を使用する	dtype = np.uint8
ゼロ埋めされた3二ビット整数型の行列を初期化する	np.zeros(要素数, dtype=np.int16)
数を十六進表記の文字列に変換する	x.hex()
文字列の大文字と小文字を交換する	s.swapcase()
文字列の両端から空白と改行を除く	s.strip()
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ブースティングとしてクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
option: 色をパウダーブルーに指定する	color = 'powderblue'
イテラブルの全順列	itertools.permutations(iterable)
データフレームのリスト列の欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
回帰分析をK最近傍法を用いて行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームのカラムを柱状図にする	plt.hist(df[column])
データフレームのカラムのNaNを平均値に設定する	df[col].fillna(df[col].mean())
文字列リストにイテラブルを変換して、'改行で連結する	'\n'.join(map(str, iterable))
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
プロットにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフに青いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームから指定された列名一覧の列のみ抽出する	df[columns]
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
浮動小数点数を文字列にする	str(x)
日付時刻データの日数を使う	aDatetime.day
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: namesを列名に設定する	names = names
option: アンティークホワイト色を使う	color = 'antiquewhite'
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
option: 色をシスルに設定する	color = 'thistle'
列を集合に変換する	set(iterable)
データフレームから指定された３つの列を選択する	df[[column, column2, column3]]
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
JSONLファイルにデータフレームをエクセルファイルで保存する	df.to_excel(filename)
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
行列の最大値を求める	np.max(aArray)
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
rgbの下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図としてデータフレームの全列をプロットする	sns.pairplot(df)
文字列が全て小文字か確認する	s.islower()
PandasでUNIX秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
グラフの描画で色差別なく色を使う	sns.set(pallete='colorblind')
option: シーグリーン色を使う	color = 'seagreen'
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
TSVを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
回帰分析をランダムフォレストでする	model = sklearn.ensemble.RandomForestRegressor()
文字列の末尾から空白を取り除く	s.rstrip(' ')
有理数の分母	q.denominator
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
データフレームの重複していない行だけ	df[not df.duplicated(keep=False)]
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データ列の曜日の名前を使う	ds.dt.weekday_name
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
option: 左三角マーカーを加える	marker = '<'
ヒストグラムの色をパウダーブルーにセットする	plt.hist(データ列, color='powderblue')
リストと配列についての散布図に凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
日付時刻データをISO8601書式の文字列にする	aDatetime.isoformat()
option: フォントの色をダークオレンジに指定する	color = 'darkorange'
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
正規分布のパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
nが1、もしくは2、もしくは3に等しいか	n == 1 or n == 2 or n == 3
数の３乗を求める	x ** 3
列毎にデータフレームを集計し、、それぞれのグループ毎の合計を算出する	df.groupby(column).sum()
２つの文字列は等しくない	s != s2
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
データ列を等量でビン数nでビニングする	pd.qcut(ds, n)
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
option: 貝殻色を使う	color = 'seashell'
ピアソン相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
データフレームを列の値で集約して、最大値を求める	df.groupby(column).max()
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
散布図としてデータフレームのカラムを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
option: ライトスチールブルーにフォントの色を設定する	color = 'lightsteelblue'
nとn2の論理積	n & n2
横棒グラフを描いて棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
実数で浮動小数点数を整数除算する	x // y
option: グラフの色をペールグリーンに変更する	color = 'palegreen'
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフに大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
多次元データをt-SNEを用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: グレー色を使う	color = 'gray'
全句読点文字	string.punctuation
線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
option: ミディアムバイオレットレッドにグラフの色をする	color = 'mediumvioletred'
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: エンコーディングを文字列の示すエンコーディングにする	encoding = s
データフレームの第一四分位数を求める	df.quantile(0.25)
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
深紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データフレームをグループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データ列を整数に丸める	ds.round()
ヒストグラムを深紅色として描画する	plt.hist(データ列, color='crimson')
nが2で割り切れないか	n % 2 == 1
データ列が何秒か確認する	ds.dt.second
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
折れ線グラフの▽印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
円グラフの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
カウンタの最頻出なキー	aCounter.most_common()[0]
t分布型確率的近傍埋め込み法で濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
浮動小数点数が負か調べる	x < 0
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
タプルをひとつ置きに得る	aTuple[::2]
グラフで使用するフォントを日本語に設定する	sns.set(font='IPAexGothic')
データフレームを'A'列によって整列して、更新する	df.sort_values(by='A', inplace=True)
カウンタの項目一覧を見る	aCounter.keys()
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
ファイルを開き]、追加ストリームを使う	open(filepath, mode='a')
文字列中に非アスキー文字が含まれる	any(not c.isascii() for c in s)
タプルのコピーを作成する	aDict.copy()
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
option: データ型として３二ビット整数型を使う	dtype = np.int16
option: 黄緑を用いる	color = 'chartreuse'
等差数列から整数乱数を得る	random.randrange(start, end, step)
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
英字の大文字を全部使う	string.ascii_uppercase
正規分布によるパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
option: ライトグリーン色を使う	color = 'lightgreen'
nが無限に続く数列	itertools.repeat(n)
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
数のn乗して実数による余りを求める	pow(x, n, y)
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
リストをカウントしてカウンタを更新する	aCounter.update(iterable)
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
シーケンスをカウンタに変換する	collections.Counter(iterable)
option: 欠損値も無視しない	dropna = True
option: オレンジレッドを使用する	color = 'orangered'
符号付きで整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ファイルパスが存在しない	not os.path.exists(filepath)
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームの指定された列名リストの列を取り出す	df[columns]
赤い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
ユニークな要素ごとの出現回数を見る	np.unique(aArray, return_counts=True)
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
データ列を1000の位で四捨五入する	ds.round(-3)
データフレームのリストカラムを1000の位で四捨五入して、整数にする	df[aList].round(-3).astype(int)
複数の列でデータフレームをソートし、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームを列によって分類して、最大値を求める	df.groupby(column).max()
散布図をパウダーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='powderblue')
option: ペルー色を使用する	color = 'peru'
データ列の時を見る	ds.dt.hour
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
変数名をキーとして、マップ	dict(name=element)
データフレームの相関行列ケンドール相関係数を用いてを算出する	df.corr(method='kendall')
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
イテラブルを累加したイテラブルを求める	itertools.accumulate(iterable)
データフレームから型リストデータ型の列を取り出す	df.select_dtypes(include=typeList)
データフレームのリスト列のNaNを直前の値に設定する	df[aList].fillna(method='ffill')
今日が土曜日か調べる	datetime.datetime.today().weekday() == 5
データフレームの列の欠損値を最大値で補う	df[col].fillna(df[col].max())
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
データフレームを列でグループ化し、、それぞれのグループごとの件数を知る	df.groupby(column).size()
既存の配列をベースに全要素が0の行列	np.zeros_like(aArray)
列をキーとして２つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
データ列は何月か見る	ds.dt.month
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのリスト列のどの値が頻出か確認する	df[aList].mode()
option: フォントの色をスチールブルーに設定する	color = 'steelblue'
日付データの曜日を見る	aDate.weekday()
横棒グラフをインディゴ色を用いて描画する	plt.barh(データ列x, データ列y, color='indigo')
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
読み込みできるようにファイルを開く]	open(filepath, mode='r')
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
散布図をカデットブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
数式のn階微分を求める	sympy.diff(e, z, n)
データフレームを小数点以下n桁で丸める	df.round(n)
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
リストとリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
異なる列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
option: グラフの色をホットピンクにする	color = 'hotpink'
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
nがn2と等しいか調べる	n == n2
リストとリストについて散布図を描き、、マーカーを菱形に変更する	plt.plot(データ列x, データ列y, marker='D')
両端キューの値を左にn個分ローテンションする	deq.rotate(-n)
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
縦棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
散布図を黒い△マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
部分文字列か調べる	sub in s
プロットの使途をポスターに設定する	sns.set(context='poster')
線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
配列の変化を色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横軸の目盛りを対数に変更する	plt.xscale('log')
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
組の中の最小値を求める	min(aTuple)
散布図を貝殻色を使って描画する	plt.scatter(データ列x, データ列y, color='seashell')
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
データフレームを関数の値でグループ化する	df.groupby(関数)
文字列は全て数値か調べる	s.isnumeric()
option: グラフの色をピンクに変更する	color = 'pink'
青い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
棒グラフの横幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
イテラブルのセット	set(iterable)
データフレームの値は欠損値か	df.isna()
棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データ列の未入力値を最小値で補う	ds.fillna(ds.min())
カウンタのキーとカウントを列挙する	aCounter.items()
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームの列の値がxより大きくx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
改行なしに二つの文字列をプリントする	print(value, value2, end='')
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightseagreen')
赤い点線でリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームを二つの列によってで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
黒い▼マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列が全て空白文字か調べる	s.isspace()
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームの中に文字列と日付データが含まれるか	df.isin([value, value2])
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームを'A'列の値で分類して、列挙する	[(name, group) for name, group in df.groupby('A')]
実数のn乗	x ** n
散布図の三角印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
マッピングの項目名に対応した値	aDict.get(key)
現在の日付	datetime.date.today()
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をダークスラテグレーにセットする	plt.hist(データ列, color='darkslategray')
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
文字列の末尾から空白を取り除く	s.rstrip()
文字列を最後の部分文字列で二つに区切って、最初の文字列を使う	s.rpartition(sub)[0]
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
縦棒グラフを描き、、バーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ゼロ埋めされた三2ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
データフレームのリストカラムの中にと文字列がいくつ含まれるか数える	df[aList].isin([value, value2]).sum()
計数器をマッピングから準備する	collections.Counter(aDict)
辞書のの一覧を参照する	aDict.values()
横棒グラフをダークオーキッド色として描画する	plt.barh(データ列x, データ列y, color='darkorchid')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
真部分集合か調べる	aSet < aSet2
イテラブルを３つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ファイルを書き込みモードを用いてオープンする]	open(filepath, mode='w')
追加できるようにEUCで既存のファイルをオープンする]	open(filepath, mode='a', encoding='euc_jp')
実数を文字列にする	str(x)
データ列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
データ列を1000の位で丸める	ds.round(-3)
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
タイムスタンプデータを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
赤い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
データ列のNaNを最大値で埋める	ds.fillna(ds.max())
組を引数として展開して表示する	print(*aTuple, sep=',')
スノー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
データフレームのNaNを中央値で埋める	df.fillna(df.median())
データフレームのインデックスリスト	df.index
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
データフレームの重複していない行のみ	df[not df.duplicated(keep=False)]
データフレームを二つの列によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
クラスのサブクラスか	issubclass(サブクラス, クラス)
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
二つのデータフレームを縦方向にくっつける	pd.concat([df, df2])
セットの補集合	aSet.difference(aSet2)
タイムスタンプデータにn日を加算する	aDatetime + datetime.timedelta(days=n)
データフレームを2つの列の値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ファイルにxを文字列に変換して書く	f.write(str(x))
option: マーカーの太さを変える	markeredgewidth = 2.5
文字列が全て大文字かどうか	s.isupper()
タイムスタンプデータにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
文字列の右側から空白を取り除く	s.rstrip()
日付時刻データは何秒か知る	aDatetime.second
部分文字列が文字列の終了位置より前に含まれるか判定する	s.find(sub, 0, end) != -1
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
サイン	math.sin(x)
ヒストグラムの色をゴールデンロッドにセットする	plt.hist(データ列, color='goldenrod')
自然数の順列の総数	math.perm(n)
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
大文字を小文字にする	s.lower()
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
option: ラベンダーブラッシュにグラフの色を設定する	color = 'lavenderblush'
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
SVDを用いて濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図に黒い▼マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムの色を濃い青に変更する	plt.hist(データ列, color='darkblue')
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
現在のミリ秒	int(time.time() * 1000)
データフレームのリスト列の欠損値を前の行の値で埋める	df[aList].fillna(method='ffill')
ペルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
option: ディムグレー色を使用する	color = 'dimgrey'
折れ線グラフの四角印の太さを変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
コマンド引数の一覧	sys.argv[1:]
文字列を正規表現で分ける	re.split(pattern, s)
バイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
マッピング上で項目名が未定義	key not in aDict
option: ダークスラテグレーにグラフの色を設定する	color = 'darkslategray'
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
標準出力を得る	sys.stdout
現在のタイムスタンプ	int(time.time())
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
option: グラフの種類を破線に変更する	linestyle = 'dashed'
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: 配列のデータ型を指定する	dtype = np.int32
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
重複した行のみを抽出する	df[df.duplicated(keep=False)]
自然数個からk個取り出した時の並べ方の総数を求める	math.perm(n, k)
赤いバツマーカーを数列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの列と列に重複があれば削除する	df.drop_duplicates(subset=column)
日付時刻データが月曜日かどうか	aDatetime.weekday() == 0
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ファイルからストリームを開き]、fileとする	file = open(filepath)
リストとリストについて散布図を描画して、マーカーをポイントにセットする	plt.plot(データ列x, データ列y, marker='.')
リストのn番目に文字列を挿入する	aList.insert(n, element)
文字列の開始位置以降が部分文字列で開始するか	s.startswith(sub, start)
option: グラフの色をローングリーンにセットする	color = 'lawngreen'
数式を数値計算する	float(e)
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
option: フォントの色をミントクリームに変更する	color = 'mintcream'
option: パールバイオレットレッドにグラフの色を指定する	color = 'palevioletred'
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
列の重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
option: デピンクにフォントの色を変更する	color = 'deeppink'
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
ファイルパスのセパレータ記号	os.sep
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
ベクトルのスカラー倍	aArray * n
折れ線グラフの星マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
サブ型かどうか判定する	issubclass(サブクラス, クラス)
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
レベッカパープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
改行なしに2つの変数をプリントする	print(value, value2, end='')
データ列を複数並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
両端キューの最後	deq[-1]
データフレームのカラムの中に文字列と文字列が存在する	df[col].isin([value, value2])
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
オプションで、標準エラーを使う	file = sys.stderr
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
データ列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの中央値を算出する	df.median()
UTF8でファイルパスを書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
ふたつの集合は互いに素	aSet.isdisjoint(aSet2)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
option: エンコーディングを文字コードtextに変更する	encoding = text
配列をy軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
nが奇数かどうか調べる	n % 2 == 1
未初期化のベクトルを作成する	np.empty(要素数, dtype=np.int)
n回オブジェクトを繰り返すイテラブル	itertools.repeat(element, n)
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームから指定された列を取り出す	df[[column]]
MSDで淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: フクシアを使う	color = 'fuchsia'
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
option: マーカーの大きさを変える	markersize = 2.0
両端キュー	collections.deque()
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ニューラルネットでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
散布図をクリムゾン色を使って描画する	plt.scatter(データ列x, データ列y, color='crimson')
数値のn階微分を求める	sympy.diff(e, z, n)
既存のファイルを文字列の示す文字コードを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列がリストの要素でないか調べる	element not in aList
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
角度のラジアン	math.radians(degree)
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図をアクア色を使って描画する	plt.scatter(データ列x, データ列y, color='aqua')
要素が集合のメンバー	element in aSet
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
二つの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
小麦色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
プロットのy軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
文字列をISO8601形式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
横棒プロットを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
ラインを実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
集合から要素を全て除去する	aSet.clear()
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
折れ線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
線形モデルのバイアスを見る	model.intercept_
棒グラフの色を深紅にする	plt.bar(データ列x, データ列y, color='crimson')
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
横棒グラフをロイヤルブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='royalblue')
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
nがn2と等しい	n == n2
カウンタの項目を列挙する	aCounter.keys()
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ファイルを書き込みできるように開く]	open(filepath, mode='w')
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
リストとデータ列の散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をダークバイオレットにセットする	plt.plot(データ列x, データ列y, color='darkviolet')
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
option: 先頭のカラムをインデックスに増やす	index_col = 0
疑似乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
文字列がリストの要素でないか判定する	element not in aList
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
NaNも加えてデータフレームの列をベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
カラムの平均値	ds.mean()
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
文字列が全てアルファベットか確認する	s.isalpha()
アクアマリン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
二つのオブジェクトは同じ参照か調べる	obj is obj2
データフレームの欠損値を平均に設定する	df.fillna(df.mean())
ピアソンでデータフレームの相関行列	df.corr(method='pearson')
棒グラフをオレンジレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orangered')
xのハッシュ値	hash(x)
確率的勾配降下としてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
横に2つのデータフレームを合体させる	pd.merge(df, df2)
データフレームの中の列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
文字列の先頭	s[0]
文字列を改行で分割する	s.splitlines()
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
リストを等量でn個に分割する	pd.qcut(aList, n)
グラフの横軸の説明を設定する	plt.xlabel('x軸ラベル')
日付データが土曜日か調べる	aDate.weekday() == 5
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームとしてエクセルデータファイルを読み込む	pd.read_excel(filename)
現在の月数を見る	datetime.datetime.today().month
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
option: グラフの色をビスクに設定する	color = 'bisque'
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
option: グラフの色をダークグリーンにセットする	color = 'darkgreen'
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
日付データは日付データより後ろかどうか判定する	aDate > aDate2
要素が集合に含まれるかどうか調べる	element in aSet
ホワイトスモーク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
プログラムの実行を異常止める	sys.exit(1)
option: マーカーの大きさを変更する	markersize = 2.0
データフレームから最初の列を除く	df[df.columns[1:]]
２つの変数をスラッシュで区切って出力する	print(value, value2, sep='/')
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
列を等量でn個にビン分割する	pd.qcut(ds, n)
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
option: シエナにグラフの色を設定する	color = 'sienna'
option: ミディアムパープル色を使用する	color = 'mediumpurple'
列をリストを境界値として分割する	pd.cut(ds, aList)
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
フローラルホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='floralwhite')
オリーブ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
実数は有限	math.isfinite(x)
分類結果のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
空の両端キュー	collections.deque()
実数の逆双曲線正接	math.atanh(x)
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
Pythonのバージョン	sys.version
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
文字列をシアンにする	f'\033[36m{value}\033[0m'
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
Pandasで、データフレームのカラムを日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
nを八進文字列にする	oct(n)[2:]
option: ▽マーカーを使う	marker = 'v'
nとn2が同じ値	n == n2
数式の展開を行う	sympy.expand(e)
nが2で割り切れるか調べる	n % 2 == 0
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
ダークオレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データフレームのリストカラムの分散	df[aList].var()
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
表データを2つの列によって並べ、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: 三2ビット整数型を使う	dtype = np.int16
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: ミントクリーム色を用いる	color = 'mintcream'
実数を浮動小数点数に掛ける	x * y
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
カウンタをゼロにする	aCounter.clear()
組を順序付けする	enumerate(aTuple)
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
option: ディムグレーを用いる	color = 'dimgrey'
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
リストとリストを連結する	aList + aList2
実数を百の位で丸める	round(x, -2)
線形回帰モデルの切片を求める	model.intercept_
小数点数の双曲線余弦	math.cosh(x)
インデント幅nで辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
マップをコピーする	dict(aDict)
スカイブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
実数の符号をコピーにする	math.copysign(x, x2)
データフレームの中に日付データがあるか確認する	df.isin([value])
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
二つのデータフレームを列'A'と列'B'をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
上位集合もしくは等しいか調べる	aSet > aSet2
データ列を百の位で四捨五入する	ds.round(-2)
nからn2までの整数リストを使う	list(range(n, n2+1))
浮動小数点数の最小値を求める	sys.float_info.min
ダークバイオレットにヒストグラムの色をセットする	plt.hist(データ列, color='darkviolet')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
xでデータ列のNaNを埋める	ds.fillna(x)
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
タプルの個数	len(aTuple)
グラフにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
データ列を等量でn個にビニングする	pd.qcut(ds, n)
散布図の丸マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
ミントクリーム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
リストを組に変換する	tuple(aList)
データフレームのリストカラムの中にいくつNaNがあるか数える	df[aList].isna().sum()
環境の名前	sys.platform
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
変数が0に近づく時、数式の極限値を求める	sympy.limit(e, z, 0)
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
集合から要素を全て消す	aSet.clear()
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
左三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
nが3で割り切れるか	n % 3 == 0
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
option: 箱ひげ図に平均を加える	showmeans = False
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
縦棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
option: ブラックを用いる	color = 'black'
ミディアムスプリンググリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
option: 濃いシアンにグラフの色を指定する	color = 'darkcyan'
折れ線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
浮動小数点数を複素数に変換する	complex(x)
ファイルを開いて]、バイナリストリームを使う	open(filepath, mode='rb')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
文字列の先頭からタブを取り除く	s.lstrip('\t')
ロイヤルブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
JSONフォーマットの文字列をデータにする	json.loads(b.decode('unicode-escape'))
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ビンの数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
浮動小数点数のk進対数	math.log(x, k)
ケンドールとしてデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
データフレームのカラムを10の位で四捨五入して、整数にする	df[col].round(-1).astype(int)
実数の正接	math.tan(x)
nが無限に続く整数イテラブル	itertools.repeat(n)
'A'列の値によってデータフレームをグループ化し要約統計量を計算する	df.groupby('A').describe()
点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図の印を上三角にする	plt.scatter(データ列x, データ列y, marker='^')
ロバスト回帰モデルを新規作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
カウンタ	collections.Counter()
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
カテゴリ別で色付けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
データフレームの列の中に文字列と日付データがいくつ存在するか求める	df[col].isin([value, value2]).sum()
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
縦棒グラフをスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='steelblue')
異なる列をキーにして二つの表データを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
箱髭図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
リストをリストを境界値としてビンニングする	pd.cut(aList, aList)
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
配列の標準偏差	np.std(aArray)
データフレームのカラムの値がNaNかどうか	df[col].isna()
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
入力ストリーム全体を行単位で分割して読み込む	f.readlines()
リストのn番目以降の部分を取り出す	aList[n:]
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
Pandasで、フォーマットfmtでデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format=fmt)
分子n、分母mの分数を準備する	fractions.Fraction(numerator=n, denominator=m)
文字列が部分文字列で終わる	s.endswith(sub)
オブジェクトがリストに含まれる	element in aList
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
データフレームのリストカラムの欠損値を最頻値で置換する	df[aList].fillna(df[aList].mode().iloc[0])
シーケンスに列を続けたイテラブル	itertools.chain(iterable, iterable2)
データフレームを表示するとき小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
データフレームの列の値がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
文字列の開始位置からと終了位置の間に部分文字列があるかどうか調べる	s.find(sub, start, end) != -1
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図の三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightgreen')
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
列によってデータフレームを並べ、上の方n件を取り出す	df.sort_values(columns).head(n)
文字列が全てアスキー文字かどうか調べる	s.isascii()
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
折れ線グラフのマーカーを▽印にする	plt.plot(データ列x, データ列y, marker='v')
リストにオブジェクトを追加する	aList.append(element)
リストの長さだけ繰り返す	range(len(aList))
平均値と標準偏差から乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
既存の行列を元に全要素が1の配列	np.ones_like(aArray)
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
黒い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
タイムスタンプデータの年数	aDatetime.year
option: ミスティローズ色を用いる	color = 'mistyrose'
0から始まる無限数列	itertools.count()
辞書の全をクリアする	aDict.clear()
グラフの用途をポスターに設定する	sns.set(context='poster')
文字列をコロンを用いて分割し、、列挙する	s.split(':')
パパイヤウィップにヒストグラムの色を指定する	plt.hist(データ列, color='papayawhip')
二つの列によってで破壊的にデータフレームを並べる	df.sort_values(by=['A', 'B'], inplace=True)
リストを分割数nを使ってビン分割する	pd.cut(aList, n)
多層パーセプトロンを使ってクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
折れ線グラフの上三角印の太さを変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
二つの文字列を順に表示する	print(value, value2)
データフレームの列を100の位で四捨五入する	df[col].round(-2)
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
両端キューの最大長	deq.maxlen
option: グラフの色をスカイブルーに変更する	color = 'skyblue'
option: ブール型を使う	dtype = np.int32
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
データ列とリストについての散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
実数が整数か調べる	x.is_integer()
数値の変数を数値で置き換える	e.subs(z, e2)
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
データフレームのリストカラムの未入力値を最小値に減らす	df[aList].fillna(df[aList].min())
データ列のNaNを平均値で置換する	ds.fillna(ds.mean())
プロットの用途を論文に設定する	sns.set(context='paper')
線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
配列とリストの散布図を描画し、下三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
昇順にリストの要素を並べ直す	sorted(aList, reverse=True)
青い破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ファイルからnとn2のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
データフレームのカラムの要約統計量を求める	df[col].describe()
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='gray')
折れ線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームの列が文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
データフレームの尖度	df.skew()
コーンズシルク色としてヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
option: オリーブにグラフの色を変更する	color = 'olive'
option: 分類木の最大深さをする	maxdepth = n
リストと配列についての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgray')
オブジェクトは関数	callable(obj)
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
option: フォントの色をゲインズボロに設定する	color = 'gainsboro'
ファイルを開いて]バイナリストリームを使う	open(filepath, mode='rb')
まとめてデータフレームのリストカラムを正規表現patternでreplに置き換える	df[aList].replace(pattern, repl, regex=True)
カラムの中にいくつNaNがあるか求める	ds.isna().sum()
ディープスカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
データフレームの中の列をビニングする	pd.cut(df[col], aList)
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
数列の変遷を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: UTF8を使う	encoding = 'utf-8'
option: シーグリーンにフォントの色を設定する	color = 'seagreen'
ライムグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
クラス分類をRANSACで行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
ライトグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: どのカラムもインデックスに設定しない	index_col = None
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
黒い三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームのシェイプ	df.shape
option: 色をベージュにセットする	color = 'beige'
行列の和	aArray + aArray2
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
マゼンタ色を使ってヒストグラムを描画する	plt.hist(データ列, color='magenta')
データフレームの列の未入力値を後の値に設定する	df[col].fillna(method='bfill')
option: グラフの色をクリムゾンに設定する	color = 'crimson'
データフレームの列を各グループ列ごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
下三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
プロットを論文用に指定する	sns.set(context='paper')
数列とリストについての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのリストカラムの欠損値を最頻値で補う	df[aList].fillna(df[aList].mode().iloc[0])
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
グラフで使う横軸のラベルを変更する	plt.xlabel('x軸ラベル')
半透明の破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
黒いポイントマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
ピアソン相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
文字列を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
小数点数以下の最大の整数	math.floor(x)
棒グラフをダークスラテグレー色を使って描画する	plt.bar(データ列x, データ列y, color='darkslategray')
散布図をアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
列によってによってデータフレームを破壊的に並べる	df.sort_values(by=column, inplace=True)
空の回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
イテラブルを双方向キューに変換する	collections.deque(iterable)
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
nが3で割り切れるかどうか	n % 3 == 0
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
カウンタ間で∩	aCounter & aCounter2
文字列リストにイテラブルを変換して、'改行でつなげる	'\n'.join(map(str, iterable))
カウンタをリセットする	aCounter.clear()
option: 箱ひげ図に平均を追記する	showmeans = False
カラムのpercentパーセンタイル	ds.quantile(percent/100)
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
option: ダークオーキッドに色をする	color = 'darkorchid'
データフレームのリストカラムの値がNaNか	df[aList].isna()
タイムスタンプデータをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
新しいガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
度数分布図でリストを描画する	plt.hist(データ列)
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
2つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
変数をスワップする	x, y = y, x
グラフを表示する	plt.show()
散布図の星印を赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
文字列内にひとつでもアスキー文字があるか	any(c.isascii() for c in s)
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
データフレームの標本標準偏差	df.std()
青いヒストグラムを描画する	plt.hist(データ列, color='b')
配列をビン数nとしてビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
最大長を指定して、両端キュー	collections.deque(maxlen=n)
集合をイミュータブルなセットにする	frozenset(aSet)
配列と数列について散布図を描き、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
分類木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
リストの最初のn要素を捨てる	aList[n:]
折れ線グラフの▽マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
文字列からformatのパターンでタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
赤い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
空のガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
浮動小数点数を切り下げて整数に変換する	math.floor(x)
カラムのユニークな値の個数	df[col].nunique()
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
データフレームのリストカラムの中にある文字列の数を求める	df[aList].isin([value]).sum()
データフレームの列がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
MSDとしてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データフレームのリスト列の未入力値を前の行の値に設定する	df[aList].fillna(method='ffill')
双方向キューに要素をエンキューする	deq.appendleft(element)
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
nをn2乗に増やす	n **= n2
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
折れ線グラフのバツ印を赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
両端キューから最初の値を取り除く	deq.remove(element)
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
折れ線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
無限大	math.inf
option: 印を左三角に設定する	marker = '<'
折れ線グラフの色をカーキにする	plt.plot(データ列x, データ列y, color='khaki')
本日の日	datetime.datetime.today().day
option: グラフの色をパールゴールデンロッドにする	color = 'palegoldenrod'
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
option: パウダーブルー色を使う	color = 'powderblue'
非数値データを連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
空行をプリントする	print()
option: ダイアモンドマーカーを加える	marker = 'D'
スラグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
データフレームのカラムを千の位で丸める	df[col].round(-3)
データフレームの列の各データ値の出現数	df[col].value_counts()
option: パパイヤウィップにグラフの色を設定する	color = 'papayawhip'
option: 小麦色を使用する	color = 'wheat'
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ダークマゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
２つの文字列を文字列で区切って表示する	print(value, value2, sep=s)
CSVファイルとしてJSONLファイルにデータフレームを書き込む	df.to_csv(filename)
データフレームの列の文字列をNaNに変換する	df[col].replace(s, np.nan)
option: 複数行に対応する	flag = re.MULTILINE
改行しないで変数を出力する	print(value, end='')
nがn2未満、またはn3以上かどうか	n < n2 or n >= n3
クラス分類を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームの中のカラムをn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
カウンタをイテラブルをカウントして、更新する	aCounter.update(iterable)
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
線グラフをダークカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームの列の値がxより大きい行を取り出す	df[df[column] > x]
イテラブルを文字列リストに変換して、'改行を使って一つにする	'\n'.join(map(str, iterable))
グラフの縦軸の名前をuntitledに指定する	plt.ylabel('y軸ラベル')
rgbの丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='turquoise')
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
リストの末尾から要素をポップする	aList.pop()
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの色を貝殻にセットする	plt.plot(データ列x, データ列y, color='seashell')
データ列のパーセントを円プロットで可視化する	plt.pie(データ列, startangle=90)
入力ストリームを全て読み込む	f.read()
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを各列毎に集約して、カラムの平均値を求める	df.groupby(column)[column2].mean()
横棒グラフをミディアムターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
線グラフを破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
Pythonパスの一覧	sys.path
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
nをn2だけ左シフトする	n << n2
赤い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの列名の一覧	df.columns
データフレームを'A'列を用いて昇順にソートする	df.sort_values(by='A', ascending=True)
option: ミディアムブルーを用いる	color = 'mediumblue'
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: ティールを使う	color = 'teal'
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
option: 淡いピンク色色を使用する	color = 'lightpink'
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
自然数個からk個取り出したときの順列の総数を算出する	math.perm(n, k)
ベクトルの計算をする	import numpy as np
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
破壊的にデータフレームを列を用いてを用いてソートする	df.sort_values(by=column, inplace=True)
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
カウンタから最頻出な値の件数	aCounter.most_common()[1]
空の辞書	{}
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
option: 色をシーグリーンに設定する	color = 'seagreen'
データ列と数列の散布図を描画し、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
タン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
ブラック色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフにクロスマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
ライトシアンにヒストグラムの色を指定する	plt.hist(データ列, color='lightcyan')
箱ひげ図をプロットして、平均線を加える	plt.boxplot(データ列, meanline=True)
文字列で区切って二つの文字列を表示する	print(value, value2, sep=s)
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
文字列がパターンにマッチさせる	re.match(pattern, s)
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームを列で昇順に並べ直して更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームとしてCSVファイルを読み込む	pd.read_csv(filename, sep=',')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
数値をキューにenqueueする	deq.appendleft(element)
配列を等量で分割数nでビン分割する	pd.qcut(aArray, n)
nはn2と等しいか調べる	n == n2
印字可能な文字を全て使う	string.printable
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
ファイルパスをSJISで書き込みできるように開く]	open(filepath, mode='w', encoding='shift_jis')
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を算出する	df.groupby([column, column2], as_index=False).count()
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
データフレームの中で列に重複があるか調べる	df.duplicated(subset=column)
カラーパレットを全般的に暗くする	sns.set(pallete='dark')
リストと数列の散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列が文字列リストのいづれか	s in aStringList
option: 無視するフッタをnに設定する	skipfooter = n
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
数値のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
データフレームがどれだけ、分散しているか見る	df.var()
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
プロットに目盛線を表示する	plt.grid(True)
部分文字列	sub in s
線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
データフレームの列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
二つのリストからマップ	dict(zip(aList, aList2))
データフレームを表示するとき、列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームの内容を見る	df.head()
大バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームのリスト列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[aList].corr())
配列の平均値	np.mean(aArray)
フォーマットとしてデータ列をdatetime64型にする	pd.to_datetime(ds, format='%Y-%m-%d')
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
option: 改行コードを旧Macに指定する	newline = '\r'
データフレームを小数点以下n桁で丸める	df.round(n)
グリッド線を黒くする	plt.grid(color='k')
2つの文字列を改行で区切って表示する	print(value, value2, sep='\n')
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
option: フォントの色をコーンフラワーブルーにセットする	color = 'cornflowerblue'
一度にデータフレームのリストカラムの値をValueMapで置き換える	df[aList].replace(ValueMap)
option: 先頭のカラムをインデックスに変更する	index_col = 0
ベクトルの列を選択する	aArray[:, 列番号]
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
リストとイテラブルについて散布図を描画してマーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
集合の要素が別の集合に含まれる	aSet.issubset(aSet2)
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
赤いクロスマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
option: 文字コードをEUCに変更する	encoding = 'euc_jp'
カウンタ同士で交わり	aCounter & aCounter2
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
データ列の中にと文字列が含まれるか	ds.isin([value, value2])
文字列の左側から部分文字列を除く	s.lstrip(sub)
乱数で要素を埋めた配列を初期化する	np.random.random(N)
option: マーカーを左三角に指定する	marker = '<'
option: 色をライトサーモンに設定する	color = 'lightsalmon'
データフレームが正規分布からどれだけ、歪んでいるか見る	df.kurt()
seabornのデフォルトスタイルを適用する	sns.set()
無限に数え上げるする	itertools.count()
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
タプルの総和を算出する	sum(aTuple)
外れ値に強い線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
option: 青緑を用いる	color = 'teal'
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
折れ線グラフの色をオレンジに指定する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
データ列の第一四分位数	ds.quantile(0.25)
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
オプションで標準エラーを用いる	file = sys.stderr
色テーマを全般的に明るくする	sns.set(pallete='bright')
ダークスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
option: namesをカラム名に指定する	names = names
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
option: 色をダークグレーに指定する	color = 'darkgray'
リストの集合	set(iterable)
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
散布図をブラウン色として描画する	plt.scatter(データ列x, データ列y, color='brown')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
赤いポイントマーカーを数列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
ファイルパスからの入力ストリームを見る	open(filepath)
イテラブル自身を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
折れ線グラフを赤い一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
Pandasで、データフレームのcollを書式fmtを用いて日付データに変換する	pd.to_datetime(df[col], format=fmt)
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
option: 小麦色を用いる	color = 'wheat'
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
空列を得る	[]
辞書に要素をキーとして加える	aDict[key] = element
ヒストグラムを青くする	plt.hist(データ列, color='b')
year年month月day日hour時minute分をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データフレームのリストで指定された列の相関行列	df[aList].corr()
線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
列でデータフレームをグループ化して、列の要約統計量を計算する	df.groupby(column).describe()[column2]
option: ボックスチャートに平均を加える	showmeans = False
辞書の項目名を列挙する	aDict.keys()
日付時刻データは何日か知る	aDatetime.day
データをL1ノルムを用いて正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
散布図を▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
等間隔でn個に列をビン分割する	pd.cut(ds, n)
ダークオリーブグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ヒートマップでクラス分類の予測精度を確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
実数のn乗の実数剰余	pow(x, n, y)
明るく色をグラフの描画で用いる	sns.set(pallete='bright')
散布図に下三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
3つの値を出力する	print(value, value2, value3)
データフレームの列の各値の出現回数	df[col].value_counts()
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
データフレームを列を用いて並べ直して、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
折れ線グラフのダイアモンド印の線幅を設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
横方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
option: フォントの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
列の値によってデータフレームを集約して列挙する	[(name, group) for name, group in df.groupby(column)]
作画の背景色を暗くする	sns.set(style='darkgrid')
option: グラフの色をライトスチールブルーにセットする	color = 'lightsteelblue'
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
プログラムを異常停止する	sys.exit(1)
再帰が何回までできるか知る	sys.getrecursionlimit()
列の値によってデータフレームをグループ化して、標準偏差を算出する	df.groupby(column).std()
棒グラフをピーチパフ色を用いて描画する	plt.bar(データ列x, データ列y, color='peachpuff')
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
実行結果を下線付き化する	f'\033[4m{value}\033[0m'
option: 大文字・小文字を無視する	flag = re.IGNORECASE
前もって複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームを列によってで破壊的に並べ直す	df.sort_values(by=column, inplace=True)
双方向キューをリストに変換する	list(deq)
棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
日付時刻データの時刻	aDatetime.hour
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
文字列の両端から空白を除去する	s.strip()
データフレームから指定した列のみ抽出する	df[[column]]
実数で実数を割る	x / y
文字列がタプルの要素	element in aTuple
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データ列の未入力値を直後の値に設定する	ds.fillna(method='bfill')
ゲインズボロ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
散布図のポイント印の大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
実数の指数を求める	math.frexp(x)[1]
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
データ列のNaNをxで補う	ds.fillna(x)
タイムスタンプデータがタイムスタンプデータよりあとかどうか調べる	aDatetime > aDatetime2
新しい回帰木モデルを作成する	model = sklearn.tree.DecisionTreeRegressor()
データフレームのNaNを前の値に設定する	df.fillna(method='ffill')
グラフの見栄えをいい感じに設定する	sns.set()
データ列とデータ列についての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
文字列の先頭から不要な空白を取り除く	s.lstrip()
作画のグリッドを白くする	sns.set(style='whitegrid')
小さい順に列でデータフレームをソートする	df.sort_values(by=column, ascending=True)
データフレームの列を1000の位で四捨五入する	df[col].round(-3)
キューの大きさを求める	len(deq)
自然数個からk個取り出した場合の順列の総数	math.perm(n, k)
option: フォントの色をディムグレーに指定する	color = 'dimgrey'
Pandasで、dateStringをPandasの日付型にする	pd.to_datetime(dateString)
データフレームを列の値によって集約する	df.groupby(column)
文字列がリストの要素	element in aList
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
option: 書き込みモードに変更する	mode = 'w'
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: フォントの色をアイボリーに設定する	color = 'ivory'
option: リネンを用いる	color = 'linen'
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
オブジェクトをn回繰り返すイテラブル	itertools.repeat(element, n)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
データ列間の平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
データフレームから指定された列だけ抽出する	df[[column]]
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームのリスト列の未入力値を最小値で補う	df[aList].fillna(df[aList].min())
文字列から部分文字列を取り除く	s.replace(sub, '')
リストと配列について散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
標準入力から改行を取り除いて1行読む	sys.stdin.readline().rstrip()
オブジェクトは集合クラスか調べる	isinstance(obj, set)
option: ライトグリーンにフォントの色を指定する	color = 'lightseagreen'
データフレームを各列毎にグループ化して、列の最小値を計算する	df.groupby(column)[column2].min()
原点から点までの距離を算出する	math.hypot(x, y)
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightgreen')
乱数生成系列をnで固定する	random.seed(n)
データフレームをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
データフレームを2つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
本日が何日か知る	datetime.datetime.today().day
タプルを逆順にする	aTuple[::-1]
空白	' '
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 印を星に変更する	marker = '*'
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
折れ線グラフの△マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
組の先頭のn要素を取り除く	aTuple[n:]
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ダークマゼンタ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ロバストな単回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ヒストグラムをアクア色を使って描画する	plt.hist(データ列, color='aqua')
データフレームの分散を求める	df.var()
xの小数点以下'4'桁までを表示する	print(':.4f'.format(x))
データフレームから散布図を作り線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
配列の列ごとの平均値	np.mean(aArray, axis=0)
データフレームから型リストで指定されたデータ型のカラムのみ抽出する	df.select_dtypes(include=typeList)
タプルに要素を項目名として加える	aDict[key] = element
リストとリストについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
双方向キューのn番目に値を差し込む	deq.insert(n, element)
xが1、もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ペルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
散布図をrgbの左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
数式のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
２次元組をflattenする	sum(aTuple)
文字列の開始位置から終了位置の範囲で部分文字列をカウントする	s.count(sub, start, end)
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームを複数の列で小さい順にソートする	df.sort_values(by=column, ascending=True)
文字列を空白を用いて区切って、数列に変換する	map(int, s.split())
オールドレース色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
をエクセルファイルファイルから読み込む	pd.read_excel(filename)
第二コマンド引数	sys.argv[1]
データフレームのカラムは何秒か確認する	df[col].dt.second
ミディアムブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
横棒グラフをやわらかい青色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームのリストカラムの値が欠損値か判定する	df[aList].isna()
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
文字列が文字列リストのいづれ	s in aStringList
散布図をモカシン色を用いて描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
折れ線グラフを黄緑色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームのリスト列の中に存在する文字列の合計を数える	df[aList].isin([value]).sum()
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
配列とデータ列の散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ミスティローズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
平方根を算出する	math.sqrt(x)
論文にグラフの用途をセットする	sns.set(context='paper')
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
データ列の度数分布図をプロットする	plt.hist(データ列)
棒グラフをダークレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
横棒グラフをフォレストグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='forestgreen')
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
スチールブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
行列の列ごとの分散を調べる	np.var(aArray, axis=0)
文字列の先頭でパターンにマッチするか確認する	re.match(pattern, s)
データフレームの中のカラムをビン数nを使ってビニングし、namesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
変数をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
インデント幅nで、辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
パパイヤウィップ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ヒストグラムをピーチパフ色を用いて描画する	plt.hist(データ列, color='peachpuff')
赤色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
データフレームのカラムを散布図を使って図示する	sns.scatterplot(data=df, x='列名', y='列名')
横棒グラフをマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='magenta')
補足の位置を指定する	plt.legend(loc=(x, y))
クラス分類をランダム性を強化したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
Pythonパスにディレクトリを追加する	sys.path.append(dir)
カラムのモードを算出する	ds.mode()
プロットの描画で色差別なく色を使用する	sns.set(pallete='colorblind')
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
option: 追加モードに設定する	mode = 'a'
実数を小数点で丸める	round(x, n)
文字列内にひとつでも小文字が含まれるか	any(c.islower() for c in s)
散布図の下三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
今日の曜日を見る	datetime.datetime.today().weekday()
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
散布図の上三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
サポートベクター回帰モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ベクトルのユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
データフレームの列をインデックスに変更する	df.set_index(column)
ユークリッド距離	math.dist(point, point2)
グラフのタイトルを変更する	plt.title('グラフの名称')
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
散布図を黒い四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
散布図に赤いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
折れ線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
青いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
何回まで再帰ができるかを	sys.getrecursionlimit()
nの2乗	n ** 2
縦棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
赤い点線で線を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
二つの数値をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームの指定した列をリストに変換する	df[column].values.tolist()
ミディアムバイオレットレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
データ列をdatetime64型に変換する	pd.to_datetime(ds)
カンマで文字列を区切って、列挙する	s.split(',')
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
データ列を1000の位で丸めて、整数にする	ds.round(-3).astype(int)
小数点数のバイナリ対数	math.log2(x)
横棒グラフを深紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
要素はマッピングの値に含まれていないか判定する	element not in aDict.values()
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: 分割記号を改行にする	sep = '\n'
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
色付きの破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategray')
にバイオリン図としてデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
二つの文字列は同じか判定する	s == s2
データフレームの列の値は欠損値か調べる	df[col].isna()
option: グラフの色をオレンジに指定する	color = 'orange'
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
コーンズシルク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
リストとリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
option: ▽マーカーを加える	marker = 'v'
データフレームのn行以降を抽出する	df[n:]
整数nの十六進数表現	hex(n)
文字列の終了位置より前に部分文字列が存在するかどうか調べる	s.find(sub, 0, end) != -1
option: ラインスタイルを一点鎖線に設定する	linestyle = 'dashbot'
データフレームの相関行列スピアマン相関係数で	df.corr(method='spearman')
option: バツ印を加える	marker = 'x'
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
パールゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
文字列をn回だけ置換する	s.replace(sub, newsub, n)
nが正の数	n > 0
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
点線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ミントクリームを使用する	color = 'mintcream'
option: フォントの色をモカシンに設定する	color = 'moccasin'
文字列をケースを無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
文字列を太字にする	f'\033[1m{value}\033[0m'
本日が金曜日	datetime.datetime.today().weekday() == 4
option: 色をスチールブルーに設定する	color = 'steelblue'
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
２つの文字列が同じか	s == s2
2つのオブジェクトが等しいかどうか調べる	obj == obj2
データフレームの中のNaNの合計を数える	df.isna().sum()
双方向キューの末尾	deq[-1]
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
データフレームの列の中に文字列と文字列がいくつあるかカウントする	df[col].isin([value, value2]).sum()
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
列とシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームを各列毎にグループ化し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
データ列の各データが何回出現するか確認する	ds.value_counts()
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
リストを緑色にする	f'\033[32m{value}\033[0m'
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
文字列の開始位置からと終了位置までの間に部分文字列がない	s.find(sub, start, end) == -1
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
t-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
モカシン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの中に存在する文字列と日付データの数を数える	df.isin([value, value2]).sum()
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
Pandasで日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
文字列を複数行対応としてパターンで区切る	re.split(pattern, s, flags=re.MULTILINE)
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームのそれぞれのグループの分散	df.groupby(column).var()
n個の整数列	list(range(n))
option: ライトゴールドロディイエローに色を指定する	color = 'lightgoldenrodyellow'
ロバストな線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
列名リストによってデータフレームをソートする	df.sort_values(by=column)
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
データ列の値が正規分布にしたがって発生する累積確率を使う	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
nとkのnCkを求める	math.comb(n, k)
行列の各要素の積	np.multiply(aArray, aArray2)
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
回帰分析をニューラルネットで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
本日の曜日を整数で使う	datetime.datetime.today().weekday()
マッピングをインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
縦向きに２つのデータフレームを連結する	pd.concat([df, df2], axis=0)
数式の変数の解を方程式として計算する	sympy.solve(e, z)
折れ線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
オプションで出力先を標準エラーに指定する	file = sys.stderr
predicateFuncを適用したときTrueになるリストの要素を消す	itertools.dropwhile(predicateFunc, iterable)
行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
データフレームの重複していない行を抽出する	df[not df.duplicated(keep=False)]
イテラブルと配列の散布図を描画して、マーカーを星にセットする	plt.plot(データ列x, データ列y, marker='*')
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
偽陰性を抑えたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
列からひとつランダムに選ぶ	random.choice(iterable)
文字コードに対応する文字	chr(unicode)
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
実数は無限大	math.isinf(x)
散布図の左三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
現在の再帰の最大回数を調べる	sys.getrecursionlimit()
カテゴリ別で色付けして、データフレームをにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
両端キューをリストに変換する	list(deq)
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
'A'列によってデータフレームを小さい順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
シーケンスのそれぞれを関数でフィルタする	map(func, iterable)
やわらかい青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
データフレームの列のリスト	df.info()
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データ列をn個にビニングする	pd.cut(ds, n)
ヒストグラムの色をオーキッドにする	plt.hist(データ列, color='orchid')
option: ダークオーキッドを使う	color = 'darkorchid'
線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
イテラブルを多重集合にする	collections.Counter(iterable)
JSONファイルの入力ストリームを読み込んでdataとする	data = json.load(fin)
ファイルの絶対パスを見る	os.path.abspath(filepath)
乱数で要素を埋めた行列	np.random.random((行数, 列数))
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
'A'列を用いてデータフレームをソートし、、更新する	df.sort_values(by='A', inplace=True)
リストを引数として展開して出力する	print(*aList)
数値の部分分数化する	sympy.apart(e)
option: マーカーをポイントに指定する	marker = '.'
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
option: エラーがあるとき、例外を発生させるように指定する	errors = 'strict'
散布図の星印を赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
Pandasでフォーマットfmtとしてデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
option: ブラウンにグラフの色を設定する	color = 'brown'
プロットの簡単な説明を表示する	plt.legend()
散布図を暗い赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームを列の値によってグループ化して平均値を計算する	df.groupby(column).mean()
文字列の左端からタブを除去する	s.lstrip('\t')
黒い下三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: 色をサンディーブラウンに変更する	color = 'sandybrown'
データフレームから型を抽出する	df.select_dtypes(ty)
数式の平方根を算出する	sympy.sqrt(e)
文字列はひらがな	('ぁ' <= ch <= 'ん')
option: スラグレーにフォントの色を変更する	color = 'slategrey'
説明変数と目的変数として分類モデルを学習する	model.fit(説明変数, 目的変数)
データフレームのNaNを中央値に設定する	df.fillna(df.median())
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
浮動小数点数の複素数	complex(x)
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
折れ線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
グラフの見た目をよくする	import seaborn as sns
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
横棒グラフをダークグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkgrey')
実数を2乗する	x ** 2
option: 四角マーカーを描画する	marker = 's'
モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
option: ホワイトスモークにフォントの色をする	color = 'whitesmoke'
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
行列から重複を除いた配列を初期化する	np.unique(aArray)
３つの最小値を算出する	min(x, y, z)
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
数値を白色にする	f'\033[37m{value}\033[0m'
折れ線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
色付きの実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
最大値・最小値の範囲で一様な疑似乱数を発生させる	random.uniform(最小値, 最大値)
リストの値を並べ変える	sorted(aList)
データフレームのリストカラムの中に存在する文字列の合計をカウントする	df[aList].isin([value]).sum()
データフレームの指定された列を配列に変換する	df[column].values
標準入力から1行だけ読む	sys.stdin.readline()
nの十六進数リテラル	hex(n)
データフレームを列でを用いて降順にソートする	df.sort_values(by=column, ascending=False)
リストとイテラブルについて散布図を描いて、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
部分文字列が文字列の開始位置番目からと終了位置までの範囲に含まれない	s.find(sub, start, end) == -1
コーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
カテゴリで色分けして、データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
コマンドの第二引数	sys.argv[1]
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
バイナリ用にファイルを開く]	open(filepath, mode='rb')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
オブジェクトがタプルの要素か調べる	element in aTuple
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
データ列を整数に四捨五入する	ds.round()
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
リストとデータ列について散布図をプロットして、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
まとめてカラムをValueMapで置換する	ds.replace(ValueMap)
グラフの見た目を綺麗にする	import seaborn as sns
本日のタイムスタンプ	datetime.datetime.now()
ヒストグラムを実線で描く	plt.hist(データ列, linestyle='solid')
日付データからn週間を減らす	aDate - datetime.timedelta(weeks=n)
中央値で配列を分割する	pd.qcut(aArray, 2)
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
データフレームの列がxの行を選択する	df[df[column] == x]
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
赤い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
option: アリスブルー色を用いる	color = 'aliceblue'
データフレームの列を削除して、更新する	df.drop(column, axis=1, inplace=True)
集合を変更不能なセットに変換する	frozenset(aSet)
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
実数から実数を減ずる	x - y
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
折れ線グラフをオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='orange')
カウンタを多い順に列挙する	aCounter.most_common()
データフレームのリスト列の中にいくつ欠損値が存在するか求める	df[aList].isna().sum()
オブジェクトはタプル型	isinstance(obj, tuple)
option: デピンクにグラフの色を変更する	color = 'deeppink'
デピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
リストとリストの散布図を描いて、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムをデピンク色を使って描画する	plt.hist(データ列, color='deeppink')
xでデータフレームのリスト列の未入力値を埋める	df[aList].fillna(x)
rgbのポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
デック中の値のインデックスを使う	deq.index(element)
折れ線グラフの色を真紅にセットする	plt.plot(データ列x, データ列y, color='crimson')
データフレームの末尾n行を抽出する	df.tail(n)
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
option: グラフの色をマゼンタに指定する	color = 'magenta'
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
パウダーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
色付きの点線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフのダイアモンド印の太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
TSVファイルをヘッダなしで読み込む	pd.read_csv(filename, header=None)
双方向キューの最大長	deq.maxlen
実数を実数に乗算する	x * y
リストとイテラブルについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームのカラムの欠損値を平均で埋める	df[col].fillna(df[col].mean())
キーがマッピングに存在するか調べる	key not in aDict
option: ペルーにグラフの色を設定する	color = 'peru'
アクア色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
リストの要素を小さい方から並べ変える	sorted(aList, reverse=True)
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
二つの集合が互いに素	aSet.isdisjoint(aSet2)
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
折れ線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
行列の行ごとの最大を求める	np.max(aArray, axis=1)
データフレームを'A'列によって整列してNaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
データフレームのリストカラムを千の位で丸める	df[aList].round(-3)
行列積を求める	np.matmul(aArray, aArray2)
ヒストグラムをラベンダーブラッシュ色として描画する	plt.hist(データ列, color='lavenderblush')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
実数の双曲線正弦	math.sinh(x)
実数の３乗	x ** 3
一点鎖線に折れ線グラフの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
タプルのn番目以降の要素を取り出す	aTuple[n:]
整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int)
オレンジ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
y座標の目盛を対数に変更する	plt.yscale('log')
リストをn回、連結する	aList * n
棒グラフをパープル色を使って描画する	plt.bar(データ列x, データ列y, color='purple')
⊆かどうか確認する	aSet.issubset(aSet2)
データフレームのデータを条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
実数がNaN	math.isnan(x)
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
文字列の開始位置以降に部分文字列が含まれるか	s.find(sub, start) != -1
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: 無視する列番号をnamesで指定する	skiprows = names
シャルトリューズ色としてヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
文字列の先頭だけ大文字化する	s.capitalize()
option: ドジャーブルー色を使う	color = 'dodgerblue'
オリーブ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
日付データの曜日を求める	aDate.weekday()
二つの列によってで破壊的にデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
オブジェクトはタプルか調べる	isinstance(obj, tuple)
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
option: グラフの色をデピンクにする	color = 'deeppink'
カテゴリで色分けして、データフレームの全カラムの相関を見る	sns.pairplot(df, hue='カテゴリ列')
辞書のエントリ数	len(aDict)
データフレームを各列毎にグループ分けして、文字列というグループを使う	df.groupby(column).get_group(s)
最大値でデータフレームのNaNを埋める	df.fillna(df.max())
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームを各列と列の組み合わせ毎に集計して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
範囲から行列	np.linspace(最小値, 最大値, 要素数)
option: バイオレットにグラフの色を設定する	color = 'violet'
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
kを底とする小数点数の対数を求める	math.log(x, k)
現在をタプルに変換する	datetime.datetime.today().timetuple()
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
nがセットのどれか	n in aSet
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームとデータ列を一つにまとめる	pd.concat([df, ds], axis=1)
日付データが金曜日か	aDate.weekday() == 4
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
回帰分析をK最近傍法として行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
白色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
折れ線グラフに青い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: バリーウッドにフォントの色を設定する	color = 'burlywood'
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
複素数型のゼロ埋めされた行列	np.zeros(要素数, dtype=bool)
小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: 青色を使う	color = 'blue'
文字列中にひとつでも非アルファベットが含まれる	any(not c.isalpha() for c in s)
rgbの右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームをグループ化し、各列に対し標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
モードでデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].mode().iloc[0])
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
青い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
既存のファイルを文字コードtextとして追加できるように開く]	open(filepath, mode='a', encoding=text)
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
リストの末尾にリストを追加する	aList.extend(aList2)
やわらかい青色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
部分文字列によって文字列を二分する	s.partition(sub)
実数に実数をかける	x * y
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
ライトスレイグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightslategrey')
JSONLファイルにCSV形式でデータフレームを保存する	df.to_csv(filename)
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
文字列中の部分文字列の登場を数える	s.count(sub)
箱ひげ図を描画して平均値を加える	plt.boxplot(データ列, showmeans=True)
option: グラフの色をスプリンググリーンに指定する	color = 'springgreen'
配列をビン数nとして分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの欠損値を中央値にセットする	df.fillna(df.median())
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
データフレームの中にいくつ文字列が含まれるか求める	df.isin([value]).sum()
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
日付を使う	import datetime
文字列が全てアスキー文字か調べる	s.isascii()
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
データ列を閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: ３2ビット整数型を用いる	dtype = np.int16
折れ線グラフの菱形印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
ラインを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: マーカーをクロスに変更する	marker = 'x'
option: 整数型を使う	dtype = np.int
縦軸の目盛りを対数に変更する	plt.yscale('log')
表データの指定された列を配列として抽出する	df[column].values
プラットホームがウィンドウズか調べる	sys.platform.startswith('win32')
option: オリーブ色を使う	color = 'olive'
２つのリストからマップを作る	dict(zip(aList, aList2))
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
ValueMapでデータフレームのリスト列の値を置き換える	df[aList].replace(ValueMap)
タプルをリバースする	reversed(aTuple)
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
ダークターコイズ色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
デフォルト見栄えを適用する	sns.set()
ASCII限定としてパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
リストの全ての要素を消去する	aList.clear()
データフレームのNaNがある箇所に	df.style.highlight_null()
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
文字列中に非英数字が含まれるか	any(not c.isalnum() for c in s)
異なる列をキーとして2つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
散布図に右三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='>')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
セットが空でないか判定する	len(aSet) != 0
イテラブルを箱ひげ図にする	plt.boxplot(データ列)
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
プロット中のフォントを設定する	sns.set(font=フォント名)
オブジェクトのフィールドの値を値に変更する	setattr(obj, プロパティ名, 値)
本日の年数	datetime.datetime.today().year
データを最大最小として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
縦棒グラフを描いてラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
カテゴリで色分けしてデータフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
列の各データが何回出現するか確認する	ds.value_counts()
option: マーカーを大バツに変更する	marker = 'X'
円周率	math.pi
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
今日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
二つのリストのインターセクションを算出する	list(set(aList) & set(aList2))
折れ線グラフの色をトマトにする	plt.plot(データ列x, データ列y, color='tomato')
折れ線グラフの印を上三角にする	plt.plot(データ列x, データ列y, marker='^')
16進文字列を整数にする	int(s, 16)
数列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ライムにヒストグラムの色をする	plt.hist(データ列, color='lime')
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
最大最小値としてデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ハローワールドと出力する	print('Hello World')
データ列の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
option: 行列のデータ型を指定する	dtype = np.int
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
データ列の歪度	ds.kurt()
等間隔の配列	np.arange(開始値, 終了値, 等差)
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
数列とリストについての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: EUCを使う	encoding = 'euc_jp'
グリッド線	plt.grid(alpha=0.5)
線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
赤い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
option: グラフの色をオリーブに設定する	color = 'olive'
nを八進表現に変換する	oct(n)
option: 分類木の最大深さを設定する	maxdepth = n
リストと配列の散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
文字列を双方向キューのn番目に挿入する	deq.insert(n, element)
リストの末尾からn番目以前の要素を抽出する	aList[:-n]
数値を黄色にする	f'\033[33m{value}\033[0m'
追加できるように既存のファイルをBOM付きとして開く]	open(filepath, mode='a', encoding='utf_8_sig')
実数の自然対数	math.log(x)
別の文字列で文字列を置換する	s.replace(sub, newsub)
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
実数の整数部を算出する	math.modf(x)[1]
Pandasで、書式として文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
option: ラインスタイルを点線に指定する	linestyle = 'dotted'
スタックをリストに変換する	list(deq)
棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
アイボリー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
日付データが日曜日か判定する	aDate.weekday() == 6
文字列の中のASCII限定として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
エクセルデータファイルをデータフレームとして読み込む	pd.read_excel(filename)
集合からエラーなく値を取り除く	aSet.discard(element)
最初の部分文字列で文字列を二分し、前半の文字列を使う	s.partition(sub)[0]
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
綺麗なグラフを用いる	import seaborn as sns
マゼンタ色としてヒストグラムを描画する	plt.hist(データ列, color='magenta')
option: 赤にグラフの色を設定する	color = 'red'
散布図でデータフレームの列を見る	sns.scatterplot(data=df, x='列名', y='列名')
データ列の折れ線プロットを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
表データを列によってグループ化してそれぞれのグループごとの最大値を求める	df.groupby(column).max()
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームの列の名前を列挙する	df.columns
集合をイミュータブルなセットに変換する	frozenset(aSet)
データ列の中に含まれると日付データの個数を数える	ds.isin([value, value2]).sum()
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
数列をヒストグラムにする	plt.hist(データ列)
辞書順で文字列は文字列より後か	s > s2
ファイルをBOM付きを使ってオープンする]	open(filepath, encoding='utf_8_sig')
折れ線グラフの色をダークスラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図をシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='cyan')
グラフに鉛直方向の点線を設定する	plt.axvline(x=0, linestyle='dotted')
リストと数列の散布図をプロットして、菱形マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
黒い菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
セットの更新不能版	frozenset(aSet)
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: フォントの色をスラグレーに指定する	color = 'slategray'
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
リスト内の要素が少なくともひとつ真かどうか調べる	any(aList)
option: ライトグリーン色を使用する	color = 'lightseagreen'
文字列は識別子名	s.isidentifier()
option: トマトを使う	color = 'tomato'
数値を緑色にする	f'\033[32m{value}\033[0m'
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
行列の列ごとの最小を計算する	np.min(aArray, axis=0)
実数のn乗	pow(x, n)
データフレームを各列と列の組み合わせ毎に集約して、最大値を求める	df.groupby([column, column2], as_index=False).max()
列を用いて小さい順にデータフレームを並べ、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
イテラブルを文字列リストに変換して、'改行によって連結する	'\n'.join(map(str, iterable))
ベクトルの平均を求める	np.mean(aArray)
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図をダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームのリストカラムの中にいくつ文字列があるか求める	df[aList].isin([value]).sum()
インプレイスでデータフレームから重複したデータを削除する	df.drop_duplicates(inplace=True)
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
変数を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
整数乱数で要素を埋めた配列を作る	np.random.randint(開始値, 終了値, N)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
グラフの使途を論文に変更する	sns.set(context='paper')
リストの末尾のn要素を取り除く	aList[:-n]
現在の年数	datetime.datetime.today().year
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
数式を積分する	sympy.integrate(e)
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
行列を元にして全要素が初期値の行列	np.full_like(aArray, 初期値)
空の辞書を作る	{}
双方向キューの末尾から要素を取り除く	deq.pop()
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
リストとデータ列について散布図をプロットし、、菱形マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: 色を淡いピンク色に変更する	color = 'lightpink'
辞書の項目名に対応した値を参照する	aDict.get(key)
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
option: ホワイトを使う	color = 'white'
データフレームの中に日付データと日付データがいくつあるか数える	df.isin([value, value2]).sum()
項目名が辞書上で定義されているか調べる	key in aDict
option: ダークサーモン色を使う	color = 'darksalmon'
ファイルパスを追加モードとして開く]	open(filepath, mode='a')
折れ線グラフのクロスマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
浮動小数点数の双曲線正弦の逆数を計算する	math.asinh(x)
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
２つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
本日のローカルな日付時刻	datetime.datetime.today()
実行結果を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
全要素を初期値で初期化した行列を作成する	np.full(要素数, 初期値, dtype=np.int)
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
散布図の▽マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
nが正の整数かどうか調べる	n > 0
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
option: どの行もヘッダに設定しない	header = None
データフレームから重複を落とす	df.drop_duplicates()
option: 丸マーカーを加える	marker = 'o'
データフレームを列名リストによって並べる	df.sort_values(by=column)
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームのリスト列の欠損値をxにする	df[aList].fillna(x)
ひとつ飛ばしでタプルを得る	aTuple[::2]
データフレームの中のカラムをn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ファイルを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
タプルにマップのエントリを更新する	aDict.update(aDict2)
バイナリ用にファイルパスをオープンする]	open(filepath, mode='rb')
ケンドールの相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
データフレームのカラムの中に含まれる文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
ファイルからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
新しい文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
折れ線グラフの▼印の大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
行列の行	aArray[行番号]
バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
グリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
横棒グラフをダークレッド色として描画する	plt.barh(データ列x, データ列y, color='darkred')
列から行列を作成する	np.array(iterable)
option: 真紅色を使う	color = 'crimson'
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
option: グラフの色をスチールブルーにする	color = 'steelblue'
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
実数の双曲線正弦を算出する	math.sinh(x)
ヒストグラムの色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
箱ひげ図で配列を描画する	plt.boxplot(データ列)
option: スカイブルー色を用いる	color = 'skyblue'
option: フォントの色を茶色に設定する	color = 'brown'
要素∈セット	element in aSet
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
データ列の中の未入力値の合計をカウントする	ds.isna().sum()
option: パープルにグラフの色を設定する	color = 'purple'
グラフを論文用に設定する	sns.set(context='paper')
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
縦棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
リストとリストの散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフを赤色を使って描画する	plt.plot(データ列x, データ列y, color='red')
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
データフレームのリストカラムの欠損値をモードで埋める	df[aList].fillna(df[aList].mode().iloc[0])
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
ガウス過程を用いて回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
乱数シードをnで初期化する	random.seed(n)
箱髭図を二つ並べてプロットする	plt.boxplot([データ列, データ列])
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
数値を緑色で表示する	print(f'\033[32m{value}\033[0m')
データフレームのカラムは何分か確認する	df[col].dt.minute
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='gray')
リストの末尾を捨てる	aList[:-1]
折れ線グラフを用いてデータフレームのカラムを可視化する	plt.plot(df[column], df[column])
集合が空でないか確認する	len(aSet) != 0
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
データフレームを各列毎にグループ分けして、文字列というグループの個数を算出する	df.groupby(column).size()[s]
文字列を部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
散布図を淡いピンク色色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightpink')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
カラムの中の欠損値の個数を数える	ds.isna().sum()
リストの最後からn番目以前の要素を取り出す	aList[:-n]
散布図にバツ印を加える	plt.scatter(データ列x, データ列y, marker='x')
option: フォントの色をオリベドラブに設定する	color = 'olivedrab'
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
日付時刻データのタイムゾーン	aDatetime.timetz()
option: グラフの色をレモンシフォンに指定する	color = 'lemonchiffon'
要素ひとつの組	(element,)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列リストを一つにして一つの文字列にする	''.join(map(str, iterable))
既存のファイルを文字列の示すエンコーディングとして追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
データ列を等しい量になるようにビン数nで分割する	pd.qcut(ds, n)
シアンで変数をプリントする	print(f'\033[36m{value}\033[0m')
シャルトリューズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
上限制限された長さnの双方向キューを新規生成する	collections.deque(maxlen=n)
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
列によってデータフレームをグループ化し、要約統計量を計算する	df.groupby(column).describe()
逆順の双方向キューを見る	reversed(deq)
データフレームの欠損値を平均値で置換する	df.fillna(df.mean())
今日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
散布図を右三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='>')
データフレームを十の位で丸めて、整数にする	df.round(-1).astype(int)
nがn2の倍数かどうか調べる	n % n2 == 0
option: ミディアムパープルにグラフの色をする	color = 'mediumpurple'
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
値はセットに含まれるか	element in aSet
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
真紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
データ列が正規分布からどれだけ、尖っているか確認する	ds.skew()
データフレームの列の値をまとめてValueMapで置換する	df[col].replace(ValueMap)
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
散布図をrgbの▲マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図を黒い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
データ列が正規分布に従うか調べる	scipy.stats.shapiro(データ列)
ファイルを追加できるようにSJISを用いて開く]	open(filepath, mode='a', encoding='shift_jis')
データ列の推移を半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
イテラブルから両端キューを準備する	collections.deque(iterable)
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
整数nを16進表現に変換する	hex(n)
データフレームの列のNaNを直前の値に指定する	df[col].fillna(method='ffill')
Pandasでエポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
折れ線グラフの四角印を青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
nマイナスn2を計算する	n - n2
option: フォントの色をハニーデューに指定する	color = 'honeydew'
折れ線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
データ列の中にいくつNaNがあるかカウントする	ds.isna().sum()
が名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームのリストカラムを整数に丸める	df[aList].round()
option: マーカーを▲に指定する	marker = '^'
実数の二進対数を求める	math.log2(x)
バイナリ書き込みできるようにファイルパスを開く]	open(filepath, mode='wb')
文字列内に空白がある	any(c.isspace() for c in s)
青緑色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
上限から下限までの区間で柱状グラフをプロットする	plt.hist(データ列, range=(start, end))
ライトグリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームの列をドロップして、インプレイスする	df.drop(column, axis=1, inplace=True)
8進文字列を整数にする	int(s, 8)
データフレームのカラムがxの行を抽出する	df[df[column] == x]
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
文字列中に非大文字が含まれるか確認する	any(not c.isupper() for c in s)
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
マッピングのキーの値	aDict[key]
文字列を別の文字列で置き換える	s.replace(sub, newsub)
カウンタからタプルを引く	aCounter.subtract(aDict)
option: マーカーを星に変える	marker = '*'
option: グラフの色を青に変更する	color = 'blue'
文字列の中でパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s)
option: ターコイズを使う	color = 'turquoise'
グラフの短い説明の場所を(x,y)に指定する	plt.legend(loc=(x, y))
回数を制限して文字列を置き換える	s.replace(sub, newsub, n)
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
データフレームを列でグループ化し、、それぞれのグループ毎の平均値を求める	df.groupby(column).mean()
最大値でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].max())
データフレームを複数の列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
散布図をパールゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
カラムの欠損値を平均に設定する	ds.fillna(ds.mean())
データ列の欠損値を直前の値に増やす	ds.fillna(method='ffill')
プレゼンにプロットの目的を指定する	sns.set(context='talk')
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列x, データ列y, color='firebrick')
x座標の目盛を非表示にする	plt.xticks([])
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
暗い赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
アクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
カラムの中にある日付データと文字列の合計を求める	ds.isin([value, value2]).sum()
nわるn2	n / n2
オリベドラブ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データフレームを'A'列で小さい順にソートする	df.sort_values(by='A', ascending=True)
10を底とする実数の対数	math.log10(x)
縦棒グラフをダークサーモン色として描画する	plt.bar(データ列x, データ列y, color='darksalmon')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
タイムスタンプデータが日付時刻データと同時か調べる	aDatetime == aDatetime2
データフレームのカラムを10の位で丸めて整数型にする	df[col].round(-1).astype(int)
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームを各列と列の組み合わせ毎にグループ化して、分散を計算する	df.groupby([column, column2], as_index=False).var()
データフレームの列がx以下の行を選択する	df[df[column] <= x]
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
データフレームの列の空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
option: 色をパールバイオレットレッドに設定する	color = 'palevioletred'
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
散布図を暗い赤色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
双方向キューに要素をスタックする	deq.append(element)
replに正規表現patternでデータ列をまとめて置き換える	ds.replace(pattern, repl, regex=True)
フォーマットでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
半透明の実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: グリーンに色を指定する	color = 'green'
リストをカンマ区切りで表示する	print(*aList, sep=',')
折れ線グラフの色をダークサーモンにセットする	plt.plot(データ列x, データ列y, color='darksalmon')
リストと配列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
赤い上三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
日付時刻データが日付時刻データより後ろか	aDatetime > aDatetime2
リストとリストについての散布図にrgbの菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
既存の配列をベースに全要素が0の配列	np.zeros_like(aArray)
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
option: シャルトリューズを使う	color = 'chartreuse'
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
２つのオブジェクトが等しいか調べる	obj == obj2
ヒストグラムをライトコーラル色として描画する	plt.hist(データ列, color='lightcoral')
実数が無限大かどうか調べる	math.isinf(x)
縦棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
データフレームのカラムの中に日付データが含まれるか調べる	df[col].isin([value])
線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
xとyの商と余りを同時に計算する	divmod(x, y)
データフレームを'A'列と'B'列によってで大きい順に並べ直す	df.sort_values(by=['A', 'B'], ascending=False)
リストが空か	len(aList) == 0
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
イテラブルとリストについて散布図をプロットして、マーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
option: 白に色を設定する	color = 'white'
線グラフをブランチドアーモンド色を用いて描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
リストとリストについて散布図を描画して、マーカーをダイアモンドにセットする	plt.plot(データ列x, データ列y, marker='D')
アクアマリン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
option: 線の種類を実線に指定する	linestyle = 'solid'
データフレームからランダムにn行を抽出する	df.sample(n)
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
option: マーカーの色を白にする	markerfacecolor = 'white'
文字列中に非空白が含まれる	any(not c.isspace() for c in s)
オブジェクトがクラスか調べる	isinstance(obj, クラス)
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
黒い▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムの線種を実線に設定する	plt.hist(データ列, linestyle='solid')
インディゴ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
実行を適切に終了する	sys.exit(0)
横棒グラフをライトシアン色を使って描画する	plt.barh(データ列x, データ列y, color='lightcyan')
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データフレームの列の欠損値を直後の値に設定する	df[col].fillna(method='bfill')
option: グラフの色をスラグレーに指定する	color = 'slategray'
配列とリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
文字列が全て英数字	s.isalnum()
有理数モジュールを用いる	import fractions
ネイピア数を使う	math.e
リストの末尾を取り除く	aList[:-1]
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数	s.count(sub, start, end)
データフレームを列の値毎にグループ化して、グループごとの個数を計算する	df.groupby(column).count()
ファイルをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
数式を浮動小数点数にする	float(e)
散布図をダークグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: ブルーバイオレット色を用いる	color = 'blueviolet'
データフレームを列の値によってグループ化して、個数を計算する	df.groupby(column).count()
グラフの描画で明るく色を使用する	sns.set(pallete='bright')
データ列の相関を可視化する	plt.scatter(データ列x, データ列y)
シーグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2])
option: グラフの色をイエローグリーンに変更する	color = 'yellowgreen'
マッピングをネスト化する	collections.ChainMap(aDict)
シードをnで初期化する	random.seed(n)
シーケンスにイテラブルを続ける	itertools.chain(iterable, iterable2)
柱状図を用いてデータ列を可視化する	plt.hist(データ列)
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
浮動小数点数のハイパボリック・サイン	math.sinh(x)
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
二つの表データを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームのリストカラムを丸める	df[aList].round()
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
箱ひげ図を描いて、平均値を追加する	plt.boxplot(データ列, showmeans=True)
データフレームを複数の列の値でグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームのリスト列の未入力値を直後の値に設定する	df[aList].fillna(method='bfill')
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
マッピングの項目を列挙する	aDict.values()
ヒストグラムの色をミディアムシアグリーンにする	plt.hist(データ列, color='mediumseagreen')
データフレームのn行までを抽出する	df[:n]
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
実数の余弦を求める	math.cos(x)
カウンタからゼロ出現回数を取り除く	+aCounter
文字列が全て数値か	s.isnumeric()
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
列と列の重複を取り除く	df.drop_duplicates(subset=column)
縦棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
文字列がリストに含まれないか	element not in aList
両端キューの末尾に値を入れる	deq.append(element)
データフレームのインデックスを振り直す	df.reset_index()
rgbのダイアモンドマーカーをイテラブルと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
カウンタのボトムをリストとして得る	aCounter.most_common()[:-n-1:-1]
実数の双曲線余弦の逆数	math.acosh(x)
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
破壊的に重複をデータフレームから削除する	df.drop_duplicates(inplace=True)
既存のファイルを文字列の示すエンコーディングを使って追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
option: ▽印を描画する	marker = 'v'
データ列を丸める	ds.round()
year年month月day日をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day)
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
SJISでファイルを開く]	open(filepath, encoding='shift_jis')
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
実数の逆双曲線正接を求める	math.atanh(x)
データフレームを各カラムと列の組み合わせ毎にグループ化し、、分散を算出する	df.groupby([column, column2], as_index=False).var()
ファイルをバイナリ書き込み用に開く]	open(filepath, mode='wb')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
非アスキー文字が文字列中に含まれるか調べる	any(not c.isascii() for c in s)
ディープスカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
xを浮動小数点数型に変換する	float(x)
タプルの各要素を関数でフィルタする	map(func, iterable)
黒い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: フォントの色をマルーンに設定する	color = 'maroon'
データフレームをCSV形式でJSONLファイルに保存する	df.to_csv(filename)
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
ファイルパスをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
1行標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
上限制限された長さを指定して、両端キュー	collections.deque(maxlen=n)
データフレームのカラムを散布図で見て、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
行列の最小	np.min(aArray)
option: フォントの色をスノーに設定する	color = 'snow'
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
直前の値でデータフレームの未入力値を埋める	df.fillna(method='ffill')
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ヒストグラムをナバホホワイト色を用いて描画する	plt.hist(データ列, color='navajowhite')
新しいロッソ回帰モデルを作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を算出する	df.groupby([column, column2], as_index=False).max()
数値を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
option: 色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
カテゴリで色付けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
option: グラフの色をアイボリーにセットする	color = 'ivory'
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ひとつでもアルファベットが文字列内に含まれるか	any(c.isalpha() for c in s)
赤い下三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: ホワイト色を用いる	color = 'white'
option: グラフの種類を一点鎖線に指定する	linestyle = 'dashbot'
文字列の開始位置より後に部分文字列が含まれるか調べる	s.find(sub, start) != -1
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
回帰分析をガウス過程でする	model = sklearn.gaussian_process.GaussianProcessRegressor()
両端キューの中にデータは存在するかどうか確認する	element in deq
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
2つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
高頻度方からカウンタを列挙する	aCounter.most_common()
実数の絶対値を求める	math.fabs(x)
データフレームの中に文字列があるかどうか調べる	df.isin([value])
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
逆双曲線正弦	math.asinh(x)
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームのカラムのタイムゾーンを文字列にセットする	df[col].tz_convert(s)
列を累加した列	itertools.accumulate(iterable)
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームを列によって並べて更新する	df.sort_values(by=column, inplace=True)
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
データフレームを列によってソートして、上位を取り出す	df.sort_values(columns).head(n)
多次元尺度構成法として多次元データをパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
列によって昇順にデータフレームを破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
平均でデータフレームのリスト列のNaNを埋める	df[aList].fillna(df[aList].mean())
データフレームのカラムの値をValueMapでまとめて置換する	df[col].replace(ValueMap)
データフレームのリスト列の欠損値を直前の値で補う	df[aList].fillna(method='ffill')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
リストと数列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
nかけるn2を求める	n * n2
スピアマンでデータフレームの相関行列	df.corr(method='spearman')
0から始まる無限の数列	itertools.count()
データ列をタイムスタンプ型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
集合に値を追加する	aSet.add(element)
作画の背景色を暗くする	sns.set(style='darkgrid')
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
データ列の折れ線グラフを丸印として描画する	plt.plot(データ列x, データ列y, marker='o')
ファイルをバイナリ用にオープンして]fとする	f = open(filepath, mode='rb')
線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
クラス分類の真陰性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
サンディーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
y座標の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
2つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
option: 読み込むシートの名前をnamesに指定する	sheet_name = names
３つの文字列を順にプリントする	print(value, value2, value3)
数の3乗	x ** 3
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
データフレームの列を散布図でグラフ化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
文字列の先頭を使う	s[0]
option: スノー色を使う	color = 'snow'
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
option: 四角マーカーを加える	marker = 's'
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
リストとデータ列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムを用いてリストを可視化する	plt.hist(データ列)
データフレームの中に文字列と文字列が含まれるかどうか確認する	df.isin([value, value2])
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
度数分布図の描画して、正規化する	plt.hist(データ列, density=True)
グラフを使う	import matplotlib.pyplot as plt
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームのカラムの未入力値を最小値で置換する	df[col].fillna(df[col].min())
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームの列を目的変数にする	目的変数 = df['列名']
左三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
上位集合もしくは等しいか	aSet > aSet2
ダーク・スラテグレーにヒストグラムの色をセットする	plt.hist(データ列, color='darkslategrey')
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
2つの文字列は等しいか	s == s2
行列の行ごとの最小値を計算する	np.min(aArray, axis=1)
option: フォントの色をライトグレーに設定する	color = 'lightgray'
option: フローラルホワイトに色を設定する	color = 'floralwhite'
ひとつでも大文字が文字列内にあるか調べる	any(c.isupper() for c in s)
多次元データをt-SNEとして濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
配列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
データフレームのリストカラムの欠損値を最大値で置換する	df[aList].fillna(df[aList].max())
リストとリストの散布図を描画して、マーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
リストをソートする	sorted(aList)
floatの最小値	sys.float_info.min
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図を丸マーカーで描画する	plt.scatter(データ列x, データ列y, marker='o')
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
青い点線として折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
積み上げ棒グラフをプロットする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
ファイルの絶対パス	os.path.abspath(filepath)
データフレームのリストカラムのNaNをメディアンに設定する	df[aList].fillna(df[aList].median())
リストの中の一番小さい値を算出する	min(aList)
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
縦棒グラフを描き、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データ列の中に文字列とがいくつあるかカウントする	ds.isin([value, value2]).sum()
文字列の開始位置からと終了位置の間に部分文字列があるか	s.find(sub, start, end) != -1
組の末尾からn番目以前の要素を取り出す	aTuple[:-n]
グラフから目盛線を表示しない	plt.grid(False)
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
ヒストグラムをライトスチールブルー色を用いて描画する	plt.hist(データ列, color='lightsteelblue')
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
タプルの合計を求める	sum(aTuple)
イテラブルの組み合せ	itertools.combinations(iterable, n)
右三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
配列の最小値	np.min(aArray)
グラフをポスター用にセットする	sns.set(context='poster')
折れ線グラフの大バツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
散布図の▽印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
Pandasで、フォーマットでデータ列をタイムスタンプに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ダークスラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
カウンタを高頻出方から列挙する	aCounter.most_common()
文字列がリストに含まれるか調べる	element in aList
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
リストの中の最も小さい値	min(aList)
日本語が文字列中に使われているかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データ列の文字列長を列として使う	ds.str.len()
ヒストグラムの色を淡い茶色に変更する	plt.hist(データ列, color='tan')
ホワイトスモーク色としてヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
データフレームのリストカラムの中に存在する文字列と文字列の合計をカウントする	df[aList].isin([value, value2]).sum()
三自然数の最大公約数	math.gcd(n, n2, n3)
散布図に▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
散布図の下三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
option: スラッシュを分割記号で用いる	sep = '/'
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
option: シルバーにグラフの色を指定する	color = 'silver'
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
nを16進数文字列に変換する	hex(n)[2:]
半透明の一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームのリスト列の中にとがいくつあるかカウントする	df[aList].isin([value, value2]).sum()
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
データフレームの中の列をビン数nで分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
データ列の推移を青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
漢字が文字列にある	re.search('[\u4E00-\u9FD0]', s)
数の複素数を求める	complex(x)
データフレームの未入力値を第二四分位数に設定する	df.fillna(df.median())
データフレームのリストカラムの未入力値を直後の値で埋める	df[aList].fillna(method='bfill')
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
option: 色をホットピンクに設定する	color = 'hotpink'
option: 左三角マーカーを描画する	marker = '<'
プログラムを異常終了する	sys.exit(1)
データフレームのリストカラムの欠損値をメディアンで埋める	df[aList].fillna(df[aList].median())
既存のファイルをSJISを使って追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
黒い左三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
シャルトリューズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
線グラフを実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
度数分布図のプロットして、正規化する	plt.hist(データ列, density=True)
空白文字を全部使う	string.whitespace
棒グラフをミントクリーム色を用いて描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
ライトシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ファイルをクローズする	f.close()
文字列リストをつなげる一つの文字列にする	''.join(aStringList)
option: 色を青紫に設定する	color = 'violet'
データフレームの列の文字列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
多次元データをSVDで濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
option: サドルブラウン色を使う	color = 'saddlebrown'
整数nを16進文字列に変換する	hex(n)[2:]
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
二つのオブジェクトが等しい	obj == obj2
データフレームの中の欠損値の個数をカウントする	df.isna().sum()
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
イテラブルの集合	set(iterable)
棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
option: グラフの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
データフレームのカラムはどの程度、分散しているか見る	df[col].var()
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームを100の位で四捨五入する	df.round(-2)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
データフレームを散布図で図示して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
列によってデータフレームをグループ化し、、それぞれのグループごとの最小値を求める	df.groupby(column).min()
データフレームのカラムの値は未入力値か判定する	df[col].isna()
文字列の右端が部分文字列かどうか	s.endswith(sub)
イテラブルを文字列に変換して、タブを用いて連結する	'\t'.join(map(str, iterable))
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームのリスト列のモード	df[aList].mode()
MSEを算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
データ列のNaNを直前の値で置き換える	ds.fillna(method='ffill')
分類モデルの訓練を開始する	model.fit(説明変数, 目的変数)
実数の常用対数	math.log10(x)
option: シエナ色を用いる	color = 'sienna'
折れ線グラフでデータ列を作図する	plt.plot(データ列x, データ列y)
赤い破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
エポック秒の文字列からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
データ列のタイムゾーンを東京に指定する	ds.tz_convert('Asia/Tokyo')
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ランダムに表からn行を抽出する	df.sample(n)
箱ひげ図を描いて、平均線を追加する	plt.boxplot(データ列, meanline=True)
横軸の目盛りを非表示にする	plt.xticks([])
ベクトルの列ごとの最小を求める	np.min(aArray, axis=0)
リストの折れ線グラフを描画して、色をカラーコードとしてセットする	plt.plot(データ列x, データ列y, color='#800080')
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
リストをシアン化する	f'\033[36m{value}\033[0m'
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
項目名がタプル上で定義済みか調べる	key in aDict
データフレームの列の文字列が文字列が含まれるデータを取り出す	df[df[column].str.contains(s)]
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
黒い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
ロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
列を配列として抽出する	df[column].values
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
青い一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームのpercent分位数	df.quantile(percent/100)
キューの先頭を使う	deq[0]
ライトゴールドロディイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
ライム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
ユニークな各要素の出現回数	np.unique(aArray, return_counts=True)
Pandasで、エポック秒の文字列からタイムスタンプ型にする	pd.to_datetime(s, unit='s', utc=True)
option: グラフの色をレベッカパープルにセットする	color = 'rebeccapurple'
イテラブルとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
アルファベットから1文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
ヒストグラムの色をミディアムシアグリーンに変更する	plt.hist(データ列, color='mediumseagreen')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームの平均と信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
列から重複を取り除く	set(iterable)
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ファイルを追加モードとしてオープンして]fとする	f = open(filepath, mode='a')
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
現在の秒数	datetime.date.today().second
リストとリストの散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
グラフの用途を論文に設定する	sns.set(context='paper')
改行を求める	'\n'
nにn2をかけた値をnとする	n *= n2
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
アイボリー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
データフレームの各グループごとの分散を計算する	df.groupby(column).var()
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
重複した行をインプレイスでデータフレームから削除する	df.drop_duplicates(inplace=True)
文字列は全て十進数字かどうか確認する	s.isdecimal()
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームの指定された列を抽出する	df[[column]]
nまでの奇整数列を作る	list(range(1, n, 2))
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
セットから要素を全て取り除く	aSet.clear()
option: ヘッダを自動的な連番に指定する	header = None
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
配列を折れ線プロットとして可視化する	plt.plot(データ列x, データ列y)
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
珊瑚にヒストグラムの色を設定する	plt.hist(データ列, color='coral')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
カウンタをイテラブルで更新する	aCounter.update(iterable)
データフレームを関数によって集約する	df.groupby(関数)
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategray')
日付時刻データの秒	aDatetime.second
データフレームをJSONLファイルにSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
実行結果を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
グリッド線をプロットに描画する	plt.grid(True)
全要素を0で初期化した配列	np.zeros(要素数)
日付データは日付データと同時かどうか調べる	aDate == aDate2
行でデータフレームをソートする	df.sort_index()
option: 暗い赤色を使う	color = 'darkred'
散布図にrgbの△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 表示を半透明にする	alpha = 0.5
実数を小数点以下第一位で四捨五入する	round(x, 1)
実数のタンジェント	math.tan(x)
データフレームを列名リストで小さい順にソートする	df.sort_values(by=column, ascending=True)
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
オブジェクトからフィールドを取り除く	delattr(obj, プロパティ名)
オブジェクトをイテラブルにする	iter(obj)
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
フクシアにヒストグラムの色をセットする	plt.hist(データ列, color='fuchsia')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
茶色にヒストグラムの色を変更する	plt.hist(データ列, color='brown')
文字列の文字数を使う	len(s)
折れ線グラフを青い実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
縦棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
nプラスn2を求める	n + n2
データフレームから先頭のカラムを除く	df[df.columns[1:]]
リストが空か確認する	len(aList) == 0
ゼロ埋めされた三2ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
最大値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].max())
option: グラフの色をグリーンに設定する	color = 'green'
新しい線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
データフレームを各列毎にグループ化して、列の分散を算出する	df.groupby(column)[column2].var()
ディレクトリ	os.getcwd()
ふたつの辞書を合体する	aDict | aDict2
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図を黒い三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: グラフの色をベージュに指定する	color = 'beige'
データフレームのリスト列の中のNaNの合計を数える	df[aList].isna().sum()
データフレームを'A'列によって小さい順に整列して更新する	df.sort_values(by='A', ascending=True, inplace=True)
数値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
線グラフをパールバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palevioletred')
浮動小数点数を整数にする	int(x)
nが5の倍数か	n % 5 == 0
ロージーブラウン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
タプルのn番目からn2番目までを取り出す	aTuple[n:n2]
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームを複数の列によって小さい順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
option: 破壊的に操作する	inplace = True
タイムスタンプデータが日付時刻データと同時か判定する	aDatetime == aDatetime2
線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
整数nの十六進表現	hex(n)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
列を累加したイテラブル	itertools.accumulate(iterable)
データフレームの内の列と列に重複があれば取り除く	df.drop_duplicates(subset=[column, column2])
偽陽性を抑えたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
列の各データ値の出現数	df[col].value_counts()
破壊的に二つの列によってデータフレームを降順に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームのリスト列を四捨五入して整数にする	df[aList].round().astype(int)
コーンズシルク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
'A'列でによって大きい順にデータフレームをソートする	df.sort_values(by='A', ascending=False)
option: グレー色を使う	color = 'grey'
グレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
nが正の数かどうか調べる	n > 0
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
ラベンダーブラッシュ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
配列と配列について散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ビン数nとして配列をビン分割する	pd.cut(aArray, n)
option: グラフの線の幅を3.0ポイントにセットする	linewidth = 3.0
L2ノルムを使って正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
Pandasでフォーマットfmtとして文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format=fmt)
MSDとして多次元データを濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
数式の微分を算出する	sympy.diff(e)
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
リストをn回加える	aList * n
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームをCSVファイルを使ってJSONLファイルに保存する	df.to_csv(filename)
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
n番目のカラムをデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
パターンを事前にASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
実数のハイパボリック・サインの逆数	math.asinh(x)
列からユニークな値を抽出しリスト化する	ds.unique().tolist()
モデルを作る	model.fit(説明変数, 目的変数)
タプルをn回、接続する	aTuple * n
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
折れ線グラフの右三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
実数のアークサイン	math.asin(x)
大バツ印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
棒グラフをラベンダーブラッシュ色を用いて描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
データフレームのリストカラムが正規分布からどの程度、歪んでいるか調べる	df[aList].kurt()
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
乱数で要素を埋めた行列を作成する	np.random.random((行数, 列数))
option: 追加モードを使う	mode = 'a'
3つの変数を出力する	print(value, value2, value3)
データフレームのそれぞれのグループ毎の最大値	df.groupby(column).max()
xが-9以上、9以下かどうか	-9 <= x <= 9
option: フォントの色をバリーウッドに設定する	color = 'burlywood'
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの重複する行を数える	df.duplicated().sum()
データ列とデータ列の散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
オリベドラブにヒストグラムの色を変更する	plt.hist(データ列, color='olivedrab')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
線グラフの線の種類を一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
オレンジレッドにヒストグラムの色を変更する	plt.hist(データ列, color='orangered')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
マップの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
データフレームのリストカラムの値は欠損値か調べる	df[aList].isna()
セットの全要素が別の集合に含まれるか	aSet.issubset(aSet2)
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームを破壊的に'A'列を用いて降順にソートする	df.sort_values(by='A', ascending=False, inplace=True)
データフレームのカラムの中にある文字列の数を数える	df[col].isin([value]).sum()
xの小数点以下'2'桁の文字列にする	':.2f'.format(x)
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
縦棒グラフを白色を使って描画する	plt.bar(データ列x, データ列y, color='white')
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
データフレームを'A'列で昇順に並べる	df.sort_values(by='A', ascending=True)
ファイルのディレクトリ名	os.path.dirname(filepath)
文字列を空白を使って分割して整数リストに変換する	map(int, s.split())
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: フォントの色をライトスレイグレーに指定する	color = 'lightslategray'
線形モデルのバイアスを使う	model.intercept_
option: フォレストグリーン色を用いる	color = 'forestgreen'
文字列をゼロ埋めする	s.zfill(文字列幅)
データフレームのカラムを散布図で描画して、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ラベンダーブラッシュ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームを列でグループ化し、列の要約統計量を求める	df.groupby(column).describe()[column2]
ゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームの最頻値を計算する	df.mode()
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
折れ線グラフを半透明の実線を使って描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
四分位数で列を分割する	pd.qcut(ds, 4)
データフレームの列の文字列が正規表現文字列にマッチするデータを選ぶ	df[df[column].str.match(s)]
option: 濃いシアンを使う	color = 'darkcyan'
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
実行結果を水色化する	f'\033[36m{value}\033[0m'
option: バイナリモードを使う	mode = 'rb'
オブジェクトをイテレータに変換する	iter(obj)
行列の個数を使う	aArray.size
オブジェクトをユーザ向けの文字列に変換する	str(obj)
option: グラフの種類を一点鎖線に変更する	linestyle = 'dashbot'
データフレームとデータ列を横方向に合体させる	pd.concat([df, ds], axis=1)
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
データフレームをValueMapでまとめて変更する	df.replace(ValueMap)
データフレームのインデックスをリセットする	df.reset_index()
散布図に黒いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategrey')
散布図をコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='coral')
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
option: グラフの色をダークオレンジに変更する	color = 'darkorange'
スクリプトのファイル名を知る	sys.argv[0]
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
分類結果の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
nが1もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
正接	math.tan(x)
散布図をrgbのポイントマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: 昇順にする	ascending = True
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
横棒グラフをシーグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='seagreen')
データフレームの列の中にある文字列と日付データの合計をカウントする	df[col].isin([value, value2]).sum()
縦棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
空の線形モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
縦棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
option: 青にグラフの色を設定する	color = 'blue'
実数を浮動小数点数で割って、小数点以下を切り捨てる	x // y
マゼンタ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
文字列を式として評価する	eval(s)
小数点数の双曲線正接を計算する	math.tanh(x)
ファイルが存在しないか調べる	not os.path.exists(filepath)
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの列のどの値が頻出か確認する	df[col].mode()
イテラブルと配列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
赤い右三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='r')
タプルをカウンタに変換する	collections.Counter(aDict)
列をキーにして2つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
文字列を下線付き化する	f'\033[4m{value}\033[0m'
n番目のシートをエクセルファイルファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームの中に文字列とがあるか調べる	df.isin([value, value2])
折れ線グラフの四角マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの色をやわらかい青にセットする	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列中の部分文字列の出現回数	s.count(sub)
線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
各列毎にデータフレームをグループ化し、、列の分散を求める	df.groupby(column)[column2].var()
データ列の欠損値を最小値にセットする	ds.fillna(ds.min())
option: マーカーの線幅を設定する	markeredgewidth = 2.5
option: スカイブルーを使用する	color = 'skyblue'
横棒グラフをゲインズボロ色を使って描画する	plt.barh(データ列x, データ列y, color='gainsboro')
option: 白にグラフの色をセットする	color = 'white'
折れ線グラフの丸マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
option: シーグリーンにグラフの色をする	color = 'seagreen'
平均値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].mean())
option: グラフの色をパレットトルコイズに変更する	color = 'paleturquoise'
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
整数nのビット長	n.bit_length()
数値の数値を求める	float(e)
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
値が集合に含まれるか	element in aSet
リストと配列について散布図を描いてマーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
ゼロ埋めした符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
データフレームをTSV形式を用いてJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
option: フローラルホワイトを使用する	color = 'floralwhite'
ダークシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
散布図の上三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
マップを浅くコピーする	dict(aDict)
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
折れ線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
数値をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
データフレームのカラムの日にちを使う	df[col].dt.day
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
双方向キューの先頭に要素を付け加える	deq.appendleft(element)
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
option: フォントの色を濃い青に設定する	color = 'darkblue'
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
データフレームの相関行列ピアソン相関係数で	df.corr(method='pearson')
イテラブルを累加した列	itertools.accumulate(iterable)
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
option: ダークシアンにフォントの色を変更する	color = 'darkcyan'
ロイヤルブルーにヒストグラムの色を指定する	plt.hist(データ列, color='royalblue')
黒い左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c='k')
乱数生成系列を初期化する	random.seed()
実数を浮動小数点数にかける	x * y
option: インディアンレッドを使う	color = 'indianred'
行列の累積積	np.cumprod(aArray)
オブジェクトはバイト列型か調べる	isinstance(obj, bytes)
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
文字列の右側からタブを除く	s.rstrip('\t')
オブジェクトはある型	isinstance(obj, クラス)
浮動小数点数を三乗する	x ** 3
列によって表データを破壊的に降順にソートする	df.sort_values(by=column, ascending=False, inplace=True)
行列から重複を除いた行列を作成する	np.unique(aArray)
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
縦軸の目盛りを整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
option: シスル色を使用する	color = 'thistle'
白にヒストグラムの色を設定する	plt.hist(データ列, color='white')
両端キューの先頭にシーケンスの各要素を追加する	deq.extendleft(iterable)
xが1、もしくは2か調べる	x == 1 or x == 2
n個に列をビン分割する	pd.cut(ds, n)
整数nがタプルのいづれかかどうか調べる	n in aTuple
配列の要素ごとの積を算出する	np.multiply(aArray, aArray2)
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ランダムにデータフレームから重複ありでn行をサンプリングする	df.sample(n, replace=True)
横棒プロットの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ゼロ埋めした行列を作る	np.zeros(行数, 列数)
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
データフレームの中のカラムを中央値でビン分割する	pd.qcut(df[col], 2)
平均値と標準偏差から乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフのクロスマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームのインデックスがnの行を抽出する	df.loc[n]
列のユニークな要素数	ds.nunique()
カラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
データフレームのグループごとの最大値	df.groupby(column).max()
部分文字列が文字列中に存在するか	sub in s
点線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
ベクトルの分散を求める	np.var(aArray)
数列の推移を破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
英数字が文字列内にあるかどうか確認する	any(c.isalnum() for c in s)
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
別の文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
option: グリーンイエローにグラフの色を指定する	color = 'greenyellow'
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
ベクトルから重複を除いた行列を作る	np.unique(aArray)
タプルにキーが存在するかどうか	key in aDict
データフレームのリストカラムの中に日付データと文字列がいくつ含まれるか数える	df[aList].isin([value, value2]).sum()
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
データフレームの中の列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
CSVを読み込む	pd.read_csv(filename, sep=',')
Pandasでデータ列をPandasの日付型に変換する	pd.to_datetime(ds)
データ列を横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ヒストグラムをディープスカイブルー色を用いて描画する	plt.hist(データ列, color='deepskyblue')
タプルとタプルを連結する	aTuple + aTuple2
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームをJSONLファイルに保存する	df.to_excel(filename)
現在が何年か知る	datetime.datetime.today().year
option: データ型を指定する	dtype = np.int16
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
青い一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
折れ線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
イテラブルの各要素に対してpredicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
マップにタプルの項目を更新する	aDict.update(aDict2)
双方向キューの先頭にイテラブルの各データを付け加える	deq.extendleft(iterable)
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列中の部分文字列を別の文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
データフレームのカラムの分散	df[col].var()
option: マーカーを下三角に変える	marker = 'v'
option: グラフの色をブラックに変更する	color = 'black'
黒い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
表データから重複した行を落とす	df.drop_duplicates()
現在の秒数を見る	datetime.date.today().second
データフレームをまとめて丸める	df.round()
説明変数と目的変数を用いてモデルを学習する	model.fit(説明変数, 目的変数)
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
コマンド引数を一覧として得る	sys.argv[1:]
データ列を丸めて整数型にする	ds.round().astype(int)
折れ線グラフの下三角印の太さを変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
散布図の左三角印の太さを指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
配列の転置行列	aArray.T
option: シルバー色を用いる	color = 'silver'
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
数式の部分分数化を行う	sympy.apart(e)
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
option: 線の種類を一点鎖線に指定する	linestyle = 'dashbot'
データ列のNaNをxにセットする	ds.fillna(x)
文字列を右側から空白で分割する	s.rsplit()
棒グラフをグリーンイエロー色として描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームの中の列とカラムに重複があればマスクする	df.duplicated(subset=[column, column2])
散布図に赤い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列はタプルに含まれないかどうか	element not in aTuple
データフレームの列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
棒グラフをアリスブルー色を使って描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームを列によってソートし、下位n件を取り出す	df.sort_values(columns).tail(n)
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
ライトコーラル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
リストとリストについて散布図を描いて、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データ列をn個にビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
タプルの全をクリアする	aDict.clear()
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
option: インデックスを自動的な連番に設定する	index_col = None
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
書き込み用にファイルパスを文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
暗い赤色としてヒストグラムを描画する	plt.hist(データ列, color='darkred')
行列の行ごとの合計値	np.sum(aArray, axis=1)
折れ線プロットにラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
nをn2で割った値の切り上げを求める	(n + n2 - 1) // n2
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
列をキーにして2つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
散布図のクロスマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
フクシア色を使ってヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列の右側から改行を取り除く	s.rstrip('\n')
ふたつのリストの共通りスト	list(set(aList) & set(aList2))
表データの列の名前一覧	df.columns
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図に黒い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
濃いシアン色としてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
データ列のタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
主成分分析で多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ヒストグラムを一点鎖線として描く	plt.hist(データ列, linestyle='dashbot')
リストとイテラブルについての散布図に菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D')
ユーザから入力される	int(input())
option: 色をライトブルーにセットする	color = 'lightblue'
option: ダイアモンドマーカーを使う	marker = 'D'
横棒グラフをパールゴールデンロッド色を使って描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
ファイルをSJISを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームの列の値がxより多くx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
カテゴリ別で色付けして、データフレームの全カラムの散布図を見る	sns.pairplot(df, hue='カテゴリ列')
データフレームから指定された2つの列を選択する	df[[column, column2]]
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
グラフの背景色を暗くする	sns.set(style='darkgrid')
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
配列の形状を変形する	aArray.reshape(行数, 列数)
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームの列と列を取り除く	df.drop([column, column2], axis=1)
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
データ列の上位25%	ds.quantile(0.25)
マッピングのキーを要素に設定する	aDict[key] = element
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データ列が正規分布からどの程度、歪んでいるか確認する	ds.kurt()
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
表をランダムサンプリングする	df.sample()
option: 淡い茶色色を使う	color = 'tan'
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
文字列の左側から部分文字列を除去する	s.lstrip(sub)
データ列の推移を折れ線グラフで図示する	plt.plot(range(len(データ列)), データ列)
環境はMacOSか調べる	sys.platform.startswith('darwin')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフをライトスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
縦棒グラフをターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: シエナにグラフの色を指定する	color = 'sienna'
折れ線プロットとしてデータ列の推移を可視化する	plt.plot(range(len(データ列)), データ列)
nをn2分の一にする	n /= n2
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
コギーくんを使いたい	import kogi
折れ線グラフの菱形印を青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
データ列を十の位で丸めて、整数にする	ds.round(-1).astype(int)
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
セットにリストの要素を全て追加する	aSet.update(iterable)
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
縦棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
Pandasで、データ列のエポック秒から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの色をディープスカイブルーにする	plt.plot(データ列x, データ列y, color='deepskyblue')
行列の行を選択する	aArray[行番号]
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
行列にはいくつ要素があるか調べる	aArray.size
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
スーパーセットかどうか調べる	aSet.issuperset(aSet2)
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
多次元データをt-SNEを用いてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームのデータ型一覧	df.dtypes
正接の逆数	math.atan(x)
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: ダークオレンジを使う	color = 'darkorange'
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
ベクトルを元にして全要素が1のベクトルを作成する	np.ones_like(aArray)
セットから別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
柱状グラフを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
データフレームを1000の位で四捨五入して、整数にする	df.round(-3).astype(int)
線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
配列と配列の散布図を描画して三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
縦棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
xが1、もしくは2か	x == 1 or x == 2
キーワード引数でタプルに更新する	aDict.update(**kwargs)
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
列をキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
リストとリストの散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
文字列を紫色化する	f'\033[35m{value}\033[0m'
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
nがn2よりも小さいか調べる	n < n2
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ヒストグラムを破線として描画する	plt.hist(データ列, linestyle='dashed')
t-SNEで淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
0から始まる無限な数列	itertools.count()
predicateFuncが真となる列の部分	itertools.dropwhile(predicateFunc, iterable)
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
要素∉集合	element not in aSet
グラフの描画で濃くパレットを使う	sns.set(pallete='deep')
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
option: グラフの色をペルーに変更する	color = 'peru'
タプルの各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
等量でn個にリストをビン分割する	pd.qcut(aList, n)
データフレームのリストカラムを1000の位で四捨五入して整数型にする	df[aList].round(-3).astype(int)
データフレームのカラムの第二四分位数	df[col].median()
データフレームを列によって降順に破壊的に整列する	df.sort_values(by=column, ascending=False, inplace=True)
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
外れ値に強い線形モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
両端キューのstart〜endの値	collections.deque(itertools.islice(deq, start, end))
横軸の目盛を非表示にする	plt.xticks([])
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
整数nのバイト長	(n.bit_length() + 7) // 8
データフレームを複数の列によってで降順に並べ直す	df.sort_values(by=column, ascending=False)
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームを列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
変数を太文字にする	f'\033[1m{value}\033[0m'
散布図を赤い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: フォントの色をライトスカイブルーに変更する	color = 'lightskyblue'
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
イテラブルとデータ列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
カレント作業ディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームのstart行目からend行目までを選択する	df[start:end]
縦棒グラフを描いて、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ホールドアウトを用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
option: ブラック色を用いる	color = 'black'
整数nを八進表現に変換する	oct(n)
データフレームの列の中にと文字列がある	df[col].isin([value, value2])
散布図のマーカーの色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
ヒストグラムの色をゴーストホワイトに変更する	plt.hist(データ列, color='ghostwhite')
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
文字コードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
分類モデルのリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームのカラムのpercent分位数を求める	df[col].quantile(percent/100)
多次元データをSVDとして濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
決定木の重要度をグラフにする	plt.barh(X.columns, model.feature_importances_)
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgray')
データ列の相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
数値を方程式として解く	sympy.solve(e)
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
レモンシフォン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
オプションで、出力先をファイルにセットする	file = sys.open(filename, 'w')
小数点数の二進対数	math.log2(x)
日付時刻データと日付時刻データの時間差を求める	aDatetime - aDatetime2
スノー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
nはn2かどうかテストする	n == n2
辞書に別のマッピングの項目を更新する	aDict.update(aDict2)
線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
n個にデータフレームの中のカラムを分割する	pd.cut(df[col], n)
option: 耐火レンガを使う	color = 'firebrick'
カンマで文字列を分割して、文字列リストにする	s.split(',')
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
オブジェクトはバイト列か	isinstance(obj, bytes)
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
データフレームの中で何行、重複するか調べる	df.duplicated().sum()
十六進数字を全部使う	string.hexdigits
カラムの空文字をドロップする	ds.replace('', np.nan).dropna()
等量でリストをn個にビン分割する	pd.qcut(aList, n)
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
０で全要素を初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
実数を浮動小数点数で除する	x / y
option: フォントの色をグリーンに設定する	color = 'green'
データ列を小数点以下n桁で丸める	ds.round(n)
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
文字列を最後の部分文字列で分けたときの最初の文字列	s.rpartition(sub)[0]
折れ線グラフをライトスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
数式の積分を求める	sympy.integrate(e)
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
文字列中のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
データフレームのリストカラムの中央値を計算する	df[aList].median()
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
option: 線種を一点鎖線に指定する	linestyle = 'dashbot'
日付時刻データの日を使う	aDatetime.day
文字列中のひらがなを片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
カウンタの正のカウントのみ残す	+aCounter
文字をASCIIコードに変換する	ord(ch)
データフレームのリストカラムのNaNを平均に設定する	df[aList].fillna(df[aList].mean())
プロットの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
配列と数列について散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
文字列を部分文字列で二分し残りの文字列を使う	s.partition(sub)[-1]
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
option: 色をカーキに設定する	color = 'khaki'
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
ふたつの集合は集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
多次元データをSVDとして濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
重複した行だけを選ぶ	df[df.duplicated(keep=False)]
データ列を二つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
データフレームのカラムの中に含まれる文字列の合計を数える	df[col].isin([value]).sum()
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
ピアソン相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
文字列リストにイテラブルを変換して、タブで連結する	'\t'.join(map(str, iterable))
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
三つのデータフレームを横向きに合体させる	pd.concat([df, df2, df3], axis=1)
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
ヒストグラムの色をレベッカパープルにする	plt.hist(データ列, color='rebeccapurple')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
値がセットに含まれるか調べる	element in aSet
横棒グラフをネイビー色を用いて描画する	plt.barh(データ列x, データ列y, color='navy')
折れ線グラフの大バツマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
折れ線グラフの色をスプリンググリーンにセットする	plt.plot(データ列x, データ列y, color='springgreen')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
イテラブルを文字列に変換してタブで連結する	'\t'.join(map(str, iterable))
列にイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
文字列の無限のイテラブル	itertools.repeat(element)
イエローグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='yellowgreen')
データフレームから指定されたデータ型の列名一覧	df.select_dtypes(型).columns
Pandasでデータ列をフォーマットでdatetime64型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
散布図に左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
表データを各列と列の組み合わせ毎に集約して、分散を求める	df.groupby([column, column2], as_index=False).var()
リストの中の最も大きい値	max(aList)
ミディアムシアグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
線グラフの色をミントクリームにセットする	plt.plot(データ列x, データ列y, color='mintcream')
二つの集合の和集合を求める	aSet.union(aSet2)
データフレームのリストカラムの値を正規表現patternでまとめて置換する	df[aList].replace(pattern, repl, regex=True)
文字列の右側から空白を取り除く	s.rstrip(' ')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
ヒストグラムをシャルトリューズ色を用いて描画する	plt.hist(データ列, color='chartreuse')
散布図を赤い▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
文字列の終了位置より前に部分文字列が含まれるか確認する	s.find(sub, 0, end) != -1
データフレームのpercent分位数を計算する	df.quantile(percent/100)
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ビン数nを用いてリストを等量でビン分割する	pd.qcut(aList, n)
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
データフレームから末尾の列を除く	df[df.columns[:-1]]
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
三つのデータフレームを縦方向につなぐ	pd.concat([df, df2, df3], axis=0)
列の長さnの順列を得る	itertools.permutations(iterable, n)
リストと配列についての散布図に文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
option: グラフの色を貝殻に設定する	color = 'seashell'
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
散布図に▼印を加える	plt.scatter(データ列x, データ列y, marker='v')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
option: ミディアムブルーにフォントの色を設定する	color = 'mediumblue'
ペールグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームのカラムの値をまとめてValueMapで置き換える	df[col].replace(ValueMap)
ふたつの集合が集合と互いに素	aSet.isdisjoint(aSet2)
ヒストグラムをトマト色を用いて描画する	plt.hist(データ列, color='tomato')
二つの関係が上位集合	aSet.issuperset(aSet2)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
線グラフの色をレベッカパープルに指定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
部分集合	aSet.issubset(aSet2)
nがn2よりも大きいか	n > n2
エンコーディングを使う	sys.getdefaultencoding()
データフレームの列をヒストグラムとして描画する	plt.hist(df[column])
折れ線グラフに△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
option: 色をライトコーラルに設定する	color = 'lightcoral'
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
option: ダークグレー色を使う	color = 'darkgray'
option: 色をスノーに設定する	color = 'snow'
モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列の無限列	itertools.repeat(element)
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
Pandasで、エポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
option: グラフの色をアクアに設定する	color = 'aqua'
折れ線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
変数を赤色で表示する	print(f'\033[31m{value}\033[0m')
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
Pandasで、データフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col])
全要素を０で初期化した論理値型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
文字列は全て十進数字	s.isdecimal()
二つの集合が集合と互いに素	aSet.isdisjoint(aSet2)
偽陰性を避けたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームを列によって整列し、、新しいインデックスを加える	df.sort_values(columns).reset_index()
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
データ列のNaNを直後の値で埋める	ds.fillna(method='bfill')
両端キューの要素数	len(deq)
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームのそれぞれのグループ毎の分散	df.groupby(column).var()
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
2つの文字列を順にプリントする	print(value, value2)
リストを配列に変換する	np.array(aList)
列でデータフレームを集約する	df.groupby(column)
ベクトルの列ごとの分散	np.var(aArray, axis=0)
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgrey')
イテラブルとリストの散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
nの各桁の総和	sum(map(int, str(n)))
オブジェクトが辞書クラスかどうか	isinstance(obj, dict)
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
双方向キューが空でない	len(deq) != 0
データフレームのカラムが文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
列によってでデータフレームを破壊的にソートする	df.sort_values(by=column, inplace=True)
option: 下三角印を用いる	marker = 'v'
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
option: フォントの色をチョコレートに設定する	color = 'chocolate'
データフレームの欠損値を最頻値に指定する	df.fillna(df.mode().iloc[0])
２つのカウンタの共通する値を求める	aCounter & aCounter2
グリッド線	plt.grid(linestyle='--')
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
数値がスタックの中に含まれてるか調べる	element in deq
散布図を赤い△マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
列の文字列長を列として使う	ds.str.len()
データ列の中の欠損値の合計を数える	ds.isna().sum()
変数が無限大に近づくとき、数値の極限値を求める	sympy.limit(e, z, oo)
ベクトルを元にして全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
option: 下三角マーカーを使う	marker = 'v'
ふたつのリストの共通りストを計算する	list(set(aList) & set(aList2))
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
bとn2から成るペア	(n, n2)
一点鎖線にヒストグラムの線種を変更する	plt.hist(データ列, linestyle='dashbot')
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
3整数の最小公倍数	math.lcm(n, n2, n3)
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
xでデータフレームのカラムのNaNを埋める	df[col].fillna(x)
文字列は全て印字できるか	s.isprintable()
シーケンスを文字列リストに変換して'改行を用いて連結する	'\n'.join(map(str, iterable))
ヒストグラムをロイヤルブルー色を使って描画する	plt.hist(データ列, color='royalblue')
プラットフォームのコードポイントの最大値	sys.maxunicode
文字列リストを一つの文字列にする	''.join(map(str, iterable))
aListn番目から要素を得る	aList.pop(n)
option: グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
今日は何月か知る	datetime.datetime.today().month
option: チョコレートを用いる	color = 'chocolate'
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
列名リストによって昇順にデータフレームを破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ファイルパスをオープンして]、追加ストリームを見る	open(filepath, mode='a')
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
追加モードでファイルパスをオープンして]、fとする	f = open(filepath, mode='a')
散布図をライトブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ファイルパスの区切り記号	os.sep
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
部分集合か調べる	aSet.issubset(aSet2)
ニューラルネットとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
日付時刻データは日付時刻データより後ろかどうか	aDatetime > aDatetime2
プロットの色を暗くする	sns.set(pallete='dark')
青紫色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
エクセルファイルファイルからすべてのシートを読む	pd.read_excel(filename, sheet_name=None)
変数を出力する	print(value)
実数の逆双曲線余弦	math.acosh(x)
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのカラムを散布図で見、、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
折れ線グラフに青い▼印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ネイビー色としてヒストグラムを描画する	plt.hist(データ列, color='navy')
ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
グラフの見栄えを綺麗にする	import seaborn as sns
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
赤い実線でリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列の中で正規表現にマッチした全文字列をリストにする	re.findall(pattern, s)
リストとリストについての散布図に赤い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをローングリーン色を使って描画する	plt.hist(データ列, color='lawngreen')
文字列を部分文字列で二つに分ける	s.partition(sub)
option: 印をバツに指定する	marker = 'x'
配列とリストについての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
散布図の右三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
グラフをパステル調にする	sns.set(pallete='pastel')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
リストと数列について散布図を描画して、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
option: 色をペルーにする	color = 'peru'
セットからエラーなく値を取り除く	aSet.discard(element)
データフレームの欠損値を直後の値にする	df.fillna(method='bfill')
タプルから最後の項目をポップする	aDict.popitem()
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
イテラブル自身を2回あわせた直積を求める	itertools.product(iterable, repeat=2)
ヒストグラムをダークオーキッド色を用いて描画する	plt.hist(データ列, color='darkorchid')
正規分布にしたがってデータ列の値が発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: 未入力値も無視しない	dropna = True
データフレームの列が文字列で始まる行を選ぶ	df[df[column].str.startswith(s)]
日付時刻データのタイムゾーンを見る	aDatetime.timetz()
データフレームのリストカラムの中にと文字列があるか	df[aList].isin([value, value2])
リストとしてデータフレームの指定した列を取り出す	df[column].values.tolist()
データフレームのカラムの中に含まれる日付データの合計を数える	df[col].isin([value]).sum()
データ列をヒストグラムにする	plt.hist(データ列)
リストの要素を昇順に並べ直す	sorted(aList, reverse=True)
黒いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
option: フォントの色をシスルに設定する	color = 'thistle'
折れ線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
小数点数のハイパボリック・コサインの逆数を求める	math.acosh(x)
真上位集合か調べる	aSet > aSet2
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
オブジェクトがバイト列クラスかどうか確認する	isinstance(obj, bytes)
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
データフレームの列一覧を見る	df.info()
nが一桁の数かテストする	0 <= n <= 9
散布図のポイントマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームの要約統計量	df.describe()
半透明の一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
3自然数のGCDを求める	math.gcd(n, n2, n3)
数列と配列についての散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
折れ線グラフの星印を赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: マルーン色を使う	color = 'maroon'
バイオレット色でヒストグラムを描画する	plt.hist(データ列, color='violet')
列概要を見る	df.info()
option: ピンク色を用いる	color = 'pink'
option: インディゴを用いる	color = 'indigo'
option: ミディアムオーキッドを使う	color = 'mediumorchid'
ラインを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: ペールグリーン色を使う	color = 'palegreen'
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
折れ線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
列の一意な値を見る	df[col].unique()
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
xが1、もしくは2、もしくは3に等しいかテストする	x == 1 or x == 2 or x == 3
点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
異なる列をキーにして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
イテラブルとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ディムグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
グラフの補足の位置を指定する	plt.legend(loc=(x, y))
実数以上の最小の整数を計算する	math.ceil(x)
文字列を部分文字列で分けた時の前半の文字列を取り出す	s.partition(sub)[0]
線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データ列の中にいくつ日付データがあるか求める	ds.isin([value]).sum()
イテラブルからカウンタを作る	collections.Counter(iterable)
文字列の接尾辞が部分文字列か	s.endswith(sub)
散布図にポイントマーカーを使用する	plt.scatter(データ列x, データ列y, marker='.')
単回帰分析を行う	model = sklearn.linear_model.LinearRegression()
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
濃いシアン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
セットから任意の要素を取り出す	aSet.pop()
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
オレンジレッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
JSON文字列を辞書にする	json.loads(jsonString)
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
行列の内積	np.dot(aArray, aArray2)
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
最小値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].min())
大文字を全部求める	string.ascii_uppercase
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
リストとリストについて散布図を描画し、、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
カンマで区切って二つの文字列を表示する	print(value, value2, sep=',')
組の末尾を取り除く	aTuple[:-1]
シーグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
データ列の推移を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
ヒストグラムの色をターコイズにする	plt.hist(データ列, color='turquoise')
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
データフレームを列によって集約して、個数を計算する	df.groupby(column).count()
リストをn回結合する	aList * n
棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
整数の階乗	math.factorial(n)
option: ディムグレーを使う	color = 'dimgrey'
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
Pythonパス	sys.path
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
変数を入れ替える	x, y = y, x
データフレームのカラムの各データが何回出現するか確認する	df[col].value_counts()
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
列を配列にする	np.array(iterable)
リスト中の文字列が最初に見つかるインデックス	aList.index(element)
散布図の▲マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
整数nを十六進表現に変換する	hex(n)
二つの文字列を辞書順で比較する	s < s2
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
折れ線グラフをレモンシフォン色を用いて描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ヒストグラムをビスク色として描画する	plt.hist(データ列, color='bisque')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
リストとリストについて散布図をプロットして、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
整数nを二進表記に変換する	bin(n)
option: マーカーを星に変更する	marker = '*'
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
option: レベッカパープルを使う	color = 'rebeccapurple'
データ列間の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
option: バツマーカーを描画する	marker = 'x'
タプルに項目名ワード引数として追加する	aDict.update(**kwargs)
データフレームの中で、カラムと列に重複があるか確認する	df.duplicated(subset=[column, column2])
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
折れ線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
option: ピンクを使う	color = 'pink'
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
カウンタを集合に変換する	set(aCounter)
オブジェクトはリストクラスか調べる	isinstance(obj, list)
キューをデキューする	deq.popleft()
文字列リストを一つにする	''.join(aStringList)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
ゴールド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
折れ線グラフを破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed')
行列の行ごとの平均を算出する	np.mean(aArray, axis=1)
本日が火曜日か	datetime.datetime.today().weekday() == 1
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
option: グラフを点線に指定する	linestyle = 'dotted'
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
option: 行を自動的な連番に変更する	index_col = None
option: シルバーにグラフの色を変更する	color = 'silver'
数値の出力を改行しないで行う	print(value, end='')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
棒グラフをフォレストグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
ゼロ埋めした符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
オブジェクトはタプルクラスのインスタンス	isinstance(obj, tuple)
データフレームが正規分布からどの程度尖っているか見る	df.skew()
ミディアムオーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
日付時刻データにn分を加える	aDatetime + datetime.timedelta(minutes=n)
横棒グラフをライトゴールドロディイエロー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのn行目を破壊的にドロップする	df.drop(n, axis=0, inplace=True)
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
リストのn番目のの値を求める	aList[n]
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
横棒グラフの色を指定する	plt.barh(ラベル列, データ列, color=rgb)
一点鎖線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムを用いてデータフレームの列をプロットする	plt.hist(df[column])
列名リストによって破壊的にデータフレームを大きい順に整列する	df.sort_values(by=column, ascending=False, inplace=True)
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
データ列の中にいくつ日付データが含まれるか数える	ds.isin([value]).sum()
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
ゼロ埋めした三二ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
データフレームの最後を見る	df.tail()
データフレームから数値データの列を選択する	df.select_dtypes('number')
データフレームを'A'列と'B'列によって整列してNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
日付時刻データは何月か知る	aDatetime.month
横棒グラフをアクア色を使って描画する	plt.barh(データ列x, データ列y, color='aqua')
リストとリストについて散布図を描いて、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
実行時の標準出力の出力先がターミナルかどうか	os.isatty(sys.stdin.fileno())
双方向キューの右に要素を追加する	deq.append(element)
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
文字列ひとつの組を作る	(element,)
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
ファイルをバイナリモードを用いてオープンする]	open(filepath, mode='rb')
折れ線グラフを下三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v')
リストとリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
option: フクシアにフォントの色を設定する	color = 'fuchsia'
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
文字列を最初の部分文字列で二つに区切って前半の文字列を使う	s.partition(sub)[0]
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
データフレームを各列毎にグループ分けして、列の分散を計算する	df.groupby(column)[column2].var()
option: 配列のデータ型を指定する	dtype = np.int8
最大値・最小値の範囲を使って一様な疑似乱数	random.uniform(最小値, 最大値)
データフレームのカラムの中に存在する日付データと文字列の合計を数える	df[col].isin([value, value2]).sum()
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
列'A'と列'B'をキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
折れ線グラフをロージーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
縦棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
リストとリストの散布図を描いて、▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ガウス過程を用いてクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
実数が有限かどうか	math.isfinite(x)
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
配列の次元の数を計算する	aArray.ndim
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
折れ線グラフの上三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データ列の欠損値を最大値で補う	ds.fillna(ds.max())
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
今日の日を使う	datetime.datetime.today().day
実線を用いて配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
配列と同じ大きさの空配列を作成する	np.empty_like(aArray)
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
データフレームを列ごとにグループ化して合計を求める	df.groupby(column).sum()
文字列の開始位置と終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
文字列を積極的に小文字に変換する	s.casefold()
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
カラーバーを描く	plt.colorbar()
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
option: 赤色を使う	color = 'red'
整数の最大値	sys.maxsize
縦棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフのマーカーを▲印にする	plt.plot(データ列x, データ列y, marker='^')
スーパーセットもしくは等しいかどうか調べる	aSet > aSet2
データフレームのカラムのNaNを最大値で埋める	df[col].fillna(df[col].max())
option: 三二ビット整数型を使う	dtype = np.int16
データフレームの列のメディアン	df[col].median()
折れ線グラフをライトサーモン色として描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
2つの列の値によってデータフレームを分類して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
双方向キュー中の要素を数える	deq.count(element)
rgbのバツマーカーをデータ列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
散布図を赤い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 色をインディゴに指定する	color = 'indigo'
散布図に赤い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
ライム色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
散布図の大バツ印の大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
カラムを小数点以下n桁で丸める	ds.round(n)
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームのリストカラムの欠損値を最大値に指定する	df[aList].fillna(df[aList].max())
データフレームを関数によってグループ化し要約統計量を計算する	df.groupby(関数).describe()
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
ファイルパスを追加用にオープンして]、fとする	f = open(filepath, mode='a')
カテゴリ列で色分けして、にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
線グラフをシルバー色として描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームのカラムが正規分布からどの程度歪んでいるか見る	df[col].kurt()
折れ線グラフの色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの中のカラムを等量でn個にビニングする	pd.qcut(df[col], n)
データフレームのどの値が最も現れるか見る	df.mode()
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
option: 区切りを文字列にする	sep = s
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: グリーンイエロー色を用いる	color = 'greenyellow'
データフレームを各列毎にグループ化して列の個数を求める	df.groupby(column)[column2].count()
コロンで文字列を区切り、、文字列リストにする	s.split(':')
補助目盛を有効にする	plt.minorticks_on()
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
option: フォントの色をデピンクにセットする	color = 'deeppink'
ヒストグラムをプロットして、区間数を設定する	plt.hist(データ列, bins=区関数)
行列の列ごとの最小を求める	np.min(aArray, axis=0)
マッピング上で項目名が定義済みかどうか確認する	key in aDict
ファイルを追加モードを用いて開く]	open(filepath, mode='a')
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
パーセプトロンを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
エクセルファイルファイルからエクセルデータを読み込む	pd.read_excel(filename)
データフレームを列を用いてソートして更新する	df.sort_values(by=column, inplace=True)
空のヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
要素がタプルの値として含まれている	element in aDict.values()
ヒストグラムの色をロイヤルブルーに変更する	plt.hist(データ列, color='royalblue')
データフレームのリスト列の文字列をNaNに変換する	df[aList].replace(s, np.nan)
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
インディゴ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
グラフを暗くする	sns.set(pallete='dark')
タプルを引数として展開して表示する	print(*aTuple)
データ列とリストについて散布図を描いて、マーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
ティール色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
ライトグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
日付データが日付データより前	aDate < aDate2
ファイルパスを追加用に開く]	open(filepath, mode='a')
行列から重複を除いた行列を作る	np.unique(aArray)
option: ダークスレートブルーにグラフの色を変更する	color = 'darkslateblue'
棒グラフをコーンフラワーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
グリッド線を赤くする	plt.grid(color='r')
option: ポイント印を使う	marker = '.'
データフレームを10の位で四捨五入して、整数型にする	df.round(-1).astype(int)
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムの色をレベッカパープルにセットする	plt.hist(データ列, color='rebeccapurple')
xを文字列に変換する	str(x)
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
真スーパーセットかどうか調べる	aSet > aSet2
データを四分位点を用いて標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: 深紅にフォントの色を設定する	color = 'crimson'
nとn2の積	n * n2
データフレームのカラムの値が欠損値か調べる	df[col].isna()
折れ線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
列の各データ値の出現数	ds.value_counts()
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
オブジェクトはリストに含まれるかどうか確認する	element in aList
データフレームから重複したデータを残さず、削除する	df.drop_duplicates(keep=False)
データフレームを'A'列によってで破壊的に並べ直す	df.sort_values(by='A', inplace=True)
集合を変更不能なセットにする	frozenset(aSet)
グラフを濃くする	sns.set(pallete='deep')
最大行数をnに設定する	pd.set_option('display.max_rows', n)
マッピングを並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
列によってデータフレームを並べ直して、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
x軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
ファイルパスを文字コードtextとしてオープンする]	open(filepath, encoding=text)
横軸だけグリッド線	plt.grid(axis='x')
散布図の▲マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
色付きの一点鎖線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
末尾の列をデータフレームから除く	df[df.columns[:-1]]
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
マッピングの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
実数のcosの逆数を求める	math.acos(x)
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
データフレームから指定されたデータ型の列名のリスト	df.select_dtypes(型).columns
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
リストにリストを加え、拡張する	aList.extend(aList2)
整数nを2進数文字列にする	bin(n)[2:]
イテラブルを横棒プロットにする	plt.barh(ラベル列, データ列)
十六進数字を使う	string.hexdigits
replにデータフレームの列の値を正規表現で置換する	df[col].replace(pattern, repl, regex=True)
データフレームを'A'列と'B'列でソートする	df.sort_values(by=['A', 'B'])
実行結果を太字化する	f'\033[1m{value}\033[0m'
アンサンブル学習を用いてクラス分類を行う	sklearn.ensemble.VotingClassifier()
イテラブルとリストの散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
本日のタイムスタンプを使う	datetime.datetime.today()
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
データ列の年を使う	ds.dt.year
バイアスなしの重回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
横棒グラフをミディアムターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
nがn2で割り切れるか調べる	n % n2 == 0
ミッドナイトブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
最初の文字列を双方向キューから削除する	deq.remove(element)
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
第2コマンド引数	sys.argv[1]
ラインの線の種類を破線に変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
符号なしで整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
疑似乱数を得る	random.random()
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
n行をデータフレームから重複ありでランダムにサンプリングする	df.sample(n, replace=True)
日付時刻データにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
文字列全体を正規表現にケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データ列の中に文字列がある	ds.isin([value])
配列の行	aArray[行番号]
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
最後の部分文字列で文字列を二つに区切って、最初の文字列を求める	s.rpartition(sub)[0]
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
文字列の左側からタブを取り除く	s.lstrip('\t')
複数の列によってデータフレームを並べて更新する	df.sort_values(by=column, inplace=True)
option: グラフの色をネイビーに指定する	color = 'navy'
データ列の折れ線プロットを描画して、色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
列の未入力値を中央値に設定する	ds.fillna(ds.median())
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
文字列を正規表現で区切る	re.split(pattern, s)
データ列の未入力値を平均値に指定する	ds.fillna(ds.mean())
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
行列を2次元1行に変形する	aArray.reshape(1, -1)
データフレームの列を散布図を用いて可視化する	sns.scatterplot(data=df, x='列名', y='列名')
nをn2だけ大きくする	n += n2
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
横棒グラフをライトスカイブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
カウンタをイテラブルを用いて更新する	aCounter.update(iterable)
キューをタプルに変換する	tuple(deq)
ヒストグラムの色をドジャーブルーにセットする	plt.hist(データ列, color='dodgerblue')
正規化された柱状図を描画する	plt.hist(データ列, density=True)
変数の出力を改行しないで行う	print(value, end='')
ヒストグラムを貝殻色を用いて描画する	plt.hist(データ列, color='seashell')
散布図の菱形印の太さを指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
マゼンタ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
グリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
小文字列	string.ascii_lowercase
濃い青色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
横軸にラベルをつける	plt.xlabel('x軸ラベル')
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
スピアマンの相関係数を使う	scipy.stats.spearmanr(データ列, データ列2)
データ列をフォーマットで日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
本日が何年か知る	datetime.datetime.today().year
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
両端キューを列から作成する	collections.deque(iterable)
赤い点線を用いてリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
逆順の両端キューを使う	reversed(deq)
デックのstart番目からend番目の部分要素を使う	collections.deque(itertools.islice(deq, start, end))
トマト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
異なる列をキーとして2つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
説明変数と目的変数を用いて線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
マップのキーとその値をペアとして取り出す	aDict.items()
行列の行列積を求める	np.matmul(aArray, aArray2)
黒いポイントマーカーをデータ列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ラインを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームの各次元のサイズを確認する	df.shape
option: グラフの色をライトサーモンに指定する	color = 'lightsalmon'
ブランチドアーモンド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
黒い四角マーカーを配列と配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
リストの要素を関数に適用した結果で並べる	sorted(aList, key=func)
散布図をパールバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
リストと配列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
色付きの実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
ファイルパスの区切り記号を見る	os.sep
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
既存の配列を元に全要素が1の配列を初期化する	np.ones_like(aArray)
整数nの八進表現	oct(n)
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
パターンに大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
部分文字列が文字列の開始位置より後にあるか	s.find(sub, start) != -1
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
データフレームを各列毎に集計して、列の標準偏差を計算する	df.groupby(column)[column2].std()
折れ線グラフの色をブルーバイオレットにセットする	plt.plot(データ列x, データ列y, color='blueviolet')
文字列の終了位置以前に部分文字列が含まれない	s.find(sub, 0, end) == -1
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
散布図の印を丸にする	plt.scatter(データ列x, データ列y, marker='o')
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフの色をフローラルホワイトに指定する	plt.plot(データ列x, データ列y, color='floralwhite')
リストとしてカラムを抽出する	df[column].values.tolist()
文字列が数字かテストする	s.isdigit()
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
カーキ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
ヒストグラムの色をライトイエローにする	plt.hist(データ列, color='lightyellow')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
カラムの欠損値を最大値で補う	ds.fillna(ds.max())
回帰モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
整数nを2進数文字列に変換する	bin(n)[2:]
ファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ダークオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ヒストグラムを描画し、、ビン数を設定する	plt.hist(データ列, bins=区関数)
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
ヒストグラムの色をビスクにセットする	plt.hist(データ列, color='bisque')
データフレームのカラムの上位25%	df[col].quantile(0.25)
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
データフレームの列と列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
option: フォントの色をミディアムシアグリーンにする	color = 'mediumseagreen'
option: 線種を一点鎖線に設定する	linestyle = 'dashbot'
文字列全体を正規表現に複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategrey')
文字列内にひとつでも空白が含まれる	any(c.isspace() for c in s)
浮動小数点数の逆正弦を算出する	math.asin(x)
データフレームのそれぞれのグループ毎の標準偏差	df.groupby(column).std()
多次元尺度構成法を使って多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
option: 最初のカラムをインデックスに設定する	index_col = 0
折れ線グラフに丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
ライムグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: フォントの色をドジャーブルーに設定する	color = 'dodgerblue'
数式の積分を行う	sympy.integrate(e)
散布図をダークレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkred')
小さい順に破壊的に'A'列を用いてデータフレームを整列する	df.sort_values(by='A', ascending=True, inplace=True)
行列のスカラー倍	aArray * n
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
ファイルを追加用にオープンする]	open(filepath, mode='a')
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
既存のファイルをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ふたつの集合が集合と交わりを持たない	aSet.isdisjoint(aSet2)
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategray')
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
カテゴリ列で色付けしてデータフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
エンディアン	sys.byteorder
散布図の大バツ印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgray')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
ヒストグラムの色をサーモンに変更する	plt.hist(データ列, color='salmon')
ヘッダなしでTSVファイルを読み込む	pd.read_csv(filename, header=None)
今日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
x座標だけグリッド線	plt.grid(axis='x')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
データフレームのカラムの分	df[col].dt.minute
リストとリストの散布図をプロットし、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
xが一桁の数かどうか確認する	-9 <= x <= 9
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
列を四分位数でビニングする	pd.qcut(ds, 4)
option: ライトシアンにフォントの色を設定する	color = 'lightcyan'
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ひとつでも非英数字が文字列中に含まれるか確認する	any(not c.isalnum() for c in s)
ヒストグラムを破線として描く	plt.hist(データ列, linestyle='dashed')
半透明の破線で配列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
散布図を黒いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
配列の行ごとの最小値	np.min(aArray, axis=1)
配列のユニークな要素	np.unique(aArray)
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
散布図にrgbの大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付データの月	aDate.month
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
option: パールゴールデンロッドを使用する	color = 'palegoldenrod'
option: マーカーを▽に変更する	marker = 'v'
option: 読み込みモードに変更する	mode = 'r'
実数の床	math.floor(x)
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
データフレームの各グループ毎の分散を算出する	df.groupby(column).var()
何回まで再帰ができるかを確認する	sys.getrecursionlimit()
数列を折れ線プロットを使って可視化する	plt.plot(データ列x, データ列y)
代数計算を使用する	import sympy
マゼンタ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
マッピングの値を列挙する	aDict.values()
文字列を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
配列とイテラブルについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
ガウス過程分類モデルを作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
コロンで文字列を分割して、文字列リストにする	s.split(':')
データフレームの列がxでないデータを消す	df[df[column] == x]
マッピングにキーワード引数として更新する	aDict.update(**kwargs)
マッピングから項目名で指定された項目をポップする	aDict.pop(key)
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームを列によってグループ化する	df.groupby(column)
データフレームの各グループごとの平均値	df.groupby(column).mean()
データ列の最頻値を求める	ds.mode()
データフレームを列によって集約し、、グループの最小値を求める	df.groupby(column).min()
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
文字列を部分文字列で二分割する	s.partition(sub)
nからn2までのスライス	slice(n, n2)
データフレームを'A'列と'B'列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
既存のファイルを文字列の示すエンコーディングとして追加できるように開く]	open(filepath, mode='a', encoding=s)
線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')

折れ線グラフの色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategray')
＜オプション＞ライムを用いる	color = 'lime'
データフレームのリストカラムが正規分布からどの程度歪んでいるか確認する	df[aList].kurt()
行列の列ごとの最大値	np.max(aArray, axis=0)
一点鎖線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
＜オプション＞最初の列をインデックスに設定する	index_col = 0
データフレームのカラムの中に存在する文字列の合計を求める	df[col].isin([value]).sum()
実数とyの斜辺	math.hypot(x, y)
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
折れ線グラフを描画して、その色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
散布図に赤い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='r')
ヒストグラムを描画して色をシルバーに設定する	plt.hist(データ列, color='silver')
方程式として数式の変数の解を求める	sympy.solve(e, z)
線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
文字列に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
データ列をビン数nでビン分割する	pd.cut(ds, n)
濃いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
データフレームのリストカラムの第二四分位数	df[aList].median()
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightskyblue')
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
＜オプション＞ダークターコイズ色を使う	color = 'darkturquoise'
リストとリストの散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
＜オプション＞読み込みモードを使う	mode = 'r'
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
配列をビン数nとしてビン分割する	pd.cut(aArray, n)
文字列の両端から部分文字列を除く	s.strip(sub)
2つの変数を順に出力する	print(value, value2)
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='gray')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dodgerblue')
暗い色の折れ線を描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
データフレームの中に文字列があるか判定する	df.isin([value])
＜オプション＞グラフの色を青に指定する	color = 'blue'
スタックが空か確認する	len(deq) == 0
スクリプトの名前	sys.argv[0]
＜オプション＞色をライトシアンに設定する	color = 'lightcyan'
黄色で変数を出力する	print(f'\033[33m{value}\033[0m')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
データフレームのカラムを10の位で四捨五入する	df[col].round(-1)
オプションで標準出力を出力先にする	file = sys.stdout
カウンタ間でユニオン演算する	aCounter | aCounter2
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
n進数文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
文字列中の正規表現を新しい文字列として置き換える	re.sub(pattern, newsub, s)
Pandasで、日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームの列名を指定したカラム名一覧に置き換える	df.columns = columns
暗い色で数列についての柱状図を描く	plt.hist(xdata, color='dark')
＜オプション＞n番目の列をインデックスに設定する	index_col = n
折れ線グラフを点線で描画する	plt.plot(データ列, データ列2, linestyle='dotted')
カラムの欠損値をxに設定する	ds.fillna(x)
リストのヒストグラムをプロットする	plt.hist(aList)
データフレームを各列と列の組み合わせ毎にグループ化し、合計を計算する	df.groupby([column, column2], as_index=False).sum()
ライトシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcyan')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
リストと配列の散布図に黒い星マーカーを描く	plt.plot(xdata, ydata, marker='*', c='k')
折れ線グラフを描画してその色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
＜オプション＞シーグリーンを用いる	color = 'seagreen'
＜オプション＞線幅をnに指定する	linewidth = n
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
＜オプション＞グラフの色をブラックに設定する	color = 'black'
で使える色名の一覧	matplotlib.colors.cnames
線グラフの色をアリスブルーに指定する	plt.plot(データ列, データ列2, color='aliceblue')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
昇順にデータフレームを列名リストによってソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
浮動小数点数のハイパボリック・コサインの逆数	math.acosh(x)
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
＜オプション＞色を珊瑚に設定する	color = 'coral'
実数を実数で整数除算する	x // y
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
集合からエラーなく要素を取り除く	aSet.discard(element)
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
Pandasでフォーマットfmtとしてデータ列を日付データにする	pd.to_datetime(ds, format=fmt)
プログラムの実行を強制的に終える	sys.exit()
双方向キューの要素を左にn個分回転させる	deq.rotate(-n)
折れ線グラフの色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
実行結果を青色にする	f'\033[34m{value}\033[0m'
ヒストグラムの色をダークスレートブルーにセットする	plt.hist(データ列, color='darkslateblue')
数列とリストのパステル調のを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
＜オプション＞ダークオレンジ色を使う	color = 'darkorange'
データフレームのカラムの中のNaNの合計を求める	df[col].isna().sum()
要素∉集合	element not in aSet
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
折れ線グラフに黄色い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
文字列の中でパターンにマッチした全文字列をリストにする	re.findall(pattern, s)
ファイルをオープンする]	open(filepath)
リストを累加する	itertools.accumulate(iterable)
折れ線グラフを描画して、その色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
データフレームを'A'列によってまとめたグループを使う	df.groupby('A')
プロットの描画で明るい色調を用いる	sns.set(pallete='bright')
日付時刻データが何月か知る	aDatetime.month
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
列がどの程度、分散しているか見る	ds.var()
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
＜オプション＞丸印を使う	marker = 'o'
事前に正規表現をコンパイルする	re.compile(pattern)
全ての印字可能な文字	string.printable
ファイルを絶対パスに変換する	os.path.abspath(filepath)
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
＜オプション＞グレーを使う	color = 'gray'
データ列は何年か見る	ds.dt.year
暗いグラフをリストとリストで描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
本日の曜日を使う	datetime.datetime.today().weekday()
ファイル名がJSONファイルか確認する	filename.endswith('.json')
データフレームのそれぞれのグループごとの最小値を求める	df.groupby(column).min()
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
グラフの描画で濃いカラーテーマを使う	sns.set(pallete='deep')
折れ線グラフの大バツ印を黄色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
スクリプトファイルと同じディレクトリのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
マップから項目名で指定されたエントリをポップする	aDict.pop(key)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
全ての十六進数字	string.hexdigits
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
＜オプション＞改行コードをUNIXに設定する	newline = '\n'
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
ヒストグラムを描画してその色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
ヒストグラムを描画して、色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
bとn2から成るペアを得る	(n, n2)
＜オプション＞色をミッドナイトブルーに変更する	color = 'midnightblue'
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
折れ線グラフの△マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
文字列を特殊文字も含め小文字に変換する	s.casefold()
両端キューをリストにする	list(deq)
＜オプション＞ゴーストホワイトを使う	color = 'ghostwhite'
＜オプション＞UTF8を用いる	encoding = 'utf-8'
イテラブルを文字列に変換してカンマを用いて連結する	','.join(map(str, iterable))
データフレームのカラムが何年か見る	df[col].dt.year
行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
リストから文字列を取り除く	aList.remove(element)
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
カラムの欠損値を最大値に設定する	ds.fillna(ds.max())
数を実数で除した余り	x % y
折れ線グラフの▽マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
リストとリストとして折れ線グラフを描いてその線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n)
ピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='pink')
日付時刻データは日付時刻データより早い	aDatetime < aDatetime2
データフレームを関数の値でグループ化し記述統計量を求める	df.groupby(関数).describe()
データフレームの母標準偏差	df.std(ddof=0)
リストと配列の折れ線グラフを文字列の色でプロットする	plt.plot(xdata, ydata, color=s)
ゼロ埋めした行列	np.zeros(行数, 列数)
エクセルファイルファイルをデータフレームとして読む	pd.read_excel(filename)
積み上げ横棒を描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
ヒストグラムを描画してその色をゴールドに指定する	plt.hist(データ列, color='gold')
2を底とする対数	math.log2(x)
データフレームの列が正規表現文字列にマッチしない行を選択する	df[not df[column].str.match(s)]
カラムの欠損値を最小値に変更する	ds.fillna(ds.min())
折れ線グラフの印を四角印にする	plt.plot(データ列, データ列2, marker='s')
リストの要素を逆順にする	aList[::-1]
二つの文字列は同じ	s == s2
オブジェクトのクラスを調べる	type(obj)
オブジェクトが整数クラス	isinstance(obj, int)
明るい色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='bright')
キューの最初に要素を追加する	deq.appendleft(element)
ふたつの集合の積集合	aSet.intersection(aSet2)
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列, データ列2, color='lavenderblush')
実行結果をシアンで表示する	print(f'\033[36m{value}\033[0m')
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
＜オプション＞△マーカーを使う	marker = '^'
リストとリストについて破線グラフを描画して、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
文字列を緑色で表示する	print(f'\033[32m{value}\033[0m')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
ベクトルの列ごとの平均	np.mean(aArray, axis=0)
折れ線グラフを描画してその色をパールゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='palegoldenrod')
データフレームのリスト列の欠損値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
＜オプション＞リネンにグラフの色をセットする	color = 'linen'
eの小数点数乗	math.exp(x)
タプルを小さい方からソートする	sorted(aTuple, reverse=False)
ヒストグラムを描画して、その色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
＜オプション＞グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
折れ線グラフの色をライトサーモンに変更する	plt.plot(データ列, データ列2, color='lightsalmon')
ふたつの集合が集合と交わりを持たない	aSet.isdisjoint(aSet2)
オプションで、ファイルを使う	file = sys.open(filename, 'w')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
ヒストグラムを描画して、その色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
データフレームを各列毎にグループ化し、、文字列というグループの個数を算出する	df.groupby(column).size()[s]
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
データフレームの列をインデックスに変更する	df.set_index(column)
折れ線グラフの色をカラーコードに変更する	plt.plot(xdata, ydata, color=rgb)
ヒストグラムを描画して、その色をマゼンタにセットする	plt.hist(データ列, color='magenta')
ヒストグラムを描画して、その色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
リストとリストの暗いを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
データフレームの中央値	df.median()
データフレームを列によって並べて、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategray')
二つの集合の差集合	aSet.difference(aSet2)
濃いカラーパレットをプロットの描画で使う	sns.set(pallete='deep')
黄色い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='y')
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
折れ線グラフを描画してその色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
クリムゾン色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
文字列を最初の部分文字列で分けたときの最初の文字列	s.partition(sub)[0]
折れ線グラフのダイアモンドマーカーを黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
ヒストグラムをstartからendまでの範囲で描画する	plt.hist(データ列, range=(start, end))
昇順にデータフレームを'A'列でソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフに線幅nの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
ファイルを書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='w')
＜オプション＞サドルブラウン色を使う	color = 'saddlebrown'
＜オプション＞文字コードをSJISに変更する	encoding = 'shift_jis'
正規分布として疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
無限にカウントアップする	itertools.count()
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
文字列内にひとつでも英字が含まれるか調べる	any(c.isalpha() for c in s)
＜オプション＞コロンをセパレータで使う	sep = ':'
実数を切り上げて整数に変換する	math.ceil(x)
黒い菱形マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='D', c='k')
2つの列によってデータフレームを整列する	df.sort_values(by=['A', 'B'])
２つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
データフレームを'A'列をキーにしてソートする	df.sort_values(by='A')
データフレームのリスト列の中に含まれるの合計をカウントする	df[aList].isin([value]).sum()
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
データフレームのカラムの要約統計量	df[col].describe()
データ列を折れ線グラフに描画して、マーカーを三角印にする	plt.plot(データ列, データ列2, marker='^')
２つの文字列を順に表示する	print(value, value2)
タイムスタンプデータが金曜日	aDatetime.weekday() == 4
リストとリストのカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
日付データが金曜日か調べる	aDate.weekday() == 4
散布図をカラーコードの▲マーカーを用いてプロットする	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームのカラムの尖度を計算する	df[col].skew()
折れ線グラフを描画して、色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
ランダムにデータフレームから抽出する	df.sample()
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
実数をn乗する	x ** n
オプションで、ファイルを出力先にする	file = sys.open(filename, 'w')
線グラフを描画して色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategrey')
配列と配列について散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
データフレームを'A'列と'B'列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
折れ線グラフの下三角印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
２つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
リストとリストについての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
文字列と文字列と凡例をグラフに入れる	plt.legend([s, s2])
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgreen')
nまでの奇整数リスト	list(range(1, n, 2))
ヒストグラムの透明度をxに設定する	plt.hist(データ列, alpha=x)
整数nのバイト長	(n.bit_length() + 7) // 8
線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
シーケンスをダミー変数に変換する	pd.get_dummies(iterable)
文字列の中の複数行対応として正規表現による全マッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
＜オプション＞三二ビット整数型を用いる	dtype = np.int16
辞書の項目名を列挙する	list(aDict)
コマンドフラグの状態	sys.flags
リストとリストについて淡い色の折れ線グラフを描いてその線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
xの小数点以下'1'桁までを出力する	print(':.1f'.format(x))
プロットに格子線を加える	plt.grid(True)
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
＜オプション＞ダイアモンドマーカーを使う	marker = 'D'
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
ValueMapでデータフレームの値をまとめて置き換える	df.replace(ValueMap)
データ列とリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
リストとリストについて散布図を描画し、、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
データフレームの列をヒストグラムにする	plt.hist(df[column])
整数nの十六進文字列	hex(n)[2:]
全要素を０で初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
2つの文字列は同じでないか調べる	s != s2
折れ線グラフに大きさnのダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
カウンタ同士で積集合	aCounter & aCounter2
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
浮動小数点数を三乗する	x ** 3
折れ線グラフを描画して、その色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
nがn2以上かどうか	n >= n2
正規表現patternでまとめてデータ列を置き換える	ds.replace(pattern, repl, regex=True)
折れ線グラフの色をコーンズシルクに変更する	plt.plot(データ列, データ列2, color='cornsilk')
度数分布図を描いてビン数をnに変更する	plt.hist(データ列, bins=n)
プログラムを異常停止する	sys.exit(1)
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データフレームの欠損値が含まれる部分に色を付ける	df.style.highlight_null()
ヒストグラムを描画してその色をプラムに設定する	plt.hist(データ列, color='plum')
日付時刻データが月曜日かテストする	aDatetime.weekday() == 0
折れ線グラフのポイントマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
日付データが何曜日か知る	aDate.weekday()
文字列のプレフィックスは部分文字列かどうか	s.startswith(sub)
ゼロ埋めした整数型の配列	np.zeros(要素数, dtype=np.int)
フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
赤い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='r')
ファイルを全部、読む	f.read()
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
リストのn番目からn2番目の部分	aList[n:n2]
リストと配列についての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
パステル調のグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームを各列毎にグループ化して列の平均値を求める	df.groupby(column)[column2].mean()
ファイルから1バイト、読む	f.read(1)
最初の部分文字列を用いて文字列を二分する	s.partition(sub)
リストとイテラブルについて散布図を描画し、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
＜オプション＞グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
折れ線グラフの星マーカーを黒くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
＜オプション＞ピンクを使う	color = 'pink'
両端キューの先頭から値を取り除く	deq.popleft()
データフレームのカラムの歪度を求める	df[col].kurt()
双方向キューの末尾に値を追加する	deq.append(element)
数列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
グラフの中のy座標のラベルをuntitledに設定する	plt.ylabel(untitled)
データフレームのリストカラムの平均値	df[aList].mean()
n個にリストを等間隔で分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムを描画して、その色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
線グラフを描画して、色をミッドナイトブルーに指定する	plt.plot(データ列, データ列2, color='midnightblue')
赤い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
青色の濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
小数点数の双曲線正接	math.tanh(x)
小さい順にリストを並べる	sorted(aList, reverse=False)
赤い▲印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
＜オプション＞８ビット整数型を使う	dtype = np.int8
＜オプション＞マーカーを星に変更する	marker = '*'
要素ひとつのりストを得る	[element]
データフレームの重複した行を数える	df.duplicated().sum()
リストをビン数nでビンニングする	pd.cut(aList, n)
折れ線グラフを描画して、その色を耐火レンガに指定する	plt.plot(データ列, データ列2, color='firebrick')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
折れ線グラフに描画して、マーカーを菱形にする	plt.plot(データ列, データ列2, marker='D')
折れ線グラフを描画して、その色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
ファイル全体を行単位で分割して読む	f.readlines()
８進数字を全部使う	string.octdigits
データフレームの列の各データ値の出現数	df[col].value_counts()
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
スクリプトの名前を知る	sys.argv[0]
＜オプション＞インディアンレッド色を用いる	color = 'indianred'
逆順の両端キュー	reversed(deq)
nがn2よりも大きいか調べる	n > n2
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
＜オプション＞オールドレース色を使う	color = 'oldlace'
グラフのタイトルをuntitledに設定する	plt.title(untitled)
データフレームのリストカラムのモード	df[aList].mode()
ヒストグラムを描画して、その色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
折れ線グラフの下三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
折れ線グラフを描画して色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
リストの末尾から要素をポップする	aList.pop()
＜オプション＞トマトにグラフの色を設定する	color = 'tomato'
折れ線グラフを描画してその色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
＜オプション＞ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
今日が月曜日か	datetime.datetime.today().weekday() == 0
暗いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
リストとリストについて散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
データフレームのカラムを丸めて整数型にする	df[col].round().astype(int)
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
列'A'と列'B'をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームが重複しているか	df.duplicated()
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgrey'
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
赤い左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
データフレームのカラムの欠損値を最頻値に指定する	df[col].fillna(df[col].mode().iloc[0])
文字を文字コードに変換する	ord(ch)
データフレームのカラムの中にいくつNaNが存在するか数える	df[col].isna().sum()
整数に変換する	int(x)
改行なしに二つの文字列をプリントする	print(value, value2, end='')
データフレームの中の列を中央値でビニングする	pd.qcut(df[col], 2)
データフレームの列がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
実数の双曲線正弦の逆数を求める	math.asinh(x)
入力ストリームを改行を取り除いて一行ずつ読む	f.readline()
淡い色としてリストとリストについての散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
双方向キューを空にする	deq.clear()
値をキューの末尾から取り除く	deq.pop()
折れ線グラフのポイント印の大きさをnに変更する	plt.plot(データ列, データ列2, marker='.', markersize=n)
データフレームを列によってソートして、上の方n件を取り出す	df.sort_values(columns).head(n)
ミントクリーム色の線グラフを描画する	plt.plot(データ列, データ列2, color='mintcream')
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
データフレームの末尾	df.tail()
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
＜オプション＞グラフの色をライムに指定する	color = 'lime'
文字列を赤色にする	f'\033[31m{value}\033[0m'
データフレームから重複する行をドロップする	df.drop_duplicates()
リストと配列の散布図を明るい色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
データフレームの未入力値を最頻値で埋める	df.fillna(df.mode().iloc[0])
リストとリストについて散布図を描画して、色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
二つのカウンタの共通する要素を求める	aCounter & aCounter2
＜オプション＞改行コードを旧Macに設定する	newline = '\r'
明るい色でリストについてのヒストグラムをプロットする	plt.hist(xdata, color='bright')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
最初のコマンド引数	sys.argv[1]
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
文字列が漢字かどうか判定する	('\u4E00' <= ch <= '\u9FD0')
複数の列によって小さい順にデータフレームを並べ直す	df.sort_values(by=column, ascending=True)
ヒストグラムを描画して、その色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
オブジェクトが組に含まれるか調べる	element in aTuple
黒いクロスマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
オブジェクトのオブジェクト識別子	id(obj)
線グラフを描画して、その色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフに緑色の四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
色差別ない色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
折れ線グラフを描画してその色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
折れ線グラフを描画して、その色をネイビーに変更する	plt.plot(データ列, データ列2, color='navy')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
整数nを二進数表現に変換する	bin(n)
文字列リストにイテラブルを変換して、部分文字列で結合する	sub.join(map(str, iterable))
散布図に赤い大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c='r')
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
リストとイテラブルについて暗いグラフを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
線グラフを描画して、その色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
文字列を全て小文字に変換する	s.casefold()
＜オプション＞ゴールデンロッド色を使用する	color = 'goldenrod'
＜オプション＞ダークゴールデンロッドにグラフの色を変更する	color = 'darkgoldenrod'
＜オプション＞セパレータをタブにする	sep = '\t'
リストとデータ列の青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
赤色の星マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='*', c='r')
実数に実数を乗算する	x * y
＜オプション＞青緑色を使う	color = 'teal'
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
データ列の欠損値をモードで補う	ds.fillna(ds.mode().iloc[0])
データ列とリストについて青色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
nから無限に数え上げるする	itertools.count(start=n)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
文字列をコロンで区切って、列挙する	s.split(':')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
リストと数列の散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
nをn2乗に増やす	n **= n2
折れ線の透明度をalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
リストの推移を折れ線グラフで描く	plt.plot(range(len(xdata)), xdata)
0から始まる無限なリスト	itertools.count()
折れ線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
折れ線グラフに緑色の上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
データ列を箱髭図で描画する	plt.boxplot(データ列)
折れ線グラフのマーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
白い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='w')
データフレームを丸めて、整数にする	df.round().astype(int)
パステル調のグラフの色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
配列が何次元か	aArray.ndim
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
xが-9以上9以下かどうか調べる	-9 <= x <= 9
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
青いヒストグラムを描画する	plt.hist(データ列, color='b')
ヒストグラムを描画してその色を深紅に設定する	plt.hist(データ列, color='crimson')
辞書をクリアする	aDict.clear()
折れ線グラフの色をライムに変更する	plt.plot(データ列, データ列2, color='lime')
カラーコードの丸マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='o', c=rgb)
横棒グラフの色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
綺麗なグラフを描画する準備をする	import seaborn as sns
折れ線グラフの色をミディアムターコイズにセットする	plt.plot(データ列, データ列2, color='mediumturquoise')
＜オプション＞ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
散布図を黒いクロスマーカーで描画する	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
データフレームのカラムの年	df[col].dt.year
文字列を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
明るいカラーパレットをグラフの描画で使用する	sns.set(pallete='bright')
データフレームの列を100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ピアソンで表データのリスト列の相関行列	df[aList].corr(method='pearson')
折れ線グラフの上三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
コロンで区切って二つの数値をプリントする	print(value, value2, sep=':')
破線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
赤い丸マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='o', c='r')
＜オプション＞ミスティローズ色を用いる	color = 'mistyrose'
折れ線グラフを描画してその色をトマトに指定する	plt.plot(データ列, データ列2, color='tomato')
データフレームのリストカラムの欠損値を直後の値に指定する	df[aList].fillna(method='bfill')
線グラフを描画して、色をレベッカパープルに変更する	plt.plot(データ列, データ列2, color='rebeccapurple')
小数点数の自然対数	math.log(x)
リストとリストの散布図にカラーコードの△マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
＜オプション＞デピンク色を使う	color = 'deeppink'
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
データ列と数列についての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
データ列を10の位で丸める	ds.round(-1)
リストと数列の濃いグラフを描画して、その色を青色に指定する	plt.plot(xdata, ydata, linestyle='deep', color='b')
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgray')
データフレームの中に文字列が存在するかどうか	df.isin([value])
浮動小数点数のn乗して数による余り	pow(x, n, y)
ふたつの集合が集合と互いに素か判定する	aSet.isdisjoint(aSet2)
ヒストグラムを描画して、その色をアリスブルーにセットする	plt.hist(データ列, color='aliceblue')
ヒストグラムを描画して、その色をシエナに設定する	plt.hist(データ列, color='sienna')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
＜オプション＞色をスレートブルーに変更する	color = 'slateblue'
＜オプション＞グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
リストとリストの折れ線を描画し、、アルファをalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞色をダークカーキに設定する	color = 'darkkhaki'
実数の逆双曲線余弦を計算する	math.acosh(x)
＜オプション＞ホワイトにグラフの色を設定する	color = 'white'
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
データフレームを列でグループ分けして、列の要約統計量を求める	df.groupby(column).describe()[column2]
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
プロットのデータラベルの位置を(x,y)にセットする	plt.legend(loc=(x, y))
データフレームを複数の列で昇順にソートする	df.sort_values(by=column, ascending=True)
折れ線グラフを破線で描画する	plt.plot(データ列, データ列2, linestyle='dashed')
CSVTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフを描画してその色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
グラフで日本語フォントを表示可能なようにする	sns.set(font='IPAexGothic')
代数計算を用いる	import sympy
＜オプション＞貝殻色を使用する	color = 'seashell'
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
既存のファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
要素が集合のメンバーに含まれないか調べる	element not in aSet
2を底とする実数の対数を求める	math.log2(x)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
線幅nの折れ線グラフをプロットする	plt.plot(xdata, ydata, linewidth=n)
列'A'と列'B'をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
列の各データ値の出現数を求める	df[col].value_counts()
空白文字を全部見る	string.whitespace
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
列でデータフレームをソートして、下位を取り出す	df.sort_values(columns).tail(n)
グラフで用いる横軸のラベルをuntitledに変更する	plt.xlabel(untitled)
Pandasで、データフレームのカラムをタイムスタンプ型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
データ列の空文字を未入力値に変換しドロップする	ds.replace('', np.nan).dropna()
リストと配列の破線グラフを描き、、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
３つの文字列を順にプリントする	print(value, value2, value3)
行列の行ごとの合計値	np.sum(aArray, axis=1)
＜オプション＞タン色を用いる	color = 'tan'
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgrey')
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
折れ線グラフを描画して、色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
＜オプション＞アンティークホワイトを使う	color = 'antiquewhite'
散布図に黒色の四角マーカーを使用する	plt.plot(xdata, ydata, marker='s', c='k')
ヒストグラムを描画してその色をダークレッドに変更する	plt.hist(データ列, color='darkred')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
色差別ないの色を青くする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データ列とリストの折れ線を描いて、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
パラメータについて数値のインテグラルを求める	sympy.integrate(e, z)
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームのリストカラムの空文字を未入力値に変換しドロップする	df[aList].replace('', np.nan).dropna()
Pandasで、文字列のUNIX時間からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
文字列が部分文字列で終了するか	s.endswith(sub)
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
＜オプション＞書き込みモードに設定する	mode = 'w'
＜オプション＞グラフの色をライムに設定する	color = 'lime'
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
折れ線グラフの丸印の線幅をnにする	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
＜オプション＞カーキ色を使用する	color = 'khaki'
＜オプション＞ミッドナイトブルー色を使用する	color = 'midnightblue'
グラフを見やすくする	import seaborn as sns
n2がnより大きく、かつ、n3未満か	n < n2 and n2 < n3
折れ線グラフを描画して、その色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
文字列リストにイテラブルを変換して部分文字列で一つにする	sub.join(map(str, iterable))
カウンタを低頻度方からリストとして得る	aCounter.most_common()[::-1]
線グラフを描画して、その色をグレーにセットする	plt.plot(データ列, データ列2, color='grey')
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
ヒストグラムを描画して、色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
nが2で割り切れる	n % 2 == 0
イテラブルを両端キューに変換する	collections.deque(iterable)
タイムスタンプデータが火曜日か調べる	aDatetime.weekday() == 1
カウンタを多い順に列挙する	aCounter.most_common()
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
文字列内にひとつでも英数字があるか判定する	any(c.isalnum() for c in s)
線グラフを描画して、その色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
折れ線グラフの色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
＜オプション＞ティール色を用いる	color = 'teal'
データフレームのカラムの中央値	df[col].median()
＜オプション＞線種を実線に設定する	linestyle = 'solid'
文字列をn回繰り返す列を得る	itertools.repeat(element, n)
イテラブルを文字列リストに変換して、空白で一つにする	' '.join(map(str, iterable))
キーが辞書上で定義済みか調べる	key in aDict
リストを明るい色のヒストグラムでプロットする	plt.hist(xdata, color='bright')
＜オプション＞グラフの色をサーモンに指定する	color = 'salmon'
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
predicateFuncが真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
文字列はタイトル大文字小文字か調べる	s.istitle()
＜オプション＞グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
ミッドナイトブルーにヒストグラムの色を変更する	plt.hist(データ列, color='midnightblue')
＜オプション＞色をライムグリーンに指定する	color = 'limegreen'
データフレームのNaNを直後の値に設定する	df.fillna(method='bfill')
配列から重複を除いた配列を作る	np.unique(aArray)
現在が何秒か知る	datetime.date.today().second
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
小数点数の双曲線正接の逆数	math.atanh(x)
リストと配列の暗いを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
辞書から最後の項目を取り出す	aDict.popitem()
折れ線グラフに緑色の三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
リストとリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
＜オプション＞セパレータを文字列にする	sep = s
両端キューの末尾に要素を追加する	deq.append(element)
赤色の下三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
＜オプション＞色をコーラルに設定する	color = 'coral'
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
データフレームを複数の列を用いて昇順に整列する	df.sort_values(by=column, ascending=True)
リストとリストでパステル調のの折れ線グラフをプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
＜オプション＞スノー色を使う	color = 'snow'
青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
実数の双曲線正接	math.tanh(x)
折れ線グラフを描画して、色をピーチパフにする	plt.plot(データ列, データ列2, color='peachpuff')
NULLに等しいもの	None
データ列の中にあるの合計を数える	ds.isin([value]).sum()
セットのイミュータブル版	frozenset(aSet)
プロットのグリッドを白くする	sns.set(style='whitegrid')
ガンマ関数の値を求める	math.gamma(x)
システム時刻で乱数を初期化する	random.seed()
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
リストとリストについて散布図を描いて三角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='^', c=rgb)
イテラブルから配列を作る	np.array(iterable)
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
リストに文字列を追加する	aList.append(element)
＜オプション＞ダークオレンジにグラフの色を設定する	color = 'darkorange'
折れ線グラフに描画して、印を大バツ印にする	plt.plot(データ列, データ列2, marker='X')
データ列の未入力値を最小値で埋める	ds.fillna(ds.min())
実数の平方根	math.sqrt(x)
双方向キューに要素をエンキューする	deq.appendleft(element)
データフレームのそれぞれのグループの最小値	df.groupby(column).min()
エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムを実線に指定する	plt.hist(データ列, linestyle='solid')
ヒストグラムを描画して、その色をトマトに変更する	plt.hist(データ列, color='tomato')
漢字が文字列に含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
配列とデータ列についての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
実数の逆双曲線余弦	math.acosh(x)
データフレームを列ごとにグループ化してグループごとの最小値を求める	df.groupby(column).min()
グラフのデータラベルの位置を(x,y)に指定する	plt.legend(loc=(x, y))
リストの最後を取り除く	aList[:-1]
ビン数nのヒストグラムをプロットする	plt.hist(データ列, bins=n)
イテラブルと配列について破線グラフを描画して色を暗いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
xを整数に変換する	int(x)
本日が何曜日か知る	datetime.datetime.today().weekday()
数列とリストの散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
データ列とリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
横棒グラフを描く	plt.barh(ラベル列, データ列)
データフレームのカラムのNaNをxに設定する	df[col].fillna(x)
タプル自身を2回あわせた直積	itertools.product(iterable, repeat=2)
赤い四角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='s', c='r')
現在のミリ秒	int(time.time() * 1000)
データ列の中に文字列が存在するかどうか調べる	ds.isin([value])
文字コードの最大値	sys.maxunicode
小数点数の逆双曲線正弦を求める	math.asinh(x)
をエクセルファイルファイルから読み込む	pd.read_excel(filename)
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
データフレームから指定された３つの列だけ抽出する	df[[column, column2, column3]]
データフレームのカラムは何分か確認する	df[col].dt.minute
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフに緑色の下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
破線の色を淡いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
＜オプション＞ゴールドにグラフの色を設定する	color = 'gold'
データフレームの列をドロップして更新する	df.drop(column, axis=1, inplace=True)
＜オプション＞サンディーブラウン色を使う	color = 'sandybrown'
列の値によってデータフレームをグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
配列の累積和	np.cumsum(aArray)
インデント幅nでマッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
エクセルデータファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
全ての空白文字	string.whitespace
データ列の曜日の名前	ds.dt.weekday_name
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
数列とリストについて散布図をプロットして色をパステル調のに指定する	plt.plot(xdata, ydata, c='pastel')
辞書の値を列挙する	aDict.values()
変数を改行せずプリントする	print(value, end='')
＜オプション＞先頭のカラムをインデックスに設定する	index_col = 0
整数個からk個取り出した場合の順列の総数	math.perm(n, k)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
Pandasでデータ列を日付データにする	pd.to_datetime(ds)
明るいを使って数列についてのヒストグラムを描画する	plt.hist(xdata, color='bright')
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
実線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='solid')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
オリベドラブにヒストグラムの色を変更する	plt.hist(データ列, color='olivedrab')
二つの文字列を順にプリントする	print(value, value2)
空列	[]
リストとリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
データフレームの指定された４つの列だけ選択する	df[[column, column2, column3, column4]]
プロットの描画で淡いカラーパレットを使う	sns.set(pallete='muted')
nをn2で割った余りをnとする	n %= n2
データフレームを千の位で丸める	df.round(-3)
散布図を黒色の下三角マーカーで描く	plt.plot(xdata, ydata, marker='v', c='k')
タプルとタプルを連結する	aTuple + aTuple2
濃い色の折れ線グラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
パステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
文字列の末尾から空白を除く	s.rstrip()
スピアマン順位相関係数でデータフレームのリスト列の相関行列を求める	df[aList].corr(method='spearman')
ゼロ埋めされた複素数型の行列を作る	np.zeros(要素数, dtype=bool)
双方向キューに要素をプッシュする	deq.append(element)
配列間の各要素の最大公約数	np.gcd(aArray, aArray2)
線グラフの色をディープスカイブルーにセットする	plt.plot(データ列, データ列2, color='deepskyblue')
グラフの描画で濃い色を使う	sns.set(pallete='deep')
データフレームのカラムの未入力値を最大値で置換する	df[col].fillna(df[col].max())
データフレームの重複した行をマスクする	df.duplicated()
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
オリベドラブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olivedrab')
折れ線グラフを描画して、色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
イテラブルからサンプリングする	random.sample(iterable)
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgrey'
折れ線グラフの色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
試しに何か動かす	print('Hello World')
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
表データを列でグループ化し、、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
データフレームの中に存在する日付データとの合計を数える	df.isin([value, value2]).sum()
降順に列によって破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフを描画して、その色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
＜オプション＞ダークバイオレット色を使う	color = 'darkviolet'
リストとリストで明るいの折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
変数を黒色にする	f'\033[30m{value}\033[0m'
辞書のキーとその項目を列挙する	aDict.items()
データフレームのカラムの下位25%	df[col].quantile(0.75)
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
TSVファイルをカラムの名前を指定せず読む	pd.read_csv(filename, header=None)
オブジェクトは浮動小数点数	isinstance(obj, float)
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
タプルをひとつ置きに抽出する	aTuple[::2]
データフレームを列の値によってグループ化する	df.groupby(column)
黒いポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='k')
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
箱ひげ図を二つ並べる	plt.boxplot([データ列, データ列2])
データフレームを昇順に'A'列によって破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
リストをn回、連結する	aList * n
折れ線グラフを描画して、その色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
文字列を空白を使って区切って、整数のリストにする	map(int, s.split())
散布図を赤色の▽マーカーで描画する	plt.plot(xdata, ydata, marker='v', c='r')
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
散布図を▽マーカーを用いて描画する	plt.plot(xdata, ydata, marker='v')
数式の微分を計算する	sympy.diff(e)
＜オプション＞グラフの色をアイボリーに変更する	color = 'ivory'
データ列と数列で濃いの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
文字列の中のASCII限定として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
＜オプション＞グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
カウンタからシーケンスをカウントして引く	aCounter.subtract(iterable)
データ列の最頻値	ds.mode()
＜オプション＞コーンズシルクを用いる	color = 'cornsilk'
表データの列がxでない行をフィルタする	df[df[column] == x]
＜オプション＞ロージーブラウン色を使う	color = 'rosybrown'
折れ線グラフを描画して、その色をシルバーに変更する	plt.plot(データ列, データ列2, color='silver')
データフレームの指定されたカラムの名前一覧の列を取り出す	df[columns]
数式の展開を行う	sympy.expand(e)
複素数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=bool)
0からNまでの配列	np.arange(N)
配列の内積	np.dot(aArray, aArray2)
デフォルトを適用する	sns.set()
ヒストグラムを描いて、透明度をxに設定する	plt.hist(データ列, alpha=x)
データフレームの行と列を入れ替える	df.T
折れ線グラフの色をベージュに変更する	plt.plot(データ列, データ列2, color='beige')
JSON形式のファイル入力を辞書に変換する	json.load(fin)
折れ線グラフを描画して、色をライトシアンにする	plt.plot(データ列, データ列2, color='lightcyan')
データフレームの指定された列をリストに変換する	df[column].values.tolist()
データ列の分を見る	ds.dt.minute
棒グラフをプロットする	plt.bar(ラベル列, データ列)
データフレームから破壊的に重複したデータを削除する	df.drop_duplicates(inplace=True)
クロスマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='x')
双方向キューに要素をenqueueする	deq.appendleft(element)
＜オプション＞グラフの色をタンに設定する	color = 'tan'
文字のユニコード	ord(ch)
タプルに要素をキーとして加える	aDict[key] = element
折れ線グラフのマーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
0からnの範囲	range(n)
範囲を指定して整数乱数を計算する	random.randint(最小値, 最大値)
二つのオブジェクトが同一参照か調べる	obj is obj2
淡いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
線グラフを描画して、その色をハニーデューに変更する	plt.plot(データ列, データ列2, color='honeydew')
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
＜オプション＞グラフの色をビスクに指定する	color = 'bisque'
折れ線グラフの色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
濃いをリストとリストで描画し、、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレーム全体を行によってソートする	df.sort_index()
要素が辞書の値として含まれているか調べる	element in aDict.values()
＜オプション＞フォレストグリーンを使う	color = 'forestgreen'
折れ線グラフにダイアモンド印を加える	plt.plot(データ列, データ列2, marker='D')
リストとイテラブルについて散布図を描いて、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
ベクトルのムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
タイムスタンプデータの年数	aDatetime.year
グラフの色を色差別なくする	sns.set(pallete='colorblind')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
オブジェクトが集合クラスか調べる	isinstance(obj, set)
折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
空のセット	set()
データフレームの中の欠損値をドロップする	df.dropna()
カウンタの積集合演算する	aCounter & aCounter2
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
データフレームのリストカラムのNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
本日が月曜日か確認する	datetime.datetime.today().weekday() == 0
データフレームのリストカラムの中にいくつNaNがあるかカウントする	df[aList].isna().sum()
リストから配列を作る	np.array(aList)
＜オプション＞データ型を指定する	dtype = bool
文字列を正規表現で区切る	re.split(pattern, s)
＜オプション＞スレートブルーにグラフの色を指定する	color = 'slateblue'
折れ線グラフのポイントマーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='.', markersize=n)
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
データフレームを各列毎に分類して、文字列というグループを使う	df.groupby(column).get_group(s)
散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
リストとリストについて散布図を描画して、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
線グラフを描画して、色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
＜オプション＞ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
＜オプション＞ダークターコイズを使用する	color = 'darkturquoise'
集合の濃度を求める	len(aSet)
折れ線グラフの星マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
データ列を1000の位で四捨五入する	ds.round(-3)
リストと配列についての散布図に赤色のポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
黒色の丸マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='o', c='k')
リストのn番目のを求める	aList[n]
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkseagreen')
集合から要素を除く	aSet.remove(element)
文字列内にひとつでも英字が含まれるかどうか	any(c.isalpha() for c in s)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
データフレームを表示するとき表示可能な列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
文字列をコロンで分割して、文字列リストにする	s.split(':')
実数の小数点を丸める	round(x)
ヒストグラムを描画してその色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
文字列をプリントする	print(value)
ファイルパスをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
インディゴ色の線グラフを描画する	plt.plot(データ列, データ列2, color='indigo')
データフレームをタブ区切りでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
実数を複素数に変換する	complex(x)
行列の最大値	np.max(aArray)
＜オプション＞エラーがあるとき例外を発生させるように設定する	errors = 'strict'
オブジェクトのメモリビュー	memoryview(obj)
＜オプション＞コーンフラワーブルー色を使う	color = 'cornflowerblue'
リストと配列についての散布図に赤い▲マーカーを描く	plt.plot(xdata, ydata, marker='^', c='r')
文字列はリストに含まれないか確認する	element not in aList
ゴールド色の線グラフを描画する	plt.plot(データ列, データ列2, color='gold')
データ列の各データ値の出現数	ds.value_counts()
文字列を特殊文字も含め小文字にする	s.casefold()
データフレームの中の列をビン数nを用いてビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームから指定された二つの列を抽出する	df[[column, column2]]
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
リストと配列についての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードの丸マーカーをリストとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
句読点文字を全部使う	string.punctuation
リストとリストの色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
黒いダイアモンドマーカーを配列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='D', c='k')
折れ線グラフを描画して、色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
二つの文字列は同じか調べる	s == s2
色差別ないグラフの色を黒色に変更する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
折れ線グラフの菱形印を青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
マップのキーと値を入れ替える	{v: k for k, v in aDict.items()}
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
プログラムの実行を異常終了する	sys.exit(1)
リストの先頭のn要素を取り除く	aList[n:]
グラフのサイズを設定する	plt.figure(figsize=(width, height))
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
＜オプション＞グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
カラーコードの星マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='*', c=rgb)
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
標準出力を使う	sys.stdout
ヒストグラムを描画して、その色をアンティークホワイトにする	plt.hist(データ列, color='antiquewhite')
＜オプション＞コーンフラワーブルーにグラフの色を設定する	color = 'cornflowerblue'
折れ線グラフの丸印を青色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
＜オプション＞グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
ヒストグラムを描画して、その色をミディアムシアグリーンにセットする	plt.hist(データ列, color='mediumseagreen')
ユーザの入力を整数として受け取る	int(input())
折れ線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
既存のファイルをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ヒストグラムを描画して、その色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
データフレームを各列と列の組み合わせ毎に集約して、最小値を算出する	df.groupby([column, column2], as_index=False).min()
ファイルパスをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
赤いパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
２つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
データフレームのモード	df.mode()
データフレームの中の列を分割する	pd.cut(df[col], aList)
＜オプション＞ペルー色を使用する	color = 'peru'
濃いとしてリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
リストの要素をソートする	sorted(aList)
日付時刻データが日曜日	aDatetime.weekday() == 6
小数点数の双曲線余弦の逆数	math.acosh(x)
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
データ列とリストについて明るい色の折れ線グラフを描画してその線幅をnにする	plt.plot(xdata, ydata, linewidth=n, color='bright')
現在の再帰の最大回数を知る	sys.getrecursionlimit()
折れ線グラフを描画して、その色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
＜オプション＞オレンジレッドにグラフの色を設定する	color = 'orangered'
折れ線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
ヒストグラムを描画してその色を青緑に設定する	plt.hist(データ列, color='teal')
集合をタプルに変換する	tuple(aSet)
データフレームから最後のカラムを除く	df[df.columns[:-1]]
＜オプション＞どの列もインデックスに設定しない	index_col = None
文字列の中でケースを無視してパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
２つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
＜オプション＞グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
＜オプション＞カーキ色を使う	color = 'khaki'
自然数個からk個取り出した時の順列の総数を求める	math.perm(n, k)
折れ線グラフを描画して、その色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
黒い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='k')
タプルの中の最小値	min(aTuple)
ヒストグラムをビン数をnに設定して描く	plt.hist(データ列, bins=n)
＜オプション＞ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
＜オプション＞貝殻にグラフの色を設定する	color = 'seashell'
ファイルにxを文字列にして書き込む	f.write(str(x))
データフレームの列名を列から文字列に付け直す	df.rename(columns={column: name})
要素をキューにエンキューする	deq.appendleft(element)
日付データが日付データより遅い	aDate > aDate2
色差別ないグラフの色を黒色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
キューをリストに変換する	list(deq)
日付データからn週間分、減らす	aDate - datetime.timedelta(weeks=n)
ヒストグラムを描画して、その色をグレーに変更する	plt.hist(データ列, color='gray')
リストとデータ列についての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
nの無限数列	itertools.repeat(n)
データフレームの列をヒストグラムで可視化する	plt.hist(df[column])
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
折れ線グラフを描画して色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
変数を水色で表示する	print(f'\033[36m{value}\033[0m')
データフレームのNaNを平均値に設定する	df.fillna(df.mean())
オブジェクトはリストかタプル	isinstance(obj, (list)
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgrey'
＜オプション＞三角マーカーを使う	marker = '^'
データフレームの行名を一度にnameからname2に付け直す	df.rename(index={name: name2})
nを八進数文字列にする	oct(n)[2:]
等量でビン数nを用いてリストをビン分割する	pd.qcut(aList, n)
aListn番目から値を捨てる	aList.pop(n)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
折れ線グラフの色をコーンズシルクにする	plt.plot(データ列, データ列2, color='cornsilk')
nが3で割り切れるか調べる	n % 3 == 0
直後の値でデータ列の欠損値を補う	ds.fillna(method='bfill')
データフレームのリスト列の欠損値をxで補う	df[aList].fillna(x)
現在の秒数	datetime.date.today().second
空のチェーンマップ	collections.ChainMap()
ヒストグラムを描画して、色を青紫に指定する	plt.hist(データ列, color='violet')
実行結果を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
部分文字列が文字列中に含まれる	sub in s
線幅nのクロス印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
Pandasで、フォーマットfmtとしてデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
リストとデータ列の折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
データフレームの列の欠損値をxで補う	df[col].fillna(x)
＜オプション＞サンディーブラウンにグラフの色をする	color = 'sandybrown'
行列の行ごとの分散	np.var(aArray, axis=1)
折れ線グラフのマーカーを三角にする	plt.plot(データ列, データ列2, marker='^')
＜オプション＞色をマルーンに指定する	color = 'maroon'
＜オプション＞スラグレー色を使用する	color = 'slategray'
淡いグラフを数列と数列で描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
最小値でデータフレームのリストカラムの欠損値を置換する	df[aList].fillna(df[aList].min())
リストにリストを追加し、拡張する	aList.extend(aList2)
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
リストを暗い色のヒストグラムで描画する	plt.hist(xdata, color='dark')
データフレームを2つの列を用いて小さい順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
＜オプション＞グラフの色を茶色に指定する	color = 'brown'
淡い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='muted')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
折れ線グラフを描画して、色をプラムに指定する	plt.plot(データ列, データ列2, color='plum')
区切りを用いて文字列を区切って、列挙する	s.split(sep)
折れ線グラフの色をオレンジにする	plt.plot(データ列, データ列2, color='orange')
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
プラットフォームの文字コードの最大値	sys.maxunicode
＜オプション＞スラグレー色を用いる	color = 'slategrey'
文字列の末尾を使う	s[-1]
濃いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフに緑色の▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
＜オプション＞ダークスラテグレー色を使う	color = 'darkslategray'
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
折れ線グラフの色をコーンズシルクに指定する	plt.plot(データ列, データ列2, color='cornsilk')
＜オプション＞淡いピンク色色を使う	color = 'lightpink'
文字列を紫色にする	f'\033[35m{value}\033[0m'
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgray')
データフレームがどの程度分散しているか見る	df.var()
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
＜オプション＞色をライトグレーに設定する	color = 'lightgrey'
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
＜オプション＞赤色を使う	color = 'red'
＜オプション＞オレンジレッド色を使う	color = 'orangered'
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
文字列の末尾からタブを取り除く	s.rstrip('\t')
データフレームの中で、列と列の重複を消す	df.drop_duplicates(subset=column)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
＜オプション＞色をダークオレンジに変更する	color = 'darkorange'
データフレームのカラムのタイムゾーンを日本に指定する	df[col].tz_convert('Asia/Tokyo')
ヒストグラムを描画して、その色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
日付時刻データの時間数	aDatetime.hour
＜オプション＞サーモンにグラフの色を変更する	color = 'salmon'
データ列とリストについての散布図に黒い下三角マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c='k')
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
データフレームの列の文字列長を列として求める	df[col].str.len()
配列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
nが3の倍数か調べる	n % 3 == 0
散布図に赤い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
リストの末尾にリストを加える	aList.extend(aList2)
データ列を中央値でビン分割する	pd.qcut(ds, 2)
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
横棒グラフの幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
実行結果を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
データフレームのカラムの中にいくつ日付データがあるか数える	df[col].isin([value]).sum()
ファイルをバイナリ用に開いて]、fとする	f = open(filepath, mode='rb')
n引くn2を求める	n - n2
nプラスn2を求める	n + n2
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
辞書の浅いコピーを作る	aDict.copy()
＜オプション＞色をブルーバイオレットに指定する	color = 'blueviolet'
＜オプション＞書き込みモードを使う	mode = 'w'
折れ線グラフを描画して、色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightgreen')
データフレームの欠損値を平均に設定する	df.fillna(df.mean())
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
ブール型の全要素を０で初期化された行列	np.zeros(行数, 列数, dtype=np.int32)
折れ線グラフの印を下三角にする	plt.plot(データ列, データ列2, marker='v')
代数計算モジュールを使う	import sympy
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
淡いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
＜オプション＞フォレストグリーン色を使う	color = 'forestgreen'
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
線グラフの色をマゼンタに指定する	plt.plot(データ列, データ列2, color='magenta')
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
折れ線グラフを描画して、その色をレモンシフォンにセットする	plt.plot(データ列, データ列2, color='lemonchiffon')
カウンタから最も頻出な項目の件数を求める	aCounter.most_common()[1]
ファイルのn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
リストの最後の要素	aList[-1]
折れ線グラフの印を大バツにする	plt.plot(データ列, データ列2, marker='X')
ヒストグラムを描画して、その色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
データフレームの列を行に指定する	df.set_index(column)
ヒストグラムの色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
Pandasでフォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームを関数によって集約し、、列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
中央値で配列を分割する	pd.qcut(aArray, 2)
折れ線グラフを描画して、その色をラベンダーブラッシュに指定する	plt.plot(データ列, データ列2, color='lavenderblush')
2つの文字列を改行なしにプリントする	print(value, value2, end='')
英字の大文字を全部使う	string.ascii_uppercase
横方向に二つのデータフレームをマージする	pd.merge(df, df2)
＜オプション＞ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
リストとリストの散布図を描画してマーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
折れ線グラフを描画して、色をアリスブルーにセットする	plt.plot(データ列, データ列2, color='aliceblue')
折れ線グラフを描画して色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
UTF8でファイルパスをオープンする]	open(filepath, encoding='utf-8')
折れ線グラフの色をミディアムブルーに指定する	plt.plot(データ列, データ列2, color='mediumblue')
色差別ないグラフを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
折れ線グラフのポイント印を黒くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
リストとリストの濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
ファイルをバイナリ用にオープンして]fとする	f = open(filepath, mode='rb')
数列とリストについて散布図を描画してマーカーを▼に設定する	plt.plot(xdata, ydata, marker='v')
リストの平均	sum(aList)/len(aList)
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
集合から全ての要素を取り除く	aSet.clear()
データフレームのカラムが何時か見る	df[col].dt.hour
ヒストグラムを描画して、その色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
日付時刻データが月曜日か	aDatetime.weekday() == 0
線グラフを描画して、色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
リストとリストについて淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
データフレームのリストカラムの25パーセンタイル	df[aList].quantile(0.25)
文字列を空白で分割し、、文字列リストにする	s.split()
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
データフレームを丸める	df.round()
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
赤い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフの三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
データフレームを各列毎にグループ化し、、列の最小値を求める	df.groupby(column)[column2].min()
リストと配列について濃い色の折れ線グラフを描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
ヒストグラムを描画して色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
＜オプション＞ミディアムパープルを使う	color = 'mediumpurple'
xに柱状図の透明度を指定する	plt.hist(データ列, alpha=x)
ヒストグラムを描画して、その色をインディゴに変更する	plt.hist(データ列, color='indigo')
リストとデータ列のパステル調のグラフを描画して、色を青くする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
実線ヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
ファイルをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
n個に等量でデータフレームの中のカラムをビンニングする	pd.qcut(df[col], n)
ヒストグラムを描画して、色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
複数列の散布図を一度に描画する	sns.pairplot(df[[column, column2, column3]])
文字列内にアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
折れ線グラフを描画して、色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
文字列全体がパターンにマッチするか確認する	re.fullmatch(pattern, s)
要素ひとつのりスト	[element]
プロットを画面に変更する	sns.set(context='notebook')
両端キューのn番目に要素を差し込む	deq.insert(n, element)
未定値	None
濃い色で数列とリストについての散布図をプロットする	plt.plot(xdata, ydata, c='deep')
線グラフの色をダークブルーに設定する	plt.plot(データ列, データ列2, color='darkblue')
３自然数のLCM	math.lcm(n, n2, n3)
折れ線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
青緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフの色をドジャーブルーに指定する	plt.plot(データ列, データ列2, color='dodgerblue')
折れ線グラフを描画して、その色を真紅にセットする	plt.plot(データ列, データ列2, color='crimson')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategrey'
＜オプション＞パレットトルコイズ色を使う	color = 'paleturquoise'
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
オブジェクトは整数クラスか	isinstance(obj, int)
折れ線グラフのダイアモンドマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
＜オプション＞デピンクに色を設定する	color = 'deeppink'
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
パステル調の色のマーカーを用いて散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
データフレームのn行目を抽出する	df.loc[n]
＜オプション＞グラフの色をオレンジレッドに設定する	color = 'orangered'
nがn2で割り切れるかどうか調べる	n % n2 == 0
柱状グラフを描画する	plt.hist(データ列)
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
イテラブルの集合	set(iterable)
データフレームの指定された列を配列に変換する	df[column].values
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
淡いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
カウンタのKトップを列挙する	aCounter.most_common(k)
リストとリストの折れ線グラフをuntitledとラベル付けして描く	plt.plot(xdata, ydata, label=untitled)
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
折れ線グラフを描画して、その色をインディゴに指定する	plt.plot(データ列, データ列2, color='indigo')
プロットの見栄えをよくする	import seaborn as sns
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
＜オプション＞ミディアムシアグリーン色を使う	color = 'mediumseagreen'
折れ線グラフのバツマーカーを青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
暗いグラフの色を青色に設定する	plt.plot(xdata, ydata, linestyle='dark', color='b')
組み合わせ	math.comb(n, k)
ダークバイオレットにヒストグラムの色をセットする	plt.hist(データ列, color='darkviolet')
＜オプション＞ミディアムパープルに色を設定する	color = 'mediumpurple'
文字列をコロンで分割して列挙する	s.split(':')
実数のルート	math.sqrt(x)
2つの値を文字列で区切って表示する	print(value, value2, sep=s)
本日の月数	datetime.datetime.today().month
散らばりを可視化する	plt.scatter(xdata, ydata)
二つの辞書をネストする	collections.ChainMap(aDict, aDict2)
イテラブルとリストについての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
データフレームの列のNaNを直後の値で埋める	df[col].fillna(method='bfill')
文字列の開始位置以降に部分文字列が含まれるか確認する	s.find(sub, start) != -1
グラフの中の縦軸のラベルをuntitledに設定する	plt.ylabel(untitled)
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
データフレームを二つの列によってで破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
10を底とする実数の対数	math.log10(x)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
キューの最後にイテラブルの各要素を順に付け加える	deq.extend(iterable)
疑似乱数を生成する	random.random()
データフレームの行を取り出す	df[start:end]
データフレームをValueMapで一度に置き換える	df.replace(ValueMap)
＜オプション＞下三角印を描画する	marker = 'v'
データフレームのカラムの25パーセンタイル	df[col].quantile(0.25)
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
線グラフを描画して、その色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
データフレームのカラムの値を正規表現で一度にreplに置換する	df[col].replace(pattern, repl, regex=True)
折れ線グラフを描画して、その色をライトスカイブルーに指定する	plt.plot(データ列, データ列2, color='lightskyblue')
データフレームを二つの列によってソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
リストとデータ列について暗いグラフを描画してその色を黒くする	plt.plot(xdata, ydata, linestyle='dark', color='k')
n回オブジェクトを繰り返すイテラブルを求める	itertools.repeat(element, n)
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
折れ線グラフを描画して、その色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
複素数型のゼロ埋めした行列	np.zeros(要素数, dtype=bool)
文字列の示すエンコーディングとしてファイルをオープンする]	open(filepath, encoding=s)
データフレームのカラムの時	df[col].dt.hour
データフレームを２つの列の値によってグループ化し記述統計量を求める	df.groupby(['A', 'B']).describe()
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
明るいグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
数列とリストについて散布図を描画してマーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
淡い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='muted')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
全要素を1で初期化された行列を作る	np.ones(行数, 列数, dtype=np.int)
ヒストグラムを描画して色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
文字列が漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
折れ線グラフを描画して、その色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
正規表現に文字列全体をケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
グラフの用途をスライドに設定する	sns.set(context='talk')
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
散布図にパステル調の色のマーカーを使用する	plt.plot(xdata, ydata, c='pastel')
文字列をゼロ埋めする	s.zfill(文字列幅)
nがn2で割り切れない	n % n2 != 0
バリーウッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='burlywood')
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
淡いの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
＜オプション＞分割記号を使わない	sep = ''
淡いの折れ線の色をカラーコードにセットする	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
折れ線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
一点鎖線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
データフレームのリストカラムの中に文字列と文字列がある	df[aList].isin([value, value2])
折れ線グラフを描画してその色をクリムゾンに変更する	plt.plot(データ列, データ列2, color='crimson')
データフレームの値がNaNかどうか確認する	df.isna()
データ列を小数点以下n桁で丸める	ds.round(n)
折れ線グラフを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
＜オプション＞スプリンググリーン色を使う	color = 'springgreen'
データフレームを各列と列の組み合わせ毎にグループ分けして最大値を求める	df.groupby([column, column2], as_index=False).max()
aListn番目から要素を取り出す	aList.pop(n)
リストとリストを折れ線グラフで描画する	plt.plot(xdata, ydata)
ヒストグラムを描画してその色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
numpyを入れる	import numpy as np
シーケンスを文字列リストに変換して空白で連結する	' '.join(map(str, iterable))
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
タイムスタンプデータが日付時刻データより前か	aDatetime < aDatetime2
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか	s.find(sub, start, end) == -1
カウンタのユニオン	aCounter | aCounter2
配列とリストの折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
＜オプション＞グラフの色をネイビーに設定する	color = 'navy'
カウンタを多い方から列挙する	aCounter.most_common()
文字列を全て大文字に変換する	s.upper()
データフレームを二つの列で小さい順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
セットを空にする	aSet.clear()
データ列の中にある日付データとの合計をカウントする	ds.isin([value, value2]).sum()
nがn2より小さい	n < n2
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
単位行列を初期化する	np.eye(行数, 列数)
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
データ列とデータ列の青いパステル調のを描く	plt.plot(xdata, ydata, linestyle='pastel', color='b')
線グラフを描画して、色をミディアムターコイズに指定する	plt.plot(データ列, データ列2, color='mediumturquoise')
文字列をセンタリングする	s.center(文字列幅)
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
折れ線グラフの色をやわらかい青に指定する	plt.plot(データ列, データ列2, color='cornflowerblue')
列の各要素に対してpredicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームのn行目を取り除いて、更新する	df.drop(n, axis=0, inplace=True)
折れ線グラフに描画してマーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
にy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフに描画して、マーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
オブジェクトはタプル型のインスタンスか	isinstance(obj, tuple)
ヒストグラムを描画して、その色をピンクに設定する	plt.hist(データ列, color='pink')
リストとリストの散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
xが一桁の正の数か調べる	0 <= x <= 9
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
タイムスタンプデータが水曜日かどうか確認する	aDatetime.weekday() == 2
ヒストグラムの色をフローラルホワイトにセットする	plt.hist(データ列, color='floralwhite')
バイナリ書き込み用にファイルを開いて]fとする	f = open(filepath, mode='wb')
データフレームを降順に複数の列によってによって並べ直す	df.sort_values(by=column, ascending=False)
変数について数式の積分を求める	sympy.integrate(e, z)
＜オプション＞読み込む行番号をnamesで指定する	usecols = names
折れ線グラフに大きさnの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
ヒストグラムを描画して、その色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
整数nが集合のひとつか調べる	n in aSet
nまでの奇整数列を得る	list(range(1, n, 2))
nのn2乗	n ** n2
文字列モジュールをインポートする	import string
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
散布図に四角マーカーを使う	plt.plot(xdata, ydata, marker='s')
データフレームを'A'列で降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
ナバホホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='navajowhite')
ヒストグラムを描画して、色をミッドナイトブルーにセットする	plt.hist(データ列, color='midnightblue')
nでシードを固定する	random.seed(n)
パステル調の色の折れ線グラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
日付データが木曜日かどうか	aDate.weekday() == 3
データフレームのn行目を削除する	df.drop(n, axis=0)
日付データが水曜日か調べる	aDate.weekday() == 2
グラフの用途を画面に設定する	sns.set(context='notebook')
値∈集合	element in aSet
列でデータフレームをグループ化して列の要約統計量を求める	df.groupby(column).describe()[column2]
折れ線グラフを描画して、その色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgrey')
タプルの先頭	aTuple[0]
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフの星マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
数値の符号をコピーにする	math.copysign(x, x2)
ヒストグラムを描画して、その色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムを描画してその色をマゼンタに設定する	plt.hist(データ列, color='magenta')
辞書の全項目をクリアする	aDict.clear()
数式の変数にnを代入する	e.subs(z, n)
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
＜オプション＞ライトブルー色を用いる	color = 'lightblue'
折れ線グラフを描画して、その色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
数式を部分分数に展開する	sympy.apart(e)
折れ線グラフに線幅nの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
＜オプション＞グラフの色をパレットトルコイズにする	color = 'paleturquoise'
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
ヒストグラムを描画して、その色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
データフレームのリストカラムのNaNを直前の値に減らす	df[aList].fillna(method='ffill')
濃いの折れ線の線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
＜オプション＞グラフの色を青紫に設定する	color = 'violet'
＜オプション＞ライトスカイブルー色を用いる	color = 'lightskyblue'
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
実数の双曲線正弦	math.sinh(x)
黒色の左三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='<', c='k')
カラーコードの左三角マーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストとリストについて散布図を描画して文字列という補足用のラベルをつける	plt.scatter(xdata, xdata, label=s)
＜オプション＞青緑色を使う	color = 'turquoise'
ヒストグラムの色を白くする	plt.hist(データ列, color='w')
文字列内に小文字が含まれるかどうか調べる	any(c.islower() for c in s)
nとn2のXOR	n ^ n2
棒グラフの幅をxに変更する	plt.bar(ラベル列, データ列, width=x)
列の各データ値の出現数	ds.value_counts()
ヒストグラムを描画して、色をロイヤルブルーに指定する	plt.hist(データ列, color='royalblue')
数列とリストについて色差別ない色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列, データ列2, color='cornflowerblue')
三整数のLCMを計算する	math.lcm(n, n2, n3)
タプルの要素数	len(aTuple)
データフレームを未入力値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
データ列のNaNを直後の値に設定する	ds.fillna(method='bfill')
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
散布図に右三角マーカーを使う	plt.plot(xdata, ydata, marker='>')
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
折れ線グラフのマーカーを上三角にする	plt.plot(データ列, データ列2, marker='^')
文字列から部分文字列を除去する	s.replace(sub, '')
カデットブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cadetblue')
青い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームの行名の一覧を見る	df.index
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
＜オプション＞ベージュ色を使う	color = 'beige'
ふたつの集合の共通要素だけにする	aSet.intersection_update(aSet2)
データフレームの最初n行	df.head(n)
データ列と配列についての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
文字列の左側	s[0]
ヒストグラムを描画して、その色を赤に変更する	plt.hist(データ列, color='red')
＜オプション＞グラフの色をライトブルーに設定する	color = 'lightblue'
実部と虚部から複素数を作成する	complex(x, y)
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
表データのカラム名を列から文字列に付け直す	df.rename(columns={column: name})
リストと配列についてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
グラフのサイズを横width縦heightに指定する	plt.figure(figsize=(width, height))
黒い右三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
ファイルの拡張子付きのファイル名を使う	os.path.basename(filepath)
＜オプション＞ピーチパフにグラフの色を変更する	color = 'peachpuff'
データフレームのリスト列のpercentパーセンタイル	df[aList].quantile(percent/100)
ヒストグラムを描画して、色をミディアムシアグリーンに変更する	plt.hist(データ列, color='mediumseagreen')
プラットホームがMacOS	sys.platform.startswith('darwin')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ストリームにxを文字列に変換して書き込む	f.write(str(x))
文字列内に大文字が含まれるかどうか判定する	any(c.isupper() for c in s)
折れ線グラフを描画して、その色をコーンフラワーブルーに変更する	plt.plot(データ列, データ列2, color='cornflowerblue')
黒い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
整数nを半分にする	n //= 2
各列毎にデータフレームをグループ化し、列の最小値を算出する	df.groupby(column)[column2].min()
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
ヒストグラムを描画して、その色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
配列とリストの散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
n進数文字列を整数に変換する	int(s, n)
オプションで、標準エラーを出力にする	file = sys.stderr
実数に実数をかける	x * y
データフレームの中の列をビン数nでビニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフの星マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
nがn2未満もしくはn3以上か調べる	n < n2 or n >= n3
最後から空白で文字列を区切る	s.rsplit()
最後の部分文字列を使って文字列を二分する	s.rpartition(sub)
未初期化の行列	np.empty(要素数, dtype=np.int)
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
ファイルパスを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
ヒストグラムを描画してその色をシルバーに変更する	plt.hist(データ列, color='silver')
折れ線グラフに描画して、マーカーを三角印にする	plt.plot(データ列, データ列2, marker='^')
青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
赤色のポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
nがn2の倍数かどうか	n % n2 == 0
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
空のタプル	()
二つのカラムを並べてボックスチャートにする	plt.boxplot([df[column], df[column2]])
＜オプション＞グラフの色を暗い赤に設定する	color = 'darkred'
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフを描画して、その色をミントクリームに指定する	plt.plot(データ列, データ列2, color='mintcream')
ヒストグラムを描画して、色をやわらかい青に指定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムを描画して、その色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
ヒストグラムを描画して、その色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
データフレームの列が正規表現文字列にマッチする行を選ぶ	df[df[column].str.match(s)]
単位行列	np.eye(行数, 列数)
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
データフレームのインデックスの名前の一覧	df.index
配列とリストの折れ線グラフを描画して、アルファをalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
nプラスn2	n + n2
データフレームの各次元の大きさを調べる	df.shape
データ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
ファイルをバイナリ書き込みモードでオープンして]fとする	f = open(filepath, mode='wb')
ヒストグラムを描画して、その色をカーキに設定する	plt.hist(データ列, color='khaki')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
＜オプション＞グラフの色をデピンクに設定する	color = 'deeppink'
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
オプションで出力先を標準エラーに変更する	file = sys.stderr
データフレームの列が文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
データフレームから最初の列を除く	df[df.columns[1:]]
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
nではない	not n
線グラフの色をアンティークホワイトに指定する	plt.plot(データ列, データ列2, color='antiquewhite')
線グラフを描画して色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
既存のファイルパスを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
散布図に赤い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='r')
＜オプション＞ライトスチールブルーを用いる	color = 'lightsteelblue'
文字列を太字化する	f'\033[1m{value}\033[0m'
＜オプション＞どのカラムも行に設定しない	index_col = None
＜オプション＞パウダーブルーを使う	color = 'powderblue'
＜オプション＞右三角印を使う	marker = '>'
黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
Pandasで文字列を日付データにする	pd.to_datetime(s)
データ列をヒストグラムにする	plt.hist(ds)
CSVファイルTSVファイルをn番目の列をインデックスにして読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフを描画して、その色をダークレッドに指定する	plt.plot(データ列, データ列2, color='darkred')
ファイルをSJISを使って開く]	open(filepath, encoding='shift_jis')
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
リストをランダムにシャッフルする	random.shuffle(aList)
ヒストグラムを描画してその色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
データフレームのcollをタイムスタンプに変換する	pd.to_datetime(df[col])
行列の行列式を求める	np.linalg.det(aArray)
縦棒を描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
色差別ない色の折れ線グラフをプロットしてその線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフを描画して、色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
２つの列によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データ列の中にいくつ日付データがあるかカウントする	ds.isin([value]).sum()
二つの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
＜オプション＞耐火レンガにグラフの色を設定する	color = 'firebrick'
Pythonパスのリストを知る	sys.path
＜オプション＞ライトコーラルに色を設定する	color = 'lightcoral'
アルファベットの小文字列	string.ascii_lowercase
2つのデータフレームを縦方向に合体させる	pd.concat([df, df2])
散布図を重なりを見やすく淡い色を使って描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
表のカラム名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
数列とリストの散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
グレーにヒストグラムの色を変更する	plt.hist(データ列, color='gray')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
＜オプション＞グラフの色をスノーにセットする	color = 'snow'
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
リストとリストの散布図を描き、、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
＜オプション＞コーラルを使う	color = 'coral'
日付時刻データが水曜日	aDatetime.weekday() == 2
散布図にカラーコードの丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームを複数の列によって昇順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategray'
文字列の接頭辞から安全に部分文字列を除く	s.removeprefix(sub)
データ列と配列について黒色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
カウンタからマッピングを引く	aCounter.subtract(aDict)
データフレームを丸めて整数型にする	df.round().astype(int)
＜オプション＞ピンク色を使う	color = 'pink'
＜オプション＞レモンシフォンを使用する	color = 'lemonchiffon'
リストとリストの暗いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
日付データと日付データの時間差を秒で算出する	(aDate - aDate2).total_seconds()
文字列タブ区切りのファイルからCSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
辞書のキー一覧	list(aDict)
nを8進文字列にする	oct(n)[2:]
＜オプション＞グラフの色をブルーバイオレットに変更する	color = 'blueviolet'
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
シーケンスのコンビネーション	itertools.combinations(iterable, n)
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
Pandasで、フォーマットを用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列, データ列2, color='lightblue')
辞書のキーとその値をペアとして取り出す	aDict.items()
2を底とする実数の対数	math.log2(x)
数列と数列について散布図を描画してマーカーを△に設定する	plt.plot(xdata, ydata, marker='^')
＜オプション＞カラムの名前をnamesに設定する	header = names
両端キューに要素をエンキューする	deq.appendleft(element)
＜オプション＞グラフの色をアクアマリンに設定する	color = 'aquamarine'
リストと数列についての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
＜オプション＞フローラルホワイトを使う	color = 'floralwhite'
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
黒い▲マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
折れ線グラフの色をシアンに変更する	plt.plot(データ列, データ列2, color='cyan')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
散布図を左三角マーカーを用いて描画する	plt.plot(xdata, ydata, marker='<')
＜オプション＞色を暗い赤に設定する	color = 'darkred'
ヒストグラムを描画して、その色をコーラルに変更する	plt.hist(データ列, color='coral')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
イテラブルのイミュータブルな集合	frozenset(iterable)
＜オプション＞ピーチパフを使う	color = 'peachpuff'
ひとつでも非数字が文字列中に含まれるか調べる	any(not c.isdigit() for c in s)
データ列を折れ線グラフに描画して、マーカーをバツ印にする	plt.plot(データ列, データ列2, marker='x')
オブジェクトはタプルに含まれないか調べる	element not in aTuple
ベクトルの形状を求める	aArray.shape
データフレームの列を削除する	df.drop(column, axis=1)
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
nがn2以下、もしくは、n3以上	n <= n2 or n >= n3
ヒストグラムでリストを可視化する	plt.hist(aList)
折れ線グラフを描画して、その色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
赤いクロスマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c='r')
折れ線グラフの色をカーキに変更する	plt.plot(データ列, データ列2, color='khaki')
チョコレート色の線グラフを描画する	plt.plot(データ列, データ列2, color='chocolate')
＜オプション＞ライトグレーを使う	color = 'lightgray'
折れ線グラフの色をカラーコードに指定する	plt.plot(xdata, ydata, color=rgb)
変数について数値の積分を求める	sympy.integrate(e, z)
リストとリストの黒い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフのポイントマーカーを緑色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
＜オプション＞グラフの色をモカシンにセットする	color = 'moccasin'
ヒストグラムを描画して、その色を赤に設定する	plt.hist(データ列, color='red')
文字列内にひとつでもアルファベットがあるか調べる	any(c.isalpha() for c in s)
1からNまでの配列	np.arange(1, N+1)
xを浮動小数点数に変換する	float(x)
文字列内にひとつでも数字が含まれる	any(c.isdigit() for c in s)
箱ひげ図を２つ並べて描画する	plt.boxplot([データ列, データ列2])
全要素を初期値で初期化された行列	np.full((行数, 列数), 初期値, dtype=np.int)
カラーコードのバツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
列の種類を調べる	df.info()
文字列の開始位置より後に部分文字列がない	s.find(sub, start) == -1
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
暗い色でリストとイテラブルについての散布図を描く	plt.plot(xdata, ydata, c='dark')
リストとリストの色差別ないグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
＜オプション＞アクアに色を設定する	color = 'aqua'
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
整数nの8進数文字列を使う	oct(n)[2:]
＜オプション＞色をダークグリーンに設定する	color = 'darkgreen'
＜オプション＞論理値型を使用する	dtype = np.int32
赤いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
データ列を100の位で丸める	ds.round(-2)
文字コードに対応する文字を使う	chr(unicode)
データ列とリストについて破線グラフを描画し、、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
ファイルパスのフォルダ名	os.path.dirname(filepath)
タイムスタンプデータをISO8601形式の文字列に変換する	aDatetime.isoformat()
πを使用する	math.pi
イテラブルから集合	set(iterable)
リストとリストについて散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストを引数として展開して表示する	print(*aList)
ファイルパスから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
画面にグラフの用途を設定する	sns.set(context='notebook')
全要素を０で初期化された行列を作る	np.zeros(行数, 列数)
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
オブジェクトが集合型のインスタンス	isinstance(obj, set)
xが一桁の正の整数	0 <= x <= 9
リストとリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
イテラブルから集合を使う	set(iterable)
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
＜オプション＞追加モードを使う	mode = 'a'
点線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dotted')
データフレームをTSV形式のファイルから読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
パステル調のの色を赤くする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
オブジェクトはリストかタプルかどうか確認する	isinstance(obj, (list)
データフレームを表示するとき表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
実数を文字列に変換する	str(x)
折れ線グラフを描画して、色を青に変更する	plt.plot(データ列, データ列2, color='blue')
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
配列と配列についての散布図に赤色の四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
グラフで使用する色テーマをpalleteNameに設定する	sns.set(pallete=palleteName)
線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
折れ線グラフを描画して色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgray')
線グラフの色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
赤い▼マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
nがn2と等しい	n == n2
横棒グラフを描画して、幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
実数の二乗	x ** 2
折れ線グラフの色をブラウンに設定する	plt.plot(データ列, データ列2, color='brown')
＜オプション＞グラフの色をピンクに設定する	color = 'pink'
データフレームの列を百の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
＜オプション＞ディムグレーにグラフの色を設定する	color = 'dimgrey'
データフレームのリスト列の相関行列	df[aList].corr()
データ列が正規分布からどれだけ、歪んでいるか見る	ds.kurt()
データフレームのリストカラムは正規分布からどの程度、尖っているか見る	df[aList].skew()
＜オプション＞読み込み用に設定する	mode = 'r'
データ列の記述統計量	ds.describe()
全要素を０で初期化された整数型の行列	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフを描画して、その色をアクアに指定する	plt.plot(データ列, データ列2, color='aqua')
predicateFuncを適用したときTrueとならない列の部分	itertools.dropwhile(predicateFunc, iterable)
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
nが偶数	n % 2 == 0
データ列が何曜日か確認する	ds.dt.weekday_name
＜オプション＞オレンジレッド色を使用する	color = 'orangered'
数式を因数分解する	sympy.factor(e)
数列をy軸配列をx座標として、大きさnの散布図を描く	plt.scatter(xdata, ydata, s=n)
データフレームの列の未入力値を最小値で置換する	df[col].fillna(df[col].min())
双方向キューのn番目に値を差し込む	deq.insert(n, element)
書き込むCSVファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
折れ線グラフを描画して、その色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
全要素を０で初期化された論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
＜オプション＞ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
データフレームをグループ化し、各列に対し合計を求める	df.groupby(column)[column2].sum()
＜オプション＞イエローグリーン色を使用する	color = 'yellowgreen'
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
折れ線グラフにサイズnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
＜オプション＞色をベージュに設定する	color = 'beige'
文字列をセパレータで区切って文字列リストに変換する	s.split(sub)
＜オプション＞シアン色を使用する	color = 'cyan'
０で全要素を初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
双方向キューをdequeue	deq.popleft()
グラフに凡例を文字列と文字列と入れる	plt.legend([s, s2])
標準入力から1行分読む	sys.stdin.readline()
文字列がタプルに含まれるか調べる	element in aTuple
今日の日付	datetime.date.today()
リストの最後のn要素を除く	aList[:-n]
カウンタを辞書で更新する	aCounter.update(aDict)
Windowsで文字化けしないようにJSONLファイルにデータフレームを書き込む	df.to_csv(filename, encoding='utf_8_sig')
線グラフを描画して、その色をシアンに変更する	plt.plot(データ列, データ列2, color='cyan')
配列とリストとして色差別ないグラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
散布図に黒色の右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>', c='k')
リストとリストについて色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
散布図に赤い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='r')
要素を集合から除く	aSet.remove(element)
リストと数列について散布図を描いて左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
文字列は漢字	('\u4E00' <= ch <= '\u9FD0')
文字列でフォーマットして本日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
リストとリストについて散布図を描画し、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
変数が無限大に近づく場合の数式の極限値を計算する	sympy.limit(e, z, oo)
複数行対応として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
折れ線グラフを描画して、その色をミディアムターコイズに指定する	plt.plot(データ列, データ列2, color='mediumturquoise')
赤い大バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='X', c='r')
数式の積分を求める	sympy.integrate(e)
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
データフレームのカラムは何日か確認する	df[col].dt.day
ファイルからのストリームを使う	open(filepath)
両端キューをポップする	deq.pop()
列を双方向キューにする	collections.deque(iterable)
＜オプション＞濃い青を使う	color = 'darkblue'
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
書式をargsを引数としてフォーマットする	formatText.format(*args)
＜オプション＞フォレストグリーンを使用する	color = 'forestgreen'
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
データ列の曜日	ds.dt.weekday_name
＜オプション＞グラフの色をグレーに設定する	color = 'grey'
＜オプション＞バイナリ書き込み用に設定する	mode = 'wb'
＜オプション＞フォレストグリーンを用いる	color = 'forestgreen'
Pandasで、データフレームのcollのエポック秒からタイムスタンプ型にする	pd.to_datetime(df[col], unit='s', utc=True)
散布図に大バツマーカーを使う	plt.plot(xdata, ydata, marker='X')
タイムスタンプデータが水曜日か確認する	aDatetime.weekday() == 2
グラフで日本語フォントを使えるようにする	sns.set(font='IPAexGothic')
折れ線グラフを描画して色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
各列毎にデータフレームを集約して、列の個数を求める	df.groupby(column)[column2].count()
データ列を柱状図として可視化する	plt.hist(ds)
Pandasの日付型のデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
nとn2の和を計算する	n + n2
明るい色として配列とイテラブルについての散布図を描画する	plt.plot(xdata, ydata, c='bright')
＜オプション＞グラフの色をコーンズシルクに設定する	color = 'cornsilk'
線グラフの色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
実数の逆余弦を求める	math.acos(x)
モジュールとして自分自身をを得る	sys.modules[__name__]
n回文字列が繰り返すイテラブル	itertools.repeat(element, n)
数の３乗を求める	x ** 3
nがn2で割り切れないか調べる	n % n2 != 0
折れ線グラフを描画して色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
リストとリストについて破線グラフを描画して、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフに上三角印を加える	plt.plot(データ列, データ列2, marker='^')
二変数の最も大きい値	max(x, y)
nというシートをファイルから読み込む	pd.read_excel(filename, sheet_name=n)
ヒストグラムを描画して、その色を真紅にする	plt.hist(データ列, color='crimson')
部分文字列が文字列の開始位置より後に含まれない	s.find(sub, start) == -1
散布図を重なりを見やすくパステル調の色のマーカーで描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
実数以上の最小の整数	math.ceil(x)
リストをひとつ飛ばしで取り出す	aList[::2]
数列とリストについて破線グラフを描画して、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
文字列を走査し、パターンにASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
文字列の右側から空白を取り除く	s.rstrip()
キーワード引数でマップに追加する	aDict.update(**kwargs)
ユークリッド距離を計算する	math.dist(point, point2)
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
散布図に黒い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='k')
＜オプション＞ライトブルー色を使用する	color = 'lightblue'
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
赤い星マーカーをリストとイテラブルについての散布図にプロットする	plt.plot(xdata, ydata, marker='*', c='r')
日付データが日曜日か調べる	aDate.weekday() == 6
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
線グラフを描画して、その色を白に変更する	plt.plot(データ列, データ列2, color='white')
組の先頭のn要素を取り除く	aTuple[n:]
今日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフの菱形マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データフレームをJSONLファイルに行を付けずに書き込む	df.to_csv(filename, index=None)
文字列がアスキー文字か調べる	s.isascii()
乱数シードをnで固定する	random.seed(n)
折れ線グラフを描画して、その色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
日付時刻データが何時か知る	aDatetime.hour
折れ線グラフを描画して色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
NaNも加えてデータフレームの列をダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
＜オプション＞トマト色を使う	color = 'tomato'
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
折れ線グラフの▼印を緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
折れ線グラフを描画して、その色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
ゲインズボロにヒストグラムの色を指定する	plt.hist(データ列, color='gainsboro')
折れ線グラフに大きさnの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markersize=n)
＜オプション＞グラフの色を茶色に設定する	color = 'brown'
線グラフの色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
＜オプション＞ダークスラテグレーを使う	color = 'darkslategray'
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
ファイルをバイナリ書き込みモードとして開く]	open(filepath, mode='wb')
組の要素を逆順にする	aTuple[::-1]
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
線グラフを描画して、その色をホワイトスモークに指定する	plt.plot(データ列, データ列2, color='whitesmoke')
線グラフを描画して、その色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
タプルの末尾のn要素を除く	aTuple[:-n]
＜オプション＞イエローグリーン色を使う	color = 'yellowgreen'
散布図に赤いバツマーカーを使用する	plt.plot(xdata, ydata, marker='x', c='r')
データフレームを表示するとき列数を減らす	pd.set_option('display.max_columns', n)
配列と数列を折れ線グラフで描画する	plt.plot(xdata, ydata)
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
マッピングのコピー	dict(aDict)
暗い色のマーカーを散布図に使う	plt.plot(xdata, ydata, c='dark')
数値のn階微分を行う	sympy.diff(e, z, n)
配列を分割数nとしてビン分割する	pd.cut(aArray, n)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
タイムスタンプデータが木曜日か	aDatetime.weekday() == 3
＜オプション＞ライトグリーン色を使う	color = 'lightgreen'
マップの項目数	len(aDict)
Pandasで、文字列のエポック秒からdatetime64型にする	pd.to_datetime(s, unit='s', utc=True)
データ列を折れ線グラフに描画してマーカーを上三角にする	plt.plot(データ列, データ列2, marker='^')
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
＜オプション＞グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
ヒストグラムを描画して、その色をディムグレーにセットする	plt.hist(データ列, color='dimgray')
エクセルファイルファイルからを読み込む	pd.read_excel(filename)
行列をベースにして全要素が1の行列	np.ones_like(aArray)
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
表データを使う	import pandas as pd
＜オプション＞namesをカラムの名前に設定する	names = names
データフレームを列の値によってグループ化し、、それぞれのグループの合計を計算する	df.groupby(column).sum()
部分文字列が文字列の開始位置以降にある	s.find(sub, start) != -1
データフレームから重複を削除する	df.drop_duplicates()
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgray'
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
データフレームの列の欠損値を平均で埋める	df[col].fillna(df[col].mean())
マッピングからキーの値をエラーなく得る	aDict.get(key, None)
＜オプション＞レモンシフォン色を使う	color = 'lemonchiffon'
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフを描画して、その色を赤に指定する	plt.plot(データ列, データ列2, color='red')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
＜オプション＞グラフの色をスレートブルーに設定する	color = 'slateblue'
リストとイテラブルについての散布図に四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s')
折れ線グラフのダイアモンド印を緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
データ列を100の位で四捨五入する	ds.round(-2)
黒い丸マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='o', c='k')
ヒストグラムを描画して、色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
データフレームのカラム名を指定された列の名前一覧に置き換える	df.columns = columns
空の双方向キュー	collections.deque()
昇順に列によってデータフレームをソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
折れ線グラフを描画して、色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
浮動小数点数のn乗の実数剰余	pow(x, n, y)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
アンティークホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='antiquewhite')
複数の列の値によってデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
＜オプション＞フローラルホワイト色を使う	color = 'floralwhite'
リストとリストについて破線グラフを描画して、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
折れ線グラフのバツ印を黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
実数以上の最小の整数を求める	math.ceil(x)
辞書から項目名で指定された項目をポップする	aDict.pop(key)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
データフレームのカラムの中に日付データと文字列があるか調べる	df[col].isin([value, value2])
折れ線グラフに上三角マーカーを加える	plt.plot(データ列, データ列2, marker='^')
＜オプション＞バイオレット色を使う	color = 'violet'
破壊的にデータフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
データ列を使う	import pandas as pd
n2がn以上かつn3以下	n <= n2 and n2 <= n3
文字列は全て数値か確認する	s.isnumeric()
スラッシュで区切って二つの文字列をプリントする	print(value, value2, sep='/')
文字列内に大文字があるか調べる	any(c.isupper() for c in s)
＜オプション＞コーンズシルク色を使う	color = 'cornsilk'
＜オプション＞四角マーカーを使う	marker = 's'
EUCでファイルパスを開く]	open(filepath, encoding='euc_jp')
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
数式を積分する	sympy.integrate(e)
データフレームを列の値でグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
ファイルがあるか調べる	os.path.exists(filepath)
リストと配列について黒い明るいをプロットする	plt.plot(xdata, ydata, linestyle='bright', color='k')
折れ線グラフを描画して、その色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
＜オプション＞ダーク・スラテグレー色を使う	color = 'darkslategrey'
数列とリストについて破線グラフを描画して、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
線グラフを描画して色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
折れ線グラフを描画して、その色をパープルに変更する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフの印を三角にする	plt.plot(データ列, データ列2, marker='^')
色差別ない色としてヒストグラムを描画する	plt.hist(xdata, color='colorblind')
線グラフの色を淡い茶色に指定する	plt.plot(データ列, データ列2, color='tan')
リストを淡い色のヒストグラムとして描画する	plt.hist(xdata, color='muted')
＜オプション＞グラフの色をシアンに設定する	color = 'cyan'
ふたつの関係がスーパーセットかどうか調べる	aSet.issuperset(aSet2)
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgoldenrod')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
文字列を部分文字列で分けた時の後半の文字列	s.partition(sub)[-1]
分子割る分母	fractions.Fraction(分子, 分母)
ガンマ関数	math.gamma(x)
折れ線グラフを描画して、その色をミディアムシアグリーンに指定する	plt.plot(データ列, データ列2, color='mediumseagreen')
行列の値	aArray[行番号, 列番号]
日付時刻データが何曜日か知る	aDatetime.weekday()
startからendの間のヒストグラムを用いてイテラブルを描画する	plt.hist(データ列, range=(start, end))
折れ線グラフに大きさnの左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markersize=n)
変数をアンダーライン付きで出力する	print(f'\033[4m{value}\033[0m')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
変数が無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, oo)
濃いグラフの色を黒色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='k')
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
スタックの末尾に値を付け加える	deq.append(element)
＜オプション＞文字コードをSJISにする	encoding = 'shift_jis'
線グラフを描画してその色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
リストの先頭を取り除く	aList[1:]
＜オプション＞ダークオーキッドにグラフの色を指定する	color = 'darkorchid'
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
両端キュー中の要素の数を数える	deq.count(element)
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
リストをy軸リストを横軸と指定して折れ線グラフをプロットする	plt.plot(xdata, ydata)
nがn2の倍数でないか調べる	n % n2 != 0
データフレームを2つの列でで降順に整列する	df.sort_values(by=['A', 'B'], ascending=False)
散布図に赤色の大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='r')
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
＜オプション＞グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
＜オプション＞グラフの色を青緑に変更する	color = 'teal'
＜オプション＞右三角印を使用する	marker = '>'
＜オプション＞ライトグレーを使用する	color = 'lightgray'
リストとリストの散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
変数について数式の微分を行う	sympy.diff(e, z)
イテラブルから新しいカウンタを新規生成する	collections.Counter(iterable)
折れ線グラフのスタイルを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
折れ線グラフを描画してその色を赤に変更する	plt.plot(データ列, データ列2, color='red')
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列, データ列2, color='lightgrey')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
折れ線グラフを描画して、色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
アルファベットの文字列	string.ascii_letters
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
変数をシアンにする	f'\033[36m{value}\033[0m'
日付データをタプルに変換する	aDate.timetuple()
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
タプルの最初の文字列を探す	aTuple.index(element)
タプルの最後からn番目以前の要素を得る	aTuple[:-n]
nがn2か調べる	n == n2
線グラフを描画して、色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
折れ線グラフにバツマーカーを加える	plt.plot(データ列, データ列2, marker='x')
部分文字列で文字列を分けたときの前半の文字列を求める	s.partition(sub)[0]
折れ線グラフを描画してその色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
赤い右三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
ヒストグラムを描画してその色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
線グラフを描画して、その色をグレーに変更する	plt.plot(データ列, データ列2, color='gray')
折れ線グラフの三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
タプルを展開してプリントする	print(*aTuple)
ヒストグラムのビンの数を設定する	plt.hist(データ列, bins=n)
イテラブルをカウンタにする	collections.Counter(iterable)
折れ線グラフの色をブラウンに変更する	plt.plot(データ列, データ列2, color='brown')
浮動小数点数のn乗	pow(x, n)
ヒストグラムを描画してその色をコーラルに変更する	plt.hist(データ列, color='coral')
データ列の第一四分位数を計算する	ds.quantile(0.25)
組の先頭を捨てる	aTuple[1:]
データフレームの中にある日付データの合計を数える	df.isin([value]).sum()
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフに四角マーカーを使う	plt.plot(データ列, データ列2, marker='s')
イテラブルとデータ列について散布図を描画して三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
折れ線グラフを描画して、その色を白に設定する	plt.plot(データ列, データ列2, color='white')
オブジェクトの属性の値	getattr(obj, プロパティ名)
Pandasで、データ列のエポック秒からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
線グラフの色をリネンにセットする	plt.plot(データ列, データ列2, color='linen')
イテラブルとリストについての散布図にカラーコードの▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
数列とイテラブルの散布図を描いて、色を暗いに指定する	plt.plot(xdata, ydata, c='dark')
＜オプション＞エラーを無視する	errors = 'ignore'
折れ線グラフの色をデピンクにする	plt.plot(データ列, データ列2, color='deeppink')
方程式として数値の変数の解を算出する	sympy.solve(e, z)
行列を2次元1列に変形する	aArray.reshape(-1, 1)
折れ線グラフの下三角印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
日付データが何年か知る	aDate.year
リストとリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
第２引数で指定されたファイルの名前	sys.argv[1]
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
＜オプション＞色をラベンダーブラッシュに設定する	color = 'lavenderblush'
バイナリ対数	math.log2(x)
リストとリストについての散布図を明るい色を使って重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
日付データと日付データの時間差	aDate - aDate2
リストを逆順にする	aList[::-1]
カラム名リストをデータ型でフィルタする	df.select_dtypes(型).columns
改行なしに標準入力から1行読み込む	sys.stdin.readline().rstrip()
折れ線グラフを描画して色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
に水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
データ列とラベル列を指定して、積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
折れ線グラフの色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
暗いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
ヒストグラムを描画して、その色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
文字列の中のケースを無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
空行をプリントする	print()
リストを配列に変換する	np.array(aList)
データ列を丸めて、整数型にする	ds.round().astype(int)
折れ線グラフを描画して、その色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
イテラブルとリストについての散布図にカラーコードの下三角マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c=rgb)
散布図をカラーコードの四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
折れ線グラフの丸マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
黒いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
データフレームを列の値によってグループ分けする	df.groupby(column)
＜オプション＞グラフの色をシスルに設定する	color = 'thistle'
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
文字列の大文字と小文字を交換する	s.swapcase()
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
最初の部分文字列で文字列を分けたときの残りの文字列	s.partition(sub)[-1]
1からnまでの整数列	list(range(1, n+1))
明るいの折れ線を描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
リストと配列についての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
文字列を黒色にする	f'\033[30m{value}\033[0m'
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
＜オプション＞セパレータを使わない	sep = ''
リストとデータ列で色差別ないを描画し、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列, データ列2, color='mediumorchid')
データフレームを二つの列の値によって集約する	df.groupby(['A', 'B'])
nをn2で割った余りを算出する	n % n2
実数を切り下げる	math.floor(x)
データフレームのカラムの曜日名を使う	df[col].dt.weekday_name
破線の色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
ヒストグラムを描画して、その色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
データフレームを大きい順に複数の列によってで並べる	df.sort_values(by=column, ascending=False)
実数の逆双曲線正弦	math.asinh(x)
データフレームを'A'列によってで降順に整列する	df.sort_values(by='A', ascending=False)
折れ線グラフの丸マーカーを緑色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
空の辞書	{}
データ列の中にいくつNaNがあるか数える	ds.isna().sum()
リストの先頭の要素	aList[0]
列を文字列に変換して連結する	''.join(map(str, iterable))
異なる列をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
列の値でデータフレームをまとめた表	df.groupby(column)
折れ線グラフの色を紺碧にする	plt.plot(データ列, データ列2, color='azure')
EUCで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='euc_jp')
変数を赤色で表示する	print(f'\033[31m{value}\033[0m')
セットから任意の要素を取り出す	aSet.pop()
オブジェクトは集合クラスか調べる	isinstance(obj, set)
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
ヒストグラムを描画して色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
単位正方行列	np.identity(N)
グラフをポスター用に指定する	sns.set(context='poster')
列をn個に分割する	pd.cut(ds, n)
データフレームの列名一覧で指定された列を削除する	df.drop(columns, axis=1)
nかけるn2	n * n2
重複を認めてデータフレームからn行をランダムにサンプリングする	df.sample(n, replace=True)
リスト内の要素が少なくともひとつ真かどうかテストする	any(aList)
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
ヒストグラムの色をゴーストホワイトにセットする	plt.hist(データ列, color='ghostwhite')
数列と数列について暗い色の折れ線グラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
値を両端キューのn番目に途中追加する	deq.insert(n, element)
nの二進文字列	bin(n)[2:]
＜オプション＞グラフの色をインディアンレッドに設定する	color = 'indianred'
文字列の大文字と小文字を逆にする	s.swapcase()
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
ヒストグラムを描画して、その色をネイビーに設定する	plt.hist(データ列, color='navy')
文字列が全て数字か調べる	s.isdigit()
列の中にある文字列の合計をカウントする	ds.isin([value]).sum()
タイムスタンプデータの時刻を使う	aDatetime.time()
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
データフレームを表示するとき小数点以下をn桁に指定する	pd.set_option('precision', n)
データフレームのカラムのNaNを最大値で補う	df[col].fillna(df[col].max())
数式を変数について微分する	sympy.diff(e, z)
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
黒い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
空の両端キュー	collections.deque()
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
データフレームのカラムが文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
本日は何曜日か知る	datetime.datetime.today().weekday()
線グラフの色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
リストを淡い色のヒストグラムで描画する	plt.hist(xdata, color='muted')
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
nを切り捨てながらn2分の一にする	n //= n2
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
16進数文字列をバイナリにする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームの指定された2つの列を抽出する	df[[column, column2]]
キーがマッピングに存在しないとき、要素を追加する	aDict.setdefault(key, element)
日付時刻データの曜日を使う	aDatetime.weekday()
配列とデータ列についての散布図にカラーコードの菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
三変数の最大値	max(x, y, z)
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
＜オプション＞改行コードをUNIXに変更する	newline = '\n'
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='goldenrod')
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
イエローグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellowgreen')
改行しなくてリストを出力する	print(value, end='')
配列の行ごとの最小	np.min(aArray, axis=1)
データ列を千の位で丸めて、整数型にする	ds.round(-3).astype(int)
リストから両端キューを作成する	collections.deque(iterable)
明るい色のヒストグラムとしてリストをプロットする	plt.hist(xdata, color='bright')
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
辞書からカウンタを作る	collections.Counter(aDict)
＜オプション＞改行しない	end = ''
＜オプション＞グラフの色をブラックに指定する	color = 'black'
リストにリストを追加して拡張する	aList.extend(aList2)
乱数シードをnで初期化する	random.seed(n)
配列とリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
列とイテラブルのデカルト積を求める	itertools.product(iterable, iterable2)
＜オプション＞モカシンを使う	color = 'moccasin'
標準エラーを使う	sys.stderr
nが2で割り切れないか	n % 2 == 1
データ列の文字列長を列として使う	ds.str.len()
グラフのタイトルをuntitledに指定する	plt.title(untitled)
線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
折れ線グラフを描画して、その色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
要素が全て初期値の配列を作る	np.full(要素数, 初期値, dtype=np.int)
要素がセットのメンバーでないかどうか調べる	element not in aSet
リストとリストについて散布図を描画して、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
ストリーム全体を行分割して読み込む	f.readlines()
折れ線グラフに線幅nの下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
データフレームを２つの列によって破壊的に昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
リストとリストの散布図に赤い四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s', c='r')
データ列はどの程度分散しているか見る	ds.var()
全要素を1で初期化された行列	np.ones(行数, 列数, dtype=np.int)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	s.find(sub, start, end) == -1
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
nとn2の商	n / n2
データフレームのカラムの欠損値を前の行の値で埋める	df[col].fillna(method='ffill')
データ列とリストについての散布図にカラーコードの丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c=rgb)
配列とイテラブルの散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
折れ線グラフを描画して、色をライムにセットする	plt.plot(データ列, データ列2, color='lime')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
カラーバーを横向きにつける	plt.colorbar(orientation='horizontal')
コマンドの第二引数を知る	sys.argv[1]
タプルをリストに変換する	list(aTuple)
データフレームの列がxでない行をフィルタする	df[df[column] == x]
＜オプション＞ダークサーモンにグラフの色を設定する	color = 'darksalmon'
二進文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
Pandasでフォーマットfmtでデータ列をdatetime64型に変換する	pd.to_datetime(ds, format=fmt)
オブジェクトがタプルの要素か調べる	element in aTuple
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
デックに要素をプッシュする	deq.append(element)
線グラフを描画して色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフを描画して、色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
ヒストグラムを描画してその色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
暗い色の折れ線を描画してその線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
配列とリストについて淡い色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
SJISでデータフレームをJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
リストのn番目以降の部分を取り出す	aList[n:]
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
実行結果をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
データフレームを形式を使ってJSONLファイルに書き込む	df.to_excel(filename)
＜オプション＞ライトサーモンに色を設定する	color = 'lightsalmon'
折れ線グラフのポイント印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
二つの文字列は等しくないか確認する	s != s2
配列を等量でビン数nで分割する	pd.qcut(aArray, n)
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
リストとデータ列について散布図を描いてマーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
クラスのサブクラス	issubclass(サブクラス, クラス)
文字列が全てアスキー文字	s.isascii()
xでデータ列の欠損値を埋める	ds.fillna(x)
折れ線グラフを描画して、色をミディアムスレートブルーに変更する	plt.plot(データ列, データ列2, color='mediumslateblue')
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
リストとリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
ヒストグラムを描画して、その色をスノーに指定する	plt.hist(データ列, color='snow')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
＜オプション＞線種を破線に設定する	linestyle = 'dashed'
横棒の幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
データフレームのカラムは何曜日か確認する	df[col].dt.weekday_name
文字列はタイトル大文字小文字	s.istitle()
＜オプション＞ブランチドアーモンドにグラフの色をする	color = 'blanchedalmond'
データフレームを列でグループ化する	df.groupby(column)
パステル調の色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
タプルをnから番号付けする	enumerate(aTuple, start=n)
＜オプション＞グラフの色を耐火レンガに指定する	color = 'firebrick'
＜オプション＞シルバーを用いる	color = 'silver'
ブラック色の線グラフを描画する	plt.plot(データ列, データ列2, color='black')
赤いクロスマーカーをリストとイテラブルについての散布図にプロットする	plt.plot(xdata, ydata, marker='x', c='r')
ファイルパスを書き込み用に文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
データフレームを表示するとき、列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
＜オプション＞下三角印を用いる	marker = 'v'
下線付きで実行結果を表示する	print(f'\033[4m{value}\033[0m')
折れ線グラフを描画して、色をダーク・スラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategrey')
標準入力から1文字だけ読む	sys.stdin.read(1)
データフレームを列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
折れ線グラフを描画して、その色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
折れ線グラフを描画して、色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
実数を実数で割った余り	x % y
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
重なりを見やすく明るい色でリストと配列の散布図を描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
組の先頭	aTuple[0]
暗い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
配列の列ごとの合計	np.sum(aArray, axis=0)
ふたつの集合の交差を求める	aSet.intersection(aSet2)
赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='red')
散布図に赤い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='r')
現在のモジュール	sys.modules[__name__]
全ての句読点文字	string.punctuation
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
折れ線グラフの四角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
サイコロ	random.randint(1, 6)
両端キューの最後にイテラブルの各要素を順に入れる	deq.extend(iterable)
ヒストグラムを描画して、その色を黄色に設定する	plt.hist(データ列, color='yellow')
配列とリストについての散布図に赤いポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c='r')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
＜オプション＞グラフの色を茶色に変更する	color = 'brown'
インデックスによってデータフレームをソートする	df.sort_index()
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
xが1、もしくは2か調べる	x == 1 or x == 2
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの列の分散を求める	df[col].var()
折れ線グラフの色をゴールドに変更する	plt.plot(データ列, データ列2, color='gold')
散布図にカラーコードの三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
棒を描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
グラフの描画で色差別ないカラーパレットを使う	sns.set(pallete='colorblind')
折れ線グラフの色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
線グラフを描画して、その色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
文字列の終了位置より前に部分文字列が含まれない	s.find(sub, 0, end) == -1
データ列の第一四分位数	ds.quantile(0.25)
変数をスワップする	x, y = y, x
色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
数式を変数についてn階微分する	sympy.diff(e, z, n)
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
パステル調のを使ってリストについてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
部分文字列が文字列の開始位置と終了位置の間に存在するか確認する	s.find(sub, start, end) != -1
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
列自身を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
ふたつの集合のインターセクション	aSet.intersection(aSet2)
配列と配列について散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
ヒストグラムを描画して、その色をグレーに指定する	plt.hist(データ列, color='grey')
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
要素一つのりストを作る	[element]
二つのデータフレームを結合する	pd.merge(df, df2)
モジュールを検索するパスにを追加する	sys.path.append(dir)
＜オプション＞色をモカシンに設定する	color = 'moccasin'
線グラフの色をサドルブラウンに変更する	plt.plot(データ列, データ列2, color='saddlebrown')
カラーコードの▼マーカーをリストとデータ列についての散布図に描く	plt.plot(xdata, ydata, marker='v', c=rgb)
データフレームのリスト列の欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
nが一桁の整数か調べる	0 <= n <= 9
スカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='skyblue')
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
nが一桁の数かどうか確認する	0 <= n <= 9
パステル調のの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
イテラブルから計数器を生成する	collections.Counter(iterable)
データフレームの列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
四角マーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='s')
文字列を出力ストリームに書き込む	f.write(s)
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
行列の行ごとの最大値	np.max(aArray, axis=1)
＜オプション＞バイナリ書き込みモードに設定する	mode = 'wb'
ヒストグラムを描画して、色をカーキに変更する	plt.hist(データ列, color='khaki')
リストとリストの濃いグラフを描いて、色を青色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフにサイズnの△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
タプルのエントリ数	len(aDict)
ヒストグラムを描画して、色をアイボリーに指定する	plt.hist(データ列, color='ivory')
ヒストグラムの色を黄色くする	plt.hist(データ列, color='y')
ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームのリスト列のNaNをxに設定する	df[aList].fillna(x)
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
タイムスタンプデータからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
n個の数値イテラブル	range(n)
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
イテラブルと数列の散布図を描画して、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
リストと数列の散布図を描画し、、右三角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='>', c=rgb)
Pandasでデータ列をPandasの日付型に変換する	pd.to_datetime(ds)
双方向キューから最初の要素を取り除く	deq.remove(element)
にy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
折れ線グラフの菱形印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
データ列の中に文字列があるか調べる	ds.isin([value])
データフレームを各列毎に分類して、列の分散を算出する	df.groupby(column)[column2].var()
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
nが無限に続く数列を得る	itertools.repeat(n)
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
数値を白色にする	f'\033[37m{value}\033[0m'
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
nxn2の２次元リスト	[[0] * n for _ in range(n2)]
＜オプション＞ダークカーキ色を使う	color = 'darkkhaki'
データフレームのn行目をインプレイスで削除する	df.drop(n, axis=0, inplace=True)
折れ線グラフを描画して、その色をロイヤルブルーにする	plt.plot(データ列, データ列2, color='royalblue')
＜オプション＞マーカーをバツに変更する	marker = 'x'
折れ線グラフの丸マーカーを青くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
ValueMapで一度にデータフレームのカラムの値を置換する	df[col].replace(ValueMap)
赤い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
ファイルからストリームをオープンして]fileとする	file = open(filepath)
折れ線グラフを描画して色をフォレストグリーンに変更する	plt.plot(データ列, データ列2, color='forestgreen')
折れ線グラフに描画して、印を四角印にする	plt.plot(データ列, データ列2, marker='s')
マップの値の一覧	aDict.values()
文字列を黄色にする	f'\033[33m{value}\033[0m'
データフレームの中のNaNを落とす	df.dropna()
＜オプション＞ダークグレー色を使う	color = 'darkgrey'
データ列を折れ線グラフに描画して、マーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
オーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orchid')
＜オプション＞ダークオーキッド色を使用する	color = 'darkorchid'
データフレームのそれぞれのグループ毎の平均値を計算する	df.groupby(column).mean()
リストと配列についての散布図に星マーカーを描く	plt.plot(xdata, ydata, marker='*')
辞書の浅いコピーを生成する	aDict.copy()
行列の演算をする	import numpy as np
リストとデータ列についての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
配列と配列の散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフに線幅nの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
折れ線グラフのポイントマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
レベッカパープルにヒストグラムの色を指定する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムを描画して、その色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
＜オプション＞コーンズシルクを使う	color = 'cornsilk'
n個にデータフレームの中の列をビン分割する	pd.cut(df[col], n)
折れ線グラフを描画して、色をマルーンに指定する	plt.plot(データ列, データ列2, color='maroon')
整数nがタプルのどれかか調べる	n in aTuple
折れ線グラフを描画して、その色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
折れ線グラフに大きさnの▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
パステル調のの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
＜オプション＞アクア色を使う	color = 'aqua'
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
カラーコードの右三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='>', c=rgb)
日付時刻データの時刻	aDatetime.time()
実数の逆正接	math.atan(x)
折れ線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
TSVからCSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフの色を貝殻に変更する	plt.plot(データ列, データ列2, color='seashell')
データフレームのリストカラムを十の位で丸める	df[aList].round(-1)
折れ線グラフを描画して、その色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
nがn2の倍数でない	n % n2 != 0
＜オプション＞文字列の示す文字コードを使用する	encoding = s
データフレームを100の位で四捨五入して、整数型にする	df.round(-2).astype(int)
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
折れ線グラフを描画して色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
真	True
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
ヒストグラムを描画して、その色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
折れ線グラフの大バツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列, データ列2, color='firebrick')
平均と標準偏差から乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
ファイルに文字列を書く	f.write(s)
イテラブルとリストについての散布図に黒い大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X', c='k')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
ミスティローズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mistyrose')
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列, データ列2, marker='>')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
＜オプション＞namesをカラム名に変更する	names = names
ヒストグラムを描画してその色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
リストをnから順番付けする	enumerate(aList, start=n)
２つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
ヒストグラムを描画してその色を赤に設定する	plt.hist(データ列, color='red')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
データフレームのリスト列を丸めて、整数型にする	df[aList].round().astype(int)
データフレームからn行をランダムに抽出する	df.sample(n)
データ列のユニークな値の個数	ds.nunique()
リストの最後からn番目以前の要素を得る	aList[:-n]
データフレームを列でまとめたグループ	df.groupby(column)
黄緑にヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
データフレームの列の文字列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
折れ線グラフを描画して、その色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
データフレームの標準偏差を求める	df.std()
線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
実数が整数か確認する	x.is_integer()
マッピングの項目名の値を参照する	aDict[key]
データ列とリストについて散布図を描いて、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームの要約統計量を求める	df.describe()
データ列の月	ds.dt.month
＜オプション＞色をペールグリーンに設定する	color = 'palegreen'
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
データ列とリストについての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
リストとリストについて青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストが空か確認する	len(aList) == 0
逆正弦	math.asin(x)
見やすいグラフを使う準備をする	import seaborn as sns
データ列の中にいくつNaNがあるかカウントする	ds.isna().sum()
データフレームから型リストで指定されたデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
線グラフを描画して、その色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフのバツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
散布図に赤色の星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
ヒストグラムを描画してその色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
両端キューの最大長	deq.maxlen
線グラフの色をローングリーンにセットする	plt.plot(データ列, データ列2, color='lawngreen')
データ列とリストの黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストと配列について黒い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
異なる列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
折れ線グラフを描画してその色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategray')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
デピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='deeppink')
＜オプション＞グラフの色をデピンクに変更する	color = 'deeppink'
ティール色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
線グラフを描画して、色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
文字列がリストの要素か調べる	element in aList
データフレームのリストカラムの値が未入力値か調べる	df[aList].isna()
データフレームのリスト列の標本標準偏差を求める	df[aList].std()
文字列を最後の部分文字列で分けたときの先頭の文字列	s.rpartition(sub)[0]
ファイルパスを追加できるようにSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='chartreuse')
＜オプション＞グラフの色をダークオレンジに設定する	color = 'darkorange'
折れ線グラフの三角印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
カウンタの文字列を増やす	aCounter[element] += 1
＜オプション＞コロンをセパレータで用いる	sep = ':'
nからn2を引く	n - n2
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
文字列の両端から余分な空白を除去する	s.strip()
ユーザから入力される	input()
組の要素を並べる	sorted(aTuple)
FIXME	np.linalg.eig(aArray)
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
散布図に赤いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='r')
データフレームの指定された列を抽出する	df[column]
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
ヒストグラムを描画して、その色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
データフレームのリストカラムの中にと文字列がいくつ含まれるかカウントする	df[aList].isin([value, value2]).sum()
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
赤い大バツ印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
ヒストグラムを描画して、その色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
データフレームのリストカラムの中のNaNの合計をカウントする	df[aList].isna().sum()
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
列を累加した列	itertools.accumulate(iterable)
床を算出する	math.floor(x)
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
線グラフの色をブルーバイオレットに指定する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
データフレームのpercent分位数を求める	df.quantile(percent/100)
実数のtan	math.tan(x)
＜オプション＞貝殻色を使う	color = 'seashell'
棒を描く	plt.bar(ラベル列, データ列)
黒い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフを描画して、色をカーキに変更する	plt.plot(データ列, データ列2, color='khaki')
イテラブルとリストの散布図を色差別ない色として重なりを見やすくプロットする	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
タプルと組を接続する	aTuple + aTuple2
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
文字列を別の文字列で置き換える	s.replace(sub, newsub)
表から重複を残さず落とす	df.drop_duplicates(keep=False)
八進数の文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ヒストグラムを描画して、色を貝殻に設定する	plt.hist(データ列, color='seashell')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
リスト内の要素は少なくとも一つ真	any(aList)
ヒストグラムの色をコーンズシルクにする	plt.hist(データ列, color='cornsilk')
ヒストグラムを描画して、その色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
サイコロと同じ乱数	random.randint(1, 6)
折れ線グラフに黄色い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
スピアマン相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='spearman')
リストとリストについて散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
凡例を最適な位置に入れる	plt.legend(loc='best')
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
リストを黒色でプリントする	print(f'\033[30m{value}\033[0m')
ヒストグラムの線のスタイルを破線に変更する	plt.hist(データ列, linestyle='dashed')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
カウンタをリセットする	aCounter.clear()
配列とリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
データフレームを複数の列でまとめたグループ	df.groupby(columns)
オブジェクトがリストクラスか調べる	isinstance(obj, list)
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
ファイルパスのセパレータ記号を使用する	os.sep
＜オプション＞セパレータをスラッシュにする	sep = '/'
＜オプション＞最初のカラムをインデックスに指定する	index_col = 0
リストを分割する	pd.cut(aList, aList)
イテラブルとデータ列について濃い色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
＜オプション＞ライムに色を設定する	color = 'lime'
文字列を部分文字列で分割したときの前半の文字列	s.partition(sub)[0]
オブジェクトの参照カウントを確認する	sys.getrefcount(obj)
部分文字列が文字列の開始位置からと終了位置までの間にないかどうか調べる	s.find(sub, start, end) == -1
明るいの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
文字列の終了位置より前に部分文字列が含まれるかどうか確認する	s.find(sub, 0, end) != -1
＜オプション＞ライム色を使う	color = 'lime'
グラフの中のy座標にuntitledという軸ラベルをつける	plt.ylabel(untitled)
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
データフレームの列を型にする	df[col] = df[col].astype(ty)
高頻度な方からカウンタを列挙する	aCounter.most_common()
リストの末尾を取り除く	aList[:-1]
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
スクリプトファイルの絶対パス	os.path.abspath(__file__)
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
部分文字列か調べる	sub in s
ヒストグラムを描画して、その色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
辞書を浅くコピーする	dict(aDict)
範囲を指定して整数乱数を発生させる	random.randint(最小値, 最大値)
データフレームの列がx以下の行を取り出す	df[df[column] <= x]
折れ線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
折れ線グラフの印を丸印にする	plt.plot(データ列, データ列2, marker='o')
データフレームのカラムの秒	df[col].dt.second
ハローワールドと表示する	print('Hello World')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
＜オプション＞ミッドナイトブルーにグラフの色を設定する	color = 'midnightblue'
グラフの描画で淡い色を使用する	sns.set(pallete='muted')
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='royalblue')
本日が何日か知る	datetime.datetime.today().day
表を各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
データフレームの数値を小数点以下n桁で丸める	df.round(n)
データフレームの中のカラムを四分位数ごとにビン分割する	pd.qcut(df[col], 4)
リストと数列の散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
＜オプション＞下三角マーカーを使う	marker = 'v'
スチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='steelblue')
オブジェクトは整数クラスか調べる	isinstance(obj, int)
配列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
現在の秒を使う	datetime.date.today().second
赤色の丸マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
＜オプション＞グラフの色をコーラルに設定する	color = 'coral'
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームの行がnの行を抽出する	df.loc[n]
濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
色テーマを全般的に暗くする	sns.set(pallete='dark')
データフレームを'A'列をキーにして並べる	df.sort_values(by='A')
列の各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
平均と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
ヒストグラムを描画して、その色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
データフレームのリスト列の欠損値をxで埋める	df[aList].fillna(x)
最小値でデータ列の未入力値を埋める	ds.fillna(ds.min())
データ列の値が欠損値か調べる	ds.isna()
ヒストグラムを描画して、その色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
赤色の三角マーカーを配列とデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='r')
イテラブルと配列の青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームを表示するときヘッダー行を右寄せにセットする	pd.set_option('colheader_justify', 'right')
データフレームの列の一覧	df.info()
空白	' '
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
nがn2以下かどうか調べる	n <= n2
データフレームのカラムの値が欠損値	df[col].isna()
色差別ないをリストと配列で描画し、、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ファイルをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列, データ列2, marker='D')
要素はマッピングの値に含まれていないかどうか調べる	element not in aDict.values()
実数以下の最大の整数を計算する	math.floor(x)
パステル調のパレットをグラフの描画で使う	sns.set(pallete='pastel')
折れ線グラフを描画して、その色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
ヒストグラムを描画して、その色をカーキに変更する	plt.hist(データ列, color='khaki')
実行時に標準出力がパイプ	not sys.stdout.isatty()
データ列の空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
青色のパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
明るい色の折れ線グラフをプロットし、、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='bright')
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
表示できる最大行数をnに設定する	pd.set_option('display.max_rows', n)
データフレームの中にある文字列と日付データの合計を求める	df.isin([value, value2]).sum()
データフレームから型リストで指定したデータ型の列を取り出す	df.select_dtypes(include=typeList)
実数に実数を掛ける	x * y
散布図にカラーコードの▼マーカーを使う	plt.plot(xdata, ydata, marker='v', c=rgb)
ヒストグラムを二つ並べてプロットする	plt.hist([データ列, データ列2], color=['b', 'r'])
イテラブルとリストの折れ線を描画し、、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
リストとリストの散布図に黒色の上三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
＜オプション＞ライトシアンにグラフの色を設定する	color = 'lightcyan'
暗い色で散布図を描画する	plt.plot(xdata, ydata, c='dark')
散布図をバツマーカーで描画する	plt.plot(xdata, ydata, marker='x')
データ列を1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
＜オプション＞ダークターコイズ色を使用する	color = 'darkturquoise'
3変数の最大値	max(x, y, z)
データフレームのリスト列のNaNを中央値に設定する	df[aList].fillna(df[aList].median())
破壊的にデータフレームの列を落とす	df.drop(column, axis=1, inplace=True)
カウンタ間で和集合演算する	aCounter | aCounter2
三自然数の最小公倍数	math.lcm(n, n2, n3)
データフレームの中に日付データと文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
＜オプション＞ライトスカイブルー色を使う	color = 'lightskyblue'
リストとリストについての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
＜オプション＞ホットピンク色を使う	color = 'hotpink'
折れ線グラフを描画して、その色をライムに変更する	plt.plot(データ列, データ列2, color='lime')
nをn2で割った結果の切り上げを計算する	(n + n2 - 1) // n2
データフレームのインデックスの一覧	df.index
スレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='slateblue')
文字列内にひとつでも小文字が含まれるかどうか	any(c.islower() for c in s)
nとn2が同じ値か調べる	n == n2
リストとリストについての散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
データフレームを列名リストで小さい順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
集合をリストに変換する	list(aSet)
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightgreen'
nが無限に続くリスト	itertools.repeat(n)
配列の形状	aArray.shape
＜オプション＞右三角マーカーを加える	marker = '>'
折れ線グラフを描画して、その色をダークオリーブグリーンに変更する	plt.plot(データ列, データ列2, color='darkolivegreen')
線グラフを描画してその色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
＜オプション＞プラム色を使う	color = 'plum'
折れ線グラフの色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
散布図に赤い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='r')
文字列を右トリムする	s.rstrip()
明るい色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='bright')
リストと数列についての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフを描画して、その色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgrey')
データフレームの各グループごとの平均値	df.groupby(column).mean()
線グラフの色をネイビーに変更する	plt.plot(データ列, データ列2, color='navy')
ファイルをバイナリモードで開く]	open(filepath, mode='rb')
文字列の先頭から空白を取り除く	s.lstrip(' ')
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
データフレームの列の欠損値を最小値に指定する	df[col].fillna(df[col].min())
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
カウンタ間でユニオン	aCounter | aCounter2
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
黄色い四角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
整数nを十六進文字列に変換する	hex(n)[2:]
＜オプション＞グレーにグラフの色を変更する	color = 'gray'
折れ線グラフを描画してその色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
ヒストグラムを描画して色をシアンに変更する	plt.hist(データ列, color='cyan')
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
配列とリストについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
＜オプション＞アイボリー色を使用する	color = 'ivory'
折れ線グラフを描画して、その色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
ヒストグラムを描画してその色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
＜オプション＞欠損値は無視する	dropna = True
真上位集合	aSet > aSet2
リストをn回結合する	aList * n
データフレームの列と列を落とす	df.drop([column, column2], axis=1)
データフレームのカラムを1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
まとめてデータ列をValueMapで置き換える	ds.replace(ValueMap)
＜オプション＞グラフの色を黄色に設定する	color = 'yellow'
線グラフを描画して、その色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
文字列を新しい文字列によって全部置き換える	s.replace(sub, newsub)
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
辞書を浅くコピーする	aDict.copy()
文字列からformatのパターンを用いて日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列を最初の部分文字列で二つに区切って、前半の文字列を使う	s.partition(sub)[0]
nが奇数かどうか確認する	n % 2 == 1
横棒グラフを積み上げにする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
折れ線グラフの右三角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
カラーパレットを濃くする	sns.set(pallete='deep')
リストとリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
ヒストグラムを描画して、色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
折れ線グラフの色を青に設定する	plt.plot(データ列, データ列2, color='blue')
オブジェクトのフィールドを取り除く	delattr(obj, プロパティ名)
ファイルパスからの入力ストリームを使う	open(filepath)
二つの文字列を順に出力する	print(value, value2)
配列の列ごとの合計値	np.sum(aArray, axis=0)
折れ線グラフを描画して色をダークシアグリーンに変更する	plt.plot(データ列, データ列2, color='darkseagreen')
データフレームから列を三つ選択する	df[[column, column2, column3]]
文字列の右端から空白を取り除く	s.rstrip(' ')
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
ライトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightblue')
リストを濃い色の柱状図としてプロットする	plt.hist(xdata, color='deep')
線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategray'
ファイルをバイナリモードを使ってオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフの色を真紅にセットする	plt.plot(データ列, データ列2, color='crimson')
ポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.')
折れ線グラフに線幅nの▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
破壊的に'A'列によって降順にデータフレームを整列する	df.sort_values(by='A', ascending=False, inplace=True)
二つの集合の和集合	aSet.union(aSet2)
＜オプション＞ラベンダー色を使う	color = 'lavender'
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
＜オプション＞グラフの色を貝殻に設定する	color = 'seashell'
行列の各要素の積	np.multiply(aArray, aArray2)
折れ線グラフに黄色い下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
日付データが何月か知る	aDate.month
折れ線グラフの大バツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
実数の逆双曲線正接	math.atanh(x)
n2がn以上、かつ、n3以下か確認する	n <= n2 and n2 <= n3
nがn2で割り切れないか判定する	n % n2 != 0
自然数個からk個取り出したときの並べ方の総数	math.perm(n, k)
ひとつでも小文字が文字列内にあるか調べる	any(c.islower() for c in s)
実数の天井	math.ceil(x)
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
＜オプション＞アクアマリン色を用いる	color = 'aquamarine'
数式の部分分数化を行う	sympy.apart(e)
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
データ列とデータ列についての散布図に黒色の右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
データフレームのstart行目からend行目まで抽出する	df[start:end]
両端キューの先頭に要素を追加する	deq.appendleft(element)
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
データフレームから列を1つ選択する	df[[column]]
折れ線グラフの色をダークオレンジにする	plt.plot(データ列, データ列2, color='darkorange')
実行結果をプリントする	print(value)
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
散布図を重なりを見やすく明るい色のマーカーとして描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
黒い左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='k')
プロットの凡例の場所を指定する	plt.legend(loc=(x, y))
ファイルを追加用にオープンして]、fとする	f = open(filepath, mode='a')
＜オプション＞グラフの色を淡いピンク色に設定する	color = 'lightpink'
空のカウンタを作成する	collections.Counter()
線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
データフレームの列と列の相関行列スピアマン相関係数として	df[[column, column2]].corr(method='spearman')
ヒストグラムを描画して、その色をパープルに設定する	plt.hist(データ列, color='purple')
分割数nでデータフレームの中のカラムをビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ベクトルのユニークな要素	np.unique(aArray)
文字列が全て英字か確認する	s.isalpha()
データフレームから指定された４列を抽出する	df[[column, column2, column3, column4]]
データ列の曜日は何日目か見る	ds.dt.dayofweek
折れ線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
二つのデータフレームを列をキーにしてジョインする	pd.merge(df, df2, on=column)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumspringgreen')
折れ線グラフを描画して、その色をミディアムバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='mediumvioletred')
数値を方程式として解く	sympy.solve(e)
小数点数を実数で割った剰余を求める	math.remainder(x, x2)
＜オプション＞スレートブルーを用いる	color = 'slateblue'
データフレームの値は欠損値	df.isna()
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
線グラフの色を白に設定する	plt.plot(データ列, データ列2, color='white')
折れ線グラフを描画して、その色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
＜オプション＞文字列を改行の代わりに用いる	end = s
重なりを見やすくデータ列とデータ列の散布図を暗い色を用いて描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームの未入力値を最大値に変更する	df.fillna(df.max())
リストをナンバリングする	enumerate(aList)
配列とリストの散布図を描画し、、マーカーを四角に指定する	plt.plot(xdata, ydata, marker='s')
＜オプション＞マーカーを大バツに変更する	marker = 'X'
データ列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
配列とリストについてカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
スタックのn番目を求める	deq[n]
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
＜オプション＞スチールブルー色を使う	color = 'steelblue'
データフレームを列名リストの値によってグループ分けする	df.groupby(columns)
リストとリストの青い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='b')
真部分集合か調べる	aSet < aSet2
データ列と配列で色差別ないグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
青色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
小数点数の正接を求める	math.tan(x)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumturquoise')
大きい順にデータフレームを列によって破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
緑色の右三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
データフレームを列でで降順にソートする	df.sort_values(by=column, ascending=False)
ヒストグラムを描画して、色をライトグリーンに変更する	plt.hist(データ列, color='lightseagreen')
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
＜オプション＞ハニーデューを使う	color = 'honeydew'
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を計算する	df.groupby([column, column2], as_index=False).min()
濃いシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
＜オプション＞インディゴにグラフの色を変更する	color = 'indigo'
ヒストグラムを描画して、その色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
暗いグラフを配列とリストで描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
＜オプション＞ライトサーモン色を使う	color = 'lightsalmon'
ヒストグラムを描画して、その色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
折れ線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
グラフの描画を綺麗にする	import seaborn as sns
ライトサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフに描画して、マーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
にy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
nが正の数か調べる	n > 0
＜オプション＞ライトイエロー色を用いる	color = 'lightyellow'
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
＜オプション＞グラフの色をシスルに変更する	color = 'thistle'
ヒストグラムを描画して色をミッドナイトブルーにセットする	plt.hist(データ列, color='midnightblue')
配列の行ごとの合計値	np.sum(aArray, axis=1)
をモジュールを検索するパスに追加する	sys.path.append(dir)
折れ線グラフのバツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
両端キューの先頭から要素を取り除く	deq.popleft()
パターンをASCII限定として前もってコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームのリストカラムの中に文字列とがいくつあるか数える	df[aList].isin([value, value2]).sum()
線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
タプルをn回、接続する	aTuple * n
データフレームのリストカラムの未入力値をxに設定する	df[aList].fillna(x)
八進文字列を整数に変換する	int(s, 8)
＜オプション＞セパレータを改行にする	sep = '\n'
＜オプション＞カラムの名前を連番にセットする	header = None
＜オプション＞シーグリーンに色を指定する	color = 'seagreen'
散布図に左三角マーカーを使う	plt.plot(xdata, ydata, marker='<')
グラフに鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
文字列リストを連結する	''.join(aStringList)
ファイルをEUCを用いて書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
＜オプション＞グラフの色をモカシンに設定する	color = 'moccasin'
n個の要素があるリスト	[element] * n
ヒストグラムを描画してその色をマルーンに変更する	plt.hist(データ列, color='maroon')
タプルの末尾を使う	aTuple[-1]
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムの色を黒くする	plt.hist(データ列, color='k')
リストとリストの折れ線グラフを描画して、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
配列と同じ大きさの空行列を作る	np.empty_like(aArray)
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
＜オプション＞ライトグリーン色を使用する	color = 'lightgreen'
データフレームのリストカラムの標本標準偏差	df[aList].std()
データ列は何月か確認する	ds.dt.month
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列, データ列2, color='papayawhip')
データフレームのリスト列のNaNをxで補う	df[aList].fillna(x)
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
グリーンイエローにヒストグラムの色を設定する	plt.hist(データ列, color='greenyellow')
データフレームの重複を見る	df.duplicated()
オブジェクトはバイト列クラスのインスタンス	isinstance(obj, bytes)
ふたつの関係が真部分集合	aSet < aSet2
等量でn個にリストをビニングする	pd.qcut(aList, n)
数列をパステル調の色のヒストグラムで描く	plt.hist(xdata, color='pastel')
コマンドの第一引数を知る	sys.argv[1]
データフレームの値を正規表現patternでまとめて置き換える	df.replace(pattern, repl, regex=True)
データフレームの欠損値をモードで補う	df.fillna(df.mode().iloc[0])
SJISを用いて書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
データフレームの記述統計量を算出する	df.describe()
＜オプション＞グラフの色をバリーウッドに設定する	color = 'burlywood'
文字列を文字コードでバイト列に変換する	s.encode(encoding=encoding)
リストのn番目からn2番目までの部分	aList[n:n2]
文字列をバイト配列に変換する	bytearray(s)
データ列を分割数nでビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
＜オプション＞黄色にグラフの色を設定する	color = 'yellow'
データフレームのリストカラムの中にとがいくつあるか数える	df[aList].isin([value, value2]).sum()
実数のタンジェントの逆数を算出する	math.atan(x)
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
リストとリストの折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
折れ線グラフに線幅nのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
ヒストグラムの色をインディゴに指定する	plt.hist(データ列, color='indigo')
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
文字列のケースを入れ替える	s.swapcase()
データフレームのリストカラムの欠損値を中央値に指定する	df[aList].fillna(df[aList].median())
部分文字列が文字列の終了位置より前に含まれる	s.find(sub, 0, end) != -1
ファイルが存在するかどうか調べる	os.path.exists(filepath)
0から始まる無限数列	itertools.count()
ヒストグラムを描画して、その色をオーキッドに設定する	plt.hist(データ列, color='orchid')
配列の最小値を計算する	np.min(aArray)
動作環境の名前を調べる	sys.platform
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
濃いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームのカラムが何曜日か調べる	df[col].dt.weekday_name
＜オプション＞色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
＜オプション＞グラフの色を耐火レンガに設定する	color = 'firebrick'
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
組のn番目の	aTuple[n]
＜オプション＞３2ビット整数型を用いる	dtype = np.int16
リストとリストの折れ線グラフを描画する	plt.plot(xdata, ydata)
データフレームのリスト列の75パーセンタイル	df[aList].quantile(0.75)
ファイルパスから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
anemptystring	''
ヒストグラムを描画して、その色をブラックに指定する	plt.hist(データ列, color='black')
線グラフを描画してその色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
リストとリストの破線グラフを描画して、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
＜オプション＞パウダーブルー色を使う	color = 'powderblue'
xとyの商と余りを同時に求める	divmod(x, y)
データフレームをグループ化し、各列に対し最大値を求める	df.groupby(column)[column2].max()
折れ線グラフを描画してその色をローングリーンに変更する	plt.plot(データ列, データ列2, color='lawngreen')
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
＜オプション＞ディープスカイブルーを使用する	color = 'deepskyblue'
折れ線グラフの菱形マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
＜オプション＞グラフの色をローングリーンに設定する	color = 'lawngreen'
リストとしてデータフレームの指定された列を抽出する	df[column].values.tolist()
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
ヒストグラムの色をグリーンにセットする	plt.hist(データ列, color='green')
データフレームのリストカラムの未入力値を直前の値に設定する	df[aList].fillna(method='ffill')
折れ線グラフの▲印を青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
タプルを逆順にする	aTuple[::-1]
＜オプション＞グラフの色をダークバイオレットに設定する	color = 'darkviolet'
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
日付データが水曜日か	aDate.weekday() == 2
リストを赤色でプリントする	print(f'\033[31m{value}\033[0m')
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
文字列全体がパターンに複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
イテラブルを累加したイテラブルを得る	itertools.accumulate(iterable)
データ列を折れ線グラフに描画して、印を左三角印にする	plt.plot(データ列, データ列2, marker='<')
現在実行中の例外を情報	sys.exc_info()
昇順にデータフレームを複数の列によってソートする	df.sort_values(by=column, ascending=True)
＜オプション＞ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
データフレームの列を破壊的に消す	df.drop(column, axis=1, inplace=True)
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
線グラフを描画してその色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
全印字できる文字	string.printable
モカシンにヒストグラムの色を指定する	plt.hist(データ列, color='moccasin')
折れ線グラフにポイントマーカーを加える	plt.plot(データ列, データ列2, marker='.')
ヒストグラムを描画して、その色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
文字列中に部分文字列が含まれないかどうか調べる	sub not in s
＜オプション＞パウダーブルーにグラフの色を指定する	color = 'powderblue'
綺麗なグラフを描く準備をする	import seaborn as sns
散布図を大バツマーカーを使って描画する	plt.plot(xdata, ydata, marker='X')
ケンドール相関係数で表データの相関行列を求める	df.corr(method='kendall')
データ列の時	ds.dt.hour
折れ線グラフを描画して、その色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
集合から要素を取り除く	aSet.remove(element)
データフレームの未入力値がある箇所に色を付ける	df.style.highlight_null()
数値のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
線グラフの色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
今日が何日か知る	datetime.datetime.today().day
データフレームのインデックスがnの行を取り出す	df.loc[n]
棒グラフの色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
列によってによって破壊的にデータフレームを並べる	df.sort_values(by=column, inplace=True)
バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x')
リストとリストで折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
散布図を黒い四角マーカーとして描画する	plt.plot(xdata, ydata, marker='s', c='k')
データ列とリストでパステル調のグラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
線グラフを描画して、色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
データフレームを'A'列と'B'列を用いて並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ヒストグラムを描画して、その色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
ヒストグラムを描画して、その色をピーチパフに指定する	plt.hist(データ列, color='peachpuff')
折れ線グラフに線幅nのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
散布図を重なりを見やすく明るい色で描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ファイルからn文字、読む	f.read(n)
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
スノー色の線グラフを描画する	plt.plot(データ列, データ列2, color='snow')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
本日をタプルに変換する	datetime.datetime.today().timetuple()
グラフで使用するタイトルをuntitledに設定する	plt.title(untitled)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
＜オプション＞大バツマーカーを使う	marker = 'X'
＜オプション＞ライトグリーン色を使用する	color = 'lightseagreen'
折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linewidth=n)
データフレームの列の値がx以上の行を選ぶ	df[df[column] >= x]
辞書から最後の項目をポップする	aDict.popitem()
全要素を０で初期化されたブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
文字列を区切りで分割して、列挙する	s.split(sep)
＜オプション＞先頭のカラムをインデックスに指定する	index_col = 0
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
イテラブルと配列について散布図を描いて、マーカーの色を濃いにセットする	plt.plot(xdata, ydata, c='deep')
上限nのデックをシーケンスから作る	collections.deque(iterable, maxlen=n)
nとn2の排他的論理和	n ^ n2
行列の値を使う	aArray[行番号, 列番号]
赤色の▲マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
最大値でデータフレームのNaNを埋める	df.fillna(df.max())
折れ線グラフを描画して、その色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフの色をスチールブルーに指定する	plt.plot(データ列, データ列2, color='steelblue')
組をひとつ飛ばしで取り出す	aTuple[::2]
ファイルからファイル名を取り出す	os.path.basename(filepath)
イテラブルをカウンタに変換する	collections.Counter(iterable)
散布図をカラーコードの下三角マーカーとして描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
最適な位置に凡例を入れる	plt.legend(loc='best')
相関を可視化する	plt.scatter(xdata, ydata)
辞書をインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
データフレームを列によって並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
乱数シードを初期化する	random.seed()
データフレームの列で文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
リストとイテラブルの散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
＜オプション＞色をシスルに設定する	color = 'thistle'
列毎にデータフレームをグループ分けして、分散を算出する	df.groupby(column).var()
現在の日付時刻	datetime.datetime.now()
折れ線グラフを描画して色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
浮動小数点数が非数かどうか調べる	math.isnan(x)
データ列とデータ列の散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
文字列の右側からタブを取り除く	s.rstrip('\t')
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
ヒストグラムを描画して、色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
散布図に丸マーカーを使用する	plt.plot(xdata, ydata, marker='o')
２つの文字列は等しいか調べる	s == s2
黒いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
整数nがタプルのいづれかか確認する	n in aTuple
折れ線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
二つのデータフレームを列'A'と列'B'をキーにしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
カラーコードの下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c=rgb)
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
データフレームの列の種類	df.info()
＜オプション＞オレンジにグラフの色をする	color = 'orange'
集合を空にする	aSet.clear()
＜オプション＞サーモン色を使う	color = 'salmon'
明るいでヒストグラムを描画する	plt.hist(xdata, color='bright')
青い三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
ヒストグラムの線のスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
データフレームのグループ毎の合計	df.groupby(column).sum()
ヒストグラムを描画して、その色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
カウンタのキーとカウントを列挙する	aCounter.items()
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
TSVを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
＜オプション＞グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
rangeの無限バージョン	itertools.count(start=n, step=step)
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
折れ線グラフを描画して、色をプラムに変更する	plt.plot(データ列, データ列2, color='plum')
実数の複素数	complex(x)
文字列中にひとつでも非アルファベットがある	any(not c.isalpha() for c in s)
ヒストグラムを描画して、その色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
＜オプション＞グラフの色を黄緑に設定する	color = 'chartreuse'
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
ヒストグラムを描画して、その色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
コマンドライン引数	sys.argv
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
データ列が何月か見る	ds.dt.month
グラフの描画で暗い色を使う	sns.set(pallete='dark')
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
n番目のカラムをインデックスとしてCSVファイルTSVを読む	pd.read_csv(filename, index_col=n)
折れ線グラフのスタイルを破線に設定する	plt.plot(データ列, データ列2, linestyle='dashed')
ゼロ埋めされたブール型のベクトル	np.zeros(要素数, dtype=np.int32)
線グラフを描画してその色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
データフレームのカラムは何時か見る	df[col].dt.hour
実数の小数部	math.modf(x)[0]
＜オプション＞グラフの色をスカイブルーに設定する	color = 'skyblue'
ローングリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lawngreen')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
配列と数列の破線を描画して、その色を濃いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
配列と配列についての散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
折れ線グラフを描画して、その色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
データフレームの中の欠損値がある行を削除する	df.dropna()
表の内の欠損値を削除する	df.dropna()
数列と数列の青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
散布図に黒い大バツマーカーを使用する	plt.plot(xdata, ydata, marker='X', c='k')
＜オプション＞欠損値も含める	dropna = True
イテラブルとリストについて破線グラフを描画してその色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
文字列は全て識別子名か調べる	s.isidentifier()
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
双方向キューの最大長を使う	deq.maxlen
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
赤いポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='r')
日付時刻データをタプルにする	aDatetime.timetuple()
データ列の各データが何回出現するか確認する	ds.value_counts()
ファイルを文字コードtextとしてオープンする]	open(filepath, encoding=text)
＜オプション＞グラフの色を白に設定する	color = 'white'
データフレームのカラムのどの値が頻出か見る	df[col].mode()
オブジェクトがリストかタプル	isinstance(obj, (list)
ヒストグラムを描画して、その色を小麦色に設定する	plt.hist(データ列, color='wheat')
散布図を赤い星マーカーとして描画する	plt.plot(xdata, ydata, marker='*', c='r')
現在処理中の例外を情報	sys.exc_info()
カラムの中の未入力値の合計を数える	ds.isna().sum()
入力ストリームを全て読む	f.read()
両端キューをリストに変換する	list(deq)
両端キューは空か確認する	len(deq) == 0
折れ線グラフを描画して、その色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
文字列中にひとつでも非英数字が含まれる	any(not c.isalnum() for c in s)
リストとリストについて散布図を描画して色をパステル調のに変更する	plt.plot(xdata, ydata, c='pastel')
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
折れ線グラフを描画して色をライトスチールブルーにセットする	plt.plot(データ列, データ列2, color='lightsteelblue')
小数点数が有限	math.isfinite(x)
散布図を重なりを見やすく濃い色のマーカーとして描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
青い色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
日付データが火曜日	aDate.weekday() == 1
今日をタプルにする	datetime.datetime.today().timetuple()
カウンタの項目を増やす	aCounter[element] += 1
配列をリストを境界値として分割する	pd.cut(aArray, aList)
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
双方向キューの最初に列の各データを順に付け加える	deq.extendleft(iterable)
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
リストとリストとして濃いの折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
オプションで、標準出力を使用する	file = sys.stdout
イテラブルとイテラブルについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
ヒストグラムを描画して、色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフを描画して、色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
本日の日数	datetime.datetime.today().day
文字列が文字列リストのいづれか	s in aStringList
濃いの折れ線を描いてその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
列をいつまでも繰り返す	itertools.cycle(iterable)
折れ線グラフを描画してその色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
ヒストグラムを描画して、その色を青に設定する	plt.hist(データ列, color='blue')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
ふたつの集合は集合と交わりを持たないかどうか	aSet.isdisjoint(aSet2)
リストとリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
辞書の値に要素は含まれていない	element not in aDict.values()
本日の年数	datetime.datetime.today().year
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
何か試しに動かしてみる	print('Hello World')
散布図にカラーコードの菱形マーカーを用いる	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞BOM付きを使う	encoding = 'utf_8_sig'
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
nが-9以上、9以下	-9 <= n <= 9
nからn2までの整数リスト	list(range(n, n2+1))
整数nがセットのどれか	n in aSet
線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
データフレームから型の列のみ抽出する	df.select_dtypes(ty)
kを底とする小数点数の対数	math.log(x, k)
丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o')
折れ線グラフを描画して、色をパールゴールデンロッドにセットする	plt.plot(データ列, データ列2, color='palegoldenrod')
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
乱数を正規分布で算出する	random.normalvariate(mu=0.5, sigma=0.2)
二つのデータフレームを列'A'と列'B'をキーにして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
文字列を部分文字列で二つに区切って、後半の文字列を使う	s.partition(sub)[-1]
二つのリストをカンマで区切ってプリントする	print(value, value2, sep=',')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
ヒストグラムを描画して、色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
ヒストグラムを描画して、その色をデピンクに指定する	plt.hist(データ列, color='deeppink')
辞書のキーの一覧	aDict.keys()
複数の列をキーにしてデータフレームをソートする	df.sort_values(by=column)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
折れ線グラフの丸マーカーを黄色くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
折れ線グラフの丸印のサイズをnに変更する	plt.plot(データ列, データ列2, marker='o', markersize=n)
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgrey')
折れ線グラフのマーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
データ列をタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
配列とリストで淡いグラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', color='r')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
文字列をフォーマットfmtで日付データにする	pd.to_datetime(s, format=fmt)
nとn2の値を足してnに代入する	n += n2
折れ線グラフを描画して、その色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
データフレームを表示するとき、折り返しを無効に指定する	pd.set_option('expand_frame_repr', False)
今日が月曜日か確認する	datetime.datetime.today().weekday() == 0
データ列を日付データに変換する	pd.to_datetime(ds)
リストとリストのカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
浮動小数点数の指数を求める	math.frexp(x)[1]
データフレームの欠損値を50パーセンタイルに設定する	df.fillna(df.median())
データフレームを列でグループ化し、それぞれのグループごとの最小値を求める	df.groupby(column).min()
データフレームのリスト列の中央値	df[aList].median()
実数の正接の逆数を求める	math.atan(x)
＜オプション＞左三角印を用いる	marker = '<'
色差別ないの折れ線グラフの色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
折れ線グラフの丸マーカーを黒色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
文字列がタプルに含まれるか	element in aTuple
データフレームの列の欠損値を直前の値に設定する	df[col].fillna(method='ffill')
折れ線グラフを描画して、色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
'A'列によってを用いて破壊的にデータフレームをソートする	df.sort_values(by='A', inplace=True)
折れ線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
時間を使う	import time
線グラフを描画して、その色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
オブジェクトが浮動小数点数型のインスタンス	isinstance(obj, float)
整数nの八進数リテラルを使う	oct(n)
データフレームのカラムの値がx以上の行を抽出する	df[df[column] >= x]
ヒストグラムを描画して、その色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
折れ線グラフにサイズnの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
カウンタのユニークな項目を列挙する	list(aCounter)
配列とリストの散布図を描画し、、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
折れ線グラフの三角印を赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
黄色色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellow')
辞書のコピーを作る	dict(aDict)
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
データフレームの指定した列を配列として抽出する	df[column].values
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
組をナンバリングする	enumerate(aTuple)
データ列とリストについて散布図を描画し、、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
文字列を水色で表示する	print(f'\033[36m{value}\033[0m')
数式を数値にする	float(e)
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列, データ列2, color='chartreuse')
データフレームの中で列と列の重複を確認する	df.duplicated(subset=[column, column2])
再帰が何回までできるか	sys.getrecursionlimit()
自然数LCM	math.lcm(n, n2)
緑色の▽マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
＜オプション＞ラベンダーにグラフの色を設定する	color = 'lavender'
折れ線グラフを描画して、その色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
データフレームを転置する	df.T
リストに文字列を加える	aList.append(element)
＜オプション＞耐火レンガ色を使用する	color = 'firebrick'
配列の最大値を算出する	np.max(aArray)
ゼロ埋めされた三２ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
＜オプション＞エクセルファイルのシートの名前をnamesに指定する	sheet_name = names
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
イテラブルの各要素を双方向キューの最初に追加する	deq.extendleft(iterable)
分子n、分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
黒い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='k')
列ごとにデータフレームを集約し、平均値を算出する	df.groupby(column).mean()
文字列をバイト列に変換する	bytes(s)
濃いグラフの色を赤くする	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフの大バツマーカーを黄色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
散布図に黒いダイアモンドマーカーを使用する	plt.plot(xdata, ydata, marker='D', c='k')
折れ線グラフの透明度をalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
リストとリストの散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
＜オプション＞グラフの色を青に設定する	color = 'blue'
データ列を丸める	ds.round()
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
コマンド引数の一覧	sys.argv[1:]
データフレームの列を落とす	df.drop(column, axis=1)
方程式として数式を解く	sympy.solve(e)
辞書から項目名の値	aDict.get(key)
ヒストグラムを描画して、その色をラベンダーに設定する	plt.hist(データ列, color='lavender')
データフレームのカラムの曜日が何日目か調べる	df[col].dt.dayofweek
現在の日付を見る	datetime.date.today()
ファイルから1バイト、読み込む	f.read(1)
日付データが木曜日か調べる	aDate.weekday() == 3
配列を分割数nを使って分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの中に文字列と日付データがあるか	df.isin([value, value2])
青いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
文字列を改行で分割する	s.splitlines()
＜オプション＞ターコイズに色を変更する	color = 'turquoise'
ヒストグラムを描画して、その色をグリーンに指定する	plt.hist(データ列, color='green')
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
列をカウンタにする	collections.Counter(iterable)
現在の再帰の最大回数	sys.getrecursionlimit()
商と余りを同時に計算する	divmod(x, y)
リストとデータ列で明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
データフレームの中の未入力値の合計を数える	df.isna().sum()
データフレームの列の値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
データフレームの列が文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
折れ線グラフのスタイルを実線に設定する	plt.plot(データ列, データ列2, linestyle='solid')
＜オプション＞グラフの色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
全要素を0で初期化した配列	np.zeros(要素数)
＜オプション＞グラフの色をハニーデューに設定する	color = 'honeydew'
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
マップの値を列挙する	aDict.values()
データフレームのリスト列を10の位で四捨五入して、整数型にする	df[aList].round(-1).astype(int)
折れ線グラフにポイントマーカーを使う	plt.plot(データ列, データ列2, marker='.')
ヒストグラムを描画して色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
データフレームを関数でまとめたグループを使う	df.groupby(関数)
大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
ヒストグラムを描画して、その色を紺に設定する	plt.hist(データ列, color='darkblue')
＜オプション＞ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
文字列中の正規表現を新しい文字列を用いて置換する	re.sub(pattern, newsub, s)
にx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
オプションで、標準エラーを出力先にする	file = sys.stderr
線グラフを描画して、色をスプリンググリーンにする	plt.plot(データ列, データ列2, color='springgreen')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
重複する行をデータフレームからインプレイスで消す	df.drop_duplicates(inplace=True)
線グラフの色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
ヒストグラムの色をオリーブにセットする	plt.hist(データ列, color='olive')
マップのキーに対応した値を得る	aDict.get(key)
リストを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
データフレームの列の値を一度に正規表現patternでreplに置き換える	df[col].replace(pattern, repl, regex=True)
オブジェクトがリストに含まれないか調べる	element not in aList
ヒストグラムを描き、、半透明ににする	plt.hist(データ列, alpha=0.5)
値を太字でプリントする	print(f'\033[1m{value}\033[0m')
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
三2ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int16)
空のカウンタ	collections.Counter()
文字列を置き換える	s.replace(sub, newsub)
ヒストグラムを描画して、その色をシスルに設定する	plt.hist(データ列, color='thistle')
リストをビン数nでビン分割する	pd.cut(aList, n)
折れ線グラフを描画してその色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
本日が日曜日かどうか確認する	datetime.datetime.today().weekday() == 6
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
文字列を空白で区切る	s.split()
列をカウンタに変換する	collections.Counter(iterable)
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
散布図に▽マーカーを使用する	plt.plot(xdata, ydata, marker='v')
折れ線グラフを描画して、その色をブランチドアーモンドに変更する	plt.plot(データ列, データ列2, color='blanchedalmond')
ヒストグラムを描画してその色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
ヒストグラムを描画してその色を小麦色に設定する	plt.hist(データ列, color='wheat')
タイムスタンプデータの月	aDatetime.month
＜オプション＞星マーカーを使う	marker = '*'
折れ線グラフのマーカーを▲印にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフの菱形マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='D', markersize=n)
ファイルを改行除外して一行ずつ読み込む	f.readline()
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
リストとリストについての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
数列とリストについての散布図に赤色の三角マーカーを描く	plt.plot(xdata, ydata, marker='^', c='r')
文字列内に大文字が含まれるか調べる	any(c.isupper() for c in s)
黒い大バツ印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
散布図に濃い色のマーカーを使う	plt.plot(xdata, ydata, c='deep')
オブジェクトがタプルクラス	isinstance(obj, tuple)
文字列中の部分文字列を新しい文字列に置換する	s.replace(sub, newsub)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
startからendの間で柱状グラフを描画する	plt.hist(データ列, range=(start, end))
データ列が何秒か見る	ds.dt.second
双方向キューの末尾に要素を追加する	deq.append(element)
オブジェクトのハッシュ値を算出する	hash(obj)
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
＜オプション＞線種を点線に変更する	linestyle = 'dotted'
実数のn乗して実数による余り	pow(x, n, y)
イテラブルとリストのカラーコードの暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
青い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
＜オプション＞グレー色を用いる	color = 'grey'
折れ線グラフの色をオリーブに変更する	plt.plot(データ列, データ列2, color='olive')
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
グラフの色を暗くする	sns.set(pallete='dark')
二つの数値を文字列で区切って表示する	print(value, value2, sep=s)
データフレームを各列毎にグループ化し、、列の分散を求める	df.groupby(column)[column2].var()
文字列を空白によって区切って、整数のリストにする	map(int, s.split())
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
リストとリストについてカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
Pythonパスのリスト	sys.path
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
文字列は全て印字できるか調べる	s.isprintable()
データフレームをJSONLファイルに保存する	df.to_excel(filename)
データ列のNaNを最小値に設定する	ds.fillna(ds.min())
リストの合計値	sum(aList)
列の一覧	df.info()
グラフの色を暗くする	sns.set(pallete='dark')
暗い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
＜オプション＞ライトスチールブルー色を使う	color = 'lightsteelblue'
データフレームから型リストで指定したデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
＜オプション＞黄緑色を用いる	color = 'chartreuse'
要素がマッピングの値に含まれていないか調べる	element not in aDict.values()
データフレームを各列毎にグループ化して、列の合計を計算する	df.groupby(column)[column2].sum()
データ列の中のNaNの合計を数える	ds.isna().sum()
プラットホーム名	sys.platform
データ列の欠損値を前の行の値に増やす	ds.fillna(method='ffill')
UTF8を用いて追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf-8')
nまでの偶整数列	list(range(2, n, 2))
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
＜オプション＞グラフの色をオールドレースに指定する	color = 'oldlace'
xが一桁の整数か	-9 <= x <= 9
印字可能な文字を全部使う	string.printable
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
データフレームを列としてグループ化して、それぞれのグループ毎の件数を知る	df.groupby(column).size()
線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフをプロットする	plt.plot(xdata, ydata)
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
＜オプション＞線種を点線に設定する	linestyle = 'dotted'
リストとリストについてカラーコードの淡いをプロットする	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ヒストグラムの色をブラウンに指定する	plt.hist(データ列, color='brown')
小数点数の絶対値を求める	math.fabs(x)
散布図に△マーカーを使う	plt.plot(xdata, ydata, marker='^')
二つのオブジェクトが等しい	obj == obj2
散布図にカラーコードの左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c=rgb)
Pandasでエポック秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
＜オプション＞モカシンを使用する	color = 'moccasin'
＜オプション＞符号なし８ビット整数型を使う	dtype = np.uint8
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
タブで区切って２つの文字列を表示する	print(value, value2, sep='\t')
ひとつでも非アルファベットが文字列中にあるかどうか調べる	any(not c.isalpha() for c in s)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
線グラフを描画して、その色をゴールデンロッドにする	plt.plot(データ列, データ列2, color='goldenrod')
＜オプション＞色をライトグレーに指定する	color = 'lightgray'
nにn2をかけた値をnとする	n *= n2
真上位集合か調べる	aSet > aSet2
配列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
リストの値を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームの上位25%を計算する	df.quantile(0.25)
線グラフを描画して色をコーラルに指定する	plt.plot(データ列, データ列2, color='coral')
日付データが土曜日か	aDate.weekday() == 5
文字列を空白で分割し、、数列に変換する	map(int, s.split())
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
要素が集合のメンバーかどうか調べる	element in aSet
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
実数を実数で割った剰余を計算する	math.remainder(x, x2)
データフレームのカラムのNaNを平均値で補う	df[col].fillna(df[col].mean())
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
nがn2で割り切れるかどうか確認する	n % n2 == 0
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
ヒストグラムを描画して、色をライムに設定する	plt.hist(データ列, color='lime')
両端キューの先頭から要素を削除する	deq.popleft()
最小値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].min())
折れ線グラフの下三角印の大きさをnにセットする	plt.plot(データ列, データ列2, marker='v', markersize=n)
配列とデータ列の散布図を描いて、ポイントマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='.', c=rgb)
パステル調のグラフの色を赤色に変更する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
カラムの中に日付データと文字列があるか調べる	ds.isin([value, value2])
Pandasで、Pandasの日付型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
ヒストグラムを描画して、その色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
データフレームを２つの列によって集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
xのハッシュ値	hash(x)
赤い三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='r')
データフレームを２つの列で大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
＜オプション＞グラフの色をロージーブラウンに設定する	color = 'rosybrown'
変数をシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
＜オプション＞グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
データ列とリストの相関を可視化する	plt.scatter(xdata, ydata)
パステル調のグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
＜オプション＞グラフの色をライトグレーに変更する	color = 'lightgrey'
データフレームのカラムの値がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
実部と虚部から複素数	complex(x, y)
＜オプション＞UTF8を使う	encoding = 'utf-8'
暗いパレットをグラフの描画で使用する	sns.set(pallete='dark')
黒い▼マーカーをイテラブルとリストについての散布図に描く	plt.plot(xdata, ydata, marker='v', c='k')
マップの値数を参照する	len(aDict)
折れ線グラフに大きさnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
＜オプション＞色をコーンズシルクにセットする	color = 'cornsilk'
第二四分位数でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].median())
xが一桁の正の数かどうか調べる	0 <= x <= 9
ベクトルを一次元にする	aArray.flatten()
配列の度数分布図を描画する	plt.hist(aArray)
線グラフを描画して、その色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
データフレームのカラムの中に日付データと日付データがいくつ存在するか数える	df[col].isin([value, value2]).sum()
＜オプション＞グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
nが2で割り切れるか調べる	n % 2 == 0
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
＜オプション＞レベッカパープル色を使う	color = 'rebeccapurple'
文字列中にひとつでも非大文字が含まれる	any(not c.isupper() for c in s)
高頻出方からカウンタをリストとして得る	aCounter.most_common()
＜オプション＞ダイアモンドマーカーを描画する	marker = 'D'
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
列のNaNを平均値に設定する	ds.fillna(ds.mean())
データフレームのカラムが何年か調べる	df[col].dt.year
＜オプション＞グラフの色をホワイトに設定する	color = 'white'
表データをグループ化しそれぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
＜オプション＞ダークシアグリーンを使用する	color = 'darkseagreen'
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
集合からエラーなく要素を除く	aSet.discard(element)
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
nがn2よりも大きいか判定する	n > n2
＜オプション＞グラフの色をダークサーモンに設定する	color = 'darksalmon'
列を用いてデータフレームをソートして、新しい行を加える	df.sort_values(columns).reset_index()
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
リストを色差別ない色のヒストグラムで描画する	plt.hist(xdata, color='colorblind')
データフレームを列でによって破壊的に並べる	df.sort_values(by=column, inplace=True)
二次元タプルをflattenする	sum(aTuple)
組を展開してプリントする	print(*aTuple)
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
＜オプション＞ミッドナイトブルー色を使う	color = 'midnightblue'
折れ線グラフに線幅nの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
行列の行	aArray[行番号]
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkolivegreen')
カウンタからゼロカウントを取り除く	+aCounter
＜オプション＞グラフの色をシャルトリューズに設定する	color = 'chartreuse'
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
文字列を部分文字列を用いて二分する	s.partition(sub)
折れ線グラフを描画して色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
文字列が文字列より辞書順で後か調べる	s > s2
データ列をビン分割する	pd.cut(ds, aList)
線グラフを描画して、その色をミディアムスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='mediumspringgreen')
行列の分散を計算する	np.var(aArray)
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
パステル調の色のマーカーを使って散布図を描く	plt.plot(xdata, ydata, c='pastel')
淡いをリストとリストで描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームを列によって集約して、個数を求める	df.groupby(column).count()
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
折れ線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
xが一桁の数か調べる	-9 <= x <= 9
実数の天井を算出する	math.ceil(x)
＜オプション＞グラフの色をホットピンクに変更する	color = 'hotpink'
カウンタ間で∪演算する	aCounter | aCounter2
双方向キューの要素をn個分ローテンションする	deq.rotate(n)
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
全要素を0で初期化された配列	np.zeros(要素数)
折れ線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
リストとイテラブルについての散布図を色差別ない色で重なりを見やすくプロットする	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
黒色の左三角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='<', c='k')
＜オプション＞バイナリモードを使う	mode = 'rb'
折れ線グラフを描画して、色をリネンに指定する	plt.plot(データ列, データ列2, color='linen')
ダークグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkgray')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumslateblue')
整数nの16進数表記	hex(n)
二つのデータフレームを横方向に一つにする	pd.merge(df, df2)
散布図に右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>')
あらかじめ正規表現をコンパイルする	re.compile(pattern)
数値をマゼンタ化する	f'\033[35m{value}\033[0m'
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
列から重複なくn要素選ぶ	random.sample(iterable, k=n)
データ列を丸めて、整数にする	ds.round().astype(int)
日付時刻データの分	aDatetime.minute
リストとリストについて濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
データフレームの欠損値を最小値で補う	df.fillna(df.min())
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
縦棒グラフを描画し、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムを描画してその色をマルーンに設定する	plt.hist(データ列, color='maroon')
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームをJSONLファイルにWindowsで文字化けしないように保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームの列を10の位で丸める	df[col].round(-1)
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
折れ線グラフを描画してその色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
散布図にパステル調の色のマーカーを使う	plt.plot(xdata, ydata, c='pastel')
両端キューを全て取り除く	deq.clear()
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
折れ線グラフに黄色い▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
nをn2で割った余り	n % n2
データ列の欠損値を直後の値で置き換える	ds.fillna(method='bfill')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
＜オプション＞ライムを使用する	color = 'lime'
重複していない行を抽出する	df[not df.duplicated(keep=False)]
折れ線グラフを描画して、その色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategrey')
実数の双曲線余弦	math.cosh(x)
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
配列をビニングする	pd.cut(aArray, aList)
折れ線グラフを描画する	plt.plot(xdata, ydata)
タプルの末尾のn要素を取り除く	aTuple[:-n]
実数のcosの逆数	math.acos(x)
＜オプション＞バリーウッドを用いる	color = 'burlywood'
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフに緑色の丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
赤い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
グラフを論文に設定する	sns.set(context='paper')
折れ線グラフのスタイルを点線に変更する	plt.plot(データ列, データ列2, linestyle='dotted')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの色をホワイトに設定する	plt.plot(データ列, データ列2, color='white')
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
バイナリモードを使ってファイルをオープンする]	open(filepath, mode='rb')
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
表データを各列と列の組み合わせ毎にグループ化し、、個数を求める	df.groupby([column, column2], as_index=False).count()
配列の次元の数	aArray.ndim
８進数字を全部見る	string.octdigits
符号付きで整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
データフレームの列の第三四分位数	df[col].quantile(0.75)
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
＜オプション＞改行なし	end = ''
データフレームの列の中にいくつ欠損値が存在するか数える	df[col].isna().sum()
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='grey')
データフレーム全体を小さい順にインデックスを用いて整列する	df.sort_index(ascending=True)
データフレームの列のNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
列の名前の一覧	df.columns
二つの列でによって大きい順に表データをソートする	df.sort_values(by=['A', 'B'], ascending=False)
部分文字列で部分文字列が始まるかどうか調べる	s.startswith(sub)
データフレームを列を用いてソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
折れ線にラベルを付ける	plt.plot(xdata, ydata, label=untitled)
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
日付時刻データをタプルに変換する	aDatetime.timetuple()
＜オプション＞グラフの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
タプルの先頭を除く	aTuple[1:]
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
＜オプション＞ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
文字コードに対応する文字	chr(unicode)
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
カウンタからゼロカウントを取り出す	+aCounter
辞書をJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
配列の要素ごとの積	np.multiply(aArray, aArray2)
環境がLinuxか調べる	sys.platform.startswith('linux')
配列を2次元1行に変形する	aArray.reshape(1, -1)
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategray')
句読点文字を全部求める	string.punctuation
数列とリストについて相関を可視化する	plt.scatter(xdata, ydata)
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
データ列の秒を使う	ds.dt.second
折れ線グラフを描画して、色をゲインズボロに変更する	plt.plot(データ列, データ列2, color='gainsboro')
n個にリストを分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列の長さを求める	len(s)
折れ線グラフに右三角印を使う	plt.plot(データ列, データ列2, marker='>')
タプルを並べ変える	sorted(aTuple)
文字列の開始位置から終了位置の範囲で部分文字列の出現回数をカウントする	s.count(sub, start, end)
＜オプション＞グラフの色をライトスレイグレーに変更する	color = 'lightslategray'
折れ線グラフを描画して、色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
折れ線グラフに線幅nのダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
ファイルパスをUTF8としてオープンする]	open(filepath, encoding='utf-8')
プロットの中のフォントをfontNameに設定する	sns.set(font=fontName)
データ列を折れ線グラフに描画して、マーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
パステル調のグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ヒストグラムを描画して、その色を紺碧に設定する	plt.hist(データ列, color='azure')
数列とデータ列の散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
カウンタの文字列のカウント	aCounter[element]
8進文字列を整数にする	int(s, 8)
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
リストとイテラブルについて散布図を描いて、三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームのカラムを百の位で四捨五入して整数型にする	df[col].round(-2).astype(int)
リストとリストについての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
横棒グラフを描画して、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
改行で文字列を区切り文字列リストに変換する	s.splitlines()
データフレームの中で、列に重複があるか調べる	df.duplicated(subset=column)
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
ヒストグラムを描画して、その色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
ユニークな値を要素とする配列	np.unique(aArray)
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
濃いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
パステル調の色の折れ線グラフを描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgray'
データフレームをファイルでJSONLファイルに書き込む	df.to_excel(filename)
各列毎にデータフレームを集約して列の最小値を求める	df.groupby(column)[column2].min()
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
有理数の分母	q.denominator
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
グラフの色をパステル調にする	sns.set(pallete='pastel')
リストとリストの散布図を描画して、マーカーの色を色差別ないに指定する	plt.plot(xdata, ydata, c='colorblind')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
＜オプション＞ミディアムオーキッドにグラフの色を変更する	color = 'mediumorchid'
＜オプション＞グラフの色をロージーブラウンに変更する	color = 'rosybrown'
日付データが金曜日か	aDate.weekday() == 4
赤い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='r')
データフレームのリストカラムの未入力値を直後の値で補う	df[aList].fillna(method='bfill')
重なりを見やすく色差別ない色としてリストと配列の散布図を描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
直前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
文字列が文字列より辞書順で後	s > s2
リストとリストの散布図を描画し、、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
ファイルパスからストリームを読み込みfileとする	file = open(filepath)
整数nの二進文字列	bin(n)[2:]
ファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
文字列一つのりストを作る	[element]
グラフの色をパステル調にする	sns.set(pallete='pastel')
リストとデータ列についての散布図に黒い下三角マーカーを描く	plt.plot(xdata, ydata, marker='v', c='k')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
浮動小数点数に変換する	float(x)
セットに値を追加する	aSet.add(element)
折れ線グラフの色をミントクリームにセットする	plt.plot(データ列, データ列2, color='mintcream')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
組の末尾	aTuple[-1]
データ列を中央値で分割する	pd.qcut(ds, 2)
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
＜オプション＞セパレータをコロンにする	sep = ':'
＜オプション＞グラフの色をグリーンイエローに設定する	color = 'greenyellow'
折れ線グラフに緑色の▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
要素が集合のメンバーか調べる	element in aSet
データフレームのカラムの平均値を計算する	df[col].mean()
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフを描画して色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
nの無限数列を求める	itertools.repeat(n)
＜オプション＞色をやわらかい青に設定する	color = 'cornflowerblue'
nの無限なリスト	itertools.repeat(n)
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
赤いポイントマーカーを数列とリストについての散布図に描く	plt.plot(xdata, ydata, marker='.', c='r')
データフレームのカラムが正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
文字列を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
ヒストグラムを描画して、その色をオレンジに設定する	plt.hist(データ列, color='orange')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
テキストファイルファイル名がか確認する	filename.endswith('.txt')
折れ線グラフに緑色のポイント印を描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
配列の列ごとの最小値	np.min(aArray, axis=0)
ふたつの集合は互いに素	aSet.isdisjoint(aSet2)
配列とデータ列について散布図をプロットして、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
クラスが名前付きタプルか	issubclass(C, tuple)
オブジェクトはタプルかどうか調べる	isinstance(obj, tuple)
リストとリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
＜オプション＞色をネイビーに設定する	color = 'navy'
タイムスタンプデータが日付時刻データと同時かどうか調べる	aDatetime == aDatetime2
JSON形式の文字列を読み込む	json.loads(jsonString)
ヒストグラムを描画して、色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフの色をダークシアンにセットする	plt.plot(データ列, データ列2, color='darkcyan')
余弦の逆数	math.acos(x)
＜オプション＞小麦色にグラフの色を設定する	color = 'wheat'
ヒストグラムを描画して、その色をミディアムスプリンググリーンにセットする	plt.hist(データ列, color='mediumspringgreen')
配列をビン分割する	pd.cut(aArray, aList)
数値を簡単化する	sympy.sympify(e)
色差別ない色の折れ線グラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
nがn2よりも小さいか調べる	n < n2
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
データフレームの未入力値を前の行の値に設定する	df.fillna(method='ffill')
列の各データ値の出現回数を算出する	ds.value_counts()
両端キューをデキューする	deq.popleft()
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
実部と虚部から複素数を用意する	complex(x, y)
＜オプション＞文字列をセパレータで使う	sep = s
＜オプション＞色をティールに指定する	color = 'teal'
ファイルのファイルサイズ	os.path.get_size(filepath)
文字列をトリムする	s.strip()
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
ヒストグラムを描画して色をタンに変更する	plt.hist(データ列, color='tan')
データフレームを列によってグループ化して最大値を計算する	df.groupby(column).max()
＜オプション＞グラフの色をダークオリーブグリーンにする	color = 'darkolivegreen'
＜オプション＞グラフの色をアリスブルーに設定する	color = 'aliceblue'
パステル調の色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='pastel')
色差別ない色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
＜オプション＞どの行もヘッダにしない	header = None
整数nがリストのどれかか調べる	n in aList
黒色のパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフを描画して、その色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
グラフの中のフォントをfontNameに設定する	sns.set(font=fontName)
ヒートマップでデータフレームのリストで指定された列の相関行列を描画する	sns.heatmap(df[aList].corr())
日付時刻データは何時か知る	aDatetime.hour
アルファベットの大文字を全部使う	string.ascii_uppercase
＜オプション＞セパレータをカンマにする	sep = ','
数式を数値に変換する	float(e)
ヒストグラムを描画して、その色をシルバーに設定する	plt.hist(データ列, color='silver')
＜オプション＞チョコレート色を使う	color = 'chocolate'
データフレームを列を用いてソートし、、更新する	df.sort_values(by=column, inplace=True)
昇順に破壊的にデータフレームを複数の列によってソートする	df.sort_values(by=column, ascending=True, inplace=True)
配列の型	aArray.dtype()
データフレームを複数の列によってまとめたグループを使う	df.groupby(columns)
シエナ色の線グラフを描画する	plt.plot(データ列, データ列2, color='sienna')
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
ヒストグラムを描画して、色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
文字列リストにシーケンスを変換して、空白で連結する	' '.join(map(str, iterable))
＜オプション＞色をダークグレーに設定する	color = 'darkgray'
データフレームのリストカラムの相関行列	df[aList].corr()
データフレームをまとめて四捨五入する	df.round()
シーケンスでカウンタを更新する	aCounter.update(iterable)
折れ線グラフを描画して、その色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
xを文字列に変換する	str(x)
カウンタ同士でユニオン	aCounter | aCounter2
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
データフレームのカラムの尖度	df[col].skew()
n掛けるn2を求める	n * n2
データ列をn個にビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームからカテゴリデータの列名リストを使う	df.select_dtypes('object').columns
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ファイルからの入力ストリームを使う	open(filepath)
＜オプション＞青を使う	color = 'blue'
ヒートマップでデータフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
自分自身をモジュールとして	sys.modules[__name__]
イテラブルのイミュータブルな集合を求める	frozenset(iterable)
文字列をカンマによって分割して、列挙する	s.split(',')
日付時刻データのタイムゾーン	aDatetime.timetz()
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategray')
データフレームの未入力値をxで埋める	df.fillna(x)
データフレームが正規分布からどの程度、尖っているか確認する	df.skew()
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフを描画して、その色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
グラフの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
リストと配列について濃い色の折れ線を描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='deep')
データフレームの列の各データ値の出現数を計算する	df[col].value_counts()
正接の逆数を求める	math.atan(x)
TSVファイルからCSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
部分文字列が文字列中に存在しないかどうか調べる	sub not in s
タブで区切って二つの実行結果をプリントする	print(value, value2, sep='\t')
ヒストグラムを描画して、色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
データフレームからランダムにn行を取り出す	df.sample(n)
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
ファイルのベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
最初のプログラムを書く	print('Hello World')
＜オプション＞▼マーカーを用いる	marker = 'v'
データフレームの列の一意な値の個数を確認する	df[col].nunique()
タプルの要素を逆順にする	aTuple[::-1]
行列を一次元にする	aArray.flatten()
nが奇数か調べる	n % 2 == 1
黄色いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
ファイルの絶対パス	os.path.abspath(filepath)
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
折れ線グラフを描画してその色をラベンダーに指定する	plt.plot(データ列, データ列2, color='lavender')
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
暗い赤にヒストグラムの色をする	plt.hist(データ列, color='darkred')
＜オプション＞色をビスクに設定する	color = 'bisque'
配列とイテラブルの淡いグラフを描き、、色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
10を底とする小数点数の対数を求める	math.log10(x)
リストとリストについて散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
データ列を折れ線グラフに描画して、マーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
イテラブルと数列について淡いグラフを描画して、色を黒色に変更する	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
ヒストグラムを描画して、その色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
＜オプション＞ミスティローズ色を使用する	color = 'mistyrose'
折れ線グラフの▼印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
'A'列によってデータフレームをまとめたグループ	df.groupby('A')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
データフレームのリストカラムの中に存在する文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
ユーザから入力される	int(input())
データフレームのカラムの分	df[col].dt.minute
まとめてデータフレームの列の値をValueMapで置き換える	df[col].replace(ValueMap)
ヒストグラムの色をディムグレーにセットする	plt.hist(データ列, color='dimgray')
符号なし８ビット整数型の０で全要素を初期化された行列	np.zeros(行数, 列数, dtype=np.uint8)
折れ線グラフを描画して、その色をライトシアンに変更する	plt.plot(データ列, データ列2, color='lightcyan')
＜オプション＞ライトイエローを用いる	color = 'lightyellow'
カラムの値で欠損値を含めてデータフレームをグループ化する	df.groupby(column, dropna=False)
グラフで使うフォントをfontNameに指定する	sns.set(font=fontName)
ファイルパスを文字コードtextで開く]	open(filepath, encoding=text)
ファイルをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
折れ線グラフに大きさnの△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
重複していない行のみを取り出す	df[not df.duplicated(keep=False)]
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
＜オプション＞スラッシュを分割記号で使う	sep = '/'
＜オプション＞グラフの色をインディアンレッドにセットする	color = 'indianred'
カウンタのユニークな文字列を列挙する	list(aCounter)
折れ線グラフを描画して、その色をライムグリーンに変更する	plt.plot(データ列, データ列2, color='limegreen')
＜オプション＞青色を使う	color = 'blue'
＜オプション＞グリーンイエロー色を使う	color = 'greenyellow'
文字列をキャピタライズする	s.capitalize()
正規表現モジュールをインポートする	import re
＜オプション＞複素数型を使う	dtype = bool
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
プログラムの実行を強制的に停止する	sys.exit()
データフレームのカラムの未入力値を最大値に設定する	df[col].fillna(df[col].max())
データフレームのリスト列のNaNを平均に設定する	df[aList].fillna(df[aList].mean())
折れ線グラフの色をホットピンクに指定する	plt.plot(データ列, データ列2, color='hotpink')
データ列のNaNをxで置換する	ds.fillna(x)
線グラフを描画して、その色をライトコーラルに変更する	plt.plot(データ列, データ列2, color='lightcoral')
折れ線グラフを描画して、その色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
欠損値を含めて列の値でデータフレームを分類する	df.groupby(column, dropna=False)
エラーを出力する	sys.stderr
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
データ列とラベル列を指定して横棒グラフを描画する	plt.barh(ラベル列, データ列)
既存のベクトルをベースに全要素が1の配列	np.ones_like(aArray)
新しい文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
＜オプション＞ドジャーブルー色を使用する	color = 'dodgerblue'
二つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
文字列の先頭	s[0]
データフレームを各列とカラムの組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
イテラブルを配列に変換する	np.array(iterable)
折れ線グラフを描画して、その色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
ベクトルをシーケンスから作る	np.array(iterable)
表とデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
シスル色の線グラフを描画する	plt.plot(データ列, データ列2, color='thistle')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
＜オプション＞改行コードをWindowsにする	newline = '\r\n'
オブジェクトが論理値型か確認する	isinstance(obj, bool)
破壊的に2つの列によってによってデータフレームを並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
イテラブルとイテラブルについて散布図を描画してマーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
リストとリストとして暗いグラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
コマンドラインフラグの状態	sys.flags
部分文字列が部分文字列で開始する	s.startswith(sub)
配列とリストについて散布図を描画する	plt.scatter(xdata, ydata)
線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
実数の二進対数	math.log2(x)
eの乗数	math.exp(x)
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフを描画して、その色をグレーに変更する	plt.plot(データ列, データ列2, color='gray')
黒色の▼マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
Pandasで、データ列をタイムスタンプにする	pd.to_datetime(ds)
明るいの色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
ヒストグラムを描画して、色をライトサーモンにセットする	plt.hist(データ列, color='lightsalmon')
文字列をセパレータで分割する	s.split(sub)
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
本日は何月か知る	datetime.datetime.today().month
淡いカラーパレットをグラフの描画で用いる	sns.set(pallete='muted')
イテラブルと配列について散布図をプロットし、、三角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='^', c=rgb)
散布図にバツマーカーを用いる	plt.plot(xdata, ydata, marker='x')
文字列をシアンにする	f'\033[36m{value}\033[0m'
折れ線グラフを描画して、色をグリーンに変更する	plt.plot(データ列, データ列2, color='green')
ヒストグラムを描画して、色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
ヒストグラムを描画して、その色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
暗いグラフの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
オブジェクトのバイトサイズを知る	sys.getsizeof(obj)
折れ線グラフにラベルを付ける	plt.plot(xdata, ydata, label=untitled)
データフレームのリストカラムの平均値を求める	df[aList].mean()
今日をISO8601書式の文字列にする	datetime.datetime.today().isoformat()
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='ghostwhite')
折れ線グラフを描画して、その色をミディアムアクアマリンに変更する	plt.plot(データ列, データ列2, color='mediumaquamarine')
列がどの程度、分散しているか確認する	ds.var()
＜オプション＞グラフの色を赤に設定する	color = 'red'
折れ線グラフの色を青くする	plt.plot(データ列, データ列2, color='b')
折れ線グラフの丸マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
折れ線グラフを描画して、その色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
十六進数字を全部使う	string.hexdigits
折れ線グラフを描画して、その色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
線グラフの色をミントクリームに指定する	plt.plot(データ列, データ列2, color='mintcream')
マッピングの全をクリアする	aDict.clear()
データ列のNaNを最大値に減らす	ds.fillna(ds.max())
上三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
データ列を折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
文字列内にひとつでもアスキー文字が含まれるか判定する	any(c.isascii() for c in s)
'A'列と'B'列によってデータフレームを整列し、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
データフレームを小さい順に列によってソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
二つの列の値でデータフレームをグループ化し、基本統計量を算出する	df.groupby(['A', 'B']).describe()
ヒストグラムを描画して、その色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
リストとリストの散布図に黒い星マーカーを描く	plt.plot(xdata, ydata, marker='*', c='k')
デックの末尾にイテラブルの要素を追加する	deq.extend(iterable)
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
実数を切り下げて整数にする	math.floor(x)
散布図に上三角マーカーを使う	plt.plot(xdata, ydata, marker='^')
折れ線グラフを描画して、その色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
色差別ないグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
配列と同じ大きさの空ベクトルを作る	np.empty_like(aArray)
nが1、もしくは2、もしくは3に等しいかどうかテストする	n == 1 or n == 2 or n == 3
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
実数の絶対値	math.fabs(x)
nからn2までの一つ置きの整数リスト	list(range(n, n2+1, 2))
ファイルをバイナリできるように開く]	open(filepath, mode='rb')
現在の時間数	datetime.date.today().hour
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
折れ線グラフの色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
辞書の項目名に対応した値	aDict.get(key)
ファイルを開き]読み込みストリームを使う	open(filepath, mode='r')
カウンタの項目数	len(aCounter)
列を四分位数ごとに分割する	pd.qcut(ds, 4)
暗い色でヒストグラムを描画する	plt.hist(xdata, color='dark')
正規表現で文字列を区切る	re.split(pattern, s)
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
＜オプション＞ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
データフレームを行で整列する	df.sort_index()
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
カウンタの項目のカウント	aCounter[element]
８ビット整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int8)
リストとリストについて散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
黒色の濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='k')
データフレームのリストで指定された列の各列間の相関係数	df[aList].corr()
線グラフを描画して、色をマゼンタにセットする	plt.plot(データ列, データ列2, color='magenta')
ポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.')
グラフを全般的に色差別なくする	sns.set(pallete='colorblind')
データフレームを各列と列の組み合わせ毎にグループ化し、平均値を求める	df.groupby([column, column2], as_index=False).mean()
折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
淡いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
黒色の大バツマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='X', c='k')
データフレームを列でソートして、上位を取り出す	df.sort_values(columns).head(n)
二つの関係が真部分集合かどうか調べる	aSet < aSet2
キーが辞書に存在するか調べる	key in aDict
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
n個の文字列があるリスト	[element] * n
文字列を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
集合を更新不能に変換する	frozenset(aSet)
濃いの折れ線グラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
文字列が全て空白文字かどうか	s.isspace()
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
配列とリストについての散布図にクロスマーカーを描く	plt.plot(xdata, ydata, marker='x')
二つのカウンタのいずれかに含まれる値	aCounter | aCounter2
＜オプション＞ブランチドアーモンドにグラフの色を設定する	color = 'blanchedalmond'
データフレームからn行、ランダムサンプリングする	df.sample(n)
JSONファイルの入力を辞書に変換する	json.load(fin)
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
Pandasで文字列を日付データに変換する	pd.to_datetime(s)
カラーコードの三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
列をキーにして二つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
＜オプション＞パールバイオレットレッドを用いる	color = 'palevioletred'
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
折れ線グラフを描画して、その色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
辞書をネスト化する	collections.ChainMap(aDict)
数列をx軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
複数の列の値によってデータフレームをまとめたグループ	df.groupby(columns)
データフレームのリスト列の欠損値を後の値で埋める	df[aList].fillna(method='bfill')
二つの集合は互いに素	aSet.isdisjoint(aSet2)
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ヒートマップでデータフレームの相関行列を描画する	sns.heatmap(df.corr())
線グラフを描画してその色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
＜オプション＞色をブルーバイオレットにセットする	color = 'blueviolet'
線グラフを描画して、その色をサンディーブラウンに変更する	plt.plot(データ列, データ列2, color='sandybrown')
配列とリストについて散布図をプロットして、マーカーをクロスに設定する	plt.plot(xdata, ydata, marker='x')
文字列を部分文字列によって二分する	s.partition(sub)
折れ線グラフの色をイエローグリーンに指定する	plt.plot(データ列, データ列2, color='yellowgreen')
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
n個にデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
キーがタプル上で定義済みかどうか調べる	key in aDict
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
二つの集合の交わり	aSet.intersection(aSet2)
リストとデータ列で明るいの折れ線グラフを描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
リストと配列の散布図を描き、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
タプル内の要素は少なくともひとつ真	any(aTuple)
ファイルをオープンして]、読み込みストリームを求める	open(filepath, mode='r')
破線にヒストグラムの線のスタイルを変更する	plt.hist(データ列, linestyle='dashed')
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
最大長nの両端キューを生成する	collections.deque(maxlen=n)
データフレームを列の値ごとにグループ分けして、列挙する	[(name, group) for name, group in df.groupby(column)]
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='mediumspringgreen')
グラフをスライド用に設定する	sns.set(context='talk')
辞書のキー一覧を得る	list(aDict)
今日を文字列を用いてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
＜オプション＞三角マーカーを描画する	marker = '^'
配列をn個にビン分割する	pd.cut(aArray, n)
日付時刻データが何日か知る	aDatetime.day
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
散布図を大バツマーカーで描画する	plt.plot(xdata, ydata, marker='X')
色差別ない色を用いて散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
リストを境界値としてデータフレームの中の列をビニングする	pd.cut(df[col], aList)
度数分布図を描画し合計を1にする	plt.hist(データ列, density=True)
＜オプション＞グラフの色をクリムゾンに設定する	color = 'crimson'
ファイルからnバイト、読み込む	f.read(n)
折れ線グラフを描画してその色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
ヒストグラムを半透明にする	plt.hist(データ列, alpha=0.5)
現在の分数	datetime.date.today().minute
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
＜オプション＞ポイントマーカーを使う	marker = '.'
'A'列と'B'列によって大きい順にデータフレームを破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
現在の再帰の上限	sys.getrecursionlimit()
折れ線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列, データ列2, color='midnightblue')
データフレームのカラムの空文字を欠損値に変換しドロップする	df[col].replace('', np.nan).dropna()
＜オプション＞ライトグリーンにグラフの色を指定する	color = 'lightgreen'
エクセルデータファイルをデータフレームとして読む	pd.read_excel(filename)
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
散布図にカラーコードの星マーカーを使う	plt.plot(xdata, ydata, marker='*', c=rgb)
データフレームから指定された４つの列を取り出す	df[[column, column2, column3, column4]]
線グラフを描画して色をミディアムオーキッドにセットする	plt.plot(データ列, データ列2, color='mediumorchid')
青い淡いを描く	plt.plot(xdata, ydata, linestyle='muted', color='b')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
要素がセットのメンバーでないか調べる	element not in aSet
列の正規分布に対する左右対称性	ds.kurt()
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
配列の最大値	np.max(aArray)
折れ線グラフを描画して、その色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
＜オプション＞バイナリモードを使用する	mode = 'rb'
折れ線グラフを描画して、色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
データフレームを二つの列の値によってグループ分けする	df.groupby(['A', 'B'])
折れ線グラフの色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
プログラムの実行をエラーとして終了する	sys.exit(1)
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
カラーコードのポイントマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='.', c=rgb)
データフレームのリストカラムのどの値が最も現れるか見る	df[aList].mode()
見やすいプロットを描画する準備をする	import seaborn as sns
パステル調の色のヒストグラムでイテラブルを描画する	plt.hist(xdata, color='pastel')
実数から実数を引く	x - y
実数を実数から引く	x - y
データフレームの中の列と列に重複があれば、取り除く	df.drop_duplicates(subset=[column, column2])
折れ線グラフの大バツ印を青色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
数式を数値計算する	float(e)
データ列の中に文字列が含まれるか確認する	ds.isin([value])
＜オプション＞ラベンダーブラッシュ色を使う	color = 'lavenderblush'
ファイルから入力ストリームを使う	open(filepath)
ヒストグラムを描画して、色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
黒い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
黄色い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
リストを明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
リストと配列の散布図に大バツマーカーを描く	plt.plot(xdata, ydata, marker='X')
列名リストをデータ型でフィルタする	df.select_dtypes(型).columns
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
ヒストグラムを描画してその色をシエナに設定する	plt.hist(データ列, color='sienna')
整数nが配列のどれかか調べる	n in aArray
カウンタの項目を列挙する	aCounter.keys()
破壊的に重複をデータフレームからドロップする	df.drop_duplicates(inplace=True)
配列のユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
前の行の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
文字列を変数にして変数にする	z = sympy.Symbol(s)
データフレームをCSV形式でJSONLファイルに書き込む	df.to_csv(filename)
ダークバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkviolet')
文字列を最初の部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
散布図をバツマーカーとしてプロットする	plt.plot(xdata, ydata, marker='x')
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
要素ひとつの組	(element,)
＜オプション＞グラフの種類を破線に変更する	linestyle = 'dashed'
文字列中に非小文字が含まれる	any(not c.islower() for c in s)
ファイルに文字列を書き込む	f.write(s)
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
＜オプション＞フクシアに色を設定する	color = 'fuchsia'
＜オプション＞色を紺碧にセットする	color = 'azure'
Pandasのバージョンを見る	print(pd.__version__)
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
＜オプション＞紺を使う	color = 'darkblue'
＜オプション＞色をフローラルホワイトに設定する	color = 'floralwhite'
配列をn個にビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
リストとリストの折れ線を描画し、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
データ列の未入力値をモードで埋める	ds.fillna(ds.mode().iloc[0])
数列と配列について散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
データフレームの列のメディアン	df[col].median()
配列の列ごとの最大値	np.max(aArray, axis=0)
カラーコードの▲マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
リストとデータ列について破線グラフを描画してその色を暗いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
行列の行ごとの最大値を求める	np.max(aArray, axis=1)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
文字列は全て十進数字か確認する	s.isdecimal()
折れ線グラフの色を赤に変更する	plt.plot(データ列, データ列2, color='red')
ファイルのフォルダ名を使う	os.path.dirname(filepath)
データフレームから型の列を抽出する	df.select_dtypes(ty)
折れ線グラフの色をミディアムシアグリーンにする	plt.plot(データ列, データ列2, color='mediumseagreen')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
Pandasで文字列をフォーマットfmtとしてタイムスタンプにする	pd.to_datetime(s, format=fmt)
ヒストグラムを描画して、その色をゴーストホワイトにセットする	plt.hist(データ列, color='ghostwhite')
＜オプション＞マルーン色を用いる	color = 'maroon'
タイムスタンプを使用する	import time
リストの末尾のn要素を取り除く	aList[:-n]
データ列の中にいくつ欠損値があるかカウントする	ds.isna().sum()
グラフを描画する準備をする	from sympy import N
リストとリストについての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
浮動小数点数の複素数	complex(x)
列の全順列を求める	itertools.permutations(iterable)
＜オプション＞n番目のカラムをインデックスに設定する	index_col = n
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
配列の平均を求める	np.mean(aArray)
データフレームのリストカラムのNaNを中央値で補う	df[aList].fillna(df[aList].median())
Pandasで、フォーマットで文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
イテラブルとリストについてパステル調のを描いて、色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
リストの末尾からn番目以前の部分を得る	aList[:-n]
リストとリストについての散布図を重なりを見やすく暗い色で描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
文字列を区切りで区切って列挙する	s.split(sep)
商と余りを同時に求める	divmod(x, y)
棒グラフを描いてグラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
ヒストグラムを描画して、色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
Pandasで文字列をフォーマットで日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
ラジアンの角度	math.degrees(x)
カウンタ同士でインターセクション	aCounter & aCounter2
文字列を最後の部分文字列で分割した場合の前半の文字列	s.rpartition(sub)[0]
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
x,yの複素数を求める	complex(x, y)
＜オプション＞バリーウッドを使う	color = 'burlywood'
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
データフレームの列のヒストグラムを描画する	plt.hist(df[column])
濃い青色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
線グラフを描画して、その色をチョコレートにする	plt.plot(データ列, データ列2, color='chocolate')
データフレームとしてTSVファイルを読み込む	pd.read_csv(filename, sep='\t')
マッピングの全値を空にする	aDict.clear()
nからn2までの整数列を得る	list(range(n, n2+1))
オブジェクトは浮動小数点数クラスかどうか	isinstance(obj, float)
小数点数の逆双曲線余弦	math.acosh(x)
最大長nの両端キューを作る	collections.deque(maxlen=n)
リストの合計値を求める	sum(aList)
文字列はリストに含まれないかどうか調べる	element not in aList
タプルをミュータブルにする	list(aTuple)
行列の次元の数を算出する	aArray.ndim
ファイルが存在しない	not os.path.exists(filepath)
折れ線グラフを描画してその色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
項目名がタプルにないとき、要素を追加する	aDict.setdefault(key, element)
＜オプション＞ゴールデンロッドを使う	color = 'goldenrod'
nが-9以上、9以下か調べる	-9 <= n <= 9
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
リストとリストのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データ列の値をreplに正規表現patternでまとめて置き換える	ds.replace(pattern, repl, regex=True)
全要素を０で初期化された行列	np.zeros(行数, 列数)
データフレームの列がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
文字コードtextを用いてファイルを開く]	open(filepath, encoding=text)
数値の平方根を求める	sympy.sqrt(e)
最後の部分文字列で文字列を二分し、最初の文字列を使う	s.rpartition(sub)[0]
ひとつでも非アスキー文字が文字列中にあるか調べる	any(not c.isascii() for c in s)
文字列は全て数値かどうか	s.isnumeric()
JSONを使う	import json
文字列リストを連結し、ひとつの文字列にする	''.join(map(str, iterable))
線グラフを描画して、色をスプリンググリーンに指定する	plt.plot(データ列, データ列2, color='springgreen')
イテラブルとリストの折れ線グラフを描画する	plt.plot(xdata, ydata)
キューの長さ	len(deq)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画して色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
折れ線グラフの色をライトサーモンにセットする	plt.plot(データ列, データ列2, color='lightsalmon')
数値をパラメータについて微分する	sympy.diff(e, z)
数列と数列についての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
＜オプション＞色をミディアムブルーに設定する	color = 'mediumblue'
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
ヒストグラムを描画して、その色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
日本語が文字列内に含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
線グラフを描画して、色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
ヒストグラムを描画してその色をシルバーに設定する	plt.hist(データ列, color='silver')
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
ヒストグラムの透明度をxに変更する	plt.hist(データ列, alpha=x)
折れ線グラフにサイズnの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
ヒストグラムを描画して色をモカシンに設定する	plt.hist(データ列, color='moccasin')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
リストとリストについて青色の淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='b')
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
プロットの見栄えをいい感じに設定する	sns.set()
カラムの中の欠損値の合計を数える	ds.isna().sum()
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
改行	'\n'
カラーコードの左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
ファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w')
データフレームのカラムの未入力値を最大値で補う	df[col].fillna(df[col].max())
ヒストグラムを描画してその色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
こんにちは世界とプリントする	print('Hello World')
データ列の分散	ds.var()
小数点数の双曲線余弦を求める	math.cosh(x)
カラーバーを付ける	plt.colorbar()
折れ線グラフの色をミディアムパープルにセットする	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
シーケンスを配列に変換する	np.array(iterable)
データフレームを複数の列を用いて昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
線グラフの色をパープルにする	plt.plot(データ列, データ列2, color='purple')
配列と配列の散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
ヒストグラムを描画して、その色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
色差別ない色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='colorblind')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
淡い色で散布図を描画する	plt.plot(xdata, ydata, c='muted')
＜オプション＞データ型を指定する	dtype = np.int8
二つの文字列を改行せずプリントする	print(value, value2, end='')
データフレームのリストカラムの未入力値を直前の値で埋める	df[aList].fillna(method='ffill')
データフレームのリストカラムの中に文字列があるか	df[aList].isin([value])
リストの重複を取り除く	sorted(set(aList), key=aList.index)
折れ線グラフの▲マーカーを緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategray')
＜オプション＞サンディーブラウン色を用いる	color = 'sandybrown'
＜オプション＞星マーカーを描画する	marker = '*'
データフレームのカラムの欠損値を直後の値で補う	df[col].fillna(method='bfill')
折れ線グラフの左三角印の大きさをnに変更する	plt.plot(データ列, データ列2, marker='<', markersize=n)
データフレームの列名を付け直す	df.rename(columns={column: name})
値を青色でプリントする	print(f'\033[34m{value}\033[0m')
untitledとラベル付けしてリストとリストの折れ線グラフをプロットする	plt.plot(xdata, ydata, label=untitled)
辞書からキーで指定されたエントリを取り出す	aDict.pop(key)
ベクトルの内積	np.dot(aArray, aArray2)
2を底とする実数の対数を計算する	math.log2(x)
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
ヒストグラムを描画して、その色をパールバイオレットレッドにする	plt.hist(データ列, color='palevioletred')
n個分右に双方向キューの要素を回転させる	deq.rotate(n)
集合から別のセットの要素を全て除く	aSet.difference_update(aSet2)
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
配列をビン数nとしてビンニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
＜オプション＞グラフの色をオールドレースに設定する	color = 'oldlace'
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
データフレームの中の列を分割数nでビニングする	pd.cut(df[col], n)
線グラフを描画してその色をハニーデューに指定する	plt.plot(データ列, データ列2, color='honeydew')
リストを濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
データ列と数列を用いて淡いグラフを描画して、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
＜オプション＞グラフの色をディープスカイブルーに変更する	color = 'deepskyblue'
色差別ないの折れ線グラフをプロットしてその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
＜オプション＞パープル色を使う	color = 'purple'
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
暗い色として数列と配列についての散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
リストとイテラブルで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
リストと数列について散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
データフレームのpercent分位数を計算する	df.quantile(percent/100)
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
散布図を黒い四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c='k')
散布図を三角マーカーとして描画する	plt.plot(xdata, ydata, marker='^')
データフレームの列がxのデータを取り出す	df[df[column] == x]
縦方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
データフレームをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
ヒストグラムを描画して、その色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
２つのデータ列を並べて度数分布図にする	plt.hist([データ列, データ列2], color=['b', 'r'])
データ列とイテラブルの散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
nがn2と等しいかどうか確認する	n == n2
データフレームのリスト列を十の位で丸める	df[aList].round(-1)
＜オプション＞色をスノーに設定する	color = 'snow'
オブジェクトから属性を削除する	delattr(obj, プロパティ名)
データフレームの指定された列を配列として抽出する	df[column].values
文字列の先頭から空白やタブを取り除く	s.lstrip()
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
＜オプション＞クリムゾン色を用いる	color = 'crimson'
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
データ列の欠損値をxで置き換える	ds.fillna(x)
＜オプション＞ヘッダを自動的な連番に設定する	header = None
リストとリストについて散布図を描いて四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
＜オプション＞グラフの色をグリーンに指定する	color = 'green'
文字列を積極的に小文字に変換する	s.casefold()
データフレームの未入力値を直前の値に設定する	df.fillna(method='ffill')
縦に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
データフレームの上n行	df.head(n)
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
辞書を階層化マップに変換する	collections.ChainMap(aDict)
ヒストグラムを描画して、その色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
文字列が文字列リストにある	s in aStringList
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
連立方程式の解を求める	sympy.solve([e, e2])
折れ線グラフの左三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
文字列がタプルの要素でないか調べる	element not in aTuple
破線グラフの色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
黒色の三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
整数nのビット長を調べる	n.bit_length()
暗い色のマーカーで重なりを見やすく散布図を描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
既存の配列を元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
マッピングからキーの値かもしくは要素を得る	aDict.get(key, element)
データ列の欠損値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
データ列が何日か見る	ds.dt.day
明るいグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
シーケンスの全順列	itertools.permutations(iterable)
＜オプション＞ライムグリーン色を用いる	color = 'limegreen'
データフレームを列の値毎に集約し、、列挙する	[(name, group) for name, group in df.groupby(column)]
配列の最小	np.min(aArray)
折れ線グラフを描画して色をグレーに変更する	plt.plot(データ列, データ列2, color='gray')
データフレームを各列毎に集約して、列の最大値を求める	df.groupby(column)[column2].max()
折れ線グラフに▼マーカーを使う	plt.plot(データ列, データ列2, marker='v')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
最頻値でデータフレームの欠損値を補う	df.fillna(df.mode().iloc[0])
＜オプション＞オーキッド色を使う	color = 'orchid'
線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
＜オプション＞先頭カラムをインデックスにセットする	index_col = 0
グラフをパステル調にする	sns.set(pallete='pastel')
データフレームのリストカラムの空文字を未入力値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
プラム色の線グラフを描画する	plt.plot(データ列, データ列2, color='plum')
折れ線グラフを描画して、色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
改行で区切って二つの変数をプリントする	print(value, value2, sep='\n')
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
折れ線グラフを描画して、その色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
データフレームを各列毎にグループ化し、、文字列というグループの大きさを求める	df.groupby(column).size()[s]
列を等量でn個にビンニングする	pd.qcut(ds, n)
線グラフの色をダークゴールデンロッドにする	plt.plot(データ列, データ列2, color='darkgoldenrod')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
文字列を緑色化する	f'\033[32m{value}\033[0m'
ヒストグラムを描画してその色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
＜オプション＞線幅をnに設定する	linewidth = n
整数nの8進表現	oct(n)
ヒストグラムを描画してその色をサーモンに設定する	plt.hist(データ列, color='salmon')
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
＜オプション＞降順にする	ascending = False
リストと配列の破線を描画して色を暗いにする	plt.plot(xdata, ydata, linestyle='dash', color='dark')
データ列とラベルを指定して、棒グラフをプロットする	plt.bar(ラベル列, データ列)
行列の行ごとの標準偏差	np.std(aArray, axis=1)
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
数値を青色にする	f'\033[34m{value}\033[0m'
列を中央値で分割する	pd.qcut(ds, 2)
データフレームのリストカラムの欠損値を後の行の値に設定する	df[aList].fillna(method='bfill')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
範囲を指定して部分文字列を文字列の後ろから探す	s.find(sub, start, end)
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
現在の時刻	datetime.date.today().hour
オブジェクトはバイト列クラス	isinstance(obj, bytes)
ヒストグラムを描画して、色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
列を百の位で丸めて、整数型にする	ds.round(-2).astype(int)
＜オプション＞グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
セットから要素を取り除く	aSet.remove(element)
文字列を紫色で表示する	print(f'\033[35m{value}\033[0m')
オブジェクトのバイトサイズ	sys.getsizeof(obj)
タプルとタプルを接続する	aTuple + aTuple2
配列の列を選択する	aArray[:, 列番号]
柱状グラフをプロットして、区間数をnに設定する	plt.hist(データ列, bins=n)
データフレームの第一四分位数	df.quantile(0.25)
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
n割るn2を切り上げる	(n + n2 - 1) // n2
数式の平方根を求める	sympy.sqrt(e)
グラフの背景色を暗くする	sns.set(style='darkgrid')
表データを列によってグループ化して、個数を求める	df.groupby(column).count()
要素が集合に含まれるか調べる	element in aSet
淡い色のマーカーを散布図に用いる	plt.plot(xdata, ydata, c='muted')
データ列を箱ひげ図にする	plt.boxplot(データ列)
セットをイミュータブルに変換する	frozenset(aSet)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
ヒストグラムを描画して、その色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
キーがマッピングにある	key in aDict
＜オプション＞シスル色を使う	color = 'thistle'
整数の最大公約数	math.gcd(n, n2)
片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
最大値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].max())
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
折れ線グラフを描画してその色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
文字列中にひとつでも非数字が含まれるか	any(not c.isdigit() for c in s)
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
数式を微分する	sympy.diff(e)
辞書にキーが存在しないとき、要素を追加する	aDict.setdefault(key, element)
異なるカラムをキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
＜オプション＞値を置き換える	inplace = True
余弦の逆数を求める	math.acos(x)
＜オプション＞ホワイト色を使う	color = 'white'
折れ線グラフの色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
＜オプション＞色をトマトに設定する	color = 'tomato'
EUCでファイルをオープンする]	open(filepath, encoding='euc_jp')
マッピングの項目名一覧	list(aDict)
アルファベットを全部見る	string.ascii_letters
＜オプション＞文字列の示すエンコーディングを使う	encoding = s
xが1もしくは2	x == 1 or x == 2
折れ線グラフの色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
イテラブルを色差別ない色の柱状グラフとして描く	plt.hist(xdata, color='colorblind')
ファイルから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
データフレームの先頭n行	df.head(n)
グラフの大きさを横width縦heightにする	plt.figure(figsize=(width, height))
リストの全ての要素をクリアにする	aList.clear()
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
＜オプション＞グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
折れ線グラフを描画して、その色をライムグリーンに指定する	plt.plot(データ列, データ列2, color='limegreen')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
両端キューの先頭の要素を使う	deq[0]
ヒストグラムを描画して透明度をxに設定する	plt.hist(データ列, alpha=x)
リストのn番目の	aList[n]
データフレームの中の列と列に重複があれば、ドロップする	df.drop_duplicates(subset=column)
＜オプション＞NaNも無視しない	dropna = True
実数を十の位で丸める	round(x, -1)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
＜オプション＞カーキにグラフの色を設定する	color = 'khaki'
＜オプション＞グラフの色をパープルに設定する	color = 'purple'
カラーコードの丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームのインデックスをリセットする	df.reset_index()
オブジェクトの無限イテラブルを得る	itertools.repeat(element)
＜オプション＞ライトイエロー色を使う	color = 'lightyellow'
異なる列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
辞書にマップのエントリを更新する	aDict.update(aDict2)
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
サインを求める	math.sin(x)
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列リストにリストを変換して、タブによって連結する	'\t'.join(map(str, iterable))
リストの要素を並べ変える	sorted(aList)
文字列は全て十進数字か調べる	s.isdecimal()
sepを区切りとして文字列リストを一つにする	sep.join(aStringList)
リストとリストについて破線を描画して、色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
リストと数列について散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフを描画して、その色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
破線グラフの色を濃いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
文字列はリストの要素か調べる	element in aList
データフレームの中で、列の重複を確認する	df.duplicated(subset=column)
ハニーデューにヒストグラムの色を変更する	plt.hist(データ列, color='honeydew')
ヒストグラムを描画して、その色を茶色に変更する	plt.hist(データ列, color='brown')
カラムの欠損値をxに指定する	ds.fillna(x)
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
タイムスタンプデータと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
全要素を初期値で初期化された配列を作る	np.full(要素数, 初期値, dtype=np.int)
部分文字列が文字列の開始位置からと終了位置の範囲にある	s.find(sub, start, end) != -1
線グラフを描画してその色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
＜オプション＞グラフの色をダークシアンに設定する	color = 'darkcyan'
＜オプション＞グラフの色をシエナに設定する	color = 'sienna'
リストとリストについて破線グラフを描画して、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
マッピングのキー一覧	list(aDict)
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
折れ線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
両端キュー中の要素の位置	deq.index(element)
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
文字列を空白で区切って文字列リストにする	s.split()
データ列の一意な要素	ds.unique()
ファイルがある	os.path.exists(filepath)
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
折れ線グラフの星マーカーを青くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
xが真かどうか調べる	bool(x)
折れ線グラフを描画して、その色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
カラーコードのダイアモンドマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
ヒストグラムを描画して、その色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
データフレームを大きい順に列名リストによって破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
オブジェクトの固有のID	id(obj)
文字列はリストの要素か	element in aList
＜オプション＞グリーンにグラフの色を設定する	color = 'green'
データ列は何時か見る	ds.dt.hour
nから無限にカウントアップする	itertools.count(start=n)
破壊的にデータフレームから重複したデータを消す	df.drop_duplicates(inplace=True)
浮動小数点数を実数で割る	x / y
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
データ列とラベルを指定して、棒グラフを描画する	plt.bar(ラベル列, データ列)
データフレームの列と列の相関行列	df[[column, column2]].corr()
＜オプション＞ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
＜オプション＞読み込まないフッタをnに設定する	skipfooter = n
カラムの中に文字列があるか調べる	ds.isin([value])
線グラフを描画してその色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
整数nの8進数文字列	oct(n)[2:]
データフレームのカラムのどの値が頻出か確認する	df[col].mode()
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
両端キューの末尾から値を取り除く	deq.pop()
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
行列の行列式	np.linalg.det(aArray)
関数の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフの三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
色差別ない色の折れ線を描画し、、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
リストの中の最小値	min(aList)
データフレームを列で集計してカラムの要約統計量を計算する	df.groupby(column).describe()[column2]
＜オプション＞ダークグリーンを用いる	color = 'darkgreen'
タン色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
アルファベットを全部使う	string.ascii_letters
ヒストグラムを描画して、色をビスクに設定する	plt.hist(データ列, color='bisque')
本日の日付時刻	datetime.datetime.today()
折れ線グラフの色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
文字列が文字列より辞書順で前か調べる	s < s2
データフレームの列が文字列で始まらない行を選択する	df[not df[column].str.startswith(s)]
＜オプション＞色をスカイブルーに設定する	color = 'skyblue'
データフレームからn番目の列を消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
＜オプション＞シャルトリューズにグラフの色を指定する	color = 'chartreuse'
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
明るい色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='bright')
1からNまでのベクトルを作る	np.arange(1, N+1)
データフレームの列と列を消す	df.drop([column, column2], axis=1)
折れ線グラフの色をスノーに変更する	plt.plot(データ列, データ列2, color='snow')
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
実数の小数点以下を丸める	round(x)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
実数が無限大か調べる	math.isinf(x)
ヒストグラムを描画して、色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
データフレームのリスト列の相関行列をヒートマップとして描画する	sns.heatmap(df[aList].corr())
＜オプション＞マーカーをダイアモンドに変更する	marker = 'D'
nがセットのどれか	n in aSet
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
ビスク色の線グラフを描画する	plt.plot(データ列, データ列2, color='bisque')
集合が空か調べる	len(aSet) == 0
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
折れ線グラフに緑色の右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
＜オプション＞コーンズシルクにグラフの色を指定する	color = 'cornsilk'
ヒストグラムを描画して、その色をデピンクに設定する	plt.hist(データ列, color='deeppink')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
実数の双曲線正弦の逆数を計算する	math.asinh(x)
折れ線グラフを描画して、その色を白にする	plt.plot(データ列, データ列2, color='white')
まとめてデータ列の値をValueMapで置換する	ds.replace(ValueMap)
リストを淡い色の度数分布図でプロットする	plt.hist(xdata, color='muted')
リストとデータ列の散布図に丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o')
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
二つのカウンタの共通する値を算出する	aCounter & aCounter2
列の組み合わせ	itertools.combinations(iterable, n)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
＜オプション＞ダークバイオレット色を用いる	color = 'darkviolet'
列とシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
データフレームのカラムの値が欠損値か調べる	df[col].isna()
データフレームのリストカラムの中に日付データが含まれる	df[aList].isin([value])
データフレームの標本標準偏差	df.std()
リストを順番付けする	enumerate(aList)
データフレームを複数の列の値によってグループ化し基本統計量を計算する	df.groupby(columns).describe()
折れ線グラフを描画して、色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
＜オプション＞紺碧に色を設定する	color = 'azure'
線グラフの色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategrey')
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
10を底とする対数	math.log10(x)
八進数字を全部使う	string.octdigits
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
配列の和	aArray + aArray2
nが奇数	n % 2 == 1
本日のタイムスタンプを求める	datetime.datetime.today()
＜オプション＞グラフの色をパウダーブルーに設定する	color = 'powderblue'
重なりを見やすく散布図を淡い色のマーカーでプロットする	plt.plot(xdata, ydata, c='muted', alpha=0.5)
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
第二引数で指定したファイル名	sys.argv[1]
データフレームのカラムが正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
リストと数列についての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
＜オプション＞ダイアモンド印を使う	marker = 'D'
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
一方に含まれ他方に含まれない集合を求める	aSet.difference(aSet2)
データフレームの末尾を確認する	df.tail()
日付時刻データの時刻	aDatetime.hour
折れ線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
ふたつの集合の共通部分を求める	aSet.intersection(aSet2)
要素は集合に含まれる	element in aSet
データフレームから指定された列名一覧の列のみ抽出する	df[columns]
パラメータが無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, oo)
データフレームのカラムの未入力値を最小値で埋める	df[col].fillna(df[col].min())
＜オプション＞ゴールド色を使う	color = 'gold'
濃い色を使って散布図を描く	plt.plot(xdata, ydata, c='deep')
オブジェクトは組に含まれないか調べる	element not in aTuple
ヒストグラムを描画してその色をグレーに設定する	plt.hist(データ列, color='grey')
＜オプション＞グラフの色をライトコーラルに設定する	color = 'lightcoral'
データフレームのリストカラムの未入力値を最小値に設定する	df[aList].fillna(df[aList].min())
リストと配列についての散布図に左三角マーカーを描く	plt.plot(xdata, ydata, marker='<')
データフレームのn行目より後ろ抽出する	df[n:]
折れ線グラフの星印の大きさをnに指定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
＜オプション＞真紅色を用いる	color = 'crimson'
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
箱髭図を２つ並べて描く	plt.boxplot([データ列, データ列2])
実数の３乗	x ** 3
＜オプション＞ピーチパフを用いる	color = 'peachpuff'
＜オプション＞グラフの色をスチールブルーに設定する	color = 'steelblue'
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
データフレームのグループごとの最大値	df.groupby(column).max()
線グラフを描画して、その色をラベンダーブラッシュにセットする	plt.plot(データ列, データ列2, color='lavenderblush')
角度のラジアンを計算する	math.radians(degree)
NaN	math.nan
ピアソン相関係数で表データの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
線グラフを描画してその色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
折れ線グラフの菱形マーカーを黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
＜オプション＞ゴーストホワイト色を使う	color = 'ghostwhite'
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
配列とデータ列について散布図を描いて、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
黒い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='k')
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
ヒストグラムを描画して、色をカーキに指定する	plt.hist(データ列, color='khaki')
線グラフを描画して、その色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
実数の常用対数	math.log10(x)
データフレームの欠損値をxに変更する	df.fillna(x)
データ列を10の位で丸めて整数型にする	ds.round(-1).astype(int)
日付時刻データの年数を求める	aDatetime.year
tanの逆数	math.atan(x)
集合をリストにする	list(aSet)
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
折れ線グラフに▽印を使用する	plt.plot(データ列, データ列2, marker='v')
要素は辞書の値として含まれている	element in aDict.values()
変数名をキーとして、辞書	dict(name=element)
JSONLファイルに小数点以下3桁までデータフレームを書き込む	df.to_csv(filename, float_format='%.3f')
＜オプション＞線種を点線にセットする	linestyle = 'dotted'
データフレームを'A'列と'B'列によってによって破壊的に並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
青色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
オプションで、標準エラーに出力する	file = sys.stderr
リストとリストを折れ線グラフに描画する	plt.plot(xdata, ydata)
＜オプション＞サドルブラウンにグラフの色をセットする	color = 'saddlebrown'
線グラフを描画してその色をライトシアンに変更する	plt.plot(データ列, データ列2, color='lightcyan')
配列と配列の散布図を描いて、マーカーを下三角に指定する	plt.plot(xdata, ydata, marker='v')
＜オプション＞ポイントマーカーを描画する	marker = '.'
折れ線グラフの色をレベッカパープルに変更する	plt.plot(データ列, データ列2, color='rebeccapurple')
データフレームを'A'列をキーにして並べ直す	df.sort_values(by='A')
折れ線グラフのマーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
PandasでUNIX時間のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
オブジェクトを文字列に変換する	str(obj)
＜オプション＞ライトスチールブルーに色を設定する	color = 'lightsteelblue'
文字列の出力を改行なしに行う	print(value, end='')
折れ線グラフを描画して、その色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
表データをインポートする	import pandas as pd
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
変数の値をスワップする	x, y = y, x
表データを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
複数の列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
線グラフを描画して、色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
ヒストグラムを描画して、その色をアクアに設定する	plt.hist(データ列, color='aqua')
ヒストグラムをカラーマップで描画する	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
データ列をインポートする	import pandas as pd
折れ線グラフを描画して、その色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
マッピングのキーを列挙する	aDict.keys()
整数nの八進表現	oct(n)
データフレームを'A'列によってグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
二つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームのカラムを1000の位で丸める	df[col].round(-3)
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
オブジェクトは浮動小数点数か	isinstance(obj, float)
文字列の先頭から空白を取り除く	s.lstrip()
線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
グラフにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
文字列を部分文字列で二分する	s.partition(sub)
色差別ない色でヒストグラムを描く	plt.hist(xdata, color='colorblind')
データフレームのどの値が最も現れるか見る	df.mode()
四角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='s')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
＜オプション＞ライトグレー色を使用する	color = 'lightgrey'
文字列の開始位置からと終了位置までの範囲に部分文字列がない	s.find(sub, start, end) == -1
＜オプション＞シャルトリューズ色を使う	color = 'chartreuse'
散布図にカラーコードの大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
文字列の開始位置から終了位置までの範囲で部分文字列の出現を数える	s.count(sub, start, end)
文字列が文字列リストに含まれる	s in aStringList
文字列がリストに含まれるか	element in aList
最大値・最小値で整数乱数を発生させる	random.randint(最小値, 最大値)
スタックをリストに変換する	list(deq)
二つのリストの積集合を計算する	list(set(aList) & set(aList2))
折れ線グラフの色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
グラフをプレゼン用にセットする	sns.set(context='talk')
データフレームのカラムの欠損値を第二四分位数に設定する	df[col].fillna(df[col].median())
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
文字列は識別子名か	s.isidentifier()
ヒストグラムの色を青くする	plt.hist(データ列, color='b')
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
リストのn番目以降の部分を得る	aList[n:]
データ列の欠損値を中央値で補う	ds.fillna(ds.median())
＜オプション＞アイボリー色を使う	color = 'ivory'
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
リストとイテラブルの明るいグラフをプロットしてその色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
プラットホームがMacOSかどうか調べる	sys.platform.startswith('darwin')
データフレームの列は正規分布からどれだけ、歪んでいるか見る	df[col].kurt()
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
折れ線グラフを描画して、色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
ベクトルの形状	aArray.shape
＜オプション＞グラフの色をペールグリーンに変更する	color = 'palegreen'
ヒストグラムを描画してその色を茶色に変更する	plt.hist(データ列, color='brown')
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
データフレームの列の名前の一覧	df.columns
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ベクトルの分散を算出する	np.var(aArray)
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
二つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
オブジェクトがバイト列クラスのインスタンスかどうか判定する	isinstance(obj, bytes)
散布図にダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D')
文字列の文字数	len(s)
データ列は何日か調べる	ds.dt.day
整数nの二進表現	bin(n)
第二引数で指定されたファイルの名前	sys.argv[1]
ファイルを改行を取り除いて一行ずつ読む	f.readline()
リストとリストについて散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
ヒストグラムを描画してその色をグリーンに設定する	plt.hist(データ列, color='green')
ファイルを追加用に開いて]、fとする	f = open(filepath, mode='a')
データ列とデータ列について淡いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
配列のヒストグラムを描画する	plt.hist(aArray)
predicateFuncが真とならないタプルの要素	itertools.dropwhile(predicateFunc, iterable)
文字列が部分文字列で終了するか調べる	s.endswith(sub)
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
n個の整数列	list(range(n))
データ列の中に文字列と日付データがあるか調べる	ds.isin([value, value2])
紺色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
＜オプション＞色をブラックに設定する	color = 'black'
散布図にカラーコードの大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c=rgb)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
データフレームのリスト列を小数点以下n桁で丸める	df[aList].round(n)
折れ線グラフに左三角印を用いる	plt.plot(データ列, データ列2, marker='<')
欠損値も加えてデータフレームの列をダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
オブジェクトの無限イテラブル	itertools.repeat(element)
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
ふたつの関係が上位集合もしくは等しい	aSet > aSet2
折れ線グラフを描画して、その色をダークオレンジに指定する	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフを一点鎖線として描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
ヒートマップを用いてデータフレームの列と列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフの色を文字列に設定する	plt.plot(xdata, ydata, color=s)
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumseagreen')
組中の最初の文字列を探す	aTuple.index(element)
データフレームの列がxの行を抽出する	df[df[column] == x]
nが正の数	n > 0
文字列を変数化して、パラメータにする	z = sympy.Symbol(s)
predicateFuncが真となる列の要素を消す	itertools.dropwhile(predicateFunc, iterable)
データフレームの中にいくつ未入力値が存在するかカウントする	df.isna().sum()
集合のイミュータブル版	frozenset(aSet)
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
＜オプション＞n番目の列をインデックスにセットする	index_col = n
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
整数nを16進表現に変換する	hex(n)
＜オプション＞マルーンに色を設定する	color = 'maroon'
範囲指定してデータフレームの行を抽出する	df[start:end]
暗いの折れ線グラフの色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データ列と配列の折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
文字列の左側が部分文字列か調べる	s.startswith(sub)
リストとイテラブルとして暗いを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
nを十六進表現に変換する	hex(n)
＜オプション＞カデットブルー色を用いる	color = 'cadetblue'
折れ線グラフに黄色い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
行列を転置する	aArray.T
データフレームのカラムとカラムを折れ線で描画する	plt.plot(df[col], df[col2])
リストとデータ列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
線グラフの色をラベンダーに変更する	plt.plot(データ列, データ列2, color='lavender')
ヒストグラムを描画してその色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
文字列の先頭から部分文字列を探す	s.find(sub)
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
＜オプション＞マーカーを丸に変更する	marker = 'o'
データフレームを列の値ごとにグループ化して、それぞれのグループごとの最大値を計算する	df.groupby(column).max()
データフレームの列をヒストグラムを使って可視化する	plt.hist(df[column])
本日が何年か知る	datetime.datetime.today().year
＜オプション＞改行をセパレータで使う	sep = '\n'
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
浮動小数点数を万の位で丸める	round(x, -4)
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
オブジェクトは関数	callable(obj)
折れ線グラフの色を白くする	plt.plot(データ列, データ列2, color='w')
グラフのグリッドを暗くする	sns.set(style='darkgrid')
ロージーブラウンにヒストグラムの色をする	plt.hist(データ列, color='rosybrown')
データフレームの列のpercent分位数	df[col].quantile(percent/100)
データフレームの列の欠損値を直後の値で補う	df[col].fillna(method='bfill')
コマンドの第一引数を確認する	sys.argv[1]
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
文字列を最後の部分文字列で二分し、最初の文字列を使う	s.rpartition(sub)[0]
文字列中に部分文字列が存在しないか確認する	sub not in s
色差別ないグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
配列とリストの散布図を描いて、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
リストを四分位数でビン分割する	pd.qcut(aList, 4)
文字列の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
いつまでもnからカウントダウンする	itertools.count(start=n, step=-1)
ゼロ埋めしたブール型の配列	np.zeros(要素数, dtype=np.int32)
＜オプション＞ダークシアン色を使う	color = 'darkcyan'
ファイルを一行ずつ読む	f.readline()
２つのデータフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
データフレームのリストカラムの平均	df[aList].mean()
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
二つのデータフレームを列'A'と列'B'をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
Pandasで、文字列をタイムスタンプにする	pd.to_datetime(s)
折れ線グラフのバツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
折れ線グラフの四角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
データフレームを関数によって集約する	df.groupby(関数)
前もって複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
線グラフを描画してその色をサーモンに変更する	plt.plot(データ列, データ列2, color='salmon')
カラムを1000の位で四捨五入する	ds.round(-3)
＜オプション＞ゲインズボロ色を使う	color = 'gainsboro'
アクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='aquamarine')
リストとリストについての散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
データ列の欠損値をxで埋める	ds.fillna(x)
イテラブルを文字列リストに変換してカンマで連結する	','.join(map(str, iterable))
データフレームのカラムの未入力値をxで補う	df[col].fillna(x)
＜オプション＞ダークカーキ色を用いる	color = 'darkkhaki'
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
＜オプション＞大バツマーカーを描画する	marker = 'X'
2つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
黄緑にヒストグラムの色を変更する	plt.hist(データ列, color='chartreuse')
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
黒いポイントマーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='.', c='k')
タプルのn番目の	aTuple[n]
文字列中の小文字を大文字に変換する	s.upper()
＜オプション＞グラフの色をプラムに設定する	color = 'plum'
黒いダイアモンドマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
実数の双曲線正弦の逆数	math.asinh(x)
データ列とリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
文字列TSVファイルからCSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
＜オプション＞グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
辞書を浅く複製する	dict(aDict)
文字列を空白によって区切る	s.split()
折れ線グラフのポイント印を黄色くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
折れ線グラフに大バツマーカーを使う	plt.plot(データ列, データ列2, marker='X')
線グラフの色をオレンジレッドにセットする	plt.plot(データ列, データ列2, color='orangered')
線グラフを描画して、その色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
タプルの値として要素は含まれているか判定する	element in aDict.values()
カラーコードのポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
nをn2で割った余りをnに代入する	n %= n2
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データフレームの列の文字列で文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
グラフを用いる	from sympy import N
データ列が何時か確認する	ds.dt.hour
文字列の無限列	itertools.repeat(element)
柱状グラフの間を指定する	plt.hist(データ列, range=(start, end))
今日の月数	datetime.datetime.today().month
データフレームのカラムと列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
グラフの用途を画面に指定する	sns.set(context='notebook')
データフレームの列の文字列長を列として見る	df[col].str.len()
リストとリストについて破線グラフを描画し、、その色を明るいに指定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
暗いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームを各列毎に集約して、文字列というグループを使う	df.groupby(column).get_group(s)
＜オプション＞ライトイエローにグラフの色を設定する	color = 'lightyellow'
リストとリストの青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
まとめてデータフレームの列名を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
8進文字列をバイナリにする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
辞書のキーを列挙する	aDict.keys()
ヒストグラムの色をトマトにセットする	plt.hist(データ列, color='tomato')
折れ線グラフに線幅nの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
小数点数のsinの逆数を求める	math.asin(x)
ヒストグラムを描画してその色をパウダーブルーにセットする	plt.hist(データ列, color='powderblue')
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
日付データの日数を使う	aDate.day
リストとリストについての散布図を大きさnで描く	plt.scatter(xdata, ydata, s=n)
リストとリストについて散布図を描画し、、マーカーを四角に指定する	plt.plot(xdata, ydata, marker='s')
ヒストグラムを描画して、色をホワイトスモークに指定する	plt.hist(データ列, color='whitesmoke')
ダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
リストとリストの散布図を濃い色で重なりを見やすく描く	plt.plot(xdata, ydata, c='deep', alpha=0.5)
＜オプション＞グラフの色をオレンジレッドに変更する	color = 'orangered'
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
淡い色を使って散布図を描画する	plt.plot(xdata, ydata, c='muted')
文字列の末尾から改行を取り除く	s.rstrip('\n')
文字列を右側から空白で分割する	s.rsplit()
文字列を最後の部分文字列によって二つに分ける	s.rpartition(sub)
ユニコードを文字にする	chr(unicode)
＜オプション＞ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
第２引数のファイルの名前	sys.argv[1]
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
パラメータについて数式の積分を求める	sympy.integrate(e, z)
イテラブルとリストの色差別ないグラフを描画して、色を黒色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
実行時の標準出力の出力先がターミナルか	sys.stdout.isatty()
データフレームのカラムの中に文字列とがいくつ存在するか数える	df[col].isin([value, value2]).sum()
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
文字列の左端から部分文字列を除く	s.lstrip(sub)
散布図に黒いダイアモンドマーカーを用いる	plt.plot(xdata, ydata, marker='D', c='k')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
＜オプション＞グラフの色をライトサーモンに設定する	color = 'lightsalmon'
散布図に明るい色のマーカーを使う	plt.plot(xdata, ydata, c='bright')
散布図に色差別ない色のマーカーを使う	plt.plot(xdata, ydata, c='colorblind')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
上位集合もしくは等しいか調べる	aSet > aSet2
双方向キューの中に要素が含まれてるか調べる	element in deq
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='paleturquoise')
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
文字をASCIIコードにする	ord(ch)
文字列をカンマで区切り、文字列リストに変換する	s.split(',')
ヒストグラムを描画してその色をオレンジに指定する	plt.hist(データ列, color='orange')
リストとリストについての散布図に黒い三角マーカーを描く	plt.plot(xdata, ydata, marker='^', c='k')
散布図に黒い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='k')
日付時刻データの時間	aDatetime.hour
オブジェクトにフィールドがあるかどうか調べる	hasattr(obj, プロパティ名)
リストと配列についての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
データフレームから重複した行を削除して更新する	df.drop_duplicates(inplace=True)
２つの浮動小数点数が十分に近い	math.isclose(x, x2)
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
双方向キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
startからendの範囲のヒストグラムを用いてリストを描画する	plt.hist(データ列, range=(start, end))
リストとリストのパステル調のグラフを描画してその色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
nが3で割り切れる	n % 3 == 0
＜オプション＞改行コードを旧Macに変更する	newline = '\r'
実数が有限か調べる	math.isfinite(x)
＜オプション＞グラフの色をダークスラテグレーに変更する	color = 'darkslategray'
句点文字を全部使う	string.punctuation
折れ線グラフの右三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
データフレームの列と列の相関行列ピアソンでを計算する	df[[column, column2]].corr(method='pearson')
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームのリスト列のNaNを最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
浮動小数点数を実数から減ずる	x - y
データ列とラベルを指定して縦棒を描画する	plt.bar(ラベル列, データ列)
ヒストグラムを描画して、色を青緑に設定する	plt.hist(データ列, color='teal')
部分文字列が文字列の開始位置からと終了位置の間に含まれるか調べる	s.find(sub, start, end) != -1
カラムの中に文字列と文字列がいくつ存在するか数える	ds.isin([value, value2]).sum()
折れ線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
リストとリストについて破線を描いて、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
組の要素を昇順にソートする	sorted(aTuple, reverse=True)
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
表データを列によってグループ化して、分散を求める	df.groupby(column).var()
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
色差別ない色でヒストグラムを描画する	plt.hist(xdata, color='colorblind')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
線グラフを描画して、その色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
行列の転置行列を計算する	aArray.T
リストの中の一番小さい値を求める	min(aList)
オプションで標準エラーを使用する	file = sys.stderr
線グラフの色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
データフレームのリストカラムの値が欠損値か確認する	df[aList].isna()
リストとリストについての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
線グラフを描画して、その色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
丸マーカーを使って散布図を描く	plt.plot(xdata, ydata, marker='o')
配列としてデータフレームの指定した列を抽出する	df[column].values
カラーバーを横向きで設定する	plt.colorbar(orientation='horizontal')
表データの列がxより大きいデータを取り出す	df[df[column] > x]
淡い色でデータ列についてのヒストグラムを描画する	plt.hist(xdata, color='muted')
散布図に赤い四角マーカーを用いる	plt.plot(xdata, ydata, marker='s', c='r')
辞書のキーの値	aDict[key]
コーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
データフレームを列によって昇順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
色差別ないグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
＜オプション＞バイナリ書き込みモードを使用する	mode = 'wb'
UTF8を用いて追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
ベクトルの累積積を計算する	np.cumprod(aArray)
リストと数列について散布図を描き、、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
リストと数列の折れ線グラフを文字列の色で描く	plt.plot(xdata, ydata, color=s)
データフレームを各列と列の組み合わせ毎にグループ化して、合計を算出する	df.groupby([column, column2], as_index=False).sum()
リストをビン分割する	pd.cut(aList, aList)
両端キューをタプルに変換する	tuple(deq)
データフレームを列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
データフレームを複数の列でグループ化する	df.groupby(columns)
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ヒストグラムを描画して、その色をスノーに設定する	plt.hist(データ列, color='snow')
文字列を青色にする	f'\033[34m{value}\033[0m'
イテラブルと配列の散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
列をリストとして抽出する	df[column].values.tolist()
データフレームから重複したデータを消す	df.drop_duplicates()
変数が0に近づくときの数式の極限値を計算する	sympy.limit(e, z, 0)
データフレームのカラムのpercent分位数を計算する	df[col].quantile(percent/100)
丸マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='o')
ファイルパスを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
二つのデータフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
日付データからn時間分、引く	aDate - datetime.timedelta(hours=n)
＜オプション＞バリーウッドにグラフの色を設定する	color = 'burlywood'
折れ線グラフにサイズnの右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
ヒストグラムを描画してその色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategray')
カラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
数式の変数についてのn階微分を算出する	sympy.diff(e, z, n)
データフレームのカラムの中にとがあるか	df[col].isin([value, value2])
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
ファイルからn文字読み込む	f.read(n)
太字で変数をプリントする	print(f'\033[1m{value}\033[0m')
データフレームから指定された列を選択する	df[[column]]
＜オプション＞ディムグレー色を使う	color = 'dimgrey'
リストとイテラブルについて散布図を描画し、、マーカーをバツに指定する	plt.plot(xdata, ydata, marker='x')
ヒストグラムの色をシエナにセットする	plt.hist(データ列, color='sienna')
リストからオブジェクトを取り除く	aList.remove(element)
折れ線グラフの色をプラムに変更する	plt.plot(データ列, データ列2, color='plum')
xとyの商と余りを同時に算出する	divmod(x, y)
リストについてのヒストグラムを濃い色でプロットする	plt.hist(xdata, color='deep')
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
タプルを順序付けする	enumerate(aTuple)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
nがn2の倍数か調べる	n % n2 == 0
日付時刻データが金曜日か確認する	aDatetime.weekday() == 4
データフレームのカラムがx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
Pandasで、データ列をタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
リストとリストについての散布図に黒色の丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o', c='k')
グラフの背景色を暗くする	sns.set(style='darkgrid')
＜オプション＞改行の代わりに文字列を用いる	end = s
formatのパターンを用いて文字列からタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
破壊的に列を用いてデータフレームを昇順に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
シーケンスにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
オブジェクトは辞書型か調べる	isinstance(obj, dict)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
濃いグラフをリストとイテラブルを使って描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
文字列の末尾から部分文字列を探す	s.rfind(sub)
数式の数値を求める	float(e)
スピアマン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
折れ線グラフを描画してその色をブルーバイオレットに指定する	plt.plot(データ列, データ列2, color='blueviolet')
データ列とリストについて散布図を描画して、菱形マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
nがn2以下か調べる	n <= n2
ヒストグラムの色をネイビーに変更する	plt.hist(データ列, color='navy')
文字列の中の複数行対応として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
nという名前のシートをファイルからデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
ベクトルの標準偏差	np.std(aArray)
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフに星マーカーを加える	plt.plot(データ列, データ列2, marker='*')
リストとリストについて暗い色の折れ線をプロットし、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
ヒストグラムを描画して色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
カラーコードの星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
データ列と配列について散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
折れ線グラフを描画して、その色をライトグレーにセットする	plt.plot(データ列, データ列2, color='lightgrey')
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
＜オプション＞ローングリーンにグラフの色を設定する	color = 'lawngreen'
イテラブルから多重集合を作成する	collections.Counter(iterable)
データフレームのリストカラムの中に文字列があるかテストする	df[aList].isin([value])
列によってデータフレームをソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
カラーコードの丸マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='o', c=rgb)
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
表データをグループ化し列に対し最大値を求める	df.groupby(column)[column2].max()
部分文字列が文字列の終了位置より前に含まれないか	s.find(sub, 0, end) == -1
＜オプション＞色をインディアンレッドに設定する	color = 'indianred'
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
＜オプション＞ライトグレー色を用いる	color = 'lightgray'
イテラブルとリストについての散布図に菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D')
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
プラットフォームのコードポイントの最大値	sys.maxunicode
折れ線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
有理数の分子	q.numerator
＜オプション＞ダークスレートブルーにグラフの色をセットする	color = 'darkslateblue'
データフレームを'A'列によって小さい順に並べる	df.sort_values(by='A', ascending=True)
ヒストグラムを描画してその色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
配列と数列について散布図を描画して、その大きさをnに変更する	plt.scatter(xdata, ydata, s=n)
折れ線グラフの右三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
折れ線グラフを描画して、その色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
データフレームのリスト列の空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
四角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='s')
線グラフを描画して、色をパパイヤウィップに変更する	plt.plot(データ列, データ列2, color='papayawhip')
＜オプション＞区切り記号を改行にする	sep = '\n'
文字列が英数字かどうか	s.isalnum()
ゼロ埋めされた行列	np.zeros(行数, 列数)
オブジェクトにプロパティがある	hasattr(obj, プロパティ名)
パレットを全般的に色差別なくする	sns.set(pallete='colorblind')
整数nがリストのひとつか調べる	n in aList
折れ線グラフの色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
グラフを淡くする	sns.set(pallete='muted')
ヒストグラムを描画して、その色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
データフレームをインデックスによってソートする	df.sort_index()
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
配列とリストの濃いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategray')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
折れ線グラフに黒い▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
ヒストグラムを描画して、その色を貝殻に指定する	plt.hist(データ列, color='seashell')
正規表現を使う	import re
数の2乗を算出する	x ** 2
＜オプション＞青紫色を使う	color = 'violet'
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
Pythonパスの一覧	sys.path
データフレームを複数の列によって並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフを描画してその色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
データフレームを各列毎に集約し、列の平均値を求める	df.groupby(column)[column2].mean()
＜オプション＞グラフの色をライトスカイブルーにする	color = 'lightskyblue'
線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
折れ線グラフの色をやわらかい青に変更する	plt.plot(データ列, データ列2, color='cornflowerblue')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
データフレームを使う	import pandas as pd
カラムの欠損値を平均で埋める	ds.fillna(ds.mean())
データフレームのリスト列のどの値が最も現れるか確認する	df[aList].mode()
ヒストグラムを描画して、その色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
整数を十の位で丸める	round(x, -1)
＜オプション＞グラフの線種を破線に指定する	linestyle = 'dashed'
整数nを八進表現に変換する	oct(n)
ファイルをBOM付きで書き込みできるように開く]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームのリスト列は正規分布からどの程度、尖っているか確認する	df[aList].skew()
オブジェクトが名前付きタプル型か確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ValueMapでまとめてデータフレームの列の値を置き換える	df[col].replace(ValueMap)
リストとリストについてカラーコードのパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
データフレームのリストカラムの中央値	df[aList].median()
三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
ファイル名がJSONファイルか調べる	filename.endswith('.json')
プラットホームの名前	sys.platform
ヒストグラムを横に並べてプロットする	plt.hist([データ列, データ列2], color=['b', 'r'])
データ列と配列の青色の色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
配列の差	aArray - aArray2
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
赤色の丸マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='o', c='r')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
データ列を箱ひげ図で描く	plt.boxplot(データ列)
＜オプション＞文字列の示す文字コードを使う	encoding = s
双方向キューが空でないか調べる	len(deq) != 0
列名リストの値によってデータフレームをグループ化し、列挙する	[(name, group) for name, group in df.groupby(columns)]
エクセルファイルファイルからnというシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
折れ線グラフを描画して、色をダークスラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategray')
パステル調のグラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
平均値でデータフレームのNaNを補う	df.fillna(df.mean())
文字列の長さ	len(s)
ヒストグラムを描画して、その色をビスクに設定する	plt.hist(データ列, color='bisque')
オプションで、標準出力を使う	file = sys.stdout
リストにオブジェクトを追加する	aList.append(element)
リストと配列の散布図を描画し、、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
リストとリストのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
点線ヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
既存の行列を元に全要素が1の行列	np.ones_like(aArray)
ヒストグラムを描画して、その色を茶色に設定する	plt.hist(データ列, color='brown')
＜オプション＞左三角マーカーを用いる	marker = '<'
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
画面にグラフの用途を指定する	sns.set(context='notebook')
＜オプション＞アンティークホワイト色を使う	color = 'antiquewhite'
折れ線グラフの右三角印を黒色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
小数点数のハイパボリック・タンジェントの逆数を求める	math.atanh(x)
データフレームの中のNaNの数をカウントする	df.isna().sum()
＜オプション＞色をゲインズボロに設定する	color = 'gainsboro'
日付時刻データとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
黒い三角マーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='k')
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
散布図に黒いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
実数の余弦	math.cos(x)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
濃いの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
データフレームの値が欠損値	df.isna()
イテラブルを文字列リストに変換して、タブで結合する	'\t'.join(map(str, iterable))
平均値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mean())
xを浮動小数点数型に変換する	float(x)
1からNまでの行列	np.arange(1, N+1)
にy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
リストを淡い色の柱状図として描画する	plt.hist(xdata, color='muted')
二つの集合の共通要素のみにする	aSet.intersection_update(aSet2)
実数を二乗する	x ** 2
濃いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
折れ線グラフの色をリネンに指定する	plt.plot(データ列, データ列2, color='linen')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorchid')
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
線グラフを描画してその色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
ヒストグラムを描画して、その色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
数値を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
折れ線グラフを描画して、その色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
オブジェクトがクラスのインスタンス	isinstance(obj, クラス)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ヒストグラムの色をパウダーブルーにする	plt.hist(データ列, color='powderblue')
双方向キューから最初の値を取り出す	deq.remove(element)
ファイルを全部、読み込む	f.read()
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
データフレームの列の名前の一覧を使う	df.columns
両端キューのn番目	deq[n]
タイムスタンプデータにn時間を加算する	aDatetime + datetime.timedelta(hours=n)
散布図を星マーカーで描く	plt.plot(xdata, ydata, marker='*')
黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
列を分割数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
nがn2より小さいかどうか調べる	n < n2
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
データフレームの列をインデックスに指定する	df.set_index(column)
実行結果を太字にする	f'\033[1m{value}\033[0m'
文字列中にひとつでも非英数字があるか調べる	any(not c.isalnum() for c in s)
データフレームのカラムの母標準偏差を計算する	df[col].std(ddof=0)
キーがタプルに存在するか調べる	key not in aDict
ヒストグラムを描画して、色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
文字列は組の要素か判定する	element in aTuple
nをn2だけ左シフトする	n << n2
折れ線グラフの色をペールグリーンにセットする	plt.plot(データ列, データ列2, color='palegreen')
ヒストグラムを描画して、色をダークレッドに設定する	plt.hist(データ列, color='darkred')
nにn2をかける	n * n2
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
データフレームの欠損値を後の値に設定する	df.fillna(method='bfill')
パステル調のの折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ライムグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='limegreen')
データフレームを破壊的に複数の列を用いて昇順に並べる	df.sort_values(by=column, ascending=True, inplace=True)
x,yの複素数	complex(x, y)
破線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
＜オプション＞ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
ヒストグラムを描画して、その色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
タイムスタンプデータをISO書式の文字列に変換する	aDatetime.isoformat()
データ列とリストについての散布図に文字列という凡例用のラベルを設定する	plt.scatter(xdata, xdata, label=s)
配列を転置する	aArray.T
ヒストグラムを描画して、その色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
データフレームを100の位で丸める	df.round(-2)
グラフで使用するフォントをfontNameに指定する	sns.set(font=fontName)
データフレームを列の値でグループ化して、個数を求める	df.groupby(column).count()
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
イテラブルの要素を全て集合に追加する	aSet.update(iterable)
ヒストグラムを描画して、その色をライトブルーにする	plt.hist(データ列, color='lightblue')
セパレータを用いて文字列を区切って、列挙する	s.split(sep)
キュー中の値のインデックス	deq.index(element)
＜オプション＞グラフの色をスプリンググリーンに設定する	color = 'springgreen'
△マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
グラフで使える色名の一覧	matplotlib.colors.cnames
実数は非数か調べる	math.isnan(x)
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
ペルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='peru')
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
折れ線グラフを描画してその色をオリーブにセットする	plt.plot(データ列, データ列2, color='olive')
＜オプション＞追加モードを使用する	mode = 'a'
散布図を赤いダイアモンドマーカーとして描画する	plt.plot(xdata, ydata, marker='D', c='r')
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
データフレームのリストカラムの値をValueMapで変更する	df[aList].replace(ValueMap)
折れ線グラフを描画して色をミディアムスレートブルーに変更する	plt.plot(データ列, データ列2, color='mediumslateblue')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
カウンタからイテラブルをカウントして減らす	aCounter.subtract(iterable)
列の値でデータフレームをグループ化して、それぞれのグループ毎の件数を知る	df.groupby(column).size()
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
データフレームを列の値でグループ化し、それぞれのグループごとの平均値を算出する	df.groupby(column).mean()
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
JSONLファイルにデータフレームをCSVとして保存する	df.to_csv(filename)
リストをひとつ置きに取り出す	aList[::2]
ポイントマーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='.')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
リストとイテラブルについて散布図を描いて▽マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
ファイル全体を行単位で分割して読み込む	f.readlines()
折れ線グラフを描画して、その色をナバホホワイトに指定する	plt.plot(データ列, データ列2, color='navajowhite')
データフレームの要約統計量	df.describe()
暗い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='dark')
リストの長さだけ繰り返す	range(len(aList))
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
データ列を等間隔でn個に分割する	pd.cut(ds, n)
散布図に黒い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='k')
線グラフの色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
２つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
＜オプション＞丸マーカーを使う	marker = 'o'
データフレームを'A'列によってソートし、、更新する	df.sort_values(by='A', inplace=True)
折れ線グラフを描画して、その色をライトサーモンに指定する	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
オブジェクトは辞書かどうか調べる	isinstance(obj, dict)
ファイル名がTSVファイルかどうか調べる	filename.endswith('.tsv')
棒を描画して、グラフ幅をxに指定する	plt.bar(ラベル列, データ列, width=x)
折れ線グラフを描画して、その色をオールドレースに指定する	plt.plot(データ列, データ列2, color='oldlace')
整数nがタプルのどれかかどうか調べる	n in aTuple
データフレームを複数の列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
nのビット長を見る	n.bit_length()
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
ファイルパスを開いて]、バイナリストリームを使う	open(filepath, mode='rb')
等量でビン数nで列をビニングする	pd.qcut(ds, n)
折れ線グラフに黄色い四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
ヒストグラムを描画して、その色をイエローグリーンにセットする	plt.hist(データ列, color='yellowgreen')
既存の配列をベースにして全要素が0の配列	np.zeros_like(aArray)
一点鎖線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
変数が0に近づく際の数式の極限値を算出する	sympy.limit(e, z, 0)
データフレームのリストカラムの中に文字列と文字列があるかどうか調べる	df[aList].isin([value, value2])
２つの列によってデータフレームを並べて、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
ヒストグラムの色をサンディーブラウンにセットする	plt.hist(データ列, color='sandybrown')
等量でデータフレームの中の列をビン数nとしてビン分割する	pd.qcut(df[col], n)
明るいグラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
オプションで出力先を標準エラーに設定する	file = sys.stderr
データフレームを２つの列によってまとめたグループ	df.groupby(['A', 'B'])
実数以下の最大の整数	math.floor(x)
実数のn乗を計算する	x ** n
ヒストグラムを描画してその色をシエナに変更する	plt.hist(データ列, color='sienna')
折れ線グラフの色をモカシンに変更する	plt.plot(データ列, データ列2, color='moccasin')
ヒストグラムを描画してその色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
データ列が何年か見る	ds.dt.year
折れ線グラフを描画して、色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
＜オプション＞グラフの色を紺碧に設定する	color = 'azure'
＜オプション＞シエナ色を使う	color = 'sienna'
カンマで文字列を区切って、文字列リストに変換する	s.split(',')
リストのn番目の値を削除する	del aList[n]
＜オプション＞グレー色を使う	color = 'gray'
イテラブルとリストについての散布図を明るい色として描く	plt.plot(xdata, ydata, c='bright')
ヒストグラムを描画してその色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
nがn2か	n == n2
折れ線グラフのポイントマーカーを黄色くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
ヒストグラムの色をダークサーモンにセットする	plt.hist(データ列, color='darksalmon')
データフレームのカラムの欠損値をモードに変更する	df[col].fillna(df[col].mode().iloc[0])
全要素を０で初期化された三２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
n2がn以上かつ、n3以下	n <= n2 and n2 <= n3
整数nの十六進表現	hex(n)
＜オプション＞ホットピンク色を使用する	color = 'hotpink'
イテラブルとイテラブルの直積を求める	itertools.product(iterable, iterable2)
＜オプション＞グラフの色をスノーに設定する	color = 'snow'
折れ線グラフに線幅nの左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
色差別ないを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
集合にタプルを追加更新する	aSet.update(iterable)
リストから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
＜オプション＞ホワイトスモーク色を用いる	color = 'whitesmoke'
＜オプション＞グラフの色をライトイエローに設定する	color = 'lightyellow'
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
シーケンスと列をペアリングする	itertools.zip_longest(iterable, iterable2)
＜オプション＞ブランチドアーモンドにグラフの色を指定する	color = 'blanchedalmond'
リストとリストについての散布図に文字列という凡例用のラベルをつける	plt.scatter(xdata, xdata, label=s)
データ列のpercent分位数を求める	ds.quantile(percent/100)
赤い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
折れ線グラフを描画してその色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
線グラフの色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
文字列を文字コード列に変換する	[ord(ch) for ch in s]
ヒストグラムのプロットして、正規化する	plt.hist(データ列, density=True)
明るいの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
二つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
全ての８進数字	string.octdigits
項目名がマッピングに存在するか調べる	key not in aDict
リストの移り変わりを折れ線に描画する	plt.plot(range(len(xdata)), xdata)
線幅nのダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
全要素を初期値で初期化された行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
明るいグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
＜オプション＞耐火レンガ色を使う	color = 'firebrick'
＜オプション＞グラフの色をダークカーキに設定する	color = 'darkkhaki'
データフレームをまとめて丸める	df.round()
プロットで使う縦軸のラベルをuntitledに設定する	plt.ylabel(untitled)
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
黒色のポイントマーカーをデータ列とリストについての散布図に描く	plt.plot(xdata, ydata, marker='.', c='k')
ファイルパスをBOM付きとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
＜オプション＞パウダーブルーにグラフの色を設定する	color = 'powderblue'
要素∉セット	element not in aSet
色差別ない色の折れ線グラフを描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
列ごとにデータフレームをグループ化して、合計を求める	df.groupby(column).sum()
ヒストグラムを描画して、色をライムグリーンにセットする	plt.hist(データ列, color='limegreen')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列, データ列2, marker='v')
xの小数点以下'1'桁の文字列にする	':.1f'.format(x)
リストとリストの散布図を描画して丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
全要素を初期値で初期化されたベクトル	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフに三角マーカーを使う	plt.plot(データ列, データ列2, marker='^')
淡いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='muted', color='r')
標準出力のバッファを即時表示する	sys.stdout.flush()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
逆順の双方向キュー	reversed(deq)
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
nが一桁の数かどうか調べる	-9 <= n <= 9
ヒストグラムを描画して、その色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
線グラフを描画して、色をチョコレートに変更する	plt.plot(データ列, データ列2, color='chocolate')
部分文字列が文字列の開始位置以降に含まれないか調べる	s.find(sub, start) == -1
＜オプション＞リネン色を用いる	color = 'linen'
折れ線グラフの四角印を青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
ユーザが整数を入力する	int(input())
リストについてのヒストグラムを明るいで描画する	plt.hist(xdata, color='bright')
文字列の平仮名をカタカナにする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームのリストカラムの欠損値を最大値にする	df[aList].fillna(df[aList].max())
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
折れ線グラフの△印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
ヒストグラムを描画してその色をデピンクに設定する	plt.hist(データ列, color='deeppink')
カラムの最頻値を求める	ds.mode()
データフレームを'A'列によってで降順にソートする	df.sort_values(by='A', ascending=False)
日付データからn週間を減らす	aDate - datetime.timedelta(weeks=n)
データ列のヒストグラムを描画する	plt.hist(ds)
小さい順にリストをソートする	sorted(aList, reverse=True)
リストとリストの暗いをプロットして色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
データフレームから先頭のカラムを消す	df[df.columns[1:]]
JSONLファイルにインデックスを付けずにデータフレームを保存する	df.to_csv(filename, index=None)
データフレームを複数の列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
＜オプション＞読み込みモードに指定する	mode = 'r'
year年month月の日付	datetime.date(year=year, month=month, day=1)
データ列と配列についての散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
＜オプション＞色をレベッカパープルにセットする	color = 'rebeccapurple'
データフレームを各カラム毎に集計し、、列の個数を求める	df.groupby(column)[column2].count()
折れ線グラフを描画して、色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
辞書をコピーする	dict(aDict)
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
オブジェクトのポインタ	id(obj)
CSVファイルTSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
リストと数列について散布図を描画してマーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
改行文字を見る	'\n'
データ列を十の位で丸めて整数型にする	ds.round(-1).astype(int)
リストは少なくともひとつ真か調べる	any(aList)
スタックの最大長	deq.maxlen
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
散布図にカラーコードの右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c=rgb)
データフレームのカラムをドロップして、更新する	df.drop(column, axis=1, inplace=True)
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
データフレームの列と列の相関行列ケンドール順位相関係数として	df[[column, column2]].corr(method='kendall')
文字列の左側の文字	s[0]
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
データフレームを1000の位で丸める	df.round(-3)
データフレームから重複したデータをドロップする	df.drop_duplicates()
全要素を０で初期化された複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
黒色の大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
三つの最大値	max(x, y, z)
複素数	complex(x, y)
赤い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
配列を分割数nでビン分割する	pd.cut(aArray, n)
データフレームの列がxより多くx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
リストとリストについて破線グラフを描いて、色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
＜オプション＞バッファリングを無効にする	buffering = 0
折れ線グラフに黄色いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
青い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
＜オプション＞グラフの色をライトグリーンに変更する	color = 'lightseagreen'
＜オプション＞ブラック色を使う	color = 'black'
文字列の先頭でパターンに複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データ列とデータ列の色差別ないグラフを描画してその色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとリストについての散布図に赤色の左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ISO8601の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフを描画してその色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
nがn2より大きいかどうか調べる	n > n2
キューからポップする	deq.pop()
＜オプション＞アリスブルーにグラフの色を設定する	color = 'aliceblue'
＜オプション＞グラフの色をディムグレーに変更する	color = 'dimgrey'
重複をインプレイスで表データからドロップする	df.drop_duplicates(inplace=True)
リストを度数分布図で可視化する	plt.hist(aList)
リストとリストの散布図をパステル調の色として描画する	plt.plot(xdata, ydata, c='pastel')
異なる列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
リストとデータ列についての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
配列とリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
＜オプション＞インデックスを自動的な連番に設定する	index_col = None
辞書のキーを要素にする	aDict[key] = element
nが5で割り切れるか調べる	n % 5 == 0
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
散布図に赤色の右三角マーカーを使用する	plt.plot(xdata, ydata, marker='>', c='r')
数値を数値に変換する	float(e)
折れ線グラフを描画してその色をローングリーンにセットする	plt.plot(データ列, データ列2, color='lawngreen')
＜オプション＞グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
データフレームのpercent分位数を算出する	df.quantile(percent/100)
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
データ列の欠損値をxに設定する	ds.fillna(x)
文字列の中の正規表現による全てのマッチを見る	re.findall(pattern, s)
折れ線グラフのマーカーを▽にする	plt.plot(データ列, データ列2, marker='v')
実数を実数で除算して、切り捨てる	x // y
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
ヒストグラムを描画して、その色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
要素がマッピングの値として含まれているか確認する	element in aDict.values()
リストとリストについて散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームの列がxより大きくx2より小さい行を選択する	df[(x < df[column]) & (df[column] < x2)]
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightgreen')
両端キューのデータをインプレースに反転する	deq.reverse()
上位集合か	aSet.issuperset(aSet2)
あらかじめケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ヒストグラムの色をゴールデンロッドにセットする	plt.hist(データ列, color='goldenrod')
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
数列とデータ列のカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
文字列を最初の部分文字列で二分し、後半の文字列を求める	s.partition(sub)[-1]
線グラフを描画してその色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ふたつの関係が上位集合もしくは等しいか調べる	aSet > aSet2
一行をランダムにデータフレームから取り出す	df.sample()
カラーコードのバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームを昇順に'A'列によって並べ直す	df.sort_values(by='A', ascending=True)
データ列が何日か調べる	ds.dt.day
線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
nを十六進数表記にする	hex(n)
リストと配列について散布図をプロットして、右三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列, データ列2, color='darksalmon')
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
Pandasで、データフレームのcollのエポック秒から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
集合をイミュータブルに変換する	frozenset(aSet)
実数の天井数	math.ceil(x)
＜オプション＞ドジャーブルーに色を変更する	color = 'dodgerblue'
＜オプション＞色をグレーにセットする	color = 'gray'
組を反転する	reversed(aTuple)
＜オプション＞ダークシアン色を用いる	color = 'darkcyan'
＜オプション＞グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
カウンタの最頻出な項目	aCounter.most_common()[0]
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
リストをn倍する	aList * n
selectorsでマスクされたリストの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
表データの重複した行をマスクする	df.duplicated()
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
折れ線グラフを描画して、その色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
折れ線グラフに大きさnのポイント印を描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
組のn番目以降の部分を取り出す	aTuple[n:]
線グラフの色を濃いシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
ロードされたモジュールの一覧	sys.modules
nが1もしくは2、もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
黒い▽マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
配列とリストの散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
折れ線グラフを描画して、その色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
折れ線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategrey')
ピーチパフにヒストグラムの色をする	plt.hist(データ列, color='peachpuff')
二つの集合に共通する要素からなる集合を使う	aSet.intersection(aSet2)
リストをヒストグラムで可視化する	plt.hist(aList)
文字列の右側から改行を除く	s.rstrip('\n')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
ヒストグラムを描画して、その色をインディゴに設定する	plt.hist(データ列, color='indigo')
リストを反転する	reversed(aList)
ファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
文字列は全て数値か調べる	s.isnumeric()
データフレームの中の欠損値の合計を数える	df.isna().sum()
辞書に要素をキーとして加える	aDict[key] = element
リストとデータ列の散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
＜オプション＞ダークカーキを使う	color = 'darkkhaki'
集合が空集合でないか調べる	len(aSet) != 0
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
配列を平坦化する	aArray.flatten()
ヒストグラムを描画して、その色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
ヒストグラムを描画して、その色をトマトに設定する	plt.hist(データ列, color='tomato')
文字列の示す文字コードで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding=s)
ヒストグラムを描画してその色をホワイトに設定する	plt.hist(データ列, color='white')
データフレームのリストカラムのNaNを最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
実数を万の位で丸める	round(x, -4)
リストとリストについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
改行文字	'\n'
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
ヒストグラムの色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
辞書から多重集合を用意する	collections.Counter(aDict)
列によってデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True)
＜オプション＞グラフの色を濃いシアンに変更する	color = 'darkcyan'
リストをパステル調の色のヒストグラムで描画する	plt.hist(xdata, color='pastel')
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
明るいをリストと配列で描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
セットの全ての要素が別のセットに含まれる	aSet.issubset(aSet2)
セットを変更不能な集合にする	frozenset(aSet)
折れ線グラフにバツマーカーを使う	plt.plot(データ列, データ列2, marker='x')
データフレームの歪度	df.kurt()
複数の列によってデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
濃いグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='deep', color='k')
ヒストグラムを描画して、その色をアイボリーに設定する	plt.hist(データ列, color='ivory')
実数を十の位で四捨五入する	round(x, -1)
文字列が全て小文字かどうか調べる	s.islower()
偽	False
startからendまでヒストグラムにする	plt.hist(データ列, range=(start, end))
明るいグラフの色を青くする	plt.plot(xdata, ydata, linestyle='bright', color='b')
折れ線グラフを描画して、色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
二つの変数をそれぞれ定義する	x, y = i, j
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
ヒストグラムを描画して、色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
データフレームを二つの列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
オブジェクトがタプルに含まれないかどうか確認する	element not in aTuple
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
nまたはn2	n or n2
nが負の数	n < 0
filepathにディレクトリをする	os.chdir(os.dirname(filepath))
赤い△マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='r')
中央値でデータフレームの中の列をビンニングする	pd.qcut(df[col], 2)
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
改行なしに文字列をプリントする	print(value, end='')
データフレームのカラムの中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
配列とイテラブルの散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
ベクトルの要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
データフレームのリスト列がどれだけ、分散しているか調べる	df[aList].var()
＜オプション＞スノーに色をセットする	color = 'snow'
＜オプション＞白にグラフの色を指定する	color = 'white'
折れ線グラフの色を白に設定する	plt.plot(データ列, データ列2, color='white')
自然数の順列の総数	math.perm(n)
オプションで標準エラーを出力先にする	file = sys.stderr
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
暗いグラフを描画してその線幅をnにする	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
折れ線グラフを描画して、その色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
データフレームのリストカラムの欠損値を中央値に変更する	df[aList].fillna(df[aList].median())
nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
＜オプション＞やわらかい青色を使う	color = 'cornflowerblue'
文字列の左側からタブを取り除く	s.lstrip('\t')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
カラーコードの四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
文字列中にひとつでも非アルファベットが含まれるかどうかテストする	any(not c.isalpha() for c in s)
カラムの尖度	ds.skew()
散布図を下三角マーカーで描画する	plt.plot(xdata, ydata, marker='v')
実数を小数点以下で丸める	round(x, n)
キーがタプルに存在するかどうか調べる	key not in aDict
numpyを使う	import numpy as np
配列をビン数nでビン分割する	pd.cut(aArray, n)
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
ヒストグラムを描画して、その色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
ヒストグラムを描画してその色をライムに指定する	plt.hist(データ列, color='lime')
＜オプション＞グラフの色を濃い青に設定する	color = 'darkblue'
バイナリできるようにファイルパスを開く]	open(filepath, mode='rb')
リストを展開してプリントする	print(*aList)
＜オプション＞グラフの色をペルーに設定する	color = 'peru'
＜オプション＞インディゴ色を使用する	color = 'indigo'
黄色いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
データフレームの列の名前を付け直す	df.rename(columns={column: name})
一点鎖線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
データ列を丸めて整数にする	ds.round().astype(int)
データフレームの列のユニークな値の個数を確認する	df[col].nunique()
散布図に黒い下三角マーカーを使用する	plt.plot(xdata, ydata, marker='v', c='k')
白色で変数を表示する	print(f'\033[37m{value}\033[0m')
折れ線グラフを描画して色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
＜オプション＞ゴールドを用いる	color = 'gold'
散布図をカラーコードのバツマーカーとして描く	plt.plot(xdata, ydata, marker='x', c=rgb)
散布図を下三角マーカーで描く	plt.plot(xdata, ydata, marker='v')
配列とリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
nが5の倍数か調べる	n % 5 == 0
データフレームのリスト列の欠損値を前の行の値に設定する	df[aList].fillna(method='ffill')
実数が負かどうか判定する	x < 0
データフレームを各列毎に集約し、、列の個数を求める	df.groupby(column)[column2].count()
散布図に黒色のポイントマーカーを使用する	plt.plot(xdata, ydata, marker='.', c='k')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategrey')
数字を使う	string.digits
ベクトルのスカラー倍を求める	aArray * n
nがn2で割り切れるか	n % n2 == 0
折れ線グラフを描画してその色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
カウンタ同士でユニオンを求める	aCounter | aCounter2
タプルの中の最も大きい値を求める	max(aTuple)
配列の累積積	np.cumprod(aArray)
リストとリストの散布図を描画し、、マーカーを菱形に設定する	plt.plot(xdata, ydata, marker='D')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
データフレームを列によってグループ化して、個数を計算する	df.groupby(column).count()
グラフの中の縦軸にuntitledというラベルを付ける	plt.ylabel(untitled)
データフレームのデータ型の一覧	df.dtypes
データフレームの中にいくつがあるか数える	df.isin([value]).sum()
補足をグラフ中の(x,y)の位置に加える	plt.legend(loc=(x, y))
色差別ないグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
列名リストによって破壊的にデータフレームを大きい順に並べる	df.sort_values(by=column, ascending=False, inplace=True)
タプルの長さ	len(aTuple)
折れ線グラフに線幅nのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
日付時刻データが火曜日かテストする	aDatetime.weekday() == 1
シーケンスと列のデカルト積	itertools.product(iterable, iterable2)
データフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
文字列を空白を用いて区切る	s.split()
散布図に黒いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフを描画してその色をライトサーモンに指定する	plt.plot(データ列, データ列2, color='lightsalmon')
セットの濃度を求める	len(aSet)
文字列中にひとつでも非空白があるか調べる	any(not c.isspace() for c in s)
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
カウンタの正の数だけ残す	+aCounter
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
データフレームを'A'列と'B'列によって小さい順に並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列を改行しなくて出力する	print(value, end='')
二次元タプルをフラット化する	sum(aTuple)
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
＜オプション＞グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
オブジェクトがリストの要素でないか調べる	element not in aList
オブジェクトは数値か調べる	isinstance(obj, (int,float))
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
文字列の先頭は部分文字列かどうか調べる	s.startswith(sub)
リストとリストについて破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
イテラブルとイテラブルの散布図を描画してその大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
実数の逆余弦	math.acos(x)
折れ線グラフを描画して、その色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
度数分布図の透明度をxに変更する	plt.hist(データ列, alpha=x)
＜オプション＞スラグレーを使う	color = 'slategray'
文字列をセパレータで区切って、文字列リストにする	s.split(sep)
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
ファイルからの読み込みストリームを使う	open(filepath)
黒色の左三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
データフレームを列によってグループ化して、それぞれのグループごとの合計を算出する	df.groupby(column).sum()
二変数の最大値	max(x, y)
ヒストグラムを描画して、色を白くする	plt.hist(データ列, color='w')
データフレームをTSVファイルでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
複数カラムの散布図を一度にプロットする	sns.pairplot(df[[column, column2, column3]])
折れ線グラフを描画して、その色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
整数nの二進表記	bin(n)
赤いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
配列の次元数	aArray.ndim
ひとつでも非小文字が文字列中に含まれるかどうか調べる	any(not c.islower() for c in s)
'A'列と'B'列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
データ列のタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
ヒストグラムを描画して、色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
nをn2だけ減少させる	n -= n2
ふたつの集合の差集合を使う	aSet.difference(aSet2)
現在が火曜日	datetime.datetime.today().weekday() == 1
折れ線グラフを描画して、その色をペールグリーンにする	plt.plot(データ列, データ列2, color='palegreen')
セットから別のセットとの共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
縦棒を描く	plt.bar(ラベル列, データ列)
折れ線グラフの上三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
データ列の要約統計量	ds.describe()
折れ線グラフを描画して、色をダークサーモンに指定する	plt.plot(データ列, データ列2, color='darksalmon')
折れ線グラフを描画して、その色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
リストとリストで濃いの折れ線を描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
数に実数をかける	x * y
文字列が漢字か確認する	('\u4E00' <= ch <= '\u9FD0')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
データフレームのリストカラムの欠損値をメディアンで埋める	df[aList].fillna(df[aList].median())
＜オプション＞プラムを使う	color = 'plum'
折れ線グラフに丸マーカーを加える	plt.plot(データ列, データ列2, marker='o')
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
xを印字できる文字列にする	ascii(x)
浮動小数点数を十六進文字列に変換する	x.hex()
分数を用いる	import fractions
データフレームの値をValueMapで置き換える	df.replace(ValueMap)
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
データ列とラベル列を指定して、横棒グラフをプロットする	plt.barh(ラベル列, データ列)
＜オプション＞マルーンを使用する	color = 'maroon'
ふたつの集合は互いに素か調べる	aSet.isdisjoint(aSet2)
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
2つのオブジェクトが同一かどうか調べる	obj is obj2
データフレームをインポートする	import pandas as pd
数列とリストの散布図を描いて、ダイアモンドマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
散布図にカラーコードの下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c=rgb)
データ列の尖度	ds.skew()
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
＜オプション＞ネイビー色を使う	color = 'navy'
逆双曲線余弦を求める	math.acosh(x)
折れ線グラフを描画してその色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
赤色の下三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='v', c='r')
列をビン数nでビン分割する	pd.cut(ds, n)
＜オプション＞グラフの色をダークグリーンに設定する	color = 'darkgreen'
線グラフを描画してその色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を算出する	df.groupby([column, column2], as_index=False).count()
線グラフを描画して色をパウダーブルーに変更する	plt.plot(データ列, データ列2, color='powderblue')
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
＜オプション＞淡いピンク色にグラフの色を変更する	color = 'lightpink'
プロットの見栄えをデフォルトでいい感じに設定する	sns.set()
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
データ列の上位25%	ds.quantile(0.25)
年月日と時刻からタイムスタンプを生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
＜オプション＞先頭の行をカラムの名前に設定する	header = 0
ヒストグラムを描画して、その色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
実行を正常に止める	sys.exit(0)
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
追加モードとしてファイルパスを開いて]fとする	f = open(filepath, mode='a')
折れ線グラフを描画して、その色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
両端キューの要素をインプレースに逆に並べ直す	deq.reverse()
列によってデータフレームをソートし、、新しいインデックスを加える	df.sort_values(columns).reset_index()
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
配列を中央値でビン分割する	pd.qcut(aArray, 2)
イテラブルを集合に変換する	set(iterable)
淡いピンク色色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightpink')
赤い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
データ列の中央値	ds.median()
データフレームから一番右側の列を除く	df[df.columns[:-1]]
＜オプション＞青緑を用いる	color = 'turquoise'
グラフの色を全般的に明るくする	sns.set(pallete='bright')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
要素が集合に含まれない	element not in aSet
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
＜オプション＞ダークバイオレットを用いる	color = 'darkviolet'
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
データフレームから重複を残さず、消す	df.drop_duplicates(keep=False)
データ列をn個に分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームを'A'列によってソートする	df.sort_values(by='A')
イテラブルとリストの折れ線グラフを描画して、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
いつまでも文字列が続く列	itertools.repeat(element)
リストについてのヒストグラムを淡い色で描く	plt.hist(xdata, color='muted')
二つのデータフレームを列をキーにして全結合する	pd.merge(df, df2, on=column, how='outer')
黒い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
標準入力を使う	sys.stdin
折れ線グラフを描画して、その色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
＜オプション＞グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
＜オプション＞スカイブルーを用いる	color = 'skyblue'
本日のローカルな日付時刻	datetime.datetime.today()
赤いバツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='x', c='r')
タプルに別のタプルの項目を加えて、更新する	aDict.update(aDict2)
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
＜オプション＞ミントクリームを用いる	color = 'mintcream'
全要素を０で初期化された符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
項目名がマップに存在するか調べる	key in aDict
ヒストグラムを描画して、その色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
グラフの見栄えを良くする	import seaborn as sns
リスト内の要素が全て真かどうか調べる	all(aList)
全ての数字	string.digits
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
Pandasで書式fmtでデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
データフレームのカラムの年を求める	df[col].dt.year
＜オプション＞ダークオリーブグリーン色を使う	color = 'darkolivegreen'
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
リストとリストの折れ線グラフを文字列の色で描く	plt.plot(xdata, ydata, color=s)
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
黒色の丸マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='o', c='k')
標準入力から1行読み取る	input()
データフレームの列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
キューの右側	deq[-1]
浮動小数点数の逆余弦を求める	math.acos(x)
折れ線グラフの印を下三角印にする	plt.plot(データ列, データ列2, marker='v')
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
プロットの中のy軸にuntitledというラベルを付ける	plt.ylabel(untitled)
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列, データ列2, color='paleturquoise')
折れ線グラフに線幅nの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
文字列の先頭で正規表現に複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データフレームの中にある日付データと文字列の合計を数える	df.isin([value, value2]).sum()
＜オプション＞マーカーを▲に変更する	marker = '^'
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
bとn2から成るペア	(n, n2)
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ヒストグラムを描画して、色をグレーに設定する	plt.hist(データ列, color='grey')
データフレームを複数の列によってソートする	df.sort_values(by=column)
データフレームを'A'列と'B'列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
列に列を続ける	itertools.chain(iterable, iterable2)
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
両端キューが空か調べる	len(deq) == 0
リストとリストの暗いを描画してその色を青くする	plt.plot(xdata, ydata, linestyle='dark', color='b')
nからn2までの整数列	list(range(n, n2+1))
リストが空でないかどうか調べる	len(aList) != 0
タプルのn番目以降の部分を取り出す	aTuple[n:]
浮動小数点数の最大値	sys.float_info.max
ヒストグラムを描画してその色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
＜オプション＞ヘッダをnamesに設定する	header = names
整数nの八進文字列	oct(n)[2:]
文字列中に部分文字列があるか	sub in s
データフレームの列の欠損値を最小値に変更する	df[col].fillna(df[col].min())
リスト内の要素は全て真	all(aList)
出力ストリームに文字列を書く	f.write(s)
タプルの文字列が最初に見つかる位置を探す	aTuple.index(element)
＜オプション＞グラフの色をライムグリーンに変更する	color = 'limegreen'
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
線グラフの色をコーラルに変更する	plt.plot(データ列, データ列2, color='coral')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列, データ列2, color='lightyellow')
淡いグラフの色を赤くする	plt.plot(xdata, ydata, linestyle='muted', color='r')
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
空のリスト	[]
データフレームのカラムの標本標準偏差	df[col].std()
ゼロ埋めされたベクトルを初期化する	np.zeros(要素数)
文字列が全て英字かどうか	s.isalpha()
ヒストグラムを描画して、その色をラベンダーに変更する	plt.hist(データ列, color='lavender')
線グラフを描画して、その色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
配列に列を続ける	itertools.chain(iterable, iterable2)
配列の行ごとの平均値	np.mean(aArray, axis=1)
実数を整数に変換する	int(x)
列から複数個、ランダムに選ぶ	random.choices(iterable, k=n)
列をリストを境界値として分割する	pd.cut(ds, aList)
ヒストグラムを描画して、その色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
＜オプション＞ロイヤルブルー色を使う	color = 'royalblue'
浮動小数点数の正接	math.tan(x)
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データフレームを列名リストによってによって破壊的に並べ直す	df.sort_values(by=column, inplace=True)
折れ線グラフを描画してその色をゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='goldenrod')
リストとデータ列についての散布図に黒色の▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
散布図をカラーコードのポイントマーカーで描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
データフレームのカラムの欠損値を直後の値にセットする	df[col].fillna(method='bfill')
組の各要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
列'A'と列'B'をキーとして2つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
リストを複製する	aList.copy()
ヒストグラムを描画して、その色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
カラーコードのバツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームのグループの合計	df.groupby(column).sum()
ISO8601形式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列リストにイテラブルを変換して、'改行によって連結する	'\n'.join(map(str, iterable))
文字列を最後の部分文字列を用いて二分する	s.rpartition(sub)
ヒストグラムを描画して、色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
パステル調の色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
青い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
カウンタ	collections.Counter()
EUCを使ってファイルをオープンする]	open(filepath, encoding='euc_jp')
＜オプション＞グラフの色をミスティローズに変更する	color = 'mistyrose'
データフレームのリストカラムの中に存在する文字列の合計を求める	df[aList].isin([value]).sum()
文字列の中でASCII限定としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
明るいグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞色をダークスラテグレーに指定する	color = 'darkslategray'
データフレームの欠損値をメディアンに設定する	df.fillna(df.median())
データフレームを複数の列の値によってグループ分けする	df.groupby(columns)
オールドレース色の線グラフを描画する	plt.plot(データ列, データ列2, color='oldlace')
＜オプション＞ダークスレートブルー色を使う	color = 'darkslateblue'
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
イテラブルからカウンタを作る	collections.Counter(iterable)
最後に追加した項目を辞書から取り出す	aDict.popitem()
綺麗なグラフを使う準備をする	import seaborn as sns
最初のカテゴリーを除外し、データフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
ファイルをBOM付きを用いて開く]	open(filepath, encoding='utf_8_sig')
＜オプション＞グラフの色をターコイズに設定する	color = 'turquoise'
実線グラフを描画する	plt.plot(データ列, データ列2, linestyle='solid')
2次元リストの転置行列	[list(x) for x in list(zip(*aList))]
カラーコードの△マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームの名前リストで指定したカラムを削除する	df.drop(columns, axis=1)
配列と数列の散布図を描画して、マーカーをポイントに指定する	plt.plot(xdata, ydata, marker='.')
リストのイミュータブルな集合を見る	frozenset(iterable)
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
＜オプション＞色をスチールブルーに変更する	color = 'steelblue'
＜オプション＞ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
文字列を全て小文字にする	s.casefold()
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
フォーマットでデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
数式の因数分解を行う	sympy.factor(e)
カラーコードの大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c=rgb)
黒い丸マーカーをリストと配列についての散布図に描く	plt.plot(xdata, ydata, marker='o', c='k')
オブジェクトが属性を持つ	hasattr(obj, プロパティ名)
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
タプルをソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
＜オプション＞色をフクシアに設定する	color = 'fuchsia'
既存のファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
重なりを見やすく暗い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
列自身を2回あわせた直積	itertools.product(iterable, repeat=2)
データ列の分	ds.dt.minute
データフレームを'A'列を用いて昇順に並べ直して、更新する	df.sort_values(by='A', ascending=True, inplace=True)
部分文字列が文字列の終了位置より前に含まれるか判定する	s.find(sub, 0, end) != -1
データ列の中の欠損値の合計を求める	ds.isna().sum()
折れ線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
＜オプション＞グラフの色をティールに設定する	color = 'teal'
タイムスタンプデータは日付時刻データより遅いか確認する	aDatetime > aDatetime2
リストとリストについて黒い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
配列を柱状図にする	plt.hist(aArray)
リストをy軸、リストを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
データフレームのリストカラムは正規分布からどれだけ尖っているか見る	df[aList].skew()
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
リストが空かどうか	len(aList) == 0
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
文字列が部分文字列で終わるかどうか	s.endswith(sub)
文字列が全て小文字	s.islower()
ファイルの絶対パスを使う	os.path.abspath(filepath)
リストとリストについての散布図を色差別ない色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
リストとリストについての散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
文字列の両端から部分文字列を取り除く	s.strip(sub)
昇順にタプルの要素をソートする	sorted(aTuple, reverse=True)
データフレームのカラムがどれだけ、分散しているか確認する	df[col].var()
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
イテラブルから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
イテラブルの重複組み合わせを求める	itertools.combinations_with_replacement(iterable, n)
文字列は識別子名	s.isidentifier()
折れ線グラフの四角マーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
２次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
データフレームを'A'列によって昇順にソートし、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
配列とデータ列を用いて明るいグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
データ列をn個にビン分割する	pd.cut(ds, n)
折れ線グラフを描画してその色を白にセットする	plt.plot(データ列, データ列2, color='white')
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列, データ列2, marker='X')
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
線グラフの色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
折れ線グラフを描画して、色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
文字列の右側から部分文字列を除く	s.rstrip(sub)
計算機イプシロン	sys.float_info.epsilon
リストと数列の散布図にカラーコードのクロスマーカーを描く	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムを描画して、その色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
データ列の各データが何回出現するか調べる	ds.value_counts()
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
明るいの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
タプルの末尾を取り除く	aTuple[:-1]
ヒストグラムの線のスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
行列の要素ごとの積を求める	np.multiply(aArray, aArray2)
Pandasで、データフレームのカラムをタイムスタンプに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ライトゴールドロディイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightgoldenrodyellow')
ベクトルの平均値を求める	np.mean(aArray)
表データの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
散布図に三角マーカーを使う	plt.plot(xdata, ydata, marker='^')
xが1もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
二つのデータフレームを異なる列をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
日付時刻データの分数	aDatetime.minute
両端キューのn番目に要素を挿入する	deq.insert(n, element)
要素が集合に含まれないか調べる	element not in aSet
実数の正弦の逆数を計算する	math.asin(x)
ヒストグラムを描画して、その色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
タプルの平均	sum(aTuple)/len(aTuple)
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
日付データは日付データより後ろか調べる	aDate > aDate2
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
nが3で割り切れるかどうか確認する	n % 3 == 0
ファイルパスをオープンする]	open(filepath)
ヒストグラムを描画して、その色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
データ列と数列についての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
文字列を空白で区切って列挙する	s.split()
折れ線グラフの下三角印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
全要素を０で初期化された８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
両端キューに要素をプッシュする	deq.append(element)
Pandasで、文字列のエポック秒からPandasの日付型にする	pd.to_datetime(s, unit='s', utc=True)
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの線のスタイルを実線に指定する	plt.hist(データ列, linestyle='solid')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
線グラフを描画してその色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
データフレームを二つの列を用いて降順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
アルファベットの大文字列	string.ascii_uppercase
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
文字列はタイトルケース	s.istitle()
黒いバツマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='x', c='k')
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
ヒストグラムを描画して、その色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
ヒストグラムを描画して、その色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
プロットの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
リストとリストについて散布図を描画して、マーカーを▼に指定する	plt.plot(xdata, ydata, marker='v')
点線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='dotted')
文字列の開始位置から終了位置の範囲で部分文字列を数える	s.count(sub, start, end)
文字列を表示する	print(value)
リストとデータ列についての散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
リストと数列の折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
黒色の▲マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
配列と配列で濃いグラフを描いてその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
＜オプション＞スチールブルーにグラフの色をセットする	color = 'steelblue'
二つの文字列を辞書順で比較する	s < s2
折れ線グラフを描画してその色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
ヒストグラムを描画してその色をビスクに指定する	plt.hist(データ列, color='bisque')
要素が集合に含まれるかどうか調べる	element in aSet
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
＜オプション＞アイボリー色を用いる	color = 'ivory'
オブジェクトにプロパティが存在するか判定する	hasattr(obj, プロパティ名)
データフレームの列を度数分布図で可視化する	plt.hist(df[column])
ヒストグラムを描画してその色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
集合を組に変換する	tuple(aSet)
＜オプション＞クリムゾン色を使う	color = 'crimson'
データフレームをJSONLファイルにタブ区切りとして保存する	df.to_csv(filename, sep='\t')
集合の変更不能版	frozenset(aSet)
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
データフレームを見る	df.head()
カラーコードの左三角マーカーを数列とイテラブルについての散布図に描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフの色をサーモンに変更する	plt.plot(データ列, データ列2, color='salmon')
辞書の項目名とその値を列挙する	aDict.items()
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
浮動小数点数が負の数か調べる	x < 0
折れ線グラフを描画して、その色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategrey')
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
折れ線グラフの星印を黄色くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
タプルの中の一番小さい値を求める	min(aTuple)
折れ線グラフを描画してその色をサーモンに変更する	plt.plot(データ列, データ列2, color='salmon')
オブジェクトが文字列クラスか	isinstance(obj, str)
タプルをnからナンバリングする	enumerate(aTuple, start=n)
＜オプション＞ライムグリーン色を使う	color = 'limegreen'
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
項目名がタプル上で定義済みか調べる	key in aDict
ヒストグラムを描画してその色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
データフレームのカラム名を列から文字列に変更する	df.rename(columns={column: name})
xを論理値に変換する	bool(x)
線グラフを描画して色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
線グラフを描画して、色をイエローグリーンに変更する	plt.plot(データ列, データ列2, color='yellowgreen')
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
リストとリストについての散布図を明るい色として描画する	plt.plot(xdata, ydata, c='bright')
パウダーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='powderblue')
イテラブルとリストの折れ線グラフを描画してuntitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsteelblue')
データ列とイテラブルについて黒いパステル調のを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
データ列を折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
リストと数列について散布図を描画し、、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
リストとリストについて破線グラフをプロットして、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
文字列中に部分文字列が含まれないか調べる	sub not in s
スタックを全て取り除く	deq.clear()
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
破線に折れ線グラフを設定する	plt.plot(データ列, データ列2, linestyle='dashed')
折れ線グラフを描画して、色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
データフレームの列の中に日付データとが含まれるか調べる	df[col].isin([value, value2])
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
辞書に項目名ワード引数で更新する	aDict.update(**kwargs)
データフレームの数値をまとめて丸める	df.round()
＜オプション＞オーキッドを使う	color = 'orchid'
データフレームを複数の列によってによって大きい順に整列する	df.sort_values(by=column, ascending=False)
実数を切り下げて整数に変換する	math.floor(x)
＜オプション＞色をインディゴにセットする	color = 'indigo'
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
ヒストグラムを描画して、色を茶色に指定する	plt.hist(データ列, color='brown')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
イテラブルを用いてカウンタを更新する	aCounter.update(iterable)
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
マッピングをコピーする	aDict.copy()
＜オプション＞ターコイズを使う	color = 'turquoise'
カラーコードのダイアモンドマーカーをデータ列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
ファイルパスを文字列の示す文字コードとして追加できるように開く]	open(filepath, mode='a', encoding=s)
折れ線グラフに大きさnの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
セットが空かどうか調べる	len(aSet) == 0
データフレームを二つの列で昇順に並べる	df.sort_values(by=['A', 'B'], ascending=True)
データフレームを二つの列の値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
列をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
リストとリストで淡いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
双方向キュー中の要素のインデックス	deq.index(element)
配列とリストとして淡いの折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ヒストグラムを描画してその色を青に設定する	plt.hist(データ列, color='blue')
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
ヒストグラムを描画して色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
集合の補集合を求める	aSet.difference(aSet2)
二つのリストからマップ	dict(zip(aList, aList2))
丸マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='o')
オレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='orange')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
淡い色の折れ線グラフを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
文字列を黒色化する	f'\033[30m{value}\033[0m'
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
nの三乗	n ** 3
nがn2以下	n <= n2
データフレームのカラムの中にある日付データと文字列の合計を数える	df[col].isin([value, value2]).sum()
データフレームの欠損値がある行を削除する	df.dropna()
線グラフを描画して、その色を青に設定する	plt.plot(データ列, データ列2, color='blue')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
三二ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
π	math.pi
＜オプション＞ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
全要素を０で初期化された三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ヒストグラムを描画して、その色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
モカシン色の線グラフを描画する	plt.plot(データ列, データ列2, color='moccasin')
線グラフを描画して、色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
データフレームからランダムに抽出する	df.sample()
＜オプション＞グラフの色をカデットブルーに設定する	color = 'cadetblue'
リストとリストについての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
＜オプション＞改行コードを動作環境依存に設定する	newline = None
小数点数の逆双曲線正弦	math.asinh(x)
複数カラムの関係性をまとめて描画する	sns.pairplot(df[[column, column2, column3]])
全句読点文字	string.punctuation
データフレームのカラムは何分か見る	df[col].dt.minute
文字列中の部分文字列を回数を制限して新しい文字列に置き換える	s.replace(sub, newsub, n)
タプルの先頭の要素	aTuple[0]
文字列をコロンで区切って列挙する	s.split(':')
＜オプション＞グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
実数の正弦の逆数	math.asin(x)
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
赤い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
マッピングから多重集合を作成する	collections.Counter(aDict)
＜オプション＞色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
＜オプション＞ASCII文字に限定する	flag = re.ASCII
黒いポイントマーカーをデータ列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='.', c='k')
＜オプション＞オーキッドにグラフの色をセットする	color = 'orchid'
折れ線グラフの右三角印を赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
ファイルパスが存在しないかどうか調べる	not os.path.exists(filepath)
文字列が文字列リストに含まれるか調べる	s in aStringList
色差別ないグラフをリストとリストで描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
中央値でリストをビン分割する	pd.qcut(aList, 2)
リストとリストについて散布図を描画して、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
破線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
折れ線グラフを描画して、その色をブラックに変更する	plt.plot(データ列, データ列2, color='black')
ヒストグラムを描画して、その色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
折れ線グラフを描画して、その色をターコイズに指定する	plt.plot(データ列, データ列2, color='turquoise')
＜オプション＞アクアマリン色を使う	color = 'aquamarine'
ルートのチェーンマップを作成する	collections.ChainMap()
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
無限に文字列が繰り返すイテラブル	itertools.repeat(element)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
既存のファイルパスをEUCを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフを描画して、その色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
行列の標準偏差	np.std(aArray)
列の一意な値	ds.unique()
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
線グラフを描画して、その色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
＜オプション＞エンコーディングをEUCに設定する	encoding = 'euc_jp'
リストを縦軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
実数の正接の逆数	math.atan(x)
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
＜オプション＞グラフの色を紺碧に指定する	color = 'azure'
暗いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
データフレームを'A'列によってまとめたグループ	df.groupby('A')
カラーコードに横棒グラフの色をセットする	plt.barh(ラベル列, データ列, color=rgb)
配列とデータ列について濃い色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
黒い淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
縦軸の名称をuntitledに設定する	plt.ylabel(untitled)
データフレームのカラムのどの値が最も現れるか確認する	df[col].mode()
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
実数の整数部を計算する	math.modf(x)[1]
リストとリストについての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
配列とデータ列についての散布図に赤色の星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
文字列が全て空白文字からなるか調べる	s.isspace()
＜オプション＞大文字・小文字を無視する	flag = re.IGNORECASE
オブジェクトが論理値か調べる	isinstance(obj, bool)
昇順にデータフレームをインデックスで整列する	df.sort_index(ascending=True)
predicateFuncが真となる列の要素	itertools.takewhile(predicateFunc, iterable)
データフレームの中で、列とカラムの重複を落とす	df.drop_duplicates(subset=column)
データフレームの重複した行数を数える	df.duplicated().sum()
＜オプション＞グラフの色をハニーデューに指定する	color = 'honeydew'
ネイピア数を用いる	math.e
＜オプション＞ダークシアグリーン色を使う	color = 'darkseagreen'
＜オプション＞シエナ色を用いる	color = 'sienna'
イテラブルからn要素、サンプリングする	random.sample(iterable, k=n)
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画して、色をライトコーラルにセットする	plt.plot(データ列, データ列2, color='lightcoral')
ヒストグラムを描画して、その色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
データフレームの中に文字列とがあるか調べる	df.isin([value, value2])
データフレームの列を正規表現patternでまとめて置換する	df[col].replace(pattern, repl, regex=True)
タプルを反転する	reversed(aTuple)
ヒストグラムを描画してその色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
データ列とリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
三つの文字列を順にプリントする	print(value, value2, value3)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
折れ線グラフを描画して、その色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
データフレームを列名リストでソートする	df.sort_values(by=column)
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
数式のパラメータに数式を代入する	e.subs(z, e2)
散布図に黒い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='k')
オブジェクトがリストクラスかどうか	isinstance(obj, list)
＜オプション＞色を青に設定する	color = 'blue'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
＜オプション＞オリーブ色を使う	color = 'olive'
文字列に変換してイテラブルを連結する	''.join(map(str, iterable))
乱数生成系列をnで初期化する	random.seed(n)
折れ線グラフの色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
リストとリストの散布図を淡い色として重なりを見やすく描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
ヒストグラムを描画して、その色をベージュに設定する	plt.hist(データ列, color='beige')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
数列をy軸、イテラブルを横軸として、大きさnの散布図をプロットする	plt.scatter(xdata, ydata, s=n)
行列のユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
＜オプション＞グラフの色をラベンダーに変更する	color = 'lavender'
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
＜オプション＞プラムに色を指定する	color = 'plum'
データフレームを'A'列によってまとめた表	df.groupby('A')
プロットで使うフォントをfontNameに指定する	sns.set(font=fontName)
折れ線グラフを描画して色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
リストとリストとしてパステル調のグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
リスト中の文字列が最初に見つかる位置を探す	aList.index(element)
セットの全ての要素が別の集合に含まれるかどうか	aSet.issubset(aSet2)
小数点数の逆余弦	math.acos(x)
データフレームが正規分布からどの程度歪んでいるか確認する	df.kurt()
線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
グラフにグリッド線を付ける	plt.grid(True)
文字列を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
カウンタの共通部分演算する	aCounter & aCounter2
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightseagreen')
ヒストグラムを描画して、色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
n進数文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
部分文字列が部分文字列で開始するか確認する	s.startswith(sub)
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
リストとリストの散布図にカラーコードの左三角マーカーをプロットする	plt.plot(xdata, ydata, marker='<', c=rgb)
破線グラフの色を濃いにする	plt.plot(xdata, ydata, linestyle='dash', color='deep')
＜オプション＞データ型を指定する	dtype = np.uint8
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
＜オプション＞大バツマーカーを用いる	marker = 'X'
データフレームが重複しているか調べる	df.duplicated()
nをn2で割った余りを求める	n % n2
折れ線グラフに緑色のバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
データフレームのカラムの最頻値	df[col].mode()
実数の二乗を求める	x ** 2
＜オプション＞ブランチドアーモンド色を使う	color = 'blanchedalmond'
色差別ないグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
＜オプション＞ダークターコイズにグラフの色をセットする	color = 'darkturquoise'
データフレームの列の値がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
淡い色を使って柱状図を描画する	plt.hist(xdata, color='muted')
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフの色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
データ列とラベルを指定して、縦棒を描画する	plt.bar(ラベル列, データ列)
＜オプション＞ミッドナイトブルーを使う	color = 'midnightblue'
変数名を項目名として辞書	dict(name=element)
書式を辞書でフォーマットする	formatText.format_map(aDict)
データフレームを列によってグループ化して、分散を計算する	df.groupby(column).var()
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
パステル調のを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
＜オプション＞シーグリーンを使用する	color = 'seagreen'
分子n分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
xが-9以上、9以下か確認する	-9 <= x <= 9
リストと配列について散布図を描画して、バツマーカーの色をカラーコードにする	plt.plot(xdata, ydata, marker='x', c=rgb)
アルファベットが文字列内に含まれるか調べる	any(c.isalpha() for c in s)
柱状グラフをstartからendまでの範囲で描画する	plt.hist(データ列, range=(start, end))
ヒストグラムを描画して、色を青くする	plt.hist(データ列, color='b')
カラムを正規表現patternでreplに一度に置き換える	ds.replace(pattern, repl, regex=True)
＜オプション＞シスルにグラフの色を設定する	color = 'thistle'
線グラフの色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
データフレームのリストカラムが正規分布からどの程度、歪んでいるか確認する	df[aList].kurt()
データフレームのNaNを平均値で補う	df.fillna(df.mean())
＜オプション＞グラフの色をブルーバイオレットにする	color = 'blueviolet'
明るいをイテラブルとイテラブルを用いて描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
文字列を緑色にする	f'\033[32m{value}\033[0m'
＜オプション＞サンディーブラウンに色を設定する	color = 'sandybrown'
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
実数の仮数	math.frexp(x)[0]
数列と配列について破線グラフをプロットしてその色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データ列を折れ線グラフに描画して、マーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
最後の項目を辞書から取り出す	aDict.popitem()
データフレームを各列毎にグループ化して、列の最大値を計算する	df.groupby(column)[column2].max()
配列とイテラブルの濃いをプロットし、、その色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
リストから多重集合を作る	collections.Counter(iterable)
ヒストグラムの色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
部分文字列が文字列の終了位置より前に存在しないか調べる	s.find(sub, 0, end) == -1
リストをヒストグラムにする	plt.hist(aList)
データフレームの列のNaNを直後の値に変更する	df[col].fillna(method='bfill')
データ列の中に存在する文字列の合計を数える	ds.isin([value]).sum()
散布図に下三角マーカーを使う	plt.plot(xdata, ydata, marker='v')
実数のn乗	x ** n
文字列を全て小文字に変換する	s.lower()
＜オプション＞スラグレーにグラフの色を指定する	color = 'slategrey'
文字列が全て小文字かどうかテストする	s.islower()
データフレームの列の歪度	df[col].kurt()
nまでの偶整数列を得る	list(range(2, n, 2))
折れ線グラフのポイント印の線幅をnに指定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
データ列の欠損値を最小値で補う	ds.fillna(ds.min())
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
折れ線の色を文字列に設定する	plt.plot(xdata, ydata, color=s)
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
実行環境がWindowsか判定する	sys.platform.startswith('win32')
タプルを階層化マップに変換する	collections.ChainMap(aDict)
データフレームのn行まで抽出する	df[:n]
両端キューをタプルにする	tuple(deq)
行列の各要素に加算する	aArray + aArray2
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
データフレームのリストカラムの歪度	df[aList].kurt()
＜オプション＞タブをセパレータで用いる	sep = '\t'
データフレームをTSVを用いてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
＜オプション＞アリスブルー色を使う	color = 'aliceblue'
線グラフを描画して、色を黄色くする	plt.plot(データ列, データ列2, color='y')
改行しないで二つの変数をプリントする	print(value, value2, end='')
グラフで使うパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
＜オプション＞グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
散布図にカラーコードの上三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
緑色のバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
＜オプション＞ディムグレー色を使う	color = 'dimgray'
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
＜オプション＞丸マーカーを加える	marker = 'o'
データフレームのリストカラムの中にある文字列と日付データの合計を数える	df[aList].isin([value, value2]).sum()
小数点数の二進対数	math.log2(x)
データフレームのリスト列を丸める	df[aList].round()
文字列は文字列より辞書順で前か調べる	s < s2
リストとイテラブルの折れ線グラフを描画する	plt.plot(xdata, ydata)
実数の常用対数を求める	math.log10(x)
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
リストと配列のカラーコードの濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
折れ線グラフの色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
レモンシフォンにヒストグラムの色を指定する	plt.hist(データ列, color='lemonchiffon')
＜オプション＞マーカーを下三角に変更する	marker = 'v'
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
破線グラフの色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
データフレームのどの値が頻出か調べる	df.mode()
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
データ列のユニークな値	ds.unique()
データフレームを複数の列によって並べて更新する	df.sort_values(by=column, inplace=True)
現在の作業ディレクトリ	os.getcwd()
折れ線グラフを描画してその色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
折れ線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
データフレームを'A'列によって昇順に並べ直す	df.sort_values(by='A', ascending=True)
データフレームから数値データのみ抽出する	df.select_dtypes('number')
濃い色の折れ線グラフをプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
二つ並べてヒストグラムを描く	plt.hist([データ列, データ列2], color=['b', 'r'])
データフレームを列によってで破壊的に並べ直す	df.sort_values(by=column, inplace=True)
明るいをリストとイテラブルで描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞パパイヤウィップにグラフの色を変更する	color = 'papayawhip'
＜オプション＞グラフの色をロイヤルブルーに変更する	color = 'royalblue'
柱状グラフを半透明化する	plt.hist(データ列, alpha=0.5)
プラットフォームの符号付き整数の最大値を確認する	sys.maxsize
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
＜オプション＞EUCを使う	encoding = 'euc_jp'
折れ線グラフを描画して、色をダークブルーに変更する	plt.plot(データ列, データ列2, color='darkblue')
ヒストグラムを描画してその色をシアンに設定する	plt.hist(データ列, color='cyan')
実数を実数で割って切り捨てる	x // y
リストとイテラブルについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
日付時刻データが日付時刻データより先	aDatetime < aDatetime2
大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
文字列中に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
逆余弦	math.acos(x)
左三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='<')
明るいの線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞コーラルに色を設定する	color = 'coral'
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
＜オプション＞グラフの色をライトグリーンに指定する	color = 'lightgreen'
配列を元にして全要素が0の配列	np.zeros_like(aArray)
データフレームを'A'列によってまとめた表を使う	df.groupby('A')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
線グラフを描画して色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgrey')
リストとリストについて相関を可視化する	plt.scatter(xdata, ydata)
＜オプション＞大バツ印を使用する	marker = 'X'
Pandasのバージョンを表示する	print(pd.__version__)
折れ線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列, データ列2, color='springgreen')
＜オプション＞グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
小数点以下3桁までデータフレームをJSONLファイルに保存する	df.to_csv(filename, float_format='%.3f')
配列とリストで色差別ないを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
常用対数を求める	math.log10(x)
ダイアモンドマーカーを使って散布図をプロットする	plt.plot(xdata, ydata, marker='D')
データフレームを列を用いて昇順に並べて更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストとリストの散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
ミディアムブルーにヒストグラムの色をセットする	plt.hist(データ列, color='mediumblue')
＜オプション＞オリベドラブ色を使う	color = 'olivedrab'
線グラフを描画して、その色をやわらかい青に設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
リストとリストの暗いグラフを描いて、その色を青くする	plt.plot(xdata, ydata, linestyle='dark', color='b')
集合が空でないか調べる	len(aSet) != 0
文字列はタイトルケースか調べる	s.istitle()
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
＜オプション＞グラフの色をコーンフラワーブルーに指定する	color = 'cornflowerblue'
データフレームがどの程度、分散しているか見る	df.var()
折れ線グラフの▽マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
データ列とラベル列を指定して、積み上げ棒グラフを描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
リストの最後にリストを展開する	aList.extend(aList2)
オブジェクトの属性の値を値にセットする	setattr(obj, プロパティ名, 値)
データフレームの列のNaNを最大値に設定する	df[col].fillna(df[col].max())
データ列のUNIX時間から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
表データから列を三つだけ選択する	df[[column, column2, column3]]
タブで区切って2つの変数をプリントする	print(value, value2, sep='\t')
＜オプション＞丸マーカーを描画する	marker = 'o'
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
標準出力のバッファをフラッシュする	sys.stdout.flush()
折れ線グラフのマーカーを四角にする	plt.plot(データ列, データ列2, marker='s')
度数分布図を描画して、xにアルファ値を設定する	plt.hist(データ列, alpha=x)
データフレームを複数の列の値によってまとめたグループ	df.groupby(columns)
データフレームのカラムを10の位で丸めて、整数にする	df[col].round(-1).astype(int)
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
リストとリストの散布図に黒いポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c='k')
配列をヒストグラムにする	plt.hist(aArray)
データフレームの中の列を等量でビン数nとしてビン分割する	pd.qcut(df[col], n)
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
データ列のどの値が頻出か見る	ds.mode()
文字列の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
＜オプション＞オレンジにグラフの色を設定する	color = 'orange'
セットに列の要素を追加する	aSet.update(iterable)
散布図に赤い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='r')
線グラフの色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgray')
データフレームを列で並べ直す	df.sort_values(by=column)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
珊瑚にヒストグラムの色を設定する	plt.hist(データ列, color='coral')
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
全要素を初期値で初期化された行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
マゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフの大バツ印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
リストとデータ列の色差別ないを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームから破壊的に重複を落とす	df.drop_duplicates(inplace=True)
データ列は何曜日か見る	ds.dt.weekday_name
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列, データ列2, color='yellowgreen')
文字列の接頭辞から部分文字列を消す	s.removeprefix(sub)
プロットで使う縦軸のラベルをuntitledに変更する	plt.ylabel(untitled)
リストとリストの折れ線を透明度alphaで描く	plt.plot(xdata, ydata, alpha=alpha)
コレクションを使う	import collections
データフレームを'A'列の値によってグループ化する	df.groupby('A')
データフレームの列がxかつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
データフレームの列を破壊的に取り除く	df.drop(column, axis=1, inplace=True)
降順に'A'列によってによってデータフレームをソートする	df.sort_values(by='A', ascending=False)
文字列を水色で表示できる文字列にする	f'\033[36m{value}\033[0m'
文字列から部分文字列を全て取り除く	s.replace(sub, '')
＜オプション＞グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
データフレームのリストカラムの要約統計量	df[aList].describe()
データ列の値がNaN	ds.isna()
文字列の開始位置より後に部分文字列がないか調べる	s.find(sub, start) == -1
データフレームのカラムの歪度	df[col].kurt()
実数を百の位で丸める	round(x, -2)
ヒストグラムを描画して、その色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
リストのn番目の要素を削除する	del aList[n]
箱ひげ図としてデータ列を可視化する	plt.boxplot(データ列)
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
ヒストグラムを描画して、色を真紅に設定する	plt.hist(データ列, color='crimson')
行列の列ごとの最小値	np.min(aArray, axis=0)
文字列が文字列リストにあるか確認する	s in aStringList
＜オプション＞グラフの種類を破線に設定する	linestyle = 'dashed'
トマト色の線グラフを描画する	plt.plot(データ列, データ列2, color='tomato')
データフレームの中のカラムを四分位数ごとにビニングする	pd.qcut(df[col], 4)
タイムスタンプデータの秒数を使う	aDatetime.second
文字列を白色にする	f'\033[37m{value}\033[0m'
タプルの中の最大値	max(aTuple)
散布図を赤色の星マーカーで描画する	plt.plot(xdata, ydata, marker='*', c='r')
文字列が全て英数字か調べる	s.isalnum()
組の総和を計算する	sum(aTuple)
データフレームの列の値がx未満の行を抽出する	df[df[column] < x]
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
1で全要素を初期化された行列を作る	np.ones(行数, 列数, dtype=np.int)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
タイムスタンプデータは日付時刻データより後ろか	aDatetime > aDatetime2
リストと配列の散布図を描画して、マーカーを▼に変更する	plt.plot(xdata, ydata, marker='v')
組の長さを見る	len(aTuple)
ベクトルの累積積	np.cumprod(aArray)
線グラフを描画して、その色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
文字列の末尾から部分文字列を取り除く	s.removesuffix(sub)
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
カラムの中にいくつ日付データがあるか数える	ds.isin([value]).sum()
整数nの二進文字列を使う	bin(n)[2:]
カウンタの最頻出な項目を求める	aCounter.most_common()[0]
日付データが日付データより前か調べる	aDate < aDate2
文字をユニコードに変換する	ord(ch)
リストを等量でn個にビン分割する	pd.qcut(aList, n)
数で実数を整数除算する	x // y
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
リストを引数として展開して表示する	print(*aList, sep=',')
明るいグラフをリストとイテラブルとしてプロットしてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞スラッシュをセパレータで使う	sep = '/'
データフレームのそれぞれのグループ毎の最大値	df.groupby(column).max()
オブジェクトはタプルの要素か調べる	element in aTuple
データフレームの列の中の欠損値の合計を数える	df[col].isna().sum()
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
＜オプション＞ダークマゼンタにグラフの色をする	color = 'darkmagenta'
リストとリストについての散布図を重なりを見やすく色差別ない色で描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
数値を白色で出力する	print(f'\033[37m{value}\033[0m')
データフレームのリストカラムの中の未入力値の合計を数える	df[aList].isna().sum()
０で全要素を初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
nをn2分の一にする	n /= n2
タプルを順番付けする	enumerate(aTuple)
＜オプション＞グラフの色をオールドレースに変更する	color = 'oldlace'
＜オプション＞エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
＜オプション＞グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
数列とリストについて散布図を描いて、マーカーの色を明るいにする	plt.plot(xdata, ydata, c='bright')
デピンクにヒストグラムの色を変更する	plt.hist(データ列, color='deeppink')
＜オプション＞パールゴールデンロッドを使用する	color = 'palegoldenrod'
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
散布図に黒色の三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
ファイルが存在する	os.path.exists(filepath)
散布図に赤いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
配列と数列の散布図を描いて、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
ふたつの辞書を合体する	aDict | aDict2
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
データフレームの列のユニークな値	df[col].unique()
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
データ列の未入力値を前の値に設定する	ds.fillna(method='ffill')
文字列TSVからカンマ区切りのファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
黒色の▲マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2])
＜オプション＞ハニーデューにグラフの色を変更する	color = 'honeydew'
２つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
文字列をカンマで区切って、列挙する	s.split(',')
リストをn個に分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
行列の列ごとの合計	np.sum(aArray, axis=0)
配列の合計値	np.sum(aArray)
数値をシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
＜オプション＞ダークシアンにグラフの色を設定する	color = 'darkcyan'
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ヒストグラムを描画してその色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
変数名を項目名として、マップ	dict(name=element)
nにn2を加える	n + n2
整数nを16進文字列にする	hex(n)[2:]
辞書の項目名と値を入れ替える	{v: k for k, v in aDict.items()}
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
折れ線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
実数がNaNか	math.isnan(x)
＜オプション＞スプリンググリーン色を用いる	color = 'springgreen'
＜オプション＞グラフの色をミディアムパープルに指定する	color = 'mediumpurple'
カラーコードでリストとリストの折れ線を描く	plt.plot(xdata, ydata, color=rgb)
nが配列のひとつ	n in aArray
折れ線グラフの色を青にする	plt.plot(データ列, データ列2, color='blue')
数式を簡単にする	sympy.sympify(e)
赤い大バツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
折れ線グラフを描画して色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
折れ線グラフを描画して、その色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
折れ線グラフの下三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
赤い左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='r')
Pandasで、エポック秒のデータフレームのcollからdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムの色をブラックにセットする	plt.hist(データ列, color='black')
データ列を1000の位で丸める	ds.round(-3)
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
データフレームの行一覧	df.index
横方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
組の要素を小さい順にソートする	sorted(aTuple, reverse=False)
折れ線グラフを描画して、その色をゴーストホワイトにする	plt.plot(データ列, データ列2, color='ghostwhite')
リストとイテラブルの濃いグラフを描画して、その色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
実数を十六進表記の文字列に変換する	x.hex()
ふたつの集合の対称差集合を求める	aSet.symmetric_difference(aSet2)
縦方向に二つのデータフレームをつなぐ	pd.concat([df, df2], axis=0)
散布図に赤い四角マーカーを使用する	plt.plot(xdata, ydata, marker='s', c='r')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
ヒストグラムを描画して、色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
プロットを色差別なくする	sns.set(pallete='colorblind')
折れ線グラフを描画して、その色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
明るいの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
折れ線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
数列とリストについての散布図をパステル調の色で重なりを見やすくプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
データフレームの各グループごとの最大値を求める	df.groupby(column).max()
折れ線グラフを描画して、色をダークシアグリーンに変更する	plt.plot(データ列, データ列2, color='darkseagreen')
配列とリストについて明るいグラフを描いて、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
色差別ない色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='colorblind')
まとめてデータフレームのリストカラムの値を正規表現patternで変更する	df[aList].replace(pattern, repl, regex=True)
ヒストグラムを描画して、その色をトマトに指定する	plt.hist(データ列, color='tomato')
リストとリストについて黒色の淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
値をシアンにする	f'\033[36m{value}\033[0m'
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
現在が土曜日か調べる	datetime.datetime.today().weekday() == 5
レベッカパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='rebeccapurple')
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
濃いグラフの色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
文字列を中央寄せにする	s.center(文字列幅)
整数を小数点で丸める	round(x, n)
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
リストとリストの明るいグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
配列の分散	np.var(aArray)
イテラブルの全順列	itertools.permutations(iterable)
線幅nの下三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
リストをタプルに変換する	tuple(aList)
ファイルパスをバイナリモードでオープンする]	open(filepath, mode='rb')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
ファイルの拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
日付を用いる	import datetime
データフレームの列をインデックスに設定する	df.set_index(column)
タイムスタンプデータが日付時刻データより後ろかどうか調べる	aDatetime > aDatetime2
ヒストグラムを描画して、その色をゴールドに設定する	plt.hist(データ列, color='gold')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
ヒストグラムを描画して、その色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
リストを色差別ない色のヒストグラムとして描画する	plt.hist(xdata, color='colorblind')
＜オプション＞ダークカーキに色を指定する	color = 'darkkhaki'
＜オプション＞ライトグレー色を用いる	color = 'lightgrey'
n進文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
＜オプション＞シーグリーン色を使う	color = 'seagreen'
データフレームの第三四分位数	df.quantile(0.75)
ふたつの集合の差を計算する	aSet.difference(aSet2)
リストをイミュータブルにする	tuple(aList)
部分文字列が文字列の開始位置以降に存在するか調べる	s.find(sub, start) != -1
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームを各列毎にグループ分けして、文字列というグループを見る	df.groupby(column).get_group(s)
タイムスタンプデータをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
書き込み用にファイルを開く]	open(filepath, mode='w')
黒色のダイアモンドマーカーを散布図に使う	plt.plot(xdata, ydata, marker='D', c='k')
キーがマッピング上で未定義か調べる	key not in aDict
nが-9以上、9以下かどうか確認する	-9 <= n <= 9
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
折れ線グラフを描画して、色を淡いピンク色に指定する	plt.plot(データ列, データ列2, color='lightpink')
＜オプション＞色をライトスレイグレーにセットする	color = 'lightslategray'
数列とリストを用いて暗いの折れ線グラフを描画し、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', color='r')
日付時刻データの月を見る	aDatetime.month
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
表データを用いる	import pandas as pd
淡い色で重なりを見やすくイテラブルとリストの散布図を描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
＜オプション＞茶色色を使う	color = 'brown'
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
値は集合に含まれるか	element in aSet
Pythonパスにディレクトリを追加する	sys.path.append(dir)
配列とデータ列について青い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
＜オプション＞グラフの色をシーグリーンに変更する	color = 'seagreen'
インデックスでデータフレームを昇順にソートする	df.sort_index(ascending=True)
今日の曜日を見る	datetime.datetime.today().weekday()
黒い上三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='^', c='k')
データフレームのリストカラムの中に文字列とがあるか調べる	df[aList].isin([value, value2])
折れ線グラフを描画して、色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
配列の平均値を求める	np.mean(aArray)
大きさnでデータ列とリストの散布図を描く	plt.scatter(xdata, ydata, s=n)
ヒストグラムを描画してその色をスノーに指定する	plt.hist(データ列, color='snow')
データフレームを列でソートする	df.sort_values(by=column)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
全要素を初期値で初期化された配列	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフを描画して、その色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
＜オプション＞改行を区切りで使う	sep = '\n'
リストを淡い色のヒストグラムでプロットする	plt.hist(xdata, color='muted')
データフレームのリストカラムの正規分布に対する左右対称性を求める	df[aList].kurt()
表データのn行目を削除する	df.drop(n, axis=0)
データフレームを列によってソートして、新しい行を加える	df.sort_values(columns).reset_index()
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
折れ線グラフのポイントマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
日付データからn秒を引く	aDate - datetime.timedelta(seconds=n)
折れ線グラフの色をビスクに指定する	plt.plot(データ列, データ列2, color='bisque')
赤い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
パステル調のの色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgrey')
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
真スーパーセットか調べる	aSet > aSet2
タプルのキーとその値をペアとして取り出す	aDict.items()
パステル調のをリストとリストとして描画し、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
線グラフを描画してその色をマゼンタに変更する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
八進文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
文字列を左トリムする	s.lstrip()
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
本日が水曜日	datetime.datetime.today().weekday() == 2
データ列をビン数nとしてビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
3つの数値をプリントする	print(value, value2, value3)
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
データフレームを列毎にグループ化して、各グループごとの分散を計算する	df.groupby(column).var()
列からn個、サンプリングする	random.sample(iterable, k=n)
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
暗いグラフを数列とリストで描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
線グラフの色を青緑に指定する	plt.plot(データ列, データ列2, color='teal')
パステル調の色のマーカーを散布図に用いる	plt.plot(xdata, ydata, c='pastel')
グラフ中の(x,y)の場所に凡例を加える	plt.legend(loc=(x, y))
二つのカウンタの共通するデータ	aCounter & aCounter2
1からnまでの整数リスト	list(range(1, n+1))
黒い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
xが1もしくは2か	x == 1 or x == 2
文字列がタプルに含まれる	element in aTuple
文字列を走査し、正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
色差別ない色を用いてリストと数列についての散布図をプロットする	plt.plot(xdata, ydata, c='colorblind')
時間を使用する	import time
カラーコードの四角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='s', c=rgb)
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
折れ線グラフの色を赤くする	plt.plot(データ列, データ列2, color='r')
＜オプション＞グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
データ列を折れ線グラフに描画してマーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
スーパーセットか確認する	aSet.issuperset(aSet2)
表データの内の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
データフレームを各列毎にグループ化し、、列の最大値を算出する	df.groupby(column)[column2].max()
オブジェクトのハッシュ値	hash(obj)
数を整数にする	int(x)
＜オプション＞グラフの色をフクシアに設定する	color = 'fuchsia'
列のそれぞれを関数でフィルタする	map(func, iterable)
全要素を1で初期化された配列を作る	np.ones(要素数, dtype=np.int)
リストを横軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
ふたつの集合が集合と交わりを持たないか判定する	aSet.isdisjoint(aSet2)
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
要素は集合に含まれないか判定する	element not in aSet
データ列を折れ線グラフに描画して印を▼印にする	plt.plot(データ列, データ列2, marker='v')
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
実数を浮動小数点数で	x // y
折れ線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
タプル中の要素が少なくとも一つ真か調べる	any(aTuple)
標準エラーを得る	sys.stderr
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
淡いの折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
リストとリストの折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
文字列が全て十進数字	s.isdecimal()
ヒストグラムを描画して色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
線グラフを描画して、その色をパウダーブルーに指定する	plt.plot(データ列, データ列2, color='powderblue')
赤い色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
データ列とデータ列で色差別ないを描画し、、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リストのn番目を消す	del aList[n]
ポスター用にグラフを変更する	sns.set(context='poster')
ふたつのリストの積集合を見る	list(set(aList) & set(aList2))
データフレームから型のカラムのみ抽出する	df.select_dtypes(ty)
線グラフを描画してその色をミディアムスレートブルーにセットする	plt.plot(データ列, データ列2, color='mediumslateblue')
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
＜オプション＞グラフの色をマゼンタに指定する	color = 'magenta'
エクセルデータからデータフレームを読み込む	pd.read_excel(filename)
文字列が小文字か調べる	s.islower()
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
＜オプション＞ミディアムスレートブルーを使用する	color = 'mediumslateblue'
折れ線グラフの色をブラックにセットする	plt.plot(データ列, データ列2, color='black')
折れ線グラフを描画して、色を暗い赤に変更する	plt.plot(データ列, データ列2, color='darkred')
データフレームを各列と列の組み合わせ毎にグループ分けして平均値を算出する	df.groupby([column, column2], as_index=False).mean()
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
＜オプション＞カデットブルーに色を設定する	color = 'cadetblue'
キューの最大長	deq.maxlen
ヒストグラムを描画して、その色をペルーに設定する	plt.hist(データ列, color='peru')
データフレームを複数の列によって整列する	df.sort_values(by=column)
ヒストグラムの色を黄色にセットする	plt.hist(データ列, color='yellow')
データフレームの中の列を等しい量になるようにn個にビン分割する	pd.qcut(df[col], n)
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
シーケンスと列の直積を得る	itertools.product(iterable, iterable2)
ゴールドにヒストグラムの色を指定する	plt.hist(データ列, color='gold')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
折れ線グラフを描画して、その色をミディアムターコイズにセットする	plt.plot(データ列, データ列2, color='mediumturquoise')
データフレームのカテゴリデータをベクトルに変換する	pd.get_dummies(df)
二つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
リストとリストの明るいを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>')
ヒストグラムを描画して、その色を暗い赤に設定する	plt.hist(データ列, color='darkred')
黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
行を付けずにJSONLファイルにデータフレームを書き込む	df.to_csv(filename, index=None)
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
データフレームのカラムが何分か見る	df[col].dt.minute
ヒストグラムを描画して、色をアイボリーに変更する	plt.hist(データ列, color='ivory')
＜オプション＞色をライトスレイグレーに設定する	color = 'lightslategray'
＜オプション＞グラフの色をダークサーモンに変更する	color = 'darksalmon'
カウンタの正の数のみ残す	+aCounter
文字列は全て印字できるか	s.isprintable()
ヒストグラムを描画して、その色をペルーにセットする	plt.hist(データ列, color='peru')
ゼロ埋めした符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
値が集合に含まれないか	element not in aSet
両端キューの要素をインプレースに反転する	deq.reverse()
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
タプルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
配列のユニークな要素	np.unique(aArray)
折れ線グラフを描画して、その色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
書き込み用にファイルを文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
折れ線グラフの星印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
青色の線グラフを描画する	plt.plot(データ列, データ列2, color='blue')
散布図を暗い色のマーカーを用いて描画する	plt.plot(xdata, ydata, c='dark')
＜オプション＞印を三角に変更する	marker = '^'
ファイルからファイル名を使う	os.path.basename(filepath)
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
日付データが日付データより先か調べる	aDate < aDate2
文字列が全て英数字かどうか調べる	s.isalnum()
ヒストグラムを描画して、その色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
明るい色のマーカーとして散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ライトイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightyellow')
＜オプション＞グラフの色を赤に指定する	color = 'red'
データフレームの中で、カラムに重複があるか見る	df.duplicated(subset=column)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
上位集合か調べる	aSet.issuperset(aSet2)
データフレームを降順に二つの列によって破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ヒストグラムを描画して、その色を白に設定する	plt.hist(データ列, color='white')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
黒い丸印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
ヒストグラムを描画して、その色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフを描画して、色を黄色くする	plt.plot(データ列, データ列2, color='y')
数列と配列で淡いグラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
オブジェクトが論理値	isinstance(obj, bool)
折れ線グラフを描画して、その色をディープスカイブルーに指定する	plt.plot(データ列, データ列2, color='deepskyblue')
赤い星マーカーを散布図に使う	plt.plot(xdata, ydata, marker='*', c='r')
データフレームから列を一つ選択する	df[[column]]
n個分デックの値を左に回転させる	deq.rotate(-n)
赤いポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.', c='r')
リストと数列について散布図を描画してマーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
要素が全て初期値のベクトル	np.full(要素数, 初期値, dtype=np.int)
数列と配列について暗い色の折れ線をプロットして、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
データフレームをグループ化し各列に対し個数を求める	df.groupby(column)[column2].count()
散布図を赤いポイントマーカーで描く	plt.plot(xdata, ydata, marker='.', c='r')
リストの要素を昇順にソートする	sorted(aList, reverse=False)
ベクトルの和	aArray + aArray2
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
ディレクトリを使う	os.getcwd()
データ列とリストについての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
グラフの描画を見やすくする	import seaborn as sns
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
線グラフの色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
カウンタ同士で積集合演算する	aCounter & aCounter2
折れ線グラフに大きさnのクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
nの各桁の総和	sum(map(int, str(n)))
＜オプション＞シスルにグラフの色を指定する	color = 'thistle'
散布図に黒い下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='k')
ヒストグラムを描画して、その色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
パラメータが0に近づく時の数式の極限値を求める	sympy.limit(e, z, 0)
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
リストとリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
＜オプション＞グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
カウンタから辞書を減らす	aCounter.subtract(aDict)
双方向キューの先頭に値を追加する	deq.appendleft(element)
nが負の整数か確認する	n < 0
折れ線グラフを描画して、その色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
＜オプション＞ダークシアンを使う	color = 'darkcyan'
データフレームの列を四捨五入する	df[col].round()
nがn2未満それかn3以上か調べる	n < n2 or n >= n3
2次元組をflattenする	sum(aTuple)
異なる列をキーにして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームのリストカラムの第一四分位数を算出する	df[aList].quantile(0.25)
データフレームの行を範囲指定して抽出する	df[start:end]
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
散布図を赤色の四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c='r')
ヒストグラムを描画して、その色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
折れ線グラフを描画して、その色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
折れ線グラフの色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
リストとリストの散布図にカラーコードのポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c=rgb)
＜オプション＞ダークグレーにグラフの色を設定する	color = 'darkgrey'
イテラブルを文字列リストに変換して、部分文字列によって連結する	sub.join(map(str, iterable))
xが真か調べる	bool(x)
日付時刻データにn週間分加える	aDatetime + datetime.timedelta(weeks=n)
折れ線グラフを描画して、その色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgray')
＜オプション＞ダークゴールデンロッドを使う	color = 'darkgoldenrod'
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
シーグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='seagreen')
色差別ないグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
グリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='green')
nの十六進文字列	hex(n)[2:]
ガンマ関数の値	math.gamma(x)
データフレームから指定された列を抽出する	df[[column]]
リストとリストのパステル調のグラフを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ヒストグラムを描画して、その色を青紫に設定する	plt.hist(データ列, color='violet')
＜オプション＞色をコーンフラワーブルーにする	color = 'cornflowerblue'
３変数の最小値	min(x, y, z)
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
バイトオーダを使う	sys.byteorder
＜オプション＞アクアに色を指定する	color = 'aqua'
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavenderblush')
折れ線グラフを描画してその色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
線グラフの色をライムにする	plt.plot(データ列, データ列2, color='lime')
＜オプション＞色をネイビーにセットする	color = 'navy'
＜オプション＞ダークレッド色を使う	color = 'darkred'
実数が整数かどうか調べる	x.is_integer()
耐火レンガ色の線グラフを描画する	plt.plot(データ列, データ列2, color='firebrick')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
グラフの用途を論文に設定する	sns.set(context='paper')
＜オプション＞ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
ヒストグラムを描画してその色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
プラットホームがマック	sys.platform.startswith('darwin')
データフレームを列で集約し、、グループごとの件数を知る	df.groupby(column).size()
タプルを引数として展開して表示する	print(*aTuple)
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
データフレームを'A'列によってソートし、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
2進文字列を整数にする	int(s, 2)
現在の日付時刻	datetime.datetime.today()
リストとイテラブルの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
＜オプション＞マーカーを左三角に変更する	marker = '<'
データフレームから最後の列を除く	df[df.columns[:-1]]
小さい順にデータフレームを破壊的に'A'列で並べる	df.sort_values(by='A', ascending=True, inplace=True)
データ列の中の欠損値の合計を数える	ds.isna().sum()
第一引数で指定したファイルの名前	sys.argv[1]
リストのヒストグラムを描画する	plt.hist(aList)
＜オプション＞モカシン色を使用する	color = 'moccasin'
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
リストと配列の散布図を描き、色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
データフレームの値をValueMapで置換する	df.replace(ValueMap)
ヒストグラムを描画して、その色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
データフレームの指定された名前リストの列だけ取り出す	df[columns]
折れ線グラフを実線で描画する	plt.plot(データ列, データ列2, linestyle='solid')
＜オプション＞カンマを分割記号で使用する	sep = ','
折れ線グラフのバツマーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
行列の行ごとの分散を算出する	np.var(aArray, axis=1)
文字コードで文字列をバイト列にする	s.encode(encoding=encoding)
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
辞書のキーを要素に設定する	aDict[key] = element
ファイルを一行ずつ読み込む	f.readline()
折れ線グラフを描画して、色をシルバーに変更する	plt.plot(データ列, データ列2, color='silver')
データフレームの各次元のサイズを見る	df.shape
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
破線を用いて折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
ファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ヒストグラムを描画して、色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
日付時刻データの月数	aDatetime.month
リストとリストについて散布図を描画して、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
小文字を全て使う	string.ascii_lowercase
ハローワールドとプリントする	print('Hello World')
折れ線グラフを描画して、その色をダークオリーブグリーンに指定する	plt.plot(データ列, データ列2, color='darkolivegreen')
データフレームを複数の列を用いて並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフの色を青に変更する	plt.plot(データ列, データ列2, color='blue')
ヒストグラムの色をミントクリームにする	plt.hist(データ列, color='mintcream')
明るいの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
イテラブルを文字列リストに変換して部分文字列で一つにする	sub.join(map(str, iterable))
セットから全ての要素を消す	aSet.clear()
リストとリストの淡いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
＜オプション＞ゲインズボロ色を用いる	color = 'gainsboro'
タプルの最初を見る	aTuple[0]
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
平均でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].mean())
ファイルを書き込みモードを使ってオープンして]、fとする	f = open(filepath, mode='w')
データ列をビン数nで分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='grey')
データ列の25パーセンタイル	ds.quantile(0.25)
データフレームのn行以降抽出する	df[n:]
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
数式の微分を求める	sympy.diff(e)
折れ線グラフの色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
青いバツ印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
２つのデータフレームをカラムをキーにしてジョインする	pd.merge(df, df2, on=column)
＜オプション＞ブール型を用いる	dtype = np.int32
配列とリストについての散布図を淡い色を使って描画する	plt.plot(xdata, ydata, c='muted')
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
配列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslateblue')
＜オプション＞グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
折れ線グラフの△マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
nからいつまでもカウントアップする	itertools.count(start=n)
＜オプション＞インディゴを使う	color = 'indigo'
折れ線グラフに赤い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
nがn2と等しいか調べる	n == n2
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データフレームを関数でグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
黄色いバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
青い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
ベクトルの差を求める	aArray - aArray2
ふたつの集合の和集合	aSet.union(aSet2)
明るいグラフの色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
双方向キューの要素を左にn個分輪番で回す	deq.rotate(-n)
データ列とリストについての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
折れ線グラフの大バツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
線グラフを描画して、色を真紅に変更する	plt.plot(データ列, データ列2, color='crimson')
文字列はタプルの要素か	element in aTuple
実数の双曲線正接の逆数	math.atanh(x)
TSVファイルを読む	pd.read_csv(filename, sep='\t')
組のn番目からn2番目	aTuple[n:n2]
＜オプション＞ダークグレー色を使う	color = 'darkgray'
タン色の線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
データ列が正規分布からどの程度尖っているか調べる	ds.skew()
一点鎖線にヒストグラムの線のスタイルを設定する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムを描画して、その色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
リストとリストについて散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフを描画して、色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
両端キューをシーケンスから用意する	collections.deque(iterable)
データフレームのリストカラムの値を正規表現でreplに置き換える	df[aList].replace(pattern, repl, regex=True)
プラムにヒストグラムの色をセットする	plt.hist(データ列, color='plum')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
整数nが配列のどれかかどうか調べる	n in aArray
ヒストグラムを描画して、色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
＜オプション＞四角マーカーを描画する	marker = 's'
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフに青い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
グラフのカラーパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
リストの長さnの順列	itertools.permutations(iterable, n)
大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X')
文字列がタプルの要素でないか	element not in aTuple
＜オプション＞色をライトグリーンに設定する	color = 'lightgreen'
データフレームの列がx以下のデータを取り出す	df[df[column] <= x]
データ列と数列の黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
ヒストグラムを描画してその色を暗い赤にする	plt.hist(データ列, color='darkred')
文字列中に非英数字が含まれるか判定する	any(not c.isalnum() for c in s)
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図に赤い左三角マーカーを使用する	plt.plot(xdata, ydata, marker='<', c='r')
ファイルパスからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
＜オプション＞色をアイボリーに指定する	color = 'ivory'
折れ線グラフに緑色の左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
xを整数に変換する	int(x)
ライムにヒストグラムの色を変更する	plt.hist(データ列, color='lime')
データフレームのデータ型の一覧を使う	df.dtypes
折れ線グラフを描画して、その色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
＜オプション＞グラフの色をグリーンに設定する	color = 'green'
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
リスト中の要素が少なくともひとつ真か調べる	any(aList)
nがn2未満、またはn3以上か確認する	n < n2 or n >= n3
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
＜オプション＞パレットトルコイズにグラフの色を設定する	color = 'paleturquoise'
＜オプション＞シアンを用いる	color = 'cyan'
キューの最大長を使う	deq.maxlen
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
＜オプション＞ライトブルー色を使う	color = 'lightblue'
リストとリストの黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
折れ線グラフを描画して、色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
イテラブルをベクトルにする	np.array(iterable)
タプルから項目名の値をエラーなく参照する	aDict.get(key, None)
折れ線グラフを描画して、その色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
＜オプション＞追加モードに設定する	mode = 'a'
ヒストグラムを描画して、その色をライムに設定する	plt.hist(データ列, color='lime')
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
ヒストグラムを描画して、その色をオレンジにセットする	plt.hist(データ列, color='orange')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
折れ線グラフを描画して、その色をダークシアンに指定する	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフを描画して、その色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
＜オプション＞ロージーブラウン色を用いる	color = 'rosybrown'
＜オプション＞グラフの色をライムグリーンに指定する	color = 'limegreen'
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
配列の各要素に加算する	aArray + aArray2
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
グラフのサイズを変更する	plt.figure(figsize=(width, height))
真紅色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
辞書を多重集合に変換する	collections.Counter(aDict)
データフレームのカラムを10の位で丸める	df[col].round(-1)
リストの中の最も小さい値を算出する	min(aList)
濃いグラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
＜オプション＞グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
折れ線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
ファイルの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
＜オプション＞ダークオーキッド色を使う	color = 'darkorchid'
符号付きで整数nを長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
三変数の最小値	min(x, y, z)
折れ線グラフの色を黄色くする	plt.plot(データ列, データ列2, color='y')
データフレームからカテゴリデータの列を取り出す	df.select_dtypes('object')
データフレームの内の欠損値が存在する行を消す	df.dropna()
タイムスタンプを使う	import time
日付時刻データの日付	aDatetime.date()
＜オプション＞データ型を指定する	dtype = np.int32
ビン数nで等量でリストを分割する	pd.qcut(aList, n)
タプルを並べる	sorted(aTuple)
プラットホームはリナックスか判定する	sys.platform.startswith('linux')
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
グラフの横軸の説明をuntitledに指定する	plt.xlabel(untitled)
配列をヒストグラムとして可視化する	plt.hist(aArray)
データフレームのカラムが何月か見る	df[col].dt.month
＜オプション＞オールドレースにグラフの色を設定する	color = 'oldlace'
青い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='b')
折れ線グラフを描画して、色をダークブルーに設定する	plt.plot(データ列, データ列2, color='darkblue')
イテラブルを文字列リストに変換して、'改行を用いて連結する	'\n'.join(map(str, iterable))
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
カラーコードの星マーカーで散布図を描く	plt.plot(xdata, ydata, marker='*', c=rgb)
黒い四角マーカーを配列とリストについての散布図に描く	plt.plot(xdata, ydata, marker='s', c='k')
折れ線グラフのダイアモンドマーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列, データ列2, marker='D')
＜オプション＞グラフの色をグレーに設定する	color = 'gray'
データフレームのNaNを最大値で埋める	df.fillna(df.max())
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームをグループ化し、それぞれの列に対し合計を計算する	df.groupby(column)[column2].sum()
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
＜オプション＞色をバリーウッドに設定する	color = 'burlywood'
集合から任意の要素を取り出す	aSet.pop()
散布図を濃い色のマーカーとしてプロットする	plt.plot(xdata, ydata, c='deep')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
折れ線グラフの△印を緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
＜オプション＞行を自動的な連番に設定する	index_col = None
＜オプション＞青色を用いる	color = 'blue'
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
淡いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
線幅nの三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
文字列の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
ヒストグラムを描画して、その色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
配列の標準偏差	np.std(aArray)
ValueMapでデータフレームのリストカラムの値をまとめて置き換える	df[aList].replace(ValueMap)
二つの実行結果を改行で区切ってプリントする	print(value, value2, sep='\n')
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
データ列とリストについて散布図を描画して、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
黒いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフを描画して、色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
osモジュールをインポートする	import os
数列とリストについて黒色のパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
空の両端キューを作成する	collections.deque()
折れ線グラフの色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
表の列と列を落とす	df.drop([column, column2], axis=1)
＜オプション＞SJISを使う	encoding = 'shift_jis'
オプションで、出力先を標準出力に設定する	file = sys.stdout
最頻値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].mode().iloc[0])
赤いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームのリスト列の記述統計量を算出する	df[aList].describe()
データフレーム全体をインデックスで小さい順にソートする	df.sort_index(ascending=True)
線グラフを描画して、その色をパープルに指定する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフに左三角印を使う	plt.plot(データ列, データ列2, marker='<')
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
両端キューをdequeue	deq.popleft()
バイトオーダを確認する	sys.byteorder
＜オプション＞ダークサーモン色を使う	color = 'darksalmon'
行列の値を求める	aArray[行番号, 列番号]
リストとリストの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
リストを境界値としてリストを分割する	pd.cut(aList, aList)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
色差別ないの折れ線グラフをデータ列と数列で描画して、線幅をnにする	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
ヒストグラムを描画して、その色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
＜オプション＞色をターコイズに設定する	color = 'turquoise'
数式の変数に数式を代入する	e.subs(z, e2)
二つのオブジェクトが等しいか調べる	obj == obj2
データ列と配列の青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
行列を平坦にする	aArray.flatten()
配列のデータ型	aArray.dtype()
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ヒストグラムを描画して、その色をグリーンにする	plt.hist(データ列, color='green')
文字列の大文字小文字をする	s.casefold()
ヒストグラムを描画して、透明度をxに設定する	plt.hist(データ列, alpha=x)
再帰の上限を上げる	sys.setrecursionlimit(1000000)
シーケンスを累積した列を求める	itertools.accumulate(iterable, operator.mul)
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
Pandasで、UNIX秒のデータフレームのcollからタイムスタンプに変換する	pd.to_datetime(df[col], unit='s', utc=True)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストと配列についての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
赤色のクロスマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c='r')
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
赤いダイアモンドマーカーを散布図に使う	plt.plot(xdata, ydata, marker='D', c='r')
文字列を全て小文字にする	s.lower()
辞書にキーが存在する	key in aDict
集合にイテラブルを追加更新する	aSet.update(iterable)
暗い赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
プロットのx軸にuntitledというラベルを設定する	plt.xlabel(untitled)
リストと数列について淡い色の折れ線グラフを描画し、、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
ふたつの関係が真上位集合	aSet > aSet2
＜オプション＞グラフの色をリネンに設定する	color = 'linen'
タプルの最後のn要素を取り除く	aTuple[:-n]
データフレームのカラムの欠損値をメディアンに減らす	df[col].fillna(df[col].median())
ファイルパスからバイナリストリームを開き]、fとする	f = open(filepath, mode='rb')
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
カラーコードの右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
10を底とする小数点数の対数	math.log10(x)
文字列がカタカナかどうか	('ァ' <= ch <= 'ン')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
＜オプション＞色を黄色に指定する	color = 'yellow'
ヒストグラムの色を赤くする	plt.hist(データ列, color='r')
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
折れ線グラフの色をナバホホワイトに指定する	plt.plot(データ列, データ列2, color='navajowhite')
データフレームのカラムの中に日付データがあるか確認する	df[col].isin([value])
リストを黒色にする	f'\033[30m{value}\033[0m'
＜オプション＞フローラルホワイトを用いる	color = 'floralwhite'
折れ線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='turquoise')
整数のn乗	x ** n
＜オプション＞グラフの線種を点線に設定する	linestyle = 'dotted'
ヒストグラムを描画して、その色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
＜オプション＞ラベンダーブラッシュにグラフの色を設定する	color = 'lavenderblush'
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフの上三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
＜オプション＞右三角マーカーを使う	marker = '>'
データフレームの列を丸めて、整数型にする	df[col].round().astype(int)
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
配列の最小値	np.min(aArray)
棒グラフを描き、、xにグラフ幅を設定する	plt.bar(ラベル列, データ列, width=x)
リストの値を取り除く	aList.clear()
nが正の数か確認する	n > 0
緑色の△印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列, データ列2, marker='.')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
折れ線グラフに黄色い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
実数を切り上げる	math.ceil(x)
カラムを丸める	ds.round()
辞書順で文字列は文字列より後か	s > s2
二つのデータフレームを列をキーとして内部ジョインする	pd.merge(df, df2, on=column, how='inner')
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
nとn2が等しいか調べる	n == n2
文字列中の部分文字列の出現をカウントする	s.count(sub)
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
ヒストグラムを描画して、その色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
＜オプション＞グラフの色をミディアムブルーに指定する	color = 'mediumblue'
ヒストグラムを描画してその色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
カウンタを辞書に変換する	dict(aCounter)
データフレームの中に日付データと日付データがある	df.isin([value, value2])
リストを逆順にする	reversed(aList)
リストを等しい量になるようにビン数nでビン分割する	pd.qcut(aList, n)
配列の平均値	np.mean(aArray)
＜オプション＞パープルにグラフの色を設定する	color = 'purple'
散布図に赤い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
リストの要素をクリアにする	aList.clear()
棒グラフを積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
スノーにヒストグラムの色をする	plt.hist(データ列, color='snow')
タイムスタンプデータにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
折れ線グラフを描画してその色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
線グラフを描画して、その色をスノーに指定する	plt.plot(データ列, データ列2, color='snow')
リストとリストの散布図に黒いバツマーカーを描く	plt.plot(xdata, ydata, marker='x', c='k')
n個の整数列を作る	list(range(n))
nをn2で結果の切り上げ	(n + n2 - 1) // n2
＜オプション＞グラフの色をゲインズボロに設定する	color = 'gainsboro'
ヒストグラムを描画して、色を黄色くする	plt.hist(データ列, color='y')
データフレームはどれだけ、分散しているか見る	df.var()
ヒストグラムを描画して、その色を黄色に変更する	plt.hist(データ列, color='yellow')
文字列で区切って二つのリストを表示する	print(value, value2, sep=s)
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
＜オプション＞データ型を指定する	dtype = np.int16
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
線グラフの色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
リストにリストを追加する	aList.extend(aList2)
＜オプション＞ミディアムスレートブルー色を使う	color = 'mediumslateblue'
リストの文字列が最初に見つかるインデックス	aList.index(element)
パステル調のグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
数列とリストの青色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
UNIXコマンドtextを実行する	os.system(text)
プログラムの実行を正しく終了する	sys.exit(0)
散布図にカラーコードの四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c=rgb)
nがn2で割り切れるか調べる	n % n2 == 0
＜オプション＞複数行に対応する	flag = re.MULTILINE
列によってデータフレームを並べ直して、上位n件を取り出す	df.sort_values(columns).head(n)
折れ線グラフの三角印を黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
二次元リストをフラット化する	sum(aList)
Pandasでデータフレームのcollを日付データにする	pd.to_datetime(df[col])
リストとデータ列の折れ線グラフを描いてその色をカラーコードに指定する	plt.plot(xdata, ydata, color=rgb)
ヒストグラムをstartからendの間で描画する	plt.hist(データ列, range=(start, end))
濃いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
実行時の標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
時刻をインポートする	import datetime
ヒストグラムを描画してその色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
プレゼン用にグラフを設定する	sns.set(context='talk')
イテラブルの要素をセットに追加する	aSet.update(iterable)
＜オプション＞ディープスカイブルーを使う	color = 'deepskyblue'
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
キューを要素を出す	deq.popleft()
折れ線グラフに緑色の星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
ファイルを読み込み用にオープンする]	open(filepath, mode='r')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
折れ線グラフを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
文字列はPythonのキーワード	keyword.iskeyword(s)
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
文字列の変数名を数式に変換する	sympy.Symbol(s)
リストとリストの明るいグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
カウンタのそれぞれの項目をそのカウントだけリストとして得る	aCounter.elements()
カウンタの上位を列挙する	aCounter.most_common(k)
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
文字列の中でパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s)
表データの指定された3つの列を取り出す	df[[column, column2, column3]]
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
ヒストグラムを描画して、その色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
文字列の先頭だけ大文字化する	s.capitalize()
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
seabornのデフォルト見栄えを適用する	sns.set()
＜オプション＞スラグレーを使う	color = 'slategrey'
シルバー色の線グラフを描画する	plt.plot(データ列, データ列2, color='silver')
複数行対応として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフを描画して色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
＜オプション＞パレットトルコイズを使う	color = 'paleturquoise'
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
リストとリストの明るいを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
スクリプトファイルと同じディレクトリのファイルのパスを見る	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
シーケンスの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
サブクラスか	issubclass(サブクラス, クラス)
ヒストグラムの色をアクアマリンにする	plt.hist(データ列, color='aquamarine')
ダークシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkseagreen')
ピーチパフ色の線グラフを描画する	plt.plot(データ列, データ列2, color='peachpuff')
折れ線グラフを描画して、その色をマゼンタに指定する	plt.plot(データ列, データ列2, color='magenta')
データ列の中に文字列と文字列がいくつ存在するか数える	ds.isin([value, value2]).sum()
ひとつでも非空白が文字列中にあるか	any(not c.isspace() for c in s)
星マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='*')
箱髭図を横に並べてプロットする	plt.boxplot([データ列, データ列2])
nが1、もしくは2	n == 1 or n == 2
折れ線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
整数nを16進文字列に変換する	hex(n)[2:]
グラフを画面用にする	sns.set(context='notebook')
数を実数で割って切り捨てる	x // y
黒い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
ネイピア数	math.e
整数nの十六進数表記を使う	hex(n)
データフレームのリストカラムの中にある日付データと文字列の合計を数える	df[aList].isin([value, value2]).sum()
ヒストグラムを暗い色で描画する	plt.hist(xdata, color='dark')
nを8進数表現にする	oct(n)
データフレームを各列と列の組み合わせ毎に集約して標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
データフレームのカラムの中に日付データがある	df[col].isin([value])
実数の整数部	math.modf(x)[1]
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
データ列を箱ひげ図でプロットする	plt.boxplot(データ列)
文字列の先頭から部分文字列を見つける	s.find(sub)
＜オプション＞グラフの色をマルーンに設定する	color = 'maroon'
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
0からnまでのスライス	slice(n)
＜オプション＞赤にグラフの色を変更する	color = 'red'
データ列とリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
ヒストグラムを描画して、色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
散布図に黒い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='k')
赤い丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o', c='r')
＜オプション＞濃い青色を用いる	color = 'darkblue'
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
平均と標準偏差から疑似乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
文字列中に部分文字列が含まれるか	sub in s
両端キューをクリアする	deq.clear()
双方向キュー中の要素の数をカウントする	deq.count(element)
year年の日付	datetime.date(year=year, month=1, day=1)
＜オプション＞色をチョコレートに設定する	color = 'chocolate'
配列とリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフのスタイルを破線に変更する	plt.plot(データ列, データ列2, linestyle='dashed')
＜オプション＞ブルーバイオレット色を使う	color = 'blueviolet'
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgrey')
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
三自然数の最大公約数を求める	math.gcd(n, n2, n3)
二つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
＜オプション＞下三角マーカーを加える	marker = 'v'
データ列の曜日数を使う	ds.dt.dayofweek
seabornのデフォルトを適用する	sns.set()
ヒストグラムの線のスタイルを破線に設定する	plt.hist(データ列, linestyle='dashed')
実数が正の数か調べる	x > 0
折れ線グラフを描画してその色をインディゴに指定する	plt.plot(データ列, データ列2, color='indigo')
破壊的に複数の列を用いてデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
要素が集合に含まれる	element in aSet
折れ線グラフを描画して、その色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
データ列をx座標として、折れ線グラフを描く	plt.plot(range(len(xdata)), xdata)
折れ線グラフを描画して、その色をサンディーブラウンに指定する	plt.plot(データ列, データ列2, color='sandybrown')
データフレームのリスト列の中にが存在するか調べる	df[aList].isin([value])
棒グラフの幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
折れ線グラフの色をライトシアンにする	plt.plot(データ列, データ列2, color='lightcyan')
ヒストグラムを描画して、色をピンクに設定する	plt.hist(データ列, color='pink')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
＜オプション＞マゼンタ色を使う	color = 'magenta'
変数がマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, -oo)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
リストとリストについての散布図を暗い色で描く	plt.plot(xdata, ydata, c='dark')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
ヒストグラムを描画して、その色をプラムに変更する	plt.hist(データ列, color='plum')
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
３つの数値を出力する	print(value, value2, value3)
リストと配列のカラーコードの淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
＜オプション＞どのカラムもインデックスに設定しない	index_col = None
nがn2より大きいか調べる	n > n2
文字列の最初から余分な空白を除く	s.lstrip()
折れ線グラフを描画して、その色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
文字列の開始位置と終了位置の間に部分文字列が存在する	s.find(sub, start, end) != -1
データフレームのカラムが何日か見る	df[col].dt.day
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
PandasでUNIX秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
折れ線グラフを描画して、その色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
グラフの横軸のラベルをuntitledに設定する	plt.xlabel(untitled)
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
mathをインポートする	import math
イテラブルを出現回数してカウンタを更新する	aCounter.update(iterable)
折れ線グラフを描画して、色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
データフレームの欠損値を平均で置換する	df.fillna(df.mean())
データフレームをエクセルデータファイルを用いてJSONLファイルに保存する	df.to_excel(filename)
文字列中の部分文字列をカウントする	s.count(sub)
グラフの中の縦軸に軸ラベルを付ける	plt.ylabel(untitled)
数値を簡略にする	sympy.sympify(e)
配列とリストの青い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='midnightblue')
モジュールを検索するパス	sys.path
0からnまでの整数列	list(range(n+1))
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
データフレームのどの値が最も現れるか確認する	df.mode()
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
ヒストグラムの線のスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
折れ線グラフの色をシエナに指定する	plt.plot(データ列, データ列2, color='sienna')
棒グラフを描画する	plt.bar(ラベル列, データ列)
データフレームをTSVから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームのモードを求める	df.mode()
実数のk進対数を求める	math.log(x, k)
縦方向に２つのデータフレームを連結する	pd.concat([df, df2])
文字列を最後の部分文字列で分割したときの前半の文字列を使う	s.rpartition(sub)[0]
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームのリストカラムの未入力値を前の行の値で埋める	df[aList].fillna(method='ffill')
データフレームのリスト列の正規分布に対する左右対称性	df[aList].kurt()
淡いの折れ線グラフをリストと配列を用いて描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
折れ線グラフを描画してその色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
＜オプション＞namesをカラム名に指定する	names = names
全要素を1で初期化されたベクトル	np.ones(要素数, dtype=np.int)
リストとリストで濃いの折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
折れ線グラフのバツ印を青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
本日の日付時刻	datetime.datetime.now()
マッピングから最後の項目をポップする	aDict.popitem()
データフレームのリスト列を整数に丸める	df[aList].round()
Pythonパスにを追加する	sys.path.append(dir)
データフレームのn行目を破壊的に消す	df.drop(n, axis=0, inplace=True)
折れ線グラフを描画してその色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
折れ線グラフを描画して、その色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
ヒストグラムを描画してその色をインディゴに設定する	plt.hist(データ列, color='indigo')
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
＜オプション＞シーグリーンを使う	color = 'seagreen'
16進数の文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	s.rpartition(sub)[-1]
青紫色の線グラフを描画する	plt.plot(データ列, データ列2, color='violet')
追加できるようにファイルを文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
リストと配列の散布図に赤色の左三角マーカーをプロットする	plt.plot(xdata, ydata, marker='<', c='r')
データフレームが正規分布からどれだけ、歪んでいるか確認する	df.kurt()
凡例の位置を指定する	plt.legend(loc=(x, y))
＜オプション＞ミスティローズ色を使う	color = 'mistyrose'
ヒストグラムの線のスタイルを実線に変更する	plt.hist(データ列, linestyle='solid')
折れ線グラフを描画して、その色をサドルブラウンにする	plt.plot(データ列, データ列2, color='saddlebrown')
リストを配列にする	np.array(aList)
明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
折れ線グラフを描画して、その色をリネンに指定する	plt.plot(データ列, データ列2, color='linen')
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
浮動小数点数の平方根	math.sqrt(x)
ポイントマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='.')
文字列中に非アスキー文字が含まれるか	any(not c.isascii() for c in s)
リストの最後のn要素を捨てる	aList[:-n]
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
数列と配列についての散布図をパステル調の色を使って重なりを見やすく描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
表を列名リストの値によってグループ化し要約統計量を求める	df.groupby(columns).describe()
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
綺麗なグラフを描画する	import seaborn as sns
データフレームの欠損値を中央値で補う	df.fillna(df.median())
プロットで日本語フォントを使えるようにする	sns.set(font='IPAexGothic')
折れ線グラフの▼マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
ヒストグラムを描画して、その色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
折れ線グラフに緑色の大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
リストとデータ列の散布図をパステル調の色を使って重なりを見やすくプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
日付時刻データが土曜日	aDatetime.weekday() == 5
nとn2の積を求める	n * n2
配列の型を求める	aArray.dtype()
折れ線グラフを描画して、その色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
実数のアークタンジェント	math.atan(x)
正規表現を事前に複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
文字列はキーワードか調べる	keyword.iskeyword(s)
文字列がタプルの要素か調べる	element in aTuple
ヒストグラムを描画して、その色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
カラーコードの下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
明るいの折れ線グラフの色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
散布図を赤いダイアモンドマーカーで描画する	plt.plot(xdata, ydata, marker='D', c='r')
折れ線グラフを描画して、その色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
リストが空か調べる	len(aList) == 0
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightseagreen'
データ列とイテラブルの散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データフレームの中で、列とカラムに重複があるか見る	df.duplicated(subset=[column, column2])
折れ線グラフを描画して、その色をオリーブにする	plt.plot(データ列, データ列2, color='olive')
グラフをいい感じに設定する	sns.set()
異なる列をキーとして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
文字列の中で正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
実行結果を水色でプリントする	print(f'\033[36m{value}\033[0m')
ヒストグラムを描画してその色をカデットブルーにセットする	plt.hist(データ列, color='cadetblue')
棒グラフを描画し、中央寄せする	plt.bar(ラベル列, データ列, align='center')
線グラフを描画して、色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
n個にデータフレームの中の列を等間隔でビン分割する	pd.cut(df[col], n)
＜オプション＞グリーンイエローに色を設定する	color = 'greenyellow'
データフレームを関数の値でグループ化し、記述統計量を計算する	df.groupby(関数).describe()
データ列を使う	import pandas as pd
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
タイムスタンプデータの時間数	aDatetime.hour
リストの先頭	aList[0]
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
配列と数列についてカラーコードの暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
ヒストグラムを描画して、その色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
折れ線グラフに四角印を使う	plt.plot(データ列, データ列2, marker='s')
＜オプション＞パパイヤウィップ色を用いる	color = 'papayawhip'
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
＜オプション＞珊瑚にグラフの色を設定する	color = 'coral'
データ列を使う	import pandas as pd
折れ線グラフを描画して、その色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
折れ線グラフの色をシスルにセットする	plt.plot(データ列, データ列2, color='thistle')
リストとリストの折れ線を描いて、色をカラーコードにする	plt.plot(xdata, ydata, color=rgb)
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
文字列を記号に変換する	sympy.Symbol(s)
ピアソンとしてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='pearson')
スチールブルーにヒストグラムの色を変更する	plt.hist(データ列, color='steelblue')
＜オプション＞ディムグレー色を使用する	color = 'dimgrey'
線グラフを描画して、その色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
グラフのフォントを日本語に指定する	sns.set(font='IPAexGothic')
データフレームのn行以降取り出す	df[n:]
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
オブジェクトがクラスかどうか	isinstance(obj, クラス)
ファイルを開く]	open(filepath)
ファイルパスを書き込みモードでオープンする]	open(filepath, mode='w')
データフレームを各列と列の組み合わせ毎に集計して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
＜オプション＞ダークグレー色を使用する	color = 'darkgrey'
等差数列から整数乱数を計算する	random.randrange(start, end, step)
リストとリストのパステル調のグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
散布図に黒い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
ヒストグラムを描画して、色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategray')
文字列の末尾	s[-1]
実数に実数を加える	x + y
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
リストと数列について散布図を描き、、星マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='*', c=rgb)
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
データフレームからn行、サンプリングする	df.sample(n)
ファイルからn文字、読み込む	f.read(n)
nが何桁か	len(str(n))
双方向キューの末尾に列の各要素を追加する	deq.extend(iterable)
プラットフォームの符号付き整数の最大値	sys.maxsize
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
線グラフを描画して、その色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
リストとデータ列で折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
ヒストグラムを描画してその色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
Pandasで、データフレームのcollのUNIX時間から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムを描画して、その色をブラックに設定する	plt.hist(データ列, color='black')
ヒストグラムを描画してその色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
nullに等しい値	None
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
文字列の中でケースを無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフに大きさnのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
リストとデータ列についての散布図に黒いダイアモンドマーカーを描く	plt.plot(xdata, ydata, marker='D', c='k')
0で全要素を初期化された行列を作る	np.zeros(要素数)
＜オプション＞色をゴールドに設定する	color = 'gold'
グラフの用途をポスターに設定する	sns.set(context='poster')
リストと数列についての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
データフレームから指定した三つの列のみ取り出す	df[[column, column2, column3]]
文字列リストにシーケンスを変換して'改行によって連結する	'\n'.join(map(str, iterable))
行列の最小	np.min(aArray)
角度のラジアン	math.radians(degree)
紺色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
nの無限整数イテラブル	itertools.repeat(n)
イテラブルを文字列リストに変換して空白でつなげる	' '.join(map(str, iterable))
オブジェクトがリストの要素でないかどうか調べる	element not in aList
２つの文字列をプリントする	print(value, value2)
データフレームを各列毎にグループ分けして、列の標準偏差を求める	df.groupby(column)[column2].std()
セットが空	len(aSet) == 0
要素ひとつのタプル	(element,)
nとkのコンビネーションを求める	math.comb(n, k)
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
リストの変化を折れ線に描画する	plt.plot(range(len(xdata)), xdata)
文字列の無限イテラブル	itertools.repeat(element)
カウンタをリストに変換する	list(aCounter)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
リストとデータ列についての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
＜オプション＞白を使う	color = 'white'
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgray'
大きい順に'A'列によってでデータフレームをソートする	df.sort_values(by='A', ascending=False)
1行標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
＜オプション＞グラフの色を濃いシアンに指定する	color = 'darkcyan'
データフレームを表示するとき、表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
データフレームの行を範囲指定して取り出す	df[start:end]
フクシア色の線グラフを描画する	plt.plot(データ列, データ列2, color='fuchsia')
リストとデータ列の散布図に赤い大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X', c='r')
日付データが木曜日か	aDate.weekday() == 3
ヒストグラムの色をオレンジにする	plt.hist(データ列, color='orange')
淡い色のマーカーで散布図を重なりを見やすくプロットする	plt.plot(xdata, ydata, c='muted', alpha=0.5)
タプルをカウンタにする	collections.Counter(aDict)
nを8進表現に変換する	oct(n)
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
列を等量で分割数nとしてビン分割する	pd.qcut(ds, n)
線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
線グラフの色をオールドレースに変更する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフを描画して、その色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
文字列内に数字が含まれるかどうか調べる	any(c.isdigit() for c in s)
文字列の末尾が部分文字列かどうか調べる	s.endswith(sub)
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
プロットの中に枠なしの補足を入れる	plt.legend(frameon=False)
線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
双方向キュー	collections.deque()
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
データフレームのカラムの文字列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
２つの最小の値	min(x, y)
＜オプション＞グラフの色をマゼンタに設定する	color = 'magenta'
枠なしの凡例を描画する	plt.legend(frameon=False)
パステル調のグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
日付時刻データが何秒か知る	aDatetime.second
データフレームのリスト列の欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
リストとリストの散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
ロージーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='rosybrown')
イテラブルのコンビネーション	itertools.combinations(iterable, n)
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
オブジェクトが文字列型か	isinstance(obj, str)
データフレームを列でグループ分けしてそれぞれのグループごとの件数を知る	df.groupby(column).size()
データフレームのカラムの曜日数	df[col].dt.dayofweek
＜オプション＞サーモン色を使用する	color = 'salmon'
＜オプション＞紺碧を使う	color = 'azure'
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
両端キューを空にする	deq.clear()
タプルの平均値	sum(aTuple)/len(aTuple)
＜オプション＞エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
最大長のある両端キューを作成する	collections.deque(maxlen=n)
＜オプション＞色をライトグリーンに変更する	color = 'lightgreen'
行列の行列積	np.matmul(aArray, aArray2)
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
数字を全て使う	string.digits
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
ダークグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgreen')
赤い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
大文字を全部使う	string.ascii_uppercase
散布図に赤色の丸マーカーを用いる	plt.plot(xdata, ydata, marker='o', c='r')
赤色のダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
列をキーとして２つのデータフレームを結合する	pd.merge(df, df2, on=column)
リストとリストについて散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
＜オプション＞文字列を分割記号で使う	sep = s
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgray')
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
＜オプション＞ペルー色を使う	color = 'peru'
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
横棒を描いて、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
ヒストグラムでカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
文字列中に部分文字列が含まれる	sub in s
データフレームを列によって並べる	df.sort_values(by=column)
辞書に項目名ワード引数を用いて更新する	aDict.update(**kwargs)
データフレームから指定された二つの列のみ取り出す	df[[column, column2]]
小数点数が無限大	math.isinf(x)
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
集合をイミュータブルな集合に変換する	frozenset(aSet)
透明度alphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
符号付き整数の最大値	sys.maxsize
データフレームの中にある文字列の数をカウントする	df.isin([value]).sum()
カウンタから辞書を引く	aCounter.subtract(aDict)
折れ線グラフの色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
＜オプション＞グラフの色をペールグリーンに設定する	color = 'palegreen'
ヒストグラムを描画して色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
散布図に星マーカーを使う	plt.plot(xdata, ydata, marker='*')
データフレームを昇順に破壊的に２つの列によって整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
データ列の曜日数	ds.dt.dayofweek
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*')
データフレームのリストカラムのモードを求める	df[aList].mode()
濃い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<')
ファイルをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
＜オプション＞ダークターコイズを使う	color = 'darkturquoise'
スノーにヒストグラムの色を指定する	plt.hist(データ列, color='snow')
整数nのビット長	n.bit_length()
データフレームのカラムの中にある文字列の合計を求める	df[col].isin([value]).sum()
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
データ列の未入力値を直後の値で埋める	ds.fillna(method='bfill')
＜オプション＞グラフの色をダークオーキッドに設定する	color = 'darkorchid'
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
データフレームを用いる	import pandas as pd
双方向キューの中に値がある	element in deq
＜オプション＞ディムグレーを使用する	color = 'dimgray'
データ列とラベル列を指定して、積み上げ棒を描く	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
ベクトルが何のデータ型か	aArray.dtype()
折れ線グラフの色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
配列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
パステル調の色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データ列と数列でパステル調のグラフを描き、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列, データ列2, color='blanchedalmond')
＜オプション＞グラフの色をグレーにセットする	color = 'grey'
ヒストグラムを描画して、その色を青に変更する	plt.hist(データ列, color='blue')
データフレームを列によって集約して、各グループ毎の平均値を算出する	df.groupby(column).mean()
スレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slateblue')
数列とイテラブルの散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
茶色色の線グラフを描画する	plt.plot(データ列, データ列2, color='brown')
＜オプション＞オレンジ色を使用する	color = 'orange'
文字列内にひとつでも英数字がある	any(c.isalnum() for c in s)
eの実数乗	math.exp(x)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
＜オプション＞ダークスラテグレー色を使用する	color = 'darkslategray'
ダークカーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkkhaki')
データフレームから重複した行を残さず削除する	df.drop_duplicates(keep=False)
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
散布図に暗い色のマーカーを使う	plt.plot(xdata, ydata, c='dark')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
nからn2の範囲	range(n, n2)
双方向キューから最初のデータを削除する	deq.remove(element)
表データの列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegoldenrod')
配列の要素ごとに加算する	aArray + aArray2
ヒストグラムの色をゴールドに変更する	plt.hist(データ列, color='gold')
プラットホームがWindowsかどうか確認する	sys.platform.startswith('win32')
有理数モジュールをインポートする	import fractions
シーケンスから一つランダムに選ぶ	random.choice(iterable)
行列の演算を行う	import numpy as np
データフレームを各列毎にグループ化し、、列の標準偏差を求める	df.groupby(column)[column2].std()
配列を累積する	itertools.accumulate(iterable, operator.mul)
ヒストグラムを描画して色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
カラムの名前なしでTSVを読み込む	pd.read_csv(filename, header=None)
線幅nの折れ線グラフを描画する	plt.plot(xdata, ydata, linewidth=n)
＜オプション＞インディゴ色を使う	color = 'indigo'
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgray')
線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
＜オプション＞グラフの色をゴールドに設定する	color = 'gold'
Pandasでデータフレームのカラムをdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()
リストとイテラブルの散布図を描いて、ポイントマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='.', c=rgb)
マップのコピーを生成する	aDict.copy()
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
実数を２乗する	x ** 2
ロードされたモジュールの一覧を知る	sys.modules
浮動小数点数の最小値	sys.float_info.min
ヒストグラムを描画して、その色を青緑に設定する	plt.hist(データ列, color='teal')
データフレームの列が正規分布からどの程度、尖っているか調べる	df[col].skew()
折れ線グラフを描画して、色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
折れ線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
イテラブルを文字列リストに変換して、カンマを用いて連結する	','.join(map(str, iterable))
部分文字列が文字列の終了位置より前に存在しない	s.find(sub, 0, end) == -1
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
数式の変数を数式で置き換える	e.subs(z, e2)
1行だけ標準入力から読み込む	sys.stdin.readline()
2つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
リストとリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
イテラブルとリストの散布図を描いて文字列という凡例用のラベルをつける	plt.scatter(xdata, xdata, label=s)
文字列の右側から空白を取り除く	s.rstrip(' ')
折れ線グラフを描画して、その色をペールグリーンに変更する	plt.plot(データ列, データ列2, color='palegreen')
二つの変数を同じ値にする	x = y = n
データフレームの列の標本標準偏差	df[col].std()
データフレームを表示するとき小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
＜オプション＞読み込むシート名をnamesに変更する	sheet_name = names
データ列の欠損値を最小値に増やす	ds.fillna(ds.min())
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
イテラブルから両端キューを作る	collections.deque(iterable)
データフレームを'A'列と'B'列でソートし、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームから指定された列名一覧の列を選択する	df[columns]
＜オプション＞ミントクリームにグラフの色を設定する	color = 'mintcream'
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
データフレームの値が欠損値か調べる	df.isna()
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
マッピングからカウンタを作る	collections.Counter(aDict)
nが一桁の整数かどうか確認する	0 <= n <= 9
線グラフの色をパウダーブルーに変更する	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフの色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
＜オプション＞グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
＜オプション＞イエローグリーン色を用いる	color = 'yellowgreen'
＜オプション＞グラフの色をオリーブに変更する	color = 'olive'
ヒストグラムの色を貝殻にする	plt.hist(データ列, color='seashell')
＜オプション＞サドルブラウンにグラフの色を指定する	color = 'saddlebrown'
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
＜オプション＞スカイブルーにグラフの色を指定する	color = 'skyblue'
線グラフの色を淡いピンク色に指定する	plt.plot(データ列, データ列2, color='lightpink')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
折れ線グラフを描画して、色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
ヒストグラムを描画して色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
散布図をカラーコードの左三角マーカーで描く	plt.plot(xdata, ydata, marker='<', c=rgb)
配列の形状を変形する	aArray.reshape(行数, 列数)
サーモンにヒストグラムの色をする	plt.hist(データ列, color='salmon')
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
折れ線グラフを描画して、その色をフクシアに指定する	plt.plot(データ列, データ列2, color='fuchsia')
データフレームを各列と列の組み合わせ毎にグループ分けして、個数を計算する	df.groupby([column, column2], as_index=False).count()
折れ線グラフに大きさnの▲印を描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
データ列の母標準偏差	ds.std(ddof=0)
グラフの描画で明るいカラーパレットを使う	sns.set(pallete='bright')
折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
数列とリストで折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
二ベクトル間のユークリッド距離	math.dist(point, point2)
最小値でデータフレームの欠損値を補う	df.fillna(df.min())
折れ線グラフに黄色い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
リストとリストの折れ線グラフを描画して、色を文字列に変更する	plt.plot(xdata, ydata, color=s)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
データフレームとデータ列を横向きに合体させる	pd.concat([df, ds], axis=1)
nがn2以下または、n3以上か調べる	n <= n2 or n >= n3
エクセルデータファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
列にリストを続ける	itertools.chain(iterable, iterable2)
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データ列とリストの散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフに黒い三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
線グラフを描画して、その色をラベンダーにする	plt.plot(データ列, データ列2, color='lavender')
＜オプション＞文字コードをUTF8に変更する	encoding = 'utf-8'
最大長nのキューをリストから作る	collections.deque(iterable, maxlen=n)
ヒストグラムを描画して、その色をラベンダーに指定する	plt.hist(データ列, color='lavender')
データフレームを'A'列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームの列の平均値	df[col].mean()
折れ線グラフに黄色いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
データフレームのリストカラムの値を正規表現でまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
タプル中の要素が少なくともひとつ真か調べる	any(aTuple)
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
黒い星マーカーを散布図に使う	plt.plot(xdata, ydata, marker='*', c='k')
datetime64型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
グラフの描画で淡いカラーパレットを使う	sns.set(pallete='muted')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
アンティークホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='antiquewhite')
＜オプション＞ミッドナイトブルーを使用する	color = 'midnightblue'
ヒストグラムの色をペルーに変更する	plt.hist(データ列, color='peru')
ケンドールを用いてデータフレームの相関行列	df.corr(method='kendall')
ヒストグラムを描画して、その色をグリーンに設定する	plt.hist(データ列, color='green')
グラフ中の(x,y)の位置に凡例を入れる	plt.legend(loc=(x, y))
組をnからナンバリングする	enumerate(aTuple, start=n)
両端キューの先頭	deq[0]
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
タイムスタンプデータがタイムスタンプデータより後ろかどうか	aDatetime > aDatetime2
ASCII限定としてパターンで文字列を分割する	re.split(pattern, s, flags=re.ASCI)
日付データをISO形式の文字列にする	aDate.isoformat()
グラフに鉛直方向の実線を設定する	plt.axvline(x=0, linestyle='solid')
文字列を部分文字列で二分し前半の文字列を使う	s.partition(sub)[0]
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
ヒストグラムを描画して、その色をバリーウッドにセットする	plt.hist(データ列, color='burlywood')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
データフレームの列の標準偏差を計算する	df[col].std()
n÷n2	n / n2
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
部分集合か	aSet.issubset(aSet2)
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
＜オプション＞グラフの色をミディアムブルーにする	color = 'mediumblue'
線グラフを描画して、その色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
黒いポイント印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
線グラフの色を茶色に変更する	plt.plot(データ列, データ列2, color='brown')
列によってデータフレームをグループ化し、要約統計量を計算する	df.groupby(column).describe()
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列, データ列2, color='antiquewhite')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
＜オプション＞ネイビーを使う	color = 'navy'
部分文字列が部分文字列で始まる	s.startswith(sub)
データフレームのカラムの欠損値を平均値に指定する	df[col].fillna(df[col].mean())
グリーンイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='greenyellow')
データフレームから列を二つだけ選択する	df[[column, column2]]
直前の値でデータ列の欠損値を補う	ds.fillna(method='ffill')
日付時刻データが金曜日かどうか調べる	aDatetime.weekday() == 4
データフレームの列の中に存在する文字列との合計をカウントする	df[col].isin([value, value2]).sum()
データフレームのカラムの中に含まれると日付データの数を数える	df[col].isin([value, value2]).sum()
配列とイテラブルについてカラーコードの濃いをプロットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
要素がセットに含まれないかテストする	element not in aSet
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
nで乱数シードを固定する	random.seed(n)
＜オプション＞グラフの色をトマトに設定する	color = 'tomato'
＜オプション＞ダークスレートブルーを使う	color = 'darkslateblue'
カウンタの項目をリストとして得る	aCounter.keys()
＜オプション＞グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
nがn2の倍数か	n % n2 == 0
1行標準入力から改行なしに読み込む	sys.stdin.readline().rstrip()
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
カラムのモードを求める	ds.mode()
折れ線グラフに黄色い▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
散布図を赤色の△マーカーで描画する	plt.plot(xdata, ydata, marker='^', c='r')
タプル内の要素が全て真か調べる	all(aTuple)
ダークターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkturquoise')
ヒストグラムを描画して、その色をサーモンに設定する	plt.hist(データ列, color='salmon')
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
データフレームのリスト列はどの程度、分散しているか見る	df[aList].var()
部分集合か調べる	aSet.issubset(aSet2)
暗いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
リストとデータ列の散布図を描画し、、マーカーをポイントに指定する	plt.plot(xdata, ydata, marker='.')
折れ線グラフの右三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
データフレームの列の欠損値を平均に設定する	df[col].fillna(df[col].mean())
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
ヒストグラムを描画してその色をターコイズに指定する	plt.hist(データ列, color='turquoise')
実数の正接	math.tan(x)
折れ線グラフを描画して、その色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
ヒストグラムを描画して、その色をダークレッドに設定する	plt.hist(データ列, color='darkred')
データ列とイテラブルについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
折れ線グラフを描画して、色をローングリーンに指定する	plt.plot(データ列, データ列2, color='lawngreen')
積み上げ棒グラフを描く	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
文字列中にひとつでも非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
＜オプション＞インディアンレッドを使う	color = 'indianred'
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
リストを分割数nでビン分割する	pd.cut(aList, n)
グラフで利用可能な色名の一覧を使う	matplotlib.colors.cnames
実数の双曲線余弦を求める	math.cosh(x)
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列, データ列2, color='mediumturquoise')
データフレームの尖度	df.skew()
原点から(実数,y)の距離	math.hypot(x, y)
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
TSVファイルを文字化けしないように読む	pd.read_csv(filename, encoding='shift_jis')
データ列の欠損値を平均で埋める	ds.fillna(ds.mean())
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
ヒストグラムを描画して、その色をバイオレットに設定する	plt.hist(データ列, color='violet')
データ列の秒	ds.dt.second
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
日付時刻データは日付時刻データより先か調べる	aDatetime < aDatetime2
浮動小数点数の正弦の逆数を計算する	math.asin(x)
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
グラフを色差別なくする	sns.set(pallete='colorblind')
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
色テーマを淡くする	sns.set(pallete='muted')
表データの重複した行を数える	df.duplicated().sum()
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
ヒストグラムを描画して、その色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
nilに等しい値	None
縦棒グラフを描く	plt.bar(ラベル列, データ列)
リストと配列で折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n)
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
ふたつの集合の和集合を求める	aSet.union(aSet2)
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
ヒストグラムを描画して、その色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
リストとリストの暗いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
nの二進リテラル	bin(n)
データフレームのカラムが正規分布からどの程度歪んでいるか確認する	df[col].kurt()
小数点数のコサイン	math.cos(x)
配列と配列について散布図を描画してマーカーを菱形に設定する	plt.plot(xdata, ydata, marker='D')
表データの中で、列に重複があるか確認する	df.duplicated(subset=column)
二点間のユークリッド距離	math.dist(point, point2)
＜オプション＞印をバツに変更する	marker = 'x'
数を浮動小数点数で割る	x / y
＜オプション＞ライトシアン色を用いる	color = 'lightcyan'
ヒストグラムを描画して、その色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
nを否定する	not n
実数を複素数にする	complex(x)
データ列と配列の青色の濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
変数をプリントする	print(value)
文字列を部分文字列で区切って、列挙する	s.split(sub)
黒い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
＜オプション＞色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
ヒストグラムを描画して、その色をシアンに設定する	plt.hist(データ列, color='cyan')
ヒストグラムを描画して、その色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
自然数個のものからk個取り出したときの並べ方	math.perm(n, k)
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
今日の年数	datetime.datetime.today().year
長さnのリスト	[0] * n
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
折れ線グラフの左三角印を黒くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
双方向キュー中の数値の位置を見る	deq.index(element)
文字列を左寄せにする	s.ljust(文字列幅)
リストをnからナンバリングする	enumerate(aList, start=n)
イテラブルとリストについて散布図を描画してマーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
＜オプション＞色を青紫に設定する	color = 'violet'
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームの値を正規表現patternでreplに置き換える	df.replace(pattern, repl, regex=True)
実数を実数で割る	x / y
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
アヤメのデータセットをロードする	sns.load_dataset('iris')
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
＜オプション＞ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
本日が火曜日	datetime.datetime.today().weekday() == 1
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
画面用にグラフを設定する	sns.set(context='notebook')
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
リストとリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
プラットホームがLinux	sys.platform.startswith('linux')
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
配列とイテラブルの折れ線グラフをプロットして色を文字列に変更する	plt.plot(xdata, ydata, color=s)
配列を明るい色のヒストグラムとして描く	plt.hist(xdata, color='bright')
＜オプション＞グリーンに色をセットする	color = 'green'
オブジェクトはタプルか調べる	isinstance(obj, tuple)
グラフの背景色を白くする	sns.set(style='whitegrid')
線グラフを描画してその色をダークオーキッドにセットする	plt.plot(データ列, データ列2, color='darkorchid')
日付データは日付データより前か調べる	aDate < aDate2
ハニーデュー色の線グラフを描画する	plt.plot(データ列, データ列2, color='honeydew')
データフレームの列がxより大きくx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
白色で文字列を出力する	print(f'\033[37m{value}\033[0m')
データフレームの中の列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
リストについての柱状図をパステル調の色で描画する	plt.hist(xdata, color='pastel')
ヒストグラムを描画して、その色をプラムに設定する	plt.hist(データ列, color='plum')
明るいグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategrey')
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
文字列の中で複数行対応としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
オブジェクトはリストの要素でない	element not in aList
スチールブルーにヒストグラムの色をする	plt.hist(データ列, color='steelblue')
実数の余弦の逆数	math.acos(x)
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
ヒストグラムを描画してその色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
リストとリストについて散布図を描画して、三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
折れ線グラフを描画して、その色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
淡い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
＜オプション＞スプリンググリーン色を使用する	color = 'springgreen'
グラフを使う準備をする	from sympy import N
データフレームを各カラムと列の組み合わせ毎に集計し、、分散を算出する	df.groupby([column, column2], as_index=False).var()
日付データが土曜日	aDate.weekday() == 5
データ列を千の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
両端キューの末尾を求める	deq[-1]
標準入力を使用する	sys.stdin
2つのオブジェクトが同一か	obj is obj2
項目名が辞書上で定義済み	key in aDict
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
列のユニークな値の個数	ds.nunique()
ファイルを開いて]、書き込みストリームを求める	open(filepath, mode='w')
数列と配列の折れ線グラフを描画し、、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
＜オプション＞グラフの種類を点線に変更する	linestyle = 'dotted'
ヒストグラムを描画して、その色をオリーブに設定する	plt.hist(データ列, color='olive')
実数を実数で割って、切り捨てる	x // y
代数計算を使う	import sympy
最大値・最小値の範囲で一様な乱数を発生させる	random.uniform(最小値, 最大値)
nを半分にする	n /= 2
リストとイテラブルについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
折れ線グラフを描画して、その色をライトイエローにする	plt.plot(データ列, データ列2, color='lightyellow')
ヒストグラムを描画して、その色をマゼンタに設定する	plt.hist(データ列, color='magenta')
文字列の先頭から不要な空白やタブを取り除く	s.lstrip()
行列の逆行列	np.linalg.inv(aArray)
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumorchid')
列によって表データを並べ、、新しい行を加える	df.sort_values(columns).reset_index()
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
ヒストグラムの色をロージーブラウンに変更する	plt.hist(データ列, color='rosybrown')
＜オプション＞グラフの色をターコイズに指定する	color = 'turquoise'
スピアマン順位相関係数としてデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='spearman')
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
整数nの16進リテラルを見る	hex(n)
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
辞書にマップの項目を追加する	aDict.update(aDict2)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
データフレームのカラムが何月か確認する	df[col].dt.month
＜オプション＞グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
折れ線グラフの左三角マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
文字列からformatのパターンでタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
リストとリストのパステル調のグラフを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフのマーカーを下三角にする	plt.plot(データ列, データ列2, marker='v')
配列の列ごとの平均	np.mean(aArray, axis=0)
データフレームから指定されたデータ型の列名一覧	df.select_dtypes(型).columns
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
部分文字列が文字列の開始位置からと終了位置までの間に含まれないか調べる	s.find(sub, start, end) == -1
折れ線グラフを描画して色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
デックのstart番目からend番目の値	collections.deque(itertools.islice(deq, start, end))
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
タプルを浅くコピーする	aDict.copy()
データフレームで列の重複を確認する	df.duplicated(subset=column)
データフレームを各列と列の組み合わせ毎にグループ分けし、、最大値を算出する	df.groupby([column, column2], as_index=False).max()
文字列を部分文字列で分割する	s.split(sub)
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
整数のGCDを求める	math.gcd(n, n2)
データフレームから一番左側の列を消す	df[df.columns[1:]]
ヒストグラムを描画して、その色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
文字列を黄色化する	f'\033[33m{value}\033[0m'
nがn2で割り切れないかテストする	n % n2 != 0
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ふたつの集合の対称差を求める	aSet.symmetric_difference(aSet2)
リストのすべての値をクリアにする	aList.clear()
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
データフレームから重複した行を削除する	df.drop_duplicates()
連立方程式を解く	sympy.solve([e, e2])
実数のn乗	pow(x, n)
タイムスタンプデータを浮動小数点数にする	aDatetime.timestamp()
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=n)
折れ線グラフに星印を用いる	plt.plot(データ列, データ列2, marker='*')
実数を千の位で丸める	round(x, -3)
部分文字列が文字列中に含まれないかどうか調べる	sub not in s
実数が無限大か	math.isinf(x)
折れ線グラフを描画して、色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
実数を文字列にする	str(x)
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
全要素を０で初期化した三二ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int16)
タプルのエントリを列挙する	aDict.values()
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
データフレームの中で、列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
データフレームのカラムの平均値	df[col].mean()
データフレームの列のNaNを中央値で埋める	df[col].fillna(df[col].median())
ミディアムパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumpurple')
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
文字列の最初	s[0]
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
空白文字	' '
＜オプション＞バッファのサイズを設定する	buffering = 4096
データ列とリストの折れ線を描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
＜オプション＞色をオレンジレッドに指定する	color = 'orangered'
データフレームのカラムを型にする	df[col] = df[col].astype(ty)
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
数式を方程式として解く	sympy.solve(e)
標準出力のバッファを強制表示する	sys.stdout.flush()
組の中の最大値を計算する	max(aTuple)
散布図にバツマーカーを使う	plt.plot(xdata, ydata, marker='x')
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
濃い色として散布図を描画する	plt.plot(xdata, ydata, c='deep')
暗いとしてイテラブルについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
グラフの描画で濃いカラーパレットを使う	sns.set(pallete='deep')
nをn2倍にする	n *= n2
折れ線グラフの星マーカーを緑色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
折れ線グラフを描画して、その色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
＜オプション＞グラフの色をアクアに設定する	color = 'aqua'
列でデータフレームをソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
暗い色を使って散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームの値が欠損値かどうか調べる	df.isna()
文字列を新しい文字列によって全部置換する	s.replace(sub, newsub)
nがn2以上か調べる	n >= n2
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
線グラフを描画して、その色をライトシアンに変更する	plt.plot(データ列, データ列2, color='lightcyan')
リストと数列についての散布図に赤色の菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
データフレームの列概要を見る	df.info()
実数を小数点以下第一位で丸める	round(x, 1)
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
nにn2を足して代入する	n += n2
横棒を描画して、xに棒の幅を設定する	plt.barh(ラベル列, データ列, width=x)
配列とリストについてカラーコードのパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
等差数列を配列に変換する	np.arange(開始値, 終端値, 等差)
＜オプション＞スラグレー色を使う	color = 'slategray'
折れ線グラフを描画して、色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
データ列をヒストグラムで可視化する	plt.hist(ds)
空の集合	set()
カウンタをイテラブルとして更新する	aCounter.update(iterable)
データフレームを列によって集約して、それぞれのグループ毎の平均値を求める	df.groupby(column).mean()
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
折れ線グラフを描画して、色を赤くする	plt.plot(データ列, データ列2, color='r')
リストとリストについて色差別ない色の折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ファイルパスのファイル名	os.path.basename(filepath)
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
集合が空集合でないかどうか調べる	len(aSet) != 0
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
ヒストグラムを描画してその色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
＜オプション＞色をバリーウッドに変更する	color = 'burlywood'
リストとデータ列について濃いグラフを描画し、、色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
第二コマンド引数	sys.argv[1]
カラムの欠損値を最大値で補う	ds.fillna(ds.max())
本日が木曜日か	datetime.datetime.today().weekday() == 3
全要素を０で初期化された3二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
nはリストのどれか	n in aList
＜オプション＞整数型を使う	dtype = np.int
リストとリストについて破線グラフを描画してその色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
データ列は何分か調べる	ds.dt.minute
リストとリストについて明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
データフレームの中の列をビン数nでビンニングする	pd.cut(df[col], n)
ヒストグラムを描画して、色を黄色にする	plt.hist(データ列, color='yellow')
折れ線グラフの丸印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
文字列中にひとつでも非数字があるかどうか調べる	any(not c.isdigit() for c in s)
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
ヒストグラムを描画して、色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
SJISで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='shift_jis')
現在のエポックタイム	int(time.time())
＜オプション＞アクアマリンを使用する	color = 'aquamarine'
データ列を折れ線グラフに描画して、マーカーをダイアモンドにする	plt.plot(データ列, データ列2, marker='D')
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
右三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='>')
黒い左三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='<', c='k')
データフレームを'A'列を用いてで破壊的にソートする	df.sort_values(by='A', inplace=True)
エクセルファイルファイルから全シートを読み込む	pd.read_excel(filename, sheet_name=None)
折れ線グラフを描画して、その色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
数字を全部使う	string.digits
データフレームの欠損値を後の値で埋める	df.fillna(method='bfill')
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
変数について数式を積分する	sympy.integrate(e, z)
＜オプション＞グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
実数が整数か調べる	x.is_integer()
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategrey')
＜オプション＞グラフの色をインディゴに設定する	color = 'indigo'
二つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
色差別ない色で散布図をプロットする	plt.plot(xdata, ydata, c='colorblind')
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
両端キューの最後に要素を追加する	deq.append(element)
文字列をセンタリングにする	s.center(文字列幅)
nが一桁の数かどうか	-9 <= n <= 9
双方向キューの先頭	deq[0]
オブジェクトは辞書か調べる	isinstance(obj, dict)
＜オプション＞バッファリングのサイズを指定する	buffering = 4096
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列, データ列2, color='lavender')
リストを太字でプリントする	print(f'\033[1m{value}\033[0m')
リストとリストの青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
本日が何月か知る	datetime.datetime.today().month
リストの最初を除く	aList[1:]
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
リストと配列についての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
＜オプション＞ゲインズボロに色を設定する	color = 'gainsboro'
データ列の下位25%	ds.quantile(0.75)
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
＜オプション＞グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
ネイビー色の線グラフを描画する	plt.plot(データ列, データ列2, color='navy')
ヒストグラムを描画する	plt.hist(データ列)
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
横棒グラフを描画し、、中央寄せする	plt.barh(ラベル列, データ列, align='center')
＜オプション＞読み込みモードに設定する	mode = 'r'
オブジェクトはクラス	isinstance(obj, クラス)
＜オプション＞色をシーグリーンに指定する	color = 'seagreen'
折れ線グラフに緑色のダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
オブジェクトが数値	isinstance(obj, (int,float))
最小値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].min())
イテラブルを文字列に変換して一つにする	''.join(map(str, iterable))
プロットの描画で濃い色テーマを使う	sns.set(pallete='deep')
配列と配列のカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
縦方向に2つのデータフレームを連結する	pd.concat([df, df2], axis=0)
実数のk進対数	math.log(x, k)
イテラブルから重複を取り除く	set(iterable)
散布図に黒い左三角マーカーを用いる	plt.plot(xdata, ydata, marker='<', c='k')
折れ線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフを描画して、色をシーグリーンに指定する	plt.plot(データ列, データ列2, color='seagreen')
グラフで日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームの列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
＜オプション＞スチールブルー色を用いる	color = 'steelblue'
グラフの描画でパステル調のカラーパレットを使用する	sns.set(pallete='pastel')
リストとリストを連結する	aList + aList2
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
青緑色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
要素∈集合	element in aSet
明るい色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
オブジェクトが関数か調べる	callable(obj)
＜オプション＞ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
文字の文字コード	ord(ch)
リストと数列についての散布図を淡い色を用いて描画する	plt.plot(xdata, ydata, c='muted')
スレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='slateblue')
＜オプション＞色をダークグリーンにセットする	color = 'darkgreen'
組は全て真かどうか確認する	all(aTuple)
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフのスタイルを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
既存の行列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
折れ線グラフを描画して、その色を青に設定する	plt.plot(データ列, データ列2, color='blue')
ヒストグラムを描画して、その色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
リストとリストについての散布図を大きさnでプロットする	plt.scatter(xdata, ydata, s=n)
文字列中の文字を列挙する	list(s)
predicateFuncがTrueとなるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
＜オプション＞色をミディアムアクアマリンにする	color = 'mediumaquamarine'
データフレームを各列毎にグループ化し、、列の合計を求める	df.groupby(column)[column2].sum()
文字列全体が正規表現に複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
＜オプション＞グラフの色をピーチパフに設定する	color = 'peachpuff'
＜オプション＞欠損値を先頭にする	na_position = 'first'
２つの文字列は同じでないかどうか調べる	s != s2
xの絶対値	abs(x)
黒い丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o', c='k')
データ列をインポートする	import pandas as pd
カラーバーを水平でつける	plt.colorbar(orientation='horizontal')
＜オプション＞色をライトイエローに変更する	color = 'lightyellow'
配列の列ごとの平均値	np.mean(aArray, axis=0)
データフレームの中の列を分割数nとしてビン分割する	pd.cut(df[col], n)
タイムスタンプデータの時間	aDatetime.time()
ヒストグラムを描画してその色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
リストとリストの折れ線を描画する	plt.plot(xdata, ydata)
データ列を折れ線グラフに描画して印をダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
色差別ないグラフの色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
日付時刻データを数値にする	aDatetime.timestamp()
文字列が大文字	s.isupper()
インディアンレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='indianred')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
プロットのデータラベルの場所を(x,y)に変更する	plt.legend(loc=(x, y))
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
文字列が部分文字列で終わるか調べる	s.endswith(sub)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
データフレームを列名リストで小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフを描画して、その色を青に変更する	plt.plot(データ列, データ列2, color='blue')
＜オプション＞グラフの色をディムグレーにセットする	color = 'dimgray'
データフレームの下n行を抽出する	df.tail(n)
文字列中にひとつでも非小文字が含まれるか確認する	any(not c.islower() for c in s)
データフレームの欠損値をモードに設定する	df.fillna(df.mode().iloc[0])
リストと配列の青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
ゼロ埋めされた3二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
列の各データ値の出現数	df[col].value_counts()
要素をスタックの先頭から取り除く	deq.popleft()
データフレームのシェイプを見る	df.shape
データフレームを２つの列を用いて昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
散布図をカラーコードの右三角マーカーとして描く	plt.plot(xdata, ydata, marker='>', c=rgb)
データフレームの列名の一覧を見る	df.columns
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
カラムの値が欠損値か	ds.isna()
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
タプルを階層化辞書に変換する	collections.ChainMap(aDict)
リストの平均値	sum(aList)/len(aList)
グラフの色を淡くする	sns.set(pallete='muted')
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
部分文字列を文字列の右側から見つける	s.rfind(sub)
文字列の終了位置以前に部分文字列が含まれる	s.find(sub, 0, end) != -1
デックから最初の数値を取り出す	deq.remove(element)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
＜オプション＞ライトコーラル色を使う	color = 'lightcoral'
ヒストグラムを描画して、その色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
文字列がリストの要素でないか調べる	element not in aList
ファイル名がTSVファイルか判定する	filename.endswith('.tsv')
＜オプション＞ミディアムブルー色を使う	color = 'mediumblue'
グラフの横軸のラベルをuntitledに変更する	plt.xlabel(untitled)
散布図にポイントマーカーを使う	plt.plot(xdata, ydata, marker='.')
文字コードを文字に変換する	chr(unicode)
JSONLファイルにデータフレームを書き込む	df.to_csv(filename)
データ列の第三四分位数	ds.quantile(0.75)
ファイルとfilenameを結合する	os.path.join(filepath, filename)
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データフレームの先頭	df.head()
データフレームの重複した行のみ	df[df.duplicated(keep=False)]
データ列の標本標準偏差	ds.std()
改行なしに変数を表示する	print(value, end='')
＜オプション＞グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
＜オプション＞スラグレーにグラフの色を設定する	color = 'slategray'
辞書に辞書の項目を更新する	aDict.update(aDict2)
リストとデータ列についての散布図に赤い右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c='r')
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
空白文字を全部使う	string.whitespace
ターコイズにヒストグラムの色をセットする	plt.hist(データ列, color='turquoise')
'A'列の値によってデータフレームをグループ化する	df.groupby('A')
淡い色の折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
折れ線グラフの左三角印を赤色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
表データをグループ化し、列に対し分散を求める	df.groupby(column)[column2].var()
列の値でデータフレームをグループ化し、要約統計量を求める	df.groupby(column).describe()
配列と数列について破線グラフを描いてその色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
nとkのコンビネーション	math.comb(n, k)
リストを中央値でビン分割する	pd.qcut(aList, 2)
＜オプション＞マーカーを四角に変更する	marker = 's'
イテラブルと配列の黒いパステル調のを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
データフレームの内の列と列に重複があれば取り除く	df.drop_duplicates(subset=[column, column2])
表データの行と列を入れ替える	df.T
データ列を折れ線グラフに描画してマーカーを上三角印にする	plt.plot(データ列, データ列2, marker='^')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
線グラフの色をサドルブラウンにセットする	plt.plot(データ列, データ列2, color='saddlebrown')
パステル調の色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
リストとイテラブルについての散布図をパステル調の色を使って重なりを見やすくプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
データフレームを破壊的に列名リストによってで並べる	df.sort_values(by=column, inplace=True)
space	' '
イテラブルとリストの淡いグラフを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ファイルを開き]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
黒色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
グラフの文字化けを防ぐ	sns.set(font='IPAexGothic')
文字列が全て空白か調べる	s.isspace()
＜オプション＞エンコーディングを文字コードtextに設定する	encoding = text
データフレームをグループ化しそれぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
線グラフの色をタンに指定する	plt.plot(データ列, データ列2, color='tan')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
数値の符号を同じにする	math.copysign(x, x2)
文字列を改行で区切る	s.splitlines()
カウンタの全数	aCounter.total()
上限nの両端キューをリストから作成する	collections.deque(iterable, maxlen=n)
線グラフの色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
ヒストグラムを描画して、色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフを描画して、その色をホワイトスモークに変更する	plt.plot(データ列, データ列2, color='whitesmoke')
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
nからn2の値を引いてnに代入する	n -= n2
行列の列ごとの最小値を計算する	np.min(aArray, axis=0)
グラフのパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
折れ線グラフの色を青緑に変更する	plt.plot(データ列, データ列2, color='teal')
正規表現に文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
文字列からISO8601として日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
２つのオブジェクトが同じ参照か調べる	obj is obj2
ケンドールでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
線グラフを描画して、色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
データフレームの列を100の位で丸める	df[col].round(-2)
サドルブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='saddlebrown')
＜オプション＞リネン色を使う	color = 'linen'
文字列を最後の部分文字列で分けたときの最初の文字列	s.rpartition(sub)[0]
折れ線グラフに青い▲印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
ヒストグラムを描画して、その色をインディアンレッドにセットする	plt.hist(データ列, color='indianred')
散布図にカラーコードのダイアモンドマーカーを使用する	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフの下三角マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
データ列のヒストグラムを描く	plt.hist(ds)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
＜オプション＞ミディアムシアグリーンを用いる	color = 'mediumseagreen'
データフレームのカラムの欠損値をxにする	df[col].fillna(x)
nが偶数か調べる	n % 2 == 0
線グラフの色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
グラフに凡例を描画する	plt.legend()
ヒストグラムを描画して、その色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列, データ列2, color='mediumblue')
折れ線グラフの下三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
Pandasで、データ列のエポック秒からタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
文字列をセパレータによって区切る	s.split(sub)
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
リストとリストについて散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
'A'列によってデータフレームを分類する	df.groupby('A')
組中の要素が少なくともひとつ真か調べる	any(aTuple)
データフレームの相関行列	df.corr()
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
色差別ないグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データ列の中にある文字列と文字列の数をカウントする	ds.isin([value, value2]).sum()
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
配列を平坦にする	aArray.flatten()
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
イテラブルと数列の色差別ないグラフを描画し、、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームのカラムの分を見る	df[col].dt.minute
リストとリストの青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
グラフを画面用に設定する	sns.set(context='notebook')
ヒストグラムを描画して、その色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
＜オプション＞エンコーディングを文字列の示すエンコーディングに変更する	encoding = s
散布図に丸マーカーを使う	plt.plot(xdata, ydata, marker='o')
カーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='khaki')
折れ線グラフを描画してその色をホットピンクに指定する	plt.plot(データ列, データ列2, color='hotpink')
ふたつの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
紺碧色の線グラフを描画する	plt.plot(データ列, データ列2, color='azure')
文字列の両端から空白を取り除く	s.strip()
折れ線グラフを描画して、その色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
＜オプション＞グラフの色をダーク・スラテグレーにセットする	color = 'darkslategrey'
タイムスタンプデータからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
＜オプション＞ターコイズ色を使う	color = 'turquoise'
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
リストの合計	sum(aList)
＜オプション＞右三角マーカーを描画する	marker = '>'
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
標準入力から1行改行なしに読む	sys.stdin.readline().rstrip()
数を実数に加える	x + y
行列の行を選択する	aArray[行番号]
データフレームを複数の列によってソートしてNaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
＜オプション＞シルバー色を使う	color = 'silver'
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
リストの要素を並べる	sorted(aList)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
エクセルデータファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
データフレームの中のカラムを等量でn個にビン分割する	pd.qcut(df[col], n)
双方向キューの要素数	len(deq)
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
折れ線グラフにクロスマーカーを用いる	plt.plot(データ列, データ列2, marker='x')
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
文字列が文字列より辞書順で前か判定する	s < s2
＜オプション＞色をホットピンクに変更する	color = 'hotpink'
色差別ないの折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ValueMapでデータ列の値を置き換える	ds.replace(ValueMap)
日付データが火曜日か調べる	aDate.weekday() == 1
数式の簡略化を行う	sympy.sympify(e)
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
現在の分数を使う	datetime.date.today().minute
オブジェクトのポインタを見る	id(obj)
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
実数が負の数	x < 0
数列とリストの破線を描いて、その色をパステル調のに変更する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
n個に配列をビンニングし、namesのラベルをつける	pd.cut(aArray, n, labels=names)
柱状図を描画する	plt.hist(データ列)
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
ヒストグラムを描画して、その色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
リストとリストの濃いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
＜オプション＞紺碧色を使う	color = 'azure'
replにまとめてデータフレームのリストカラムの値を正規表現で置換する	df[aList].replace(pattern, repl, regex=True)
リストの変化を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
文字列が全てアスキー文字か調べる	s.isascii()
＜オプション＞ダイアモンドマーカーを加える	marker = 'D'
散布図に黒いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='k')
0で全要素を初期化された配列	np.zeros(要素数)
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
データ列の中にある日付データの合計を数える	ds.isin([value]).sum()
リストの変化を折れ線で描画する	plt.plot(range(len(xdata)), xdata)
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
ベクトルの分散	np.var(aArray)
タプルをナンバリングする	enumerate(aTuple)
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
辞書のキーに対応した値	aDict.get(key)
データフレームを小数点以下n桁で丸める	df.round(n)
ファイルをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
データフレームから重複するデータをドロップして入れ替える	df.drop_duplicates(inplace=True)
＜オプション＞欠損値を先頭に来るようにする	na_position = 'first'
日付データからn週間を引く	aDate - datetime.timedelta(weeks=n)
配列と配列の青い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ヒストグラムにカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
イテラブルとリストについて散布図を描いてポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
行列の列ごとの最大値を計算する	np.max(aArray, axis=0)
データフレームの列の各値は何回出現するか確認する	df[col].value_counts()
配列とリストについて淡いを描画し、、その色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
昇順にリストの値をソートする	sorted(aList, reverse=False)
リストとリストの折れ線グラフを描画して、色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
＜オプション＞グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
n割るn2の切り上げ	(n + n2 - 1) // n2
アリスブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='aliceblue')
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
日付データが水曜日かどうか調べる	aDate.weekday() == 2
折れ線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
ヒストグラムを描画して、その色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
ファイルからフォルダ名を見る	os.path.dirname(filepath)
ヒストグラムを描画して、その色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
データフレームが正規分布からどの程度尖っているか見る	df.skew()
データフレームを列でまとめたグループを使う	df.groupby(column)
リストとリストについての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列, データ列2, color='chocolate')
PandasでdateStringをdatetime64型に変換する	pd.to_datetime(dateString)
ヒストグラムの色をサドルブラウンにする	plt.hist(データ列, color='saddlebrown')
データフレームをグループ化し各列に対し標準偏差を求める	df.groupby(column)[column2].std()
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
未初期化の配列	np.empty(要素数, dtype=np.int)
折れ線グラフの色をスカイブルーに指定する	plt.plot(データ列, データ列2, color='skyblue')
浮動小数点数を実数に加える	x + y
折れ線グラフに黄色いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
タプルをひとつ置きに取り出す	aTuple[::2]
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategrey')
xが真かテストする	bool(x)
ヒストグラムを描画してその色をミディアムパープルに変更する	plt.hist(データ列, color='mediumpurple')
イテラブルとリストについての散布図に▽マーカーを描く	plt.plot(xdata, ydata, marker='v')
＜オプション＞スラグレー色を使う	color = 'slategrey'
浮動小数点数が整数かどうか判定する	x.is_integer()
折れ線グラフを描画して、色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
データフレームの各グループごとの標準偏差	df.groupby(column).std()
列をダミー変数に変換する	pd.get_dummies(iterable)
ビン数nでデータ列をビンニングする	pd.cut(ds, n)
実数の逆正弦	math.asin(x)
データ列の平均値を求める	ds.mean()
データフレームを各列毎に集計して、文字列というグループを使う	df.groupby(column).get_group(s)
nの二進表現	bin(n)
二変数の最小値	min(x, y)
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
折れ線グラフを描画してその色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
淡いの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
リストとリストについての散布図に黒い右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c='k')
＜オプション＞グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
データフレームのリスト列の50パーセンタイル	df[aList].median()
データフレームから型リストのデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
＜オプション＞エンコーディングをUTF8に設定する	encoding = 'utf-8'
折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
右に両端キューの順序をn個分輪番で回す	deq.rotate(n)
折れ線グラフの右三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
ベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
リストとイテラブルについて散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
日付データの月数	aDate.month
２変数の一番小さい値	min(x, y)
行列の列	aArray[:, 列番号]
オブジェクトをイテラブルに変換する	iter(obj)
線グラフを描画して、その色をベージュに変更する	plt.plot(データ列, データ列2, color='beige')
タブ	'\t'
＜オプション＞ダークシアグリーンにグラフの色をする	color = 'darkseagreen'
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
ヒストグラムの色をラベンダーにセットする	plt.hist(データ列, color='lavender')
'A'列を用いてデータフレームを並べてNaNを先頭にする	df.sort_values(by='A', na_position='first')
カラーコードのダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
パラメータがマイナス無限大に近づく際の数式の極限値を求める	sympy.limit(e, z, -oo)
ヒストグラムを描画してその色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
折れ線グラフを描画して、その色をオレンジに指定する	plt.plot(データ列, データ列2, color='orange')
nを切り捨てながら半分にする	n //= 2
ヒストグラムを描画して、色をタンに指定する	plt.hist(データ列, color='tan')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='forestgreen')
暗いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='dark', color='r')
折れ線グラフのスタイルを実線に指定する	plt.plot(データ列, データ列2, linestyle='solid')
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
タイムスタンプデータが何日か知る	aDatetime.day
折れ線グラフを描画して、色を黒くする	plt.plot(データ列, データ列2, color='k')
＜オプション＞ミディアムシアグリーンに色を設定する	color = 'mediumseagreen'
デックの末尾	deq[-1]
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
カウンタを高頻出方から列挙する	aCounter.most_common()
カウンタのキーと出現回数をリストとして得る	aCounter.items()
小麦色色の線グラフを描画する	plt.plot(データ列, データ列2, color='wheat')
カラーコードのクロスマーカーをリストと配列についての散布図にプロットする	plt.plot(xdata, ydata, marker='x', c=rgb)
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
ヒストグラムの色を紺に変更する	plt.hist(データ列, color='darkblue')
印字可能な文字を全て見る	string.printable
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列, データ列2, color='lemonchiffon')
カウンタのそれぞれの項目を出現回数だけ列挙する	aCounter.elements()
空の組	()
データフレームのカラムのメディアン	df[col].median()
データフレームの中の列をビン数nを使って分割する	pd.cut(df[col], n)
パステル調のグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ピアソン積率相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='pearson')
太文字で文字列をプリントする	print(f'\033[1m{value}\033[0m')
複数のデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
リストとリストの淡いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
行列の列ごとの標準偏差	np.std(aArray, axis=0)
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
最大長nの両端キューを新規生成する	collections.deque(maxlen=n)
散布図を描画する	plt.scatter(xdata, ydata)
行列のスカラー倍	aArray * n
二進文字列を整数にする	int(s, 2)
赤色のパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
実数の指数	math.frexp(x)[1]
散布図に赤色のバツマーカーを用いる	plt.plot(xdata, ydata, marker='x', c='r')
データフレームの中の列をn個にビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
カラーコードのダイアモンドマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='D', c=rgb)
散布図を赤い星マーカーとしてプロットする	plt.plot(xdata, ydata, marker='*', c='r')
データフレームのカラム一覧	df.info()
実数のn乗を計算する	pow(x, n)
青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
配列の次元を変形する	aArray.reshape(行数, 列数)
ヒストグラムを描画して、その色をライトスチールブルーにセットする	plt.hist(データ列, color='lightsteelblue')
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
カラーコードの菱形マーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c=rgb)
グラフを全般的に暗くする	sns.set(pallete='dark')
本日の曜日を整数で使う	datetime.datetime.today().weekday()
＜オプション＞色をゲインズボロに指定する	color = 'gainsboro'
下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v')
リストとリストについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームを列によって並べ、下位n件を取り出す	df.sort_values(columns).tail(n)
データフレームのリストカラムの値をValueMapでまとめて置換する	df[aList].replace(ValueMap)
データ列が何分か見る	ds.dt.minute
データフレームのリスト列の中の欠損値の合計を数える	df[aList].isna().sum()
前もって正規表現をコンパイルする	re.compile(pattern)
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
データフレームの第一四分位数を求める	df.quantile(0.25)
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
空白で文字列を区切って、列挙する	s.split()
nが2で割り切れないか調べる	n % 2 == 1
データフレームの列のヒストグラムを描く	plt.hist(df[column])
折れ線グラフの▲印を赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
配列とリストについて散布図を描画してマーカーをポイントに変更する	plt.plot(xdata, ydata, marker='.')
ライトコーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcoral')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
横棒グラフを描画して、グラフ幅をxに変更する	plt.barh(ラベル列, データ列, width=x)
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
ヒストグラムを描画して、その色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
リストとリストで暗いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
明るいグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
日付データが土曜日か調べる	aDate.weekday() == 5
散布図に黒色のポイントマーカーを用いる	plt.plot(xdata, ydata, marker='.', c='k')
配列とイテラブルについての散布図に黒色のポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
配列とリストについての散布図に赤色のポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c='r')
データフレームのリストカラムの欠損値を最頻値で置換する	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
データ列の要約統計量を求める	ds.describe()
リストを黒色化する	f'\033[30m{value}\033[0m'
＜オプション＞色をタンに指定する	color = 'tan'
オブジェクトは関数か調べる	callable(obj)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
TSVファイルからCSVファイルを文字化けしないように読む	pd.read_csv(filename, encoding='shift_jis')
複数カラムの散布図を一度に描画する	sns.pairplot(df[[column, column2, column3]])
ヒストグラムを描画して、その色をターコイズに設定する	plt.hist(データ列, color='turquoise')
＜オプション＞複素数型を用いる	dtype = bool
文字列を部分文字列で二分し、最初の文字列を使う	s.partition(sub)[0]
配列とリストについて明るい色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
データ列とリストについて散布図を描いて大バツマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞ダークマゼンタ色を使う	color = 'darkmagenta'
ヒストグラムを描画してその色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
nからn2までのスライス	slice(n, n2)
データ列は正規分布からどの程度尖っているか見る	ds.skew()
ヒストグラムを描画して、色をシエナに指定する	plt.hist(データ列, color='sienna')
＜オプション＞シアンにグラフの色を変更する	color = 'cyan'
エンコーディング	sys.getdefaultencoding()
データフレームのカラムは何年か確認する	df[col].dt.year
線グラフを描画して、その色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
リストから重複を取り除く	set(iterable)
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
データフレームを関数によってまとめたグループ	df.groupby(関数)
赤い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
文字列を文字リストに変換する	list(s)
＜オプション＞茶色にグラフの色を設定する	color = 'brown'
辞書から計数器を用意する	collections.Counter(aDict)
データフレームのリストカラムの欠損値を前の値で置換する	df[aList].fillna(method='ffill')
方程式の解	sympy.solve(e)
＜オプション＞グラフの色をリネンに指定する	color = 'linen'
線グラフを描画して、その色を黄色にセットする	plt.plot(データ列, データ列2, color='yellow')
データ列とデータ列についての散布図にクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x')
散布図にカラーコードの左三角マーカーを用いる	plt.plot(xdata, ydata, marker='<', c=rgb)
集合＼集合	aSet.difference(aSet2)
浮動小数点数の小数点を丸める	round(x)
＜オプション＞文字列をセパレータで用いる	sep = s
＜オプション＞色をホワイトスモークに変更する	color = 'whitesmoke'
配列と配列についての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞グラフの色をオーキッドに設定する	color = 'orchid'
サンディーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='sandybrown')
＜オプション＞グリーンイエロー色を用いる	color = 'greenyellow'
リストと数列についてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
リストとリストを用いて暗いグラフを描画し、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
カウンタを集合に変換する	set(aCounter)
データフレームを関数の値でグループ化し、要約統計量を算出する	df.groupby(関数).describe()
文字列を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
列の25パーセンタイルを求める	ds.quantile(0.25)
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
まとめて正規表現patternでデータフレームの値を置き換える	df.replace(pattern, repl, regex=True)
ヒストグラムを描画してその色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategrey')
データフレームの末尾n行を抽出する	df.tail(n)
日付時刻データとタイムスタンプデータの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
＜オプション＞ライトグリーン色を用いる	color = 'lightgreen'
データ列のpercent分位数	ds.quantile(percent/100)
濃い色の折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
日付データは日付データと同時か調べる	aDate == aDate2
データフレームをグループ化し、列に対し最小値を求める	df.groupby(column)[column2].min()
整数nを八進表記に変換する	oct(n)
＜オプション＞エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
折れ線グラフの下三角マーカーを赤色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
データフレームのNaNを中央値で埋める	df.fillna(df.median())
第一引数で指定されたファイル名	sys.argv[1]
イテラブルと数列で濃いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
＜オプション＞グラフの色をアイボリーに設定する	color = 'ivory'
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
折れ線グラフを描画して、その色をスチールブルーに変更する	plt.plot(データ列, データ列2, color='steelblue')
＜オプション＞グラフの色をプラムにする	color = 'plum'
パステル調の色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='pastel')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
現在の日数を見る	datetime.datetime.today().day
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
＜オプション＞追加モードに指定する	mode = 'a'
タイムスタンプデータからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
＜オプション＞コーラル色を使う	color = 'coral'
データ列とリストの色差別ないを描画し、、その色を黒色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
ミディアムターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='mediumturquoise')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
いつまでも列を繰り返す	itertools.cycle(iterable)
データフレームを10の位で丸める	df.round(-1)
線幅nの右三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
＜オプション＞色をピーチパフに変更する	color = 'peachpuff'
オプションで、標準出力を出力にする	file = sys.stdout
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
ビン数nのヒストグラムを描く	plt.hist(データ列, bins=n)
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
データフレームを10の位で丸めて整数にする	df.round(-1).astype(int)
配列の最大	np.max(aArray)
散布図に赤色のポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='r')
ベクトルの値を使う	aArray[行番号, 列番号]
昇順に２つの列によってデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=True)
文字列の開始位置から終了位置の範囲で部分文字列の登場	s.count(sub, start, end)
オリーブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olive')
nをn2だけ右シフトする	n >> n2
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
グラフをポスターに指定する	sns.set(context='poster')
凡例を表示する	plt.legend()
＜オプション＞▲マーカーを用いる	marker = '^'
追加できるように既存のファイルを文字列の示すエンコーディングで開く]	open(filepath, mode='a', encoding=s)
黒色の四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
＜オプション＞タン色を使う	color = 'tan'
データ列を折れ線グラフに描画して、印を右三角印にする	plt.plot(データ列, データ列2, marker='>')
折れ線グラフの透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
折れ線グラフを描画して、その色をライトサーモンに変更する	plt.plot(データ列, データ列2, color='lightsalmon')
＜オプション＞グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
折れ線グラフの色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
部分文字列かどうか調べる	sub in s
JSON形式の文字列をデータに変換する	json.loads(jsonString)
＜オプション＞バイナリ書き込みモードを使う	mode = 'wb'
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列, データ列2, marker='>')
データフレームの中の列をビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
黒色の大バツマーカーをデータ列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='X', c='k')
カラーコードの大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
赤色のバツマーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='blueviolet')
赤い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
文字列は平仮名か	('ぁ' <= ch <= 'ん')
リストのn番目のの要素	aList[n]
オブジェクトの参照カウント	sys.getrefcount(obj)
データフレームの列名を指定された名前リストに置き換える	df.columns = columns
表データを'A'列と'B'列によって昇順に並べ直して、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムを描画して、その色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
線グラフを描画してその色をライトスカイブルーにセットする	plt.plot(データ列, データ列2, color='lightskyblue')
日付時刻データは何曜日か知る	aDatetime.weekday()
文字列にイテラブルを変換して、タブで連結する	'\t'.join(map(str, iterable))
リストとリストについて散布図を描画してマーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
文字列を太文字化する	f'\033[1m{value}\033[0m'
文字列の接頭辞が部分文字列か	s.startswith(sub)
青色の濃いをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='b')
部分文字列が文字列の開始位置からと終了位置の間にあるか	s.find(sub, start, end) != -1
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
リストとリストの折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
＜オプション＞ダークオレンジ色を用いる	color = 'darkorange'
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
文字列がリストに含まれないか調べる	element not in aList
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
ヒストグラムを描画してその色をペルーに変更する	plt.hist(データ列, color='peru')
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
＜オプション＞暗い赤色を使用する	color = 'darkred'
整数nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
二つの数値をカンマで区切ってプリントする	print(value, value2, sep=',')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
色差別ない色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
データフレームを各列毎に集計して、文字列というグループの個数を求める	df.groupby(column).size()[s]
データフレームの行を条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
配列とデータ列の淡いを描いてその色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
行列から重複を除いた配列を作る	np.unique(aArray)
折れ線グラフの▼マーカーを黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
小数点数のcosの逆数	math.acos(x)
オブジェクトは数値かどうか調べる	isinstance(obj, (int,float))
大文字列	string.ascii_uppercase
折れ線グラフを描画して、その色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
nの8進表現を使う	oct(n)
ふたつの集合の差集合	aSet.difference(aSet2)
JSONフォーマットのバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
データ列がどの程度、分散しているか見る	ds.var()
グラフの全般的にカラーパレットを明るくする	sns.set(pallete='bright')
文字列を空白で区切って、文字列リストに変換する	s.split()
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
データ列とリストのパステル調のグラフを描画してその色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
線グラフの色をフォレストグリーンにセットする	plt.plot(データ列, データ列2, color='forestgreen')
赤い四角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='s', c='r')
直前の値で列の未入力値を補う	ds.fillna(method='ffill')
ファイル名がTSVファイルか	filename.endswith('.tsv')
リストを文字列リストに変換して、カンマによって連結する	','.join(map(str, iterable))
データフレームを列によって集約して、グループ毎の最小値を求める	df.groupby(column).min()
＜オプション＞小麦色を使う	color = 'wheat'
整数nが配列の一つかどうか調べる	n in aArray
データフレームからランダムにn行を抽出する	df.sample(n)
グラフの描画で色差別ないカラーパレットを用いる	sns.set(pallete='colorblind')
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
二進文字列をバイナリにする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データフレームを'A'列の値によって集約する	df.groupby('A')
オブジェクトは文字列型かどうか調べる	isinstance(obj, str)
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフを描画して、その色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
読み込みモードでファイルパスをオープンする]	open(filepath, mode='r')
ヒストグラムを描画して、色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
＜オプション＞色をフローラルホワイトに指定する	color = 'floralwhite'
フローラルホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='floralwhite')
データ列を折れ線グラフに描画して、印を丸印にする	plt.plot(データ列, データ列2, marker='o')
日付データが日付データより後ろか	aDate > aDate2
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
セットが空か	len(aSet) == 0
二つのデータ列を並べて柱状グラフにする	plt.hist([データ列, データ列2], color=['b', 'r'])
線グラフを描画して、色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフに赤い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
プロットの描画で明るいパレットを使う	sns.set(pallete='bright')
xが-9以上、9以下	-9 <= x <= 9
＜オプション＞カデットブルー色を使う	color = 'cadetblue'
ファイルパスを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
プログラムのファイルの名前	sys.argv[0]
二つの列によってデータフレームをソートし、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
折れ線グラフを描画して色をインディゴに指定する	plt.plot(データ列, データ列2, color='indigo')
赤い大バツマーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='X', c='r')
ヒストグラムを描画してその色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
三自然数の最大公約数	math.gcd(n, n2, n3)
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ヒストグラムを描画して、色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
現在が何時か知る	datetime.date.today().hour
文字列をシンボルに変換する	sympy.Symbol(s)
数列とリストについての散布図にカラーコードの右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c=rgb)
＜オプション＞グラフの色をビスクに設定する	color = 'bisque'
タプルの先頭のn要素を取り除く	aTuple[n:]
ヒストグラムを描画してその色をライトスチールブルーにセットする	plt.hist(データ列, color='lightsteelblue')
リストと配列を折れ線で描画する	plt.plot(xdata, ydata)
辞書にキーワード引数で更新する	aDict.update(**kwargs)
ラベンダー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavender')
ヒストグラムを描画して、その色をリネンに設定する	plt.hist(データ列, color='linen')
ワーキングディレクトリ	os.getcwd()
列によってデータフレームをグループ化して、それぞれのグループごとの最大値を計算する	df.groupby(column).max()
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
サイコロと同じ乱数を発生させる	random.randint(1, 6)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
リストとリストの黒色の明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
n個に等量で列をビン分割する	pd.qcut(ds, n)
nxn2の2次元リストを作る	[[0] * n for _ in range(n2)]
キューの最初にイテラブルの各要素を順に追加する	deq.extendleft(iterable)
淡いグラフの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
タプルの最後を捨てる	aTuple[:-1]
文字列が大文字か調べる	s.isupper()
データ列が何時か見る	ds.dt.hour
数値の変数についてのn階微分を求める	sympy.diff(e, z, n)
赤い色差別ないの折れ線を描く	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
シードをnで初期化する	random.seed(n)
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
nからn2までのstepごとによるスライス	slice(n, n2, step)
マッピングをJSONフォーマットでファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
辞書としてカウンタを更新する	aCounter.update(aDict)
破線グラフの色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
＜オプション＞シスルを用いる	color = 'thistle'
＜オプション＞グラフの色をスプリンググリーンに変更する	color = 'springgreen'
nわるn2	n / n2
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
両端キューの大きさ	len(deq)
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
ヒストグラムを描画して、その色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
ヒストグラムを描画して、色を赤くする	plt.hist(データ列, color='r')
貝殻色の線グラフを描画する	plt.plot(データ列, データ列2, color='seashell')
折れ線グラフを描画して、色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
xを論理値にする	bool(x)
折れ線グラフを描画してその色をブラウンに指定する	plt.plot(データ列, データ列2, color='brown')
＜オプション＞どの列も行にしない	index_col = None
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
文字列リストを一つの文字列にする	''.join(aStringList)
文字列に日本語がある	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
線グラフの色をパールゴールデンロッドにセットする	plt.plot(データ列, データ列2, color='palegoldenrod')
データフレームの中のカラムをn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
プログラムの実行をここで停止する	sys.exit()
辞書をJSON形式で出力ストリームに保存する	json.dump(aDict, fout, ensure_ascii=False)
自然数の階乗	math.factorial(n)
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
色差別ない色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='colorblind')
オブジェクトはバイト列クラスかどうか調べる	isinstance(obj, bytes)
折れ線グラフを描画して、色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
ヒストグラムを描画してその色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
ヒストグラムを描画して、その色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
ケンドールでデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
データフレームのリストカラムの中にいくつ欠損値が存在するか数える	df[aList].isna().sum()
リストと配列について破線を描画し、、色を淡いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
折れ線グラフを描画して、その色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
ヒストグラムを描画して、その色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>')
ヒストグラムを描画して、その色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームのカラムの中にいくつ欠損値があるか求める	df[col].isna().sum()
データフレームの分散	df.var()
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
折れ線グラフの▲マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
異なる列をキーとして２つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
'A'列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby('A').describe()
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
折れ線グラフを描画して、その色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
文字列の右側から改行を取り除く	s.rstrip('\n')
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列, データ列2, color='peachpuff')
データフレームはどの程度分散しているか見る	df.var()
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
数値を緑色にする	f'\033[32m{value}\033[0m'
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgray')
リストとリストについて散布図を描画してポイントマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='.', c=rgb)
2つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
散布図に赤いダイアモンドマーカーを使用する	plt.plot(xdata, ydata, marker='D', c='r')
データフレームのリスト列のモードを算出する	df[aList].mode()
データフレームを列名リストによってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
nがn2の倍数でないか確認する	n % n2 != 0
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
折れ線グラフの四角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
線グラフの色をローングリーンに指定する	plt.plot(データ列, データ列2, color='lawngreen')
データフレームのカラムの時刻	df[col].dt.hour
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
折れ線グラフに黄色い三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
データフレームが正規分布からどれだけ尖っているか見る	df.skew()
折れ線グラフの色をオレンジにセットする	plt.plot(データ列, データ列2, color='orange')
辞書をカウンタにする	collections.Counter(aDict)
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
複数の列によってデータフレームをソートする	df.sort_values(by=column)
線グラフの色をマゼンタに変更する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
集合の要素数を求める	len(aSet)
タプルの最初を取り除く	aTuple[1:]
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
＜オプション＞グラフの色をサーモンに設定する	color = 'salmon'
ヒストグラムを描画して、色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
辞書からキーで指定された値をポップする	aDict.pop(key)
実行結果を下線付きにする	f'\033[4m{value}\033[0m'
折れ線グラフを描画して、その色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
リストをy軸、配列をx軸として大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
折れ線グラフの色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
ミディアムオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumorchid')
線グラフを描画して、その色をイエローグリーンに指定する	plt.plot(データ列, データ列2, color='yellowgreen')
データフレームのリスト列の文字列をNaNにする	df[aList].replace(s, np.nan)
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
データ列の年	ds.dt.year
データフレームをグループ化し、それぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
データ列の中にある文字列との合計を数える	ds.isin([value, value2]).sum()
リストが全て真か調べる	all(aList)
リストを黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームをグループ化し各列に対し分散を求める	df.groupby(column)[column2].var()
折れ線グラフの色をブラックに変更する	plt.plot(データ列, データ列2, color='black')
＜オプション＞ライトコーラル色を使用する	color = 'lightcoral'
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
カラーバーを描画する	plt.colorbar()
ヒストグラムを描画して、その色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
数列と配列の黒い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
線グラフの色をシーグリーンに指定する	plt.plot(データ列, データ列2, color='seagreen')
ふたつの関係が下位集合か調べる	aSet.issubset(aSet2)
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
n進文字列を整数に変換する	int(s, n)
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
折れ線グラフの左三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
折れ線グラフのマーカーを菱形にする	plt.plot(データ列, データ列2, marker='D')
データ列の各データが何回出現するか見る	ds.value_counts()
ミディアムブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumblue')
カラーコードの右三角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
データフレームのカラムを1000の位で四捨五入して、整数にする	df[col].round(-3).astype(int)
変数を太字にする	f'\033[1m{value}\033[0m'
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
＜オプション＞グラフの色を紺に設定する	color = 'darkblue'
文字列が全て英数字かテストする	s.isalnum()
本日の日付時刻を求める	datetime.datetime.now()
暗い色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
折れ線グラフを描画して、その色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
データフレームの最後n行を取り出す	df.tail(n)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
＜オプション＞グレー色を使う	color = 'grey'
マッピングのキーの一覧を見る	aDict.keys()
xの小数点以下'3'桁までを出力する	print(':.3f'.format(x))
＜オプション＞ライトグレー色を使う	color = 'lightgray'
データフレームを破壊的に２つの列によってによって整列する	df.sort_values(by=['A', 'B'], inplace=True)
列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
配列とリストの散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
線グラフを描画して、色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
折れ線グラフを描画してその色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
文字列の開始位置から終了位置までの範囲で部分文字列の登場をカウントする	s.count(sub, start, end)
＜オプション＞バツ印を描画する	marker = 'x'
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
安全に文字列の右側から部分文字列を除去する	s.removesuffix(sub)
エクセルファイルファイルからすべてのシートを読む	pd.read_excel(filename, sheet_name=None)
折れ線グラフのバツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
リストとリストについての散布図にバツマーカーをプロットする	plt.plot(xdata, ydata, marker='x')
部分文字列を文字列の最初から探す	s.find(sub)
今日が金曜日か調べる	datetime.datetime.today().weekday() == 4
ユニークな値を要素とする行列を求める	np.unique(aArray)
データフレームの列の名前を列挙する	df.columns
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
イテラブルとリストについて黒い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
散布図にカラーコードの丸マーカーを用いる	plt.plot(xdata, ydata, marker='o', c=rgb)
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='palegoldenrod')
nを二進文字列に変換する	bin(n)[2:]
ファイルが存在しないか調べる	not os.path.exists(filepath)
線グラフの色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
データフレームを列でグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
＜オプション＞グラフの色をチョコレートに設定する	color = 'chocolate'
リストをn回、接続する	aList * n
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='gray')
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
＜オプション＞マーカーをポイントに変更する	marker = '.'
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
＜オプション＞オレンジ色を使う	color = 'orange'
データ列とリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
改行付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
濃いの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
イテラブルを濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
横棒の色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
ヒストグラムを描画して、その色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
サーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='salmon')
ファイルからバイナリ書き込みストリームを開いて]fとする	f = open(filepath, mode='wb')
＜オプション＞バツマーカーを描画する	marker = 'x'
横軸にuntitledというラベルを付ける	plt.xlabel(untitled)
配列の累積和を求める	np.cumsum(aArray)
グラフをポスター用に設定する	sns.set(context='poster')
辞書の値の一覧	aDict.values()
ファイルにxを文字列に変換して書き込む	f.write(str(x))
折れ線グラフを描画して色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
データフレームをJSONLファイルにカラムの名前を付けずに保存する	df.to_csv(filename, header=None)
折れ線グラフを描画して、その色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
折れ線グラフに線幅nの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
＜オプション＞ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
グラフの横軸にuntitledというラベルを付ける	plt.xlabel(untitled)
色差別ないでヒストグラムをプロットする	plt.hist(xdata, color='colorblind')
整数nを十六進表現に変換する	hex(n)
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
＜オプション＞グラフの色をピーチパフに変更する	color = 'peachpuff'
データ列が何曜日か見る	ds.dt.weekday_name
配列とデータ列について明るい色の折れ線グラフを描画して、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞フクシア色を使う	color = 'fuchsia'
＜オプション＞アリスブルーを使う	color = 'aliceblue'
リストとリストについてリストの値に応じて散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
日付データが日付データと同時か調べる	aDate == aDate2
標準入力から1行だけ読む	sys.stdin.readline()
辞書からキーの値	aDict.get(key)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
パステル調のグラフを配列とリストを用いて描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
折れ線グラフを描画して、その色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
部分文字列で文字列の開始位置以降が始まる	s.startswith(sub, start)
淡い色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='muted')
データ列のタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
データフレームの列の値は未入力値か	df[col].isna()
＜オプション＞グラフの色を青紫に変更する	color = 'violet'
nが負の数か調べる	n < 0
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
リストとリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(xdata, ydata, marker='D', c='r')
標準出力を得る	sys.stdout
データフレームの欠損値をxで埋める	df.fillna(x)
小数点数の仮数	math.frexp(x)[0]
黒い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
実線を使ってヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
＜オプション＞四角マーカーを用いる	marker = 's'
補足を文字列と文字列とグラフに入れる	plt.legend([s, s2])
ファイルを読み込みモードで開いて]fとする	f = open(filepath, mode='r')
ヒストグラムを描画して、色をオリーブに変更する	plt.hist(データ列, color='olive')
色差別ないグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
アクア色の線グラフを描画する	plt.plot(データ列, データ列2, color='aqua')
配列とリストについて暗い色の折れ線グラフを描画し、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='dark')
整数nを二進表現に変換する	bin(n)
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
xが-9以上、9以下か調べる	-9 <= x <= 9
パステル調のグラフをプロットして線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
データフレームのインデックス名をまとめて、nameからname2に変更する	df.rename(index={name: name2})
浮動小数点数の指数部を求める	math.frexp(x)[1]
＜オプション＞先頭の行をヘッダに設定する	header = 0
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
折れ線グラフの三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
組のn番目以降の要素を取り出す	aTuple[n:]
データフレームのインデックス名を一度にnameからname2に付け直す	df.rename(index={name: name2})
データフレームの列の中に日付データと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
環境はLinuxか調べる	sys.platform.startswith('linux')
折れ線グラフの左三角印を黄色くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
整数nを二進文字列に変換する	bin(n)[2:]
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
文字列のひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
ファイルを書き込み用に文字列の示す文字コードでオープンする]	open(filepath, mode='w', encoding=s)
＜オプション＞データ型を指定する	dtype = np.int
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
マップをクリアする	aDict.clear()
折れ線グラフを描画して、その色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
集合の濃度	len(aSet)
既存のファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
グラフの見栄えをよくする	import seaborn as sns
ビンをnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
リストとイテラブルの散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
文字列をUTF8でバイト列にする	s.encode(encoding='utf-8', errors='strict')
＜オプション＞パープル色を使用する	color = 'purple'
散布図にカラーコードのバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームのカラムはどの程度分散しているか見る	df[col].var()
データ列を縦軸、配列をx座標と指定して、折れ線を描画する	plt.plot(xdata, ydata)
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
折れ線グラフの左三角印を黒色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
ホットピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='hotpink')
＜オプション＞アクアマリンにグラフの色を設定する	color = 'aquamarine'
リスト内の要素が全て真か調べる	all(aList)
＜オプション＞グラフの色をミスティローズに設定する	color = 'mistyrose'
ユニコードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
文字列のケースを交換する	s.swapcase()
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
整数の階乗を求める	math.factorial(n)
データフレームの行を振り直す	df.reset_index()
ヒストグラムを描画してその色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
列から両端キューを作成する	collections.deque(iterable)
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
整数nをn2分の１にする	n //= n2
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
リストとリストの黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
データフレームの列の文字列長を列として使う	df[col].str.len()
濃い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
データフレームを十の位で丸める	df.round(-1)
文字列を太字にする	f'\033[1m{value}\033[0m'
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumvioletred')
データフレームをJSONLファイルに保存する	df.to_csv(filename)
データ列を折れ線グラフに描画して、マーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
セットからエラーなく要素を取り除く	aSet.discard(element)
度数分布図でリストを可視化する	plt.hist(aList)
＜オプション＞色をアリスブルーに指定する	color = 'aliceblue'
空の階層化マップ	collections.ChainMap()
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumaquamarine')
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
データフレームから末尾の列を除く	df[df.columns[:-1]]
最頻値でデータフレームの未入力値を補う	df.fillna(df.mode().iloc[0])
nの二乗	n ** 2
折れ線グラフに大きさnの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
文字列をカンマによって区切り、、列挙する	s.split(',')
リストとリストの黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
データ列の欠損値を前の行の値で埋める	ds.fillna(method='ffill')
要素を両端キューにプッシュする	deq.append(element)
nマイナスn2	n - n2
Pandasで、データ列をフォーマットで日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
＜オプション＞貝殻にグラフの色を変更する	color = 'seashell'
自然数最小公倍数	math.lcm(n, n2)
ヒストグラムを描画してその色を青緑に変更する	plt.hist(データ列, color='turquoise')
リストとリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
オブジェクトはタプルの要素でないか	element not in aTuple
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
＜オプション＞グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
日付データをISO書式の文字列に変換する	aDate.isoformat()
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図を描く	plt.scatter(xdata, ydata)
ヒストグラムを描画して色をコーラルに指定する	plt.hist(データ列, color='coral')
'A'列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ビン数nで等しい量になるようにデータ列をビン分割する	pd.qcut(ds, n)
散布図を星マーカーでプロットする	plt.plot(xdata, ydata, marker='*')
＜オプション＞ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
書式fmtを用いて文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
ヒストグラムを描画して、その色を貝殻に設定する	plt.hist(データ列, color='seashell')
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
グラフのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
Pandasで、フォーマットを用いてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
明るいグラフの色を黒色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
標準エラー	sys.stderr
データフレームのインデックスがnの行を抽出する	df.loc[n]
折れ線グラフを描画して、その色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
predicateFuncを適用したとき真になるイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
イテラブルをパステル調の色のヒストグラムとして描画する	plt.hist(xdata, color='pastel')
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
リストを番号付けする	enumerate(aList)
淡い色でリストと配列の散布図を重なりを見やすくプロットする	plt.plot(xdata, ydata, c='muted', alpha=0.5)
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
Pandasで、エポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
折れ線グラフの△マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
マッピングに項目名があるか調べる	key not in aDict
文字列が全て小文字か調べる	s.islower()
棒グラフを描画して、グラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
＜オプション＞バツマーカーを使う	marker = 'x'
ヒストグラムを描画して、その色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
赤色の大バツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
イテラブルをイミュータブルなセットにする	frozenset(iterable)
二つの集合が集合と互いに素	aSet.isdisjoint(aSet2)
ベクトルの行ごとの合計値を求める	np.sum(aArray, axis=1)
文字列の中の大文字・小文字を無視して正規表現によるマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
マルーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='maroon')
＜オプション＞ダークグリーン色を使う	color = 'darkgreen'
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
辞書の項目数	len(aDict)
データフレームのリストカラムの最頻値	df[aList].mode()
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
整数の複素数	complex(x)
スプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='springgreen')
＜オプション＞マゼンタ色を用いる	color = 'magenta'
ふたつの集合がセットと互いに素かどうか調べる	aSet.isdisjoint(aSet2)
ヒストグラムを描画してxに透明度を変更する	plt.hist(データ列, alpha=x)
リストと配列について散布図を描いて、大バツマーカーの色をカラーコードにする	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームの列を最初のカテゴリーを無視してダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
データフレームのカラムの中に存在すると文字列の合計を数える	df[col].isin([value, value2]).sum()
データフレームを列で小さい順にソートする	df.sort_values(by=column, ascending=True)
文字列が全てアルファベット	s.isalpha()
等しい量になるように分割数nとして列をビン分割する	pd.qcut(ds, n)
数を小数点以下第一位で四捨五入する	round(x, 1)
ゼロ埋めされた配列	np.zeros(要素数)
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
＜オプション＞星マーカーを使用する	marker = '*'
nが1もしくは2	n == 1 or n == 2
タプルを階層化する	collections.ChainMap(aDict)
折れ線グラフを描画して、色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
実数のサインの逆数を求める	math.asin(x)
データフレームのカラムのユニークな値	df[col].unique()
変数をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
データフレームの各次元の大きさを見る	df.shape
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
配列とリストについて色差別ない色の折れ線を描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
暗いの折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
ヒストグラムの色をシーグリーンにセットする	plt.hist(データ列, color='seagreen')
辞書のキーとその値を列挙する	aDict.items()
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
スタックから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
散布図を明るい色のマーカーで重なりを見やすく描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
データフレームのカラムのNaNを最大値で埋める	df[col].fillna(df[col].max())
イテラブルの各要素を関数でフィルタする	map(func, iterable)
＜オプション＞ライムを使う	color = 'lime'
ヒストグラムを描画してその色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
ダークオレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorange')
文字列内にひとつでも英数字があるかどうか	any(c.isalnum() for c in s)
実数のn乗して実数による余りを求める	pow(x, n, y)
カウンタ同士で交わり演算する	aCounter & aCounter2
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
リストと配列についての散布図に大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X')
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
データ列とデータ列の散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
＜オプション＞グリーン色を使う	color = 'green'
配列とリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストとリストの青色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
プロットの背景色を暗くする	sns.set(style='darkgrid')
2つのカウンタの共通する要素	aCounter & aCounter2
リストと配列の散布図を描いて丸マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='o', c=rgb)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
日付時刻データが木曜日か	aDatetime.weekday() == 3
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
データフレームを列によってまとめたグループ	df.groupby(column)
三つの最小値	min(x, y, z)
折れ線グラフに青い四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
リストとイテラブルの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
折れ線グラフにサイズnの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
黄色い丸印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
＜オプション＞マーカーを三角に変更する	marker = '^'
折れ線グラフを描画して、色を白くする	plt.plot(データ列, データ列2, color='w')
線グラフの色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
スピアマンを用いてデータフレームの相関行列	df.corr(method='spearman')
文字列がリストに含まれないかどうか調べる	element not in aList
折れ線グラフを描画して、その色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
散布図に黒い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
文字列のn番目	s[n]
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフを描画してその色を青緑に指定する	plt.plot(データ列, データ列2, color='teal')
ベクトルの行列式を算出する	np.linalg.det(aArray)
リストと数列について散布図を描画して、四角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='s', c=rgb)
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
データフレームとしてJSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
文字列がリストの要素かどうか調べる	element in aList
浮動小数点数を整数に変換する	int(x)
折れ線グラフを描画して、その色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
配列とリストについて散布図を描画して、マーカーを右三角にセットする	plt.plot(xdata, ydata, marker='>')
データフレームのカラムの日	df[col].dt.day
改行する	print()
折れ線グラフを描画して、その色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
ヒストグラムを描画して、その色をモカシンに設定する	plt.hist(データ列, color='moccasin')
昇順にデータフレームを破壊的に列によって整列する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのリスト列を百の位で四捨五入する	df[aList].round(-2)
＜オプション＞読み込まない列番号をnamesで指定する	skiprows = names
二つの集合は集合と互いに素	aSet.isdisjoint(aSet2)
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
折れ線グラフを描画してその色をライトゴールドロディイエローに指定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
データフレームのリストカラムの平均を求める	df[aList].mean()
折れ線グラフに線幅nの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
日付データをISO形式の文字列に変換する	aDate.isoformat()
配列と配列についての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
二つのカウンタの共通する要素	aCounter & aCounter2
イテラブルと配列の明るいを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
カラムのモード	ds.mode()
データフレームを丸めて、整数型にする	df.round().astype(int)
日付データは日付データと同時かどうか判定する	aDate == aDate2
実数を実数で割った剰余	math.remainder(x, x2)
直前の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
リストと数列を用いて淡いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
散布図に黒色の星マーカーを用いる	plt.plot(xdata, ydata, marker='*', c='k')
データフレームのリストカラムのpercent分位数を求める	df[aList].quantile(percent/100)
＜オプション＞シアン色を使う	color = 'cyan'
2次元タプルをflattenする	sum(aTuple)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
日付データが日付データと同時	aDate == aDate2
リストとデータ列について散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
両端キューの長さを制限する	collections.deque(maxlen=n)
淡いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
棒の幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
黒色のバツマーカーを数列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='x', c='k')
xが一桁の整数か調べる	-9 <= x <= 9
折れ線グラフに大きさnの大バツ印を描画する	plt.plot(データ列, データ列2, marker='X', markersize=n)
タプルをn回、連結する	aTuple * n
ヒストグラムを描画して、その色をグリーンイエローにする	plt.hist(データ列, color='greenyellow')
データフレームのリスト列の欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
データフレームを各列と列の組み合わせ毎に集約し、、最大値を計算する	df.groupby([column, column2], as_index=False).max()
データフレームのリストカラムの欠損値を第二四分位数に変更する	df[aList].fillna(df[aList].median())
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
カラーコードの下三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='v', c=rgb)
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
折れ線グラフを描画して、その色をダークグリーンに変更する	plt.plot(データ列, データ列2, color='darkgreen')
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列, データ列2, color='lawngreen')
本日は何年か知る	datetime.datetime.today().year
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
＜オプション＞グラフの色を青緑に設定する	color = 'teal'
赤い左三角マーカーをリストとリストの散布図にプロットする	plt.plot(xdata, ydata, marker='<', c='r')
データフレームのカラムの月	df[col].dt.month
折れ線グラフのダイアモンドマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
データフレームから最後のカラムを消す	df[df.columns[:-1]]
三自然数のGCD	math.gcd(n, n2, n3)
折れ線グラフを描画してその色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
ヒストグラムでデータフレームのカラムを可視化する	plt.hist(df[column])
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
数列とリストについて黒い淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームのリストカラムの欠損値を後の値に設定する	df[aList].fillna(method='bfill')
折れ線グラフを描画して、色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
＜オプション＞グラフの色をシアンに指定する	color = 'cyan'
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
変数を青色にする	f'\033[34m{value}\033[0m'
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
＜オプション＞左三角マーカーを描画する	marker = '<'
折れ線グラフを描画してその色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
＜オプション＞ゴールデンロッドを使用する	color = 'goldenrod'
青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームのリストカラムの値をValueMapで置き換える	df[aList].replace(ValueMap)
列の各データが何回出現するか見る	df[col].value_counts()
折れ線グラフに黄色い星印を描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
データ列を折れ線グラフに描画してマーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
赤色のポイントマーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='.', c='r')
折れ線グラフを描画してその色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
＜オプション＞ライトスチールブルー色を用いる	color = 'lightsteelblue'
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='gray')
データ列とラベル列を指定して、積み上げ横棒グラフをプロットする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
＜オプション＞スレートブルー色を使う	color = 'slateblue'
グラフの描画で色差別ない色テーマを使用する	sns.set(pallete='colorblind')
データフレームから一番左側の列を除く	df[df.columns[1:]]
リストとリストについて破線グラフを描画して、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
配列とリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
nをn2で割る	n / n2
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
ヒストグラムを描画してその色をアクアに設定する	plt.hist(データ列, color='aqua')
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
変数名をキーとして、マップを準備する	dict(name=element)
リストとリストの折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
nが正の整数	n > 0
赤いクロスマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
日付データが日曜日	aDate.weekday() == 6
実数から浮動小数点数を引く	x - y
グラフのカラーパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
nが無限に続く数列	itertools.repeat(n)
TSVファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
度数分布図を描いて、半透明化にする	plt.hist(データ列, alpha=0.5)
＜オプション＞グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
グローバル変数の一覧	globals()
リストからひとつランダムに選ぶ	random.choice(iterable)
型が名前付きタプルか調べる	issubclass(C, tuple)
線グラフを描画して、その色をダークカーキに指定する	plt.plot(データ列, データ列2, color='darkkhaki')
文字列の先頭で正規表現にASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
リストとリストについての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
セットが空でないか調べる	len(aSet) != 0
両端キューの左にイテラブルの各要素を追加する	deq.extendleft(iterable)
書き込むCSVの小数点以下の桁数をセットする	df.to_csv(filename, float_format='%.3f')
＜オプション＞グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
文字列の左端からタブを取り除く	s.lstrip('\t')
データフレームのリストカラムの75パーセンタイル	df[aList].quantile(0.75)
カウンタから最頻出な要素の件数を求める	aCounter.most_common()[1]
黒い星マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='*', c='k')
グラフの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
＜オプション＞グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
データフレームをJSONLファイルにSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
文字列を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
データフレームの中にある日付データとの個数を数える	df.isin([value, value2]).sum()
折れ線グラフを描画して、その色を赤に設定する	plt.plot(データ列, データ列2, color='red')
横棒グラフの幅をxに変更する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフに線幅nのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
ブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='brown')
散布図を赤い四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c='r')
二つの文字列は等しくないか調べる	s != s2
＜オプション＞色をフォレストグリーンに設定する	color = 'forestgreen'
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
データフレームの中で、列とカラムの重複を見る	df.duplicated(subset=[column, column2])
２つの文字列をコロンで区切って出力する	print(value, value2, sep=':')
青い色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
真部分集合かどうか調べる	aSet < aSet2
折れ線グラフを描画して、色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
折れ線グラフの星マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='*', markersize=n)
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
リストを昇順にソートする	sorted(aList, reverse=True)
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
文字列の示す文字コードを用いて書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding=s)
暗いグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
辞書のコピー	dict(aDict)
数値は両端キューの中に含まれてるか調べる	element in deq
日付データが何日か知る	aDate.day
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
折れ線グラフを描画して色をペルーに変更する	plt.plot(データ列, データ列2, color='peru')
散布図のマーカーの大きさを指定する	plt.scatter(xdata, ydata, s=n)
＜オプション＞グラフの色をミディアムブルーに設定する	color = 'mediumblue'
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
黒い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
データ列の曜日の名前を使う	ds.dt.weekday_name
最適な位置に凡例を加える	plt.legend(loc='best')
ヒストグラムの色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
文字列を走査し正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
タプルとイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
線グラフの色をラベンダーに指定する	plt.plot(データ列, データ列2, color='lavender')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
実数の3乗	x ** 3
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
nからn2を引いてnにする	n -= n2
リストから文字列と等しい最初の要素を除く	aList.remove(element)
データフレームをグループ化し、列に対し個数を求める	df.groupby(column)[column2].count()
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
＜オプション＞グラフの種類を破線に指定する	linestyle = 'dashed'
データ列の値を正規表現patternで一度にreplに置換する	ds.replace(pattern, repl, regex=True)
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
数値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
ヒストグラムを描画して、その色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフの色をマルーンに指定する	plt.plot(データ列, データ列2, color='maroon')
計算機イプシロンを計算する	sys.float_info.epsilon
＜オプション＞暗い赤色を使う	color = 'darkred'
配列を等量で分割数nでビニングする	pd.qcut(aArray, n)
シーケンスからひとつランダムに選ぶ	random.choice(iterable)
列の名前の一覧を見る	df.columns
折れ線グラフを描画して、色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
＜オプション＞グラフの色をラベンダーに設定する	color = 'lavender'
ビン数nのヒストグラムを描画する	plt.hist(データ列, bins=n)
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームの中のカラムを等量で分割数nで分割する	pd.qcut(df[col], n)
データフレームの列を小数点以下n桁で四捨五入する	df[col].round(n)
列をセットに変換する	set(iterable)
＜オプション＞オリベドラブを使う	color = 'olivedrab'
ヒストグラムを描画して、その色をライトイエローにセットする	plt.hist(データ列, color='lightyellow')
折れ線グラフに黄色い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
データ列を度数分布図で可視化する	plt.hist(ds)
線グラフの色をホワイトスモークに変更する	plt.plot(データ列, データ列2, color='whitesmoke')
データフレームから列を三つだけ選択する	df[[column, column2, column3]]
文字列を部分文字列で分けたときの最初の文字列	s.partition(sub)[0]
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
数列とデータ列の散布図を暗い色を使ってプロットする	plt.plot(xdata, ydata, c='dark')
横向きに3つのデータフレームを一つにまとめる	pd.concat([df, df2, df3], axis=1)
データフレームを2つの列を用いて昇順に並べる	df.sort_values(by=['A', 'B'], ascending=True)
範囲を指定して乱数を求める	random.randint(最小値, 最大値)
無限大	math.inf
データフレームを'A'列によって昇順に破壊的に並べる	df.sort_values(by='A', ascending=True, inplace=True)
両端キューの中に要素が含まれてるか調べる	element in deq
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
グラフのパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
格子線をグラフに入れる	plt.grid(True)
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
データフレームを列ごとにグループ化して、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列, データ列2, color='lightcoral')
リストを縦軸、リストを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
ヒストグラムを描画して、その色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
文字列はリストの要素でない	element not in aList
文字列がタプルに含まれないか調べる	element not in aTuple
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
リストと配列について破線グラフを描いてその色を淡いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
データフレームから列を3つのみ選択する	df[[column, column2, column3]]
＜オプション＞グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
＜オプション＞グラフの色をオリベドラブに設定する	color = 'olivedrab'
フォーマットfmtでデータ列をタイムスタンプに変換する	pd.to_datetime(ds, format=fmt)
散布図に淡い色のマーカーを使う	plt.plot(xdata, ydata, c='muted')
折れ線グラフに線幅nの菱形印を描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
数列とリストについて明るい色の折れ線を描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
コマンド引数の一覧を得る	sys.argv[1:]
日付時刻データの日数	aDatetime.day
'A'列の値によってデータフレームをグループ化し、基本統計量を求める	df.groupby('A').describe()
二つのデータフレームを列をキーにして内部結合する	pd.merge(df, df2, on=column, how='inner')
パステル調の色のマーカーとして散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
線グラフを描画して、色をチョコレートに指定する	plt.plot(データ列, データ列2, color='chocolate')
折れ線グラフの右三角印を黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
折れ線グラフを描画して、その色をカーキに指定する	plt.plot(データ列, データ列2, color='khaki')
データフレームの中で何行、重複するか確認する	df.duplicated().sum()
＜オプション＞紺色を使う	color = 'darkblue'
折れ線グラフを描画して色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
文字列を後ろから部分文字列で区切る	s.rsplit(sub)
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
＜オプション＞色をベージュにする	color = 'beige'
非アルファベットが文字列中に含まれる	any(not c.isalpha() for c in s)
データフレームのカラムを100の位で丸める	df[col].round(-2)
カラムのメディアン	ds.median()
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
ヒストグラムを描画して、色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
リストを下線付きでプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='palevioletred')
データフレームを列によって昇順に並べ直して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストの最初の文字列を探す	aList.index(element)
レモンシフォン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lemonchiffon')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
モードでデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
リストの中の最大値	max(aList)
＜オプション＞エラーを無視するように設定する	errors = 'ignore'
既存の配列を元に全要素が1のベクトル	np.ones_like(aArray)
再帰の最大回数を確認する	sys.getrecursionlimit()
＜オプション＞ライトイエローを使う	color = 'lightyellow'
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
データフレームをグループ化しそれぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
データフレームの最後n行を抽出する	df.tail(n)
データ列とリストの破線グラフを描画してその色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
折れ線グラフを描画して、色をブラックに指定する	plt.plot(データ列, データ列2, color='black')
データフレームに重複があるか見る	df.duplicated()
実数を切り上げて整数にする	math.ceil(x)
ファイルをクローズする	f.close()
ヒストグラムを描画して、その色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
折れ線グラフの色をオレンジレッドにセットする	plt.plot(データ列, データ列2, color='orangered')
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
パステル調のグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞グラフの色をダークターコイズに設定する	color = 'darkturquoise'
実行結果を青色で表示できる文字列にする	f'\033[34m{value}\033[0m'
データフレームをファイルでJSONLファイルに保存する	df.to_excel(filename)
データフレームを'A'列でソートして、更新する	df.sort_values(by='A', inplace=True)
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
リストとイテラブルについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
ヒストグラムを描画してその色をスラグレーにする	plt.hist(データ列, color='slategray')
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
小数点数の仮数を求める	math.frexp(x)[0]
nがn2かどうか調べる	n == n2
無限にnからカウントアップする	itertools.count(start=n)
破線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
小数点数のバイナリ対数を計算する	math.log2(x)
列を累加する	itertools.accumulate(iterable)
現在が日曜日か調べる	datetime.datetime.today().weekday() == 6
折れ線グラフを描画して、その色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
predicateFuncが真となるリストの要素	itertools.takewhile(predicateFunc, iterable)
線幅nの四角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
データフレームの先頭n行	df.head(n)
線グラフの色を紺碧に指定する	plt.plot(データ列, データ列2, color='azure')
イテラブルと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームから破壊的に重複するデータを削除する	df.drop_duplicates(inplace=True)
＜オプション＞グラフの線幅をnにセットする	linewidth = n
パステル調のの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
等差数列を配列にする	np.arange(開始値, 終端値, 等差)
黒いポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.', c='k')
＜オプション＞ピーチパフ色を使う	color = 'peachpuff'
ヒストグラムを描画して、その色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
データフレームの中で、列と列の重複を落とす	df.drop_duplicates(subset=column)
ヒストグラムを描画して、色をアイボリーに設定する	plt.hist(データ列, color='ivory')
文字列を空白で右側から区切る	s.rsplit()
イテラブルとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
ヒストグラムを描画して、その色をサーモンに変更する	plt.hist(データ列, color='salmon')
リストとイテラブルについての散布図に文字列という補足用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データフレームの欠損値を最小値にする	df.fillna(df.min())
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
データ列とリストについて散布図を描画し、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
辞書のキーを列挙する	list(aDict)
データフレームのそれぞれのグループごとの分散を求める	df.groupby(column).var()
自然数個のものからk個取り出した場合の並べ方の総数	math.perm(n, k)
カウンタからゼロカウントを削除する	+aCounter
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列, データ列2, color='darkgreen')
タプルの要素をソートする	sorted(aTuple)
折れ線グラフに左三角マーカーを使う	plt.plot(データ列, データ列2, marker='<')
リストとデータ列についての散布図に文字列という凡例用のラベルをつける	plt.scatter(xdata, xdata, label=s)
データラベルをプロットに表示する	plt.legend()
データフレームのリスト列のNaNを直前の値に変更する	df[aList].fillna(method='ffill')
データフレームを整数に丸める	df.round()
文字列をエンコーディングによってバイト列に変換する	s.encode(encoding=encoding)
折れ線グラフに大きさnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
型のサブクラスか	issubclass(サブクラス, クラス)
リストと配列の散布図をプロットし、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
タプルを浅くコピーする	dict(aDict)
ヒストグラムを描画して、ビン数をnに設定する	plt.hist(データ列, bins=n)
片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
ヒストグラムの色を深紅にセットする	plt.hist(データ列, color='crimson')
線グラフを描画して、色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
＜オプション＞バイナリモードに設定する	mode = 'rb'
＜オプション＞ミディアムターコイズ色を使う	color = 'mediumturquoise'
nが1、もしくは2か調べる	n == 1 or n == 2
数式の数値を算出する	float(e)
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
部分文字列で文字列の開始位置以降が始まるか調べる	s.startswith(sub, start)
データフレームの中の欠損値を削除する	df.dropna()
プログラムの実行を強制的に終了する	sys.exit()
折れ線グラフの色を黒くする	plt.plot(データ列, データ列2, color='k')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
オブジェクトは集合型のインスタンスかどうか調べる	isinstance(obj, set)
折れ線グラフのスタイルを一点鎖線にセットする	plt.plot(データ列, データ列2, linestyle='dashbot')
黒い丸マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='o', c='k')
文字列を隔離する	sys.intern(s)
データ列とリストについて散布図を描いて、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
データ列とデータ列の散布図を描画して、マーカーを左三角に指定する	plt.plot(xdata, ydata, marker='<')
データフレームの中のNaNがある行をドロップする	df.dropna()
折れ線グラフを描画してその色をチョコレートに変更する	plt.plot(データ列, データ列2, color='chocolate')
ファイルをバイナリ用にオープンする]	open(filepath, mode='rb')
データフレームのカラムの分散	df[col].var()
＜オプション＞色をオーキッドに設定する	color = 'orchid'
グラフのグリッドを暗くする	sns.set(style='darkgrid')
データフレームのカラムとカラムを折れ線グラフで描画する	plt.plot(df[col], df[col2])
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
実数が正の数	x > 0
横棒グラフを描画して中央寄せする	plt.barh(ラベル列, データ列, align='center')
折れ線グラフの星マーカーを黄色くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
リストとリストのカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
データ列と配列の黒色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
データ列の値がNaNかどうか調べる	ds.isna()
淡いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームを２つの列で小さい順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ファイルをSJISを使って書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
データ列と配列についての散布図に黒色の右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
リストとリストについての散布図に黒色の星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
赤いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
数式の変数を数値で置き換える	e.subs(z, e2)
折れ線グラフの四角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
データフレームのリスト列の中にある文字列の合計を数える	df[aList].isin([value]).sum()
ゼロ埋めされたブール型の行列	np.zeros(要素数, dtype=np.int32)
行列の行ごとの最小値	np.min(aArray, axis=1)
折れ線グラフの色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
＜オプション＞マーカーを右三角に変更する	marker = '>'
実数の正弦	math.sin(x)
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
本日のローカルな日付	datetime.date.today()
nが5で割り切れる	n % 5 == 0
二つの集合のいずれか一方だけの集合を計算する	aSet.symmetric_difference(aSet2)
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
整数を文字列に変換する	str(x)
グラフのサイズを横width縦heightに設定する	plt.figure(figsize=(width, height))
複数の列の値でデータフレームをグループ化する	df.groupby(columns)
＜オプション＞小麦色色を使う	color = 'wheat'
行列積	np.matmul(aArray, aArray2)
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
折れ線グラフの色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
文字列が組に含まれない	element not in aTuple
＜オプション＞パールバイオレットレッド色を使う	color = 'palevioletred'
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
＜オプション＞リネン色を使用する	color = 'linen'
無限な数列	itertools.count()
2つのデータフレームを横方向にマージする	pd.merge(df, df2)
列にシーケンスを続ける	itertools.chain(iterable, iterable2)
データフレームのリストで指定された列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
データフレームの指定された二列を抽出する	df[[column, column2]]
データ列とリストの折れ線グラフをアルファalphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
変数について数式のインテグラルを求める	sympy.integrate(e, z)
リストとリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
シーケンスを累積する	itertools.accumulate(iterable, operator.mul)
２つの列によってデータフレームをソートする	df.sort_values(by=['A', 'B'])
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
リストの要素を関数に適用した結果でソートする	sorted(aList, key=func)
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
実数のハイパボリック・コサイン	math.cosh(x)
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
タプルのn番目のの値	aTuple[n]
BOM付きとしてファイルパスをオープンする]	open(filepath, encoding='utf_8_sig')
＜オプション＞パープルを使う	color = 'purple'
aListn番目から要素をポップする	aList.pop(n)
折れ線グラフを描画して、その色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
グラフの色使いを淡くする	sns.set(pallete='muted')
表示する最大列数を変更する	pd.set_option('display.max_columns', n)
データ列の未入力値を第二四分位数に設定する	ds.fillna(ds.median())
リストとリストを折れ線グラフに描く	plt.plot(xdata, ydata)
データ列の欠損値を後の行の値に設定する	ds.fillna(method='bfill')
黒色の丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o', c='k')
線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
リストをビン数nを用いて分割する	pd.cut(aList, n)
データフレームの数値を丸める	df.round()
大きい順にデータフレームを複数の列によってで並べる	df.sort_values(by=column, ascending=False)
赤い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
＜オプション＞グラフの色をシーグリーンに設定する	color = 'seagreen'
ペールグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegreen')
列'A'と列'B'をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
オブジェクトは文字列か調べる	isinstance(obj, str)
year年month月day日hour時minute分のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
散布図のマーカーの大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
データ列を折れ線グラフに描画して、マーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
＜オプション＞ダークグレー色を用いる	color = 'darkgrey'
＜オプション＞グラフの色をオリーブに設定する	color = 'olive'
集合が空集合かどうか	len(aSet) == 0
文字列が数字	s.isdigit()
＜オプション＞エンコーディングをSJISに設定する	encoding = 'shift_jis'
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
標準入力を得る	sys.stdin
50パーセンタイルでデータフレームのカラムの未入力値を補う	df[col].fillna(df[col].median())
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
ヒストグラムを描画して、その色をオーキッドに変更する	plt.hist(データ列, color='orchid')
折れ線グラフに星マーカーを使う	plt.plot(データ列, データ列2, marker='*')
ヒストグラムを描画してその色をスラグレーに設定する	plt.hist(データ列, color='slategray')
＜オプション＞グラフの色をコーンズシルクに変更する	color = 'cornsilk'
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
折れ線グラフを描画して、その色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
最後の部分文字列で文字列を二分する	s.rpartition(sub)
文字列を代数計算の変数に変換する	sympy.Symbol(s)
両端キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
ダーク・スラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategrey')
変数をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
ヒストグラムを描画してその色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
全要素を０で初期化された整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int)
カウンタの項目数を使う	len(aCounter)
平均でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].mean())
折れ線グラフを描画して色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
折れ線グラフを描画して、その色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
オプションで、標準出力に出力する	file = sys.stdout
逆双曲線正弦	math.asinh(x)
明日の日付を見る	datetime.date.today() + datetime.timedelta(days=1)
データフレームのリストカラムを千の位で丸める	df[aList].round(-3)
データフレームの標本標準偏差を求める	df.std()
線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
折れ線グラフに大きさnの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markersize=n)
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
今日は何月か知る	datetime.datetime.today().month
要素が集合のメンバーでないか調べる	element not in aSet
＜オプション＞印を上三角に変更する	marker = '^'
淡いグラフをリストとデータ列でプロットし、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームから列を４つのみ選択する	df[[column, column2, column3, column4]]
JSONファイルのファイルを辞書に変換する	json.load(fin)
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
文字列を右から部分文字列で区切る	s.rsplit(sub)
直後の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='bfill')
ファイルパスのセパレータ記号	os.sep
パステル調のグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
折れ線グラフの▼印を黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
Pandasで、書式でデータ列をタイムスタンプに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
現在が何分か知る	datetime.date.today().minute
データフレームの中にある日付データの合計を求める	df.isin([value]).sum()
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
データフレームの行列を入れ替える	df.T
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
データフレームのカラムの中に文字列と文字列が存在するか調べる	df[col].isin([value, value2])
リストのn番目に文字列を挿入する	aList.insert(n, element)
プロットに補足を文字列と文字列と入れる	plt.legend([s, s2])
折れ線グラフのマーカーを大バツにする	plt.plot(データ列, データ列2, marker='X')
文字列はタイトルケースかどうか調べる	s.istitle()
整数nの二進数文字列	bin(n)[2:]
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
列によってデータフレームをグループ化して、標準偏差を算出する	df.groupby(column).std()
グラフの描画でパステル調のカラーパレットを使う	sns.set(pallete='pastel')
＜オプション＞グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
＜オプション＞ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
nがn2	n == n2
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
リストが空でないか	len(aList) != 0
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
折れ線グラフを描画してその色をバリーウッドに変更する	plt.plot(データ列, データ列2, color='burlywood')
双曲線余弦の逆数	math.acosh(x)
整数nを二進リテラルに変換する	bin(n)
破線グラフの色を淡いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
折れ線グラフのダイアモンド印を黒色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
浮動小数点数の双曲線正接の逆数	math.atanh(x)
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
実行結果を白色でプリントする	print(f'\033[37m{value}\033[0m')
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
＜オプション＞ミディアムパープル色を使う	color = 'mediumpurple'
ダークサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darksalmon')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
実数とyの斜辺を計算する	math.hypot(x, y)
十六進文字列を整数に変換する	int(s, 16)
辞書をカウンタに変換する	collections.Counter(aDict)
二つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
リストとリストのパステル調のグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
列をキーにして２つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
集合の補集合	aSet.difference(aSet2)
グラフのデザインをデフォルトでいい感じに設定する	sns.set()
イテラブルをセットに追加する	aSet.update(iterable)
＜オプション＞丸印を用いる	marker = 'o'
色差別ないグラフの色を青くする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
＜オプション＞インデックスを連番に指定する	index_col = None
ヒストグラムを描画して、色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
線グラフを描画して、色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategray')
nが3の倍数	n % 3 == 0
データフレームの列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
データフレームの列の値がxでない行を取り除く	df[df[column] == x]
既存の配列を元に全要素が0の行列	np.zeros_like(aArray)
文字列のn番目を使う	s[n]
実数を三乗する	x ** 3
折れ線グラフの色をミディアムバイオレットレッドにセットする	plt.plot(データ列, データ列2, color='mediumvioletred')
折れ線グラフを描画してその色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
ひとつでも空白が文字列内にあるか調べる	any(c.isspace() for c in s)
折れ線グラフを描画して、その色をピーチパフに変更する	plt.plot(データ列, データ列2, color='peachpuff')
折れ線グラフを描画してその色をシーグリーンにセットする	plt.plot(データ列, データ列2, color='seagreen')
＜オプション＞グラフの色をピンクに指定する	color = 'pink'
折れ線グラフの左三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
日付データが日付データと同時か	aDate == aDate2
＜オプション＞読み込むシートの名前をnamesに設定する	sheet_name = names
＜オプション＞オーキッドにグラフの色を設定する	color = 'orchid'
データ列を折れ線グラフに描画して、マーカーをポイント印にする	plt.plot(データ列, データ列2, marker='.')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
配列とデータ列について散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
文字列の先頭から余分な空白やタブを取り除く	s.lstrip()
リストから配列を初期化する	np.array(aList)
日本語が文字列に含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
オブジェクトの属性の値を変更する	setattr(obj, プロパティ名, 値)
数列と数列の色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
2つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
白色の線グラフを描画する	plt.plot(データ列, データ列2, color='white')
ヒストグラムを破線として描画する	plt.hist(データ列, linestyle='dashed')
折れ線グラフに黄色い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
データフレームのリストカラムの中に文字列と文字列があるかどうかテストする	df[aList].isin([value, value2])
複数カラムのヒストグラムを一度にプロットする	sns.pairplot(df[[column, column2, column3]])
右三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='>')
実数のn乗の実数剰余	pow(x, n, y)
縦方向に３つのデータフレームをくっつける	pd.concat([df, df2, df3], axis=0)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
プログラムを強制的に終了する	sys.exit()
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
数値を下線付きにする	f'\033[4m{value}\033[0m'
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
Pandasで、フォーマットを用いて文字列をPandasの日付型にする	pd.to_datetime(s, format='%Y-%m-%d')
タプルの値を昇順に並べる	sorted(aTuple, reverse=True)
配列とリストについて黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
ライトグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightgrey')
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
散布図にカラーコードの▲マーカーを用いる	plt.plot(xdata, ydata, marker='^', c=rgb)
タプルの合計値	sum(aTuple)
文字列を末尾から空白で区切る	s.rsplit()
ヒストグラムを描画して、その色をマルーンに設定する	plt.hist(データ列, color='maroon')
線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^')
書き込みできるようにファイルを文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
日付データの日数	aDate.day
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
赤色の濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
配列とデータ列について散布図を描画し、、星マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='*', c=rgb)
折れ線グラフを描画して、色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
文字列中から部分文字列を探す	s.find(sub)
データ列とラベルを指定して、縦棒グラフを描画する	plt.bar(ラベル列, データ列)
折れ線グラフの△マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
＜オプション＞ライトグレー色を使う	color = 'lightgrey'
何回まで再帰ができるかを	sys.getrecursionlimit()
折れ線グラフを描画して、その色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
双方向キューが空でない	len(deq) != 0
日付データにn分を足す	aDate + datetime.timedelta(minutes=n)
ヒストグラムを描画して、色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
ヒストグラムを描画して、その色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
リストとデータ列についての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
実数が整数か	x.is_integer()
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
データフレームのリストカラムの母標準偏差を計算する	df[aList].std(ddof=0)
＜オプション＞タンにグラフの色をセットする	color = 'tan'
データフレームの中で何行、重複するか見る	df.duplicated().sum()
リストとリストについてパステル調の色の折れ線グラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データ列とデータ列の散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
データフレームのリストカラムの尖度	df[aList].skew()
JSONファイルのfをデータに変換する	json.load(fin)
＜オプション＞ミントクリームに色を設定する	color = 'mintcream'
日付データが日付データより早いか	aDate < aDate2
データフレームの列と列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
nが一桁の数か調べる	0 <= n <= 9
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
＜オプション＞ミントクリーム色を使う	color = 'mintcream'
データ列を折れ線グラフに描画して、マーカーをクロスにする	plt.plot(データ列, データ列2, marker='x')
アクアにヒストグラムの色を指定する	plt.hist(データ列, color='aqua')
リストとデータ列についての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
＜オプション＞グリーン色を用いる	color = 'green'
グラフのサイズを指定する	plt.figure(figsize=(width, height))
ヒストグラムを描画して、その色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep')
データフレームのカラムが正規分布からどの程度尖っているか見る	df[col].skew()
ヒストグラムの色をタンにセットする	plt.hist(データ列, color='tan')
配列とリストの散布図を淡い色で描く	plt.plot(xdata, ydata, c='muted')
列とシーケンスをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
実数に実数を加算する	x + y
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
今日が水曜日	datetime.datetime.today().weekday() == 2
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
＜オプション＞グラフの色をナバホホワイトに設定する	color = 'navajowhite'
データ列をインポートする	import pandas as pd
シーケンスとシーケンスを連結する	itertools.chain(iterable, iterable2)
破線グラフの色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
折れ線グラフの色を黄色にセットする	plt.plot(データ列, データ列2, color='yellow')
折れ線グラフの左三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
イテラブルを累加する	itertools.accumulate(iterable)
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
文字列中にひとつでも非小文字があるか調べる	any(not c.islower() for c in s)
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
数列とリストの散布図に黒色の四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
データフレームをJSONLファイルにBOM付きで書き込む	df.to_csv(filename, encoding='utf_8_sig')
ファイルのファイル名	os.path.basename(filepath)
折れ線グラフの色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
ヒストグラムを描画してその色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
折れ線グラフを描画してその色をミディアムブルーに指定する	plt.plot(データ列, データ列2, color='mediumblue')
nがn2以下、または、n3以上	n <= n2 or n >= n3
行列の和	aArray + aArray2
日付時刻データが火曜日か	aDatetime.weekday() == 1
両端キューを要素を出す	deq.popleft()
データフレームのカラムの平均	df[col].mean()
データ列が正規分布からどの程度、尖っているか調べる	ds.skew()
グラフにグリッド線を入れる	plt.grid(True)
ファイルのディレクトリ名	os.path.dirname(filepath)
タイムスタンプデータからn秒分、引く	aDatetime - datetime.timedelta(seconds=n)
緑色の星印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
＜オプション＞グラフの色をライトシアンに設定する	color = 'lightcyan'
データフレームを配列に変換する	df.values
nのバイト長	(n.bit_length() + 7) // 8
イテラブルとリストの散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
3自然数の最小公倍数	math.lcm(n, n2, n3)
赤い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
配列と同じ大きさの空行列を作成する	np.empty_like(aArray)
スライドにプロットの用途を設定する	sns.set(context='talk')
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
日付時刻データが土曜日かどうか	aDatetime.weekday() == 5
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
kを底とする実数の対数	math.log(x, k)
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
データフレームを列によって大きい順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
文字列中の部分文字列を別の文字列に回数を制限して置換する	s.replace(sub, newsub, n)
３数の最も小さい値を求める	min(x, y, z)
値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
配列を2次元1列に変形する	aArray.reshape(-1, 1)
データフレームから列を二つ選択する	df[[column, column2]]
ダイアモンドマーカーを散布図に使う	plt.plot(xdata, ydata, marker='D')
折れ線グラフを描画して、その色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
＜オプション＞グラフの色をライムグリーンに設定する	color = 'limegreen'
行列の行ごとの最大値を計算する	np.max(aArray, axis=1)
パターンに大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームのカラムの未入力値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkmagenta')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
折れ線グラフを描画して、色をレベッカパープルにする	plt.plot(データ列, データ列2, color='rebeccapurple')
実数は無限大か調べる	math.isinf(x)
ヒストグラムを描画して、その色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
文字列を正規表現で分割する	re.split(pattern, s)
＜オプション＞スカイブルー色を使う	color = 'skyblue'
データフレームから重複した行を削除して、更新する	df.drop_duplicates(inplace=True)
データ列の歪度	ds.kurt()
データ列とリストについての散布図に上三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
第一引数で指定されたファイルの名前	sys.argv[1]
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
＜オプション＞グラフの色をオレンジに設定する	color = 'orange'
リストとリストの折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
赤い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='r')
赤い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
ヒストグラムを描画して、色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
カラーコードの丸マーカーで散布図を描く	plt.plot(xdata, ydata, marker='o', c=rgb)
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
ヒストグラムを描画して、色をペルーに設定する	plt.hist(データ列, color='peru')
オブジェクトのフィールドの値をする	setattr(obj, プロパティ名, 値)
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
カラーコードの三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='^', c=rgb)
ピアソン積率相関係数でデータフレームの相関行列	df.corr(method='pearson')
リストとデータ列について散布図を描画して、色を明るいに変更する	plt.plot(xdata, ydata, c='bright')
日付データが水曜日かどうか	aDate.weekday() == 2
ヒストグラムを描画して、その色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
データフレームの列名を指定した名前リストに置き換える	df.columns = columns
リストとリストについてカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
色差別ないカラーパレットをグラフの描画で使う	sns.set(pallete='colorblind')
漢字が文字列に含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
ヒストグラムを描画して、その色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
データ列を折れ線グラフに描画して、印を四角にする	plt.plot(データ列, データ列2, marker='s')
イテラブルから行列を初期化する	np.array(iterable)
データフレームの中に文字列があるか調べる	df.isin([value])
タプル内の要素は全て真	all(aTuple)
データ列の値が欠損値かどうか確認する	ds.isna()
＜オプション＞文字コードをEUCに設定する	encoding = 'euc_jp'
折れ線グラフを破線に変更する	plt.plot(データ列, データ列2, linestyle='dashed')
＜オプション＞エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
辞書の項目名の値を参照する	aDict[key]
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
組を引数として展開して表示する	print(*aTuple, sep=',')
＜オプション＞赤色を使用する	color = 'red'
線グラフを描画して、色をミディアムバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='mediumvioletred')
＜オプション＞改行コードをWindowsに設定する	newline = '\r\n'
にy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
線グラフの色をシアンに指定する	plt.plot(データ列, データ列2, color='cyan')
両端キューの要素を逆に並べ直す	deq.reverse()
値は集合の要素に含まれないかどうか調べる	element not in aSet
ファイルを読み込みモードを使ってオープンする]	open(filepath, mode='r')
ファイルパスをバイナリ用にオープンして]fとする	f = open(filepath, mode='rb')
透明度alphaの折れ線をプロットする	plt.plot(xdata, ydata, alpha=alpha)
データ列をy軸、配列を横軸と指定して、折れ線グラフを描く	plt.plot(xdata, ydata)
黄色にヒストグラムの色を指定する	plt.hist(データ列, color='yellow')
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
データフレームのリスト列の中にいくつ未入力値が存在するか求める	df[aList].isna().sum()
データフレームを関数の値によってグループ化する	df.groupby(関数)
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
折れ線グラフを描画して、その色をライトスカイブルーに変更する	plt.plot(データ列, データ列2, color='lightskyblue')
昇順にリストを並べる	sorted(aList, reverse=True)
2進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
リストとリストについての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームの列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
データ列の欠損値をモードに増やす	ds.fillna(ds.mode().iloc[0])
暗いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
明るい色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='bright')
リストをx軸にして、配列の変化を描画する	plt.plot(range(len(xdata)), xdata)
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
＜オプション＞ライトグリーン色を使う	color = 'lightseagreen'
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
四分位数ごとにデータ列を分割する	pd.qcut(ds, 4)
各カラム毎にデータフレームをグループ化して、列の合計を計算する	df.groupby(column)[column2].sum()
真部分集合か	aSet < aSet2
ファイルから1文字読み込む	f.read(1)
項目名がタプル上で定義されていないかどうか確認する	key not in aDict
データフレームのカラムを整数に丸める	df[col].round()
変数を定義する	x = n
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
日付データが日付データより後ろか調べる	aDate > aDate2
文字列のケースを変換する	s.casefold()
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
実数の床数を計算する	math.floor(x)
文字列の開始位置と終了位置の間に部分文字列が存在するか調べる	s.find(sub, start, end) != -1
リストと配列についての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
変数名をキーとして辞書	dict(name=element)
線グラフの色をハニーデューに指定する	plt.plot(データ列, データ列2, color='honeydew')
データフレームを各列と列の組み合わせ毎にグループ化し、最小値を求める	df.groupby([column, column2], as_index=False).min()
折れ線グラフを描画して色をダークゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='darkgoldenrod')
珊瑚色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
異なるカラムをキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームを各列と列の組み合わせ毎にグループ分けして、分散を求める	df.groupby([column, column2], as_index=False).var()
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
＜オプション＞グラフの色をカデットブルーに指定する	color = 'cadetblue'
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
リネン色の線グラフを描画する	plt.plot(データ列, データ列2, color='linen')
ビン数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
データフレームのカラムの欠損値を直前の値に増やす	df[col].fillna(method='ffill')
＜オプション＞グラフの色を深紅に設定する	color = 'crimson'
オブジェクトは整数クラスのインスタンスか調べる	isinstance(obj, int)
タプルを逆順にする	reversed(aTuple)
ヒストグラムを描画してその色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
ゼロ埋めした８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
＜オプション＞のシート名をnamesに設定する	sheet_name = names
行列の合計値を計算する	np.sum(aArray)
タプル中の要素が全て真	all(aTuple)
データ列を等しい量になるようにn個にビニングする	pd.qcut(ds, n)
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
ヒストグラムを描画して、その色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
文字列をファイルに書く	f.write(s)
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c='r')
＜オプション＞バイナリモードに指定する	mode = 'rb'
文字列を右寄せにする	s.rjust(文字列幅)
＜オプション＞グラフの色をシルバーにセットする	color = 'silver'
データフレームの列がxかつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
作業ディレクトリ	os.getcwd()
アイボリー色の線グラフを描画する	plt.plot(データ列, データ列2, color='ivory')
ライトグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='lightseagreen')
中央値でデータフレームの未入力値を置換する	df.fillna(df.median())
＜オプション＞昇順にする	ascending = True
データフレームから重複を認めてランダムにn行をサンプリングする	df.sample(n, replace=True)
グラフの見栄えを綺麗にする	import seaborn as sns
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
データフレームの列の文字列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
緑色の四角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
折れ線グラフの下三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
キーが辞書に存在するか調べる	key not in aDict
今日が何曜日か知る	datetime.datetime.today().weekday()
組の文字列が最初に見つかるインデックス	aTuple.index(element)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
＜オプション＞グラフの色をロージーブラウンに指定する	color = 'rosybrown'
データラベルをグラフに被らない位置に入れる	plt.legend(loc='best')
折れ線グラフを描画して、その色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
オーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='orchid')
折れ線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
散布図を黒い左三角マーカーとして描画する	plt.plot(xdata, ydata, marker='<', c='k')
Pandasで文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
＜オプション＞グレーにグラフの色をセットする	color = 'grey'
値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
表データを'A'列によって降順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
双方向キューのstart〜endの要素を見る	collections.deque(itertools.islice(deq, start, end))
データフレームのカラムのNaNを直後の値に設定する	df[col].fillna(method='bfill')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
クラスが名前付きタプルか確認する	issubclass(C, tuple)
文字列の両端から不要な空白を消す	s.strip()
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
文字列を空白によって区切って、整数リストにする	map(int, s.split())
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
ヒストグラムを描画して、その色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
折れ線グラフの丸印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
日付時刻データの日数を見る	aDatetime.day
散布図を黒色の菱形マーカーで描画する	plt.plot(xdata, ydata, marker='D', c='k')
データ列とラベル列を指定して横棒グラフをプロットする	plt.barh(ラベル列, データ列)
両端キューのstart〜endの部分データ	collections.deque(itertools.islice(deq, start, end))
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
データフレームの最頻値	df.mode()
ベクトルの演算をする	import numpy as np
カラムを10の位で四捨五入する	ds.round(-1)
数値を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
文字列内にひとつでも大文字が含まれるか	any(c.isupper() for c in s)
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
データフレームを表示するとき、表示可能な列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
配列と配列の折れ線グラフを描画する	plt.plot(xdata, ydata)
データフレームを列の値でグループ分けする	df.groupby(column)
グラフの目的をスライドに設定する	sns.set(context='talk')
キーが辞書にない時、要素を追加する	aDict.setdefault(key, element)
＜オプション＞プラムにグラフの色を指定する	color = 'plum'
バイトオーダを知る	sys.byteorder
折れ線グラフを描画して、その色をアイボリーにセットする	plt.plot(データ列, データ列2, color='ivory')
リストとリストについて散布図を描き、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
グラフで使う縦軸にuntitledという名称をつける	plt.ylabel(untitled)
データフレームのリスト列の中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
エクセルファイルファイルからエクセルデータを読み込む	pd.read_excel(filename)
データ列を折れ線グラフに描画して、マーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
実数の三乗	x ** 3
二つのリストから辞書	dict(zip(aList, aList2))
書き込みできるようにUTF8でファイルを開く]	open(filepath, mode='w', encoding='utf-8')
Pandasで、エポック秒のデータ列からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームの列の未入力値を前の値で埋める	df[col].fillna(method='ffill')
ヒストグラムを描画して、その色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
連立方程式の解を算出する	sympy.solve([e, e2])
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
＜オプション＞インディアンレッドにグラフの色を設定する	color = 'indianred'
リストとリストの黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
折れ線グラフの色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
nとn2の和	n + n2
データフレームから列名を複数指定して選択する	df[columns]
折れ線グラフを描画して、色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
重なりを見やすく濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
データフレームから型型の列を取り出す	df.select_dtypes(ty)
両端キューが空でないか調べる	len(deq) != 0
値は集合のメンバーか調べる	element in aSet
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategrey'
nとn2の論理積	n & n2
現在のタイムスタンプ	int(time.time())
折れ線グラフを描画して、その色をシアンに指定する	plt.plot(データ列, データ列2, color='cyan')
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
リストとデータ列で暗いの折れ線グラフを描いて線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
Pandasで、フォーマットでデータフレームのcollをPandasの日付型にする	pd.to_datetime(df[col], format='%Y-%m-%d')
ケンドール相関係数を用いてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
＜オプション＞ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
データフレームをグループ化し、各列に対し最小値を求める	df.groupby(column)[column2].min()
データフレームを'A'列によって昇順に並べ直し、更新する	df.sort_values(by='A', ascending=True, inplace=True)
タプルが全て真か調べる	all(aTuple)
ヒストグラムを描画して、その色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
データフレームから指定された二つの列を取り出す	df[[column, column2]]
列とイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
ヒストグラムを描画して、その色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
列をイミュータブルな集合に変換する	frozenset(iterable)
文字列中の部分文字列の出現	s.count(sub)
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
データ構造を使う	import collections
＜オプション＞線種を一点鎖線に設定する	linestyle = 'dashbot'
ベクトルの型	aArray.dtype()
データフレームのそれぞれのグループの個数	df.groupby(column).count()
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
nかつn2	n and n2
二つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
文字列中の大文字を小文字に変換する	s.lower()
折れ線グラフを一点鎖線で描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
＜オプション＞無視するフッタをnに変更する	skipfooter = n
リストとリストについて散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
列名リストの値によってデータフレームをグループ化し、基本統計量を計算する	df.groupby(columns).describe()
折れ線グラフのポイント印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
＜オプション＞コーンフラワーブルーを使う	color = 'cornflowerblue'
折れ線グラフに緑色のポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
配列とリストについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
二進文字列を整数に変換する	int(s, 2)
線グラフの色を小麦色に指定する	plt.plot(データ列, データ列2, color='wheat')
ヒストグラムを描画して、半透明ににする	plt.hist(データ列, alpha=0.5)
追加モードでファイルをオープンする]	open(filepath, mode='a')
データフレームを使う	import pandas as pd
配列とデータ列の青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
整数nがセットのどれかか調べる	n in aSet
＜オプション＞グラフの色をホットピンクに設定する	color = 'hotpink'
散布図に赤いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='r')
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
xが一桁の整数	-9 <= x <= 9
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
マゼンタで文字列をプリントする	print(f'\033[35m{value}\033[0m')
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ヒストグラムを描画してその色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
赤いダイアモンドマーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='D', c='r')
ベクトルの形を計算する	aArray.shape
線グラフを描画して、色をモカシンに変更する	plt.plot(データ列, データ列2, color='moccasin')
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
リストをx座標と指定して、折れ線グラフをプロットする	plt.plot(range(len(xdata)), xdata)
折れ線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
棒を積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
シアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='cyan')
リスト内の要素が少なくともひとつ真か調べる	any(aList)
最初のコマンド引数を調べる	sys.argv[1]
マップの項目名を要素に変更する	aDict[key] = element
自然数の最大公約数	math.gcd(n, n2)
カウンタの項目一覧	aCounter.keys()
データ列と配列の散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
データフレームのカラムの要約統計量を求める	df[col].describe()
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
ヒストグラムを描画して、その色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
＜オプション＞ダークグレーを使う	color = 'darkgray'
カウンタを高頻度方から列挙する	aCounter.most_common()
数のn乗	x ** n
オプションで、出力先を標準エラーに設定する	file = sys.stderr
ヒストグラムのビン数をセットする	plt.hist(データ列, bins=n)
リストとリストとしてパステル調のの折れ線をプロットして、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
イテラブルと配列についての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
二数の最小値	min(x, y)
＜オプション＞グラフの色をベージュに設定する	color = 'beige'
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
日付時刻データの分数を使う	aDatetime.minute
リストと配列について散布図を描画する	plt.scatter(xdata, ydata)
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
散布図に黒いクロスマーカーを使う	plt.plot(xdata, ydata, marker='x', c='k')
データ列の中に文字列があるかどうか確認する	ds.isin([value])
数値の平方根を計算する	sympy.sqrt(e)
文字列を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
リストとリストの濃いをプロットしてその色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
オブジェクトのイテレータ	iter(obj)
データ列を百の位で丸める	ds.round(-2)
データフレーム全体をインデックスによって降順で並べる	df.sort_index(ascending=False)
＜オプション＞グレー色を使用する	color = 'gray'
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
散布図に赤い左三角マーカーを用いる	plt.plot(xdata, ydata, marker='<', c='r')
小数点数はNaNかどうか	math.isnan(x)
四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s')
＜オプション＞グラフの色をホワイトスモークに変更する	color = 'whitesmoke'
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
リストと数列の散布図を描いて、マーカーを菱形に設定する	plt.plot(xdata, ydata, marker='D')
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
データ列とリストについて淡い色の折れ線グラフを描画してその線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
リストと数列の淡いグラフをプロットして、色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
散布図にカラーコードのポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c=rgb)
カウンタ同士でユニオン演算する	aCounter | aCounter2
データフレームのカラムのNaNを平均値で埋める	df[col].fillna(df[col].mean())
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ヘッダを付けずにデータフレームをJSONLファイルに書き込む	df.to_csv(filename, header=None)
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
列の値でデータフレームを集約し、、列挙する	[(name, group) for name, group in df.groupby(column)]
カラーコードの菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
文字列を改行によって区切る	s.splitlines()
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
代数計算ライブラリを使う	import sympy
前もってパターンを複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
折れ線グラフを描画して、色をスレートブルーに指定する	plt.plot(データ列, データ列2, color='slateblue')
数列とイテラブルについての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
大文字・小文字を無視して事前にパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
丸マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='o')
行列の逆行列を算出する	np.linalg.inv(aArray)
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
タプルを引数として展開して表示する	print(*aTuple, sep=',')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
部分集合かどうか確認する	aSet.issubset(aSet2)
文字列は全て数値かどうか調べる	s.isnumeric()
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
データフレームの列と列の相関行列ケンドールで	df[[column, column2]].corr(method='kendall')
データフレームの相関行列スピアマンでを求める	df.corr(method='spearman')
ヒストグラムを描画して色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
行列の列ごとの分散	np.var(aArray, axis=0)
＜オプション＞ナバホホワイト色を使う	color = 'navajowhite'
＜オプション＞改行を区切りで用いる	sep = '\n'
分数モジュールを使う	import fractions
パターンに文字列全体をケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
＜オプション＞エラーがあるとき例外を発生させる	errors = 'strict'
＜オプション＞破壊的に操作する	inplace = True
＜オプション＞白色を使う	color = 'white'
Pythonのバージョン	sys.version
xの印字可能な文字列	ascii(x)
線グラフを描画して、その色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
マッピングの項目名とその項目を列挙する	aDict.items()
折れ線グラフの色をスカイブルーにセットする	plt.plot(データ列, データ列2, color='skyblue')
配列を度数分布図を用いて可視化する	plt.hist(aArray)
データフレームの平均値	df.mean()
ヒストグラムを描画して色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
最大長を指定して、両端キューを作る	collections.deque(maxlen=n)
Pandasで文字列のUNIX時間からタイムスタンプ型にする	pd.to_datetime(s, unit='s', utc=True)
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
青緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
数式を簡略にする	sympy.sympify(e)
文字列リストをつなげる一つの文字列にする	''.join(aStringList)
両端キューから最初の要素を取り除く	deq.remove(element)
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
今日の年数を使う	datetime.datetime.today().year
濃い色のヒストグラムでリストを描く	plt.hist(xdata, color='deep')
ヒストグラムの色をゴールデンロッドにする	plt.hist(データ列, color='goldenrod')
カウンタをイテラブルで更新する	aCounter.update(iterable)
赤いクロスマーカーをリストとデータ列の散布図に描画する	plt.plot(xdata, ydata, marker='x', c='r')
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
最初のカラムをデータフレームから除く	df[df.columns[1:]]
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
グラフに凡例を入れる	plt.legend()
データフレームの列のユニークな値の個数	df[col].nunique()
線グラフを描画して、その色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
データ列の欠損値を最大値で置き換える	ds.fillna(ds.max())
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
リストをビン数nを用いてビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
＜オプション＞グラフの色をミントクリームに設定する	color = 'mintcream'
＜オプション＞ダークオーキッドに色を変更する	color = 'darkorchid'
リストとリストを用いて濃いグラフを描き、、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
床数	math.floor(x)
数列とデータ列の黒い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
線グラフを描画してその色をライトスチールブルーに指定する	plt.plot(データ列, データ列2, color='lightsteelblue')
ファイルが存在しないか判定する	not os.path.exists(filepath)
n2分のn	n / n2
nがn2より小さいか調べる	n < n2
ふたつのリストの積集合	list(set(aList) & set(aList2))
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
データフレームの中の欠損値の個数をカウントする	df.isna().sum()
＜オプション＞オリベドラブにグラフの色を設定する	color = 'olivedrab'
破線グラフの色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データ列とデータ列についての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
＜オプション＞ローングリーン色を使う	color = 'lawngreen'
キーがタプル上でまだ定義されていないか判定する	key not in aDict
折れ線グラフを描画してその色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
折れ線グラフを描画して、色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
数列と配列の散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
データフレームのリストカラムを1000の位で四捨五入する	df[aList].round(-3)
文字列の先頭で正規表現に大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
黒色の色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
列によってデータフレームを並べて、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
＜オプション＞色をゴールデンロッドに指定する	color = 'goldenrod'
nとn2の論理和	n | n2
線グラフを描画して、色をフクシアに指定する	plt.plot(データ列, データ列2, color='fuchsia')
二つの数値を文字列で区切って出力する	print(value, value2, sep=s)
赤い星マーカーをデータ列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='*', c='r')
コロンで区切って二つの実行結果をプリントする	print(value, value2, sep=':')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
ヒストグラムを描画して、その色をネイビーに変更する	plt.hist(データ列, color='navy')
＜オプション＞グラフの色をスラグレーに変更する	color = 'slategray'
文字列の接尾辞から部分文字列を除去する	s.removesuffix(sub)
データフレームがどれだけ、分散しているか確認する	df.var()
文字列中に部分文字列が含まれるか調べる	sub in s
＜オプション＞カーキにグラフの色を変更する	color = 'khaki'
リストと配列について散布図を描き、、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
＜オプション＞グラフの種類を点線に設定する	linestyle = 'dotted'
辞書を階層化する	collections.ChainMap(aDict)
日付時刻データの月	aDatetime.month
折れ線グラフを描画して、その色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
文字列を最後の部分文字列で分けた場合の後半の文字列	s.rpartition(sub)[-1]
リストとリストについて散布図を描き、色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
辞書のの一覧	aDict.values()
シーケンスをカウンタに変換する	collections.Counter(iterable)
データフレームの列の値がxの行を抽出する	df[df[column] == x]
predicateFuncがTrueになるシーケンスの要素を消す	itertools.dropwhile(predicateFunc, iterable)
＜オプション＞青紫にグラフの色を指定する	color = 'violet'
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
ヒストグラムを描画してその色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
データフレームを'A'列によってソートしてNaNを先頭にする	df.sort_values(by='A', na_position='first')
まとめてValueMapでデータ列の値を置換する	ds.replace(ValueMap)
ヒストグラムを淡いで描画する	plt.hist(xdata, color='muted')
日付データが月曜日か調べる	aDate.weekday() == 0
整数nをバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
＜オプション＞グラフの色をシエナにする	color = 'sienna'
日付データの曜日を整数で使う	aDate.weekday()
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
キュー中の値の数を数える	deq.count(element)
折れ線グラフのポイントマーカーを黄色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
アルファベットの小文字を全部使う	string.ascii_lowercase
データフレームのカラムを丸める	df[col].round()
データフレームの重複した行数のマスク	df.duplicated()
データフレームのカラムの曜日の名前を使う	df[col].dt.weekday_name
線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
データフレームのカラムが何秒か見る	df[col].dt.second
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
データ列の中に文字列と文字列が存在するか調べる	ds.isin([value, value2])
折れ線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
実数の2乗	x ** 2
＜オプション＞欠損値も無視しない	dropna = True
配列を暗い色のヒストグラムを使ってプロットする	plt.hist(xdata, color='dark')
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
Pandasのバージョンを出力する	print(pd.__version__)
線グラフを描画して、色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
データフレームを列毎にグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
＜オプション＞ライトシアン色を使う	color = 'lightcyan'
破壊的にデータフレームを'A'列によってでソートする	df.sort_values(by='A', inplace=True)
リストと数列としてパステル調のグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
折れ線グラフを描画して、その色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
ヒストグラムを描画して、その色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
線グラフを描画して、その色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
＜オプション＞タブをセパレータで使う	sep = '\t'
カラムのNaNを直後の値にする	ds.fillna(method='bfill')
散布図にカラーコードのダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c=rgb)
文字列の中のケースを無視してパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
実数が負の数か調べる	x < 0
数式を展開する	sympy.expand(e)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列2])
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
シーケンスを文字列としてつなげる	''.join(map(str, iterable))
データフレームのリストカラムの中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
３自然数の最大公約数	math.gcd(n, n2, n3)
2つのデータフレームを結合する	pd.merge(df, df2)
パレットを全般的に濃くする	sns.set(pallete='deep')
データフレームを列によってソートする	df.sort_values(by=column)
日付時刻データが何年か知る	aDatetime.year
文字列を赤色化する	f'\033[31m{value}\033[0m'
赤い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
列を等量でn個にビニングする	pd.qcut(ds, n)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
＜オプション＞グラフの色をライトグリーンにセットする	color = 'lightseagreen'
文字列をセパレータで分割し、、文字列リストにする	s.split(sub)
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
シーケンスからn個、サンプリングする	random.sample(iterable, k=n)
データフレームのリストカラムの分散	df[aList].var()
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
データフレームのリスト列の欠損値をxに増やす	df[aList].fillna(x)
リストとデータ列の折れ線をuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
nの桁数	len(str(n))
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
黒い大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
データフレームを列でソートして下位n件を取り出す	df.sort_values(columns).tail(n)
＜オプション＞黄色色を使用する	color = 'yellow'
＜オプション＞ゴールデンロッド色を使う	color = 'goldenrod'
＜オプション＞リネンを用いる	color = 'linen'
カラーコードの上三角マーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
折れ線グラフの色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
少ない順番にカウンタを列挙する	aCounter.most_common()[::-1]
Pandasで、フォーマットとしてデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
配列と数列について散布図を描いて、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードの右三角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='>', c=rgb)
＜オプション＞オレンジを使う	color = 'orange'
折れ線グラフの色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
折れ線グラフの色をインディアンレッドにする	plt.plot(データ列, データ列2, color='indianred')
データフレームを二つの列で整列して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
文字列を二分する	s.partition(sep)
＜オプション＞グラフの色をロイヤルブルーに設定する	color = 'royalblue'
第２コマンド引数	sys.argv[1]
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
折れ線グラフの大バツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
タプルの末尾	aTuple[-1]
黒い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
＜オプション＞カンマをセパレータで使う	sep = ','
折れ線グラフの色をペールグリーンにする	plt.plot(データ列, データ列2, color='palegreen')
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
＜オプション＞色を耐火レンガに設定する	color = 'firebrick'
両端キュー中の要素のインデックス	deq.index(element)
＜オプション＞ホワイトスモーク色を使う	color = 'whitesmoke'
書き込み用にファイルパスを文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
デピンクにヒストグラムの色を指定する	plt.hist(データ列, color='deeppink')
文字列が文字列リストのいづれか調べる	s in aStringList
＜オプション＞最初の行をヘッダに指定する	header = 0
カラーコードの四角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データ列の文字列を未入力値にする	ds.replace(s, np.nan)
nをn2で整数除算する	n // n2
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
キーが辞書上で未定義か調べる	key not in aDict
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
＜オプション＞左三角マーカーを使う	marker = '<'
データフレームから重複したデータをドロップして、インプレイスする	df.drop_duplicates(inplace=True)
＜オプション＞グラフの色をダークブルーに設定する	color = 'darkblue'
グラフの色を明るくする	sns.set(pallete='bright')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
変数について数式をn階微分する	sympy.diff(e, z, n)
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
キーが辞書上で未定義	key not in aDict
集合を変更不能に変換する	frozenset(aSet)
＜オプション＞グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
集合の浅いコピー	aSet.copy()
＜オプション＞バッファリングのサイズを設定する	buffering = 4096
追加できるように既存のファイルをSJISで開く]	open(filepath, mode='a', encoding='shift_jis')
ヒストグラムを描画してその色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
データフレームを'A'列の値によってグループ分けして列挙する	[(name, group) for name, group in df.groupby('A')]
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
リストとリストの青い暗いをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
折れ線グラフに黄色い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
０で全要素を初期化された８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
折れ線グラフの三角マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
タイムスタンプデータが木曜日か確認する	aDatetime.weekday() == 3
日付データの年数	aDate.year
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
＜オプション＞黄色色を使う	color = 'yellow'
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
線グラフの色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
ヒストグラムを描画して、その色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
タプルを計数器に変換する	collections.Counter(aDict)
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
データフレームのn行目より後ろを取り出す	df[n:]
モードでデータフレームのカラムの欠損値を置換する	df[col].fillna(df[col].mode().iloc[0])
数式の変数に数値を代入する	e.subs(z, e2)
＜オプション＞パールゴールデンロッド色を使う	color = 'palegoldenrod'
＜オプション＞ダークバイオレットにグラフの色を指定する	color = 'darkviolet'
ミスティローズにヒストグラムの色を指定する	plt.hist(データ列, color='mistyrose')
辞書の項目名一覧	list(aDict)
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ヒストグラムを描画して、色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
配列とイテラブルについてパステル調の色の折れ線グラフを描画してその線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データフレームを'A'列と'B'列の値によってグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
マップのキーの一覧	aDict.keys()
区間の数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
データフレームのカラムの未入力値をxで埋める	df[col].fillna(x)
＜オプション＞バリーウッド色を使う	color = 'burlywood'
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
折れ線グラフを描画して、その色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフの下三角印を緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
データフレームを列を用いて昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムを描画して、その色をホットピンクにする	plt.hist(データ列, color='hotpink')
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
データ列とデータ列で暗いの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データフレームで、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
データフレームをまとめて整数に丸める	df.round()
部分文字列かどうか判定する	sub in s
表データをグループ化し列に対し分散を計算する	df.groupby(column)[column2].var()
データフレームのカラムを十の位で丸めて、整数型にする	df[col].round(-1).astype(int)
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
折れ線グラフを描画して色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
データフレームの欠損値をxに設定する	df.fillna(x)
データフレームの列を1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
データフレームのカラムのNaNを第二四分位数に指定する	df[col].fillna(df[col].median())
実行結果を青色でプリントする	print(f'\033[34m{value}\033[0m')
正規分布を使って疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
＜オプション＞グラフの種類を実線に設定する	linestyle = 'solid'
折れ線グラフの▲マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
配列を分割数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
二つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
nからn2までの整数列を求める	list(range(n, n2+1))
散布図をカラーコードの右三角マーカーで描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
集合に要素を追加する	aSet.add(element)
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
nとn2の積	n * n2
行列のユニークな値を要素とする配列	np.unique(aArray)
データフレームのリスト列の中にと日付データがいくつ含まれるかカウントする	df[aList].isin([value, value2]).sum()
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
赤い△マーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
ヒストグラムを描画してその色をオリーブに指定する	plt.hist(データ列, color='olive')
＜オプション＞３二ビット整数型を使う	dtype = np.int16
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
文字列を部分文字列で区切る	s.split(sub)
データフレームをグループ化し各列に対し平均値を求める	df.groupby(column)[column2].mean()
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
赤色の明るいの折れ線をプロットする	plt.plot(xdata, ydata, linestyle='bright', color='r')
配列についてのヒストグラムを濃いとして描画する	plt.hist(xdata, color='deep')
ヒストグラムを描画して、その色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
データフレームのリストカラムを丸める	df[aList].round()
折れ線グラフを描画して、その色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
x軸にuntitledというラベルを付ける	plt.xlabel(untitled)
文字列がリストに含まれるかどうか	element in aList
リストとリストの折れ線グラフを描画して、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
赤いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
カラムの中にいくつ文字列があるか数える	ds.isin([value]).sum()
データフレームのpercent分位数	df.quantile(percent/100)
＜オプション＞バッファリングのサイズを大きくする	buffering = 4096
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
ヒストグラムを描画してその色をゴーストホワイトに変更する	plt.hist(データ列, color='ghostwhite')
グラフのカラーパレットをpalleteNameに指定する	sns.set(pallete=palleteName)
線グラフの色をライトシアンにする	plt.plot(データ列, データ列2, color='lightcyan')
ヒストグラムを描画して、その色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
列によってデータフレームを整列して、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
折れ線グラフを描画してその色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
キーがタプルに存在しているか	key in aDict
データフレームのカラムの25パーセンタイルを計算する	df[col].quantile(0.25)
折れ線グラフの下三角マーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
赤色の左三角マーカーを数列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='<', c='r')
折れ線グラフの色をシスルに指定する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフのラベルをuntitledに設定する	plt.plot(xdata, ydata, label=untitled)
2つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
文字列を区切りで分割して文字列リストに変換する	s.split(sep)
＜オプション＞ビスク色を使う	color = 'bisque'
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
オブジェクトはリストかタプルかどうか調べる	isinstance(obj, (list)
＜オプション＞下三角マーカーを描画する	marker = 'v'
リストが空でないか調べる	len(aList) != 0
折れ線グラフを描画して、その色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
カラムの欠損値をメディアンに指定する	ds.fillna(ds.median())
黄緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='chartreuse')
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
キューが空か	len(deq) == 0
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
表データのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
データフレームのカラムは何秒か調べる	df[col].dt.second
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
リストとリストについて色差別ない色の折れ線グラフを描画して、線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
＜オプション＞グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
データフレームの列のユニークな値の個数を調べる	df[col].nunique()
n行を重複を認めてランダムにデータフレームからサンプリングする	df.sample(n, replace=True)
折れ線グラフの印をクロス印にする	plt.plot(データ列, データ列2, marker='x')
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
イテラブルと配列について散布図をプロットして、右三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
タプルをベクトルに変換する	np.array(iterable)
実行結果をマゼンタにする	f'\033[35m{value}\033[0m'
破線グラフの色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
データフレームの列がxである行を抽出する	df[df[column] == x]
オブジェクトに属性が存在する	hasattr(obj, プロパティ名)
イテラブルと配列について破線グラフをプロットし、、その色を濃いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
折れ線グラフを描画してその色をオレンジに変更する	plt.plot(データ列, データ列2, color='orange')
グラフの大きさを設定する	plt.figure(figsize=(width, height))
行列の転置行列を求める	aArray.T
書式をマッピングでフォーマットする	formatText.format_map(aDict)
データフレームの重複した行のみを選択する	df[df.duplicated(keep=False)]
濃いの色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームの列の値を正規表現patternでreplにまとめて置換する	df[col].replace(pattern, repl, regex=True)
セットの補集合	aSet.difference(aSet2)
等量で配列をn個に分割する	pd.qcut(aArray, n)
折れ線グラフの星印を青くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
データフレームで、列と列の重複を取り除く	df.drop_duplicates(subset=column)
整数nを二進リテラルにする	bin(n)
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
コマンド引数のリストを得る	sys.argv[1:]
リストの長さ	len(aList)
辞書に別の辞書の項目を更新する	aDict.update(aDict2)
集合の全ての要素が別の集合に含まれるか	aSet.issubset(aSet2)
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
列をキューに変換する	collections.deque(iterable)
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
十六進数字を全部見る	string.hexdigits
箱ひげ図を横に並べる	plt.boxplot([データ列, データ列2])
ヒストグラムを描画して、その色をタンに設定する	plt.hist(データ列, color='tan')
ダークシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
ヒストグラムを描画して、その色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
空のタプルを得る	()
中央値で列の欠損値を埋める	ds.fillna(ds.median())
リストとリストについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
データ列と数列について散布図を描画して、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
リストとリストについての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
プラットホームはマック	sys.platform.startswith('darwin')
セットにイテラブルを追加更新する	aSet.update(iterable)
散布図を赤い△マーカーで描く	plt.plot(xdata, ydata, marker='^', c='r')
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
日付データが月曜日	aDate.weekday() == 0
＜オプション＞スカイブルーを使う	color = 'skyblue'
整数nをn2分の一にする	n //= n2
線グラフを描画して、その色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
配列をヒストグラムで可視化する	plt.hist(aArray)
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
カラーコードの▽マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c=rgb)
＜オプション＞ディープスカイブルー色を使う	color = 'deepskyblue'
平均値で列の欠損値を補う	ds.fillna(ds.mean())
データフレームの列の文字列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
タプルから項目名の値	aDict.get(key)
数値をアンダーライン付き化する	f'\033[4m{value}\033[0m'
重なりを見やすく散布図を暗い色のマーカーでプロットする	plt.plot(xdata, ydata, c='dark', alpha=0.5)
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
データ列を1000の位で丸めて、整数にする	ds.round(-3).astype(int)
データフレームをサンプリングする	df.sample()
タプルをセットに変換する	set(iterable)
リストとリストの青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
タプルの末尾からn番目以前の要素を取り出す	aTuple[:-n]
赤色の右三角マーカーを配列とリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='>', c='r')
折れ線グラフの線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n)
折れ線グラフを描画して、その色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
＜オプション＞グラフの色をパープルに変更する	color = 'purple'
横棒の色を設定する	plt.barh(ラベル列, データ列, color=rgb)
＜オプション＞グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
散布図にカラーコードのバツマーカーを使用する	plt.plot(xdata, ydata, marker='x', c=rgb)
折れ線グラフを描画して色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgrey')
データフレームを複数の列でグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
Pandasで、フォーマットfmtでデータフレームのcollをタイムスタンプに変換する	pd.to_datetime(df[col], format=fmt)
折れ線グラフを描画して、その色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
折れ線グラフを描画して、その色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
＜オプション＞三二ビット整数型を使う	dtype = np.int16
カラーコードに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
表データの列の一覧	df.info()
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
ファイルが存在するか調べる	os.path.exists(filepath)
オレンジレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orangered')
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
イテラブルと配列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
辞書に要素を項目名として加える	aDict[key] = element
データフレームのどの値が頻出か見る	df.mode()
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
マップの浅いコピーを生成する	aDict.copy()
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
オブジェクトが関数か	callable(obj)
＜オプション＞色をインディゴに指定する	color = 'indigo'
＜オプション＞グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
プロットの用途をポスターに設定する	sns.set(context='poster')
データ列とラベル列を指定して、横棒グラフを描画する	plt.barh(ラベル列, データ列)
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
カラムの歪度を求める	ds.kurt()
折れ線グラフを描画してその色をダークブルーに設定する	plt.plot(データ列, データ列2, color='darkblue')
＜オプション＞グラフの色を小麦色に設定する	color = 'wheat'
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
ヒストグラムを描いて、ビン数をnに指定する	plt.hist(データ列, bins=n)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列, データ列2, color='gainsboro')
辞書をコピーする	aDict.copy()
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
集合をイミュータブルなセットにする	frozenset(aSet)
データフレームの重複した行数のマスクを使う	df.duplicated()
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='grey')
リストと配列について散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
コーンズシルク色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornsilk')
nが1、もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
ヒストグラムを描画して、その色をピンクに変更する	plt.hist(データ列, color='pink')
辞書を並べ直してJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームを正規表現でまとめてreplに置換する	df.replace(pattern, repl, regex=True)
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
折れ線グラフに大きさnの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
nが一桁の数か調べる	-9 <= n <= 9
＜オプション＞ペールグリーン色を使う	color = 'palegreen'
青色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
二つのデータフレームを列をキーにして右ジョインする	pd.merge(df, df2, on=column, how='right')
文字列の右端から空白を除く	s.rstrip(' ')
綺麗なグラフを使う	import seaborn as sns
線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
リストと配列のパステル調のグラフを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
実数の自然対数	math.log(x)
最大長を指定して、両端キュー	collections.deque(maxlen=n)
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
ヒストグラムを描画して、色をシスルに設定する	plt.hist(データ列, color='thistle')
折れ線グラフのダイアモンドマーカーを緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
データフレームを各列毎にグループ化して列の標準偏差を算出する	df.groupby(column)[column2].std()
折れ線グラフのマーカーを星にする	plt.plot(データ列, データ列2, marker='*')
＜オプション＞モカシン色を使う	color = 'moccasin'
xが1、もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
ヒストグラムの色をブラックにする	plt.hist(データ列, color='black')
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
区間の数nのヒストグラムを描く	plt.hist(データ列, bins=n)
文字列がリストに含まれるか調べる	element in aList
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
リストとイテラブルの淡いグラフをプロットして、その色を青色に指定する	plt.plot(xdata, ydata, linestyle='muted', color='b')
列をリストに変換する	df[column].values.tolist()
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
日付時刻データの年数	aDatetime.year
データフレームをインデックスで並べ直す	df.sort_index()
２つの文字列は同じか調べる	s == s2
有理数を使う	import fractions
データフレームの中にいくつ欠損値が含まれるかカウントする	df.isna().sum()
からデータフレームを読む	pd.read_excel(filename)
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
リストとリストについての散布図にカラーコードの大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c=rgb)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
カラーコードのバツマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='x', c=rgb)
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
集合をイミュータブルなセットに変換する	frozenset(aSet)
＜オプション＞スノーを使う	color = 'snow'
配列から重複を除いたベクトルを作成する	np.unique(aArray)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
折れ線グラフの色をパープルにセットする	plt.plot(データ列, データ列2, color='purple')
黒い星マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='*', c='k')
＜オプション＞文字コードtextを使う	encoding = text
配列が何のデータ型か	aArray.dtype()
日付データが火曜日か	aDate.weekday() == 1
実数の双曲線余弦の逆数	math.acosh(x)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフに大きさnのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
データフレームの中に文字列が存在するか	df.isin([value])
リストとリストについて散布図を描画し、、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
文字列が全て印字できるかテストする	s.isprintable()
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
データフレームのリスト列の相関行列ケンドールでを求める	df[aList].corr(method='kendall')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
リストについてのヒストグラムを濃い色で描く	plt.hist(xdata, color='deep')
オプションで、標準エラーを使う	file = sys.stderr
配列をリストから作る	np.array(aList)
折れ線グラフの▽マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
データ列とリストの散布図を描き、、マーカーをクロスに変更する	plt.plot(xdata, ydata, marker='x')
整数型のゼロ埋めされたベクトルを作成する	np.zeros(要素数, dtype=np.int)
＜オプション＞イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
ヒストグラムを描画して、色をゴールデンロッドに指定する	plt.hist(データ列, color='goldenrod')
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
データフレームの中の欠損値が存在する行を削除する	df.dropna()
文字列を式として評価する	eval(s)
折れ線グラフのバツ印を黒色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
データフレームのリストカラムの分散を求める	df[aList].var()
＜オプション＞グラフの色をパールバイオレットレッドに指定する	color = 'palevioletred'
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightseagreen')
predicateFuncが真になるイテラブルの部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
空文字	''
データ列の一意な値の個数	ds.nunique()
リストとリストの色差別ないグラフを描いて、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ヒストグラムを描画して、その色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
０で全要素を初期化された符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
日付時刻データが何分か知る	aDatetime.minute
ヒストグラムを描画して、その色をカデットブルーにセットする	plt.hist(データ列, color='cadetblue')
八進数文字列を整数に変換する	int(s, 8)
＜オプション＞色をスレートブルーに設定する	color = 'slateblue'
グラフの目的をプレゼンに変更する	sns.set(context='talk')
文字列が全て大文字か調べる	s.isupper()
文字列をセパレータで区切って、列挙する	s.split(sep)
カラーバーを設定する	plt.colorbar()
リストのオブジェクトが最初に見つかるインデックス	aList.index(element)
＜オプション＞読み込まないフッタをnに指定する	skipfooter = n
データフレームを列を用いてによって降順に並べる	df.sort_values(by=column, ascending=False)
predicateFuncを適用したとき真とならないイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
カウンタの最頻出の項目	aCounter.most_common()[0]
散布図をカラーコードの四角マーカーとして描く	plt.plot(xdata, ydata, marker='s', c=rgb)
まとめてデータフレームのカラムの名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
データフレームの平均	df.mean()
プロットの描画で暗い色を使用する	sns.set(pallete='dark')
データフレームの中の列を等量でビン数nでビニングする	pd.qcut(df[col], n)
降順でデータフレームを行によってソートする	df.sort_index(ascending=False)
配列を等量で分割数nを用いてビン分割する	pd.qcut(aArray, n)
実数のsin	math.sin(x)
値を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
列をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
折れ線グラフの四角印の大きさをnに変更する	plt.plot(データ列, データ列2, marker='s', markersize=n)
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
データフレームの列をドロップして入れ替える	df.drop(column, axis=1, inplace=True)
＜オプション＞ドジャーブルー色を使う	color = 'dodgerblue'
配列のスカラー倍	aArray * n
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
出力ストリームを改行を取り除いて一行ずつ読む	f.readline()
タプルのn番目以降の部分を得る	aTuple[n:]
行列の和を計算する	aArray + aArray2
黒い大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X', c='k')
データフレームから数値データの列だけ取り出す	df.select_dtypes('number')
ファイルから1文字、読み込む	f.read(1)
0からNまでの行列を作る	np.arange(N)
リストと配列についてカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
青にヒストグラムの色をする	plt.hist(データ列, color='blue')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategray')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
配列と数列の散布図を描画して、マーカーを▲に設定する	plt.plot(xdata, ydata, marker='^')
二つの最大値	max(x, y)
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
列の各値の出現数	ds.value_counts()
リストとリストの散布図を描いて、マーカーの色を暗いに変更する	plt.plot(xdata, ydata, c='dark')
＜オプション＞グリーンに色を設定する	color = 'green'
折れ線グラフの星マーカーを赤くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
ヒストグラムを描画して、その色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
＜オプション＞グラフの色をシルバーに設定する	color = 'silver'
＜オプション＞ブール型を使う	dtype = np.int32
ヒストグラムの色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
数値の数値を求める	float(e)
日付時刻データと日付時刻データの時間差を求める	aDatetime - aDatetime2
コマンド引数を列挙する	sys.argv[1:]
日付を使う	import datetime
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
＜オプション＞パパイヤウィップにグラフの色を設定する	color = 'papayawhip'
ヒストグラムを描画して、その色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
リストの末尾	aList[-1]
２つのデータフレームを列'A'と列'B'をキーにして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
50パーセンタイルでデータフレームのリスト列のNaNを埋める	df[aList].fillna(df[aList].median())
ヒストグラムを描画して、その色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
文字列の後ろから改行を除く	s.rstrip()
折れ線グラフを描画してその色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
データ列の曜日が何日目か見る	ds.dt.dayofweek
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
nにn2をかけた値をnに代入する	n *= n2
実数がNaNか調べる	math.isnan(x)
ベージュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='beige')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
＜オプション＞タンに色を設定する	color = 'tan'
データフレームの未入力値を直後の値に設定する	df.fillna(method='bfill')
行列の転置行列	aArray.T
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
データ列の日	ds.dt.day
プロットの描画でパステル調のカラーパレットを用いる	sns.set(pallete='pastel')
散布図に黒い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='k')
＜オプション＞色をディムグレーに設定する	color = 'dimgrey'
散布図を暗い色を用いて描画する	plt.plot(xdata, ydata, c='dark')
＜オプション＞グラフの色をグレーにセットする	color = 'gray'
データ列をn個に分割する	pd.cut(ds, n)
文字列の左側から空白を取り除く	s.lstrip(' ')
線グラフの色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
＜オプション＞淡い茶色色を使う	color = 'tan'
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
文字列が全てアルファベットか調べる	s.isalpha()
リストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
ケンドール相関係数としてデータフレームの相関行列を算出する	df.corr(method='kendall')
＜オプション＞グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ヒストグラムを描画して、その色をコーラルに設定する	plt.hist(データ列, color='coral')
文字列の後ろ	s[-1]
ファイルを文字コードtextを使ってオープンする]	open(filepath, encoding=text)
データフレームのカラムの第一四分位数を求める	df[col].quantile(0.25)
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を求める	df.groupby([column, column2], as_index=False).var()
nをn2だけ増加させる	n += n2
オブジェクトのクラス	type(obj)
数式の部分分数化する	sympy.apart(e)
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
配列とリストの明るいグラフを描画して色を黒くする	plt.plot(xdata, ydata, linestyle='bright', color='k')
nがn2よりも小さい	n < n2
ヒストグラムを描画して、色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
ヒストグラムを描画して、色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
タプルをn倍する	aTuple * n
データフレームのリストカラムは正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
本日の日付	datetime.date.today()
データフレームの列の名前一覧で指定された列をドロップする	df.drop(columns, axis=1)
折れ線グラフを描画して、その色をミディアムバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='mediumvioletred')
既存のファイルをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='deepskyblue')
ヒストグラムを描画して、その色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
itertoolsモジュールをインポートする	import itertools
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
ヒストグラムを描画して色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフに丸マーカーを使う	plt.plot(データ列, データ列2, marker='o')
折れ線グラフを描画して、その色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
リストとリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
リストとリストについて散布図をプロットし、、マーカーを上三角に変更する	plt.plot(xdata, ydata, marker='^')
明るい色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
＜オプション＞グラフの線種を実線に変更する	linestyle = 'solid'
円周率	math.pi
小数点数の自然対数を求める	math.log(x)
データラベルをプロット中の(x,y)の位置に入れる	plt.legend(loc=(x, y))
日付データからn週間分減らす	aDate - datetime.timedelta(weeks=n)
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
データフレームのリストカラムはどの程度分散しているか確認する	df[aList].var()
データフレームのリストカラムの分散を計算する	df[aList].var()
ヒストグラムでカラーマップを用いる	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
色差別ない色のマーカーとして散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
黒色の右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
文字列をシンボルにして変数にする	z = sympy.Symbol(s)
データフレームを関数によってまとめたグループを使う	df.groupby(関数)
辞書からキーで指定された項目をポップする	aDict.pop(key)
文字列の開始位置以降が部分文字列で開始する	s.startswith(sub, start)
パープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='purple')
文字列の大文字小文字を入れ替える	s.swapcase()
最大長のあるスタック	collections.deque(maxlen=n)
フォーマットfmtでデータフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col], format=fmt)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
カラーコードの丸マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームを各列毎にグループ化し、、列の最大値を計算する	df.groupby(column)[column2].max()
実数の床	math.floor(x)
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
日付時刻データの秒数	aDatetime.second
要素がセットのメンバーか調べる	element in aSet
＜オプション＞バイオレットを使う	color = 'violet'
線グラフを描画して、その色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
方程式として数式のパラメータの解を算出する	sympy.solve(e, z)
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
リストとデータ列について破線を描画して、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
本日が火曜日かどうか判定する	datetime.datetime.today().weekday() == 1
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
ヒストグラムを描画してその色をオレンジに設定する	plt.hist(データ列, color='orange')
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
カウンタのキーのカウント	aCounter[element]
＜オプション＞シスル色を用いる	color = 'thistle'
データフレームのカラムの未入力値を最小値に設定する	df[col].fillna(df[col].min())
全要素を1で初期化された配列	np.ones(要素数, dtype=np.int)
カラム名を列挙する	df.columns
両端キューの末尾	deq[-1]
リストと配列についての散布図に右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>')
色差別ないの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
リストとイテラブルについての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
リストとリストについて散布図を描画する	plt.scatter(xdata, ydata)
＜オプション＞パパイヤウィップ色を使う	color = 'papayawhip'
折れ線グラフに三角印を用いる	plt.plot(データ列, データ列2, marker='^')
濃い色の折れ線をプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
データフレームのリスト列のNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
実線でヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
文字列が正規表現にマッチさせる	re.match(pattern, s)
カラムの標本標準偏差	ds.std()
＜オプション＞グラフの色をカーキに設定する	color = 'khaki'
ファイルの絶対ファイルパス	os.path.abspath(filepath)
数列とイテラブルのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
整数nを八進文字列に変換する	oct(n)[2:]
破線の色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
データフレームの列をカテゴリデータにする	df[col].astype(object)
リストのn番目のを見る	aList[n]
折れ線グラフを描画して、その色をブルーバイオレットに変更する	plt.plot(データ列, データ列2, color='blueviolet')
文字列を新しい文字列によって置き換える	s.replace(sub, newsub)
辞書から項目名の値を得る	aDict.get(key)
Pandasで、データフレームのカラムをPandasの日付型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
リストとリストについて暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
データフレームを各列毎に集約して、列の標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
二つのオブジェクトが等しいかどうか調べる	obj == obj2
nの各桁の和を求める	sum(map(int, str(n)))
文字列を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
折れ線グラフを描画して、色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
＜オプション＞インディアンレッド色を使う	color = 'indianred'
関数の値によってデータフレームを集計する	df.groupby(関数)
折れ線グラフを描画して、色をライトグレーにセットする	plt.plot(データ列, データ列2, color='lightgray')
変数について数値の微分を行う	sympy.diff(e, z)
リストをソートする	sorted(aList)
データ列の平均値	ds.mean()
折れ線グラフを描画して、その色を珊瑚に設定する	plt.plot(データ列, データ列2, color='coral')
グラフを論文用に設定する	sns.set(context='paper')
データ列の中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
日付と時間から日付時刻を作る	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームのカラムがどれだけ、分散しているか調べる	df[col].var()
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
シーケンスの重複組み合せを計算する	itertools.combinations_with_replacement(iterable, n)
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
＜オプション＞黄緑色を使用する	color = 'chartreuse'
最大値・最小値の範囲で一様な疑似乱数を求める	random.uniform(最小値, 最大値)
データフレームを'A'列の値によってグループ化し、記述統計量を求める	df.groupby('A').describe()
nとn2の差	n - n2
ヒストグラムの色を青紫に変更する	plt.hist(データ列, color='violet')
折れ線グラフに大きさnの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markersize=n)
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
折れ線グラフを描画して、色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
ヒストグラムの色をラベンダーブラッシュにする	plt.hist(データ列, color='lavenderblush')
＜オプション＞ミディアムオーキッド色を使う	color = 'mediumorchid'
リストとリストの散布図を描画して、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
＜オプション＞ハニーデュー色を使う	color = 'honeydew'
データフレームから列を3つ選択する	df[[column, column2, column3]]
重複した行のみを抽出する	df[df.duplicated(keep=False)]
ライム色の線グラフを描画する	plt.plot(データ列, データ列2, color='lime')
nまでの奇整数列	list(range(1, n, 2))
タプルの中の最大値を求める	max(aTuple)
ストリームから1バイト読み込む	f.read(1)
シーケンスから配列を作る	np.array(iterable)
文字列を最後の部分文字列で分けたときの残りの文字列を見る	s.rpartition(sub)[-1]
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
折れ線グラフの色をダークターコイズに指定する	plt.plot(データ列, データ列2, color='darkturquoise')
＜オプション＞マルーン色を使う	color = 'maroon'
データフレームの中に文字列と日付データが存在するか調べる	df.isin([value, value2])
黒い四角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='s', c='k')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palevioletred')
スライドにグラフの用途を設定する	sns.set(context='talk')
カウンタの最も頻出なキーを求める	aCounter.most_common()[0]
実数を浮動小数点数で整数除算する	x // y
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列, データ列2, color='whitesmoke')
データフレームを列によってによって大きい順にソートする	df.sort_values(by=column, ascending=False)
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
JSONを用いる	import json
文字列が全て大文字か	s.isupper()
プラットフォームの符号付き整数の最大値を調べる	sys.maxsize
両端キューの末尾から要素を取り除く	deq.pop()
＜オプション＞パールゴールデンロッドを用いる	color = 'palegoldenrod'
データフレームの列の中に日付データが含まれるか調べる	df[col].isin([value])
ヒストグラムを描画して、色を黒くする	plt.hist(データ列, color='k')
ヒストグラムを描画して、色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
リストを黄色化する	f'\033[33m{value}\033[0m'
カラムの欠損値を直後の値で埋める	ds.fillna(method='bfill')
行列を2次元1行に変形する	aArray.reshape(1, -1)
ファイルパスがないかどうか調べる	not os.path.exists(filepath)
色差別ない色で散布図を重なりを見やすくプロットする	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
赤い明るいの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
ヒストグラムを描画して、色をシアンに設定する	plt.hist(データ列, color='cyan')
リストとリストの散布図を描いて、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
タプルの先頭を取り除く	aTuple[1:]
＜オプション＞グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
データフレームのカラムの欠損値をメディアンで埋める	df[col].fillna(df[col].median())
日付時刻データの時間を使う	aDatetime.hour
表データの列を消す	df.drop(column, axis=1)
リストを黄色にする	f'\033[33m{value}\033[0m'
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列, データ列2, color='rosybrown')
折れ線グラフを描画して、その色をスノーに指定する	plt.plot(データ列, データ列2, color='snow')
折れ線グラフを描画して、その色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategrey')
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データ列をカテゴリデータに変換する	ds.astype(object)
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムを描画してその色をグレーに指定する	plt.hist(データ列, color='gray')
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
ヒストグラムを描画して、色をディムグレーに変更する	plt.hist(データ列, color='dimgray')
リストとイテラブルの折れ線グラフを描画してその色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
青いポイント印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
グラフの色を濃くする	sns.set(pallete='deep')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
リストとリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')

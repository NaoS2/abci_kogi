xを整数に変換する	int(x)
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフの菱形マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
ヒストグラムをミントクリーム色を用いて描画する	plt.hist(データ列, color='mintcream')
イテラブルにシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
折れ線グラフのバツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
option: マーカーを左三角に変更する	marker = '<'
データフレームの列の各データ値の出現回数を求める	df[col].value_counts()
タプルの中の最大値	max(aTuple)
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
データフレームのn行目を削除する	df.drop(n, axis=0)
データフレームの中で何行、重複するか調べる	df.duplicated().sum()
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
双方向キュー中の要素の数をカウントする	deq.count(element)
option: 追加用に設定する	mode = 'a'
２つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
追加できるように文字列の示すエンコーディングで既存のファイルを開く]	open(filepath, mode='a', encoding=s)
option: フクシアにグラフの色を設定する	color = 'fuchsia'
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームのカラムのタイムゾーンを日本に指定する	df[col].tz_convert('Asia/Tokyo')
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t')
option: ダークシアグリーン色を使う	color = 'darkseagreen'
option: 整数型を用いる	dtype = np.int
シーケンスから重複を取り除く	set(iterable)
列の値でデータフレームをグループ化して、グループごとの合計を求める	df.groupby(column).sum()
実数のアークサイン	math.asin(x)
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
実数の逆双曲線正接を求める	math.atanh(x)
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
値を双方向キューから取り除く	deq.remove(element)
自然数最小公倍数	math.lcm(n, n2)
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
タプルの末尾を除く	aTuple[:-1]
アイボリー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
浮動小数点数の最大値	sys.float_info.max
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
実数のn乗して実数による余り	pow(x, n, y)
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
option: チョコレートにグラフの色を設定する	color = 'chocolate'
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
折れ線グラフにクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
データフレームの列をヒストグラムにする	plt.hist(df[column])
スラグレーにヒストグラムの色を変更する	plt.hist(データ列, color='slategray')
リストとリストについての散布図に上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームのn行目まで取り出す	df[:n]
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
インディゴ色を用いてヒストグラムを描画する	plt.hist(データ列, color='indigo')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
データフレームの指定した列を配列に変換する	df[column].values
折れ線グラフにダイアモンド印を加える	plt.plot(データ列x, データ列y, marker='D')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
にバイオリン図としてデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
パレットトルコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
要素が集合のメンバーか調べる	element in aSet
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
標準出力のバッファを即時表示する	sys.stdout.flush()
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
グラフの凡例の位置を(x,y)に指定する	plt.legend(loc=(x, y))
option: ブラックにフォントの色を設定する	color = 'black'
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
option: インディアンレッド色を用いる	color = 'indianred'
ターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
二つのカウンタの共通する要素	aCounter & aCounter2
変数を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
日付時刻データは何秒か知る	aDatetime.second
文字列の中のケースを無視してパターンによる全マッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
option: 読み込み用に設定する	mode = 'r'
散布図を赤い▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
２つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
折れ線グラフの色をダークレッドにセットする	plt.plot(データ列x, データ列y, color='darkred')
option: ポイントマーカーを使用する	marker = '.'
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフの右三角印の色を指定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
実数の天井	math.ceil(x)
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
オーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
ヒストグラムの色をグリーンにセットする	plt.hist(データ列, color='green')
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
要素がセットのメンバー	element in aSet
option: グラフの色をライムに設定する	color = 'lime'
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
データフレームをJSONLファイルに行を付けずに保存する	df.to_csv(filename, index=None)
折れ線グラフの△マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
部分文字列で部分文字列が始まるか	s.startswith(sub)
破線にヒストグラムを指定する	plt.hist(データ列, linestyle='dashed')
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
リストとイテラブルについての散布図にrgbの下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのカラムが正規分布からどの程度尖っているか見る	df[col].skew()
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
散布図の丸マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
グリッド線を白くする	plt.grid(color='w')
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
線グラフをクリムゾン色を用いて描画する	plt.plot(データ列x, データ列y, color='crimson')
二つの集合の和集合を求める	aSet.union(aSet2)
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
リストとイテラブルについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
二つのカウンタの共通するデータ	aCounter & aCounter2
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
数値を変数についてn階微分する	sympy.diff(e, z, n)
文字列の両端から空白を除去する	s.strip()
色付きの一点鎖線としてラインを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
1からnまでの整数列	list(range(1, n+1))
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
option: ネイビー色を用いる	color = 'navy'
四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
配列の合計値	np.sum(aArray)
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
ヒストグラムの色をシャルトリューズに指定する	plt.hist(データ列, color='chartreuse')
option: グラフの色をミスティローズに指定する	color = 'mistyrose'
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
要素ひとつのりスト	[element]
ヒストグラムの線種を点線に指定する	plt.hist(データ列, linestyle='dotted')
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
データフレームから指定されたデータ型の列名の一覧を見る	df.select_dtypes(型).columns
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
データ列のメディアンを算出する	ds.median()
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
option: グラフの色をオーキッドに設定する	color = 'orchid'
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
表データを列によってグループ化して、グループごとの最小値を求める	df.groupby(column).min()
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
文字列は数値か調べる	s.isnumeric()
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: グラフの色をディムグレーに設定する	color = 'dimgray'
リネン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
真スーパーセットか調べる	aSet > aSet2
整数nの十六進数表現	hex(n)
双方向キューの長さ	len(deq)
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
数に実数を加える	x + y
タプルの中の最小値	min(aTuple)
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
上位集合か調べる	aSet.issuperset(aSet2)
SDGでクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
predicateFuncがTrueとならない列の要素	itertools.dropwhile(predicateFunc, iterable)
rgbの四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
マップのキーの一覧	aDict.keys()
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
ビンを設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
ヒストグラムの区間数を変更する	plt.hist(データ列, bins=区関数)
ラベンダーブラッシュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: 右三角マーカーを使う	marker = '>'
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
リストを等間隔でn個に分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
ケンドール相関係数としてデータフレームの相関行列	df.corr(method='kendall')
データフレームの中に文字列と日付データがいくつ存在するか数える	df.isin([value, value2]).sum()
option: ASCII文字に限定する	flag = re.ASCII
データフレームのリスト列の欠損値を最小値で置き換える	df[aList].fillna(df[aList].min())
グリッド線を赤くする	plt.grid(color='r')
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
option: 下三角マーカーを描画する	marker = 'v'
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
中央値で配列を分割する	pd.qcut(aArray, 2)
文字列をパターンで区切る	re.split(pattern, s)
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
データフレームを小数点以下n桁で丸める	df.round(n)
新しい文字列で文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
実数を小数点以下で丸める	round(x, n)
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
散布図を三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='^')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
分割数nでデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
配列の相関係数を見る	scipy.stats.pearsonr(データ列, データ列2)
nが5で割り切れるか調べる	n % 5 == 0
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
rgbの△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
numpyを用いる	import numpy as np
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
コーンフラワーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
リストとリストの散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
option: マーカーの色を赤にする	markerfacecolor = 'red'
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
全ての句読点文字	string.punctuation
option: インディゴにグラフの色を設定する	color = 'indigo'
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
データ列の時刻	ds.dt.hour
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
書き込み用に文字列の示すエンコーディングとしてファイルをオープンする]	open(filepath, mode='w', encoding=s)
フローラルホワイト色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
データフレームのリストカラムが正規分布からどれだけ、尖っているか見る	df[aList].skew()
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
ヒストグラムをベージュ色を使って描画する	plt.hist(データ列, color='beige')
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
ファイルからファイル名を見る	os.path.basename(filepath)
綺麗なグラフを描画する	import seaborn as sns
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームの最初を確認する	df.head()
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
nから無限に数え上げるする	itertools.count(start=n)
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
2を底とする小数点数の対数	math.log2(x)
'A'列によってで降順にデータフレームをソートする	df.sort_values(by='A', ascending=False)
本日の月	datetime.datetime.today().month
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
散布図の大バツ印の太さを変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
データ列の中にあるの合計を数える	ds.isin([value]).sum()
オプションで、標準出力を出力にする	file = sys.stdout
データ列を丸めて、整数型にする	ds.round().astype(int)
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
データフレームを散布図で図示して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
リストの値をクリアにする	aList.clear()
文字列TSVからn番目のカラムをインデックスとしてカンマ区切りのファイルを読み込む	pd.read_csv(filename, index_col=n)
散布図としてデータフレームの全カラムを見る	sns.pairplot(df)
組をn回、連結する	aTuple * n
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
シエナにヒストグラムの色を変更する	plt.hist(データ列, color='sienna')
option: ダークグリーンにグラフの色を変更する	color = 'darkgreen'
データ列とリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
列によってデータフレームをグループ分けして、各グループごとの標準偏差を求める	df.groupby(column).std()
ランダムにn行を表から抽出する	df.sample(n)
折れ線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
エクセルデータファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
青い実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
青い一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
日付時刻データが何曜日か知る	aDatetime.weekday()
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
セットの全ての要素が別のセットに含まれるか調べる	aSet.issubset(aSet2)
日付データが金曜日か確認する	aDate.weekday() == 4
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: ブール型を使う	dtype = np.int32
セットを組に変換する	tuple(aSet)
本日の年数	datetime.datetime.today().year
異なる列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
ヒストグラムの色を珊瑚に指定する	plt.hist(データ列, color='coral')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
縦棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
option: 線の種類を破線に設定する	linestyle = 'dashed'
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='grey')
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
グラフを描画する準備をする	import matplotlib.pyplot as plt
データ列の尖度	ds.skew()
ファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
UNIX時間を使う	import time
文字列のサフィックスから部分文字列を除去する	s.removesuffix(sub)
双方向キューの最大長	deq.maxlen
ファイルに文字列を書き込む	f.write(s)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
option: グラフの色をゴールデンロッドにする	color = 'goldenrod'
列の全順列	itertools.permutations(iterable)
文字列を黒色化する	f'\033[30m{value}\033[0m'
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
ファイルパスをバイナリ書き込み用に開く]	open(filepath, mode='wb')
折れ線グラフのポイントマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
折れ線グラフをライムグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='limegreen')
日付データが何曜日か知る	aDate.weekday()
線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
列からカウンタを作る	collections.Counter(iterable)
変数を青色でプリントする	print(f'\033[34m{value}\033[0m')
赤い右三角マーカーを数列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
リストをナンバリングする	enumerate(aList)
option: マーカーを三角に設定する	marker = '^'
グラフの凡例を表示する	plt.legend()
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
コギーくんを使いたい	import kogi
カウンタから辞書を引く	aCounter.subtract(aDict)
棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
事前に複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
双方向キューのn番目に値を差し込む	deq.insert(n, element)
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
文字列を部分文字列によって区切る	s.split(sub)
option: 読み込みモードを使う	mode = 'r'
最小値でデータフレームの欠損値を補う	df.fillna(df.min())
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
部分文字列が部分文字列で開始するか調べる	s.startswith(sub)
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ふたつの集合の積集合	aSet.intersection(aSet2)
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
現在の日付時刻を求める	datetime.datetime.now()
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
配列をn個にビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
option: モカシン色を使う	color = 'moccasin'
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
EUCとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
y座標の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
行列の要素ごとに加算する	aArray + aArray2
文字列中の部分文字列の出現をカウントする	s.count(sub)
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフの丸印の大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
数式を方程式として解く	sympy.solve(e)
リスト内の要素が少なくともひとつ真か調べる	any(aList)
タブ区切りとしてJSONLファイルにデータフレームを書き込む	df.to_csv(filename, sep='\t')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
折れ線グラフに下三角印を使用する	plt.plot(データ列x, データ列y, marker='v')
データフレームを表示するとき、小数点以下の表示精度をn桁に増やす	pd.set_option('precision', n)
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
日付時刻データからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
整数nのバイト長を調べる	(n.bit_length() + 7) // 8
シーケンスの長さnの順列	itertools.permutations(iterable, n)
列によってデータフレームを並べ直す	df.sort_values(by=column)
year年のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
文字列を太文字にする	f'\033[1m{value}\033[0m'
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
option: マーカーをバツに変更する	marker = 'x'
イテラブルのイミュータブルなセット	frozenset(iterable)
文字列中の部分文字列をカウントする	s.count(sub)
集合から別の集合の要素を除く	aSet.difference_update(aSet2)
option: ディムグレー色を使用する	color = 'dimgrey'
データフレームのリスト列のpercent分位数	df[aList].quantile(percent/100)
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
色付きの一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
データフレームの列を削除する	df.drop(column, axis=1)
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
最大長nの双方向キューを作る	collections.deque(maxlen=n)
データフレームの未入力値を最大値に指定する	df.fillna(df.max())
option: 色をシアンに指定する	color = 'cyan'
option: SJISを使う	encoding = 'shift_jis'
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
データフレームから指定された列を抽出する	df[[column]]
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
y座標の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
散布図をマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='magenta')
縦軸だけグリッド線	plt.grid(axis='y')
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの値が欠損値かどうか調べる	df.isna()
itertoolsモジュールをインポートする	import itertools
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
濃いシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
option: 配列のデータ型を指定する	dtype = np.int
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
ライトスレイグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
カラムを100の位で四捨五入する	ds.round(-2)
データフレームを複数の列でソートする	df.sort_values(by=column)
option: ミッドナイトブルー色を使う	color = 'midnightblue'
n進文字列をbytesizeバイトのバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
データ列のNaNをxに設定する	ds.fillna(x)
データフレームを'A'列の値によってグループ化する	df.groupby('A')
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
ファイルを開いて]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
2次元リストをflattenする	sum(aList)
配列とリストの散布図を描画し、、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
散布図のマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
折れ線グラフの星印の色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
要素がセットのメンバーでない	element not in aSet
xのハッシュ値	hash(x)
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームのリストカラムの値を正規表現patternでreplに置き換える	df[aList].replace(pattern, repl, regex=True)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
上限のある両端キューを生成する	collections.deque(maxlen=n)
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ポイント印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列を黄色にする	f'\033[33m{value}\033[0m'
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
ファイルを解放する	f.close()
回帰分析をKNNで行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
疑似乱数平均と標準偏差からを求める	random.normalvariate(mu=0.5, sigma=0.2)
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフをライトスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
青色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
カウンタの項目数	len(aCounter)
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
ふたつの関係が真部分集合か調べる	aSet < aSet2
インデックスによってデータフレームを小さい順にソートする	df.sort_index(ascending=True)
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
集合を空にする	aSet.clear()
二つの文字列をプリントする	print(value, value2)
配列と数列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームのリスト列を100の位で丸める	df[aList].round(-2)
データフレームのリストカラムの中に日付データと文字列があるか	df[aList].isin([value, value2])
現在が何秒か知る	datetime.date.today().second
option: パープルにグラフの色を設定する	color = 'purple'
実数が有限かどうか調べる	math.isfinite(x)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
正規表現patternでまとめてデータ列の値を置き換える	ds.replace(pattern, repl, regex=True)
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
赤い破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列の中のASCII限定としてパターンによる全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
改行しないで文字列をプリントする	print(value, end='')
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
辞書の項目名の一覧	aDict.keys()
横棒グラフをダークグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgray')
option: 値を置き換える	inplace = True
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
リストとリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
nまでの奇整数列を作る	list(range(1, n, 2))
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
option: 区切りを文字列にする	sep = s
半透明の点線を用いてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
xでデータ列の欠損値を補う	ds.fillna(x)
数値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
データフレームから最初のカラムを除く	df[df.columns[1:]]
最大値と最小値として正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
ふたつのマッピングを結合する	aDict | aDict2
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データ列のユニークな要素	ds.unique()
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データフレームを10の位で四捨五入して整数型にする	df.round(-1).astype(int)
文字列の中で複数行対応として正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データ列の折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの中の欠損値を消す	df.dropna()
リストとリストについて散布図を描画してマーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
イテラブルとシーケンスの直積を算出する	itertools.product(iterable, iterable2)
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
nとn2の商	n / n2
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列を黒色にする	f'\033[30m{value}\033[0m'
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
Pandasで、フォーマットとして文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
列の値ごとにデータフレームを集計して、各グループ毎の分散を求める	df.groupby(column).var()
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategrey')
リネン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
データフレームの相関行列ピアソン積率相関係数として	df.corr(method='pearson')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
複数の列の値によってデータフレームをグループ化し、基本統計量を求める	df.groupby(columns).describe()
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
異なる列をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
第二四分位数でデータフレームの欠損値を埋める	df.fillna(df.median())
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
最大長を指定して、両端キュー	collections.deque(maxlen=n)
横棒グラフをミディアムパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
t-SNEで多次元データを濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか見る	df[aList].kurt()
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
オブジェクトのプロパティの値をセットする	setattr(obj, プロパティ名, 値)
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
整数nの二進表現	bin(n)
カンマ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
データフレームから型リストで指定されたデータ型の列のみ取り出す	df.select_dtypes(include=typeList)
行列の行列積	np.matmul(aArray, aArray2)
option: ライトブルーを使う	color = 'lightblue'
オブジェクトが文字列か確認する	isinstance(obj, str)
nがn2で割り切れるか調べる	n % n2 == 0
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
縦棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームの中にいくつ未入力値があるかカウントする	df.isna().sum()
xが1、もしくは2か調べる	x == 1 or x == 2
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
ボックスチャートを描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
行列の行ごとの最大	np.max(aArray, axis=1)
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
散布図に菱形マーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
現在をタプルに変換する	datetime.datetime.today().timetuple()
ヒストグラムをホットピンク色を用いて描画する	plt.hist(データ列, color='hotpink')
グレーにヒストグラムの色を変更する	plt.hist(データ列, color='gray')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
文字列をエンコーディングを用いてバイト列に変換する	s.encode(encoding=encoding)
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
折れ線グラフの色を深紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
配列とデータ列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
nとn2が同じ値か判定する	n == n2
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
rgbのポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
nをn2倍にする	n *= n2
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
フォレストグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
option: スラグレーにフォントの色を設定する	color = 'slategray'
イテラブルとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ベクトルの平均値	np.mean(aArray)
データフレームの列の文字列を未入力値にする	df[col].replace(s, np.nan)
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
箱ヒゲ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
データ列をValueMapでまとめて変更する	ds.replace(ValueMap)
現在のワーキングディレクトリ	os.getcwd()
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
option: フォントの色をオールドレースに設定する	color = 'oldlace'
文字列がPythonのキーワードかどうか	keyword.iskeyword(s)
配列から重複を除いた配列を作る	np.unique(aArray)
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
ラジアンの角度	math.degrees(x)
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: 色のアルファ値を変更する	alpha = 0.5
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
dateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
変数名をキーとして辞書	dict(name=element)
散布図に青い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列の変数名を数式に変換する	sympy.Symbol(s)
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
データフレームの列のユニークな要素数を確認する	df[col].nunique()
データ列をビン数nとしてビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
マップを浅くコピーする	aDict.copy()
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
データ列とリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
option: 白に色を設定する	color = 'white'
リストとデータ列の散布図をプロットして、丸マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを複数の列の値によって集計する	df.groupby(columns)
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
データフレームを列としてグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
option: グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
option: ライトコーラルを用いる	color = 'lightcoral'
文字列を二分する	s.partition(sep)
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ベクトルの計算をする	import numpy as np
データフレームのリスト列の75パーセンタイル	df[aList].quantile(0.75)
辞書からカウンタを生成する	collections.Counter(aDict)
option: NaNも含める	dropna = True
アークタンジェント	math.atan(x)
リストの各要素を関数に適用した結果で並べる	sorted(aList, key=func)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
作画で使うフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
xが一桁の整数	-9 <= x <= 9
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
二つのオブジェクトが同一参照かどうか	obj is obj2
データフレームを複数の列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
データ列の推移を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
タプルの最初を除く	aTuple[1:]
双方向キューのstart番目からend番目までの部分値	collections.deque(itertools.islice(deq, start, end))
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
データフレームを列名リストの値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームのカラムをPandasの日付型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: エンコーディングをUTF8にする	encoding = 'utf-8'
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
縦棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
数式の変数を数式で置き換える	e.subs(z, e2)
折れ線グラフを右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフの色をサーモンにセットする	plt.plot(データ列x, データ列y, color='salmon')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
データ列の記述統計量	ds.describe()
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
シアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
ロバストな重クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
JSONフォーマットの文字列をデータにする	json.loads(jsonString)
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
文字を文字コードに変換する	ord(ch)
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
型が名前付きタプルか調べる	issubclass(C, tuple)
データフレームのカラムの未入力値を後の値で埋める	df[col].fillna(method='bfill')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
ブランチドアーモンド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: 平均を加える	showmeans = False
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
両端キューの最大長	deq.maxlen
リストの要素を昇順にソートする	sorted(aList, reverse=False)
実数は無限大か調べる	math.isinf(x)
図の縦横を指定する	plt.figure(figsize=(横幅, 高さ))
ユーザの入力を整数として受け取る	int(input())
小さい順にデータフレームを列名リストによって並べる	df.sort_values(by=column, ascending=True)
組の平均値	sum(aTuple)/len(aTuple)
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
option: リネン色を使う	color = 'linen'
二つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
option: 耐火レンガにグラフの色を指定する	color = 'firebrick'
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データ列のNaNを最大値で埋める	ds.fillna(ds.max())
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
大文字・小文字を無視してパターンで文字列を区切る	re.split(pattern, s, flags=re.IGNORECASE)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
空白で文字列を分割し、、文字列リストに変換する	s.split()
ValueMapでデータ列の値をまとめて置き換える	ds.replace(ValueMap)
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
数から浮動小数点数を減ずる	x - y
Pandasで、書式fmtでデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
標準出力を得る	sys.stdout
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
文字列の大文字と小文字を交換する	s.swapcase()
全要素を０で初期化した３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
rgbのポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データ列を十の位で丸める	ds.round(-1)
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
折れ線グラフに菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
JSONを使う	import json
リストの最初の要素を見る	aList[0]
Pandasでフォーマットfmtでデータ列をdatetime64型にする	pd.to_datetime(ds, format=fmt)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: ライトサーモン色を使う	color = 'lightsalmon'
データフレームのカラムが何年か見る	df[col].dt.year
タイムスタンプデータが日付時刻データより後ろ	aDatetime > aDatetime2
回帰モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
自然数の順列の総数	math.perm(n)
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
データフレームの列を1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
Pandasでフォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ファイル名がCSVファイルかどうか	filename.endswith('.csv')
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
n個に配列をビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
RANSACでクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
小さい順に複数の列によってデータフレームを整列して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフの色をダークブルーに設定する	plt.plot(データ列x, データ列y, color='darkblue')
option: フォントの色をシエナに設定する	color = 'sienna'
散布図の三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
データフレームのリストカラムを十の位で四捨五入する	df[aList].round(-1)
option: セパレータをカンマにする	sep = ','
データ列の値は欠損値かどうか調べる	ds.isna()
辞書を浅くコピーする	dict(aDict)
データフレームのリストカラムのpercentパーセンタイル	df[aList].quantile(percent/100)
option: グラフの色をシアンに指定する	color = 'cyan'
'A'列によってデータフレームをまとめたグループ	df.groupby('A')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
オブジェクトひとつのりストを得る	[element]
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
データフレームを２つの列によってで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
ふたつの集合は共通の要素を持たないかテストする	aSet.isdisjoint(aSet2)
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
nをn2で割る	n / n2
ダークスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データ列の中に文字列が存在するかどうか確認する	ds.isin([value])
predicateFuncがTrueになるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
ふたつのリストの積集合を使う	list(set(aList) & set(aList2))
左三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
作画の縦横比を同じする	plt.axis('equals')
option: グラフの色をダークシアンに変更する	color = 'darkcyan'
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
タプルに要素を項目名として加える	aDict[key] = element
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図をrgbのバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列の大文字小文字を入れ替える	s.swapcase()
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
文字列が組の要素か	element in aTuple
多次元データを特異値分解として濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
実数を三乗する	x ** 3
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
グラフのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
行列を平坦化する	aArray.flatten()
キューの最大長を使う	deq.maxlen
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: トマトを使用する	color = 'tomato'
各列毎にデータフレームをグループ化し、列の分散を計算する	df.groupby(column)[column2].var()
最大最小から行列	np.linspace(最小値, 最大値, 要素数)
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
散布図を赤い星マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
kを底とする対数	math.log(x, k)
書き込み用にBOM付きとしてファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
nとn2のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
全要素が1の行列を作成する	np.ones(行数, 列数, dtype=np.int)
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
リストの要素を並べ変える	sorted(aList)
モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
グラフの色を淡くする	sns.set(pallete='muted')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
散布図を青紫色として描画する	plt.scatter(データ列x, データ列y, color='violet')
キューの順序をn個分右にローテンションする	deq.rotate(n)
オブジェクトのバイト長	sys.getsizeof(obj)
文字列の終了位置より前に部分文字列が含まれないか	s.find(sub, 0, end) == -1
青いグリッド線を引く	plt.grid(color='b')
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
nの十六進表現	hex(n)
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
データフレームの内容を見る	df.head()
日付データが何日か知る	aDate.day
文字列の先頭から部分文字列を除く	s.lstrip(sub)
リストをn個に等間隔でビン分割する	pd.cut(aList, n)
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: グラフの色をパレットトルコイズにセットする	color = 'paleturquoise'
データフレームの指定された2列だけ取り出す	df[[column, column2]]
クラス分類の正確さを計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
現在のローカルな日付時刻	datetime.datetime.today()
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
縦棒グラフを描画し、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
配列のスカラー倍	aArray * n
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
SJISでデータフレームをJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
コマンドラインフラグの状態を知る	sys.flags
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームのリストカラムを正規表現patternでまとめてreplに置換する	df[aList].replace(pattern, repl, regex=True)
列から両端キューを作る	collections.deque(iterable)
データ列がどの程度、分散しているか見る	ds.var()
実数のハイパボリック・コサイン	math.cosh(x)
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
ロバストな単回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
配列の次元数	aArray.ndim
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
データ列をカテゴリデータに変換する	ds.astype(object)
ファイルからファイル名を使う	os.path.basename(filepath)
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
上位集合	aSet.issuperset(aSet2)
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: バリーウッドを使う	color = 'burlywood'
プラム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
データフレームの列の未入力値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
グラフの使途をスライドに設定する	sns.set(context='talk')
リストの出現頻度を可視化する	plt.hist(データ列)
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
option: ポイントマーカーを使う	marker = '.'
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
切り捨てながらnをn2分の一にする	n //= n2
値を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
複数行対応として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
文字列がタプルに含まれないか調べる	element not in aTuple
データフレームの未入力値を最頻値に設定する	df.fillna(df.mode().iloc[0])
各グループごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
赤いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームのリストカラムの標本標準偏差	df[aList].std()
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
タプルのキーとその値をペアとして取り出す	aDict.items()
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
option: ダーク・スラテグレーを用いる	color = 'darkslategrey'
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
配列とリストの散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
散布図のダイアモンドマーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
本日が木曜日か	datetime.datetime.today().weekday() == 3
文字列をキャピタライズする	s.capitalize()
ミディアムスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: エラーを無視するように設定する	errors = 'ignore'
文字列をシンボルに変換する	sympy.Symbol(s)
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
二つの表データを横に連結する	pd.concat([df, df2], axis=1)
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
year年の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
ヒストグラムをフォレストグリーン色を用いて描画する	plt.hist(データ列, color='forestgreen')
データフレームの列のNaNをxで埋める	df[col].fillna(x)
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
数式の変数にnを代入する	e.subs(z, n)
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
x座標の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
データを最大最小を使って揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームの列の中に含まれると文字列の合計を数える	df[col].isin([value, value2]).sum()
データフレームを二つの列によって小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
平均でデータ列のNaNを埋める	ds.fillna(ds.mean())
数値を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
カウンタ同士で和集合演算する	aCounter | aCounter2
列の標本標準偏差	ds.std()
折れ線グラフの右三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームの全列の相関を可視化する	sns.pairplot(df)
データフレームの欠損値をモードに設定する	df.fillna(df.mode().iloc[0])
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
オレンジレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
option: 下三角マーカーを用いる	marker = 'v'
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームから最後の列を除く	df[df.columns[:-1]]
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
動作環境がWindowsか調べる	sys.platform.startswith('win32')
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
切り上げて整数にする	math.ceil(x)
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
パールバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
正規表現patternでデータフレームをまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
グラフの色テーマを明るくする	sns.set(pallete='bright')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
文字列の左端が部分文字列か調べる	s.startswith(sub)
黒い△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
数字を全部使う	string.digits
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
散布図をアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
折れ線グラフの色をネイビーにセットする	plt.plot(データ列x, データ列y, color='navy')
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
日付時刻データの曜日を整数で求める	aDatetime.weekday()
配列とリストの散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのカラム名を指定された名前リストに置き換える	df.columns = columns
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
折れ線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
青い一点鎖線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
列が正規分布からどの程度、尖っているか見る	ds.skew()
option: フォントの色を淡いピンク色に変更する	color = 'lightpink'
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフを破線にセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
実数の余弦の逆数	math.acos(x)
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
ライトグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: 貝殻色を用いる	color = 'seashell'
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームを各列と列の組み合わせ毎にグループ分けして、最大値を求める	df.groupby([column, column2], as_index=False).max()
標準出力	sys.stdout
データフレームを10の位で四捨五入して、整数にする	df.round(-1).astype(int)
実数を切り下げる	math.floor(x)
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームを２つの列によって昇順に並べる	df.sort_values(by=['A', 'B'], ascending=True)
文字列の開始位置からと終了位置の間に部分文字列があるかどうか判定する	s.find(sub, start, end) != -1
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
散布図の▽マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
2つのデータ列の散布図として残差をプロットする	sns.residplot(x=データ列, y=データ列)
タプルのの一覧	aDict.values()
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
実数の双曲線正接	math.tanh(x)
スラッシュで区切って二つの文字列を表示する	print(value, value2, sep='/')
キューのstart番目からend番目までの値	collections.deque(itertools.islice(deq, start, end))
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
ダークゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
疑似乱数を生成する	random.random()
nがn2以上か調べる	n >= n2
ヒストグラムをシスル色を使って描画する	plt.hist(データ列, color='thistle')
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
部分文字列で文字列が終わる	s.endswith(sub)
データフレームから型リストで指定されたデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
四角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
８ビット整数型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int8)
データフレームの列を丸める	df[col].round()
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列の無限な列	itertools.repeat(element)
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
グラフを表示する	plt.show()
縦方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
リストとリストについての散布図に黒い菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
配列とデータ列の散布図を描画し、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
リストとリストの散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
現在の再帰の最大回数を知る	sys.getrecursionlimit()
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ライトコーラル色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
option: ミディアムブルー色を使う	color = 'mediumblue'
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
床	math.floor(x)
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
コマンド引数の一覧	sys.argv[1:]
線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
要素∉集合	element not in aSet
nが3の倍数かどうか調べる	n % 3 == 0
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームを列で集計し、それぞれのグループ毎の分散を求める	df.groupby(column).var()
オブジェクトはリストクラスかどうか調べる	isinstance(obj, list)
折れ線グラフの三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
乱数シードをnで固定化する	random.seed(n)
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
グラフをパステル調にする	sns.set(pallete='pastel')
データフレームの列のユニークな値を確認する	df[col].unique()
項目名がタプルに存在するか	key not in aDict
データフレームの内の列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
行列の累積積	np.cumprod(aArray)
集合の浅いコピー	aSet.copy()
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームから1行だけカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
イテラブルの推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
SDGでクラス分類をする	model = sklearn.linear_model.SGDClassifier()
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
nが3で割り切れる	n % 3 == 0
二つのオブジェクトが同一参照か調べる	obj is obj2
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
配列をビン数nでビン分割する	pd.cut(aArray, n)
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
nがn2より小さいかどうか	n < n2
Pandasのバージョンを表示する	print(pd.__version__)
ヒストグラムの色をピーチパフにする	plt.hist(データ列, color='peachpuff')
文字列は全て数値か調べる	s.isnumeric()
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: 大文字・小文字を無視する	flag = re.IGNORECASE
option: 色をスプリンググリーンに設定する	color = 'springgreen'
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームのリストカラムの中央値	df[aList].median()
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
タイムスタンプデータとタイムスタンプデータの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
実数の小数点以下を四捨五入する	round(x)
タプルのn番目のを使う	aTuple[n]
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
散布図を黒いバツマーカーとして描く	plt.plot(データ列x, データ列y, marker='x', c='k')
option: デピンクにグラフの色を設定する	color = 'deeppink'
アンティークホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
グラフを色差別なくする	sns.set(pallete='colorblind')
タプルの末尾のn要素を捨てる	aTuple[:-n]
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: 色を貝殻に設定する	color = 'seashell'
データフレームのカラムの年を求める	df[col].dt.year
組の長さ	len(aTuple)
散布図の大バツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフをスノー色を使って描画する	plt.plot(データ列x, データ列y, color='snow')
option: マーカーを上三角に変更する	marker = '^'
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
表データをインポートする	import pandas as pd
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
両端キューの先頭から要素を取り除く	deq.popleft()
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
実数が整数	x.is_integer()
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
リストとリストについて散布図を描画して、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
文字列を最後の部分文字列で二分し、先頭の文字列を求める	s.rpartition(sub)[0]
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
CSVを読み込む	pd.read_csv(filename, sep=',')
横棒グラフをターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='turquoise')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
文字列がリストの要素でないか調べる	element not in aList
表を昇順に２つの列を用いてソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
最大長nの両端キューを作る	collections.deque(maxlen=n)
書式を辞書でフォーマットする	formatText.format_map(aDict)
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームの列が正規分布からどの程度、尖っているか見る	df[col].skew()
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
からデータフレームを読み込む	pd.read_excel(filename)
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
UTF8でファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
配列の次元を変形する	aArray.reshape(行数, 列数)
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
データフレームのリストカラムを十の位で丸めて、整数にする	df[aList].round(-1).astype(int)
フローラルホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
実数を整数に変換する	int(x)
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
データ列の推移を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームの未入力値を最小値で補う	df.fillna(df.min())
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
n2がnより大きくかつ、n3未満か調べる	n < n2 and n2 < n3
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
PandasでdateStringを日付データにする	pd.to_datetime(dateString)
ヒストグラムを破線を用いてプロットする	plt.hist(データ列, linestyle='dashed')
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
カテゴリで色分けして、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
option: フォントの色をビスクに設定する	color = 'bisque'
オブジェクトの型を調べる	type(obj)
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
データフレームのリストカラムを四捨五入する	df[aList].round()
データフレームの中で、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
オブジェクトがリストの要素でない	element not in aList
ファイルをSJISで開く]	open(filepath, encoding='shift_jis')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
今日が木曜日	datetime.datetime.today().weekday() == 3
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
折れ線グラフの色をダークシアグリーンにセットする	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ゼロ埋めした3二ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
数値を改行なしにプリントする	print(value, end='')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
０で全要素を初期化したブール型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
整数乱数の行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
線グラフの色をパウダーブルーにする	plt.plot(データ列x, データ列y, color='powderblue')
線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
option: グラフの色をホットピンクに設定する	color = 'hotpink'
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
rgbのバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
行列から重複を除いた行列を作る	np.unique(aArray)
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
文字列は文字列より辞書順で後	s > s2
リストの要素数を見る	len(aList)
データフレームの値が欠損値か	df.isna()
タプルのn番目の	aTuple[n]
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: 色をディムグレーに指定する	color = 'dimgray'
現在が金曜日か調べる	datetime.datetime.today().weekday() == 4
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
オブジェクトがタプルの要素でないか調べる	element not in aTuple
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
データフレームの中の欠損値の合計を数える	df.isna().sum()
ファイルからn文字読み込む	f.read(n)
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
リストが空でない	len(aList) != 0
option: 色をモカシンに設定する	color = 'moccasin'
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
文字列を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
横棒プロットを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
文字列の無限イテラブル	itertools.repeat(element)
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームから列を三つだけ選択する	df[[column, column2, column3]]
リストとデータ列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データ列の要約統計量	ds.describe()
日付データが日付データと同時か調べる	aDate == aDate2
折れ線グラフを濃いシアン色を使って描画する	plt.plot(データ列x, データ列y, color='darkcyan')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
文字コードに対応する文字	chr(unicode)
異なるカラムをキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
散布図をコーンフラワーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
第二コマンド引数	sys.argv[1]
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
実数のn乗の実数剰余	pow(x, n, y)
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
列から重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
リストと数列についての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
多次元尺度構成法で多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
データ列のpercent分位数	ds.quantile(percent/100)
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
文字列は全て十進数字か	s.isdecimal()
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
右三角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
データフレームのリストカラムの中に日付データと日付データがあるかどうか調べる	df[aList].isin([value, value2])
ファイルを絶対パスにする	os.path.abspath(filepath)
データフレームのカラムの中央値	df[col].median()
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
カンマで文字列を区切って列挙する	s.split(',')
グラフのデータラベルの場所を指定する	plt.legend(loc=(x, y))
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
変数が無限大に近づく場合の数式の極限値を算出する	sympy.limit(e, z, oo)
2つの辞書をネストする	collections.ChainMap(aDict, aDict2)
ヒストグラムの色をアイボリーにする	plt.hist(データ列, color='ivory')
２つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
option: グラフを点線にセットする	linestyle = 'dotted'
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
クラス分類の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームを列によって並べて、上の方を取り出す	df.sort_values(columns).head(n)
文字列中に非アスキー文字が含まれるかどうか調べる	any(not c.isascii() for c in s)
本日をISO8601形式の文字列にする	datetime.datetime.today().isoformat()
リストと配列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフをライトスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
文字列の右側から改行を除く	s.rstrip('\n')
文字列の終了位置以前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
日付時刻データにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
フローラルホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ひとつでも非大文字が文字列中に含まれるか調べる	any(not c.isupper() for c in s)
列の重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
モデルを学習する	model.fit(説明変数, 目的変数)
円グラフでデータ列の割合を描画する	plt.pie(データ列, startangle=90)
0から始まる無限イテラブル	itertools.count()
データ列と配列についての散布図にrgbの三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストを複製する	aList.copy()
option: アクアマリン色を使用する	color = 'aquamarine'
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
データ列の各データ値の出現数を求める	ds.value_counts()
nがn2よりも大きい	n > n2
組の要素を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
ミントクリーム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
黒い丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
双方向キューの要素をインプレースに逆順にする	deq.reverse()
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
グリッド線	plt.grid(color='#800080')
option: アリスブルーにフォントの色を設定する	color = 'aliceblue'
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
データフレームを各列毎にグループ分けして、列の平均値を算出する	df.groupby(column)[column2].mean()
ダークサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
グラフの色を暗くする	sns.set(pallete='dark')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
オプションでファイルを出力先にする	file = sys.open(filename, 'w')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
論文用にグラフを設定する	sns.set(context='paper')
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
列を累積する	itertools.accumulate(iterable, operator.mul)
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
黒い下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
変数名をキーとして、辞書	dict(name=element)
棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
プラットフォームの符号付き整数の最大値を知る	sys.maxsize
カラムを1000の位で丸める	ds.round(-3)
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
オブジェクトは整数クラスか	isinstance(obj, int)
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
シーケンスを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
リストの最初の文字列を探す	aList.index(element)
FIXME	np.linalg.eig(aArray)
線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
散布図のクロスマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
黒い菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
ファイルパスから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
配列をn個にビン分割する	pd.cut(aArray, n)
リストが空でないか調べる	len(aList) != 0
オブジェクトはリストか調べる	isinstance(obj, list)
列を等量でビン数nとしてビンニングする	pd.qcut(ds, n)
黒いクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
半透明の点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
自然数の階乗を求める	math.factorial(n)
最初のプログラムを書く	print('Hello World')
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
散布図を黒い菱形マーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
色付きの実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: 色をミディアムブルーに設定する	color = 'mediumblue'
データフレームの列のNaNを前の行の値で埋める	df[col].fillna(method='ffill')
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
データフレームのリストカラムの歪度	df[aList].kurt()
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
実数の逆正接	math.atan(x)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
数列と数列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
ベクトルが何次元か調べる	aArray.ndim
プログラムのファイルの名前を調べる	sys.argv[0]
データフレームを列によって並べて、上位n件を取り出す	df.sort_values(columns).head(n)
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
整数乱数で要素を埋めた配列を作る	np.random.randint(開始値, 終了値, N)
重複する行のみ	df[df.duplicated(keep=False)]
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ホワイトスモークにヒストグラムの色を変更する	plt.hist(データ列, color='whitesmoke')
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
散布図にダイアモンドマーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
保存するCSVの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
option: 上三角マーカーを描画する	marker = '^'
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
データフレーム全体を降順で行で並べる	df.sort_index(ascending=False)
option: ダークカーキを用いる	color = 'darkkhaki'
ASCII限定として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データ列の推移を赤い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
タブを見る	'\t'
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
xを浮動小数点数型にする	float(x)
データフレームの中にあると文字列の合計をカウントする	df.isin([value, value2]).sum()
イテラブルと配列の散布図を描いて、マーカーをダイアモンドに指定する	plt.plot(データ列x, データ列y, marker='D')
多次元データをMSDで濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
オプションで、標準出力を使う	file = sys.stdout
データフレームのカラムの歪度を求める	df[col].kurt()
データ列をヒストグラムにする	plt.hist(データ列)
折れ線グラフの▲マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
データ列をビン分割する	pd.cut(ds, aList)
折れ線グラフをドジャーブルー色を使って描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
数列とリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
方程式の解	sympy.solve(e)
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
リストと配列についての散布図に菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D')
10を底とする浮動小数点数の対数	math.log10(x)
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
大文字・小文字を無視して文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
多次元データを特異値分解で濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, N)
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: ライトイエロー色を用いる	color = 'lightyellow'
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
パパイヤウィップ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
option: 黄緑を使用する	color = 'chartreuse'
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
集合にイテラブルを追加する	aSet.update(iterable)
option: 印を右三角に変更する	marker = '>'
カラムの中に日付データと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
散布図を黒いダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
タプル自身を2回あわせた直積	itertools.product(iterable, repeat=2)
表データの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
逆順の両端キュー	reversed(deq)
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
リストとリストの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームをグループ化し列に対し最小値を求める	df.groupby(column)[column2].min()
文字列を最後の部分文字列で二分し後半の文字列を見る	s.rpartition(sub)[-1]
option: シーグリーンを使う	color = 'seagreen'
列を文字列に変換して連結する	''.join(map(str, iterable))
縦棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
option: 昇順にする	ascending = True
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
文字列の両端から空白を取り除く	s.strip()
ダーク・スラテグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
K最近傍法で回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
xが一桁の正の整数	0 <= x <= 9
データフレームの列の尖度	df[col].skew()
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
折れ線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
列によってデータフレームをソートし、、下位n件を取り出す	df.sort_values(columns).tail(n)
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
TSVをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
データフレームをグループ化して、ヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
ベクトルの最小値	np.min(aArray)
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
3変数の一番小さい値を算出する	max(x, y, z)
t-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
データフレームを表示するとき、小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
y軸の目盛りを整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
option: グラフの色をグレーに変更する	color = 'grey'
ピアソン相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームのカラムの年を使う	df[col].dt.year
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
ファイルに文字列を書く	f.write(s)
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
3変数の最小値を計算する	min(x, y, z)
昇順にデータフレームを列名リストを用いて並べる	df.sort_values(by=column, ascending=True)
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
変数について数式をn階微分する	sympy.diff(e, z, n)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
nが一桁の整数	0 <= n <= 9
横棒プロットの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
散布図を四角印を使って描画する	plt.scatter(データ列x, データ列y, marker='s')
option: ホワイトを使う	color = 'white'
リストの中の最も大きい値を求める	max(aList)
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
ふたつの集合の差を使う	aSet.difference(aSet2)
多次元データを主成分分析を使って濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
option: 三角マーカーを描画する	marker = '^'
文字列の両端から部分文字列を取り除く	s.strip(sub)
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ヒストグラムをナバホホワイト色を用いて描画する	plt.hist(データ列, color='navajowhite')
ファイルパスを読み込み用にオープンする]	open(filepath, mode='r')
データフレームから重複したデータを残さず、落とす	df.drop_duplicates(keep=False)
データフレームの欠損値を後の値で埋める	df.fillna(method='bfill')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
option: フォントの色をシルバーにする	color = 'silver'
データフレームを列によって整列して更新する	df.sort_values(by=column, inplace=True)
データフレームを各列と列の組み合わせ毎に集約し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
各列毎にデータフレームを集約し、、列の最大値を求める	df.groupby(column)[column2].max()
データ列の中に文字列と日付データがあるかどうか確認する	ds.isin([value, value2])
配列とリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
イテラブルをカウンタに変換する	collections.Counter(iterable)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
データフレームの相関行列	df.corr()
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
データ列が何秒か見る	ds.dt.second
option: グラフの色をシエナに設定する	color = 'sienna'
ヒストグラムを濃い青色として描画する	plt.hist(データ列, color='darkblue')
リストの先頭を使う	aList[0]
option: シエナ色を使う	color = 'sienna'
配列のユニークな要素とそのインデックスを求める	u, indices = np.unique(aArray, return_index=True)
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームの行の名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
小数点数のハイパボリック・タンジェントの逆数を求める	math.atanh(x)
濃く色をプロットの描画で使う	sns.set(pallete='deep')
正規化されたヒストグラムをプロットする	plt.hist(データ列, density=True)
二つの表データを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームの列の文字列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
二つの文字列が等しくない	s != s2
option: パパイヤウィップ色を使う	color = 'papayawhip'
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
ベクトルの転置行列	aArray.T
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
カウンタから最も頻出の要素の件数	aCounter.most_common()[1]
ファイルパスの区切り記号	os.sep
グラフの補助目盛を有効にする	plt.minorticks_on()
option: グラフの色をパープルに設定する	color = 'purple'
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
option: ダークバイオレット色を用いる	color = 'darkviolet'
散布図をダークゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
辞書にマッピングの項目を加えて、更新する	aDict.update(aDict2)
等差数列を行列にする	np.arange(開始値, 終了値, 等差)
正規分布のパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
両端キュー中の要素の位置	deq.index(element)
nが無限に続く数列	itertools.repeat(n)
データ列は何分か見る	ds.dt.minute
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
標準入力から1文字だけ読む	sys.stdin.read(1)
ケンドール順位相関係数としてデータフレームの相関行列を求める	df.corr(method='kendall')
値を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
option: 色をマゼンタに設定する	color = 'magenta'
配列と配列について散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
ファイルパスをバイナリモードを用いて開く]	open(filepath, mode='rb')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
データ列は何月か確認する	ds.dt.month
黒い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
数値の符号をコピーにする	math.copysign(x, x2)
第二引数で指定されたファイルの名前	sys.argv[1]
option: 赤にグラフの色を設定する	color = 'red'
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
文字列のケースを変換する	s.casefold()
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
RANSACとして回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
数のn乗して実数による余り	pow(x, n, y)
文字列のケースを入れ替える	s.swapcase()
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフを黄緑色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
スレートブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
Pandasで、フォーマットfmtとして文字列を日付データにする	pd.to_datetime(s, format=fmt)
データ列とリストの散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
option: ブラックにグラフの色を設定する	color = 'black'
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
'A'列によってデータフレームをソートする	df.sort_values(by='A')
データフレームを二つの列によってソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
ファイルを改行除外して一行ずつ読む	f.readline()
option: スノー色を使う	color = 'snow'
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
大文字・小文字を無視してパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
option: 三角マーカーを使う	marker = '^'
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
各列毎にデータフレームを集計して列の平均値を求める	df.groupby(column)[column2].mean()
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
option: 箱ひげ図を横方向にする	vert = False
線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフの色をダークグリーンにする	plt.plot(データ列x, データ列y, color='darkgreen')
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
集合の濃度	len(aSet)
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームを列名リストの値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
文字列をシアンにする	f'\033[36m{value}\033[0m'
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
L2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
配列の累積積	np.cumprod(aArray)
option: データ型を指定する	dtype = np.int
データフレームの列と列の相関行列	df[[column, column2]].corr()
モデルのバージョン	version = 'wcce2022-0.1'
プロットに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
データフレームのカラムを100の位で丸めて整数型にする	df[col].round(-2).astype(int)
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
折れ線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
赤い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
値を下線付きにする	f'\033[4m{value}\033[0m'
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
option: 文字列をセパレータで使用する	sep = s
今日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
タプル内の要素は少なくともひとつ真か	any(aTuple)
オプションで出力先を標準出力に設定する	file = sys.stdout
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームのリスト列を100の位で四捨五入して、整数にする	df[aList].round(-2).astype(int)
二つの文字列が同じか調べる	s == s2
データフレームのカラムの中に文字列と文字列が存在する	df[col].isin([value, value2])
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
配列を2次元1列に変形する	aArray.reshape(-1, 1)
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
日付時刻データは何分か知る	aDatetime.minute
option: ミディアムパープル色を使う	color = 'mediumpurple'
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
ゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
列をカウントしてカウンタを更新する	aCounter.update(iterable)
データフレームのカラムを折れ線グラフで可視化する	plt.plot(df[column], df[column])
nから無限にカウントアップする	itertools.count(start=n)
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
浮動小数点数の二乗を計算する	x ** 2
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
変数を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームの数値を丸める	df.round()
整数nがセットの一つ	n in aSet
データフレームを複数の列の値でグループ分けする	df.groupby(columns)
二つの変数を同じ値にする	x = y = n
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
列から最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
データフレームの列が文字列で始まらない行を選ぶ	df[not df[column].str.startswith(s)]
データフレームを表示するとき、表示できる最大行数を変更する	pd.set_option('display.max_rows', n)
ミディアムターコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
文字列が正規表現にマッチさせる	re.match(pattern, s)
タプルをnからナンバリングする	enumerate(aTuple, start=n)
空のチェーンマップを生成する	collections.ChainMap()
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
日付データが日付データより後ろ	aDate > aDate2
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
スタッキングを用いて回帰分析を行う	sklearn.ensemble.StackingRegressor()
空のリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
ファイルパスを書き込み用に文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列がリストの要素か調べる	element in aList
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
整数nを八進文字列に変換する	oct(n)[2:]
日付時刻データの年	aDatetime.year
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
数列と配列について散布図をプロットして左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームを表示するとき、小数点以下をn桁に設定する	pd.set_option('precision', n)
ランダムにn行をデータフレームから重複ありでサンプリングする	df.sample(n, replace=True)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
option: 色をマルーンに設定する	color = 'maroon'
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
まとめてデータフレームのカラムの値をValueMapで置き換える	df[col].replace(ValueMap)
option: シアンを用いる	color = 'cyan'
データフレームの最初の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
ふたつの集合が互いに素か確認する	aSet.isdisjoint(aSet2)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
nとkのnCkを求める	math.comb(n, k)
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
整数nを二進表現に変換する	bin(n)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
数式の平方根を求める	sympy.sqrt(e)
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
デピンク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
乱数シードをnで初期化する	random.seed(n)
実数が正の数か調べる	x > 0
組を展開してプリントする	print(*aTuple)
横棒グラフを白色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
グローバル変数の一覧	globals()
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
数式の変数に数式を代入する	e.subs(z, e2)
散布図の△マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームが重複しているか	df.duplicated()
データフレームの列の値が未入力値かどうか調べる	df[col].isna()
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列を部分文字列で二分し、先頭の文字列を使う	s.partition(sub)[0]
赤い破線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
実数のk進対数	math.log(x, k)
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
部分文字列で文字列を分割した時の先頭の文字列	s.partition(sub)[0]
ファイルをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
マップのコピー	dict(aDict)
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
ファイルからを読み込む	pd.read_excel(filename)
折れ線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
配列とリストについて散布図を描画して、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
JSONLファイルをデータフレームとして読む	pd.read_json(filename, orient='records', lines=True)
グラフのx軸とy軸の比率を同じする	plt.axis('equals')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
十六進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
データフレームのリストカラムを100の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
option: グラフの色をブラックに変更する	color = 'black'
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
データフレームのリストカラムを百の位で四捨五入する	df[aList].round(-2)
グラフの描画でパステル調に色を用いる	sns.set(pallete='pastel')
散布図にダイアモンド印を用いる	plt.scatter(データ列x, データ列y, marker='D')
option: デピンク色を用いる	color = 'deeppink'
行列の列ごとの分散を使う	np.var(aArray, axis=0)
データフレームから列を二つ選択する	df[[column, column2]]
青い破線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの行と列を入れ替える	df.T
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
option: データ型として三二ビット整数型を使う	dtype = np.int16
ファイルをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
ターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ファイルが存在しないか調べる	not os.path.exists(filepath)
プロットのx軸とy軸の比率を等しくする	plt.axis('equals')
イテラブルを文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
赤い大バツマーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
ゴールド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
リストをビン数nで等量でビニングする	pd.qcut(aList, n)
配列とイテラブルについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
スレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
タプルの平均値	sum(aTuple)/len(aTuple)
データフレームを各列毎にグループ化して列の分散を求める	df.groupby(column)[column2].var()
データ列の中にある文字列の数をカウントする	ds.isin([value]).sum()
大バツ印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
seabornのデフォルトを適用する	sns.set()
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
プログラムの実行を異常終了する	sys.exit(1)
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
option: 線種を点線に設定する	linestyle = 'dotted'
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
両端キューの中に要素が含まれてるか調べる	element in deq
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
データフレームの列をにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームのカラムの一覧	df.info()
option: スラグレーにグラフの色をセットする	color = 'slategray'
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
全ての８進数字	string.octdigits
複数の列によってデータフレームを昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: スラグレーを使用する	color = 'slategrey'
option: グラフの色をダークグレーに設定する	color = 'darkgray'
グラフに水平方向の点線を設定する	plt.axhline(y=0, linestyle='dotted')
キューの末尾の要素	deq[-1]
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
データフレームの指定された列名一覧の列を抽出する	df[columns]
見やすいグラフを使う準備をする	import seaborn as sns
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
ふたつの関係が上位集合もしくは等しい	aSet > aSet2
データフレームのカラムの空文字を欠損値に変換しドロップする	df[col].replace('', np.nan).dropna()
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
散布図の星マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ガウス過程を使ってクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
文字列の長さ	len(s)
nを切り捨てながら半分にする	n //= 2
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
文字列が文字列リストに含まれる	s in aStringList
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
折れ線グラフのバツ印の太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
クラスのサブクラスか確認する	issubclass(サブクラス, クラス)
ダークスラテグレー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
タプルの要素を昇順に並べ変える	sorted(aTuple, reverse=False)
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームのリストカラムの平均値を計算する	df[aList].mean()
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームの相関行列ピアソン積率相関係数で	df.corr(method='pearson')
xの印字可能な文字列	ascii(x)
データフレームを関数の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
格子線をグラフに表示する	plt.grid(True)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
リストと数列について散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームの列がxより少ないデータを選択する	df[df[column] < x]
データ列の未入力値を直前の値に指定する	ds.fillna(method='ffill')
option: グラフを点線に設定する	linestyle = 'dotted'
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
データフレームの標準偏差	df.std()
nが奇数か調べる	n % 2 == 1
真部分集合	aSet < aSet2
両端キューをポップする	deq.pop()
等しい量になるようにデータフレームの中の列をビン数nでビン分割する	pd.qcut(df[col], n)
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
option: マーカーの色を青にする	markerfacecolor = 'blue'
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
色付きの一点鎖線でリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
太字で文字列をプリントする	print(f'\033[1m{value}\033[0m')
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
文字列の右側から改行を取り除く	s.rstrip()
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
実数の値が整数か調べる	x.is_integer()
リストをシアンにする	f'\033[36m{value}\033[0m'
連立方程式の解を計算する	sympy.solve([e, e2])
シーケンスからn個、ランダムに選ぶ	random.choices(iterable, k=n)
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
表データから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
データフレームのインデックス名を一度にnameからname2に付け直す	df.rename(index={name: name2})
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
実数のn乗	x ** n
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ファイルパスをEUCを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームを列の値でまとめた表を使う	df.groupby(column)
データ列の中にいくつ未入力値があるか数える	ds.isna().sum()
列によってデータフレームをグループ化し、要約統計量を求める	df.groupby(column).describe()
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
rgbの下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: インディアンレッドに色を指定する	color = 'indianred'
Pandasのバージョンを見る	print(pd.__version__)
データフレームを各列毎にグループ分けして、文字列というグループの個数を計算する	df.groupby(column).size()[s]
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
0から始まる無限数列	itertools.count()
データフレームの列がxでない行を取り除く	df[df[column] == x]
データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
nがn2以上	n >= n2
option: ライトスカイブルー色を使う	color = 'lightskyblue'
最初のカテゴリーを除外してデータフレームの列をダミー変数にする	pd.get_dummies(df[column], drop_first=True)
グラフの色を明るくする	sns.set(pallete='bright')
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
アルファベットを全部使う	string.ascii_letters
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
ピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
データフレームから指定したデータ型のカラム名一覧	df.select_dtypes(型).columns
nが一桁の整数か確認する	-9 <= n <= 9
option: 文字列を区切りで使用する	sep = s
データ列を円グラフにする	plt.pie(データ列, startangle=90)
折れ線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
タプルのn番目からn2番目までを得る	aTuple[n:n2]
データ列の欠損値を前の行の値で補う	ds.fillna(method='ffill')
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
実数に実数を加える	x + y
option: ネイビーにグラフの色をセットする	color = 'navy'
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
全ての数字	string.digits
小数点数の余弦を求める	math.cos(x)
データフレームのカラムの未入力値をxに設定する	df[col].fillna(x)
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
カラムの欠損値を中央値に設定する	ds.fillna(ds.median())
option: スチールブルーにグラフの色を設定する	color = 'steelblue'
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
散布図の印を菱形にする	plt.scatter(データ列x, データ列y, marker='D')
データフレームのインデックスの一覧	df.index
散布図のクロスマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
モカシン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
散らばりを図示する	plt.scatter(データ列x, データ列y)
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
option: ベージュにフォントの色を設定する	color = 'beige'
文字列がカタカナ	('ァ' <= ch <= 'ン')
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
三整数の最大公約数	math.gcd(n, n2, n3)
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
配列とリストの散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
option: バイナリ書き込みモードに指定する	mode = 'wb'
ファイルをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームを列にグループ化して、各グループごとの平均値を算出する	df.groupby(column).mean()
キューの左	deq[0]
カウンタ同士で積集合を計算する	aCounter & aCounter2
配列の合計	np.sum(aArray)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
二つのリストの積集合	list(set(aList) & set(aList2))
カラムの値が欠損値	ds.isna()
リストとリストについて散布図を描画し、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをトマト色を用いて描画する	plt.barh(データ列x, データ列y, color='tomato')
カウンタの値を増やす	aCounter[element] += 1
配列とリストの散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
option: ヘッダを自動的な連番に指定する	header = None
文字列がカタカナか調べる	('ァ' <= ch <= 'ン')
オブジェクトがリストに含まれる	element in aList
ヒストグラムの色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
プロットの中に枠なしの凡例を入れる	plt.legend(frameon=False)
ラインのラインスタイルを一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ファイルをUTF8を用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
データフレームを'A'列と'B'列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
データフレームのカラムのユニークな要素	df[col].unique()
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
自分自身をモジュールとして	sys.modules[__name__]
データフレームの未入力値を中央値に設定する	df.fillna(df.median())
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
n×n2の２次元リスト	[[0] * n for _ in range(n2)]
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
タイムスタンプデータの曜日を整数で見る	aDatetime.weekday()
リストと数列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
散布図をダークオーキッド色を使って描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
xが-9以上、9以下	-9 <= x <= 9
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
データフレームを見る	df.head()
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
折れ線グラフの線種を破線にする	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列内に日本語が含まれるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
nが3の倍数か調べる	n % 3 == 0
実行を異常終了する	sys.exit(1)
option: 改行を分割記号で使う	sep = '\n'
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
プロットの描画で明るくカラーパレットを使用する	sns.set(pallete='bright')
実線を用いてヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
option: 改行コードをUNIXに設定する	newline = '\n'
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
行列の累積和	np.cumsum(aArray)
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
ヒストグラムをティール色で描画する	plt.hist(データ列, color='teal')
破線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashed')
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
散布図の下三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
文字列にリストを変換して、カンマによって一つにする	','.join(map(str, iterable))
エンコーディング	sys.getdefaultencoding()
棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
縦棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
rgbの菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列をPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
数式の数値を求める	float(e)
データフレームのカラムの時	df[col].dt.hour
データフレームのカラムの欠損値を最大値で置き換える	df[col].fillna(df[col].max())
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
グラフの凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
実数の符号をコピーにする	math.copysign(x, x2)
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
散布図をダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
t-SNEで多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
データフレームを'A'列と'B'列を用いて昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
縦棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgrey')
何回まで再帰ができるかを	sys.getrecursionlimit()
nをn2だけ右シフトする	n >> n2
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームを'A'列の値によってまとめた表	df.groupby('A')
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
列'A'と列'B'をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データ列の曜日の名前を使う	ds.dt.weekday_name
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
▼マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
タプルの合計を求める	sum(aTuple)
option: 書き込みモードに設定する	mode = 'w'
nが1、もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
空の勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
数列と数列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
集合の要素が別の集合に含まれる	aSet.issubset(aSet2)
option: グラフの色をプラムに設定する	color = 'plum'
データ列の文字列長を列として使う	ds.str.len()
プロットの横軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
変数を白色にする	f'\033[37m{value}\033[0m'
実部と虚部から複素数	complex(x, y)
リストと数列について散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
option: 色をアクアに設定する	color = 'aqua'
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データ列は何秒か見る	ds.dt.second
文字列中の部分文字列を別の文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
部分文字列が文字列の開始位置以降にある	s.find(sub, start) != -1
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
乱数で要素を埋めた行列	np.random.random((行数, 列数))
集合をリストに変換する	list(aSet)
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
データフレームを各カラムと列の組み合わせ毎にグループ化して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
文字列を緑色にする	f'\033[32m{value}\033[0m'
TSVからCSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
nが正の数か	n > 0
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
乱数シードをnで固定する	random.seed(n)
水色で実行結果をプリントする	print(f'\033[36m{value}\033[0m')
データフレームを十の位で四捨五入する	df.round(-1)
データフレームのカラムの欠損値を中央値にセットする	df[col].fillna(df[col].median())
表データの末尾	df.tail()
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
nの八進表記	oct(n)
文字列が全てアルファベットか調べる	s.isalpha()
xが一桁の数か	-9 <= x <= 9
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
xが真	bool(x)
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームのシェイプを確認する	df.shape
バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
リストをひとつ置きに得る	aList[::2]
集合の全ての要素が別のセットに含まれる	aSet.issubset(aSet2)
散布図をミディアムスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
黒い四角マーカーを配列とリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
表データを'A'列と'B'列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
nがn2と等しいかどうか調べる	n == n2
グラフ中のフォントを設定する	sns.set(font=フォント名)
kを底とする実数の対数	math.log(x, k)
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
ヒストグラムの色をアイボリーにセットする	plt.hist(データ列, color='ivory')
option: グラフの色をミッドナイトブルーにする	color = 'midnightblue'
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
option: 改行しない	end = ''
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
BOM付きでファイルをオープンする]	open(filepath, encoding='utf_8_sig')
青い点線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
リストを引数として展開して表示する	print(*aList, sep=',')
文字列内にひとつでもASCII文字があるかどうか確認する	any(c.isascii() for c in s)
option: スチールブルーを使う	color = 'steelblue'
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgray')
列'A'と列'B'をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフにラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
外れ値に強い線形モデルを作る	model = sklearn.linear_model.HuberRegressor()
折れ線グラフの線のスタイルを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのカラムを散布図で図示する	sns.scatterplot(data=df, x='列名', y='列名')
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: パールバイオレットレッドにグラフの色を変更する	color = 'palevioletred'
8進文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列を新しい文字列によって置き換える	s.replace(sub, newsub)
データフレームのNaNをxで埋める	df.fillna(x)
xを浮動小数点数に変換する	float(x)
データフレームのカラムが何秒か見る	df[col].dt.second
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
データフレームのリスト列のNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
JSONLファイルにBOM付きでデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
分類結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
option: グラフの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
1で全要素を初期化した行列	np.ones(要素数, dtype=np.int)
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
ヒストグラムをダークサーモン色を使って描画する	plt.hist(データ列, color='darksalmon')
ヒストグラムの色をサンディーブラウンにセットする	plt.hist(データ列, color='sandybrown')
行列の行ごとの最小値	np.min(aArray, axis=1)
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
整数nの8進表現	oct(n)
折れ線グラフに黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
n進数文字列を整数に変換する	int(s, n)
数式を変数についてn階微分する	sympy.diff(e, z, n)
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
ヒストグラムの色をインディアンレッドにセットする	plt.hist(データ列, color='indianred')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ヒストグラムをライトブルー色を用いて描画する	plt.hist(データ列, color='lightblue')
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
数値を赤色にする	f'\033[31m{value}\033[0m'
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
データフレームのリスト列の要約統計量	df[aList].describe()
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
PandasでフォーマットとしてデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
option: ダークサーモンにグラフの色を指定する	color = 'darksalmon'
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームのカラムを丸めて、整数にする	df[col].round().astype(int)
散布図を黒い大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
オブジェクトは集合クラスかどうか	isinstance(obj, set)
数値の変数についてのn階微分を求める	sympy.diff(e, z, n)
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ヒストグラムの色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
データフレームの列がxより大きくx2より少ない行を選択する	df[(x < df[column]) & (df[column] < x2)]
option: 改行コードを動作環境依存に指定する	newline = None
セットをリストに変換する	list(aSet)
辞書に辞書の項目を更新する	aDict.update(aDict2)
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
データ列を1000の位で丸める	ds.round(-3)
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
データフレームのリストカラムのNaNを直前の値で埋める	df[aList].fillna(method='ffill')
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
散布図を茶色色として描画する	plt.scatter(データ列x, データ列y, color='brown')
データフレームを100の位で丸める	df.round(-2)
標準出力を	sys.stdout
ふたつの集合のいずれか一方だけの集合を算出する	aSet.symmetric_difference(aSet2)
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
最後の項目をマッピングからポップする	aDict.popitem()
option: グラフの色をライトグリーンにする	color = 'lightseagreen'
縦棒プロットを描画して、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
散布図のダイアモンド印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
Pythonパスの一覧を確める	sys.path
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
集合＼集合	aSet.difference(aSet2)
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
カテゴリ列で色分けして、データフレームの全カラムの散布図をプロットする	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムをライトグリーン色を使って描画する	plt.hist(データ列, color='lightseagreen')
偽	False
プログラムの実行を適切に停止する	sys.exit(0)
データフレームを二つの列によって並べ直す	df.sort_values(by=['A', 'B'])
アルファベットの大文字を全部見る	string.ascii_uppercase
文字列がタイトル大文字小文字か確認する	s.istitle()
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
カウンタを多い順に列挙する	aCounter.most_common()
n個にリストをビンニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームを列の値によってグループ化する	df.groupby(column)
ファイルのファイル名	os.path.basename(filepath)
折れ線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
実数のcosの逆数を求める	math.acos(x)
文字列はリストに含まれるか調べる	element in aList
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
昇順に組の要素をソートする	sorted(aTuple, reverse=False)
文字列を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームの列を各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
異なる列をキーにして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
標準入力を得る	sys.stdin
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
option: タブを分割記号で使う	sep = '\t'
K最近傍法としてクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ヒストグラムのビン数を変更する	plt.hist(データ列, bins=区関数)
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームの中で、列とカラムの重複を消す	df.drop_duplicates(subset=[column, column2])
マッピングをソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
タプルをn回、連結する	aTuple * n
折れ線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
オプションで、標準出力に出力する	file = sys.stdout
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
データ列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ファイルを開いて]、バイナリストリームを見る	open(filepath, mode='rb')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
現在の作業ディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
辞書に項目名が存在しているいるか調べる	key in aDict
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
原点から点までの距離を求める	math.hypot(x, y)
棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
カラムのpercent分位数	ds.quantile(percent/100)
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
y座標の目盛を対数に変更する	plt.yscale('log')
xが一桁の正の数	0 <= x <= 9
データフレームをCSVファイルとしてJSONLファイルに保存する	df.to_csv(filename)
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
n割るn2	n / n2
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
xが-9以上、9以下かどうか調べる	-9 <= x <= 9
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
リストの推移を赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
2つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
グラフの縦軸を対数に変更する	plt.yscale('log')
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
破壊的にデータフレームを'A'列でによって並べる	df.sort_values(by='A', inplace=True)
上三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ふたつのマップを合体する	aDict | aDict2
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
イテラブルからn要素サンプリングする	random.sample(iterable, k=n)
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
散布図の大バツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
青色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
部分文字列が文字列の開始位置以降に含まれるか調べる	s.find(sub, start) != -1
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
散布図に下三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
バツ印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
イテラブルを累加する	itertools.accumulate(iterable)
折れ線グラフのマーカーを菱形印にする	plt.plot(データ列x, データ列y, marker='D')
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
nからn2の範囲で	range(n, n2)
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
ファイルが存在しないか	not os.path.exists(filepath)
ファイル名がTSVファイル	filename.endswith('.tsv')
最大長nの両端キューを用意する	collections.deque(maxlen=n)
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒートマップでクラス分類の予測精度を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ダークカーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
option: バイナリ書き込みモードに設定する	mode = 'wb'
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームを各列毎にグループ化し、、列の個数を計算する	df.groupby(column)[column2].count()
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフの色をハニーデューにする	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
option: クリムゾンにグラフの色を設定する	color = 'crimson'
Pandasで、文字列をPandasの日付型に変換する	pd.to_datetime(s)
データ列の平均値を求める	ds.mean()
文字列の末尾	s[-1]
折れ線グラフの色をカーキにする	plt.plot(データ列x, データ列y, color='khaki')
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
データフレームでカラムの重複を見る	df.duplicated(subset=column)
ミッドナイトブルーにヒストグラムの色をセットする	plt.hist(データ列, color='midnightblue')
option: 茶色色を使う	color = 'brown'
シーケンスを無限に繰り返す	itertools.cycle(iterable)
データフレームのリストカラムの中にが存在するか調べる	df[aList].isin([value])
数式を積分する	sympy.integrate(e)
option: グラフの種類を実線に設定する	linestyle = 'solid'
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
線グラフの色をダークスレートブルーにする	plt.plot(データ列x, データ列y, color='darkslateblue')
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
両端キューのn番目に値を挿入する	deq.insert(n, element)
コーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
タプルを小さい順に並べ変える	sorted(aTuple, reverse=False)
リストとリストについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図のクロスマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
各列毎にデータフレームをグループ化して列の個数を算出する	df.groupby(column)[column2].count()
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
散布図を右三角印を用いる描画する	plt.scatter(データ列x, データ列y, marker='>')
小文字を全部求める	string.ascii_lowercase
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
日付データが月曜日かどうか調べる	aDate.weekday() == 0
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
オブジェクトが論理値か	isinstance(obj, bool)
タイムスタンプデータと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
option: ドジャーブルーにグラフの色をセットする	color = 'dodgerblue'
nまでの奇整数列	list(range(1, n, 2))
線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
option: グラフの色をミスティローズに変更する	color = 'mistyrose'
インデント幅nで、マッピングをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図の△印の色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームを２つの列によってグループ化し、基本統計量を求める	df.groupby(['A', 'B']).describe()
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
要素がマッピングの値に含まれていないか調べる	element not in aDict.values()
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
option: ペルー色を使う	color = 'peru'
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
データ列を使う	import pandas as pd
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
option: 左三角マーカーを使う	marker = '<'
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
xの小数点以下'2'桁まで表示する	print(':.2f'.format(x))
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データフレームのカラムを100の位で丸める	df[col].round(-2)
nにn2をかける	n * n2
ダークカーキにヒストグラムの色をセットする	plt.hist(データ列, color='darkkhaki')
実数の正弦の逆数	math.asin(x)
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
折れ線グラフをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
列の値でデータフレームをグループ化し、基本統計量を算出する	df.groupby(column).describe()
文字列の両端から余分な空白を取り除く	s.strip()
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
データフレームのリスト列の値が未入力値か調べる	df[aList].isna()
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
改行で区切って二つの値をプリントする	print(value, value2, sep='\n')
数列とリストについて散布図を描き、、四角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムを一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
新しいロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
本日が何年か知る	datetime.datetime.today().year
ヒストグラムの色をロージーブラウンにセットする	plt.hist(データ列, color='rosybrown')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
データ列の中の欠損値の数を求める	ds.isna().sum()
多次元データを主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
文字列を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
データ列の母標準偏差	ds.std(ddof=0)
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
列自身を2回あわせた直積を求める	itertools.product(iterable, repeat=2)
データフレームを二つの列によってで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
データフレームから数値データの列を選ぶ	df.select_dtypes('number')
プラットフォームのコードポイントの最大値	sys.maxunicode
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
ラインを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
論文用にプロットを設定する	sns.set(context='paper')
option: 大バツマーカーを使う	marker = 'X'
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
セットから要素を全て取り除く	aSet.clear()
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
option: フォントの色をライムに変更する	color = 'lime'
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
predicateFuncを適用したときTrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データフレームを列名リストで降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
実数の余弦	math.cos(x)
線グラフをコーラル色を使って描画する	plt.plot(データ列x, データ列y, color='coral')
リストとリストの散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
リストとデータ列についての散布図に黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームのヒストグラムを縦横に並べてグラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームのカラムを散布図で可視化して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームの指定された列を抽出する	df[column]
整数nの八進表現	oct(n)
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
リストとデータ列について散布図を描いて、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
リストを分割数nを用いて等量でビン分割する	pd.qcut(aList, n)
データフレームを列でグループ化して、標準偏差を求める	df.groupby(column).std()
データフレームを1000の位で丸めて整数型にする	df.round(-3).astype(int)
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
グラフのパレットを明るくする	sns.set(pallete='bright')
nがn2以下かどうか調べる	n <= n2
ゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
折れ線グラフに上三角印を使う	plt.plot(データ列x, データ列y, marker='^')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
表データの列が文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
xを文字列に変換する	str(x)
データフレームを各列と列の組み合わせ毎にグループ化し、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データフレームの列をインデックスに設定する	df.set_index(column)
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
実数を実数で割って、切り捨てる	x // y
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
文字列の最初から部分文字列を探す	s.find(sub)
算術計算ライブラリをインポートする	import math
option: パールゴールデンロッドにフォントの色を設定する	color = 'palegoldenrod'
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
折れ線グラフをブラック色を用いて描画する	plt.plot(データ列x, データ列y, color='black')
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
数列とリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
nがn2で割り切れない	n % n2 != 0
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
option: グラフの色を貝殻に設定する	color = 'seashell'
双方向キューの最初に要素をつけ加える	deq.appendleft(element)
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データを最大値として正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
集合の濃度を計算する	len(aSet)
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
折れ線グラフに四角印を使う	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
縦棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
aListn番目から要素をポップする	aList.pop(n)
データフレームを行によって降順でソートする	df.sort_index(ascending=False)
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
データ列とデータ列についての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
オブジェクトにプロパティがある	hasattr(obj, プロパティ名)
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
パウダーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
タブ区切りのファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
xを浮動小数点数型に変換する	float(x)
文字列を空白で区切り、整数のリストに変換する	map(int, s.split())
ヒストグラムをダークスレートブルー色として描画する	plt.hist(データ列, color='darkslateblue')
列をキーにして2つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
小数点数の双曲線正接を求める	math.tanh(x)
イテラブルとリストについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
option: スラグレー色を使う	color = 'slategrey'
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
グラフで使える色名の一覧	matplotlib.colors.cnames
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
2つのデータフレームを列をキーとして外部ジョインする	pd.merge(df, df2, on=column, how='outer')
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
配列をベースに全要素が1の配列	np.ones_like(aArray)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
をエクセルファイルファイルから読む	pd.read_excel(filename)
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
日付データが月曜日か調べる	aDate.weekday() == 0
オブジェクトがリストに含まれない	element not in aList
大きい順にデータフレームを'A'列でによってソートする	df.sort_values(by='A', ascending=False)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームを列によって並べて行を振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図の菱形マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
文字列をISO8601でタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
分類木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ファイルから複数のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
文字列が文字列リストのいづれか調べる	s in aStringList
option: 四角マーカーを使う	marker = 's'
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: グラフの色をイエローグリーンに変更する	color = 'yellowgreen'
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
２つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
文字列の示すエンコーディングを用いてファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
リストとリストについての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
オブジェクトは関数	callable(obj)
データフレームからカテゴリデータの列名一覧を求める	df.select_dtypes('object').columns
データ列のタイムゾーンを文字列に指定する	ds.tz_convert(s)
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
オブジェクトはタプルクラス	isinstance(obj, tuple)
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
浮動小数点数を小数点以下第一位で四捨五入する	round(x, 1)
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
データフレームの列のpercent分位数	df[col].quantile(percent/100)
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
option: ゴールド色を使う	color = 'gold'
現在の日付時刻	datetime.datetime.now()
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: グラフの色をダークマゼンタにする	color = 'darkmagenta'
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
折れ線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='turquoise')
要素はセットに含まれるかどうか確認する	element in aSet
ファイルを開いて]書き込みストリームを使う	open(filepath, mode='w')
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
三角印を使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
小数点数の正弦	math.sin(x)
文字列の末尾から改行を取り除く	s.rstrip('\n')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
2つのリストをスラッシュで区切ってプリントする	print(value, value2, sep='/')
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
綺麗なグラフを用いる	import seaborn as sns
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
リストの末尾にリストを加えて拡張する	aList.extend(aList2)
集合から全ての要素を取り除く	aSet.clear()
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
配列の行ごとの平均値を求める	np.mean(aArray, axis=1)
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列の末尾が部分文字列か調べる	s.endswith(sub)
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategray')
列をキーとして２つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
関数の値によってデータフレームをグループ分けして列挙する	[(name, group) for name, group in df.groupby(関数)]
option: 追加用に指定する	mode = 'a'
文字列の右端から空白を除く	s.rstrip(' ')
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
option: レベッカパープル色を使う	color = 'rebeccapurple'
タプルを引数として展開して表示する	print(*aTuple)
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
'A'列の値ごとにデータフレームをグループ分けして、列挙する	[(name, group) for name, group in df.groupby('A')]
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームを'A'列でソートする	df.sort_values(by='A')
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
折れ線グラフのクロスマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ダークサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
nがn2かどうか調べる	n == n2
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
グラフに水平方向の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームを複数の列で昇順に並べ直して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
連番の行列の自動作成する	np.arange(開始値, 終了値, 等差)
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ミディアムブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
パープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
印字できる文字を全部使う	string.printable
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
リストとリストについて散布図を描画し、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのリスト列のNaNを中央値で埋める	df[aList].fillna(df[aList].median())
今日の日	datetime.datetime.today().day
文字列が全て英数字かテストする	s.isalnum()
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgrey')
リストをnからナンバリングする	enumerate(aList, start=n)
グラフのタイトルを指定する	plt.title('グラフの名称')
option: ハニーデュー色を使用する	color = 'honeydew'
組を逆さにする	reversed(aTuple)
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
追加できるように既存のファイルをUTF8としてオープンする]	open(filepath, mode='a', encoding='utf-8')
option: シエナに色を設定する	color = 'sienna'
スカイブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
実数の二進対数	math.log2(x)
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
時間を使用する	import time
ヒストグラムの色をグリーンイエローにセットする	plt.hist(データ列, color='greenyellow')
データフレームの列を欠損値も加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフの色をミディアムアクアマリンにセットする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームからカテゴリデータだけ抽出する	df.select_dtypes('object')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付データが日付データより遅いか調べる	aDate > aDate2
実数を十六進表記の文字列に変換する	x.hex()
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
散布図の△印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
文字列の終了位置より前に部分文字列が含まれるかどうか調べる	s.find(sub, 0, end) != -1
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategrey')
勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
コーンフラワーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
実数の自然対数	math.log(x)
フローラルホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
明るくカラーパレットをグラフの描画で使用する	sns.set(pallete='bright')
列を丸める	ds.round()
option: ロイヤルブルー色を使う	color = 'royalblue'
option: 読み込みモードを使用する	mode = 'r'
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
2を底とする小数点数の対数を計算する	math.log2(x)
入力ストリームから1文字、読み込む	f.read(1)
オブジェクトがリストの要素	element in aList
データフレームからランダムに抽出する	df.sample()
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
配列としてデータフレームの指定された列を抽出する	df[column].values
横棒グラフを淡い茶色色として描画する	plt.barh(データ列x, データ列y, color='tan')
リストと配列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
辞書のキーとその値を列挙する	aDict.items()
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
線グラフを黄緑色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
クラス分類をヒストグラムと勾配ブースティングを用いて行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列をバイト列に変換する	bytes(s)
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: セパレータをスラッシュにする	sep = '/'
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
オブジェクトがバイト列クラスのインスタンス	isinstance(obj, bytes)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
散らばりを描画する	plt.scatter(データ列x, データ列y)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
空列	[]
データフレームのリストカラムの中央値を算出する	df[aList].median()
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
配列とリストについての散布図に黒い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
option: 濃いシアンを使う	color = 'darkcyan'
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
option: フォントの色をブラウンに指定する	color = 'brown'
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
円周率	math.pi
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
フローラルホワイト色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
option: カーキ色を使う	color = 'khaki'
データ列の日を使う	ds.dt.day
文字列を空白で区切って整数のリストにする	map(int, s.split())
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データ列はどの程度、分散しているか調べる	ds.var()
ファイルをオープンする]	open(filepath)
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
全要素を０で初期化した三2ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
組の文字列が最初に見つかるインデックス	aTuple.index(element)
option: フォレストグリーンにグラフの色を設定する	color = 'forestgreen'
リストと数列について散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
データフレームの列の値がxより小さいデータを抽出する	df[df[column] < x]
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
点線でヒストグラムを描く	plt.hist(データ列, linestyle='dotted')
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
データフレームの中に文字列と日付データがいくつあるか求める	df.isin([value, value2]).sum()
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのカラムをヒストグラムで描画する	plt.hist(df[column])
カテゴリ別で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
小数点数を切り上げる	math.ceil(x)
イテラブルから重複を取り除く	set(iterable)
単回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
新しいロバスト回帰モデルを準備する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
nが正の数か調べる	n > 0
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
実数に実数を掛ける	x * y
tanの逆数を求める	math.atan(x)
タプルを累加する	itertools.accumulate(iterable)
実数の常用対数	math.log10(x)
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームのカラムのNaNをxで埋める	df[col].fillna(x)
k進対数を求める	math.log(x, k)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
変数が無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, oo)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
タプル中の要素が少なくともひとつ真か調べる	any(aTuple)
全ての印字可能な文字	string.printable
辞書の項目名に対応した値を参照する	aDict.get(key)
イテラブルとシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
option: フォントの色をライトスカイブルーに変更する	color = 'lightskyblue'
option: ダイアモンドマーカーを描画する	marker = 'D'
キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
カラムを百の位で丸めて、整数にする	ds.round(-2).astype(int)
データ列が正規分布からどの程度尖っているか確認する	ds.skew()
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
データ列の値が欠損値か調べる	ds.isna()
双方向キューが空かどうか調べる	len(deq) == 0
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
回帰分析をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
x座標の目盛を対数に変更する	plt.xscale('log')
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
ヒストグラムをブルーバイオレット色を使って描画する	plt.hist(データ列, color='blueviolet')
コマンドライン引数	sys.argv
双方向キューから最初の文字列を取り出す	deq.remove(element)
データフレームのヒストグラム付き散布図を描く	sns.jointplot(x='列名', y='列名', data=df)
行列をフラットにする	aArray.flatten()
整数nがリストのどれかか調べる	n in aList
リネン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
xとyの商と余りを同時に算出する	divmod(x, y)
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
カテゴリ別で色付けして、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの列を削除して更新する	df.drop(column, axis=1, inplace=True)
二つの表データを縦に合体させる	pd.concat([df, df2], axis=0)
option: グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
前の行の値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(method='ffill')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
データフレームの末尾	df.tail()
option: シルバー色を使用する	color = 'silver'
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
option: グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
空の辞書	{}
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
データフレームを関数の値によってグループ化する	df.groupby(関数)
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
リストと配列についての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
スライド用にグラフを変更する	sns.set(context='talk')
option: アクアを使う	color = 'aqua'
文字列を部分文字列で区切る	s.split(sub)
リストを順番付けする	enumerate(aList)
赤い一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
option: ダークオーキッド色を使う	color = 'darkorchid'
組中のオブジェクトが最初に見つかるインデックスを使う	aTuple.index(element)
option: ライトグリーン色を使う	color = 'lightseagreen'
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
option: グラフの色をシルバーに設定する	color = 'silver'
文字列を左トリムする	s.lstrip()
リストの最後のn要素を捨てる	aList[:-n]
option: サンディーブラウンを使う	color = 'sandybrown'
多次元データを多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
マッピングの項目名を列挙する	list(aDict)
option: 菱形印を加える	marker = 'D'
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
行列の行列式を求める	np.linalg.det(aArray)
リストを配列に変換する	np.array(aList)
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
横棒グラフをピーチパフ色を用いて描画する	plt.barh(データ列x, データ列y, color='peachpuff')
テキストファイルファイル名がかテストする	filename.endswith('.txt')
散布図をrgbの▼マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
イテラブルを文字列リストに変換して'改行で連結する	'\n'.join(map(str, iterable))
二次元タプルをフラット化する	sum(aTuple)
Pandasで、データ列の数値時刻からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図をパールバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
nからn2までの一つ置きの整数リスト	list(range(n, n2+1, 2))
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
TSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
変数をスワップする	x, y = y, x
正規表現を事前に大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
横棒グラフの幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
横棒グラフをライトグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgrey')
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームをTSV形式のファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
小麦色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
PandasでUNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームを関数によってまとめた表	df.groupby(関数)
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームのカラムの欠損値を最小値にセットする	df[col].fillna(df[col].min())
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
散布図に黒い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームのカラムの中に存在する日付データの合計を数える	df[col].isin([value]).sum()
データ列の記述統計量を求める	ds.describe()
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: ライトグレーにフォントの色を指定する	color = 'lightgray'
大きさnでリストと配列の散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
改行なしに二つの文字列をプリントする	print(value, value2, end='')
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
イテラブルと配列の散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
モデルを訓練する	model.fit(説明変数, 目的変数)
option: 菱形印を描画する	marker = 'D'
データフレームを'A'列によってグループ化し、基本統計量を計算する	df.groupby('A').describe()
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
変数を白色で出力する	print(f'\033[37m{value}\033[0m')
ピアソン相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
データフレームの最頻値を算出する	df.mode()
option: ナバホホワイトにグラフの色を変更する	color = 'navajowhite'
文字列の中でASCII限定としてパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
タプルとタプルを連結する	aTuple + aTuple2
２つの数値をタブで区切ってプリントする	print(value, value2, sep='\t')
文字列からformatのパターンでタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
グラフの見栄えを綺麗にする	import seaborn as sns
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
辞書のキーを列挙する	aDict.keys()
データフレームを丸める	df.round()
データフレームを2つの列によってソートし、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
文字列を部分文字列で二分し先頭の文字列を使う	s.partition(sub)[0]
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
空のロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
実数の逆双曲線正弦を計算する	math.asinh(x)
option: グラフの色をダークマゼンタに変更する	color = 'darkmagenta'
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
カテゴリ別で色分けして、に箱ひげ図でデータフレームをプロット化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを列によって昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
文字列がリストに含まれるか判定する	element in aList
配列を平坦にする	aArray.flatten()
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
横棒グラフをゴーストホワイト色を使って描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
nが組のどれかかどうか調べる	n in aTuple
折れ線グラフをライトグレー色を使って描画する	plt.plot(データ列x, データ列y, color='lightgrey')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
箱髭図を横方向にする	plt.boxplot(データ列, vert=False)
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
ファイルを文字列の示すエンコーディングで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
折れ線グラフの左三角印を赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
パールバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
文字列を走査しパターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
部分文字列が文字列の開始位置からと終了位置までの間に含まれないか調べる	s.find(sub, start, end) == -1
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
タイムスタンプデータにn日を足す	aDatetime + datetime.timedelta(days=n)
カウンタから最頻出な文字列の件数	aCounter.most_common()[1]
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: ライトスレイグレーにフォントの色を設定する	color = 'lightslategray'
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームのリスト列を丸めて、整数型にする	df[aList].round().astype(int)
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
文字列を置き換える	s.replace(sub, newsub)
データフレームを列によってグループ化して、各グループごとの個数を求める	df.groupby(column).count()
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
一方に含まれ他方に含まれない集合を算出する	aSet.difference(aSet2)
option: レベッカパープルにフォントの色を設定する	color = 'rebeccapurple'
カーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
青い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ポイントマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
option: サーモン色を用いる	color = 'salmon'
文字列を最後の部分文字列で分けたときの残りの文字列	s.rpartition(sub)[-1]
実数を整数で割って、切り捨てる	x // y
データフレームのカラムのNaNを前の行の値に設定する	df[col].fillna(method='ffill')
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームを10の位で四捨五入して、整数型にする	df.round(-1).astype(int)
nの無限数列	itertools.repeat(n)
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフを色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームを列で昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
列をカテゴリデータに変換する	ds.astype(object)
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
文字列の先頭から空白を消す	s.lstrip(' ')
シーケンスの長さnの順列を求める	itertools.permutations(iterable, n)
最後の部分文字列で文字列を分けたときの前半の文字列	s.rpartition(sub)[0]
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
データフレームから指定された列だけ取り出す	df[[column]]
最大長nの両端キューを列から新規生成する	collections.deque(iterable, maxlen=n)
最適な位置に凡例を表示する	plt.legend(loc='best')
散布図に赤い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームを列の値でグループ化し基本統計量を求める	df.groupby(column).describe()
実数の正接	math.tan(x)
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
折れ線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
散布図のバツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 右三角マーカーを描画する	marker = '>'
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
イテラブルの各要素を関数でフィルタする	map(func, iterable)
option: namesをカラムの名前に設定する	names = names
折れ線グラフのダイアモンドマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
option: グラフの色を黄色にする	color = 'yellow'
分子n、分母mの分数を用意する	fractions.Fraction(numerator=n, denominator=m)
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
キュー中の数値の数をカウントする	deq.count(element)
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
データ列の変遷を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
レベッカパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
ファイルを書き込みモードで開く]	open(filepath, mode='w')
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
箱髭図を描画し、平均線を追加する	plt.boxplot(データ列, meanline=True)
2つの値を改行で区切って出力する	print(value, value2, sep='\n')
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
nの二乗を求める	n ** 2
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
イテラブルのコンビネーション	itertools.combinations(iterable, n)
印字可能な文字を全て見る	string.printable
option: グラフの色をグレーに指定する	color = 'gray'
散布図にrgbの三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
本日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
option: スラグレーを使う	color = 'slategray'
散布図の三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
リストとリストについての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
表示可能な列数を変更する	pd.set_option('display.max_columns', n)
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
データフレームのリストカラムの中に文字列と日付データがいくつ含まれるかカウントする	df[aList].isin([value, value2]).sum()
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
n個の数値イテラブル	range(n)
ファイルから1文字、読み込む	f.read(1)
option: ミントクリーム色を用いる	color = 'mintcream'
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: ダークスラテグレーにフォントの色を設定する	color = 'darkslategray'
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
縦方向に２つのデータフレームを連結する	pd.concat([df, df2])
数式のインテグラルを行う	sympy.integrate(e)
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
辞書の項目数	len(aDict)
グラフの背景色を暗くする	sns.set(style='darkgrid')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
表データを列の値でグループ化して、合計を求める	df.groupby(column).sum()
折れ線グラフをネイビー色を使って描画する	plt.plot(データ列x, データ列y, color='navy')
リストとリストについて散布図を描き、、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
暗い赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
正規分布に基づくパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: マゼンタ色を用いる	color = 'magenta'
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
0からN未満までの配列	np.arange(N)
横棒グラフをやわらかい青色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
多次元尺度構成法で多次元データを濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ピーチパフ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
折れ線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームをインデックスによって並べる	df.sort_index()
後の値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(method='bfill')
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
グラフの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
整数nがタプルのどれかか調べる	n in aTuple
SJISでTSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
回帰分析を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingRegressor()
option: 文字列をセパレータで用いる	sep = s
黄色にヒストグラムの色を指定する	plt.hist(データ列, color='yellow')
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
表の列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームのリストカラムの相関行列をヒートマップを使って描画する	sns.heatmap(df[aList].corr())
option: 行を連番に設定する	index_col = None
タイムスタンプデータが何月か知る	aDatetime.month
散布図に▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
散布図の三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
文字列の終了位置より前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフの菱形マーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: ミディアムブルー色を用いる	color = 'mediumblue'
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
ペールグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
点線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの列と列の相関行列をヒートマップとして描画する	sns.heatmap(df[[column, column2]].corr())
データフレームの最頻値を求める	df.mode()
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
カウンタ同士で積集合演算する	aCounter & aCounter2
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
浮動小数点数で実数を割って切り捨てる	x // y
日付時刻データは日付時刻データより先か調べる	aDatetime < aDatetime2
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=区関数)
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
折れ線グラフのマーカーを上三角にする	plt.plot(データ列x, データ列y, marker='^')
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
ケンドールの相関係数を算出する	scipy.stats.kendalltau(データ列, データ列2)
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
論文にグラフの用途を設定する	sns.set(context='paper')
散布図を左三角マーカーを使い、描画する	plt.scatter(データ列x, データ列y, marker='<')
イテラブルからカウンタを作る	collections.Counter(iterable)
プロットの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
データフレームの欠損値をxに設定する	df.fillna(x)
リストを青色で表示する	print(f'\033[34m{value}\033[0m')
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
文字列の右側からタブを取り除く	s.rstrip('\t')
タプルの浅いコピーを準備する	aDict.copy()
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
折れ線グラフをオリベドラブ色を使って描画する	plt.plot(データ列x, データ列y, color='olivedrab')
配列をリストを境界値として分割する	pd.cut(aArray, aList)
グラフのパレットを濃くする	sns.set(pallete='deep')
データフレームの中の欠損値がある行を削除する	df.dropna()
線形回帰モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
コーパスのバージョン	version = 'wcce2022-0.1'
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
テンプレートを辞書で文字列整形する	formatText.format_map(aDict)
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
横棒グラフをダークマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
小数点以下の表示精度を設定する	pd.set_option('precision', n)
整数nの16進表現	hex(n)
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
行列のユニークな値を要素とするベクトル	np.unique(aArray)
データ列の移り変わりを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
nにn2を足して代入する	n += n2
配列の行ごとの合計値	np.sum(aArray, axis=1)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームの中の列と列に重複があれば、落とす	df.drop_duplicates(subset=[column, column2])
リストをプリントする	print(value)
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
カラーコードで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
ファイルパスから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
折れ線グラフを用いてデータ列の推移を可視化する	plt.plot(range(len(データ列)), データ列)
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
オブジェクトがリストクラスか調べる	isinstance(obj, list)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
データフレームの欠損値を第二四分位数に設定する	df.fillna(df.median())
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
実数とyのノルムを求める	math.hypot(x, y)
紺色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
文字列をゼロ埋めする	s.zfill(文字列幅)
線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: マーカーを丸に設定する	marker = 'o'
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: ライトスカイブルーを使う	color = 'lightskyblue'
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
数列の推移を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
オブジェクトは浮動小数点数型	isinstance(obj, float)
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
日付時刻データからn日分、減らす	aDatetime - datetime.timedelta(days=n)
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
横棒グラフをカーキ色を使って描画する	plt.barh(データ列x, データ列y, color='khaki')
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図をブランチドアーモンド色として描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
回帰モデルの精度を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
データフレームを列でソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
部分文字列を文字列の末尾から除く	s.removesuffix(sub)
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
タイムスタンプデータの月数	aDatetime.month
実数の複素数を算出する	complex(x)
バイナリ書き込みモードでファイルを開いて]fとする	f = open(filepath, mode='wb')
両端キューを空にする	deq.clear()
横棒グラフを青紫色を用いて描画する	plt.barh(データ列x, データ列y, color='violet')
nとn2の差	n - n2
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
行列を元に全要素が0の配列を作る	np.zeros_like(aArray)
option: フォントの色をダークグレーに指定する	color = 'darkgray'
日付時刻データが日曜日か確認する	aDatetime.weekday() == 6
データフレームとしてカンマ区切りのファイルを読み込む	pd.read_csv(filename, sep=',')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
データフレームのリストカラムの最頻値	df[aList].mode()
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ダークシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
50パーセンタイルでデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].median())
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームを'A'列の値でグループ化する	df.groupby('A')
辞書の値の一覧を得る	aDict.values()
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='gray')
列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
option: 青緑を使う	color = 'teal'
双方向キューの先頭に要素を追加する	deq.appendleft(element)
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
カラーバーを付ける	plt.colorbar()
option: 線の種類を破線にセットする	linestyle = 'dashed'
縦に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
整数nを二進文字列に変換する	bin(n)[2:]
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
スラグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
option: サドルブラウンにグラフの色を指定する	color = 'saddlebrown'
データフレームのカラムを十の位で四捨五入して、整数型にする	df[col].round(-1).astype(int)
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
データフレームのカラムのタイムゾーンを日本にセットする	df[col].tz_convert('Asia/Tokyo')
イテラブルから配列を作る	np.array(iterable)
折れ線グラフの▲マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
文字列を隔離する	sys.intern(s)
紺色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
折れ線グラフのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
option: ダークマゼンタ色を使う	color = 'darkmagenta'
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
データ列のどの値が頻出か見る	ds.mode()
イテラブルを箱ひげ図にする	plt.boxplot(データ列)
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, markersize=2.0)
縦棒グラフをプロットして、左寄せする	plt.bar(ラベル列, データ列, align='edge')
値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
y軸だけ目盛線	plt.grid(axis='y')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
列から1個ランダムに選ぶ	random.choice(iterable)
データ列を10の位で丸めて、整数にする	ds.round(-1).astype(int)
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
ターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategray')
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
リストの末尾を取り除く	aList[:-1]
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
ファイル全体を行単位で分割して読み込む	f.readlines()
文字列の開始位置から終了位置の範囲で部分文字列の出現	s.count(sub, start, end)
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
nが無限に続くイテラブル	itertools.repeat(n)
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
日付時刻データの日数を求める	aDatetime.day
何回まで再帰ができるか、調べる	sys.getrecursionlimit()
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
左三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
マッピングの浅いコピーを作る	aDict.copy()
黒い▽印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
option: マーカーを星に設定する	marker = '*'
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
スピアマン順位相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
オブジェクトは整数クラス	isinstance(obj, int)
辞書にキーワード引数として更新する	aDict.update(**kwargs)
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
三自然数のLCM	math.lcm(n, n2, n3)
バリーウッド色としてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
option: データ型として複素数型を使う	dtype = bool
カウンタをイテラブルとして更新する	aCounter.update(iterable)
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
実数を実数に加算する	x + y
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームの未入力値を平均値に設定する	df.fillna(df.mean())
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
多次元データをt-SNEとしてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
散布図に丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
Pandasで、数値時刻のデータフレームのcollからdatetime64型にする	pd.to_datetime(df[col], unit='s', utc=True)
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
最大長nの双方向キューを生成する	collections.deque(maxlen=n)
データフレームのカラムの欠損値を後の行の値に指定する	df[col].fillna(method='bfill')
option: ライトコーラル色を使う	color = 'lightcoral'
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
option: ダークレッド色を用いる	color = 'darkred'
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
小数点数のsinの逆数	math.asin(x)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
ゴールデンロッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
標準出力のバッファを強制表示する	sys.stdout.flush()
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
部分文字列を文字列の先頭から探す	s.find(sub)
Pandasで文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
円グラフの特定の要素を目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
カテゴリに並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
nがn2の倍数でないか	n % n2 != 0
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
実数が無限大か調べる	math.isinf(x)
データ列の出現頻度を作図する	plt.hist(データ列)
イテラブルから双方向キューを用意する	collections.deque(iterable)
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
文字列の開始位置以降に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
文字列が全て英数字	s.isalnum()
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
option: グラフの色をディムグレーに指定する	color = 'dimgray'
降順でデータフレーム全体をインデックスによってソートする	df.sort_index(ascending=False)
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
数値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データフレームを列の値で集約し、、最大値を求める	df.groupby(column).max()
平均で列の欠損値を埋める	ds.fillna(ds.mean())
散布図のクロスマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
option: グラフの色をパールバイオレットレッドに指定する	color = 'palevioletred'
データ列の分	ds.dt.minute
option: 色を紺に設定する	color = 'darkblue'
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
nが負の数かどうか調べる	n < 0
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
データフレームのリストカラムが正規分布からどの程度尖っているか確認する	df[aList].skew()
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
ヒストグラムの色をパープルに変更する	plt.hist(データ列, color='purple')
データフレームの行を抽出する	df[start:end]
TSVを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
折れ線グラフの三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
組の文字列が最初に見つかるインデックスを使う	aTuple.index(element)
昇順に列によってデータフレームをソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
真部分集合か調べる	aSet < aSet2
リストとイテラブルについて散布図を描画して、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
nとn2の値を足してnとする	n += n2
ふたつの集合が共通の要素を持たないか	aSet.isdisjoint(aSet2)
双方向キューの先頭に列の各要素を入れる	deq.extendleft(iterable)
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
データフレームのカラムを散布図でプロット化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ミディアムオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumorchid')
データフレームの中に文字列と日付データがある	df.isin([value, value2])
折れ線グラフをマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='magenta')
棒グラフを耐火レンガ色を使って描画する	plt.bar(データ列x, データ列y, color='firebrick')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
キーで指定された項目を辞書から取り出す	aDict.pop(key)
文字列を最初の部分文字列で分けた時の前半の文字列を求める	s.partition(sub)[0]
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
線グラフをロージーブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='rosybrown')
実数を数に掛ける	x * y
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
データフレームのNaNを平均に設定する	df.fillna(df.mean())
option: ホットピンクにグラフの色をセットする	color = 'hotpink'
データフレームを列の値でグループ化して、それぞれのグループ毎の件数を知る	df.groupby(column).size()
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
文字列を部分文字列で分割したときの最初の文字列	s.partition(sub)[0]
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
ヒストグラムの色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
縦棒グラフをダークグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgreen')
option: グラフの色をダークターコイズに指定する	color = 'darkturquoise'
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
ロバストな線形回帰モデルを作成する	model = sklearn.linear_model.HuberRegressor()
option: ロージーブラウン色を使う	color = 'rosybrown'
エクセルファイルファイルからnというシートを読み込む	pd.read_excel(filename, sheet_name=n)
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
赤い一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
マッピングからキーの値か、もしくは要素を得る	aDict.get(key, element)
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
小数点数の二進対数を求める	math.log2(x)
組を昇順にソートする	sorted(aTuple, reverse=True)
プラットホームがLinuxかテストする	sys.platform.startswith('linux')
option: グレーにグラフの色をする	color = 'grey'
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
Pandasで、Pandasの日付型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
プレゼンにグラフを設定する	sns.set(context='talk')
データフレームのカラムの欠損値をメディアンで埋める	df[col].fillna(df[col].median())
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
真	True
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
rgbのポイントマーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ローングリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
ASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームを'A'列によってグループ化し要約統計量を求める	df.groupby('A').describe()
データフレームのリストカラムの欠損値を後の値に設定する	df[aList].fillna(method='bfill')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
option: タブをセパレータで使う	sep = '\t'
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
データフレームの列の中にいくつ欠損値が存在するか数える	df[col].isna().sum()
ボックスチャートでデータ列を描画する	plt.boxplot(データ列)
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategray')
各列毎にデータフレームをグループ化し、、列の最大値を算出する	df.groupby(column)[column2].max()
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームを散布図で図示し、、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
コーンフラワーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データフレームのカラムが正規分布からどの程度尖っているか調べる	df[col].skew()
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームのリストカラムの中に文字列と文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
ダークゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
日付データが金曜日か調べる	aDate.weekday() == 4
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
タプルのキーとその値を列挙する	aDict.items()
Pandasで、データ列のUNIX時間から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
散布図に黒い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
option: 複素数型を使う	dtype = bool
nとn2が同じ値か調べる	n == n2
グラフの用途をスライドに設定する	sns.set(context='talk')
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
JSONLファイルにデータフレームをSJISで保存する	df.to_csv(filename, encoding='shift_jis')
新しい線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
データフレームのカラムの未入力値を平均値で埋める	df[col].fillna(df[col].mean())
破壊的に列を用いてによってデータフレームをソートする	df.sort_values(by=column, inplace=True)
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
パーセプトロンを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
配列と同じ大きさの空の行列を初期化する	np.empty_like(aArray)
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
標準入力	sys.stdin
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: ラベンダー色を使う	color = 'lavender'
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
ふたつの集合の共通要素だけにする	aSet.intersection_update(aSet2)
option: ダイアモンド印を使用する	marker = 'D'
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
行列の最大値を求める	np.max(aArray)
集合をタプルに変換する	tuple(aSet)
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
Pandasで、エポック秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームをタブ区切りのファイルから読み込む	pd.read_csv(filename, sep='\t')
マッピングにキーがないとき、要素を追加する	aDict.setdefault(key, element)
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
option: 色をペールグリーンに設定する	color = 'palegreen'
文字列の左側からタブを取り除く	s.lstrip('\t')
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
変数が無限大に近づく際、数値の極限値を求める	sympy.limit(e, z, oo)
データフレームのカラムは何分か確認する	df[col].dt.minute
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
実数から実数を引く	x - y
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
２つのデータフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
option: フォントの色をフクシアに指定する	color = 'fuchsia'
列から重複なく、n個選ぶ	random.sample(iterable, k=n)
赤い▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
リストを両端キューに変換する	collections.deque(iterable)
リストとリストについて散布図を描画して、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
破壊的にデータフレームから重複を削除する	df.drop_duplicates(inplace=True)
横棒グラフをフローラルホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='floralwhite')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
データフレームの中にいくつ文字列が含まれるか数える	df.isin([value]).sum()
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
紺にヒストグラムの色を変更する	plt.hist(データ列, color='darkblue')
option: ミディアムオーキッドに色を設定する	color = 'mediumorchid'
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
option: シエナにグラフの色をセットする	color = 'sienna'
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
option: ダークサーモン色を用いる	color = 'darksalmon'
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データ列の中に文字列が存在するか調べる	ds.isin([value])
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
グリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
パーセント付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: インディゴ色を使用する	color = 'indigo'
折れ線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
実数の指数	math.frexp(x)[1]
配列をn個にビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームを列によってグループ化し、それぞれのグループ毎の最小値を算出する	df.groupby(column).min()
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
折れ線グラフのマーカーを四角印にする	plt.plot(データ列x, データ列y, marker='s')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームを各列毎にグループ化して、文字列というグループを見る	df.groupby(column).get_group(s)
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
文字列の中のASCII限定としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
小さい方から組の要素を並べる	sorted(aTuple, reverse=True)
散布図の左三角印の色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
ファイルからストリームをオープンして]fileとする	file = open(filepath)
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
グラフの縦横比を等しくする	plt.axis('equals')
散布図を黒い星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームのカラムは正規分布からどの程度、歪んでいるか見る	df[col].kurt()
プロットのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: レモンシフォンを使う	color = 'lemonchiffon'
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
データフレームの列をNaNも加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
リストとイテラブルの散布図をプロットして、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
数式を因数分解する	sympy.factor(e)
データをL1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームの欠損値をメディアンで補う	df.fillna(df.median())
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: n番目のカラムを行に変更する	index_col = n
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
Pandasで、datetime64型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
ふたつの関係が上位集合	aSet.issuperset(aSet2)
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
option: シスル色を使う	color = 'thistle'
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
折れ線グラフの三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
配列が何のデータ型か調べる	aArray.dtype()
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムの中に文字列と日付データがいくつあるか数える	df[col].isin([value, value2]).sum()
赤いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ファイルパスの絶対ファイルパス	os.path.abspath(filepath)
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームを列によってソートする	df.sort_values(by=column)
数式を簡略にする	sympy.sympify(e)
辞書からカウンタを作る	collections.Counter(aDict)
データフレームの２つのカラムを並べて箱ひげ図で描画する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
配列の列ごとの最大を調べる	np.max(aArray, axis=0)
配列は何次元か調べる	aArray.ndim
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
浮動小数点数の複素数	complex(x)
option: スノーを使う	color = 'snow'
最大値・最小値の範囲で一様な乱数を生成する	random.uniform(最小値, 最大値)
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
データ列のヒストグラムを描画する	plt.hist(データ列)
イテラブルの各要素を両端キューの先頭に追加する	deq.extendleft(iterable)
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: 複数行に対応する	flag = re.MULTILINE
日付時刻データを数値に変換する	aDatetime.timestamp()
option: ダイアモンドマーカーを加える	marker = 'D'
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
赤色としてヒストグラムを描画する	plt.hist(データ列, color='red')
option: カーキを用いる	color = 'khaki'
部分文字列を安全に文字列の接頭辞から取り除く	s.removeprefix(sub)
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
カラーコードとして折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
データフレームのカラムを100の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
option: 青緑色を使う	color = 'teal'
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
データフレームから指定した三列を取り出す	df[[column, column2, column3]]
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
縦棒グラフを描画し、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフをスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='slateblue')
イテラブルと配列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
青い一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームのNaNを最頻値で埋める	df.fillna(df.mode().iloc[0])
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
棒グラフをダークシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
双方向キューに数値をエンキューする	deq.appendleft(element)
option: ホワイトスモークにグラフの色をする	color = 'whitesmoke'
ケンドール相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
文字列はタイトルケースか調べる	s.istitle()
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
日付時刻データからn週間分減らす	aDatetime - datetime.timedelta(weeks=n)
データフレームの列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
配列とリストについて散布図を描画してマーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
option: ダークグレーにフォントの色を設定する	color = 'darkgrey'
実数の逆双曲線正接	math.atanh(x)
option: 印を大バツに設定する	marker = 'X'
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
タプルの値を並べる	sorted(aTuple)
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
リストを等間隔でn個に分割する	pd.cut(aList, n)
option: ターコイズを使う	color = 'turquoise'
印字可能な文字を全部使う	string.printable
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
リストとリストについて散布図を描いて、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
マッピングから最後の値をポップする	aDict.popitem()
イテラブルを文字列リストに変換して、タブで結合する	'\t'.join(map(str, iterable))
データフレームのn行目を抽出する	df.loc[n]
option: グラフの色をミントクリームに設定する	color = 'mintcream'
文字列は全て印字できる	s.isprintable()
散布図の三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列をバイト配列に変換する	bytearray(s)
nをn2だけ左シフトする	n << n2
セットのすべての要素が別の集合に含まれるかどうか	aSet.issubset(aSet2)
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
散布図を星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*')
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: オリーブにグラフの色を変更する	color = 'olive'
データフレームの平均と信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
ヒストグラムを点線に指定する	plt.hist(データ列, linestyle='dotted')
データフレームの内で、カラムに重複があるか調べる	df.duplicated(subset=column)
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
カウンタ間でユニオンを求める	aCounter | aCounter2
部分文字列が文字列中に含まれない	sub not in s
折れ線グラフをシャルトリューズ色を用いて描画する	plt.plot(データ列x, データ列y, color='chartreuse')
リスト内の要素が全て真か調べる	all(aList)
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
データフレームのリストカラムの中に文字列と日付データが存在するか調べる	df[aList].isin([value, value2])
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフを白色として描画する	plt.plot(データ列x, データ列y, color='white')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
行列の各要素に加算する	aArray + aArray2
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
カラムの中に存在する文字列の合計を数える	ds.isin([value]).sum()
option: 青紫色を使用する	color = 'violet'
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
横棒グラフをレモンシフォン色を用いて描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: アリスブルーにグラフの色を変更する	color = 'aliceblue'
要素∈集合	element in aSet
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列内に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
データフレームのリストカラムの中に存在する文字列の合計をカウントする	df[aList].isin([value]).sum()
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
データ列は何月か調べる	ds.dt.month
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
x軸とy軸の比率を等しくする	plt.axis('equals')
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列に変換してリストを連結する	''.join(map(str, iterable))
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
nが2で割り切れるか調べる	n % 2 == 0
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データ列を指定した値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
実数を複素数にする	complex(x)
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
ラインの線の種類を点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
データフレームのn行目をインプレイスで削除する	df.drop(n, axis=0, inplace=True)
nが1、もしくは2か判定する	n == 1 or n == 2
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
データフレームのカラムの中にと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
今日が土曜日	datetime.datetime.today().weekday() == 5
縦棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
青いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの線の種類を破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
棒グラフをターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='turquoise')
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
折れ線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
行列にはいくつ要素があるか調べる	aArray.size
option: フォレストグリーンに色を設定する	color = 'forestgreen'
option: 青を使用する	color = 'blue'
データフレームを列によってグループ化し、各グループの最大値を求める	df.groupby(column).max()
ふたつの関係が真部分集合	aSet < aSet2
データ列の曜日数	ds.dt.dayofweek
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
文字列を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
option: 箱ひげ図を水平方向にする	vert = False
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
実線で配列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
データフレームの列の各データ値の出現数	df[col].value_counts()
組の長さを見る	len(aTuple)
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
グラフで使う横軸にラベルを付ける	plt.xlabel('x軸ラベル')
散布図を星マーカーで描く	plt.plot(データ列x, データ列y, marker='*')
文字列を空白で区切って、文字列リストに変換する	s.split()
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
タプルの最初の文字列を探す	aTuple.index(element)
option: ▲マーカーを使う	marker = '^'
文字列は全て識別子名か調べる	s.isidentifier()
ひとつでも非アルファベットが文字列中に含まれる	any(not c.isalpha() for c in s)
折れ線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
半透明の実線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
横棒グラフを紺碧色を用いて描画する	plt.barh(データ列x, データ列y, color='azure')
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
データ列が何分か見る	ds.dt.minute
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: フォントの色を紺に設定する	color = 'darkblue'
option: 珊瑚を使う	color = 'coral'
eの実数乗を計算する	math.exp(x)
データフレームの列をドロップしてインプレイスする	df.drop(column, axis=1, inplace=True)
データフレームからカテゴリデータのみ取り出す	df.select_dtypes('object')
配列と数列の散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
データフレームの第三四分位数	df.quantile(0.75)
クラスが名前付きタプルかどうか調べる	issubclass(C, tuple)
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: 配列のデータ型を指定する	dtype = np.uint8
折れ線グラフの色をターコイズに指定する	plt.plot(データ列x, データ列y, color='turquoise')
整数nがタプルのどれかかどうか調べる	n in aTuple
オレンジレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
option: フォントの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データフレームを'A'列によって並べて更新する	df.sort_values(by='A', inplace=True)
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
ヒストグラムをダークゴールデンロッド色として描画する	plt.hist(データ列, color='darkgoldenrod')
行列の次元を変形する	aArray.reshape(行数, 列数)
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
option: ナバホホワイト色を用いる	color = 'navajowhite'
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
ゼロ埋めした行列	np.zeros(行数, 列数)
option: 色をゴールドに設定する	color = 'gold'
カウンタをリストに変換する	list(aCounter)
データフレームを列の値によってグループ化し、記述統計量を求める	df.groupby(column).describe()
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
option: ダークマゼンタ色を使用する	color = 'darkmagenta'
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データ列の出現頻度を可視化する	plt.hist(データ列)
双方向キューをタプルに変換する	tuple(deq)
数値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
昇順にリストの要素をソートする	sorted(aList, reverse=False)
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
リストをタプルに変換する	tuple(aList)
option: ライトシアン色を用いる	color = 'lightcyan'
option: サーモンにグラフの色を指定する	color = 'salmon'
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
配列とリストの散布図にrgbの三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームをJSONLファイルに保存する	df.to_csv(filename)
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
タプルのn番目以降の要素を得る	aTuple[n:]
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
文字列からISO8601として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
option: 耐火レンガ色を使用する	color = 'firebrick'
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データフレームの列一覧	df.info()
Pandasでフォーマットfmtでデータフレームのcollをタイムスタンプに変換する	pd.to_datetime(df[col], format=fmt)
文字コードを文字に変換する	chr(unicode)
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
データフレームから列名を複数指定して選択する	df[columns]
リストとデータ列についての散布図に文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
データフレームを表示するとき、小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
データ列を使う	import pandas as pd
二つの関係が部分集合か調べる	aSet.issubset(aSet2)
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
option: ネイビー色を使う	color = 'navy'
option: バイナリ書き込み用に設定する	mode = 'wb'
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
二進数文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
カテゴリでグループ化してデータフレームの全列の相関を見る	sns.pairplot(df, hue='カテゴリ列')
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
'A'列によって昇順にデータフレームをソートし、更新する	df.sort_values(by='A', ascending=True, inplace=True)
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
小さい順にインデックスを用いてデータフレームをソートする	df.sort_index(ascending=True)
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
上位集合かどうか調べる	aSet.issuperset(aSet2)
タプルと列をペア化する	itertools.zip_longest(iterable, iterable2)
セットから別の集合の要素を除く	aSet.difference_update(aSet2)
グラフの縦軸のラベルをuntitledにセットする	plt.ylabel('y軸ラベル')
折れ線グラフをスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='springgreen')
円グラフでデータ列のパーセントを可視化する	plt.pie(データ列, startangle=90)
辞書のキーに対応した値	aDict.get(key)
option: オリーブにグラフの色を設定する	color = 'olive'
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
要素が集合に含まれないか	element not in aSet
option: 淡い茶色色を使う	color = 'tan'
文字列中の部分文字列を文字列に置換する	s.replace(sub, newsub)
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
配列の和	aArray + aArray2
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
こんにちは世界をプリントする	print('Hello World')
折れ線グラフを赤い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: EUCを使う	encoding = 'euc_jp'
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
赤いクロス印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
配列を等量でビン数nとしてビンニングする	pd.qcut(aArray, n)
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
クラス分類の適合率と再現率の調和平均を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
折れ線グラフの菱形印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
データフレームをグループ化し、列に対し最小値を求める	df.groupby(column)[column2].min()
option: フローラルホワイト色を使う	color = 'floralwhite'
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
数が負の数か調べる	x < 0
ヒストグラムを真紅色で描画する	plt.hist(データ列, color='crimson')
チョコレート色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
文字列をセンタリングにする	s.center(文字列幅)
等差数列から乱数を算出する	random.randrange(start, end, step)
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
整数型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int)
データフレームのカラムの欠損値をメディアンに増やす	df[col].fillna(df[col].median())
小数点数の二進対数	math.log2(x)
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
最大長nの両端キューを生成する	collections.deque(maxlen=n)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
配列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
日付データの月数	aDate.month
サイコロと同じ乱数	random.randint(1, 6)
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ミディアムパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
四角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
JSONファイルファイル名がか調べる	filename.endswith('.json')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームの中に文字列があるか確認する	df.isin([value])
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
線グラフをアリスブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
日付時刻データの秒数を求める	aDatetime.second
浮動小数点数を十六進文字列にする	x.hex()
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
オブジェクトのイテレータ	iter(obj)
option: オレンジ色を使用する	color = 'orange'
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
配列間の各要素の最大公約数	np.gcd(aArray, aArray2)
option: ローングリーン色を使う	color = 'lawngreen'
列の値によってデータフレームをグループ分けしてグループごとの合計を求める	df.groupby(column).sum()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
option: ダークグリーン色を用いる	color = 'darkgreen'
双方向キューのn番目	deq[n]
文字列の中の正規表現によるすべてのマッチを求める	re.findall(pattern, s)
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
紺色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: グラフの色をスカイブルーに指定する	color = 'skyblue'
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をシャルトリューズに変更する	plt.plot(データ列x, データ列y, color='chartreuse')
option: グリーンイエロー色を使う	color = 'greenyellow'
小数点数の逆双曲線正接	math.atanh(x)
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
シャルトリューズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
文字列を改行で分割する	s.splitlines()
ヒストグラムの色をピンクにセットする	plt.hist(データ列, color='pink')
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
オプションで、出力先をファイルに変更する	file = sys.open(filename, 'w')
データフレームのカラムの中にとが存在するか調べる	df[col].isin([value, value2])
三自然数の最小公倍数	math.lcm(n, n2, n3)
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
シアンでリストをプリントする	print(f'\033[36m{value}\033[0m')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
点線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列ひとつのりストを作る	[element]
両端キュー中の要素の数を数える	deq.count(element)
表データを使用する	import pandas as pd
実数はNaNか調べる	math.isnan(x)
集合の補集合	aSet.difference(aSet2)
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
イテラブル自身の長さnの順列	itertools.permutations(iterable, n)
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
組を反転する	reversed(aTuple)
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
横棒グラフを茶色色として描画する	plt.barh(データ列x, データ列y, color='brown')
option: 左三角マーカーを用いる	marker = '<'
ガウス過程としてクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: ゴールデンロッドを使用する	color = 'goldenrod'
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
エクセルファイルファイルからn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
nを八進表現に変換する	oct(n)
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
グリッド線を青くする	plt.grid(color='b')
カテゴリ列で色分けして、データフレームをにバイオリン図を用いて可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
プロットの縦横比を等しくする	plt.axis('equals')
データフレームを2つの列によって整列して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
主成分分析で多次元データを淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ネイビー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
クラス分類をMLPで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
Pandasで、データ列を書式fmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
オブジェクトがリストかタプル	isinstance(obj, (list)
散布図をダークターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
項目名が辞書上で未定義	key not in aDict
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームのカラムの種類	df.info()
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
データフレームのカラムを四捨五入する	df[col].round()
option: フォントの色をハニーデューに設定する	color = 'honeydew'
ゼロ埋めした論理値型の行列	np.zeros(要素数, dtype=np.int32)
ヒストグラムの色をオールドレースに変更する	plt.hist(データ列, color='oldlace')
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
横棒グラフをライム色を用いて描画する	plt.barh(データ列x, データ列y, color='lime')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
文字列の開始位置以降に部分文字列が存在しない	s.find(sub, start) == -1
リストを展開して出力する	print(*aList)
変数について数式の微分を計算する	sympy.diff(e, z)
データフレームをグループ化し、列に対し標準偏差を計算する	df.groupby(column)[column2].std()
白色として散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
リストと配列の散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
option: チョコレートにフォントの色を設定する	color = 'chocolate'
option: 色をレベッカパープルに変更する	color = 'rebeccapurple'
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
n個分左に両端キューの順序をローテンションする	deq.rotate(-n)
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
タプルから最後に追加した項目を取り出す	aDict.popitem()
文字列リストを連結する	''.join(aStringList)
散布図をrgbの星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
点線を使ってヒストグラムを描く	plt.hist(データ列, linestyle='dotted')
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
データ列のNaNを平均で埋める	ds.fillna(ds.mean())
データフレームのカラムを千の位で丸める	df[col].round(-3)
option: 耐火レンガにグラフの色を設定する	color = 'firebrick'
重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
両端キューは空でないか確認する	len(deq) != 0
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
空集合	set()
線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
データ列の未入力値を直後の値に指定する	ds.fillna(method='bfill')
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
文字列中の小文字を大文字に変換する	s.upper()
配列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
リストと配列について散布図を描画し、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
サポートベクターマシンを用いて回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: ボックスチャートに平均を加える	showmeans = False
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
グラフを画面に変更する	sns.set(context='notebook')
折れ線グラフをホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='white')
縦棒グラフを赤色を用いて描画する	plt.bar(データ列x, データ列y, color='red')
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
タイムスタンプデータの月数を見る	aDatetime.month
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
区切りで文字列を区切って、列挙する	s.split(sep)
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
整数nがリストのどれかか確認する	n in aList
配列を等量でn個にビニングする	pd.qcut(aArray, n)
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
表データのグループごとの最小値	df.groupby(column).min()
点間のユークリッド距離	math.dist(point, point2)
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
ヒストグラムをビン数を設定して描く	plt.hist(データ列, bins=区関数)
プロットの色を明るくする	sns.set(pallete='bright')
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
option: ブランチドアーモンドに色を設定する	color = 'blanchedalmond'
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
ふたつのリストの積集合	list(set(aList) & set(aList2))
データフレームの値がNaNか調べる	df.isna()
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
option: ロイヤルブルー色を用いる	color = 'royalblue'
表の列が文字列で始まる行を選択する	df[df[column].str.startswith(s)]
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
凡例をグラフの表示する	plt.legend()
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
配列をビン分割する	pd.cut(aArray, aList)
ヒートマップで混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
文字列の先頭の余分な空白を除去する	s.lstrip()
データフレームの値が欠損値か調べる	df.isna()
グラフを全般的にパステル調にする	sns.set(pallete='pastel')
リストをビン分割する	pd.cut(aList, aList)
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
２つのデータフレームを列'A'と列'B'をキーとして外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
文字列を改行なしにプリントする	print(value, end='')
osモジュールをインポートする	import os
左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<')
option: フォントの色をライトグリーンに変更する	color = 'lightseagreen'
整数nがセットのどれかか調べる	n in aSet
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
現在の分数を使う	datetime.date.today().minute
線グラフの色をミスティローズにセットする	plt.plot(データ列x, データ列y, color='mistyrose')
赤い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データ列をフォーマットfmtとして日付データに変換する	pd.to_datetime(ds, format=fmt)
折れ線グラフの色をペルーにする	plt.plot(データ列x, データ列y, color='peru')
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
回帰分析をロバスト推定を用いて行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
タプルの値数を参照する	len(aDict)
黒い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
分類結果の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
データフレームを二つの列で昇順に並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
両端キューの末尾	deq[-1]
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
二つの集合のユニオン	aSet.union(aSet2)
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
option: グラフの色を黄色に変更する	color = 'yellow'
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
オブジェクトのバイトサイズ	sys.getsizeof(obj)
option: データ型として８ビット整数型を使う	dtype = np.int8
リストをベクトルに変換する	np.array(aList)
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
option: 青にフォントの色を設定する	color = 'blue'
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
エラーなく文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
数式の因数分解を行う	sympy.factor(e)
データフレームを複数の列の値によってグループ化し、要約統計量を計算する	df.groupby(columns).describe()
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ベクトルの列ごとの平均値を求める	np.mean(aArray, axis=0)
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの各グループごとの分散	df.groupby(column).var()
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
三変数の最大値	max(x, y, z)
行列を変形する	aArray.reshape(行数, 列数)
自然数個からk個取り出した時の順列の総数	math.perm(n, k)
カウンタの全数	aCounter.total()
実数の小数点以下を丸める	round(x)
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
文字列内にひとつでも空白が含まれる	any(c.isspace() for c in s)
整数nを二進文字列にする	bin(n)[2:]
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
データフレームの欠損値を50パーセンタイルで埋める	df.fillna(df.median())
リストを等量でn個にビン分割する	pd.qcut(aList, n)
データフレームを列によってソートして、下の方n件を取り出す	df.sort_values(columns).tail(n)
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
n個にデータフレームの中のカラムをビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図の下三角印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列を出力ストリームに書き込む	f.write(s)
ハローワールドと表示する	print('Hello World')
option: 色をオレンジに変更する	color = 'orange'
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
ピアソンを使ってデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='pearson')
小数点数のハイパボリック・コサインの逆数	math.acosh(x)
カラムの欠損値を最小値で埋める	ds.fillna(ds.min())
ゴールドにヒストグラムの色をセットする	plt.hist(データ列, color='gold')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
実数を実数で除する	x / y
データフレームを列によってグループ化して、最大値を求める	df.groupby(column).max()
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
組の末尾を取り除く	aTuple[:-1]
棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
重回帰モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームがどの程度、分散しているか見る	df.var()
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
xでカラムの未入力値を埋める	ds.fillna(x)
行列の分散	np.var(aArray)
文字列内に大文字が含まれるか	any(c.isupper() for c in s)
データ列の最頻値	ds.mode()
実数のn乗して浮動小数点数による余りを算出する	pow(x, n, y)
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
文字列の右端から空白を除去する	s.rstrip(' ')
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
文字列を日付データに変換する	pd.to_datetime(s)
オブジェクトの無限なイテラブル	itertools.repeat(element)
整数nを16進数表現にする	hex(n)
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
option: グラフの色をロイヤルブルーに変更する	color = 'royalblue'
方程式の解を算出する	sympy.solve(e)
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
option: グラフの色をライトグリーンに変更する	color = 'lightseagreen'
データフレームから指定されたカラム名一覧の列だけ抽出する	df[columns]
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
数式を数値に変換する	float(e)
nまでの偶整数列を得る	list(range(2, n, 2))
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
双方向キューの最後に要素を追加する	deq.append(element)
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
書き込み用に文字コードtextでファイルパスを開く]	open(filepath, mode='w', encoding=text)
等量でn個にデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
二つの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
カウンタの最頻出な項目	aCounter.most_common()[0]
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
３整数の最小公倍数を求める	math.lcm(n, n2, n3)
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
データフレームのリストカラムの中にある文字列と日付データの合計を数える	df[aList].isin([value, value2]).sum()
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
行列の列ごとの平均値	np.mean(aArray, axis=0)
カウンタの項目をリストとして得る	aCounter.keys()
データ列を2つ並べて箱ヒゲ図にする	plt.boxplot([データ列, データ列])
線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームの中の列と列に重複があれば、ドロップする	df.drop_duplicates(subset=[column, column2])
データフレームのカラムの標本標準偏差	df[col].std()
オブジェクトをイテラブルにする	iter(obj)
nの各桁の総和	sum(map(int, str(n)))
グラフの色を色差別なくする	sns.set(pallete='colorblind')
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
データ列の中にいくつ欠損値が含まれるか求める	ds.isna().sum()
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
JSONファイルのファイルを辞書にする	json.load(fin)
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
棒プロットの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
ファイルを追加用にオープンする]	open(filepath, mode='a')
組の先頭	aTuple[0]
データフレームの列のユニークな要素	df[col].unique()
型が名前付きタプルか	issubclass(C, tuple)
モカシン色としてヒストグラムを描画する	plt.hist(データ列, color='moccasin')
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
リストと数列の散布図をプロットし、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
クリムゾン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの列と列の相関行列スピアマン相関係数でを算出する	df[[column, column2]].corr(method='spearman')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
option: 読み込まない列番号をnamesで指定する	skiprows = names
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
配列とイテラブルについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームのカラムの尖度	df[col].skew()
等差数列から整数乱数を得る	random.randrange(start, end, step)
データフレームを列を用いて並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームのリストカラムの欠損値を最大値に変更する	df[aList].fillna(df[aList].max())
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
グラフを全般的に色差別なくする	sns.set(pallete='colorblind')
データフレームのリストカラムの50パーセンタイル	df[aList].median()
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
option: ブルーバイオレットにグラフの色を変更する	color = 'blueviolet'
エクセルデータをエクセルファイルファイルから読み込む	pd.read_excel(filename)
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
リストとリストについて散布図を描画してポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
整数個からk個取り出したときの順列の総数	math.perm(n, k)
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
散布図に△マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
文字列は全て識別子名かどうか	s.isidentifier()
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
グラフの描画で色差別なくパレットを使う	sns.set(pallete='colorblind')
文字列中に非数字が含まれるか	any(not c.isdigit() for c in s)
option: シルバー色を使う	color = 'silver'
データ列が何月か見る	ds.dt.month
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
配列とリストについての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
散布図の三角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
教師データとしてモデルを学習する	model.fit(説明変数, 目的変数)
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
データフレームは正規分布からどの程度、尖っているか見る	df.skew()
データフレームから列を２つのみ選択する	df[[column, column2]]
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
リストの要素をソートする	sorted(aList)
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
文字列の終了位置より前に部分文字列が含まれない	s.find(sub, 0, end) == -1
ヒストグラムをオリーブ色を用いて描画する	plt.hist(データ列, color='olive')
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
ふたつの集合のインターセクションを見る	aSet.intersection(aSet2)
折れ線グラフの下三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
複数行対応としてパターンで文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
セットをイミュータブルなセットに変換する	frozenset(aSet)
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
カウンタ間で和集合演算する	aCounter | aCounter2
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
実数とyの斜辺	math.hypot(x, y)
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
グリッド線	plt.grid(alpha=0.5)
option: トマトにグラフの色を設定する	color = 'tomato'
棒グラフをロイヤルブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='royalblue')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
option: 紺碧色を使う	color = 'azure'
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
データフレームを列でグループ化し、、それぞれのグループ毎の個数を求める	df.groupby(column).count()
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
表データを使う	import pandas as pd
ヒートマップを用いてデータフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
集合にイテラブルを追加更新する	aSet.update(iterable)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
文字列内にひとつでも数字が含まれるかどうか調べる	any(c.isdigit() for c in s)
ミディアムパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
t分布型確率的近傍埋め込み法として多次元データを淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ビスク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
option: 下三角マーカーを使う	marker = 'v'
option: namesを列名に指定する	names = names
日付時刻データの分数を求める	aDatetime.minute
箱ヒゲ図をプロットして平均線を加える	plt.boxplot(データ列, meanline=True)
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
実数を３乗する	x ** 3
option: ターコイズ色を使う	color = 'turquoise'
文字列が全て空白文字か	s.isspace()
リストの推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
データフレームの内で、列と列の重複を消す	df.drop_duplicates(subset=column)
JSONLファイルにデータフレームをBOMを付けて保存する	df.to_csv(filename, encoding='utf_8_sig')
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
バイオレット色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
回帰分析を勾配ブースティングとしてする	model = sklearn.ensemble.GradientBoostingRegressor()
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフをサンディーブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
散布図の▲印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
辞書にキーワード引数で追加する	aDict.update(**kwargs)
アリスブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
リストの長さ	len(aList)
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
散布図に赤い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
文字列をセパレータで分割して列挙する	s.split(sep)
SDGとして回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
実数を二乗する	x ** 2
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データ列の標本標準偏差	ds.std()
リストのn番目以降の部分を取り出す	aList[n:]
最初のデータを両端キューから取り除く	deq.remove(element)
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
nがn2より小さいか調べる	n < n2
文字列が全て小文字かどうか調べる	s.islower()
データ列の偏りを平方根変換する	np.sqrt(データ列)
双方向キューの大きさを計算する	len(deq)
データフレームの相関行列ピアソンで	df.corr(method='pearson')
現在の秒数	datetime.date.today().second
配列をビン数nで分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: 小麦色を使う	color = 'wheat'
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
折れ線グラフの▲マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
ファイルパスを書き込み用に文字コードtextで開く]	open(filepath, mode='w', encoding=text)
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームのカラムのNaNを直後の値に設定する	df[col].fillna(method='bfill')
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
イテラブルを文字列に変換して、空白で連結する	' '.join(map(str, iterable))
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
データフレームのカラムの日	df[col].dt.day
三変数の最小値	min(x, y, z)
文字列をカンマで分割して、文字列リストにする	s.split(',')
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: フォントの色をダークレッドに設定する	color = 'darkred'
インデックスを用いてデータフレームを並べる	df.sort_index()
ファイルを文字コードtextとして開く]	open(filepath, encoding=text)
nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
option: 星マーカーを描画する	marker = '*'
プロットの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
リストとリストについて散布図を描画し、、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をマゼンタに設定する	color = 'magenta'
文字列中にひとつでも非数字があるか調べる	any(not c.isdigit() for c in s)
データ列のタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
縦軸だけ目盛り線	plt.grid(axis='y')
ダーク・スラテグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ふたつの集合は集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
文字列のn番目を使う	s[n]
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
2つのデータフレームを異なる列をキーとして内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
黒い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
折れ線グラフをダークシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
行列は何のデータ型か調べる	aArray.dtype()
組のn番目の	aTuple[n]
データフレームを'A'列によって小さい順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
数値を青色で出力する	print(f'\033[34m{value}\033[0m')
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
改行なしに文字列をプリントする	print(value, end='')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
リストの要素を昇順に並べる	sorted(aList, reverse=True)
折れ線グラフの色を茶色に指定する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムをサーモン色として描画する	plt.hist(データ列, color='salmon')
データフレームを列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ヒストグラムの色をミディアムスレートブルーにセットする	plt.hist(データ列, color='mediumslateblue')
option: オールドレース色を用いる	color = 'oldlace'
リストの推移を半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
ミディアムシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: フォントの色を赤に設定する	color = 'red'
グリッド線	plt.grid(linewidth=3.0)
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
タプルの合計値	sum(aTuple)
整数nの16進文字列	hex(n)[2:]
プロットにグリッド線を入れる	plt.grid(True)
実数を実数で	x // y
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
範囲指定してデータフレームの行を抽出する	df[start:end]
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレーム全体をインデックスによって並べ直す	df.sort_index()
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
赤いグリッド線を引く	plt.grid(color='r')
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
整数nの二進表記	bin(n)
横方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
散布図の上三角印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
リストのn番目に文字列を挿入する	aList.insert(n, element)
赤い一点鎖線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
リストとリストについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストとリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
キューの要素を左にn個分ローテンションする	deq.rotate(-n)
リストのn番目の要素を削除する	del aList[n]
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
option: エンコーディングを文字コードtextに設定する	encoding = text
英字の小文字を全て使う	string.ascii_lowercase
新しい文字列によって文字列を全部置換する	s.replace(sub, newsub)
折れ線グラフのバツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
year年month月day日hour時minute分をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
配列として列を選択する	df[column].values
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
タプルの要素を小さい方からソートする	sorted(aTuple, reverse=True)
文字列がアスキー文字	s.isascii()
option: 改行コードを旧Macに指定する	newline = '\r'
Pandasで、書式としてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
option: グラフの色をパープルに変更する	color = 'purple'
データフレームの列の名前を列挙する	df.columns
破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
エクセルデータファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
option: ミディアムオーキッドにグラフの色を指定する	color = 'mediumorchid'
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ロバストな線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
マッピングを複製する	dict(aDict)
グラフのデザインを綺麗にする	import seaborn as sns
棒グラフをライトサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
破壊的に'A'列によってによってデータフレームを整列する	df.sort_values(by='A', inplace=True)
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データ列の正規分布に対する左右対称性を求める	ds.kurt()
散布図に青い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図を右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>')
現在の再帰の最大回数	sys.getrecursionlimit()
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
行列式	np.linalg.det(aArray)
散布図を大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X')
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
aListn番目から値をポップする	aList.pop(n)
縦軸を対数に変更する	plt.yscale('log')
文字列が英数字か調べる	s.isalnum()
nとn2が同じ値か	n == n2
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
今日の曜日を使う	datetime.datetime.today().weekday()
データフレームの中の列をn個に分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
文字列が全て空白からなるか調べる	s.isspace()
データフレームの指定された名前リストの列を抽出する	df[columns]
リストをひとつ置きに取り出す	aList[::2]
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
浮動小数点数の正接	math.tan(x)
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
赤い▼マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
データフレームのリストカラムの中にいくつ欠損値があるかカウントする	df[aList].isna().sum()
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
クラス分類をRANSACで行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
データフレームの列の中に存在する文字列の合計を数える	df[col].isin([value]).sum()
黒い大バツマーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
オブジェクトが関数か調べる	callable(obj)
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
文字列を積極的に小文字にする	s.casefold()
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
重複した行をデータフレームから破壊的に消す	df.drop_duplicates(inplace=True)
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
キュー中の数値の数を数える	deq.count(element)
値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームのカラムを10の位で丸める	df[col].round(-1)
キーが辞書上で定義済みか調べる	key in aDict
棒グラフをライトスレイグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
option: 色をカデットブルーに設定する	color = 'cadetblue'
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
列によって破壊的にデータフレームを小さい順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
配列の散布を作図する	plt.scatter(データ列x, データ列y)
列の各データが何回出現するか見る	df[col].value_counts()
option: グラフの色をインディゴに指定する	color = 'indigo'
n個に配列を分割する	pd.cut(aArray, n)
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
option: 改行コードをWindowsに設定する	newline = '\r\n'
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
日付時刻データが日付時刻データより後ろか判定する	aDatetime > aDatetime2
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データ列の中に存在する文字列と文字列の数を数える	ds.isin([value, value2]).sum()
文字列が英数字	s.isalnum()
文字列を中央寄せする	s.center(文字列幅)
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
リストの末尾	aList[-1]
変数をマゼンタにする	f'\033[35m{value}\033[0m'
配列の全要素の値を変更する	aArray[:, :] = 指定の値
ロードされたモジュールの一覧	sys.modules
ダークターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
パターンにマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
棒グラフをインディアンレッド色を使って描画する	plt.bar(データ列x, データ列y, color='indianred')
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
組の要素を逆順にする	aTuple[::-1]
未初期化の行列	np.empty(要素数, dtype=np.int)
option: グラフを実線に設定する	linestyle = 'solid'
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
データフレームは正規分布からどの程度尖っているか見る	df.skew()
折れ線グラフの色をミディアムパープルにセットする	plt.plot(データ列x, データ列y, color='mediumpurple')
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
データフレームの中の列をビニングする	pd.cut(df[col], aList)
ペルーにヒストグラムの色を変更する	plt.hist(データ列, color='peru')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
option: グラフの色をディープスカイブルーにセットする	color = 'deepskyblue'
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
カテゴリでグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ヒストグラムの色をドジャーブルーに変更する	plt.hist(データ列, color='dodgerblue')
空白文字を全部使う	string.whitespace
データフレームのカラムの日にち	df[col].dt.day
折れ線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームをインデックスによってソートする	df.sort_index()
option: 紺碧色を使用する	color = 'azure'
プロットで使うy軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
リストと配列の散布図を描画して文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームの中のカラムをn個にビニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
option: オリベドラブ色を使う	color = 'olivedrab'
option: グラフの色を茶色に指定する	color = 'brown'
データフレームの列がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
青い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列が組の要素でないか確認する	element not in aTuple
折れ線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
環境のエンコーディング	sys.getdefaultencoding()
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
nを否定する	not n
新しいサポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
行列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
リストの各要素を双方向キューの先頭に追加する	deq.extendleft(iterable)
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
option: バッファのサイズを指定する	buffering = 4096
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
SJISで文字列をバイト列にする	s.encode(encoding='sjis', errors='ignore')
option: タン色を使う	color = 'tan'
日付データが木曜日	aDate.weekday() == 3
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
t-SNEで多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
列'A'と列'B'をキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ロバスト分類器を作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの最頻値	df.mode()
タイムスタンプデータからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームの列の名前一覧で指定したカラムを削除する	df.drop(columns, axis=1)
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
数値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
リストとリストについて散布図を描画し、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
コマンドの第二引数	sys.argv[1]
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
リストの先頭を取り除く	aList[1:]
データ列とリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
エクセルデータファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
リストをビン数nでビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
既存の配列をベースに全要素が0のベクトル	np.zeros_like(aArray)
ミディアムバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
JSONLファイルにデータフレームをタブ区切りで保存する	df.to_csv(filename, sep='\t')
文字列を積極的に小文字に変換する	s.casefold()
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
実数の床を求める	math.floor(x)
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
オブジェクトのフィールドの値を使う	getattr(obj, プロパティ名)
ヒストグラムの色をライトシアンにする	plt.hist(データ列, color='lightcyan')
最初のカテゴリーを除いてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
リストの要素をクリアにする	aList.clear()
データフレームの値をまとめてValueMapで変更する	df.replace(ValueMap)
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
文字列内にひとつでも大文字が含まれる	any(c.isupper() for c in s)
散布図のクロス印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
nがn2の倍数でないかどうか調べる	n % n2 != 0
リストの先頭のn要素を取り除く	aList[n:]
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
文字列が部分文字列で終わる	s.endswith(sub)
option: ダークシアン色を使う	color = 'darkcyan'
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームのリスト列の欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ファイルをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
ファイルを追加モードでオープンする]	open(filepath, mode='a')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームのリストカラムの空文字を未入力値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
辞書の値を列挙する	aDict.values()
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームの欠損値を平均で埋める	df.fillna(df.mean())
データフレームの中にある日付データの合計を数える	df.isin([value]).sum()
現在の曜日を整数で使う	datetime.datetime.today().weekday()
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データフレームの欠損値を最小値にセットする	df.fillna(df.min())
部分文字列を範囲を指定して探す	s.find(sub, start, end)
データフレームをCSVでJSONLファイルに保存する	df.to_csv(filename)
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
option: シャルトリューズを使う	color = 'chartreuse'
縦軸の目盛を対数に変更する	plt.yscale('log')
二つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: セパレータをコロンにする	sep = ':'
ファイルからn文字読む	f.read(n)
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
オブジェクトがタプルか	isinstance(obj, tuple)
データフレームの列を破壊的に落とす	df.drop(column, axis=1, inplace=True)
データフレームの列の一覧	df.info()
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
標準入力から1行読み取る	input()
option: 暗い赤を使う	color = 'darkred'
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
カテゴリ列で色分けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか	s.find(sub, start, end) == -1
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
変数について数式のインテグラルを計算する	sympy.integrate(e, z)
数値のパラメータに数式を代入する	e.subs(z, e2)
小数点数の仮数	math.frexp(x)[0]
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
数式のパラメータについてのn階微分を行う	sympy.diff(e, z, n)
データフレームから重複を削除する	df.drop_duplicates()
両端キューの要素をインプレースに逆順にする	deq.reverse()
両端キューの末尾に要素を追加する	deq.append(element)
nがn2か確認する	n == n2
option: グラフの色をレモンシフォンにする	color = 'lemonchiffon'
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
option: 紺にグラフの色を変更する	color = 'darkblue'
データフレームのグループの標準偏差	df.groupby(column).std()
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
文字列中にひとつでも非英数字がある	any(not c.isalnum() for c in s)
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
option: マーカーをダイアモンドに指定する	marker = 'D'
グラフの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
データ列のNaNをモードで埋める	ds.fillna(ds.mode().iloc[0])
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
マゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
option: タン色を使用する	color = 'tan'
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
現在のローカルな日付	datetime.date.today()
アルファベットの小文字列	string.ascii_lowercase
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
ヒストグラムの色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
横棒グラフを描画する	plt.barh(ラベル列, データ列)
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
２つのデータフレームを縦方向に一つにする	pd.concat([df, df2])
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
データフレームのカラムの曜日の名前を使う	df[col].dt.weekday_name
データフレームの各次元の大きさを確認する	df.shape
日付時刻データの時間	aDatetime.time()
リストとリストについて散布図を描画して、マーカーをダイアモンドに指定する	plt.plot(データ列x, データ列y, marker='D')
まとめてデータフレームをValueMapで置き換える	df.replace(ValueMap)
文字列が平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
文字列を赤色で出力する	print(f'\033[31m{value}\033[0m')
文字列内に英数字がある	any(c.isalnum() for c in s)
折れ線グラフを色付きの点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
日付時刻データが土曜日かどうか確認する	aDatetime.weekday() == 5
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
カテゴリ別でグループ化して、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
グリッド線を黄色くする	plt.grid(color='y')
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
numpyを使用する	import numpy as np
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
空白で文字列を分割して整数リストに変換する	map(int, s.split())
両端キューの右に文字列を追加する	deq.append(element)
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
2つのデータフレームを横向きにマージする	pd.merge(df, df2)
データ列は何秒か確認する	ds.dt.second
線形モデルの切片	model.intercept_
タプルを引数として展開して表示する	print(*aTuple, sep=',')
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
モデル訓練データとしてを学習する	model.fit(説明変数, 目的変数)
日付データが日付データよりあとか調べる	aDate > aDate2
L2ノルムでデータを正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
サブセットかどうか	aSet.issubset(aSet2)
ベクトルの要素数	aArray.size
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
π	math.pi
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
ラインを赤い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: 切片を算出しない	fit_intercept = False
データフレームのカラムの中のNaNの合計を数える	df[col].isna().sum()
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
デピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
折れ線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
線グラフをベージュ色を用いて描画する	plt.plot(データ列x, データ列y, color='beige')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
option: 三二ビット整数型を使う	dtype = np.int16
文字列は全て印字できるか調べる	s.isprintable()
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
カーネル密度による分布図をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
二つの文字列は同じか調べる	s == s2
ファイルが存在するかどうか調べる	os.path.exists(filepath)
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
option: フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
データフレームを'A'列と'B'列によって集約し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
実数の値が整数	x.is_integer()
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
辞書上でキーが定義済み	key in aDict
データフレームの数値をまとめて丸める	df.round()
option: 四角マーカーを描画する	marker = 's'
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
組をナンバリングする	enumerate(aTuple)
イテラブルを行列に変換する	np.array(iterable)
サンディーブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
データフレームの指定した名前リストの列のみ抽出する	df[columns]
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 色をホワイトに設定する	color = 'white'
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
本日が火曜日	datetime.datetime.today().weekday() == 1
データフレームを列の値でグループ化する	df.groupby(column)
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ファイルが存在するか	os.path.exists(filepath)
データフレームの中の欠損値を削除する	df.dropna()
標準エラーを使用する	sys.stderr
回帰分析をスタッキングで行う	sklearn.ensemble.StackingRegressor()
データフレームで、列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
リスト中の要素が少なくともひとつ真か	any(aList)
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列はキーワードかどうか調べる	keyword.iskeyword(s)
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
MeanSquaredErrorを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
データ列を箱ひげ図にする	plt.boxplot(データ列)
棒グラフをラベンダー色を用いて描画する	plt.bar(データ列x, データ列y, color='lavender')
文字列中に非大文字が含まれる	any(not c.isupper() for c in s)
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
option: ▽印を加える	marker = 'v'
option: リネンを使う	color = 'linen'
option: 淡いピンク色色を使う	color = 'lightpink'
折れ線グラフの色をバイオレットに変更する	plt.plot(データ列x, データ列y, color='violet')
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データ列の中に文字列があるか調べる	ds.isin([value])
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
データ列とイテラブルの散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームの列の文字列をNaNに変換する	df[col].replace(s, np.nan)
ファイル全体をリストとして読む	f.readlines()
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
データフレームを関数の値によって集約して列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームの全カラムの散らばりを可視化する	sns.pairplot(df)
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
両端キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
散布図を赤い菱形マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームの第一四分位数を求める	df.quantile(0.25)
オブジェクトはタプルに含まれないか調べる	element not in aTuple
横棒グラフを描画してラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
nにn2をかけた値をnに代入する	n *= n2
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
NaNも加えて表データの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
実行結果をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
淡いピンク色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
昇順にタプルの要素を並べ変える	sorted(aTuple, reverse=True)
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
実数以下の最大の整数	math.floor(x)
正規表現に文字列全体を複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
上三角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
単位行列	np.eye(行数, 列数)
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
文字列の示すエンコーディングで既存のファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
option: BOM付きを使う	encoding = 'utf_8_sig'
オプションで、ファイルを使う	file = sys.open(filename, 'w')
option: 整数型を使用する	dtype = np.int
文字列中の文字を列挙する	list(s)
折れ線グラフを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
option: ライトグリーン色を用いる	color = 'lightseagreen'
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
整数nをn2分の1にする	n //= n2
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
折れ線グラフの四角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
本日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの中の欠損値の数をカウントする	df.isna().sum()
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
四分位点を用いてデータをスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
黒いグリッド線を引く	plt.grid(color='k')
option: プラム色を使う	color = 'plum'
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
リストとリストについて散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをミッドナイトブルー色を使って描画する	plt.barh(データ列x, データ列y, color='midnightblue')
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
データフレームの欠損値を平均に変更する	df.fillna(df.mean())
リストの全ての値をクリアにする	aList.clear()
option: スチールブルー色を使う	color = 'steelblue'
散布図を青色として描画する	plt.scatter(データ列x, データ列y, color='blue')
ファイルパスをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
オブジェクトの参照カウント	sys.getrefcount(obj)
n2分のn	n / n2
列'A'と列'B'をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
分子割る分母	fractions.Fraction(分子, 分母)
option: フォレストグリーン色を使う	color = 'forestgreen'
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
数式のパラメータを数式で置き換える	e.subs(z, e2)
行列の列ごとの最小値	np.min(aArray, axis=0)
横棒グラフをミッドナイトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='midnightblue')
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
rgbの下三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
モードでカラムの欠損値を埋める	ds.fillna(ds.mode().iloc[0])
配列の要素ごとに加算する	aArray + aArray2
二進数文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
タプルの先頭のn要素を除く	aTuple[n:]
両端キューのn番目に要素を挿入する	deq.insert(n, element)
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
目盛り線	plt.grid(alpha=0.5)
option: 最初のカラムを行に設定する	index_col = 0
数値の符号を同じにする	math.copysign(x, x2)
ダークブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
イテラブルを無限に繰り返す	itertools.cycle(iterable)
ミスティローズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
要素を双方向キューの最後に追加する	deq.append(element)
タプルの末尾を取り除く	aTuple[:-1]
option: 色をナバホホワイトに指定する	color = 'navajowhite'
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
実数の仮数	math.frexp(x)[0]
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
option: スラッシュを区切りで用いる	sep = '/'
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
nがn2以上か確認する	n >= n2
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
日付時刻データが日曜日	aDatetime.weekday() == 6
空白で文字列を分割する	s.split()
データ列をビンニングする	pd.cut(ds, aList)
二変数の一番小さい値	max(x, y)
データフレームの未入力値を直前の値で埋める	df.fillna(method='ffill')
カラムの欠損値を中央値で補う	ds.fillna(ds.median())
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
文字列の先頭から部分文字列を探す	s.find(sub)
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
２つの文字列をカンマで区切って出力する	print(value, value2, sep=',')
大バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
option: ダークスラテグレー色を使う	color = 'darkslategray'
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
行列から重複を除いたベクトルを初期化する	np.unique(aArray)
各列毎にデータフレームを集約して、列の平均値を求める	df.groupby(column)[column2].mean()
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
実数がNaNか調べる	math.isnan(x)
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
日付時刻データがタイムスタンプデータより前か確認する	aDatetime < aDatetime2
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
色付きの実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームの列をドロップする	df.drop(column, axis=1)
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
文字列を部分文字列で区切り、、列挙する	s.split(sub)
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ヒストグラムのラインスタイルを点線に変更する	plt.hist(データ列, linestyle='dotted')
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
文字列を全て小文字にする	s.casefold()
option: グラフの色をアクアにセットする	color = 'aqua'
データフレームの列の名前の一覧を使う	df.columns
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図を黄緑色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
行列を一次元にする	aArray.flatten()
データフレームのカラムが何月か見る	df[col].dt.month
新しいロジスティック回帰モデルを作成する	model = sklearn.linear_model.LogisticRegression()
n個にデータ列を等しい量になるようにビニングする	pd.qcut(ds, n)
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
空の集合	set()
ヒストグラムを描画し、、ビンを設定する	plt.hist(データ列, bins=区関数)
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
オブジェクトが属性を持つかどうか調べる	hasattr(obj, プロパティ名)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
データフレームのリスト列のNaNを前の行の値で埋める	df[aList].fillna(method='ffill')
データフレームのリスト列の25パーセンタイルを求める	df[aList].quantile(0.25)
option: ターコイズにグラフの色を設定する	color = 'turquoise'
コロンを用いて文字列を区切り、、列挙する	s.split(':')
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
整数nの八進文字列	oct(n)[2:]
イテラブルを周期的に繰り返す	itertools.cycle(iterable)
辞書からキーの値をエラーなく得る	aDict.get(key, None)
リストにオブジェクトを追加する	aList.append(element)
option: ライトスカイブルーにフォントの色をセットする	color = 'lightskyblue'
白いグリッド線を引く	plt.grid(color='w')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
データフレームから重複した行を取り除いて、更新する	df.drop_duplicates(inplace=True)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
フォレストグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
自然数の並べ方の総数	math.perm(n)
正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
正規表現patternでデータフレームのリスト列の値をまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
option: 淡いピンク色に色を変更する	color = 'lightpink'
データフレームの標本標準偏差	df.std()
mathをインポートする	import math
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
等しい量になるようにn個にデータ列を分割する	pd.qcut(ds, n)
リストをひとつ飛ばしで得る	aList[::2]
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
縦棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
n個にデータフレームの中の列を等量でビン分割する	pd.qcut(df[col], n)
データフレームを列によって並べて、更新する	df.sort_values(by=column, inplace=True)
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
目盛り線	plt.grid(linewidth=3.0)
要素が集合に含まれない	element not in aSet
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
アイボリー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
n割るn2を切り上げる	(n + n2 - 1) // n2
nullに等しい値	None
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
option: データ型として三２ビット整数型を使う	dtype = np.int16
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
プロットの色を暗くする	sns.set(pallete='dark')
データフレームのカラムの中にとがいくつ存在するか数える	df[col].isin([value, value2]).sum()
リストと配列の散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
リストとリストについて散布図を描画し、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
縦棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: グラフの色を紺に設定する	color = 'darkblue'
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
箱ひげ図をプロットして、平均線を加える	plt.boxplot(データ列, meanline=True)
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームのカラムの中にある日付データの数を求める	df[col].isin([value]).sum()
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
オブジェクトはリストに含まれないか調べる	element not in aList
データ列を1000の位で丸めて、整数にする	ds.round(-3).astype(int)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
ファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
散布図のダイアモンド印の線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
2つの変数を改行しなくてプリントする	print(value, value2, end='')
ラベンダー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
option: ダークバイオレットに色を設定する	color = 'darkviolet'
数値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
ヒストグラムを実線に変更する	plt.hist(データ列, linestyle='solid')
行列の列ごとの最大値	np.max(aArray, axis=0)
option: マーカーを大バツに指定する	marker = 'X'
数式の変数の解を方程式として算出する	sympy.solve(e, z)
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
プロットで使う縦軸のキャプションをuntitledに設定する	plt.ylabel('y軸ラベル')
option: サドルブラウン色を使う	color = 'saddlebrown'
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
リストの値を並べ変える	sorted(aList)
データ列間の寄与率を算出する	sklearn.metrics.r2_score(データ列, データ列2)
未定値	None
バイトオーダを使う	sys.byteorder
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
組の先頭のn要素を取り除く	aTuple[n:]
ライトイエロー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
Pandasで、エポック秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
横棒グラフをやわらかい青色を用いて描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームのそれぞれのグループ毎の平均値	df.groupby(column).mean()
n個のオブジェクトがあるリスト	[element] * n
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
リストとリストについて散布図を描画し、、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
横棒グラフを描画して棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
イテラブルの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
イテラブルを両端キューに変換する	collections.deque(iterable)
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
nが3の倍数かどうか	n % 3 == 0
散布図をrgbの四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
配列の差	aArray - aArray2
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: 淡い茶色にグラフの色を設定する	color = 'tan'
キューの右から要素を削除する	deq.pop()
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
２つの文字列が等しくないかどうか	s != s2
三つ並べてヒストグラムを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
ベクトルは何のデータ型か調べる	aArray.dtype()
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
オブジェクトはリストかタプル	isinstance(obj, (list)
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
文字列の開始位置より後に部分文字列が存在するか調べる	s.find(sub, start) != -1
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
折れ線グラフのラインスタイルを一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
折れ線グラフに上三角印を用いる	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色を青紫に設定する	color = 'violet'
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
2を底とする実数の対数	math.log2(x)
option: マーカーの色を白にする	markerfacecolor = 'white'
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
折れ線グラフを青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
タイムスタンプデータが月曜日かどうか調べる	aDatetime.weekday() == 0
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
option: カデットブルー色を用いる	color = 'cadetblue'
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
ダークマゼンタ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
option: ピンク色を使用する	color = 'pink'
実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
二つのオブジェクトが等しいか調べる	obj == obj2
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: ミントクリーム色を使う	color = 'mintcream'
等量でデータ列をビン数nでビン分割する	pd.qcut(ds, n)
整数nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
リストを分割数nでビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
カテゴリで色分けして、データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
二つの文字列を辞書順で比較する	s < s2
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
部分文字列が文字列中にあるか調べる	sub in s
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
散布図にダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
横軸だけグリッド線	plt.grid(axis='x')
両端キューに値をenqueueする	deq.appendleft(element)
option: 青紫にフォントの色を設定する	color = 'violet'
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
option: スラグレー色を使う	color = 'slategray'
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
option: ゲインズボロ色を用いる	color = 'gainsboro'
option: グラフの色を黄緑に設定する	color = 'chartreuse'
日付データの月数を使う	aDate.month
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
現在の秒	datetime.date.today().second
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
降順にデータフレームを列によってを用いてソートする	df.sort_values(by=column, ascending=False)
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
０で全要素を初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
option: ライトブルー色を使う	color = 'lightblue'
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
option: フォントの色をグレーに設定する	color = 'grey'
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
0で全要素を初期化した配列	np.zeros(要素数)
読み込みできるようにファイルをオープンする]	open(filepath, mode='r')
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
データフレームからカテゴリデータの列名の一覧	df.select_dtypes('object').columns
タプルに要素をキーとして加える	aDict[key] = element
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
数列の散布を可視化する	plt.scatter(データ列x, データ列y)
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
表データを二つの列によってを用いて破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
predicateFuncを適用したとき真となるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
データフレームから重複を残さず、ドロップする	df.drop_duplicates(keep=False)
データフレームの重複した行を数える	df.duplicated().sum()
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
データフレームの指定された列をリストに変換する	df[column].values.tolist()
option: 文字コードをBOM付きに変更する	encoding = 'utf_8_sig'
要素がセットの要素か調べる	element in aSet
円グラフを真円にする	plt.axis('equals')
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
縦棒グラフをミディアムシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
マッピングからキーで指定された値をポップする	aDict.pop(key)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: グラフの色をバリーウッドに変更する	color = 'burlywood'
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
option: フクシア色を使う	color = 'fuchsia'
濃いシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: グラフの色をカデットブルーに指定する	color = 'cadetblue'
option: グラフの色をオーキッドに変更する	color = 'orchid'
両端キューの大きさ	len(deq)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
イテラブルとリストをペアのリストにする	itertools.zip_longest(iterable, iterable2)
option: シャルトリューズにグラフの色を設定する	color = 'chartreuse'
データフレームのリストカラムの中に含まれる文字列の合計を数える	df[aList].isin([value]).sum()
キーが辞書に存在するかどうか	key in aDict
ゼロ埋めされた行列	np.zeros(行数, 列数)
グラフを暗くする	sns.set(pallete='dark')
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: グラフの色をダーク・スラテグレーに指定する	color = 'darkslategrey'
ファイルパスを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
折れ線グラフのダイアモンドマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
option: 区切り記号をカンマにする	sep = ','
両端キューの先頭	deq[0]
文字列を最後の部分文字列で分割したときの前半の文字列	s.rpartition(sub)[0]
nが何桁か	len(str(n))
列をビン数nで分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
二つの集合の共通要素だけにする	aSet.intersection_update(aSet2)
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
辞書から最後の項目をポップする	aDict.popitem()
いつまでもnからカウントアップする	itertools.count(start=n)
赤い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
天井	math.ceil(x)
データフレームの数値を小数点以下n桁で丸める	df.round(n)
要素はマップの値として含まれているかどうか調べる	element in aDict.values()
データフレームのカラムの中にある文字列と日付データの数をカウントする	df[col].isin([value, value2]).sum()
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
データフレームの中で何行、重複するか見る	df.duplicated().sum()
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームから列を三つ選択する	df[[column, column2, column3]]
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
データ列の標本標準偏差を求める	ds.std()
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームをグループ化しそれぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
複数の列によってデータフレームを整列して、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
option: 最初のカラムをインデックスに設定する	index_col = 0
二つの変数を文字列で区切ってプリントする	print(value, value2, sep=s)
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
numpyを使う	import numpy as np
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
nからn2を引く	n - n2
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフの色をフローラルホワイトに指定する	plt.plot(データ列x, データ列y, color='floralwhite')
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
option: 色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
折れ線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフに菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
画面にグラフの目的を指定する	sns.set(context='notebook')
データフレームのカラムの欠損値を直前の値に指定する	df[col].fillna(method='ffill')
四角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: 紺を使う	color = 'darkblue'
データフレームの数値を一度に丸める	df.round()
nとn2の論理和	n | n2
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
文字列を下線付き化する	f'\033[4m{value}\033[0m'
データ列を箱髭図として描く	plt.boxplot(データ列)
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
折れ線プロットを描画し、、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
リストと配列について散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
数式の部分分数化する	sympy.apart(e)
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
右三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
キーがマッピングに存在するか	key in aDict
データフレームから型を取り出す	df.select_dtypes(ty)
棒グラフを小麦色色を使って描画する	plt.bar(データ列x, データ列y, color='wheat')
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
1からnまでの整数列を見る	list(range(1, n+1))
option: スカイブルーを使う	color = 'skyblue'
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームのカラムの曜日は何日目か見る	df[col].dt.dayofweek
青いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
２次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
option: グラフの色をダーク・スラテグレーにセットする	color = 'darkslategrey'
タプル内の要素は全て真か調べる	all(aTuple)
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
文字列を部分文字列で二分し残りの文字列を使う	s.partition(sub)[-1]
文字列をn回続くイテラブル	itertools.repeat(element, n)
散布図を四角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='s')
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
配列のユニークな要素ごとの出現回数を使う	np.unique(aArray, return_counts=True)
option: グラフの色をゴーストホワイトに指定する	color = 'ghostwhite'
Pandasで、書式でデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームのカラムの最頻値を求める	df[col].mode()
整数の順列の総数	math.perm(n)
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
option: グラフの色を赤に指定する	color = 'red'
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
カラーバーを横向きに描く	plt.colorbar(orientation='horizontal')
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ドジャーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
主成分分析で多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
option: マーカーを右三角に変更する	marker = '>'
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
リストとリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
直前の値でデータ列のNaNを埋める	ds.fillna(method='ffill')
option: マーカーをポイントに変更する	marker = '.'
year年month月day日をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
ふたつの集合の差集合を求める	aSet.difference(aSet2)
折れ線グラフに右三角印を使う	plt.plot(データ列x, データ列y, marker='>')
散布図を赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='red')
２点間のユークリッド距離	math.dist(point, point2)
縦棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
自然対数の底	math.e
SVDで淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
十六進数字を全部使う	string.hexdigits
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームのカラムの最頻値	df[col].mode()
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
データ列が何分か調べる	ds.dt.minute
折れ線グラフを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
第２引数で指定されたファイルの名前	sys.argv[1]
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
書式をargsを引数としてフォーマットする	formatText.format(*args)
option: ペールグリーン色を使う	color = 'palegreen'
リストの平均を求める	sum(aList)/len(aList)
ケンドール順位相関係数としてデータフレームの相関行列	df.corr(method='kendall')
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
散布図のマーカーを上三角にする	plt.scatter(データ列x, データ列y, marker='^')
2つのカウンタの共通する値	aCounter & aCounter2
両端キューの左	deq[0]
散布図にrgbの上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームで、列の重複を確認する	df.duplicated(subset=column)
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームのカラムは何曜日か調べる	df[col].dt.weekday_name
データフレームの列で文字列が含まれる行を選択する	df[df[column].str.contains(s)]
ゼロ埋めされたベクトル	np.zeros(要素数)
決定木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
データフレームのデータ型の一覧	df.dtypes
データ列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
xが一桁の数か調べる	-9 <= x <= 9
無限にカウントアップする	itertools.count()
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
プロット中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
イテラブルの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ヒストグラムの色をスノーに変更する	plt.hist(データ列, color='snow')
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
棒グラフの色をrgbに指定する	plt.bar(ラベル列, データ列, color=rgb)
ヒストグラムを耐火レンガ色として描画する	plt.hist(データ列, color='firebrick')
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
ピーチパフ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
option: フォントの色をライムグリーンに設定する	color = 'limegreen'
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
辞書のキー一覧	list(aDict)
option: マーカーの太さを変更する	markeredgewidth = 2.5
日付データが水曜日か調べる	aDate.weekday() == 2
全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数)
自然数の最大公約数を求める	math.gcd(n, n2)
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: オーキッド色を使う	color = 'orchid'
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
option: 色をパパイヤウィップに指定する	color = 'papayawhip'
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
実数の絶対値を計算する	math.fabs(x)
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームの中のカラムを分割数nでビン分割する	pd.cut(df[col], n)
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
エラーを出力する	sys.stderr
プロット中のフォントを設定する	sns.set(font=フォント名)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
整数nを符号付きでバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
データフレームのカラムのNaNを後の行の値に設定する	df[col].fillna(method='bfill')
nからn2を引いてnに代入する	n -= n2
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
文字列が全て英数字か調べる	s.isalnum()
文字列が全てASCII文字	s.isascii()
option: 色をパールバイオレットレッドに変更する	color = 'palevioletred'
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
実数を整数にする	int(x)
option: スラッシュをセパレータで使う	sep = '/'
ヒストグラムを描いて、ビン数を設定する	plt.hist(データ列, bins=区関数)
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
エポック秒を日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
JSON形式の文字列をデータに変換する	json.loads(jsonString)
浮動小数点数の逆双曲線正接	math.atanh(x)
option: グラフの色をミディアムターコイズに変更する	color = 'mediumturquoise'
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
タプルのn番目のの要素	aTuple[n]
散布図を赤い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
オーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
線を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: ライム色を使う	color = 'lime'
イテラブルの集合	set(iterable)
ファイルを追加用にオープンして]fとする	f = open(filepath, mode='a')
リストとリストの散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
Pandasで、UNIX時間の文字列からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
ゼロ埋めされた複素数型のベクトルを作る	np.zeros(要素数, dtype=bool)
整数nを八進リテラルに変換する	oct(n)
データフレームのカラムの中に日付データと文字列がある	df[col].isin([value, value2])
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
辞書にキーワード引数で加えて、更新する	aDict.update(**kwargs)
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
文字列がリストに含まれない	element not in aList
データ列の欠損値を最小値にする	ds.fillna(ds.min())
option: 箱ひげ図に平均を加える	showmeans = False
回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
データフレームのカラムは何時か確認する	df[col].dt.hour
文字列の示す文字コードでファイルを開く]	open(filepath, encoding=s)
事前に正規表現をコンパイルする	re.compile(pattern)
変数を赤色にする	f'\033[31m{value}\033[0m'
複素数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=bool)
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
実数を切り下げて整数にする	math.floor(x)
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
リストの合計を計算する	sum(aList)
option: 無視する列番号をnamesで指定する	skiprows = names
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
option: 改行の代わりに文字列を用いる	end = s
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
カウンタをリセットする	aCounter.clear()
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
実数の仮数部	math.frexp(x)[0]
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフの色をグリーンにセットする	plt.plot(データ列x, データ列y, color='green')
データ列を分割数nでビン分割する	pd.cut(ds, n)
リストを引数として展開して出力する	print(*aList)
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームを'A'列によってグループ分けし、、列挙する	[(name, group) for name, group in df.groupby('A')]
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
コマンドの第一引数を知る	sys.argv[1]
プログラムのファイルの名前	sys.argv[0]
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
option: n番目のカラムをインデックスに設定する	index_col = n
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
等間隔でデータ列をn個にビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
数列とイテラブルについて散布図をプロットして、下三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ホットピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: グラフの色をコーラルに指定する	color = 'coral'
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
今日が何月か知る	datetime.datetime.today().month
折れ線グラフを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
eの実数乗	math.exp(x)
option: グラフの色をオリーブに変更する	color = 'olive'
集合から別のセットとの共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームのリスト列を四捨五入する	df[aList].round()
折れ線グラフに▽印を加える	plt.plot(データ列x, データ列y, marker='v')
散布図のクロスマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
リストとリストの散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
ネイビー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図を星マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='*')
色付きの破線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
option: ダークグリーン色を使う	color = 'darkgreen'
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
プログラムを強制的に停止する	sys.exit()
カラムの中の欠損値の合計を数える	ds.isna().sum()
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
タプルのキー一覧	list(aDict)
option: 読み込む行番号をnamesで指定する	usecols = names
文字列が全て数字か調べる	s.isdigit()
数値を青色でプリントする	print(f'\033[34m{value}\033[0m')
二つの数値をコロンで区切ってプリントする	print(value, value2, sep=':')
色付きの破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
プロットの色を濃くする	sns.set(pallete='deep')
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
データフレームの列の値がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームのリスト列の欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
最大値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].max())
辞書の全項目をクリアする	aDict.clear()
線グラフをライトコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
列'A'と列'B'をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
イテラブルを文字列に変換して、タブで連結する	'\t'.join(map(str, iterable))
レベッカパープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
ベージュ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
option: ライトコーラルにフォントの色をセットする	color = 'lightcoral'
カラムの中にいくつ文字列が存在するかカウントする	ds.isin([value]).sum()
データフレームの列の種類	df.info()
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームを関数によってグループ化する	df.groupby(関数)
横棒グラフをアンティークホワイト色として描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
実数を千の位で丸める	round(x, -3)
オプションで、出力先をファイルにセットする	file = sys.open(filename, 'w')
文字列を全て小文字に変換する	s.lower()
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
option: ライトブルーに色を設定する	color = 'lightblue'
整数nは集合のいづれかかどうか調べる	n in aSet
リストを表示する	print(value)
データフレームのリストカラムの平均	df[aList].mean()
データフレームから重複を落とす	df.drop_duplicates()
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの各グループごとの合計を求める	df.groupby(column).sum()
折れ線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
マッピングをソートしてJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
浮動小数点数を実数に加える	x + y
赤いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
行列にはいくつ要素が含まれるか調べる	aArray.size
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
ミディアムブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームの指定した二つの列だけ取り出す	df[[column, column2]]
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ユーザが整数を入力する	int(input())
配列の要素数	aArray.size
行列の行列式	np.linalg.det(aArray)
文字列を走査し正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
要素はセットのメンバーに含まれないか	element not in aSet
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
カウンタ同士で積集合を求める	aCounter & aCounter2
散布図の印の色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
浮動小数点数以下の最大の整数を求める	math.floor(x)
実数を実数で割る	x / y
option: グラフの色を白に設定する	color = 'white'
リストとリストの散布図を描き、、マーカーをクロスにする	plt.plot(データ列x, データ列y, marker='x')
データフレームを各列毎にグループ化し、、列の合計を求める	df.groupby(column)[column2].sum()
文字列の大文字と小文字を入れ替える	s.swapcase()
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
ダークブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
２つのデータフレームを縦向きに一つにする	pd.concat([df, df2], axis=0)
整数nを八進表現に変換する	oct(n)
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ファイル名がテキストファイル	filename.endswith('.txt')
option: 文字列の示すエンコーディングを使う	encoding = s
文字列を太字にする	f'\033[1m{value}\033[0m'
option: グラフの色をスラグレーに設定する	color = 'slategrey'
フォレストグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='forestgreen')
文字列のn番目	s[n]
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
分割数nでリストをビン分割する	pd.cut(aList, n)
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
文字列を最後から部分文字列で区切る	s.rsplit(sub)
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
データフレームからカテゴリデータを取り出す	df.select_dtypes('object')
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
赤い大バツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
現在のエポック秒	int(time.time())
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
リストが空	len(aList) == 0
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
リストとリストの散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムベースの勾配ブースティング回帰木を作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: グラフの色をカーキに設定する	color = 'khaki'
散布図に▽印を加える	plt.scatter(データ列x, データ列y, marker='v')
プラットホームはLinuxか調べる	sys.platform.startswith('linux')
散布図の四角印を黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームのリスト列の中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
配列と数列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームのカラムの曜日数	df[col].dt.dayofweek
predicateFuncが真とならないイテラブルの要素を求める	itertools.dropwhile(predicateFunc, iterable)
表データを各列毎に集約して、列の平均値を求める	df.groupby(column)[column2].mean()
オブジェクトは論理値かどうか	isinstance(obj, bool)
横棒グラフを淡いピンク色色を用いて描画する	plt.barh(データ列x, データ列y, color='lightpink')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
ホールドアウトを用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
自然数の最大公約数	math.gcd(n, n2)
データフレームを各列と列の組み合わせ毎にグループ化して最大値を求める	df.groupby([column, column2], as_index=False).max()
データ列の未入力値を中央値に設定する	ds.fillna(ds.median())
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
option: コーラル色を使う	color = 'coral'
数式を微分する	sympy.diff(e)
数列とリストについて散布図を描き、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
連立方程式の解を求める	sympy.solve([e, e2])
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
リストと配列についての散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
xが-9以上、9以下か調べる	-9 <= x <= 9
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
イテラブルとデータ列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
リストの合計値	sum(aList)
折れ線グラフの色をターコイズにする	plt.plot(データ列x, データ列y, color='turquoise')
箱髭図を２つ並べて描画する	plt.boxplot([データ列, データ列])
横棒グラフを描き、、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームをグループ化しそれぞれの列に対し個数を計算する	df.groupby(column)[column2].count()
JSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
文字列を式として評価する	eval(s)
非数値データを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
浮動小数点数のコサイン	math.cos(x)
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
option: 左三角マーカーを描画する	marker = '<'
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
Pandasで、フォーマットfmtとしてデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
データフレームを表示するときカラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
グラフを明るくする	sns.set(pallete='bright')
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
追加モードでファイルを開く]	open(filepath, mode='a')
折れ線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
箱ヒゲ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
配列とデータ列について散布図を描いて左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
エクセルファイルファイルから全シートを読み込む	pd.read_excel(filename, sheet_name=None)
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
option: 色をスカイブルーに設定する	color = 'skyblue'
縦棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
日付データが木曜日か調べる	aDate.weekday() == 3
配列のスカラー倍を算出する	aArray * n
グラフをプレゼン用に設定する	sns.set(context='talk')
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
タプルをネスト化する	collections.ChainMap(aDict)
ヒストグラムをブランチドアーモンド色として描画する	plt.hist(データ列, color='blanchedalmond')
option: 読み込まないフッタをnに設定する	skipfooter = n
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
ヘッダを指定せずTSVファイルを読む	pd.read_csv(filename, header=None)
棒グラフをコーンフラワーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
区切りで文字列を区切って文字列リストに変換する	s.split(sep)
真紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
グラフの目的を画面に設定する	sns.set(context='notebook')
リストの全ての要素をクリアにする	aList.clear()
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
オプションで、出力先を標準出力に設定する	file = sys.stdout
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
辞書に要素をキーとして加える	aDict[key] = element
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
シーケンスの各要素を両端キューの右に追加する	deq.extend(iterable)
双方向キューの右側にイテラブルの各データを入れる	deq.extend(iterable)
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
色付きの実線でラインを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
アクア色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
Pythonのバージョン	sys.version
ダークオーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkorchid')
赤色で変数をプリントする	print(f'\033[31m{value}\033[0m')
実数の平方根	math.sqrt(x)
nが偶数か調べる	n % 2 == 0
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
option: ダークゴールデンロッドを使用する	color = 'darkgoldenrod'
線グラフをライトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightblue')
ホワイトスモーク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
xが-9以上9以下か調べる	-9 <= x <= 9
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
散布図の▽マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
文字列をコロンを用いて区切り、列挙する	s.split(':')
x軸の目盛を対数に変更する	plt.xscale('log')
データフレームを二つの列によってまとめた表	df.groupby(['A', 'B'])
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
回帰分析を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingRegressor()
option: バイナリ用に指定する	mode = 'rb'
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
文字列を全て大文字に変換する	s.upper()
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
本日の年	datetime.datetime.today().year
プラットホームがLinux	sys.platform.startswith('linux')
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
データフレームの未入力値が含まれる箇所に色を付ける	df.style.highlight_null()
データフレームのリストカラムの値は欠損値か判定する	df[aList].isna()
線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
オブジェクトは辞書クラス	isinstance(obj, dict)
異なる列をキーとして二つの表データを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
数値を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
度数分布図を3つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
白いヒストグラムを描画する	plt.hist(データ列, color='w')
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
イエローグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
柱状グラフの範囲を変更する	plt.hist(データ列, range=(start, end))
option: アイボリー色を使用する	color = 'ivory'
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
タプルをn回連結する	aTuple * n
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームを関数の値によってグループ化し要約統計量を求める	df.groupby(関数).describe()
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
option: デピンクを使用する	color = 'deeppink'
カウンタの上位を列挙する	aCounter.most_common(k)
option: グラフの色を青紫に指定する	color = 'violet'
option: ビスク色を使う	color = 'bisque'
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
配列を転置する	aArray.T
option: グラフの色を青緑に設定する	color = 'teal'
ヒストグラムを赤くする	plt.hist(データ列, color='r')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
データフレームを２つの列を用いて整列して、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
option: フォレストグリーン色を用いる	color = 'forestgreen'
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
日付データが日付データより後ろか調べる	aDate > aDate2
データフレームの列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
要素ひとつのタプル	(element,)
オリベドラブ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
色付きの点線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
オブジェクトがn回繰り返すイテラブル	itertools.repeat(element, n)
文字列の開始位置以降が部分文字列で開始するか確認する	s.startswith(sub, start)
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
グラフの見栄えをよくする	import seaborn as sns
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフの色をアクアにセットする	plt.plot(データ列x, データ列y, color='aqua')
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
イテラブルを文字列リストに変換して、'改行を用いて結合する	'\n'.join(map(str, iterable))
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
option: グラフの色をグレーに変更する	color = 'gray'
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列がタプルの要素か調べる	element in aTuple
データフレームの列のユニークな値	df[col].unique()
テンプレートをタプルでフォーマットする	formatText.format_map(aDict)
二つのリストの共通りスト	list(set(aList) & set(aList2))
列を等量でビン数nでビン分割する	pd.qcut(ds, n)
option: ライトイエローを用いる	color = 'lightyellow'
データフレームの中にある日付データとの合計を数える	df.isin([value, value2]).sum()
nが5の倍数かテストする	n % 5 == 0
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
オブジェクトの参照カウントを確認する	sys.getrefcount(obj)
ミントクリーム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
文字列をコロンで区切って、列挙する	s.split(':')
列のNaNを後の行の値に設定する	ds.fillna(method='bfill')
辞書の値に要素は含まれていないか調べる	element not in aDict.values()
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
ミディアムアクアマリン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
option: インディアンレッド色を使う	color = 'indianred'
文字列から部分文字列を除去する	s.replace(sub, '')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
赤いバツマーカーを数列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='r')
キューの中に文字列が存在するか調べる	element in deq
ボックスチャートを描画し、、平均を追加する	plt.boxplot(データ列, showmeans=True)
棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
散布図の四角印の色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
空の階層化マップ	collections.ChainMap()
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
option: 線の種類を破線に変更する	linestyle = 'dashed'
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図を白色として描画する	plt.scatter(データ列x, データ列y, color='white')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
数列とリストの散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
アンティークホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列を部分文字列で分割し、、文字列リストに変換する	s.split(sub)
カウンタをセットに変換する	set(aCounter)
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
文字列はタイトルケース	s.istitle()
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
Pandasで、データ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームのリスト列の中にいくつ日付データがあるか数える	df[aList].isin([value]).sum()
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
タプルの末尾	aTuple[-1]
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
データフレームのn行目を取り出す	df.loc[n]
モジュールを検索するパスにを追加する	sys.path.append(dir)
双方向キューが空でない	len(deq) != 0
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
option: スラッシュを区切りで使う	sep = '/'
option: クリムゾン色を使う	color = 'crimson'
列名を指定された名前リストに置き換える	df.columns = columns
日付時刻データが水曜日	aDatetime.weekday() == 2
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
黒い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
ベクトルの和	aArray + aArray2
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
文字列内にアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
色名をからコードにする	matplotlib.colors.cnames[色名]
データ列の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
実数が有限か調べる	math.isfinite(x)
サイコロ	random.randint(1, 6)
データフレームを関数によってまとめたグループ	df.groupby(関数)
n個分左に両端キューの要素を輪番で回す	deq.rotate(-n)
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
両端キューの先頭に要素を追加する	deq.appendleft(element)
option: グラフの色をベージュに設定する	color = 'beige'
データフレームを列の値でグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
配列の列ごとの平均	np.mean(aArray, axis=0)
数式の積分を求める	sympy.integrate(e)
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
列を更新不能な集合に変換する	frozenset(iterable)
データフレームを複数の列をキーにして並べ直す	df.sort_values(by=column)
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームのカラムの欠損値を直前の値に変更する	df[col].fillna(method='ffill')
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
option: 線の種類を破線に指定する	linestyle = 'dashed'
データ構造を使う	import collections
実数の逆双曲線余弦	math.acosh(x)
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
ベストな位置に凡例を表示する	plt.legend(loc='best')
option: 色をパパイヤウィップに設定する	color = 'papayawhip'
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
少ない方からカウンタを列挙する	aCounter.most_common()[::-1]
ヒストグラムをオーキッド色を使って描画する	plt.hist(データ列, color='orchid')
ユーザから入力される	int(input())
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
範囲を指定して整数乱数を発生させる	random.randint(最小値, 最大値)
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
関数の値によってデータフレームをグループ分けする	df.groupby(関数)
データ列のNaNを最小値で置換する	ds.fillna(ds.min())
エラーなくセットから値を取り除く	aSet.discard(element)
文字列が全てアスキー文字	s.isascii()
縦棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームの中央値	df.median()
リストは全て真か調べる	all(aList)
列の値によってデータフレームをグループ分けして最大値を求める	df.groupby(column).max()
線グラフの色を青に指定する	plt.plot(データ列x, データ列y, color='blue')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
option: バッファリングを無効にする	buffering = 0
データフレームから型型の列を抽出する	df.select_dtypes(ty)
ヒストグラムを白色を使って描画する	plt.hist(データ列, color='white')
三自然数の最大公約数	math.gcd(n, n2, n3)
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
文字列を紫色化する	f'\033[35m{value}\033[0m'
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
行列の行	aArray[行番号]
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
散布図の▼マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列をdatetime64型にする	pd.to_datetime(s)
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
リストの集合	set(iterable)
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
線グラフを青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
文字列がリストに含まれるか調べる	element in aList
option: 紺色を使う	color = 'darkblue'
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
グラフの描画で暗く色を使う	sns.set(pallete='dark')
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
最大値・最小値の範囲を使って一様な疑似乱数を得る	random.uniform(最小値, 最大値)
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
日付時刻データの日	aDatetime.day
日付データをタプルに変換する	aDate.timetuple()
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
Pandasで、データフレームのcollの数値時刻から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
クラス分類をアンサンブル学習を用いて行う	sklearn.ensemble.VotingClassifier()
青緑色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
xが真か	bool(x)
リストの要素を関数に適用した結果で並べる	sorted(aList, key=func)
日付時刻データが何年か知る	aDatetime.year
配列とデータ列の散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
実数のハイパボリック・サイン	math.sinh(x)
option: フォントの色をサドルブラウンに設定する	color = 'saddlebrown'
変数が0に近づく際、数式の極限値を算出する	sympy.limit(e, z, 0)
実数の逆余弦	math.acos(x)
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
データフレームのそれぞれのグループの個数	df.groupby(column).count()
option: パレットトルコイズ色を使う	color = 'paleturquoise'
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
option: ダークグリーンを使う	color = 'darkgreen'
文字列モジュールをインポートする	import string
イテラブルと数列の散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ヒストグラムの色をダークマゼンタに指定する	plt.hist(データ列, color='darkmagenta')
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数をカウントする	s.count(sub, start, end)
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
formatのパターンとして文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: グラフの色を暗い赤に指定する	color = 'darkred'
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
2つのデータフレームを列'A'と列'B'をキーにして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
部分文字列が部分文字列で開始する	s.startswith(sub)
option: レモンシフォン色を使う	color = 'lemonchiffon'
データフレームの尖度を求める	df.skew()
nが5の倍数か調べる	n % 5 == 0
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
日付データが日付データと同時かどうか調べる	aDate == aDate2
等量で配列をn個にビンニングする	pd.qcut(aArray, n)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: フォントの色をブルーバイオレットに変更する	color = 'blueviolet'
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
option: ライトグレーを使用する	color = 'lightgray'
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
リストを中央値で分割する	pd.qcut(aList, 2)
実数をn乗する	x ** n
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
option: グラフの色をモカシンに指定する	color = 'moccasin'
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームのインデックスの名前をまとめてnameからname2に付け直す	df.rename(index={name: name2})
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
リストを白色で表示できる文字列にする	f'\033[37m{value}\033[0m'
試しに何か動かす	print('Hello World')
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
整数nのバイト長	(n.bit_length() + 7) // 8
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームを複数の列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
青色としてヒストグラムを描画する	plt.hist(データ列, color='blue')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
日付データが日付データより先かどうか調べる	aDate < aDate2
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
option: 印を四角に変更する	marker = 's'
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
配列を等しい量になるようにn個にビニングする	pd.qcut(aArray, n)
リストにリストを追加し、拡張する	aList.extend(aList2)
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
実数を小数点以下第一位で丸める	round(x, 1)
リストとリストの散布図をプロットし、マーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
option: フォントの色をシアンに設定する	color = 'cyan'
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
プロットの中の縦軸に説明を付ける	plt.ylabel('y軸ラベル')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ファイルを読み込みモードを用いてオープンして]、fとする	f = open(filepath, mode='r')
行列の行ごとの最小値を求める	np.min(aArray, axis=1)
整数nを十六進表記にする	hex(n)
実数の絶対値	math.fabs(x)
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
変数が無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, oo)
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
n個の要素があるリスト	[element] * n
プロットの描画で色差別なく色を用いる	sns.set(pallete='colorblind')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
ガンマ関数	math.gamma(x)
データフレームの指定された列をリストとして取り出す	df[column].values.tolist()
ゼロ埋めされた配列を初期化する	np.zeros(要素数)
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
浮動小数点数のsinの逆数	math.asin(x)
最大値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].max())
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームを各列毎にグループ化し、、列の合計を計算する	df.groupby(column)[column2].sum()
柱状図の範囲をセットする	plt.hist(データ列, range=(start, end))
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
option: 色をオリベドラブに設定する	color = 'olivedrab'
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
文字列内にひとつでもアルファベットが含まれる	any(c.isalpha() for c in s)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
データフレームとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
文字列をトリムする	s.strip()
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: 上三角印を加える	marker = '^'
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
データ列のNaNを最小値に設定する	ds.fillna(ds.min())
最大値でデータフレームのNaNを埋める	df.fillna(df.max())
紺碧色としてヒストグラムを描画する	plt.hist(データ列, color='azure')
数値を紫色にする	f'\033[35m{value}\033[0m'
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
8進文字列を整数にする	int(s, 8)
データ列の中に文字列が存在するか	ds.isin([value])
シエナ色としてヒストグラムを描画する	plt.hist(データ列, color='sienna')
コロンで区切って２つの数値を表示する	print(value, value2, sep=':')
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
数式処理モジュールを使う	import sympy
データフレームを複数の列で降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
option: 破壊的に操作する	inplace = True
カウンタのキーとカウントを列挙する	aCounter.items()
データフレームを列名リストでによって降順に並べる	df.sort_values(by=column, ascending=False)
エクセルファイルファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
第２コマンド引数	sys.argv[1]
データフレームのリスト列の欠損値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
表の列がx以下の行を抽出する	df[df[column] <= x]
文字列中にひとつでも非空白が含まれるかどうか調べる	any(not c.isspace() for c in s)
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
タプルの先頭を取り除く	aTuple[1:]
option: ▲マーカーを使用する	marker = '^'
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
集合が空でないか調べる	len(aSet) != 0
データフレームのカラムの未入力値を最大値に設定する	df[col].fillna(df[col].max())
横軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
文字列の先頭	s[0]
辞書からキーの値をエラーなく参照する	aDict.get(key, None)
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
行列の形状	aArray.shape
散布図を▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
カテゴリでグループ化して、に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
全ての印字できる文字	string.printable
nがn2の倍数か調べる	n % n2 == 0
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
nはn2	n == n2
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
真紅色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフのバツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
日付時刻データをタプルに変換する	aDatetime.timetuple()
横棒グラフをゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='goldenrod')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
赤い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
パラメータが0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのカラムを百の位で丸める	df[col].round(-2)
パーセプトロンとして回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームのリスト列の中に存在する日付データの合計を数える	df[aList].isin([value]).sum()
変数について数式を積分する	sympy.integrate(e, z)
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
クラス分類をK最近傍法として行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
イテラブルの組み合わせを計算する	itertools.combinations(iterable, n)
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストと配列の散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
タプルからキーの値か、もしくは要素を得る	aDict.get(key, element)
データフレームを列によって並べ直し、、新しい行を加える	df.sort_values(columns).reset_index()
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
データフレームの重複していない行を抽出する	df[not df.duplicated(keep=False)]
モジュールとして自分自身をを得る	sys.modules[__name__]
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
現在の月数	datetime.datetime.today().month
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
文字列の左端から空白を除去する	s.lstrip(' ')
グラフのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
配列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
option: シスルにグラフの色を設定する	color = 'thistle'
配列とリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
小文字を大文字に変換する	s.upper()
文字列の後ろから部分文字列を探す	s.rfind(sub)
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
データフレームを各列毎にグループ化し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
列から計数器を作る	collections.Counter(iterable)
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
option: ダークオレンジ色を使う	color = 'darkorange'
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
文字列から部分文字列を全て除去する	s.replace(sub, '')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
データフレームを'A'列の値でグループ化し、要約統計量を計算する	df.groupby('A').describe()
ファイルパスをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
データフレームから数値データの列のみ取り出す	df.select_dtypes('number')
散布図を黒い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
配列の分散	np.var(aArray)
折れ線グラフをハニーデュー色を使って描画する	plt.plot(データ列x, データ列y, color='honeydew')
青紫色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
文字列を部分文字列で分けた場合の後半の文字列	s.partition(sub)[-1]
要素が辞書の値として含まれているかどうか調べる	element in aDict.values()
数値の平方根を求める	sympy.sqrt(e)
データフレームの列がxの行を選択する	df[df[column] == x]
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
日付データからn日分引く	aDate - datetime.timedelta(days=n)
コーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームとデータフレームの列を連結する	pd.concat([df, ds], axis=1)
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
データフレームを表示するとき小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
二つの変数を文字列で区切って出力する	print(value, value2, sep=s)
数式のパラメータに数式を代入する	e.subs(z, e2)
プラム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
等量でデータフレームの中のカラムをビン数nでビン分割する	pd.qcut(df[col], n)
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
平均と標準偏差から疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
option: トマトを使う	color = 'tomato'
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
日付データにn週間を足す	aDate + datetime.timedelta(weeks=n)
整数nが配列のどれかか	n in aArray
表データから重複した行をドロップして更新する	df.drop_duplicates(inplace=True)
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
option: ダークターコイズ色を使う	color = 'darkturquoise'
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
浮動小数点数のn乗を算出する	x ** n
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
時刻を用いる	import datetime
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
コーンズシルク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategray')
淡く色をグラフの描画で使う	sns.set(pallete='muted')
データ列を等間隔でn個に分割する	pd.cut(ds, n)
商と余りを同時に計算する	divmod(x, y)
データフレームのn行まで取り出す	df[:n]
xをブール値に変換する	bool(x)
連立方程式を解く	sympy.solve([e, e2])
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームのカラムを10の位で丸めて整数にする	df[col].round(-1).astype(int)
リストとリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
UNIXコマンドtextを実行する	os.system(text)
option: ホットピンク色を使う	color = 'hotpink'
配列を元に全要素が0の配列	np.zeros_like(aArray)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
ヒストグラムをネイビー色を使って描画する	plt.hist(データ列, color='navy')
グラフの描画でパステル調にテーマを使う	sns.set(pallete='pastel')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
カラムのNaNを最小値で置換する	ds.fillna(ds.min())
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
ディムグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ファイルの絶対パスを求める	os.path.abspath(filepath)
サーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
option: グラフの色をオリベドラブにセットする	color = 'olivedrab'
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
データ列のどの値が最も現れるか見る	ds.mode()
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
日付データが水曜日か	aDate.weekday() == 2
双方向キューをクリアする	deq.clear()
option: カデットブルーにフォントの色を設定する	color = 'cadetblue'
option: 配列のデータ型を指定する	dtype = np.int8
リストの変遷を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ミディアムオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumorchid')
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
option: グラフの色をインディゴに設定する	color = 'indigo'
オブジェクトを文字列に変換する	str(obj)
線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームの平均値	df.mean()
ターコイズ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: 真紅にフォントの色を変更する	color = 'crimson'
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
カラーパレットを濃くする	sns.set(pallete='deep')
リストとデータ列の散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
option: 星マーカーを加える	marker = '*'
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
カウンタ同士でユニオンを算出する	aCounter | aCounter2
option: ヘッダをnamesに設定する	header = names
グリッドを実線にする	plt.grid(linestyle='solid')
折れ線グラフの色をコーラルにセットする	plt.plot(データ列x, データ列y, color='coral')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
文字列がタプルに含まれる	element in aTuple
option: ライトグリーン色を使う	color = 'lightgreen'
組をリストに変換する	list(aTuple)
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
数式の展開を行う	sympy.expand(e)
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
バイトオーダ	sys.byteorder
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
リストをカウンタにする	collections.Counter(iterable)
ヒストグラムの色をライトスレイグレーにする	plt.hist(データ列, color='lightslategray')
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
新しいロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: マルーン色を使う	color = 'maroon'
rgbの右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ひとつ置きにタプルを取り出す	aTuple[::2]
折れ線グラフをミディアムブルー色を使って描画する	plt.plot(データ列x, データ列y, color='mediumblue')
nが一桁の数か調べる	0 <= n <= 9
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
辞書をカウンタに変換する	collections.Counter(aDict)
標準エラーを得る	sys.stderr
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
データフレームを各列毎に集約して、列の最小値を算出する	df.groupby(column)[column2].min()
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
データフレームをJSONLファイルに書き込む	df.to_excel(filename)
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
ダークバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
オブジェクトは数値か調べる	isinstance(obj, (int,float))
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
データ列が何時か見る	ds.dt.hour
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
nがn2で割り切れる	n % n2 == 0
黒いポイントマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
グラフの描画で色差別なく色を使う	sns.set(pallete='colorblind')
option: フォレストグリーンにフォントの色を設定する	color = 'forestgreen'
nがn2よりも小さいか調べる	n < n2
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
日付データが火曜日か	aDate.weekday() == 1
棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ブール型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
リストとリストの散布図を描いて、マーカーを大バツにセットする	plt.plot(データ列x, データ列y, marker='X')
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
スノー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
TSVファイルをヘッダなしで読む	pd.read_csv(filename, header=None)
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
浮動小数点数に実数を掛ける	x * y
二つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
option: ローングリーンにグラフの色をセットする	color = 'lawngreen'
リストとリストの散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
リストが空か調べる	len(aList) == 0
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムを上限から下限までの区間でプロットする	plt.hist(データ列, range=(start, end))
option: パープル色を使う	color = 'purple'
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
グラフを画面用に変更する	sns.set(context='notebook')
タプルをリストに変換する	list(aTuple)
option: グラフの色をダークシアグリーンに指定する	color = 'darkseagreen'
文字列を空白で右から区切る	s.rsplit()
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフの左三角印の色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
横棒グラフをラベンダーブラッシュ色を用いて描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
option: 丸マーカーを用いる	marker = 'o'
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
option: フォントの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
折れ線グラフの色を珊瑚に指定する	plt.plot(データ列x, データ列y, color='coral')
散布図をホワイト色で描画する	plt.scatter(データ列x, データ列y, color='white')
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
エラーなくマッピングからキーの値を参照する	aDict.get(key, None)
option: サンディーブラウン色を使う	color = 'sandybrown'
n行を重複ありでデータフレームからランダムにサンプリングする	df.sample(n, replace=True)
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
日付時刻データが金曜日	aDatetime.weekday() == 4
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
折れ線グラフの右三角印を黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
option: ハニーデュー色を使う	color = 'honeydew'
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
辞書の値の一覧	aDict.values()
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
コーンズシルクにヒストグラムの色を変更する	plt.hist(データ列, color='cornsilk')
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームを複数の列で並べ直し、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフを青緑色を使って描画する	plt.plot(データ列x, データ列y, color='teal')
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
散布図をグリーンイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
グラフのx座標のラベルを指定する	plt.xlabel('x軸ラベル')
全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
数列とリストの散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのリストカラムの中に含まれる文字列の個数を数える	df[aList].isin([value]).sum()
xを論理値に変換する	bool(x)
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
option: グレー色を使用する	color = 'gray'
データフレームのリストカラムを整数に丸める	df[aList].round()
赤い▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列中に部分文字列が含まれるかどうか調べる	sub in s
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
nが-9以上9以下か調べる	-9 <= n <= 9
文字列の接頭辞が部分文字列	s.startswith(sub)
データフレームのカラムの値が欠損値か調べる	df[col].isna()
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
データフレームの上n行を見る	df.head(n)
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
option: 決定木の深さを制限する	maxdepth = n
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
option: ライムグリーン色を使う	color = 'limegreen'
線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
配列とリストの散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームの列を小数点以下n桁で丸める	df[col].round(n)
option: 青紫色を使う	color = 'violet'
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
ビン数nとして配列を等量で分割する	pd.qcut(aArray, n)
縦棒グラフを描画してラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームを'A'列でソートし、NaNを先頭にする	df.sort_values(by='A', na_position='first')
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
option: マルーンを用いる	color = 'maroon'
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
データ列をn個にビン分割する	pd.cut(ds, n)
配列のデータ型	aArray.dtype()
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
フォーマットを用いて文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
グリーン色としてヒストグラムを描画する	plt.hist(データ列, color='green')
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
リストの中の最大値	max(aList)
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
0から始まるn個の整数列	list(range(n))
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
カデットブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
データフレームをサンプリングする	df.sample()
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ファイルの拡張子付きのファイル名	os.path.basename(filepath)
散布図の丸印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
変数について数式の微分を行う	sympy.diff(e, z)
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
パラメータについて数式の積分を行う	sympy.integrate(e, z)
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
option: ゲインズボロ色を使う	color = 'gainsboro'
配列とリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
色をパステル調にする	sns.set(pallete='pastel')
option: ナバホホワイト色を使う	color = 'navajowhite'
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列の中の大文字・小文字を無視して正規表現による全マッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
リストとリストについて散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのn行以降抽出する	df[n:]
nにn2を加える	n + n2
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
t-SNEを用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
文字列の開始位置番目からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
option: 印の大きさを変える	markersize = 2.0
ファイルを書き込みモードとしてオープンする]	open(filepath, mode='w')
オブジェクトのハッシュ値	hash(obj)
データフレームの列と列に重複があれば、消す	df.drop_duplicates(subset=column)
ターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
キーがマップ上で定義済みか調べる	key in aDict
option: グラフのラインスタイルを実線に指定する	linestyle = 'solid'
行列の列ごとの分散	np.var(aArray, axis=0)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
行列の差	aArray - aArray2
文字列の最後	s[-1]
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
データ列の未入力値を最大値に増やす	ds.fillna(ds.max())
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームのそれぞれのグループの最大値	df.groupby(column).max()
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
切片なしの単回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ガウス過程分類モデルを作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
option: 書き込みモードを使う	mode = 'w'
option: インディゴ色を使う	color = 'indigo'
二つのリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
集合を変更不能な集合に変換する	frozenset(aSet)
option: 色をゴールドにセットする	color = 'gold'
イテラブルを累加した列	itertools.accumulate(iterable)
nがn2よりも大きいか調べる	n > n2
折れ線グラフの印を▽にする	plt.plot(データ列x, データ列y, marker='v')
データフレームを複数の列によって昇順に整列して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ベクトルを一次元にする	aArray.flatten()
リストとリストについての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
カラムを整数に丸める	ds.round()
option: アンティークホワイトを使う	color = 'antiquewhite'
nのn2乗	n ** n2
タプルをひとつ置きに得る	aTuple[::2]
縦棒グラフをプロットして、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
プラットホームの名前	sys.platform
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: マーカーを三角に変更する	marker = '^'
データフレームを列の値によってグループ化して、各グループの個数を求める	df.groupby(column).count()
両端キューの順を右にn個分ローテンションする	deq.rotate(n)
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフの左三角印を青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
ライトコーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
option: オレンジを用いる	color = 'orange'
データフレームのリストカラムの未入力値を直前の値で埋める	df[aList].fillna(method='ffill')
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
実数を小数点で丸める	round(x, n)
フォレストグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
赤い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
option: グラフの色をモカシンに設定する	color = 'moccasin'
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
半透明の一点鎖線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
モデルを当てはめる	model.fit(説明変数, 目的変数)
データフレームの最後n行を抽出する	df.tail(n)
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
タプルの合計値を計算する	sum(aTuple)
二つのリストをカンマで区切って表示する	print(value, value2, sep=',')
データフレームを列によって整列して新しいインデックスを加える	df.sort_values(columns).reset_index()
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
JSONファイルのfをデータに変換する	json.load(fin)
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
整数nが組のどれか	n in aTuple
データフレームのカラムの値は欠損値か調べる	df[col].isna()
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームの列の分散	df[col].var()
二つのオブジェクトは同じ	obj is obj2
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
データ列を10の位で丸める	ds.round(-1)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
配列とリストの散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームを複数の列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
8進数文字列をバイナリにする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
破壊的に列を用いて大きい順にデータフレームを整列する	df.sort_values(by=column, ascending=False, inplace=True)
データフレームのカラムを散布図で描画して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
リストは少なくとも一つ真か調べる	any(aList)
０で全要素を初期化した行列	np.zeros(行数, 列数)
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
データフレームを列名リストの値によってまとめたグループ	df.groupby(columns)
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
黒い丸マーカーを配列と配列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
ISO8601の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
集合をイミュータブルなセットに変換する	frozenset(aSet)
option: シーグリーン色を使う	color = 'seagreen'
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
タプルの最後	aTuple[-1]
日付時刻データが日付時刻データと同時かどうか	aDatetime == aDatetime2
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
nかけるn2	n * n2
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
縦棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
カウンタの文字列を一つ増やす	aCounter[element] += 1
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
option: オレンジレッド色を使う	color = 'orangered'
データフレームの列の標準偏差	df[col].std()
データ列を中央値でビン分割する	pd.qcut(ds, 2)
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
黒い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
option: マゼンタに色を設定する	color = 'magenta'
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
ファイルをデータフレームとして読み込む	pd.read_excel(filename)
青い一点鎖線を用いてイテラブルの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
nが一桁の数	0 <= n <= 9
オブジェクトが集合型か調べる	isinstance(obj, set)
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
英数字が文字列内に含まれるか	any(c.isalnum() for c in s)
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
Pandasでデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col])
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
カウンタの項目を列挙する	aCounter.keys()
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
オブジェクトはリストクラスか調べる	isinstance(obj, list)
カウンタをイテラブルで更新する	aCounter.update(iterable)
二つの集合の和集合	aSet.union(aSet2)
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
フォレストグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
option: オールドレースにグラフの色を設定する	color = 'oldlace'
文字列でフォーマットして日付データを文字列にする	"aDate.strftime(""%d/%m/%y"")"
リストの中の最小値	min(aList)
タプルの要素をソートする	sorted(aTuple)
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列の開始位置以降が部分文字列で開始するかどうかテストする	s.startswith(sub, start)
option: フローラルホワイト色を使用する	color = 'floralwhite'
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
オブジェクトがリストかタプルかテストする	isinstance(obj, (list)
イテラブルを文字列に変換して、部分文字列で結合する	sub.join(map(str, iterable))
option: 色をゴールデンロッドに指定する	color = 'goldenrod'
整数nの十六進文字列	hex(n)[2:]
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
n2がn以上かつ、n3以下	n <= n2 and n2 <= n3
ゼロ埋めした８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
実数の正弦	math.sin(x)
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
ファイルパスの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
カラムを10の位で四捨五入する	ds.round(-1)
両端キューの末尾から要素を取り除く	deq.pop()
シーケンスから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
本日が何曜日か知る	datetime.datetime.today().weekday()
三数の最大値	max(x, y, z)
文字列をカンマで区切って、列挙する	s.split(',')
文字列の右側から空白を取り除く	s.rstrip()
スピアマンの順位相関係数を算出する	scipy.stats.spearmanr(データ列, データ列2)
辞書をコピーする	aDict.copy()
n個にリストを等間隔で分割する	pd.cut(aList, n)
データフレームを列名リストでによって破壊的にソートする	df.sort_values(by=column, inplace=True)
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
マッピングから項目名の値を参照する	aDict.get(key)
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
実数の小数点を四捨五入する	round(x)
データフレームを列によって分類し、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
データ列の度数分布図を描画する	plt.hist(データ列)
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
両端キューのn番目を使う	deq[n]
改行する	print()
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列])
タプルの値を逆順にする	aTuple[::-1]
全要素を初期値で初期化した配列を作る	np.full(要素数, 初期値, dtype=np.int)
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: フォントの色をダークゴールデンロッドに指定する	color = 'darkgoldenrod'
option: マーカーの色を深紅にする	markerfacecolor = 'crimson'
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
ファイルが存在するか調べる	os.path.exists(filepath)
カラムがどの程度、分散しているか確認する	ds.var()
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
折れ線グラフの色を黄色にする	plt.plot(データ列x, データ列y, color='yellow')
整数nがタプルのどれかか確認する	n in aTuple
ゼロ埋めされた配列	np.zeros(要素数)
option: パウダーブルー色を使用する	color = 'powderblue'
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
辞書を計数器にする	collections.Counter(aDict)
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
リストをy軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームを'A'列を用いてソートして、更新する	df.sort_values(by='A', inplace=True)
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
折れ線グラフを色付きの実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
データフレームを複数の列の値によってグループ分けする	df.groupby(columns)
整数の階乗を算出する	math.factorial(n)
option: ゴールド色を使用する	color = 'gold'
線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
変数について数値を微分する	sympy.diff(e, z)
option: 色をナバホホワイトに設定する	color = 'navajowhite'
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
二変数の最大値	max(x, y)
バイナリ書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='wb')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
列をキーにして２つの表データを内部結合する	pd.merge(df, df2, on=column, how='inner')
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームを各列と列の組み合わせ毎に集約して個数を求める	df.groupby([column, column2], as_index=False).count()
折れ線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
集合から別の集合との共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
nを八進文字列にする	oct(n)[2:]
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
option: 青緑を使う	color = 'turquoise'
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
ファイル全体を行分割して読み込む	f.readlines()
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
日付時刻データの時間数	aDatetime.hour
グラフに鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
折れ線グラフの色をダークレッドに指定する	plt.plot(データ列x, データ列y, color='darkred')
整数nを二進表現にする	bin(n)
部分文字列が文字列の開始位置と終了位置の間に含まれる	s.find(sub, start, end) != -1
作画で使用するフォントを指定する	sns.set(font=フォント名)
データフレームを列で並べる	df.sort_values(by=column)
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
集合から要素を全て除去する	aSet.clear()
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
option: ベージュに色をセットする	color = 'beige'
配列にはいくつ要素があるか調べる	aArray.size
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
一点鎖線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
散布図に黒い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
ローングリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
小数点数のルートを算出する	math.sqrt(x)
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
タプルのキーを列挙する	list(aDict)
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
データフレームで、列の重複を見る	df.duplicated(subset=column)
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
リストをイミュータブルにする	tuple(aList)
組の末尾からn番目以前の部分を取り出す	aTuple[:-n]
option: 色をアイボリーにセットする	color = 'ivory'
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
配列とリストについて散布図を描いて、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
文字列をエンコーディングによってバイト列に変換する	s.encode(encoding=encoding)
データ列の秒	ds.dt.second
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
グラフで使うフォントを指定する	sns.set(font=フォント名)
データフレームのリストカラムの25パーセンタイル	df[aList].quantile(0.25)
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
配列を縦軸、リストを横軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
データ列を100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
イテラブルと配列について散布図を描画して、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
ファイルを開いて]、書き込みストリームを見る	open(filepath, mode='w')
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
ライトシアン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
青い一点鎖線としてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: シャルトリューズ色を使用する	color = 'chartreuse'
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
降順に'A'列によってデータフレームを破壊的に整列する	df.sort_values(by='A', ascending=False, inplace=True)
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
データフレームのリストカラムを丸める	df[aList].round()
ヒストグラムの線の種類を一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
データ列の折れ線グラフを三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
紺色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
読み込みモードでファイルパスをオープンして]fとする	f = open(filepath, mode='r')
リストと数列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
２つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
データフレームを'A'列ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
非数値データ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
散布図を▽マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの各グループごとの平均値	df.groupby(column).mean()
option: グラフの色をライトシアンに変更する	color = 'lightcyan'
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
option: グラフの色をペルーに設定する	color = 'peru'
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgray')
filepathにカレント作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
リストの要素を昇順に並べ直す	sorted(aList, reverse=False)
プラットフォームの符号付き整数の最大値	sys.maxsize
モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
option: グラフの色をインディアンレッドにする	color = 'indianred'
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
数値を黒色で表示する	print(f'\033[30m{value}\033[0m')
predicateFuncがtrueとならない列の部分	itertools.dropwhile(predicateFunc, iterable)
データフレームが正規分布からどの程度歪んでいるか調べる	df.kurt()
数のn乗	x ** n
配列の形	aArray.shape
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームの中で列と列の重複を見る	df.duplicated(subset=[column, column2])
カウンタの積集合	aCounter & aCounter2
xを整数にする	int(x)
リストと配列についての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
リストのn番目を削除する	del aList[n]
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
データフレームの列の文字列長を列として使う	df[col].str.len()
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
nが正の整数か調べる	n > 0
棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
ファイルをUTF8を用いてオープンする]	open(filepath, encoding='utf-8')
無限大	math.inf
xの小数点以下'1'桁の文字列にする	':.1f'.format(x)
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
リストのn番目以降の部分を得る	aList[n:]
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームのカラムを1000の位で丸める	df[col].round(-3)
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
option: グラフの色をベージュに変更する	color = 'beige'
データフレームのカラムの欠損値を最頻値に変更する	df[col].fillna(df[col].mode().iloc[0])
データフレームのリストカラムの欠損値を50パーセンタイルで埋める	df[aList].fillna(df[aList].median())
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データ列の未入力値を中央値で埋める	ds.fillna(ds.median())
整数nの8進文字列	oct(n)[2:]
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
option: 小麦色色を用いる	color = 'wheat'
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
カテゴリ列で色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
オブジェクトが論理値か調べる	isinstance(obj, bool)
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ファイルが存在しないかどうか調べる	not os.path.exists(filepath)
グリーンイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
実数の平方根を求める	math.sqrt(x)
オプションで、標準エラーに出力する	file = sys.stderr
日付時刻データが日付時刻データより遅いか調べる	aDatetime > aDatetime2
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
option: グラフの色をダークグレーに変更する	color = 'darkgray'
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
スクリプトの名前	sys.argv[0]
数列とリストについて散布図を描画して菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
文字列の先頭の空白を取り除く	s.lstrip()
横棒グラフをパープル色を使って描画する	plt.barh(データ列x, データ列y, color='purple')
折れ線グラフの色をカラーコードとしてする	plt.plot(データ列x, データ列y, color='#800080')
データフレームを表示するとき、列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
predicateFuncが真となるイテラブルの部分を取り出す	itertools.takewhile(predicateFunc, iterable)
既存のファイルパスを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
変数を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
青い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
オブジェクトは数値	isinstance(obj, (int,float))
データフレームの先頭n行	df.head(n)
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
ヒストグラムの線の種類を破線にする	plt.hist(データ列, linestyle='dashed')
ラインを赤い点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データ列の時	ds.dt.hour
nまたはn2	n or n2
列をイミュータブルな集合にする	frozenset(iterable)
イテラブルの各要素を両端キューの末尾に追加する	deq.extend(iterable)
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
配列と同じ大きさの空ベクトルを作成する	np.empty_like(aArray)
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
辞書からキーで指定された項目をポップする	aDict.pop(key)
ラインを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームを列で集約して列の要約統計量を求める	df.groupby(column).describe()[column2]
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
rgbの▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを列でで降順にソートする	df.sort_values(by=column, ascending=False)
ファイルパスを絶対パスに変換する	os.path.abspath(filepath)
度数分布図を二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームのカラムを散布図で可視化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームをグループ化し、列に対し合計を求める	df.groupby(column)[column2].sum()
データフレームを各列毎に集約し、、列の分散を求める	df.groupby(column)[column2].var()
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
2つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
文字列が全てアルファベットかどうか調べる	s.isalpha()
クラスのサブクラスかどうか調べる	issubclass(サブクラス, クラス)
文字列中に部分文字列が含まれないか調べる	sub not in s
標準入力から1行だけ読む	sys.stdin.readline()
両端キューが空か調べる	len(deq) == 0
折れ線グラフをプラム色を用いて描画する	plt.plot(データ列x, データ列y, color='plum')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
データ列とデータ列について散布図をプロットしてマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
グラフのタイトルを設定する	plt.title('グラフの名称')
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
ファイルから書き込みストリームを開いて]fとする	f = open(filepath, mode='w')
option: グラフの色をライトグレーに指定する	color = 'lightgrey'
改行付きでタプルを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
本日の日付	datetime.date.today()
データフレームの列がx以下の行を取り出す	df[df[column] <= x]
option: マーカーを下三角に変更する	marker = 'v'
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
小数点数の正弦の逆数	math.asin(x)
ヒストグラムをアリスブルー色として描画する	plt.hist(データ列, color='aliceblue')
データフレームの列を100の位で丸めて、整数にする	df[col].round(-2).astype(int)
データフレームのリスト列の中央値を計算する	df[aList].median()
文字列が部分文字列で終わるか調べる	s.endswith(sub)
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
タプルを順序付けする	enumerate(aTuple)
データ列の中にいくつ文字列が存在するか数える	ds.isin([value]).sum()
集合が空か調べる	len(aSet) == 0
グラフの色を全般的に暗くする	sns.set(pallete='dark')
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
ヒストグラムで数列を描画する	plt.hist(データ列)
option: グラフの色をフクシアに設定する	color = 'fuchsia'
option: デピンク色を使う	color = 'deeppink'
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
ファイルを全部、読み込む	f.read()
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
データフレームのリストカラムを百の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
データ列とリストの散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
option: グレー色を使用する	color = 'grey'
スピアマン相関係数としてデータフレームの相関行列	df.corr(method='spearman')
option: グラフの色をグリーンに設定する	color = 'green'
データフレームの列の値がxより大きいデータを取り出す	df[df[column] > x]
option: グラフの色をネイビーに設定する	color = 'navy'
散布図に丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
部分文字列か調べる	sub in s
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
データフレームを破壊的に列によってによってソートする	df.sort_values(by=column, inplace=True)
散布図にrgbのダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
option: 印をダイアモンドに変更する	marker = 'D'
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
浮動小数点数が負の数	x < 0
ヒストグラムの色をミディアムパープルに指定する	plt.hist(データ列, color='mediumpurple')
入力ストリームを全部読み込む	f.read()
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
表を２つの列の値毎にグループ化し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
オブジェクトにフィールドが存在するか	hasattr(obj, プロパティ名)
リストの末尾から要素を取り出す	aList.pop()
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
二つの文字列を改行なしに表示する	print(value, value2, end='')
2つのオブジェクトが同一参照かどうか確認する	obj is obj2
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
カテゴリで色分けして、データフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
ファイルからの読み込みストリームを見る	open(filepath)
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
乱数で要素を埋めた配列	np.random.random(N)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
行列のユニークな要素とその位置を計算する	u, indices = np.unique(aArray, return_index=True)
データ列の散布図をプロットする	plt.scatter(データ列x, データ列y)
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
ファイルをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
日付時刻データは何日か知る	aDatetime.day
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
実行時の標準出力の出力先がターミナルかどうか	sys.stdout.isatty()
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
リストとリストについての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
最大値でデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].max())
実行時に標準出力がパイプ	not sys.stdout.isatty()
表データから指定された４列を選ぶ	df[[column, column2, column3, column4]]
データ列の欠損値をxで埋める	ds.fillna(x)
データフレームのリストカラムを四捨五入して、整数型にする	df[aList].round().astype(int)
スピアマン相関係数を用いてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
行列の列ごとの合計	np.sum(aArray, axis=0)
複数の列でデータフレームを小さい順にソートする	df.sort_values(by=column, ascending=True)
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
クラスが名前付きタプルか調べる	issubclass(C, tuple)
option: バイナリ書き込みモードを使う	mode = 'wb'
データフレームの各次元の大きさを見る	df.shape
数列とリストについて散布図を描画してマーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
リストを緑色にする	f'\033[32m{value}\033[0m'
option: ミディアムターコイズ色を使用する	color = 'mediumturquoise'
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
アンダーライン付きで文字列をプリントする	print(f'\033[4m{value}\033[0m')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
ヒストグラムをライトグレー色を用いて描画する	plt.hist(データ列, color='lightgrey')
データフレームの値をreplに正規表現patternで置換する	df.replace(pattern, repl, regex=True)
nとn2の値を足してnに代入する	n += n2
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
データフレームのカラムが何分か確認する	df[col].dt.minute
カウンタの正の数のみ残す	+aCounter
文字列をセパレータで区切って、列挙する	s.split(sep)
option: ダークサーモン色を使う	color = 'darksalmon'
nとn2が等しいか調べる	n == n2
棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
文字列に漢字があるか調べる	re.search('[\u4E00-\u9FD0]', s)
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームを各列と列の組み合わせ毎に集計して、合計を算出する	df.groupby([column, column2], as_index=False).sum()
データラベルの位置を(x,y)に変更する	plt.legend(loc=(x, y))
データフレームを10の位で丸める	df.round(-1)
データフレームのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
スレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
等量でビン数nでデータ列をビン分割する	pd.qcut(ds, n)
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
ベクトルの差	aArray - aArray2
データフレームの列の要約統計量を求める	df[col].describe()
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
本日が何日か知る	datetime.datetime.today().day
リストの文字列の位置をエラーなく求める	aList.index(element) if element in aList else -1
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
option: グラフの色をライトグレーに変更する	color = 'lightgray'
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
option: 耐火レンガにフォントの色を設定する	color = 'firebrick'
データフレームの列の文字列で文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
option: ライトイエロー色を使う	color = 'lightyellow'
option: 箱髭図を横方向にする	vert = False
データフレームのリストカラムのNaNを平均値に指定する	df[aList].fillna(df[aList].mean())
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
代数計算を使う	import sympy
文字列内にひとつでも英数字がある	any(c.isalnum() for c in s)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
散布図に赤い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
イテラブルとシーケンスを連結する	itertools.chain(iterable, iterable2)
データフレームのカラムの中に文字列があるか確認する	df[col].isin([value])
リストを文字列に変換して一つにする	''.join(map(str, iterable))
実測値を分類モデルの予測値と対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: ダークグレーに色を指定する	color = 'darkgray'
数を万の位で丸める	round(x, -4)
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
ヒストグラムの色をオリーブにする	plt.hist(データ列, color='olive')
キーが辞書上で定義済み	key in aDict
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
データフレームを２つの列によって降順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
option: 色を淡いピンク色に設定する	color = 'lightpink'
option: 欠損値も無視しない	dropna = True
文字列の左側からタブを除去する	s.lstrip('\t')
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
八進数字を全部使う	string.octdigits
文字列の右側から空白を取り除く	s.rstrip(' ')
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
縦棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
option: セパレータを改行にする	sep = '\n'
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
Pandasで、数値時刻の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
散布図をrgbの左三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ミディアムシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
辞書からキーの値	aDict.get(key)
アルファベットを全部見る	string.ascii_letters
文字列を下線付きにする	f'\033[4m{value}\033[0m'
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
xを整数に変換する	int(x)
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
データフレームの中のカラムを分割する	pd.cut(df[col], aList)
データ列の中の欠損値の合計を数える	ds.isna().sum()
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
日付データが木曜日かどうか判定する	aDate.weekday() == 3
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
文字列を赤色にする	f'\033[31m{value}\033[0m'
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
縦棒プロットをプロットして、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
辞書でカウンタを更新する	aCounter.update(aDict)
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
列を周期的に繰り返す	itertools.cycle(iterable)
データフレームを破壊的に複数の列によってを用いてソートする	df.sort_values(by=column, inplace=True)
データ列の各データが何回出現するか見る	ds.value_counts()
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
nからn2を引いてnにする	n -= n2
自然数LCMを求める	math.lcm(n, n2)
赤い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
nilに等しい値	None
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ファイルパスを書き込みモードとして開いて]、fとする	f = open(filepath, mode='w')
option: 大バツ印を使う	marker = 'X'
データフレームのカラムの値は欠損値	df[col].isna()
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
二点間のユークリッド距離	math.dist(point, point2)
ファイルを開き]追加ストリームを求める	open(filepath, mode='a')
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
nをn2で割った余り	n % n2
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
行列の最大	np.max(aArray)
日付時刻データが何秒か知る	aDatetime.second
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
数値を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
配列の形状	aArray.shape
ヒストグラムを黒くする	plt.hist(データ列, color='k')
データフレームから重複するデータを残さず、消す	df.drop_duplicates(keep=False)
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
改行	'\n'
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図を黒い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 貝殻色を使う	color = 'seashell'
リストとリストの散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
縦棒グラフをダークグレー色を使って描画する	plt.bar(データ列x, データ列y, color='darkgrey')
option: ディムグレーを使う	color = 'dimgray'
文字列の無限イテラブルを得る	itertools.repeat(element)
リストと配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
イテラブルとリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
全句点文字	string.punctuation
現在の分	datetime.date.today().minute
カラムの尖度	ds.skew()
nが5の倍数か確認する	n % 5 == 0
折れ線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
ポスターにグラフの目的を設定する	sns.set(context='poster')
イテラブルをダミー変数にする	pd.get_dummies(iterable)
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
y軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
データ列の中に日付データとが含まれるか調べる	ds.isin([value, value2])
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
文字列を右側から空白で区切る	s.rsplit()
日付データからn秒を引く	aDate - datetime.timedelta(seconds=n)
option: 文字コードを文字コードtextに変更する	encoding = text
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
ファイルがある	os.path.exists(filepath)
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームを列を用いて降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームの列の文字列長を列として見る	df[col].str.len()
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
option: 貝殻にグラフの色を変更する	color = 'seashell'
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
折れ線グラフに菱形印を加える	plt.plot(データ列x, データ列y, marker='D')
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
アルファベットの小文字を全部使う	string.ascii_lowercase
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
データフレームをグループ化し各列に対し最大値を算出する	df.groupby(column)[column2].max()
二つの列の値によってデータフレームを集約する	df.groupby(['A', 'B'])
データフレームの列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
赤い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
白色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
リストを順に表示する	print(*aList)
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
option: 線の種類を実線に設定する	linestyle = 'solid'
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
文字列を空白で区切って、文字列リストにする	s.split()
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
文字列が文字列より辞書順で前かどうかテストする	s < s2
リストの最初を捨てる	aList[1:]
option: インデックスを自動的な連番にする	index_col = None
オプションで、標準エラーを出力にする	file = sys.stderr
option: アリスブルー色を使う	color = 'aliceblue'
データフレームの欠損値を最頻値で補う	df.fillna(df.mode().iloc[0])
データ列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
データフレームの列を並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
ヒストグラムの色を青紫にセットする	plt.hist(データ列, color='violet')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
行列の列ごとの標準偏差	np.std(aArray, axis=0)
自然数個のものからk個取り出したときの並べ方	math.perm(n, k)
データフレームの列を目的変数にする	目的変数 = df['列名']
nマイナスn2	n - n2
データフレームの空文字を未入力値に変換し、ドロップする	df.replace('', np.nan).dropna()
ゼロ埋めされた配列を作る	np.zeros(要素数)
折れ線グラフをダークグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkgrey')
nが奇数か確認する	n % 2 == 1
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
option: 色をダークオレンジに変更する	color = 'darkorange'
黒い丸マーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
要素は集合の要素でない	element not in aSet
ふたつの集合のいずれか一方だけの集合を見る	aSet.symmetric_difference(aSet2)
入力ストリームを全部、読み込む	f.read()
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
整数を十六進文字列にする	x.hex()
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
双方向キューに要素をエンキューする	deq.appendleft(element)
option: データ型を指定する	dtype = np.uint8
作画の背景色を暗くする	sns.set(style='darkgrid')
整数nを八進文字列にする	oct(n)[2:]
二つの浮動小数点数は十分に近い	math.isclose(x, x2)
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
nとn2の積を求める	n * n2
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
空白	' '
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
散布図の左三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
数式の簡略化を行う	sympy.sympify(e)
数式のパラメータにnを代入する	e.subs(z, n)
データフレームから列を３つ選択する	df[[column, column2, column3]]
乱数の行列	np.random.random((行数, 列数))
グラフを画面用に設定する	sns.set(context='notebook')
データフレームから最初の列を消す	df[df.columns[1:]]
二つのデータフレームを列をキーにして内部結合する	pd.merge(df, df2, on=column, how='inner')
表データの各グループごとの最大値	df.groupby(column).max()
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
ファイルパスからファイル名を求める	os.path.basename(filepath)
データフレームを各列毎にグループ化して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
option: ヘッダを自動的な連番に設定する	header = None
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
実数のn乗	pow(x, n)
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
predicateFuncが真となる列の部分	itertools.dropwhile(predicateFunc, iterable)
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームのリストカラムの欠損値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
option: 改行コードを旧Macに設定する	newline = '\r'
マッピングを浅くコピーする	aDict.copy()
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
データ列の標準偏差	ds.std()
日付時刻データの時刻	aDatetime.time()
グリッドを点線にする	plt.grid(linestyle='dotted')
option: ボックスチャートを横向きにする	vert = False
データ列とリストについての散布図に上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
option: 白色を使う	color = 'white'
option: ゴーストホワイト色を使う	color = 'ghostwhite'
リストとリストの散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームを二つの列で並べる	df.sort_values(by=['A', 'B'])
リストとリストについての散布図に上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
双曲線余弦の逆数	math.acosh(x)
Pandasで日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
option: 星マーカーを使う	marker = '*'
数式を変数について微分する	sympy.diff(e, z)
マップの全エントリをクリアする	aDict.clear()
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
行列の内積	np.dot(aArray, aArray2)
数から実数を減ずる	x - y
要素が集合に含まれないか調べる	element not in aSet
ダークグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
複数のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
JSONLファイルにデータフレームを保存する	df.to_excel(filename)
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
異なる列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データ列を折れ線グラフを用いて描画する	plt.plot(データ列x, データ列y)
タプルの中の最も大きい値を算出する	max(aTuple)
文字列を正規表現で分ける	re.split(pattern, s)
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
折れ線グラフを青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
データフレームのカラムの分散	df[col].var()
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
タプルをひとつ置きに取り出す	aTuple[::2]
データフレームを列で整列して、上位を取り出す	df.sort_values(columns).head(n)
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
カウンタのそれぞれの要素を、そのカウントだけ列挙する	aCounter.elements()
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームのカラムの第二四分位数	df[col].median()
変数がマイナス無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, -oo)
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
nを切り捨てながらn2分の一にする	n //= n2
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
辞書の項目名の値	aDict[key]
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
列を配列にする	df[column].values
アークサインを求める	math.asin(x)
イテラブルを文字列に変換してつなげる	''.join(map(str, iterable))
現在の作業ディレクトリを使う	os.getcwd()
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
折れ線グラフを描く	plt.plot(データ列x, データ列y)
nがn2の倍数でないか調べる	n % n2 != 0
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
本日が月曜日	datetime.datetime.today().weekday() == 0
関数によってデータフレームをグループ化し、、列挙する	[(name, group) for name, group in df.groupby(関数)]
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
オブジェクトが数値か調べる	isinstance(obj, (int,float))
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
リストを箱ひげ図を用いて描画する	plt.boxplot(データ列)
option: グラフの色を黄色に設定する	color = 'yellow'
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
ベストな位置にデータラベルを表示する	plt.legend(loc='best')
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
リストの長さだけ繰り返す	range(len(aList))
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
カラムの欠損値を直後の値で埋める	ds.fillna(method='bfill')
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
option: 色をドジャーブルーに指定する	color = 'dodgerblue'
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
option: グラフの色をラベンダーに設定する	color = 'lavender'
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
データフレームから型リストデータ型の列を取り出す	df.select_dtypes(include=typeList)
文字列の左側から部分文字列を消す	s.lstrip(sub)
キューの最初にシーケンスの各値をつけ加える	deq.extendleft(iterable)
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
フォーマットfmtとして文字列を日付データにする	pd.to_datetime(s, format=fmt)
データフレームの列を10の位で丸める	df[col].round(-1)
列と列の重複を落とす	df.drop_duplicates(subset=[column, column2])
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
入力ストリームを一行ずつ読み込む	f.readline()
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
ファイルを追加モードで開く]	open(filepath, mode='a')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
データフレームから型型の列のみ抽出する	df.select_dtypes(ty)
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
配列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフを赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
配列の列ごとの平均値	np.mean(aArray, axis=0)
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
両端キューの最後から要素を取り除く	deq.pop()
データフレームのカラムに重複があれば、マスクする	df.duplicated(subset=column)
異なる列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
タプルの要素を並べ直す	sorted(aTuple)
リストと配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
カラムのNaNを後の値で埋める	ds.fillna(method='bfill')
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームを配列に変換する	df.values
配列とリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
タプルのキーを列挙する	aDict.keys()
2つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データ列の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
option: フォントの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
配列を平坦化する	aArray.flatten()
タプルをナンバリングする	enumerate(aTuple)
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
データフレームの要約統計量	df.describe()
option: カーキにグラフの色を設定する	color = 'khaki'
データフレームを表示するとき、小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
ヒストグラムを一点鎖線で描く	plt.hist(データ列, linestyle='dashbot')
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
日付時刻データをISO8601書式の文字列に変換する	aDatetime.isoformat()
データフレームから指定されたデータ型の列名一覧を使う	df.select_dtypes(型).columns
ライトスカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
空のマップ	{}
文字列を白色にする	f'\033[37m{value}\033[0m'
option: 文字列を改行の代わりに用いる	end = s
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームの内の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
横棒グラフをプロットして、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
リストの先頭	aList[0]
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームのカラムの基本統計量	df[col].describe()
Pandasで、文字列をフォーマットfmtで日付データに変換する	pd.to_datetime(s, format=fmt)
ヒストグラムをサドルブラウン色を用いて描画する	plt.hist(データ列, color='saddlebrown')
グラフの見栄えを良くする	import seaborn as sns
部分集合か調べる	aSet.issubset(aSet2)
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
option: ダークターコイズを使う	color = 'darkturquoise'
赤色で値をプリントする	print(f'\033[31m{value}\033[0m')
option: ライトシアン色を使う	color = 'lightcyan'
線形回帰モデルの回帰変数	model.coef_
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
長さnのリスト	[0] * n
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
文字列の右側から不要な改行を取り除く	s.rstrip()
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
option: ミスティローズ色を使う	color = 'mistyrose'
option: バツマーカーを描画する	marker = 'x'
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
option: 欠損値を含めない	dropna = True
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
ライトゴールドロディイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
0からnの範囲	range(n)
データフレームを列名リストでまとめたグループ	df.groupby(columns)
線グラフを青緑色を使って描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームのリストカラムの第二四分位数	df[aList].median()
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
平均と標準偏差から疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
表の列と列のヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
データフレームの列がx以上の行を取り出す	df[df[column] >= x]
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
オブジェクトが名前付きタプルか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: グラフの色をチョコレートに設定する	color = 'chocolate'
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
列名リストをデータ型でフィルタする	df.select_dtypes(型).columns
縦棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
線形モデルの回帰変数	model.coef_
'A'列と'B'列の値によってデータフレームを集約する	df.groupby(['A', 'B'])
データフレームを10の位で丸めて、整数にする	df.round(-1).astype(int)
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
リストとリストの散布図を描画して、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
有理数の分母	q.denominator
タプルの要素を並べる	sorted(aTuple)
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
小数点数を小数点数で割った剰余を求める	math.remainder(x, x2)
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
タプルの長さ	len(aTuple)
リストの平均	sum(aList)/len(aList)
リストのn番目からn2番目までの部分	aList[n:n2]
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
日付データが何年か知る	aDate.year
option: ピンク色を使う	color = 'pink'
スタックから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
シーケンスを文字列に変換して、カンマによって一つにする	','.join(map(str, iterable))
Pandasでフォーマットでデータ列をdatetime64型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
イテラブルの全順列	itertools.permutations(iterable)
データ列の曜日名	ds.dt.weekday_name
部分文字列を範囲を指定して探す	s.find(sub, start, end)
スプリンググリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
標準出力がパイプかどうか調べる	not sys.stdout.isatty()
自然数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
ミントクリーム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
最初のコマンド引数を知る	sys.argv[1]
option: 色をライトゴールドロディイエローに指定する	color = 'lightgoldenrodyellow'
データフレームのカラムの月を求める	df[col].dt.month
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
1からNまでの配列	np.arange(1, N+1)
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
新しいロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフの右三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
nが1、もしくは2か調べる	n == 1 or n == 2
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
データ列を３つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
nがn2未満、それかn3以上	n < n2 or n >= n3
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
option: 未入力値を先頭にする	na_position = 'first'
直前の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
option: フォントの色をアリスブルーに設定する	color = 'aliceblue'
日付時刻データの時間を求める	aDatetime.hour
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
nが5で割り切れるか	n % 5 == 0
ふたつの集合の和集合	aSet.union(aSet2)
データフレームの最後を見る	df.tail()
無限に文字列が繰り返す列	itertools.repeat(element)
集合から任意の要素を取り出す	aSet.pop()
辞書のキーを要素に設定する	aDict[key] = element
データ列の未入力値をxで埋める	ds.fillna(x)
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
nまでの奇整数リストを作る	list(range(1, n, 2))
option: 色をホワイトスモークに指定する	color = 'whitesmoke'
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
縦棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図をオレンジレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='orangered')
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
nがn2で割り切れないか調べる	n % n2 != 0
正規分布によるパーセント・ポイント関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
option: グレー色を使う	color = 'grey'
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
パープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの中に含まれる文字列と文字列の合計を数える	df.isin([value, value2]).sum()
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
両端キューが空でないか調べる	len(deq) != 0
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
辞書にキーが存在するか判定する	key not in aDict
option: 右三角マーカーを用いる	marker = '>'
ファイルパスを文字コードtextを用いてオープンする]	open(filepath, encoding=text)
x,yの複素数	complex(x, y)
データフレームの中の欠損値がある行を消す	df.dropna()
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
日付データが日付データより前かどうか調べる	aDate < aDate2
日付時刻データのタイムゾーン	aDatetime.timetz()
option: 色をスレートブルーに設定する	color = 'slateblue'
乱数シードを初期化する	random.seed()
option: ▲マーカーを加える	marker = '^'
データフレームのカラムを丸める	df[col].round()
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
option: ダークサーモンを使用する	color = 'darksalmon'
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
回帰分析をスタッキングでする	sklearn.ensemble.StackingRegressor()
全ての八進数字	string.octdigits
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
グラフの中に枠なしの凡例を表示する	plt.legend(frameon=False)
現在が何分か知る	datetime.date.today().minute
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
option: バイナリ書き込みモードに変更する	mode = 'wb'
線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
上位集合もしくは等しいか確認する	aSet > aSet2
ピアソン相関係数を用いてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
正規表現モジュールをインポートする	import re
実数が正の数か	x > 0
option: グラフの色をミントクリームに指定する	color = 'mintcream'
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
箱ひげ図でデータフレームの二つのカラムを並べて作図する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
バイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
プロットの縦軸のキャプションをuntitledに変更する	plt.ylabel('y軸ラベル')
実数の双曲線正接の逆数	math.atanh(x)
折れ線グラフに簡単な説明を設定する	plt.plot(データ列x, データ列y, label='ラベル')
option: 印を星に変更する	marker = '*'
データ列の欠損値をxに設定する	ds.fillna(x)
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
nがn2と等しいか調べる	n == n2
ファイルのディレクトリ名	os.path.dirname(filepath)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
行列の列ごとの合計値	np.sum(aArray, axis=0)
文字列中に非英数字がある	any(not c.isalnum() for c in s)
折れ線グラフをラベンダー色を用いて描画する	plt.plot(データ列x, データ列y, color='lavender')
オブジェクトの型	type(obj)
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
ファイルパスをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
オブジェクトのメモリビュー	memoryview(obj)
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: フォントの色をミディアムパープルに指定する	color = 'mediumpurple'
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
データフレームの重複していない行のみを選ぶ	df[not df.duplicated(keep=False)]
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ふたつの関係が上位集合か調べる	aSet.issuperset(aSet2)
option: グラフの色をダークスラテグレーに変更する	color = 'darkslategray'
option: アクアに色を設定する	color = 'aqua'
リストと数列について散布図を描画してクロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
2次元タプルをflattenする	sum(aTuple)
散布図の四角印の色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
Pythonパスの一覧	sys.path
タプルを引数として展開して出力する	print(*aTuple)
文字列は全て数値	s.isnumeric()
文字列を大文字・小文字を無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
イテラブルとリストの散布図を描いて▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
日付時刻データが何時か知る	aDatetime.hour
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
カウンタの項目一覧	aCounter.keys()
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
項目名が辞書上で既に定義されているかどうか調べる	key in aDict
折れ線グラフの▼マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
モデルの精度を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
ユニークな各要素の出現回数	np.unique(aArray, return_counts=True)
プラットホームはMacOSか	sys.platform.startswith('darwin')
整数nを16進文字列に変換する	hex(n)[2:]
n回文字列が繰り返す列	itertools.repeat(element, n)
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
option: 改行コードを動作環境依存に設定する	newline = None
表データを各列毎に集計して、文字列というグループを使う	df.groupby(column).get_group(s)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフに▽印を使う	plt.plot(データ列x, データ列y, marker='v')
横棒グラフをシャルトリューズ色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
双方向キューに要素をスタックする	deq.append(element)
オブジェクトがタプルの要素かどうか確認する	element in aTuple
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの色を小麦色にセットする	plt.plot(データ列x, データ列y, color='wheat')
コマンド引数を列挙する	sys.argv[1:]
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
黒い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
列の値によってデータフレームを分類し、、それぞれのグループごとの分散を求める	df.groupby(column).var()
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データ列の欠損値を中央値に指定する	ds.fillna(ds.median())
文字列が全てアスキー文字か調べる	s.isascii()
データフレームのカラムの未入力値をxで埋める	df[col].fillna(x)
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
nプラスn2	n + n2
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
option: バッファのサイズを大きくする	buffering = 4096
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
マッピングのキーの値	aDict[key]
右三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
option: 改行なし	end = ''
散布図をライトコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
グラフのグリッドを暗くする	sns.set(style='darkgrid')
文字列中の正規表現を新しい文字列を用いて置き換える	re.sub(pattern, newsub, s)
option: ダークオレンジにグラフの色を設定する	color = 'darkorange'
option: 色をダークグリーンに設定する	color = 'darkgreen'
option: 線種を破線に変更する	linestyle = 'dashed'
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
option: ブラック色を使う	color = 'black'
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='grey')
タプルの項目名を要素に変更する	aDict[key] = element
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームのリスト列の値が欠損値か調べる	df[aList].isna()
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
紺碧色として散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
データフレームのn行以降を選択する	df[n:]
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
ヒストグラムを上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
データフレームを複数の列の値によってグループ化し要約統計量を算出する	df.groupby(columns).describe()
整数nの八進文字列を見る	oct(n)[2:]
変数を入れ替える	x, y = y, x
データフレームを'A'列によってまとめたグループ	df.groupby('A')
イテラブルの四分位を可視化する	plt.boxplot(データ列)
option: ダークグレーを用いる	color = 'darkgray'
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
シーグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='seagreen')
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
データフレームから数値データの列を取り出す	df.select_dtypes('number')
データ列の分散	ds.var()
散布図をレモンシフォン色として描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ファイルを開いて]、バイナリストリームを使う	open(filepath, mode='rb')
円グラフの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
リストの変遷を破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
コマンドの第二引数を知る	sys.argv[1]
データフレームの列がxのデータを抽出する	df[df[column] == x]
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
文字列が文字列より辞書順で前か調べる	s < s2
十六進数字を使う	string.hexdigits
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
データフレームを表示するとき、最大行数を増やす	pd.set_option('display.max_rows', n)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
単回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
データフレームを各列毎にグループ化して、列の最小値を算出する	df.groupby(column)[column2].min()
データフレームの列を1000の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
配列の転置行列	aArray.T
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
文字列を改行で区切る	s.splitlines()
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
小数点数を実数で割った剰余	math.remainder(x, x2)
要素が集合の要素に含まれる	element in aSet
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
リストとリストについて散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
追加できるようにファイルを文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
配列の累積和	np.cumsum(aArray)
一点鎖線にヒストグラムの線の種類を指定する	plt.hist(データ列, linestyle='dashbot')
データ列を1000の位で丸めて整数型にする	ds.round(-3).astype(int)
辞書のコピー	dict(aDict)
option: クリムゾンを使用する	color = 'crimson'
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
10を底とする対数	math.log10(x)
辞書のキーの一覧	aDict.keys()
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
赤い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
配列を分割数nとしてビン分割する	pd.cut(aArray, n)
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
データフレームを各列と列の組み合わせ毎にグループ化して平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームの二つのカラムを並べてボックスチャートで図示する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
文字列内にひとつでも数字があるかどうか調べる	any(c.isdigit() for c in s)
日付データは日付データより前か	aDate < aDate2
既存のファイルをBOM付きとして追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
カラムの未入力値を平均値に設定する	ds.fillna(ds.mean())
UTF8でファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
文字列の示すエンコーディングで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ゲインズボロ色としてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームをから読む	pd.read_excel(filename)
要素は両端キューの中に含まれてるか調べる	element in deq
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
リストを境界値としてデータ列をビンニングする	pd.cut(ds, aList)
option: フォントの色をライトイエローに設定する	color = 'lightyellow'
方程式として数値を解く	sympy.solve(e)
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
文字列を赤色で表示する	print(f'\033[31m{value}\033[0m')
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
マルーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
ルートの階層化マップ	collections.ChainMap()
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
分類モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
単位正方行列を初期化する	np.identity(n)
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
option: グラフの色を茶色に設定する	color = 'brown'
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
データフレームから重複する行をドロップして、更新する	df.drop_duplicates(inplace=True)
option: カラムの名前を自動的な連番に設定する	header = None
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
散布図をフクシア色を用いて描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
オブジェクトはクラス	isinstance(obj, クラス)
文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
列'A'と列'B'をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
n個にデータ列を等量でビンニングする	pd.qcut(ds, n)
データフレームを二つの列によってソートしてNaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
データ列の推移を赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
実数で実数を割って小数点以下を切り捨てる	x // y
辞書のキーとその値をペアとして取り出す	aDict.items()
最大最小でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
箱ひげ図でリストを可視化する	plt.boxplot(データ列)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
ファイルパスを絶対ファイルパスに変換する	os.path.abspath(filepath)
二つのデータフレームを異なる列をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームを二つの列の値によってグループ化し、基本統計量を求める	df.groupby(['A', 'B']).describe()
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームから型の列を抽出する	df.select_dtypes(ty)
半透明の破線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
データフレームを'A'列で小さい順に並べ直し、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
配列を2次元1行に変形する	aArray.reshape(1, -1)
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
option: フォントの色をミディアムパープルに変更する	color = 'mediumpurple'
リストと数列についての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: 丸印を用いる	marker = 'o'
option: グラフの色をダークシアンに指定する	color = 'darkcyan'
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
マッピングを用いてカウンタを更新する	aCounter.update(aDict)
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
二進文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ダークスラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
下線付きで数値を表示する	print(f'\033[4m{value}\033[0m')
データフレームを散布図を使って可視化する	sns.scatterplot(data=df, x='列名', y='列名')
データ列を四分位数ごとに分割する	pd.qcut(ds, 4)
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
カウンタの文字列一覧	aCounter.keys()
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
インディアンレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
現在の作業ディレクトリ	os.getcwd()
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
nからn2の値を引いてnに代入する	n -= n2
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームとしてTSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームの列の文字列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
rgbのダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストとリストの散布図を描画して、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
二つの数値をスラッシュで区切ってプリントする	print(value, value2, sep='/')
option: ピーチパフにグラフの色を指定する	color = 'peachpuff'
横軸を対数に変更する	plt.xscale('log')
リストと数列についての散布図に赤い菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
線を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
キューをデキューする	deq.popleft()
配列とリストの散布図を描画してダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
要素が辞書の値として含まれているか調べる	element in aDict.values()
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
option: 符号なし８ビット整数型を使う	dtype = np.uint8
整数nの十六進文字列を見る	hex(n)[2:]
散布図をクロス印で描画する	plt.scatter(データ列x, データ列y, marker='x')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
整数nを8進数リテラルに変換する	oct(n)
データフレームのリスト列の相関行列をヒートマップとして描画する	sns.heatmap(df[aList].corr())
実数を実数で除算した余り	x % y
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ヒストグラムの色をレモンシフォンにセットする	plt.hist(データ列, color='lemonchiffon')
データフレームを表示するとき、表示可能な最大行数をnにセットする	pd.set_option('display.max_rows', n)
二進対数	math.log2(x)
ヒストグラムの色をライトグリーンにする	plt.hist(データ列, color='lightseagreen')
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
グラフに補足を加える	plt.legend(['凡例A', '凡例B'])
散布図を用いてデータフレームの全カラムを描画する	sns.pairplot(df)
整数nがリストのどれか	n in aList
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフの星マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
option: ダークオレンジを用いる	color = 'darkorange'
現在の時間数を使う	datetime.date.today().hour
option: グラフの色を青緑に指定する	color = 'teal'
文字列リストにイテラブルを変換して、部分文字列によって結合する	sub.join(map(str, iterable))
nがn2で割り切れないかどうか確認する	n % n2 != 0
文字列の開始位置以降に部分文字列が含まれないか	s.find(sub, start) == -1
シーグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='seagreen')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムを描画して、半透明化にする	plt.hist(データ列x, alpha=0.5)
折れ線グラフをマルーン色として描画する	plt.plot(データ列x, データ列y, color='maroon')
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
列をダミー変数に変換する	pd.get_dummies(iterable)
データフレームのカラムが何日か見る	df[col].dt.day
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
実数を切り上げる	math.ceil(x)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
タプルをカウントしてカウンタから引く	aCounter.subtract(iterable)
ユーザから入力される	input()
折れ線グラフに青い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
ヒストグラムの色をオレンジレッドに変更する	plt.hist(データ列, color='orangered')
値を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
リストと配列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
回数を制限して文字列を置き換える	s.replace(sub, newsub, n)
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
リストとリストの散布図を描画し、、バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
ヒストグラムをシルバー色を用いて描画する	plt.hist(データ列, color='silver')
データフレームのカラムの中にいくつ文字列があるかカウントする	df[col].isin([value]).sum()
データフレームのカラムが正規分布からどれだけ尖っているか確認する	df[col].skew()
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
二つの値を順に表示する	print(value, value2)
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データフレームの列がxの行を抽出する	df[df[column] == x]
カウンタ	collections.Counter()
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
実数の逆正弦	math.asin(x)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
データフレームを列でソートし、下位n件を取り出す	df.sort_values(columns).tail(n)
ペールグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
Pandasで、エポック秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
データフレームの列がx、かつカラムがx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
レモンシフォン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
組の最後のn要素を取り除く	aTuple[:-n]
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
データフレームの列をヒストグラムを用いて描画する	plt.hist(df[column])
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
option: 書き込みモードに変更する	mode = 'w'
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
リストと配列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
n個にリストをビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
ドジャーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
文字列を白色で表示する	print(f'\033[37m{value}\033[0m')
スピアマンの相関係数を計算する	scipy.stats.spearmanr(データ列, データ列2)
リストとリストの散布図をプロットしてバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データ列は正規分布からどの程度歪んでいるか見る	ds.kurt()
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
文字列の大きさを使う	len(s)
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
単位正方行列	np.identity(n)
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
ビン数nとしてデータフレームの中の列を分割する	pd.cut(df[col], n)
データ列が何月か確認する	ds.dt.month
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
列名リストによって昇順にデータフレームを破壊的に整列する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
折れ線グラフを破線に変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
欠損値も加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
dateStringをPandasの日付型に変換する	pd.to_datetime(dateString)
空白文字	' '
nがn2以下	n <= n2
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
リストと数列について散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
マルーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
データフレームのどの値が頻出か見る	df.mode()
キーが辞書に存在するか調べる	key in aDict
赤いポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
タプルの最後からn番目以前の部分を取り出す	aTuple[:-n]
リストの平均値	sum(aList)/len(aList)
列でデータフレームをグループ化して、それぞれのグループの件数を知る	df.groupby(column).size()
option: グラフの色をシーグリーンにセットする	color = 'seagreen'
データフレームから重複ありでn行をランダムにサンプリングする	df.sample(n, replace=True)
データフレームの指定した列をリストに変換する	df[column].values.tolist()
セットをイミュータブルなセットにする	frozenset(aSet)
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
ふたつの集合の差集合	aSet.difference(aSet2)
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データ列の移り変わりを折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
正接を求める	math.tan(x)
配列とリストの散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
マッピングの値数	len(aDict)
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
xの小数点以下'1'桁までを出力する	print(':.1f'.format(x))
option: グラフの色をゴールドに設定する	color = 'gold'
日付時刻データが木曜日かどうか調べる	aDatetime.weekday() == 3
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
ゴーストホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
散布図に▲マーカーを使用する	plt.scatter(データ列x, データ列y, marker='^')
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
凡例をグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
データ列を丸める	ds.round()
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
option: チョコレート色を使う	color = 'chocolate'
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
フィッシャーの線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
0からnまでのスライス	slice(n)
折れ線グラフをライトサーモン色として描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
データフレームのカラムのNaNを中央値で補う	df[col].fillna(df[col].median())
グラフを正方形にする	plt.axis('equals')
線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
nを半分にする	n /= 2
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
配列の移り変わりを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
xが真か調べる	bool(x)
棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
グラフからグリッド線を消す	plt.grid(False)
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
anemptystring	''
文字列全体が正規表現にケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
nの3乗を求める	n ** 3
'A'列と'B'列によってを用いてデータフレームを降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
データ列とリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームから重複を残さず、落とす	df.drop_duplicates(keep=False)
文字列を最後の部分文字列で二分する	s.rpartition(sub)
ロバストな重回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
リストとリストの散布図にrgbのダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
アヤメのデータセットをロードする	sns.load_dataset('iris')
ヒストグラムをビスク色を使って描画する	plt.hist(データ列, color='bisque')
リストとリストについて散布図を描画して、マーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
データフレームをJSONLファイルに保存する	df.to_excel(filename)
イテラブルと列の直積を求める	itertools.product(iterable, iterable2)
ライトスチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
文字列の接尾辞が部分文字列かどうか	s.endswith(sub)
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
横棒グラフを青緑色を使って描画する	plt.barh(データ列x, データ列y, color='turquoise')
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
ヒストグラムを青くする	plt.hist(データ列, color='b')
option: namesをカラム名に設定する	names = names
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
イテラブルとリストの散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
両端キューのstart〜endの要素を使う	collections.deque(itertools.islice(deq, start, end))
カウンタの項目をひとつ増やす	aCounter[element] += 1
データフレームを各列と列の組み合わせ毎にグループ化して最小値を求める	df.groupby([column, column2], as_index=False).min()
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
option: 線の幅を3.0ポイントにする	linewidth = 3.0
８ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int8)
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームを表示するとき小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
日付データの年数を使う	aDate.year
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: 説明変数を事前に正規化する	normalize = True
破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
ビン数nとして列をビン分割する	pd.cut(ds, n)
破壊的に列によってデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
横に二つのデータフレームをくっつける	pd.concat([df, df2], axis=1)
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<')
データフレームの第一四分位数を計算する	df.quantile(0.25)
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
option: シアンを使う	color = 'cyan'
nが-9以上、9以下か調べる	-9 <= n <= 9
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
ダークレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
ヒストグラムの色をダークカーキにセットする	plt.hist(データ列, color='darkkhaki')
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
昇順にデータフレームを破壊的に'A'列と'B'列によって整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームからカラムを三つ選択する	df[[column, column2, column3]]
option: 青紫を使う	color = 'violet'
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
行列の最小	np.min(aArray)
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
イエローグリーン色でヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフを半透明の破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
ファイルを書き込みモードを用いてオープンして]、fとする	f = open(filepath, mode='w')
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
実数の双曲線余弦の逆数	math.acosh(x)
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
CSVファイルファイル名がか調べる	filename.endswith('.csv')
'A'列を用いてによって破壊的にデータフレームを並べる	df.sort_values(by='A', inplace=True)
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームを'A'列を用いてによって降順に整列する	df.sort_values(by='A', ascending=False)
option: 四角印を用いる	marker = 's'
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
二つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
ふたつの集合が集合と互いに素か	aSet.isdisjoint(aSet2)
点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
日付データの年数	aDate.year
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
本日の日付時刻を求める	datetime.datetime.now()
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
Pandasで、エポック秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
option: ブラックを使う	color = 'black'
全要素を0で初期化した配列	np.zeros(要素数)
数列と配列について散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
xが1、もしくは2もしくは3に等しい	x == 1 or x == 2 or x == 3
折れ線グラフの色をダークシアグリーンにする	plt.plot(データ列x, データ列y, color='darkseagreen')
折れ線プロットとしてデータフレームの列を作図する	plt.plot(df[column], df[column])
t-SNEとして淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
縦棒グラフをオレンジレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orangered')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
黒い▲マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
option: スノーを用いる	color = 'snow'
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームの行を範囲指定して抽出する	df[start:end]
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
小数点数の正接の逆数を算出する	math.atan(x)
タプルを順にプリントする	print(*aTuple)
両端キューの末尾からデータを取り除く	deq.pop()
データフレームのリスト列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[aList].corr())
スレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
option: ダークスラテグレーにグラフの色を設定する	color = 'darkslategray'
リストの合計値を計算する	sum(aList)
原点から点までの距離	math.hypot(x, y)
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
数式の積分を計算する	sympy.integrate(e)
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
破壊的にデータフレームを'A'列と'B'列によってでソートする	df.sort_values(by=['A', 'B'], inplace=True)
一点鎖線でラインを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
グラフの色を全般的に濃くする	sns.set(pallete='deep')
グリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームを列によってグループ化して、各グループ毎の最小値を求める	df.groupby(column).min()
データフレームのn番目の行を抽出する	df.loc[n]
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
２つの文字列を改行しなくてプリントする	print(value, value2, end='')
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
nが一桁の整数か調べる	-9 <= n <= 9
ファイル全体をリストとして読み込む	f.readlines()
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
文字列中の大文字を小文字に変換する	s.lower()
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
実数の整数部	math.modf(x)[1]
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
タプルのn番目以降の部分を取り出す	aTuple[n:]
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
散布図の印を右三角にする	plt.scatter(データ列x, データ列y, marker='>')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
文字列の左側から空白を消す	s.lstrip(' ')
折れ線グラフの左三角印の色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
破線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: 先頭の行をヘッダに設定する	header = 0
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
タイムスタンプデータは何月か知る	aDatetime.month
昇順に表データを二つの列を用いてソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ファイルをクローズする	f.close()
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
option: マーカーを四角に変更する	marker = 's'
option: グラフの色をオールドレースに設定する	color = 'oldlace'
列でデータフレームをグループ化し、それぞれのグループ毎の個数を計算する	df.groupby(column).count()
データフレームの列がxより大きくx2より小さい行を選択する	df[(x < df[column]) & (df[column] < x2)]
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
日付時刻データの月数	aDatetime.month
ヒストグラムをオリーブ色として描画する	plt.hist(データ列, color='olive')
文字列を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
option: 印を▲に変更する	marker = '^'
データフレームの列がxでない行をフィルタする	df[df[column] == x]
データフレームを複数の列で並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームをに箱ひげ図で図示する	sns.boxplot(x='カテゴリ列', y='列', data=df)
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
データ列のpercent分位数を求める	ds.quantile(percent/100)
折れ線グラフにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
ファイルパスの絶対ファイルパスを使う	os.path.abspath(filepath)
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
リストを引数として展開して表示する	print(*aList)
折れ線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
折れ線グラフの▲マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
散布図でデータフレームの全列をグラフ化する	sns.pairplot(df)
数列とイテラブルについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
辞書をインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームから指定した三列を選択する	df[[column, column2, column3]]
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データフレームを'A'列によって昇順に整列する	df.sort_values(by='A', ascending=True)
option: グラフの色をアクアに設定する	color = 'aqua'
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
カウンタをクリアする	aCounter.clear()
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データ列を等量でn個に分割する	pd.qcut(ds, n)
現在のタイムスタンプ	int(time.time())
シーケンスの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
ダーク・スラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategrey')
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
0からnまでの整数列	list(range(n+1))
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
折れ線グラフの印を三角印にする	plt.plot(データ列x, データ列y, marker='^')
タプルの先頭	aTuple[0]
辞書の全項目を空にする	aDict.clear()
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
JSONLファイルにデータフレームをTSV形式で書き込む	df.to_csv(filename, sep='\t')
文字列をシアンで表示する	print(f'\033[36m{value}\033[0m')
カウンタを集合に変換する	set(aCounter)
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
option: グラフの色をプラムに指定する	color = 'plum'
折れ線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
組を小さい順にソートする	sorted(aTuple, reverse=False)
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
カラーバーを描画する	plt.colorbar()
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
グリッド線	plt.grid(alpha=0.5)
データフレームの中の欠損値の数を数える	df.isna().sum()
両端キューの長さを制限する	collections.deque(maxlen=n)
TSVを読む	pd.read_csv(filename, sep='\t')
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
箱ひげ図を用いてデータ列を可視化する	plt.boxplot(データ列)
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: 線の種類を点線に指定する	linestyle = 'dotted'
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
日付時刻データが何分か知る	aDatetime.minute
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームを複数の列で昇順に並べる	df.sort_values(by=column, ascending=True)
ネイビー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
EUCで書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding='euc_jp')
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: ダークカーキにフォントの色を設定する	color = 'darkkhaki'
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
横棒グラフを青緑色を使って描画する	plt.barh(データ列x, データ列y, color='teal')
２つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
プログラムの実行を強制的に止める	sys.exit()
配列とデータ列の散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
option: 黄色色を使用する	color = 'yellow'
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームを各列毎にグループ化して列の最小値を求める	df.groupby(column)[column2].min()
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
半透明の一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
イテラブルのセット	set(iterable)
文字列を最後の部分文字列で分けたときの前半の文字列を使う	s.rpartition(sub)[0]
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
グラフのタイトルを変更する	plt.title('グラフの名称')
最大値・最小値の範囲で一様な乱数を得る	random.uniform(最小値, 最大値)
データフレームをタブ区切りとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
本日の月数	datetime.datetime.today().month
nが偶数	n % 2 == 0
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
数式処理を用いる	import sympy
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
双方向キューをdequeue	deq.popleft()
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
カラムの欠損値をxで埋める	ds.fillna(x)
データ列の歪度	ds.kurt()
option: 黄色色を使う	color = 'yellow'
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
十六進数字を全部求める	string.hexdigits
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
文字コードtextで書き込み用にファイルパスを開く]	open(filepath, mode='w', encoding=text)
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
現在処理中の例外を情報	sys.exc_info()
カーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
データフレームの列がxでないデータをフィルタする	df[df[column] == x]
数式を展開する	sympy.expand(e)
データフレームを使う	import pandas as pd
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
option: グラフの色をオリーブに設定する	color = 'olive'
現在の時間数	datetime.date.today().hour
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t')
n2がn以上かつn3以下	n <= n2 and n2 <= n3
一点鎖線を使って数列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
n個の数値イテラブルを求める	range(n)
データフレームを二つの列でによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
option: ディムグレー色を使う	color = 'dimgray'
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
四分位点でスケーリングする	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: コーンフラワーブルーに色を設定する	color = 'cornflowerblue'
赤いバツマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列がタプルに含まれるか確認する	element in aTuple
▽マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
データ列の日	ds.dt.day
文字列の中でケースを無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
配列の列ごとの最小	np.min(aArray, axis=0)
コマンドの第一引数を調べる	sys.argv[1]
n×n2	n * n2
オブジェクトのオブジェクト識別子を使う	id(obj)
真スーパーセット	aSet > aSet2
綺麗なグラフを使う準備をする	import seaborn as sns
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
値を太字で出力する	print(f'\033[1m{value}\033[0m')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
グラフの用途を画面に設定する	sns.set(context='notebook')
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
データフレームを複数の列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームを複数の列の値で集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームを列で大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
option: ライトスレイグレー色を使う	color = 'lightslategray'
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
マップの項目名とその項目をペアとして取り出す	aDict.items()
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
回帰分析をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingRegressor()
線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
辞書の値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
オブジェクトをイテラブルに変換する	iter(obj)
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
に箱ひげ図を用いてデータフレームの列を可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
タプルをnから順番付けする	enumerate(aTuple, start=n)
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
線グラフを赤い点線を使って描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの列の一意な値	df[col].unique()
プログラムの実行を強制的に終了する	sys.exit()
リストの出力を改行せず行う	print(value, end='')
数値をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
文字列がリストの要素でない	element not in aList
データフレームの列がどの程度、分散しているか見る	df[col].var()
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
散布図をベージュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='beige')
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
BOM付きでデータフレームをJSONLファイルに保存する	df.to_csv(filename, encoding='utf_8_sig')
列は正規分布からどの程度、歪んでいるか見る	ds.kurt()
変数名をキーとして、辞書を新規生成する	dict(name=element)
行列の行ごとの分散	np.var(aArray, axis=1)
グリッド線をプロットから消す	plt.grid(False)
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
option: グラフの色をグレーに設定する	color = 'grey'
ブラック色を用いてヒストグラムを描画する	plt.hist(データ列, color='black')
双方向キューの末尾の要素	deq[-1]
option: ライトスチールブルーを使う	color = 'lightsteelblue'
xが1もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
集合が空かどうか調べる	len(aSet) == 0
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
データフレームを各列とカラムの組み合わせ毎に集計し、分散を計算する	df.groupby([column, column2], as_index=False).var()
データフレームの第一四分位数	df.quantile(0.25)
折れ線グラフのダイアモンドマーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
折れ線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
リストの文字列が最初に見つかる場所	aList.index(element)
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データ列をインポートする	import pandas as pd
実数の逆双曲線正弦	math.asinh(x)
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: 丸マーカーを描画する	marker = 'o'
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
数式を簡略化する	sympy.sympify(e)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
スタックから最初の要素を削除する	deq.remove(element)
カウンタを作る	collections.Counter()
ファイルの絶対パス	os.path.abspath(filepath)
カウンタを少ない方から列挙する	aCounter.most_common()[::-1]
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
ピンク色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
日付時刻データの曜日を整数で使う	aDatetime.weekday()
option: 青色を使う	color = 'blue'
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフのマーカーをクロス印にする	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
1行分標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームを列によってによって破壊的に並べる	df.sort_values(by=column, inplace=True)
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
データフレームを関数の値によってグループ化し、記述統計量を算出する	df.groupby(関数).describe()
データフレームをインポートする	import pandas as pd
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
アイボリー色としてヒストグラムを描画する	plt.hist(データ列, color='ivory')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
グラフで用いる縦軸に説明を付ける	plt.ylabel('y軸ラベル')
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
ディムグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
アリスブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
カラムの第一四分位数	ds.quantile(0.25)
数列とデータ列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
よりランダムなランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
option: 文字コードをEUCにする	encoding = 'euc_jp'
ヒストグラムの色を真紅にセットする	plt.hist(データ列, color='crimson')
カラムの中にと日付データがいくつあるかカウントする	ds.isin([value, value2]).sum()
option: グラフの色を小麦色に設定する	color = 'wheat'
option: スラグレーにフォントの色を変更する	color = 'slategrey'
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
option: レベッカパープル色を用いる	color = 'rebeccapurple'
最大行数を変更する	pd.set_option('display.max_rows', n)
option: 先頭のカラムをインデックスに設定する	index_col = 0
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
双方向キューの先頭から要素を取り出す	deq.popleft()
グリーンイエロー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
rgbの左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストの末尾から要素をポップする	aList.pop()
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
部分文字列か	sub in s
青い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
散布図の三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
プロットのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
データ列の中に文字列とがあるか調べる	ds.isin([value, value2])
サーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
ダークブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
配列の平均	np.mean(aArray)
プロットの横軸を対数目盛に変更する	plt.xscale('log')
ダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D')
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
文字列の先頭からタブを取り除く	s.lstrip('\t')
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
文字列全体がパターンに大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームのカラムの欠損値を平均に設定する	df[col].fillna(df[col].mean())
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
ゼロ埋めされた８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
イテラブルと配列について散布図をプロットしてマーカーを大バツにセットする	plt.plot(データ列x, データ列y, marker='X')
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
option: グラフの色をビスクに設定する	color = 'bisque'
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
有理数を使う	import fractions
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
整数nを十六進文字列に変換する	hex(n)[2:]
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームの中にあるの合計をカウントする	df.isin([value]).sum()
aListn番目から要素を取り出す	aList.pop(n)
データフレームから重複した行を残さず削除する	df.drop_duplicates(keep=False)
option: スレートブルー色を使う	color = 'slateblue'
列のユニークな値の個数	ds.nunique()
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
散布図をコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='coral')
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
ラインを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
各列毎にデータフレームを集約して、列の標準偏差を求める	df.groupby(column)[column2].std()
文字列がタプルの要素か	element in aTuple
折れ線グラフの色をティールに指定する	plt.plot(データ列x, データ列y, color='teal')
シーグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
非ASCII文字が文字列中に含まれるかどうかテストする	any(not c.isascii() for c in s)
ヒストグラムの色をダークサーモンにセットする	plt.hist(データ列, color='darksalmon')
整数nを二進数文字列に変換する	bin(n)[2:]
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
グラフのグリッドを白くする	sns.set(style='whitegrid')
ヘッダを付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, header=None)
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
実数から浮動小数点数を引く	x - y
線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
データ列の中にあると文字列の個数を求める	ds.isin([value, value2]).sum()
ライムグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='limegreen')
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
折れ線グラフを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの中の未入力値が存在する行を削除する	df.dropna()
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
環境がWindowsか調べる	sys.platform.startswith('win32')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
nが1、もしくは2、もしくは3に等しいか	n == 1 or n == 2 or n == 3
ヒストグラムの色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
グリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
コレクションを使う	import collections
縦軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
正規表現を使う	import re
データフレームのリストカラムの未入力値を最小値で補う	df[aList].fillna(df[aList].min())
オブジェクトが浮動小数点数型か調べる	isinstance(obj, float)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
option: 追加モードに設定する	mode = 'a'
双方向キューの最初を使う	deq[0]
本日の日付時刻	datetime.datetime.now()
色付きの点線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
文字列が部分文字列で終了するか調べる	s.endswith(sub)
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
行列は何次元か調べる	aArray.ndim
ミディアムスプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
バイナリモードとしてファイルを開く]	open(filepath, mode='rb')
ヒストグラムの色をリネンに変更する	plt.hist(データ列, color='linen')
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
小文字が文字列内に含まれるかどうか	any(c.islower() for c in s)
最大長nの両端キューを列から生成する	collections.deque(iterable, maxlen=n)
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
紺色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
option: グラフの色をブラックに設定する	color = 'black'
nからn2までの整数リスト	list(range(n, n2+1))
正規分布として疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
xの絶対値	abs(x)
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
パウダーブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
'A'列でデータフレームをソートし、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
表データの指定された列をリストに変換する	df[column].values.tolist()
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
rgbの大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
数式の積分を行う	sympy.integrate(e)
ヒストグラムをミディアムスプリンググリーン色を用いて描画する	plt.hist(データ列, color='mediumspringgreen')
ファイルを改行を取り除いて一行ずつ読む	f.readline()
ヒストグラムを白くする	plt.hist(データ列, color='w')
変数を太字にする	f'\033[1m{value}\033[0m'
折れ線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
ストリーム全体を行単位で分割して読み込む	f.readlines()
option: グラフの色をトマトに設定する	color = 'tomato'
option: ダークオレンジにグラフの色を指定する	color = 'darkorange'
長さnのリストを作る	[0] * n
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
タプルをカンマ区切りでプリントする	print(*aTuple, sep=',')
表データの重複した行をマスクする	df.duplicated()
データフレームの列を破壊的に消す	df.drop(column, axis=1, inplace=True)
データフレームの中にいくつ日付データが存在するか数える	df.isin([value]).sum()
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
数式を簡単にする	sympy.sympify(e)
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
散布図に黒い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフを描画し、、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
既存の配列を元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
新しいサポートベクター分類モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
深紅色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
n2がnより大きく、かつn3未満	n < n2 and n2 < n3
データフレームのstart行目からend行目まで抽出する	df[start:end]
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
アルファベットの大文字を全部使う	string.ascii_uppercase
散布図の星印を青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
リストの最初を除く	aList[1:]
カラムの正規分布に対する左右対称性	ds.kurt()
イテラブルを変更不能な集合に変換する	frozenset(iterable)
データフレームのカラムの月を見る	df[col].dt.month
青い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
双方向キューの最初から値を取り除く	deq.popleft()
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
文字列を空白で区切る	s.split()
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
オブジェクトは辞書クラスかどうか調べる	isinstance(obj, dict)
ファイルを一行ずつ読み込む	f.readline()
option: コーラルにグラフの色を設定する	color = 'coral'
散布図を▲マーカーで描画する	plt.scatter(データ列x, データ列y, marker='^')
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
データフレームの各グループごとの合計	df.groupby(column).sum()
実数の指数を求める	math.frexp(x)[1]
線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
散布図をミディアムスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームのリストカラムの平均値	df[aList].mean()
データフレームを降順に列によってでソートする	df.sort_values(by=column, ascending=False)
データフレームの中にと日付データが存在するかどうか確認する	df.isin([value, value2])
文字列が文字列より辞書順で前か確認する	s < s2
ヒストグラムの色をスカイブルーにセットする	plt.hist(データ列, color='skyblue')
イテラブルから両端キューを作成する	collections.deque(iterable)
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
ブースティングとしてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
スピアマンとしてデータフレームの相関行列	df.corr(method='spearman')
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
データ列を箱ひげ図として可視化する	plt.boxplot(データ列)
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
整数nのビット長	n.bit_length()
ライトゴールドロディイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
タプル内の要素が全て真か調べる	all(aTuple)
８進数字を全部使う	string.octdigits
クラス分類のアキュレシーを算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: バリーウッド色を用いる	color = 'burlywood'
折れ線グラフの色をライトブルーにセットする	plt.plot(データ列x, データ列y, color='lightblue')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
整数に数を加える	x + y
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
最初のコマンド引数	sys.argv[1]
２つのデータフレームを列'A'と列'B'をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
辞書のキーの値	aDict[key]
ヒストグラムでデータ列を図示する	plt.hist(データ列)
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
タプルのn番目からn2番目まで	aTuple[n:n2]
列にシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
折れ線グラフを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データ列の四分位を作図する	plt.boxplot(データ列)
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
ピアソン積率相関係数を用いてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
option: マーカーを丸に指定する	marker = 'o'
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを表示するとき、折り返しを無効に指定する	pd.set_option('expand_frame_repr', False)
オブジェクトはバイト列型のインスタンスかどうか調べる	isinstance(obj, bytes)
数が整数か確認する	x.is_integer()
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データフレームの最後のカラム以外を説明変数にする	説明変数 = df[df.columns[:-1]]
二つのデータフレームを結合する	pd.merge(df, df2)
三つの文字列を順に表示する	print(value, value2, value3)
option: 読み込まないフッタをnに変更する	skipfooter = n
辞書から項目名で指定された項目をポップする	aDict.pop(key)
縦棒プロットを描画する	plt.bar(ラベル列, データ列)
空白で末尾から文字列を区切る	s.rsplit()
nをn2乗に増やす	n **= n2
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
文字列をプリントする	print(value)
文字列を水色にする	f'\033[36m{value}\033[0m'
ガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
実数の二乗	x ** 2
ミディアムバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
ロージーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='rosybrown')
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
整数nは配列のいづれか	n in aArray
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
複数の列を用いて昇順に破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
日付時刻データの年数	aDatetime.year
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
カラムをキーとして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
既にロードされたモジュールを列挙する	sys.modules
option: ロージーブラウン色を使用する	color = 'rosybrown'
赤い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
nが無限に続く数列を得る	itertools.repeat(n)
データ列の第一四分位数を算出する	ds.quantile(0.25)
ASCII限定として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
有理数の分子	q.numerator
回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
文字列がリストに含まれないか調べる	element not in aList
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
線グラフを赤い実線を使って描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
数を実数で整数除算する	x // y
方程式の解を計算する	sympy.solve(e)
option: 色をダークグレーにする	color = 'darkgrey'
文字列の接頭辞は部分文字列か調べる	s.startswith(sub)
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
折れ線グラフの上三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列中からパターンにASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
昇順にリストの要素をソートする	sorted(aList, reverse=True)
option: ダークグレー色を使う	color = 'darkgray'
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームを列名リストを用いてで降順にソートする	df.sort_values(by=column, ascending=False)
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
カラムは正規分布からどの程度、歪んでいるか見る	ds.kurt()
配列のユニークな要素	np.unique(aArray)
散布図に赤い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームのインデックスがnの行を抽出する	df.loc[n]
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
配列を2回あわせた直積	itertools.product(iterable, repeat=2)
配列をベースに全要素が初期値のベクトル	np.full_like(aArray, 初期値)
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
option: グラフの色をシスルに設定する	color = 'thistle'
option: ライトグレーを使う	color = 'lightgrey'
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
データ列を用いる	import pandas as pd
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
リストとリストの散布図にrgbの上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
二つのデータフレームを列をキーにして右結合する	pd.merge(df, df2, on=column, how='right')
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: ディムグレー色を使う	color = 'dimgrey'
折れ線グラフを半透明の実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: バイナリモードに設定する	mode = 'rb'
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
散布図にクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
データフレームの列の未入力値を第二四分位数に設定する	df[col].fillna(df[col].median())
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
文字列の末尾からタブを取り除く	s.rstrip('\t')
正規分布で疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
オーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='orchid')
シーケンスのコンビネーション	itertools.combinations(iterable, n)
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
キュー中の値の位置を使う	deq.index(element)
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: オレンジレッドにフォントの色を設定する	color = 'orangered'
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
データフレームの指定された列を配列に変換する	df[column].values
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
折れ線グラフのダイアモンド印の色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
カウンタからタプルを減らす	aCounter.subtract(aDict)
カテゴリ別で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列中から部分文字列を探す	s.find(sub)
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
縦棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データ列の分散を算出する	ds.var()
各列毎にデータフレームをグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
option: フォントの色をダークグリーンに設定する	color = 'darkgreen'
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
文字列をカンマで分割して文字列リストに変換する	s.split(',')
データ列の第一四分位数	ds.quantile(0.25)
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
タプルをnから番号付けする	enumerate(aTuple, start=n)
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
カウンタを用いる	import collections
ホットピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
集合にイテラブルの要素を追加する	aSet.update(iterable)
xを印字できる文字列にする	ascii(x)
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
データ列のユニークな値	ds.unique()
リストとリストについて散布図を描画して上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
組の末尾の要素	aTuple[-1]
option: グラフの色をオレンジに設定する	color = 'orange'
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
散布図を黒い菱形マーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
predicateFuncが真になる列の要素	itertools.takewhile(predicateFunc, iterable)
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
半透明の実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
文字列を全て小文字に変換する	s.casefold()
整数nをn2分の一にする	n //= n2
space	' '
二つの実行結果をタブで区切ってプリントする	print(value, value2, sep='\t')
データ列をn個にビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
カウンタの正の数だけ残す	+aCounter
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
棒グラフをコーンフラワーブルー色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームのリストカラムのNaNをxで補う	df[aList].fillna(x)
グループ列ごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: 色をロイヤルブルーに指定する	color = 'royalblue'
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
散布図をrgbの左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
カウンタの最頻出のキー	aCounter.most_common()[0]
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
整数nの8進数文字列	oct(n)[2:]
データフレームを降順に'A'列と'B'列によって破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
切片なしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
変数を緑色にする	f'\033[32m{value}\033[0m'
データフレームを'A'列を用いてソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
'A'列と'B'列で破壊的に大きい順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
データフレームの中にあるの数を数える	df.isin([value]).sum()
空行をプリントする	print()
データフレームのリストカラムの尖度	df[aList].skew()
要素をキューにプッシュする	deq.append(element)
日付データをISO形式の文字列に変換する	aDate.isoformat()
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
全印字	string.printable
option: マーカーの色をブラックにする	markerfacecolor = 'black'
option: 耐火レンガ色を使う	color = 'firebrick'
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
データ列の欠損値を中央値にセットする	ds.fillna(ds.median())
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
標準出力を使用する	sys.stdout
データフレームのカラムの欠損値を前の行の値に設定する	df[col].fillna(method='ffill')
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
ミディアムスプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字列が無限に続くイテラブル	itertools.repeat(element)
リストをn回、連結する	aList * n
データフレームの列とカラムの相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
日付データが何月か知る	aDate.month
実数がNaNか確認する	math.isnan(x)
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
文字列中のパターンを新しい文字列を用いて置き換える	re.sub(pattern, newsub, s)
集合をイミュータブルに変換する	frozenset(aSet)
日付データが火曜日か確認する	aDate.weekday() == 1
option: 下三角印を用いる	marker = 'v'
nxn2の２次元リストを作る	[[0] * n for _ in range(n2)]
折れ線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: 色を紺碧に設定する	color = 'azure'
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
オプションで、出力先を標準エラーに変更する	file = sys.stderr
イテラブルからサンプリングする	random.sample(iterable)
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
標準エラーを	sys.stderr
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
イテラブルとリストについての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
グリーンイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
カウンタの項目を増やす	aCounter[element] += 1
線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
二つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
データ列の月	ds.dt.month
データフレームを'A'列と'B'列によって集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームの重複した行のみを取り出す	df[df.duplicated(keep=False)]
リストをビン数nでビン分割する	pd.cut(aList, n)
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
数列を横に並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
折れ線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図のダイアモンド印の太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
青い破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
データフレームの指定された二列を抽出する	df[[column, column2]]
カテゴリ別で色付けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
タブ区切りのファイルからCSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
xが一桁の正の数か調べる	0 <= x <= 9
赤い下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
データを平均と分散を用いて標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
y軸の目盛を表示しない	plt.yticks([])
文字列が文字列リストのいづれか確認する	s in aStringList
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
グラフの色を色差別なくする	sns.set(pallete='colorblind')
ValueMapでデータフレームのリストカラムの値を置き換える	df[aList].replace(ValueMap)
データ列の平均値	ds.mean()
ブルーバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
カウンタからゼロカウントを取り除く	+aCounter
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
実行結果を紫色で出力する	print(f'\033[35m{value}\033[0m')
option: 追加モードを用いる	mode = 'a'
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ビン数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
フクシア色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
分類モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
文字列中の部分文字列を別の文字列に置き換える	s.replace(sub, newsub)
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
数の三乗	x ** 3
線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
折れ線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
nからn2までのスライス	slice(n, n2)
行列の最小値を求める	np.min(aArray)
文字列を最後の部分文字列で二つに分ける	s.rpartition(sub)
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: グラフの色をライトグリーンに指定する	color = 'lightgreen'
nかつn2	n and n2
今日をタプルに変換する	datetime.datetime.today().timetuple()
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
範囲を指定して部分文字列を文字列の最後から探す	s.find(sub, start, end)
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
イテラブルから両端キューを作る	collections.deque(iterable)
ロバスト推定で回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
カウンタの項目のカウントを見る	aCounter[element]
文字列を右トリムする	s.rstrip()
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ヒストグラムを上限から下限までの区間で描く	plt.hist(データ列, range=(start, end))
配列とリストの散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
丸印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
オブジェクトが文字列型かどうか調べる	isinstance(obj, str)
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
複数の列によってデータフレームを並べ直して更新する	df.sort_values(by=column, inplace=True)
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
横軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
散布図に青い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
正弦	math.sin(x)
データフレームのリストカラムの欠損値を中央値に変更する	df[aList].fillna(df[aList].median())
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームを列名リストでで降順に整列する	df.sort_values(by=column, ascending=False)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
本日の曜日を整数で使う	datetime.datetime.today().weekday()
option: ダイアモンドマーカーを使う	marker = 'D'
データ列の中にある文字列との数を数える	ds.isin([value, value2]).sum()
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
option: ゴールデンロッドにグラフの色を変更する	color = 'goldenrod'
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
イテラブルからベクトルを作る	np.array(iterable)
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
列名を指定された列の名前一覧に置き換える	df.columns = columns
option: ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
プラットホームのバイトオーダ	sys.byteorder
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
ファイルにxを文字列にして書き込む	f.write(str(x))
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
option: ポイントマーカーを用いる	marker = '.'
データフレームからカテゴリデータの列名一覧を見る	df.select_dtypes('object').columns
option: カデットブルー色を使う	color = 'cadetblue'
データフレームの欠損値がある行を消す	df.dropna()
NaN	math.nan
縦棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
二つのカウンタの共通する要素を求める	aCounter & aCounter2
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
配列の最小値	np.min(aArray)
リストをランダムにシャッフルする	random.shuffle(aList)
ダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
option: ホットピンクを使う	color = 'hotpink'
二つの関係が上位集合もしくは等しい	aSet > aSet2
散布図をバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x')
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図に黒い△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムの色をブラックにする	plt.hist(データ列, color='black')
タプルの要素を逆順にする	aTuple[::-1]
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
日付データが日付データと同時か確認する	aDate == aDate2
文字列内に数字が含まれる	any(c.isdigit() for c in s)
カウンタを辞書で更新する	aCounter.update(aDict)
数列の移り変わりを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを'A'列によってソートする	df.sort_values(by='A')
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
散布図の印を丸印にする	plt.scatter(データ列x, データ列y, marker='o')
空のチェーンマップ	collections.ChainMap()
データ列の中央値	ds.median()
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
option: グラフの色をピンクに設定する	color = 'pink'
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
文字列が全て大文字か調べる	s.isupper()
表データの列に重複があれば、マスクする	df.duplicated(subset=column)
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
マッピングから最後のエントリをポップする	aDict.popitem()
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
option: オレンジレッド色を用いる	color = 'orangered'
二つのデータフレームを列'A'と列'B'をキーにして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
ファイルをSJISを使ってオープンする]	open(filepath, encoding='shift_jis')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
値を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
両端キューの中に数値が含まれてるかどうか調べる	element in deq
データフレームのカウントプロットを描く	sns.countplot(x='列名', data=df)
日付データの日数	aDate.day
リストとリストについての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
データフレームの列の欠損値をモードに変更する	df[col].fillna(df[col].mode().iloc[0])
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
option: イエローグリーン色を使う	color = 'yellowgreen'
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
ファイルを閉じる	f.close()
文字列が全て大文字か確認する	s.isupper()
option: マーカーの線幅を変更する	markeredgewidth = 2.5
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ロバストな線形分類モデルを準備する	model = sklearn.linear_model.HuberClassifier()
ヒストグラムをグリーン色として描画する	plt.hist(データ列, color='green')
説明変数と目的変数を用いて回帰モデルを学習する	model.fit(説明変数, 目的変数)
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
option: オリーブ色を用いる	color = 'olive'
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
ダークオリーブグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
やわらかい青色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
赤い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームから指定された二つの列を抽出する	df[[column, column2]]
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
データをL2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
option: 降順にする	ascending = False
プログラムの実行を異常止める	sys.exit(1)
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
rgbに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
行列の行ごとの最小	np.min(aArray, axis=1)
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
データフレームのリストカラムの母標準偏差を算出する	df[aList].std(ddof=0)
nをn2だけ減少させる	n -= n2
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
データ列とリストの散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
実数を百の位で丸める	round(x, -2)
辞書に項目名がない場合、要素を追加する	aDict.setdefault(key, element)
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
option: 印をバツに変更する	marker = 'x'
データフレームのリスト列を千の位で丸める	df[aList].round(-3)
ValueMapでまとめてデータ列の値を置き換える	ds.replace(ValueMap)
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
イテラブルの長さnの順列	itertools.permutations(iterable, n)
辞書をJSON形式で出力ストリームに保存する	json.dump(aDict, fout, ensure_ascii=False)
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
データフレームの列の名前一覧で指定した列をドロップする	df.drop(columns, axis=1)
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
折れ線グラフの四角印の色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
双方向キューが空でないかどうか調べる	len(deq) != 0
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームをグループ化してヒストグラムでプロット化する	sns.histplot(df, x='列名', hue='カテゴリ名')
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
計算機イプシロン	sys.float_info.epsilon
第二四分位数でデータフレームの欠損値を補う	df.fillna(df.median())
整数nを十六進表現に変換する	hex(n)
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
セットが空でない	len(aSet) != 0
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
文字列の左側から空白を取り除く	s.lstrip(' ')
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
辞書の項目名と値を入れ替える	{v: k for k, v in aDict.items()}
リストとリストについて散布図を描画し、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
ダークスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
真紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
ガウス過程を使ってクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ミディアムターコイズ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
数列とリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
線グラフを色付きの破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームから指定された2つの列を抽出する	df[[column, column2]]
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームを列を用いて並べ、、新しいインデックスを加える	df.sort_values(columns).reset_index()
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
ヒストグラムをパールゴールデンロッド色として描画する	plt.hist(データ列, color='palegoldenrod')
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
ピアソン積率相関係数として表のリスト列の相関行列	df[aList].corr(method='pearson')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
横軸の目盛を対数に変更する	plt.xscale('log')
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
文字列は全て十進数字か調べる	s.isdecimal()
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームの値は欠損値	df.isna()
データフレームのグループごとの標準偏差	df.groupby(column).std()
サポートベクターマシンを使ってクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
16進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
小文字列	string.ascii_lowercase
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
グラフのデータラベルを表示する	plt.legend()
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
y座標の目盛を表示しない	plt.yticks([])
ゼロ埋めされた三２ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.int16)
オーキッドにヒストグラムの色をセットする	plt.hist(データ列, color='orchid')
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
改行せず２つの文字列を表示する	print(value, value2, end='')
スピアマン順位相関係数としてデータフレームのカラムと列の相関行列	df[[column, column2]].corr(method='spearman')
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
option: シャルトリューズにグラフの色を変更する	color = 'chartreuse'
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
グラフの見た目をデフォルトでいい感じにセットする	sns.set()
文字列が全て英字か調べる	s.isalpha()
ライトグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
散布図をデピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='deeppink')
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
文字列リストを結合する	''.join(aStringList)
昇順にデータフレームを'A'列によって並べる	df.sort_values(by='A', ascending=True)
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
スタックをポップする	deq.pop()
option: ダークシアグリーン色を用いる	color = 'darkseagreen'
折れ線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
日付データからn秒分減算する	aDate - datetime.timedelta(seconds=n)
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
プロットをポスター用に設定する	sns.set(context='poster')
データフレームのカラムのモード	df[col].mode()
二つの変数をそれぞれ定義する	x, y = i, j
ファイル名がJSONファイル	filename.endswith('.json')
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
エクセルデータファイルからnという名前のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
option: 線の種類を点線に設定する	linestyle = 'dotted'
青いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
文字列の先頭だけ大文字化する	s.capitalize()
オブジェクトに属性があるか調べる	hasattr(obj, プロパティ名)
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
データ列をインポートする	import pandas as pd
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
データフレームのリストカラムがどれだけ、分散しているか確認する	df[aList].var()
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
二つの列でによって降順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
赤いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
データ列が何分か確認する	ds.dt.minute
データフレームの中の列をn個に等量でビン分割する	pd.qcut(df[col], n)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
列によってデータフレームをグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
year年の日付	datetime.date(year=year, month=1, day=1)
散布図を赤い四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c='r')
nが無限に続くリストを得る	itertools.repeat(n)
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームのリストカラムの欠損値を最頻値で補う	df[aList].fillna(df[aList].mode().iloc[0])
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
nのバイト長	(n.bit_length() + 7) // 8
option: ピーチパフ色を使う	color = 'peachpuff'
赤い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのカラムの秒	df[col].dt.second
グラフを用いる	import matplotlib.pyplot as plt
option: 色をフクシアに設定する	color = 'fuchsia'
行列の和	aArray + aArray2
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
option: フォントの色をインディゴに設定する	color = 'indigo'
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
データフレームの中のカラムを等量でビン数nでビン分割する	pd.qcut(df[col], n)
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ファイルパスをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームのカラムをグループ化して、ヒストグラムで見る	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ひとつでもアルファベットが文字列内に含まれる	any(c.isalpha() for c in s)
文字列は組に含まれるか調べる	element in aTuple
辞書のキーを要素に変更する	aDict[key] = element
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
ファイルのファイルサイズ	os.path.get_size(filepath)
データフレームの列をインプレイスで削除する	df.drop(column, axis=1, inplace=True)
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
option: フォントの色を貝殻に設定する	color = 'seashell'
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
コロンで文字列を区切って、列挙する	s.split(':')
浮動小数点数の最小値	sys.float_info.min
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
縦棒グラフをプロットしてバーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
タプルを逆順にする	aTuple[::-1]
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
既存のファイルをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
グリッド線	plt.grid(linewidth=3.0)
二つの文字列は等しくないか調べる	s != s2
ひとつでも非小文字が文字列中にあるか	any(not c.islower() for c in s)
オレンジレッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
中央値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].median())
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
データフレームを複数の列で昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列のNaNを最大値で埋める	df[col].fillna(df[col].max())
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの列の値がxより少ないデータを抽出する	df[df[column] < x]
多次元データを多次元尺度構成法を用いて濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームの内で、列と列の重複を見る	df.duplicated(subset=[column, column2])
データフレームの指定した４つの列だけ選ぶ	df[[column, column2, column3, column4]]
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
グラフを使う準備をする	import matplotlib.pyplot as plt
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
棒グラフをフクシア色を用いて描画する	plt.bar(データ列x, データ列y, color='fuchsia')
リストに文字列を追加する	aList.append(element)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
二つの浮動小数点数が十分に近いか確認する	math.isclose(x, x2)
option: シャルトリューズ色を使う	color = 'chartreuse'
黄色いグリッド線を引く	plt.grid(color='y')
データフレームのリスト列の欠損値を中央値に変更する	df[aList].fillna(df[aList].median())
２つのオブジェクトが等しい	obj == obj2
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
ダークシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
両端キューから最初の要素を取り除く	deq.remove(element)
文字列の中の大文字・小文字を無視して正規表現によるマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
モジュールを検索するパス	sys.path
データフレームを列を用いてによって破壊的に並べる	df.sort_values(by=column, inplace=True)
文字列が全て空白文字からなる	s.isspace()
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: オレンジ色を使う	color = 'orange'
nまでの偶整数列	list(range(2, n, 2))
リストとイテラブルの散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
複数のデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
ひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
カウンタの最も頻出な文字列を求める	aCounter.most_common()[0]
原点から(実数,y)の距離を求める	math.hypot(x, y)
列と列をジップする	itertools.zip_longest(iterable, iterable2)
2つのデータフレームを横方向にマージする	pd.merge(df, df2)
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
浮動小数点数のn乗を求める	pow(x, n)
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
散布図の▲印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
マップから項目名の値	aDict.get(key)
散布図を赤い右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c='r')
文字コードtextで追加できるように既存のファイルパスを開く]	open(filepath, mode='a', encoding=text)
データフレームの列の文字列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
タイムスタンプデータが何時か知る	aDatetime.hour
辞書の値として要素が含まれているか調べる	element in aDict.values()
option: 改行をセパレータで使う	sep = '\n'
タプルをミュータブルにする	list(aTuple)
ロードしたモジュールの一覧	sys.modules
ヒストグラムを用いてデータ列を可視化する	plt.hist(データ列)
nをn2で割った余りをnに代入する	n %= n2
option: フォントの色をスレートブルーに設定する	color = 'slateblue'
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
暗い赤にヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
文字列を青色にする	f'\033[34m{value}\033[0m'
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
ValueMapでデータフレームの値を置換する	df.replace(ValueMap)
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
データフレームのリストカラムを1000の位で丸めて、整数にする	df[aList].round(-3).astype(int)
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
データ列の折れ線プロットを描画し、、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
オブジェクトが整数クラスのインスタンスか調べる	isinstance(obj, int)
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
辞書をコピーする	dict(aDict)
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
nが負の数	n < 0
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
横棒グラフを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: グラフの色を暗い赤に設定する	color = 'darkred'
文字列の出力を改行なしに行う	print(value, end='')
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ベクトルの演算をする	import numpy as np
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストから文字列を取り除く	aList.remove(element)
多い順にカウンタをリストとして得る	aCounter.most_common()
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームのカラムの分	df[col].dt.minute
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
イテラブルをy軸、リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
文字列の末尾から部分文字列を探す	s.rfind(sub)
エクセルファイルファイルからnというシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
option: スラッシュを分割記号で使う	sep = '/'
タプルに別の辞書のエントリを更新する	aDict.update(aDict2)
文字列は平仮名か確認する	('ぁ' <= ch <= 'ん')
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
option: グラフの色をグリーンに変更する	color = 'green'
ヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームのリスト列の中に文字列と文字列がある	df[aList].isin([value, value2])
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
文字列をコロンを用いて分割して列挙する	s.split(':')
ミディアムオーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
n番目のカラムをインデックスにしてCSVファイルTSVファイルを読み込む	pd.read_csv(filename, index_col=n)
ユニークな値を要素とする配列	np.unique(aArray)
行列の演算を行う	import numpy as np
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
リストと配列の散布図を描画し、、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
グラフをポスターに設定する	sns.set(context='poster')
実数を小数点以下で四捨五入する	round(x, n)
カラムの中に文字列と文字列が含まれるかどうか	ds.isin([value, value2])
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
シーケンスを集合に追加更新する	aSet.update(iterable)
データフレームをエクセルファイルから読み込む	pd.read_excel(filename)
本日の日数	datetime.datetime.today().day
option: グラフの色をデピンクに設定する	color = 'deeppink'
文字列の左側の空白を消す	s.lstrip()
ヒストグラムの色をゴールドにセットする	plt.hist(データ列, color='gold')
ファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
カウンタを多い順にリストとして得る	aCounter.most_common()
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
青い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
列によってデータフレームをグループ化し、、合計を求める	df.groupby(column).sum()
option: グラフの色を小麦色にする	color = 'wheat'
縦棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列が文字列より辞書順で前	s < s2
option: グラフの色をフローラルホワイトにセットする	color = 'floralwhite'
option: ライトグリーンにフォントの色を設定する	color = 'lightgreen'
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
小数点数の絶対値	math.fabs(x)
昇順にリストの値をソートする	sorted(aList, reverse=False)
option: フォントの色をターコイズに設定する	color = 'turquoise'
シーケンスを両端キューにする	collections.deque(iterable)
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
カウンタ同士でユニオン演算する	aCounter | aCounter2
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
データフレームのグループごとの平均値	df.groupby(column).mean()
両端キューをデキューする	deq.popleft()
部分文字列が文字列の開始位置番目からと終了位置までの間に含まれないか	s.find(sub, start, end) == -1
文字列を最後の部分文字列で二つに区切って残りの文字列を使う	s.rpartition(sub)[-1]
集合からエラーなく要素を取り除く	aSet.discard(element)
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームのインデックス一覧	df.index
nがn2で割り切れないか確認する	n % n2 != 0
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
スピアマンの相関係数を使う	scipy.stats.spearmanr(データ列, データ列2)
データ列が何日か見る	ds.dt.day
リストから配列を作る	np.array(aList)
option: オールドレース色を使う	color = 'oldlace'
散布図のマーカーを△にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームを複数の列によってソートする	df.sort_values(by=column)
真紅色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
空の辞書を新規生成する	{}
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
行列から重複を除いた行列を作成する	np.unique(aArray)
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
散布図をミディアムターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
タンジェント	math.tan(x)
オブジェクトが組に含まれないか調べる	element not in aTuple
Pandasでフォーマットを用いてデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
スタックの最大長	deq.maxlen
option: 分割記号をコロンにする	sep = ':'
配列とリストについての散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
フォーマットfmtとしてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format=fmt)
データ列の変化を半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームからn番目の列を消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: どのカラムもインデックスに設定しない	index_col = None
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
本日が日曜日	datetime.datetime.today().weekday() == 6
デフォルトのエンコーディングを知る	sys.getdefaultencoding()
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
option: 追加モードを使う	mode = 'a'
棒グラフをカデットブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
データ列の各データ値の出現数	ds.value_counts()
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データ列の中に存在すると文字列の合計を数える	ds.isin([value, value2]).sum()
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
タイムスタンプデータは日付時刻データより後ろか	aDatetime > aDatetime2
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
xが一桁の正の数かどうか調べる	0 <= x <= 9
折れ線グラフの丸マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
タイムスタンプデータの分数	aDatetime.minute
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
データフレームのn行目を選択する	df.loc[n]
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
配列とリストの散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図に青い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
nとn2の和	n + n2
1からNまでのベクトル	np.arange(1, N+1)
数列の折れ線プロットを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
リストとリストについて散布図をプロットし、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
両端キューに要素をエンキューする	deq.appendleft(element)
今日の日付時刻を求める	datetime.datetime.now()
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
nがn2よりも小さいか確認する	n < n2
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
ファイルパスをバイナリモードとしてオープンする]	open(filepath, mode='rb')
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
データフレームを1000の位で丸める	df.round(-3)
データフレームのリストカラムの正規分布に対する左右対称性を計算する	df[aList].kurt()
タプルにタプルの項目を更新する	aDict.update(aDict2)
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
リストを中央値でビン分割する	pd.qcut(aList, 2)
左にn個分両端キューの要素を輪番で回す	deq.rotate(-n)
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
nが3で割り切れるか調べる	n % 3 == 0
データフレームの文字列をNaNにする	df.replace(s, np.nan)
データフレームのリスト列を小数点以下n桁で四捨五入する	df[aList].round(n)
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
配列と配列について散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
option: コーンフラワーブルーに色を変更する	color = 'cornflowerblue'
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
文字列がリストの要素かどうか調べる	element in aList
折れ線グラフをスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='skyblue')
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
標準入力を使う	sys.stdin
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
出力ストリームに文字列を書き込む	f.write(s)
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
データフレームを列によってまとめた表	df.groupby(column)
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
データフレームはどの程度、分散しているか見る	df.var()
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データ列の値をまとめて正規表現patternで置換する	ds.replace(pattern, repl, regex=True)
浮動小数点数が正かどうか調べる	x > 0
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データ列の一意な値の個数	ds.nunique()
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
配列の平均値	np.mean(aArray)
横棒グラフをダークスレートブルー色を使って描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
文字列がタプルに含まれるか調べる	element in aTuple
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームを列でソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
表データのn行より後ろを抽出する	df[n:]
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
ダーク・スラテグレー色を使ってヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
option: グラフの色をダークスレートブルーに指定する	color = 'darkslateblue'
昇順に列を用いてデータフレームを整列する	df.sort_values(by=column, ascending=True)
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
nが5で割り切れるか判定する	n % 5 == 0
option: UTF8を使う	encoding = 'utf-8'
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
option: アクア色を使う	color = 'aqua'
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データ列をインポートする	import pandas as pd
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフの三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームを列によって集約して、それぞれのグループごとの平均値を計算する	df.groupby(column).mean()
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
既存の配列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
クラス分類の予測精度をヒートマップを用いて見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
バイナリモードでファイルをオープンして]、fとする	f = open(filepath, mode='rb')
データ列の折れ線グラフを▽印として描画する	plt.plot(データ列x, データ列y, marker='v')
nではない	not n
折れ線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームの重複した行をマスクする	df.duplicated()
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: グラフの色をグレーに設定する	color = 'gray'
データ列のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
データフレームはどれだけ、分散しているか見る	df.var()
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームを各列毎にグループ化し、列の標準偏差を求める	df.groupby(column)[column2].std()
ダークスレートブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
タブ	'\t'
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
二変数の最小値	min(x, y)
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
表を破壊的に昇順に'A'列によって並べる	df.sort_values(by='A', ascending=True, inplace=True)
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
要素が集合に含まれるか	element in aSet
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
整数個のものからk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
配列の要素ごとの積	np.multiply(aArray, aArray2)
半透明の破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームを二つの列によって整列して更新する	df.sort_values(by=['A', 'B'], inplace=True)
データ列を小数点以下n桁で丸める	ds.round(n)
デフォルトでグラフをいい感じに設定する	sns.set()
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
データフレームのリストカラムが正規分布からどれだけ歪んでいるか確認する	df[aList].kurt()
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
リストを黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
コロンで文字列を分割して文字列リストにする	s.split(':')
year年month月の日付	datetime.date(year=year, month=month, day=1)
文字列が文字列より辞書順で後か調べる	s > s2
データ列の偏りを対数変換する	np.log(データ列)
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
カデットブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームを'A'列でまとめた表	df.groupby('A')
列をイミュータブルな集合に変換する	frozenset(iterable)
イテラブルを文字列に変換して、空白を使って連結する	' '.join(map(str, iterable))
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
option: バリーウッドにグラフの色を変更する	color = 'burlywood'
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
マップからキーの値をエラーなく得る	aDict.get(key, None)
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
データフレームの列で文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ファイルパスをフォルダ名とファイル名に分割する	os.path.split(filepath)
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<')
データフレームのカラムの年	df[col].dt.year
自然数の階乗	math.factorial(n)
辞書の値に要素が含まれていない	element not in aDict.values()
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
データフレームのそれぞれのグループの平均値	df.groupby(column).mean()
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフを耐火レンガ色を使って描画する	plt.plot(データ列x, データ列y, color='firebrick')
配列の各要素の最小公倍数	np.lcm(aArray, aArray2)
数式の数値	float(e)
濃いシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
第二引数のファイルの名前	sys.argv[1]
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
キーがマッピングに存在するか調べる	key not in aDict
サーモン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
文字列が平仮名	('ぁ' <= ch <= 'ん')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームのリストカラムのヒートマップを描画する	sns.heatmap(df[aList].corr())
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
2つのカウンタのいずれかに含まれる値	aCounter | aCounter2
データフレームのリストカラムの中に日付データが存在する	df[aList].isin([value])
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
シャルトリューズ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: グラフの色を赤に設定する	color = 'red'
リストの最初のオブジェクトを探す	aList.index(element)
横棒グラフをダークカーキ色を使って描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: 大バツマーカーを描画する	marker = 'X'
散布図のマーカーの線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
nが2で割り切れる	n % 2 == 0
列を文字列に変換して空白でつなげる	' '.join(map(str, iterable))
縦棒グラフをプロットして、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
未初期化の配列	np.empty(要素数, dtype=np.int)
リストと数列についての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームのカラムが何時か見る	df[col].dt.hour
イテラブルを2回あわせた直積を求める	itertools.product(iterable, repeat=2)
option: 整数型を使う	dtype = np.int
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
整数nの二進文字列	bin(n)[2:]
データフレームのカラムの標準偏差	df[col].std()
浮動小数点数の３乗	x ** 3
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
部分的最小二乗法として回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
辞書の項目名を列挙する	aDict.keys()
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列リストにイテラブルを変換して、タブで結合する	'\t'.join(map(str, iterable))
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
データ列を千の位で丸めて、整数型にする	ds.round(-3).astype(int)
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
文字列の接尾辞が部分文字列か	s.endswith(sub)
文字列でフォーマットして今日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
プロットにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
整数nを半分にする	n //= 2
双方向キューの長さを制限する	collections.deque(maxlen=n)
横軸の目盛を非表示にする	plt.xticks([])
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
データフレームの先頭	df.head()
option: リネンにグラフの色を設定する	color = 'linen'
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
オブジェクトは論理値か調べる	isinstance(obj, bool)
線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
リストにリストを追加する	aList.extend(aList2)
タプルの平均を求める	sum(aTuple)/len(aTuple)
option: アクアマリンを用いる	color = 'aquamarine'
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの歪度	df.kurt()
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
環境がWindowsかどうか確認する	sys.platform.startswith('win32')
ポイント印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
タプルが全て真か調べる	all(aTuple)
棒グラフをパールバイオレットレッド色を使って描画する	plt.bar(データ列x, データ列y, color='palevioletred')
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
複素数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=bool)
option: グラフの色をライトグレーに設定する	color = 'lightgray'
option: グラフの色をマルーンに設定する	color = 'maroon'
折れ線グラフの下三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
option: データ型を指定する	dtype = np.int8
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
現在の分数	datetime.date.today().minute
option: マーカーの色を変更する	markerfacecolor = '#800080'
カウンタを多い順番に列挙する	aCounter.most_common()
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
option: グラフの色をシスルに変更する	color = 'thistle'
ヒストグラムの色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
折れ線グラフの三角印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
リストを縦軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
カラムの欠損値を直後の値に設定する	ds.fillna(method='bfill')
実数に数を乗算する	x * y
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategray')
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
option: グラフの色を耐火レンガに指定する	color = 'firebrick'
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
出力ストリームにxを文字列にして書き込む	f.write(str(x))
データフレームを転置する	df.T
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
タプルと組を連結する	aTuple + aTuple2
日付データが日付データより前か調べる	aDate < aDate2
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
標準入力から1行だけ改行なしで読み込む	sys.stdin.readline().rstrip()
ファイルにxを文字列に変換して書き込む	f.write(str(x))
空のマッピング	{}
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データ列を使う	import pandas as pd
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
グラフをポスター用に設定する	sns.set(context='poster')
option: 色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
option: パープルを使用する	color = 'purple'
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームを整数に丸める	df.round()
両端キューからポップする	deq.pop()
nが奇数かどうか	n % 2 == 1
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
見やすいグラフを使用する準備をする	import seaborn as sns
無限にオブジェクトが続く列	itertools.repeat(element)
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
集合の更新不能版	frozenset(aSet)
データフレームを二つの列でソートする	df.sort_values(by=['A', 'B'])
カデットブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
リストを逆さにする	reversed(aList)
ペルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
option: スプリンググリーン色を使う	color = 'springgreen'
表データを2つの列の値でまとめたグループ	df.groupby(['A', 'B'])
空のリスト	[]
日付時刻データは日付時刻データより先	aDatetime < aDatetime2
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
黒い四角マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
辞書をクリアする	aDict.clear()
数値を黄色にする	f'\033[33m{value}\033[0m'
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
明るくカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
n個の集まりからk個重複なく選ぶ方法を算出する	math.comb(n, k)
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
option: マーカーを右三角に変える	marker = '>'
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
データ列の値が正規分布にしたがって発生する累積確率を使う	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
nをn2で割った余りを求める	n % n2
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
配列をビン数nとしてビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームは正規分布からどの程度、歪んでいるか見る	df.kurt()
rangeの無限バージョン	itertools.count(start=n, step=step)
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
セットをイミュータブルな集合にする	frozenset(aSet)
リストとリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
が名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
option: ホワイトスモーク色を使う	color = 'whitesmoke'
データフレームの中に文字列があるか調べる	df.isin([value])
複数の列でデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
option: ネイビーにグラフの色を変更する	color = 'navy'
列のコンビネーション	itertools.combinations(iterable, n)
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
スラグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
キーが辞書に存在するか調べる	key not in aDict
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
オブジェクトは整数クラスか調べる	isinstance(obj, int)
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
オプションで、標準エラーを使う	file = sys.stderr
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
浮動小数点数のn乗の実数剰余	pow(x, n, y)
グラフをスライド用に設定する	sns.set(context='talk')
両端キューをタプルに変換する	tuple(deq)
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
重複する行を抽出する	df[df.duplicated(keep=False)]
散布図をブルーバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
横棒グラフをオリベドラブ色を使って描画する	plt.barh(データ列x, データ列y, color='olivedrab')
現在が何時か知る	datetime.date.today().hour
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
nが負の数か調べる	n < 0
リストと数列の散布図をプロットしてマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを'A'列で昇順に破壊的に整列する	df.sort_values(by='A', ascending=True, inplace=True)
ファイルをオープンして]、バイナリストリームを求める	open(filepath, mode='rb')
浮動小数点数の双曲線正接の逆数	math.atanh(x)
回帰分析をパーセプトロンで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データフレームの値を正規表現でまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
option: カラムの名前を自動的な連番に指定する	header = None
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームのカラムの時を使う	df[col].dt.hour
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
グレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
追加できるように既存のファイルパスをBOM付きでオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームの列の名前一覧を使う	df.columns
option: 暗い赤色を使う	color = 'darkred'
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームを2つの列で降順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
リストからベクトルを初期化する	np.array(aList)
データフレームを二つの列の値によってグループ化し、記述統計量を計算する	df.groupby(['A', 'B']).describe()
異なる列をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
アイボリー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
option: 改行コードを動作環境依存に変更する	newline = None
データフレームのpercent分位数	df.quantile(percent/100)
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
option: バツマーカーを使う	marker = 'x'
カウンタを辞書に変換する	dict(aCounter)
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームを表示するとき、表示可能な行数を変更する	pd.set_option('display.max_rows', n)
非空白が文字列中に含まれるか	any(not c.isspace() for c in s)
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
データフレームの先頭n行	df.head(n)
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
実数を十の位で丸める	round(x, -1)
箱髭図でデータフレームの二つのカラムを並べて描画する	plt.boxplot([df['カラム'], df['カラム']])
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
Pandasで、データ列の数値時刻から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームを昇順に列でソートする	df.sort_values(by=column, ascending=True)
数列のヒストグラムをプロットする	plt.hist(データ列)
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームのカラムの平均	df[col].mean()
データフレームを散布図でグラフ化してカテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: マーカーを星に変更する	marker = '*'
データフレームのカラムの中に文字列が存在するか調べる	df[col].isin([value])
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
option: ポイントマーカーを描画する	marker = '.'
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
折れ線グラフのクロスマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
nがn2以下か調べる	n <= n2
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
縦棒グラフをパールバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palevioletred')
度数分布図を描画し、区間数を設定する	plt.hist(データ列, bins=区関数)
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
n個に等間隔でデータ列をビニングする	pd.cut(ds, n)
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
文字列を左寄せにする	s.ljust(文字列幅)
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
実行時の標準出力の出力先がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
実数の小数部	math.modf(x)[0]
データフレームのカラムのタイムゾーンを文字列にセットする	df[col].tz_convert(s)
option: 小麦色にフォントの色をする	color = 'wheat'
本日をタプルに変換する	datetime.datetime.today().timetuple()
文字列を走査しパターンに大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
データフレームのカラムの母標準偏差を求める	df[col].std(ddof=0)
数式の部分分数化を行う	sympy.apart(e)
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
箱ひげ図をプロットして平均線を追加する	plt.boxplot(データ列, meanline=True)
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
option: コーンズシルクにグラフの色を設定する	color = 'cornsilk'
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
計数器をマッピングから作る	collections.Counter(aDict)
ヒストグラムをアイボリー色を用いて描画する	plt.hist(データ列, color='ivory')
モデルを作る	model.fit(説明変数, 目的変数)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
option: カンマをセパレータで使う	sep = ','
ピアソンの相関係数を見る	scipy.stats.pearsonr(データ列, データ列2)
データフレームを各列とカラムの組み合わせ毎にグループ分けして、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
リストを展開してプリントする	print(*aList)
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
データ列の離れ具合をプロット化する	sns.residplot(x=データ列, y=データ列)
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
多次元データを特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
最初のカテゴリーを除外してデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
自然対数の底を使う	math.e
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列が組に含まれる	element in aTuple
データ列は何年か見る	ds.dt.year
ティール色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
集合からエラーなく値を除く	aSet.discard(element)
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
ファイルパスからディレクトリ名を見る	os.path.dirname(filepath)
rgbの▼マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: セパレータを使わない	sep = ''
縦棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
散布図のマーカーを三角印にする	plt.scatter(データ列x, データ列y, marker='^')
リストとリストについて散布図を描画して、上三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
データ列をビン数nでビン分割する	pd.cut(ds, n)
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
リストの文字列が最初に見つかるインデックス	aList.index(element)
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
option: グレー色を使う	color = 'gray'
x軸の目盛を非表示にする	plt.xticks([])
リストとリストについて散布図を描き、、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
nからいつまでもカウントアップする	itertools.count(start=n)
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: ダークグレー色を使う	color = 'darkgrey'
散布図をドジャーブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
分数を使う	import fractions
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
option: 欠損値を先頭にする	na_position = 'first'
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
データ列の年	ds.dt.year
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
文字列が大文字	s.isupper()
文字列中に非英数字が含まれるか確認する	any(not c.isalnum() for c in s)
ヒストグラムの色をターコイズに変更する	plt.hist(データ列, color='turquoise')
option: 青緑色を使う	color = 'turquoise'
赤い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
'A'列でデータフレームをグループ化する	df.groupby('A')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
文字列の右側から部分文字列を除く	s.rstrip(sub)
縦棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
実行結果を黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームを列でソートして、更新する	df.sort_values(by=column, inplace=True)
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
配列とデータ列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: 色をライトスチールブルーに指定する	color = 'lightsteelblue'
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
日付データが日曜日かどうか調べる	aDate.weekday() == 6
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
文字列を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
データフレームのどの値が最も現れるか見る	df.mode()
データフレームの欠損値がある箇所を色付けする	df.style.highlight_null()
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
日付データの曜日を整数で使う	aDate.weekday()
nが2で割り切れないか確認する	n % 2 == 1
文字列を部分文字列で分けたときの最初の文字列を求める	s.partition(sub)[0]
ISO書式の文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフの色を小麦色に変更する	plt.plot(データ列x, データ列y, color='wheat')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
プロットにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームを2つの列をキーにしてソートする	df.sort_values(by=['A', 'B'])
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
空の両端キュー	collections.deque()
文字列は全て数値か	s.isnumeric()
実数の双曲線正弦の逆数	math.asinh(x)
散布図に黒い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
データ列の第三四分位数	ds.quantile(0.75)
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データ列の値は欠損値	ds.isna()
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
行列の要素ごとの積	np.multiply(aArray, aArray2)
色付きの破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
黒い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
列の種類	df.info()
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
リストをn倍する	aList * n
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データ列の正規分布に対する左右対称性	ds.kurt()
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
rgbのクロスマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ファイルを開いて]追加ストリームを使う	open(filepath, mode='a')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
横棒グラフをコーラル色として描画する	plt.barh(データ列x, データ列y, color='coral')
散布図の大バツ印の線幅を変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
option: ブルーバイオレットを使う	color = 'blueviolet'
ファイルとfilenameを結合する	os.path.join(filepath, filename)
縦軸の目盛を表示しない	plt.yticks([])
八進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームのカラムの欠損値を最小値に指定する	df[col].fillna(df[col].min())
バイナリ書き込みモードでファイルをオープンする]	open(filepath, mode='wb')
横棒プロットを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
セットからエラーなく要素を除去する	aSet.discard(element)
線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
マップを複製する	dict(aDict)
文字列をASCIIコード列に変換する	[ord(ch) for ch in s]
配列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
リストをカウンタに変換する	collections.Counter(iterable)
双方向キューの大きさ	len(deq)
暗くカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
キューの左に文字列を追加する	deq.appendleft(element)
暗い赤色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
option: BOM付きを用いる	encoding = 'utf_8_sig'
棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
データフレームから重複した行を削除する	df.drop_duplicates()
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
グラフの用途をポスターに設定する	sns.set(context='poster')
ダークシアグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
ヒストグラムをミディアムバイオレットレッド色として描画する	plt.hist(データ列, color='mediumvioletred')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
nがn2以下、もしくはn3以上か	n <= n2 or n >= n3
エクセルデータファイルをデータフレームとして読み込む	pd.read_excel(filename)
データフレームを関数の値によってグループ化し、基本統計量を算出する	df.groupby(関数).describe()
アルファベットの小文字を全て求める	string.ascii_lowercase
文字列の中の大文字・小文字を無視して正規表現による全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームのそれぞれのグループ毎の合計	df.groupby(column).sum()
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
nがn2で割り切れるか	n % n2 == 0
表データをグループ化し、各列に対し平均値を求める	df.groupby(column)[column2].mean()
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
グラフの横軸の軸ラベルを変更する	plt.xlabel('x軸ラベル')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
option: グラフの色をコーラルに設定する	color = 'coral'
カラーマップを用いてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
スカイブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
nとn2の排他的論理和	n ^ n2
折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
アンティークホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ファイルからの入力ストリームを使う	open(filepath)
第一引数で指定されたファイルの名前	sys.argv[1]
空のカウンタ	collections.Counter()
タプルのn番目からn2番目までの部分	aTuple[n:n2]
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
ベストな場所に凡例を表示する	plt.legend(loc='best')
xが1もしくは2か調べる	x == 1 or x == 2
二つのリストの積集合を使う	list(set(aList) & set(aList2))
option: 欠損値は無視する	dropna = True
行列の列ごとの最大	np.max(aArray, axis=0)
eの乗数	math.exp(x)
折れ線グラフをローングリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
文字列を分割する	s.partition(sep)
横軸だけ目盛線	plt.grid(axis='x')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: グラフの色をロイヤルブルーにする	color = 'royalblue'
データフレームの中に日付データがあるか調べる	df.isin([value])
データフレームを列で集約して、列の要約統計量を求める	df.groupby(column).describe()[column2]
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームのカラムをダミー変数に変換する	pd.get_dummies(df[column])
selectorsでマスクした列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
カウンタを低頻出方からリストとして得る	aCounter.most_common()[::-1]
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
日付データをISO書式の文字列に変換する	aDate.isoformat()
データフレームの列がxより小さい行を取り出す	df[df[column] < x]
列をキーとして2つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
option: タンにグラフの色を設定する	color = 'tan'
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
スラグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
点線にヒストグラムを設定する	plt.hist(データ列, linestyle='dotted')
整数nがリストのひとつであるか調べる	n in aList
前もって大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
range関数の無限版	itertools.count(start=n, step=step)
数列と配列の散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
折れ線グラフの四角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
Pandasで、データフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームを各列毎に分類して、文字列というグループの個数を求める	df.groupby(column).size()[s]
小数点数のコサインの逆数	math.acos(x)
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
要素一つの組	(element,)
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
グラフの描画で濃くカラーパレットを使用する	sns.set(pallete='deep')
実行結果を青色にする	f'\033[34m{value}\033[0m'
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
option: データ型としてブール型を使う	dtype = np.int32
カテゴリで色分けしてデータフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
モデルの残差を求める	目的変数 - model.predict(説明変数)
リストの末尾のn要素を取り除く	aList[:-n]
折れ線グラフの菱形マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
列でデータフレームをソートして、行を振り直す	df.sort_values(columns).reset_index(drop=True)
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
列の値によってデータフレームをグループ分けする	df.groupby(column)
nの各桁の総和を求める	sum(map(int, str(n)))
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
option: 分割記号をタブにする	sep = '\t'
option: アンティークホワイト色を使う	color = 'antiquewhite'
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
最大値と最小値を用いてデータを正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
リストのn番目からn2番目まで	aList[n:n2]
option: 黄色を用いる	color = 'yellow'
二つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームの中で列と列に重複があるか見る	df.duplicated(subset=[column, column2])
黒い▽マーカーをリストとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームを各カラム毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
option: ミディアムシアグリーンにフォントの色を変更する	color = 'mediumseagreen'
ケンドールでデータフレームの相関行列を計算する	df.corr(method='kendall')
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
黄色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
nからn2までの整数列	list(range(n, n2+1))
カウンタ同士でユニオン	aCounter | aCounter2
散布図をラベンダー色を使って描画する	plt.scatter(データ列x, データ列y, color='lavender')
折れ線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
option: どの行もヘッダにしない	header = None
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
辞書の内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
option: データ型を指定する	dtype = np.int16
散布図の下三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
数列とリストの散布図を描いて、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列の変遷を赤い実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
実数を実数で割った余り	x % y
option: フォントの色をアリスブルーに指定する	color = 'aliceblue'
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
二つの集合がセットと交わりを持たないかどうかテストする	aSet.isdisjoint(aSet2)
ファイルパスを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
リストとリストについて散布図を描画して、マーカーを四角にセットする	plt.plot(データ列x, データ列y, marker='s')
option: グラフの色をクリムゾンに変更する	color = 'crimson'
常用対数を計算する	math.log10(x)
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
カラムの値を正規表現patternでreplに置き換える	ds.replace(pattern, repl, regex=True)
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
t-SNEとして濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
パラメータについて数式を積分する	sympy.integrate(e, z)
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
データフレームを列によって降順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
散布図をバツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x')
ライトスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
昇順に'A'列によって表データを並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
リストとリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
option: ラベンダーブラッシュにグラフの色を指定する	color = 'lavenderblush'
ファイルをBOM付きを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
カウンタの要素のカウント	aCounter[element]
option: グラフの色をシアンに設定する	color = 'cyan'
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
option: レベッカパープルにグラフの色を変更する	color = 'rebeccapurple'
データフレームを二つの列の値によってグループ化し要約統計量を求める	df.groupby(['A', 'B']).describe()
ライトスチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
n2行n列の二次元リストを得る	[[0] * n for _ in range(n2)]
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
データフレームの中の列をn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: 配列のデータ型を指定する	dtype = np.int32
nの2進数表記	bin(n)
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
option: グラフの色をコーンズシルクに指定する	color = 'cornsilk'
グラフの色を淡くする	sns.set(pallete='muted')
正規表現に複数行対応として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
実数が負の数か調べる	x < 0
オブジェクトが浮動小数点数かテストする	isinstance(obj, float)
黒い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ファイルから1バイト、読み込む	f.read(1)
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
折れ線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
文字列中に部分文字列が含まれない	sub not in s
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
option: 文字コードtextを使う	encoding = text
データフレームの列の欠損値を直前の値で置き換える	df[col].fillna(method='ffill')
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
リストの最後にリストを追加する	aList.extend(aList2)
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
文字列をISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
混同行列をヒートマップを用いて確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
オプションで、標準エラーを使用する	file = sys.stderr
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
データフレームの内で、列と列の重複を確認する	df.duplicated(subset=[column, column2])
ヒストグラムをミッドナイトブルー色を使って描画する	plt.hist(データ列, color='midnightblue')
イテラブルを文字列に変換して、カンマで結合する	','.join(map(str, iterable))
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
タン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
ライトコーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
方程式として数式の変数の解を求める	sympy.solve(e, z)
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データ列のヒストグラムを描く	plt.hist(データ列)
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
黒い三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
横棒グラフをダークバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='darkviolet')
option: ハニーデュー色を用いる	color = 'honeydew'
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
文字列はタイトル大文字小文字かどうか調べる	s.istitle()
データフレームのカラムの中にいくつNaNが含まれるか求める	df[col].isna().sum()
option: グラフを破線に設定する	linestyle = 'dashed'
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
ファイルパスをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データ列の中に文字列があるかどうか調べる	ds.isin([value])
リストとリストの散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
正規分布に従うかどうか調べる	scipy.stats.shapiro(データ列)
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
最大値・最小値として整数乱数を計算する	random.randint(最小値, 最大値)
イテラブルに列を続けたイテラブル	itertools.chain(iterable, iterable2)
タプルをJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
文字列を最初の部分文字列で分けた場合の後半の文字列を見る	s.partition(sub)[-1]
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
イテラブルをカウンタにする	collections.Counter(iterable)
二進文字列を整数に変換する	int(s, 2)
option: ペールグリーンに色を指定する	color = 'palegreen'
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
イテラブルを累加したイテラブルを得る	itertools.accumulate(iterable)
タプルの末尾のn要素を取り除く	aTuple[:-n]
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
一点鎖線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
グラフの全般的にカラーパレットを淡くする	sns.set(pallete='muted')
option: プラム色を使用する	color = 'plum'
option: 茶色色を使用する	color = 'brown'
日付を使う	import datetime
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの列が正規表現文字列にマッチする行を選択する	df[df[column].str.match(s)]
今日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
グリッド線	plt.grid(linestyle='--')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
option: ライトスレイグレー色を使う	color = 'lightslategrey'
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
末尾から文字列を部分文字列で分割する	s.rsplit(sub)
文字列がタプルの要素	element in aTuple
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
プログラムを適切に終了する	sys.exit(0)
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ラベンダーにヒストグラムの色を変更する	plt.hist(データ列, color='lavender')
変数を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームのカラムの中にある文字列との合計をカウントする	df[col].isin([value, value2]).sum()
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
いつまでもカウントアップする	itertools.count()
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
nとn2の論理積	n & n2
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
ファイルをバイナリモードとしてオープンして]fとする	f = open(filepath, mode='rb')
日付データが火曜日か調べる	aDate.weekday() == 1
２つのオブジェクトが同一参照か	obj is obj2
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
ビン数nでリストをビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
データ列が何曜日か確認する	ds.dt.weekday_name
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
option: フォントの色を紺碧に変更する	color = 'azure'
データフレームのリストカラムの中にいくつ文字列が含まれるか数える	df[aList].isin([value]).sum()
データフレームのリストカラムの中のNaNの数をカウントする	df[aList].isna().sum()
文字列を大文字に変換する	s.upper()
ロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
option: トマト色を使う	color = 'tomato'
ダークシアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
nがn2で割り切れるかどうか確認する	n % n2 == 0
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの列がxかつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='turquoise')
日付時刻データの日数	aDatetime.day
大きさnでデータ列とデータ列についての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
項目名がマッピング上で未定義か調べる	key not in aDict
数式を部分分数に展開する	sympy.apart(e)
折れ線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
データ列の曜日の名前	ds.dt.weekday_name
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
２つの値を改行で区切ってプリントする	print(value, value2, sep='\n')
日付時刻データは日付時刻データと同時か確認する	aDatetime == aDatetime2
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
オブジェクトのクラス	type(obj)
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
バギングで回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
２つ並べてヒストグラムを描く	plt.hist([データ列, データ列], color=['b', 'r'])
実数を実数で除した余り	x % y
複数の列の値によってデータフレームをまとめた表を使う	df.groupby(columns)
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
データフレームの列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
整数nはリストのどれか	n in aList
破線にヒストグラムの線の種類を変更する	plt.hist(データ列, linestyle='dashed')
nまでの奇整数列を得る	list(range(1, n, 2))
rgbの四角マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
option: サーモン色を使う	color = 'salmon'
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
折れ線グラフに星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
青い実線として配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
リストの変遷を半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: クロス印を使う	marker = 'x'
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
JSON形式のファイル入力を辞書に変換する	json.load(fin)
ふたつの集合の和集合を求める	aSet.union(aSet2)
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
スチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
要素はセットのメンバーかどうか調べる	element in aSet
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
cos	math.cos(x)
文字列リストを連結して一つの文字列にする	''.join(map(str, iterable))
ピアソンの積立相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
option: バッファリングのサイズを設定する	buffering = 4096
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
option: namesをカラムの名前に変更する	names = names
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
カラムの欠損値を平均値に変更する	ds.fillna(ds.mean())
実数が整数か調べる	x.is_integer()
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
データフレームの中の列を四分位数で分割する	pd.qcut(df[col], 4)
データフレームの欠損値を最大値で置換する	df.fillna(df.max())
オブジェクトがあるクラスか確認する	isinstance(obj, クラス)
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
データフレームの列を四捨五入して整数型にする	df[col].round().astype(int)
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
データフレームの列のNaNを直後の値で埋める	df[col].fillna(method='bfill')
列のユニークな値を見る	ds.unique()
データフレームを関数の値によって集約する	df.groupby(関数)
区切りを用いて文字列を区切る	s.split(sub)
パレットトルコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: フォントの色を青に設定する	color = 'blue'
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
option: コーラル色を用いる	color = 'coral'
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
棒グラフをグレー色を使って描画する	plt.bar(データ列x, データ列y, color='gray')
配列とリストの散布図を描画し、、マーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
線グラフをドジャーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
オブジェクトはリスト	isinstance(obj, list)
リストとリストについて散布図を描いて、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: 先頭列をインデックスに設定する	index_col = 0
実数の双曲線正弦	math.sinh(x)
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
前もって正規表現をコンパイルする	re.compile(pattern)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
散布図に大バツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='X')
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
配列を等間隔でn個にビニングする	pd.cut(aArray, n)
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
実測値をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
日付データが金曜日か	aDate.weekday() == 4
データフレームのカラムが何年か調べる	df[col].dt.year
データフレームを正規表現patternでまとめて変更する	df.replace(pattern, repl, regex=True)
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
nが一桁の数か調べる	-9 <= n <= 9
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: ベージュを使用する	color = 'beige'
青紫色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
データフレームの中の列をビン数nで分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列を正規表現で分割する	re.split(pattern, s)
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
シアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='cyan')
ペルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
ダイアモンドマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
列とカラムの重複をドロップする	df.drop_duplicates(subset=column)
kを底とする対数を算出する	math.log(x, k)
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
リストを分割数nで分割する	pd.cut(aList, n)
サポートベクターマシンとして回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの色を紺碧にする	plt.plot(データ列x, データ列y, color='azure')
データフレームから列を一つ選択する	df[[column]]
縦棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
option: グラフの色をミディアムスプリンググリーンにセットする	color = 'mediumspringgreen'
散布図をミディアムアクアマリン色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
論文にグラフを変更する	sns.set(context='paper')
nからn2の範囲	range(n, n2)
option: ８ビット整数型を使う	dtype = np.int8
option: マーカーの色を変える	markerfacecolor = '#800080'
現在のミリ秒	int(time.time() * 1000)
まとめてValueMapでデータフレームのリストカラムの値を置き換える	df[aList].replace(ValueMap)
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
ミディアムオーキッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームのcollのUNIX秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームをCSVを用いてJSONLファイルに保存する	df.to_csv(filename)
棒グラフをモカシン色として描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームの列を千の位で四捨五入する	df[col].round(-3)
ヒストグラムをフクシア色として描画する	plt.hist(データ列, color='fuchsia')
データフレームの列をドロップして、インプレイスする	df.drop(column, axis=1, inplace=True)
ヒストグラムの色をロイヤルブルーに変更する	plt.hist(データ列, color='royalblue')
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフの色をダークオーキッドに変更する	plt.plot(データ列x, データ列y, color='darkorchid')
オリーブにヒストグラムの色を変更する	plt.hist(データ列, color='olive')
文字列の末尾から改行を消す	s.rstrip('\n')
データフレームの中で、列と列の重複を調べる	df.duplicated(subset=[column, column2])
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
文字列がタプルに含まれない	element not in aTuple
文字列の右端から部分文字列を消す	s.removesuffix(sub)
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
横棒グラフを描く	plt.barh(ラベル列, データ列)
2を底とする対数	math.log2(x)
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: フォントの色をサーモンに設定する	color = 'salmon'
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
リストとイテラブルについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
横棒グラフをオールドレース色を用いて描画する	plt.barh(データ列x, データ列y, color='oldlace')
３自然数のLCM	math.lcm(n, n2, n3)
文字列の右側	s[-1]
列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
イテラブルをセットに追加更新する	aSet.update(iterable)
ヒストグラムをハニーデュー色として描画する	plt.hist(データ列, color='honeydew')
データフレームを列で並べ直す	df.sort_values(by=column)
２つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
部分文字列で文字列を分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの下三角印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのカラムが何分か見る	df[col].dt.minute
データ列の折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
マップの浅いコピーを生成する	aDict.copy()
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
option: 色をゴーストホワイトに設定する	color = 'ghostwhite'
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
option: エクセルデータのシートの名前をnamesに設定する	sheet_name = names
ファイルからフォルダ名を見る	os.path.dirname(filepath)
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
option: ライトイエローにグラフの色を変更する	color = 'lightyellow'
ダーク・スラテグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
プロットのx軸にラベルを付ける	plt.xlabel('x軸ラベル')
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
日付時刻データが木曜日か判定する	aDatetime.weekday() == 3
文字列中にひとつでも非英数字があるか調べる	any(not c.isalnum() for c in s)
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
パープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
クラスのサブ型か調べる	issubclass(サブクラス, クラス)
折れ線グラフの印を四角印にする	plt.plot(データ列x, データ列y, marker='s')
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
漢字が文字列にある	re.search('[\u4E00-\u9FD0]', s)
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームのカラムの中に含まれる文字列と文字列の数をカウントする	df[col].isin([value, value2]).sum()
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
文字列をUTF8でバイト列にする	s.encode(encoding='utf-8', errors='strict')
実数が負の数	x < 0
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
カウンタ同士で和集合を求める	aCounter | aCounter2
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
散布図を左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<')
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
配列の内積	np.dot(aArray, aArray2)
ヒストグラムの色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
option: 赤色を使う	color = 'red'
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
xが1もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
変数について数式の積分を求める	sympy.integrate(e, z)
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
最大長を指定して、両端キューを作る	collections.deque(maxlen=n)
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
変数を定義する	x = n
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
データフレームの列をヒストグラムとしてプロットする	plt.hist(df[column])
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
配列と配列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
行列の値	aArray[行番号, 列番号]
option: グラフの色をターコイズに変更する	color = 'turquoise'
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの指定された列を取り出す	df[column]
プラットホームがウィンドウズか	sys.platform.startswith('win32')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
タプルを階層化する	collections.ChainMap(aDict)
折れ線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: スカイブルー色を使う	color = 'skyblue'
データフレームのリスト列を正規表現でまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
option: パープルを使う	color = 'purple'
シーケンスのイミュータブルな集合	frozenset(iterable)
データ列の未入力値を直前の値にセットする	ds.fillna(method='ffill')
データフレームのリストカラムのNaNを直前の値にセットする	df[aList].fillna(method='ffill')
データフレームを各列毎にグループ化して文字列という名前のグループを使う	df.groupby(column).get_group(s)
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
主成分分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
ヒストグラムをオリベドラブ色として描画する	plt.hist(データ列, color='olivedrab')
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
option: 読み込みモードに設定する	mode = 'r'
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
両端キューのn番目	deq[n]
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: 左三角マーカーを加える	marker = '<'
行列計算をする	import numpy as np
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
option: n番目のカラムをインデックスに変更する	index_col = n
option: 印をバツに設定する	marker = 'x'
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
縦棒グラフを小麦色色を用いて描画する	plt.bar(データ列x, データ列y, color='wheat')
配列とリストについて散布図を描いて、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
グラフの背景色を白くする	sns.set(style='whitegrid')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
散布図の上三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
縦棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
真紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
イテラブルを配列に変換する	np.array(iterable)
出力ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
ラベンダーブラッシュ色としてヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
要素を双方向キューの末尾から削除する	deq.pop()
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
空文字	''
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
列をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
カウンタ同士で積集合	aCounter & aCounter2
実数を万の位で丸める	round(x, -4)
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
ベクトルの要素ごとの最大公約数	np.gcd(aArray, aArray2)
散布図の菱形マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: ゴーストホワイトに色を設定する	color = 'ghostwhite'
列から新しいカウンタを作る	collections.Counter(iterable)
黄緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
散布図の△マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
リストを複数横に並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: ダークスレートブルーにグラフの色を変更する	color = 'darkslateblue'
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
システム時刻で乱数を初期化する	random.seed()
文字列の開始位置から終了位置までの範囲で部分文字列の登場回数をカウントする	s.count(sub, start, end)
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
マップの項目名の値	aDict[key]
赤いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
二次元タプルをflattenする	sum(aTuple)
文字列がタプルの要素でない	element not in aTuple
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
データフレームのリストカラムの中に文字列があるかどうか調べる	df[aList].isin([value])
データフレームが重複しているか調べる	df.duplicated()
ゲインズボロ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
数で浮動小数点数を割る	x / y
イテラブルと配列について散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
実数を切り上げて整数に変換する	math.ceil(x)
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
プロットの簡単な説明を表示する	plt.legend()
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
データフレームのカラムの中にいくつ欠損値があるか求める	df[col].isna().sum()
グラフの色を全般的に暗くする	sns.set(pallete='dark')
配列と数列についての散布図にrgbのダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
数列とイテラブルについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
数列とデータ列の散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: 色を半透明にする	alpha = 0.5
コマンドラインフラグの状態を確認する	sys.flags
文字列TSVファイルからカンマ区切りのファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
ホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
ドジャーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
スピアマン順位相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
データフレームの欠損値をxに指定する	df.fillna(x)
カンマで区切って二つの実行結果をプリントする	print(value, value2, sep=',')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
option: ライムグリーンを使う	color = 'limegreen'
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
赤い丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
nからn2までのstepごとによるスライス	slice(n, n2, step)
日付時刻データが日付時刻データより先	aDatetime < aDatetime2
整数nの二進文字列を使う	bin(n)[2:]
三自然数のGCD	math.gcd(n, n2, n3)
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	s.rpartition(sub)[-1]
option: ドジャーブルー色を使う	color = 'dodgerblue'
シアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
三自然数のGCDを求める	math.gcd(n, n2, n3)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
文字列中に非空白があるか調べる	any(not c.isspace() for c in s)
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
option: シスルを使う	color = 'thistle'
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
整数nの十六進文字列を使う	hex(n)[2:]
ファイル名がCSVファイル	filename.endswith('.csv')
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
行列の行ごとの最大値	np.max(aArray, axis=1)
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
グリッドを破線にする	plt.grid(linestyle='dashed')
文字列を部分文字列で二つに区切って前半の文字列を使う	s.partition(sub)[0]
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
option: ベージュを用いる	color = 'beige'
浮動小数点数の小数部を算出する	math.modf(x)[0]
空白で文字列を区切って、列挙する	s.split()
箱ひげ図を描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
データフレームから列を１つのみ選択する	df[[column]]
線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
赤い三角マーカーを配列とイテラブルについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
option: インデックスを自動的な連番に設定する	index_col = None
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
ビン数nとしてデータ列をビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフを描画し、、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
黒いポイントマーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
文字列中のタブ文字をn個の空白にする	s.expandtabs(tabsize=n)
中央値で列をビン分割する	pd.qcut(ds, 2)
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
option: フォントの色をチョコレートに設定する	color = 'chocolate'
二つの値を文字列で区切って出力する	print(value, value2, sep=s)
option: グラフの色をタンに設定する	color = 'tan'
イテラブルと列をチェインする	itertools.chain(iterable, iterable2)
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
グラフを描画する	import matplotlib.pyplot as plt
シーグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
縦棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
色を明るくする	sns.set(pallete='bright')
折れ線グラフでデータフレームの列を可視化する	plt.plot(df[column], df[column])
オブジェクトは文字列か調べる	isinstance(obj, str)
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
リストの要素を逆順にする	aList[::-1]
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
主成分分析として多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
データフレームのリストカラムの要約統計量	df[aList].describe()
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
JSON形式のfをデータに変換する	json.load(fin)
直後の値でデータフレームの欠損値を置換する	df.fillna(method='bfill')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
文字列中の部分文字列の登場をカウントする	s.count(sub)
日付データからn時間を引く	aDate - datetime.timedelta(hours=n)
データフレームを欠損値を含めて列でグループ化する	df.groupby(column, dropna=False)
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
データフレームを各列毎にグループ化し、、列の最大値を計算する	df.groupby(column)[column2].max()
ヒストグラムをゴールド色を用いて描画する	plt.hist(データ列, color='gold')
ファイルを書き込み用に文字コードtextを用いて開く]	open(filepath, mode='w', encoding=text)
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームを丸めて、整数型にする	df.round().astype(int)
要素が集合に含まれるか調べる	element in aSet
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
ラベンダー色としてヒストグラムを描画する	plt.hist(データ列, color='lavender')
データフレームの欠損値を直後の値に増やす	df.fillna(method='bfill')
チョコレート色としてヒストグラムを描画する	plt.hist(データ列, color='chocolate')
両端キュー中の要素のインデックス	deq.index(element)
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
下三角印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
option: 配列のデータ型を指定する	dtype = bool
データフレームのリストカラムの分散	df[aList].var()
一度に正規表現patternでカラムをreplに置き換える	ds.replace(pattern, repl, regex=True)
タプルの先頭のn要素を取り除く	aTuple[n:]
リストと配列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
環境がMacOSかどうか調べる	sys.platform.startswith('darwin')
数式を数値計算する	float(e)
実数を実数で割って切り捨てる	x // y
データフレームのリスト列の中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
option: グラフの色をクリムゾンに設定する	color = 'crimson'
表データの中で何行重複するか見る	df.duplicated().sum()
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
折れ線グラフの大バツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
データフレームのカラムの正規分布に対する上下広がり	df[col].skew()
JSON形式の文字列を読み込む	json.loads(jsonString)
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
散布図を珊瑚色として描画する	plt.scatter(データ列x, データ列y, color='coral')
データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
プラットホームのエンコーディングを使う	sys.getdefaultencoding()
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
グラフの横軸を対数に変更する	plt.xscale('log')
option: グラフの色をサーモンに設定する	color = 'salmon'
ヒストグラムの色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
棒グラフをオレンジレッド色を使って描画する	plt.bar(データ列x, データ列y, color='orangered')
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
列のイミュータブルな集合	frozenset(iterable)
赤い一点鎖線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
空のヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
nがn2以下、または、n3以上か	n <= n2 or n >= n3
シスル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
角度のラジアン	math.radians(degree)
読み込みモードでファイルパスをオープンする]	open(filepath, mode='r')
option: フォントの色をサンディーブラウンに設定する	color = 'sandybrown'
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
データフレームのカラムは何時か見る	df[col].dt.hour
データフレームのリスト列のNaNを直後の値に設定する	df[aList].fillna(method='bfill')
option: グラフの色をハニーデューに設定する	color = 'honeydew'
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームを表示するとき、表示可能な列数の最大値をnにする	pd.set_option('display.max_columns', n)
空の集合を見る	set()
データ列は正規分布からどの程度、歪んでいるか見る	ds.kurt()
データ列の曜日が何日目か見る	ds.dt.dayofweek
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
ヒストグラムをフローラルホワイト色として描画する	plt.hist(データ列, color='floralwhite')
折れ線グラフの色をハニーデューにセットする	plt.plot(データ列x, データ列y, color='honeydew')
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
標準エラーを使う	sys.stderr
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
option: 色をライトスカイブルーに設定する	color = 'lightskyblue'
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
特異値分解として濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
横棒グラフを濃いシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
グラフの色をパステル調にする	sns.set(pallete='pastel')
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
10を底とする実数の対数	math.log10(x)
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
nで乱数シードを固定する	random.seed(n)
実数が無限大	math.isinf(x)
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
▲印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームを各列毎にグループ化し、列の分散を求める	df.groupby(column)[column2].var()
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
データフレームのカラムの文字列を未入力値にする	df[col].replace(s, np.nan)
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ふたつの辞書を合体する	aDict | aDict2
データフレームの重複していない行だけ	df[not df.duplicated(keep=False)]
実数の三乗	x ** 3
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
カテゴリで色分けして、カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
既存の配列を元にして全要素が0の行列	np.zeros_like(aArray)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームを降順に'A'列でによってソートする	df.sort_values(by='A', ascending=False)
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
２つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
配列の行ごとの平均値	np.mean(aArray, axis=1)
option: コーンズシルク色を使う	color = 'cornsilk'
ダークオレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
散布図の下三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
配列の分散を求める	np.var(aArray)
イテラブルのイミュータブルな集合	frozenset(iterable)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
マッピングをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
option: グラフの色をダークオーキッドに変更する	color = 'darkorchid'
データフレームをTSV形式でJSONLファイルに保存する	df.to_csv(filename, sep='\t')
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
ブルーバイオレット色を用いてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
第二コマンド引数を知る	sys.argv[1]
縦棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
クラス分類をアンサンブル学習でする	sklearn.ensemble.VotingClassifier()
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ヒストグラムをプロットしてビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: フォントの色をスノーに設定する	color = 'snow'
改行文字	'\n'
データフレームのリスト列を100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
符号付きで整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
データ列を四捨五入して、整数型にする	ds.round().astype(int)
option: 区切り記号を使わない	sep = ''
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の先頭でケースを無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
option: コロンをセパレータで使う	sep = ':'
散布図に黒い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
値が集合に含まれるかどうか調べる	element in aSet
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
タプルをn倍する	aTuple * n
八進文字列を整数に変換する	int(s, 8)
ヒストグラムの色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
グラフの縦横をセットする	plt.figure(figsize=(横幅, 高さ))
データフレームのリストカラムはどの程度、分散しているか見る	df[aList].var()
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
ファイルパスの入力ストリームを見る	open(filepath)
オブジェクトに属性が存在するか調べる	hasattr(obj, プロパティ名)
最大最小値としてスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ヒストグラムをマルーン色を用いて描画する	plt.hist(データ列, color='maroon')
option: シートの名前をnamesに設定する	sheet_name = names
ネイピア数	math.e
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームに重複があるか見る	df.duplicated()
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
ピーチパフ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: ピーチパフを使う	color = 'peachpuff'
リストとデータ列の散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
上限のある双方向キュー	collections.deque(maxlen=n)
両端キューに要素をプッシュする	deq.append(element)
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
日付時刻データが何日か知る	aDatetime.day
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
縦棒グラフをドジャーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
文字列がタプルの要素でないか調べる	element not in aTuple
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
ファイルパスを開き]、書き込みストリームを使う	open(filepath, mode='w')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
赤い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: ビスクを使う	color = 'bisque'
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
実数の双曲線余弦を求める	math.cosh(x)
nがn2と等しいかどうか	n == n2
コマンドラインフラグの状態	sys.flags
グラフ中の(x,y)の位置に簡単な説明を表示する	plt.legend(loc=(x, y))
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
データフレームの列名一覧で指定された列を削除する	df.drop(columns, axis=1)
データ列を100の位で丸めて、整数にする	ds.round(-2).astype(int)
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
タプルを展開してプリントする	print(*aTuple)
時間を使う	import time
グラフの使途を画面に指定する	sns.set(context='notebook')
配列の列ごとの合計値	np.sum(aArray, axis=0)
データ列のNaNをxに指定する	ds.fillna(x)
ゼロ埋めされた行列を作成する	np.zeros(要素数)
棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
ガンマ関数の値	math.gamma(x)
一点鎖線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
行列の転置行列	aArray.T
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
現在のモジュール	sys.modules[__name__]
ヒストグラムの色をディープスカイブルーに指定する	plt.hist(データ列, color='deepskyblue')
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをダーク・スラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
カラムを100の位で丸める	ds.round(-2)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
配列の列ごとの最小値	np.min(aArray, axis=0)
データフレームをTSVファイルとしてJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
ピアソンでデータフレームの相関行列	df.corr(method='pearson')
二つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
ヒストグラムをミスティローズ色を使って描画する	plt.hist(データ列, color='mistyrose')
ヒストグラムをゴールデンロッド色を用いて描画する	plt.hist(データ列, color='goldenrod')
option: グラフの色をターコイズに設定する	color = 'turquoise'
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフをホットピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='hotpink')
文字列の無限なイテラブルを得る	itertools.repeat(element)
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
日付時刻データの秒数	aDatetime.second
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
シアンで文字列をプリントする	print(f'\033[36m{value}\033[0m')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
option: バリーウッド色を使う	color = 'burlywood'
二つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
スクリプトファイルの絶対パス	os.path.abspath(__file__)
データフレームを列によってグループ化して、それぞれのグループ毎の分散を求める	df.groupby(column).var()
一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを列によってまとめたグループ	df.groupby(column)
多次元データを特異値分解を用いて濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
全要素を初期値で初期化した行列を作る	np.full(要素数, 初期値, dtype=np.int)
option: ダークスレートブルー色を使う	color = 'darkslateblue'
日付データと日付データの時間差	aDate - aDate2
データ列の四分位を可視化する	plt.boxplot(データ列)
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
option: グラフの色をライトスレイグレーにセットする	color = 'lightslategrey'
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
実行結果を白色化する	f'\033[37m{value}\033[0m'
行列の行ごとの標準偏差を算出する	np.std(aArray, axis=1)
データフレームから重複したデータを消す	df.drop_duplicates()
配列とイテラブルについて散布図を描き、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
部分文字列で文字列の開始位置以降が開始する	s.startswith(sub, start)
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
ピアソン相関係数でデータフレームの列とカラムの相関行列	df[[column, column2]].corr(method='pearson')
データフレームのリストカラムの中に存在する文字列と文字列の合計を求める	df[aList].isin([value, value2]).sum()
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
二つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
散布図の丸印の線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
リストのn番目の	aList[n]
nの八進表現	oct(n)
双方向キュー中の値のインデックス	deq.index(element)
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: 紺にグラフの色を設定する	color = 'darkblue'
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
線グラフを紺碧色を用いて描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
辞書のキー一覧を得る	list(aDict)
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
実行環境がマックかどうか調べる	sys.platform.startswith('darwin')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
文字列中の大文字を小文字にする	s.lower()
データ列の中にいくつ欠損値が存在するか数える	ds.isna().sum()
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームのカラムを100の位で四捨五入する	df[col].round(-2)
行列の合計	np.sum(aArray)
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
文字列内にひとつでも小文字が含まれるか	any(c.islower() for c in s)
青色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
大きさnで配列とリストの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
キューの末尾	deq[-1]
再帰の上限を上げる	sys.setrecursionlimit(1000000)
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
データフレーム全体をインデックスによって昇順にソートする	df.sort_index(ascending=True)
nの桁数	len(str(n))
option: ライトグレー色を使う	color = 'lightgray'
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
グリーンイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データ列が何曜日か見る	ds.dt.weekday_name
散布図をライトグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
データフレームを昇順に'A'列を用いて並べ直し、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
文字列の末尾の文字	s[-1]
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
シスルにヒストグラムの色をする	plt.hist(データ列, color='thistle')
グラフにグリッド線を入れる	plt.grid(True)
ゼロ埋めされた三二ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのリスト列の相関行列ケンドール相関係数として	df[aList].corr(method='kendall')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
四分位数ごとに配列を分割する	pd.qcut(aArray, 4)
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
option: ダークバイオレット色を使う	color = 'darkviolet'
option: ベージュ色を使う	color = 'beige'
マッピングのキーを要素に設定する	aDict[key] = element
option: ダークスレートブルーにグラフの色を指定する	color = 'darkslateblue'
実数の正接の逆数	math.atan(x)
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
キューの最初から値を取り除く	deq.popleft()
グラフの描画を見やすくする	import seaborn as sns
デフォルトでグラフのデザインをいい感じに設定する	sns.set()
実数の床	math.floor(x)
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データフレームの列名一覧	df.columns
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
ネイビー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
データフレームのリストカラムのNaNをxに設定する	df[aList].fillna(x)
option: オリーブ色を使う	color = 'olive'
小数点数の平方根を算出する	math.sqrt(x)
二次元リストをflattenする	sum(aList)
データフレームの欠損値を後の行の値に変更する	df.fillna(method='bfill')
option: ナバホホワイト色を使用する	color = 'navajowhite'
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
データフレームの列の歪度	df[col].kurt()
データフレームの列のユニークな値の個数	df[col].nunique()
データフレームの列の欠損値を中央値で置き換える	df[col].fillna(df[col].median())
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
サブセットか調べる	aSet.issubset(aSet2)
イテラブルからn個、ランダムに選ぶ	random.choices(iterable, k=n)
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
散布図に丸印を加える	plt.scatter(データ列x, データ列y, marker='o')
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
青紫色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
日付データが日曜日か調べる	aDate.weekday() == 6
標準出力のバッファをフラッシュする	sys.stdout.flush()
option: 大バツマーカーを使用する	marker = 'X'
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: 色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
ファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
代数計算モジュールを用いる	import sympy
データフレームの指定された列を配列として抽出する	df[column].values
データフレームを列の値によってグループ化してグループごとの平均値を計算する	df.groupby(column).mean()
文字列の右側から空白を除去する	s.rstrip()
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
データフレームが重複しているかどうか判定する	df.duplicated()
プログラムの実行を異常停止する	sys.exit(1)
セットから別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
既存のベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
データ列の各値は何回出現するか確認する	ds.value_counts()
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
リストを緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
option: ライトシアン色を使用する	color = 'lightcyan'
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
ファイルパスをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
文字の文字コード	ord(ch)
option: グラフの色をビスクに指定する	color = 'bisque'
option: ライトスカイブルーにフォントの色をする	color = 'lightskyblue'
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
オブジェクトは文字列クラス	isinstance(obj, str)
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ファイルパスをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
散布図としてデータフレームのカラムを見る	sns.scatterplot(data=df, x='列名', y='列名')
データ列を100の位で丸める	ds.round(-2)
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
n個に配列を等間隔でビニングする	pd.cut(aArray, n)
バイナリできるようにファイルパスを開く]	open(filepath, mode='rb')
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
浮動小数点数の逆双曲線正弦	math.asinh(x)
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
クラス分類の真陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
実数が有限か	math.isfinite(x)
データフレームの行の名前をまとめてnameからname2に変更する	df.rename(index={name: name2})
option: グラフの色をピーチパフにセットする	color = 'peachpuff'
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
データフレームの指定した列を抽出する	df[[column]]
赤い破線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
要素は辞書の値として含まれているか調べる	element in aDict.values()
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
option: 線を太くする	linewidth = 3.0
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
データフレームのリストカラムの中の未入力値の合計を数える	df[aList].isna().sum()
データを最大値として正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
初期値で全要素を初期化したベクトルを作成する	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
option: ディープスカイブルー色を使う	color = 'deepskyblue'
データフレームを各列と列の組み合わせ毎に集計して、最小値を算出する	df.groupby([column, column2], as_index=False).min()
日付時刻データが何月か知る	aDatetime.month
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
パールバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
縦棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
リストにリストを追加して拡張する	aList.extend(aList2)
データフレームを列名リストによって並べて更新する	df.sort_values(by=column, inplace=True)
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
最大最小値としてデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
ファイル名がテキストファイルかどうか調べる	filename.endswith('.txt')
option: ヘッダをnamesに変更する	header = names
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームのカラムが何曜日か確認する	df[col].dt.weekday_name
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
ヒストグラムをグリーン色を用いて描画する	plt.hist(データ列, color='green')
リストとリストを連結する	aList + aList2
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
データフレームを破壊的に2つの列で小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
横軸に軸名を付ける	plt.xlabel('x軸ラベル')
データフレームのカラムを正規表現patternでまとめて置き換える	df[col].replace(pattern, repl, regex=True)
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
データフレームのリストカラムの中にがあるか調べる	df[aList].isin([value])
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
数列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
option: マーカーを丸に変更する	marker = 'o'
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
多次元データを主成分分析を用いて濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
エポック秒のデータ列からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列x, データ列y, color='firebrick')
文字列の先頭から空白を取り除く	s.lstrip()
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
空のタプル	()
リストとリストの散布図を描いて、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
２つの文字列は等しくないか調べる	s != s2
データフレームから破壊的に重複したデータを落とす	df.drop_duplicates(inplace=True)
データフレームのカラムの平均値	df[col].mean()
データフレームの列概要を調べる	df.info()
データフレームのカラムがどの程度分散しているか調べる	df[col].var()
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
rgbの丸マーカーをイテラブルと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
全要素を０で初期化した８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
文字列の最後から部分文字列を見つける	s.rfind(sub)
散布図の▽マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
データフレームから最初の列を除く	df[df.columns[1:]]
読み込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='r')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
実数を複素数に変換する	complex(x)
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
リストと数列についての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
句点文字を全部求める	string.punctuation
標準出力を使う	sys.stdout
配列と配列の散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
列のNaNを直後の値で埋める	ds.fillna(method='bfill')
データフレームのカラムのユニークな値の個数	df[col].nunique()
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームの尖度	df.skew()
タン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
データフレームのカラムが正規分布からどれだけ、歪んでいるか確認する	df[col].kurt()
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
ヒストグラムの色をスチールブルーにする	plt.hist(データ列, color='steelblue')
ユニコードを文字に変換する	chr(unicode)
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
折れ線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='palevioletred')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
散布図に黒い▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ゴールデンロッド色を使う	color = 'goldenrod'
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
カウンタのユニークな項目を列挙する	list(aCounter)
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
nわるn2	n / n2
黒い四角マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
タプル内の要素が全て真か確認する	all(aTuple)
多次元データを特異値分解で淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
nの二乗	n ** 2
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームの上n行	df.head(n)
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
散布図の四角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列中に部分文字列が含まれる	sub in s
組の文字列が最初に見つかる場所を探す	aTuple.index(element)
整数nが配列のどれかか調べる	n in aArray
折れ線グラフに黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
ファイルパスが存在しない	not os.path.exists(filepath)
キーが辞書上で未定義	key not in aDict
nがn2か調べる	n == n2
オブジェクトは集合クラスのインスタンスか調べる	isinstance(obj, set)
データフレームの列の中にある文字列の合計を数える	df[col].isin([value]).sum()
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
データフレームの各グループごとの最小値	df.groupby(column).min()
データ列のNaNを第二四分位数で埋める	ds.fillna(ds.median())
にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
赤い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='r')
option: フォントの色をグリーンに設定する	color = 'green'
列の値でデータフレームを集計し、各グループごとの件数を知る	df.groupby(column).size()
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
rgbの▲マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 淡いピンク色色を用いる	color = 'lightpink'
データフレームのカラムの欠損値を平均値に増やす	df[col].fillna(df[col].mean())
一度にValueMapでデータフレームのカラムの値を置き換える	df[col].replace(ValueMap)
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
リストを緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
追加できるように既存のファイルをSJISで開く]	open(filepath, mode='a', encoding='shift_jis')
データフレームのリストカラムの欠損値をモードに変更する	df[aList].fillna(df[aList].mode().iloc[0])
オブジェクトは集合か	isinstance(obj, set)
無限数列	itertools.count()
3自然数の最大公約数	math.gcd(n, n2, n3)
２つの変数をプリントする	print(value, value2)
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
option: サーモンを使う	color = 'salmon'
パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ベージュ色を用いてヒストグラムを描画する	plt.hist(データ列, color='beige')
option: グラフの種類を破線に設定する	linestyle = 'dashed'
option: 色をライトスレイグレーに指定する	color = 'lightslategrey'
赤いバツマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
1行だけ改行を除いて標準入力から読む	sys.stdin.readline().rstrip()
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
option: パウダーブルー色を使う	color = 'powderblue'
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
リストの要素を捨てる	aList.clear()
リストとしてデータフレームの指定した列を取り出す	df[column].values.tolist()
２つの列の値ごとにデータフレームをグループ化し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
連続した配列の作成する	np.arange(開始値, 終了値, 等差)
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
三つの変数を順にプリントする	print(value, value2, value3)
データ列を複数横に並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
耐火レンガ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
複数行対応として正規表現をあらかじめコンパイルする	re.compile(pattern, flag=re.MULTILINE)
option: 下三角マーカーを使用する	marker = 'v'
整数nを二進表記に変換する	bin(n)
option: フォントの色をシルバーに設定する	color = 'silver'
リストを折れ線グラフを用いて可視化する	plt.plot(データ列x, データ列y)
データフレームのリスト列の欠損値を平均で補う	df[aList].fillna(df[aList].mean())
文字列を右寄せにする	s.rjust(文字列幅)
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
行列の逆行列	np.linalg.inv(aArray)
配列と数列についての散布図に黒い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
プロットに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
パパイヤウィップ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
文字列中に部分文字列があるか	sub in s
トマト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
現在が水曜日か	datetime.datetime.today().weekday() == 2
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
今日の日付	datetime.date.today()
タプル内の要素は少なくともひとつ真	any(aTuple)
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
データ列の移り変わりを半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
カラムの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
青い実線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
本日が何月か知る	datetime.datetime.today().month
リストの要素を全て集合に追加する	aSet.update(iterable)
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
カウンタを高頻出方から列挙する	aCounter.most_common()
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
Pythonパスにディレクトリを追加する	sys.path.append(dir)
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
棒グラフをアリスブルー色を使って描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ヒストグラムをライトブルー色として描画する	plt.hist(データ列, color='lightblue')
文字列中の部分文字列の登場回数を数える	s.count(sub)
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
ベクトルの累積積	np.cumprod(aArray)
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
'A'列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
辞書のキーを列挙する	list(aDict)
replに正規表現でデータフレームの列の値を置き換える	df[col].replace(pattern, repl, regex=True)
プログラムの実行を正しく終了する	sys.exit(0)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列中に非小文字があるか調べる	any(not c.islower() for c in s)
nがn2未満、またはn3以上	n < n2 or n >= n3
散布図をポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
リストとリストの散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
ヒストグラムをハニーデュー色を使って描画する	plt.hist(データ列, color='honeydew')
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
プロットにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
二次元リストをフラット化する	sum(aList)
データ列の欠損値をモードに指定する	ds.fillna(ds.mode().iloc[0])
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
行列の標準偏差	np.std(aArray)
nとn2の積	n * n2
文字列を末尾から空白で区切る	s.rsplit()
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
option: ドジャーブルー色を使用する	color = 'dodgerblue'
データ列とリストについて散布図を描いて、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
グラフのカラーテーマを全般的に濃くする	sns.set(pallete='deep')
nかけるn2を求める	n * n2
ヒストグラムをコーンフラワーブルー色を用いて描画する	plt.hist(データ列, color='cornflowerblue')
エクセルファイルファイルから全てのシートを読む	pd.read_excel(filename, sheet_name=None)
オブジェクトはリストに含まれないかどうか	element not in aList
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
オブジェクトは辞書かどうか調べる	isinstance(obj, dict)
２つのデータフレームを列'A'と列'B'をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ライトブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
文字列を空白で分割し、、文字列リストに変換する	s.split()
option: グラフの色をライトブルーに設定する	color = 'lightblue'
散布図をラベンダー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavender')
ヒストグラムをペルー色を使って描画する	plt.hist(データ列, color='peru')
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
二つの実行結果を改行で区切ってプリントする	print(value, value2, sep='\n')
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
データフレームのn行まで抽出する	df[:n]
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
折れ線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
スタックは空でないか	len(deq) != 0
文字列をファイルに書き込む	f.write(s)
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
データフレームのカラムが正規分布からどの程度歪んでいるか確認する	df[col].kurt()
プラットフォームのコードポイントの最大値を確認する	sys.maxunicode
綺麗なグラフを描画する準備をする	import seaborn as sns
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
リストと配列についての散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
要素が集合のメンバーでないか調べる	element not in aSet
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
実数の自然対数を求める	math.log(x)
eの実数乗を算出する	math.exp(x)
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
タプルは全て真	all(aTuple)
折れ線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
シスル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
データ列の空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムの色をオーキッドにセットする	plt.hist(データ列, color='orchid')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
多次元データを主成分分析で淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
イテラブルを配列にする	np.array(iterable)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
データフレームを列によって小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ハローワールドとプリントする	print('Hello World')
グラフを論文用に設定する	sns.set(context='paper')
文字列中に部分文字列が含まれるか調べる	sub in s
折れ線グラフの色を青紫に指定する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフの色をアリスブルーに指定する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
実数を切り下げて整数に変換する	math.floor(x)
データフレームの列のNaNを最大値にする	df[col].fillna(df[col].max())
ひとつでも非数字が文字列中に含まれるか調べる	any(not c.isdigit() for c in s)
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
リストからオブジェクトを取り除く	aList.remove(element)
集合のイミュータブル版	frozenset(aSet)
ファイルからストリームを開き]、fileとする	file = open(filepath)
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
データフレームを昇順に二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
縦棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
ゴーストホワイト色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: セパレータを文字列にする	sep = s
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
データフレームのリストカラムの分散を求める	df[aList].var()
折れ線グラフを半透明の一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームのデータを条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
グラフの用途を論文に設定する	sns.set(context='paper')
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
折れ線グラフに三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
配列のユニークな要素を求める	np.unique(aArray)
option: グラフの色をリネンに設定する	color = 'linen'
文字列は全て十進数字	s.isdecimal()
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
８ビット整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int8)
タプルの最後からn番目以前の部分を抽出する	aTuple[:-n]
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
散布図を左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<')
option: 文字列をセパレータで使う	sep = s
option: フォントの色をライムグリーンにセットする	color = 'limegreen'
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
ユークリッド距離	math.dist(point, point2)
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
データフレームのリスト列の欠損値をxで埋める	df[aList].fillna(x)
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
項目名がマッピング上でまだ定義されていないかどうか調べる	key not in aDict
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
散布図をダークマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
事前に正規表現をASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
option: フォントの色をシャルトリューズに設定する	color = 'chartreuse'
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: シアン色を使う	color = 'cyan'
折れ線グラフに右三角印を使用する	plt.plot(データ列x, データ列y, marker='>')
データフレームのリストカラムの値をまとめてValueMapで置き換える	df[aList].replace(ValueMap)
紺色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
データフレームのリスト列の中の未入力値の合計をカウントする	df[aList].isna().sum()
データフレームのリスト列の相関行列	df[aList].corr()
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
タプルをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
option: グラフの色をスノーに設定する	color = 'snow'
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
シーケンスの各要素に対して、predicateFuncの適用が真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
キーが辞書上で未定義か調べる	key not in aDict
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
折れ線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
リストと配列について散布図を描いて、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
分割数nとしてデータフレームの中の列を等しい量になるように分割する	pd.qcut(df[col], n)
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
文字列の右側から改行を取り除く	s.rstrip('\n')
option: ブルーバイオレット色を使う	color = 'blueviolet'
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
折れ線グラフの色を白にセットする	plt.plot(データ列x, データ列y, color='white')
option: 丸マーカーを使う	marker = 'o'
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
グリッド線を黒くする	plt.grid(color='k')
データフレームの列の欠損値をxで置換する	df[col].fillna(x)
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ファイルをSJISで書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
本日の日付時刻	datetime.datetime.today()
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
要素をキューにエンキューする	deq.appendleft(element)
二つのリストから辞書	dict(zip(aList, aList2))
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
モードでデータフレームのカラムのNaNを置き換える	df[col].fillna(df[col].mode().iloc[0])
配列の和を求める	aArray + aArray2
1行だけ標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
整数nを2進表現に変換する	bin(n)
データフレームを千の位で丸める	df.round(-3)
文字列の中でパターンにマッチした文字列をリストにする	re.findall(pattern, s)
データフレームのリスト列の相関行列スピアマンで	df[aList].corr(method='spearman')
ライトサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='lightsalmon')
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
グラフのフォントを日本語に設定する	sns.set(font='IPAexGothic')
bとn2から成るペア	(n, n2)
オブジェクトが辞書クラスのインスタンスか	isinstance(obj, dict)
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データ列の推移を赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
option: オールドレースを用いる	color = 'oldlace'
Pandasで、書式で文字列をタイムスタンプにする	pd.to_datetime(s, format='%Y-%m-%d')
文字列を文字コード列に変換する	[ord(ch) for ch in s]
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
option: タブを区切りで使う	sep = '\t'
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームをインデックスによって昇順に並べる	df.sort_index(ascending=True)
リストの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
option: グラフの色をミディアムシアグリーンにする	color = 'mediumseagreen'
データフレームを２つの列でソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
エクセルデータファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
option: ミッドナイトブルーにグラフの色を指定する	color = 'midnightblue'
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
円グラフを円にする	plt.axis('equals')
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
パスの区切り記号	os.sep
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
二つの文字列を順にプリントする	print(value, value2)
データフレームの欠損値をモードに指定する	df.fillna(df.mode().iloc[0])
真部分集合か	aSet < aSet2
行列の列	aArray[:, 列番号]
リストと配列について散布図を描画してマーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
等間隔の配列	np.arange(開始値, 終了値, 等差)
データフレームのリストカラムの中に文字列とがいくつ存在するかカウントする	df[aList].isin([value, value2]).sum()
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
文字列を複数行対応として正規表現で分ける	re.split(pattern, s, flags=re.MULTILINE)
折れ線グラフに△印を用いる	plt.plot(データ列x, データ列y, marker='^')
横棒グラフを淡い茶色色で描画する	plt.barh(データ列x, データ列y, color='tan')
行列を2次元1行に変形する	aArray.reshape(1, -1)
ヒストグラムをサーモン色を用いて描画する	plt.hist(データ列, color='salmon')
JSONを使用する	import json
文字列をカンマで分割して列挙する	s.split(',')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
データフレームの列の中にいくつ欠損値があるかカウントする	df[col].isna().sum()
option: ライトグレー色を使う	color = 'lightgrey'
文字列内にひとつでも英数字があるか調べる	any(c.isalnum() for c in s)
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
日付時刻データの日付	aDatetime.date()
文字列を部分文字列で二分する	s.partition(sub)
折れ線グラフの菱形印の線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
辞書をネスト化する	collections.ChainMap(aDict)
option: ライトグレー色を用いる	color = 'lightgrey'
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
全ての十六進数字	string.hexdigits
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
赤い四角マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
下三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームの列と列の相関行列スピアマン順位相関係数として	df[[column, column2]].corr(method='spearman')
散布図に左三角印を加える	plt.scatter(データ列x, データ列y, marker='<')
日付データと日付データの時間差を秒で算出する	(aDate - aDate2).total_seconds()//60
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図をアイボリー色を使って描画する	plt.scatter(データ列x, データ列y, color='ivory')
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
縦方向に二つのデータフレームを一つにする	pd.concat([df, df2])
折れ線グラフの丸マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ファイルを追加できるように開く]	open(filepath, mode='a')
カテゴリ列で色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
n進文字列を整数に変換する	int(s, n)
カラムの最大幅をnに減らす	pd.set_option('max_colwidth', n)
option: アンティークホワイト色を用いる	color = 'antiquewhite'
黒い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ベクトルの和を求める	aArray + aArray2
イテラブルの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
散布図をポイント印を使い、描画する	plt.scatter(データ列x, データ列y, marker='.')
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
集合に要素を追加する	aSet.add(element)
赤色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
データフレームの分散	df.var()
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
折れ線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
JSONLファイルにデータフレームをエクセルファイルファイルを使って書き込む	df.to_excel(filename)
PandasでデータフレームのcollをPandasの日付型にする	pd.to_datetime(df[col])
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
列からn個、サンプリングする	random.sample(iterable, k=n)
文字列内にひとつでも大文字がある	any(c.isupper() for c in s)
ヒストグラムをホワイトスモーク色を用いて描画する	plt.hist(データ列, color='whitesmoke')
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
２つのデータフレームを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
predicateFuncを適用したとき真となるリストの要素	itertools.dropwhile(predicateFunc, iterable)
集合をイミュータブルにする	frozenset(aSet)
ヒストグラムの上限下限を指定する	plt.hist(データ列, range=(start, end))
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
パールゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
重回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データフレームの母標準偏差	df.std(ddof=0)
nの桁数を求める	len(str(n))
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
配列の行ごとの合計	np.sum(aArray, axis=1)
データフレームからn行、サンプリングする	df.sample(n)
乱数生成系列をnで初期化する	random.seed(n)
データフレームの重複した行数のマスク	df.duplicated()
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
データ列のどの値が頻出か調べる	ds.mode()
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
データフレームを複数の列によってグループ化する	df.groupby(columns)
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
棒グラフをマゼンタ色を使って描画する	plt.bar(データ列x, データ列y, color='magenta')
ファイルパスを書き込みできるようにSJISを使ってオープンする]	open(filepath, mode='w', encoding='shift_jis')
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategray')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
縦棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
n割るn2の切り上げ	(n + n2 - 1) // n2
データフレームのNaNを第二四分位数に指定する	df.fillna(df.median())
データ列を分割数nでビニングする	pd.cut(ds, n)
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
ピアソン相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='pearson')
実数の複素数	complex(x)
rgbのクロスマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
rgbのクロスマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
タプルをJSONフォーマットでファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
データフレームのリストカラムの欠損値を前の行の値に設定する	df[aList].fillna(method='ffill')
データフレームからランダムにn行を抽出する	df.sample(n)
データ列をビン数nとしてビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
文字列はひらがなか調べる	('ぁ' <= ch <= 'ん')
数列とイテラブルについて散布図をプロットし、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
折れ線グラフでデータフレームのカラムを作図する	plt.plot(df[column], df[column])
rgbの▼マーカーをデータ列と配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
実数を実数から引く	x - y
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ダークオレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
貝殻色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
アルファベットの文字列	string.ascii_letters
データフレームのリスト列の欠損値を50パーセンタイルに設定する	df[aList].fillna(df[aList].median())
二つの集合の積集合を見る	aSet.intersection(aSet2)
データフレームを'A'列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby('A')]
最後の列をデータフレームから除く	df[df.columns[:-1]]
option: マゼンタ色を使う	color = 'magenta'
自然対数を計算する	math.log(x)
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: オレンジレッドにグラフの色を指定する	color = 'orangered'
データフレームの末尾n行を抽出する	df.tail(n)
xとyの商と余りを同時に求める	divmod(x, y)
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
タプルを反転する	reversed(aTuple)
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
集合から要素を取り除く	aSet.remove(element)
リストを反転する	reversed(aList)
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
日付データが土曜日か調べる	aDate.weekday() == 5
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
文字列が全て空白文字からなるか調べる	s.isspace()
最小値でデータフレームのリスト列のNaNを埋める	df[aList].fillna(df[aList].min())
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
作画で使うパレットを指定する	sns.set(pallete=パレット名)
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
ロバストな線形分類器を準備する	model = sklearn.linear_model.HuberClassifier()
option: バイナリモードを使う	mode = 'rb'
折れ線グラフに左三角印を使う	plt.plot(データ列x, データ列y, marker='<')
最後の部分文字列で文字列を分けた場合の先頭の文字列	s.rpartition(sub)[0]
option: オリーブを使う	color = 'olive'
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
ヒストグラムの上限下限を変更する	plt.hist(データ列, range=(start, end))
データフレームからn行をランダムに抽出する	df.sample(n)
option: 色の透明度を設定する	alpha = 0.5
プロットを全般的に淡くする	sns.set(pallete='muted')
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームを関数によってまとめたグループを見る	df.groupby(関数)
赤い上三角マーカーをリストとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
rgbの星マーカーを数列とデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
常用対数	math.log10(x)
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
データフレームの中にとがいくつ含まれるかカウントする	df.isin([value, value2]).sum()
区間から配列	np.linspace(最小値, 最大値, 要素数)
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
option: 青紫にグラフの色を設定する	color = 'violet'
CSVファイルTSVファイルをn番目の列を行として読む	pd.read_csv(filename, index_col=n)
option: 色をディムグレーに設定する	color = 'dimgrey'
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
正則化付き線形モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
列のそれぞれを関数でフィルタする	map(func, iterable)
グラフにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
文字列を最初の部分文字列で二分する	s.partition(sub)
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
散布図をカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='khaki')
データフレームを表示するとき、表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
横棒グラフを深紅色として描画する	plt.barh(データ列x, データ列y, color='crimson')
キーが辞書にあるか調べる	key not in aDict
nをn2で整数除算する	n // n2
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
行列積	np.matmul(aArray, aArray2)
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
データフレームを'A'列と'B'列によってで降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームの中の未入力値を削除する	df.dropna()
平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームを各列毎にグループ化して列の合計を求める	df.groupby(column)[column2].sum()
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
配列を中央値でビン分割する	pd.qcut(aArray, 2)
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
カラムの第二四分位数	ds.median()
平均値付きボックスチャートを描画する	plt.boxplot(データ列, showmeans=True)
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
２つの最も小さい値を算出する	min(x, y)
ライトスチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: マーカーをダイアモンドに変更する	marker = 'D'
データ列のユニークな値の個数	ds.nunique()
十六進数文字列を整数にする	int(s, 16)
折れ線グラフの色を濃いシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
nが1、もしくは2	n == 1 or n == 2
データ列をビン数nでビニングする	pd.cut(ds, n)
option: ホットピンク色を使用する	color = 'hotpink'
半透明の点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
ファイル名がTSVファイルかどうか調べる	filename.endswith('.tsv')
リストとリストの散布図を描画し、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
赤い丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
配列をn個に等量でビン分割する	pd.qcut(aArray, n)
データフレームのリスト列を10の位で四捨五入する	df[aList].round(-1)
線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
上位集合もしくは等しいか調べる	aSet > aSet2
nがn2未満、もしくはn3以上か調べる	n < n2 or n >= n3
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
データフレームのカラムの月	df[col].dt.month
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列が全て空白かどうか調べる	s.isspace()
option: インディアンレッドにフォントの色を設定する	color = 'indianred'
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
数値を数値に変換する	float(e)
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
明るく色をプロットの描画で用いる	sns.set(pallete='bright')
黒い丸マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
実数を文字列に変換する	str(x)
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームをCSVファイルを用いてJSONLファイルに保存する	df.to_csv(filename)
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
見やすいグラフを描画する	import seaborn as sns
円グラフを完全な円にする	plt.axis('equals')
要素ひとつの組	(element,)
標準入力から1行分改行なしで読み込む	sys.stdin.readline().rstrip()
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
データフレームの数値を一度に小数点以下n桁で丸める	df.round(n)
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
option: アクアマリン色を使う	color = 'aquamarine'
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
ファイルからn文字、読み込む	f.read(n)
部分文字列が文字列の終了位置より前にない	s.find(sub, 0, end) == -1
リストを３つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列が全て小文字か調べる	s.islower()
option: グリーン色を使う	color = 'green'
数列とデータ列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: 小麦色色を使う	color = 'wheat'
配列の最大値	np.max(aArray)
リストを逆順にする	aList[::-1]
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
真上位集合か調べる	aSet > aSet2
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
nullに等しい識別子	None
データフレームのカラムをグループ化してヒストグラムで描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
線の線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
予測値とデータの離れ具合を図示する	sns.residplot(x='列名', y='列名', data=df)
降順に列名リストでを用いてデータフレームをソートする	df.sort_values(by=column, ascending=False)
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
二つ並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
両端キューが空かどうか	len(deq) == 0
nの無限数列を求める	itertools.repeat(n)
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
日付時刻データの分数	aDatetime.minute
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
ヒストグラムをゴールデンロッド色を使って描画する	plt.hist(データ列, color='goldenrod')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
グラフの簡単な説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
文字列から部分文字列を全て取り除く	s.replace(sub, '')
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
両端キューの中に要素が存在する	element in deq
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
文字列の中の複数行対応として正規表現によるすべてのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
データフレームを各列とカラムの組み合わせ毎にグループ化して分散を計算する	df.groupby([column, column2], as_index=False).var()
文字列を代数計算の変数に変換する	sympy.Symbol(s)
両端キューの末尾にタプルの各要素を順に入れる	deq.extend(iterable)
タプルをカウンタに変換する	collections.Counter(aDict)
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列が文字列リストに含まれるか調べる	s in aStringList
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
グラフを用いる準備をする	import matplotlib.pyplot as plt
十六進文字列を整数に変換する	int(s, 16)
散布図をペルー色として描画する	plt.scatter(データ列x, データ列y, color='peru')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
両端キューをリストに変換する	list(deq)
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
三つの文字列を順にプリントする	print(value, value2, value3)
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
n個の整数列	list(range(n))
今日は何年か知る	datetime.datetime.today().year
option: グラフの色を青に設定する	color = 'blue'
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
整数nの十六進表現	hex(n)
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
リストと数列の散布図を描画し、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
データフレームのカラムの要約統計量	df[col].describe()
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: パパイヤウィップ色を使用する	color = 'papayawhip'
複数の列の値によってデータフレームをグループ化し、基本統計量を計算する	df.groupby(columns).describe()
入力ストリームを全て読み込む	f.read()
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
実数を実数で割った剰余	math.remainder(x, x2)
集合から要素を除去する	aSet.remove(element)
データフレームをカラムによってグループ化し、最小値を求める	df.groupby(column).min()
データ列の折れ線プロットをプロットし、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
横棒グラフをアリスブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='aliceblue')
辞書の浅いコピーを作る	aDict.copy()
データフレームの列の値がx、かつ列がx2である行を選択する	df[(df[column] == x) & (df[column2] == x2)]
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ファイルからストリームを読み込み、fileとする	file = open(filepath)
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
データフレームの欠損値をxで埋める	df.fillna(x)
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
双方向キューの要素を反転する	deq.reverse()
リストとリストについての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色をダークシアンにセットする	plt.hist(データ列, color='darkcyan')
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
縦棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
rgbの左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列ひとつのタプルを作る	(element,)
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データフレームを複数の列を用いてで破壊的にソートする	df.sort_values(by=column, inplace=True)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
文字列中に部分文字列がいくつか存在するか調べる	s.count(sub)
ダークターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
全要素を０で初期化した行列	np.zeros(行数, 列数)
黒い▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
option: グラフの色をスノーに変更する	color = 'snow'
x軸のラベルをセットする	plt.xlabel('x軸ラベル')
option: ディムグレーを使用する	color = 'dimgrey'
データフレームのリストカラムの欠損値を直前の値に変更する	df[aList].fillna(method='ffill')
option: スレートブルーを用いる	color = 'slateblue'
列の長さを制限する	collections.deque(iterable, maxlen=n)
実数が負の数かどうか調べる	x < 0
文字列にイテラブルを変換して、部分文字列で連結する	sub.join(map(str, iterable))
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
インディゴにヒストグラムの色を指定する	plt.hist(データ列, color='indigo')
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データ列の移り変わりを赤い点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: グレーを用いる	color = 'grey'
散布図にrgbの三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
多次元データを多次元尺度構成法としてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
文字列の中で複数行対応として正規表現にマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
データフレームのカラムの歪度	df[col].kurt()
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
option: 印を下三角に変える	marker = 'v'
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
グラフに鉛直方向の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
数式の微分を算出する	sympy.diff(e)
浮動小数点数に変換する	float(x)
データフレームの列の欠損値を平均値で埋める	df[col].fillna(df[col].mean())
有理数を用いる	import fractions
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
option: 色をライムに設定する	color = 'lime'
列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
実数を実数で整数除算する	x // y
文字列はタプルに含まれないかどうか確認する	element not in aTuple
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
k進対数	math.log(x, k)
option: グラフの色を淡い茶色に設定する	color = 'tan'
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
インデックスによって降順で表データをソートする	df.sort_index(ascending=False)
実数以上の最小の整数	math.ceil(x)
文字列の開始位置から終了位置の範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: シスル色を使用する	color = 'thistle'
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色をレベッカパープルに指定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: サドルブラウン色を使用する	color = 'saddlebrown'
クラス分類の感度を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
カンマ区切りのファイルTSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データフレームをグループ化し、列に対し標準偏差を算出する	df.groupby(column)[column2].std()
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
データフレームから破壊的に重複を落とす	df.drop_duplicates(inplace=True)
変数をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
リストと数列についての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
２変数の最大値	max(x, y)
数値を太字でプリントする	print(f'\033[1m{value}\033[0m')
データフレームを列によって並べ直し、、新しいインデックスを加える	df.sort_values(columns).reset_index()
線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
横棒グラフをパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='purple')
列を文字列に変換して、空白によって連結する	' '.join(map(str, iterable))
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
辞書にキーがないとき、要素を追加する	aDict.setdefault(key, element)
ファイルパスのセパレータ記号	os.sep
整数nを8進文字列に変換する	oct(n)[2:]
option: マーカーの色をライムにする	markerfacecolor = 'lime'
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
円プロットとしてデータ列のパーセントを可視化する	plt.pie(データ列, startangle=90)
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図の四角印を青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームの中のカラムを等間隔でn個にビン分割する	pd.cut(df[col], n)
option: ライトブルー色を用いる	color = 'lightblue'
変数をマゼンタで出力する	print(f'\033[35m{value}\033[0m')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
実数の双曲線余弦	math.cosh(x)
２つのリストから辞書	dict(zip(aList, aList2))
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
JSONファイルのファイルを辞書に変換する	json.load(fin)
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
モカシン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
二つの文字列は同じかどうか調べる	s == s2
データフレームを列によってグループ化してグループごとの標準偏差を求める	df.groupby(column).std()
アルファベットの大文字列	string.ascii_uppercase
赤い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
nがn2と等しい	n == n2
データフレームの平均と信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
赤い星マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
リストとリストについて散布図を描画し、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: グリーンイエローを使用する	color = 'greenyellow'
データフレームの列が文字列で終わらないデータを取り出す	df[not df[column].str.endswith(s)]
ケンドール相関係数を使ってデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
nをn2だけ増加させる	n += n2
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
列をリストに変換する	df[column].values.tolist()
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ミディアムブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
文字列が文字列より辞書順で後かどうか調べる	s > s2
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
nの三乗	n ** 3
コマンドの第２引数を調べる	sys.argv[1]
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
文字列を改行によって分割する	s.splitlines()
イテラブルを集合に変換する	set(iterable)
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
作画のx軸とy軸の比率を等しくする	plt.axis('equals')
ベクトルの分散を求める	np.var(aArray)
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
サポートベクター分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
ブラック色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
部分文字列が文字列の開始位置と終了位置の間に含まれるか調べる	s.find(sub, start, end) != -1
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
全ての空白文字	string.whitespace
データ列が何年か見る	ds.dt.year
キーがマッピングに存在する	key in aDict
カウンタの項目のカウント	aCounter[element]
下三角マーカーを用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
文字列中に非小文字が含まれるか調べる	any(not c.islower() for c in s)
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
主成分分析で多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図を黒い星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
部分文字列で文字列を末尾から区切る	s.rsplit(sub)
青紫にヒストグラムの色を変更する	plt.hist(データ列, color='violet')
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
グラフ中の(x,y)の位置にデータラベルを表示する	plt.legend(loc=(x, y))
データフレームの欠損値をメディアンにセットする	df.fillna(df.median())
データ列とデータ列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
データフレームのNaNをxで補う	df.fillna(x)
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しない	s.find(sub, start, end) == -1
行列の演算をする	import numpy as np
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データフレームのカラムの未入力値を最頻値で置換する	df[col].fillna(df[col].mode().iloc[0])
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
データ列の離れ具合を描画する	sns.residplot(x=データ列, y=データ列)
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
散布図を黒いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='k')
シーケンスから両端キューを新規生成する	collections.deque(iterable)
データフレームの列の名前を付け直す	df.rename(columns={column: name})
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
カウンタをイテラブルから作る	collections.Counter(iterable)
データ列の各データが何回出現するか確認する	ds.value_counts()
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
グラフの背景色を暗くする	sns.set(style='darkgrid')
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
ライトイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
あらかじめパターンをコンパイルする	re.compile(pattern)
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
8進文字列を整数に変換する	int(s, 8)
配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのインデックスをリセットする	df.reset_index()
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
８進数字を全て使う	string.octdigits
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
予測結果の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
マップの値を列挙する	aDict.values()
option: マーカーの大きさを変更する	markersize = 2.0
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
option: エンコーディングを文字列の示す文字コードに指定する	encoding = s
縦棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
文字列を文字リストに変換する	list(s)
オレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
文字列を最後の部分文字列で二分し、後半の文字列を見る	s.rpartition(sub)[-1]
▽印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
最頻値でデータフレームの列の欠損値を補う	df[col].fillna(df[col].mode().iloc[0])
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
辞書を階層化する	collections.ChainMap(aDict)
数列をヒストグラムにする	plt.hist(データ列)
リストの最後にリストを展開する	aList.extend(aList2)
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
option: マーカーを大バツに変更する	marker = 'X'
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフをダークオーキッド色として描画する	plt.plot(データ列x, データ列y, color='darkorchid')
nとn2の論理和を求める	n | n2
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームの列を丸めて整数型にする	df[col].round().astype(int)
シーケンスをカウントしてカウンタを更新する	aCounter.update(iterable)
オブジェクトがあるクラスのインスタンスか調べる	isinstance(obj, クラス)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームを二つの列を用いて昇順に並べて更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ファイルを絶対パスに変換する	os.path.abspath(filepath)
配列を一次元にする	aArray.flatten()
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
Pandasで、datetime64型のデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
本日のローカルな日付時刻を使う	datetime.datetime.today()
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
リストとデータ列の散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのカラムの中の欠損値の数を数える	df[col].isna().sum()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
散布図の菱形マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームを列で集約して、列の要約統計量を計算する	df.groupby(column).describe()[column2]
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
ピアソンの相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
nがセットのどれかか調べる	n in aSet
option: フォントの色をグリーンイエローに設定する	color = 'greenyellow'
辞書からカウンタを作成する	collections.Counter(aDict)
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
値を黄色にする	f'\033[33m{value}\033[0m'
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
グラフの色を濃くする	sns.set(pallete='deep')
多次元データを多次元尺度構成法でパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
ヒストグラムをダークレッド色として描画する	plt.hist(データ列, color='darkred')
データフレームをNaNを含めて列の値でグループ化する	df.groupby(column, dropna=False)
データフレームの列の中にいくつ文字列があるかカウントする	df[col].isin([value]).sum()
赤色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
日付時刻データが火曜日か	aDatetime.weekday() == 1
データフレームを各カテゴリにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの中のカラムを分割数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
シーケンスを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
データフレームのリストで指定された列の相関行列スピアマンとしてを求める	df[aList].corr(method='spearman')
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの重複を見る	df.duplicated()
ベクトルの次元数	aArray.ndim
棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
句読点文字を全部使う	string.punctuation
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
綺麗なグラフを使用する準備をする	import seaborn as sns
データフレームのリストで指定した列のヒートマップを描画する	sns.heatmap(df[aList].corr())
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
データ列は正規分布からどの程度、尖っているか確認する	ds.skew()
確率的勾配降下としてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
option: 丸マーカーを使用する	marker = 'o'
シエナ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
ターコイズ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
データ列の文字列を未入力値に変換する	ds.replace(s, np.nan)
nが2で割り切れないか調べる	n % 2 == 1
配列の標準偏差	np.std(aArray)
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
横棒グラフをダークシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームの列の欠損値を平均で置換する	df[col].fillna(df[col].mean())
ヒストグラムの色を黄緑にセットする	plt.hist(データ列, color='chartreuse')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
配列とデータ列についての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
option: 色をダークターコイズに設定する	color = 'darkturquoise'
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
nが配列のいづれかかどうか	n in aArray
option: 配列のデータ型を指定する	dtype = np.int16
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
option: グラフの色を紺碧に設定する	color = 'azure'
option: ダークカーキ色を使う	color = 'darkkhaki'
ホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='white')
データフレームの中に文字列が含まれるか調べる	df.isin([value])
option: フォントの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
配列とデータ列についてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームから指定された３つの列を取り出す	df[[column, column2, column3]]
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
線グラフをベージュ色を使って描画する	plt.plot(データ列x, データ列y, color='beige')
タブ区切りのファイルをカラムの名前を指定せず読む	pd.read_csv(filename, header=None)
リスト内の要素が全て真かどうか調べる	all(aList)
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
nをn2分の一にする	n /= n2
バイトオーダを知る	sys.byteorder
実数の逆正接を求める	math.atan(x)
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
分類結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
タプルの最初	aTuple[0]
数式の微分を求める	sympy.diff(e)
カウンタのそれぞれの文字列を、その出現回数だけリストとして得る	aCounter.elements()
nとkのコンビネーション	math.comb(n, k)
青い実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
二つの集合は集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
オリーブ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームのカラムの曜日数を求める	df[col].dt.dayofweek
折れ線グラフの色をグリーンイエローにする	plt.plot(データ列x, データ列y, color='greenyellow')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
option: アイボリー色を使う	color = 'ivory'
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームのカラムのどの値が頻出か見る	df[col].mode()
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
シエナ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
パレットトルコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
datetime64型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ベクトルにはいくつ要素があるか調べる	aArray.size
nプラスn2を算出する	n + n2
散布図の下三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: グラフの色をスラグレーに設定する	color = 'slategray'
散布図をオールドレース色を用いて描画する	plt.scatter(データ列x, データ列y, color='oldlace')
タイムスタンプデータにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
紺色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
複数行対応として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
原点から(実数,y)の距離	math.hypot(x, y)
カウンタのそれぞれの項目をそのカウントだけ列挙する	aCounter.elements()
option: グラフの種類を点線に設定する	linestyle = 'dotted'
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
色差別なく色をグラフの描画で使う	sns.set(pallete='colorblind')
パパイヤウィップ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
配列と配列リストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データ列の欠損値を最小値に変更する	ds.fillna(ds.min())
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
最大値を使って正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
タプルから項目名で指定された項目をポップする	aDict.pop(key)
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
辞書を改行付きで文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データフレームから重複したデータをドロップして、更新する	df.drop_duplicates(inplace=True)
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
データフレームのカラムの時を求める	df[col].dt.hour
データ列のpercentパーセンタイル	ds.quantile(percent/100)
nがn2より大きいか調べる	n > n2
ヒストグラムの色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
両端キューの要素をインプレースに反転する	deq.reverse()
'A'列によって小さい順にデータフレームをソートする	df.sort_values(by='A', ascending=True)
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームを使う	import pandas as pd
データ列の推移を赤い破線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
option: セパレータをタブにする	sep = '\t'
option: グラフの色をアイボリーに設定する	color = 'ivory'
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
データフレームのリスト列の中にある文字列と日付データの数を数える	df[aList].isin([value, value2]).sum()
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
option: グレーにグラフの色を設定する	color = 'grey'
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
データフレームのリストカラムのNaNを最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
オブジェクトのオブジェクト識別子	id(obj)
グラフをデフォルトでいい感じに変更する	sns.set()
